uint64_t CMMsl::KappaZgResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = this;
  v4 = *(_QWORD *)(this + 164);
  if ((v4 & 0x100000000) != 0)
  {
    this = PB::Writer::write(a2);
    v4 = *(_QWORD *)(v3 + 164);
    if ((v4 & 0x100000) == 0)
    {
LABEL_3:
      if ((v4 & 0x80000) == 0)
        goto LABEL_4;
      goto LABEL_37;
    }
  }
  else if ((v4 & 0x100000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x80000) == 0)
  {
LABEL_4:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_5;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_5:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_6;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 128));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_7;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 148));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_7:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(float *)(v3 + 136));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_8:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_9;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(float *)(v3 + 156));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x200000) == 0)
      goto LABEL_10;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 144));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x200000) == 0)
  {
LABEL_10:
    if ((v4 & 0x400000) == 0)
      goto LABEL_11;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x400000) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0)
      goto LABEL_12;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x10) == 0)
  {
LABEL_12:
    if ((v4 & 8) == 0)
      goto LABEL_13;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 8) == 0)
  {
LABEL_13:
    if ((v4 & 4) == 0)
      goto LABEL_14;
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 4) == 0)
  {
LABEL_14:
    if ((v4 & 0x8000) == 0)
      goto LABEL_15;
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x8000) == 0)
  {
LABEL_15:
    if ((v4 & 0x20000) == 0)
      goto LABEL_16;
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x20000) == 0)
  {
LABEL_16:
    if ((v4 & 0x10000) == 0)
      goto LABEL_17;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(float *)(v3 + 100));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x10000) == 0)
  {
LABEL_17:
    if ((v4 & 0x40000) == 0)
      goto LABEL_18;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x40000) == 0)
  {
LABEL_18:
    if ((v4 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(float *)(v3 + 104));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x4000) == 0)
  {
LABEL_19:
    if ((v4 & 0x40) == 0)
      goto LABEL_20;
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(float *)(v3 + 88));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x40) == 0)
  {
LABEL_20:
    if ((v4 & 0x80) == 0)
      goto LABEL_21;
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x80) == 0)
  {
LABEL_21:
    if ((v4 & 0x800) == 0)
      goto LABEL_22;
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x800) == 0)
  {
LABEL_22:
    if ((v4 & 0x1000) == 0)
      goto LABEL_23;
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::write(a2, *(float *)(v3 + 76));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x1000) == 0)
  {
LABEL_23:
    if ((v4 & 0x2000) == 0)
      goto LABEL_24;
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::write(a2, *(float *)(v3 + 80));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x2000) == 0)
  {
LABEL_24:
    if ((v4 & 0x100) == 0)
      goto LABEL_25;
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(float *)(v3 + 84));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x100) == 0)
  {
LABEL_25:
    if ((v4 & 0x200) == 0)
      goto LABEL_26;
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::write(a2, *(float *)(v3 + 64));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x200) == 0)
  {
LABEL_26:
    if ((v4 & 0x400) == 0)
      goto LABEL_27;
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(float *)(v3 + 68));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x400) == 0)
  {
LABEL_27:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_28;
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::write(a2, *(float *)(v3 + 72));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_28:
    if ((v4 & 0x800000) == 0)
      goto LABEL_29;
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::write(a2, *(float *)(v3 + 140));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x800000) == 0)
  {
LABEL_29:
    if ((v4 & 0x20) == 0)
      goto LABEL_30;
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x20) == 0)
  {
LABEL_30:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_31;
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_32;
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::write(a2, *(float *)(v3 + 132));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_32:
    if ((v4 & 1) == 0)
      goto LABEL_33;
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::write(a2, *(float *)(v3 + 152));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 1) == 0)
  {
LABEL_33:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_66:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_QWORD *)(v3 + 164) & 2) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::KappaZgResult::hash_value(CMMsl::KappaZgResult *this)
{
  uint64_t v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float v45;
  uint64_t v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v1 = *(_QWORD *)((char *)this + 164);
  if ((v1 & 0x100000000) != 0)
  {
    v2 = *((unsigned __int8 *)this + 160);
    if ((v1 & 0x100000) != 0)
    {
LABEL_3:
      v57 = *((unsigned int *)this + 28);
      if ((v1 & 0x80000) != 0)
        goto LABEL_4;
      goto LABEL_85;
    }
  }
  else
  {
    v2 = 0;
    if ((v1 & 0x100000) != 0)
      goto LABEL_3;
  }
  v57 = 0;
  if ((v1 & 0x80000) != 0)
  {
LABEL_4:
    v56 = *((unsigned int *)this + 27);
    if ((v1 & 0x1000000) != 0)
      goto LABEL_5;
LABEL_86:
    v55 = 0;
    if ((v1 & 0x20000000) != 0)
      goto LABEL_8;
LABEL_87:
    v54 = 0;
    if ((v1 & 0x4000000) != 0)
      goto LABEL_11;
LABEL_88:
    v53 = 0;
    if ((v1 & 0x80000000) != 0)
      goto LABEL_14;
LABEL_89:
    v52 = 0;
    if ((v1 & 0x10000000) != 0)
      goto LABEL_17;
LABEL_90:
    v12 = 0;
    if ((v1 & 0x200000) != 0)
      goto LABEL_21;
    goto LABEL_91;
  }
LABEL_85:
  v56 = 0;
  if ((v1 & 0x1000000) == 0)
    goto LABEL_86;
LABEL_5:
  v3 = *((float *)this + 32);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  v55 = v4;
  if ((v1 & 0x20000000) == 0)
    goto LABEL_87;
LABEL_8:
  v5 = *((float *)this + 37);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  v54 = v6;
  if ((v1 & 0x4000000) == 0)
    goto LABEL_88;
LABEL_11:
  v7 = *((float *)this + 34);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  v53 = v8;
  if ((v1 & 0x80000000) == 0)
    goto LABEL_89;
LABEL_14:
  v9 = *((float *)this + 39);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  v52 = v10;
  if ((v1 & 0x10000000) == 0)
    goto LABEL_90;
LABEL_17:
  v11 = *((float *)this + 36);
  if (v11 == 0.0)
    v12 = 0;
  else
    v12 = LODWORD(v11);
  if ((v1 & 0x200000) != 0)
  {
LABEL_21:
    v13 = *((int *)this + 29);
    if ((v1 & 0x400000) != 0)
      goto LABEL_22;
    goto LABEL_92;
  }
LABEL_91:
  v13 = 0;
  if ((v1 & 0x400000) != 0)
  {
LABEL_22:
    v14 = *((unsigned int *)this + 30);
    if ((v1 & 0x10) != 0)
      goto LABEL_23;
    goto LABEL_93;
  }
LABEL_92:
  v14 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_23:
    v15 = *((_QWORD *)this + 5);
    if ((v1 & 8) != 0)
      goto LABEL_24;
    goto LABEL_94;
  }
LABEL_93:
  v15 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_24:
    v16 = *((_QWORD *)this + 4);
    if ((v1 & 4) != 0)
      goto LABEL_25;
    goto LABEL_95;
  }
LABEL_94:
  v16 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_25:
    v17 = *((_QWORD *)this + 3);
    if ((v1 & 0x8000) != 0)
      goto LABEL_26;
    goto LABEL_96;
  }
LABEL_95:
  v17 = 0;
  if ((v1 & 0x8000) != 0)
  {
LABEL_26:
    v18 = *((unsigned int *)this + 23);
    if ((v1 & 0x20000) != 0)
      goto LABEL_27;
LABEL_97:
    v20 = 0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_31;
    goto LABEL_98;
  }
LABEL_96:
  v18 = 0;
  if ((v1 & 0x20000) == 0)
    goto LABEL_97;
LABEL_27:
  v19 = *((float *)this + 25);
  if (v19 == 0.0)
    v20 = 0;
  else
    v20 = LODWORD(v19);
  if ((v1 & 0x10000) != 0)
  {
LABEL_31:
    v21 = *((unsigned int *)this + 24);
    if ((v1 & 0x40000) != 0)
      goto LABEL_32;
LABEL_99:
    v23 = 0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_36;
LABEL_100:
    v25 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_40;
LABEL_101:
    v27 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_44;
    goto LABEL_102;
  }
LABEL_98:
  v21 = 0;
  if ((v1 & 0x40000) == 0)
    goto LABEL_99;
LABEL_32:
  v22 = *((float *)this + 26);
  if (v22 == 0.0)
    v23 = 0;
  else
    v23 = LODWORD(v22);
  if ((v1 & 0x4000) == 0)
    goto LABEL_100;
LABEL_36:
  v24 = *((float *)this + 22);
  if (v24 == 0.0)
    v25 = 0;
  else
    v25 = LODWORD(v24);
  if ((v1 & 0x40) == 0)
    goto LABEL_101;
LABEL_40:
  v26 = *((float *)this + 14);
  if (v26 == 0.0)
    v27 = 0;
  else
    v27 = LODWORD(v26);
  if ((v1 & 0x80) != 0)
  {
LABEL_44:
    v28 = *((int *)this + 15);
    if ((v1 & 0x800) != 0)
      goto LABEL_45;
LABEL_103:
    v30 = 0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_49;
LABEL_104:
    v32 = 0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_53;
LABEL_105:
    v34 = 0;
    if ((v1 & 0x100) != 0)
      goto LABEL_57;
LABEL_106:
    v36 = 0;
    if ((v1 & 0x200) != 0)
      goto LABEL_61;
LABEL_107:
    v38 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_65;
LABEL_108:
    v40 = 0;
    if ((v1 & 0x8000000) != 0)
      goto LABEL_69;
LABEL_109:
    v42 = 0;
    if ((v1 & 0x800000) != 0)
      goto LABEL_73;
    goto LABEL_110;
  }
LABEL_102:
  v28 = 0;
  if ((v1 & 0x800) == 0)
    goto LABEL_103;
LABEL_45:
  v29 = *((float *)this + 19);
  if (v29 == 0.0)
    v30 = 0;
  else
    v30 = LODWORD(v29);
  if ((v1 & 0x1000) == 0)
    goto LABEL_104;
LABEL_49:
  v31 = *((float *)this + 20);
  if (v31 == 0.0)
    v32 = 0;
  else
    v32 = LODWORD(v31);
  if ((v1 & 0x2000) == 0)
    goto LABEL_105;
LABEL_53:
  v33 = *((float *)this + 21);
  if (v33 == 0.0)
    v34 = 0;
  else
    v34 = LODWORD(v33);
  if ((v1 & 0x100) == 0)
    goto LABEL_106;
LABEL_57:
  v35 = *((float *)this + 16);
  if (v35 == 0.0)
    v36 = 0;
  else
    v36 = LODWORD(v35);
  if ((v1 & 0x200) == 0)
    goto LABEL_107;
LABEL_61:
  v37 = *((float *)this + 17);
  if (v37 == 0.0)
    v38 = 0;
  else
    v38 = LODWORD(v37);
  if ((v1 & 0x400) == 0)
    goto LABEL_108;
LABEL_65:
  v39 = *((float *)this + 18);
  if (v39 == 0.0)
    v40 = 0;
  else
    v40 = LODWORD(v39);
  if ((v1 & 0x8000000) == 0)
    goto LABEL_109;
LABEL_69:
  v41 = *((float *)this + 35);
  if (v41 == 0.0)
    v42 = 0;
  else
    v42 = LODWORD(v41);
  if ((v1 & 0x800000) != 0)
  {
LABEL_73:
    v43 = *((int *)this + 31);
    if ((v1 & 0x20) != 0)
      goto LABEL_74;
    goto LABEL_111;
  }
LABEL_110:
  v43 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_74:
    v44 = *((_QWORD *)this + 6);
    if ((v1 & 0x2000000) != 0)
      goto LABEL_75;
LABEL_112:
    v46 = 0;
    if ((v1 & 0x40000000) != 0)
      goto LABEL_78;
LABEL_113:
    v48 = 0;
    if ((v1 & 1) != 0)
      goto LABEL_81;
LABEL_114:
    v49 = 0;
    if ((v1 & 2) != 0)
      goto LABEL_82;
LABEL_115:
    v50 = 0;
    return v57 ^ v2 ^ v56 ^ v55 ^ v54 ^ v53 ^ v52 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v20 ^ v21 ^ v23 ^ v25 ^ v27 ^ v28 ^ v30 ^ v32 ^ v34 ^ v36 ^ v38 ^ v40 ^ v42 ^ v43 ^ v44 ^ v46 ^ v48 ^ v49 ^ v50;
  }
LABEL_111:
  v44 = 0;
  if ((v1 & 0x2000000) == 0)
    goto LABEL_112;
LABEL_75:
  v45 = *((float *)this + 33);
  v46 = LODWORD(v45);
  if (v45 == 0.0)
    v46 = 0;
  if ((v1 & 0x40000000) == 0)
    goto LABEL_113;
LABEL_78:
  v47 = *((float *)this + 38);
  v48 = LODWORD(v47);
  if (v47 == 0.0)
    v48 = 0;
  if ((v1 & 1) == 0)
    goto LABEL_114;
LABEL_81:
  v49 = *((_QWORD *)this + 1);
  if ((v1 & 2) == 0)
    goto LABEL_115;
LABEL_82:
  v50 = *((_QWORD *)this + 2);
  return v57 ^ v2 ^ v56 ^ v55 ^ v54 ^ v53 ^ v52 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v20 ^ v21 ^ v23 ^ v25 ^ v27 ^ v28 ^ v30 ^ v32 ^ v34 ^ v36 ^ v38 ^ v40 ^ v42 ^ v43 ^ v44 ^ v46 ^ v48 ^ v49 ^ v50;
}

void CMMsl::KeyboardAttached::~KeyboardAttached(CMMsl::KeyboardAttached *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::KeyboardAttached::KeyboardAttached(uint64_t this, const CMMsl::KeyboardAttached *a2)
{
  char v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)this = &off_25135EE48;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_BYTE *)a2 + 16);
    *(_BYTE *)(this + 20) = v2;
    *(_BYTE *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::KeyboardAttached::operator=(uint64_t a1, uint64_t a2, double a3)
{
  char v3;
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  _QWORD v10[2];
  char v11;
  int v12;

  if (a1 != a2)
  {
    v10[0] = &off_25135EE48;
    v12 = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      LOBYTE(v12) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        v3 = *(_BYTE *)(a2 + 16);
        LOBYTE(v12) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_6;
    }
    v7 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v12;
    v12 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    *(double *)(a1 + 8) = a3;
    v10[1] = v8;
    LOBYTE(v7) = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v3;
    v11 = v7;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::KeyboardAttached *a2, CMMsl::KeyboardAttached *a3)
{
  int v3;
  double result;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  LOBYTE(v3) = *((_BYTE *)this + 16);
  *((_BYTE *)this + 16) = *((_BYTE *)a2 + 16);
  *((_BYTE *)a2 + 16) = v3;
  return result;
}

double CMMsl::KeyboardAttached::KeyboardAttached(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135EE48;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135EE48;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return result;
}

uint64_t CMMsl::KeyboardAttached::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  _QWORD v9[2];
  char v10;
  int v11;

  if (a1 != a2)
  {
    v9[0] = &off_25135EE48;
    v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_BYTE *)(a2 + 16);
    v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    v11 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v9[1] = v7;
    LOBYTE(v3) = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v5;
    v10 = v3;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::KeyboardAttached::formatText(CMMsl::KeyboardAttached *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "attached");
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KeyboardAttached::readFrom(CMMsl::KeyboardAttached *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v20;
  BOOL v21;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_26;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v21 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v21 = v20 != 0;
        }
        *((_BYTE *)this + 16) = v21;
      }
      else if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_26:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_26;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::KeyboardAttached::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(a2);
  return this;
}

uint64_t CMMsl::KeyboardAttached::hash_value(CMMsl::KeyboardAttached *this)
{
  double v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v2 = 0;
    return v2 ^ *(_QWORD *)&v1;
  }
  v1 = 0.0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((unsigned __int8 *)this + 16);
  return v2 ^ *(_QWORD *)&v1;
}

void CMMsl::KeyboardKeyPress::~KeyboardKeyPress(CMMsl::KeyboardKeyPress *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::KeyboardKeyPress::KeyboardKeyPress(uint64_t this, const CMMsl::KeyboardKeyPress *a2)
{
  char v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)this = &off_25135EE80;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_BYTE *)a2 + 16);
    *(_BYTE *)(this + 20) = v2;
    *(_BYTE *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::KeyboardKeyPress::operator=(uint64_t a1, uint64_t a2, double a3)
{
  char v3;
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  _QWORD v10[2];
  char v11;
  int v12;

  if (a1 != a2)
  {
    v10[0] = &off_25135EE80;
    v12 = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      LOBYTE(v12) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        v3 = *(_BYTE *)(a2 + 16);
        LOBYTE(v12) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_6;
    }
    v7 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v12;
    v12 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    *(double *)(a1 + 8) = a3;
    v10[1] = v8;
    LOBYTE(v7) = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v3;
    v11 = v7;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::KeyboardKeyPress *a2, CMMsl::KeyboardKeyPress *a3)
{
  int v3;
  double result;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  LOBYTE(v3) = *((_BYTE *)this + 16);
  *((_BYTE *)this + 16) = *((_BYTE *)a2 + 16);
  *((_BYTE *)a2 + 16) = v3;
  return result;
}

double CMMsl::KeyboardKeyPress::KeyboardKeyPress(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135EE80;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135EE80;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return result;
}

uint64_t CMMsl::KeyboardKeyPress::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  _QWORD v9[2];
  char v10;
  int v11;

  if (a1 != a2)
  {
    v9[0] = &off_25135EE80;
    v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_BYTE *)(a2 + 16);
    v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    v11 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v9[1] = v7;
    LOBYTE(v3) = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v5;
    v10 = v3;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::KeyboardKeyPress::formatText(CMMsl::KeyboardKeyPress *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "keyPressedDown");
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KeyboardKeyPress::readFrom(CMMsl::KeyboardKeyPress *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v20;
  BOOL v21;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_26;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v21 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v21 = v20 != 0;
        }
        *((_BYTE *)this + 16) = v21;
      }
      else if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_26:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_26;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::KeyboardKeyPress::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(a2);
  return this;
}

uint64_t CMMsl::KeyboardKeyPress::hash_value(CMMsl::KeyboardKeyPress *this)
{
  double v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v2 = 0;
    return v2 ^ *(_QWORD *)&v1;
  }
  v1 = 0.0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((unsigned __int8 *)this + 16);
  return v2 ^ *(_QWORD *)&v1;
}

void CMMsl::KeyboardMotionFeatures::~KeyboardMotionFeatures(CMMsl::KeyboardMotionFeatures *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::KeyboardMotionFeatures::KeyboardMotionFeatures(CMMsl::KeyboardMotionFeatures *this, const CMMsl::KeyboardMotionFeatures *a2)
{
  char v2;
  char v3;
  uint64_t v4;

  *(_QWORD *)this = &off_25135EEB8;
  *((_DWORD *)this + 7) = 0;
  v2 = *((_BYTE *)a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 28) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 28) & 2) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((_BYTE *)this + 28) = v3;
    *((_DWORD *)this + 4) = v4;
    v2 = *((_BYTE *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *((_BYTE *)this + 28) = v3;
    *((_DWORD *)this + 5) = v4;
    if ((*((_BYTE *)a2 + 28) & 8) == 0)
      return *(float *)&v4;
  }
  else if ((v2 & 8) == 0)
  {
    return *(float *)&v4;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  *((_BYTE *)this + 28) = v3 | 8;
  *((_DWORD *)this + 6) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::KeyboardMotionFeatures::operator=(uint64_t a1, const CMMsl::KeyboardMotionFeatures *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;

  if ((const CMMsl::KeyboardMotionFeatures *)a1 != a2)
  {
    CMMsl::KeyboardMotionFeatures::KeyboardMotionFeatures((CMMsl::KeyboardMotionFeatures *)&v9, a2);
    v3 = v11;
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v10;
    *(_QWORD *)(a1 + 16) = v3;
    v6 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v13;
    v13 = v6;
    v10 = v4;
    v11 = v5;
    v7 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v12;
    v12 = v7;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KeyboardMotionFeatures *a2, CMMsl::KeyboardMotionFeatures *a3)
{
  int v3;
  uint64_t v4;
  float result;

  v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  return result;
}

float CMMsl::KeyboardMotionFeatures::KeyboardMotionFeatures(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135EEB8;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_25135EEB8;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

uint64_t CMMsl::KeyboardMotionFeatures::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD v9[3];
  int v10;
  int v11;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    v4 = *(_DWORD *)(a2 + 24);
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    v9[0] = &off_25135EEB8;
    v11 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v3;
    v9[1] = v5;
    v9[2] = v6;
    v7 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v4;
    v10 = v7;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::KeyboardMotionFeatures::formatText(CMMsl::KeyboardMotionFeatures *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "accelFilterX", *((float *)this + 4));
    v5 = *((_BYTE *)this + 28);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "accelFilterZ", *((float *)this + 6));
      if ((*((_BYTE *)this + 28) & 1) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "accelFilterY", *((float *)this + 5));
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 8) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 1) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KeyboardMotionFeatures::readFrom(CMMsl::KeyboardMotionFeatures *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_38;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 28) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        v2 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_37;
      case 2u:
        *((_BYTE *)this + 28) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 3u:
        *((_BYTE *)this + 28) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 4u:
        *((_BYTE *)this + 28) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_36:
          v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_37:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_34:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_38:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::KeyboardMotionFeatures::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 28);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 24));
  }
LABEL_8:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  if ((*(_BYTE *)(v3 + 28) & 8) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 24));
  return this;
}

uint64_t CMMsl::KeyboardMotionFeatures::hash_value(CMMsl::KeyboardMotionFeatures *this)
{
  double v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;

  if ((*((_BYTE *)this + 28) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 28) & 2) != 0)
      goto LABEL_3;
LABEL_15:
    v3 = 0;
    if ((*((_BYTE *)this + 28) & 4) != 0)
      goto LABEL_6;
    goto LABEL_16;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 28) & 2) == 0)
    goto LABEL_15;
LABEL_3:
  v2 = *((float *)this + 4);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 28) & 4) != 0)
  {
LABEL_6:
    v4 = *((float *)this + 5);
    v5 = LODWORD(v4);
    if (v4 == 0.0)
      v5 = 0;
    if ((*((_BYTE *)this + 28) & 8) != 0)
      goto LABEL_9;
LABEL_17:
    v7 = 0;
    return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7;
  }
LABEL_16:
  v5 = 0;
  if ((*((_BYTE *)this + 28) & 8) == 0)
    goto LABEL_17;
LABEL_9:
  v6 = *((float *)this + 6);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7;
}

void CMMsl::KeyboardMotionState::~KeyboardMotionState(CMMsl::KeyboardMotionState *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::KeyboardMotionState::KeyboardMotionState(uint64_t this, const CMMsl::KeyboardMotionState *a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)this = &off_25135EEF0;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::KeyboardMotionState::operator=(uint64_t a1, uint64_t a2, double a3)
{
  int v3;
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  uint64_t v12;

  if (a1 != a2)
  {
    v11[0] = &off_25135EEF0;
    HIDWORD(v12) = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      BYTE4(v12) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        v3 = *(_DWORD *)(a2 + 16);
        BYTE4(v12) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_6;
    }
    v7 = HIDWORD(v12);
    v8 = *(_QWORD *)(a1 + 8);
    v9 = *(_QWORD *)(a1 + 16);
    *(double *)(a1 + 8) = a3;
    *(_DWORD *)(a1 + 16) = v3;
    *(_DWORD *)(a1 + 20) = v7;
    v11[1] = v8;
    v12 = v9;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::KeyboardMotionState *a2, CMMsl::KeyboardMotionState *a3)
{
  int v3;
  double result;
  int v5;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  return result;
}

double CMMsl::KeyboardMotionState::KeyboardMotionState(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135EEF0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135EEF0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::KeyboardMotionState::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  if (a1 != a2)
  {
    v8[0] = &off_25135EEF0;
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    v8[1] = v5;
    v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::KeyboardMotionState::formatText(CMMsl::KeyboardMotionState *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "state");
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KeyboardMotionState::readFrom(CMMsl::KeyboardMotionState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_26;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v26 = 0;
          v27 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_47;
            }
            v28 = v20++;
            v29 = *(_BYTE *)(v21 + v28);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0)
              break;
            v26 += 7;
            v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
LABEL_46:
          v2 = v28 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)a2 + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 4) = v24;
      }
      else if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_26:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_26;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::KeyboardMotionState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::KeyboardMotionState::hash_value(CMMsl::KeyboardMotionState *this)
{
  double v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v2 = 0;
    return v2 ^ *(_QWORD *)&v1;
  }
  v1 = 0.0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((unsigned int *)this + 4);
  return v2 ^ *(_QWORD *)&v1;
}

void CMMsl::KeyboardMotionTrackpad::~KeyboardMotionTrackpad(CMMsl::KeyboardMotionTrackpad *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::KeyboardMotionTrackpad::KeyboardMotionTrackpad(uint64_t this, const CMMsl::KeyboardMotionTrackpad *a2)
{
  char v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)this = &off_25135EF28;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_BYTE *)a2 + 16);
    *(_BYTE *)(this + 20) = v2;
    *(_BYTE *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::KeyboardMotionTrackpad::operator=(uint64_t a1, uint64_t a2, double a3)
{
  char v3;
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  _QWORD v10[2];
  char v11;
  int v12;

  if (a1 != a2)
  {
    v10[0] = &off_25135EF28;
    v12 = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      LOBYTE(v12) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        v3 = *(_BYTE *)(a2 + 16);
        LOBYTE(v12) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_6;
    }
    v7 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v12;
    v12 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    *(double *)(a1 + 8) = a3;
    v10[1] = v8;
    LOBYTE(v7) = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v3;
    v11 = v7;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::KeyboardMotionTrackpad *a2, CMMsl::KeyboardMotionTrackpad *a3)
{
  int v3;
  double result;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  LOBYTE(v3) = *((_BYTE *)this + 16);
  *((_BYTE *)this + 16) = *((_BYTE *)a2 + 16);
  *((_BYTE *)a2 + 16) = v3;
  return result;
}

double CMMsl::KeyboardMotionTrackpad::KeyboardMotionTrackpad(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135EF28;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135EF28;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return result;
}

uint64_t CMMsl::KeyboardMotionTrackpad::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  _QWORD v9[2];
  char v10;
  int v11;

  if (a1 != a2)
  {
    v9[0] = &off_25135EF28;
    v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_BYTE *)(a2 + 16);
    v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    v11 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v9[1] = v7;
    LOBYTE(v3) = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v5;
    v10 = v3;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::KeyboardMotionTrackpad::formatText(CMMsl::KeyboardMotionTrackpad *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "touchActive");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KeyboardMotionTrackpad::readFrom(CMMsl::KeyboardMotionTrackpad *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v20;
  BOOL v21;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_26;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v21 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v21 = v20 != 0;
        }
        *((_BYTE *)this + 16) = v21;
      }
      else if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_26:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_26;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::KeyboardMotionTrackpad::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(a2);
  return this;
}

uint64_t CMMsl::KeyboardMotionTrackpad::hash_value(CMMsl::KeyboardMotionTrackpad *this)
{
  double v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v2 = 0;
    return v2 ^ *(_QWORD *)&v1;
  }
  v1 = 0.0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((unsigned __int8 *)this + 16);
  return v2 ^ *(_QWORD *)&v1;
}

void CMMsl::LSLHeadingEstimation::~LSLHeadingEstimation(CMMsl::LSLHeadingEstimation *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_25135EF60;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::LSLHeadingEstimation::~LSLHeadingEstimation(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::LSLHeadingEstimation *CMMsl::LSLHeadingEstimation::LSLHeadingEstimation(CMMsl::LSLHeadingEstimation *this, const CMMsl::LSLHeadingEstimation *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  __int16 v6;
  __int16 v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)this = &off_25135EF60;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (_QWORD *)((char *)this + 8);
  *(_OWORD *)((char *)this + 56) = 0u;
  v5 = (_QWORD *)((char *)this + 56);
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 23) = 0xFFFFFFFFLL;
  *((_DWORD *)this + 48) = 0;
  v6 = *((_WORD *)a2 + 96);
  if ((v6 & 0x4000) != 0)
  {
    v8 = *((_DWORD *)a2 + 47);
    v7 = 0x4000;
    *((_WORD *)this + 96) = 0x4000;
    *((_DWORD *)this + 47) = v8;
    v6 = *((_WORD *)a2 + 96);
    if ((v6 & 0x1000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v7 = 0;
  if ((*((_WORD *)a2 + 96) & 0x1000) != 0)
  {
LABEL_5:
    v9 = *((_QWORD *)a2 + 22);
    v7 |= 0x1000u;
    *((_WORD *)this + 96) = v7;
    *((_QWORD *)this + 22) = v9;
    v6 = *((_WORD *)a2 + 96);
  }
LABEL_6:
  if ((v6 & 0x40) != 0)
  {
    v10 = *((_QWORD *)a2 + 16);
    *((_WORD *)this + 96) = v7 | 0x40;
    *((_QWORD *)this + 16) = v10;
  }
  if (this != a2)
  {
    sub_2429111C4((_QWORD *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3);
    sub_2429111C4(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
    sub_2429111C4(v5, *((char **)a2 + 7), *((char **)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 3);
  }
  v11 = *((_WORD *)a2 + 96);
  if ((v11 & 2) != 0)
  {
    v14 = *((_QWORD *)a2 + 11);
    *((_WORD *)this + 96) |= 2u;
    *((_QWORD *)this + 11) = v14;
    v11 = *((_WORD *)a2 + 96);
    if ((v11 & 0x2000) == 0)
    {
LABEL_12:
      if ((v11 & 4) == 0)
        goto LABEL_13;
      goto LABEL_26;
    }
  }
  else if ((*((_WORD *)a2 + 96) & 0x2000) == 0)
  {
    goto LABEL_12;
  }
  v15 = *((_DWORD *)a2 + 46);
  *((_WORD *)this + 96) |= 0x2000u;
  *((_DWORD *)this + 46) = v15;
  v11 = *((_WORD *)a2 + 96);
  if ((v11 & 4) == 0)
  {
LABEL_13:
    if ((v11 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_27;
  }
LABEL_26:
  v16 = *((_QWORD *)a2 + 12);
  *((_WORD *)this + 96) |= 4u;
  *((_QWORD *)this + 12) = v16;
  v11 = *((_WORD *)a2 + 96);
  if ((v11 & 0x10) == 0)
  {
LABEL_14:
    if ((v11 & 1) == 0)
      goto LABEL_15;
    goto LABEL_28;
  }
LABEL_27:
  v17 = *((_QWORD *)a2 + 14);
  *((_WORD *)this + 96) |= 0x10u;
  *((_QWORD *)this + 14) = v17;
  v11 = *((_WORD *)a2 + 96);
  if ((v11 & 1) == 0)
  {
LABEL_15:
    if ((v11 & 8) == 0)
      goto LABEL_16;
    goto LABEL_29;
  }
LABEL_28:
  v18 = *((_QWORD *)a2 + 10);
  *((_WORD *)this + 96) |= 1u;
  *((_QWORD *)this + 10) = v18;
  v11 = *((_WORD *)a2 + 96);
  if ((v11 & 8) == 0)
  {
LABEL_16:
    if ((v11 & 0x20) == 0)
      goto LABEL_17;
    goto LABEL_30;
  }
LABEL_29:
  v19 = *((_QWORD *)a2 + 13);
  *((_WORD *)this + 96) |= 8u;
  *((_QWORD *)this + 13) = v19;
  v11 = *((_WORD *)a2 + 96);
  if ((v11 & 0x20) == 0)
  {
LABEL_17:
    if ((v11 & 0x800) == 0)
      goto LABEL_18;
    goto LABEL_31;
  }
LABEL_30:
  v20 = *((_QWORD *)a2 + 15);
  *((_WORD *)this + 96) |= 0x20u;
  *((_QWORD *)this + 15) = v20;
  v11 = *((_WORD *)a2 + 96);
  if ((v11 & 0x800) == 0)
  {
LABEL_18:
    if ((v11 & 0x80) == 0)
      goto LABEL_19;
    goto LABEL_32;
  }
LABEL_31:
  v21 = *((_QWORD *)a2 + 21);
  *((_WORD *)this + 96) |= 0x800u;
  *((_QWORD *)this + 21) = v21;
  v11 = *((_WORD *)a2 + 96);
  if ((v11 & 0x80) == 0)
  {
LABEL_19:
    if ((v11 & 0x100) == 0)
      goto LABEL_20;
    goto LABEL_33;
  }
LABEL_32:
  v22 = *((_QWORD *)a2 + 17);
  *((_WORD *)this + 96) |= 0x80u;
  *((_QWORD *)this + 17) = v22;
  v11 = *((_WORD *)a2 + 96);
  if ((v11 & 0x100) == 0)
  {
LABEL_20:
    if ((v11 & 0x200) == 0)
      goto LABEL_21;
LABEL_34:
    v24 = *((_QWORD *)a2 + 19);
    *((_WORD *)this + 96) |= 0x200u;
    *((_QWORD *)this + 19) = v24;
    if ((*((_WORD *)a2 + 96) & 0x400) == 0)
      return this;
    goto LABEL_22;
  }
LABEL_33:
  v23 = *((_QWORD *)a2 + 18);
  *((_WORD *)this + 96) |= 0x100u;
  *((_QWORD *)this + 18) = v23;
  v11 = *((_WORD *)a2 + 96);
  if ((v11 & 0x200) != 0)
    goto LABEL_34;
LABEL_21:
  if ((v11 & 0x400) != 0)
  {
LABEL_22:
    v12 = *((_QWORD *)a2 + 20);
    *((_WORD *)this + 96) |= 0x400u;
    *((_QWORD *)this + 20) = v12;
  }
  return this;
}

CMMsl *CMMsl::LSLHeadingEstimation::operator=(CMMsl *a1, const CMMsl::LSLHeadingEstimation *a2)
{
  CMMsl::LSLHeadingEstimation *v3;
  _BYTE v5[200];

  if (a1 != a2)
  {
    CMMsl::LSLHeadingEstimation::LSLHeadingEstimation((CMMsl::LSLHeadingEstimation *)v5, a2);
    CMMsl::swap(a1, (CMMsl::LSLHeadingEstimation *)v5, v3);
    CMMsl::LSLHeadingEstimation::~LSLHeadingEstimation((CMMsl::LSLHeadingEstimation *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::LSLHeadingEstimation *a2, CMMsl::LSLHeadingEstimation *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double result;

  v3 = *((_DWORD *)this + 48);
  *((_DWORD *)this + 48) = *((_DWORD *)a2 + 48);
  *((_DWORD *)a2 + 48) = v3;
  v4 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = *((_QWORD *)a2 + 22);
  *((_QWORD *)a2 + 22) = v4;
  v5 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v5;
  v6 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v6;
  v7 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v7;
  v8 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v8;
  v9 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v9;
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v10;
  v11 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v11;
  v12 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v12;
  v13 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v13;
  v14 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v14;
  v15 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v15;
  v16 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = *((_QWORD *)a2 + 23);
  *((_QWORD *)a2 + 23) = v16;
  v17 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v17;
  v18 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v18;
  v19 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v19;
  v20 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v20;
  v21 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v21;
  v22 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = *((_QWORD *)a2 + 21);
  *((_QWORD *)a2 + 21) = v22;
  v23 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v23;
  v24 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v24;
  v25 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 19) = v25;
  result = *((double *)this + 20);
  *((_QWORD *)this + 20) = *((_QWORD *)a2 + 20);
  *((double *)a2 + 20) = result;
  return result;
}

uint64_t CMMsl::LSLHeadingEstimation::LSLHeadingEstimation(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_25135EF60;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)(a1 + 184) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_DWORD *)(a2 + 192) = 0;
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  sub_242911330(a1 + 32, (__n128 *)(a2 + 32));
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  sub_242911330(a1 + 56, (__n128 *)(a2 + 56));
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  return a1;
}

CMMsl *CMMsl::LSLHeadingEstimation::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::LSLHeadingEstimation *v3;
  _BYTE v5[200];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::LSLHeadingEstimation::LSLHeadingEstimation((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::LSLHeadingEstimation *)v5, v3);
    CMMsl::LSLHeadingEstimation::~LSLHeadingEstimation((CMMsl::LSLHeadingEstimation *)v5);
  }
  return a1;
}

uint64_t CMMsl::LSLHeadingEstimation::formatText(CMMsl::LSLHeadingEstimation *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;
  double *v6;
  double *v7;
  double v8;
  double *v9;
  double *v10;
  double v11;
  double *v12;
  double *v13;
  double v14;
  __int16 v15;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 96);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "altitude", *((double *)this + 10));
    v5 = *((_WORD *)this + 96);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x2000) == 0)
        goto LABEL_4;
      goto LABEL_28;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "confidence", *((double *)this + 11));
  v5 = *((_WORD *)this + 96);
  if ((v5 & 0x2000) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "globalReferenceFrame");
  v5 = *((_WORD *)this + 96);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "latitude", *((double *)this + 12));
  v5 = *((_WORD *)this + 96);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "locationTimestamp", *((double *)this + 13));
  v5 = *((_WORD *)this + 96);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "longitude", *((double *)this + 14));
  v5 = *((_WORD *)this + 96);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "machContinuousLocationTimestamp", *((double *)this + 15));
  v5 = *((_WORD *)this + 96);
  if ((v5 & 0x40) == 0)
  {
LABEL_9:
    if ((v5 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "machContinuousTimestamp", *((double *)this + 16));
  v5 = *((_WORD *)this + 96);
  if ((v5 & 0x80) == 0)
  {
LABEL_10:
    if ((v5 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "polylinesLocation1Latitude", *((double *)this + 17));
  v5 = *((_WORD *)this + 96);
  if ((v5 & 0x100) == 0)
  {
LABEL_11:
    if ((v5 & 0x200) == 0)
      goto LABEL_12;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "polylinesLocation1Longitude", *((double *)this + 18));
  v5 = *((_WORD *)this + 96);
  if ((v5 & 0x200) == 0)
  {
LABEL_12:
    if ((v5 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "polylinesLocation2Latitude", *((double *)this + 19));
  v5 = *((_WORD *)this + 96);
  if ((v5 & 0x400) == 0)
  {
LABEL_13:
    if ((v5 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_14;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "polylinesLocation2Longitude", *((double *)this + 20));
  if ((*((_WORD *)this + 96) & 0x800) != 0)
LABEL_14:
    PB::TextFormatter::format(a2, "roadID");
LABEL_15:
  v6 = (double *)*((_QWORD *)this + 1);
  v7 = (double *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(a2, "rotationFromGlobalToCameraFrame", v8);
  }
  v9 = (double *)*((_QWORD *)this + 4);
  v10 = (double *)*((_QWORD *)this + 5);
  while (v9 != v10)
  {
    v11 = *v9++;
    PB::TextFormatter::format(a2, "rotationFromGlobalToDeviceFrame", v11);
  }
  v12 = (double *)*((_QWORD *)this + 7);
  v13 = (double *)*((_QWORD *)this + 8);
  while (v12 != v13)
  {
    v14 = *v12++;
    PB::TextFormatter::format(a2, "rotationalAccuracyInRadians", v14);
  }
  v15 = *((_WORD *)this + 96);
  if ((v15 & 0x4000) != 0)
  {
    PB::TextFormatter::format(a2, "status");
    v15 = *((_WORD *)this + 96);
  }
  if ((v15 & 0x1000) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 22));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::LSLHeadingEstimation::readFrom(CMMsl::LSLHeadingEstimation *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  _QWORD *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  _QWORD *v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char v76;
  unsigned int v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  char v89;
  unsigned int v90;
  uint64_t v91;
  unint64_t v92;
  char v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  char v98;
  unsigned int v99;
  unint64_t v100;
  char v101;
  unint64_t v102;
  char *v103;
  _QWORD *v104;
  unint64_t v105;
  char *v106;
  unint64_t v107;
  char *v108;
  char v109;
  unsigned int v110;
  unint64_t v111;
  char v112;
  char v113;
  unsigned int v114;
  unint64_t v115;
  char v116;
  char *v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  unint64_t v141;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_21:
      v19 = v11 & 7;
      if (v19 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_WORD *)this + 96) |= 0x4000u;
          v20 = *((_QWORD *)a2 + 1);
          v21 = *((_QWORD *)a2 + 2);
          v22 = *(_QWORD *)a2;
          if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
          {
            v23 = 0;
            v24 = 0;
            v25 = 0;
            do
            {
              v26 = v20 + 1;
              *((_QWORD *)a2 + 1) = v20 + 1;
              v27 = *(_BYTE *)(v22 + v20);
              v25 |= (unint64_t)(v27 & 0x7F) << v23;
              if ((v27 & 0x80) == 0)
                goto LABEL_210;
              v23 += 7;
              v20 = v26;
              v14 = v24++ > 8;
            }
            while (!v14);
LABEL_158:
            LODWORD(v25) = 0;
            goto LABEL_210;
          }
          v98 = 0;
          v99 = 0;
          v25 = 0;
          if (v21 <= v20)
            v21 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v21 == v20)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v100 = v20 + 1;
              v101 = *(_BYTE *)(v22 + v20);
              *((_QWORD *)a2 + 1) = v100;
              v25 |= (unint64_t)(v101 & 0x7F) << v98;
              if (v101 < 0)
              {
                v98 += 7;
                v20 = v100;
                v14 = v99++ > 8;
                if (v14)
                  goto LABEL_158;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v25) = 0;
            }
            break;
          }
LABEL_210:
          *((_DWORD *)this + 47) = v25;
          goto LABEL_243;
        case 2u:
          *((_WORD *)this + 96) |= 0x1000u;
          v28 = *((_QWORD *)a2 + 1);
          if (v28 > 0xFFFFFFFFFFFFFFF7 || v28 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_240;
          *((_QWORD *)this + 22) = *(_QWORD *)(*(_QWORD *)a2 + v28);
          goto LABEL_242;
        case 3u:
          *((_WORD *)this + 96) |= 0x40u;
          v29 = *((_QWORD *)a2 + 1);
          if (v29 > 0xFFFFFFFFFFFFFFF7 || v29 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_240;
          *((_QWORD *)this + 16) = *(_QWORD *)(*(_QWORD *)a2 + v29);
          goto LABEL_242;
        case 4u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v30 = *((_QWORD *)a2 + 1);
            v31 = *((_QWORD *)a2 + 2);
            while (v30 < v31 && !*((_BYTE *)a2 + 24))
            {
              v33 = (char *)*((_QWORD *)this + 5);
              v32 = *((_QWORD *)this + 6);
              if ((unint64_t)v33 >= v32)
              {
                v35 = (char *)*((_QWORD *)this + 4);
                v36 = (v33 - v35) >> 3;
                v37 = v36 + 1;
                if ((unint64_t)(v36 + 1) >> 61)
                  goto LABEL_252;
                v38 = v32 - (_QWORD)v35;
                if (v38 >> 2 > v37)
                  v37 = v38 >> 2;
                if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
                  v39 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v39 = v37;
                if (v39)
                {
                  v39 = (unint64_t)sub_2429112FC(v39);
                  v35 = (char *)*((_QWORD *)this + 4);
                  v33 = (char *)*((_QWORD *)this + 5);
                }
                else
                {
                  v40 = 0;
                }
                v41 = (_QWORD *)(v39 + 8 * v36);
                *v41 = 0;
                v34 = v41 + 1;
                while (v33 != v35)
                {
                  v42 = *((_QWORD *)v33 - 1);
                  v33 -= 8;
                  *--v41 = v42;
                }
                *((_QWORD *)this + 4) = v41;
                *((_QWORD *)this + 5) = v34;
                *((_QWORD *)this + 6) = v39 + 8 * v40;
                if (v35)
                  operator delete(v35);
              }
              else
              {
                *(_QWORD *)v33 = 0;
                v34 = v33 + 8;
              }
              *((_QWORD *)this + 5) = v34;
              v43 = *((_QWORD *)a2 + 1);
              if (v43 > 0xFFFFFFFFFFFFFFF7 || v43 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_179;
              *(v34 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v43);
              v31 = *((_QWORD *)a2 + 2);
              v30 = *((_QWORD *)a2 + 1) + 8;
              *((_QWORD *)a2 + 1) = v30;
            }
            goto LABEL_180;
          }
          v103 = (char *)*((_QWORD *)this + 5);
          v102 = *((_QWORD *)this + 6);
          if ((unint64_t)v103 >= v102)
          {
            v117 = (char *)*((_QWORD *)this + 4);
            v118 = (v103 - v117) >> 3;
            v119 = v118 + 1;
            if ((unint64_t)(v118 + 1) >> 61)
              goto LABEL_252;
            v120 = v102 - (_QWORD)v117;
            if (v120 >> 2 > v119)
              v119 = v120 >> 2;
            if ((unint64_t)v120 >= 0x7FFFFFFFFFFFFFF8)
              v121 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v121 = v119;
            if (v121)
            {
              v121 = (unint64_t)sub_2429112FC(v121);
              v117 = (char *)*((_QWORD *)this + 4);
              v103 = (char *)*((_QWORD *)this + 5);
            }
            else
            {
              v122 = 0;
            }
            v135 = (_QWORD *)(v121 + 8 * v118);
            *v135 = 0;
            v104 = v135 + 1;
            while (v103 != v117)
            {
              v136 = *((_QWORD *)v103 - 1);
              v103 -= 8;
              *--v135 = v136;
            }
            *((_QWORD *)this + 4) = v135;
            *((_QWORD *)this + 5) = v104;
            *((_QWORD *)this + 6) = v121 + 8 * v122;
            if (v117)
              operator delete(v117);
          }
          else
          {
            *(_QWORD *)v103 = 0;
            v104 = v103 + 8;
          }
          *((_QWORD *)this + 5) = v104;
          goto LABEL_238;
        case 5u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v44 = *((_QWORD *)a2 + 1);
            v45 = *((_QWORD *)a2 + 2);
            while (v44 < v45 && !*((_BYTE *)a2 + 24))
            {
              v47 = (char *)*((_QWORD *)this + 2);
              v46 = *((_QWORD *)this + 3);
              if ((unint64_t)v47 >= v46)
              {
                v49 = (char *)*((_QWORD *)this + 1);
                v50 = (v47 - v49) >> 3;
                v51 = v50 + 1;
                if ((unint64_t)(v50 + 1) >> 61)
                  goto LABEL_252;
                v52 = v46 - (_QWORD)v49;
                if (v52 >> 2 > v51)
                  v51 = v52 >> 2;
                if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8)
                  v53 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v53 = v51;
                if (v53)
                {
                  v53 = (unint64_t)sub_2429112FC(v53);
                  v49 = (char *)*((_QWORD *)this + 1);
                  v47 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v54 = 0;
                }
                v55 = (_QWORD *)(v53 + 8 * v50);
                *v55 = 0;
                v48 = v55 + 1;
                while (v47 != v49)
                {
                  v56 = *((_QWORD *)v47 - 1);
                  v47 -= 8;
                  *--v55 = v56;
                }
                *((_QWORD *)this + 1) = v55;
                *((_QWORD *)this + 2) = v48;
                *((_QWORD *)this + 3) = v53 + 8 * v54;
                if (v49)
                  operator delete(v49);
              }
              else
              {
                *(_QWORD *)v47 = 0;
                v48 = v47 + 8;
              }
              *((_QWORD *)this + 2) = v48;
              v57 = *((_QWORD *)a2 + 1);
              if (v57 > 0xFFFFFFFFFFFFFFF7 || v57 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_179;
              *(v48 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v57);
              v45 = *((_QWORD *)a2 + 2);
              v44 = *((_QWORD *)a2 + 1) + 8;
              *((_QWORD *)a2 + 1) = v44;
            }
            goto LABEL_180;
          }
          v106 = (char *)*((_QWORD *)this + 2);
          v105 = *((_QWORD *)this + 3);
          if ((unint64_t)v106 >= v105)
          {
            v123 = (char *)*((_QWORD *)this + 1);
            v124 = (v106 - v123) >> 3;
            v125 = v124 + 1;
            if ((unint64_t)(v124 + 1) >> 61)
              goto LABEL_252;
            v126 = v105 - (_QWORD)v123;
            if (v126 >> 2 > v125)
              v125 = v126 >> 2;
            if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFF8)
              v127 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v127 = v125;
            if (v127)
            {
              v127 = (unint64_t)sub_2429112FC(v127);
              v123 = (char *)*((_QWORD *)this + 1);
              v106 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v128 = 0;
            }
            v137 = (_QWORD *)(v127 + 8 * v124);
            *v137 = 0;
            v104 = v137 + 1;
            while (v106 != v123)
            {
              v138 = *((_QWORD *)v106 - 1);
              v106 -= 8;
              *--v137 = v138;
            }
            *((_QWORD *)this + 1) = v137;
            *((_QWORD *)this + 2) = v104;
            *((_QWORD *)this + 3) = v127 + 8 * v128;
            if (v123)
              operator delete(v123);
          }
          else
          {
            *(_QWORD *)v106 = 0;
            v104 = v106 + 8;
          }
          *((_QWORD *)this + 2) = v104;
          goto LABEL_238;
        case 6u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v58 = *((_QWORD *)a2 + 1);
            v59 = *((_QWORD *)a2 + 2);
            while (v58 < v59 && !*((_BYTE *)a2 + 24))
            {
              v61 = (char *)*((_QWORD *)this + 8);
              v60 = *((_QWORD *)this + 9);
              if ((unint64_t)v61 >= v60)
              {
                v63 = (char *)*((_QWORD *)this + 7);
                v64 = (v61 - v63) >> 3;
                v65 = v64 + 1;
                if ((unint64_t)(v64 + 1) >> 61)
                  goto LABEL_252;
                v66 = v60 - (_QWORD)v63;
                if (v66 >> 2 > v65)
                  v65 = v66 >> 2;
                if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8)
                  v67 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v67 = v65;
                if (v67)
                {
                  v67 = (unint64_t)sub_2429112FC(v67);
                  v63 = (char *)*((_QWORD *)this + 7);
                  v61 = (char *)*((_QWORD *)this + 8);
                }
                else
                {
                  v68 = 0;
                }
                v69 = (_QWORD *)(v67 + 8 * v64);
                *v69 = 0;
                v62 = v69 + 1;
                while (v61 != v63)
                {
                  v70 = *((_QWORD *)v61 - 1);
                  v61 -= 8;
                  *--v69 = v70;
                }
                *((_QWORD *)this + 7) = v69;
                *((_QWORD *)this + 8) = v62;
                *((_QWORD *)this + 9) = v67 + 8 * v68;
                if (v63)
                  operator delete(v63);
              }
              else
              {
                *(_QWORD *)v61 = 0;
                v62 = v61 + 8;
              }
              *((_QWORD *)this + 8) = v62;
              v71 = *((_QWORD *)a2 + 1);
              if (v71 > 0xFFFFFFFFFFFFFFF7 || v71 + 8 > *((_QWORD *)a2 + 2))
              {
LABEL_179:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v62 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v71);
              v59 = *((_QWORD *)a2 + 2);
              v58 = *((_QWORD *)a2 + 1) + 8;
              *((_QWORD *)a2 + 1) = v58;
            }
LABEL_180:
            PB::Reader::recallMark();
          }
          else
          {
            v108 = (char *)*((_QWORD *)this + 8);
            v107 = *((_QWORD *)this + 9);
            if ((unint64_t)v108 >= v107)
            {
              v129 = (char *)*((_QWORD *)this + 7);
              v130 = (v108 - v129) >> 3;
              v131 = v130 + 1;
              if ((unint64_t)(v130 + 1) >> 61)
LABEL_252:
                sub_242729A44();
              v132 = v107 - (_QWORD)v129;
              if (v132 >> 2 > v131)
                v131 = v132 >> 2;
              if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFF8)
                v133 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v133 = v131;
              if (v133)
              {
                v133 = (unint64_t)sub_2429112FC(v133);
                v129 = (char *)*((_QWORD *)this + 7);
                v108 = (char *)*((_QWORD *)this + 8);
              }
              else
              {
                v134 = 0;
              }
              v139 = (_QWORD *)(v133 + 8 * v130);
              *v139 = 0;
              v104 = v139 + 1;
              while (v108 != v129)
              {
                v140 = *((_QWORD *)v108 - 1);
                v108 -= 8;
                *--v139 = v140;
              }
              *((_QWORD *)this + 7) = v139;
              *((_QWORD *)this + 8) = v104;
              *((_QWORD *)this + 9) = v133 + 8 * v134;
              if (v129)
                operator delete(v129);
            }
            else
            {
              *(_QWORD *)v108 = 0;
              v104 = v108 + 8;
            }
            *((_QWORD *)this + 8) = v104;
LABEL_238:
            v141 = *((_QWORD *)a2 + 1);
            if (v141 <= 0xFFFFFFFFFFFFFFF7 && v141 + 8 <= *((_QWORD *)a2 + 2))
            {
              *(v104 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v141);
LABEL_242:
              *((_QWORD *)a2 + 1) += 8;
            }
            else
            {
LABEL_240:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
          break;
        case 7u:
          *((_WORD *)this + 96) |= 2u;
          v72 = *((_QWORD *)a2 + 1);
          if (v72 > 0xFFFFFFFFFFFFFFF7 || v72 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_240;
          *((_QWORD *)this + 11) = *(_QWORD *)(*(_QWORD *)a2 + v72);
          goto LABEL_242;
        case 8u:
          *((_WORD *)this + 96) |= 0x2000u;
          v73 = *((_QWORD *)a2 + 1);
          v74 = *((_QWORD *)a2 + 2);
          v75 = *(_QWORD *)a2;
          if (v73 <= 0xFFFFFFFFFFFFFFF5 && v73 + 10 <= v74)
          {
            v76 = 0;
            v77 = 0;
            v78 = 0;
            do
            {
              v79 = v73 + 1;
              *((_QWORD *)a2 + 1) = v73 + 1;
              v80 = *(_BYTE *)(v75 + v73);
              v78 |= (unint64_t)(v80 & 0x7F) << v76;
              if ((v80 & 0x80) == 0)
                goto LABEL_213;
              v76 += 7;
              v73 = v79;
              v14 = v77++ > 8;
            }
            while (!v14);
LABEL_171:
            LODWORD(v78) = 0;
            goto LABEL_213;
          }
          v109 = 0;
          v110 = 0;
          v78 = 0;
          if (v74 <= v73)
            v74 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v74 == v73)
            {
              LODWORD(v78) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v111 = v73 + 1;
              v112 = *(_BYTE *)(v75 + v73);
              *((_QWORD *)a2 + 1) = v111;
              v78 |= (unint64_t)(v112 & 0x7F) << v109;
              if (v112 < 0)
              {
                v109 += 7;
                v73 = v111;
                v14 = v110++ > 8;
                if (v14)
                  goto LABEL_171;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v78) = 0;
            }
            break;
          }
LABEL_213:
          *((_DWORD *)this + 46) = v78;
          goto LABEL_243;
        case 9u:
          *((_WORD *)this + 96) |= 4u;
          v81 = *((_QWORD *)a2 + 1);
          if (v81 > 0xFFFFFFFFFFFFFFF7 || v81 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_240;
          *((_QWORD *)this + 12) = *(_QWORD *)(*(_QWORD *)a2 + v81);
          goto LABEL_242;
        case 0xAu:
          *((_WORD *)this + 96) |= 0x10u;
          v82 = *((_QWORD *)a2 + 1);
          if (v82 > 0xFFFFFFFFFFFFFFF7 || v82 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_240;
          *((_QWORD *)this + 14) = *(_QWORD *)(*(_QWORD *)a2 + v82);
          goto LABEL_242;
        case 0xBu:
          *((_WORD *)this + 96) |= 1u;
          v83 = *((_QWORD *)a2 + 1);
          if (v83 > 0xFFFFFFFFFFFFFFF7 || v83 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_240;
          *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v83);
          goto LABEL_242;
        case 0xCu:
          *((_WORD *)this + 96) |= 8u;
          v84 = *((_QWORD *)a2 + 1);
          if (v84 > 0xFFFFFFFFFFFFFFF7 || v84 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_240;
          *((_QWORD *)this + 13) = *(_QWORD *)(*(_QWORD *)a2 + v84);
          goto LABEL_242;
        case 0xDu:
          *((_WORD *)this + 96) |= 0x20u;
          v85 = *((_QWORD *)a2 + 1);
          if (v85 > 0xFFFFFFFFFFFFFFF7 || v85 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_240;
          *((_QWORD *)this + 15) = *(_QWORD *)(*(_QWORD *)a2 + v85);
          goto LABEL_242;
        case 0xEu:
          *((_WORD *)this + 96) |= 0x800u;
          v86 = *((_QWORD *)a2 + 1);
          v87 = *((_QWORD *)a2 + 2);
          v88 = *(_QWORD *)a2;
          if (v86 <= 0xFFFFFFFFFFFFFFF5 && v86 + 10 <= v87)
          {
            v89 = 0;
            v90 = 0;
            v91 = 0;
            do
            {
              v92 = v86 + 1;
              *((_QWORD *)a2 + 1) = v86 + 1;
              v93 = *(_BYTE *)(v88 + v86);
              v91 |= (unint64_t)(v93 & 0x7F) << v89;
              if ((v93 & 0x80) == 0)
                goto LABEL_216;
              v89 += 7;
              v86 = v92;
              v14 = v90++ > 8;
            }
            while (!v14);
LABEL_178:
            v91 = 0;
            goto LABEL_216;
          }
          v113 = 0;
          v114 = 0;
          v91 = 0;
          if (v87 <= v86)
            v87 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v87 == v86)
            {
              v91 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v115 = v86 + 1;
              v116 = *(_BYTE *)(v88 + v86);
              *((_QWORD *)a2 + 1) = v115;
              v91 |= (unint64_t)(v116 & 0x7F) << v113;
              if (v116 < 0)
              {
                v113 += 7;
                v86 = v115;
                v14 = v114++ > 8;
                if (v14)
                  goto LABEL_178;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v91 = 0;
            }
            break;
          }
LABEL_216:
          *((_QWORD *)this + 21) = v91;
          goto LABEL_243;
        case 0xFu:
          *((_WORD *)this + 96) |= 0x80u;
          v94 = *((_QWORD *)a2 + 1);
          if (v94 > 0xFFFFFFFFFFFFFFF7 || v94 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_240;
          *((_QWORD *)this + 17) = *(_QWORD *)(*(_QWORD *)a2 + v94);
          goto LABEL_242;
        case 0x10u:
          *((_WORD *)this + 96) |= 0x100u;
          v95 = *((_QWORD *)a2 + 1);
          if (v95 > 0xFFFFFFFFFFFFFFF7 || v95 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_240;
          *((_QWORD *)this + 18) = *(_QWORD *)(*(_QWORD *)a2 + v95);
          goto LABEL_242;
        case 0x11u:
          *((_WORD *)this + 96) |= 0x200u;
          v96 = *((_QWORD *)a2 + 1);
          if (v96 > 0xFFFFFFFFFFFFFFF7 || v96 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_240;
          *((_QWORD *)this + 19) = *(_QWORD *)(*(_QWORD *)a2 + v96);
          goto LABEL_242;
        case 0x12u:
          *((_WORD *)this + 96) |= 0x400u;
          v97 = *((_QWORD *)a2 + 1);
          if (v97 > 0xFFFFFFFFFFFFFFF7 || v97 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_240;
          *((_QWORD *)this + 20) = *(_QWORD *)(*(_QWORD *)a2 + v97);
          goto LABEL_242;
        default:
          goto LABEL_19;
      }
      goto LABEL_243;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_21;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    if ((PB::Reader::skip(a2) & 1) == 0)
      return 0;
LABEL_243:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
}

uint64_t CMMsl::LSLHeadingEstimation::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;
  double *v11;
  double *v12;
  double v13;
  __int16 v14;

  v3 = this;
  v4 = *(_WORD *)(this + 192);
  if ((v4 & 0x4000) == 0)
  {
    if ((*(_WORD *)(this + 192) & 0x1000) == 0)
      goto LABEL_3;
LABEL_28:
    this = PB::Writer::write(a2, *(double *)(v3 + 176));
    if ((*(_WORD *)(v3 + 192) & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_4;
  }
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 192);
  if ((v4 & 0x1000) != 0)
    goto LABEL_28;
LABEL_3:
  if ((v4 & 0x40) != 0)
LABEL_4:
    this = PB::Writer::write(a2, *(double *)(v3 + 128));
LABEL_5:
  v5 = *(double **)(v3 + 32);
  v6 = *(double **)(v3 + 40);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7);
  }
  v8 = *(double **)(v3 + 8);
  v9 = *(double **)(v3 + 16);
  while (v8 != v9)
  {
    v10 = *v8++;
    this = PB::Writer::write(a2, v10);
  }
  v11 = *(double **)(v3 + 56);
  v12 = *(double **)(v3 + 64);
  while (v11 != v12)
  {
    v13 = *v11++;
    this = PB::Writer::write(a2, v13);
  }
  v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 88));
    v14 = *(_WORD *)(v3 + 192);
    if ((v14 & 0x2000) == 0)
    {
LABEL_16:
      if ((v14 & 4) == 0)
        goto LABEL_17;
      goto LABEL_32;
    }
  }
  else if ((*(_WORD *)(v3 + 192) & 0x2000) == 0)
  {
    goto LABEL_16;
  }
  this = PB::Writer::writeVarInt(a2);
  v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 4) == 0)
  {
LABEL_17:
    if ((v14 & 0x10) == 0)
      goto LABEL_18;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(double *)(v3 + 96));
  v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 0x10) == 0)
  {
LABEL_18:
    if ((v14 & 1) == 0)
      goto LABEL_19;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(double *)(v3 + 112));
  v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 1) == 0)
  {
LABEL_19:
    if ((v14 & 8) == 0)
      goto LABEL_20;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(double *)(v3 + 80));
  v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 8) == 0)
  {
LABEL_20:
    if ((v14 & 0x20) == 0)
      goto LABEL_21;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(double *)(v3 + 104));
  v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 0x20) == 0)
  {
LABEL_21:
    if ((v14 & 0x800) == 0)
      goto LABEL_22;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(double *)(v3 + 120));
  v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 0x800) == 0)
  {
LABEL_22:
    if ((v14 & 0x80) == 0)
      goto LABEL_23;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::writeVarInt(a2);
  v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 0x80) == 0)
  {
LABEL_23:
    if ((v14 & 0x100) == 0)
      goto LABEL_24;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(double *)(v3 + 136));
  v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 0x100) == 0)
  {
LABEL_24:
    if ((v14 & 0x200) == 0)
      goto LABEL_25;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(double *)(v3 + 144));
  v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 0x200) == 0)
  {
LABEL_25:
    if ((v14 & 0x400) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 160));
  }
LABEL_40:
  this = PB::Writer::write(a2, *(double *)(v3 + 152));
  if ((*(_WORD *)(v3 + 192) & 0x400) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 160));
  return this;
}

uint64_t CMMsl::LSLHeadingEstimation::hash_value(CMMsl::LSLHeadingEstimation *this)
{
  __int16 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  double v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;

  v2 = *((_WORD *)this + 96);
  if ((v2 & 0x4000) != 0)
  {
    v3 = *((int *)this + 47);
    if ((*((_WORD *)this + 96) & 0x1000) != 0)
    {
LABEL_3:
      if (*((double *)this + 22) == 0.0)
        v4 = 0;
      else
        v4 = *((_QWORD *)this + 22);
      if ((v2 & 0x40) != 0)
        goto LABEL_7;
LABEL_12:
      v5 = 0;
      goto LABEL_13;
    }
  }
  else
  {
    v3 = 0;
    if ((*((_WORD *)this + 96) & 0x1000) != 0)
      goto LABEL_3;
  }
  v4 = 0;
  if ((v2 & 0x40) == 0)
    goto LABEL_12;
LABEL_7:
  if (*((double *)this + 16) == 0.0)
    v5 = 0;
  else
    v5 = *((_QWORD *)this + 16);
LABEL_13:
  v6 = PBHashBytes();
  v7 = PBHashBytes();
  v8 = PBHashBytes();
  v9 = *((_WORD *)this + 96);
  if ((v9 & 2) != 0)
  {
    v10 = *((double *)this + 11);
    if (v10 == 0.0)
      v10 = 0.0;
    if ((*((_WORD *)this + 96) & 0x2000) != 0)
    {
LABEL_15:
      v11 = *((int *)this + 46);
      if ((v9 & 4) != 0)
        goto LABEL_16;
LABEL_48:
      v12 = 0.0;
      if ((v9 & 0x10) != 0)
        goto LABEL_19;
LABEL_49:
      v13 = 0.0;
      if ((v9 & 1) != 0)
        goto LABEL_22;
LABEL_50:
      v14 = 0.0;
      if ((v9 & 8) != 0)
        goto LABEL_25;
LABEL_51:
      v15 = 0.0;
      if ((v9 & 0x20) != 0)
        goto LABEL_28;
LABEL_52:
      v16 = 0.0;
      if ((*((_WORD *)this + 96) & 0x800) != 0)
        goto LABEL_31;
      goto LABEL_53;
    }
  }
  else
  {
    v10 = 0.0;
    if ((*((_WORD *)this + 96) & 0x2000) != 0)
      goto LABEL_15;
  }
  v11 = 0;
  if ((v9 & 4) == 0)
    goto LABEL_48;
LABEL_16:
  v12 = *((double *)this + 12);
  if (v12 == 0.0)
    v12 = 0.0;
  if ((v9 & 0x10) == 0)
    goto LABEL_49;
LABEL_19:
  v13 = *((double *)this + 14);
  if (v13 == 0.0)
    v13 = 0.0;
  if ((v9 & 1) == 0)
    goto LABEL_50;
LABEL_22:
  v14 = *((double *)this + 10);
  if (v14 == 0.0)
    v14 = 0.0;
  if ((v9 & 8) == 0)
    goto LABEL_51;
LABEL_25:
  v15 = *((double *)this + 13);
  if (v15 == 0.0)
    v15 = 0.0;
  if ((v9 & 0x20) == 0)
    goto LABEL_52;
LABEL_28:
  v16 = *((double *)this + 15);
  if (v16 == 0.0)
    v16 = 0.0;
  if ((*((_WORD *)this + 96) & 0x800) != 0)
  {
LABEL_31:
    v17 = *((_QWORD *)this + 21);
    if ((v9 & 0x80) != 0)
      goto LABEL_32;
LABEL_54:
    v18 = 0.0;
    if ((*((_WORD *)this + 96) & 0x100) != 0)
      goto LABEL_35;
LABEL_55:
    v19 = 0.0;
    if ((*((_WORD *)this + 96) & 0x200) != 0)
      goto LABEL_38;
    goto LABEL_56;
  }
LABEL_53:
  v17 = 0;
  if ((v9 & 0x80) == 0)
    goto LABEL_54;
LABEL_32:
  v18 = *((double *)this + 17);
  if (v18 == 0.0)
    v18 = 0.0;
  if ((*((_WORD *)this + 96) & 0x100) == 0)
    goto LABEL_55;
LABEL_35:
  v19 = *((double *)this + 18);
  if (v19 == 0.0)
    v19 = 0.0;
  if ((*((_WORD *)this + 96) & 0x200) != 0)
  {
LABEL_38:
    v20 = *((double *)this + 19);
    if (v20 == 0.0)
      v20 = 0.0;
    if ((*((_WORD *)this + 96) & 0x400) != 0)
      goto LABEL_41;
LABEL_57:
    v21 = 0.0;
    return v4 ^ v3 ^ v5 ^ v6 ^ v7 ^ v8 ^ *(_QWORD *)&v10 ^ v11 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13 ^ *(_QWORD *)&v14 ^ *(_QWORD *)&v15 ^ *(_QWORD *)&v16 ^ v17 ^ *(_QWORD *)&v18 ^ *(_QWORD *)&v19 ^ *(_QWORD *)&v20 ^ *(_QWORD *)&v21;
  }
LABEL_56:
  v20 = 0.0;
  if ((*((_WORD *)this + 96) & 0x400) == 0)
    goto LABEL_57;
LABEL_41:
  v21 = *((double *)this + 20);
  if (v21 == 0.0)
    v21 = 0.0;
  return v4 ^ v3 ^ v5 ^ v6 ^ v7 ^ v8 ^ *(_QWORD *)&v10 ^ v11 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13 ^ *(_QWORD *)&v14 ^ *(_QWORD *)&v15 ^ *(_QWORD *)&v16 ^ v17 ^ *(_QWORD *)&v18 ^ *(_QWORD *)&v19 ^ *(_QWORD *)&v20 ^ *(_QWORD *)&v21;
}

void CMMsl::LegacyALS5CHInput::~LegacyALS5CHInput(CMMsl::LegacyALS5CHInput *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::LegacyALS5CHInput::LegacyALS5CHInput(CMMsl::LegacyALS5CHInput *this, const CMMsl::LegacyALS5CHInput *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;

  *(_QWORD *)this = &off_25135EF98;
  *((_DWORD *)this + 10) = 0;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 40) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_BYTE *)a2 + 40);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 40) & 2) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((_BYTE *)this + 40) = v3;
    *((_DWORD *)this + 4) = v5;
    v2 = *((_BYTE *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *((_BYTE *)this + 40) = v3;
    *((_DWORD *)this + 5) = v6;
    v2 = *((_BYTE *)a2 + 40);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *((_BYTE *)this + 40) = v3;
  *((_DWORD *)this + 6) = v7;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_15;
  }
LABEL_14:
  v8 = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *((_BYTE *)this + 40) = v3;
  *((_DWORD *)this + 7) = v8;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      return *(float *)&v4;
    goto LABEL_16;
  }
LABEL_15:
  v9 = *((_DWORD *)a2 + 8);
  v3 |= 0x20u;
  *((_BYTE *)this + 40) = v3;
  *((_DWORD *)this + 8) = v9;
  if ((*((_BYTE *)a2 + 40) & 0x40) == 0)
    return *(float *)&v4;
LABEL_16:
  LODWORD(v4) = *((_DWORD *)a2 + 9);
  *((_BYTE *)this + 40) = v3 | 0x40;
  *((_DWORD *)this + 9) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::LegacyALS5CHInput::operator=(uint64_t a1, const CMMsl::LegacyALS5CHInput *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  int v11;
  int v12;
  int v13;

  if ((const CMMsl::LegacyALS5CHInput *)a1 != a2)
  {
    CMMsl::LegacyALS5CHInput::LegacyALS5CHInput((CMMsl::LegacyALS5CHInput *)&v8, a2);
    v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v13;
    v13 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v10;
    v10 = v5;
    v6 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v11;
    v11 = v6;
    LODWORD(v4) = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v12;
    v12 = v4;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::LegacyALS5CHInput *a2, CMMsl::LegacyALS5CHInput *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  float result;

  v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  v6 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v6;
  v7 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v7;
  v8 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v8;
  v9 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v9;
  result = *((float *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((float *)a2 + 9) = result;
  return result;
}

float CMMsl::LegacyALS5CHInput::LegacyALS5CHInput(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135EF98;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  result = *(float *)(a2 + 36);
  *(float *)(a1 + 36) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_25135EF98;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  result = *(float *)(a2 + 36);
  *(float *)(a1 + 36) = result;
  return result;
}

uint64_t CMMsl::LegacyALS5CHInput::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  int v10;
  _QWORD v12[2];
  __int128 v13;
  int v14;
  int v15;
  int v16;

  if (a1 != a2)
  {
    v12[0] = &off_25135EF98;
    v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_DWORD *)(a2 + 32);
    v6 = *(_DWORD *)(a2 + 36);
    v16 = *(_DWORD *)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v12[1] = v7;
    v8 = *(_OWORD *)(a1 + 16);
    v9 = *(_OWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 40) = v3;
    *(_OWORD *)(a1 + 16) = v9;
    v13 = v8;
    v10 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v5;
    v14 = v10;
    LODWORD(v8) = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v6;
    v15 = v8;
    PB::Base::~Base((PB::Base *)v12);
  }
  return a1;
}

uint64_t CMMsl::LegacyALS5CHInput::formatText(CMMsl::LegacyALS5CHInput *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "ch0");
    v5 = *((_BYTE *)this + 40);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*((_BYTE *)this + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "ch1");
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "ch2");
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "ch3");
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
LABEL_15:
    PB::TextFormatter::format(a2, "lux", *((float *)this + 9));
    if ((*((_BYTE *)this + 40) & 1) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_8;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "ch4");
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 0x40) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v5 & 1) != 0)
LABEL_8:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::LegacyALS5CHInput::readFrom(CMMsl::LegacyALS5CHInput *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_26;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_21;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_26:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 40) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_68;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        v2 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_105;
      case 2u:
        *((_BYTE *)this + 40) |= 2u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v51 = 0;
          v52 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_110;
            }
            v53 = v21++;
            v54 = *(_BYTE *)(v22 + v53);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v54 & 0x7F) << v51;
            if ((v54 & 0x80) == 0)
              break;
            v51 += 7;
            v14 = v52++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
LABEL_109:
              v2 = v53 + 1;
              goto LABEL_110;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v25) = 0;
          goto LABEL_109;
        }
        v23 = 0;
        v24 = 0;
        v25 = 0;
        do
        {
          v2 = v21 + 1;
          *((_QWORD *)a2 + 1) = v21 + 1;
          v26 = *(_BYTE *)(v22 + v21);
          v25 |= (unint64_t)(v26 & 0x7F) << v23;
          if ((v26 & 0x80) == 0)
            goto LABEL_110;
          v23 += 7;
          v21 = v2;
          v14 = v24++ > 8;
        }
        while (!v14);
        LODWORD(v25) = 0;
LABEL_110:
        *((_DWORD *)this + 4) = v25;
        break;
      case 3u:
        *((_BYTE *)this + 40) |= 4u;
        v27 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v28 = *(_QWORD *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v55 = 0;
          v56 = 0;
          v31 = 0;
          if (v2 <= v27)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_115;
            }
            v57 = v27++;
            v58 = *(_BYTE *)(v28 + v57);
            *((_QWORD *)a2 + 1) = v27;
            v31 |= (unint64_t)(v58 & 0x7F) << v55;
            if ((v58 & 0x80) == 0)
              break;
            v55 += 7;
            v14 = v56++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
LABEL_114:
              v2 = v57 + 1;
              goto LABEL_115;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v31) = 0;
          goto LABEL_114;
        }
        v29 = 0;
        v30 = 0;
        v31 = 0;
        do
        {
          v2 = v27 + 1;
          *((_QWORD *)a2 + 1) = v27 + 1;
          v32 = *(_BYTE *)(v28 + v27);
          v31 |= (unint64_t)(v32 & 0x7F) << v29;
          if ((v32 & 0x80) == 0)
            goto LABEL_115;
          v29 += 7;
          v27 = v2;
          v14 = v30++ > 8;
        }
        while (!v14);
        LODWORD(v31) = 0;
LABEL_115:
        *((_DWORD *)this + 5) = v31;
        break;
      case 4u:
        *((_BYTE *)this + 40) |= 8u;
        v33 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v34 = *(_QWORD *)a2;
        if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
        {
          v59 = 0;
          v60 = 0;
          v37 = 0;
          if (v2 <= v33)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v33)
            {
              LODWORD(v37) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_120;
            }
            v61 = v33++;
            v62 = *(_BYTE *)(v34 + v61);
            *((_QWORD *)a2 + 1) = v33;
            v37 |= (unint64_t)(v62 & 0x7F) << v59;
            if ((v62 & 0x80) == 0)
              break;
            v59 += 7;
            v14 = v60++ > 8;
            if (v14)
            {
              LODWORD(v37) = 0;
LABEL_119:
              v2 = v61 + 1;
              goto LABEL_120;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v37) = 0;
          goto LABEL_119;
        }
        v35 = 0;
        v36 = 0;
        v37 = 0;
        do
        {
          v2 = v33 + 1;
          *((_QWORD *)a2 + 1) = v33 + 1;
          v38 = *(_BYTE *)(v34 + v33);
          v37 |= (unint64_t)(v38 & 0x7F) << v35;
          if ((v38 & 0x80) == 0)
            goto LABEL_120;
          v35 += 7;
          v33 = v2;
          v14 = v36++ > 8;
        }
        while (!v14);
        LODWORD(v37) = 0;
LABEL_120:
        *((_DWORD *)this + 6) = v37;
        break;
      case 5u:
        *((_BYTE *)this + 40) |= 0x10u;
        v39 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v40 = *(_QWORD *)a2;
        if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
        {
          v63 = 0;
          v64 = 0;
          v43 = 0;
          if (v2 <= v39)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v39)
            {
              LODWORD(v43) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_125;
            }
            v65 = v39++;
            v66 = *(_BYTE *)(v40 + v65);
            *((_QWORD *)a2 + 1) = v39;
            v43 |= (unint64_t)(v66 & 0x7F) << v63;
            if ((v66 & 0x80) == 0)
              break;
            v63 += 7;
            v14 = v64++ > 8;
            if (v14)
            {
              LODWORD(v43) = 0;
LABEL_124:
              v2 = v65 + 1;
              goto LABEL_125;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v43) = 0;
          goto LABEL_124;
        }
        v41 = 0;
        v42 = 0;
        v43 = 0;
        do
        {
          v2 = v39 + 1;
          *((_QWORD *)a2 + 1) = v39 + 1;
          v44 = *(_BYTE *)(v40 + v39);
          v43 |= (unint64_t)(v44 & 0x7F) << v41;
          if ((v44 & 0x80) == 0)
            goto LABEL_125;
          v41 += 7;
          v39 = v2;
          v14 = v42++ > 8;
        }
        while (!v14);
        LODWORD(v43) = 0;
LABEL_125:
        *((_DWORD *)this + 7) = v43;
        break;
      case 6u:
        *((_BYTE *)this + 40) |= 0x20u;
        v45 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v46 = *(_QWORD *)a2;
        if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
        {
          v67 = 0;
          v68 = 0;
          v49 = 0;
          if (v2 <= v45)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v45)
            {
              LODWORD(v49) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_130;
            }
            v69 = v45++;
            v70 = *(_BYTE *)(v46 + v69);
            *((_QWORD *)a2 + 1) = v45;
            v49 |= (unint64_t)(v70 & 0x7F) << v67;
            if ((v70 & 0x80) == 0)
              break;
            v67 += 7;
            v14 = v68++ > 8;
            if (v14)
            {
              LODWORD(v49) = 0;
LABEL_129:
              v2 = v69 + 1;
              goto LABEL_130;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v49) = 0;
          goto LABEL_129;
        }
        v47 = 0;
        v48 = 0;
        v49 = 0;
        do
        {
          v2 = v45 + 1;
          *((_QWORD *)a2 + 1) = v45 + 1;
          v50 = *(_BYTE *)(v46 + v45);
          v49 |= (unint64_t)(v50 & 0x7F) << v47;
          if ((v50 & 0x80) == 0)
            goto LABEL_130;
          v47 += 7;
          v45 = v2;
          v14 = v48++ > 8;
        }
        while (!v14);
        LODWORD(v49) = 0;
LABEL_130:
        *((_DWORD *)this + 8) = v49;
        break;
      case 7u:
        *((_BYTE *)this + 40) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_105:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_68:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_21:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::LegacyALS5CHInput::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 40);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(this + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 36));
  }
LABEL_14:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_BYTE *)(v3 + 40) & 0x40) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 36));
  return this;
}

uint64_t CMMsl::LegacyALS5CHInput::hash_value(CMMsl::LegacyALS5CHInput *this)
{
  double v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  uint64_t v8;

  if ((*((_BYTE *)this + 40) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 40) & 2) != 0)
    {
LABEL_3:
      v2 = *((int *)this + 4);
      if ((*((_BYTE *)this + 40) & 4) != 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 40) & 2) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 40) & 4) != 0)
  {
LABEL_4:
    v3 = *((int *)this + 5);
    if ((*((_BYTE *)this + 40) & 8) != 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  v3 = 0;
  if ((*((_BYTE *)this + 40) & 8) != 0)
  {
LABEL_5:
    v4 = *((int *)this + 6);
    if ((*((_BYTE *)this + 40) & 0x10) != 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  v4 = 0;
  if ((*((_BYTE *)this + 40) & 0x10) != 0)
  {
LABEL_6:
    v5 = *((int *)this + 7);
    if ((*((_BYTE *)this + 40) & 0x20) != 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  v5 = 0;
  if ((*((_BYTE *)this + 40) & 0x20) != 0)
  {
LABEL_7:
    v6 = *((int *)this + 8);
    if ((*((_BYTE *)this + 40) & 0x40) != 0)
      goto LABEL_8;
LABEL_19:
    v8 = 0;
    return v2 ^ *(_QWORD *)&v1 ^ v3 ^ v4 ^ v5 ^ v6 ^ v8;
  }
LABEL_18:
  v6 = 0;
  if ((*((_BYTE *)this + 40) & 0x40) == 0)
    goto LABEL_19;
LABEL_8:
  v7 = *((float *)this + 9);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  return v2 ^ *(_QWORD *)&v1 ^ v3 ^ v4 ^ v5 ^ v6 ^ v8;
}

void CMMsl::LiftToWakeFeaturesNeo::~LiftToWakeFeaturesNeo(CMMsl::LiftToWakeFeaturesNeo *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::LiftToWakeFeaturesNeo::LiftToWakeFeaturesNeo(CMMsl::LiftToWakeFeaturesNeo *this, const CMMsl::LiftToWakeFeaturesNeo *a2)
{
  char v2;
  char v3;
  uint64_t v4;

  *(_QWORD *)this = &off_25135EFD0;
  *((_DWORD *)this + 10) = 0;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 40) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_BYTE *)a2 + 40);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 40) & 8) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 8);
    v3 |= 8u;
    *((_BYTE *)this + 40) = v3;
    *((_DWORD *)this + 8) = v4;
    v2 = *((_BYTE *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v4 = *((_QWORD *)a2 + 2);
    v3 |= 2u;
    *((_BYTE *)this + 40) = v3;
    *((_QWORD *)this + 2) = v4;
    v2 = *((_BYTE *)a2 + 40);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        return *(float *)&v4;
      goto LABEL_12;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  v4 = *((_QWORD *)a2 + 3);
  v3 |= 4u;
  *((_BYTE *)this + 40) = v3;
  *((_QWORD *)this + 3) = v4;
  if ((*((_BYTE *)a2 + 40) & 0x10) == 0)
    return *(float *)&v4;
LABEL_12:
  LODWORD(v4) = *((_DWORD *)a2 + 9);
  *((_BYTE *)this + 40) = v3 | 0x10;
  *((_DWORD *)this + 9) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::LiftToWakeFeaturesNeo::operator=(uint64_t a1, const CMMsl::LiftToWakeFeaturesNeo *a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  if ((const CMMsl::LiftToWakeFeaturesNeo *)a1 != a2)
  {
    CMMsl::LiftToWakeFeaturesNeo::LiftToWakeFeaturesNeo((CMMsl::LiftToWakeFeaturesNeo *)&v8, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v9 = v3;
    *(_QWORD *)&v3 = v11;
    v4 = *(_QWORD *)(a1 + 24);
    v5 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 24) = v10;
    *(_QWORD *)(a1 + 32) = v3;
    v6 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v12;
    v12 = v6;
    v10 = v4;
    v11 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::LiftToWakeFeaturesNeo *a2, CMMsl::LiftToWakeFeaturesNeo *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float result;

  v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  result = *((float *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((float *)a2 + 9) = result;
  return result;
}

float CMMsl::LiftToWakeFeaturesNeo::LiftToWakeFeaturesNeo(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135EFD0;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  result = *(float *)(a2 + 36);
  *(float *)(a1 + 36) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_25135EFD0;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  result = *(float *)(a2 + 36);
  *(float *)(a1 + 36) = result;
  return result;
}

uint64_t CMMsl::LiftToWakeFeaturesNeo::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  void (**v9)(CMMsl::LiftToWakeFeaturesNeo *__hidden);
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  if (a1 != a2)
  {
    v9 = &off_25135EFD0;
    v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    v4 = *(_QWORD *)(a2 + 24);
    v13 = *(_DWORD *)(a1 + 40);
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    v10 = v5;
    *(_QWORD *)&v5 = *(_QWORD *)(a1 + 24);
    v6 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 24) = v4;
    v7 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 40) = v3;
    *(_QWORD *)(a1 + 32) = v7;
    v11 = v5;
    v12 = v6;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::LiftToWakeFeaturesNeo::formatText(CMMsl::LiftToWakeFeaturesNeo *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "gravityBufferDeltaToCurrentMax", *((float *)this + 8));
    v5 = *((_BYTE *)this + 40);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*((_BYTE *)this + 40) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "gravityFilterDeltaToHeadUp", *((float *)this + 9));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(a2, "timestampGravityBufferFront", *((double *)this + 2));
    if ((*((_BYTE *)this + 40) & 4) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 2) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 4) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "timestampTimerRef", *((double *)this + 3));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::LiftToWakeFeaturesNeo::readFrom(CMMsl::LiftToWakeFeaturesNeo *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_42;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 40) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_38;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_35;
      case 2u:
        *((_BYTE *)this + 40) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_38;
        *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_40;
      case 3u:
        *((_BYTE *)this + 40) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_38;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_35;
      case 4u:
        *((_BYTE *)this + 40) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_38;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_35:
        v2 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_41;
      case 5u:
        *((_BYTE *)this + 40) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_40:
          v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_41:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_38:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_42:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::LiftToWakeFeaturesNeo::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 40);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(this + 40) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 36));
  }
LABEL_10:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  if ((*(_BYTE *)(v3 + 40) & 0x10) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 36));
  return this;
}

uint64_t CMMsl::LiftToWakeFeaturesNeo::hash_value(CMMsl::LiftToWakeFeaturesNeo *this)
{
  double v1;
  float v2;
  uint64_t v3;
  double v4;
  double v5;
  float v6;
  uint64_t v7;

  if ((*((_BYTE *)this + 40) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 40) & 8) != 0)
      goto LABEL_3;
LABEL_18:
    v3 = 0;
    if ((*((_BYTE *)this + 40) & 2) != 0)
      goto LABEL_6;
LABEL_19:
    v4 = 0.0;
    if ((*((_BYTE *)this + 40) & 4) != 0)
      goto LABEL_9;
    goto LABEL_20;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 40) & 8) == 0)
    goto LABEL_18;
LABEL_3:
  v2 = *((float *)this + 8);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 40) & 2) == 0)
    goto LABEL_19;
LABEL_6:
  v4 = *((double *)this + 2);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((*((_BYTE *)this + 40) & 4) != 0)
  {
LABEL_9:
    v5 = *((double *)this + 3);
    if (v5 == 0.0)
      v5 = 0.0;
    if ((*((_BYTE *)this + 40) & 0x10) != 0)
      goto LABEL_12;
LABEL_21:
    v7 = 0;
    return v3 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ v7;
  }
LABEL_20:
  v5 = 0.0;
  if ((*((_BYTE *)this + 40) & 0x10) == 0)
    goto LABEL_21;
LABEL_12:
  v6 = *((float *)this + 9);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  return v3 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ v7;
}

void CMMsl::LiftToWakeOnHeadStatus::~LiftToWakeOnHeadStatus(CMMsl::LiftToWakeOnHeadStatus *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::LiftToWakeOnHeadStatus::LiftToWakeOnHeadStatus(CMMsl::LiftToWakeOnHeadStatus *this, const CMMsl::LiftToWakeOnHeadStatus *a2)
{
  char v2;
  char v3;
  double result;
  int v5;

  *(_QWORD *)this = &off_25135F008;
  *((_DWORD *)this + 7) = 0;
  v2 = *((_BYTE *)a2 + 28);
  if ((v2 & 1) != 0)
  {
    result = *((double *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 28) = 1;
    *((double *)this + 1) = result;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 28) & 4) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *((_BYTE *)this + 28) = v3;
    *((_DWORD *)this + 6) = v5;
    v2 = *((_BYTE *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    result = *((double *)a2 + 2);
    *((_BYTE *)this + 28) = v3 | 2;
    *((double *)this + 2) = result;
  }
  return result;
}

uint64_t CMMsl::LiftToWakeOnHeadStatus::operator=(uint64_t a1, uint64_t a2, double a3, double a4)
{
  int v4;
  char v6;
  char v7;
  int v8;
  uint64_t v9;
  __int128 v10;
  void (**v12)(CMMsl::LiftToWakeOnHeadStatus *__hidden);
  __int128 v13;
  uint64_t v14;

  if (a1 != a2)
  {
    v12 = &off_25135F008;
    HIDWORD(v14) = 0;
    v6 = *(_BYTE *)(a2 + 28);
    if ((v6 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      v7 = 1;
      BYTE4(v14) = 1;
      if ((v6 & 4) != 0)
      {
LABEL_4:
        v4 = *(_DWORD *)(a2 + 24);
        v7 |= 4u;
        BYTE4(v14) = v7;
        if ((v6 & 2) != 0)
          goto LABEL_8;
        goto LABEL_9;
      }
    }
    else
    {
      v7 = 0;
      if ((*(_BYTE *)(a2 + 28) & 4) != 0)
        goto LABEL_4;
    }
    if ((v6 & 2) != 0)
    {
LABEL_8:
      a4 = *(double *)(a2 + 16);
      BYTE4(v14) = v7 | 2;
    }
LABEL_9:
    v8 = HIDWORD(v14);
    v9 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v4;
    *(_DWORD *)(a1 + 28) = v8;
    v14 = v9;
    v10 = *(_OWORD *)(a1 + 8);
    *(double *)(a1 + 8) = a3;
    *(double *)(a1 + 16) = a4;
    v13 = v10;
    PB::Base::~Base((PB::Base *)&v12);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::LiftToWakeOnHeadStatus *a2, CMMsl::LiftToWakeOnHeadStatus *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  double result;

  v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v5;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::LiftToWakeOnHeadStatus::LiftToWakeOnHeadStatus(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135F008;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135F008;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::LiftToWakeOnHeadStatus::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  void (**v7)(CMMsl::LiftToWakeOnHeadStatus *__hidden);
  __int128 v8;
  uint64_t v9;

  if (a1 != a2)
  {
    v7 = &off_25135F008;
    v3 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 28) = 0;
    v9 = *(_QWORD *)(a1 + 24);
    v4 = *(_OWORD *)(a1 + 8);
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = v3;
    *(_OWORD *)(a1 + 8) = v5;
    v8 = v4;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::LiftToWakeOnHeadStatus::formatText(CMMsl::LiftToWakeOnHeadStatus *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 4) == 0)
  {
    if ((*((_BYTE *)this + 28) & 1) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    if ((*((_BYTE *)this + 28) & 2) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_4;
  }
  PB::TextFormatter::format(a2, "status");
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 1) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 2) != 0)
LABEL_4:
    PB::TextFormatter::format(a2, "timestampArrival", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::LiftToWakeOnHeadStatus::readFrom(CMMsl::LiftToWakeOnHeadStatus *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int i;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  for (i = *((unsigned __int8 *)a2 + 24); v2 < v3 && i == 0; i = *((unsigned __int8 *)a2 + 24))
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_20;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
        if (v14)
          goto LABEL_27;
      }
      i = 1;
      *((_BYTE *)a2 + 24) = 1;
      return i == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_27;
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      i = 0;
      return i == 0;
    }
    v19 = v11 >> 3;
    if ((v11 >> 3) == 3)
    {
      *((_BYTE *)this + 28) |= 2u;
      v2 = *((_QWORD *)a2 + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
      {
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_47;
      }
    }
    else
    {
      if ((_DWORD)v19 == 2)
      {
        *((_BYTE *)this + 28) |= 4u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v27 = 0;
          v28 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_52;
            }
            v29 = v21++;
            v30 = *(_BYTE *)(v22 + v29);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_51;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v25) = 0;
LABEL_51:
          v2 = v29 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)a2 + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_52:
        *((_DWORD *)this + 6) = v25;
        goto LABEL_53;
      }
      if ((_DWORD)v19 != 1)
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        goto LABEL_53;
      }
      *((_BYTE *)this + 28) |= 1u;
      v2 = *((_QWORD *)a2 + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
      {
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_47:
        v2 = *((_QWORD *)a2 + 1) + 8;
        *((_QWORD *)a2 + 1) = v2;
        goto LABEL_53;
      }
    }
    *((_BYTE *)a2 + 24) = 1;
LABEL_53:
    v3 = *((_QWORD *)a2 + 2);
  }
  return i == 0;
}

uint64_t CMMsl::LiftToWakeOnHeadStatus::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 28);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        return this;
      return PB::Writer::write(a2, *(double *)(v3 + 16));
    }
  }
  else if ((*(_BYTE *)(this + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  if ((*(_BYTE *)(v3 + 28) & 2) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 16));
  return this;
}

uint64_t CMMsl::LiftToWakeOnHeadStatus::hash_value(CMMsl::LiftToWakeOnHeadStatus *this)
{
  double v1;
  uint64_t v2;
  double v3;

  if ((*((_BYTE *)this + 28) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 28) & 4) != 0)
    {
LABEL_3:
      v2 = *((unsigned int *)this + 6);
      if ((*((_BYTE *)this + 28) & 2) != 0)
        goto LABEL_4;
LABEL_11:
      v3 = 0.0;
      return v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3;
    }
  }
  else
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 28) & 4) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 28) & 2) == 0)
    goto LABEL_11;
LABEL_4:
  v3 = *((double *)this + 2);
  if (v3 == 0.0)
    v3 = 0.0;
  return v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3;
}

void CMMsl::LiftToWakeState::~LiftToWakeState(CMMsl::LiftToWakeState *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::LiftToWakeState::LiftToWakeState(CMMsl::LiftToWakeState *this, const CMMsl::LiftToWakeState *a2)
{
  char v2;
  char v3;
  double result;
  int v5;

  *(_QWORD *)this = &off_25135F040;
  *((_DWORD *)this + 7) = 0;
  v2 = *((_BYTE *)a2 + 28);
  if ((v2 & 1) != 0)
  {
    result = *((double *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 28) = 1;
    *((double *)this + 1) = result;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 28) & 4) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *((_BYTE *)this + 28) = v3;
    *((_DWORD *)this + 6) = v5;
    v2 = *((_BYTE *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    result = *((double *)a2 + 2);
    *((_BYTE *)this + 28) = v3 | 2;
    *((double *)this + 2) = result;
  }
  return result;
}

uint64_t CMMsl::LiftToWakeState::operator=(uint64_t a1, uint64_t a2, double a3, double a4)
{
  int v4;
  char v6;
  char v7;
  int v8;
  uint64_t v9;
  __int128 v10;
  void (**v12)(CMMsl::LiftToWakeState *__hidden);
  __int128 v13;
  uint64_t v14;

  if (a1 != a2)
  {
    v12 = &off_25135F040;
    HIDWORD(v14) = 0;
    v6 = *(_BYTE *)(a2 + 28);
    if ((v6 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      v7 = 1;
      BYTE4(v14) = 1;
      if ((v6 & 4) != 0)
      {
LABEL_4:
        v4 = *(_DWORD *)(a2 + 24);
        v7 |= 4u;
        BYTE4(v14) = v7;
        if ((v6 & 2) != 0)
          goto LABEL_8;
        goto LABEL_9;
      }
    }
    else
    {
      v7 = 0;
      if ((*(_BYTE *)(a2 + 28) & 4) != 0)
        goto LABEL_4;
    }
    if ((v6 & 2) != 0)
    {
LABEL_8:
      a4 = *(double *)(a2 + 16);
      BYTE4(v14) = v7 | 2;
    }
LABEL_9:
    v8 = HIDWORD(v14);
    v9 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v4;
    *(_DWORD *)(a1 + 28) = v8;
    v14 = v9;
    v10 = *(_OWORD *)(a1 + 8);
    *(double *)(a1 + 8) = a3;
    *(double *)(a1 + 16) = a4;
    v13 = v10;
    PB::Base::~Base((PB::Base *)&v12);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::LiftToWakeState *a2, CMMsl::LiftToWakeState *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  double result;

  v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v5;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::LiftToWakeState::LiftToWakeState(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135F040;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135F040;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::LiftToWakeState::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  void (**v7)(CMMsl::LiftToWakeState *__hidden);
  __int128 v8;
  uint64_t v9;

  if (a1 != a2)
  {
    v7 = &off_25135F040;
    v3 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 28) = 0;
    v9 = *(_QWORD *)(a1 + 24);
    v4 = *(_OWORD *)(a1 + 8);
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = v3;
    *(_OWORD *)(a1 + 8) = v5;
    v8 = v4;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::LiftToWakeState::formatText(CMMsl::LiftToWakeState *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 4) == 0)
  {
    if ((*((_BYTE *)this + 28) & 1) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    if ((*((_BYTE *)this + 28) & 2) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_4;
  }
  PB::TextFormatter::format(a2, "state");
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 1) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 2) != 0)
LABEL_4:
    PB::TextFormatter::format(a2, "timestampGestureBegin", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::LiftToWakeState::readFrom(CMMsl::LiftToWakeState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int i;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  for (i = *((unsigned __int8 *)a2 + 24); v2 < v3 && i == 0; i = *((unsigned __int8 *)a2 + 24))
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_20;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
        if (v14)
          goto LABEL_27;
      }
      i = 1;
      *((_BYTE *)a2 + 24) = 1;
      return i == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_27;
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      i = 0;
      return i == 0;
    }
    v19 = v11 >> 3;
    if ((v11 >> 3) == 3)
    {
      *((_BYTE *)this + 28) |= 2u;
      v2 = *((_QWORD *)a2 + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
      {
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_47;
      }
    }
    else
    {
      if ((_DWORD)v19 == 2)
      {
        *((_BYTE *)this + 28) |= 4u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v27 = 0;
          v28 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_52;
            }
            v29 = v21++;
            v30 = *(_BYTE *)(v22 + v29);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_51;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v25) = 0;
LABEL_51:
          v2 = v29 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)a2 + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_52:
        *((_DWORD *)this + 6) = v25;
        goto LABEL_53;
      }
      if ((_DWORD)v19 != 1)
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        goto LABEL_53;
      }
      *((_BYTE *)this + 28) |= 1u;
      v2 = *((_QWORD *)a2 + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
      {
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_47:
        v2 = *((_QWORD *)a2 + 1) + 8;
        *((_QWORD *)a2 + 1) = v2;
        goto LABEL_53;
      }
    }
    *((_BYTE *)a2 + 24) = 1;
LABEL_53:
    v3 = *((_QWORD *)a2 + 2);
  }
  return i == 0;
}

uint64_t CMMsl::LiftToWakeState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 28);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        return this;
      return PB::Writer::write(a2, *(double *)(v3 + 16));
    }
  }
  else if ((*(_BYTE *)(this + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  if ((*(_BYTE *)(v3 + 28) & 2) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 16));
  return this;
}

uint64_t CMMsl::LiftToWakeState::hash_value(CMMsl::LiftToWakeState *this)
{
  double v1;
  uint64_t v2;
  double v3;

  if ((*((_BYTE *)this + 28) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 28) & 4) != 0)
    {
LABEL_3:
      v2 = *((unsigned int *)this + 6);
      if ((*((_BYTE *)this + 28) & 2) != 0)
        goto LABEL_4;
LABEL_11:
      v3 = 0.0;
      return v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3;
    }
  }
  else
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 28) & 4) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 28) & 2) == 0)
    goto LABEL_11;
LABEL_4:
  v3 = *((double *)this + 2);
  if (v3 == 0.0)
    v3 = 0.0;
  return v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3;
}

void CMMsl::LiftToWakeStatusNeo::~LiftToWakeStatusNeo(CMMsl::LiftToWakeStatusNeo *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::LiftToWakeStatusNeo::LiftToWakeStatusNeo(uint64_t this, const CMMsl::LiftToWakeStatusNeo *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  char v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;

  *(_QWORD *)this = &off_25135F078;
  *(_DWORD *)(this + 64) = 0;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_WORD *)(this + 64) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_WORD *)a2 + 32);
    if ((v2 & 0x800) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_WORD *)a2 + 32) & 0x800) != 0)
  {
LABEL_5:
    v5 = *((_BYTE *)a2 + 60);
    v3 |= 0x800u;
    *(_WORD *)(this + 64) = v3;
    *(_BYTE *)(this + 60) = v5;
    v2 = *((_WORD *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 0x400) != 0)
  {
    v6 = *((_DWORD *)a2 + 14);
    v3 |= 0x400u;
    *(_WORD *)(this + 64) = v3;
    *(_DWORD *)(this + 56) = v6;
    v2 = *((_WORD *)a2 + 32);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x1000) == 0)
        goto LABEL_9;
      goto LABEL_20;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_WORD *)(this + 64) = v3;
  *(_QWORD *)(this + 16) = v7;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x1000) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  v8 = *((_BYTE *)a2 + 61);
  v3 |= 0x1000u;
  *(_WORD *)(this + 64) = v3;
  *(_BYTE *)(this + 61) = v8;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  v9 = *((_DWORD *)a2 + 10);
  v3 |= 0x40u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 40) = v9;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_23;
  }
LABEL_22:
  v10 = *((_DWORD *)a2 + 11);
  v3 |= 0x80u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 44) = v10;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0)
      goto LABEL_13;
    goto LABEL_24;
  }
LABEL_23:
  v11 = *((_DWORD *)a2 + 12);
  v3 |= 0x100u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 48) = v11;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_25;
  }
LABEL_24:
  v12 = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 28) = v12;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x10) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_26;
  }
LABEL_25:
  v13 = *((_DWORD *)a2 + 8);
  v3 |= 0x10u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 32) = v13;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 4) == 0)
      goto LABEL_16;
    goto LABEL_27;
  }
LABEL_26:
  v14 = *((_DWORD *)a2 + 9);
  v3 |= 0x20u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 36) = v14;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 4) == 0)
  {
LABEL_16:
    if ((v2 & 0x200) == 0)
      return this;
LABEL_28:
    v16 = *((_DWORD *)a2 + 13);
    *(_WORD *)(this + 64) = v3 | 0x200;
    *(_DWORD *)(this + 52) = v16;
    return this;
  }
LABEL_27:
  v15 = *((_DWORD *)a2 + 6);
  v3 |= 4u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 24) = v15;
  if ((*((_WORD *)a2 + 32) & 0x200) != 0)
    goto LABEL_28;
  return this;
}

CMMsl *CMMsl::LiftToWakeStatusNeo::operator=(CMMsl *a1, const CMMsl::LiftToWakeStatusNeo *a2)
{
  CMMsl::LiftToWakeStatusNeo *v3;
  _BYTE v5[72];

  if (a1 != a2)
  {
    CMMsl::LiftToWakeStatusNeo::LiftToWakeStatusNeo((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::LiftToWakeStatusNeo *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::LiftToWakeStatusNeo *a2, CMMsl::LiftToWakeStatusNeo *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  float result;
  int v8;
  int v9;

  v3 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LOBYTE(v3) = *((_BYTE *)this + 60);
  *((_BYTE *)this + 60) = *((_BYTE *)a2 + 60);
  *((_BYTE *)a2 + 60) = v3;
  v5 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  LOBYTE(v5) = *((_BYTE *)this + 61);
  *((_BYTE *)this + 61) = *((_BYTE *)a2 + 61);
  *((_BYTE *)a2 + 61) = v5;
  LODWORD(v6) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v6;
  LODWORD(v6) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v6;
  LODWORD(v6) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v6;
  LODWORD(v6) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v6;
  LODWORD(v6) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v6;
  result = *((float *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((float *)a2 + 9) = result;
  v8 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v8;
  v9 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v9;
  return result;
}

float CMMsl::LiftToWakeStatusNeo::LiftToWakeStatusNeo(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135F078;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 61) = *(_BYTE *)(a2 + 61);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  result = *(float *)(a2 + 36);
  *(float *)(a1 + 36) = result;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  return result;
}

CMMsl *CMMsl::LiftToWakeStatusNeo::operator=(CMMsl *this, uint64_t a2, CMMsl::LiftToWakeStatusNeo *a3)
{
  void (**v5)(CMMsl::LiftToWakeStatusNeo *__hidden);
  __int128 v6;
  int v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  int v12;

  if (this != (CMMsl *)a2)
  {
    v5 = &off_25135F078;
    v12 = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(a2 + 64) = 0;
    v11 = *(_WORD *)(a2 + 60);
    v6 = *(_OWORD *)(a2 + 8);
    v9 = *(_QWORD *)(a2 + 44);
    v8 = *(_OWORD *)(a2 + 28);
    v7 = *(_DWORD *)(a2 + 24);
    v10 = *(_QWORD *)(a2 + 52);
    CMMsl::swap(this, (CMMsl::LiftToWakeStatusNeo *)&v5, a3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return this;
}

uint64_t CMMsl::LiftToWakeStatusNeo::formatText(CMMsl::LiftToWakeStatusNeo *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "classificationType");
    v5 = *((_WORD *)this + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "intervalSleepBeginToSleepDetected", *((float *)this + 7));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "intervalSleepDetectedToGazeDetected", *((float *)this + 8));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "intervalSleepDetectedToWakeDetected", *((float *)this + 9));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "intervalWakeBeginToWakeDetected", *((float *)this + 10));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "intervalWakeDetectedToGazeDetected", *((float *)this + 11));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x800) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "intervalWakeDetectedToSleepDetected", *((float *)this + 12));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x800) == 0)
  {
LABEL_9:
    if ((v5 & 0x1000) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "shouldNotify");
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x1000) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "shouldNotifyStats");
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "sleepType");
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 1) == 0)
      goto LABEL_13;
LABEL_27:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    if ((*((_WORD *)this + 32) & 2) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_14;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "state");
  v5 = *((_WORD *)this + 32);
  if ((v5 & 1) != 0)
    goto LABEL_27;
LABEL_13:
  if ((v5 & 2) != 0)
LABEL_14:
    PB::TextFormatter::format(a2, "timestampGestureBegin", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::LiftToWakeStatusNeo::readFrom(CMMsl::LiftToWakeStatusNeo *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  char v27;
  int v28;
  BOOL v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  char v41;
  char v42;
  unsigned int v43;
  unint64_t v44;
  char v45;
  char v46;
  unsigned int v47;
  unint64_t v48;
  char v49;
  char v50;
  unsigned int v51;
  unint64_t v52;
  char v53;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_116;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 32) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_58;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_38;
      case 2u:
        *((_WORD *)this + 32) |= 0x800u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v21 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v21 = v20 != 0;
        }
        *((_BYTE *)this + 60) = v21;
        break;
      case 3u:
        *((_WORD *)this + 32) |= 0x400u;
        v22 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v23 = *(_QWORD *)a2;
        if (v22 > 0xFFFFFFFFFFFFFFF5 || v22 + 10 > v2)
        {
          v42 = 0;
          v43 = 0;
          v26 = 0;
          if (v2 <= v22)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v22)
            {
              LODWORD(v26) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_105;
            }
            v44 = v22++;
            v45 = *(_BYTE *)(v23 + v44);
            *((_QWORD *)a2 + 1) = v22;
            v26 |= (unint64_t)(v45 & 0x7F) << v42;
            if ((v45 & 0x80) == 0)
              break;
            v42 += 7;
            v14 = v43++ > 8;
            if (v14)
            {
              LODWORD(v26) = 0;
LABEL_104:
              v2 = v44 + 1;
              goto LABEL_105;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v26) = 0;
          goto LABEL_104;
        }
        v24 = 0;
        v25 = 0;
        v26 = 0;
        do
        {
          v2 = v22 + 1;
          *((_QWORD *)a2 + 1) = v22 + 1;
          v27 = *(_BYTE *)(v23 + v22);
          v26 |= (unint64_t)(v27 & 0x7F) << v24;
          if ((v27 & 0x80) == 0)
            goto LABEL_105;
          v24 += 7;
          v22 = v2;
          v14 = v25++ > 8;
        }
        while (!v14);
        LODWORD(v26) = 0;
LABEL_105:
        *((_DWORD *)this + 14) = v26;
        break;
      case 4u:
        *((_WORD *)this + 32) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_58;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_38:
        v2 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_100;
      case 5u:
        *((_WORD *)this + 32) |= 0x1000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v29 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v28 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v29 = v28 != 0;
        }
        *((_BYTE *)this + 61) = v29;
        break;
      case 6u:
        *((_WORD *)this + 32) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_58;
        *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_99;
      case 7u:
        *((_WORD *)this + 32) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_58;
        *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_99;
      case 8u:
        *((_WORD *)this + 32) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_58;
        *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_99;
      case 9u:
        *((_WORD *)this + 32) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_58;
        *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_99;
      case 0xAu:
        *((_WORD *)this + 32) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_58;
        *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_99;
      case 0xBu:
        *((_WORD *)this + 32) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_99:
          v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_100:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_58:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 0xCu:
        *((_WORD *)this + 32) |= 4u;
        v30 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v31 = *(_QWORD *)a2;
        if (v30 > 0xFFFFFFFFFFFFFFF5 || v30 + 10 > v2)
        {
          v46 = 0;
          v47 = 0;
          v34 = 0;
          if (v2 <= v30)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v30)
            {
              LODWORD(v34) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_110;
            }
            v48 = v30++;
            v49 = *(_BYTE *)(v31 + v48);
            *((_QWORD *)a2 + 1) = v30;
            v34 |= (unint64_t)(v49 & 0x7F) << v46;
            if ((v49 & 0x80) == 0)
              break;
            v46 += 7;
            v14 = v47++ > 8;
            if (v14)
            {
              LODWORD(v34) = 0;
LABEL_109:
              v2 = v48 + 1;
              goto LABEL_110;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v34) = 0;
          goto LABEL_109;
        }
        v32 = 0;
        v33 = 0;
        v34 = 0;
        do
        {
          v2 = v30 + 1;
          *((_QWORD *)a2 + 1) = v30 + 1;
          v35 = *(_BYTE *)(v31 + v30);
          v34 |= (unint64_t)(v35 & 0x7F) << v32;
          if ((v35 & 0x80) == 0)
            goto LABEL_110;
          v32 += 7;
          v30 = v2;
          v14 = v33++ > 8;
        }
        while (!v14);
        LODWORD(v34) = 0;
LABEL_110:
        *((_DWORD *)this + 6) = v34;
        break;
      case 0xDu:
        *((_WORD *)this + 32) |= 0x200u;
        v36 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v37 = *(_QWORD *)a2;
        if (v36 > 0xFFFFFFFFFFFFFFF5 || v36 + 10 > v2)
        {
          v50 = 0;
          v51 = 0;
          v40 = 0;
          if (v2 <= v36)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v36)
            {
              LODWORD(v40) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_115;
            }
            v52 = v36++;
            v53 = *(_BYTE *)(v37 + v52);
            *((_QWORD *)a2 + 1) = v36;
            v40 |= (unint64_t)(v53 & 0x7F) << v50;
            if ((v53 & 0x80) == 0)
              break;
            v50 += 7;
            v14 = v51++ > 8;
            if (v14)
            {
              LODWORD(v40) = 0;
LABEL_114:
              v2 = v52 + 1;
              goto LABEL_115;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v40) = 0;
          goto LABEL_114;
        }
        v38 = 0;
        v39 = 0;
        v40 = 0;
        do
        {
          v2 = v36 + 1;
          *((_QWORD *)a2 + 1) = v36 + 1;
          v41 = *(_BYTE *)(v37 + v36);
          v40 |= (unint64_t)(v41 & 0x7F) << v38;
          if ((v41 & 0x80) == 0)
            goto LABEL_115;
          v38 += 7;
          v36 = v2;
          v14 = v39++ > 8;
        }
        while (!v14);
        LODWORD(v40) = 0;
LABEL_115:
        *((_DWORD *)this + 13) = v40;
        break;
      default:
        goto LABEL_19;
    }
LABEL_116:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::LiftToWakeStatusNeo::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 64);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_WORD *)(v3 + 64);
    if ((v4 & 0x800) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((*(_WORD *)(this + 64) & 0x800) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x1000) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x1000) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 4) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_13:
    if ((v4 & 0x200) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_26:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_WORD *)(v3 + 64) & 0x200) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::LiftToWakeStatusNeo::hash_value(CMMsl::LiftToWakeStatusNeo *this)
{
  __int16 v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *((_WORD *)this + 32);
  if ((v1 & 1) != 0)
  {
    v2 = *((double *)this + 1);
    if (v2 == 0.0)
      v2 = 0.0;
    if ((*((_WORD *)this + 32) & 0x800) != 0)
    {
LABEL_3:
      v3 = *((unsigned __int8 *)this + 60);
      if ((*((_WORD *)this + 32) & 0x400) != 0)
        goto LABEL_4;
      goto LABEL_33;
    }
  }
  else
  {
    v2 = 0.0;
    if ((*((_WORD *)this + 32) & 0x800) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((*((_WORD *)this + 32) & 0x400) != 0)
  {
LABEL_4:
    v4 = *((unsigned int *)this + 14);
    if ((v1 & 2) != 0)
      goto LABEL_5;
LABEL_34:
    v5 = 0.0;
    if ((*((_WORD *)this + 32) & 0x1000) != 0)
      goto LABEL_8;
    goto LABEL_35;
  }
LABEL_33:
  v4 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_34;
LABEL_5:
  v5 = *((double *)this + 2);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((*((_WORD *)this + 32) & 0x1000) != 0)
  {
LABEL_8:
    v6 = *((unsigned __int8 *)this + 61);
    if ((v1 & 0x40) != 0)
      goto LABEL_9;
LABEL_36:
    v8 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_12;
LABEL_37:
    v10 = 0;
    if ((*((_WORD *)this + 32) & 0x100) != 0)
      goto LABEL_15;
LABEL_38:
    v12 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_18;
LABEL_39:
    v14 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_21;
LABEL_40:
    v16 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_24;
LABEL_41:
    v18 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_27;
LABEL_42:
    v19 = 0;
    if ((*((_WORD *)this + 32) & 0x200) != 0)
      goto LABEL_28;
LABEL_43:
    v20 = 0;
    return v3 ^ *(_QWORD *)&v2 ^ v4 ^ *(_QWORD *)&v5 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v19 ^ v20;
  }
LABEL_35:
  v6 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_36;
LABEL_9:
  v7 = *((float *)this + 10);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_37;
LABEL_12:
  v9 = *((float *)this + 11);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((*((_WORD *)this + 32) & 0x100) == 0)
    goto LABEL_38;
LABEL_15:
  v11 = *((float *)this + 12);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_39;
LABEL_18:
  v13 = *((float *)this + 7);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_40;
LABEL_21:
  v15 = *((float *)this + 8);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_41;
LABEL_24:
  v17 = *((float *)this + 9);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  if ((v1 & 4) == 0)
    goto LABEL_42;
LABEL_27:
  v19 = *((unsigned int *)this + 6);
  if ((*((_WORD *)this + 32) & 0x200) == 0)
    goto LABEL_43;
LABEL_28:
  v20 = *((unsigned int *)this + 13);
  return v3 ^ *(_QWORD *)&v2 ^ v4 ^ *(_QWORD *)&v5 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v19 ^ v20;
}

void CMMsl::LocationOscarEmu::~LocationOscarEmu(CMMsl::LocationOscarEmu *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::LocationOscarEmu::LocationOscarEmu(uint64_t this, const CMMsl::LocationOscarEmu *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;

  *(_QWORD *)this = &off_25135F0B0;
  *(_DWORD *)(this + 100) = 0;
  v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x100) != 0)
  {
    v4 = *((_QWORD *)a2 + 9);
    v3 = 256;
    *(_WORD *)(this + 100) = 256;
    *(_QWORD *)(this + 72) = v4;
    v2 = *((_WORD *)a2 + 50);
    if ((v2 & 0x1000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_WORD *)a2 + 50) & 0x1000) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 24);
    v3 |= 0x1000u;
    *(_WORD *)(this + 100) = v3;
    *(_DWORD *)(this + 96) = v5;
    v2 = *((_WORD *)a2 + 50);
  }
LABEL_6:
  if ((v2 & 0x40) != 0)
  {
    v6 = *((_QWORD *)a2 + 7);
    v3 |= 0x40u;
    *(_WORD *)(this + 100) = v3;
    *(_QWORD *)(this + 56) = v6;
    v2 = *((_WORD *)a2 + 50);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_20;
    }
  }
  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a2 + 8);
  v3 |= 0x80u;
  *(_WORD *)(this + 100) = v3;
  *(_QWORD *)(this + 64) = v7;
  v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  v8 = *((_QWORD *)a2 + 5);
  v3 |= 0x10u;
  *(_WORD *)(this + 100) = v3;
  *(_QWORD *)(this + 40) = v8;
  v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  v9 = *((_QWORD *)a2 + 6);
  v3 |= 0x20u;
  *(_WORD *)(this + 100) = v3;
  *(_QWORD *)(this + 48) = v9;
  v2 = *((_WORD *)a2 + 50);
  if ((v2 & 8) == 0)
  {
LABEL_11:
    if ((v2 & 1) == 0)
      goto LABEL_12;
    goto LABEL_23;
  }
LABEL_22:
  v10 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *(_WORD *)(this + 100) = v3;
  *(_QWORD *)(this + 32) = v10;
  v2 = *((_WORD *)a2 + 50);
  if ((v2 & 1) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_24;
  }
LABEL_23:
  v11 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 100) = v3;
  *(_QWORD *)(this + 8) = v11;
  v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 2) == 0)
      goto LABEL_14;
    goto LABEL_25;
  }
LABEL_24:
  v12 = *((_QWORD *)a2 + 10);
  v3 |= 0x200u;
  *(_WORD *)(this + 100) = v3;
  *(_QWORD *)(this + 80) = v12;
  v2 = *((_WORD *)a2 + 50);
  if ((v2 & 2) == 0)
  {
LABEL_14:
    if ((v2 & 4) == 0)
      goto LABEL_15;
    goto LABEL_26;
  }
LABEL_25:
  v13 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_WORD *)(this + 100) = v3;
  *(_QWORD *)(this + 16) = v13;
  v2 = *((_WORD *)a2 + 50);
  if ((v2 & 4) == 0)
  {
LABEL_15:
    if ((v2 & 0x400) == 0)
      goto LABEL_16;
    goto LABEL_27;
  }
LABEL_26:
  v14 = *((_QWORD *)a2 + 3);
  v3 |= 4u;
  *(_WORD *)(this + 100) = v3;
  *(_QWORD *)(this + 24) = v14;
  v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x400) == 0)
  {
LABEL_16:
    if ((v2 & 0x800) == 0)
      return this;
LABEL_28:
    v16 = *((_DWORD *)a2 + 23);
    *(_WORD *)(this + 100) = v3 | 0x800;
    *(_DWORD *)(this + 92) = v16;
    return this;
  }
LABEL_27:
  v15 = *((_DWORD *)a2 + 22);
  v3 |= 0x400u;
  *(_WORD *)(this + 100) = v3;
  *(_DWORD *)(this + 88) = v15;
  if ((*((_WORD *)a2 + 50) & 0x800) != 0)
    goto LABEL_28;
  return this;
}

CMMsl *CMMsl::LocationOscarEmu::operator=(CMMsl *a1, const CMMsl::LocationOscarEmu *a2)
{
  CMMsl::LocationOscarEmu *v3;
  _BYTE v5[104];

  if (a1 != a2)
  {
    CMMsl::LocationOscarEmu::LocationOscarEmu((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::LocationOscarEmu *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::LocationOscarEmu *a2, CMMsl::LocationOscarEmu *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double result;
  int v15;
  int v16;

  v3 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v3;
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v4;
  v5 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v5;
  v6 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v6;
  v7 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v7;
  v8 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v8;
  v9 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v9;
  v10 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v10;
  v11 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v11;
  v12 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v12;
  v13 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v13;
  result = *((double *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((double *)a2 + 3) = result;
  v15 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v15;
  v16 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v16;
  return result;
}

double CMMsl::LocationOscarEmu::LocationOscarEmu(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135F0B0;
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a2 + 100) = 0;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  return result;
}

CMMsl *CMMsl::LocationOscarEmu::operator=(CMMsl *this, uint64_t a2, CMMsl::LocationOscarEmu *a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  void (**v9)(CMMsl::LocationOscarEmu *__hidden);
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  if (this != (CMMsl *)a2)
  {
    v9 = &off_25135F0B0;
    v4 = *(_OWORD *)(a2 + 56);
    v12 = *(_OWORD *)(a2 + 40);
    v13 = v4;
    v5 = *(_OWORD *)(a2 + 72);
    v6 = *(_OWORD *)(a2 + 24);
    v10 = *(_OWORD *)(a2 + 8);
    v11 = v6;
    v7 = *(_OWORD *)(a2 + 88);
    *(_DWORD *)(a2 + 100) = 0;
    v14 = v5;
    v15 = v7;
    CMMsl::swap(this, (CMMsl::LocationOscarEmu *)&v9, a3);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return this;
}

uint64_t CMMsl::LocationOscarEmu::formatText(CMMsl::LocationOscarEmu *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 50);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "altitude", *((double *)this + 1));
    v5 = *((_WORD *)this + 50);
    if ((v5 & 0x400) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((*((_WORD *)this + 50) & 0x400) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "confidence");
  v5 = *((_WORD *)this + 50);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "course", *((double *)this + 2));
  v5 = *((_WORD *)this + 50);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "courseAccuracy", *((double *)this + 3));
  v5 = *((_WORD *)this + 50);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "horizontalAccuracy", *((double *)this + 4));
  v5 = *((_WORD *)this + 50);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x800) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "latitude", *((double *)this + 5));
  v5 = *((_WORD *)this + 50);
  if ((v5 & 0x800) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "locationLoggingEnabled");
  v5 = *((_WORD *)this + 50);
  if ((v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "longitude", *((double *)this + 6));
  v5 = *((_WORD *)this + 50);
  if ((v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v5 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "speed", *((double *)this + 7));
  v5 = *((_WORD *)this + 50);
  if ((v5 & 0x80) == 0)
  {
LABEL_11:
    if ((v5 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "speedAccuracy", *((double *)this + 8));
  v5 = *((_WORD *)this + 50);
  if ((v5 & 0x100) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0)
      goto LABEL_13;
LABEL_27:
    PB::TextFormatter::format(a2, "type");
    if ((*((_WORD *)this + 50) & 0x200) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_14;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 9));
  v5 = *((_WORD *)this + 50);
  if ((v5 & 0x1000) != 0)
    goto LABEL_27;
LABEL_13:
  if ((v5 & 0x200) != 0)
LABEL_14:
    PB::TextFormatter::format(a2, "verticalAccuracy", *((double *)this + 10));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::LocationOscarEmu::readFrom(CMMsl::LocationOscarEmu *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  unint64_t v40;
  char v41;
  char v42;
  unsigned int v43;
  unint64_t v44;
  char v45;
  char v46;
  unsigned int v47;
  unint64_t v48;
  char v49;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_112;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 50) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_59;
        *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_96;
      case 2u:
        *((_WORD *)this + 50) |= 0x1000u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v38 = 0;
          v39 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_101;
            }
            v40 = v20++;
            v41 = *(_BYTE *)(v21 + v40);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0)
              break;
            v38 += 7;
            v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_100:
              v2 = v40 + 1;
              goto LABEL_101;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
          goto LABEL_100;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_101;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_101:
        *((_DWORD *)this + 24) = v24;
        break;
      case 3u:
        *((_WORD *)this + 50) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_59;
        *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_96;
      case 4u:
        *((_WORD *)this + 50) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_59;
        *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_96;
      case 5u:
        *((_WORD *)this + 50) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_59;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_96;
      case 6u:
        *((_WORD *)this + 50) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_59;
        *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_96;
      case 7u:
        *((_WORD *)this + 50) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_59;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_96;
      case 8u:
        *((_WORD *)this + 50) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_59;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_96;
      case 9u:
        *((_WORD *)this + 50) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_59;
        *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_96;
      case 0xAu:
        *((_WORD *)this + 50) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_59;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_96;
      case 0xBu:
        *((_WORD *)this + 50) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_96:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_59:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 0xCu:
        *((_WORD *)this + 50) |= 0x400u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v42 = 0;
          v43 = 0;
          v30 = 0;
          if (v2 <= v26)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_106;
            }
            v44 = v26++;
            v45 = *(_BYTE *)(v27 + v44);
            *((_QWORD *)a2 + 1) = v26;
            v30 |= (unint64_t)(v45 & 0x7F) << v42;
            if ((v45 & 0x80) == 0)
              break;
            v42 += 7;
            v14 = v43++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_105:
              v2 = v44 + 1;
              goto LABEL_106;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v30) = 0;
          goto LABEL_105;
        }
        v28 = 0;
        v29 = 0;
        v30 = 0;
        do
        {
          v2 = v26 + 1;
          *((_QWORD *)a2 + 1) = v26 + 1;
          v31 = *(_BYTE *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0)
            goto LABEL_106;
          v28 += 7;
          v26 = v2;
          v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_106:
        *((_DWORD *)this + 22) = v30;
        break;
      case 0xDu:
        *((_WORD *)this + 50) |= 0x800u;
        v32 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v33 = *(_QWORD *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
        {
          v46 = 0;
          v47 = 0;
          v36 = 0;
          if (v2 <= v32)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v32)
            {
              LODWORD(v36) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_111;
            }
            v48 = v32++;
            v49 = *(_BYTE *)(v33 + v48);
            *((_QWORD *)a2 + 1) = v32;
            v36 |= (unint64_t)(v49 & 0x7F) << v46;
            if ((v49 & 0x80) == 0)
              break;
            v46 += 7;
            v14 = v47++ > 8;
            if (v14)
            {
              LODWORD(v36) = 0;
LABEL_110:
              v2 = v48 + 1;
              goto LABEL_111;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v36) = 0;
          goto LABEL_110;
        }
        v34 = 0;
        v35 = 0;
        v36 = 0;
        do
        {
          v2 = v32 + 1;
          *((_QWORD *)a2 + 1) = v32 + 1;
          v37 = *(_BYTE *)(v33 + v32);
          v36 |= (unint64_t)(v37 & 0x7F) << v34;
          if ((v37 & 0x80) == 0)
            goto LABEL_111;
          v34 += 7;
          v32 = v2;
          v14 = v35++ > 8;
        }
        while (!v14);
        LODWORD(v36) = 0;
LABEL_111:
        *((_DWORD *)this + 23) = v36;
        break;
      default:
        goto LABEL_19;
    }
LABEL_112:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::LocationOscarEmu::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 100);
  if ((v4 & 0x100) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 72));
    v4 = *(_WORD *)(v3 + 100);
    if ((v4 & 0x1000) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((*(_WORD *)(this + 100) & 0x1000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 2) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(double *)(v3 + 80));
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 2) == 0)
  {
LABEL_11:
    if ((v4 & 4) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 4) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x400) == 0)
  {
LABEL_13:
    if ((v4 & 0x800) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_26:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_WORD *)(v3 + 100) & 0x800) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::LocationOscarEmu::hash_value(CMMsl::LocationOscarEmu *this)
{
  __int16 v1;
  double v2;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *((_WORD *)this + 50);
  if ((v1 & 0x100) != 0)
  {
    v2 = *((double *)this + 9);
    if (v2 == 0.0)
      v2 = 0.0;
    if ((*((_WORD *)this + 50) & 0x1000) != 0)
    {
LABEL_3:
      v3 = *((unsigned int *)this + 24);
      if ((v1 & 0x40) != 0)
        goto LABEL_4;
LABEL_37:
      v4 = 0.0;
      if ((v1 & 0x80) != 0)
        goto LABEL_7;
LABEL_38:
      v5 = 0.0;
      if ((v1 & 0x10) != 0)
        goto LABEL_10;
LABEL_39:
      v6 = 0.0;
      if ((v1 & 0x20) != 0)
        goto LABEL_13;
LABEL_40:
      v7 = 0.0;
      if ((v1 & 8) != 0)
        goto LABEL_16;
LABEL_41:
      v8 = 0.0;
      if ((v1 & 1) != 0)
        goto LABEL_19;
LABEL_42:
      v9 = 0.0;
      if ((*((_WORD *)this + 50) & 0x200) != 0)
        goto LABEL_22;
LABEL_43:
      v10 = 0.0;
      if ((v1 & 2) != 0)
        goto LABEL_25;
LABEL_44:
      v11 = 0.0;
      if ((v1 & 4) != 0)
        goto LABEL_28;
LABEL_45:
      v12 = 0.0;
      if ((*((_WORD *)this + 50) & 0x400) != 0)
        goto LABEL_31;
LABEL_46:
      v13 = 0;
      if ((*((_WORD *)this + 50) & 0x800) != 0)
        goto LABEL_32;
LABEL_47:
      v14 = 0;
      return v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12 ^ v13 ^ v14;
    }
  }
  else
  {
    v2 = 0.0;
    if ((*((_WORD *)this + 50) & 0x1000) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_37;
LABEL_4:
  v4 = *((double *)this + 7);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 0x80) == 0)
    goto LABEL_38;
LABEL_7:
  v5 = *((double *)this + 8);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((v1 & 0x10) == 0)
    goto LABEL_39;
LABEL_10:
  v6 = *((double *)this + 5);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((v1 & 0x20) == 0)
    goto LABEL_40;
LABEL_13:
  v7 = *((double *)this + 6);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_41;
LABEL_16:
  v8 = *((double *)this + 4);
  if (v8 == 0.0)
    v8 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_42;
LABEL_19:
  v9 = *((double *)this + 1);
  if (v9 == 0.0)
    v9 = 0.0;
  if ((*((_WORD *)this + 50) & 0x200) == 0)
    goto LABEL_43;
LABEL_22:
  v10 = *((double *)this + 10);
  if (v10 == 0.0)
    v10 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_44;
LABEL_25:
  v11 = *((double *)this + 2);
  if (v11 == 0.0)
    v11 = 0.0;
  if ((v1 & 4) == 0)
    goto LABEL_45;
LABEL_28:
  v12 = *((double *)this + 3);
  if (v12 == 0.0)
    v12 = 0.0;
  if ((*((_WORD *)this + 50) & 0x400) == 0)
    goto LABEL_46;
LABEL_31:
  v13 = *((unsigned int *)this + 22);
  if ((*((_WORD *)this + 50) & 0x800) == 0)
    goto LABEL_47;
LABEL_32:
  v14 = *((unsigned int *)this + 23);
  return v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12 ^ v13 ^ v14;
}

void CMMsl::LockScreenStatus::~LockScreenStatus(CMMsl::LockScreenStatus *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::LockScreenStatus::LockScreenStatus(uint64_t this, const CMMsl::LockScreenStatus *a2)
{
  char v2;

  *(_QWORD *)this = &off_25135F0E8;
  *(_DWORD *)(this + 12) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v2 = *((_BYTE *)a2 + 8);
    *(_BYTE *)(this + 12) = 1;
    *(_BYTE *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::LockScreenStatus::operator=(uint64_t a1, uint64_t a2)
{
  char v3;
  int v4;
  char v5;
  void (**v7)(CMMsl::LockScreenStatus *__hidden);
  char v8;
  int v9;

  if (a1 != a2)
  {
    v7 = &off_25135F0E8;
    v3 = *(_BYTE *)(a2 + 8);
    v4 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = *(_BYTE *)(a2 + 12) & 1;
    v9 = v4;
    v5 = *(_BYTE *)(a1 + 8);
    *(_BYTE *)(a1 + 8) = v3;
    v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

{
  int v3;
  char v4;
  int v5;
  void (**v7)(CMMsl::LockScreenStatus *__hidden);
  char v8;
  int v9;

  if (a1 != a2)
  {
    v7 = &off_25135F0E8;
    v3 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    v4 = *(_BYTE *)(a2 + 8);
    v5 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v3;
    v9 = v5;
    LOBYTE(v3) = *(_BYTE *)(a1 + 8);
    *(_BYTE *)(a1 + 8) = v4;
    v8 = v3;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::LockScreenStatus *a2, CMMsl::LockScreenStatus *a3)
{
  int v3;

  v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  LOBYTE(v3) = *(_BYTE *)(this + 8);
  *(_BYTE *)(this + 8) = *((_BYTE *)a2 + 8);
  *((_BYTE *)a2 + 8) = v3;
  return this;
}

uint64_t CMMsl::LockScreenStatus::formatText(CMMsl::LockScreenStatus *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 12) & 1) != 0)
    PB::TextFormatter::format(a2, "lockScreen");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::LockScreenStatus::readFrom(CMMsl::LockScreenStatus *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v19;
  BOOL v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_24;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 12) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        if (v2 >= v3)
        {
          v20 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v19 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v20 = v19 != 0;
        }
        *((_BYTE *)this + 8) = v20;
      }
      else
      {
LABEL_24:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_24;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::LockScreenStatus::writeTo(uint64_t this, PB::Writer *a2)
{
  if ((*(_BYTE *)(this + 12) & 1) != 0)
    return PB::Writer::write(a2);
  return this;
}

uint64_t CMMsl::LockScreenStatus::hash_value(CMMsl::LockScreenStatus *this)
{
  if ((*((_BYTE *)this + 12) & 1) != 0)
    return *((unsigned __int8 *)this + 8);
  else
    return 0;
}

void CMMsl::MLBasedBioMotionClassification::~MLBasedBioMotionClassification(CMMsl::MLBasedBioMotionClassification *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135F120;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135F120;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135F120;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::MLBasedBioMotionClassification *CMMsl::MLBasedBioMotionClassification::MLBasedBioMotionClassification(CMMsl::MLBasedBioMotionClassification *this, const CMMsl::BioMotionClassification **a2)
{
  CMMsl::BioMotionClassification *v4;
  double v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_25135F120;
  *((_QWORD *)this + 1) = 0;
  if (a2[1])
  {
    v4 = (CMMsl::BioMotionClassification *)operator new();
    v5 = CMMsl::BioMotionClassification::BioMotionClassification(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v7;
    if (v6)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v6 + 8))(v6, v5);
  }
  return this;
}

uint64_t CMMsl::MLBasedBioMotionClassification::operator=(uint64_t a1, const CMMsl::BioMotionClassification **a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::MLBasedBioMotionClassification *__hidden);
  uint64_t v6;

  if ((const CMMsl::BioMotionClassification **)a1 != a2)
  {
    CMMsl::MLBasedBioMotionClassification::MLBasedBioMotionClassification((CMMsl::MLBasedBioMotionClassification *)&v5, a2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v6;
    v5 = &off_25135F120;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::MLBasedBioMotionClassification *a2, CMMsl::MLBasedBioMotionClassification *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::MLBasedBioMotionClassification::MLBasedBioMotionClassification(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_25135F120;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_25135F120;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::MLBasedBioMotionClassification::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = &off_25135F120;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::MLBasedBioMotionClassification::formatText(CMMsl::MLBasedBioMotionClassification *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MLBasedBioMotionClassification::readFrom(CMMsl::MLBasedBioMotionClassification *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v19 = (_DWORD *)operator new();
        *(_QWORD *)v19 = &off_25135C8A8;
        v19[12] = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = (_DWORD *)*((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_27;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::MLBasedBioMotionClassification::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2);
  return this;
}

CMMsl::BioMotionClassification *CMMsl::MLBasedBioMotionClassification::hash_value(CMMsl::MLBasedBioMotionClassification *this)
{
  CMMsl::BioMotionClassification *result;

  result = (CMMsl::BioMotionClassification *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::BioMotionClassification *)CMMsl::BioMotionClassification::hash_value(result);
  return result;
}

_QWORD *CMMsl::MLBasedBioMotionClassification::makeSuper(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135C8A8;
    *(_DWORD *)(v2 + 48) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void CMMsl::MagicMountState::~MagicMountState(CMMsl::MagicMountState *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::MagicMountState::MagicMountState(uint64_t this, const CMMsl::MagicMountState *a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)this = &off_25135F158;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::MagicMountState::operator=(uint64_t a1, uint64_t a2)
{
  int v2;
  void (**v4)(CMMsl::MagicMountState *__hidden);
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  uint64_t v12;

  if (a1 != a2)
  {
    v4 = &off_25135F158;
    v11[0] = &off_25135F158;
    HIDWORD(v12) = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 1) != 0)
    {
      v4 = *(void (***)(CMMsl::MagicMountState *__hidden))(a2 + 8);
      BYTE4(v12) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        v2 = *(_DWORD *)(a2 + 16);
        BYTE4(v12) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_6;
    }
    v7 = HIDWORD(v12);
    v8 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v11[1] = v8;
    v9 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v2;
    *(_DWORD *)(a1 + 20) = v7;
    v12 = v9;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v8[0] = &off_25135F158;
    v8[1] = v5;
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v4;
    v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::MagicMountState *a2, CMMsl::MagicMountState *a3)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  return this;
}

uint64_t CMMsl::MagicMountState::formatText(CMMsl::MagicMountState *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "state");
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MagicMountState::readFrom(CMMsl::MagicMountState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  char v24;
  uint64_t result;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  unint64_t v38;
  char v39;

  v3 = *((_QWORD *)a2 + 1);
  v2 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v3 + 1;
        *((_QWORD *)a2 + 1) = v3 + 1;
        v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v3 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_30;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v36 = 0;
          v37 = 0;
          v30 = 0;
          if (v2 <= v26)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_64;
            }
            v38 = v26++;
            v39 = *(_BYTE *)(v27 + v38);
            *((_QWORD *)a2 + 1) = v26;
            v30 |= (unint64_t)(v39 & 0x7F) << v36;
            if ((v39 & 0x80) == 0)
              break;
            v36 += 7;
            v14 = v37++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              goto LABEL_63;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v30) = 0;
LABEL_63:
          v3 = v38 + 1;
        }
        else
        {
          v28 = 0;
          v29 = 0;
          v30 = 0;
          while (1)
          {
            v3 = v26 + 1;
            *((_QWORD *)a2 + 1) = v26 + 1;
            v31 = *(_BYTE *)(v27 + v26);
            v30 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v26 = v3;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              break;
            }
          }
        }
LABEL_64:
        *((_DWORD *)this + 4) = v30;
      }
      else if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v19 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v20 = *(_QWORD *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v2)
        {
          v32 = 0;
          v33 = 0;
          v23 = 0;
          if (v2 <= v19)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v19)
            {
              v23 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_60;
            }
            v34 = v19++;
            v35 = *(_BYTE *)(v20 + v34);
            *((_QWORD *)a2 + 1) = v19;
            v23 |= (unint64_t)(v35 & 0x7F) << v32;
            if ((v35 & 0x80) == 0)
              break;
            v32 += 7;
            v14 = v33++ > 8;
            if (v14)
            {
              v23 = 0;
              goto LABEL_59;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v23 = 0;
LABEL_59:
          v3 = v34 + 1;
        }
        else
        {
          v21 = 0;
          v22 = 0;
          v23 = 0;
          while (1)
          {
            v3 = v19 + 1;
            *((_QWORD *)a2 + 1) = v19 + 1;
            v24 = *(_BYTE *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0)
              break;
            v21 += 7;
            v19 = v3;
            v14 = v22++ > 8;
            if (v14)
            {
              v23 = 0;
              break;
            }
          }
        }
LABEL_60:
        *((_QWORD *)this + 1) = v23;
      }
      else
      {
LABEL_30:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v3 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v2 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v3 > v2)
      v2 = v3;
    while (v2 != v3)
    {
      v17 = v3 + 1;
      v18 = *(_BYTE *)(v8 + v3);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v3 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_30;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::MagicMountState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::MagicMountState::hash_value(CMMsl::MagicMountState *this)
{
  uint64_t v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((_QWORD *)this + 1);
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_5:
    v2 = 0;
    return v2 ^ v1;
  }
  v1 = 0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_5;
LABEL_3:
  v2 = *((unsigned int *)this + 4);
  return v2 ^ v1;
}

void CMMsl::MagneticAccessoryType1::~MagneticAccessoryType1(CMMsl::MagneticAccessoryType1 *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135F190;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    sub_242910C5C(v2);
  PB::Base::~Base(this);
}

{
  CMMsl::MagneticAccessoryType1::~MagneticAccessoryType1(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::MagneticAccessoryType1 *CMMsl::MagneticAccessoryType1::MagneticAccessoryType1(CMMsl::MagneticAccessoryType1 *this, const CMMsl::MagneticAccessoryType1 *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  __int128 v7;
  uint64_t v8;
  char v9;
  int v10;
  char v11;

  *(_QWORD *)this = &off_25135F190;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  if (*((_QWORD *)a2 + 1))
  {
    v4 = operator new();
    v5 = v4;
    v6 = (__int128 *)*((_QWORD *)a2 + 1);
    if (*((char *)v6 + 23) < 0)
    {
      sub_242910CE8((_BYTE *)v4, *(void **)v6, *((_QWORD *)v6 + 1));
    }
    else
    {
      v7 = *v6;
      *(_QWORD *)(v4 + 16) = *((_QWORD *)v6 + 2);
      *(_OWORD *)v4 = v7;
    }
    v8 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v8)
      sub_242910C5C(v8);
  }
  v9 = *((_BYTE *)a2 + 24);
  if ((v9 & 1) != 0)
  {
    v10 = *((_DWORD *)a2 + 4);
    *((_BYTE *)this + 24) |= 1u;
    *((_DWORD *)this + 4) = v10;
    v9 = *((_BYTE *)a2 + 24);
  }
  if ((v9 & 2) != 0)
  {
    v11 = *((_BYTE *)a2 + 20);
    *((_BYTE *)this + 24) |= 2u;
    *((_BYTE *)this + 20) = v11;
  }
  return this;
}

uint64_t CMMsl::MagneticAccessoryType1::operator=(uint64_t a1, const CMMsl::MagneticAccessoryType1 *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  int v10;

  if ((const CMMsl::MagneticAccessoryType1 *)a1 != a2)
  {
    CMMsl::MagneticAccessoryType1::MagneticAccessoryType1((CMMsl::MagneticAccessoryType1 *)&v6, a2);
    v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v7;
    v7 = v4;
    LODWORD(v4) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v8;
    v8 = v4;
    LOBYTE(v4) = *(_BYTE *)(a1 + 20);
    *(_BYTE *)(a1 + 20) = v9;
    v9 = v4;
    CMMsl::MagneticAccessoryType1::~MagneticAccessoryType1((CMMsl::MagneticAccessoryType1 *)&v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::MagneticAccessoryType1 *a2, CMMsl::MagneticAccessoryType1 *a3)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LOBYTE(v4) = *(_BYTE *)(this + 20);
  *(_BYTE *)(this + 20) = *((_BYTE *)a2 + 20);
  *((_BYTE *)a2 + 20) = v4;
  return this;
}

uint64_t CMMsl::MagneticAccessoryType1::MagneticAccessoryType1(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_25135F190;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    sub_242910C5C(v5);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  return a1;
}

uint64_t CMMsl::MagneticAccessoryType1::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  char v6;
  int v7;
  uint64_t v8;
  _QWORD v10[2];
  int v11;
  char v12;
  int v13;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v5 = *(_DWORD *)(a2 + 16);
    v6 = *(_BYTE *)(a2 + 20);
    v7 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v3;
    v13 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v10[0] = &off_25135F190;
    v10[1] = v8;
    LODWORD(v8) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v5;
    v11 = v8;
    LOBYTE(v8) = *(_BYTE *)(a1 + 20);
    *(_BYTE *)(a1 + 20) = v6;
    v12 = v8;
    CMMsl::MagneticAccessoryType1::~MagneticAccessoryType1((CMMsl::MagneticAccessoryType1 *)v10);
  }
  return a1;
}

uint64_t CMMsl::MagneticAccessoryType1::formatText(CMMsl::MagneticAccessoryType1 *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "accessoryType");
    v5 = *((_BYTE *)this + 24);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "isAttached");
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MagneticAccessoryType1::readFrom(CMMsl::MagneticAccessoryType1 *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v24;
  unint64_t v25;
  int v26;
  BOOL v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  unint64_t v38;
  char v39;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v19 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((_BYTE *)this + 24) |= 2u;
        v24 = *((_QWORD *)a2 + 1);
        if (v24 >= *((_QWORD *)a2 + 2))
        {
          v27 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v25 = v24 + 1;
          v26 = *(unsigned __int8 *)(*(_QWORD *)a2 + v24);
          *((_QWORD *)a2 + 1) = v25;
          v27 = v26 != 0;
        }
        *((_BYTE *)this + 20) = v27;
      }
      else if ((_DWORD)v19 == 2)
      {
        *((_BYTE *)this + 24) |= 1u;
        v28 = *((_QWORD *)a2 + 1);
        v29 = *((_QWORD *)a2 + 2);
        v30 = *(_QWORD *)a2;
        if (v28 > 0xFFFFFFFFFFFFFFF5 || v28 + 10 > v29)
        {
          v36 = 0;
          v37 = 0;
          v33 = 0;
          if (v29 <= v28)
            v29 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v29 == v28)
            {
              LODWORD(v33) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_54;
            }
            v38 = v28 + 1;
            v39 = *(_BYTE *)(v30 + v28);
            *((_QWORD *)a2 + 1) = v38;
            v33 |= (unint64_t)(v39 & 0x7F) << v36;
            if ((v39 & 0x80) == 0)
              break;
            v36 += 7;
            v28 = v38;
            v14 = v37++ > 8;
            if (v14)
            {
LABEL_50:
              LODWORD(v33) = 0;
              goto LABEL_54;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v33) = 0;
        }
        else
        {
          v31 = 0;
          v32 = 0;
          v33 = 0;
          while (1)
          {
            v34 = v28 + 1;
            *((_QWORD *)a2 + 1) = v28 + 1;
            v35 = *(_BYTE *)(v30 + v28);
            v33 |= (unint64_t)(v35 & 0x7F) << v31;
            if ((v35 & 0x80) == 0)
              break;
            v31 += 7;
            v28 = v34;
            v14 = v32++ > 8;
            if (v14)
              goto LABEL_50;
          }
        }
LABEL_54:
        *((_DWORD *)this + 4) = v33;
      }
      else if ((_DWORD)v19 == 1)
      {
        v20 = (_QWORD *)operator new();
        v20[1] = 0;
        v20[2] = 0;
        *v20 = 0;
        v21 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v20;
        if (v21)
          sub_242910C5C(v21);
        PB::Reader::read();
      }
      else
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_27;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::MagneticAccessoryType1::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  if (*(_QWORD *)(this + 8))
    this = PB::Writer::write();
  v4 = *(_BYTE *)(v3 + 24);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 24);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(a2);
  return this;
}

unint64_t CMMsl::MagneticAccessoryType1::hash_value(CMMsl::MagneticAccessoryType1 *this)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    v2 = sub_242910D74(v2);
  if ((*((_BYTE *)this + 24) & 1) != 0)
  {
    v3 = *((unsigned int *)this + 4);
    if ((*((_BYTE *)this + 24) & 2) != 0)
      goto LABEL_5;
LABEL_7:
    v4 = 0;
    return v3 ^ v2 ^ v4;
  }
  v3 = 0;
  if ((*((_BYTE *)this + 24) & 2) == 0)
    goto LABEL_7;
LABEL_5:
  v4 = *((unsigned __int8 *)this + 20);
  return v3 ^ v2 ^ v4;
}

void CMMsl::MagneticAccessoryType2::~MagneticAccessoryType2(CMMsl::MagneticAccessoryType2 *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::MagneticAccessoryType2::MagneticAccessoryType2(uint64_t this, const CMMsl::MagneticAccessoryType2 *a2)
{
  char v2;

  *(_QWORD *)this = &off_25135F1C8;
  *(_DWORD *)(this + 12) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v2 = *((_BYTE *)a2 + 8);
    *(_BYTE *)(this + 12) = 1;
    *(_BYTE *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::MagneticAccessoryType2::operator=(uint64_t a1, uint64_t a2)
{
  char v3;
  int v4;
  char v5;
  void (**v7)(CMMsl::MagneticAccessoryType2 *__hidden);
  char v8;
  int v9;

  if (a1 != a2)
  {
    v7 = &off_25135F1C8;
    v3 = *(_BYTE *)(a2 + 8);
    v4 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = *(_BYTE *)(a2 + 12) & 1;
    v9 = v4;
    v5 = *(_BYTE *)(a1 + 8);
    *(_BYTE *)(a1 + 8) = v3;
    v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

{
  int v3;
  char v4;
  int v5;
  void (**v7)(CMMsl::MagneticAccessoryType2 *__hidden);
  char v8;
  int v9;

  if (a1 != a2)
  {
    v7 = &off_25135F1C8;
    v3 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    v4 = *(_BYTE *)(a2 + 8);
    v5 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v3;
    v9 = v5;
    LOBYTE(v3) = *(_BYTE *)(a1 + 8);
    *(_BYTE *)(a1 + 8) = v4;
    v8 = v3;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::MagneticAccessoryType2 *a2, CMMsl::MagneticAccessoryType2 *a3)
{
  int v3;

  v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  LOBYTE(v3) = *(_BYTE *)(this + 8);
  *(_BYTE *)(this + 8) = *((_BYTE *)a2 + 8);
  *((_BYTE *)a2 + 8) = v3;
  return this;
}

uint64_t CMMsl::MagneticAccessoryType2::formatText(CMMsl::MagneticAccessoryType2 *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 12) & 1) != 0)
    PB::TextFormatter::format(a2, "isCharging");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MagneticAccessoryType2::readFrom(CMMsl::MagneticAccessoryType2 *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v19;
  BOOL v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_24;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 12) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        if (v2 >= v3)
        {
          v20 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v19 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v20 = v19 != 0;
        }
        *((_BYTE *)this + 8) = v20;
      }
      else
      {
LABEL_24:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_24;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::MagneticAccessoryType2::writeTo(uint64_t this, PB::Writer *a2)
{
  if ((*(_BYTE *)(this + 12) & 1) != 0)
    return PB::Writer::write(a2);
  return this;
}

uint64_t CMMsl::MagneticAccessoryType2::hash_value(CMMsl::MagneticAccessoryType2 *this)
{
  if ((*((_BYTE *)this + 12) & 1) != 0)
    return *((unsigned __int8 *)this + 8);
  else
    return 0;
}

void CMMsl::Magnetometer::~Magnetometer(CMMsl::Magnetometer *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::Magnetometer::Magnetometer(uint64_t this, const CMMsl::Magnetometer *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;

  *(_QWORD *)this = &off_25135F200;
  *(_DWORD *)(this + 36) = 0;
  v2 = *((_BYTE *)a2 + 36);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_BYTE *)(this + 36) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 36);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 36) & 8) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 6);
    v3 |= 8u;
    *(_BYTE *)(this + 36) = v3;
    *(_DWORD *)(this + 24) = v5;
    v2 = *((_BYTE *)a2 + 36);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    v6 = *((_DWORD *)a2 + 7);
    v3 |= 0x10u;
    *(_BYTE *)(this + 36) = v3;
    *(_DWORD *)(this + 28) = v6;
    v2 = *((_BYTE *)a2 + 36);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0)
        goto LABEL_9;
      goto LABEL_13;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 8);
  v3 |= 0x20u;
  *(_BYTE *)(this + 36) = v3;
  *(_DWORD *)(this + 32) = v7;
  v2 = *((_BYTE *)a2 + 36);
  if ((v2 & 4) == 0)
  {
LABEL_9:
    if ((v2 & 2) == 0)
      return this;
LABEL_14:
    v9 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 36) = v3 | 2;
    *(_DWORD *)(this + 16) = v9;
    return this;
  }
LABEL_13:
  v8 = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *(_BYTE *)(this + 36) = v3;
  *(_DWORD *)(this + 20) = v8;
  if ((*((_BYTE *)a2 + 36) & 2) != 0)
    goto LABEL_14;
  return this;
}

uint64_t CMMsl::Magnetometer::operator=(uint64_t a1, const CMMsl::Magnetometer *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  int v6;
  _BYTE v8[8];
  uint64_t v9;
  int v10;
  __int128 v11;
  int v12;

  if ((const CMMsl::Magnetometer *)a1 != a2)
  {
    CMMsl::Magnetometer::Magnetometer((uint64_t)v8, a2);
    v3 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v12;
    v12 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 20);
    *(_OWORD *)(a1 + 20) = v11;
    v11 = v5;
    v6 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v10;
    v10 = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::Magnetometer *a2, CMMsl::Magnetometer *a3)
{
  int v3;
  uint64_t v4;
  float result;
  int v6;

  v3 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  result = *((float *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((float *)a2 + 5) = result;
  v6 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v6;
  return result;
}

float CMMsl::Magnetometer::Magnetometer(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135F200;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_25135F200;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::Magnetometer::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  int v9;
  _QWORD v11[2];
  int v12;
  __int128 v13;
  int v14;

  if (a1 != a2)
  {
    v11[0] = &off_25135F200;
    v3 = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a2 + 36) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_DWORD *)(a2 + 16);
    v14 = *(_DWORD *)(a1 + 36);
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v11[1] = v6;
    v7 = *(_OWORD *)(a1 + 20);
    v8 = *(_OWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 36) = v3;
    *(_OWORD *)(a1 + 20) = v8;
    v13 = v7;
    v9 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v5;
    v12 = v9;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

uint64_t CMMsl::Magnetometer::formatText(CMMsl::Magnetometer *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 36);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "location");
    v5 = *((_BYTE *)this + 36);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*((_BYTE *)this + 36) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "temperature", *((float *)this + 5));
  v5 = *((_BYTE *)this + 36);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  v5 = *((_BYTE *)this + 36);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(a2, "y", *((float *)this + 7));
    if ((*((_BYTE *)this + 36) & 0x20) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "x", *((float *)this + 6));
  v5 = *((_BYTE *)this + 36);
  if ((v5 & 0x10) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 0x20) != 0)
LABEL_7:
    PB::TextFormatter::format(a2, "z", *((float *)this + 8));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::Magnetometer::readFrom(CMMsl::Magnetometer *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_60;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 36) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_37;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        v2 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_54;
      case 2u:
        *((_BYTE *)this + 36) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_37;
        *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_53;
      case 3u:
        *((_BYTE *)this + 36) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_37;
        *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_53;
      case 4u:
        *((_BYTE *)this + 36) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_37;
        *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_53;
      case 5u:
        *((_BYTE *)this + 36) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_53:
          v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_54:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_37:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 6u:
        *((_BYTE *)this + 36) |= 2u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v26 = 0;
          v27 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_59;
            }
            v28 = v20++;
            v29 = *(_BYTE *)(v21 + v28);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0)
              break;
            v26 += 7;
            v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_58:
              v2 = v28 + 1;
              goto LABEL_59;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
          goto LABEL_58;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_59;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_59:
        *((_DWORD *)this + 4) = v24;
        break;
      default:
        goto LABEL_19;
    }
LABEL_60:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::Magnetometer::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 36);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 36);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(this + 36) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_12:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  if ((*(_BYTE *)(v3 + 36) & 2) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::Magnetometer::hash_value(CMMsl::Magnetometer *this)
{
  double v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  uint64_t v10;

  if ((*((_BYTE *)this + 36) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 36) & 8) != 0)
      goto LABEL_3;
LABEL_19:
    v3 = 0;
    if ((*((_BYTE *)this + 36) & 0x10) != 0)
      goto LABEL_6;
LABEL_20:
    v5 = 0;
    if ((*((_BYTE *)this + 36) & 0x20) != 0)
      goto LABEL_9;
LABEL_21:
    v7 = 0;
    if ((*((_BYTE *)this + 36) & 4) != 0)
      goto LABEL_12;
    goto LABEL_22;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 36) & 8) == 0)
    goto LABEL_19;
LABEL_3:
  v2 = *((float *)this + 6);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 36) & 0x10) == 0)
    goto LABEL_20;
LABEL_6:
  v4 = *((float *)this + 7);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((*((_BYTE *)this + 36) & 0x20) == 0)
    goto LABEL_21;
LABEL_9:
  v6 = *((float *)this + 8);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  if ((*((_BYTE *)this + 36) & 4) != 0)
  {
LABEL_12:
    v8 = *((float *)this + 5);
    v9 = LODWORD(v8);
    if (v8 == 0.0)
      v9 = 0;
    if ((*((_BYTE *)this + 36) & 2) != 0)
      goto LABEL_15;
LABEL_23:
    v10 = 0;
    return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7 ^ v9 ^ v10;
  }
LABEL_22:
  v9 = 0;
  if ((*((_BYTE *)this + 36) & 2) == 0)
    goto LABEL_23;
LABEL_15:
  v10 = *((int *)this + 4);
  return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7 ^ v9 ^ v10;
}

void CMMsl::MagnetometerCalibratorFilterParameters::~MagnetometerCalibratorFilterParameters(CMMsl::MagnetometerCalibratorFilterParameters *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = &off_25135F238;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 7);
  if (v3)
  {
    *((_QWORD *)this + 8) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 5) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 1);
  if (v5)
  {
    *((_QWORD *)this + 2) = v5;
    operator delete(v5);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::MagnetometerCalibratorFilterParameters::~MagnetometerCalibratorFilterParameters(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::MagnetometerCalibratorFilterParameters *CMMsl::MagnetometerCalibratorFilterParameters::MagnetometerCalibratorFilterParameters(CMMsl::MagnetometerCalibratorFilterParameters *this, const CMMsl::MagnetometerCalibratorFilterParameters *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_25135F238;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (_QWORD *)((char *)this + 8);
  *(_OWORD *)((char *)this + 56) = 0u;
  v5 = (_QWORD *)((char *)this + 56);
  *((_DWORD *)this + 28) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  if ((*((_BYTE *)a2 + 112) & 1) != 0)
  {
    v6 = *((_QWORD *)a2 + 13);
    *((_BYTE *)this + 112) = 1;
    *((_QWORD *)this + 13) = v6;
  }
  if (this != a2)
  {
    sub_242911380((_QWORD *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
    sub_242911380(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
    sub_242911380((_QWORD *)this + 10, *((char **)a2 + 10), *((char **)a2 + 11), (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 2);
    sub_242911380(v5, *((char **)a2 + 7), *((char **)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 2);
  }
  return this;
}

CMMsl *CMMsl::MagnetometerCalibratorFilterParameters::operator=(CMMsl *a1, const CMMsl::MagnetometerCalibratorFilterParameters *a2)
{
  CMMsl::MagnetometerCalibratorFilterParameters *v3;
  _BYTE v5[120];

  if (a1 != a2)
  {
    CMMsl::MagnetometerCalibratorFilterParameters::MagnetometerCalibratorFilterParameters((CMMsl::MagnetometerCalibratorFilterParameters *)v5, a2);
    CMMsl::swap(a1, (CMMsl::MagnetometerCalibratorFilterParameters *)v5, v3);
    CMMsl::MagnetometerCalibratorFilterParameters::~MagnetometerCalibratorFilterParameters((CMMsl::MagnetometerCalibratorFilterParameters *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::MagnetometerCalibratorFilterParameters *a2, CMMsl::MagnetometerCalibratorFilterParameters *a3)
{
  int v3;
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v3;
  result = *((double *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((double *)a2 + 13) = result;
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v5;
  v6 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v6;
  v7 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v7;
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v8;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v9;
  v10 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v10;
  v11 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v11;
  v12 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v12;
  v13 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v13;
  v14 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v14;
  v15 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v15;
  v16 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v16;
  return result;
}

uint64_t CMMsl::MagnetometerCalibratorFilterParameters::MagnetometerCalibratorFilterParameters(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_25135F238;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  sub_242911330(a1 + 32, (__n128 *)(a2 + 32));
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  sub_242911330(a1 + 80, (__n128 *)(a2 + 80));
  sub_242911330(a1 + 56, (__n128 *)(a2 + 56));
  return a1;
}

CMMsl *CMMsl::MagnetometerCalibratorFilterParameters::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::MagnetometerCalibratorFilterParameters *v3;
  _BYTE v5[120];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::MagnetometerCalibratorFilterParameters::MagnetometerCalibratorFilterParameters((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::MagnetometerCalibratorFilterParameters *)v5, v3);
    CMMsl::MagnetometerCalibratorFilterParameters::~MagnetometerCalibratorFilterParameters((CMMsl::MagnetometerCalibratorFilterParameters *)v5);
  }
  return a1;
}

uint64_t CMMsl::MagnetometerCalibratorFilterParameters::formatText(CMMsl::MagnetometerCalibratorFilterParameters *this, PB::TextFormatter *a2, const char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;
  float *v11;
  float *v12;
  float v13;
  float *v14;
  float *v15;
  float v16;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (float *)*((_QWORD *)this + 4);
  v6 = (float *)*((_QWORD *)this + 5);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "biasEst", v7);
  }
  v8 = (float *)*((_QWORD *)this + 1);
  v9 = (float *)*((_QWORD *)this + 2);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(a2, "biasEstVar", v10);
  }
  v11 = (float *)*((_QWORD *)this + 7);
  v12 = (float *)*((_QWORD *)this + 8);
  while (v11 != v12)
  {
    v13 = *v11++;
    PB::TextFormatter::format(a2, "residual", v13);
  }
  v14 = (float *)*((_QWORD *)this + 10);
  v15 = (float *)*((_QWORD *)this + 11);
  while (v14 != v15)
  {
    v16 = *v14++;
    PB::TextFormatter::format(a2, "temperature", v16);
  }
  if ((*((_BYTE *)this + 112) & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 13));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::MagnetometerCalibratorFilterParameters::readFrom(CMMsl::MagnetometerCalibratorFilterParameters *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  _DWORD *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  _DWORD *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  _DWORD *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  int v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  _DWORD *v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  _DWORD *v75;
  int v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  _DWORD *v80;
  unint64_t v81;
  char *v82;
  unint64_t v83;
  char *v84;
  unint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  _DWORD *v111;
  int v112;
  _DWORD *v113;
  int v114;
  _DWORD *v115;
  int v116;
  _DWORD *v117;
  int v118;
  unint64_t v119;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_21:
      v19 = v11 & 7;
      if (v19 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 112) |= 1u;
          v20 = *((_QWORD *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_194;
          *((_QWORD *)this + 13) = *(_QWORD *)(*(_QWORD *)a2 + v20);
          v21 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_196;
        case 2u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v22 = *((_QWORD *)a2 + 1);
            v23 = *((_QWORD *)a2 + 2);
            while (v22 < v23 && !*((_BYTE *)a2 + 24))
            {
              v25 = (char *)*((_QWORD *)this + 5);
              v24 = *((_QWORD *)this + 6);
              if ((unint64_t)v25 >= v24)
              {
                v27 = (char *)*((_QWORD *)this + 4);
                v28 = (v25 - v27) >> 2;
                v29 = v28 + 1;
                if ((unint64_t)(v28 + 1) >> 62)
                  goto LABEL_204;
                v30 = v24 - (_QWORD)v27;
                if (v30 >> 1 > v29)
                  v29 = v30 >> 1;
                if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
                  v31 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v31 = v29;
                if (v31)
                {
                  v31 = (unint64_t)sub_2429114B8(v31);
                  v27 = (char *)*((_QWORD *)this + 4);
                  v25 = (char *)*((_QWORD *)this + 5);
                }
                else
                {
                  v32 = 0;
                }
                v33 = (_DWORD *)(v31 + 4 * v28);
                *v33 = 0;
                v26 = v33 + 1;
                while (v25 != v27)
                {
                  v34 = *((_DWORD *)v25 - 1);
                  v25 -= 4;
                  *--v33 = v34;
                }
                *((_QWORD *)this + 4) = v33;
                *((_QWORD *)this + 5) = v26;
                *((_QWORD *)this + 6) = v31 + 4 * v32;
                if (v27)
                  operator delete(v27);
              }
              else
              {
                *(_DWORD *)v25 = 0;
                v26 = v25 + 4;
              }
              *((_QWORD *)this + 5) = v26;
              v35 = *((_QWORD *)a2 + 1);
              if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_122;
              *(v26 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v35);
              v23 = *((_QWORD *)a2 + 2);
              v22 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v22;
            }
            goto LABEL_123;
          }
          v79 = (char *)*((_QWORD *)this + 5);
          v78 = *((_QWORD *)this + 6);
          if ((unint64_t)v79 >= v78)
          {
            v87 = (char *)*((_QWORD *)this + 4);
            v88 = (v79 - v87) >> 2;
            v89 = v88 + 1;
            if ((unint64_t)(v88 + 1) >> 62)
              goto LABEL_204;
            v90 = v78 - (_QWORD)v87;
            if (v90 >> 1 > v89)
              v89 = v90 >> 1;
            if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFFCLL)
              v91 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v91 = v89;
            if (v91)
            {
              v91 = (unint64_t)sub_2429114B8(v91);
              v87 = (char *)*((_QWORD *)this + 4);
              v79 = (char *)*((_QWORD *)this + 5);
            }
            else
            {
              v92 = 0;
            }
            v111 = (_DWORD *)(v91 + 4 * v88);
            *v111 = 0;
            v80 = v111 + 1;
            while (v79 != v87)
            {
              v112 = *((_DWORD *)v79 - 1);
              v79 -= 4;
              *--v111 = v112;
            }
            *((_QWORD *)this + 4) = v111;
            *((_QWORD *)this + 5) = v80;
            *((_QWORD *)this + 6) = v91 + 4 * v92;
            if (v87)
              operator delete(v87);
          }
          else
          {
            *(_DWORD *)v79 = 0;
            v80 = v79 + 4;
          }
          *((_QWORD *)this + 5) = v80;
          goto LABEL_192;
        case 3u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v36 = *((_QWORD *)a2 + 1);
            v37 = *((_QWORD *)a2 + 2);
            while (v36 < v37 && !*((_BYTE *)a2 + 24))
            {
              v39 = (char *)*((_QWORD *)this + 2);
              v38 = *((_QWORD *)this + 3);
              if ((unint64_t)v39 >= v38)
              {
                v41 = (char *)*((_QWORD *)this + 1);
                v42 = (v39 - v41) >> 2;
                v43 = v42 + 1;
                if ((unint64_t)(v42 + 1) >> 62)
                  goto LABEL_204;
                v44 = v38 - (_QWORD)v41;
                if (v44 >> 1 > v43)
                  v43 = v44 >> 1;
                if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL)
                  v45 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v45 = v43;
                if (v45)
                {
                  v45 = (unint64_t)sub_2429114B8(v45);
                  v41 = (char *)*((_QWORD *)this + 1);
                  v39 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v46 = 0;
                }
                v47 = (_DWORD *)(v45 + 4 * v42);
                *v47 = 0;
                v40 = v47 + 1;
                while (v39 != v41)
                {
                  v48 = *((_DWORD *)v39 - 1);
                  v39 -= 4;
                  *--v47 = v48;
                }
                *((_QWORD *)this + 1) = v47;
                *((_QWORD *)this + 2) = v40;
                *((_QWORD *)this + 3) = v45 + 4 * v46;
                if (v41)
                  operator delete(v41);
              }
              else
              {
                *(_DWORD *)v39 = 0;
                v40 = v39 + 4;
              }
              *((_QWORD *)this + 2) = v40;
              v49 = *((_QWORD *)a2 + 1);
              if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_122;
              *(v40 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v49);
              v37 = *((_QWORD *)a2 + 2);
              v36 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v36;
            }
            goto LABEL_123;
          }
          v82 = (char *)*((_QWORD *)this + 2);
          v81 = *((_QWORD *)this + 3);
          if ((unint64_t)v82 >= v81)
          {
            v93 = (char *)*((_QWORD *)this + 1);
            v94 = (v82 - v93) >> 2;
            v95 = v94 + 1;
            if ((unint64_t)(v94 + 1) >> 62)
              goto LABEL_204;
            v96 = v81 - (_QWORD)v93;
            if (v96 >> 1 > v95)
              v95 = v96 >> 1;
            if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFFCLL)
              v97 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v97 = v95;
            if (v97)
            {
              v97 = (unint64_t)sub_2429114B8(v97);
              v93 = (char *)*((_QWORD *)this + 1);
              v82 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v98 = 0;
            }
            v113 = (_DWORD *)(v97 + 4 * v94);
            *v113 = 0;
            v80 = v113 + 1;
            while (v82 != v93)
            {
              v114 = *((_DWORD *)v82 - 1);
              v82 -= 4;
              *--v113 = v114;
            }
            *((_QWORD *)this + 1) = v113;
            *((_QWORD *)this + 2) = v80;
            *((_QWORD *)this + 3) = v97 + 4 * v98;
            if (v93)
              operator delete(v93);
          }
          else
          {
            *(_DWORD *)v82 = 0;
            v80 = v82 + 4;
          }
          *((_QWORD *)this + 2) = v80;
          goto LABEL_192;
        case 4u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v50 = *((_QWORD *)a2 + 1);
            v51 = *((_QWORD *)a2 + 2);
            while (v50 < v51 && !*((_BYTE *)a2 + 24))
            {
              v53 = (char *)*((_QWORD *)this + 11);
              v52 = *((_QWORD *)this + 12);
              if ((unint64_t)v53 >= v52)
              {
                v55 = (char *)*((_QWORD *)this + 10);
                v56 = (v53 - v55) >> 2;
                v57 = v56 + 1;
                if ((unint64_t)(v56 + 1) >> 62)
                  goto LABEL_204;
                v58 = v52 - (_QWORD)v55;
                if (v58 >> 1 > v57)
                  v57 = v58 >> 1;
                if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL)
                  v59 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v59 = v57;
                if (v59)
                {
                  v59 = (unint64_t)sub_2429114B8(v59);
                  v55 = (char *)*((_QWORD *)this + 10);
                  v53 = (char *)*((_QWORD *)this + 11);
                }
                else
                {
                  v60 = 0;
                }
                v61 = (_DWORD *)(v59 + 4 * v56);
                *v61 = 0;
                v54 = v61 + 1;
                while (v53 != v55)
                {
                  v62 = *((_DWORD *)v53 - 1);
                  v53 -= 4;
                  *--v61 = v62;
                }
                *((_QWORD *)this + 10) = v61;
                *((_QWORD *)this + 11) = v54;
                *((_QWORD *)this + 12) = v59 + 4 * v60;
                if (v55)
                  operator delete(v55);
              }
              else
              {
                *(_DWORD *)v53 = 0;
                v54 = v53 + 4;
              }
              *((_QWORD *)this + 11) = v54;
              v63 = *((_QWORD *)a2 + 1);
              if (v63 > 0xFFFFFFFFFFFFFFFBLL || v63 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_122;
              *(v54 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v63);
              v51 = *((_QWORD *)a2 + 2);
              v50 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v50;
            }
            goto LABEL_123;
          }
          v84 = (char *)*((_QWORD *)this + 11);
          v83 = *((_QWORD *)this + 12);
          if ((unint64_t)v84 >= v83)
          {
            v99 = (char *)*((_QWORD *)this + 10);
            v100 = (v84 - v99) >> 2;
            v101 = v100 + 1;
            if ((unint64_t)(v100 + 1) >> 62)
              goto LABEL_204;
            v102 = v83 - (_QWORD)v99;
            if (v102 >> 1 > v101)
              v101 = v102 >> 1;
            if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFFCLL)
              v103 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v103 = v101;
            if (v103)
            {
              v103 = (unint64_t)sub_2429114B8(v103);
              v99 = (char *)*((_QWORD *)this + 10);
              v84 = (char *)*((_QWORD *)this + 11);
            }
            else
            {
              v104 = 0;
            }
            v115 = (_DWORD *)(v103 + 4 * v100);
            *v115 = 0;
            v80 = v115 + 1;
            while (v84 != v99)
            {
              v116 = *((_DWORD *)v84 - 1);
              v84 -= 4;
              *--v115 = v116;
            }
            *((_QWORD *)this + 10) = v115;
            *((_QWORD *)this + 11) = v80;
            *((_QWORD *)this + 12) = v103 + 4 * v104;
            if (v99)
              operator delete(v99);
          }
          else
          {
            *(_DWORD *)v84 = 0;
            v80 = v84 + 4;
          }
          *((_QWORD *)this + 11) = v80;
          goto LABEL_192;
        case 5u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v64 = *((_QWORD *)a2 + 1);
            v65 = *((_QWORD *)a2 + 2);
            while (v64 < v65 && !*((_BYTE *)a2 + 24))
            {
              v67 = (char *)*((_QWORD *)this + 8);
              v66 = *((_QWORD *)this + 9);
              if ((unint64_t)v67 >= v66)
              {
                v69 = (char *)*((_QWORD *)this + 7);
                v70 = (v67 - v69) >> 2;
                v71 = v70 + 1;
                if ((unint64_t)(v70 + 1) >> 62)
                  goto LABEL_204;
                v72 = v66 - (_QWORD)v69;
                if (v72 >> 1 > v71)
                  v71 = v72 >> 1;
                if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL)
                  v73 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v73 = v71;
                if (v73)
                {
                  v73 = (unint64_t)sub_2429114B8(v73);
                  v69 = (char *)*((_QWORD *)this + 7);
                  v67 = (char *)*((_QWORD *)this + 8);
                }
                else
                {
                  v74 = 0;
                }
                v75 = (_DWORD *)(v73 + 4 * v70);
                *v75 = 0;
                v68 = v75 + 1;
                while (v67 != v69)
                {
                  v76 = *((_DWORD *)v67 - 1);
                  v67 -= 4;
                  *--v75 = v76;
                }
                *((_QWORD *)this + 7) = v75;
                *((_QWORD *)this + 8) = v68;
                *((_QWORD *)this + 9) = v73 + 4 * v74;
                if (v69)
                  operator delete(v69);
              }
              else
              {
                *(_DWORD *)v67 = 0;
                v68 = v67 + 4;
              }
              *((_QWORD *)this + 8) = v68;
              v77 = *((_QWORD *)a2 + 1);
              if (v77 > 0xFFFFFFFFFFFFFFFBLL || v77 + 4 > *((_QWORD *)a2 + 2))
              {
LABEL_122:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v68 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v77);
              v65 = *((_QWORD *)a2 + 2);
              v64 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v64;
            }
LABEL_123:
            PB::Reader::recallMark();
          }
          else
          {
            v86 = (char *)*((_QWORD *)this + 8);
            v85 = *((_QWORD *)this + 9);
            if ((unint64_t)v86 >= v85)
            {
              v105 = (char *)*((_QWORD *)this + 7);
              v106 = (v86 - v105) >> 2;
              v107 = v106 + 1;
              if ((unint64_t)(v106 + 1) >> 62)
LABEL_204:
                sub_242729A44();
              v108 = v85 - (_QWORD)v105;
              if (v108 >> 1 > v107)
                v107 = v108 >> 1;
              if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFFCLL)
                v109 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v109 = v107;
              if (v109)
              {
                v109 = (unint64_t)sub_2429114B8(v109);
                v105 = (char *)*((_QWORD *)this + 7);
                v86 = (char *)*((_QWORD *)this + 8);
              }
              else
              {
                v110 = 0;
              }
              v117 = (_DWORD *)(v109 + 4 * v106);
              *v117 = 0;
              v80 = v117 + 1;
              while (v86 != v105)
              {
                v118 = *((_DWORD *)v86 - 1);
                v86 -= 4;
                *--v117 = v118;
              }
              *((_QWORD *)this + 7) = v117;
              *((_QWORD *)this + 8) = v80;
              *((_QWORD *)this + 9) = v109 + 4 * v110;
              if (v105)
                operator delete(v105);
            }
            else
            {
              *(_DWORD *)v86 = 0;
              v80 = v86 + 4;
            }
            *((_QWORD *)this + 8) = v80;
LABEL_192:
            v119 = *((_QWORD *)a2 + 1);
            if (v119 <= 0xFFFFFFFFFFFFFFFBLL && v119 + 4 <= *((_QWORD *)a2 + 2))
            {
              *(v80 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v119);
              v21 = *((_QWORD *)a2 + 1) + 4;
LABEL_196:
              *((_QWORD *)a2 + 1) = v21;
            }
            else
            {
LABEL_194:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
          break;
        default:
          goto LABEL_19;
      }
      goto LABEL_197;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_21;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    if ((PB::Reader::skip(a2) & 1) == 0)
      return 0;
LABEL_197:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
}

uint64_t CMMsl::MagnetometerCalibratorFilterParameters::writeTo(uint64_t this, PB::Writer *a2)
{
  _QWORD *v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;
  float *v10;
  float *v11;
  float v12;
  float *v13;
  float *v14;
  float v15;

  v3 = (_QWORD *)this;
  if ((*(_BYTE *)(this + 112) & 1) != 0)
    this = PB::Writer::write(a2, *(double *)(this + 104));
  v4 = (float *)v3[4];
  v5 = (float *)v3[5];
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6);
  }
  v7 = (float *)v3[1];
  v8 = (float *)v3[2];
  while (v7 != v8)
  {
    v9 = *v7++;
    this = PB::Writer::write(a2, v9);
  }
  v10 = (float *)v3[10];
  v11 = (float *)v3[11];
  while (v10 != v11)
  {
    v12 = *v10++;
    this = PB::Writer::write(a2, v12);
  }
  v14 = (float *)v3[7];
  v13 = (float *)v3[8];
  while (v14 != v13)
  {
    v15 = *v14++;
    this = PB::Writer::write(a2, v15);
  }
  return this;
}

uint64_t CMMsl::MagnetometerCalibratorFilterParameters::hash_value(CMMsl::MagnetometerCalibratorFilterParameters *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((*((_BYTE *)this + 112) & 1) != 0)
  {
    if (*((double *)this + 13) == 0.0)
      v1 = 0;
    else
      v1 = *((_QWORD *)this + 13);
  }
  else
  {
    v1 = 0;
  }
  v2 = PBHashBytes() ^ v1;
  v3 = PBHashBytes();
  v4 = v2 ^ v3 ^ PBHashBytes();
  return v4 ^ PBHashBytes();
}

void CMMsl::MagnetometerReset::~MagnetometerReset(CMMsl::MagnetometerReset *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::MagnetometerReset::MagnetometerReset(uint64_t this, const CMMsl::MagnetometerReset *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;

  *(_QWORD *)this = &off_25135F270;
  *(_DWORD *)(this + 44) = 0;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 4) != 0)
  {
    v4 = *((_QWORD *)a2 + 3);
    v3 = 4;
    *(_BYTE *)(this + 44) = 4;
    *(_QWORD *)(this + 24) = v4;
    v2 = *((_BYTE *)a2 + 44);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 44) & 2) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 2);
    v3 |= 2u;
    *(_BYTE *)(this + 44) = v3;
    *(_QWORD *)(this + 16) = v5;
    v2 = *((_BYTE *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 1) != 0)
  {
    v6 = *((_QWORD *)a2 + 1);
    v3 |= 1u;
    *(_BYTE *)(this + 44) = v3;
    *(_QWORD *)(this + 8) = v6;
    v2 = *((_BYTE *)a2 + 44);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *(_BYTE *)(this + 44) = v3;
  *(_QWORD *)(this + 32) = v7;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_15;
  }
LABEL_14:
  v8 = *((_BYTE *)a2 + 42);
  v3 |= 0x40u;
  *(_BYTE *)(this + 44) = v3;
  *(_BYTE *)(this + 42) = v8;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x20) == 0)
      return this;
LABEL_16:
    v10 = *((_BYTE *)a2 + 41);
    *(_BYTE *)(this + 44) = v3 | 0x20;
    *(_BYTE *)(this + 41) = v10;
    return this;
  }
LABEL_15:
  v9 = *((_BYTE *)a2 + 40);
  v3 |= 0x10u;
  *(_BYTE *)(this + 44) = v3;
  *(_BYTE *)(this + 40) = v9;
  if ((*((_BYTE *)a2 + 44) & 0x20) != 0)
    goto LABEL_16;
  return this;
}

uint64_t CMMsl::MagnetometerReset::operator=(uint64_t a1, const CMMsl::MagnetometerReset *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  char v14;
  int v15;

  if ((const CMMsl::MagnetometerReset *)a1 != a2)
  {
    CMMsl::MagnetometerReset::MagnetometerReset((uint64_t)&v8, a2);
    v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v15;
    v15 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v10;
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v9 = v5;
    v6 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v11;
    v11 = v6;
    LOBYTE(v6) = *(_BYTE *)(a1 + 42);
    *(_BYTE *)(a1 + 42) = v14;
    v14 = v6;
    LOBYTE(v6) = *(_BYTE *)(a1 + 40);
    *(_BYTE *)(a1 + 40) = v12;
    v12 = v6;
    LOBYTE(v6) = *(_BYTE *)(a1 + 41);
    *(_BYTE *)(a1 + 41) = v13;
    v13 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::MagnetometerReset *a2, CMMsl::MagnetometerReset *a3)
{
  int v3;
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  result = *((double *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((double *)a2 + 3) = result;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  v7 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 42);
  *((_BYTE *)this + 42) = *((_BYTE *)a2 + 42);
  *((_BYTE *)a2 + 42) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 40);
  *((_BYTE *)this + 40) = *((_BYTE *)a2 + 40);
  *((_BYTE *)a2 + 40) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 41);
  *((_BYTE *)this + 41) = *((_BYTE *)a2 + 41);
  *((_BYTE *)a2 + 41) = v7;
  return result;
}

double CMMsl::MagnetometerReset::MagnetometerReset(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135F270;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135F270;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  return result;
}

uint64_t CMMsl::MagnetometerReset::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  void (**v14)(CMMsl::MagnetometerReset *__hidden);
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  int v21;

  if (a1 != a2)
  {
    v14 = &off_25135F270;
    v3 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a2 + 44) = 0;
    v4 = *(_QWORD *)(a2 + 24);
    v5 = *(_QWORD *)(a2 + 32);
    v6 = *(_BYTE *)(a2 + 42);
    v7 = *(_BYTE *)(a2 + 40);
    v8 = *(_BYTE *)(a2 + 41);
    v21 = *(_DWORD *)(a1 + 44);
    v9 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v4;
    v16 = v9;
    v10 = *(_OWORD *)(a1 + 8);
    v11 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 44) = v3;
    *(_OWORD *)(a1 + 8) = v11;
    v15 = v10;
    v12 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v5;
    v17 = v12;
    LOBYTE(v12) = *(_BYTE *)(a1 + 42);
    *(_BYTE *)(a1 + 42) = v6;
    v20 = v12;
    LOBYTE(v12) = *(_BYTE *)(a1 + 40);
    *(_BYTE *)(a1 + 40) = v7;
    v18 = v12;
    LOBYTE(v12) = *(_BYTE *)(a1 + 41);
    *(_BYTE *)(a1 + 41) = v8;
    v19 = v12;
    PB::Base::~Base((PB::Base *)&v14);
  }
  return a1;
}

uint64_t CMMsl::MagnetometerReset::formatText(CMMsl::MagnetometerReset *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "exitingSaturation");
    v5 = *((_BYTE *)this + 44);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*((_BYTE *)this + 44) & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "extendedSaturation");
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "shiftInSaturation");
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 2) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "timeSinceLastRemag");
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 2) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0)
      goto LABEL_7;
LABEL_15:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 3));
    if ((*((_BYTE *)this + 44) & 8) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_8;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "timeSinceLastRemagTrigger");
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 4) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v5 & 8) != 0)
LABEL_8:
    PB::TextFormatter::format(a2, "triggerCount");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MagnetometerReset::readFrom(CMMsl::MagnetometerReset *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  int v39;
  BOOL v40;
  int v41;
  BOOL v42;
  int v43;
  BOOL v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_26;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_21;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_26:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 44) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 2u:
        *((_BYTE *)this + 44) |= 2u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v45 = 0;
          v46 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v21)
            {
              v25 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_90;
            }
            v47 = v21++;
            v48 = *(_BYTE *)(v22 + v47);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v48 & 0x7F) << v45;
            if ((v48 & 0x80) == 0)
              break;
            v45 += 7;
            v14 = v46++ > 8;
            if (v14)
            {
              v25 = 0;
LABEL_89:
              v2 = v47 + 1;
              goto LABEL_90;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v25 = 0;
          goto LABEL_89;
        }
        v23 = 0;
        v24 = 0;
        v25 = 0;
        do
        {
          v2 = v21 + 1;
          *((_QWORD *)a2 + 1) = v21 + 1;
          v26 = *(_BYTE *)(v22 + v21);
          v25 |= (unint64_t)(v26 & 0x7F) << v23;
          if ((v26 & 0x80) == 0)
            goto LABEL_90;
          v23 += 7;
          v21 = v2;
          v14 = v24++ > 8;
        }
        while (!v14);
        v25 = 0;
LABEL_90:
        *((_QWORD *)this + 2) = v25;
        break;
      case 3u:
        *((_BYTE *)this + 44) |= 1u;
        v27 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v28 = *(_QWORD *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v49 = 0;
          v50 = 0;
          v31 = 0;
          if (v2 <= v27)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v27)
            {
              v31 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_95;
            }
            v51 = v27++;
            v52 = *(_BYTE *)(v28 + v51);
            *((_QWORD *)a2 + 1) = v27;
            v31 |= (unint64_t)(v52 & 0x7F) << v49;
            if ((v52 & 0x80) == 0)
              break;
            v49 += 7;
            v14 = v50++ > 8;
            if (v14)
            {
              v31 = 0;
LABEL_94:
              v2 = v51 + 1;
              goto LABEL_95;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v31 = 0;
          goto LABEL_94;
        }
        v29 = 0;
        v30 = 0;
        v31 = 0;
        do
        {
          v2 = v27 + 1;
          *((_QWORD *)a2 + 1) = v27 + 1;
          v32 = *(_BYTE *)(v28 + v27);
          v31 |= (unint64_t)(v32 & 0x7F) << v29;
          if ((v32 & 0x80) == 0)
            goto LABEL_95;
          v29 += 7;
          v27 = v2;
          v14 = v30++ > 8;
        }
        while (!v14);
        v31 = 0;
LABEL_95:
        *((_QWORD *)this + 1) = v31;
        break;
      case 4u:
        *((_BYTE *)this + 44) |= 8u;
        v33 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v34 = *(_QWORD *)a2;
        if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
        {
          v53 = 0;
          v54 = 0;
          v37 = 0;
          if (v2 <= v33)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v33)
            {
              v37 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_100;
            }
            v55 = v33++;
            v56 = *(_BYTE *)(v34 + v55);
            *((_QWORD *)a2 + 1) = v33;
            v37 |= (unint64_t)(v56 & 0x7F) << v53;
            if ((v56 & 0x80) == 0)
              break;
            v53 += 7;
            v14 = v54++ > 8;
            if (v14)
            {
              v37 = 0;
LABEL_99:
              v2 = v55 + 1;
              goto LABEL_100;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v37 = 0;
          goto LABEL_99;
        }
        v35 = 0;
        v36 = 0;
        v37 = 0;
        do
        {
          v2 = v33 + 1;
          *((_QWORD *)a2 + 1) = v33 + 1;
          v38 = *(_BYTE *)(v34 + v33);
          v37 |= (unint64_t)(v38 & 0x7F) << v35;
          if ((v38 & 0x80) == 0)
            goto LABEL_100;
          v35 += 7;
          v33 = v2;
          v14 = v36++ > 8;
        }
        while (!v14);
        v37 = 0;
LABEL_100:
        *((_QWORD *)this + 4) = v37;
        break;
      case 5u:
        *((_BYTE *)this + 44) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v40 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v39 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v40 = v39 != 0;
        }
        *((_BYTE *)this + 42) = v40;
        break;
      case 6u:
        *((_BYTE *)this + 44) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v42 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v41 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v42 = v41 != 0;
        }
        *((_BYTE *)this + 40) = v42;
        break;
      case 7u:
        *((_BYTE *)this + 44) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v44 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v43 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v44 = v43 != 0;
        }
        *((_BYTE *)this + 41) = v44;
        break;
      default:
        goto LABEL_19;
    }
LABEL_21:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::MagnetometerReset::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 44);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24));
    v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(this + 44) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0)
      return this;
    return PB::Writer::write(a2);
  }
LABEL_14:
  this = PB::Writer::write(a2);
  if ((*(_BYTE *)(v3 + 44) & 0x20) != 0)
    return PB::Writer::write(a2);
  return this;
}

uint64_t CMMsl::MagnetometerReset::hash_value(CMMsl::MagnetometerReset *this)
{
  double v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((*((_BYTE *)this + 44) & 4) != 0)
  {
    v1 = *((double *)this + 3);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 44) & 2) != 0)
    {
LABEL_3:
      v2 = *((_QWORD *)this + 2);
      if ((*((_BYTE *)this + 44) & 1) != 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 44) & 2) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 44) & 1) != 0)
  {
LABEL_4:
    v3 = *((_QWORD *)this + 1);
    if ((*((_BYTE *)this + 44) & 8) != 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  v3 = 0;
  if ((*((_BYTE *)this + 44) & 8) != 0)
  {
LABEL_5:
    v4 = *((_QWORD *)this + 4);
    if ((*((_BYTE *)this + 44) & 0x40) != 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  v4 = 0;
  if ((*((_BYTE *)this + 44) & 0x40) != 0)
  {
LABEL_6:
    v5 = *((unsigned __int8 *)this + 42);
    if ((*((_BYTE *)this + 44) & 0x10) != 0)
      goto LABEL_7;
LABEL_16:
    v6 = 0;
    if ((*((_BYTE *)this + 44) & 0x20) != 0)
      goto LABEL_8;
LABEL_17:
    v7 = 0;
    return v2 ^ *(_QWORD *)&v1 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7;
  }
LABEL_15:
  v5 = 0;
  if ((*((_BYTE *)this + 44) & 0x10) == 0)
    goto LABEL_16;
LABEL_7:
  v6 = *((unsigned __int8 *)this + 40);
  if ((*((_BYTE *)this + 44) & 0x20) == 0)
    goto LABEL_17;
LABEL_8:
  v7 = *((unsigned __int8 *)this + 41);
  return v2 ^ *(_QWORD *)&v1 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7;
}

void CMMsl::MapsRouteHintData::~MapsRouteHintData(CMMsl::MapsRouteHintData *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::MapsRouteHintData::MapsRouteHintData(uint64_t this, const CMMsl::MapsRouteHintData *a2)
{
  __int16 v2;
  __int16 v3;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;

  *(_QWORD *)this = &off_25135F2A8;
  *(_DWORD *)(this + 20) = 0;
  v2 = *((_WORD *)a2 + 10);
  if ((v2 & 0x80) != 0)
  {
    v4 = *((_BYTE *)a2 + 15);
    v3 = 128;
    *(_WORD *)(this + 20) = 128;
    *(_BYTE *)(this + 15) = v4;
    v2 = *((_WORD *)a2 + 10);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    v5 = *((_BYTE *)a2 + 9);
    v3 |= 2u;
    *(_WORD *)(this + 20) = v3;
    *(_BYTE *)(this + 9) = v5;
    v2 = *((_WORD *)a2 + 10);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    v6 = *((_BYTE *)a2 + 11);
    v3 |= 8u;
    *(_WORD *)(this + 20) = v3;
    *(_BYTE *)(this + 11) = v6;
    v2 = *((_WORD *)a2 + 10);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_16;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_BYTE *)a2 + 13);
  v3 |= 0x20u;
  *(_WORD *)(this + 20) = v3;
  *(_BYTE *)(this + 13) = v7;
  v2 = *((_WORD *)a2 + 10);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_17;
  }
LABEL_16:
  v8 = *((_BYTE *)a2 + 14);
  v3 |= 0x40u;
  *(_WORD *)(this + 20) = v3;
  *(_BYTE *)(this + 14) = v8;
  v2 = *((_WORD *)a2 + 10);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_18;
  }
LABEL_17:
  v9 = *((_BYTE *)a2 + 12);
  v3 |= 0x10u;
  *(_WORD *)(this + 20) = v3;
  *(_BYTE *)(this + 12) = v9;
  v2 = *((_WORD *)a2 + 10);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0)
      goto LABEL_12;
    goto LABEL_19;
  }
LABEL_18:
  v10 = *((_BYTE *)a2 + 16);
  v3 |= 0x100u;
  *(_WORD *)(this + 20) = v3;
  *(_BYTE *)(this + 16) = v10;
  v2 = *((_WORD *)a2 + 10);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 1) == 0)
      return this;
LABEL_20:
    v12 = *((_BYTE *)a2 + 8);
    *(_WORD *)(this + 20) = v3 | 1;
    *(_BYTE *)(this + 8) = v12;
    return this;
  }
LABEL_19:
  v11 = *((_BYTE *)a2 + 10);
  v3 |= 4u;
  *(_WORD *)(this + 20) = v3;
  *(_BYTE *)(this + 10) = v11;
  if ((*((_WORD *)a2 + 10) & 1) != 0)
    goto LABEL_20;
  return this;
}

uint64_t CMMsl::MapsRouteHintData::operator=(uint64_t a1, const CMMsl::MapsRouteHintData *a2)
{
  int v3;
  uint64_t v4;
  _BYTE v6[8];
  uint64_t v7;
  char v8;
  int v9;

  if ((const CMMsl::MapsRouteHintData *)a1 != a2)
  {
    CMMsl::MapsRouteHintData::MapsRouteHintData((uint64_t)v6, a2);
    v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v9;
    v9 = v3;
    LOBYTE(v3) = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v8;
    v8 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v7;
    v7 = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::MapsRouteHintData *a2, CMMsl::MapsRouteHintData *a3)
{
  int v3;

  v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  LOBYTE(v3) = *(_BYTE *)(this + 15);
  *(_BYTE *)(this + 15) = *((_BYTE *)a2 + 15);
  *((_BYTE *)a2 + 15) = v3;
  LOBYTE(v3) = *(_BYTE *)(this + 9);
  *(_BYTE *)(this + 9) = *((_BYTE *)a2 + 9);
  *((_BYTE *)a2 + 9) = v3;
  LOBYTE(v3) = *(_BYTE *)(this + 11);
  *(_BYTE *)(this + 11) = *((_BYTE *)a2 + 11);
  *((_BYTE *)a2 + 11) = v3;
  LOBYTE(v3) = *(_BYTE *)(this + 13);
  *(_BYTE *)(this + 13) = *((_BYTE *)a2 + 13);
  *((_BYTE *)a2 + 13) = v3;
  LOBYTE(v3) = *(_BYTE *)(this + 14);
  *(_BYTE *)(this + 14) = *((_BYTE *)a2 + 14);
  *((_BYTE *)a2 + 14) = v3;
  LOBYTE(v3) = *(_BYTE *)(this + 12);
  *(_BYTE *)(this + 12) = *((_BYTE *)a2 + 12);
  *((_BYTE *)a2 + 12) = v3;
  LOBYTE(v3) = *(_BYTE *)(this + 16);
  *(_BYTE *)(this + 16) = *((_BYTE *)a2 + 16);
  *((_BYTE *)a2 + 16) = v3;
  LOBYTE(v3) = *(_BYTE *)(this + 10);
  *(_BYTE *)(this + 10) = *((_BYTE *)a2 + 10);
  *((_BYTE *)a2 + 10) = v3;
  LOBYTE(v3) = *(_BYTE *)(this + 8);
  *(_BYTE *)(this + 8) = *((_BYTE *)a2 + 8);
  *((_BYTE *)a2 + 8) = v3;
  return this;
}

uint64_t CMMsl::MapsRouteHintData::MapsRouteHintData(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = &off_25135F2A8;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_BYTE *)(result + 15) = *(_BYTE *)(a2 + 15);
  *(_BYTE *)(result + 9) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(result + 11) = *(_BYTE *)(a2 + 11);
  *(_BYTE *)(result + 13) = *(_BYTE *)(a2 + 13);
  *(_BYTE *)(result + 14) = *(_BYTE *)(a2 + 14);
  *(_BYTE *)(result + 12) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(result + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(result + 10) = *(_BYTE *)(a2 + 10);
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  return result;
}

{
  *(_QWORD *)result = &off_25135F2A8;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_BYTE *)(result + 15) = *(_BYTE *)(a2 + 15);
  *(_BYTE *)(result + 9) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(result + 11) = *(_BYTE *)(a2 + 11);
  *(_BYTE *)(result + 13) = *(_BYTE *)(a2 + 13);
  *(_BYTE *)(result + 14) = *(_BYTE *)(a2 + 14);
  *(_BYTE *)(result + 12) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(result + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(result + 10) = *(_BYTE *)(a2 + 10);
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  return result;
}

uint64_t CMMsl::MapsRouteHintData::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  char v9;
  int v10;

  if (a1 != a2)
  {
    v8[0] = &off_25135F2A8;
    v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    v4 = *(_BYTE *)(a2 + 16);
    v10 = *(_DWORD *)(a1 + 20);
    v9 = *(_BYTE *)(a1 + 16);
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 20) = v3;
    *(_BYTE *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 8) = v6;
    v8[1] = v5;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::MapsRouteHintData::formatText(CMMsl::MapsRouteHintData *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 10);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "isAppleMapsRoutingActive");
    v5 = *((_WORD *)this + 10);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "isBicycleRouting");
  v5 = *((_WORD *)this + 10);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "isBicycleRoutingActive");
  v5 = *((_WORD *)this + 10);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "isPedestrianRouting");
  v5 = *((_WORD *)this + 10);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "isPedestrianRoutingActive");
  v5 = *((_WORD *)this + 10);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "isStepTypeBicycle");
  v5 = *((_WORD *)this + 10);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
LABEL_19:
    PB::TextFormatter::format(a2, "isVehicularRouting");
    if ((*((_WORD *)this + 10) & 0x100) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_10;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "isStepTypePedestrian");
  v5 = *((_WORD *)this + 10);
  if ((v5 & 0x80) != 0)
    goto LABEL_19;
LABEL_9:
  if ((v5 & 0x100) != 0)
LABEL_10:
    PB::TextFormatter::format(a2, "isVehicularRoutingActive");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MapsRouteHintData::readFrom(CMMsl::MapsRouteHintData *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v20;
  BOOL v21;
  int v22;
  BOOL v23;
  int v24;
  BOOL v25;
  int v26;
  BOOL v27;
  int v28;
  BOOL v29;
  int v30;
  BOOL v31;
  int v32;
  BOOL v33;
  int v34;
  BOOL v35;
  int v36;
  BOOL v37;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
        break;
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_24;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
LABEL_21:
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_24:
    if ((v11 & 7) != 4)
    {
      switch((v11 >> 3))
      {
        case 1u:
          *((_WORD *)this + 10) |= 0x80u;
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          if (v2 >= v3)
          {
            v21 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v20 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
            *((_QWORD *)a2 + 1) = v2;
            v21 = v20 != 0;
          }
          *((_BYTE *)this + 15) = v21;
          goto LABEL_21;
        case 2u:
          *((_WORD *)this + 10) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          if (v2 >= v3)
          {
            v23 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v22 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
            *((_QWORD *)a2 + 1) = v2;
            v23 = v22 != 0;
          }
          *((_BYTE *)this + 9) = v23;
          goto LABEL_21;
        case 3u:
          *((_WORD *)this + 10) |= 8u;
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          if (v2 >= v3)
          {
            v25 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v24 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
            *((_QWORD *)a2 + 1) = v2;
            v25 = v24 != 0;
          }
          *((_BYTE *)this + 11) = v25;
          goto LABEL_21;
        case 4u:
          *((_WORD *)this + 10) |= 0x20u;
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          if (v2 >= v3)
          {
            v27 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v26 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
            *((_QWORD *)a2 + 1) = v2;
            v27 = v26 != 0;
          }
          *((_BYTE *)this + 13) = v27;
          goto LABEL_21;
        case 5u:
          *((_WORD *)this + 10) |= 0x40u;
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          if (v2 >= v3)
          {
            v29 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v28 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
            *((_QWORD *)a2 + 1) = v2;
            v29 = v28 != 0;
          }
          *((_BYTE *)this + 14) = v29;
          goto LABEL_21;
        case 6u:
          *((_WORD *)this + 10) |= 0x10u;
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          if (v2 >= v3)
          {
            v31 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v30 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
            *((_QWORD *)a2 + 1) = v2;
            v31 = v30 != 0;
          }
          *((_BYTE *)this + 12) = v31;
          goto LABEL_21;
        case 7u:
          *((_WORD *)this + 10) |= 0x100u;
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          if (v2 >= v3)
          {
            v33 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v32 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
            *((_QWORD *)a2 + 1) = v2;
            v33 = v32 != 0;
          }
          *((_BYTE *)this + 16) = v33;
          goto LABEL_21;
        case 8u:
          *((_WORD *)this + 10) |= 4u;
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          if (v2 >= v3)
          {
            v35 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v34 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
            *((_QWORD *)a2 + 1) = v2;
            v35 = v34 != 0;
          }
          *((_BYTE *)this + 10) = v35;
          goto LABEL_21;
        case 9u:
          *((_WORD *)this + 10) |= 1u;
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          if (v2 >= v3)
          {
            v37 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v36 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
            *((_QWORD *)a2 + 1) = v2;
            v37 = v36 != 0;
          }
          *((_BYTE *)this + 8) = v37;
          goto LABEL_21;
        default:
          goto LABEL_19;
      }
    }
    v4 = 0;
  }
  return v4 == 0;
}

uint64_t CMMsl::MapsRouteHintData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 20);
  if ((v4 & 0x80) != 0)
  {
    this = PB::Writer::write(a2);
    v4 = *(_WORD *)(v3 + 20);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2);
  v4 = *(_WORD *)(v3 + 20);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2);
  v4 = *(_WORD *)(v3 + 20);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2);
  v4 = *(_WORD *)(v3 + 20);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2);
  v4 = *(_WORD *)(v3 + 20);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2);
  v4 = *(_WORD *)(v3 + 20);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2);
  v4 = *(_WORD *)(v3 + 20);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 1) == 0)
      return this;
    return PB::Writer::write(a2);
  }
LABEL_18:
  this = PB::Writer::write(a2);
  if ((*(_WORD *)(v3 + 20) & 1) != 0)
    return PB::Writer::write(a2);
  return this;
}

uint64_t CMMsl::MapsRouteHintData::hash_value(CMMsl::MapsRouteHintData *this)
{
  __int16 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *((_WORD *)this + 10);
  if ((v1 & 0x80) != 0)
  {
    v2 = *((unsigned __int8 *)this + 15);
    if ((v1 & 2) != 0)
    {
LABEL_3:
      v3 = *((unsigned __int8 *)this + 9);
      if ((v1 & 8) != 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else
  {
    v2 = 0;
    if ((v1 & 2) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_4:
    v4 = *((unsigned __int8 *)this + 11);
    if ((v1 & 0x20) != 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  v4 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_5:
    v5 = *((unsigned __int8 *)this + 13);
    if ((v1 & 0x40) != 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  v5 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_6:
    v6 = *((unsigned __int8 *)this + 14);
    if ((v1 & 0x10) != 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  v6 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_7:
    v7 = *((unsigned __int8 *)this + 12);
    if ((*((_WORD *)this + 10) & 0x100) != 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  v7 = 0;
  if ((*((_WORD *)this + 10) & 0x100) != 0)
  {
LABEL_8:
    v8 = *((unsigned __int8 *)this + 16);
    if ((v1 & 4) != 0)
      goto LABEL_9;
LABEL_18:
    v9 = 0;
    if ((v1 & 1) != 0)
      goto LABEL_10;
LABEL_19:
    v10 = 0;
    return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10;
  }
LABEL_17:
  v8 = 0;
  if ((v1 & 4) == 0)
    goto LABEL_18;
LABEL_9:
  v9 = *((unsigned __int8 *)this + 10);
  if ((v1 & 1) == 0)
    goto LABEL_19;
LABEL_10:
  v10 = *((unsigned __int8 *)this + 8);
  return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10;
}

void CMMsl::MetsInfo::~MetsInfo(CMMsl::MetsInfo *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::MetsInfo::MetsInfo(CMMsl::MetsInfo *this, const CMMsl::MetsInfo *a2)
{
  char v2;
  char v3;
  float result;
  int v5;

  *(_QWORD *)this = &off_25135F2E0;
  *((_DWORD *)this + 7) = 0;
  v2 = *((_BYTE *)a2 + 28);
  if ((v2 & 1) != 0)
  {
    result = *((float *)a2 + 2);
    v3 = 1;
    *((_BYTE *)this + 28) = 1;
    *((float *)this + 2) = result;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 28) & 4) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 4);
    v3 |= 4u;
    *((_BYTE *)this + 28) = v3;
    *((float *)this + 4) = result;
    v2 = *((_BYTE *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    result = *((float *)a2 + 5);
    v3 |= 8u;
    *((_BYTE *)this + 28) = v3;
    *((float *)this + 5) = result;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0)
        return result;
LABEL_12:
      result = *((float *)a2 + 3);
      *((_BYTE *)this + 28) = v3 | 2;
      *((float *)this + 3) = result;
      return result;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v5 = *((_DWORD *)a2 + 6);
  v3 |= 0x10u;
  *((_BYTE *)this + 28) = v3;
  *((_DWORD *)this + 6) = v5;
  if ((*((_BYTE *)a2 + 28) & 2) != 0)
    goto LABEL_12;
  return result;
}

uint64_t CMMsl::MetsInfo::operator=(uint64_t a1, const CMMsl::MetsInfo *a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  if ((const CMMsl::MetsInfo *)a1 != a2)
  {
    CMMsl::MetsInfo::MetsInfo((CMMsl::MetsInfo *)&v6, a2);
    v3 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::MetsInfo *a2, CMMsl::MetsInfo *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  float result;

  v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  v4 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  v6 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v6;
  v7 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v7;
  result = *((float *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((float *)a2 + 3) = result;
  return result;
}

float CMMsl::MetsInfo::MetsInfo(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135F2E0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_25135F2E0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  return result;
}

uint64_t CMMsl::MetsInfo::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  void (**v7)(CMMsl::MetsInfo *__hidden);
  __int128 v8;
  uint64_t v9;

  if (a1 != a2)
  {
    v7 = &off_25135F2E0;
    v3 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 28) = 0;
    v9 = *(_QWORD *)(a1 + 24);
    v4 = *(_OWORD *)(a1 + 8);
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = v3;
    *(_OWORD *)(a1 + 8) = v5;
    v8 = v4;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::MetsInfo::formatText(CMMsl::MetsInfo *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "mets", *((float *)this + 2));
    v5 = *((_BYTE *)this + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*((_BYTE *)this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "metsDiff", *((float *)this + 3));
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(a2, "metsWR", *((float *)this + 5));
    if ((*((_BYTE *)this + 28) & 0x10) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(a2, "metsHR", *((float *)this + 4));
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 8) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 0x10) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "source");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MetsInfo::readFrom(CMMsl::MetsInfo *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_56;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 28) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_41;
        *((_DWORD *)this + 2) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_50;
      case 2u:
        *((_BYTE *)this + 28) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_41;
        *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_50;
      case 3u:
        *((_BYTE *)this + 28) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_41;
        *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_50;
      case 4u:
        *((_BYTE *)this + 28) |= 0x10u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v26 = 0;
          v27 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_55;
            }
            v28 = v20++;
            v29 = *(_BYTE *)(v21 + v28);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0)
              break;
            v26 += 7;
            v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_54:
              v2 = v28 + 1;
              goto LABEL_55;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
          goto LABEL_54;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_55;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_55:
        *((_DWORD *)this + 6) = v24;
        break;
      case 5u:
        *((_BYTE *)this + 28) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 3) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_50:
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_41:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_56:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::MetsInfo::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 28);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 8));
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(this + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 12));
  }
LABEL_10:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_BYTE *)(v3 + 28) & 2) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 12));
  return this;
}

uint64_t CMMsl::MetsInfo::hash_value(CMMsl::MetsInfo *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;

  if ((*((_BYTE *)this + 28) & 1) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 28) & 4) != 0)
      goto LABEL_3;
LABEL_16:
    v3 = 0;
    if ((*((_BYTE *)this + 28) & 8) != 0)
      goto LABEL_6;
LABEL_17:
    v5 = 0;
    if ((*((_BYTE *)this + 28) & 0x10) != 0)
      goto LABEL_9;
    goto LABEL_18;
  }
  v9 = *((float *)this + 2);
  v1 = LODWORD(v9);
  if (v9 == 0.0)
    v1 = 0;
  if ((*((_BYTE *)this + 28) & 4) == 0)
    goto LABEL_16;
LABEL_3:
  v2 = *((float *)this + 4);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 28) & 8) == 0)
    goto LABEL_17;
LABEL_6:
  v4 = *((float *)this + 5);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((*((_BYTE *)this + 28) & 0x10) != 0)
  {
LABEL_9:
    v6 = *((unsigned int *)this + 6);
    if ((*((_BYTE *)this + 28) & 2) != 0)
      goto LABEL_10;
LABEL_19:
    v8 = 0;
    return v3 ^ v1 ^ v5 ^ v6 ^ v8;
  }
LABEL_18:
  v6 = 0;
  if ((*((_BYTE *)this + 28) & 2) == 0)
    goto LABEL_19;
LABEL_10:
  v7 = *((float *)this + 3);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  return v3 ^ v1 ^ v5 ^ v6 ^ v8;
}

void CMMsl::MobilityBoutMetrics::~MobilityBoutMetrics(CMMsl::MobilityBoutMetrics *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::MobilityBoutMetrics::MobilityBoutMetrics(CMMsl::MobilityBoutMetrics *this, const CMMsl::MobilityBoutMetrics *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  char v7;
  char v8;
  int v9;
  char v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  char v25;
  char v26;
  int v27;

  *(_QWORD *)this = &off_25135F318;
  *((_QWORD *)this + 23) = 0;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 4) != 0)
  {
    v4 = *((_QWORD *)a2 + 3);
    v3 = 4;
    *((_QWORD *)this + 23) = 4;
    *((_QWORD *)this + 3) = v4;
    v2 = *((_QWORD *)a2 + 23);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 1) != 0)
  {
LABEL_5:
    v4 = *((_QWORD *)a2 + 1);
    v3 |= 1uLL;
    *((_QWORD *)this + 23) = v3;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_QWORD *)a2 + 23);
  }
LABEL_6:
  if ((v2 & 0x200000) != 0)
  {
    v5 = *((_DWORD *)a2 + 26);
    v3 |= 0x200000uLL;
    *((_QWORD *)this + 23) = v3;
    *((_DWORD *)this + 26) = v5;
    v2 = *((_QWORD *)a2 + 23);
    if ((v2 & 0x1000000000) == 0)
    {
LABEL_8:
      if ((v2 & 0x100000000000) == 0)
        goto LABEL_9;
      goto LABEL_52;
    }
  }
  else if ((v2 & 0x1000000000) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 41);
  v3 |= 0x1000000000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 41) = v4;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x100000000000) == 0)
  {
LABEL_9:
    if ((v2 & 0x800) == 0)
      goto LABEL_10;
    goto LABEL_53;
  }
LABEL_52:
  v6 = *((_BYTE *)a2 + 181);
  v3 |= 0x100000000000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_BYTE *)this + 181) = v6;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x800) == 0)
  {
LABEL_10:
    if ((v2 & 0x10000000000) == 0)
      goto LABEL_11;
    goto LABEL_54;
  }
LABEL_53:
  LODWORD(v4) = *((_DWORD *)a2 + 16);
  v3 |= 0x800uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 16) = v4;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x10000000000) == 0)
  {
LABEL_11:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_12;
    goto LABEL_55;
  }
LABEL_54:
  v7 = *((_BYTE *)a2 + 177);
  v3 |= 0x10000000000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_BYTE *)this + 177) = v7;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_12:
    if ((v2 & 0x80000000000) == 0)
      goto LABEL_13;
    goto LABEL_56;
  }
LABEL_55:
  LODWORD(v4) = *((_DWORD *)a2 + 30);
  v3 |= 0x2000000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 30) = v4;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x80000000000) == 0)
  {
LABEL_13:
    if ((v2 & 0x4000) == 0)
      goto LABEL_14;
    goto LABEL_57;
  }
LABEL_56:
  v8 = *((_BYTE *)a2 + 180);
  v3 |= 0x80000000000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_BYTE *)this + 180) = v8;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x4000) == 0)
  {
LABEL_14:
    if ((v2 & 2) == 0)
      goto LABEL_15;
    goto LABEL_58;
  }
LABEL_57:
  v9 = *((_DWORD *)a2 + 19);
  v3 |= 0x4000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 19) = v9;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 2) == 0)
  {
LABEL_15:
    if ((v2 & 8) == 0)
      goto LABEL_16;
    goto LABEL_59;
  }
LABEL_58:
  v4 = *((_QWORD *)a2 + 2);
  v3 |= 2uLL;
  *((_QWORD *)this + 23) = v3;
  *((_QWORD *)this + 2) = v4;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 8) == 0)
  {
LABEL_16:
    if ((v2 & 0x8000000000) == 0)
      goto LABEL_17;
    goto LABEL_60;
  }
LABEL_59:
  LODWORD(v4) = *((_DWORD *)a2 + 8);
  v3 |= 8uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 8) = v4;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x8000000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x2000) == 0)
      goto LABEL_18;
    goto LABEL_61;
  }
LABEL_60:
  v10 = *((_BYTE *)a2 + 176);
  v3 |= 0x8000000000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_BYTE *)this + 176) = v10;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x2000) == 0)
  {
LABEL_18:
    if ((v2 & 0x200000000) == 0)
      goto LABEL_19;
    goto LABEL_62;
  }
LABEL_61:
  v11 = *((_DWORD *)a2 + 18);
  v3 |= 0x2000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 18) = v11;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x200000000) == 0)
  {
LABEL_19:
    if ((v2 & 0x4000000000) == 0)
      goto LABEL_20;
    goto LABEL_63;
  }
LABEL_62:
  v12 = *((_DWORD *)a2 + 38);
  v3 |= 0x200000000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 38) = v12;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x4000000000) == 0)
  {
LABEL_20:
    if ((v2 & 0x100000) == 0)
      goto LABEL_21;
    goto LABEL_64;
  }
LABEL_63:
  v13 = *((_DWORD *)a2 + 43);
  v3 |= 0x4000000000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 43) = v13;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x100000) == 0)
  {
LABEL_21:
    if ((v2 & 0x20000) == 0)
      goto LABEL_22;
    goto LABEL_65;
  }
LABEL_64:
  v14 = *((_DWORD *)a2 + 25);
  v3 |= 0x100000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 25) = v14;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x20000) == 0)
  {
LABEL_22:
    if ((v2 & 0x10000) == 0)
      goto LABEL_23;
    goto LABEL_66;
  }
LABEL_65:
  v15 = *((_DWORD *)a2 + 22);
  v3 |= 0x20000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 22) = v15;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x10000) == 0)
  {
LABEL_23:
    if ((v2 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_67;
  }
LABEL_66:
  v16 = *((_DWORD *)a2 + 21);
  v3 |= 0x10000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 21) = v16;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x40000) == 0)
  {
LABEL_24:
    if ((v2 & 0x80000) == 0)
      goto LABEL_25;
    goto LABEL_68;
  }
LABEL_67:
  v17 = *((_DWORD *)a2 + 23);
  v3 |= 0x40000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 23) = v17;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x80000) == 0)
  {
LABEL_25:
    if ((v2 & 0x8000) == 0)
      goto LABEL_26;
    goto LABEL_69;
  }
LABEL_68:
  v18 = *((_DWORD *)a2 + 24);
  v3 |= 0x80000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 24) = v18;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x8000) == 0)
  {
LABEL_26:
    if ((v2 & 0x400) == 0)
      goto LABEL_27;
    goto LABEL_70;
  }
LABEL_69:
  v19 = *((_DWORD *)a2 + 20);
  v3 |= 0x8000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 20) = v19;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x400) == 0)
  {
LABEL_27:
    if ((v2 & 0x2000000000) == 0)
      goto LABEL_28;
    goto LABEL_71;
  }
LABEL_70:
  v20 = *((_DWORD *)a2 + 15);
  v3 |= 0x400uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 15) = v20;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x2000000000) == 0)
  {
LABEL_28:
    if ((v2 & 0x1000) == 0)
      goto LABEL_29;
    goto LABEL_72;
  }
LABEL_71:
  v21 = *((_DWORD *)a2 + 42);
  v3 |= 0x2000000000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 42) = v21;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x1000) == 0)
  {
LABEL_29:
    if ((v2 & 0x20000000) == 0)
      goto LABEL_30;
    goto LABEL_73;
  }
LABEL_72:
  v22 = *((_DWORD *)a2 + 17);
  v3 |= 0x1000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 17) = v22;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_30:
    if ((v2 & 0x10) == 0)
      goto LABEL_31;
    goto LABEL_74;
  }
LABEL_73:
  v23 = *((_DWORD *)a2 + 34);
  v3 |= 0x20000000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 34) = v23;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x10) == 0)
  {
LABEL_31:
    if ((v2 & 0x400000000) == 0)
      goto LABEL_32;
    goto LABEL_75;
  }
LABEL_74:
  v24 = *((_DWORD *)a2 + 9);
  v3 |= 0x10uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 9) = v24;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x400000000) == 0)
  {
LABEL_32:
    if ((v2 & 0x20000000000) == 0)
      goto LABEL_33;
    goto LABEL_76;
  }
LABEL_75:
  LODWORD(v4) = *((_DWORD *)a2 + 39);
  v3 |= 0x400000000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 39) = v4;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x20000000000) == 0)
  {
LABEL_33:
    if ((v2 & 0x800000000) == 0)
      goto LABEL_34;
    goto LABEL_77;
  }
LABEL_76:
  v25 = *((_BYTE *)a2 + 178);
  v3 |= 0x20000000000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_BYTE *)this + 178) = v25;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x800000000) == 0)
  {
LABEL_34:
    if ((v2 & 0x40000000000) == 0)
      goto LABEL_35;
    goto LABEL_78;
  }
LABEL_77:
  LODWORD(v4) = *((_DWORD *)a2 + 40);
  v3 |= 0x800000000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 40) = v4;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x40000000000) == 0)
  {
LABEL_35:
    if ((v2 & 0x20) == 0)
      goto LABEL_36;
    goto LABEL_79;
  }
LABEL_78:
  v26 = *((_BYTE *)a2 + 179);
  v3 |= 0x40000000000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_BYTE *)this + 179) = v26;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x20) == 0)
  {
LABEL_36:
    if ((v2 & 0x80) == 0)
      goto LABEL_37;
    goto LABEL_80;
  }
LABEL_79:
  v27 = *((_DWORD *)a2 + 10);
  v3 |= 0x20uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 10) = v27;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x80) == 0)
  {
LABEL_37:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_38;
    goto LABEL_81;
  }
LABEL_80:
  LODWORD(v4) = *((_DWORD *)a2 + 12);
  v3 |= 0x80uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 12) = v4;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_38:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_39;
    goto LABEL_82;
  }
LABEL_81:
  LODWORD(v4) = *((_DWORD *)a2 + 31);
  v3 |= 0x4000000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 31) = v4;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_39:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_40;
    goto LABEL_83;
  }
LABEL_82:
  LODWORD(v4) = *((_DWORD *)a2 + 32);
  v3 |= 0x8000000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 32) = v4;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_40:
    if ((v2 & 0x40) == 0)
      goto LABEL_41;
    goto LABEL_84;
  }
LABEL_83:
  LODWORD(v4) = *((_DWORD *)a2 + 33);
  v3 |= 0x10000000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 33) = v4;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x40) == 0)
  {
LABEL_41:
    if ((v2 & 0x100) == 0)
      goto LABEL_42;
    goto LABEL_85;
  }
LABEL_84:
  LODWORD(v4) = *((_DWORD *)a2 + 11);
  v3 |= 0x40uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 11) = v4;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x100) == 0)
  {
LABEL_42:
    if ((v2 & 0x200) == 0)
      goto LABEL_43;
    goto LABEL_86;
  }
LABEL_85:
  LODWORD(v4) = *((_DWORD *)a2 + 13);
  v3 |= 0x100uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 13) = v4;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x200) == 0)
  {
LABEL_43:
    if ((v2 & 0x400000) == 0)
      goto LABEL_44;
    goto LABEL_87;
  }
LABEL_86:
  LODWORD(v4) = *((_DWORD *)a2 + 14);
  v3 |= 0x200uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 14) = v4;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x400000) == 0)
  {
LABEL_44:
    if ((v2 & 0x800000) == 0)
      goto LABEL_45;
    goto LABEL_88;
  }
LABEL_87:
  LODWORD(v4) = *((_DWORD *)a2 + 27);
  v3 |= 0x400000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 27) = v4;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x800000) == 0)
  {
LABEL_45:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_46;
    goto LABEL_89;
  }
LABEL_88:
  LODWORD(v4) = *((_DWORD *)a2 + 28);
  v3 |= 0x800000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 28) = v4;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_46:
    if ((v2 & 0x40000000) == 0)
      goto LABEL_47;
    goto LABEL_90;
  }
LABEL_89:
  LODWORD(v4) = *((_DWORD *)a2 + 29);
  v3 |= 0x1000000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 29) = v4;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_47:
    if ((v2 & 0x80000000) == 0)
      goto LABEL_48;
    goto LABEL_91;
  }
LABEL_90:
  LODWORD(v4) = *((_DWORD *)a2 + 35);
  v3 |= 0x40000000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 35) = v4;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_48:
    if ((v2 & 0x100000000) == 0)
      return *(float *)&v4;
    goto LABEL_92;
  }
LABEL_91:
  LODWORD(v4) = *((_DWORD *)a2 + 36);
  v3 |= 0x80000000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 36) = v4;
  if ((*((_QWORD *)a2 + 23) & 0x100000000) == 0)
    return *(float *)&v4;
LABEL_92:
  LODWORD(v4) = *((_DWORD *)a2 + 37);
  *((_QWORD *)this + 23) = v3 | 0x100000000;
  *((_DWORD *)this + 37) = v4;
  return *(float *)&v4;
}

CMMsl *CMMsl::MobilityBoutMetrics::operator=(CMMsl *a1, const CMMsl::MobilityBoutMetrics *a2)
{
  CMMsl::MobilityBoutMetrics *v3;
  _BYTE v5[192];

  if (a1 != a2)
  {
    CMMsl::MobilityBoutMetrics::MobilityBoutMetrics((CMMsl::MobilityBoutMetrics *)v5, a2);
    CMMsl::swap(a1, (CMMsl::MobilityBoutMetrics *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::MobilityBoutMetrics *a2, CMMsl::MobilityBoutMetrics *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float result;

  v3 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = *((_QWORD *)a2 + 23);
  *((_QWORD *)a2 + 23) = v3;
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  LODWORD(v3) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v3;
  LODWORD(v5) = *((_DWORD *)this + 41);
  *((_DWORD *)this + 41) = *((_DWORD *)a2 + 41);
  *((_DWORD *)a2 + 41) = v5;
  LOBYTE(v3) = *((_BYTE *)this + 181);
  *((_BYTE *)this + 181) = *((_BYTE *)a2 + 181);
  *((_BYTE *)a2 + 181) = v3;
  LODWORD(v5) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v5;
  LOBYTE(v3) = *((_BYTE *)this + 177);
  *((_BYTE *)this + 177) = *((_BYTE *)a2 + 177);
  *((_BYTE *)a2 + 177) = v3;
  LODWORD(v5) = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v5;
  LOBYTE(v3) = *((_BYTE *)this + 180);
  *((_BYTE *)this + 180) = *((_BYTE *)a2 + 180);
  *((_BYTE *)a2 + 180) = v3;
  LODWORD(v3) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v3;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  LODWORD(v6) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v6;
  LOBYTE(v3) = *((_BYTE *)this + 176);
  *((_BYTE *)this + 176) = *((_BYTE *)a2 + 176);
  *((_BYTE *)a2 + 176) = v3;
  LODWORD(v3) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v3;
  LODWORD(v3) = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v3;
  LODWORD(v3) = *((_DWORD *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((_DWORD *)a2 + 43) = v3;
  LODWORD(v3) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v3;
  LODWORD(v3) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v3;
  LODWORD(v3) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v3;
  LODWORD(v3) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v3;
  LODWORD(v3) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v3;
  LODWORD(v3) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v3;
  LODWORD(v3) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v3;
  LODWORD(v3) = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v3;
  LODWORD(v3) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v3;
  LODWORD(v3) = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v3;
  LODWORD(v3) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v3;
  LODWORD(v6) = *((_DWORD *)this + 39);
  *((_DWORD *)this + 39) = *((_DWORD *)a2 + 39);
  *((_DWORD *)a2 + 39) = v6;
  LOBYTE(v3) = *((_BYTE *)this + 178);
  *((_BYTE *)this + 178) = *((_BYTE *)a2 + 178);
  *((_BYTE *)a2 + 178) = v3;
  LODWORD(v6) = *((_DWORD *)this + 40);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
  *((_DWORD *)a2 + 40) = v6;
  LOBYTE(v3) = *((_BYTE *)this + 179);
  *((_BYTE *)this + 179) = *((_BYTE *)a2 + 179);
  *((_BYTE *)a2 + 179) = v3;
  LODWORD(v3) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  LODWORD(v6) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v6;
  LODWORD(v6) = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v6;
  LODWORD(v6) = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v6;
  LODWORD(v6) = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v6;
  LODWORD(v6) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v6;
  LODWORD(v6) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v6;
  LODWORD(v6) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v6;
  LODWORD(v6) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v6;
  LODWORD(v6) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v6;
  LODWORD(v6) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v6;
  LODWORD(v6) = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v6;
  LODWORD(v6) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v6;
  result = *((float *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((float *)a2 + 37) = result;
  return result;
}

float CMMsl::MobilityBoutMetrics::MobilityBoutMetrics(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135F318;
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_BYTE *)(a1 + 181) = *(_BYTE *)(a2 + 181);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 177) = *(_BYTE *)(a2 + 177);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 180) = *(_BYTE *)(a2 + 180);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_BYTE *)(a1 + 178) = *(_BYTE *)(a2 + 178);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 179) = *(_BYTE *)(a2 + 179);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  result = *(float *)(a2 + 148);
  *(float *)(a1 + 148) = result;
  return result;
}

CMMsl *CMMsl::MobilityBoutMetrics::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::MobilityBoutMetrics *v3;
  _BYTE v5[192];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::MobilityBoutMetrics::MobilityBoutMetrics((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::MobilityBoutMetrics *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::MobilityBoutMetrics::formatText(CMMsl::MobilityBoutMetrics *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "asymmetryPercentage", *((float *)this + 8));
    v5 = *((_QWORD *)this + 23);
    if ((v5 & 0x8000000000) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_50;
    }
  }
  else if ((v5 & 0x8000000000) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "asymmetryPercentageIsValid");
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "asymmetryPercentageRejectionStatus");
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "boundaryType");
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "cycleTimeEntropy", *((float *)this + 11));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "cycleTimeMean", *((float *)this + 12));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "cycleTimePoincareSD1", *((float *)this + 13));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "cycleTimePoincareSD2", *((float *)this + 14));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "deviceSide");
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x10000000000) == 0)
      goto LABEL_12;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "doubleSupportPercentage", *((float *)this + 16));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x10000000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "doubleSupportPercentageIsValid");
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 1) == 0)
      goto LABEL_14;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "doubleSupportPercentageRejectionStatus");
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 1) == 0)
  {
LABEL_14:
    if ((v5 & 2) == 0)
      goto LABEL_15;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "endTime", *((double *)this + 1));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 2) == 0)
  {
LABEL_15:
    if ((v5 & 0x20000000000) == 0)
      goto LABEL_16;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "invalidGradePercentage", *((double *)this + 2));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x20000000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x40000000000) == 0)
      goto LABEL_17;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "isHeightSet");
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x40000000000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_18;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "isWeightSet");
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x2000) == 0)
  {
LABEL_18:
    if ((v5 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "numGaitMetrics");
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x4000) == 0)
  {
LABEL_19:
    if ((v5 & 0x8000) == 0)
      goto LABEL_20;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "rejectionStatus");
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x8000) == 0)
  {
LABEL_20:
    if ((v5 & 0x10000) == 0)
      goto LABEL_21;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "segmentsRejectedByIsCadenceConcordant");
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x10000) == 0)
  {
LABEL_21:
    if ((v5 & 0x20000) == 0)
      goto LABEL_22;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "segmentsRejectedByIsFeasibleWalkingSpeed");
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x20000) == 0)
  {
LABEL_22:
    if ((v5 & 0x40000) == 0)
      goto LABEL_23;
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(a2, "segmentsRejectedByIsNotRunning");
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x40000) == 0)
  {
LABEL_23:
    if ((v5 & 0x80000) == 0)
      goto LABEL_24;
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(a2, "segmentsRejectedByIsPendular");
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x80000) == 0)
  {
LABEL_24:
    if ((v5 & 0x100000) == 0)
      goto LABEL_25;
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(a2, "segmentsRejectedByIsSufficientVerticalTwist");
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x100000) == 0)
  {
LABEL_25:
    if ((v5 & 4) == 0)
      goto LABEL_26;
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(a2, "segmentsRejectedByIsSwingStanceCycle");
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 4) == 0)
  {
LABEL_26:
    if ((v5 & 0x200000) == 0)
      goto LABEL_27;
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 3));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x200000) == 0)
  {
LABEL_27:
    if ((v5 & 0x400000) == 0)
      goto LABEL_28;
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(a2, "stepCount");
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x400000) == 0)
  {
LABEL_28:
    if ((v5 & 0x800000) == 0)
      goto LABEL_29;
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(a2, "stepIndexOfHarmonicityAP", *((float *)this + 27));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x800000) == 0)
  {
LABEL_29:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_30;
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(a2, "stepIndexOfHarmonicityML", *((float *)this + 28));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_31;
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(a2, "stepIndexOfHarmonicityVT", *((float *)this + 29));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_32;
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(a2, "stepLength", *((float *)this + 30));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x80000000000) == 0)
      goto LABEL_33;
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(a2, "stepLengthEntropy", *((float *)this + 31));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x80000000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_34;
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(a2, "stepLengthIsValid");
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_35;
    goto LABEL_81;
  }
LABEL_80:
  PB::TextFormatter::format(a2, "stepLengthPoincareSD1", *((float *)this + 32));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_36;
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(a2, "stepLengthPoincareSD2", *((float *)this + 33));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_37;
    goto LABEL_83;
  }
LABEL_82:
  PB::TextFormatter::format(a2, "stepLengthRejectionStatus");
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_37:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_38;
    goto LABEL_84;
  }
LABEL_83:
  PB::TextFormatter::format(a2, "swingIndexOfHarmonicityAP", *((float *)this + 35));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_38:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_39;
    goto LABEL_85;
  }
LABEL_84:
  PB::TextFormatter::format(a2, "swingIndexOfHarmonicityML", *((float *)this + 36));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_39:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_40;
    goto LABEL_86;
  }
LABEL_85:
  PB::TextFormatter::format(a2, "swingIndexOfHarmonicityVT", *((float *)this + 37));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_40:
    if ((v5 & 0x400000000) == 0)
      goto LABEL_41;
    goto LABEL_87;
  }
LABEL_86:
  PB::TextFormatter::format(a2, "terminationReason");
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_41:
    if ((v5 & 0x800000000) == 0)
      goto LABEL_42;
    goto LABEL_88;
  }
LABEL_87:
  PB::TextFormatter::format(a2, "userHeight", *((float *)this + 39));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x800000000) == 0)
  {
LABEL_42:
    if ((v5 & 0x1000000000) == 0)
      goto LABEL_43;
    goto LABEL_89;
  }
LABEL_88:
  PB::TextFormatter::format(a2, "userWeight", *((float *)this + 40));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x1000000000) == 0)
  {
LABEL_43:
    if ((v5 & 0x100000000000) == 0)
      goto LABEL_44;
    goto LABEL_90;
  }
LABEL_89:
  PB::TextFormatter::format(a2, "walkingSpeed", *((float *)this + 41));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x100000000000) == 0)
  {
LABEL_44:
    if ((v5 & 0x2000000000) == 0)
      goto LABEL_45;
LABEL_91:
    PB::TextFormatter::format(a2, "walkingSpeedRejectionStatus");
    if ((*((_QWORD *)this + 23) & 0x4000000000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_46;
  }
LABEL_90:
  PB::TextFormatter::format(a2, "walkingSpeedIsValid");
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x2000000000) != 0)
    goto LABEL_91;
LABEL_45:
  if ((v5 & 0x4000000000) != 0)
LABEL_46:
    PB::TextFormatter::format(a2, "workoutType");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MobilityBoutMetrics::readFrom(CMMsl::MobilityBoutMetrics *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  BOOL v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  BOOL v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  int v58;
  BOOL v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char v63;
  unsigned int v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  char v79;
  unsigned int v80;
  uint64_t v81;
  unint64_t v82;
  char v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  char v87;
  unsigned int v88;
  uint64_t v89;
  unint64_t v90;
  char v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  char v95;
  unsigned int v96;
  uint64_t v97;
  unint64_t v98;
  char v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  char v103;
  unsigned int v104;
  uint64_t v105;
  unint64_t v106;
  char v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  char v111;
  unsigned int v112;
  uint64_t v113;
  unint64_t v114;
  char v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  char v119;
  unsigned int v120;
  uint64_t v121;
  unint64_t v122;
  char v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  char v127;
  unsigned int v128;
  uint64_t v129;
  unint64_t v130;
  char v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  char v135;
  unsigned int v136;
  uint64_t v137;
  unint64_t v138;
  char v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  char v143;
  unsigned int v144;
  uint64_t v145;
  unint64_t v146;
  char v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  char v151;
  unsigned int v152;
  uint64_t v153;
  unint64_t v154;
  char v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  char v159;
  unsigned int v160;
  uint64_t v161;
  unint64_t v162;
  char v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  char v167;
  unsigned int v168;
  uint64_t v169;
  unint64_t v170;
  char v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  int v175;
  BOOL v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  int v180;
  BOOL v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  char v185;
  unsigned int v186;
  uint64_t v187;
  unint64_t v188;
  char v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  char v203;
  unsigned int v204;
  unint64_t v205;
  char v206;
  char v207;
  unsigned int v208;
  unint64_t v209;
  char v210;
  char v211;
  unsigned int v212;
  unint64_t v213;
  char v214;
  char v215;
  unsigned int v216;
  unint64_t v217;
  char v218;
  char v219;
  unsigned int v220;
  unint64_t v221;
  char v222;
  char v223;
  unsigned int v224;
  unint64_t v225;
  char v226;
  char v227;
  unsigned int v228;
  unint64_t v229;
  char v230;
  char v231;
  unsigned int v232;
  unint64_t v233;
  char v234;
  char v235;
  unsigned int v236;
  unint64_t v237;
  char v238;
  char v239;
  unsigned int v240;
  unint64_t v241;
  char v242;
  char v243;
  unsigned int v244;
  unint64_t v245;
  char v246;
  char v247;
  unsigned int v248;
  unint64_t v249;
  char v250;
  char v251;
  unsigned int v252;
  unint64_t v253;
  char v254;
  char v255;
  unsigned int v256;
  unint64_t v257;
  char v258;
  char v259;
  unsigned int v260;
  unint64_t v261;
  char v262;
  char v263;
  unsigned int v264;
  unint64_t v265;
  char v266;
  char v267;
  unsigned int v268;
  unint64_t v269;
  char v270;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      break;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_QWORD *)this + 23) |= 4uLL;
        v20 = *((_QWORD *)a2 + 1);
        if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_220;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v20);
        goto LABEL_61;
      case 2u:
        *((_QWORD *)this + 23) |= 1uLL;
        v21 = *((_QWORD *)a2 + 1);
        if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_220;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v21);
        goto LABEL_61;
      case 3u:
        *((_QWORD *)this + 23) |= 0x200000uLL;
        v22 = *((_QWORD *)a2 + 1);
        v23 = *((_QWORD *)a2 + 2);
        v24 = *(_QWORD *)a2;
        if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
        {
          v25 = 0;
          v26 = 0;
          v27 = 0;
          do
          {
            v28 = v22 + 1;
            *((_QWORD *)a2 + 1) = v22 + 1;
            v29 = *(_BYTE *)(v24 + v22);
            v27 |= (unint64_t)(v29 & 0x7F) << v25;
            if ((v29 & 0x80) == 0)
              goto LABEL_363;
            v25 += 7;
            v22 = v28;
            v14 = v26++ > 8;
          }
          while (!v14);
LABEL_227:
          LODWORD(v27) = 0;
          goto LABEL_363;
        }
        v203 = 0;
        v204 = 0;
        v27 = 0;
        if (v23 <= v22)
          v23 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v23 == v22)
          {
            LODWORD(v27) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v205 = v22 + 1;
            v206 = *(_BYTE *)(v24 + v22);
            *((_QWORD *)a2 + 1) = v205;
            v27 |= (unint64_t)(v206 & 0x7F) << v203;
            if (v206 < 0)
            {
              v203 += 7;
              v22 = v205;
              v14 = v204++ > 8;
              if (v14)
                goto LABEL_227;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v27) = 0;
          }
          break;
        }
LABEL_363:
        *((_DWORD *)this + 26) = v27;
        goto LABEL_355;
      case 4u:
        *((_QWORD *)this + 23) |= 0x1000000000uLL;
        v30 = *((_QWORD *)a2 + 1);
        if (v30 > 0xFFFFFFFFFFFFFFFBLL || v30 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_220;
        *((_DWORD *)this + 41) = *(_DWORD *)(*(_QWORD *)a2 + v30);
        goto LABEL_353;
      case 5u:
        *((_QWORD *)this + 23) |= 0x100000000000uLL;
        v31 = *((_QWORD *)a2 + 1);
        if (v31 >= *((_QWORD *)a2 + 2))
        {
          v34 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v32 = v31 + 1;
          v33 = *(unsigned __int8 *)(*(_QWORD *)a2 + v31);
          *((_QWORD *)a2 + 1) = v32;
          v34 = v33 != 0;
        }
        *((_BYTE *)this + 181) = v34;
        goto LABEL_355;
      case 6u:
        *((_QWORD *)this + 23) |= 0x800uLL;
        v35 = *((_QWORD *)a2 + 1);
        if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_220;
        *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v35);
        goto LABEL_353;
      case 7u:
        *((_QWORD *)this + 23) |= 0x10000000000uLL;
        v36 = *((_QWORD *)a2 + 1);
        if (v36 >= *((_QWORD *)a2 + 2))
        {
          v39 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v37 = v36 + 1;
          v38 = *(unsigned __int8 *)(*(_QWORD *)a2 + v36);
          *((_QWORD *)a2 + 1) = v37;
          v39 = v38 != 0;
        }
        *((_BYTE *)this + 177) = v39;
        goto LABEL_355;
      case 8u:
        *((_QWORD *)this + 23) |= 0x2000000uLL;
        v40 = *((_QWORD *)a2 + 1);
        if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_220;
        *((_DWORD *)this + 30) = *(_DWORD *)(*(_QWORD *)a2 + v40);
        goto LABEL_353;
      case 9u:
        *((_QWORD *)this + 23) |= 0x80000000000uLL;
        v41 = *((_QWORD *)a2 + 1);
        if (v41 >= *((_QWORD *)a2 + 2))
        {
          v44 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v42 = v41 + 1;
          v43 = *(unsigned __int8 *)(*(_QWORD *)a2 + v41);
          *((_QWORD *)a2 + 1) = v42;
          v44 = v43 != 0;
        }
        *((_BYTE *)this + 180) = v44;
        goto LABEL_355;
      case 0xAu:
        *((_QWORD *)this + 23) |= 0x4000uLL;
        v45 = *((_QWORD *)a2 + 1);
        v46 = *((_QWORD *)a2 + 2);
        v47 = *(_QWORD *)a2;
        if (v45 <= 0xFFFFFFFFFFFFFFF5 && v45 + 10 <= v46)
        {
          v48 = 0;
          v49 = 0;
          v50 = 0;
          do
          {
            v51 = v45 + 1;
            *((_QWORD *)a2 + 1) = v45 + 1;
            v52 = *(_BYTE *)(v47 + v45);
            v50 |= (unint64_t)(v52 & 0x7F) << v48;
            if ((v52 & 0x80) == 0)
              goto LABEL_367;
            v48 += 7;
            v45 = v51;
            v14 = v49++ > 8;
          }
          while (!v14);
LABEL_240:
          LODWORD(v50) = 0;
          goto LABEL_367;
        }
        v207 = 0;
        v208 = 0;
        v50 = 0;
        if (v46 <= v45)
          v46 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v46 == v45)
          {
            LODWORD(v50) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v209 = v45 + 1;
            v210 = *(_BYTE *)(v47 + v45);
            *((_QWORD *)a2 + 1) = v209;
            v50 |= (unint64_t)(v210 & 0x7F) << v207;
            if (v210 < 0)
            {
              v207 += 7;
              v45 = v209;
              v14 = v208++ > 8;
              if (v14)
                goto LABEL_240;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v50) = 0;
          }
          break;
        }
LABEL_367:
        *((_DWORD *)this + 19) = v50;
        goto LABEL_355;
      case 0xBu:
        *((_QWORD *)this + 23) |= 2uLL;
        v53 = *((_QWORD *)a2 + 1);
        if (v53 > 0xFFFFFFFFFFFFFFF7 || v53 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_220;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v53);
LABEL_61:
        v54 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_354;
      case 0xCu:
        *((_QWORD *)this + 23) |= 8uLL;
        v55 = *((_QWORD *)a2 + 1);
        if (v55 > 0xFFFFFFFFFFFFFFFBLL || v55 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_220;
        *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v55);
        goto LABEL_353;
      case 0xDu:
        *((_QWORD *)this + 23) |= 0x8000000000uLL;
        v56 = *((_QWORD *)a2 + 1);
        if (v56 >= *((_QWORD *)a2 + 2))
        {
          v59 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v57 = v56 + 1;
          v58 = *(unsigned __int8 *)(*(_QWORD *)a2 + v56);
          *((_QWORD *)a2 + 1) = v57;
          v59 = v58 != 0;
        }
        *((_BYTE *)this + 176) = v59;
        goto LABEL_355;
      case 0xEu:
        *((_QWORD *)this + 23) |= 0x2000uLL;
        v60 = *((_QWORD *)a2 + 1);
        v61 = *((_QWORD *)a2 + 2);
        v62 = *(_QWORD *)a2;
        if (v60 <= 0xFFFFFFFFFFFFFFF5 && v60 + 10 <= v61)
        {
          v63 = 0;
          v64 = 0;
          v65 = 0;
          do
          {
            v66 = v60 + 1;
            *((_QWORD *)a2 + 1) = v60 + 1;
            v67 = *(_BYTE *)(v62 + v60);
            v65 |= (unint64_t)(v67 & 0x7F) << v63;
            if ((v67 & 0x80) == 0)
              goto LABEL_371;
            v63 += 7;
            v60 = v66;
            v14 = v64++ > 8;
          }
          while (!v14);
LABEL_249:
          LODWORD(v65) = 0;
          goto LABEL_371;
        }
        v211 = 0;
        v212 = 0;
        v65 = 0;
        if (v61 <= v60)
          v61 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v61 == v60)
          {
            LODWORD(v65) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v213 = v60 + 1;
            v214 = *(_BYTE *)(v62 + v60);
            *((_QWORD *)a2 + 1) = v213;
            v65 |= (unint64_t)(v214 & 0x7F) << v211;
            if (v214 < 0)
            {
              v211 += 7;
              v60 = v213;
              v14 = v212++ > 8;
              if (v14)
                goto LABEL_249;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v65) = 0;
          }
          break;
        }
LABEL_371:
        *((_DWORD *)this + 18) = v65;
        goto LABEL_355;
      case 0xFu:
        *((_QWORD *)this + 23) |= 0x200000000uLL;
        v68 = *((_QWORD *)a2 + 1);
        v69 = *((_QWORD *)a2 + 2);
        v70 = *(_QWORD *)a2;
        if (v68 <= 0xFFFFFFFFFFFFFFF5 && v68 + 10 <= v69)
        {
          v71 = 0;
          v72 = 0;
          v73 = 0;
          do
          {
            v74 = v68 + 1;
            *((_QWORD *)a2 + 1) = v68 + 1;
            v75 = *(_BYTE *)(v70 + v68);
            v73 |= (unint64_t)(v75 & 0x7F) << v71;
            if ((v75 & 0x80) == 0)
              goto LABEL_375;
            v71 += 7;
            v68 = v74;
            v14 = v72++ > 8;
          }
          while (!v14);
LABEL_256:
          LODWORD(v73) = 0;
          goto LABEL_375;
        }
        v215 = 0;
        v216 = 0;
        v73 = 0;
        if (v69 <= v68)
          v69 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v69 == v68)
          {
            LODWORD(v73) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v217 = v68 + 1;
            v218 = *(_BYTE *)(v70 + v68);
            *((_QWORD *)a2 + 1) = v217;
            v73 |= (unint64_t)(v218 & 0x7F) << v215;
            if (v218 < 0)
            {
              v215 += 7;
              v68 = v217;
              v14 = v216++ > 8;
              if (v14)
                goto LABEL_256;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v73) = 0;
          }
          break;
        }
LABEL_375:
        *((_DWORD *)this + 38) = v73;
        goto LABEL_355;
      case 0x10u:
        *((_QWORD *)this + 23) |= 0x4000000000uLL;
        v76 = *((_QWORD *)a2 + 1);
        v77 = *((_QWORD *)a2 + 2);
        v78 = *(_QWORD *)a2;
        if (v76 <= 0xFFFFFFFFFFFFFFF5 && v76 + 10 <= v77)
        {
          v79 = 0;
          v80 = 0;
          v81 = 0;
          do
          {
            v82 = v76 + 1;
            *((_QWORD *)a2 + 1) = v76 + 1;
            v83 = *(_BYTE *)(v78 + v76);
            v81 |= (unint64_t)(v83 & 0x7F) << v79;
            if ((v83 & 0x80) == 0)
              goto LABEL_379;
            v79 += 7;
            v76 = v82;
            v14 = v80++ > 8;
          }
          while (!v14);
LABEL_263:
          LODWORD(v81) = 0;
          goto LABEL_379;
        }
        v219 = 0;
        v220 = 0;
        v81 = 0;
        if (v77 <= v76)
          v77 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v77 == v76)
          {
            LODWORD(v81) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v221 = v76 + 1;
            v222 = *(_BYTE *)(v78 + v76);
            *((_QWORD *)a2 + 1) = v221;
            v81 |= (unint64_t)(v222 & 0x7F) << v219;
            if (v222 < 0)
            {
              v219 += 7;
              v76 = v221;
              v14 = v220++ > 8;
              if (v14)
                goto LABEL_263;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v81) = 0;
          }
          break;
        }
LABEL_379:
        *((_DWORD *)this + 43) = v81;
        goto LABEL_355;
      case 0x11u:
        *((_QWORD *)this + 23) |= 0x100000uLL;
        v84 = *((_QWORD *)a2 + 1);
        v85 = *((_QWORD *)a2 + 2);
        v86 = *(_QWORD *)a2;
        if (v84 <= 0xFFFFFFFFFFFFFFF5 && v84 + 10 <= v85)
        {
          v87 = 0;
          v88 = 0;
          v89 = 0;
          do
          {
            v90 = v84 + 1;
            *((_QWORD *)a2 + 1) = v84 + 1;
            v91 = *(_BYTE *)(v86 + v84);
            v89 |= (unint64_t)(v91 & 0x7F) << v87;
            if ((v91 & 0x80) == 0)
              goto LABEL_383;
            v87 += 7;
            v84 = v90;
            v14 = v88++ > 8;
          }
          while (!v14);
LABEL_270:
          LODWORD(v89) = 0;
          goto LABEL_383;
        }
        v223 = 0;
        v224 = 0;
        v89 = 0;
        if (v85 <= v84)
          v85 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v85 == v84)
          {
            LODWORD(v89) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v225 = v84 + 1;
            v226 = *(_BYTE *)(v86 + v84);
            *((_QWORD *)a2 + 1) = v225;
            v89 |= (unint64_t)(v226 & 0x7F) << v223;
            if (v226 < 0)
            {
              v223 += 7;
              v84 = v225;
              v14 = v224++ > 8;
              if (v14)
                goto LABEL_270;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v89) = 0;
          }
          break;
        }
LABEL_383:
        *((_DWORD *)this + 25) = v89;
        goto LABEL_355;
      case 0x12u:
        *((_QWORD *)this + 23) |= 0x20000uLL;
        v92 = *((_QWORD *)a2 + 1);
        v93 = *((_QWORD *)a2 + 2);
        v94 = *(_QWORD *)a2;
        if (v92 <= 0xFFFFFFFFFFFFFFF5 && v92 + 10 <= v93)
        {
          v95 = 0;
          v96 = 0;
          v97 = 0;
          do
          {
            v98 = v92 + 1;
            *((_QWORD *)a2 + 1) = v92 + 1;
            v99 = *(_BYTE *)(v94 + v92);
            v97 |= (unint64_t)(v99 & 0x7F) << v95;
            if ((v99 & 0x80) == 0)
              goto LABEL_387;
            v95 += 7;
            v92 = v98;
            v14 = v96++ > 8;
          }
          while (!v14);
LABEL_277:
          LODWORD(v97) = 0;
          goto LABEL_387;
        }
        v227 = 0;
        v228 = 0;
        v97 = 0;
        if (v93 <= v92)
          v93 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v93 == v92)
          {
            LODWORD(v97) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v229 = v92 + 1;
            v230 = *(_BYTE *)(v94 + v92);
            *((_QWORD *)a2 + 1) = v229;
            v97 |= (unint64_t)(v230 & 0x7F) << v227;
            if (v230 < 0)
            {
              v227 += 7;
              v92 = v229;
              v14 = v228++ > 8;
              if (v14)
                goto LABEL_277;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v97) = 0;
          }
          break;
        }
LABEL_387:
        *((_DWORD *)this + 22) = v97;
        goto LABEL_355;
      case 0x13u:
        *((_QWORD *)this + 23) |= 0x10000uLL;
        v100 = *((_QWORD *)a2 + 1);
        v101 = *((_QWORD *)a2 + 2);
        v102 = *(_QWORD *)a2;
        if (v100 <= 0xFFFFFFFFFFFFFFF5 && v100 + 10 <= v101)
        {
          v103 = 0;
          v104 = 0;
          v105 = 0;
          do
          {
            v106 = v100 + 1;
            *((_QWORD *)a2 + 1) = v100 + 1;
            v107 = *(_BYTE *)(v102 + v100);
            v105 |= (unint64_t)(v107 & 0x7F) << v103;
            if ((v107 & 0x80) == 0)
              goto LABEL_391;
            v103 += 7;
            v100 = v106;
            v14 = v104++ > 8;
          }
          while (!v14);
LABEL_284:
          LODWORD(v105) = 0;
          goto LABEL_391;
        }
        v231 = 0;
        v232 = 0;
        v105 = 0;
        if (v101 <= v100)
          v101 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v101 == v100)
          {
            LODWORD(v105) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v233 = v100 + 1;
            v234 = *(_BYTE *)(v102 + v100);
            *((_QWORD *)a2 + 1) = v233;
            v105 |= (unint64_t)(v234 & 0x7F) << v231;
            if (v234 < 0)
            {
              v231 += 7;
              v100 = v233;
              v14 = v232++ > 8;
              if (v14)
                goto LABEL_284;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v105) = 0;
          }
          break;
        }
LABEL_391:
        *((_DWORD *)this + 21) = v105;
        goto LABEL_355;
      case 0x14u:
        *((_QWORD *)this + 23) |= 0x40000uLL;
        v108 = *((_QWORD *)a2 + 1);
        v109 = *((_QWORD *)a2 + 2);
        v110 = *(_QWORD *)a2;
        if (v108 <= 0xFFFFFFFFFFFFFFF5 && v108 + 10 <= v109)
        {
          v111 = 0;
          v112 = 0;
          v113 = 0;
          do
          {
            v114 = v108 + 1;
            *((_QWORD *)a2 + 1) = v108 + 1;
            v115 = *(_BYTE *)(v110 + v108);
            v113 |= (unint64_t)(v115 & 0x7F) << v111;
            if ((v115 & 0x80) == 0)
              goto LABEL_395;
            v111 += 7;
            v108 = v114;
            v14 = v112++ > 8;
          }
          while (!v14);
LABEL_291:
          LODWORD(v113) = 0;
          goto LABEL_395;
        }
        v235 = 0;
        v236 = 0;
        v113 = 0;
        if (v109 <= v108)
          v109 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v109 == v108)
          {
            LODWORD(v113) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v237 = v108 + 1;
            v238 = *(_BYTE *)(v110 + v108);
            *((_QWORD *)a2 + 1) = v237;
            v113 |= (unint64_t)(v238 & 0x7F) << v235;
            if (v238 < 0)
            {
              v235 += 7;
              v108 = v237;
              v14 = v236++ > 8;
              if (v14)
                goto LABEL_291;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v113) = 0;
          }
          break;
        }
LABEL_395:
        *((_DWORD *)this + 23) = v113;
        goto LABEL_355;
      case 0x15u:
        *((_QWORD *)this + 23) |= 0x80000uLL;
        v116 = *((_QWORD *)a2 + 1);
        v117 = *((_QWORD *)a2 + 2);
        v118 = *(_QWORD *)a2;
        if (v116 <= 0xFFFFFFFFFFFFFFF5 && v116 + 10 <= v117)
        {
          v119 = 0;
          v120 = 0;
          v121 = 0;
          do
          {
            v122 = v116 + 1;
            *((_QWORD *)a2 + 1) = v116 + 1;
            v123 = *(_BYTE *)(v118 + v116);
            v121 |= (unint64_t)(v123 & 0x7F) << v119;
            if ((v123 & 0x80) == 0)
              goto LABEL_399;
            v119 += 7;
            v116 = v122;
            v14 = v120++ > 8;
          }
          while (!v14);
LABEL_298:
          LODWORD(v121) = 0;
          goto LABEL_399;
        }
        v239 = 0;
        v240 = 0;
        v121 = 0;
        if (v117 <= v116)
          v117 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v117 == v116)
          {
            LODWORD(v121) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v241 = v116 + 1;
            v242 = *(_BYTE *)(v118 + v116);
            *((_QWORD *)a2 + 1) = v241;
            v121 |= (unint64_t)(v242 & 0x7F) << v239;
            if (v242 < 0)
            {
              v239 += 7;
              v116 = v241;
              v14 = v240++ > 8;
              if (v14)
                goto LABEL_298;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v121) = 0;
          }
          break;
        }
LABEL_399:
        *((_DWORD *)this + 24) = v121;
        goto LABEL_355;
      case 0x16u:
        *((_QWORD *)this + 23) |= 0x8000uLL;
        v124 = *((_QWORD *)a2 + 1);
        v125 = *((_QWORD *)a2 + 2);
        v126 = *(_QWORD *)a2;
        if (v124 <= 0xFFFFFFFFFFFFFFF5 && v124 + 10 <= v125)
        {
          v127 = 0;
          v128 = 0;
          v129 = 0;
          do
          {
            v130 = v124 + 1;
            *((_QWORD *)a2 + 1) = v124 + 1;
            v131 = *(_BYTE *)(v126 + v124);
            v129 |= (unint64_t)(v131 & 0x7F) << v127;
            if ((v131 & 0x80) == 0)
              goto LABEL_403;
            v127 += 7;
            v124 = v130;
            v14 = v128++ > 8;
          }
          while (!v14);
LABEL_305:
          LODWORD(v129) = 0;
          goto LABEL_403;
        }
        v243 = 0;
        v244 = 0;
        v129 = 0;
        if (v125 <= v124)
          v125 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v125 == v124)
          {
            LODWORD(v129) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v245 = v124 + 1;
            v246 = *(_BYTE *)(v126 + v124);
            *((_QWORD *)a2 + 1) = v245;
            v129 |= (unint64_t)(v246 & 0x7F) << v243;
            if (v246 < 0)
            {
              v243 += 7;
              v124 = v245;
              v14 = v244++ > 8;
              if (v14)
                goto LABEL_305;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v129) = 0;
          }
          break;
        }
LABEL_403:
        *((_DWORD *)this + 20) = v129;
        goto LABEL_355;
      case 0x17u:
        *((_QWORD *)this + 23) |= 0x400uLL;
        v132 = *((_QWORD *)a2 + 1);
        v133 = *((_QWORD *)a2 + 2);
        v134 = *(_QWORD *)a2;
        if (v132 <= 0xFFFFFFFFFFFFFFF5 && v132 + 10 <= v133)
        {
          v135 = 0;
          v136 = 0;
          v137 = 0;
          do
          {
            v138 = v132 + 1;
            *((_QWORD *)a2 + 1) = v132 + 1;
            v139 = *(_BYTE *)(v134 + v132);
            v137 |= (unint64_t)(v139 & 0x7F) << v135;
            if ((v139 & 0x80) == 0)
              goto LABEL_407;
            v135 += 7;
            v132 = v138;
            v14 = v136++ > 8;
          }
          while (!v14);
LABEL_312:
          LODWORD(v137) = 0;
          goto LABEL_407;
        }
        v247 = 0;
        v248 = 0;
        v137 = 0;
        if (v133 <= v132)
          v133 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v133 == v132)
          {
            LODWORD(v137) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v249 = v132 + 1;
            v250 = *(_BYTE *)(v134 + v132);
            *((_QWORD *)a2 + 1) = v249;
            v137 |= (unint64_t)(v250 & 0x7F) << v247;
            if (v250 < 0)
            {
              v247 += 7;
              v132 = v249;
              v14 = v248++ > 8;
              if (v14)
                goto LABEL_312;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v137) = 0;
          }
          break;
        }
LABEL_407:
        *((_DWORD *)this + 15) = v137;
        goto LABEL_355;
      case 0x18u:
        *((_QWORD *)this + 23) |= 0x2000000000uLL;
        v140 = *((_QWORD *)a2 + 1);
        v141 = *((_QWORD *)a2 + 2);
        v142 = *(_QWORD *)a2;
        if (v140 <= 0xFFFFFFFFFFFFFFF5 && v140 + 10 <= v141)
        {
          v143 = 0;
          v144 = 0;
          v145 = 0;
          do
          {
            v146 = v140 + 1;
            *((_QWORD *)a2 + 1) = v140 + 1;
            v147 = *(_BYTE *)(v142 + v140);
            v145 |= (unint64_t)(v147 & 0x7F) << v143;
            if ((v147 & 0x80) == 0)
              goto LABEL_411;
            v143 += 7;
            v140 = v146;
            v14 = v144++ > 8;
          }
          while (!v14);
LABEL_319:
          LODWORD(v145) = 0;
          goto LABEL_411;
        }
        v251 = 0;
        v252 = 0;
        v145 = 0;
        if (v141 <= v140)
          v141 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v141 == v140)
          {
            LODWORD(v145) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v253 = v140 + 1;
            v254 = *(_BYTE *)(v142 + v140);
            *((_QWORD *)a2 + 1) = v253;
            v145 |= (unint64_t)(v254 & 0x7F) << v251;
            if (v254 < 0)
            {
              v251 += 7;
              v140 = v253;
              v14 = v252++ > 8;
              if (v14)
                goto LABEL_319;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v145) = 0;
          }
          break;
        }
LABEL_411:
        *((_DWORD *)this + 42) = v145;
        goto LABEL_355;
      case 0x19u:
        *((_QWORD *)this + 23) |= 0x1000uLL;
        v148 = *((_QWORD *)a2 + 1);
        v149 = *((_QWORD *)a2 + 2);
        v150 = *(_QWORD *)a2;
        if (v148 <= 0xFFFFFFFFFFFFFFF5 && v148 + 10 <= v149)
        {
          v151 = 0;
          v152 = 0;
          v153 = 0;
          do
          {
            v154 = v148 + 1;
            *((_QWORD *)a2 + 1) = v148 + 1;
            v155 = *(_BYTE *)(v150 + v148);
            v153 |= (unint64_t)(v155 & 0x7F) << v151;
            if ((v155 & 0x80) == 0)
              goto LABEL_415;
            v151 += 7;
            v148 = v154;
            v14 = v152++ > 8;
          }
          while (!v14);
LABEL_326:
          LODWORD(v153) = 0;
          goto LABEL_415;
        }
        v255 = 0;
        v256 = 0;
        v153 = 0;
        if (v149 <= v148)
          v149 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v149 == v148)
          {
            LODWORD(v153) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v257 = v148 + 1;
            v258 = *(_BYTE *)(v150 + v148);
            *((_QWORD *)a2 + 1) = v257;
            v153 |= (unint64_t)(v258 & 0x7F) << v255;
            if (v258 < 0)
            {
              v255 += 7;
              v148 = v257;
              v14 = v256++ > 8;
              if (v14)
                goto LABEL_326;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v153) = 0;
          }
          break;
        }
LABEL_415:
        *((_DWORD *)this + 17) = v153;
        goto LABEL_355;
      case 0x1Au:
        *((_QWORD *)this + 23) |= 0x20000000uLL;
        v156 = *((_QWORD *)a2 + 1);
        v157 = *((_QWORD *)a2 + 2);
        v158 = *(_QWORD *)a2;
        if (v156 <= 0xFFFFFFFFFFFFFFF5 && v156 + 10 <= v157)
        {
          v159 = 0;
          v160 = 0;
          v161 = 0;
          do
          {
            v162 = v156 + 1;
            *((_QWORD *)a2 + 1) = v156 + 1;
            v163 = *(_BYTE *)(v158 + v156);
            v161 |= (unint64_t)(v163 & 0x7F) << v159;
            if ((v163 & 0x80) == 0)
              goto LABEL_419;
            v159 += 7;
            v156 = v162;
            v14 = v160++ > 8;
          }
          while (!v14);
LABEL_333:
          LODWORD(v161) = 0;
          goto LABEL_419;
        }
        v259 = 0;
        v260 = 0;
        v161 = 0;
        if (v157 <= v156)
          v157 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v157 == v156)
          {
            LODWORD(v161) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v261 = v156 + 1;
            v262 = *(_BYTE *)(v158 + v156);
            *((_QWORD *)a2 + 1) = v261;
            v161 |= (unint64_t)(v262 & 0x7F) << v259;
            if (v262 < 0)
            {
              v259 += 7;
              v156 = v261;
              v14 = v260++ > 8;
              if (v14)
                goto LABEL_333;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v161) = 0;
          }
          break;
        }
LABEL_419:
        *((_DWORD *)this + 34) = v161;
        goto LABEL_355;
      case 0x1Bu:
        *((_QWORD *)this + 23) |= 0x10uLL;
        v164 = *((_QWORD *)a2 + 1);
        v165 = *((_QWORD *)a2 + 2);
        v166 = *(_QWORD *)a2;
        if (v164 <= 0xFFFFFFFFFFFFFFF5 && v164 + 10 <= v165)
        {
          v167 = 0;
          v168 = 0;
          v169 = 0;
          do
          {
            v170 = v164 + 1;
            *((_QWORD *)a2 + 1) = v164 + 1;
            v171 = *(_BYTE *)(v166 + v164);
            v169 |= (unint64_t)(v171 & 0x7F) << v167;
            if ((v171 & 0x80) == 0)
              goto LABEL_423;
            v167 += 7;
            v164 = v170;
            v14 = v168++ > 8;
          }
          while (!v14);
LABEL_340:
          LODWORD(v169) = 0;
          goto LABEL_423;
        }
        v263 = 0;
        v264 = 0;
        v169 = 0;
        if (v165 <= v164)
          v165 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v165 == v164)
          {
            LODWORD(v169) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v265 = v164 + 1;
            v266 = *(_BYTE *)(v166 + v164);
            *((_QWORD *)a2 + 1) = v265;
            v169 |= (unint64_t)(v266 & 0x7F) << v263;
            if (v266 < 0)
            {
              v263 += 7;
              v164 = v265;
              v14 = v264++ > 8;
              if (v14)
                goto LABEL_340;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v169) = 0;
          }
          break;
        }
LABEL_423:
        *((_DWORD *)this + 9) = v169;
        goto LABEL_355;
      case 0x1Cu:
        *((_QWORD *)this + 23) |= 0x400000000uLL;
        v172 = *((_QWORD *)a2 + 1);
        if (v172 > 0xFFFFFFFFFFFFFFFBLL || v172 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_220;
        *((_DWORD *)this + 39) = *(_DWORD *)(*(_QWORD *)a2 + v172);
        goto LABEL_353;
      case 0x1Du:
        *((_QWORD *)this + 23) |= 0x20000000000uLL;
        v173 = *((_QWORD *)a2 + 1);
        if (v173 >= *((_QWORD *)a2 + 2))
        {
          v176 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v174 = v173 + 1;
          v175 = *(unsigned __int8 *)(*(_QWORD *)a2 + v173);
          *((_QWORD *)a2 + 1) = v174;
          v176 = v175 != 0;
        }
        *((_BYTE *)this + 178) = v176;
        goto LABEL_355;
      case 0x1Eu:
        *((_QWORD *)this + 23) |= 0x800000000uLL;
        v177 = *((_QWORD *)a2 + 1);
        if (v177 > 0xFFFFFFFFFFFFFFFBLL || v177 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_220;
        *((_DWORD *)this + 40) = *(_DWORD *)(*(_QWORD *)a2 + v177);
        goto LABEL_353;
      case 0x1Fu:
        *((_QWORD *)this + 23) |= 0x40000000000uLL;
        v178 = *((_QWORD *)a2 + 1);
        if (v178 >= *((_QWORD *)a2 + 2))
        {
          v181 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v179 = v178 + 1;
          v180 = *(unsigned __int8 *)(*(_QWORD *)a2 + v178);
          *((_QWORD *)a2 + 1) = v179;
          v181 = v180 != 0;
        }
        *((_BYTE *)this + 179) = v181;
        goto LABEL_355;
      case 0x20u:
        *((_QWORD *)this + 23) |= 0x20uLL;
        v182 = *((_QWORD *)a2 + 1);
        v183 = *((_QWORD *)a2 + 2);
        v184 = *(_QWORD *)a2;
        if (v182 <= 0xFFFFFFFFFFFFFFF5 && v182 + 10 <= v183)
        {
          v185 = 0;
          v186 = 0;
          v187 = 0;
          do
          {
            v188 = v182 + 1;
            *((_QWORD *)a2 + 1) = v182 + 1;
            v189 = *(_BYTE *)(v184 + v182);
            v187 |= (unint64_t)(v189 & 0x7F) << v185;
            if ((v189 & 0x80) == 0)
              goto LABEL_427;
            v185 += 7;
            v182 = v188;
            v14 = v186++ > 8;
          }
          while (!v14);
LABEL_351:
          LODWORD(v187) = 0;
          goto LABEL_427;
        }
        v267 = 0;
        v268 = 0;
        v187 = 0;
        if (v183 <= v182)
          v183 = *((_QWORD *)a2 + 1);
        break;
      case 0x21u:
        *((_QWORD *)this + 23) |= 0x80uLL;
        v190 = *((_QWORD *)a2 + 1);
        if (v190 > 0xFFFFFFFFFFFFFFFBLL || v190 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_220;
        *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v190);
        goto LABEL_353;
      case 0x22u:
        *((_QWORD *)this + 23) |= 0x4000000uLL;
        v191 = *((_QWORD *)a2 + 1);
        if (v191 > 0xFFFFFFFFFFFFFFFBLL || v191 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_220;
        *((_DWORD *)this + 31) = *(_DWORD *)(*(_QWORD *)a2 + v191);
        goto LABEL_353;
      case 0x23u:
        *((_QWORD *)this + 23) |= 0x8000000uLL;
        v192 = *((_QWORD *)a2 + 1);
        if (v192 > 0xFFFFFFFFFFFFFFFBLL || v192 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_220;
        *((_DWORD *)this + 32) = *(_DWORD *)(*(_QWORD *)a2 + v192);
        goto LABEL_353;
      case 0x24u:
        *((_QWORD *)this + 23) |= 0x10000000uLL;
        v193 = *((_QWORD *)a2 + 1);
        if (v193 > 0xFFFFFFFFFFFFFFFBLL || v193 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_220;
        *((_DWORD *)this + 33) = *(_DWORD *)(*(_QWORD *)a2 + v193);
        goto LABEL_353;
      case 0x25u:
        *((_QWORD *)this + 23) |= 0x40uLL;
        v194 = *((_QWORD *)a2 + 1);
        if (v194 > 0xFFFFFFFFFFFFFFFBLL || v194 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_220;
        *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v194);
        goto LABEL_353;
      case 0x26u:
        *((_QWORD *)this + 23) |= 0x100uLL;
        v195 = *((_QWORD *)a2 + 1);
        if (v195 > 0xFFFFFFFFFFFFFFFBLL || v195 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_220;
        *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v195);
        goto LABEL_353;
      case 0x27u:
        *((_QWORD *)this + 23) |= 0x200uLL;
        v196 = *((_QWORD *)a2 + 1);
        if (v196 > 0xFFFFFFFFFFFFFFFBLL || v196 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_220;
        *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v196);
        goto LABEL_353;
      case 0x28u:
        *((_QWORD *)this + 23) |= 0x400000uLL;
        v197 = *((_QWORD *)a2 + 1);
        if (v197 > 0xFFFFFFFFFFFFFFFBLL || v197 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_220;
        *((_DWORD *)this + 27) = *(_DWORD *)(*(_QWORD *)a2 + v197);
        goto LABEL_353;
      case 0x29u:
        *((_QWORD *)this + 23) |= 0x800000uLL;
        v198 = *((_QWORD *)a2 + 1);
        if (v198 > 0xFFFFFFFFFFFFFFFBLL || v198 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_220;
        *((_DWORD *)this + 28) = *(_DWORD *)(*(_QWORD *)a2 + v198);
        goto LABEL_353;
      case 0x2Au:
        *((_QWORD *)this + 23) |= 0x1000000uLL;
        v199 = *((_QWORD *)a2 + 1);
        if (v199 > 0xFFFFFFFFFFFFFFFBLL || v199 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_220;
        *((_DWORD *)this + 29) = *(_DWORD *)(*(_QWORD *)a2 + v199);
        goto LABEL_353;
      case 0x2Bu:
        *((_QWORD *)this + 23) |= 0x40000000uLL;
        v200 = *((_QWORD *)a2 + 1);
        if (v200 > 0xFFFFFFFFFFFFFFFBLL || v200 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_220;
        *((_DWORD *)this + 35) = *(_DWORD *)(*(_QWORD *)a2 + v200);
        goto LABEL_353;
      case 0x2Cu:
        *((_QWORD *)this + 23) |= 0x80000000uLL;
        v201 = *((_QWORD *)a2 + 1);
        if (v201 > 0xFFFFFFFFFFFFFFFBLL || v201 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_220;
        *((_DWORD *)this + 36) = *(_DWORD *)(*(_QWORD *)a2 + v201);
        goto LABEL_353;
      case 0x2Du:
        *((_QWORD *)this + 23) |= 0x100000000uLL;
        v202 = *((_QWORD *)a2 + 1);
        if (v202 <= 0xFFFFFFFFFFFFFFFBLL && v202 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 37) = *(_DWORD *)(*(_QWORD *)a2 + v202);
LABEL_353:
          v54 = *((_QWORD *)a2 + 1) + 4;
LABEL_354:
          *((_QWORD *)a2 + 1) = v54;
        }
        else
        {
LABEL_220:
          *((_BYTE *)a2 + 24) = 1;
        }
        goto LABEL_355;
      default:
        goto LABEL_19;
    }
    while (1)
    {
      if (v183 == v182)
      {
        LODWORD(v187) = 0;
        *((_BYTE *)a2 + 24) = 1;
        goto LABEL_427;
      }
      v269 = v182 + 1;
      v270 = *(_BYTE *)(v184 + v182);
      *((_QWORD *)a2 + 1) = v269;
      v187 |= (unint64_t)(v270 & 0x7F) << v267;
      if ((v270 & 0x80) == 0)
        break;
      v267 += 7;
      v182 = v269;
      v14 = v268++ > 8;
      if (v14)
        goto LABEL_351;
    }
    if (*((_BYTE *)a2 + 24))
      LODWORD(v187) = 0;
LABEL_427:
    *((_DWORD *)this + 10) = v187;
LABEL_355:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v15 = 0;
  v16 = 0;
  v11 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v17 = v2 + 1;
    v18 = *(_BYTE *)(v8 + v2);
    *((_QWORD *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0)
      goto LABEL_21;
    v15 += 7;
    v2 = v17;
    v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  result = PB::Reader::skip(a2);
  if ((_DWORD)result)
    goto LABEL_355;
  return result;
}

uint64_t CMMsl::MobilityBoutMetrics::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = this;
  v4 = *(_QWORD *)(this + 184);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24));
    v4 = *(_QWORD *)(v3 + 184);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 0x200000) == 0)
        goto LABEL_4;
      goto LABEL_49;
    }
  }
  else if ((v4 & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x200000) == 0)
  {
LABEL_4:
    if ((v4 & 0x1000000000) == 0)
      goto LABEL_5;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x1000000000) == 0)
  {
LABEL_5:
    if ((v4 & 0x100000000000) == 0)
      goto LABEL_6;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(float *)(v3 + 164));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x100000000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x800) == 0)
      goto LABEL_7;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x800) == 0)
  {
LABEL_7:
    if ((v4 & 0x10000000000) == 0)
      goto LABEL_8;
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(float *)(v3 + 64));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x10000000000) == 0)
  {
LABEL_8:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_9;
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::write(a2);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x80000000000) == 0)
      goto LABEL_10;
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::write(a2, *(float *)(v3 + 120));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x80000000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x4000) == 0)
      goto LABEL_11;
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::write(a2);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x4000) == 0)
  {
LABEL_11:
    if ((v4 & 2) == 0)
      goto LABEL_12;
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 2) == 0)
  {
LABEL_12:
    if ((v4 & 8) == 0)
      goto LABEL_13;
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 8) == 0)
  {
LABEL_13:
    if ((v4 & 0x8000000000) == 0)
      goto LABEL_14;
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x8000000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x2000) == 0)
  {
LABEL_15:
    if ((v4 & 0x200000000) == 0)
      goto LABEL_16;
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x4000000000) == 0)
      goto LABEL_17;
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x4000000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x100000) == 0)
      goto LABEL_18;
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x100000) == 0)
  {
LABEL_18:
    if ((v4 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x20000) == 0)
  {
LABEL_19:
    if ((v4 & 0x10000) == 0)
      goto LABEL_20;
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x10000) == 0)
  {
LABEL_20:
    if ((v4 & 0x40000) == 0)
      goto LABEL_21;
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x40000) == 0)
  {
LABEL_21:
    if ((v4 & 0x80000) == 0)
      goto LABEL_22;
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x80000) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000) == 0)
      goto LABEL_23;
    goto LABEL_68;
  }
LABEL_67:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x8000) == 0)
  {
LABEL_23:
    if ((v4 & 0x400) == 0)
      goto LABEL_24;
    goto LABEL_69;
  }
LABEL_68:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x400) == 0)
  {
LABEL_24:
    if ((v4 & 0x2000000000) == 0)
      goto LABEL_25;
    goto LABEL_70;
  }
LABEL_69:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x2000000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x1000) == 0)
      goto LABEL_26;
    goto LABEL_71;
  }
LABEL_70:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x1000) == 0)
  {
LABEL_26:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_27;
    goto LABEL_72;
  }
LABEL_71:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_27:
    if ((v4 & 0x10) == 0)
      goto LABEL_28;
    goto LABEL_73;
  }
LABEL_72:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x10) == 0)
  {
LABEL_28:
    if ((v4 & 0x400000000) == 0)
      goto LABEL_29;
    goto LABEL_74;
  }
LABEL_73:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x20000000000) == 0)
      goto LABEL_30;
    goto LABEL_75;
  }
LABEL_74:
  this = PB::Writer::write(a2, *(float *)(v3 + 156));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x20000000000) == 0)
  {
LABEL_30:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_31;
    goto LABEL_76;
  }
LABEL_75:
  this = PB::Writer::write(a2);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x40000000000) == 0)
      goto LABEL_32;
    goto LABEL_77;
  }
LABEL_76:
  this = PB::Writer::write(a2, *(float *)(v3 + 160));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x40000000000) == 0)
  {
LABEL_32:
    if ((v4 & 0x20) == 0)
      goto LABEL_33;
    goto LABEL_78;
  }
LABEL_77:
  this = PB::Writer::write(a2);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x20) == 0)
  {
LABEL_33:
    if ((v4 & 0x80) == 0)
      goto LABEL_34;
    goto LABEL_79;
  }
LABEL_78:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x80) == 0)
  {
LABEL_34:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_80;
  }
LABEL_79:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_36;
    goto LABEL_81;
  }
LABEL_80:
  this = PB::Writer::write(a2, *(float *)(v3 + 124));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_36:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_37;
    goto LABEL_82;
  }
LABEL_81:
  this = PB::Writer::write(a2, *(float *)(v3 + 128));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_37:
    if ((v4 & 0x40) == 0)
      goto LABEL_38;
    goto LABEL_83;
  }
LABEL_82:
  this = PB::Writer::write(a2, *(float *)(v3 + 132));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x40) == 0)
  {
LABEL_38:
    if ((v4 & 0x100) == 0)
      goto LABEL_39;
    goto LABEL_84;
  }
LABEL_83:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x100) == 0)
  {
LABEL_39:
    if ((v4 & 0x200) == 0)
      goto LABEL_40;
    goto LABEL_85;
  }
LABEL_84:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x200) == 0)
  {
LABEL_40:
    if ((v4 & 0x400000) == 0)
      goto LABEL_41;
    goto LABEL_86;
  }
LABEL_85:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x400000) == 0)
  {
LABEL_41:
    if ((v4 & 0x800000) == 0)
      goto LABEL_42;
    goto LABEL_87;
  }
LABEL_86:
  this = PB::Writer::write(a2, *(float *)(v3 + 108));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x800000) == 0)
  {
LABEL_42:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_43;
    goto LABEL_88;
  }
LABEL_87:
  this = PB::Writer::write(a2, *(float *)(v3 + 112));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_43:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_44;
    goto LABEL_89;
  }
LABEL_88:
  this = PB::Writer::write(a2, *(float *)(v3 + 116));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_44:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_45;
    goto LABEL_90;
  }
LABEL_89:
  this = PB::Writer::write(a2, *(float *)(v3 + 140));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_45:
    if ((v4 & 0x100000000) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 148));
  }
LABEL_90:
  this = PB::Writer::write(a2, *(float *)(v3 + 144));
  if ((*(_QWORD *)(v3 + 184) & 0x100000000) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 148));
  return this;
}

uint64_t CMMsl::MobilityBoutMetrics::hash_value(CMMsl::MobilityBoutMetrics *this)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  double v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  float v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  float v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  float v46;
  uint64_t v47;
  float v48;
  uint64_t v49;
  float v50;
  uint64_t v51;
  float v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  double v72;

  v1 = *((_QWORD *)this + 23);
  if ((v1 & 4) == 0)
  {
    v2 = 0;
    if ((v1 & 1) != 0)
      goto LABEL_3;
LABEL_93:
    v72 = 0.0;
    if ((v1 & 0x200000) != 0)
      goto LABEL_6;
    goto LABEL_94;
  }
  if (*((double *)this + 3) == 0.0)
    v2 = 0;
  else
    v2 = *((_QWORD *)this + 3);
  if ((v1 & 1) == 0)
    goto LABEL_93;
LABEL_3:
  v3 = *((double *)this + 1);
  if (v3 == 0.0)
    v3 = 0.0;
  v72 = v3;
  if ((v1 & 0x200000) != 0)
  {
LABEL_6:
    v71 = *((unsigned int *)this + 26);
    if ((v1 & 0x1000000000) != 0)
      goto LABEL_7;
LABEL_95:
    v70 = 0;
    if ((v1 & 0x100000000000) != 0)
      goto LABEL_10;
    goto LABEL_96;
  }
LABEL_94:
  v71 = 0;
  if ((v1 & 0x1000000000) == 0)
    goto LABEL_95;
LABEL_7:
  v4 = *((float *)this + 41);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  v70 = v5;
  if ((v1 & 0x100000000000) != 0)
  {
LABEL_10:
    v69 = *((unsigned __int8 *)this + 181);
    if ((v1 & 0x800) != 0)
      goto LABEL_11;
LABEL_97:
    v68 = 0;
    if ((v1 & 0x10000000000) != 0)
      goto LABEL_14;
    goto LABEL_98;
  }
LABEL_96:
  v69 = 0;
  if ((v1 & 0x800) == 0)
    goto LABEL_97;
LABEL_11:
  v6 = *((float *)this + 16);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  v68 = v7;
  if ((v1 & 0x10000000000) != 0)
  {
LABEL_14:
    v67 = *((unsigned __int8 *)this + 177);
    if ((v1 & 0x2000000) != 0)
      goto LABEL_15;
LABEL_99:
    v66 = 0;
    if ((v1 & 0x80000000000) != 0)
      goto LABEL_18;
    goto LABEL_100;
  }
LABEL_98:
  v67 = 0;
  if ((v1 & 0x2000000) == 0)
    goto LABEL_99;
LABEL_15:
  v8 = *((float *)this + 30);
  v9 = LODWORD(v8);
  if (v8 == 0.0)
    v9 = 0;
  v66 = v9;
  if ((v1 & 0x80000000000) != 0)
  {
LABEL_18:
    v65 = *((unsigned __int8 *)this + 180);
    if ((v1 & 0x4000) != 0)
      goto LABEL_19;
    goto LABEL_101;
  }
LABEL_100:
  v65 = 0;
  if ((v1 & 0x4000) != 0)
  {
LABEL_19:
    v64 = *((unsigned int *)this + 19);
    if ((v1 & 2) != 0)
      goto LABEL_20;
LABEL_102:
    v63 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_23;
LABEL_103:
    v62 = 0;
    if ((v1 & 0x8000000000) != 0)
      goto LABEL_26;
    goto LABEL_104;
  }
LABEL_101:
  v64 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_102;
LABEL_20:
  v10 = *((double *)this + 2);
  if (v10 == 0.0)
    v10 = 0.0;
  v63 = v10;
  if ((v1 & 8) == 0)
    goto LABEL_103;
LABEL_23:
  v11 = *((float *)this + 8);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  v62 = v12;
  if ((v1 & 0x8000000000) != 0)
  {
LABEL_26:
    v61 = *((unsigned __int8 *)this + 176);
    if ((v1 & 0x2000) != 0)
      goto LABEL_27;
    goto LABEL_105;
  }
LABEL_104:
  v61 = 0;
  if ((v1 & 0x2000) != 0)
  {
LABEL_27:
    v60 = *((unsigned int *)this + 18);
    if ((v1 & 0x200000000) != 0)
      goto LABEL_28;
    goto LABEL_106;
  }
LABEL_105:
  v60 = 0;
  if ((v1 & 0x200000000) != 0)
  {
LABEL_28:
    v59 = *((unsigned int *)this + 38);
    if ((v1 & 0x4000000000) != 0)
      goto LABEL_29;
    goto LABEL_107;
  }
LABEL_106:
  v59 = 0;
  if ((v1 & 0x4000000000) != 0)
  {
LABEL_29:
    v58 = *((unsigned int *)this + 43);
    if ((v1 & 0x100000) != 0)
      goto LABEL_30;
    goto LABEL_108;
  }
LABEL_107:
  v58 = 0;
  if ((v1 & 0x100000) != 0)
  {
LABEL_30:
    v57 = *((unsigned int *)this + 25);
    if ((v1 & 0x20000) != 0)
      goto LABEL_31;
    goto LABEL_109;
  }
LABEL_108:
  v57 = 0;
  if ((v1 & 0x20000) != 0)
  {
LABEL_31:
    v56 = *((unsigned int *)this + 22);
    if ((v1 & 0x10000) != 0)
      goto LABEL_32;
    goto LABEL_110;
  }
LABEL_109:
  v56 = 0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_32:
    v55 = *((unsigned int *)this + 21);
    if ((v1 & 0x40000) != 0)
      goto LABEL_33;
    goto LABEL_111;
  }
LABEL_110:
  v55 = 0;
  if ((v1 & 0x40000) != 0)
  {
LABEL_33:
    v13 = *((unsigned int *)this + 23);
    if ((v1 & 0x80000) != 0)
      goto LABEL_34;
    goto LABEL_112;
  }
LABEL_111:
  v13 = 0;
  if ((v1 & 0x80000) != 0)
  {
LABEL_34:
    v14 = *((unsigned int *)this + 24);
    if ((v1 & 0x8000) != 0)
      goto LABEL_35;
    goto LABEL_113;
  }
LABEL_112:
  v14 = 0;
  if ((v1 & 0x8000) != 0)
  {
LABEL_35:
    v15 = *((unsigned int *)this + 20);
    if ((v1 & 0x400) != 0)
      goto LABEL_36;
    goto LABEL_114;
  }
LABEL_113:
  v15 = 0;
  if ((v1 & 0x400) != 0)
  {
LABEL_36:
    v16 = *((unsigned int *)this + 15);
    if ((v1 & 0x2000000000) != 0)
      goto LABEL_37;
    goto LABEL_115;
  }
LABEL_114:
  v16 = 0;
  if ((v1 & 0x2000000000) != 0)
  {
LABEL_37:
    v17 = *((unsigned int *)this + 42);
    if ((v1 & 0x1000) != 0)
      goto LABEL_38;
    goto LABEL_116;
  }
LABEL_115:
  v17 = 0;
  if ((v1 & 0x1000) != 0)
  {
LABEL_38:
    v18 = *((unsigned int *)this + 17);
    if ((v1 & 0x20000000) != 0)
      goto LABEL_39;
    goto LABEL_117;
  }
LABEL_116:
  v18 = 0;
  if ((v1 & 0x20000000) != 0)
  {
LABEL_39:
    v19 = *((unsigned int *)this + 34);
    if ((v1 & 0x10) != 0)
      goto LABEL_40;
    goto LABEL_118;
  }
LABEL_117:
  v19 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_40:
    v20 = *((unsigned int *)this + 9);
    if ((v1 & 0x400000000) != 0)
      goto LABEL_41;
LABEL_119:
    v22 = 0;
    if ((v1 & 0x20000000000) != 0)
      goto LABEL_44;
    goto LABEL_120;
  }
LABEL_118:
  v20 = 0;
  if ((v1 & 0x400000000) == 0)
    goto LABEL_119;
LABEL_41:
  v21 = *((float *)this + 39);
  v22 = LODWORD(v21);
  if (v21 == 0.0)
    v22 = 0;
  if ((v1 & 0x20000000000) != 0)
  {
LABEL_44:
    v23 = *((unsigned __int8 *)this + 178);
    if ((v1 & 0x800000000) != 0)
      goto LABEL_45;
LABEL_121:
    v25 = 0;
    if ((v1 & 0x40000000000) != 0)
      goto LABEL_48;
    goto LABEL_122;
  }
LABEL_120:
  v23 = 0;
  if ((v1 & 0x800000000) == 0)
    goto LABEL_121;
LABEL_45:
  v24 = *((float *)this + 40);
  v25 = LODWORD(v24);
  if (v24 == 0.0)
    v25 = 0;
  if ((v1 & 0x40000000000) != 0)
  {
LABEL_48:
    v26 = *((unsigned __int8 *)this + 179);
    if ((v1 & 0x20) != 0)
      goto LABEL_49;
    goto LABEL_123;
  }
LABEL_122:
  v26 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_49:
    v27 = *((unsigned int *)this + 10);
    if ((v1 & 0x80) != 0)
      goto LABEL_50;
LABEL_124:
    v29 = 0;
    if ((v1 & 0x4000000) != 0)
      goto LABEL_53;
LABEL_125:
    v31 = 0;
    if ((v1 & 0x8000000) != 0)
      goto LABEL_56;
LABEL_126:
    v33 = 0;
    if ((v1 & 0x10000000) != 0)
      goto LABEL_59;
LABEL_127:
    v35 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_62;
LABEL_128:
    v37 = 0;
    if ((v1 & 0x100) != 0)
      goto LABEL_65;
LABEL_129:
    v39 = 0;
    if ((v1 & 0x200) != 0)
      goto LABEL_68;
LABEL_130:
    v41 = 0;
    if ((v1 & 0x400000) != 0)
      goto LABEL_71;
LABEL_131:
    v43 = 0;
    if ((v1 & 0x800000) != 0)
      goto LABEL_74;
LABEL_132:
    v45 = 0;
    if ((v1 & 0x1000000) != 0)
      goto LABEL_77;
LABEL_133:
    v47 = 0;
    if ((v1 & 0x40000000) != 0)
      goto LABEL_80;
LABEL_134:
    v49 = 0;
    if ((v1 & 0x80000000) != 0)
      goto LABEL_83;
    goto LABEL_135;
  }
LABEL_123:
  v27 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_124;
LABEL_50:
  v28 = *((float *)this + 12);
  v29 = LODWORD(v28);
  if (v28 == 0.0)
    v29 = 0;
  if ((v1 & 0x4000000) == 0)
    goto LABEL_125;
LABEL_53:
  v30 = *((float *)this + 31);
  v31 = LODWORD(v30);
  if (v30 == 0.0)
    v31 = 0;
  if ((v1 & 0x8000000) == 0)
    goto LABEL_126;
LABEL_56:
  v32 = *((float *)this + 32);
  v33 = LODWORD(v32);
  if (v32 == 0.0)
    v33 = 0;
  if ((v1 & 0x10000000) == 0)
    goto LABEL_127;
LABEL_59:
  v34 = *((float *)this + 33);
  v35 = LODWORD(v34);
  if (v34 == 0.0)
    v35 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_128;
LABEL_62:
  v36 = *((float *)this + 11);
  v37 = LODWORD(v36);
  if (v36 == 0.0)
    v37 = 0;
  if ((v1 & 0x100) == 0)
    goto LABEL_129;
LABEL_65:
  v38 = *((float *)this + 13);
  v39 = LODWORD(v38);
  if (v38 == 0.0)
    v39 = 0;
  if ((v1 & 0x200) == 0)
    goto LABEL_130;
LABEL_68:
  v40 = *((float *)this + 14);
  v41 = LODWORD(v40);
  if (v40 == 0.0)
    v41 = 0;
  if ((v1 & 0x400000) == 0)
    goto LABEL_131;
LABEL_71:
  v42 = *((float *)this + 27);
  v43 = LODWORD(v42);
  if (v42 == 0.0)
    v43 = 0;
  if ((v1 & 0x800000) == 0)
    goto LABEL_132;
LABEL_74:
  v44 = *((float *)this + 28);
  v45 = LODWORD(v44);
  if (v44 == 0.0)
    v45 = 0;
  if ((v1 & 0x1000000) == 0)
    goto LABEL_133;
LABEL_77:
  v46 = *((float *)this + 29);
  v47 = LODWORD(v46);
  if (v46 == 0.0)
    v47 = 0;
  if ((v1 & 0x40000000) == 0)
    goto LABEL_134;
LABEL_80:
  v48 = *((float *)this + 35);
  v49 = LODWORD(v48);
  if (v48 == 0.0)
    v49 = 0;
  if ((v1 & 0x80000000) != 0)
  {
LABEL_83:
    v50 = *((float *)this + 36);
    v51 = LODWORD(v50);
    if (v50 == 0.0)
      v51 = 0;
    if ((v1 & 0x100000000) != 0)
      goto LABEL_86;
LABEL_136:
    v53 = 0;
    return *(_QWORD *)&v72 ^ v2 ^ v71 ^ v70 ^ v69 ^ v68 ^ v67 ^ v66 ^ v65 ^ v64 ^ *(_QWORD *)&v63 ^ v62 ^ v61 ^ v60 ^ v59 ^ v58 ^ v57 ^ v56 ^ v55 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v22 ^ v23 ^ v25 ^ v26 ^ v27 ^ v29 ^ v31 ^ v33 ^ v35 ^ v37 ^ v39 ^ v41 ^ v43 ^ v45 ^ v47 ^ v49 ^ v51 ^ v53;
  }
LABEL_135:
  v51 = 0;
  if ((v1 & 0x100000000) == 0)
    goto LABEL_136;
LABEL_86:
  v52 = *((float *)this + 37);
  v53 = LODWORD(v52);
  if (v52 == 0.0)
    v53 = 0;
  return *(_QWORD *)&v72 ^ v2 ^ v71 ^ v70 ^ v69 ^ v68 ^ v67 ^ v66 ^ v65 ^ v64 ^ *(_QWORD *)&v63 ^ v62 ^ v61 ^ v60 ^ v59 ^ v58 ^ v57 ^ v56 ^ v55 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v22 ^ v23 ^ v25 ^ v26 ^ v27 ^ v29 ^ v31 ^ v33 ^ v35 ^ v37 ^ v39 ^ v41 ^ v43 ^ v45 ^ v47 ^ v49 ^ v51 ^ v53;
}

void CMMsl::MobilitySmoothedGaitMetrics::~MobilitySmoothedGaitMetrics(CMMsl::MobilitySmoothedGaitMetrics *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::MobilitySmoothedGaitMetrics::MobilitySmoothedGaitMetrics(CMMsl::MobilitySmoothedGaitMetrics *this, const CMMsl::MobilitySmoothedGaitMetrics *a2)
{
  char v2;
  char v3;
  uint64_t v4;

  *(_QWORD *)this = &off_25135F350;
  *((_DWORD *)this + 10) = 0;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 40) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_BYTE *)a2 + 40);
    if ((v2 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 40) & 0x40) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 9);
    v3 |= 0x40u;
    *((_BYTE *)this + 40) = v3;
    *((_DWORD *)this + 9) = v4;
    v2 = *((_BYTE *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 8);
    v3 |= 0x20u;
    *((_BYTE *)this + 40) = v3;
    *((_DWORD *)this + 8) = v4;
    v2 = *((_BYTE *)a2 + 40);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *((_BYTE *)this + 40) = v3;
  *((_DWORD *)this + 6) = v4;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 4) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_15;
  }
LABEL_14:
  LODWORD(v4) = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *((_BYTE *)this + 40) = v3;
  *((_DWORD *)this + 5) = v4;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0)
      return *(float *)&v4;
    goto LABEL_16;
  }
LABEL_15:
  LODWORD(v4) = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *((_BYTE *)this + 40) = v3;
  *((_DWORD *)this + 7) = v4;
  if ((*((_BYTE *)a2 + 40) & 2) == 0)
    return *(float *)&v4;
LABEL_16:
  LODWORD(v4) = *((_DWORD *)a2 + 4);
  *((_BYTE *)this + 40) = v3 | 2;
  *((_DWORD *)this + 4) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::MobilitySmoothedGaitMetrics::operator=(uint64_t a1, const CMMsl::MobilitySmoothedGaitMetrics *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;

  if ((const CMMsl::MobilitySmoothedGaitMetrics *)a1 != a2)
  {
    CMMsl::MobilitySmoothedGaitMetrics::MobilitySmoothedGaitMetrics((CMMsl::MobilitySmoothedGaitMetrics *)&v8, a2);
    v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v12;
    v12 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    v9 = v4;
    v5 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v11;
    v11 = v5;
    v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v10;
    v10 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::MobilitySmoothedGaitMetrics *a2, CMMsl::MobilitySmoothedGaitMetrics *a3)
{
  int v3;
  uint64_t v4;
  float result;

  v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  return result;
}

float CMMsl::MobilitySmoothedGaitMetrics::MobilitySmoothedGaitMetrics(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135F350;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_25135F350;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::MobilitySmoothedGaitMetrics::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _QWORD v10[2];
  __int128 v11;
  uint64_t v12;
  int v13;

  if (a1 != a2)
  {
    v10[0] = &off_25135F350;
    v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v13 = *(_DWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v10[1] = v5;
    v12 = *(_QWORD *)(a1 + 32);
    v6 = *(_OWORD *)(a1 + 16);
    v7 = *(_OWORD *)(a2 + 16);
    v8 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 40) = v3;
    *(_QWORD *)(a1 + 32) = v8;
    *(_OWORD *)(a1 + 16) = v7;
    v11 = v6;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::MobilitySmoothedGaitMetrics::formatText(CMMsl::MobilitySmoothedGaitMetrics *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "asymmetryProbability", *((float *)this + 4));
    v5 = *((_BYTE *)this + 40);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*((_BYTE *)this + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "cycleTime", *((float *)this + 5));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "distance", *((float *)this + 6));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "doubleSupportPercentage", *((float *)this + 7));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
LABEL_15:
    PB::TextFormatter::format(a2, "stepLength", *((float *)this + 8));
    if ((*((_BYTE *)this + 40) & 0x40) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_8;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 1));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 0x20) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v5 & 0x40) != 0)
LABEL_8:
    PB::TextFormatter::format(a2, "walkingSpeed", *((float *)this + 9));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MobilitySmoothedGaitMetrics::readFrom(CMMsl::MobilitySmoothedGaitMetrics *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_47;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 40) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_43;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        v2 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_46;
      case 2u:
        *((_BYTE *)this + 40) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_43;
        *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_45;
      case 3u:
        *((_BYTE *)this + 40) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_43;
        *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_45;
      case 4u:
        *((_BYTE *)this + 40) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_43;
        *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_45;
      case 5u:
        *((_BYTE *)this + 40) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_43;
        *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_45;
      case 6u:
        *((_BYTE *)this + 40) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_43;
        *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_45;
      case 7u:
        *((_BYTE *)this + 40) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_45:
          v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_46:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_43:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_47:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::MobilitySmoothedGaitMetrics::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 40);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(this + 40) & 0x40) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 16));
  }
LABEL_14:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  if ((*(_BYTE *)(v3 + 40) & 2) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 16));
  return this;
}

uint64_t CMMsl::MobilitySmoothedGaitMetrics::hash_value(CMMsl::MobilitySmoothedGaitMetrics *this)
{
  double v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v13;

  if ((*((_BYTE *)this + 40) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 40) & 0x40) != 0)
      goto LABEL_3;
LABEL_24:
    v3 = 0;
    if ((*((_BYTE *)this + 40) & 0x20) != 0)
      goto LABEL_6;
LABEL_25:
    v5 = 0;
    if ((*((_BYTE *)this + 40) & 8) != 0)
      goto LABEL_9;
LABEL_26:
    v7 = 0;
    if ((*((_BYTE *)this + 40) & 4) != 0)
      goto LABEL_12;
LABEL_27:
    v9 = 0;
    if ((*((_BYTE *)this + 40) & 0x10) != 0)
      goto LABEL_15;
    goto LABEL_28;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 40) & 0x40) == 0)
    goto LABEL_24;
LABEL_3:
  v2 = *((float *)this + 9);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 40) & 0x20) == 0)
    goto LABEL_25;
LABEL_6:
  v4 = *((float *)this + 8);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((*((_BYTE *)this + 40) & 8) == 0)
    goto LABEL_26;
LABEL_9:
  v6 = *((float *)this + 6);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  if ((*((_BYTE *)this + 40) & 4) == 0)
    goto LABEL_27;
LABEL_12:
  v8 = *((float *)this + 5);
  v9 = LODWORD(v8);
  if (v8 == 0.0)
    v9 = 0;
  if ((*((_BYTE *)this + 40) & 0x10) != 0)
  {
LABEL_15:
    v10 = *((float *)this + 7);
    v11 = LODWORD(v10);
    if (v10 == 0.0)
      v11 = 0;
    if ((*((_BYTE *)this + 40) & 2) != 0)
      goto LABEL_18;
LABEL_29:
    v13 = 0;
    return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13;
  }
LABEL_28:
  v11 = 0;
  if ((*((_BYTE *)this + 40) & 2) == 0)
    goto LABEL_29;
LABEL_18:
  v12 = *((float *)this + 4);
  v13 = LODWORD(v12);
  if (v12 == 0.0)
    v13 = 0;
  return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13;
}

void CMMsl::ModelBasedBioMotionClassification::~ModelBasedBioMotionClassification(CMMsl::ModelBasedBioMotionClassification *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135F388;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135F388;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135F388;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::ModelBasedBioMotionClassification *CMMsl::ModelBasedBioMotionClassification::ModelBasedBioMotionClassification(CMMsl::ModelBasedBioMotionClassification *this, const CMMsl::BioMotionClassification **a2)
{
  CMMsl::BioMotionClassification *v4;
  double v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_25135F388;
  *((_QWORD *)this + 1) = 0;
  if (a2[1])
  {
    v4 = (CMMsl::BioMotionClassification *)operator new();
    v5 = CMMsl::BioMotionClassification::BioMotionClassification(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v7;
    if (v6)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v6 + 8))(v6, v5);
  }
  return this;
}

uint64_t CMMsl::ModelBasedBioMotionClassification::operator=(uint64_t a1, const CMMsl::BioMotionClassification **a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::ModelBasedBioMotionClassification *__hidden);
  uint64_t v6;

  if ((const CMMsl::BioMotionClassification **)a1 != a2)
  {
    CMMsl::ModelBasedBioMotionClassification::ModelBasedBioMotionClassification((CMMsl::ModelBasedBioMotionClassification *)&v5, a2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v6;
    v5 = &off_25135F388;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::ModelBasedBioMotionClassification *a2, CMMsl::ModelBasedBioMotionClassification *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::ModelBasedBioMotionClassification::ModelBasedBioMotionClassification(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_25135F388;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_25135F388;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::ModelBasedBioMotionClassification::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = &off_25135F388;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::ModelBasedBioMotionClassification::formatText(CMMsl::ModelBasedBioMotionClassification *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ModelBasedBioMotionClassification::readFrom(CMMsl::ModelBasedBioMotionClassification *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v19 = (_DWORD *)operator new();
        *(_QWORD *)v19 = &off_25135C8A8;
        v19[12] = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = (_DWORD *)*((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_27;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::ModelBasedBioMotionClassification::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2);
  return this;
}

CMMsl::BioMotionClassification *CMMsl::ModelBasedBioMotionClassification::hash_value(CMMsl::ModelBasedBioMotionClassification *this)
{
  CMMsl::BioMotionClassification *result;

  result = (CMMsl::BioMotionClassification *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::BioMotionClassification *)CMMsl::BioMotionClassification::hash_value(result);
  return result;
}

_QWORD *CMMsl::ModelBasedBioMotionClassification::makeSuper(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135C8A8;
    *(_DWORD *)(v2 + 48) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void CMMsl::MotionActivity::~MotionActivity(CMMsl::MotionActivity *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::MotionActivity::MotionActivity(uint64_t this, const CMMsl::MotionActivity *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  char v8;
  int v9;
  uint64_t v10;
  char v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;

  *(_QWORD *)this = &off_25135F3C0;
  *(_DWORD *)(this + 116) = 0;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x10000) != 0)
  {
    v4 = *((_DWORD *)a2 + 23);
    v3 = 0x10000;
    *(_DWORD *)(this + 116) = 0x10000;
    *(_DWORD *)(this + 92) = v4;
    v2 = *((_DWORD *)a2 + 29);
    if ((v2 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x200) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 16);
    v3 |= 0x200u;
    *(_DWORD *)(this + 116) = v3;
    *(_DWORD *)(this + 64) = v5;
    v2 = *((_DWORD *)a2 + 29);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    v6 = *((_DWORD *)a2 + 12);
    v3 |= 0x20u;
    *(_DWORD *)(this + 116) = v3;
    *(_DWORD *)(this + 48) = v6;
    v2 = *((_DWORD *)a2 + 29);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x100000) == 0)
        goto LABEL_9;
      goto LABEL_34;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 17);
  v3 |= 0x400u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 68) = v7;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x100000) == 0)
  {
LABEL_9:
    if ((v2 & 0x8000) == 0)
      goto LABEL_10;
    goto LABEL_35;
  }
LABEL_34:
  v8 = *((_BYTE *)a2 + 108);
  v3 |= 0x100000u;
  *(_DWORD *)(this + 116) = v3;
  *(_BYTE *)(this + 108) = v8;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x8000) == 0)
  {
LABEL_10:
    if ((v2 & 4) == 0)
      goto LABEL_11;
    goto LABEL_36;
  }
LABEL_35:
  v9 = *((_DWORD *)a2 + 22);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 88) = v9;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 4) == 0)
  {
LABEL_11:
    if ((v2 & 0x200000) == 0)
      goto LABEL_12;
    goto LABEL_37;
  }
LABEL_36:
  v10 = *((_QWORD *)a2 + 3);
  v3 |= 4u;
  *(_DWORD *)(this + 116) = v3;
  *(_QWORD *)(this + 24) = v10;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x200000) == 0)
  {
LABEL_12:
    if ((v2 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_38;
  }
LABEL_37:
  v11 = *((_BYTE *)a2 + 109);
  v3 |= 0x200000u;
  *(_DWORD *)(this + 116) = v3;
  *(_BYTE *)(this + 109) = v11;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x100) == 0)
  {
LABEL_13:
    if ((v2 & 1) == 0)
      goto LABEL_14;
    goto LABEL_39;
  }
LABEL_38:
  v12 = *((_DWORD *)a2 + 15);
  v3 |= 0x100u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 60) = v12;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 1) == 0)
  {
LABEL_14:
    if ((v2 & 2) == 0)
      goto LABEL_15;
    goto LABEL_40;
  }
LABEL_39:
  v13 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_DWORD *)(this + 116) = v3;
  *(_QWORD *)(this + 8) = v13;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 2) == 0)
  {
LABEL_15:
    if ((v2 & 0x1000) == 0)
      goto LABEL_16;
    goto LABEL_41;
  }
LABEL_40:
  v14 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_DWORD *)(this + 116) = v3;
  *(_QWORD *)(this + 16) = v14;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x1000) == 0)
  {
LABEL_16:
    if ((v2 & 0x800) == 0)
      goto LABEL_17;
    goto LABEL_42;
  }
LABEL_41:
  v15 = *((_DWORD *)a2 + 19);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 76) = v15;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x800) == 0)
  {
LABEL_17:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_18;
    goto LABEL_43;
  }
LABEL_42:
  v16 = *((_DWORD *)a2 + 18);
  v3 |= 0x800u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 72) = v16;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_19;
    goto LABEL_44;
  }
LABEL_43:
  v17 = *((_BYTE *)a2 + 113);
  v3 |= 0x2000000u;
  *(_DWORD *)(this + 116) = v3;
  *(_BYTE *)(this + 113) = v17;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_19:
    if ((v2 & 0x400000) == 0)
      goto LABEL_20;
    goto LABEL_45;
  }
LABEL_44:
  v18 = *((_BYTE *)a2 + 112);
  v3 |= 0x1000000u;
  *(_DWORD *)(this + 116) = v3;
  *(_BYTE *)(this + 112) = v18;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x400000) == 0)
  {
LABEL_20:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_21;
    goto LABEL_46;
  }
LABEL_45:
  v19 = *((_BYTE *)a2 + 110);
  v3 |= 0x400000u;
  *(_DWORD *)(this + 116) = v3;
  *(_BYTE *)(this + 110) = v19;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_21:
    if ((v2 & 0x800000) == 0)
      goto LABEL_22;
    goto LABEL_47;
  }
LABEL_46:
  v20 = *((_BYTE *)a2 + 114);
  v3 |= 0x4000000u;
  *(_DWORD *)(this + 116) = v3;
  *(_BYTE *)(this + 114) = v20;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x800000) == 0)
  {
LABEL_22:
    if ((v2 & 0x40000) == 0)
      goto LABEL_23;
    goto LABEL_48;
  }
LABEL_47:
  v21 = *((_BYTE *)a2 + 111);
  v3 |= 0x800000u;
  *(_DWORD *)(this + 116) = v3;
  *(_BYTE *)(this + 111) = v21;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x40000) == 0)
  {
LABEL_23:
    if ((v2 & 0x80) == 0)
      goto LABEL_24;
    goto LABEL_49;
  }
LABEL_48:
  v22 = *((_DWORD *)a2 + 25);
  v3 |= 0x40000u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 100) = v22;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x80) == 0)
  {
LABEL_24:
    if ((v2 & 0x40) == 0)
      goto LABEL_25;
    goto LABEL_50;
  }
LABEL_49:
  v23 = *((_DWORD *)a2 + 14);
  v3 |= 0x80u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 56) = v23;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x40) == 0)
  {
LABEL_25:
    if ((v2 & 0x4000) == 0)
      goto LABEL_26;
    goto LABEL_51;
  }
LABEL_50:
  v24 = *((_DWORD *)a2 + 13);
  v3 |= 0x40u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 52) = v24;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x4000) == 0)
  {
LABEL_26:
    if ((v2 & 0x80000) == 0)
      goto LABEL_27;
    goto LABEL_52;
  }
LABEL_51:
  v25 = *((_DWORD *)a2 + 21);
  v3 |= 0x4000u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 84) = v25;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x80000) == 0)
  {
LABEL_27:
    if ((v2 & 8) == 0)
      goto LABEL_28;
    goto LABEL_53;
  }
LABEL_52:
  v26 = *((_DWORD *)a2 + 26);
  v3 |= 0x80000u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 104) = v26;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 8) == 0)
  {
LABEL_28:
    if ((v2 & 0x10) == 0)
      goto LABEL_29;
    goto LABEL_54;
  }
LABEL_53:
  v27 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *(_DWORD *)(this + 116) = v3;
  *(_QWORD *)(this + 32) = v27;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x10) == 0)
  {
LABEL_29:
    if ((v2 & 0x20000) == 0)
      goto LABEL_30;
    goto LABEL_55;
  }
LABEL_54:
  v28 = *((_QWORD *)a2 + 5);
  v3 |= 0x10u;
  *(_DWORD *)(this + 116) = v3;
  *(_QWORD *)(this + 40) = v28;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x20000) == 0)
  {
LABEL_30:
    if ((v2 & 0x2000) == 0)
      return this;
LABEL_56:
    v30 = *((_DWORD *)a2 + 20);
    *(_DWORD *)(this + 116) = v3 | 0x2000;
    *(_DWORD *)(this + 80) = v30;
    return this;
  }
LABEL_55:
  v29 = *((_DWORD *)a2 + 24);
  v3 |= 0x20000u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 96) = v29;
  if ((*((_DWORD *)a2 + 29) & 0x2000) != 0)
    goto LABEL_56;
  return this;
}

CMMsl *CMMsl::MotionActivity::operator=(CMMsl *a1, const CMMsl::MotionActivity *a2)
{
  CMMsl::MotionActivity *v3;
  _BYTE v5[120];

  if (a1 != a2)
  {
    CMMsl::MotionActivity::MotionActivity((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::MotionActivity *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::MotionActivity *a2, CMMsl::MotionActivity *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  double result;
  uint64_t v18;

  v3 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v3;
  v4 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v4;
  v5 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v5;
  v6 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v6;
  v7 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 108);
  *((_BYTE *)this + 108) = *((_BYTE *)a2 + 108);
  *((_BYTE *)a2 + 108) = v7;
  v8 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v8;
  v9 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v9;
  LOBYTE(v7) = *((_BYTE *)this + 109);
  *((_BYTE *)this + 109) = *((_BYTE *)a2 + 109);
  *((_BYTE *)a2 + 109) = v7;
  v10 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v10;
  v11 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v11;
  v12 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v12;
  v13 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v13;
  v14 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v14;
  LOBYTE(v14) = *((_BYTE *)this + 113);
  *((_BYTE *)this + 113) = *((_BYTE *)a2 + 113);
  *((_BYTE *)a2 + 113) = v14;
  LOBYTE(v14) = *((_BYTE *)this + 112);
  *((_BYTE *)this + 112) = *((_BYTE *)a2 + 112);
  *((_BYTE *)a2 + 112) = v14;
  LOBYTE(v14) = *((_BYTE *)this + 110);
  *((_BYTE *)this + 110) = *((_BYTE *)a2 + 110);
  *((_BYTE *)a2 + 110) = v14;
  LOBYTE(v14) = *((_BYTE *)this + 114);
  *((_BYTE *)this + 114) = *((_BYTE *)a2 + 114);
  *((_BYTE *)a2 + 114) = v14;
  LOBYTE(v14) = *((_BYTE *)this + 111);
  *((_BYTE *)this + 111) = *((_BYTE *)a2 + 111);
  *((_BYTE *)a2 + 111) = v14;
  v15 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v15;
  LODWORD(v12) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v12;
  LODWORD(v12) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v12;
  LODWORD(v12) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v12;
  v16 = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v16;
  result = *((double *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((double *)a2 + 4) = result;
  v18 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v18;
  LODWORD(v18) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v18;
  LODWORD(v18) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v18;
  return result;
}

double CMMsl::MotionActivity::MotionActivity(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135F3C0;
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a2 + 116) = 0;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 108);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 109) = *(_BYTE *)(a2 + 109);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 113) = *(_BYTE *)(a2 + 113);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_BYTE *)(a1 + 110) = *(_BYTE *)(a2 + 110);
  *(_BYTE *)(a1 + 114) = *(_BYTE *)(a2 + 114);
  *(_BYTE *)(a1 + 111) = *(_BYTE *)(a2 + 111);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  return result;
}

CMMsl *CMMsl::MotionActivity::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::MotionActivity *v3;
  _BYTE v5[120];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::MotionActivity::MotionActivity((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::MotionActivity *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::MotionActivity::formatText(CMMsl::MotionActivity *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(a2, "confidence");
    v5 = *((_DWORD *)this + 29);
    if ((v5 & 0x40) == 0)
    {
LABEL_3:
      if ((v5 & 0x80) == 0)
        goto LABEL_4;
      goto LABEL_32;
    }
  }
  else if ((v5 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "drivingArmLikelihoodSum", *((float *)this + 13));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x80) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0)
      goto LABEL_5;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "drivingStowedLikelihoodSum", *((float *)this + 14));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "estExitTime", *((double *)this + 1));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x100) == 0)
  {
LABEL_6:
    if ((v5 & 0x100000) == 0)
      goto LABEL_7;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "exitState");
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x100000) == 0)
  {
LABEL_7:
    if ((v5 & 0x200000) == 0)
      goto LABEL_8;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "isStanding");
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x200000) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "isVehicleConnected");
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "mountedConfidence");
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "mountedState");
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "rawConfidence");
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x1000) == 0)
  {
LABEL_12:
    if ((v5 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "rawType");
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x2000) == 0)
  {
LABEL_13:
    if ((v5 & 0x4000) == 0)
      goto LABEL_14;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "source");
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x4000) == 0)
  {
LABEL_14:
    if ((v5 & 2) == 0)
      goto LABEL_15;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "ssLikelihoodSum", *((float *)this + 21));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 2) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0)
      goto LABEL_16;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 2));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 4) == 0)
      goto LABEL_17;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "tilt", *((float *)this + 22));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 4) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 3));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "type");
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x400000) == 0)
      goto LABEL_20;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "typeYouth");
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x400000) == 0)
  {
LABEL_20:
    if ((v5 & 0x800000) == 0)
      goto LABEL_21;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "vehicularBasebandHint");
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x800000) == 0)
  {
LABEL_21:
    if ((v5 & 0x40000) == 0)
      goto LABEL_22;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "vehicularBtHint");
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x40000) == 0)
  {
LABEL_22:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_23;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "vehicularConfidence");
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_23:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_24;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "vehicularGpsHint");
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_24:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_25;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "vehicularMotionHint");
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_25:
    if ((v5 & 8) == 0)
      goto LABEL_26;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "vehicularWifiHint");
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 8) == 0)
  {
LABEL_26:
    if ((v5 & 0x80000) == 0)
      goto LABEL_27;
LABEL_55:
    PB::TextFormatter::format(a2, "workoutDetectionType");
    if ((*((_DWORD *)this + 29) & 0x10) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_28;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "workoutDetectionTime", *((double *)this + 4));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x80000) != 0)
    goto LABEL_55;
LABEL_27:
  if ((v5 & 0x10) != 0)
LABEL_28:
    PB::TextFormatter::format(a2, "workoutEscalationTime");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MotionActivity::readFrom(CMMsl::MotionActivity *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  BOOL v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  int v61;
  BOOL v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char v76;
  unsigned int v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  char v84;
  unsigned int v85;
  uint64_t v86;
  unint64_t v87;
  char v88;
  unint64_t v89;
  unint64_t v90;
  int v91;
  BOOL v92;
  unint64_t v93;
  unint64_t v94;
  int v95;
  BOOL v96;
  unint64_t v97;
  unint64_t v98;
  int v99;
  BOOL v100;
  unint64_t v101;
  unint64_t v102;
  int v103;
  BOOL v104;
  unint64_t v105;
  unint64_t v106;
  int v107;
  BOOL v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  char v112;
  unsigned int v113;
  uint64_t v114;
  unint64_t v115;
  char v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  char v124;
  unsigned int v125;
  uint64_t v126;
  unint64_t v127;
  char v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  char v133;
  unsigned int v134;
  uint64_t v135;
  unint64_t v136;
  char v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  char v141;
  unsigned int v142;
  uint64_t v143;
  unint64_t v144;
  char v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  char v149;
  unsigned int v150;
  uint64_t v151;
  unint64_t v152;
  char v153;
  char v154;
  unsigned int v155;
  unint64_t v156;
  char v157;
  char v158;
  unsigned int v159;
  unint64_t v160;
  char v161;
  char v162;
  unsigned int v163;
  unint64_t v164;
  char v165;
  char v166;
  unsigned int v167;
  unint64_t v168;
  char v169;
  char v170;
  unsigned int v171;
  unint64_t v172;
  char v173;
  char v174;
  unsigned int v175;
  unint64_t v176;
  char v177;
  char v178;
  unsigned int v179;
  unint64_t v180;
  char v181;
  char v182;
  unsigned int v183;
  unint64_t v184;
  char v185;
  char v186;
  unsigned int v187;
  unint64_t v188;
  char v189;
  char v190;
  unsigned int v191;
  unint64_t v192;
  char v193;
  char v194;
  unsigned int v195;
  unint64_t v196;
  char v197;
  char v198;
  unsigned int v199;
  unint64_t v200;
  char v201;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_25;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      goto LABEL_20;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_25:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 29) |= 0x10000u;
        v21 = *((_QWORD *)a2 + 1);
        v22 = *((_QWORD *)a2 + 2);
        v23 = *(_QWORD *)a2;
        if (v21 <= 0xFFFFFFFFFFFFFFF5 && v21 + 10 <= v22)
        {
          v24 = 0;
          v25 = 0;
          v26 = 0;
          do
          {
            v27 = v21 + 1;
            *((_QWORD *)a2 + 1) = v21 + 1;
            v28 = *(_BYTE *)(v23 + v21);
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if ((v28 & 0x80) == 0)
              goto LABEL_254;
            v24 += 7;
            v21 = v27;
            v14 = v25++ > 8;
          }
          while (!v14);
LABEL_156:
          LODWORD(v26) = 0;
          goto LABEL_254;
        }
        v154 = 0;
        v155 = 0;
        v26 = 0;
        if (v22 <= v21)
          v22 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v22 == v21)
          {
            LODWORD(v26) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v156 = v21 + 1;
            v157 = *(_BYTE *)(v23 + v21);
            *((_QWORD *)a2 + 1) = v156;
            v26 |= (unint64_t)(v157 & 0x7F) << v154;
            if (v157 < 0)
            {
              v154 += 7;
              v21 = v156;
              v14 = v155++ > 8;
              if (v14)
                goto LABEL_156;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v26) = 0;
          }
          break;
        }
LABEL_254:
        *((_DWORD *)this + 23) = v26;
        goto LABEL_20;
      case 2u:
        *((_DWORD *)this + 29) |= 0x200u;
        v29 = *((_QWORD *)a2 + 1);
        v30 = *((_QWORD *)a2 + 2);
        v31 = *(_QWORD *)a2;
        if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
        {
          v32 = 0;
          v33 = 0;
          v34 = 0;
          do
          {
            v35 = v29 + 1;
            *((_QWORD *)a2 + 1) = v29 + 1;
            v36 = *(_BYTE *)(v31 + v29);
            v34 |= (unint64_t)(v36 & 0x7F) << v32;
            if ((v36 & 0x80) == 0)
              goto LABEL_258;
            v32 += 7;
            v29 = v35;
            v14 = v33++ > 8;
          }
          while (!v14);
LABEL_163:
          LODWORD(v34) = 0;
          goto LABEL_258;
        }
        v158 = 0;
        v159 = 0;
        v34 = 0;
        if (v30 <= v29)
          v30 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v30 == v29)
          {
            LODWORD(v34) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v160 = v29 + 1;
            v161 = *(_BYTE *)(v31 + v29);
            *((_QWORD *)a2 + 1) = v160;
            v34 |= (unint64_t)(v161 & 0x7F) << v158;
            if (v161 < 0)
            {
              v158 += 7;
              v29 = v160;
              v14 = v159++ > 8;
              if (v14)
                goto LABEL_163;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v34) = 0;
          }
          break;
        }
LABEL_258:
        *((_DWORD *)this + 16) = v34;
        goto LABEL_20;
      case 3u:
        *((_DWORD *)this + 29) |= 0x20u;
        v37 = *((_QWORD *)a2 + 1);
        v38 = *((_QWORD *)a2 + 2);
        v39 = *(_QWORD *)a2;
        if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
        {
          v40 = 0;
          v41 = 0;
          v42 = 0;
          do
          {
            v43 = v37 + 1;
            *((_QWORD *)a2 + 1) = v37 + 1;
            v44 = *(_BYTE *)(v39 + v37);
            v42 |= (unint64_t)(v44 & 0x7F) << v40;
            if ((v44 & 0x80) == 0)
              goto LABEL_262;
            v40 += 7;
            v37 = v43;
            v14 = v41++ > 8;
          }
          while (!v14);
LABEL_170:
          LODWORD(v42) = 0;
          goto LABEL_262;
        }
        v162 = 0;
        v163 = 0;
        v42 = 0;
        if (v38 <= v37)
          v38 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v38 == v37)
          {
            LODWORD(v42) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v164 = v37 + 1;
            v165 = *(_BYTE *)(v39 + v37);
            *((_QWORD *)a2 + 1) = v164;
            v42 |= (unint64_t)(v165 & 0x7F) << v162;
            if (v165 < 0)
            {
              v162 += 7;
              v37 = v164;
              v14 = v163++ > 8;
              if (v14)
                goto LABEL_170;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v42) = 0;
          }
          break;
        }
LABEL_262:
        *((_DWORD *)this + 12) = v42;
        goto LABEL_20;
      case 4u:
        *((_DWORD *)this + 29) |= 0x400u;
        v45 = *((_QWORD *)a2 + 1);
        v46 = *((_QWORD *)a2 + 2);
        v47 = *(_QWORD *)a2;
        if (v45 <= 0xFFFFFFFFFFFFFFF5 && v45 + 10 <= v46)
        {
          v48 = 0;
          v49 = 0;
          v50 = 0;
          do
          {
            v51 = v45 + 1;
            *((_QWORD *)a2 + 1) = v45 + 1;
            v52 = *(_BYTE *)(v47 + v45);
            v50 |= (unint64_t)(v52 & 0x7F) << v48;
            if ((v52 & 0x80) == 0)
              goto LABEL_266;
            v48 += 7;
            v45 = v51;
            v14 = v49++ > 8;
          }
          while (!v14);
LABEL_177:
          LODWORD(v50) = 0;
          goto LABEL_266;
        }
        v166 = 0;
        v167 = 0;
        v50 = 0;
        if (v46 <= v45)
          v46 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v46 == v45)
          {
            LODWORD(v50) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v168 = v45 + 1;
            v169 = *(_BYTE *)(v47 + v45);
            *((_QWORD *)a2 + 1) = v168;
            v50 |= (unint64_t)(v169 & 0x7F) << v166;
            if (v169 < 0)
            {
              v166 += 7;
              v45 = v168;
              v14 = v167++ > 8;
              if (v14)
                goto LABEL_177;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v50) = 0;
          }
          break;
        }
LABEL_266:
        *((_DWORD *)this + 17) = v50;
        goto LABEL_20;
      case 5u:
        *((_DWORD *)this + 29) |= 0x100000u;
        v53 = *((_QWORD *)a2 + 1);
        if (v53 >= *((_QWORD *)a2 + 2))
        {
          v56 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v54 = v53 + 1;
          v55 = *(unsigned __int8 *)(*(_QWORD *)a2 + v53);
          *((_QWORD *)a2 + 1) = v54;
          v56 = v55 != 0;
        }
        *((_BYTE *)this + 108) = v56;
        goto LABEL_20;
      case 6u:
        *((_DWORD *)this + 29) |= 0x8000u;
        v57 = *((_QWORD *)a2 + 1);
        if (v57 > 0xFFFFFFFFFFFFFFFBLL || v57 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_128;
        *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v57);
        goto LABEL_118;
      case 7u:
        *((_DWORD *)this + 29) |= 4u;
        v58 = *((_QWORD *)a2 + 1);
        if (v58 > 0xFFFFFFFFFFFFFFF7 || v58 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_128;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v58);
        goto LABEL_249;
      case 8u:
        *((_DWORD *)this + 29) |= 0x200000u;
        v59 = *((_QWORD *)a2 + 1);
        if (v59 >= *((_QWORD *)a2 + 2))
        {
          v62 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v60 = v59 + 1;
          v61 = *(unsigned __int8 *)(*(_QWORD *)a2 + v59);
          *((_QWORD *)a2 + 1) = v60;
          v62 = v61 != 0;
        }
        *((_BYTE *)this + 109) = v62;
        goto LABEL_20;
      case 9u:
        *((_DWORD *)this + 29) |= 0x100u;
        v63 = *((_QWORD *)a2 + 1);
        v64 = *((_QWORD *)a2 + 2);
        v65 = *(_QWORD *)a2;
        if (v63 <= 0xFFFFFFFFFFFFFFF5 && v63 + 10 <= v64)
        {
          v66 = 0;
          v67 = 0;
          v68 = 0;
          do
          {
            v69 = v63 + 1;
            *((_QWORD *)a2 + 1) = v63 + 1;
            v70 = *(_BYTE *)(v65 + v63);
            v68 |= (unint64_t)(v70 & 0x7F) << v66;
            if ((v70 & 0x80) == 0)
              goto LABEL_270;
            v66 += 7;
            v63 = v69;
            v14 = v67++ > 8;
          }
          while (!v14);
LABEL_188:
          LODWORD(v68) = 0;
          goto LABEL_270;
        }
        v170 = 0;
        v171 = 0;
        v68 = 0;
        if (v64 <= v63)
          v64 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v64 == v63)
          {
            LODWORD(v68) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v172 = v63 + 1;
            v173 = *(_BYTE *)(v65 + v63);
            *((_QWORD *)a2 + 1) = v172;
            v68 |= (unint64_t)(v173 & 0x7F) << v170;
            if (v173 < 0)
            {
              v170 += 7;
              v63 = v172;
              v14 = v171++ > 8;
              if (v14)
                goto LABEL_188;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v68) = 0;
          }
          break;
        }
LABEL_270:
        *((_DWORD *)this + 15) = v68;
        goto LABEL_20;
      case 0xAu:
        *((_DWORD *)this + 29) |= 1u;
        v71 = *((_QWORD *)a2 + 1);
        if (v71 > 0xFFFFFFFFFFFFFFF7 || v71 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_128;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v71);
        goto LABEL_249;
      case 0xBu:
        *((_DWORD *)this + 29) |= 2u;
        v72 = *((_QWORD *)a2 + 1);
        if (v72 > 0xFFFFFFFFFFFFFFF7 || v72 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_128;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v72);
        goto LABEL_249;
      case 0xCu:
        *((_DWORD *)this + 29) |= 0x1000u;
        v73 = *((_QWORD *)a2 + 1);
        v74 = *((_QWORD *)a2 + 2);
        v75 = *(_QWORD *)a2;
        if (v73 <= 0xFFFFFFFFFFFFFFF5 && v73 + 10 <= v74)
        {
          v76 = 0;
          v77 = 0;
          v78 = 0;
          do
          {
            v79 = v73 + 1;
            *((_QWORD *)a2 + 1) = v73 + 1;
            v80 = *(_BYTE *)(v75 + v73);
            v78 |= (unint64_t)(v80 & 0x7F) << v76;
            if ((v80 & 0x80) == 0)
              goto LABEL_274;
            v76 += 7;
            v73 = v79;
            v14 = v77++ > 8;
          }
          while (!v14);
LABEL_195:
          LODWORD(v78) = 0;
          goto LABEL_274;
        }
        v174 = 0;
        v175 = 0;
        v78 = 0;
        if (v74 <= v73)
          v74 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v74 == v73)
          {
            LODWORD(v78) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v176 = v73 + 1;
            v177 = *(_BYTE *)(v75 + v73);
            *((_QWORD *)a2 + 1) = v176;
            v78 |= (unint64_t)(v177 & 0x7F) << v174;
            if (v177 < 0)
            {
              v174 += 7;
              v73 = v176;
              v14 = v175++ > 8;
              if (v14)
                goto LABEL_195;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v78) = 0;
          }
          break;
        }
LABEL_274:
        *((_DWORD *)this + 19) = v78;
        goto LABEL_20;
      case 0xDu:
        *((_DWORD *)this + 29) |= 0x800u;
        v81 = *((_QWORD *)a2 + 1);
        v82 = *((_QWORD *)a2 + 2);
        v83 = *(_QWORD *)a2;
        if (v81 <= 0xFFFFFFFFFFFFFFF5 && v81 + 10 <= v82)
        {
          v84 = 0;
          v85 = 0;
          v86 = 0;
          do
          {
            v87 = v81 + 1;
            *((_QWORD *)a2 + 1) = v81 + 1;
            v88 = *(_BYTE *)(v83 + v81);
            v86 |= (unint64_t)(v88 & 0x7F) << v84;
            if ((v88 & 0x80) == 0)
              goto LABEL_278;
            v84 += 7;
            v81 = v87;
            v14 = v85++ > 8;
          }
          while (!v14);
LABEL_202:
          LODWORD(v86) = 0;
          goto LABEL_278;
        }
        v178 = 0;
        v179 = 0;
        v86 = 0;
        if (v82 <= v81)
          v82 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v82 == v81)
          {
            LODWORD(v86) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v180 = v81 + 1;
            v181 = *(_BYTE *)(v83 + v81);
            *((_QWORD *)a2 + 1) = v180;
            v86 |= (unint64_t)(v181 & 0x7F) << v178;
            if (v181 < 0)
            {
              v178 += 7;
              v81 = v180;
              v14 = v179++ > 8;
              if (v14)
                goto LABEL_202;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v86) = 0;
          }
          break;
        }
LABEL_278:
        *((_DWORD *)this + 18) = v86;
        goto LABEL_20;
      case 0xEu:
        *((_DWORD *)this + 29) |= 0x2000000u;
        v89 = *((_QWORD *)a2 + 1);
        if (v89 >= *((_QWORD *)a2 + 2))
        {
          v92 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v90 = v89 + 1;
          v91 = *(unsigned __int8 *)(*(_QWORD *)a2 + v89);
          *((_QWORD *)a2 + 1) = v90;
          v92 = v91 != 0;
        }
        *((_BYTE *)this + 113) = v92;
        goto LABEL_20;
      case 0xFu:
        *((_DWORD *)this + 29) |= 0x1000000u;
        v93 = *((_QWORD *)a2 + 1);
        if (v93 >= *((_QWORD *)a2 + 2))
        {
          v96 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v94 = v93 + 1;
          v95 = *(unsigned __int8 *)(*(_QWORD *)a2 + v93);
          *((_QWORD *)a2 + 1) = v94;
          v96 = v95 != 0;
        }
        *((_BYTE *)this + 112) = v96;
        goto LABEL_20;
      case 0x10u:
        *((_DWORD *)this + 29) |= 0x400000u;
        v97 = *((_QWORD *)a2 + 1);
        if (v97 >= *((_QWORD *)a2 + 2))
        {
          v100 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v98 = v97 + 1;
          v99 = *(unsigned __int8 *)(*(_QWORD *)a2 + v97);
          *((_QWORD *)a2 + 1) = v98;
          v100 = v99 != 0;
        }
        *((_BYTE *)this + 110) = v100;
        goto LABEL_20;
      case 0x11u:
        *((_DWORD *)this + 29) |= 0x4000000u;
        v101 = *((_QWORD *)a2 + 1);
        if (v101 >= *((_QWORD *)a2 + 2))
        {
          v104 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v102 = v101 + 1;
          v103 = *(unsigned __int8 *)(*(_QWORD *)a2 + v101);
          *((_QWORD *)a2 + 1) = v102;
          v104 = v103 != 0;
        }
        *((_BYTE *)this + 114) = v104;
        goto LABEL_20;
      case 0x12u:
        *((_DWORD *)this + 29) |= 0x800000u;
        v105 = *((_QWORD *)a2 + 1);
        if (v105 >= *((_QWORD *)a2 + 2))
        {
          v108 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v106 = v105 + 1;
          v107 = *(unsigned __int8 *)(*(_QWORD *)a2 + v105);
          *((_QWORD *)a2 + 1) = v106;
          v108 = v107 != 0;
        }
        *((_BYTE *)this + 111) = v108;
        goto LABEL_20;
      case 0x13u:
        *((_DWORD *)this + 29) |= 0x40000u;
        v109 = *((_QWORD *)a2 + 1);
        v110 = *((_QWORD *)a2 + 2);
        v111 = *(_QWORD *)a2;
        if (v109 <= 0xFFFFFFFFFFFFFFF5 && v109 + 10 <= v110)
        {
          v112 = 0;
          v113 = 0;
          v114 = 0;
          do
          {
            v115 = v109 + 1;
            *((_QWORD *)a2 + 1) = v109 + 1;
            v116 = *(_BYTE *)(v111 + v109);
            v114 |= (unint64_t)(v116 & 0x7F) << v112;
            if ((v116 & 0x80) == 0)
              goto LABEL_282;
            v112 += 7;
            v109 = v115;
            v14 = v113++ > 8;
          }
          while (!v14);
LABEL_219:
          LODWORD(v114) = 0;
          goto LABEL_282;
        }
        v182 = 0;
        v183 = 0;
        v114 = 0;
        if (v110 <= v109)
          v110 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v110 == v109)
          {
            LODWORD(v114) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v184 = v109 + 1;
            v185 = *(_BYTE *)(v111 + v109);
            *((_QWORD *)a2 + 1) = v184;
            v114 |= (unint64_t)(v185 & 0x7F) << v182;
            if (v185 < 0)
            {
              v182 += 7;
              v109 = v184;
              v14 = v183++ > 8;
              if (v14)
                goto LABEL_219;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v114) = 0;
          }
          break;
        }
LABEL_282:
        *((_DWORD *)this + 25) = v114;
        goto LABEL_20;
      case 0x14u:
        *((_DWORD *)this + 29) |= 0x80u;
        v117 = *((_QWORD *)a2 + 1);
        if (v117 > 0xFFFFFFFFFFFFFFFBLL || v117 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_128;
        *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v117);
        goto LABEL_118;
      case 0x15u:
        *((_DWORD *)this + 29) |= 0x40u;
        v118 = *((_QWORD *)a2 + 1);
        if (v118 > 0xFFFFFFFFFFFFFFFBLL || v118 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_128;
        *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v118);
        goto LABEL_118;
      case 0x16u:
        *((_DWORD *)this + 29) |= 0x4000u;
        v119 = *((_QWORD *)a2 + 1);
        if (v119 > 0xFFFFFFFFFFFFFFFBLL || v119 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_128;
        *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v119);
LABEL_118:
        v120 = *((_QWORD *)a2 + 1) + 4;
        goto LABEL_250;
      case 0x17u:
        *((_DWORD *)this + 29) |= 0x80000u;
        v121 = *((_QWORD *)a2 + 1);
        v122 = *((_QWORD *)a2 + 2);
        v123 = *(_QWORD *)a2;
        if (v121 <= 0xFFFFFFFFFFFFFFF5 && v121 + 10 <= v122)
        {
          v124 = 0;
          v125 = 0;
          v126 = 0;
          do
          {
            v127 = v121 + 1;
            *((_QWORD *)a2 + 1) = v121 + 1;
            v128 = *(_BYTE *)(v123 + v121);
            v126 |= (unint64_t)(v128 & 0x7F) << v124;
            if ((v128 & 0x80) == 0)
              goto LABEL_286;
            v124 += 7;
            v121 = v127;
            v14 = v125++ > 8;
          }
          while (!v14);
LABEL_226:
          LODWORD(v126) = 0;
          goto LABEL_286;
        }
        v186 = 0;
        v187 = 0;
        v126 = 0;
        if (v122 <= v121)
          v122 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v122 == v121)
          {
            LODWORD(v126) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v188 = v121 + 1;
            v189 = *(_BYTE *)(v123 + v121);
            *((_QWORD *)a2 + 1) = v188;
            v126 |= (unint64_t)(v189 & 0x7F) << v186;
            if (v189 < 0)
            {
              v186 += 7;
              v121 = v188;
              v14 = v187++ > 8;
              if (v14)
                goto LABEL_226;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v126) = 0;
          }
          break;
        }
LABEL_286:
        *((_DWORD *)this + 26) = v126;
        goto LABEL_20;
      case 0x18u:
        *((_DWORD *)this + 29) |= 8u;
        v129 = *((_QWORD *)a2 + 1);
        if (v129 <= 0xFFFFFFFFFFFFFFF7 && v129 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v129);
LABEL_249:
          v120 = *((_QWORD *)a2 + 1) + 8;
LABEL_250:
          *((_QWORD *)a2 + 1) = v120;
        }
        else
        {
LABEL_128:
          *((_BYTE *)a2 + 24) = 1;
        }
        goto LABEL_20;
      case 0x19u:
        *((_DWORD *)this + 29) |= 0x10u;
        v130 = *((_QWORD *)a2 + 1);
        v131 = *((_QWORD *)a2 + 2);
        v132 = *(_QWORD *)a2;
        if (v130 <= 0xFFFFFFFFFFFFFFF5 && v130 + 10 <= v131)
        {
          v133 = 0;
          v134 = 0;
          v135 = 0;
          do
          {
            v136 = v130 + 1;
            *((_QWORD *)a2 + 1) = v130 + 1;
            v137 = *(_BYTE *)(v132 + v130);
            v135 |= (unint64_t)(v137 & 0x7F) << v133;
            if ((v137 & 0x80) == 0)
              goto LABEL_290;
            v133 += 7;
            v130 = v136;
            v14 = v134++ > 8;
          }
          while (!v14);
LABEL_233:
          v135 = 0;
          goto LABEL_290;
        }
        v190 = 0;
        v191 = 0;
        v135 = 0;
        if (v131 <= v130)
          v131 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v131 == v130)
          {
            v135 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v192 = v130 + 1;
            v193 = *(_BYTE *)(v132 + v130);
            *((_QWORD *)a2 + 1) = v192;
            v135 |= (unint64_t)(v193 & 0x7F) << v190;
            if (v193 < 0)
            {
              v190 += 7;
              v130 = v192;
              v14 = v191++ > 8;
              if (v14)
                goto LABEL_233;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v135 = 0;
          }
          break;
        }
LABEL_290:
        *((_QWORD *)this + 5) = v135;
        goto LABEL_20;
      case 0x1Au:
        *((_DWORD *)this + 29) |= 0x20000u;
        v138 = *((_QWORD *)a2 + 1);
        v139 = *((_QWORD *)a2 + 2);
        v140 = *(_QWORD *)a2;
        if (v138 <= 0xFFFFFFFFFFFFFFF5 && v138 + 10 <= v139)
        {
          v141 = 0;
          v142 = 0;
          v143 = 0;
          do
          {
            v144 = v138 + 1;
            *((_QWORD *)a2 + 1) = v138 + 1;
            v145 = *(_BYTE *)(v140 + v138);
            v143 |= (unint64_t)(v145 & 0x7F) << v141;
            if ((v145 & 0x80) == 0)
              goto LABEL_294;
            v141 += 7;
            v138 = v144;
            v14 = v142++ > 8;
          }
          while (!v14);
LABEL_240:
          LODWORD(v143) = 0;
          goto LABEL_294;
        }
        v194 = 0;
        v195 = 0;
        v143 = 0;
        if (v139 <= v138)
          v139 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v139 == v138)
          {
            LODWORD(v143) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v196 = v138 + 1;
            v197 = *(_BYTE *)(v140 + v138);
            *((_QWORD *)a2 + 1) = v196;
            v143 |= (unint64_t)(v197 & 0x7F) << v194;
            if (v197 < 0)
            {
              v194 += 7;
              v138 = v196;
              v14 = v195++ > 8;
              if (v14)
                goto LABEL_240;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v143) = 0;
          }
          break;
        }
LABEL_294:
        *((_DWORD *)this + 24) = v143;
        goto LABEL_20;
      case 0x1Bu:
        *((_DWORD *)this + 29) |= 0x2000u;
        v146 = *((_QWORD *)a2 + 1);
        v147 = *((_QWORD *)a2 + 2);
        v148 = *(_QWORD *)a2;
        if (v146 <= 0xFFFFFFFFFFFFFFF5 && v146 + 10 <= v147)
        {
          v149 = 0;
          v150 = 0;
          v151 = 0;
          do
          {
            v152 = v146 + 1;
            *((_QWORD *)a2 + 1) = v146 + 1;
            v153 = *(_BYTE *)(v148 + v146);
            v151 |= (unint64_t)(v153 & 0x7F) << v149;
            if ((v153 & 0x80) == 0)
              goto LABEL_298;
            v149 += 7;
            v146 = v152;
            v14 = v150++ > 8;
          }
          while (!v14);
LABEL_247:
          LODWORD(v151) = 0;
          goto LABEL_298;
        }
        v198 = 0;
        v199 = 0;
        v151 = 0;
        if (v147 <= v146)
          v147 = *((_QWORD *)a2 + 1);
        break;
      default:
        goto LABEL_19;
    }
    while (1)
    {
      if (v147 == v146)
      {
        LODWORD(v151) = 0;
        *((_BYTE *)a2 + 24) = 1;
        goto LABEL_298;
      }
      v200 = v146 + 1;
      v201 = *(_BYTE *)(v148 + v146);
      *((_QWORD *)a2 + 1) = v200;
      v151 |= (unint64_t)(v201 & 0x7F) << v198;
      if ((v201 & 0x80) == 0)
        break;
      v198 += 7;
      v146 = v200;
      v14 = v199++ > 8;
      if (v14)
        goto LABEL_247;
    }
    if (*((_BYTE *)a2 + 24))
      LODWORD(v151) = 0;
LABEL_298:
    *((_DWORD *)this + 20) = v151;
LABEL_20:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::MotionActivity::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 116);
  if ((v4 & 0x10000) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_DWORD *)(v3 + 116);
    if ((v4 & 0x200) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_31;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0)
      goto LABEL_5;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x100000) == 0)
      goto LABEL_6;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x100000) == 0)
  {
LABEL_6:
    if ((v4 & 0x8000) == 0)
      goto LABEL_7;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x8000) == 0)
  {
LABEL_7:
    if ((v4 & 4) == 0)
      goto LABEL_8;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 0x200000) == 0)
      goto LABEL_9;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x200000) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 1) == 0)
      goto LABEL_11;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 1) == 0)
  {
LABEL_11:
    if ((v4 & 2) == 0)
      goto LABEL_12;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 2) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x1000) == 0)
  {
LABEL_13:
    if ((v4 & 0x800) == 0)
      goto LABEL_14;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x800) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_15;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_16;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x400000) == 0)
      goto LABEL_17;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x400000) == 0)
  {
LABEL_17:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_18;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x800000) == 0)
      goto LABEL_19;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x800000) == 0)
  {
LABEL_19:
    if ((v4 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x40000) == 0)
  {
LABEL_20:
    if ((v4 & 0x80) == 0)
      goto LABEL_21;
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x80) == 0)
  {
LABEL_21:
    if ((v4 & 0x40) == 0)
      goto LABEL_22;
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x40) == 0)
  {
LABEL_22:
    if ((v4 & 0x4000) == 0)
      goto LABEL_23;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x4000) == 0)
  {
LABEL_23:
    if ((v4 & 0x80000) == 0)
      goto LABEL_24;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(float *)(v3 + 84));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x80000) == 0)
  {
LABEL_24:
    if ((v4 & 8) == 0)
      goto LABEL_25;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 8) == 0)
  {
LABEL_25:
    if ((v4 & 0x10) == 0)
      goto LABEL_26;
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x10) == 0)
  {
LABEL_26:
    if ((v4 & 0x20000) == 0)
      goto LABEL_27;
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x20000) == 0)
  {
LABEL_27:
    if ((v4 & 0x2000) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_54:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_DWORD *)(v3 + 116) & 0x2000) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::MotionActivity::hash_value(CMMsl::MotionActivity *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = *((_DWORD *)this + 29);
  if ((v1 & 0x10000) != 0)
  {
    v2 = *((unsigned int *)this + 23);
    if ((v1 & 0x200) != 0)
    {
LABEL_3:
      v3 = *((unsigned int *)this + 16);
      if ((v1 & 0x20) != 0)
        goto LABEL_4;
      goto LABEL_47;
    }
  }
  else
  {
    v2 = 0;
    if ((v1 & 0x200) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_4:
    v4 = *((unsigned int *)this + 12);
    if ((v1 & 0x400) != 0)
      goto LABEL_5;
    goto LABEL_48;
  }
LABEL_47:
  v4 = 0;
  if ((v1 & 0x400) != 0)
  {
LABEL_5:
    v5 = *((unsigned int *)this + 17);
    if ((v1 & 0x100000) != 0)
      goto LABEL_6;
    goto LABEL_49;
  }
LABEL_48:
  v5 = 0;
  if ((v1 & 0x100000) != 0)
  {
LABEL_6:
    v6 = *((unsigned __int8 *)this + 108);
    if ((v1 & 0x8000) != 0)
      goto LABEL_7;
LABEL_50:
    v8 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_10;
LABEL_51:
    v9 = 0.0;
    if ((v1 & 0x200000) != 0)
      goto LABEL_13;
    goto LABEL_52;
  }
LABEL_49:
  v6 = 0;
  if ((v1 & 0x8000) == 0)
    goto LABEL_50;
LABEL_7:
  v7 = *((float *)this + 22);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 4) == 0)
    goto LABEL_51;
LABEL_10:
  v9 = *((double *)this + 3);
  if (v9 == 0.0)
    v9 = 0.0;
  if ((v1 & 0x200000) != 0)
  {
LABEL_13:
    v10 = *((unsigned __int8 *)this + 109);
    if ((v1 & 0x100) != 0)
      goto LABEL_14;
    goto LABEL_53;
  }
LABEL_52:
  v10 = 0;
  if ((v1 & 0x100) != 0)
  {
LABEL_14:
    v11 = *((unsigned int *)this + 15);
    if ((v1 & 1) != 0)
      goto LABEL_15;
LABEL_54:
    v12 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_18;
LABEL_55:
    v13 = 0.0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_21;
    goto LABEL_56;
  }
LABEL_53:
  v11 = 0;
  if ((v1 & 1) == 0)
    goto LABEL_54;
LABEL_15:
  v12 = *((double *)this + 1);
  if (v12 == 0.0)
    v12 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_55;
LABEL_18:
  v13 = *((double *)this + 2);
  if (v13 == 0.0)
    v13 = 0.0;
  if ((v1 & 0x1000) != 0)
  {
LABEL_21:
    v14 = *((unsigned int *)this + 19);
    if ((v1 & 0x800) != 0)
      goto LABEL_22;
    goto LABEL_57;
  }
LABEL_56:
  v14 = 0;
  if ((v1 & 0x800) != 0)
  {
LABEL_22:
    v15 = *((unsigned int *)this + 18);
    if ((v1 & 0x2000000) != 0)
      goto LABEL_23;
    goto LABEL_58;
  }
LABEL_57:
  v15 = 0;
  if ((v1 & 0x2000000) != 0)
  {
LABEL_23:
    v16 = *((unsigned __int8 *)this + 113);
    if ((v1 & 0x1000000) != 0)
      goto LABEL_24;
    goto LABEL_59;
  }
LABEL_58:
  v16 = 0;
  if ((v1 & 0x1000000) != 0)
  {
LABEL_24:
    v17 = *((unsigned __int8 *)this + 112);
    if ((v1 & 0x400000) != 0)
      goto LABEL_25;
    goto LABEL_60;
  }
LABEL_59:
  v17 = 0;
  if ((v1 & 0x400000) != 0)
  {
LABEL_25:
    v18 = *((unsigned __int8 *)this + 110);
    if ((v1 & 0x4000000) != 0)
      goto LABEL_26;
    goto LABEL_61;
  }
LABEL_60:
  v18 = 0;
  if ((v1 & 0x4000000) != 0)
  {
LABEL_26:
    v19 = *((unsigned __int8 *)this + 114);
    if ((v1 & 0x800000) != 0)
      goto LABEL_27;
    goto LABEL_62;
  }
LABEL_61:
  v19 = 0;
  if ((v1 & 0x800000) != 0)
  {
LABEL_27:
    v20 = *((unsigned __int8 *)this + 111);
    if ((v1 & 0x40000) != 0)
      goto LABEL_28;
    goto LABEL_63;
  }
LABEL_62:
  v20 = 0;
  if ((v1 & 0x40000) != 0)
  {
LABEL_28:
    v21 = *((unsigned int *)this + 25);
    if ((v1 & 0x80) != 0)
      goto LABEL_29;
LABEL_64:
    v23 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_32;
LABEL_65:
    v25 = 0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_35;
LABEL_66:
    v27 = 0;
    if ((v1 & 0x80000) != 0)
      goto LABEL_38;
    goto LABEL_67;
  }
LABEL_63:
  v21 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_64;
LABEL_29:
  v22 = *((float *)this + 14);
  v23 = LODWORD(v22);
  if (v22 == 0.0)
    v23 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_65;
LABEL_32:
  v24 = *((float *)this + 13);
  v25 = LODWORD(v24);
  if (v24 == 0.0)
    v25 = 0;
  if ((v1 & 0x4000) == 0)
    goto LABEL_66;
LABEL_35:
  v26 = *((float *)this + 21);
  v27 = LODWORD(v26);
  if (v26 == 0.0)
    v27 = 0;
  if ((v1 & 0x80000) != 0)
  {
LABEL_38:
    v28 = *((unsigned int *)this + 26);
    if ((v1 & 8) != 0)
      goto LABEL_39;
LABEL_68:
    v29 = 0.0;
    if ((v1 & 0x10) != 0)
      goto LABEL_42;
    goto LABEL_69;
  }
LABEL_67:
  v28 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_68;
LABEL_39:
  v29 = *((double *)this + 4);
  if (v29 == 0.0)
    v29 = 0.0;
  if ((v1 & 0x10) != 0)
  {
LABEL_42:
    v30 = *((_QWORD *)this + 5);
    if ((v1 & 0x20000) != 0)
      goto LABEL_43;
LABEL_70:
    v31 = 0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_44;
LABEL_71:
    v32 = 0;
    return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v8 ^ *(_QWORD *)&v9 ^ v10 ^ v11 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v23 ^ v25 ^ v27 ^ v28 ^ *(_QWORD *)&v29 ^ v30 ^ v31 ^ v32;
  }
LABEL_69:
  v30 = 0;
  if ((v1 & 0x20000) == 0)
    goto LABEL_70;
LABEL_43:
  v31 = *((unsigned int *)this + 24);
  if ((v1 & 0x2000) == 0)
    goto LABEL_71;
LABEL_44:
  v32 = *((unsigned int *)this + 20);
  return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v8 ^ *(_QWORD *)&v9 ^ v10 ^ v11 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v23 ^ v25 ^ v27 ^ v28 ^ *(_QWORD *)&v29 ^ v30 ^ v31 ^ v32;
}

void CMMsl::MotionActivityReplay::~MotionActivityReplay(CMMsl::MotionActivityReplay *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::MotionActivityReplay::MotionActivityReplay(uint64_t this, const CMMsl::MotionActivityReplay *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  int v5;
  int v6;
  char v7;
  char v8;
  char v9;
  char v10;
  int v11;
  int v12;

  *(_QWORD *)this = &off_25135F3F8;
  *(_DWORD *)(this + 36) = 0;
  v2 = *((_WORD *)a2 + 18);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_WORD *)(this + 36) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_WORD *)a2 + 18);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 7);
    v3 |= 0x10u;
    *(_WORD *)(this + 36) = v3;
    *(_DWORD *)(this + 28) = v5;
    v2 = *((_WORD *)a2 + 18);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    v6 = *((_DWORD *)a2 + 6);
    v3 |= 8u;
    *(_WORD *)(this + 36) = v3;
    *(_DWORD *)(this + 24) = v6;
    v2 = *((_WORD *)a2 + 18);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 0x100) == 0)
        goto LABEL_9;
      goto LABEL_16;
    }
  }
  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_BYTE *)a2 + 34);
  v3 |= 0x80u;
  *(_WORD *)(this + 36) = v3;
  *(_BYTE *)(this + 34) = v7;
  v2 = *((_WORD *)a2 + 18);
  if ((v2 & 0x100) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_17;
  }
LABEL_16:
  v8 = *((_BYTE *)a2 + 35);
  v3 |= 0x100u;
  *(_WORD *)(this + 36) = v3;
  *(_BYTE *)(this + 35) = v8;
  v2 = *((_WORD *)a2 + 18);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_18;
  }
LABEL_17:
  v9 = *((_BYTE *)a2 + 32);
  v3 |= 0x20u;
  *(_WORD *)(this + 36) = v3;
  *(_BYTE *)(this + 32) = v9;
  v2 = *((_WORD *)a2 + 18);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 2) == 0)
      goto LABEL_12;
    goto LABEL_19;
  }
LABEL_18:
  v10 = *((_BYTE *)a2 + 33);
  v3 |= 0x40u;
  *(_WORD *)(this + 36) = v3;
  *(_BYTE *)(this + 33) = v10;
  v2 = *((_WORD *)a2 + 18);
  if ((v2 & 2) == 0)
  {
LABEL_12:
    if ((v2 & 4) == 0)
      return this;
LABEL_20:
    v12 = *((_DWORD *)a2 + 5);
    *(_WORD *)(this + 36) = v3 | 4;
    *(_DWORD *)(this + 20) = v12;
    return this;
  }
LABEL_19:
  v11 = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *(_WORD *)(this + 36) = v3;
  *(_DWORD *)(this + 16) = v11;
  if ((*((_WORD *)a2 + 18) & 4) != 0)
    goto LABEL_20;
  return this;
}

uint64_t CMMsl::MotionActivityReplay::operator=(uint64_t a1, const CMMsl::MotionActivityReplay *a2)
{
  int v3;
  uint64_t v4;
  int v5;
  __int128 v6;
  _BYTE v8[8];
  uint64_t v9;
  __int128 v10;
  int v11;
  int v12;

  if ((const CMMsl::MotionActivityReplay *)a1 != a2)
  {
    CMMsl::MotionActivityReplay::MotionActivityReplay((uint64_t)v8, a2);
    v3 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v12;
    v12 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    v9 = v4;
    v5 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v11;
    v11 = v5;
    v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v10;
    v10 = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::MotionActivityReplay *a2, CMMsl::MotionActivityReplay *a3)
{
  int v3;
  double result;
  int v5;
  int v6;
  int v7;
  int v8;

  v3 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  v5 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v5;
  v6 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 34);
  *((_BYTE *)this + 34) = *((_BYTE *)a2 + 34);
  *((_BYTE *)a2 + 34) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 35);
  *((_BYTE *)this + 35) = *((_BYTE *)a2 + 35);
  *((_BYTE *)a2 + 35) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 32);
  *((_BYTE *)this + 32) = *((_BYTE *)a2 + 32);
  *((_BYTE *)a2 + 32) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 33);
  *((_BYTE *)this + 33) = *((_BYTE *)a2 + 33);
  *((_BYTE *)a2 + 33) = v6;
  v7 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v7;
  v8 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v8;
  return result;
}

double CMMsl::MotionActivityReplay::MotionActivityReplay(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135F3F8;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(_BYTE *)(a1 + 35) = *(_BYTE *)(a2 + 35);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135F3F8;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(_BYTE *)(a1 + 35) = *(_BYTE *)(a2 + 35);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return result;
}

uint64_t CMMsl::MotionActivityReplay::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  __int128 v7;
  __int128 v8;
  _QWORD v10[2];
  __int128 v11;
  int v12;
  int v13;

  if (a1 != a2)
  {
    v10[0] = &off_25135F3F8;
    v3 = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a2 + 36) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v13 = *(_DWORD *)(a1 + 36);
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v10[1] = v5;
    v6 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    v12 = v6;
    v7 = *(_OWORD *)(a1 + 16);
    v8 = *(_OWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 36) = v3;
    *(_OWORD *)(a1 + 16) = v8;
    v11 = v7;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::MotionActivityReplay::formatText(CMMsl::MotionActivityReplay *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 18);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "iostime", *((double *)this + 1));
    v5 = *((_WORD *)this + 18);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "outdoorCyclingStateMachineFrom");
  v5 = *((_WORD *)this + 18);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "outdoorCyclingStateMachineTo");
  v5 = *((_WORD *)this + 18);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "workoutLocationType");
  v5 = *((_WORD *)this + 18);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "workoutPause");
  v5 = *((_WORD *)this + 18);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "workoutResume");
  v5 = *((_WORD *)this + 18);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
LABEL_19:
    PB::TextFormatter::format(a2, "workoutStop");
    if ((*((_WORD *)this + 18) & 0x10) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_10;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "workoutStart");
  v5 = *((_WORD *)this + 18);
  if ((v5 & 0x100) != 0)
    goto LABEL_19;
LABEL_9:
  if ((v5 & 0x10) != 0)
LABEL_10:
    PB::TextFormatter::format(a2, "workoutType");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MotionActivityReplay::readFrom(CMMsl::MotionActivityReplay *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  int v33;
  BOOL v34;
  int v35;
  BOOL v36;
  int v37;
  BOOL v38;
  int v39;
  BOOL v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;
  char v61;
  unsigned int v62;
  unint64_t v63;
  char v64;
  char v65;
  unsigned int v66;
  unint64_t v67;
  char v68;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_26;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_21;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_26:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 18) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 2u:
        *((_WORD *)this + 18) |= 0x10u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v53 = 0;
          v54 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_108;
            }
            v55 = v21++;
            v56 = *(_BYTE *)(v22 + v55);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v56 & 0x7F) << v53;
            if ((v56 & 0x80) == 0)
              break;
            v53 += 7;
            v14 = v54++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
LABEL_107:
              v2 = v55 + 1;
              goto LABEL_108;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v25) = 0;
          goto LABEL_107;
        }
        v23 = 0;
        v24 = 0;
        v25 = 0;
        do
        {
          v2 = v21 + 1;
          *((_QWORD *)a2 + 1) = v21 + 1;
          v26 = *(_BYTE *)(v22 + v21);
          v25 |= (unint64_t)(v26 & 0x7F) << v23;
          if ((v26 & 0x80) == 0)
            goto LABEL_108;
          v23 += 7;
          v21 = v2;
          v14 = v24++ > 8;
        }
        while (!v14);
        LODWORD(v25) = 0;
LABEL_108:
        *((_DWORD *)this + 7) = v25;
        break;
      case 3u:
        *((_WORD *)this + 18) |= 8u;
        v27 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v28 = *(_QWORD *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v57 = 0;
          v58 = 0;
          v31 = 0;
          if (v2 <= v27)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_113;
            }
            v59 = v27++;
            v60 = *(_BYTE *)(v28 + v59);
            *((_QWORD *)a2 + 1) = v27;
            v31 |= (unint64_t)(v60 & 0x7F) << v57;
            if ((v60 & 0x80) == 0)
              break;
            v57 += 7;
            v14 = v58++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
LABEL_112:
              v2 = v59 + 1;
              goto LABEL_113;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v31) = 0;
          goto LABEL_112;
        }
        v29 = 0;
        v30 = 0;
        v31 = 0;
        do
        {
          v2 = v27 + 1;
          *((_QWORD *)a2 + 1) = v27 + 1;
          v32 = *(_BYTE *)(v28 + v27);
          v31 |= (unint64_t)(v32 & 0x7F) << v29;
          if ((v32 & 0x80) == 0)
            goto LABEL_113;
          v29 += 7;
          v27 = v2;
          v14 = v30++ > 8;
        }
        while (!v14);
        LODWORD(v31) = 0;
LABEL_113:
        *((_DWORD *)this + 6) = v31;
        break;
      case 0xAu:
        *((_WORD *)this + 18) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v34 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v33 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v34 = v33 != 0;
        }
        *((_BYTE *)this + 34) = v34;
        break;
      case 0xBu:
        *((_WORD *)this + 18) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v36 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v35 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v36 = v35 != 0;
        }
        *((_BYTE *)this + 35) = v36;
        break;
      case 0xCu:
        *((_WORD *)this + 18) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v38 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v37 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v38 = v37 != 0;
        }
        *((_BYTE *)this + 32) = v38;
        break;
      case 0xDu:
        *((_WORD *)this + 18) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v40 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v39 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v40 = v39 != 0;
        }
        *((_BYTE *)this + 33) = v40;
        break;
      case 0x15u:
        *((_WORD *)this + 18) |= 2u;
        v41 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v42 = *(_QWORD *)a2;
        if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
        {
          v61 = 0;
          v62 = 0;
          v45 = 0;
          if (v2 <= v41)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v41)
            {
              LODWORD(v45) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_118;
            }
            v63 = v41++;
            v64 = *(_BYTE *)(v42 + v63);
            *((_QWORD *)a2 + 1) = v41;
            v45 |= (unint64_t)(v64 & 0x7F) << v61;
            if ((v64 & 0x80) == 0)
              break;
            v61 += 7;
            v14 = v62++ > 8;
            if (v14)
            {
              LODWORD(v45) = 0;
LABEL_117:
              v2 = v63 + 1;
              goto LABEL_118;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v45) = 0;
          goto LABEL_117;
        }
        v43 = 0;
        v44 = 0;
        v45 = 0;
        do
        {
          v2 = v41 + 1;
          *((_QWORD *)a2 + 1) = v41 + 1;
          v46 = *(_BYTE *)(v42 + v41);
          v45 |= (unint64_t)(v46 & 0x7F) << v43;
          if ((v46 & 0x80) == 0)
            goto LABEL_118;
          v43 += 7;
          v41 = v2;
          v14 = v44++ > 8;
        }
        while (!v14);
        LODWORD(v45) = 0;
LABEL_118:
        *((_DWORD *)this + 4) = v45;
        break;
      case 0x16u:
        *((_WORD *)this + 18) |= 4u;
        v47 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v48 = *(_QWORD *)a2;
        if (v47 > 0xFFFFFFFFFFFFFFF5 || v47 + 10 > v2)
        {
          v65 = 0;
          v66 = 0;
          v51 = 0;
          if (v2 <= v47)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v47)
            {
              LODWORD(v51) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_123;
            }
            v67 = v47++;
            v68 = *(_BYTE *)(v48 + v67);
            *((_QWORD *)a2 + 1) = v47;
            v51 |= (unint64_t)(v68 & 0x7F) << v65;
            if ((v68 & 0x80) == 0)
              break;
            v65 += 7;
            v14 = v66++ > 8;
            if (v14)
            {
              LODWORD(v51) = 0;
LABEL_122:
              v2 = v67 + 1;
              goto LABEL_123;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v51) = 0;
          goto LABEL_122;
        }
        v49 = 0;
        v50 = 0;
        v51 = 0;
        do
        {
          v2 = v47 + 1;
          *((_QWORD *)a2 + 1) = v47 + 1;
          v52 = *(_BYTE *)(v48 + v47);
          v51 |= (unint64_t)(v52 & 0x7F) << v49;
          if ((v52 & 0x80) == 0)
            goto LABEL_123;
          v49 += 7;
          v47 = v2;
          v14 = v50++ > 8;
        }
        while (!v14);
        LODWORD(v51) = 0;
LABEL_123:
        *((_DWORD *)this + 5) = v51;
        break;
      default:
        goto LABEL_19;
    }
LABEL_21:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::MotionActivityReplay::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 36);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_WORD *)(v3 + 36);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 36);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 36);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2);
  v4 = *(_WORD *)(v3 + 36);
  if ((v4 & 0x100) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2);
  v4 = *(_WORD *)(v3 + 36);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2);
  v4 = *(_WORD *)(v3 + 36);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 2) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2);
  v4 = *(_WORD *)(v3 + 36);
  if ((v4 & 2) == 0)
  {
LABEL_9:
    if ((v4 & 4) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_18:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_WORD *)(v3 + 36) & 4) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::MotionActivityReplay::hash_value(CMMsl::MotionActivityReplay *this)
{
  __int16 v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *((_WORD *)this + 18);
  if ((v1 & 1) != 0)
  {
    v2 = *((double *)this + 1);
    if (v2 == 0.0)
      v2 = 0.0;
    if ((v1 & 0x10) != 0)
    {
LABEL_3:
      v3 = *((int *)this + 7);
      if ((v1 & 8) != 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else
  {
    v2 = 0.0;
    if ((v1 & 0x10) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_4:
    v4 = *((int *)this + 6);
    if ((v1 & 0x80) != 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  v4 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_5:
    v5 = *((unsigned __int8 *)this + 34);
    if ((*((_WORD *)this + 18) & 0x100) != 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  v5 = 0;
  if ((*((_WORD *)this + 18) & 0x100) != 0)
  {
LABEL_6:
    v6 = *((unsigned __int8 *)this + 35);
    if ((v1 & 0x20) != 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  v6 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_7:
    v7 = *((unsigned __int8 *)this + 32);
    if ((v1 & 0x40) != 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  v7 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_8:
    v8 = *((unsigned __int8 *)this + 33);
    if ((v1 & 2) != 0)
      goto LABEL_9;
LABEL_20:
    v9 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_10;
LABEL_21:
    v10 = 0;
    return v3 ^ *(_QWORD *)&v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10;
  }
LABEL_19:
  v8 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_20;
LABEL_9:
  v9 = *((int *)this + 4);
  if ((v1 & 4) == 0)
    goto LABEL_21;
LABEL_10:
  v10 = *((int *)this + 5);
  return v3 ^ *(_QWORD *)&v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10;
}

void CMMsl::MotionContextActivity::~MotionContextActivity(CMMsl::MotionContextActivity *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135F430;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135F430;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135F430;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::MotionContextActivity *CMMsl::MotionContextActivity::MotionContextActivity(CMMsl::MotionContextActivity *this, const CMMsl::MotionContextActivity *a2)
{
  char v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)this = &off_25135F430;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 3) = 0;
  if ((*((_BYTE *)a2 + 28) & 2) != 0)
  {
    v5 = *((_DWORD *)a2 + 6);
    *((_BYTE *)this + 28) = 2;
    *((_DWORD *)this + 6) = v5;
    v4 = 3;
    if ((*((_BYTE *)a2 + 28) & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v4 = 1;
  if ((*((_BYTE *)a2 + 28) & 1) != 0)
  {
LABEL_5:
    v6 = *((_QWORD *)a2 + 2);
    *((_BYTE *)this + 28) = v4;
    *((_QWORD *)this + 2) = v6;
  }
LABEL_6:
  if (!*((_QWORD *)a2 + 1))
    return this;
  v7 = operator new();
  v8 = *((_QWORD *)a2 + 1);
  *(_QWORD *)v7 = &off_25135FAF8;
  *(_DWORD *)(v7 + 20) = 0;
  v9 = *(_BYTE *)(v8 + 20);
  if ((v9 & 2) != 0)
  {
    v11 = *(_DWORD *)(v8 + 16);
    *(_BYTE *)(v7 + 20) = 2;
    *(_DWORD *)(v7 + 16) = v11;
    v10 = 3;
    if ((v9 & 1) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
  v10 = 1;
  if ((*(_BYTE *)(v8 + 20) & 1) != 0)
  {
LABEL_11:
    v12 = *(_QWORD *)(v8 + 8);
    *(_BYTE *)(v7 + 20) = v10;
    *(_QWORD *)(v7 + 8) = v12;
  }
LABEL_12:
  v13 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v7;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return this;
}

const CMMsl::MotionContextActivity *CMMsl::MotionContextActivity::operator=(const CMMsl::MotionContextActivity *a1, const CMMsl::MotionContextActivity *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (**v8)(CMMsl::MotionContextActivity *__hidden);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    CMMsl::MotionContextActivity::MotionContextActivity((CMMsl::MotionContextActivity *)&v8, a2);
    v4 = *((_QWORD *)a1 + 2);
    v3 = *((_QWORD *)a1 + 3);
    v5 = v11;
    *((_QWORD *)a1 + 2) = v10;
    *((_QWORD *)a1 + 3) = v5;
    v10 = v4;
    v11 = v3;
    v6 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v9;
    v8 = &off_25135F430;
    v9 = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::MotionContextActivity *a2, CMMsl::MotionContextActivity *a3)
{
  int v3;
  int v4;
  double result;
  uint64_t v6;

  v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  v4 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  return result;
}

uint64_t CMMsl::MotionContextActivity::MotionContextActivity(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_25135F430;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

_QWORD *CMMsl::MotionContextActivity::operator=(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];

  if (a1 != (_QWORD *)a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a2 + 16);
    v5 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 28) = 0;
    v7 = a1[2];
    v6 = a1[3];
    a1[2] = v4;
    a1[3] = v5;
    v10[2] = v7;
    v10[3] = v6;
    v8 = a1[1];
    a1[1] = v3;
    v10[0] = &off_25135F430;
    v10[1] = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::MotionContextActivity::formatText(CMMsl::MotionContextActivity *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  char v6;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "impulse");
  v6 = *((_BYTE *)this + 28);
  if ((v6 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "state");
    v6 = *((_BYTE *)this + 28);
  }
  if ((v6 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MotionContextActivity::readFrom(CMMsl::MotionContextActivity *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  _DWORD *v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_25:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v21 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        v30 = (_DWORD *)operator new();
        *(_QWORD *)v30 = &off_25135FAF8;
        v30[5] = 0;
        v31 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v30;
        if (v31)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
          v30 = (_DWORD *)*((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v30 + 16))(v30, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else if ((_DWORD)v21 == 2)
      {
        *((_BYTE *)this + 28) |= 1u;
        v32 = *((_QWORD *)a2 + 1);
        if (v32 <= 0xFFFFFFFFFFFFFFF7 && v32 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v32);
          *((_QWORD *)a2 + 1) += 8;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else if ((_DWORD)v21 == 1)
      {
        *((_BYTE *)this + 28) |= 2u;
        v22 = *((_QWORD *)a2 + 1);
        v23 = *((_QWORD *)a2 + 2);
        v24 = *(_QWORD *)a2;
        if (v22 > 0xFFFFFFFFFFFFFFF5 || v22 + 10 > v23)
        {
          v33 = 0;
          v34 = 0;
          v27 = 0;
          if (v23 <= v22)
            v23 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v23 == v22)
            {
              LODWORD(v27) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_55;
            }
            v35 = v22 + 1;
            v36 = *(_BYTE *)(v24 + v22);
            *((_QWORD *)a2 + 1) = v35;
            v27 |= (unint64_t)(v36 & 0x7F) << v33;
            if ((v36 & 0x80) == 0)
              break;
            v33 += 7;
            v22 = v35;
            v14 = v34++ > 8;
            if (v14)
            {
LABEL_50:
              LODWORD(v27) = 0;
              goto LABEL_55;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v27) = 0;
        }
        else
        {
          v25 = 0;
          v26 = 0;
          v27 = 0;
          while (1)
          {
            v28 = v22 + 1;
            *((_QWORD *)a2 + 1) = v22 + 1;
            v29 = *(_BYTE *)(v24 + v22);
            v27 |= (unint64_t)(v29 & 0x7F) << v25;
            if ((v29 & 0x80) == 0)
              break;
            v25 += 7;
            v22 = v28;
            v14 = v26++ > 8;
            if (v14)
              goto LABEL_50;
          }
        }
LABEL_55:
        *((_DWORD *)this + 6) = v27;
      }
      else
      {
LABEL_19:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_25;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_19;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::MotionContextActivity::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  const PB::Base *v5;

  v3 = this;
  v4 = *(_BYTE *)(this + 28);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 28);
  }
  if ((v4 & 1) != 0)
    this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v5 = *(const PB::Base **)(v3 + 8);
  if (v5)
    return PB::Writer::writeSubmessage(a2, v5);
  return this;
}

uint64_t CMMsl::MotionContextActivity::hash_value(CMMsl::MotionContextActivity *this)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  if ((*((_BYTE *)this + 28) & 2) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 28) & 1) != 0)
      goto LABEL_3;
LABEL_7:
    v2 = 0.0;
    goto LABEL_8;
  }
  v1 = *((int *)this + 6);
  if ((*((_BYTE *)this + 28) & 1) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((double *)this + 2);
  if (v2 == 0.0)
    v2 = 0.0;
LABEL_8:
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    v4 = *(int *)(v3 + 16);
    if ((*(_BYTE *)(v3 + 20) & 2) == 0)
      v4 = 0;
    v5 = *(double *)(v3 + 8) == 0.0 || (*(_BYTE *)(v3 + 20) & 1) == 0;
    v6 = *(_QWORD *)(v3 + 8);
    if (v5)
      v6 = 0;
    v3 = v6 ^ v4;
  }
  return *(_QWORD *)&v2 ^ v1 ^ v3;
}

_QWORD *CMMsl::MotionContextActivity::makeImpulse(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135FAF8;
    *(_DWORD *)(v2 + 20) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void CMMsl::MotionGPSLocation::~MotionGPSLocation(CMMsl::MotionGPSLocation *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_25135F468;
  v2 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_25135F468;
  v2 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_25135F468;
  v2 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::MotionGPSLocation *CMMsl::MotionGPSLocation::MotionGPSLocation(CMMsl::MotionGPSLocation *this, const CMMsl::MotionGPSLocation *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;

  *(_QWORD *)this = &off_25135F468;
  *((_QWORD *)this + 14) = 0;
  *((_DWORD *)this + 45) = 0;
  v4 = *((_DWORD *)a2 + 45);
  if ((v4 & 0x800) != 0)
  {
    v6 = *((_QWORD *)a2 + 12);
    v5 = 2048;
    *((_DWORD *)this + 45) = 2048;
    *((_QWORD *)this + 12) = v6;
    v4 = *((_DWORD *)a2 + 45);
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = 0;
  if ((v4 & 0x40) != 0)
  {
LABEL_5:
    v7 = *((_QWORD *)a2 + 7);
    v5 |= 0x40u;
    *((_DWORD *)this + 45) = v5;
    *((_QWORD *)this + 7) = v7;
    v4 = *((_DWORD *)a2 + 45);
  }
LABEL_6:
  if ((v4 & 0x80) != 0)
  {
    v16 = *((_QWORD *)a2 + 8);
    v5 |= 0x80u;
    *((_DWORD *)this + 45) = v5;
    *((_QWORD *)this + 8) = v16;
    v4 = *((_DWORD *)a2 + 45);
    if ((v4 & 0x200) == 0)
    {
LABEL_8:
      if ((v4 & 0x400) == 0)
        goto LABEL_9;
      goto LABEL_40;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_8;
  }
  v17 = *((_QWORD *)a2 + 10);
  v5 |= 0x200u;
  *((_DWORD *)this + 45) = v5;
  *((_QWORD *)this + 10) = v17;
  v4 = *((_DWORD *)a2 + 45);
  if ((v4 & 0x400) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_41;
  }
LABEL_40:
  v18 = *((_QWORD *)a2 + 11);
  v5 |= 0x400u;
  *((_DWORD *)this + 45) = v5;
  *((_QWORD *)this + 11) = v18;
  v4 = *((_DWORD *)a2 + 45);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 2) == 0)
      goto LABEL_11;
    goto LABEL_42;
  }
LABEL_41:
  v19 = *((_QWORD *)a2 + 6);
  v5 |= 0x20u;
  *((_DWORD *)this + 45) = v5;
  *((_QWORD *)this + 6) = v19;
  v4 = *((_DWORD *)a2 + 45);
  if ((v4 & 2) == 0)
  {
LABEL_11:
    if ((v4 & 4) == 0)
      goto LABEL_12;
    goto LABEL_43;
  }
LABEL_42:
  v20 = *((_QWORD *)a2 + 2);
  v5 |= 2u;
  *((_DWORD *)this + 45) = v5;
  *((_QWORD *)this + 2) = v20;
  v4 = *((_DWORD *)a2 + 45);
  if ((v4 & 4) == 0)
  {
LABEL_12:
    if ((v4 & 1) == 0)
      goto LABEL_13;
    goto LABEL_44;
  }
LABEL_43:
  v21 = *((_QWORD *)a2 + 3);
  v5 |= 4u;
  *((_DWORD *)this + 45) = v5;
  *((_QWORD *)this + 3) = v21;
  v4 = *((_DWORD *)a2 + 45);
  if ((v4 & 1) == 0)
  {
LABEL_13:
    if ((v4 & 0x2000) == 0)
      goto LABEL_14;
    goto LABEL_45;
  }
LABEL_44:
  v22 = *((_QWORD *)a2 + 1);
  v5 |= 1u;
  *((_DWORD *)this + 45) = v5;
  *((_QWORD *)this + 1) = v22;
  v4 = *((_DWORD *)a2 + 45);
  if ((v4 & 0x2000) == 0)
  {
LABEL_14:
    if ((v4 & 0x800000) == 0)
      goto LABEL_15;
    goto LABEL_46;
  }
LABEL_45:
  v23 = *((_QWORD *)a2 + 15);
  v5 |= 0x2000u;
  *((_DWORD *)this + 45) = v5;
  *((_QWORD *)this + 15) = v23;
  v4 = *((_DWORD *)a2 + 45);
  if ((v4 & 0x800000) == 0)
  {
LABEL_15:
    if ((v4 & 0x1000) == 0)
      goto LABEL_16;
    goto LABEL_47;
  }
LABEL_46:
  v24 = *((_DWORD *)a2 + 41);
  v5 |= 0x800000u;
  *((_DWORD *)this + 45) = v5;
  *((_DWORD *)this + 41) = v24;
  v4 = *((_DWORD *)a2 + 45);
  if ((v4 & 0x1000) == 0)
  {
LABEL_16:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_17;
    goto LABEL_48;
  }
LABEL_47:
  v25 = *((_QWORD *)a2 + 13);
  v5 |= 0x1000u;
  *((_DWORD *)this + 45) = v5;
  *((_QWORD *)this + 13) = v25;
  v4 = *((_DWORD *)a2 + 45);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_18;
    goto LABEL_49;
  }
LABEL_48:
  v26 = *((_DWORD *)a2 + 42);
  v5 |= 0x1000000u;
  *((_DWORD *)this + 45) = v5;
  *((_DWORD *)this + 42) = v26;
  v4 = *((_DWORD *)a2 + 45);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_50;
  }
LABEL_49:
  v27 = *((_DWORD *)a2 + 43);
  v5 |= 0x2000000u;
  *((_DWORD *)this + 45) = v5;
  *((_DWORD *)this + 43) = v27;
  v4 = *((_DWORD *)a2 + 45);
  if ((v4 & 0x20000) == 0)
  {
LABEL_19:
    if ((v4 & 0x80000) == 0)
      goto LABEL_20;
    goto LABEL_51;
  }
LABEL_50:
  v28 = *((_DWORD *)a2 + 35);
  v5 |= 0x20000u;
  *((_DWORD *)this + 45) = v5;
  *((_DWORD *)this + 35) = v28;
  v4 = *((_DWORD *)a2 + 45);
  if ((v4 & 0x80000) == 0)
  {
LABEL_20:
    if ((v4 & 0x40000) == 0)
      goto LABEL_21;
    goto LABEL_52;
  }
LABEL_51:
  v29 = *((_DWORD *)a2 + 37);
  v5 |= 0x80000u;
  *((_DWORD *)this + 45) = v5;
  *((_DWORD *)this + 37) = v29;
  v4 = *((_DWORD *)a2 + 45);
  if ((v4 & 0x40000) == 0)
  {
LABEL_21:
    if ((v4 & 0x100) == 0)
      goto LABEL_22;
    goto LABEL_53;
  }
LABEL_52:
  v30 = *((_DWORD *)a2 + 36);
  v5 |= 0x40000u;
  *((_DWORD *)this + 45) = v5;
  *((_DWORD *)this + 36) = v30;
  v4 = *((_DWORD *)a2 + 45);
  if ((v4 & 0x100) == 0)
  {
LABEL_22:
    if ((v4 & 8) == 0)
      goto LABEL_23;
    goto LABEL_54;
  }
LABEL_53:
  v31 = *((_QWORD *)a2 + 9);
  v5 |= 0x100u;
  *((_DWORD *)this + 45) = v5;
  *((_QWORD *)this + 9) = v31;
  v4 = *((_DWORD *)a2 + 45);
  if ((v4 & 8) == 0)
  {
LABEL_23:
    if ((v4 & 0x10) == 0)
      goto LABEL_24;
    goto LABEL_55;
  }
LABEL_54:
  v32 = *((_QWORD *)a2 + 4);
  v5 |= 8u;
  *((_DWORD *)this + 45) = v5;
  *((_QWORD *)this + 4) = v32;
  v4 = *((_DWORD *)a2 + 45);
  if ((v4 & 0x10) == 0)
  {
LABEL_24:
    if ((v4 & 0x200000) == 0)
      goto LABEL_25;
    goto LABEL_56;
  }
LABEL_55:
  v33 = *((_QWORD *)a2 + 5);
  v5 |= 0x10u;
  *((_DWORD *)this + 45) = v5;
  *((_QWORD *)this + 5) = v33;
  v4 = *((_DWORD *)a2 + 45);
  if ((v4 & 0x200000) == 0)
  {
LABEL_25:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_26;
    goto LABEL_57;
  }
LABEL_56:
  v34 = *((_DWORD *)a2 + 39);
  v5 |= 0x200000u;
  *((_DWORD *)this + 45) = v5;
  *((_DWORD *)this + 39) = v34;
  v4 = *((_DWORD *)a2 + 45);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_26:
    if ((v4 & 0x400000) == 0)
      goto LABEL_27;
    goto LABEL_58;
  }
LABEL_57:
  v5 |= 0x4000000u;
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)this + 45) = v5;
  v4 = *((_DWORD *)a2 + 45);
  if ((v4 & 0x400000) == 0)
  {
LABEL_27:
    if ((v4 & 0x10000) == 0)
      goto LABEL_28;
LABEL_59:
    v36 = *((_DWORD *)a2 + 34);
    v5 |= 0x10000u;
    *((_DWORD *)this + 45) = v5;
    *((_DWORD *)this + 34) = v36;
    if ((*((_DWORD *)a2 + 45) & 0x100000) == 0)
      goto LABEL_30;
    goto LABEL_29;
  }
LABEL_58:
  v35 = *((_DWORD *)a2 + 40);
  v5 |= 0x400000u;
  *((_DWORD *)this + 45) = v5;
  *((_DWORD *)this + 40) = v35;
  v4 = *((_DWORD *)a2 + 45);
  if ((v4 & 0x10000) != 0)
    goto LABEL_59;
LABEL_28:
  if ((v4 & 0x100000) != 0)
  {
LABEL_29:
    v8 = *((_DWORD *)a2 + 38);
    *((_DWORD *)this + 45) = v5 | 0x100000;
    *((_DWORD *)this + 38) = v8;
  }
LABEL_30:
  if (*((_QWORD *)a2 + 14))
  {
    v9 = operator new();
    v10 = CMMsl::TrackRunData::TrackRunData(v9, *((const CMMsl::TrackRunData **)a2 + 14));
    v11 = *((_QWORD *)this + 14);
    *((_QWORD *)this + 14) = v10;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = *((_DWORD *)a2 + 45);
  if ((v12 & 0x8000) != 0)
  {
    v13 = *((_DWORD *)a2 + 33);
    *((_DWORD *)this + 45) |= 0x8000u;
    *((_DWORD *)this + 33) = v13;
    v12 = *((_DWORD *)a2 + 45);
  }
  if ((v12 & 0x4000) != 0)
  {
    v14 = *((_DWORD *)a2 + 32);
    *((_DWORD *)this + 45) |= 0x4000u;
    *((_DWORD *)this + 32) = v14;
  }
  return this;
}

CMMsl *CMMsl::MotionGPSLocation::operator=(CMMsl *a1, const CMMsl::MotionGPSLocation *a2)
{
  CMMsl::MotionGPSLocation *v3;
  float v4;
  uint64_t v5;
  _QWORD v7[14];
  uint64_t v8;

  if (a1 != a2)
  {
    CMMsl::MotionGPSLocation::MotionGPSLocation((CMMsl::MotionGPSLocation *)v7, a2);
    v4 = CMMsl::swap(a1, (CMMsl::MotionGPSLocation *)v7, v3);
    v5 = v8;
    v7[0] = &off_25135F468;
    v8 = 0;
    if (v5)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v5 + 8))(v5, v4);
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::MotionGPSLocation *a2, CMMsl::MotionGPSLocation *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  float result;

  v3 = *((_DWORD *)this + 45);
  *((_DWORD *)this + 45) = *((_DWORD *)a2 + 45);
  *((_DWORD *)a2 + 45) = v3;
  v4 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v4;
  v5 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v5;
  v6 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v6;
  v7 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v7;
  v8 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v8;
  v9 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v9;
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v10;
  v11 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v11;
  v12 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v12;
  v13 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v13;
  v14 = *((_DWORD *)this + 41);
  *((_DWORD *)this + 41) = *((_DWORD *)a2 + 41);
  *((_DWORD *)a2 + 41) = v14;
  v15 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v15;
  LODWORD(v15) = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v15;
  v16 = *((_DWORD *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((_DWORD *)a2 + 43) = v16;
  LODWORD(v15) = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v15;
  LODWORD(v15) = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v15;
  LODWORD(v15) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v15;
  v17 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v17;
  v18 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v18;
  v19 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v19;
  v20 = *((_DWORD *)this + 39);
  *((_DWORD *)this + 39) = *((_DWORD *)a2 + 39);
  *((_DWORD *)a2 + 39) = v20;
  v21 = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v21;
  v22 = *((_DWORD *)this + 40);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
  *((_DWORD *)a2 + 40) = v22;
  v23 = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v23;
  v24 = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v24;
  v25 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v25;
  LODWORD(v25) = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v25;
  result = *((float *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((float *)a2 + 32) = result;
  return result;
}

uint64_t CMMsl::MotionGPSLocation::MotionGPSLocation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_25135F468;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a2 + 180) = 0;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  v4 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  v5 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  return a1;
}

CMMsl *CMMsl::MotionGPSLocation::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::MotionGPSLocation *v3;
  float v4;
  uint64_t v5;
  _QWORD v7[14];
  uint64_t v8;

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::MotionGPSLocation::MotionGPSLocation((uint64_t)v7, a2);
    v4 = CMMsl::swap(a1, (CMMsl::MotionGPSLocation *)v7, v3);
    v5 = v8;
    v7[0] = &off_25135F468;
    v8 = 0;
    if (v5)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v5 + 8))(v5, v4);
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

uint64_t CMMsl::MotionGPSLocation::formatText(CMMsl::MotionGPSLocation *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;
  uint64_t v6;
  int v7;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 45);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "altitude", *((double *)this + 1));
    v5 = *((_DWORD *)this + 45);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_35;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "course", *((double *)this + 2));
  v5 = *((_DWORD *)this + 45);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "courseAccuracy", *((double *)this + 3));
  v5 = *((_DWORD *)this + 45);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "deltaDistance", *((double *)this + 4));
  v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x4000) == 0)
      goto LABEL_7;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "deltaDistanceAccuracy", *((double *)this + 5));
  v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x4000) == 0)
  {
LABEL_7:
    if ((v5 & 0x8000) == 0)
      goto LABEL_8;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "demConfidence", *((float *)this + 32));
  v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x8000) == 0)
  {
LABEL_8:
    if ((v5 & 0x10000) == 0)
      goto LABEL_9;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "demNumContiguousFlatPoints");
  v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x10000) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "gnssModesOfOperation");
  v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x20000) == 0)
      goto LABEL_11;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "horizontalAccuracy", *((double *)this + 6));
  v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x20000) == 0)
  {
LABEL_11:
    if ((v5 & 0x40000) == 0)
      goto LABEL_12;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "horzUncSemiMaj", *((float *)this + 35));
  v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x40000) == 0)
  {
LABEL_12:
    if ((v5 & 0x80000) == 0)
      goto LABEL_13;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "horzUncSemiMajAz", *((float *)this + 36));
  v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x80000) == 0)
  {
LABEL_13:
    if ((v5 & 0x40) == 0)
      goto LABEL_14;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "horzUncSemiMin", *((float *)this + 37));
  v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x40) == 0)
  {
LABEL_14:
    if ((v5 & 0x80) == 0)
      goto LABEL_15;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "latitude", *((double *)this + 7));
  v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x80) == 0)
  {
LABEL_15:
    if ((v5 & 0x100000) == 0)
      goto LABEL_16;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "longitude", *((double *)this + 8));
  v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x100000) == 0)
  {
LABEL_16:
    if ((v5 & 0x100) == 0)
      goto LABEL_17;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "notificationType");
  v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x100) == 0)
  {
LABEL_17:
    if ((v5 & 0x200000) == 0)
      goto LABEL_18;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "odometer", *((double *)this + 9));
  v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x200000) == 0)
  {
LABEL_18:
    if ((v5 & 0x400000) == 0)
      goto LABEL_19;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "originDevice");
  v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x400000) == 0)
  {
LABEL_19:
    if ((v5 & 0x200) == 0)
      goto LABEL_20;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "roadClass");
  v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x200) == 0)
  {
LABEL_20:
    if ((v5 & 0x400) == 0)
      goto LABEL_21;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "speed", *((double *)this + 10));
  v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x400) == 0)
  {
LABEL_21:
    if ((v5 & 0x800) == 0)
      goto LABEL_22;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "speedAccuracy", *((double *)this + 11));
  v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x800) == 0)
  {
LABEL_22:
    if ((v5 & 0x1000) == 0)
      goto LABEL_24;
    goto LABEL_23;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 12));
  if ((*((_DWORD *)this + 45) & 0x1000) != 0)
LABEL_23:
    PB::TextFormatter::format(a2, "timestampGps", *((double *)this + 13));
LABEL_24:
  v6 = *((_QWORD *)this + 14);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "trackRunData");
  v7 = *((_DWORD *)this + 45);
  if ((v7 & 0x800000) != 0)
  {
    PB::TextFormatter::format(a2, "type");
    v7 = *((_DWORD *)this + 45);
    if ((v7 & 0x1000000) == 0)
    {
LABEL_28:
      if ((v7 & 0x2000000) == 0)
        goto LABEL_29;
      goto LABEL_57;
    }
  }
  else if ((v7 & 0x1000000) == 0)
  {
    goto LABEL_28;
  }
  PB::TextFormatter::format(a2, "undulation", *((float *)this + 42));
  v7 = *((_DWORD *)this + 45);
  if ((v7 & 0x2000000) == 0)
  {
LABEL_29:
    if ((v7 & 0x2000) == 0)
      goto LABEL_30;
LABEL_58:
    PB::TextFormatter::format(a2, "verticalAccuracy", *((double *)this + 15));
    if ((*((_DWORD *)this + 45) & 0x4000000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_31;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "undulationModel");
  v7 = *((_DWORD *)this + 45);
  if ((v7 & 0x2000) != 0)
    goto LABEL_58;
LABEL_30:
  if ((v7 & 0x4000000) != 0)
LABEL_31:
    PB::TextFormatter::format(a2, "wayForm");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MotionGPSLocation::readFrom(CMMsl::MotionGPSLocation *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char v58;
  unsigned int v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  char v74;
  unsigned int v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char v82;
  unsigned int v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  char v90;
  unsigned int v91;
  uint64_t v92;
  unint64_t v93;
  char v94;
  _DWORD *v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  char v100;
  unsigned int v101;
  uint64_t v102;
  unint64_t v103;
  char v104;
  unint64_t v105;
  char v106;
  unsigned int v107;
  unint64_t v108;
  char v109;
  char v110;
  unsigned int v111;
  unint64_t v112;
  char v113;
  char v114;
  unsigned int v115;
  unint64_t v116;
  char v117;
  char v118;
  unsigned int v119;
  unint64_t v120;
  char v121;
  char v122;
  unsigned int v123;
  unint64_t v124;
  char v125;
  char v126;
  unsigned int v127;
  unint64_t v128;
  char v129;
  char v130;
  unsigned int v131;
  unint64_t v132;
  char v133;
  char v134;
  unsigned int v135;
  unint64_t v136;
  char v137;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_21:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_DWORD *)this + 45) |= 0x800u;
          v20 = *((_QWORD *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_141;
          *((_QWORD *)this + 12) = *(_QWORD *)(*(_QWORD *)a2 + v20);
          goto LABEL_91;
        case 2u:
          *((_DWORD *)this + 45) |= 0x40u;
          v21 = *((_QWORD *)a2 + 1);
          if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_141;
          *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v21);
          goto LABEL_91;
        case 3u:
          *((_DWORD *)this + 45) |= 0x80u;
          v22 = *((_QWORD *)a2 + 1);
          if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_141;
          *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v22);
          goto LABEL_91;
        case 4u:
          *((_DWORD *)this + 45) |= 0x200u;
          v23 = *((_QWORD *)a2 + 1);
          if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_141;
          *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v23);
          goto LABEL_91;
        case 5u:
          *((_DWORD *)this + 45) |= 0x400u;
          v24 = *((_QWORD *)a2 + 1);
          if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_141;
          *((_QWORD *)this + 11) = *(_QWORD *)(*(_QWORD *)a2 + v24);
          goto LABEL_91;
        case 6u:
          *((_DWORD *)this + 45) |= 0x20u;
          v25 = *((_QWORD *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_141;
          *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v25);
          goto LABEL_91;
        case 7u:
          *((_DWORD *)this + 45) |= 2u;
          v26 = *((_QWORD *)a2 + 1);
          if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_141;
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v26);
          goto LABEL_91;
        case 8u:
          *((_DWORD *)this + 45) |= 4u;
          v27 = *((_QWORD *)a2 + 1);
          if (v27 > 0xFFFFFFFFFFFFFFF7 || v27 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_141;
          *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v27);
          goto LABEL_91;
        case 9u:
          *((_DWORD *)this + 45) |= 1u;
          v28 = *((_QWORD *)a2 + 1);
          if (v28 > 0xFFFFFFFFFFFFFFF7 || v28 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_141;
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v28);
          goto LABEL_91;
        case 0xAu:
          *((_DWORD *)this + 45) |= 0x2000u;
          v29 = *((_QWORD *)a2 + 1);
          if (v29 > 0xFFFFFFFFFFFFFFF7 || v29 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_141;
          *((_QWORD *)this + 15) = *(_QWORD *)(*(_QWORD *)a2 + v29);
          goto LABEL_91;
        case 0xBu:
          *((_DWORD *)this + 45) |= 0x800000u;
          v30 = *((_QWORD *)a2 + 1);
          v31 = *((_QWORD *)a2 + 2);
          v32 = *(_QWORD *)a2;
          if (v30 <= 0xFFFFFFFFFFFFFFF5 && v30 + 10 <= v31)
          {
            v33 = 0;
            v34 = 0;
            v35 = 0;
            do
            {
              v36 = v30 + 1;
              *((_QWORD *)a2 + 1) = v30 + 1;
              v37 = *(_BYTE *)(v32 + v30);
              v35 |= (unint64_t)(v37 & 0x7F) << v33;
              if ((v37 & 0x80) == 0)
                goto LABEL_216;
              v33 += 7;
              v30 = v36;
              v14 = v34++ > 8;
            }
            while (!v14);
LABEL_148:
            LODWORD(v35) = 0;
            goto LABEL_216;
          }
          v106 = 0;
          v107 = 0;
          v35 = 0;
          if (v31 <= v30)
            v31 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v31 == v30)
            {
              LODWORD(v35) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v108 = v30 + 1;
              v109 = *(_BYTE *)(v32 + v30);
              *((_QWORD *)a2 + 1) = v108;
              v35 |= (unint64_t)(v109 & 0x7F) << v106;
              if (v109 < 0)
              {
                v106 += 7;
                v30 = v108;
                v14 = v107++ > 8;
                if (v14)
                  goto LABEL_148;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v35) = 0;
            }
            break;
          }
LABEL_216:
          *((_DWORD *)this + 41) = v35;
          goto LABEL_201;
        case 0xCu:
          *((_DWORD *)this + 45) |= 0x1000u;
          v38 = *((_QWORD *)a2 + 1);
          if (v38 > 0xFFFFFFFFFFFFFFF7 || v38 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_141;
          *((_QWORD *)this + 13) = *(_QWORD *)(*(_QWORD *)a2 + v38);
          goto LABEL_91;
        case 0xDu:
          *((_DWORD *)this + 45) |= 0x1000000u;
          v39 = *((_QWORD *)a2 + 1);
          if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_141;
          *((_DWORD *)this + 42) = *(_DWORD *)(*(_QWORD *)a2 + v39);
          goto LABEL_199;
        case 0xEu:
          *((_DWORD *)this + 45) |= 0x2000000u;
          v40 = *((_QWORD *)a2 + 1);
          v41 = *((_QWORD *)a2 + 2);
          v42 = *(_QWORD *)a2;
          if (v40 <= 0xFFFFFFFFFFFFFFF5 && v40 + 10 <= v41)
          {
            v43 = 0;
            v44 = 0;
            v45 = 0;
            do
            {
              v46 = v40 + 1;
              *((_QWORD *)a2 + 1) = v40 + 1;
              v47 = *(_BYTE *)(v42 + v40);
              v45 |= (unint64_t)(v47 & 0x7F) << v43;
              if ((v47 & 0x80) == 0)
                goto LABEL_219;
              v43 += 7;
              v40 = v46;
              v14 = v44++ > 8;
            }
            while (!v14);
LABEL_155:
            LODWORD(v45) = 0;
            goto LABEL_219;
          }
          v110 = 0;
          v111 = 0;
          v45 = 0;
          if (v41 <= v40)
            v41 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v41 == v40)
            {
              LODWORD(v45) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v112 = v40 + 1;
              v113 = *(_BYTE *)(v42 + v40);
              *((_QWORD *)a2 + 1) = v112;
              v45 |= (unint64_t)(v113 & 0x7F) << v110;
              if (v113 < 0)
              {
                v110 += 7;
                v40 = v112;
                v14 = v111++ > 8;
                if (v14)
                  goto LABEL_155;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v45) = 0;
            }
            break;
          }
LABEL_219:
          *((_DWORD *)this + 43) = v45;
          goto LABEL_201;
        case 0xFu:
          *((_DWORD *)this + 45) |= 0x20000u;
          v48 = *((_QWORD *)a2 + 1);
          if (v48 > 0xFFFFFFFFFFFFFFFBLL || v48 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_141;
          *((_DWORD *)this + 35) = *(_DWORD *)(*(_QWORD *)a2 + v48);
          goto LABEL_199;
        case 0x10u:
          *((_DWORD *)this + 45) |= 0x80000u;
          v49 = *((_QWORD *)a2 + 1);
          if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_141;
          *((_DWORD *)this + 37) = *(_DWORD *)(*(_QWORD *)a2 + v49);
          goto LABEL_199;
        case 0x11u:
          *((_DWORD *)this + 45) |= 0x40000u;
          v50 = *((_QWORD *)a2 + 1);
          if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_141;
          *((_DWORD *)this + 36) = *(_DWORD *)(*(_QWORD *)a2 + v50);
          goto LABEL_199;
        case 0x12u:
          *((_DWORD *)this + 45) |= 0x100u;
          v51 = *((_QWORD *)a2 + 1);
          if (v51 > 0xFFFFFFFFFFFFFFF7 || v51 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_141;
          *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v51);
          goto LABEL_91;
        case 0x13u:
          *((_DWORD *)this + 45) |= 8u;
          v52 = *((_QWORD *)a2 + 1);
          if (v52 > 0xFFFFFFFFFFFFFFF7 || v52 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_141;
          *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v52);
          goto LABEL_91;
        case 0x14u:
          *((_DWORD *)this + 45) |= 0x10u;
          v53 = *((_QWORD *)a2 + 1);
          if (v53 > 0xFFFFFFFFFFFFFFF7 || v53 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_141;
          *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v53);
LABEL_91:
          v54 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_200;
        case 0x15u:
          *((_DWORD *)this + 45) |= 0x200000u;
          v55 = *((_QWORD *)a2 + 1);
          v56 = *((_QWORD *)a2 + 2);
          v57 = *(_QWORD *)a2;
          if (v55 <= 0xFFFFFFFFFFFFFFF5 && v55 + 10 <= v56)
          {
            v58 = 0;
            v59 = 0;
            v60 = 0;
            do
            {
              v61 = v55 + 1;
              *((_QWORD *)a2 + 1) = v55 + 1;
              v62 = *(_BYTE *)(v57 + v55);
              v60 |= (unint64_t)(v62 & 0x7F) << v58;
              if ((v62 & 0x80) == 0)
                goto LABEL_222;
              v58 += 7;
              v55 = v61;
              v14 = v59++ > 8;
            }
            while (!v14);
LABEL_162:
            LODWORD(v60) = 0;
            goto LABEL_222;
          }
          v114 = 0;
          v115 = 0;
          v60 = 0;
          if (v56 <= v55)
            v56 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v56 == v55)
            {
              LODWORD(v60) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v116 = v55 + 1;
              v117 = *(_BYTE *)(v57 + v55);
              *((_QWORD *)a2 + 1) = v116;
              v60 |= (unint64_t)(v117 & 0x7F) << v114;
              if (v117 < 0)
              {
                v114 += 7;
                v55 = v116;
                v14 = v115++ > 8;
                if (v14)
                  goto LABEL_162;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v60) = 0;
            }
            break;
          }
LABEL_222:
          *((_DWORD *)this + 39) = v60;
          goto LABEL_201;
        case 0x16u:
          *((_DWORD *)this + 45) |= 0x4000000u;
          v63 = *((_QWORD *)a2 + 1);
          v64 = *((_QWORD *)a2 + 2);
          v65 = *(_QWORD *)a2;
          if (v63 <= 0xFFFFFFFFFFFFFFF5 && v63 + 10 <= v64)
          {
            v66 = 0;
            v67 = 0;
            v68 = 0;
            do
            {
              v69 = v63 + 1;
              *((_QWORD *)a2 + 1) = v63 + 1;
              v70 = *(_BYTE *)(v65 + v63);
              v68 |= (unint64_t)(v70 & 0x7F) << v66;
              if ((v70 & 0x80) == 0)
                goto LABEL_225;
              v66 += 7;
              v63 = v69;
              v14 = v67++ > 8;
            }
            while (!v14);
LABEL_169:
            LODWORD(v68) = 0;
            goto LABEL_225;
          }
          v118 = 0;
          v119 = 0;
          v68 = 0;
          if (v64 <= v63)
            v64 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v64 == v63)
            {
              LODWORD(v68) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v120 = v63 + 1;
              v121 = *(_BYTE *)(v65 + v63);
              *((_QWORD *)a2 + 1) = v120;
              v68 |= (unint64_t)(v121 & 0x7F) << v118;
              if (v121 < 0)
              {
                v118 += 7;
                v63 = v120;
                v14 = v119++ > 8;
                if (v14)
                  goto LABEL_169;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v68) = 0;
            }
            break;
          }
LABEL_225:
          *((_DWORD *)this + 44) = v68;
          goto LABEL_201;
        case 0x17u:
          *((_DWORD *)this + 45) |= 0x400000u;
          v71 = *((_QWORD *)a2 + 1);
          v72 = *((_QWORD *)a2 + 2);
          v73 = *(_QWORD *)a2;
          if (v71 <= 0xFFFFFFFFFFFFFFF5 && v71 + 10 <= v72)
          {
            v74 = 0;
            v75 = 0;
            v76 = 0;
            do
            {
              v77 = v71 + 1;
              *((_QWORD *)a2 + 1) = v71 + 1;
              v78 = *(_BYTE *)(v73 + v71);
              v76 |= (unint64_t)(v78 & 0x7F) << v74;
              if ((v78 & 0x80) == 0)
                goto LABEL_228;
              v74 += 7;
              v71 = v77;
              v14 = v75++ > 8;
            }
            while (!v14);
LABEL_176:
            LODWORD(v76) = 0;
            goto LABEL_228;
          }
          v122 = 0;
          v123 = 0;
          v76 = 0;
          if (v72 <= v71)
            v72 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v72 == v71)
            {
              LODWORD(v76) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v124 = v71 + 1;
              v125 = *(_BYTE *)(v73 + v71);
              *((_QWORD *)a2 + 1) = v124;
              v76 |= (unint64_t)(v125 & 0x7F) << v122;
              if (v125 < 0)
              {
                v122 += 7;
                v71 = v124;
                v14 = v123++ > 8;
                if (v14)
                  goto LABEL_176;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v76) = 0;
            }
            break;
          }
LABEL_228:
          *((_DWORD *)this + 40) = v76;
          goto LABEL_201;
        case 0x18u:
          *((_DWORD *)this + 45) |= 0x10000u;
          v79 = *((_QWORD *)a2 + 1);
          v80 = *((_QWORD *)a2 + 2);
          v81 = *(_QWORD *)a2;
          if (v79 <= 0xFFFFFFFFFFFFFFF5 && v79 + 10 <= v80)
          {
            v82 = 0;
            v83 = 0;
            v84 = 0;
            do
            {
              v85 = v79 + 1;
              *((_QWORD *)a2 + 1) = v79 + 1;
              v86 = *(_BYTE *)(v81 + v79);
              v84 |= (unint64_t)(v86 & 0x7F) << v82;
              if ((v86 & 0x80) == 0)
                goto LABEL_231;
              v82 += 7;
              v79 = v85;
              v14 = v83++ > 8;
            }
            while (!v14);
LABEL_183:
            LODWORD(v84) = 0;
            goto LABEL_231;
          }
          v126 = 0;
          v127 = 0;
          v84 = 0;
          if (v80 <= v79)
            v80 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v80 == v79)
            {
              LODWORD(v84) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v128 = v79 + 1;
              v129 = *(_BYTE *)(v81 + v79);
              *((_QWORD *)a2 + 1) = v128;
              v84 |= (unint64_t)(v129 & 0x7F) << v126;
              if (v129 < 0)
              {
                v126 += 7;
                v79 = v128;
                v14 = v127++ > 8;
                if (v14)
                  goto LABEL_183;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v84) = 0;
            }
            break;
          }
LABEL_231:
          *((_DWORD *)this + 34) = v84;
          goto LABEL_201;
        case 0x19u:
          *((_DWORD *)this + 45) |= 0x100000u;
          v87 = *((_QWORD *)a2 + 1);
          v88 = *((_QWORD *)a2 + 2);
          v89 = *(_QWORD *)a2;
          if (v87 <= 0xFFFFFFFFFFFFFFF5 && v87 + 10 <= v88)
          {
            v90 = 0;
            v91 = 0;
            v92 = 0;
            do
            {
              v93 = v87 + 1;
              *((_QWORD *)a2 + 1) = v87 + 1;
              v94 = *(_BYTE *)(v89 + v87);
              v92 |= (unint64_t)(v94 & 0x7F) << v90;
              if ((v94 & 0x80) == 0)
                goto LABEL_234;
              v90 += 7;
              v87 = v93;
              v14 = v91++ > 8;
            }
            while (!v14);
LABEL_190:
            LODWORD(v92) = 0;
            goto LABEL_234;
          }
          v130 = 0;
          v131 = 0;
          v92 = 0;
          if (v88 <= v87)
            v88 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v88 == v87)
            {
              LODWORD(v92) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v132 = v87 + 1;
              v133 = *(_BYTE *)(v89 + v87);
              *((_QWORD *)a2 + 1) = v132;
              v92 |= (unint64_t)(v133 & 0x7F) << v130;
              if (v133 < 0)
              {
                v130 += 7;
                v87 = v132;
                v14 = v131++ > 8;
                if (v14)
                  goto LABEL_190;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v92) = 0;
            }
            break;
          }
LABEL_234:
          *((_DWORD *)this + 38) = v92;
          goto LABEL_201;
        case 0x1Au:
          v95 = (_DWORD *)operator new();
          *(_QWORD *)v95 = &off_251361650;
          v95[10] = 0;
          v96 = *((_QWORD *)this + 14);
          *((_QWORD *)this + 14) = v95;
          if (v96)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
            v95 = (_DWORD *)*((_QWORD *)this + 14);
          }
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v95 + 16))(v95, a2) & 1) == 0)
          {
            return 0;
          }
          PB::Reader::recallMark();
          break;
        case 0x1Bu:
          *((_DWORD *)this + 45) |= 0x8000u;
          v97 = *((_QWORD *)a2 + 1);
          v98 = *((_QWORD *)a2 + 2);
          v99 = *(_QWORD *)a2;
          if (v97 <= 0xFFFFFFFFFFFFFFF5 && v97 + 10 <= v98)
          {
            v100 = 0;
            v101 = 0;
            v102 = 0;
            do
            {
              v103 = v97 + 1;
              *((_QWORD *)a2 + 1) = v97 + 1;
              v104 = *(_BYTE *)(v99 + v97);
              v102 |= (unint64_t)(v104 & 0x7F) << v100;
              if ((v104 & 0x80) == 0)
                goto LABEL_237;
              v100 += 7;
              v97 = v103;
              v14 = v101++ > 8;
            }
            while (!v14);
LABEL_197:
            LODWORD(v102) = 0;
            goto LABEL_237;
          }
          v134 = 0;
          v135 = 0;
          v102 = 0;
          if (v98 <= v97)
            v98 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v98 == v97)
            {
              LODWORD(v102) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v136 = v97 + 1;
              v137 = *(_BYTE *)(v99 + v97);
              *((_QWORD *)a2 + 1) = v136;
              v102 |= (unint64_t)(v137 & 0x7F) << v134;
              if (v137 < 0)
              {
                v134 += 7;
                v97 = v136;
                v14 = v135++ > 8;
                if (v14)
                  goto LABEL_197;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v102) = 0;
            }
            break;
          }
LABEL_237:
          *((_DWORD *)this + 33) = v102;
          goto LABEL_201;
        case 0x1Cu:
          *((_DWORD *)this + 45) |= 0x4000u;
          v105 = *((_QWORD *)a2 + 1);
          if (v105 <= 0xFFFFFFFFFFFFFFFBLL && v105 + 4 <= *((_QWORD *)a2 + 2))
          {
            *((_DWORD *)this + 32) = *(_DWORD *)(*(_QWORD *)a2 + v105);
LABEL_199:
            v54 = *((_QWORD *)a2 + 1) + 4;
LABEL_200:
            *((_QWORD *)a2 + 1) = v54;
          }
          else
          {
LABEL_141:
            *((_BYTE *)a2 + 24) = 1;
          }
          goto LABEL_201;
        default:
          goto LABEL_19;
      }
      goto LABEL_201;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_21;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    result = PB::Reader::skip(a2);
    if (!(_DWORD)result)
      return result;
LABEL_201:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
}

uint64_t CMMsl::MotionGPSLocation::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;
  const PB::Base *v5;
  int v6;

  v3 = this;
  v4 = *(_DWORD *)(this + 180);
  if ((v4 & 0x800) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 96));
    v4 = *(_DWORD *)(v3 + 180);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x80) == 0)
        goto LABEL_4;
      goto LABEL_35;
    }
  }
  else if ((v4 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x80) == 0)
  {
LABEL_4:
    if ((v4 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x200) == 0)
  {
LABEL_5:
    if ((v4 & 0x400) == 0)
      goto LABEL_6;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(double *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x400) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(double *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0)
      goto LABEL_8;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 2) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0)
      goto LABEL_9;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 1) == 0)
      goto LABEL_10;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 1) == 0)
  {
LABEL_10:
    if ((v4 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x2000) == 0)
  {
LABEL_11:
    if ((v4 & 0x800000) == 0)
      goto LABEL_12;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(double *)(v3 + 120));
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x800000) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x1000) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_14;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(double *)(v3 + 104));
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_15;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(float *)(v3 + 168));
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x20000) == 0)
      goto LABEL_16;
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x20000) == 0)
  {
LABEL_16:
    if ((v4 & 0x80000) == 0)
      goto LABEL_17;
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(float *)(v3 + 140));
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x80000) == 0)
  {
LABEL_17:
    if ((v4 & 0x40000) == 0)
      goto LABEL_18;
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(float *)(v3 + 148));
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x40000) == 0)
  {
LABEL_18:
    if ((v4 & 0x100) == 0)
      goto LABEL_19;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(float *)(v3 + 144));
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x100) == 0)
  {
LABEL_19:
    if ((v4 & 8) == 0)
      goto LABEL_20;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(double *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 8) == 0)
  {
LABEL_20:
    if ((v4 & 0x10) == 0)
      goto LABEL_21;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x10) == 0)
  {
LABEL_21:
    if ((v4 & 0x200000) == 0)
      goto LABEL_22;
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x200000) == 0)
  {
LABEL_22:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_23;
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x400000) == 0)
  {
LABEL_24:
    if ((v4 & 0x10000) == 0)
      goto LABEL_25;
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x10000) == 0)
  {
LABEL_25:
    if ((v4 & 0x100000) == 0)
      goto LABEL_27;
    goto LABEL_26;
  }
LABEL_56:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_DWORD *)(v3 + 180) & 0x100000) != 0)
LABEL_26:
    this = PB::Writer::writeVarInt(a2);
LABEL_27:
  v5 = *(const PB::Base **)(v3 + 112);
  if (v5)
    this = PB::Writer::writeSubmessage(a2, v5);
  v6 = *(_DWORD *)(v3 + 180);
  if ((v6 & 0x8000) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v6 = *(_DWORD *)(v3 + 180);
  }
  if ((v6 & 0x4000) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 128));
  return this;
}

unint64_t CMMsl::MotionGPSLocation::hash_value(CMMsl::MotionGPSLocation *this)
{
  CMMsl::MotionGPSLocation *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  CMMsl::MotionGPSLocation *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v1 = this;
  v2 = *((_DWORD *)this + 45);
  if ((v2 & 0x800) == 0)
  {
    v3 = 0;
    if ((v2 & 0x40) != 0)
      goto LABEL_3;
LABEL_82:
    v4 = 0;
    if ((v2 & 0x80) != 0)
      goto LABEL_7;
LABEL_83:
    v5 = 0;
    if ((v2 & 0x200) != 0)
      goto LABEL_11;
LABEL_84:
    v6 = 0;
    if ((v2 & 0x400) != 0)
      goto LABEL_15;
LABEL_85:
    v7 = 0;
    if ((v2 & 0x20) != 0)
      goto LABEL_19;
LABEL_86:
    v8 = 0;
    if ((v2 & 2) != 0)
      goto LABEL_23;
LABEL_87:
    v9 = 0;
    if ((v2 & 4) != 0)
      goto LABEL_27;
LABEL_88:
    v10 = 0;
    if ((v2 & 1) != 0)
      goto LABEL_31;
LABEL_89:
    v11 = 0;
    if ((v2 & 0x2000) != 0)
      goto LABEL_35;
LABEL_90:
    v12 = 0;
    if ((v2 & 0x800000) != 0)
      goto LABEL_39;
    goto LABEL_91;
  }
  if (*((double *)this + 12) == 0.0)
    v3 = 0;
  else
    v3 = *((_QWORD *)this + 12);
  if ((v2 & 0x40) == 0)
    goto LABEL_82;
LABEL_3:
  if (*((double *)this + 7) == 0.0)
    v4 = 0;
  else
    v4 = *((_QWORD *)this + 7);
  if ((v2 & 0x80) == 0)
    goto LABEL_83;
LABEL_7:
  if (*((double *)this + 8) == 0.0)
    v5 = 0;
  else
    v5 = *((_QWORD *)this + 8);
  if ((v2 & 0x200) == 0)
    goto LABEL_84;
LABEL_11:
  if (*((double *)this + 10) == 0.0)
    v6 = 0;
  else
    v6 = *((_QWORD *)this + 10);
  if ((v2 & 0x400) == 0)
    goto LABEL_85;
LABEL_15:
  if (*((double *)this + 11) == 0.0)
    v7 = 0;
  else
    v7 = *((_QWORD *)this + 11);
  if ((v2 & 0x20) == 0)
    goto LABEL_86;
LABEL_19:
  if (*((double *)this + 6) == 0.0)
    v8 = 0;
  else
    v8 = *((_QWORD *)this + 6);
  if ((v2 & 2) == 0)
    goto LABEL_87;
LABEL_23:
  if (*((double *)this + 2) == 0.0)
    v9 = 0;
  else
    v9 = *((_QWORD *)this + 2);
  if ((v2 & 4) == 0)
    goto LABEL_88;
LABEL_27:
  if (*((double *)this + 3) == 0.0)
    v10 = 0;
  else
    v10 = *((_QWORD *)this + 3);
  if ((v2 & 1) == 0)
    goto LABEL_89;
LABEL_31:
  if (*((double *)this + 1) == 0.0)
    v11 = 0;
  else
    v11 = *((_QWORD *)this + 1);
  if ((v2 & 0x2000) == 0)
    goto LABEL_90;
LABEL_35:
  if (*((double *)this + 15) == 0.0)
    v12 = 0;
  else
    v12 = *((_QWORD *)this + 15);
  if ((v2 & 0x800000) != 0)
  {
LABEL_39:
    v13 = *((unsigned int *)this + 41);
    if ((v2 & 0x1000) != 0)
      goto LABEL_40;
LABEL_92:
    v14 = 0;
    if ((v2 & 0x1000000) != 0)
      goto LABEL_44;
LABEL_93:
    v16 = 0;
    if ((v2 & 0x2000000) != 0)
      goto LABEL_48;
    goto LABEL_94;
  }
LABEL_91:
  v13 = 0;
  if ((v2 & 0x1000) == 0)
    goto LABEL_92;
LABEL_40:
  if (*((double *)this + 13) == 0.0)
    v14 = 0;
  else
    v14 = *((_QWORD *)this + 13);
  if ((v2 & 0x1000000) == 0)
    goto LABEL_93;
LABEL_44:
  v15 = *((float *)this + 42);
  if (v15 == 0.0)
    v16 = 0;
  else
    v16 = LODWORD(v15);
  if ((v2 & 0x2000000) != 0)
  {
LABEL_48:
    v17 = *((unsigned int *)this + 43);
    if ((v2 & 0x20000) != 0)
      goto LABEL_49;
LABEL_95:
    v19 = 0;
    if ((v2 & 0x80000) != 0)
      goto LABEL_53;
LABEL_96:
    v21 = 0;
    if ((v2 & 0x40000) != 0)
      goto LABEL_57;
LABEL_97:
    v23 = 0;
    if ((v2 & 0x100) != 0)
      goto LABEL_61;
LABEL_98:
    v24 = 0;
    if ((v2 & 8) != 0)
      goto LABEL_65;
LABEL_99:
    v25 = 0;
    if ((v2 & 0x10) != 0)
      goto LABEL_69;
LABEL_100:
    v26 = 0;
    if ((v2 & 0x200000) != 0)
      goto LABEL_73;
    goto LABEL_101;
  }
LABEL_94:
  v17 = 0;
  if ((v2 & 0x20000) == 0)
    goto LABEL_95;
LABEL_49:
  v18 = *((float *)this + 35);
  if (v18 == 0.0)
    v19 = 0;
  else
    v19 = LODWORD(v18);
  if ((v2 & 0x80000) == 0)
    goto LABEL_96;
LABEL_53:
  v20 = *((float *)this + 37);
  if (v20 == 0.0)
    v21 = 0;
  else
    v21 = LODWORD(v20);
  if ((v2 & 0x40000) == 0)
    goto LABEL_97;
LABEL_57:
  v22 = *((float *)this + 36);
  if (v22 == 0.0)
    v23 = 0;
  else
    v23 = LODWORD(v22);
  if ((v2 & 0x100) == 0)
    goto LABEL_98;
LABEL_61:
  if (*((double *)this + 9) == 0.0)
    v24 = 0;
  else
    v24 = *((_QWORD *)this + 9);
  if ((v2 & 8) == 0)
    goto LABEL_99;
LABEL_65:
  if (*((double *)this + 4) == 0.0)
    v25 = 0;
  else
    v25 = *((_QWORD *)this + 4);
  if ((v2 & 0x10) == 0)
    goto LABEL_100;
LABEL_69:
  if (*((double *)this + 5) == 0.0)
    v26 = 0;
  else
    v26 = *((_QWORD *)this + 5);
  if ((v2 & 0x200000) != 0)
  {
LABEL_73:
    v27 = *((unsigned int *)this + 39);
    if ((v2 & 0x4000000) != 0)
      goto LABEL_74;
    goto LABEL_102;
  }
LABEL_101:
  v27 = 0;
  if ((v2 & 0x4000000) != 0)
  {
LABEL_74:
    v28 = *((int *)this + 44);
    if ((v2 & 0x400000) != 0)
      goto LABEL_75;
    goto LABEL_103;
  }
LABEL_102:
  v28 = 0;
  if ((v2 & 0x400000) != 0)
  {
LABEL_75:
    v29 = *((int *)this + 40);
    if ((v2 & 0x10000) != 0)
      goto LABEL_76;
LABEL_104:
    v30 = 0;
    if ((v2 & 0x100000) != 0)
      goto LABEL_77;
    goto LABEL_105;
  }
LABEL_103:
  v29 = 0;
  if ((v2 & 0x10000) == 0)
    goto LABEL_104;
LABEL_76:
  v30 = *((unsigned int *)this + 34);
  if ((v2 & 0x100000) != 0)
  {
LABEL_77:
    v61 = *((int *)this + 38);
    goto LABEL_106;
  }
LABEL_105:
  v61 = 0;
LABEL_106:
  v31 = *((_QWORD *)this + 14);
  if (v31)
  {
    v58 = v3;
    v50 = v25;
    v32 = v4;
    v56 = v5;
    v48 = v27;
    v33 = v6;
    v54 = v7;
    v45 = v30;
    v46 = v29;
    v34 = v8;
    v35 = v9;
    v52 = v23;
    v36 = v10;
    v60 = v11;
    v53 = v21;
    v37 = v1;
    v59 = v12;
    v51 = v24;
    v38 = v13;
    v57 = v14;
    v49 = v26;
    v39 = v16;
    v55 = v17;
    v47 = v28;
    v40 = v19;
    v31 = CMMsl::TrackRunData::hash_value((CMMsl::TrackRunData *)v31);
    v19 = v40;
    v7 = v54;
    v17 = v55;
    v16 = v39;
    v5 = v56;
    v14 = v57;
    v13 = v38;
    v12 = v59;
    v11 = v60;
    v1 = v37;
    v21 = v53;
    v10 = v36;
    v24 = v51;
    v23 = v52;
    v9 = v35;
    v30 = v45;
    v8 = v34;
    v29 = v46;
    v28 = v47;
    v6 = v33;
    v27 = v48;
    v26 = v49;
    v4 = v32;
    v25 = v50;
    v3 = v58;
  }
  if ((v2 & 0x8000) == 0)
  {
    v41 = 0;
    if ((v2 & 0x4000) != 0)
      goto LABEL_110;
LABEL_114:
    v43 = 0;
    return v4 ^ v3 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v16 ^ v17 ^ v19 ^ v21 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v30 ^ v61 ^ v31 ^ v41 ^ v43;
  }
  v41 = *((int *)v1 + 33);
  if ((v2 & 0x4000) == 0)
    goto LABEL_114;
LABEL_110:
  v42 = *((float *)v1 + 32);
  v43 = LODWORD(v42);
  if (v42 == 0.0)
    v43 = 0;
  return v4 ^ v3 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v16 ^ v17 ^ v19 ^ v21 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v30 ^ v61 ^ v31 ^ v41 ^ v43;
}

_QWORD *CMMsl::MotionGPSLocation::makeTrackRunData(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[14])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251361650;
    *(_DWORD *)(v2 + 40) = 0;
    this = (_QWORD *)v1[14];
    v1[14] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void CMMsl::MotionHint::~MotionHint(CMMsl::MotionHint *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::MotionHint::MotionHint(uint64_t this, const CMMsl::MotionHint *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;

  *(_QWORD *)this = &off_25135F4A0;
  *(_DWORD *)(this + 24) = 0;
  v2 = *((_BYTE *)a2 + 24);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_BYTE *)(this + 24) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 24);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 24) & 2) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *(_BYTE *)(this + 24) = v3;
    *(_DWORD *)(this + 16) = v5;
    v2 = *((_BYTE *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *((_DWORD *)a2 + 5);
    *(_BYTE *)(this + 24) = v3 | 4;
    *(_DWORD *)(this + 20) = v6;
  }
  return this;
}

uint64_t CMMsl::MotionHint::operator=(uint64_t a1, uint64_t a2, double a3)
{
  int v3;
  int v4;
  char v6;
  char v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  int v13;

  if (a1 != a2)
  {
    v12[0] = &off_25135F4A0;
    v13 = 0;
    v6 = *(_BYTE *)(a2 + 24);
    if ((v6 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      v7 = 1;
      LOBYTE(v13) = 1;
      if ((v6 & 2) != 0)
      {
LABEL_4:
        v3 = *(_DWORD *)(a2 + 16);
        v7 |= 2u;
        LOBYTE(v13) = v7;
        if ((v6 & 4) != 0)
          goto LABEL_8;
        goto LABEL_9;
      }
    }
    else
    {
      v7 = 0;
      if ((*(_BYTE *)(a2 + 24) & 2) != 0)
        goto LABEL_4;
    }
    if ((v6 & 4) != 0)
    {
LABEL_8:
      v4 = *(_DWORD *)(a2 + 20);
      LOBYTE(v13) = v7 | 4;
    }
LABEL_9:
    v8 = v13;
    v13 = *(_DWORD *)(a1 + 24);
    v9 = *(_QWORD *)(a1 + 8);
    v10 = *(_QWORD *)(a1 + 16);
    *(double *)(a1 + 8) = a3;
    *(_DWORD *)(a1 + 16) = v3;
    *(_DWORD *)(a1 + 20) = v4;
    *(_DWORD *)(a1 + 24) = v8;
    v12[1] = v9;
    v12[2] = v10;
    PB::Base::~Base((PB::Base *)v12);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::MotionHint *a2, CMMsl::MotionHint *a3)
{
  int v3;
  double result;
  int v5;
  int v6;

  v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  v6 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v6;
  return result;
}

double CMMsl::MotionHint::MotionHint(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135F4A0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135F4A0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return result;
}

uint64_t CMMsl::MotionHint::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  int v8;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    v7[0] = &off_25135F4A0;
    v8 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v3;
    v7[1] = v4;
    v7[2] = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

uint64_t CMMsl::MotionHint::formatText(CMMsl::MotionHint *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 2) == 0)
  {
    if ((*((_BYTE *)this + 24) & 1) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    if ((*((_BYTE *)this + 24) & 4) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_4;
  }
  PB::TextFormatter::format(a2, "event");
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 1) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 4) != 0)
LABEL_4:
    PB::TextFormatter::format(a2, "value");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MotionHint::readFrom(CMMsl::MotionHint *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t result;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  char v33;
  char v34;
  unsigned int v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  unint64_t v40;
  char v41;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v19 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((_BYTE *)this + 24) |= 4u;
        v22 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v23 = *(_QWORD *)a2;
        if (v22 > 0xFFFFFFFFFFFFFFF5 || v22 + 10 > v2)
        {
          v34 = 0;
          v35 = 0;
          v26 = 0;
          if (v2 <= v22)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v22)
            {
              LODWORD(v26) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_67;
            }
            v36 = v22++;
            v37 = *(_BYTE *)(v23 + v36);
            *((_QWORD *)a2 + 1) = v22;
            v26 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0)
              break;
            v34 += 7;
            v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v26) = 0;
              goto LABEL_66;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v26) = 0;
LABEL_66:
          v2 = v36 + 1;
        }
        else
        {
          v24 = 0;
          v25 = 0;
          v26 = 0;
          while (1)
          {
            v2 = v22 + 1;
            *((_QWORD *)a2 + 1) = v22 + 1;
            v27 = *(_BYTE *)(v23 + v22);
            v26 |= (unint64_t)(v27 & 0x7F) << v24;
            if ((v27 & 0x80) == 0)
              break;
            v24 += 7;
            v22 = v2;
            v14 = v25++ > 8;
            if (v14)
            {
              LODWORD(v26) = 0;
              break;
            }
          }
        }
LABEL_67:
        *((_DWORD *)this + 5) = v26;
      }
      else if ((_DWORD)v19 == 2)
      {
        *((_BYTE *)this + 24) |= 2u;
        v28 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v29 = *(_QWORD *)a2;
        if (v28 > 0xFFFFFFFFFFFFFFF5 || v28 + 10 > v2)
        {
          v38 = 0;
          v39 = 0;
          v32 = 0;
          if (v2 <= v28)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v28)
            {
              LODWORD(v32) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_72;
            }
            v40 = v28++;
            v41 = *(_BYTE *)(v29 + v40);
            *((_QWORD *)a2 + 1) = v28;
            v32 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0)
              break;
            v38 += 7;
            v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v32) = 0;
              goto LABEL_71;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v32) = 0;
LABEL_71:
          v2 = v40 + 1;
        }
        else
        {
          v30 = 0;
          v31 = 0;
          v32 = 0;
          while (1)
          {
            v2 = v28 + 1;
            *((_QWORD *)a2 + 1) = v28 + 1;
            v33 = *(_BYTE *)(v29 + v28);
            v32 |= (unint64_t)(v33 & 0x7F) << v30;
            if ((v33 & 0x80) == 0)
              break;
            v30 += 7;
            v28 = v2;
            v14 = v31++ > 8;
            if (v14)
            {
              LODWORD(v32) = 0;
              break;
            }
          }
        }
LABEL_72:
        *((_DWORD *)this + 4) = v32;
      }
      else if ((_DWORD)v19 == 1)
      {
        *((_BYTE *)this + 24) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_27;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::MotionHint::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 24);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 24);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        return this;
      return PB::Writer::writeVarInt(a2);
    }
  }
  else if ((*(_BYTE *)(this + 24) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  if ((*(_BYTE *)(v3 + 24) & 4) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::MotionHint::hash_value(CMMsl::MotionHint *this)
{
  double v1;
  uint64_t v2;
  uint64_t v3;

  if ((*((_BYTE *)this + 24) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 24) & 2) != 0)
      goto LABEL_3;
LABEL_8:
    v2 = 0;
    if ((*((_BYTE *)this + 24) & 4) != 0)
      goto LABEL_4;
LABEL_9:
    v3 = 0;
    return v2 ^ *(_QWORD *)&v1 ^ v3;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 24) & 2) == 0)
    goto LABEL_8;
LABEL_3:
  v2 = *((unsigned int *)this + 4);
  if ((*((_BYTE *)this + 24) & 4) == 0)
    goto LABEL_9;
LABEL_4:
  v3 = *((unsigned int *)this + 5);
  return v2 ^ *(_QWORD *)&v1 ^ v3;
}

void CMMsl::MotionLocation::~MotionLocation(CMMsl::MotionLocation *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::MotionLocation::MotionLocation(uint64_t this, const CMMsl::MotionLocation *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;

  *(_QWORD *)this = &off_25135F4D8;
  *(_DWORD *)(this + 220) = 0;
  v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x40000) != 0)
  {
    v4 = *((_QWORD *)a2 + 19);
    v3 = 0x40000;
    *(_DWORD *)(this + 220) = 0x40000;
    *(_QWORD *)(this + 152) = v4;
    v2 = *((_DWORD *)a2 + 55);
    if ((v2 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x100) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 9);
    v3 |= 0x100u;
    *(_DWORD *)(this + 220) = v3;
    *(_QWORD *)(this + 72) = v5;
    v2 = *((_DWORD *)a2 + 55);
  }
LABEL_6:
  if ((v2 & 0x200) != 0)
  {
    v6 = *((_QWORD *)a2 + 10);
    v3 |= 0x200u;
    *(_DWORD *)(this + 220) = v3;
    *(_QWORD *)(this + 80) = v6;
    v2 = *((_DWORD *)a2 + 55);
    if ((v2 & 0x10000) == 0)
    {
LABEL_8:
      if ((v2 & 0x20000) == 0)
        goto LABEL_9;
      goto LABEL_39;
    }
  }
  else if ((v2 & 0x10000) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a2 + 17);
  v3 |= 0x10000u;
  *(_DWORD *)(this + 220) = v3;
  *(_QWORD *)(this + 136) = v7;
  v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x20000) == 0)
  {
LABEL_9:
    if ((v2 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_40;
  }
LABEL_39:
  v8 = *((_QWORD *)a2 + 18);
  v3 |= 0x20000u;
  *(_DWORD *)(this + 220) = v3;
  *(_QWORD *)(this + 144) = v8;
  v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x80) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0)
      goto LABEL_11;
    goto LABEL_41;
  }
LABEL_40:
  v9 = *((_QWORD *)a2 + 8);
  v3 |= 0x80u;
  *(_DWORD *)(this + 220) = v3;
  *(_QWORD *)(this + 64) = v9;
  v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 2) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0)
      goto LABEL_12;
    goto LABEL_42;
  }
LABEL_41:
  v10 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_DWORD *)(this + 220) = v3;
  *(_QWORD *)(this + 16) = v10;
  v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 1) == 0)
      goto LABEL_13;
    goto LABEL_43;
  }
LABEL_42:
  v11 = *((_QWORD *)a2 + 3);
  v3 |= 4u;
  *(_DWORD *)(this + 220) = v3;
  *(_QWORD *)(this + 24) = v11;
  v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 1) == 0)
  {
LABEL_13:
    if ((v2 & 0x100000) == 0)
      goto LABEL_14;
    goto LABEL_44;
  }
LABEL_43:
  v12 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_DWORD *)(this + 220) = v3;
  *(_QWORD *)(this + 8) = v12;
  v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x100000) == 0)
  {
LABEL_14:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_15;
    goto LABEL_45;
  }
LABEL_44:
  v13 = *((_QWORD *)a2 + 21);
  v3 |= 0x100000u;
  *(_DWORD *)(this + 220) = v3;
  *(_QWORD *)(this + 168) = v13;
  v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_15:
    if ((v2 & 0x80000) == 0)
      goto LABEL_16;
    goto LABEL_46;
  }
LABEL_45:
  v14 = *((_DWORD *)a2 + 51);
  v3 |= 0x10000000u;
  *(_DWORD *)(this + 220) = v3;
  *(_DWORD *)(this + 204) = v14;
  v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x80000) == 0)
  {
LABEL_16:
    if ((v2 & 0x20000000) == 0)
      goto LABEL_17;
    goto LABEL_47;
  }
LABEL_46:
  v15 = *((_QWORD *)a2 + 20);
  v3 |= 0x80000u;
  *(_DWORD *)(this + 220) = v3;
  *(_QWORD *)(this + 160) = v15;
  v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x40000000) == 0)
      goto LABEL_18;
    goto LABEL_48;
  }
LABEL_47:
  v16 = *((_DWORD *)a2 + 52);
  v3 |= 0x20000000u;
  *(_DWORD *)(this + 220) = v3;
  *(_DWORD *)(this + 208) = v16;
  v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x200000) == 0)
      goto LABEL_19;
    goto LABEL_49;
  }
LABEL_48:
  v17 = *((_DWORD *)a2 + 53);
  v3 |= 0x40000000u;
  *(_DWORD *)(this + 220) = v3;
  *(_DWORD *)(this + 212) = v17;
  v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x200000) == 0)
  {
LABEL_19:
    if ((v2 & 0x800000) == 0)
      goto LABEL_20;
    goto LABEL_50;
  }
LABEL_49:
  v18 = *((_DWORD *)a2 + 44);
  v3 |= 0x200000u;
  *(_DWORD *)(this + 220) = v3;
  *(_DWORD *)(this + 176) = v18;
  v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x800000) == 0)
  {
LABEL_20:
    if ((v2 & 0x400000) == 0)
      goto LABEL_21;
    goto LABEL_51;
  }
LABEL_50:
  v19 = *((_DWORD *)a2 + 46);
  v3 |= 0x800000u;
  *(_DWORD *)(this + 220) = v3;
  *(_DWORD *)(this + 184) = v19;
  v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x400000) == 0)
  {
LABEL_21:
    if ((v2 & 0x800) == 0)
      goto LABEL_22;
    goto LABEL_52;
  }
LABEL_51:
  v20 = *((_DWORD *)a2 + 45);
  v3 |= 0x400000u;
  *(_DWORD *)(this + 220) = v3;
  *(_DWORD *)(this + 180) = v20;
  v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x800) == 0)
  {
LABEL_22:
    if ((v2 & 8) == 0)
      goto LABEL_23;
    goto LABEL_53;
  }
LABEL_52:
  v21 = *((_QWORD *)a2 + 12);
  v3 |= 0x800u;
  *(_DWORD *)(this + 220) = v3;
  *(_QWORD *)(this + 96) = v21;
  v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 8) == 0)
  {
LABEL_23:
    if ((v2 & 0x10) == 0)
      goto LABEL_24;
    goto LABEL_54;
  }
LABEL_53:
  v22 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *(_DWORD *)(this + 220) = v3;
  *(_QWORD *)(this + 32) = v22;
  v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x10) == 0)
  {
LABEL_24:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_25;
    goto LABEL_55;
  }
LABEL_54:
  v23 = *((_QWORD *)a2 + 5);
  v3 |= 0x10u;
  *(_DWORD *)(this + 220) = v3;
  *(_QWORD *)(this + 40) = v23;
  v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_25:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_26;
    goto LABEL_56;
  }
LABEL_55:
  v24 = *((_DWORD *)a2 + 48);
  v3 |= 0x2000000u;
  *(_DWORD *)(this + 220) = v3;
  *(_DWORD *)(this + 192) = v24;
  v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_26:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_27;
    goto LABEL_57;
  }
LABEL_56:
  v25 = *((_DWORD *)a2 + 50);
  v3 |= 0x8000000u;
  *(_DWORD *)(this + 220) = v3;
  *(_DWORD *)(this + 200) = v25;
  v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_27:
    if ((v2 & 0x20) == 0)
      goto LABEL_28;
    goto LABEL_58;
  }
LABEL_57:
  v26 = *((_DWORD *)a2 + 47);
  v3 |= 0x1000000u;
  *(_DWORD *)(this + 220) = v3;
  *(_DWORD *)(this + 188) = v26;
  v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x20) == 0)
  {
LABEL_28:
    if ((v2 & 0x40) == 0)
      goto LABEL_29;
    goto LABEL_59;
  }
LABEL_58:
  v27 = *((_QWORD *)a2 + 6);
  v3 |= 0x20u;
  *(_DWORD *)(this + 220) = v3;
  *(_QWORD *)(this + 48) = v27;
  v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x40) == 0)
  {
LABEL_29:
    if ((v2 & 0x8000) == 0)
      goto LABEL_30;
    goto LABEL_60;
  }
LABEL_59:
  v28 = *((_QWORD *)a2 + 7);
  v3 |= 0x40u;
  *(_DWORD *)(this + 220) = v3;
  *(_QWORD *)(this + 56) = v28;
  v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x8000) == 0)
  {
LABEL_30:
    if ((v2 & 0x400) == 0)
      goto LABEL_31;
    goto LABEL_61;
  }
LABEL_60:
  v29 = *((_QWORD *)a2 + 16);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 220) = v3;
  *(_QWORD *)(this + 128) = v29;
  v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x400) == 0)
  {
LABEL_31:
    if ((v2 & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_62;
  }
LABEL_61:
  v30 = *((_QWORD *)a2 + 11);
  v3 |= 0x400u;
  *(_DWORD *)(this + 220) = v3;
  *(_QWORD *)(this + 88) = v30;
  v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_32:
    if ((v2 & 0x1000) == 0)
      goto LABEL_33;
    goto LABEL_63;
  }
LABEL_62:
  v31 = *((_BYTE *)a2 + 216);
  v3 |= 0x80000000;
  *(_DWORD *)(this + 220) = v3;
  *(_BYTE *)(this + 216) = v31;
  v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x1000) == 0)
  {
LABEL_33:
    if ((v2 & 0x4000) == 0)
      goto LABEL_34;
    goto LABEL_64;
  }
LABEL_63:
  v32 = *((_QWORD *)a2 + 13);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 220) = v3;
  *(_QWORD *)(this + 104) = v32;
  v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x4000) == 0)
  {
LABEL_34:
    if ((v2 & 0x2000) == 0)
      goto LABEL_35;
    goto LABEL_65;
  }
LABEL_64:
  v33 = *((_QWORD *)a2 + 15);
  v3 |= 0x4000u;
  *(_DWORD *)(this + 220) = v3;
  *(_QWORD *)(this + 120) = v33;
  v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x2000) == 0)
  {
LABEL_35:
    if ((v2 & 0x4000000) == 0)
      return this;
LABEL_66:
    v35 = *((_DWORD *)a2 + 49);
    *(_DWORD *)(this + 220) = v3 | 0x4000000;
    *(_DWORD *)(this + 196) = v35;
    return this;
  }
LABEL_65:
  v34 = *((_QWORD *)a2 + 14);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 220) = v3;
  *(_QWORD *)(this + 112) = v34;
  if ((*((_DWORD *)a2 + 55) & 0x4000000) != 0)
    goto LABEL_66;
  return this;
}

CMMsl *CMMsl::MotionLocation::operator=(CMMsl *a1, const CMMsl::MotionLocation *a2)
{
  CMMsl::MotionLocation *v3;
  _BYTE v5[224];

  if (a1 != a2)
  {
    CMMsl::MotionLocation::MotionLocation((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::MotionLocation *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::MotionLocation *a2, CMMsl::MotionLocation *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double result;
  int v30;

  v3 = *((_DWORD *)this + 55);
  *((_DWORD *)this + 55) = *((_DWORD *)a2 + 55);
  *((_DWORD *)a2 + 55) = v3;
  v4 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 19) = v4;
  v5 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v5;
  v6 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v6;
  v7 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v7;
  v8 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v8;
  v9 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v9;
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v10;
  v11 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v11;
  v12 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v12;
  v13 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = *((_QWORD *)a2 + 21);
  *((_QWORD *)a2 + 21) = v13;
  v14 = *((_DWORD *)this + 51);
  *((_DWORD *)this + 51) = *((_DWORD *)a2 + 51);
  *((_DWORD *)a2 + 51) = v14;
  v15 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = *((_QWORD *)a2 + 20);
  *((_QWORD *)a2 + 20) = v15;
  LODWORD(v15) = *((_DWORD *)this + 52);
  *((_DWORD *)this + 52) = *((_DWORD *)a2 + 52);
  *((_DWORD *)a2 + 52) = v15;
  v16 = *((_DWORD *)this + 53);
  *((_DWORD *)this + 53) = *((_DWORD *)a2 + 53);
  *((_DWORD *)a2 + 53) = v16;
  LODWORD(v15) = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v15;
  LODWORD(v15) = *((_DWORD *)this + 46);
  *((_DWORD *)this + 46) = *((_DWORD *)a2 + 46);
  *((_DWORD *)a2 + 46) = v15;
  LODWORD(v15) = *((_DWORD *)this + 45);
  *((_DWORD *)this + 45) = *((_DWORD *)a2 + 45);
  *((_DWORD *)a2 + 45) = v15;
  v17 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v17;
  v18 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v18;
  v19 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v19;
  v20 = *((_DWORD *)this + 48);
  *((_DWORD *)this + 48) = *((_DWORD *)a2 + 48);
  *((_DWORD *)a2 + 48) = v20;
  v21 = *((_DWORD *)this + 50);
  *((_DWORD *)this + 50) = *((_DWORD *)a2 + 50);
  *((_DWORD *)a2 + 50) = v21;
  v22 = *((_DWORD *)this + 47);
  *((_DWORD *)this + 47) = *((_DWORD *)a2 + 47);
  *((_DWORD *)a2 + 47) = v22;
  v23 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v23;
  v24 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v24;
  v25 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v25;
  v26 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v26;
  LOBYTE(v22) = *((_BYTE *)this + 216);
  *((_BYTE *)this + 216) = *((_BYTE *)a2 + 216);
  *((_BYTE *)a2 + 216) = v22;
  v27 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v27;
  v28 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v28;
  result = *((double *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((double *)a2 + 14) = result;
  v30 = *((_DWORD *)this + 49);
  *((_DWORD *)this + 49) = *((_DWORD *)a2 + 49);
  *((_DWORD *)a2 + 49) = v30;
  return result;
}

double CMMsl::MotionLocation::MotionLocation(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135F4D8;
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
  *(_DWORD *)(a2 + 220) = 0;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  result = *(double *)(a2 + 112);
  *(double *)(a1 + 112) = result;
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 196);
  return result;
}

CMMsl *CMMsl::MotionLocation::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::MotionLocation *v3;
  _BYTE v5[224];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::MotionLocation::MotionLocation((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::MotionLocation *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::MotionLocation::formatText(CMMsl::MotionLocation *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "altitude", *((double *)this + 1));
    v5 = *((_DWORD *)this + 55);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_37;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "course", *((double *)this + 2));
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "courseAccuracy", *((double *)this + 3));
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "deltaDistance", *((double *)this + 4));
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "deltaDistanceAccuracy", *((double *)this + 5));
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "groundAltitude", *((double *)this + 6));
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "groundAltitudeUncertainty", *((double *)this + 7));
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x200000) == 0)
      goto LABEL_10;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "horizontalAccuracy", *((double *)this + 8));
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x200000) == 0)
  {
LABEL_10:
    if ((v5 & 0x400000) == 0)
      goto LABEL_11;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "horzUncSemiMaj", *((float *)this + 44));
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x400000) == 0)
  {
LABEL_11:
    if ((v5 & 0x800000) == 0)
      goto LABEL_12;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "horzUncSemiMajAz", *((float *)this + 45));
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x800000) == 0)
  {
LABEL_12:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "horzUncSemiMin", *((float *)this + 46));
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_13:
    if ((v5 & 0x100) == 0)
      goto LABEL_14;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "isPrefilteredLocation");
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x100) == 0)
  {
LABEL_14:
    if ((v5 & 0x200) == 0)
      goto LABEL_15;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "latitude", *((double *)this + 9));
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x200) == 0)
  {
LABEL_15:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_16;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "longitude", *((double *)this + 10));
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x400) == 0)
      goto LABEL_17;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "matchQuality");
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x400) == 0)
  {
LABEL_17:
    if ((v5 & 0x800) == 0)
      goto LABEL_18;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "maxAbsSlope", *((double *)this + 11));
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x800) == 0)
  {
LABEL_18:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_19;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "odometer", *((double *)this + 12));
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_19:
    if ((v5 & 0x1000) == 0)
      goto LABEL_20;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "originDevice");
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x1000) == 0)
  {
LABEL_20:
    if ((v5 & 0x2000) == 0)
      goto LABEL_21;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "rawAltitude", *((double *)this + 13));
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x2000) == 0)
  {
LABEL_21:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_22;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "rawUndulation", *((double *)this + 14));
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_22:
    if ((v5 & 0x4000) == 0)
      goto LABEL_23;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "rawUndulationModel");
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x4000) == 0)
  {
LABEL_23:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_24;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "rawVerticalAccuracy", *((double *)this + 15));
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_24:
    if ((v5 & 0x8000) == 0)
      goto LABEL_25;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "signalEnvironment");
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x8000) == 0)
  {
LABEL_25:
    if ((v5 & 0x10000) == 0)
      goto LABEL_26;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "slope", *((double *)this + 16));
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x10000) == 0)
  {
LABEL_26:
    if ((v5 & 0x20000) == 0)
      goto LABEL_27;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "speed", *((double *)this + 17));
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x20000) == 0)
  {
LABEL_27:
    if ((v5 & 0x40000) == 0)
      goto LABEL_28;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "speedAccuracy", *((double *)this + 18));
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x40000) == 0)
  {
LABEL_28:
    if ((v5 & 0x80000) == 0)
      goto LABEL_29;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 19));
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x80000) == 0)
  {
LABEL_29:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_30;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "timestampGps", *((double *)this + 20));
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_31;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "type");
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_32;
LABEL_65:
    PB::TextFormatter::format(a2, "undulationModel");
    if ((*((_DWORD *)this + 55) & 0x100000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_33;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "undulation", *((float *)this + 52));
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x40000000) != 0)
    goto LABEL_65;
LABEL_32:
  if ((v5 & 0x100000) != 0)
LABEL_33:
    PB::TextFormatter::format(a2, "verticalAccuracy", *((double *)this + 21));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MotionLocation::readFrom(CMMsl::MotionLocation *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  char v49;
  int v50;
  BOOL v51;
  unint64_t v52;
  uint64_t v53;
  char v54;
  unsigned int v55;
  uint64_t v56;
  char v57;
  char v58;
  unsigned int v59;
  unint64_t v60;
  char v61;
  char v62;
  unsigned int v63;
  unint64_t v64;
  char v65;
  char v66;
  unsigned int v67;
  unint64_t v68;
  char v69;
  char v70;
  unsigned int v71;
  unint64_t v72;
  char v73;
  char v74;
  unsigned int v75;
  unint64_t v76;
  char v77;
  char v78;
  unsigned int v79;
  unint64_t v80;
  char v81;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_190;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 55) |= 0x40000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_135;
        *((_QWORD *)this + 19) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_188;
      case 2u:
        *((_DWORD *)this + 55) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_135;
        *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_188;
      case 3u:
        *((_DWORD *)this + 55) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_135;
        *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_188;
      case 4u:
        *((_DWORD *)this + 55) |= 0x10000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_135;
        *((_QWORD *)this + 17) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_188;
      case 5u:
        *((_DWORD *)this + 55) |= 0x20000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_135;
        *((_QWORD *)this + 18) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_188;
      case 6u:
        *((_DWORD *)this + 55) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_135;
        *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_188;
      case 7u:
        *((_DWORD *)this + 55) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_135;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_188;
      case 8u:
        *((_DWORD *)this + 55) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_135;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_188;
      case 9u:
        *((_DWORD *)this + 55) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_135;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_188;
      case 0xAu:
        *((_DWORD *)this + 55) |= 0x100000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_135;
        *((_QWORD *)this + 21) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_188;
      case 0xBu:
        *((_DWORD *)this + 55) |= 0x10000000u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v58 = 0;
          v59 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_199;
            }
            v60 = v20++;
            v61 = *(_BYTE *)(v21 + v60);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v61 & 0x7F) << v58;
            if ((v61 & 0x80) == 0)
              break;
            v58 += 7;
            v14 = v59++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_198:
              v2 = v60 + 1;
              goto LABEL_199;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
          goto LABEL_198;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_199;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_199:
        *((_DWORD *)this + 51) = v24;
        break;
      case 0xCu:
        *((_DWORD *)this + 55) |= 0x80000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_135;
        *((_QWORD *)this + 20) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_188;
      case 0xDu:
        *((_DWORD *)this + 55) |= 0x20000000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_135;
        *((_DWORD *)this + 52) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_82;
      case 0xEu:
        *((_DWORD *)this + 55) |= 0x40000000u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v62 = 0;
          v63 = 0;
          v30 = 0;
          if (v2 <= v26)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_204;
            }
            v64 = v26++;
            v65 = *(_BYTE *)(v27 + v64);
            *((_QWORD *)a2 + 1) = v26;
            v30 |= (unint64_t)(v65 & 0x7F) << v62;
            if ((v65 & 0x80) == 0)
              break;
            v62 += 7;
            v14 = v63++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_203:
              v2 = v64 + 1;
              goto LABEL_204;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v30) = 0;
          goto LABEL_203;
        }
        v28 = 0;
        v29 = 0;
        v30 = 0;
        do
        {
          v2 = v26 + 1;
          *((_QWORD *)a2 + 1) = v26 + 1;
          v31 = *(_BYTE *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0)
            goto LABEL_204;
          v28 += 7;
          v26 = v2;
          v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_204:
        *((_DWORD *)this + 53) = v30;
        break;
      case 0xFu:
        *((_DWORD *)this + 55) |= 0x200000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_135;
        *((_DWORD *)this + 44) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_82;
      case 0x10u:
        *((_DWORD *)this + 55) |= 0x800000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_135;
        *((_DWORD *)this + 46) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_82;
      case 0x11u:
        *((_DWORD *)this + 55) |= 0x400000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_135;
        *((_DWORD *)this + 45) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_82:
        v2 = *((_QWORD *)a2 + 1) + 4;
        goto LABEL_189;
      case 0x12u:
        *((_DWORD *)this + 55) |= 0x800u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_135;
        *((_QWORD *)this + 12) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_188;
      case 0x13u:
        *((_DWORD *)this + 55) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_135;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_188;
      case 0x14u:
        *((_DWORD *)this + 55) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_135;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_188;
      case 0x15u:
        *((_DWORD *)this + 55) |= 0x2000000u;
        v32 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v33 = *(_QWORD *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
        {
          v66 = 0;
          v67 = 0;
          v36 = 0;
          if (v2 <= v32)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v32)
            {
              LODWORD(v36) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_209;
            }
            v68 = v32++;
            v69 = *(_BYTE *)(v33 + v68);
            *((_QWORD *)a2 + 1) = v32;
            v36 |= (unint64_t)(v69 & 0x7F) << v66;
            if ((v69 & 0x80) == 0)
              break;
            v66 += 7;
            v14 = v67++ > 8;
            if (v14)
            {
              LODWORD(v36) = 0;
LABEL_208:
              v2 = v68 + 1;
              goto LABEL_209;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v36) = 0;
          goto LABEL_208;
        }
        v34 = 0;
        v35 = 0;
        v36 = 0;
        do
        {
          v2 = v32 + 1;
          *((_QWORD *)a2 + 1) = v32 + 1;
          v37 = *(_BYTE *)(v33 + v32);
          v36 |= (unint64_t)(v37 & 0x7F) << v34;
          if ((v37 & 0x80) == 0)
            goto LABEL_209;
          v34 += 7;
          v32 = v2;
          v14 = v35++ > 8;
        }
        while (!v14);
        LODWORD(v36) = 0;
LABEL_209:
        *((_DWORD *)this + 48) = v36;
        break;
      case 0x16u:
        *((_DWORD *)this + 55) |= 0x8000000u;
        v38 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v39 = *(_QWORD *)a2;
        if (v38 > 0xFFFFFFFFFFFFFFF5 || v38 + 10 > v2)
        {
          v70 = 0;
          v71 = 0;
          v42 = 0;
          if (v2 <= v38)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v38)
            {
              LODWORD(v42) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_214;
            }
            v72 = v38++;
            v73 = *(_BYTE *)(v39 + v72);
            *((_QWORD *)a2 + 1) = v38;
            v42 |= (unint64_t)(v73 & 0x7F) << v70;
            if ((v73 & 0x80) == 0)
              break;
            v70 += 7;
            v14 = v71++ > 8;
            if (v14)
            {
              LODWORD(v42) = 0;
LABEL_213:
              v2 = v72 + 1;
              goto LABEL_214;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v42) = 0;
          goto LABEL_213;
        }
        v40 = 0;
        v41 = 0;
        v42 = 0;
        do
        {
          v2 = v38 + 1;
          *((_QWORD *)a2 + 1) = v38 + 1;
          v43 = *(_BYTE *)(v39 + v38);
          v42 |= (unint64_t)(v43 & 0x7F) << v40;
          if ((v43 & 0x80) == 0)
            goto LABEL_214;
          v40 += 7;
          v38 = v2;
          v14 = v41++ > 8;
        }
        while (!v14);
        LODWORD(v42) = 0;
LABEL_214:
        *((_DWORD *)this + 50) = v42;
        break;
      case 0x17u:
        *((_DWORD *)this + 55) |= 0x1000000u;
        v44 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v45 = *(_QWORD *)a2;
        if (v44 > 0xFFFFFFFFFFFFFFF5 || v44 + 10 > v2)
        {
          v74 = 0;
          v75 = 0;
          v48 = 0;
          if (v2 <= v44)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v44)
            {
              LODWORD(v48) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_219;
            }
            v76 = v44++;
            v77 = *(_BYTE *)(v45 + v76);
            *((_QWORD *)a2 + 1) = v44;
            v48 |= (unint64_t)(v77 & 0x7F) << v74;
            if ((v77 & 0x80) == 0)
              break;
            v74 += 7;
            v14 = v75++ > 8;
            if (v14)
            {
              LODWORD(v48) = 0;
LABEL_218:
              v2 = v76 + 1;
              goto LABEL_219;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v48) = 0;
          goto LABEL_218;
        }
        v46 = 0;
        v47 = 0;
        v48 = 0;
        do
        {
          v2 = v44 + 1;
          *((_QWORD *)a2 + 1) = v44 + 1;
          v49 = *(_BYTE *)(v45 + v44);
          v48 |= (unint64_t)(v49 & 0x7F) << v46;
          if ((v49 & 0x80) == 0)
            goto LABEL_219;
          v46 += 7;
          v44 = v2;
          v14 = v47++ > 8;
        }
        while (!v14);
        LODWORD(v48) = 0;
LABEL_219:
        *((_DWORD *)this + 47) = v48;
        break;
      case 0x18u:
        *((_DWORD *)this + 55) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_135;
        *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_188;
      case 0x19u:
        *((_DWORD *)this + 55) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_135;
        *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_188;
      case 0x1Au:
        *((_DWORD *)this + 55) |= 0x8000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_135;
        *((_QWORD *)this + 16) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_188;
      case 0x1Bu:
        *((_DWORD *)this + 55) |= 0x400u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_135;
        *((_QWORD *)this + 11) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_188;
      case 0x1Cu:
        *((_DWORD *)this + 55) |= 0x80000000;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v51 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v50 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v51 = v50 != 0;
        }
        *((_BYTE *)this + 216) = v51;
        break;
      case 0x1Du:
        *((_DWORD *)this + 55) |= 0x1000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_135;
        *((_QWORD *)this + 13) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_188;
      case 0x1Eu:
        *((_DWORD *)this + 55) |= 0x4000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_135;
        *((_QWORD *)this + 15) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_188;
      case 0x1Fu:
        *((_DWORD *)this + 55) |= 0x2000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 14) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_188:
          v2 = *((_QWORD *)a2 + 1) + 8;
LABEL_189:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_135:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 0x20u:
        *((_DWORD *)this + 55) |= 0x4000000u;
        v52 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v53 = *(_QWORD *)a2;
        if (v52 > 0xFFFFFFFFFFFFFFF5 || v52 + 10 > v2)
        {
          v78 = 0;
          v79 = 0;
          v56 = 0;
          if (v2 <= v52)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v52)
            {
              LODWORD(v56) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_224;
            }
            v80 = v52++;
            v81 = *(_BYTE *)(v53 + v80);
            *((_QWORD *)a2 + 1) = v52;
            v56 |= (unint64_t)(v81 & 0x7F) << v78;
            if ((v81 & 0x80) == 0)
              break;
            v78 += 7;
            v14 = v79++ > 8;
            if (v14)
            {
              LODWORD(v56) = 0;
LABEL_223:
              v2 = v80 + 1;
              goto LABEL_224;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v56) = 0;
          goto LABEL_223;
        }
        v54 = 0;
        v55 = 0;
        v56 = 0;
        do
        {
          v2 = v52 + 1;
          *((_QWORD *)a2 + 1) = v52 + 1;
          v57 = *(_BYTE *)(v53 + v52);
          v56 |= (unint64_t)(v57 & 0x7F) << v54;
          if ((v57 & 0x80) == 0)
            goto LABEL_224;
          v54 += 7;
          v52 = v2;
          v14 = v55++ > 8;
        }
        while (!v14);
        LODWORD(v56) = 0;
LABEL_224:
        *((_DWORD *)this + 49) = v56;
        break;
      default:
        goto LABEL_19;
    }
LABEL_190:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::MotionLocation::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 220);
  if ((v4 & 0x40000) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 152));
    v4 = *(_DWORD *)(v3 + 220);
    if ((v4 & 0x100) == 0)
    {
LABEL_3:
      if ((v4 & 0x200) == 0)
        goto LABEL_4;
      goto LABEL_36;
    }
  }
  else if ((v4 & 0x100) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x200) == 0)
  {
LABEL_4:
    if ((v4 & 0x10000) == 0)
      goto LABEL_5;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(double *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x10000) == 0)
  {
LABEL_5:
    if ((v4 & 0x20000) == 0)
      goto LABEL_6;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(double *)(v3 + 136));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x20000) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(double *)(v3 + 144));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0)
      goto LABEL_8;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 2) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0)
      goto LABEL_9;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 1) == 0)
      goto LABEL_10;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 1) == 0)
  {
LABEL_10:
    if ((v4 & 0x100000) == 0)
      goto LABEL_11;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x100000) == 0)
  {
LABEL_11:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_12;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(double *)(v3 + 168));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x80000) == 0)
      goto LABEL_13;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x80000) == 0)
  {
LABEL_13:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_14;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(double *)(v3 + 160));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_15;
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(float *)(v3 + 208));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x200000) == 0)
      goto LABEL_16;
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x200000) == 0)
  {
LABEL_16:
    if ((v4 & 0x800000) == 0)
      goto LABEL_17;
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(float *)(v3 + 176));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x800000) == 0)
  {
LABEL_17:
    if ((v4 & 0x400000) == 0)
      goto LABEL_18;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(float *)(v3 + 184));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x400000) == 0)
  {
LABEL_18:
    if ((v4 & 0x800) == 0)
      goto LABEL_19;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(float *)(v3 + 180));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x800) == 0)
  {
LABEL_19:
    if ((v4 & 8) == 0)
      goto LABEL_20;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(double *)(v3 + 96));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 8) == 0)
  {
LABEL_20:
    if ((v4 & 0x10) == 0)
      goto LABEL_21;
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x10) == 0)
  {
LABEL_21:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_22;
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_23;
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_24;
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_24:
    if ((v4 & 0x20) == 0)
      goto LABEL_25;
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x20) == 0)
  {
LABEL_25:
    if ((v4 & 0x40) == 0)
      goto LABEL_26;
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x40) == 0)
  {
LABEL_26:
    if ((v4 & 0x8000) == 0)
      goto LABEL_27;
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x8000) == 0)
  {
LABEL_27:
    if ((v4 & 0x400) == 0)
      goto LABEL_28;
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(double *)(v3 + 128));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x400) == 0)
  {
LABEL_28:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::write(a2, *(double *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x1000) == 0)
      goto LABEL_30;
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x1000) == 0)
  {
LABEL_30:
    if ((v4 & 0x4000) == 0)
      goto LABEL_31;
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::write(a2, *(double *)(v3 + 104));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x4000) == 0)
  {
LABEL_31:
    if ((v4 & 0x2000) == 0)
      goto LABEL_32;
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::write(a2, *(double *)(v3 + 120));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x2000) == 0)
  {
LABEL_32:
    if ((v4 & 0x4000000) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_64:
  this = PB::Writer::write(a2, *(double *)(v3 + 112));
  if ((*(_DWORD *)(v3 + 220) & 0x4000000) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::MotionLocation::hash_value(CMMsl::MotionLocation *this)
{
  int v1;
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  double v34;
  double v35;
  uint64_t v36;
  double v37;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;

  v1 = *((_DWORD *)this + 55);
  if ((v1 & 0x40000) == 0)
  {
    v39 = 0.0;
    if ((v1 & 0x100) != 0)
      goto LABEL_3;
LABEL_102:
    v2 = 0;
    if ((v1 & 0x200) != 0)
      goto LABEL_7;
LABEL_103:
    v43 = 0.0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_10;
LABEL_104:
    v42 = 0.0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_13;
LABEL_105:
    v41 = 0.0;
    if ((v1 & 0x80) != 0)
      goto LABEL_16;
LABEL_106:
    v40 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_19;
LABEL_107:
    v7 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_23;
LABEL_108:
    v8 = 0;
    if ((v1 & 1) != 0)
      goto LABEL_27;
LABEL_109:
    v9 = 0;
    if ((v1 & 0x100000) != 0)
      goto LABEL_31;
LABEL_110:
    v10 = 0;
    if ((v1 & 0x10000000) != 0)
      goto LABEL_35;
    goto LABEL_111;
  }
  v37 = *((double *)this + 19);
  if (v37 == 0.0)
    v37 = 0.0;
  v39 = v37;
  if ((v1 & 0x100) == 0)
    goto LABEL_102;
LABEL_3:
  if (*((double *)this + 9) == 0.0)
    v2 = 0;
  else
    v2 = *((_QWORD *)this + 9);
  if ((v1 & 0x200) == 0)
    goto LABEL_103;
LABEL_7:
  v3 = *((double *)this + 10);
  if (v3 == 0.0)
    v3 = 0.0;
  v43 = v3;
  if ((v1 & 0x10000) == 0)
    goto LABEL_104;
LABEL_10:
  v4 = *((double *)this + 17);
  if (v4 == 0.0)
    v4 = 0.0;
  v42 = v4;
  if ((v1 & 0x20000) == 0)
    goto LABEL_105;
LABEL_13:
  v5 = *((double *)this + 18);
  if (v5 == 0.0)
    v5 = 0.0;
  v41 = v5;
  if ((v1 & 0x80) == 0)
    goto LABEL_106;
LABEL_16:
  v6 = *((double *)this + 8);
  if (v6 == 0.0)
    v6 = 0.0;
  v40 = v6;
  if ((v1 & 2) == 0)
    goto LABEL_107;
LABEL_19:
  if (*((double *)this + 2) == 0.0)
    v7 = 0;
  else
    v7 = *((_QWORD *)this + 2);
  if ((v1 & 4) == 0)
    goto LABEL_108;
LABEL_23:
  if (*((double *)this + 3) == 0.0)
    v8 = 0;
  else
    v8 = *((_QWORD *)this + 3);
  if ((v1 & 1) == 0)
    goto LABEL_109;
LABEL_27:
  if (*((double *)this + 1) == 0.0)
    v9 = 0;
  else
    v9 = *((_QWORD *)this + 1);
  if ((v1 & 0x100000) == 0)
    goto LABEL_110;
LABEL_31:
  if (*((double *)this + 21) == 0.0)
    v10 = 0;
  else
    v10 = *((_QWORD *)this + 21);
  if ((v1 & 0x10000000) != 0)
  {
LABEL_35:
    v11 = *((unsigned int *)this + 51);
    if ((v1 & 0x80000) != 0)
      goto LABEL_36;
LABEL_112:
    v12 = 0;
    if ((v1 & 0x20000000) != 0)
      goto LABEL_40;
LABEL_113:
    v14 = 0;
    if ((v1 & 0x40000000) != 0)
      goto LABEL_44;
    goto LABEL_114;
  }
LABEL_111:
  v11 = 0;
  if ((v1 & 0x80000) == 0)
    goto LABEL_112;
LABEL_36:
  if (*((double *)this + 20) == 0.0)
    v12 = 0;
  else
    v12 = *((_QWORD *)this + 20);
  if ((v1 & 0x20000000) == 0)
    goto LABEL_113;
LABEL_40:
  v13 = *((float *)this + 52);
  if (v13 == 0.0)
    v14 = 0;
  else
    v14 = LODWORD(v13);
  if ((v1 & 0x40000000) != 0)
  {
LABEL_44:
    v15 = *((unsigned int *)this + 53);
    if ((v1 & 0x200000) != 0)
      goto LABEL_45;
LABEL_115:
    v17 = 0;
    if ((v1 & 0x800000) != 0)
      goto LABEL_49;
LABEL_116:
    v19 = 0;
    if ((v1 & 0x400000) != 0)
      goto LABEL_53;
LABEL_117:
    v21 = 0;
    if ((v1 & 0x800) != 0)
      goto LABEL_57;
LABEL_118:
    v22 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_61;
LABEL_119:
    v23 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_65;
LABEL_120:
    v24 = 0;
    if ((v1 & 0x2000000) != 0)
      goto LABEL_69;
    goto LABEL_121;
  }
LABEL_114:
  v15 = 0;
  if ((v1 & 0x200000) == 0)
    goto LABEL_115;
LABEL_45:
  v16 = *((float *)this + 44);
  if (v16 == 0.0)
    v17 = 0;
  else
    v17 = LODWORD(v16);
  if ((v1 & 0x800000) == 0)
    goto LABEL_116;
LABEL_49:
  v18 = *((float *)this + 46);
  if (v18 == 0.0)
    v19 = 0;
  else
    v19 = LODWORD(v18);
  if ((v1 & 0x400000) == 0)
    goto LABEL_117;
LABEL_53:
  v20 = *((float *)this + 45);
  if (v20 == 0.0)
    v21 = 0;
  else
    v21 = LODWORD(v20);
  if ((v1 & 0x800) == 0)
    goto LABEL_118;
LABEL_57:
  if (*((double *)this + 12) == 0.0)
    v22 = 0;
  else
    v22 = *((_QWORD *)this + 12);
  if ((v1 & 8) == 0)
    goto LABEL_119;
LABEL_61:
  if (*((double *)this + 4) == 0.0)
    v23 = 0;
  else
    v23 = *((_QWORD *)this + 4);
  if ((v1 & 0x10) == 0)
    goto LABEL_120;
LABEL_65:
  if (*((double *)this + 5) == 0.0)
    v24 = 0;
  else
    v24 = *((_QWORD *)this + 5);
  if ((v1 & 0x2000000) != 0)
  {
LABEL_69:
    v25 = *((unsigned int *)this + 48);
    if ((v1 & 0x8000000) != 0)
      goto LABEL_70;
    goto LABEL_122;
  }
LABEL_121:
  v25 = 0;
  if ((v1 & 0x8000000) != 0)
  {
LABEL_70:
    v26 = *((unsigned int *)this + 50);
    if ((v1 & 0x1000000) != 0)
      goto LABEL_71;
    goto LABEL_123;
  }
LABEL_122:
  v26 = 0;
  if ((v1 & 0x1000000) != 0)
  {
LABEL_71:
    v27 = *((unsigned int *)this + 47);
    if ((v1 & 0x20) != 0)
      goto LABEL_72;
LABEL_124:
    v28 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_76;
LABEL_125:
    v29 = 0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_80;
LABEL_126:
    v30 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_84;
LABEL_127:
    v31 = 0;
    if (v1 < 0)
      goto LABEL_88;
    goto LABEL_128;
  }
LABEL_123:
  v27 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_124;
LABEL_72:
  if (*((double *)this + 6) == 0.0)
    v28 = 0;
  else
    v28 = *((_QWORD *)this + 6);
  if ((v1 & 0x40) == 0)
    goto LABEL_125;
LABEL_76:
  if (*((double *)this + 7) == 0.0)
    v29 = 0;
  else
    v29 = *((_QWORD *)this + 7);
  if ((v1 & 0x8000) == 0)
    goto LABEL_126;
LABEL_80:
  if (*((double *)this + 16) == 0.0)
    v30 = 0;
  else
    v30 = *((_QWORD *)this + 16);
  if ((v1 & 0x400) == 0)
    goto LABEL_127;
LABEL_84:
  if (*((double *)this + 11) == 0.0)
    v31 = 0;
  else
    v31 = *((_QWORD *)this + 11);
  if (v1 < 0)
  {
LABEL_88:
    v32 = *((unsigned __int8 *)this + 216);
    if ((v1 & 0x1000) != 0)
      goto LABEL_89;
LABEL_129:
    v33 = 0.0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_92;
LABEL_130:
    v34 = 0.0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_95;
    goto LABEL_131;
  }
LABEL_128:
  v32 = 0;
  if ((v1 & 0x1000) == 0)
    goto LABEL_129;
LABEL_89:
  v33 = *((double *)this + 13);
  if (v33 == 0.0)
    v33 = 0.0;
  if ((v1 & 0x4000) == 0)
    goto LABEL_130;
LABEL_92:
  v34 = *((double *)this + 15);
  if (v34 == 0.0)
    v34 = 0.0;
  if ((v1 & 0x2000) != 0)
  {
LABEL_95:
    v35 = *((double *)this + 14);
    if (v35 == 0.0)
      v35 = 0.0;
    if ((v1 & 0x4000000) != 0)
      goto LABEL_98;
LABEL_132:
    v36 = 0;
    return v2 ^ *(_QWORD *)&v39 ^ *(_QWORD *)&v43 ^ *(_QWORD *)&v42 ^ *(_QWORD *)&v41 ^ *(_QWORD *)&v40 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v14 ^ v15 ^ v17 ^ v19 ^ v21 ^ v22 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v30 ^ v31 ^ v32 ^ *(_QWORD *)&v33 ^ *(_QWORD *)&v34 ^ *(_QWORD *)&v35 ^ v36;
  }
LABEL_131:
  v35 = 0.0;
  if ((v1 & 0x4000000) == 0)
    goto LABEL_132;
LABEL_98:
  v36 = *((unsigned int *)this + 49);
  return v2 ^ *(_QWORD *)&v39 ^ *(_QWORD *)&v43 ^ *(_QWORD *)&v42 ^ *(_QWORD *)&v41 ^ *(_QWORD *)&v40 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v14 ^ v15 ^ v17 ^ v19 ^ v21 ^ v22 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v30 ^ v31 ^ v32 ^ *(_QWORD *)&v33 ^ *(_QWORD *)&v34 ^ *(_QWORD *)&v35 ^ v36;
}

void CMMsl::MotionLoiAltitudeData::~MotionLoiAltitudeData(CMMsl::MotionLoiAltitudeData *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_25135F510;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::MotionLoiAltitudeData::~MotionLoiAltitudeData(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::MotionLoiAltitudeData *CMMsl::MotionLoiAltitudeData::MotionLoiAltitudeData(char **this, char **a2)
{
  _QWORD *v3;

  *this = (char *)&off_25135F510;
  *(_OWORD *)(this + 1) = 0u;
  v3 = this + 1;
  *(_OWORD *)(this + 3) = 0u;
  *(_OWORD *)(this + 5) = 0u;
  if (this != a2)
  {
    sub_2429111C4(v3, a2[1], a2[2], (a2[2] - a2[1]) >> 3);
    sub_2429111C4(this + 4, a2[4], a2[5], (a2[5] - a2[4]) >> 3);
  }
  return (CMMsl::MotionLoiAltitudeData *)this;
}

uint64_t CMMsl::MotionLoiAltitudeData::operator=(uint64_t a1, char **a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  char *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  if ((char **)a1 != a2)
  {
    CMMsl::MotionLoiAltitudeData::MotionLoiAltitudeData(&v7, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v8 = v3;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v10;
    v10 = v5;
    CMMsl::MotionLoiAltitudeData::~MotionLoiAltitudeData((CMMsl::MotionLoiAltitudeData *)&v7);
  }
  return a1;
}

_QWORD *CMMsl::swap(_QWORD *this, CMMsl::MotionLoiAltitudeData *a2, CMMsl::MotionLoiAltitudeData *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  v6 = this[4];
  this[4] = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v6;
  v7 = this[5];
  this[5] = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v7;
  v8 = this[6];
  this[6] = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v8;
  return this;
}

uint64_t CMMsl::MotionLoiAltitudeData::MotionLoiAltitudeData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = &off_25135F510;
  v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  sub_242911330(v4, (__n128 *)(a2 + 32));
  return a1;
}

{
  uint64_t v4;

  *(_QWORD *)a1 = &off_25135F510;
  v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  sub_242911330(v4, (__n128 *)(a2 + 32));
  return a1;
}

uint64_t CMMsl::MotionLoiAltitudeData::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void (**v11)(CMMsl::MotionLoiAltitudeData *__hidden);
  __int128 v12;
  __int128 v13;
  __int128 v14;

  if (a1 != a2)
  {
    v11 = &off_25135F510;
    v3 = *(_QWORD *)(a2 + 24);
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v5 = *(_QWORD *)(a2 + 48);
    v6 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v4;
    v8 = *(_OWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v3;
    v12 = v7;
    v13 = v8;
    v9 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 32) = v6;
    *(_QWORD *)(a1 + 48) = v5;
    v14 = v9;
    CMMsl::MotionLoiAltitudeData::~MotionLoiAltitudeData((CMMsl::MotionLoiAltitudeData *)&v11);
  }
  return a1;
}

uint64_t CMMsl::MotionLoiAltitudeData::formatText(CMMsl::MotionLoiAltitudeData *this, PB::TextFormatter *a2, const char *a3)
{
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (double *)*((_QWORD *)this + 1);
  v6 = (double *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "loiAltitude", v7);
  }
  v8 = (double *)*((_QWORD *)this + 4);
  v9 = (double *)*((_QWORD *)this + 5);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(a2, "loiVerticalUncertainty", v10);
  }
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::MotionLoiAltitudeData::readFrom(CMMsl::MotionLoiAltitudeData *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  _QWORD *v50;
  unint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t v69;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          v14 = v16++ > 8;
          if (v14)
            goto LABEL_47;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_47;
      }
LABEL_20:
      v19 = v11 & 7;
      if (v19 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        if (v19 != 2)
        {
          v52 = (char *)*((_QWORD *)this + 5);
          v51 = *((_QWORD *)this + 6);
          if ((unint64_t)v52 >= v51)
          {
            v59 = (char *)*((_QWORD *)this + 4);
            v60 = (v52 - v59) >> 3;
            v61 = v60 + 1;
            if ((unint64_t)(v60 + 1) >> 61)
LABEL_119:
              sub_242729A44();
            v62 = v51 - (_QWORD)v59;
            if (v62 >> 2 > v61)
              v61 = v62 >> 2;
            if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
              v63 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v63 = v61;
            if (v63)
            {
              v63 = (unint64_t)sub_2429112FC(v63);
              v59 = (char *)*((_QWORD *)this + 4);
              v52 = (char *)*((_QWORD *)this + 5);
            }
            else
            {
              v64 = 0;
            }
            v67 = (_QWORD *)(v63 + 8 * v60);
            *v67 = 0;
            v50 = v67 + 1;
            while (v52 != v59)
            {
              v68 = *((_QWORD *)v52 - 1);
              v52 -= 8;
              *--v67 = v68;
            }
            *((_QWORD *)this + 4) = v67;
            *((_QWORD *)this + 5) = v50;
            *((_QWORD *)this + 6) = v63 + 8 * v64;
            if (v59)
              operator delete(v59);
          }
          else
          {
            *(_QWORD *)v52 = 0;
            v50 = v52 + 8;
          }
          *((_QWORD *)this + 5) = v50;
          goto LABEL_111;
        }
        if ((PB::Reader::placeMark() & 1) != 0)
          return 0;
        v34 = *((_QWORD *)a2 + 1);
        v35 = *((_QWORD *)a2 + 2);
        while (v34 < v35 && !*((_BYTE *)a2 + 24))
        {
          v37 = (char *)*((_QWORD *)this + 5);
          v36 = *((_QWORD *)this + 6);
          if ((unint64_t)v37 >= v36)
          {
            v39 = (char *)*((_QWORD *)this + 4);
            v40 = (v37 - v39) >> 3;
            v41 = v40 + 1;
            if ((unint64_t)(v40 + 1) >> 61)
              goto LABEL_119;
            v42 = v36 - (_QWORD)v39;
            if (v42 >> 2 > v41)
              v41 = v42 >> 2;
            if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
              v43 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v43 = v41;
            if (v43)
            {
              v43 = (unint64_t)sub_2429112FC(v43);
              v39 = (char *)*((_QWORD *)this + 4);
              v37 = (char *)*((_QWORD *)this + 5);
            }
            else
            {
              v44 = 0;
            }
            v45 = (_QWORD *)(v43 + 8 * v40);
            *v45 = 0;
            v38 = v45 + 1;
            while (v37 != v39)
            {
              v46 = *((_QWORD *)v37 - 1);
              v37 -= 8;
              *--v45 = v46;
            }
            *((_QWORD *)this + 4) = v45;
            *((_QWORD *)this + 5) = v38;
            *((_QWORD *)this + 6) = v43 + 8 * v44;
            if (v39)
              operator delete(v39);
          }
          else
          {
            *(_QWORD *)v37 = 0;
            v38 = v37 + 8;
          }
          *((_QWORD *)this + 5) = v38;
          v47 = *((_QWORD *)a2 + 1);
          if (v47 > 0xFFFFFFFFFFFFFFF7 || v47 + 8 > *((_QWORD *)a2 + 2))
          {
LABEL_79:
            *((_BYTE *)a2 + 24) = 1;
            break;
          }
          *(v38 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v47);
          v35 = *((_QWORD *)a2 + 2);
          v34 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v34;
        }
      }
      else
      {
        if ((v11 >> 3) != 1)
        {
LABEL_47:
          if ((PB::Reader::skip(a2) & 1) == 0)
            return 0;
          goto LABEL_48;
        }
        if (v19 != 2)
        {
          v49 = (char *)*((_QWORD *)this + 2);
          v48 = *((_QWORD *)this + 3);
          if ((unint64_t)v49 >= v48)
          {
            v53 = (char *)*((_QWORD *)this + 1);
            v54 = (v49 - v53) >> 3;
            v55 = v54 + 1;
            if ((unint64_t)(v54 + 1) >> 61)
              goto LABEL_119;
            v56 = v48 - (_QWORD)v53;
            if (v56 >> 2 > v55)
              v55 = v56 >> 2;
            if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
              v57 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v57 = v55;
            if (v57)
            {
              v57 = (unint64_t)sub_2429112FC(v57);
              v53 = (char *)*((_QWORD *)this + 1);
              v49 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v58 = 0;
            }
            v65 = (_QWORD *)(v57 + 8 * v54);
            *v65 = 0;
            v50 = v65 + 1;
            while (v49 != v53)
            {
              v66 = *((_QWORD *)v49 - 1);
              v49 -= 8;
              *--v65 = v66;
            }
            *((_QWORD *)this + 1) = v65;
            *((_QWORD *)this + 2) = v50;
            *((_QWORD *)this + 3) = v57 + 8 * v58;
            if (v53)
              operator delete(v53);
          }
          else
          {
            *(_QWORD *)v49 = 0;
            v50 = v49 + 8;
          }
          *((_QWORD *)this + 2) = v50;
LABEL_111:
          v69 = *((_QWORD *)a2 + 1);
          if (v69 <= 0xFFFFFFFFFFFFFFF7 && v69 + 8 <= *((_QWORD *)a2 + 2))
          {
            *(v50 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v69);
            *((_QWORD *)a2 + 1) += 8;
          }
          else
          {
            *((_BYTE *)a2 + 24) = 1;
          }
          goto LABEL_48;
        }
        if ((PB::Reader::placeMark() & 1) != 0)
          return 0;
        v20 = *((_QWORD *)a2 + 1);
        v21 = *((_QWORD *)a2 + 2);
        while (v20 < v21 && !*((_BYTE *)a2 + 24))
        {
          v23 = (char *)*((_QWORD *)this + 2);
          v22 = *((_QWORD *)this + 3);
          if ((unint64_t)v23 >= v22)
          {
            v25 = (char *)*((_QWORD *)this + 1);
            v26 = (v23 - v25) >> 3;
            v27 = v26 + 1;
            if ((unint64_t)(v26 + 1) >> 61)
              goto LABEL_119;
            v28 = v22 - (_QWORD)v25;
            if (v28 >> 2 > v27)
              v27 = v28 >> 2;
            if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
              v29 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v29 = v27;
            if (v29)
            {
              v29 = (unint64_t)sub_2429112FC(v29);
              v25 = (char *)*((_QWORD *)this + 1);
              v23 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v30 = 0;
            }
            v31 = (_QWORD *)(v29 + 8 * v26);
            *v31 = 0;
            v24 = v31 + 1;
            while (v23 != v25)
            {
              v32 = *((_QWORD *)v23 - 1);
              v23 -= 8;
              *--v31 = v32;
            }
            *((_QWORD *)this + 1) = v31;
            *((_QWORD *)this + 2) = v24;
            *((_QWORD *)this + 3) = v29 + 8 * v30;
            if (v25)
              operator delete(v25);
          }
          else
          {
            *(_QWORD *)v23 = 0;
            v24 = v23 + 8;
          }
          *((_QWORD *)this + 2) = v24;
          v33 = *((_QWORD *)a2 + 1);
          if (v33 > 0xFFFFFFFFFFFFFFF7 || v33 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_79;
          *(v24 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v33);
          v21 = *((_QWORD *)a2 + 2);
          v20 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v20;
        }
      }
      PB::Reader::recallMark();
LABEL_48:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::MotionLoiAltitudeData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  double *v4;
  double *v5;
  double v6;
  double *v7;
  double *v8;
  double v9;

  v3 = this;
  v4 = *(double **)(this + 8);
  v5 = *(double **)(this + 16);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6);
  }
  v8 = *(double **)(v3 + 32);
  v7 = *(double **)(v3 + 40);
  while (v8 != v7)
  {
    v9 = *v8++;
    this = PB::Writer::write(a2, v9);
  }
  return this;
}

uint64_t CMMsl::MotionLoiAltitudeData::hash_value(CMMsl::MotionLoiAltitudeData *this)
{
  uint64_t v1;

  v1 = PBHashBytes();
  return PBHashBytes() ^ v1;
}

void CMMsl::MotionLoiData::~MotionLoiData(CMMsl::MotionLoiData *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::MotionLoiData::MotionLoiData(uint64_t this, const CMMsl::MotionLoiData *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char v15;

  *(_QWORD *)this = &off_25135F548;
  *(_DWORD *)(this + 84) = -1;
  *(_DWORD *)(this + 92) = 0;
  v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x40) != 0)
  {
    v4 = *((_QWORD *)a2 + 7);
    v3 = 64;
    *(_WORD *)(this + 92) = 64;
    *(_QWORD *)(this + 56) = v4;
    v2 = *((_WORD *)a2 + 46);
    if ((v2 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 6);
    v3 |= 0x20u;
    *(_WORD *)(this + 92) = v3;
    *(_QWORD *)(this + 48) = v5;
    v2 = *((_WORD *)a2 + 46);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *((_QWORD *)a2 + 3);
    v3 |= 4u;
    *(_WORD *)(this + 92) = v3;
    *(_QWORD *)(this + 24) = v6;
    v2 = *((_WORD *)a2 + 46);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_19;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 92) = v3;
  *(_QWORD *)(this + 8) = v7;
  v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  v8 = *((_QWORD *)a2 + 5);
  v3 |= 0x10u;
  *(_WORD *)(this + 92) = v3;
  *(_QWORD *)(this + 40) = v8;
  v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x200) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_20:
  v9 = *((_DWORD *)a2 + 20);
  v3 |= 0x200u;
  *(_WORD *)(this + 92) = v3;
  *(_DWORD *)(this + 80) = v9;
  v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_22;
  }
LABEL_21:
  v10 = *((_QWORD *)a2 + 9);
  v3 |= 0x100u;
  *(_WORD *)(this + 92) = v3;
  *(_QWORD *)(this + 72) = v10;
  v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x80) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0)
      goto LABEL_13;
    goto LABEL_23;
  }
LABEL_22:
  v11 = *((_QWORD *)a2 + 8);
  v3 |= 0x80u;
  *(_WORD *)(this + 92) = v3;
  *(_QWORD *)(this + 64) = v11;
  v2 = *((_WORD *)a2 + 46);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_24;
  }
LABEL_23:
  v12 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_WORD *)(this + 92) = v3;
  *(_QWORD *)(this + 16) = v12;
  v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x400) == 0)
  {
LABEL_14:
    if ((v2 & 8) == 0)
      goto LABEL_15;
    goto LABEL_25;
  }
LABEL_24:
  v13 = *((_DWORD *)a2 + 21);
  v3 |= 0x400u;
  *(_WORD *)(this + 92) = v3;
  *(_DWORD *)(this + 84) = v13;
  v2 = *((_WORD *)a2 + 46);
  if ((v2 & 8) == 0)
  {
LABEL_15:
    if ((v2 & 0x800) == 0)
      return this;
LABEL_26:
    v15 = *((_BYTE *)a2 + 88);
    *(_WORD *)(this + 92) = v3 | 0x800;
    *(_BYTE *)(this + 88) = v15;
    return this;
  }
LABEL_25:
  v14 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *(_WORD *)(this + 92) = v3;
  *(_QWORD *)(this + 32) = v14;
  if ((*((_WORD *)a2 + 46) & 0x800) != 0)
    goto LABEL_26;
  return this;
}

CMMsl *CMMsl::MotionLoiData::operator=(CMMsl *a1, const CMMsl::MotionLoiData *a2)
{
  CMMsl::MotionLoiData *v3;
  _BYTE v5[96];

  if (a1 != a2)
  {
    CMMsl::MotionLoiData::MotionLoiData((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::MotionLoiData *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::MotionLoiData *a2, CMMsl::MotionLoiData *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double result;

  v3 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v3;
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v4;
  v5 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v5;
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v7;
  v8 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v8;
  v9 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v9;
  v10 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v10;
  v11 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v11;
  v12 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v12;
  result = *((double *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((double *)a2 + 4) = result;
  LOBYTE(v3) = *((_BYTE *)this + 88);
  *((_BYTE *)this + 88) = *((_BYTE *)a2 + 88);
  *((_BYTE *)a2 + 88) = v3;
  return result;
}

double CMMsl::MotionLoiData::MotionLoiData(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135F548;
  *(_DWORD *)(a1 + 84) = -1;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a2 + 92) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  return result;
}

CMMsl *CMMsl::MotionLoiData::operator=(CMMsl *this, uint64_t a2, CMMsl::MotionLoiData *a3)
{
  uint64_t v4;
  void (**v6)(CMMsl::MotionLoiData *__hidden);
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  int v14;

  if (this != (CMMsl *)a2)
  {
    v6 = &off_25135F548;
    v14 = *(_DWORD *)(a2 + 92);
    *(_DWORD *)(a2 + 92) = 0;
    v9 = *(_OWORD *)(a2 + 40);
    v10 = *(_OWORD *)(a2 + 56);
    v7 = *(_OWORD *)(a2 + 8);
    v4 = *(_QWORD *)(a2 + 80);
    v11 = *(_QWORD *)(a2 + 72);
    v12 = v4;
    v8 = *(_OWORD *)(a2 + 24);
    v13 = *(_BYTE *)(a2 + 88);
    CMMsl::swap(this, (CMMsl::MotionLoiData *)&v6, a3);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return this;
}

uint64_t CMMsl::MotionLoiData::formatText(CMMsl::MotionLoiData *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 46);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "arrivalDate", *((double *)this + 1));
    v5 = *((_WORD *)this + 46);
    if ((v5 & 0x200) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((*((_WORD *)this + 46) & 0x200) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "confidence");
  v5 = *((_WORD *)this + 46);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "confidenceOfGeoLocation", *((double *)this + 2));
  v5 = *((_WORD *)this + 46);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "departureDate", *((double *)this + 3));
  v5 = *((_WORD *)this + 46);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x800) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "distanceToLoi", *((double *)this + 4));
  v5 = *((_WORD *)this + 46);
  if ((v5 & 0x800) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "hashedLatLong");
  v5 = *((_WORD *)this + 46);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "horizontalAccuracy", *((double *)this + 5));
  v5 = *((_WORD *)this + 46);
  if ((v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "latitude", *((double *)this + 6));
  v5 = *((_WORD *)this + 46);
  if ((v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "longitude", *((double *)this + 7));
  v5 = *((_WORD *)this + 46);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x80) == 0)
      goto LABEL_12;
LABEL_25:
    PB::TextFormatter::format(a2, "uncertaintyOfGeoLocation", *((double *)this + 8));
    if ((*((_WORD *)this + 46) & 0x100) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_13;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "type");
  v5 = *((_WORD *)this + 46);
  if ((v5 & 0x80) != 0)
    goto LABEL_25;
LABEL_12:
  if ((v5 & 0x100) != 0)
LABEL_13:
    PB::TextFormatter::format(a2, "withinDistance", *((double *)this + 9));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MotionLoiData::readFrom(CMMsl::MotionLoiData *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  int v32;
  BOOL v33;
  char v34;
  unsigned int v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  unint64_t v40;
  char v41;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_94;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 46) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_63;
        *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_83;
      case 2u:
        *((_WORD *)this + 46) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_63;
        *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_83;
      case 3u:
        *((_WORD *)this + 46) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_63;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_83;
      case 4u:
        *((_WORD *)this + 46) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_63;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_83;
      case 5u:
        *((_WORD *)this + 46) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_63;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_83;
      case 6u:
        *((_WORD *)this + 46) |= 0x200u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v34 = 0;
          v35 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_88;
            }
            v36 = v20++;
            v37 = *(_BYTE *)(v21 + v36);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0)
              break;
            v34 += 7;
            v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_87:
              v2 = v36 + 1;
              goto LABEL_88;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
          goto LABEL_87;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_88;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_88:
        *((_DWORD *)this + 20) = v24;
        break;
      case 7u:
        *((_WORD *)this + 46) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_63;
        *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_83;
      case 8u:
        *((_WORD *)this + 46) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_63;
        *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_83;
      case 9u:
        *((_WORD *)this + 46) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_63;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_83;
      case 0xAu:
        *((_WORD *)this + 46) |= 0x400u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v38 = 0;
          v39 = 0;
          v30 = 0;
          if (v2 <= v26)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_93;
            }
            v40 = v26++;
            v41 = *(_BYTE *)(v27 + v40);
            *((_QWORD *)a2 + 1) = v26;
            v30 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0)
              break;
            v38 += 7;
            v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_92:
              v2 = v40 + 1;
              goto LABEL_93;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v30) = 0;
          goto LABEL_92;
        }
        v28 = 0;
        v29 = 0;
        v30 = 0;
        do
        {
          v2 = v26 + 1;
          *((_QWORD *)a2 + 1) = v26 + 1;
          v31 = *(_BYTE *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0)
            goto LABEL_93;
          v28 += 7;
          v26 = v2;
          v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_93:
        *((_DWORD *)this + 21) = v30;
        break;
      case 0xBu:
        *((_WORD *)this + 46) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_83:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_63:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 0xCu:
        *((_WORD *)this + 46) |= 0x800u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v33 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v32 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v33 = v32 != 0;
        }
        *((_BYTE *)this + 88) = v33;
        break;
      default:
        goto LABEL_19;
    }
LABEL_94:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::MotionLoiData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 92);
  if ((v4 & 0x40) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 56));
    v4 = *(_WORD *)(v3 + 92);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 72));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x400) == 0)
  {
LABEL_11:
    if ((v4 & 8) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 8) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0)
      return this;
    return PB::Writer::write(a2);
  }
LABEL_24:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  if ((*(_WORD *)(v3 + 92) & 0x800) != 0)
    return PB::Writer::write(a2);
  return this;
}

uint64_t CMMsl::MotionLoiData::hash_value(CMMsl::MotionLoiData *this)
{
  __int16 v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  double v12;
  uint64_t v13;

  v1 = *((_WORD *)this + 46);
  if ((v1 & 0x40) == 0)
  {
    v2 = 0.0;
    if ((v1 & 0x20) != 0)
      goto LABEL_3;
LABEL_33:
    v3 = 0.0;
    if ((v1 & 4) != 0)
      goto LABEL_6;
LABEL_34:
    v4 = 0.0;
    if ((v1 & 1) != 0)
      goto LABEL_9;
LABEL_35:
    v5 = 0.0;
    if ((v1 & 0x10) != 0)
      goto LABEL_12;
LABEL_36:
    v6 = 0.0;
    if ((*((_WORD *)this + 46) & 0x200) != 0)
      goto LABEL_15;
    goto LABEL_37;
  }
  v2 = *((double *)this + 7);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 0x20) == 0)
    goto LABEL_33;
LABEL_3:
  v3 = *((double *)this + 6);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 4) == 0)
    goto LABEL_34;
LABEL_6:
  v4 = *((double *)this + 3);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_35;
LABEL_9:
  v5 = *((double *)this + 1);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((v1 & 0x10) == 0)
    goto LABEL_36;
LABEL_12:
  v6 = *((double *)this + 5);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((*((_WORD *)this + 46) & 0x200) != 0)
  {
LABEL_15:
    v7 = *((unsigned int *)this + 20);
    if ((*((_WORD *)this + 46) & 0x100) != 0)
      goto LABEL_16;
LABEL_38:
    v8 = 0.0;
    if ((v1 & 0x80) != 0)
      goto LABEL_19;
LABEL_39:
    v9 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_22;
LABEL_40:
    v10 = 0.0;
    if ((*((_WORD *)this + 46) & 0x400) != 0)
      goto LABEL_25;
    goto LABEL_41;
  }
LABEL_37:
  v7 = 0;
  if ((*((_WORD *)this + 46) & 0x100) == 0)
    goto LABEL_38;
LABEL_16:
  v8 = *((double *)this + 9);
  if (v8 == 0.0)
    v8 = 0.0;
  if ((v1 & 0x80) == 0)
    goto LABEL_39;
LABEL_19:
  v9 = *((double *)this + 8);
  if (v9 == 0.0)
    v9 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_40;
LABEL_22:
  v10 = *((double *)this + 2);
  if (v10 == 0.0)
    v10 = 0.0;
  if ((*((_WORD *)this + 46) & 0x400) != 0)
  {
LABEL_25:
    v11 = *((int *)this + 21);
    if ((v1 & 8) != 0)
      goto LABEL_26;
    goto LABEL_42;
  }
LABEL_41:
  v11 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_26:
    v12 = *((double *)this + 4);
    if (v12 == 0.0)
      v12 = 0.0;
    if ((*((_WORD *)this + 46) & 0x800) != 0)
      goto LABEL_29;
LABEL_43:
    v13 = 0;
    return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ v11 ^ *(_QWORD *)&v12 ^ v13;
  }
LABEL_42:
  v12 = 0.0;
  if ((*((_WORD *)this + 46) & 0x800) == 0)
    goto LABEL_43;
LABEL_29:
  v13 = *((unsigned __int8 *)this + 88);
  return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ v11 ^ *(_QWORD *)&v12 ^ v13;
}

void CMMsl::MotionStateUpdate::~MotionStateUpdate(CMMsl::MotionStateUpdate *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_25135F580;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_25135F580;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_25135F580;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::MotionStateUpdate *CMMsl::MotionStateUpdate::MotionStateUpdate(CMMsl::MotionStateUpdate *this, const CMMsl::MotionStateUpdate *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;

  *(_QWORD *)this = &off_25135F580;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 24) = 0;
  v4 = *((_QWORD *)a2 + 24);
  if ((v4 & 0x8000) != 0)
  {
    v6 = *((_DWORD *)a2 + 25);
    v5 = 0x8000;
    *((_QWORD *)this + 24) = 0x8000;
    *((_DWORD *)this + 25) = v6;
    v4 = *((_QWORD *)a2 + 24);
    if ((v4 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = 0;
  if ((v4 & 0x100) != 0)
  {
LABEL_5:
    v7 = *((_DWORD *)a2 + 18);
    v5 |= 0x100uLL;
    *((_QWORD *)this + 24) = v5;
    *((_DWORD *)this + 18) = v7;
    v4 = *((_QWORD *)a2 + 24);
  }
LABEL_6:
  if ((v4 & 0x10000) != 0)
  {
    v15 = *((_DWORD *)a2 + 26);
    v5 |= 0x10000uLL;
    *((_QWORD *)this + 24) = v5;
    *((_DWORD *)this + 26) = v15;
    v4 = *((_QWORD *)a2 + 24);
    if ((v4 & 0x20000) == 0)
    {
LABEL_8:
      if ((v4 & 0x800) == 0)
        goto LABEL_9;
      goto LABEL_50;
    }
  }
  else if ((v4 & 0x20000) == 0)
  {
    goto LABEL_8;
  }
  v16 = *((_DWORD *)a2 + 27);
  v5 |= 0x20000uLL;
  *((_QWORD *)this + 24) = v5;
  *((_DWORD *)this + 27) = v16;
  v4 = *((_QWORD *)a2 + 24);
  if ((v4 & 0x800) == 0)
  {
LABEL_9:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_10;
    goto LABEL_51;
  }
LABEL_50:
  v17 = *((_DWORD *)a2 + 21);
  v5 |= 0x800uLL;
  *((_QWORD *)this + 24) = v5;
  *((_DWORD *)this + 21) = v17;
  v4 = *((_QWORD *)a2 + 24);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_52;
  }
LABEL_51:
  v18 = *((_DWORD *)a2 + 37);
  v5 |= 0x8000000uLL;
  *((_QWORD *)this + 24) = v5;
  *((_DWORD *)this + 37) = v18;
  v4 = *((_QWORD *)a2 + 24);
  if ((v4 & 0x2000) == 0)
  {
LABEL_11:
    if ((v4 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_53;
  }
LABEL_52:
  v19 = *((_DWORD *)a2 + 23);
  v5 |= 0x2000uLL;
  *((_QWORD *)this + 24) = v5;
  *((_DWORD *)this + 23) = v19;
  v4 = *((_QWORD *)a2 + 24);
  if ((v4 & 0x1000) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_13;
    goto LABEL_54;
  }
LABEL_53:
  v20 = *((_DWORD *)a2 + 22);
  v5 |= 0x1000uLL;
  *((_QWORD *)this + 24) = v5;
  *((_DWORD *)this + 22) = v20;
  v4 = *((_QWORD *)a2 + 24);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_13:
    if ((v4 & 8) == 0)
      goto LABEL_14;
    goto LABEL_55;
  }
LABEL_54:
  v21 = *((_DWORD *)a2 + 34);
  v5 |= 0x1000000uLL;
  *((_QWORD *)this + 24) = v5;
  *((_DWORD *)this + 34) = v21;
  v4 = *((_QWORD *)a2 + 24);
  if ((v4 & 8) == 0)
  {
LABEL_14:
    if ((v4 & 1) == 0)
      goto LABEL_15;
    goto LABEL_56;
  }
LABEL_55:
  v22 = *((_QWORD *)a2 + 5);
  v5 |= 8uLL;
  *((_QWORD *)this + 24) = v5;
  *((_QWORD *)this + 5) = v22;
  v4 = *((_QWORD *)a2 + 24);
  if ((v4 & 1) == 0)
  {
LABEL_15:
    if ((v4 & 4) == 0)
      goto LABEL_16;
    goto LABEL_57;
  }
LABEL_56:
  v23 = *((_QWORD *)a2 + 1);
  v5 |= 1uLL;
  *((_QWORD *)this + 24) = v5;
  *((_QWORD *)this + 1) = v23;
  v4 = *((_QWORD *)a2 + 24);
  if ((v4 & 4) == 0)
  {
LABEL_16:
    if ((v4 & 2) == 0)
      goto LABEL_17;
    goto LABEL_58;
  }
LABEL_57:
  v24 = *((_QWORD *)a2 + 3);
  v5 |= 4uLL;
  *((_QWORD *)this + 24) = v5;
  *((_QWORD *)this + 3) = v24;
  v4 = *((_QWORD *)a2 + 24);
  if ((v4 & 2) == 0)
  {
LABEL_17:
    if ((v4 & 0x80) == 0)
      goto LABEL_18;
    goto LABEL_59;
  }
LABEL_58:
  v25 = *((_QWORD *)a2 + 2);
  v5 |= 2uLL;
  *((_QWORD *)this + 24) = v5;
  *((_QWORD *)this + 2) = v25;
  v4 = *((_QWORD *)a2 + 24);
  if ((v4 & 0x80) == 0)
  {
LABEL_18:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_19;
    goto LABEL_60;
  }
LABEL_59:
  v26 = *((_DWORD *)a2 + 17);
  v5 |= 0x80uLL;
  *((_QWORD *)this + 24) = v5;
  *((_DWORD *)this + 17) = v26;
  v4 = *((_QWORD *)a2 + 24);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_20;
    goto LABEL_61;
  }
LABEL_60:
  v27 = *((_DWORD *)a2 + 39);
  v5 |= 0x20000000uLL;
  *((_QWORD *)this + 24) = v5;
  *((_DWORD *)this + 39) = v27;
  v4 = *((_QWORD *)a2 + 24);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_20:
    if ((v4 & 0x4000) == 0)
      goto LABEL_21;
    goto LABEL_62;
  }
LABEL_61:
  v28 = *((_DWORD *)a2 + 36);
  v5 |= 0x4000000uLL;
  *((_QWORD *)this + 24) = v5;
  *((_DWORD *)this + 36) = v28;
  v4 = *((_QWORD *)a2 + 24);
  if ((v4 & 0x4000) == 0)
  {
LABEL_21:
    if ((v4 & 0x400000) == 0)
      goto LABEL_22;
    goto LABEL_63;
  }
LABEL_62:
  v29 = *((_DWORD *)a2 + 24);
  v5 |= 0x4000uLL;
  *((_QWORD *)this + 24) = v5;
  *((_DWORD *)this + 24) = v29;
  v4 = *((_QWORD *)a2 + 24);
  if ((v4 & 0x400000) == 0)
  {
LABEL_22:
    if ((v4 & 0x200000) == 0)
      goto LABEL_23;
    goto LABEL_64;
  }
LABEL_63:
  v30 = *((_DWORD *)a2 + 32);
  v5 |= 0x400000uLL;
  *((_QWORD *)this + 24) = v5;
  *((_DWORD *)this + 32) = v30;
  v4 = *((_QWORD *)a2 + 24);
  if ((v4 & 0x200000) == 0)
  {
LABEL_23:
    if ((v4 & 0x800000) == 0)
      goto LABEL_24;
    goto LABEL_65;
  }
LABEL_64:
  v31 = *((_DWORD *)a2 + 31);
  v5 |= 0x200000uLL;
  *((_QWORD *)this + 24) = v5;
  *((_DWORD *)this + 31) = v31;
  v4 = *((_QWORD *)a2 + 24);
  if ((v4 & 0x800000) == 0)
  {
LABEL_24:
    if ((v4 & 0x10) == 0)
      goto LABEL_25;
    goto LABEL_66;
  }
LABEL_65:
  v32 = *((_DWORD *)a2 + 33);
  v5 |= 0x800000uLL;
  *((_QWORD *)this + 24) = v5;
  *((_DWORD *)this + 33) = v32;
  v4 = *((_QWORD *)a2 + 24);
  if ((v4 & 0x10) == 0)
  {
LABEL_25:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_26;
    goto LABEL_67;
  }
LABEL_66:
  v33 = *((_QWORD *)a2 + 6);
  v5 |= 0x10uLL;
  *((_QWORD *)this + 24) = v5;
  *((_QWORD *)this + 6) = v33;
  v4 = *((_QWORD *)a2 + 24);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_26:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_27;
    goto LABEL_68;
  }
LABEL_67:
  v34 = *((_DWORD *)a2 + 45);
  v5 |= 0x800000000uLL;
  *((_QWORD *)this + 24) = v5;
  *((_DWORD *)this + 45) = v34;
  v4 = *((_QWORD *)a2 + 24);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_27:
    if ((v4 & 0x100000) == 0)
      goto LABEL_28;
    goto LABEL_69;
  }
LABEL_68:
  v35 = *((_DWORD *)a2 + 40);
  v5 |= 0x40000000uLL;
  *((_QWORD *)this + 24) = v5;
  *((_DWORD *)this + 40) = v35;
  v4 = *((_QWORD *)a2 + 24);
  if ((v4 & 0x100000) == 0)
  {
LABEL_28:
    if ((v4 & 0x80000) == 0)
      goto LABEL_29;
LABEL_70:
    v37 = *((_DWORD *)a2 + 29);
    v5 |= 0x80000uLL;
    *((_QWORD *)this + 24) = v5;
    *((_DWORD *)this + 29) = v37;
    if ((*((_QWORD *)a2 + 24) & 0x40000) == 0)
      goto LABEL_31;
    goto LABEL_30;
  }
LABEL_69:
  v36 = *((_DWORD *)a2 + 30);
  v5 |= 0x100000uLL;
  *((_QWORD *)this + 24) = v5;
  *((_DWORD *)this + 30) = v36;
  v4 = *((_QWORD *)a2 + 24);
  if ((v4 & 0x80000) != 0)
    goto LABEL_70;
LABEL_29:
  if ((v4 & 0x40000) != 0)
  {
LABEL_30:
    v8 = *((_DWORD *)a2 + 28);
    *((_QWORD *)this + 24) = v5 | 0x40000;
    *((_DWORD *)this + 28) = v8;
  }
LABEL_31:
  if (*((_QWORD *)a2 + 4))
  {
    v9 = operator new();
    v10 = CMMsl::VehicularFlagsData::VehicularFlagsData(v9, *((const CMMsl::VehicularFlagsData **)a2 + 4));
    v11 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v10;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = *((_QWORD *)a2 + 24);
  if ((v12 & 0x400) != 0)
  {
    v38 = *((_DWORD *)a2 + 20);
    *((_QWORD *)this + 24) |= 0x400uLL;
    *((_DWORD *)this + 20) = v38;
    v12 = *((_QWORD *)a2 + 24);
    if ((v12 & 0x200) == 0)
    {
LABEL_36:
      if ((v12 & 0x2000000) == 0)
        goto LABEL_37;
      goto LABEL_74;
    }
  }
  else if ((v12 & 0x200) == 0)
  {
    goto LABEL_36;
  }
  v39 = *((_DWORD *)a2 + 19);
  *((_QWORD *)this + 24) |= 0x200uLL;
  *((_DWORD *)this + 19) = v39;
  v12 = *((_QWORD *)a2 + 24);
  if ((v12 & 0x2000000) == 0)
  {
LABEL_37:
    if ((v12 & 0x1000000000) == 0)
      goto LABEL_38;
    goto LABEL_75;
  }
LABEL_74:
  v40 = *((_DWORD *)a2 + 35);
  *((_QWORD *)this + 24) |= 0x2000000uLL;
  *((_DWORD *)this + 35) = v40;
  v12 = *((_QWORD *)a2 + 24);
  if ((v12 & 0x1000000000) == 0)
  {
LABEL_38:
    if ((v12 & 0x20) == 0)
      goto LABEL_39;
    goto LABEL_76;
  }
LABEL_75:
  v41 = *((_DWORD *)a2 + 46);
  *((_QWORD *)this + 24) |= 0x1000000000uLL;
  *((_DWORD *)this + 46) = v41;
  v12 = *((_QWORD *)a2 + 24);
  if ((v12 & 0x20) == 0)
  {
LABEL_39:
    if ((v12 & 0x10000000) == 0)
      goto LABEL_40;
    goto LABEL_77;
  }
LABEL_76:
  v42 = *((_QWORD *)a2 + 7);
  *((_QWORD *)this + 24) |= 0x20uLL;
  *((_QWORD *)this + 7) = v42;
  v12 = *((_QWORD *)a2 + 24);
  if ((v12 & 0x10000000) == 0)
  {
LABEL_40:
    if ((v12 & 0x2000000000) == 0)
      goto LABEL_41;
    goto LABEL_78;
  }
LABEL_77:
  v43 = *((_DWORD *)a2 + 38);
  *((_QWORD *)this + 24) |= 0x10000000uLL;
  *((_DWORD *)this + 38) = v43;
  v12 = *((_QWORD *)a2 + 24);
  if ((v12 & 0x2000000000) == 0)
  {
LABEL_41:
    if ((v12 & 0x40) == 0)
      goto LABEL_42;
    goto LABEL_79;
  }
LABEL_78:
  v44 = *((_DWORD *)a2 + 47);
  *((_QWORD *)this + 24) |= 0x2000000000uLL;
  *((_DWORD *)this + 47) = v44;
  v12 = *((_QWORD *)a2 + 24);
  if ((v12 & 0x40) == 0)
  {
LABEL_42:
    if ((v12 & 0x80000000) == 0)
      goto LABEL_43;
    goto LABEL_80;
  }
LABEL_79:
  v45 = *((_DWORD *)a2 + 16);
  *((_QWORD *)this + 24) |= 0x40uLL;
  *((_DWORD *)this + 16) = v45;
  v12 = *((_QWORD *)a2 + 24);
  if ((v12 & 0x80000000) == 0)
  {
LABEL_43:
    if ((v12 & 0x100000000) == 0)
      goto LABEL_44;
    goto LABEL_81;
  }
LABEL_80:
  v46 = *((_DWORD *)a2 + 41);
  *((_QWORD *)this + 24) |= 0x80000000uLL;
  *((_DWORD *)this + 41) = v46;
  v12 = *((_QWORD *)a2 + 24);
  if ((v12 & 0x100000000) == 0)
  {
LABEL_44:
    if ((v12 & 0x200000000) == 0)
      goto LABEL_45;
LABEL_82:
    v48 = *((_DWORD *)a2 + 43);
    *((_QWORD *)this + 24) |= 0x200000000uLL;
    *((_DWORD *)this + 43) = v48;
    if ((*((_QWORD *)a2 + 24) & 0x400000000) == 0)
      return this;
    goto LABEL_46;
  }
LABEL_81:
  v47 = *((_DWORD *)a2 + 42);
  *((_QWORD *)this + 24) |= 0x100000000uLL;
  *((_DWORD *)this + 42) = v47;
  v12 = *((_QWORD *)a2 + 24);
  if ((v12 & 0x200000000) != 0)
    goto LABEL_82;
LABEL_45:
  if ((v12 & 0x400000000) != 0)
  {
LABEL_46:
    v13 = *((_DWORD *)a2 + 44);
    *((_QWORD *)this + 24) |= 0x400000000uLL;
    *((_DWORD *)this + 44) = v13;
  }
  return this;
}

CMMsl *CMMsl::MotionStateUpdate::operator=(CMMsl *a1, const CMMsl::MotionStateUpdate *a2)
{
  CMMsl::MotionStateUpdate *v3;
  float v4;
  uint64_t v5;
  _QWORD v7[4];
  uint64_t v8;

  if (a1 != a2)
  {
    CMMsl::MotionStateUpdate::MotionStateUpdate((CMMsl::MotionStateUpdate *)v7, a2);
    v4 = CMMsl::swap(a1, (CMMsl::MotionStateUpdate *)v7, v3);
    v5 = v8;
    v7[0] = &off_25135F580;
    v8 = 0;
    if (v5)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v5 + 8))(v5, v4);
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::MotionStateUpdate *a2, CMMsl::MotionStateUpdate *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float result;

  v3 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = *((_QWORD *)a2 + 24);
  *((_QWORD *)a2 + 24) = v3;
  LODWORD(v3) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v3;
  LODWORD(v3) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v3;
  LODWORD(v3) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v3;
  LODWORD(v3) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v3;
  LODWORD(v3) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v3;
  LODWORD(v3) = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v3;
  LODWORD(v3) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v3;
  LODWORD(v3) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v3;
  LODWORD(v3) = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v3;
  v4 = *((_QWORD *)this + 3);
  v5 = *((_QWORD *)this + 4);
  v6 = *((_QWORD *)a2 + 4);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)this + 4) = v6;
  *((_QWORD *)a2 + 3) = v4;
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v7;
  LODWORD(v7) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v7;
  LODWORD(v7) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v7;
  v8 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v8;
  LODWORD(v8) = *((_DWORD *)this + 45);
  *((_DWORD *)this + 45) = *((_DWORD *)a2 + 45);
  *((_DWORD *)a2 + 45) = v8;
  LODWORD(v8) = *((_DWORD *)this + 40);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
  *((_DWORD *)a2 + 40) = v8;
  LODWORD(v8) = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v8;
  LODWORD(v8) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v8;
  LODWORD(v8) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  v9 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v9;
  v10 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v10;
  LODWORD(v10) = *((_DWORD *)this + 39);
  *((_DWORD *)this + 39) = *((_DWORD *)a2 + 39);
  *((_DWORD *)a2 + 39) = v10;
  LODWORD(v10) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v10;
  LODWORD(v10) = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v10;
  LODWORD(v10) = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v10;
  LODWORD(v10) = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v10;
  *((_DWORD *)a2 + 28) = v8;
  *((_QWORD *)a2 + 4) = v5;
  LODWORD(v10) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v10;
  LODWORD(v10) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v10;
  LODWORD(v10) = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v10;
  LODWORD(v8) = *((_DWORD *)this + 46);
  *((_DWORD *)this + 46) = *((_DWORD *)a2 + 46);
  *((_DWORD *)a2 + 46) = v8;
  v11 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v11;
  LODWORD(v11) = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v11;
  LODWORD(v11) = *((_DWORD *)this + 47);
  *((_DWORD *)this + 47) = *((_DWORD *)a2 + 47);
  *((_DWORD *)a2 + 47) = v11;
  LODWORD(v11) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v11;
  LODWORD(v10) = *((_DWORD *)this + 41);
  *((_DWORD *)this + 41) = *((_DWORD *)a2 + 41);
  *((_DWORD *)a2 + 41) = v10;
  LODWORD(v10) = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v10;
  result = *((float *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((float *)a2 + 43) = result;
  LODWORD(v11) = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v11;
  return result;
}

uint64_t CMMsl::MotionStateUpdate::MotionStateUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_25135F580;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a2 + 192) = 0;
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_QWORD *)(a1 + 32) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  return a1;
}

CMMsl *CMMsl::MotionStateUpdate::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::MotionStateUpdate *v3;
  float v4;
  uint64_t v5;
  _QWORD v7[4];
  uint64_t v8;

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::MotionStateUpdate::MotionStateUpdate((uint64_t)v7, a2);
    v4 = CMMsl::swap(a1, (CMMsl::MotionStateUpdate *)v7, v3);
    v5 = v8;
    v7[0] = &off_25135F580;
    v8 = 0;
    if (v5)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v5 + 8))(v5, v4);
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

uint64_t CMMsl::MotionStateUpdate::formatText(CMMsl::MotionStateUpdate *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 0x40) != 0)
  {
    PB::TextFormatter::format(a2, "alsLux");
    v5 = *((_QWORD *)this + 24);
    if ((v5 & 0x80) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0)
        goto LABEL_4;
      goto LABEL_46;
    }
  }
  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "caltype");
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "confidence");
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 0x400) == 0)
      goto LABEL_6;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "drivingArmLikelihoodSum", *((float *)this + 19));
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 0x400) == 0)
  {
LABEL_6:
    if ((v5 & 0x800) == 0)
      goto LABEL_7;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "drivingStowedLikelihoodSum", *((float *)this + 20));
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 0x800) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0)
      goto LABEL_8;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "exitState");
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 0x1000) == 0)
      goto LABEL_9;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "hidTimestamp", *((double *)this + 1));
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 0x1000) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "isMoving");
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 0x2000) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000) == 0)
      goto LABEL_11;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "isVehicular");
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 0x4000) == 0)
  {
LABEL_11:
    if ((v5 & 0x8000) == 0)
      goto LABEL_12;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "machineFrequency", *((float *)this + 24));
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 0x8000) == 0)
  {
LABEL_12:
    if ((v5 & 0x10000) == 0)
      goto LABEL_13;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "motionType");
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 0x10000) == 0)
  {
LABEL_13:
    if ((v5 & 0x20000) == 0)
      goto LABEL_14;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "mounted");
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 0x20000) == 0)
  {
LABEL_14:
    if ((v5 & 2) == 0)
      goto LABEL_15;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "mountedConfidence");
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 2) == 0)
  {
LABEL_15:
    if ((v5 & 0x40000) == 0)
      goto LABEL_16;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "now");
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 0x40000) == 0)
  {
LABEL_16:
    if ((v5 & 0x80000) == 0)
      goto LABEL_17;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "rawConfidence");
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 0x80000) == 0)
  {
LABEL_17:
    if ((v5 & 0x100000) == 0)
      goto LABEL_18;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "rawIsVehicular");
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 0x100000) == 0)
  {
LABEL_18:
    if ((v5 & 0x200000) == 0)
      goto LABEL_19;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "rawMotionType");
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 0x200000) == 0)
  {
LABEL_19:
    if ((v5 & 0x400000) == 0)
      goto LABEL_20;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "rowStrokeAmplitude", *((float *)this + 31));
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 0x400000) == 0)
  {
LABEL_20:
    if ((v5 & 0x800000) == 0)
      goto LABEL_21;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "rowStrokeFrequency", *((float *)this + 32));
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 0x800000) == 0)
  {
LABEL_21:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_22;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "rowStrokePower", *((float *)this + 33));
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_22:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_23;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "seq");
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_23:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_24;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "ssLikelihoodSum", *((float *)this + 35));
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_24:
    if ((v5 & 4) == 0)
      goto LABEL_25;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "standing");
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 4) == 0)
  {
LABEL_25:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_26;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "startTime");
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_27;
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(a2, "turn");
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_28;
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(a2, "typeYouth");
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_29;
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(a2, "vectorMagnitude", *((float *)this + 39));
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_30;
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(a2, "vehicleExitState");
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_31;
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(a2, "vehicleProbabilityLongTermMean0", *((float *)this + 41));
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_32;
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(a2, "vehicleProbabilityLongTermMean1", *((float *)this + 42));
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x400000000) == 0)
      goto LABEL_33;
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(a2, "vehicleProbabilityLongTermMean2", *((float *)this + 43));
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x800000000) == 0)
      goto LABEL_35;
    goto LABEL_34;
  }
LABEL_75:
  PB::TextFormatter::format(a2, "vehicleType");
  if ((*((_QWORD *)this + 24) & 0x800000000) != 0)
LABEL_34:
    PB::TextFormatter::format(a2, "vehicularConfidence");
LABEL_35:
  v6 = *((_QWORD *)this + 4);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "vehicularFlags");
  v7 = *((_QWORD *)this + 24);
  if ((v7 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "wallStartTime", *((double *)this + 5));
    v7 = *((_QWORD *)this + 24);
    if ((v7 & 0x10) == 0)
    {
LABEL_39:
      if ((v7 & 0x1000000000) == 0)
        goto LABEL_40;
      goto LABEL_79;
    }
  }
  else if ((v7 & 0x10) == 0)
  {
    goto LABEL_39;
  }
  PB::TextFormatter::format(a2, "workoutDetectionTime");
  v7 = *((_QWORD *)this + 24);
  if ((v7 & 0x1000000000) == 0)
  {
LABEL_40:
    if ((v7 & 0x20) == 0)
      goto LABEL_41;
LABEL_80:
    PB::TextFormatter::format(a2, "workoutEscalationTime");
    if ((*((_QWORD *)this + 24) & 0x2000000000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_42;
  }
LABEL_79:
  PB::TextFormatter::format(a2, "workoutDetectionType");
  v7 = *((_QWORD *)this + 24);
  if ((v7 & 0x20) != 0)
    goto LABEL_80;
LABEL_41:
  if ((v7 & 0x2000000000) != 0)
LABEL_42:
    PB::TextFormatter::format(a2, "youthClassificationReason");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MotionStateUpdate::readFrom(CMMsl::MotionStateUpdate *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  char v99;
  unsigned int v100;
  uint64_t v101;
  unint64_t v102;
  char v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  char v107;
  unsigned int v108;
  uint64_t v109;
  unint64_t v110;
  char v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  char v115;
  unsigned int v116;
  uint64_t v117;
  unint64_t v118;
  char v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  char v124;
  unsigned int v125;
  uint64_t v126;
  unint64_t v127;
  char v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  char v136;
  unsigned int v137;
  uint64_t v138;
  unint64_t v139;
  char v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  char v144;
  unsigned int v145;
  uint64_t v146;
  unint64_t v147;
  char v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  char v152;
  unsigned int v153;
  uint64_t v154;
  unint64_t v155;
  char v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  char v160;
  unsigned int v161;
  uint64_t v162;
  unint64_t v163;
  char v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  char v168;
  unsigned int v169;
  uint64_t v170;
  unint64_t v171;
  char v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  char v176;
  unsigned int v177;
  uint64_t v178;
  unint64_t v179;
  char v180;
  _DWORD *v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  char v189;
  unsigned int v190;
  uint64_t v191;
  unint64_t v192;
  char v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t v196;
  char v197;
  unsigned int v198;
  uint64_t v199;
  unint64_t v200;
  char v201;
  unint64_t v202;
  unint64_t v203;
  uint64_t v204;
  char v205;
  unsigned int v206;
  uint64_t v207;
  unint64_t v208;
  char v209;
  unint64_t v210;
  unint64_t v211;
  uint64_t v212;
  char v213;
  unsigned int v214;
  uint64_t v215;
  unint64_t v216;
  char v217;
  unint64_t v218;
  unint64_t v219;
  uint64_t v220;
  char v221;
  unsigned int v222;
  uint64_t v223;
  unint64_t v224;
  char v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  uint64_t v231;
  char v232;
  unsigned int v233;
  uint64_t v234;
  unint64_t v235;
  char v236;
  char v237;
  unsigned int v238;
  unint64_t v239;
  char v240;
  char v241;
  unsigned int v242;
  unint64_t v243;
  char v244;
  char v245;
  unsigned int v246;
  unint64_t v247;
  char v248;
  char v249;
  unsigned int v250;
  unint64_t v251;
  char v252;
  char v253;
  unsigned int v254;
  unint64_t v255;
  char v256;
  char v257;
  unsigned int v258;
  unint64_t v259;
  char v260;
  char v261;
  unsigned int v262;
  unint64_t v263;
  char v264;
  char v265;
  unsigned int v266;
  unint64_t v267;
  char v268;
  char v269;
  unsigned int v270;
  unint64_t v271;
  char v272;
  char v273;
  unsigned int v274;
  unint64_t v275;
  char v276;
  char v277;
  unsigned int v278;
  unint64_t v279;
  char v280;
  char v281;
  unsigned int v282;
  unint64_t v283;
  char v284;
  char v285;
  unsigned int v286;
  unint64_t v287;
  char v288;
  char v289;
  unsigned int v290;
  unint64_t v291;
  char v292;
  char v293;
  unsigned int v294;
  unint64_t v295;
  char v296;
  char v297;
  unsigned int v298;
  unint64_t v299;
  char v300;
  char v301;
  unsigned int v302;
  unint64_t v303;
  char v304;
  char v305;
  unsigned int v306;
  unint64_t v307;
  char v308;
  char v309;
  unsigned int v310;
  unint64_t v311;
  char v312;
  char v313;
  unsigned int v314;
  unint64_t v315;
  char v316;
  char v317;
  unsigned int v318;
  unint64_t v319;
  char v320;
  char v321;
  unsigned int v322;
  unint64_t v323;
  char v324;
  char v325;
  unsigned int v326;
  unint64_t v327;
  char v328;
  char v329;
  unsigned int v330;
  unint64_t v331;
  char v332;
  char v333;
  unsigned int v334;
  unint64_t v335;
  char v336;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      break;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_25:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_QWORD *)this + 24) |= 0x8000uLL;
        v21 = *((_QWORD *)a2 + 1);
        v22 = *((_QWORD *)a2 + 2);
        v23 = *(_QWORD *)a2;
        if (v21 <= 0xFFFFFFFFFFFFFFF5 && v21 + 10 <= v22)
        {
          v24 = 0;
          v25 = 0;
          v26 = 0;
          do
          {
            v27 = v21 + 1;
            *((_QWORD *)a2 + 1) = v21 + 1;
            v28 = *(_BYTE *)(v23 + v21);
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if ((v28 & 0x80) == 0)
              goto LABEL_452;
            v24 += 7;
            v21 = v27;
            v14 = v25++ > 8;
          }
          while (!v14);
LABEL_253:
          LODWORD(v26) = 0;
          goto LABEL_452;
        }
        v237 = 0;
        v238 = 0;
        v26 = 0;
        if (v22 <= v21)
          v22 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v22 == v21)
          {
            LODWORD(v26) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v239 = v21 + 1;
            v240 = *(_BYTE *)(v23 + v21);
            *((_QWORD *)a2 + 1) = v239;
            v26 |= (unint64_t)(v240 & 0x7F) << v237;
            if (v240 < 0)
            {
              v237 += 7;
              v21 = v239;
              v14 = v238++ > 8;
              if (v14)
                goto LABEL_253;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v26) = 0;
          }
          break;
        }
LABEL_452:
        *((_DWORD *)this + 25) = v26;
        goto LABEL_20;
      case 2u:
        *((_QWORD *)this + 24) |= 0x100uLL;
        v29 = *((_QWORD *)a2 + 1);
        v30 = *((_QWORD *)a2 + 2);
        v31 = *(_QWORD *)a2;
        if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
        {
          v32 = 0;
          v33 = 0;
          v34 = 0;
          do
          {
            v35 = v29 + 1;
            *((_QWORD *)a2 + 1) = v29 + 1;
            v36 = *(_BYTE *)(v31 + v29);
            v34 |= (unint64_t)(v36 & 0x7F) << v32;
            if ((v36 & 0x80) == 0)
              goto LABEL_455;
            v32 += 7;
            v29 = v35;
            v14 = v33++ > 8;
          }
          while (!v14);
LABEL_260:
          LODWORD(v34) = 0;
          goto LABEL_455;
        }
        v241 = 0;
        v242 = 0;
        v34 = 0;
        if (v30 <= v29)
          v30 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v30 == v29)
          {
            LODWORD(v34) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v243 = v29 + 1;
            v244 = *(_BYTE *)(v31 + v29);
            *((_QWORD *)a2 + 1) = v243;
            v34 |= (unint64_t)(v244 & 0x7F) << v241;
            if (v244 < 0)
            {
              v241 += 7;
              v29 = v243;
              v14 = v242++ > 8;
              if (v14)
                goto LABEL_260;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v34) = 0;
          }
          break;
        }
LABEL_455:
        *((_DWORD *)this + 18) = v34;
        goto LABEL_20;
      case 3u:
        *((_QWORD *)this + 24) |= 0x10000uLL;
        v37 = *((_QWORD *)a2 + 1);
        v38 = *((_QWORD *)a2 + 2);
        v39 = *(_QWORD *)a2;
        if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
        {
          v40 = 0;
          v41 = 0;
          v42 = 0;
          do
          {
            v43 = v37 + 1;
            *((_QWORD *)a2 + 1) = v37 + 1;
            v44 = *(_BYTE *)(v39 + v37);
            v42 |= (unint64_t)(v44 & 0x7F) << v40;
            if ((v44 & 0x80) == 0)
              goto LABEL_458;
            v40 += 7;
            v37 = v43;
            v14 = v41++ > 8;
          }
          while (!v14);
LABEL_267:
          LODWORD(v42) = 0;
          goto LABEL_458;
        }
        v245 = 0;
        v246 = 0;
        v42 = 0;
        if (v38 <= v37)
          v38 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v38 == v37)
          {
            LODWORD(v42) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v247 = v37 + 1;
            v248 = *(_BYTE *)(v39 + v37);
            *((_QWORD *)a2 + 1) = v247;
            v42 |= (unint64_t)(v248 & 0x7F) << v245;
            if (v248 < 0)
            {
              v245 += 7;
              v37 = v247;
              v14 = v246++ > 8;
              if (v14)
                goto LABEL_267;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v42) = 0;
          }
          break;
        }
LABEL_458:
        *((_DWORD *)this + 26) = v42;
        goto LABEL_20;
      case 4u:
        *((_QWORD *)this + 24) |= 0x20000uLL;
        v45 = *((_QWORD *)a2 + 1);
        v46 = *((_QWORD *)a2 + 2);
        v47 = *(_QWORD *)a2;
        if (v45 <= 0xFFFFFFFFFFFFFFF5 && v45 + 10 <= v46)
        {
          v48 = 0;
          v49 = 0;
          v50 = 0;
          do
          {
            v51 = v45 + 1;
            *((_QWORD *)a2 + 1) = v45 + 1;
            v52 = *(_BYTE *)(v47 + v45);
            v50 |= (unint64_t)(v52 & 0x7F) << v48;
            if ((v52 & 0x80) == 0)
              goto LABEL_461;
            v48 += 7;
            v45 = v51;
            v14 = v49++ > 8;
          }
          while (!v14);
LABEL_274:
          LODWORD(v50) = 0;
          goto LABEL_461;
        }
        v249 = 0;
        v250 = 0;
        v50 = 0;
        if (v46 <= v45)
          v46 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v46 == v45)
          {
            LODWORD(v50) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v251 = v45 + 1;
            v252 = *(_BYTE *)(v47 + v45);
            *((_QWORD *)a2 + 1) = v251;
            v50 |= (unint64_t)(v252 & 0x7F) << v249;
            if (v252 < 0)
            {
              v249 += 7;
              v45 = v251;
              v14 = v250++ > 8;
              if (v14)
                goto LABEL_274;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v50) = 0;
          }
          break;
        }
LABEL_461:
        *((_DWORD *)this + 27) = v50;
        goto LABEL_20;
      case 5u:
        *((_QWORD *)this + 24) |= 0x800uLL;
        v53 = *((_QWORD *)a2 + 1);
        v54 = *((_QWORD *)a2 + 2);
        v55 = *(_QWORD *)a2;
        if (v53 <= 0xFFFFFFFFFFFFFFF5 && v53 + 10 <= v54)
        {
          v56 = 0;
          v57 = 0;
          v58 = 0;
          do
          {
            v59 = v53 + 1;
            *((_QWORD *)a2 + 1) = v53 + 1;
            v60 = *(_BYTE *)(v55 + v53);
            v58 |= (unint64_t)(v60 & 0x7F) << v56;
            if ((v60 & 0x80) == 0)
              goto LABEL_464;
            v56 += 7;
            v53 = v59;
            v14 = v57++ > 8;
          }
          while (!v14);
LABEL_281:
          LODWORD(v58) = 0;
          goto LABEL_464;
        }
        v253 = 0;
        v254 = 0;
        v58 = 0;
        if (v54 <= v53)
          v54 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v54 == v53)
          {
            LODWORD(v58) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v255 = v53 + 1;
            v256 = *(_BYTE *)(v55 + v53);
            *((_QWORD *)a2 + 1) = v255;
            v58 |= (unint64_t)(v256 & 0x7F) << v253;
            if (v256 < 0)
            {
              v253 += 7;
              v53 = v255;
              v14 = v254++ > 8;
              if (v14)
                goto LABEL_281;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v58) = 0;
          }
          break;
        }
LABEL_464:
        *((_DWORD *)this + 21) = v58;
        goto LABEL_20;
      case 6u:
        *((_QWORD *)this + 24) |= 0x8000000uLL;
        v61 = *((_QWORD *)a2 + 1);
        v62 = *((_QWORD *)a2 + 2);
        v63 = *(_QWORD *)a2;
        if (v61 <= 0xFFFFFFFFFFFFFFF5 && v61 + 10 <= v62)
        {
          v64 = 0;
          v65 = 0;
          v66 = 0;
          do
          {
            v67 = v61 + 1;
            *((_QWORD *)a2 + 1) = v61 + 1;
            v68 = *(_BYTE *)(v63 + v61);
            v66 |= (unint64_t)(v68 & 0x7F) << v64;
            if ((v68 & 0x80) == 0)
              goto LABEL_467;
            v64 += 7;
            v61 = v67;
            v14 = v65++ > 8;
          }
          while (!v14);
LABEL_288:
          LODWORD(v66) = 0;
          goto LABEL_467;
        }
        v257 = 0;
        v258 = 0;
        v66 = 0;
        if (v62 <= v61)
          v62 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v62 == v61)
          {
            LODWORD(v66) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v259 = v61 + 1;
            v260 = *(_BYTE *)(v63 + v61);
            *((_QWORD *)a2 + 1) = v259;
            v66 |= (unint64_t)(v260 & 0x7F) << v257;
            if (v260 < 0)
            {
              v257 += 7;
              v61 = v259;
              v14 = v258++ > 8;
              if (v14)
                goto LABEL_288;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v66) = 0;
          }
          break;
        }
LABEL_467:
        *((_DWORD *)this + 37) = v66;
        goto LABEL_20;
      case 7u:
        *((_QWORD *)this + 24) |= 0x2000uLL;
        v69 = *((_QWORD *)a2 + 1);
        v70 = *((_QWORD *)a2 + 2);
        v71 = *(_QWORD *)a2;
        if (v69 <= 0xFFFFFFFFFFFFFFF5 && v69 + 10 <= v70)
        {
          v72 = 0;
          v73 = 0;
          v74 = 0;
          do
          {
            v75 = v69 + 1;
            *((_QWORD *)a2 + 1) = v69 + 1;
            v76 = *(_BYTE *)(v71 + v69);
            v74 |= (unint64_t)(v76 & 0x7F) << v72;
            if ((v76 & 0x80) == 0)
              goto LABEL_470;
            v72 += 7;
            v69 = v75;
            v14 = v73++ > 8;
          }
          while (!v14);
LABEL_295:
          LODWORD(v74) = 0;
          goto LABEL_470;
        }
        v261 = 0;
        v262 = 0;
        v74 = 0;
        if (v70 <= v69)
          v70 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v70 == v69)
          {
            LODWORD(v74) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v263 = v69 + 1;
            v264 = *(_BYTE *)(v71 + v69);
            *((_QWORD *)a2 + 1) = v263;
            v74 |= (unint64_t)(v264 & 0x7F) << v261;
            if (v264 < 0)
            {
              v261 += 7;
              v69 = v263;
              v14 = v262++ > 8;
              if (v14)
                goto LABEL_295;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v74) = 0;
          }
          break;
        }
LABEL_470:
        *((_DWORD *)this + 23) = v74;
        goto LABEL_20;
      case 8u:
        *((_QWORD *)this + 24) |= 0x1000uLL;
        v77 = *((_QWORD *)a2 + 1);
        v78 = *((_QWORD *)a2 + 2);
        v79 = *(_QWORD *)a2;
        if (v77 <= 0xFFFFFFFFFFFFFFF5 && v77 + 10 <= v78)
        {
          v80 = 0;
          v81 = 0;
          v82 = 0;
          do
          {
            v83 = v77 + 1;
            *((_QWORD *)a2 + 1) = v77 + 1;
            v84 = *(_BYTE *)(v79 + v77);
            v82 |= (unint64_t)(v84 & 0x7F) << v80;
            if ((v84 & 0x80) == 0)
              goto LABEL_473;
            v80 += 7;
            v77 = v83;
            v14 = v81++ > 8;
          }
          while (!v14);
LABEL_302:
          LODWORD(v82) = 0;
          goto LABEL_473;
        }
        v265 = 0;
        v266 = 0;
        v82 = 0;
        if (v78 <= v77)
          v78 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v78 == v77)
          {
            LODWORD(v82) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v267 = v77 + 1;
            v268 = *(_BYTE *)(v79 + v77);
            *((_QWORD *)a2 + 1) = v267;
            v82 |= (unint64_t)(v268 & 0x7F) << v265;
            if (v268 < 0)
            {
              v265 += 7;
              v77 = v267;
              v14 = v266++ > 8;
              if (v14)
                goto LABEL_302;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v82) = 0;
          }
          break;
        }
LABEL_473:
        *((_DWORD *)this + 22) = v82;
        goto LABEL_20;
      case 9u:
        *((_QWORD *)this + 24) |= 0x1000000uLL;
        v85 = *((_QWORD *)a2 + 1);
        v86 = *((_QWORD *)a2 + 2);
        v87 = *(_QWORD *)a2;
        if (v85 <= 0xFFFFFFFFFFFFFFF5 && v85 + 10 <= v86)
        {
          v88 = 0;
          v89 = 0;
          v90 = 0;
          do
          {
            v91 = v85 + 1;
            *((_QWORD *)a2 + 1) = v85 + 1;
            v92 = *(_BYTE *)(v87 + v85);
            v90 |= (unint64_t)(v92 & 0x7F) << v88;
            if ((v92 & 0x80) == 0)
              goto LABEL_476;
            v88 += 7;
            v85 = v91;
            v14 = v89++ > 8;
          }
          while (!v14);
LABEL_309:
          LODWORD(v90) = 0;
          goto LABEL_476;
        }
        v269 = 0;
        v270 = 0;
        v90 = 0;
        if (v86 <= v85)
          v86 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v86 == v85)
          {
            LODWORD(v90) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v271 = v85 + 1;
            v272 = *(_BYTE *)(v87 + v85);
            *((_QWORD *)a2 + 1) = v271;
            v90 |= (unint64_t)(v272 & 0x7F) << v269;
            if (v272 < 0)
            {
              v269 += 7;
              v85 = v271;
              v14 = v270++ > 8;
              if (v14)
                goto LABEL_309;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v90) = 0;
          }
          break;
        }
LABEL_476:
        *((_DWORD *)this + 34) = v90;
        goto LABEL_20;
      case 0xAu:
        *((_QWORD *)this + 24) |= 8uLL;
        v93 = *((_QWORD *)a2 + 1);
        if (v93 > 0xFFFFFFFFFFFFFFF7 || v93 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_239;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v93);
        goto LABEL_96;
      case 0xBu:
        *((_QWORD *)this + 24) |= 1uLL;
        v94 = *((_QWORD *)a2 + 1);
        if (v94 > 0xFFFFFFFFFFFFFFF7 || v94 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_239;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v94);
LABEL_96:
        v95 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_424;
      case 0xCu:
        *((_QWORD *)this + 24) |= 4uLL;
        v96 = *((_QWORD *)a2 + 1);
        v97 = *((_QWORD *)a2 + 2);
        v98 = *(_QWORD *)a2;
        if (v96 <= 0xFFFFFFFFFFFFFFF5 && v96 + 10 <= v97)
        {
          v99 = 0;
          v100 = 0;
          v101 = 0;
          do
          {
            v102 = v96 + 1;
            *((_QWORD *)a2 + 1) = v96 + 1;
            v103 = *(_BYTE *)(v98 + v96);
            v101 |= (unint64_t)(v103 & 0x7F) << v99;
            if ((v103 & 0x80) == 0)
              goto LABEL_479;
            v99 += 7;
            v96 = v102;
            v14 = v100++ > 8;
          }
          while (!v14);
LABEL_316:
          v101 = 0;
          goto LABEL_479;
        }
        v273 = 0;
        v274 = 0;
        v101 = 0;
        if (v97 <= v96)
          v97 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v97 == v96)
          {
            v101 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v275 = v96 + 1;
            v276 = *(_BYTE *)(v98 + v96);
            *((_QWORD *)a2 + 1) = v275;
            v101 |= (unint64_t)(v276 & 0x7F) << v273;
            if (v276 < 0)
            {
              v273 += 7;
              v96 = v275;
              v14 = v274++ > 8;
              if (v14)
                goto LABEL_316;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v101 = 0;
          }
          break;
        }
LABEL_479:
        *((_QWORD *)this + 3) = v101;
        goto LABEL_20;
      case 0xDu:
        *((_QWORD *)this + 24) |= 2uLL;
        v104 = *((_QWORD *)a2 + 1);
        v105 = *((_QWORD *)a2 + 2);
        v106 = *(_QWORD *)a2;
        if (v104 <= 0xFFFFFFFFFFFFFFF5 && v104 + 10 <= v105)
        {
          v107 = 0;
          v108 = 0;
          v109 = 0;
          do
          {
            v110 = v104 + 1;
            *((_QWORD *)a2 + 1) = v104 + 1;
            v111 = *(_BYTE *)(v106 + v104);
            v109 |= (unint64_t)(v111 & 0x7F) << v107;
            if ((v111 & 0x80) == 0)
              goto LABEL_482;
            v107 += 7;
            v104 = v110;
            v14 = v108++ > 8;
          }
          while (!v14);
LABEL_323:
          v109 = 0;
          goto LABEL_482;
        }
        v277 = 0;
        v278 = 0;
        v109 = 0;
        if (v105 <= v104)
          v105 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v105 == v104)
          {
            v109 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v279 = v104 + 1;
            v280 = *(_BYTE *)(v106 + v104);
            *((_QWORD *)a2 + 1) = v279;
            v109 |= (unint64_t)(v280 & 0x7F) << v277;
            if (v280 < 0)
            {
              v277 += 7;
              v104 = v279;
              v14 = v278++ > 8;
              if (v14)
                goto LABEL_323;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v109 = 0;
          }
          break;
        }
LABEL_482:
        *((_QWORD *)this + 2) = v109;
        goto LABEL_20;
      case 0xEu:
        *((_QWORD *)this + 24) |= 0x80uLL;
        v112 = *((_QWORD *)a2 + 1);
        v113 = *((_QWORD *)a2 + 2);
        v114 = *(_QWORD *)a2;
        if (v112 <= 0xFFFFFFFFFFFFFFF5 && v112 + 10 <= v113)
        {
          v115 = 0;
          v116 = 0;
          v117 = 0;
          do
          {
            v118 = v112 + 1;
            *((_QWORD *)a2 + 1) = v112 + 1;
            v119 = *(_BYTE *)(v114 + v112);
            v117 |= (unint64_t)(v119 & 0x7F) << v115;
            if ((v119 & 0x80) == 0)
              goto LABEL_485;
            v115 += 7;
            v112 = v118;
            v14 = v116++ > 8;
          }
          while (!v14);
LABEL_330:
          LODWORD(v117) = 0;
          goto LABEL_485;
        }
        v281 = 0;
        v282 = 0;
        v117 = 0;
        if (v113 <= v112)
          v113 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v113 == v112)
          {
            LODWORD(v117) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v283 = v112 + 1;
            v284 = *(_BYTE *)(v114 + v112);
            *((_QWORD *)a2 + 1) = v283;
            v117 |= (unint64_t)(v284 & 0x7F) << v281;
            if (v284 < 0)
            {
              v281 += 7;
              v112 = v283;
              v14 = v282++ > 8;
              if (v14)
                goto LABEL_330;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v117) = 0;
          }
          break;
        }
LABEL_485:
        *((_DWORD *)this + 17) = v117;
        goto LABEL_20;
      case 0xFu:
        *((_QWORD *)this + 24) |= 0x20000000uLL;
        v120 = *((_QWORD *)a2 + 1);
        if (v120 > 0xFFFFFFFFFFFFFFFBLL || v120 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_239;
        *((_DWORD *)this + 39) = *(_DWORD *)(*(_QWORD *)a2 + v120);
        goto LABEL_423;
      case 0x10u:
        *((_QWORD *)this + 24) |= 0x4000000uLL;
        v121 = *((_QWORD *)a2 + 1);
        v122 = *((_QWORD *)a2 + 2);
        v123 = *(_QWORD *)a2;
        if (v121 <= 0xFFFFFFFFFFFFFFF5 && v121 + 10 <= v122)
        {
          v124 = 0;
          v125 = 0;
          v126 = 0;
          do
          {
            v127 = v121 + 1;
            *((_QWORD *)a2 + 1) = v121 + 1;
            v128 = *(_BYTE *)(v123 + v121);
            v126 |= (unint64_t)(v128 & 0x7F) << v124;
            if ((v128 & 0x80) == 0)
              goto LABEL_488;
            v124 += 7;
            v121 = v127;
            v14 = v125++ > 8;
          }
          while (!v14);
LABEL_337:
          LODWORD(v126) = 0;
          goto LABEL_488;
        }
        v285 = 0;
        v286 = 0;
        v126 = 0;
        if (v122 <= v121)
          v122 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v122 == v121)
          {
            LODWORD(v126) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v287 = v121 + 1;
            v288 = *(_BYTE *)(v123 + v121);
            *((_QWORD *)a2 + 1) = v287;
            v126 |= (unint64_t)(v288 & 0x7F) << v285;
            if (v288 < 0)
            {
              v285 += 7;
              v121 = v287;
              v14 = v286++ > 8;
              if (v14)
                goto LABEL_337;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v126) = 0;
          }
          break;
        }
LABEL_488:
        *((_DWORD *)this + 36) = v126;
        goto LABEL_20;
      case 0x11u:
        *((_QWORD *)this + 24) |= 0x4000uLL;
        v129 = *((_QWORD *)a2 + 1);
        if (v129 > 0xFFFFFFFFFFFFFFFBLL || v129 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_239;
        *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v129);
        goto LABEL_423;
      case 0x12u:
        *((_QWORD *)this + 24) |= 0x400000uLL;
        v130 = *((_QWORD *)a2 + 1);
        if (v130 > 0xFFFFFFFFFFFFFFFBLL || v130 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_239;
        *((_DWORD *)this + 32) = *(_DWORD *)(*(_QWORD *)a2 + v130);
        goto LABEL_423;
      case 0x13u:
        *((_QWORD *)this + 24) |= 0x200000uLL;
        v131 = *((_QWORD *)a2 + 1);
        if (v131 > 0xFFFFFFFFFFFFFFFBLL || v131 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_239;
        *((_DWORD *)this + 31) = *(_DWORD *)(*(_QWORD *)a2 + v131);
        goto LABEL_423;
      case 0x14u:
        *((_QWORD *)this + 24) |= 0x800000uLL;
        v132 = *((_QWORD *)a2 + 1);
        if (v132 > 0xFFFFFFFFFFFFFFFBLL || v132 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_239;
        *((_DWORD *)this + 33) = *(_DWORD *)(*(_QWORD *)a2 + v132);
        goto LABEL_423;
      case 0x15u:
        *((_QWORD *)this + 24) |= 0x10uLL;
        v133 = *((_QWORD *)a2 + 1);
        v134 = *((_QWORD *)a2 + 2);
        v135 = *(_QWORD *)a2;
        if (v133 <= 0xFFFFFFFFFFFFFFF5 && v133 + 10 <= v134)
        {
          v136 = 0;
          v137 = 0;
          v138 = 0;
          do
          {
            v139 = v133 + 1;
            *((_QWORD *)a2 + 1) = v133 + 1;
            v140 = *(_BYTE *)(v135 + v133);
            v138 |= (unint64_t)(v140 & 0x7F) << v136;
            if ((v140 & 0x80) == 0)
              goto LABEL_491;
            v136 += 7;
            v133 = v139;
            v14 = v137++ > 8;
          }
          while (!v14);
LABEL_344:
          v138 = 0;
          goto LABEL_491;
        }
        v289 = 0;
        v290 = 0;
        v138 = 0;
        if (v134 <= v133)
          v134 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v134 == v133)
          {
            v138 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v291 = v133 + 1;
            v292 = *(_BYTE *)(v135 + v133);
            *((_QWORD *)a2 + 1) = v291;
            v138 |= (unint64_t)(v292 & 0x7F) << v289;
            if (v292 < 0)
            {
              v289 += 7;
              v133 = v291;
              v14 = v290++ > 8;
              if (v14)
                goto LABEL_344;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v138 = 0;
          }
          break;
        }
LABEL_491:
        *((_QWORD *)this + 6) = v138;
        goto LABEL_20;
      case 0x16u:
        *((_QWORD *)this + 24) |= 0x800000000uLL;
        v141 = *((_QWORD *)a2 + 1);
        v142 = *((_QWORD *)a2 + 2);
        v143 = *(_QWORD *)a2;
        if (v141 <= 0xFFFFFFFFFFFFFFF5 && v141 + 10 <= v142)
        {
          v144 = 0;
          v145 = 0;
          v146 = 0;
          do
          {
            v147 = v141 + 1;
            *((_QWORD *)a2 + 1) = v141 + 1;
            v148 = *(_BYTE *)(v143 + v141);
            v146 |= (unint64_t)(v148 & 0x7F) << v144;
            if ((v148 & 0x80) == 0)
              goto LABEL_494;
            v144 += 7;
            v141 = v147;
            v14 = v145++ > 8;
          }
          while (!v14);
LABEL_351:
          LODWORD(v146) = 0;
          goto LABEL_494;
        }
        v293 = 0;
        v294 = 0;
        v146 = 0;
        if (v142 <= v141)
          v142 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v142 == v141)
          {
            LODWORD(v146) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v295 = v141 + 1;
            v296 = *(_BYTE *)(v143 + v141);
            *((_QWORD *)a2 + 1) = v295;
            v146 |= (unint64_t)(v296 & 0x7F) << v293;
            if (v296 < 0)
            {
              v293 += 7;
              v141 = v295;
              v14 = v294++ > 8;
              if (v14)
                goto LABEL_351;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v146) = 0;
          }
          break;
        }
LABEL_494:
        *((_DWORD *)this + 45) = v146;
        goto LABEL_20;
      case 0x17u:
        *((_QWORD *)this + 24) |= 0x40000000uLL;
        v149 = *((_QWORD *)a2 + 1);
        v150 = *((_QWORD *)a2 + 2);
        v151 = *(_QWORD *)a2;
        if (v149 <= 0xFFFFFFFFFFFFFFF5 && v149 + 10 <= v150)
        {
          v152 = 0;
          v153 = 0;
          v154 = 0;
          do
          {
            v155 = v149 + 1;
            *((_QWORD *)a2 + 1) = v149 + 1;
            v156 = *(_BYTE *)(v151 + v149);
            v154 |= (unint64_t)(v156 & 0x7F) << v152;
            if ((v156 & 0x80) == 0)
              goto LABEL_497;
            v152 += 7;
            v149 = v155;
            v14 = v153++ > 8;
          }
          while (!v14);
LABEL_358:
          LODWORD(v154) = 0;
          goto LABEL_497;
        }
        v297 = 0;
        v298 = 0;
        v154 = 0;
        if (v150 <= v149)
          v150 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v150 == v149)
          {
            LODWORD(v154) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v299 = v149 + 1;
            v300 = *(_BYTE *)(v151 + v149);
            *((_QWORD *)a2 + 1) = v299;
            v154 |= (unint64_t)(v300 & 0x7F) << v297;
            if (v300 < 0)
            {
              v297 += 7;
              v149 = v299;
              v14 = v298++ > 8;
              if (v14)
                goto LABEL_358;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v154) = 0;
          }
          break;
        }
LABEL_497:
        *((_DWORD *)this + 40) = v154;
        goto LABEL_20;
      case 0x18u:
        *((_QWORD *)this + 24) |= 0x100000uLL;
        v157 = *((_QWORD *)a2 + 1);
        v158 = *((_QWORD *)a2 + 2);
        v159 = *(_QWORD *)a2;
        if (v157 <= 0xFFFFFFFFFFFFFFF5 && v157 + 10 <= v158)
        {
          v160 = 0;
          v161 = 0;
          v162 = 0;
          do
          {
            v163 = v157 + 1;
            *((_QWORD *)a2 + 1) = v157 + 1;
            v164 = *(_BYTE *)(v159 + v157);
            v162 |= (unint64_t)(v164 & 0x7F) << v160;
            if ((v164 & 0x80) == 0)
              goto LABEL_500;
            v160 += 7;
            v157 = v163;
            v14 = v161++ > 8;
          }
          while (!v14);
LABEL_365:
          LODWORD(v162) = 0;
          goto LABEL_500;
        }
        v301 = 0;
        v302 = 0;
        v162 = 0;
        if (v158 <= v157)
          v158 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v158 == v157)
          {
            LODWORD(v162) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v303 = v157 + 1;
            v304 = *(_BYTE *)(v159 + v157);
            *((_QWORD *)a2 + 1) = v303;
            v162 |= (unint64_t)(v304 & 0x7F) << v301;
            if (v304 < 0)
            {
              v301 += 7;
              v157 = v303;
              v14 = v302++ > 8;
              if (v14)
                goto LABEL_365;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v162) = 0;
          }
          break;
        }
LABEL_500:
        *((_DWORD *)this + 30) = v162;
        goto LABEL_20;
      case 0x19u:
        *((_QWORD *)this + 24) |= 0x80000uLL;
        v165 = *((_QWORD *)a2 + 1);
        v166 = *((_QWORD *)a2 + 2);
        v167 = *(_QWORD *)a2;
        if (v165 <= 0xFFFFFFFFFFFFFFF5 && v165 + 10 <= v166)
        {
          v168 = 0;
          v169 = 0;
          v170 = 0;
          do
          {
            v171 = v165 + 1;
            *((_QWORD *)a2 + 1) = v165 + 1;
            v172 = *(_BYTE *)(v167 + v165);
            v170 |= (unint64_t)(v172 & 0x7F) << v168;
            if ((v172 & 0x80) == 0)
              goto LABEL_503;
            v168 += 7;
            v165 = v171;
            v14 = v169++ > 8;
          }
          while (!v14);
LABEL_372:
          LODWORD(v170) = 0;
          goto LABEL_503;
        }
        v305 = 0;
        v306 = 0;
        v170 = 0;
        if (v166 <= v165)
          v166 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v166 == v165)
          {
            LODWORD(v170) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v307 = v165 + 1;
            v308 = *(_BYTE *)(v167 + v165);
            *((_QWORD *)a2 + 1) = v307;
            v170 |= (unint64_t)(v308 & 0x7F) << v305;
            if (v308 < 0)
            {
              v305 += 7;
              v165 = v307;
              v14 = v306++ > 8;
              if (v14)
                goto LABEL_372;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v170) = 0;
          }
          break;
        }
LABEL_503:
        *((_DWORD *)this + 29) = v170;
        goto LABEL_20;
      case 0x1Au:
        *((_QWORD *)this + 24) |= 0x40000uLL;
        v173 = *((_QWORD *)a2 + 1);
        v174 = *((_QWORD *)a2 + 2);
        v175 = *(_QWORD *)a2;
        if (v173 <= 0xFFFFFFFFFFFFFFF5 && v173 + 10 <= v174)
        {
          v176 = 0;
          v177 = 0;
          v178 = 0;
          do
          {
            v179 = v173 + 1;
            *((_QWORD *)a2 + 1) = v173 + 1;
            v180 = *(_BYTE *)(v175 + v173);
            v178 |= (unint64_t)(v180 & 0x7F) << v176;
            if ((v180 & 0x80) == 0)
              goto LABEL_506;
            v176 += 7;
            v173 = v179;
            v14 = v177++ > 8;
          }
          while (!v14);
LABEL_379:
          LODWORD(v178) = 0;
          goto LABEL_506;
        }
        v309 = 0;
        v310 = 0;
        v178 = 0;
        if (v174 <= v173)
          v174 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v174 == v173)
          {
            LODWORD(v178) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v311 = v173 + 1;
            v312 = *(_BYTE *)(v175 + v173);
            *((_QWORD *)a2 + 1) = v311;
            v178 |= (unint64_t)(v312 & 0x7F) << v309;
            if (v312 < 0)
            {
              v309 += 7;
              v173 = v311;
              v14 = v310++ > 8;
              if (v14)
                goto LABEL_379;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v178) = 0;
          }
          break;
        }
LABEL_506:
        *((_DWORD *)this + 28) = v178;
        goto LABEL_20;
      case 0x1Bu:
        v181 = (_DWORD *)operator new();
        *(_QWORD *)v181 = &off_251361880;
        v181[5] = 0;
        v182 = *((_QWORD *)this + 4);
        *((_QWORD *)this + 4) = v181;
        if (v182)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v182 + 8))(v182);
          v181 = (_DWORD *)*((_QWORD *)this + 4);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v181 + 16))(v181, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
LABEL_20:
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        v4 = *((unsigned __int8 *)a2 + 24);
        if (v2 >= v3 || v4 != 0)
          return v4 == 0;
        break;
      case 0x1Cu:
        *((_QWORD *)this + 24) |= 0x400uLL;
        v183 = *((_QWORD *)a2 + 1);
        if (v183 > 0xFFFFFFFFFFFFFFFBLL || v183 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_239;
        *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v183);
        goto LABEL_423;
      case 0x1Du:
        *((_QWORD *)this + 24) |= 0x200uLL;
        v184 = *((_QWORD *)a2 + 1);
        if (v184 > 0xFFFFFFFFFFFFFFFBLL || v184 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_239;
        *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v184);
        goto LABEL_423;
      case 0x1Eu:
        *((_QWORD *)this + 24) |= 0x2000000uLL;
        v185 = *((_QWORD *)a2 + 1);
        if (v185 > 0xFFFFFFFFFFFFFFFBLL || v185 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_239;
        *((_DWORD *)this + 35) = *(_DWORD *)(*(_QWORD *)a2 + v185);
        goto LABEL_423;
      case 0x1Fu:
        *((_QWORD *)this + 24) |= 0x1000000000uLL;
        v186 = *((_QWORD *)a2 + 1);
        v187 = *((_QWORD *)a2 + 2);
        v188 = *(_QWORD *)a2;
        if (v186 <= 0xFFFFFFFFFFFFFFF5 && v186 + 10 <= v187)
        {
          v189 = 0;
          v190 = 0;
          v191 = 0;
          do
          {
            v192 = v186 + 1;
            *((_QWORD *)a2 + 1) = v186 + 1;
            v193 = *(_BYTE *)(v188 + v186);
            v191 |= (unint64_t)(v193 & 0x7F) << v189;
            if ((v193 & 0x80) == 0)
              goto LABEL_509;
            v189 += 7;
            v186 = v192;
            v14 = v190++ > 8;
          }
          while (!v14);
LABEL_386:
          LODWORD(v191) = 0;
          goto LABEL_509;
        }
        v313 = 0;
        v314 = 0;
        v191 = 0;
        if (v187 <= v186)
          v187 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v187 == v186)
          {
            LODWORD(v191) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v315 = v186 + 1;
            v316 = *(_BYTE *)(v188 + v186);
            *((_QWORD *)a2 + 1) = v315;
            v191 |= (unint64_t)(v316 & 0x7F) << v313;
            if (v316 < 0)
            {
              v313 += 7;
              v186 = v315;
              v14 = v314++ > 8;
              if (v14)
                goto LABEL_386;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v191) = 0;
          }
          break;
        }
LABEL_509:
        *((_DWORD *)this + 46) = v191;
        goto LABEL_20;
      case 0x20u:
        *((_QWORD *)this + 24) |= 0x20uLL;
        v194 = *((_QWORD *)a2 + 1);
        v195 = *((_QWORD *)a2 + 2);
        v196 = *(_QWORD *)a2;
        if (v194 <= 0xFFFFFFFFFFFFFFF5 && v194 + 10 <= v195)
        {
          v197 = 0;
          v198 = 0;
          v199 = 0;
          do
          {
            v200 = v194 + 1;
            *((_QWORD *)a2 + 1) = v194 + 1;
            v201 = *(_BYTE *)(v196 + v194);
            v199 |= (unint64_t)(v201 & 0x7F) << v197;
            if ((v201 & 0x80) == 0)
              goto LABEL_512;
            v197 += 7;
            v194 = v200;
            v14 = v198++ > 8;
          }
          while (!v14);
LABEL_393:
          v199 = 0;
          goto LABEL_512;
        }
        v317 = 0;
        v318 = 0;
        v199 = 0;
        if (v195 <= v194)
          v195 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v195 == v194)
          {
            v199 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v319 = v194 + 1;
            v320 = *(_BYTE *)(v196 + v194);
            *((_QWORD *)a2 + 1) = v319;
            v199 |= (unint64_t)(v320 & 0x7F) << v317;
            if (v320 < 0)
            {
              v317 += 7;
              v194 = v319;
              v14 = v318++ > 8;
              if (v14)
                goto LABEL_393;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v199 = 0;
          }
          break;
        }
LABEL_512:
        *((_QWORD *)this + 7) = v199;
        goto LABEL_20;
      case 0x21u:
        *((_QWORD *)this + 24) |= 0x10000000uLL;
        v202 = *((_QWORD *)a2 + 1);
        v203 = *((_QWORD *)a2 + 2);
        v204 = *(_QWORD *)a2;
        if (v202 <= 0xFFFFFFFFFFFFFFF5 && v202 + 10 <= v203)
        {
          v205 = 0;
          v206 = 0;
          v207 = 0;
          do
          {
            v208 = v202 + 1;
            *((_QWORD *)a2 + 1) = v202 + 1;
            v209 = *(_BYTE *)(v204 + v202);
            v207 |= (unint64_t)(v209 & 0x7F) << v205;
            if ((v209 & 0x80) == 0)
              goto LABEL_515;
            v205 += 7;
            v202 = v208;
            v14 = v206++ > 8;
          }
          while (!v14);
LABEL_400:
          LODWORD(v207) = 0;
          goto LABEL_515;
        }
        v321 = 0;
        v322 = 0;
        v207 = 0;
        if (v203 <= v202)
          v203 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v203 == v202)
          {
            LODWORD(v207) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v323 = v202 + 1;
            v324 = *(_BYTE *)(v204 + v202);
            *((_QWORD *)a2 + 1) = v323;
            v207 |= (unint64_t)(v324 & 0x7F) << v321;
            if (v324 < 0)
            {
              v321 += 7;
              v202 = v323;
              v14 = v322++ > 8;
              if (v14)
                goto LABEL_400;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v207) = 0;
          }
          break;
        }
LABEL_515:
        *((_DWORD *)this + 38) = v207;
        goto LABEL_20;
      case 0x22u:
        *((_QWORD *)this + 24) |= 0x2000000000uLL;
        v210 = *((_QWORD *)a2 + 1);
        v211 = *((_QWORD *)a2 + 2);
        v212 = *(_QWORD *)a2;
        if (v210 <= 0xFFFFFFFFFFFFFFF5 && v210 + 10 <= v211)
        {
          v213 = 0;
          v214 = 0;
          v215 = 0;
          do
          {
            v216 = v210 + 1;
            *((_QWORD *)a2 + 1) = v210 + 1;
            v217 = *(_BYTE *)(v212 + v210);
            v215 |= (unint64_t)(v217 & 0x7F) << v213;
            if ((v217 & 0x80) == 0)
              goto LABEL_518;
            v213 += 7;
            v210 = v216;
            v14 = v214++ > 8;
          }
          while (!v14);
LABEL_407:
          LODWORD(v215) = 0;
          goto LABEL_518;
        }
        v325 = 0;
        v326 = 0;
        v215 = 0;
        if (v211 <= v210)
          v211 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v211 == v210)
          {
            LODWORD(v215) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v327 = v210 + 1;
            v328 = *(_BYTE *)(v212 + v210);
            *((_QWORD *)a2 + 1) = v327;
            v215 |= (unint64_t)(v328 & 0x7F) << v325;
            if (v328 < 0)
            {
              v325 += 7;
              v210 = v327;
              v14 = v326++ > 8;
              if (v14)
                goto LABEL_407;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v215) = 0;
          }
          break;
        }
LABEL_518:
        *((_DWORD *)this + 47) = v215;
        goto LABEL_20;
      case 0x23u:
        *((_QWORD *)this + 24) |= 0x40uLL;
        v218 = *((_QWORD *)a2 + 1);
        v219 = *((_QWORD *)a2 + 2);
        v220 = *(_QWORD *)a2;
        if (v218 <= 0xFFFFFFFFFFFFFFF5 && v218 + 10 <= v219)
        {
          v221 = 0;
          v222 = 0;
          v223 = 0;
          do
          {
            v224 = v218 + 1;
            *((_QWORD *)a2 + 1) = v218 + 1;
            v225 = *(_BYTE *)(v220 + v218);
            v223 |= (unint64_t)(v225 & 0x7F) << v221;
            if ((v225 & 0x80) == 0)
              goto LABEL_521;
            v221 += 7;
            v218 = v224;
            v14 = v222++ > 8;
          }
          while (!v14);
LABEL_414:
          LODWORD(v223) = 0;
          goto LABEL_521;
        }
        v329 = 0;
        v330 = 0;
        v223 = 0;
        if (v219 <= v218)
          v219 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v219 == v218)
          {
            LODWORD(v223) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v331 = v218 + 1;
            v332 = *(_BYTE *)(v220 + v218);
            *((_QWORD *)a2 + 1) = v331;
            v223 |= (unint64_t)(v332 & 0x7F) << v329;
            if (v332 < 0)
            {
              v329 += 7;
              v218 = v331;
              v14 = v330++ > 8;
              if (v14)
                goto LABEL_414;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v223) = 0;
          }
          break;
        }
LABEL_521:
        *((_DWORD *)this + 16) = v223;
        goto LABEL_20;
      case 0x24u:
        *((_QWORD *)this + 24) |= 0x80000000uLL;
        v226 = *((_QWORD *)a2 + 1);
        if (v226 > 0xFFFFFFFFFFFFFFFBLL || v226 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_239;
        *((_DWORD *)this + 41) = *(_DWORD *)(*(_QWORD *)a2 + v226);
        goto LABEL_423;
      case 0x25u:
        *((_QWORD *)this + 24) |= 0x100000000uLL;
        v227 = *((_QWORD *)a2 + 1);
        if (v227 > 0xFFFFFFFFFFFFFFFBLL || v227 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_239;
        *((_DWORD *)this + 42) = *(_DWORD *)(*(_QWORD *)a2 + v227);
        goto LABEL_423;
      case 0x26u:
        *((_QWORD *)this + 24) |= 0x200000000uLL;
        v228 = *((_QWORD *)a2 + 1);
        if (v228 <= 0xFFFFFFFFFFFFFFFBLL && v228 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 43) = *(_DWORD *)(*(_QWORD *)a2 + v228);
LABEL_423:
          v95 = *((_QWORD *)a2 + 1) + 4;
LABEL_424:
          *((_QWORD *)a2 + 1) = v95;
        }
        else
        {
LABEL_239:
          *((_BYTE *)a2 + 24) = 1;
        }
        goto LABEL_20;
      case 0x27u:
        *((_QWORD *)this + 24) |= 0x400000000uLL;
        v229 = *((_QWORD *)a2 + 1);
        v230 = *((_QWORD *)a2 + 2);
        v231 = *(_QWORD *)a2;
        if (v229 <= 0xFFFFFFFFFFFFFFF5 && v229 + 10 <= v230)
        {
          v232 = 0;
          v233 = 0;
          v234 = 0;
          do
          {
            v235 = v229 + 1;
            *((_QWORD *)a2 + 1) = v229 + 1;
            v236 = *(_BYTE *)(v231 + v229);
            v234 |= (unint64_t)(v236 & 0x7F) << v232;
            if ((v236 & 0x80) == 0)
              goto LABEL_524;
            v232 += 7;
            v229 = v235;
            v14 = v233++ > 8;
          }
          while (!v14);
LABEL_421:
          LODWORD(v234) = 0;
          goto LABEL_524;
        }
        v333 = 0;
        v334 = 0;
        v234 = 0;
        if (v230 <= v229)
          v230 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v230 == v229)
          {
            LODWORD(v234) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v335 = v229 + 1;
            v336 = *(_BYTE *)(v231 + v229);
            *((_QWORD *)a2 + 1) = v335;
            v234 |= (unint64_t)(v336 & 0x7F) << v333;
            if (v336 < 0)
            {
              v333 += 7;
              v229 = v335;
              v14 = v334++ > 8;
              if (v14)
                goto LABEL_421;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v234) = 0;
          }
          break;
        }
LABEL_524:
        *((_DWORD *)this + 44) = v234;
        goto LABEL_20;
      default:
        goto LABEL_19;
    }
  }
  v15 = 0;
  v16 = 0;
  v11 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v17 = v2 + 1;
    v18 = *(_BYTE *)(v8 + v2);
    *((_QWORD *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0)
      goto LABEL_25;
    v15 += 7;
    v2 = v17;
    v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  result = PB::Reader::skip(a2);
  if ((_DWORD)result)
    goto LABEL_20;
  return result;
}

uint64_t CMMsl::VehicularFlagsData::VehicularFlagsData(uint64_t this)
{
  *(_QWORD *)this = &off_251361880;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251361880;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CMMsl::MotionStateUpdate::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  uint64_t v4;
  const PB::Base *v5;
  uint64_t v6;

  v3 = this;
  v4 = *(_QWORD *)(this + 192);
  if ((v4 & 0x8000) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_QWORD *)(v3 + 192);
    if ((v4 & 0x100) == 0)
    {
LABEL_3:
      if ((v4 & 0x10000) == 0)
        goto LABEL_4;
      goto LABEL_45;
    }
  }
  else if ((v4 & 0x100) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x10000) == 0)
  {
LABEL_4:
    if ((v4 & 0x20000) == 0)
      goto LABEL_5;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x20000) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0)
      goto LABEL_6;
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_7;
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0)
      goto LABEL_8;
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0)
      goto LABEL_9;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_10;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_10:
    if ((v4 & 8) == 0)
      goto LABEL_11;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 8) == 0)
  {
LABEL_11:
    if ((v4 & 1) == 0)
      goto LABEL_12;
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 1) == 0)
  {
LABEL_12:
    if ((v4 & 4) == 0)
      goto LABEL_13;
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 4) == 0)
  {
LABEL_13:
    if ((v4 & 2) == 0)
      goto LABEL_14;
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 2) == 0)
  {
LABEL_14:
    if ((v4 & 0x80) == 0)
      goto LABEL_15;
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x80) == 0)
  {
LABEL_15:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_16;
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_17;
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(float *)(v3 + 156));
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x4000) == 0)
      goto LABEL_18;
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x4000) == 0)
  {
LABEL_18:
    if ((v4 & 0x400000) == 0)
      goto LABEL_19;
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(float *)(v3 + 96));
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x400000) == 0)
  {
LABEL_19:
    if ((v4 & 0x200000) == 0)
      goto LABEL_20;
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::write(a2, *(float *)(v3 + 128));
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x200000) == 0)
  {
LABEL_20:
    if ((v4 & 0x800000) == 0)
      goto LABEL_21;
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::write(a2, *(float *)(v3 + 124));
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x800000) == 0)
  {
LABEL_21:
    if ((v4 & 0x10) == 0)
      goto LABEL_22;
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::write(a2, *(float *)(v3 + 132));
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x10) == 0)
  {
LABEL_22:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_23;
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_24;
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_24:
    if ((v4 & 0x100000) == 0)
      goto LABEL_25;
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x100000) == 0)
  {
LABEL_25:
    if ((v4 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x80000) == 0)
  {
LABEL_26:
    if ((v4 & 0x40000) == 0)
      goto LABEL_28;
    goto LABEL_27;
  }
LABEL_67:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_QWORD *)(v3 + 192) & 0x40000) != 0)
LABEL_27:
    this = PB::Writer::writeVarInt(a2);
LABEL_28:
  v5 = *(const PB::Base **)(v3 + 32);
  if (v5)
    this = PB::Writer::writeSubmessage(a2, v5);
  v6 = *(_QWORD *)(v3 + 192);
  if ((v6 & 0x400) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 80));
    v6 = *(_QWORD *)(v3 + 192);
    if ((v6 & 0x200) == 0)
    {
LABEL_32:
      if ((v6 & 0x2000000) == 0)
        goto LABEL_33;
      goto LABEL_71;
    }
  }
  else if ((v6 & 0x200) == 0)
  {
    goto LABEL_32;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 76));
  v6 = *(_QWORD *)(v3 + 192);
  if ((v6 & 0x2000000) == 0)
  {
LABEL_33:
    if ((v6 & 0x1000000000) == 0)
      goto LABEL_34;
    goto LABEL_72;
  }
LABEL_71:
  this = PB::Writer::write(a2, *(float *)(v3 + 140));
  v6 = *(_QWORD *)(v3 + 192);
  if ((v6 & 0x1000000000) == 0)
  {
LABEL_34:
    if ((v6 & 0x20) == 0)
      goto LABEL_35;
    goto LABEL_73;
  }
LABEL_72:
  this = PB::Writer::writeVarInt(a2);
  v6 = *(_QWORD *)(v3 + 192);
  if ((v6 & 0x20) == 0)
  {
LABEL_35:
    if ((v6 & 0x10000000) == 0)
      goto LABEL_36;
    goto LABEL_74;
  }
LABEL_73:
  this = PB::Writer::writeVarInt(a2);
  v6 = *(_QWORD *)(v3 + 192);
  if ((v6 & 0x10000000) == 0)
  {
LABEL_36:
    if ((v6 & 0x2000000000) == 0)
      goto LABEL_37;
    goto LABEL_75;
  }
LABEL_74:
  this = PB::Writer::writeVarInt(a2);
  v6 = *(_QWORD *)(v3 + 192);
  if ((v6 & 0x2000000000) == 0)
  {
LABEL_37:
    if ((v6 & 0x40) == 0)
      goto LABEL_38;
    goto LABEL_76;
  }
LABEL_75:
  this = PB::Writer::writeVarInt(a2);
  v6 = *(_QWORD *)(v3 + 192);
  if ((v6 & 0x40) == 0)
  {
LABEL_38:
    if ((v6 & 0x80000000) == 0)
      goto LABEL_39;
    goto LABEL_77;
  }
LABEL_76:
  this = PB::Writer::writeVarInt(a2);
  v6 = *(_QWORD *)(v3 + 192);
  if ((v6 & 0x80000000) == 0)
  {
LABEL_39:
    if ((v6 & 0x100000000) == 0)
      goto LABEL_40;
    goto LABEL_78;
  }
LABEL_77:
  this = PB::Writer::write(a2, *(float *)(v3 + 164));
  v6 = *(_QWORD *)(v3 + 192);
  if ((v6 & 0x100000000) == 0)
  {
LABEL_40:
    if ((v6 & 0x200000000) == 0)
      goto LABEL_41;
    goto LABEL_79;
  }
LABEL_78:
  this = PB::Writer::write(a2, *(float *)(v3 + 168));
  v6 = *(_QWORD *)(v3 + 192);
  if ((v6 & 0x200000000) == 0)
  {
LABEL_41:
    if ((v6 & 0x400000000) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_79:
  this = PB::Writer::write(a2, *(float *)(v3 + 172));
  if ((*(_QWORD *)(v3 + 192) & 0x400000000) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

BOOL CMMsl::VehicularFlagsData::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 0x10) == 0 || *(unsigned __int8 *)(a1 + 15) != *(unsigned __int8 *)(a2 + 15))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 20) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 8) == 0 || *(unsigned __int8 *)(a1 + 14) != *(unsigned __int8 *)(a2 + 14))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 2) == 0 || *(unsigned __int8 *)(a1 + 12) != *(unsigned __int8 *)(a2 + 12))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 20) & 0x20) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 0x20) == 0 || *(unsigned __int8 *)(a1 + 16) != *(unsigned __int8 *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 20) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 4) == 0 || *(unsigned __int8 *)(a1 + 13) != *(unsigned __int8 *)(a2 + 13))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 1) == 0;
  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
    return (*(_BYTE *)(a2 + 20) & 1) != 0 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
  return v2;
}

unint64_t CMMsl::MotionStateUpdate::hash_value(CMMsl::MotionStateUpdate *this)
{
  CMMsl::MotionStateUpdate *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  CMMsl::MotionStateUpdate *v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  uint64_t v47;
  float v48;
  uint64_t v49;
  float v50;
  uint64_t v51;
  uint64_t v52;
  float v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v1 = this;
  v2 = *((_QWORD *)this + 24);
  if ((v2 & 0x8000) != 0)
  {
    v3 = *((unsigned int *)this + 25);
    if ((v2 & 0x100) != 0)
    {
LABEL_3:
      v4 = *((unsigned int *)this + 18);
      if ((v2 & 0x10000) != 0)
        goto LABEL_4;
      goto LABEL_47;
    }
  }
  else
  {
    v3 = 0;
    if ((v2 & 0x100) != 0)
      goto LABEL_3;
  }
  v4 = 0;
  if ((v2 & 0x10000) != 0)
  {
LABEL_4:
    v5 = *((unsigned int *)this + 26);
    if ((v2 & 0x20000) != 0)
      goto LABEL_5;
    goto LABEL_48;
  }
LABEL_47:
  v5 = 0;
  if ((v2 & 0x20000) != 0)
  {
LABEL_5:
    v6 = *((unsigned int *)this + 27);
    if ((v2 & 0x800) != 0)
      goto LABEL_6;
    goto LABEL_49;
  }
LABEL_48:
  v6 = 0;
  if ((v2 & 0x800) != 0)
  {
LABEL_6:
    v7 = *((unsigned int *)this + 21);
    if ((v2 & 0x8000000) != 0)
      goto LABEL_7;
    goto LABEL_50;
  }
LABEL_49:
  v7 = 0;
  if ((v2 & 0x8000000) != 0)
  {
LABEL_7:
    v8 = *((unsigned int *)this + 37);
    if ((v2 & 0x2000) != 0)
      goto LABEL_8;
    goto LABEL_51;
  }
LABEL_50:
  v8 = 0;
  if ((v2 & 0x2000) != 0)
  {
LABEL_8:
    v9 = *((unsigned int *)this + 23);
    if ((v2 & 0x1000) != 0)
      goto LABEL_9;
    goto LABEL_52;
  }
LABEL_51:
  v9 = 0;
  if ((v2 & 0x1000) != 0)
  {
LABEL_9:
    v10 = *((unsigned int *)this + 22);
    if ((v2 & 0x1000000) != 0)
      goto LABEL_10;
    goto LABEL_53;
  }
LABEL_52:
  v10 = 0;
  if ((v2 & 0x1000000) != 0)
  {
LABEL_10:
    v11 = *((unsigned int *)this + 34);
    if ((v2 & 8) != 0)
      goto LABEL_11;
LABEL_54:
    v12 = 0;
    if ((v2 & 1) != 0)
      goto LABEL_15;
LABEL_55:
    v13 = 0;
    if ((v2 & 4) != 0)
      goto LABEL_19;
    goto LABEL_56;
  }
LABEL_53:
  v11 = 0;
  if ((v2 & 8) == 0)
    goto LABEL_54;
LABEL_11:
  if (*((double *)this + 5) == 0.0)
    v12 = 0;
  else
    v12 = *((_QWORD *)this + 5);
  if ((v2 & 1) == 0)
    goto LABEL_55;
LABEL_15:
  if (*((double *)this + 1) == 0.0)
    v13 = 0;
  else
    v13 = *((_QWORD *)this + 1);
  if ((v2 & 4) != 0)
  {
LABEL_19:
    v14 = *((_QWORD *)this + 3);
    if ((v2 & 2) != 0)
      goto LABEL_20;
    goto LABEL_57;
  }
LABEL_56:
  v14 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_20:
    v15 = *((_QWORD *)this + 2);
    if ((v2 & 0x80) != 0)
      goto LABEL_21;
    goto LABEL_58;
  }
LABEL_57:
  v15 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_21:
    v16 = *((unsigned int *)this + 17);
    if ((v2 & 0x20000000) != 0)
      goto LABEL_22;
LABEL_59:
    v18 = 0;
    if ((v2 & 0x4000000) != 0)
      goto LABEL_26;
    goto LABEL_60;
  }
LABEL_58:
  v16 = 0;
  if ((v2 & 0x20000000) == 0)
    goto LABEL_59;
LABEL_22:
  v17 = *((float *)this + 39);
  if (v17 == 0.0)
    v18 = 0;
  else
    v18 = LODWORD(v17);
  if ((v2 & 0x4000000) != 0)
  {
LABEL_26:
    v61 = *((unsigned int *)this + 36);
    if ((v2 & 0x4000) != 0)
      goto LABEL_27;
LABEL_61:
    v71 = 0;
    if ((v2 & 0x400000) != 0)
      goto LABEL_30;
LABEL_62:
    v70 = 0;
    if ((v2 & 0x200000) != 0)
      goto LABEL_33;
LABEL_63:
    v69 = 0;
    if ((v2 & 0x800000) != 0)
      goto LABEL_36;
LABEL_64:
    v68 = 0;
    if ((v2 & 0x10) != 0)
      goto LABEL_39;
    goto LABEL_65;
  }
LABEL_60:
  v61 = 0;
  if ((v2 & 0x4000) == 0)
    goto LABEL_61;
LABEL_27:
  v19 = *((float *)this + 24);
  v20 = LODWORD(v19);
  if (v19 == 0.0)
    v20 = 0;
  v71 = v20;
  if ((v2 & 0x400000) == 0)
    goto LABEL_62;
LABEL_30:
  v21 = *((float *)this + 32);
  v22 = LODWORD(v21);
  if (v21 == 0.0)
    v22 = 0;
  v70 = v22;
  if ((v2 & 0x200000) == 0)
    goto LABEL_63;
LABEL_33:
  v23 = *((float *)this + 31);
  v24 = LODWORD(v23);
  if (v23 == 0.0)
    v24 = 0;
  v69 = v24;
  if ((v2 & 0x800000) == 0)
    goto LABEL_64;
LABEL_36:
  v25 = *((float *)this + 33);
  v26 = LODWORD(v25);
  if (v25 == 0.0)
    v26 = 0;
  v68 = v26;
  if ((v2 & 0x10) != 0)
  {
LABEL_39:
    v67 = *((_QWORD *)this + 6);
    if ((v2 & 0x800000000) != 0)
      goto LABEL_40;
    goto LABEL_66;
  }
LABEL_65:
  v67 = 0;
  if ((v2 & 0x800000000) != 0)
  {
LABEL_40:
    v66 = *((unsigned int *)this + 45);
    if ((v2 & 0x40000000) != 0)
      goto LABEL_41;
    goto LABEL_67;
  }
LABEL_66:
  v66 = 0;
  if ((v2 & 0x40000000) != 0)
  {
LABEL_41:
    v65 = *((unsigned int *)this + 40);
    if ((v2 & 0x100000) != 0)
      goto LABEL_42;
    goto LABEL_68;
  }
LABEL_67:
  v65 = 0;
  if ((v2 & 0x100000) != 0)
  {
LABEL_42:
    v64 = *((unsigned int *)this + 30);
    if ((v2 & 0x80000) != 0)
      goto LABEL_43;
LABEL_69:
    v63 = 0;
    if ((v2 & 0x40000) != 0)
      goto LABEL_44;
    goto LABEL_70;
  }
LABEL_68:
  v64 = 0;
  if ((v2 & 0x80000) == 0)
    goto LABEL_69;
LABEL_43:
  v63 = *((unsigned int *)this + 29);
  if ((v2 & 0x40000) != 0)
  {
LABEL_44:
    v62 = *((unsigned int *)this + 28);
    goto LABEL_71;
  }
LABEL_70:
  v62 = 0;
LABEL_71:
  v27 = *((_QWORD *)this + 4);
  if (v27)
  {
    v57 = v8;
    v58 = v9;
    v28 = v3;
    v60 = v11;
    v29 = v4;
    v59 = v13;
    v30 = v5;
    v55 = v14;
    v56 = v16;
    v31 = v6;
    v32 = v15;
    v33 = v7;
    v34 = v12;
    v35 = v1;
    v27 = CMMsl::VehicularFlagsData::hash_value((CMMsl::VehicularFlagsData *)v27);
    v1 = v35;
    v12 = v34;
    v7 = v33;
    v15 = v32;
    v6 = v31;
    v14 = v55;
    v16 = v56;
    v5 = v30;
    v4 = v29;
    v9 = v58;
    v13 = v59;
    v11 = v60;
    v3 = v28;
    v8 = v57;
  }
  if ((v2 & 0x400) == 0)
  {
    v36 = 0;
    if ((v2 & 0x200) != 0)
      goto LABEL_75;
LABEL_99:
    v38 = 0;
    if ((v2 & 0x2000000) != 0)
      goto LABEL_78;
LABEL_100:
    v40 = 0;
    if ((v2 & 0x1000000000) != 0)
      goto LABEL_81;
    goto LABEL_101;
  }
  v53 = *((float *)v1 + 20);
  v36 = LODWORD(v53);
  if (v53 == 0.0)
    v36 = 0;
  if ((v2 & 0x200) == 0)
    goto LABEL_99;
LABEL_75:
  v37 = *((float *)v1 + 19);
  v38 = LODWORD(v37);
  if (v37 == 0.0)
    v38 = 0;
  if ((v2 & 0x2000000) == 0)
    goto LABEL_100;
LABEL_78:
  v39 = *((float *)v1 + 35);
  v40 = LODWORD(v39);
  if (v39 == 0.0)
    v40 = 0;
  if ((v2 & 0x1000000000) != 0)
  {
LABEL_81:
    v41 = *((unsigned int *)v1 + 46);
    if ((v2 & 0x20) != 0)
      goto LABEL_82;
    goto LABEL_102;
  }
LABEL_101:
  v41 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_82:
    v42 = *((_QWORD *)v1 + 7);
    if ((v2 & 0x10000000) != 0)
      goto LABEL_83;
    goto LABEL_103;
  }
LABEL_102:
  v42 = 0;
  if ((v2 & 0x10000000) != 0)
  {
LABEL_83:
    v43 = *((unsigned int *)v1 + 38);
    if ((v2 & 0x2000000000) != 0)
      goto LABEL_84;
    goto LABEL_104;
  }
LABEL_103:
  v43 = 0;
  if ((v2 & 0x2000000000) != 0)
  {
LABEL_84:
    v44 = *((unsigned int *)v1 + 47);
    if ((v2 & 0x40) != 0)
      goto LABEL_85;
    goto LABEL_105;
  }
LABEL_104:
  v44 = 0;
  if ((v2 & 0x40) != 0)
  {
LABEL_85:
    v45 = *((unsigned int *)v1 + 16);
    if ((v2 & 0x80000000) != 0)
      goto LABEL_86;
LABEL_106:
    v47 = 0;
    if ((v2 & 0x100000000) != 0)
      goto LABEL_89;
LABEL_107:
    v49 = 0;
    if ((v2 & 0x200000000) != 0)
      goto LABEL_92;
    goto LABEL_108;
  }
LABEL_105:
  v45 = 0;
  if ((v2 & 0x80000000) == 0)
    goto LABEL_106;
LABEL_86:
  v46 = *((float *)v1 + 41);
  v47 = LODWORD(v46);
  if (v46 == 0.0)
    v47 = 0;
  if ((v2 & 0x100000000) == 0)
    goto LABEL_107;
LABEL_89:
  v48 = *((float *)v1 + 42);
  v49 = LODWORD(v48);
  if (v48 == 0.0)
    v49 = 0;
  if ((v2 & 0x200000000) != 0)
  {
LABEL_92:
    v50 = *((float *)v1 + 43);
    v51 = LODWORD(v50);
    if (v50 == 0.0)
      v51 = 0;
    if ((v2 & 0x400000000) != 0)
      goto LABEL_95;
LABEL_109:
    v52 = 0;
    return v4 ^ v3 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v18 ^ v61 ^ v71 ^ v70 ^ v69 ^ v68 ^ v67 ^ v66 ^ v65 ^ v64 ^ v63 ^ v62 ^ v27 ^ v36 ^ v38 ^ v40 ^ v41 ^ v42 ^ v43 ^ v44 ^ v45 ^ v47 ^ v49 ^ v51 ^ v52;
  }
LABEL_108:
  v51 = 0;
  if ((v2 & 0x400000000) == 0)
    goto LABEL_109;
LABEL_95:
  v52 = *((unsigned int *)v1 + 44);
  return v4 ^ v3 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v18 ^ v61 ^ v71 ^ v70 ^ v69 ^ v68 ^ v67 ^ v66 ^ v65 ^ v64 ^ v63 ^ v62 ^ v27 ^ v36 ^ v38 ^ v40 ^ v41 ^ v42 ^ v43 ^ v44 ^ v45 ^ v47 ^ v49 ^ v51 ^ v52;
}

_QWORD *CMMsl::MotionStateUpdate::makeVehicularFlags(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[4])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251361880;
    *(_DWORD *)(v2 + 20) = 0;
    this = (_QWORD *)v1[4];
    v1[4] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void CMMsl::MotionWifiAssociation::~MotionWifiAssociation(CMMsl::MotionWifiAssociation *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::MotionWifiAssociation::MotionWifiAssociation(uint64_t this, const CMMsl::MotionWifiAssociation *a2)
{
  char v2;

  *(_QWORD *)this = &off_25135F5B8;
  *(_DWORD *)(this + 12) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v2 = *((_BYTE *)a2 + 8);
    *(_BYTE *)(this + 12) = 1;
    *(_BYTE *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::MotionWifiAssociation::operator=(uint64_t a1, uint64_t a2)
{
  char v3;
  int v4;
  char v5;
  void (**v7)(CMMsl::MotionWifiAssociation *__hidden);
  char v8;
  int v9;

  if (a1 != a2)
  {
    v7 = &off_25135F5B8;
    v3 = *(_BYTE *)(a2 + 8);
    v4 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = *(_BYTE *)(a2 + 12) & 1;
    v9 = v4;
    v5 = *(_BYTE *)(a1 + 8);
    *(_BYTE *)(a1 + 8) = v3;
    v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

{
  int v3;
  char v4;
  int v5;
  void (**v7)(CMMsl::MotionWifiAssociation *__hidden);
  char v8;
  int v9;

  if (a1 != a2)
  {
    v7 = &off_25135F5B8;
    v3 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    v4 = *(_BYTE *)(a2 + 8);
    v5 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v3;
    v9 = v5;
    LOBYTE(v3) = *(_BYTE *)(a1 + 8);
    *(_BYTE *)(a1 + 8) = v4;
    v8 = v3;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::MotionWifiAssociation *a2, CMMsl::MotionWifiAssociation *a3)
{
  int v3;

  v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  LOBYTE(v3) = *(_BYTE *)(this + 8);
  *(_BYTE *)(this + 8) = *((_BYTE *)a2 + 8);
  *((_BYTE *)a2 + 8) = v3;
  return this;
}

uint64_t CMMsl::MotionWifiAssociation::formatText(CMMsl::MotionWifiAssociation *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 12) & 1) != 0)
    PB::TextFormatter::format(a2, "isWifiAssociated");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MotionWifiAssociation::readFrom(CMMsl::MotionWifiAssociation *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v19;
  BOOL v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_24;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 12) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        if (v2 >= v3)
        {
          v20 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v19 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v20 = v19 != 0;
        }
        *((_BYTE *)this + 8) = v20;
      }
      else
      {
LABEL_24:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_24;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::MotionWifiAssociation::writeTo(uint64_t this, PB::Writer *a2)
{
  if ((*(_BYTE *)(this + 12) & 1) != 0)
    return PB::Writer::write(a2);
  return this;
}

uint64_t CMMsl::MotionWifiAssociation::hash_value(CMMsl::MotionWifiAssociation *this)
{
  if ((*((_BYTE *)this + 12) & 1) != 0)
    return *((unsigned __int8 *)this + 8);
  else
    return 0;
}

void CMMsl::MotionWifiLocation::~MotionWifiLocation(CMMsl::MotionWifiLocation *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135F5F0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135F5F0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135F5F0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::MotionWifiLocation *CMMsl::MotionWifiLocation::MotionWifiLocation(CMMsl::MotionWifiLocation *this, const CMMsl::MotionGPSLocation **a2)
{
  CMMsl::MotionGPSLocation *v4;
  CMMsl::MotionGPSLocation *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_25135F5F0;
  *((_QWORD *)this + 1) = 0;
  if (a2[1])
  {
    v4 = (CMMsl::MotionGPSLocation *)operator new();
    v5 = CMMsl::MotionGPSLocation::MotionGPSLocation(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return this;
}

uint64_t CMMsl::MotionWifiLocation::operator=(uint64_t a1, const CMMsl::MotionGPSLocation **a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::MotionWifiLocation *__hidden);
  uint64_t v6;

  if ((const CMMsl::MotionGPSLocation **)a1 != a2)
  {
    CMMsl::MotionWifiLocation::MotionWifiLocation((CMMsl::MotionWifiLocation *)&v5, a2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v6;
    v5 = &off_25135F5F0;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::MotionWifiLocation *a2, CMMsl::MotionWifiLocation *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::MotionWifiLocation::MotionWifiLocation(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_25135F5F0;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_25135F5F0;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::MotionWifiLocation::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = &off_25135F5F0;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::MotionWifiLocation::formatText(CMMsl::MotionWifiLocation *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MotionWifiLocation::readFrom(CMMsl::MotionWifiLocation *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v19 = operator new();
        *(_QWORD *)v19 = &off_25135F468;
        *(_QWORD *)(v19 + 112) = 0;
        *(_DWORD *)(v19 + 180) = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = *((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_27;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::MotionWifiLocation::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2);
  return this;
}

CMMsl::MotionGPSLocation *CMMsl::MotionWifiLocation::hash_value(CMMsl::MotionWifiLocation *this)
{
  CMMsl::MotionGPSLocation *result;

  result = (CMMsl::MotionGPSLocation *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::MotionGPSLocation *)CMMsl::MotionGPSLocation::hash_value(result);
  return result;
}

_QWORD *CMMsl::MotionWifiLocation::makeSuper(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135F468;
    *(_QWORD *)(v2 + 112) = 0;
    *(_DWORD *)(v2 + 180) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void CMMsl::MovementStats::~MovementStats(CMMsl::MovementStats *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::MovementStats::MovementStats(CMMsl::MovementStats *this, const CMMsl::MovementStats *a2)
{
  float result;

  *(_QWORD *)this = &off_25135F628;
  *((_DWORD *)this + 3) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    result = *((float *)a2 + 2);
    *((_BYTE *)this + 12) = 1;
    *((float *)this + 2) = result;
  }
  return result;
}

uint64_t CMMsl::MovementStats::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  int v5;
  void (**v7)(CMMsl::MovementStats *__hidden);
  int v8;
  int v9;

  if (a1 != a2)
  {
    v7 = &off_25135F628;
    v3 = *(_DWORD *)(a2 + 8);
    v4 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = *(_BYTE *)(a2 + 12) & 1;
    v9 = v4;
    v5 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = v3;
    v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

{
  int v3;
  int v4;
  int v5;
  int v6;
  void (**v8)(CMMsl::MovementStats *__hidden);
  int v9;
  int v10;

  if (a1 != a2)
  {
    v8 = &off_25135F628;
    v3 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    v4 = *(_DWORD *)(a2 + 8);
    v5 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v3;
    v10 = v5;
    v6 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = v4;
    v9 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::MovementStats *a2, CMMsl::MovementStats *a3)
{
  int v3;
  float result;

  v3 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  result = *((float *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((float *)a2 + 2) = result;
  return result;
}

uint64_t CMMsl::MovementStats::formatText(CMMsl::MovementStats *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 12) & 1) != 0)
    PB::TextFormatter::format(a2, "walkingVariable01", *((float *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MovementStats::readFrom(CMMsl::MovementStats *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_25;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 12) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 2) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_25:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_25;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::MovementStats::writeTo(uint64_t this, PB::Writer *a2)
{
  if ((*(_BYTE *)(this + 12) & 1) != 0)
    return PB::Writer::write(a2, *(float *)(this + 8));
  return this;
}

float CMMsl::MovementStats::hash_value(CMMsl::MovementStats *this)
{
  float result;

  if ((*((_BYTE *)this + 12) & 1) != 0)
    return *((float *)this + 2);
  return result;
}

void CMMsl::MovementStatsGravityProjection::~MovementStatsGravityProjection(CMMsl::MovementStatsGravityProjection *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_25135F660;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::MovementStatsGravityProjection::~MovementStatsGravityProjection(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::MovementStatsGravityProjection *CMMsl::MovementStatsGravityProjection::MovementStatsGravityProjection(CMMsl::MovementStatsGravityProjection *this, const CMMsl::MovementStatsGravityProjection *a2)
{
  _QWORD *v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  *(_QWORD *)this = &off_25135F660;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (_QWORD *)((char *)this + 8);
  *((_DWORD *)this + 19) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  v5 = *((_BYTE *)a2 + 76);
  if ((v5 & 2) != 0)
  {
    v7 = *((_QWORD *)a2 + 8);
    v6 = 2;
    *((_BYTE *)this + 76) = 2;
    *((_QWORD *)this + 8) = v7;
    v5 = *((_BYTE *)a2 + 76);
    if ((v5 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((*((_BYTE *)a2 + 76) & 1) != 0)
  {
LABEL_5:
    v8 = *((_QWORD *)a2 + 7);
    v6 |= 1u;
    *((_BYTE *)this + 76) = v6;
    *((_QWORD *)this + 7) = v8;
    v5 = *((_BYTE *)a2 + 76);
  }
LABEL_6:
  if ((v5 & 4) != 0)
  {
    v9 = *((_DWORD *)a2 + 18);
    *((_BYTE *)this + 76) = v6 | 4;
    *((_DWORD *)this + 18) = v9;
  }
  if (this != a2)
  {
    sub_242911380((_QWORD *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
    sub_242911380(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  }
  return this;
}

uint64_t CMMsl::MovementStatsGravityProjection::operator=(uint64_t a1, const CMMsl::MovementStatsGravityProjection *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;

  if ((const CMMsl::MovementStatsGravityProjection *)a1 != a2)
  {
    CMMsl::MovementStatsGravityProjection::MovementStatsGravityProjection((CMMsl::MovementStatsGravityProjection *)&v10, a2);
    v3 = *(_DWORD *)(a1 + 76);
    *(_DWORD *)(a1 + 76) = v17;
    v17 = v3;
    v4 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v15;
    v15 = v4;
    v5 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v14;
    v14 = v5;
    LODWORD(v5) = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v16;
    v16 = v5;
    v6 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v13;
    v13 = v6;
    v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v11;
    v11 = v7;
    v8 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    v12 = v8;
    CMMsl::MovementStatsGravityProjection::~MovementStatsGravityProjection((CMMsl::MovementStatsGravityProjection *)&v10);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::MovementStatsGravityProjection *a2, CMMsl::MovementStatsGravityProjection *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  float result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v3;
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v4;
  v5 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v5;
  result = *((float *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((float *)a2 + 18) = result;
  v7 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v7;
  v8 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v8;
  v9 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v9;
  v10 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v10;
  v11 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v11;
  v12 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v12;
  return result;
}

uint64_t CMMsl::MovementStatsGravityProjection::MovementStatsGravityProjection(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_25135F660;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a2 + 76) = 0;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  sub_242911330(a1 + 32, (__n128 *)(a2 + 32));
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  return a1;
}

uint64_t CMMsl::MovementStatsGravityProjection::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;

  if (a1 != a2)
  {
    CMMsl::MovementStatsGravityProjection::MovementStatsGravityProjection((uint64_t)&v10, a2);
    v3 = *(_DWORD *)(a1 + 76);
    *(_DWORD *)(a1 + 76) = v17;
    v17 = v3;
    v4 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v15;
    v15 = v4;
    v5 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v14;
    v14 = v5;
    LODWORD(v5) = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v16;
    v16 = v5;
    v6 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v13;
    v13 = v6;
    v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v11;
    v11 = v7;
    v8 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    v12 = v8;
    CMMsl::MovementStatsGravityProjection::~MovementStatsGravityProjection((CMMsl::MovementStatsGravityProjection *)&v10);
  }
  return a1;
}

uint64_t CMMsl::MovementStatsGravityProjection::formatText(CMMsl::MovementStatsGravityProjection *this, PB::TextFormatter *a2, const char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;
  char v11;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (float *)*((_QWORD *)this + 1);
  v6 = (float *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "accel", v7);
  }
  if ((*((_BYTE *)this + 76) & 1) != 0)
    PB::TextFormatter::format(a2, "adjustedTimestamp", *((double *)this + 7));
  v8 = (float *)*((_QWORD *)this + 4);
  v9 = (float *)*((_QWORD *)this + 5);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(a2, "gravity", v10);
  }
  v11 = *((_BYTE *)this + 76);
  if ((v11 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "rawProjectedSignal", *((float *)this + 18));
    v11 = *((_BYTE *)this + 76);
  }
  if ((v11 & 2) != 0)
    PB::TextFormatter::format(a2, "timestamp");
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::MovementStatsGravityProjection::readFrom(CMMsl::MovementStatsGravityProjection *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  _DWORD *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  _DWORD *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  int v57;
  unint64_t v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  unint64_t v63;
  char *v64;
  _DWORD *v65;
  unint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  _DWORD *v80;
  int v81;
  _DWORD *v82;
  int v83;
  unint64_t v84;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_21:
      v19 = v11 & 7;
      if (v19 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 76) |= 2u;
          v20 = *((_QWORD *)a2 + 1);
          v21 = *((_QWORD *)a2 + 2);
          v22 = *(_QWORD *)a2;
          if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
          {
            v23 = 0;
            v24 = 0;
            v25 = 0;
            do
            {
              v26 = v20 + 1;
              *((_QWORD *)a2 + 1) = v20 + 1;
              v27 = *(_BYTE *)(v22 + v20);
              v25 |= (unint64_t)(v27 & 0x7F) << v23;
              if ((v27 & 0x80) == 0)
                goto LABEL_116;
              v23 += 7;
              v20 = v26;
              v14 = v24++ > 8;
            }
            while (!v14);
LABEL_90:
            v25 = 0;
            goto LABEL_116;
          }
          v59 = 0;
          v60 = 0;
          v25 = 0;
          if (v21 <= v20)
            v21 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v21 == v20)
            {
              v25 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v61 = v20 + 1;
              v62 = *(_BYTE *)(v22 + v20);
              *((_QWORD *)a2 + 1) = v61;
              v25 |= (unint64_t)(v62 & 0x7F) << v59;
              if (v62 < 0)
              {
                v59 += 7;
                v20 = v61;
                v14 = v60++ > 8;
                if (v14)
                  goto LABEL_90;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v25 = 0;
            }
            break;
          }
LABEL_116:
          *((_QWORD *)this + 8) = v25;
          goto LABEL_137;
        case 2u:
          *((_BYTE *)this + 76) |= 1u;
          v28 = *((_QWORD *)a2 + 1);
          if (v28 > 0xFFFFFFFFFFFFFFF7 || v28 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_133;
          *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v28);
          v29 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_136;
        case 3u:
          *((_BYTE *)this + 76) |= 4u;
          v30 = *((_QWORD *)a2 + 1);
          if (v30 > 0xFFFFFFFFFFFFFFFBLL || v30 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_133;
          *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v30);
          goto LABEL_135;
        case 4u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v31 = *((_QWORD *)a2 + 1);
            v32 = *((_QWORD *)a2 + 2);
            while (v31 < v32 && !*((_BYTE *)a2 + 24))
            {
              v34 = (char *)*((_QWORD *)this + 5);
              v33 = *((_QWORD *)this + 6);
              if ((unint64_t)v34 >= v33)
              {
                v36 = (char *)*((_QWORD *)this + 4);
                v37 = (v34 - v36) >> 2;
                v38 = v37 + 1;
                if ((unint64_t)(v37 + 1) >> 62)
                  goto LABEL_146;
                v39 = v33 - (_QWORD)v36;
                if (v39 >> 1 > v38)
                  v38 = v39 >> 1;
                if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
                  v40 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v40 = v38;
                if (v40)
                {
                  v40 = (unint64_t)sub_2429114B8(v40);
                  v36 = (char *)*((_QWORD *)this + 4);
                  v34 = (char *)*((_QWORD *)this + 5);
                }
                else
                {
                  v41 = 0;
                }
                v42 = (_DWORD *)(v40 + 4 * v37);
                *v42 = 0;
                v35 = v42 + 1;
                while (v34 != v36)
                {
                  v43 = *((_DWORD *)v34 - 1);
                  v34 -= 4;
                  *--v42 = v43;
                }
                *((_QWORD *)this + 4) = v42;
                *((_QWORD *)this + 5) = v35;
                *((_QWORD *)this + 6) = v40 + 4 * v41;
                if (v36)
                  operator delete(v36);
              }
              else
              {
                *(_DWORD *)v34 = 0;
                v35 = v34 + 4;
              }
              *((_QWORD *)this + 5) = v35;
              v44 = *((_QWORD *)a2 + 1);
              if (v44 > 0xFFFFFFFFFFFFFFFBLL || v44 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_95;
              *(v35 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v44);
              v32 = *((_QWORD *)a2 + 2);
              v31 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v31;
            }
            goto LABEL_96;
          }
          v64 = (char *)*((_QWORD *)this + 5);
          v63 = *((_QWORD *)this + 6);
          if ((unint64_t)v64 >= v63)
          {
            v68 = (char *)*((_QWORD *)this + 4);
            v69 = (v64 - v68) >> 2;
            v70 = v69 + 1;
            if ((unint64_t)(v69 + 1) >> 62)
              goto LABEL_146;
            v71 = v63 - (_QWORD)v68;
            if (v71 >> 1 > v70)
              v70 = v71 >> 1;
            if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL)
              v72 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v72 = v70;
            if (v72)
            {
              v72 = (unint64_t)sub_2429114B8(v72);
              v68 = (char *)*((_QWORD *)this + 4);
              v64 = (char *)*((_QWORD *)this + 5);
            }
            else
            {
              v73 = 0;
            }
            v80 = (_DWORD *)(v72 + 4 * v69);
            *v80 = 0;
            v65 = v80 + 1;
            while (v64 != v68)
            {
              v81 = *((_DWORD *)v64 - 1);
              v64 -= 4;
              *--v80 = v81;
            }
            *((_QWORD *)this + 4) = v80;
            *((_QWORD *)this + 5) = v65;
            *((_QWORD *)this + 6) = v72 + 4 * v73;
            if (v68)
              operator delete(v68);
          }
          else
          {
            *(_DWORD *)v64 = 0;
            v65 = v64 + 4;
          }
          *((_QWORD *)this + 5) = v65;
          goto LABEL_131;
        case 5u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v45 = *((_QWORD *)a2 + 1);
            v46 = *((_QWORD *)a2 + 2);
            while (v45 < v46 && !*((_BYTE *)a2 + 24))
            {
              v48 = (char *)*((_QWORD *)this + 2);
              v47 = *((_QWORD *)this + 3);
              if ((unint64_t)v48 >= v47)
              {
                v50 = (char *)*((_QWORD *)this + 1);
                v51 = (v48 - v50) >> 2;
                v52 = v51 + 1;
                if ((unint64_t)(v51 + 1) >> 62)
                  goto LABEL_146;
                v53 = v47 - (_QWORD)v50;
                if (v53 >> 1 > v52)
                  v52 = v53 >> 1;
                if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL)
                  v54 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v54 = v52;
                if (v54)
                {
                  v54 = (unint64_t)sub_2429114B8(v54);
                  v50 = (char *)*((_QWORD *)this + 1);
                  v48 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v55 = 0;
                }
                v56 = (_DWORD *)(v54 + 4 * v51);
                *v56 = 0;
                v49 = v56 + 1;
                while (v48 != v50)
                {
                  v57 = *((_DWORD *)v48 - 1);
                  v48 -= 4;
                  *--v56 = v57;
                }
                *((_QWORD *)this + 1) = v56;
                *((_QWORD *)this + 2) = v49;
                *((_QWORD *)this + 3) = v54 + 4 * v55;
                if (v50)
                  operator delete(v50);
              }
              else
              {
                *(_DWORD *)v48 = 0;
                v49 = v48 + 4;
              }
              *((_QWORD *)this + 2) = v49;
              v58 = *((_QWORD *)a2 + 1);
              if (v58 > 0xFFFFFFFFFFFFFFFBLL || v58 + 4 > *((_QWORD *)a2 + 2))
              {
LABEL_95:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v49 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v58);
              v46 = *((_QWORD *)a2 + 2);
              v45 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v45;
            }
LABEL_96:
            PB::Reader::recallMark();
          }
          else
          {
            v67 = (char *)*((_QWORD *)this + 2);
            v66 = *((_QWORD *)this + 3);
            if ((unint64_t)v67 >= v66)
            {
              v74 = (char *)*((_QWORD *)this + 1);
              v75 = (v67 - v74) >> 2;
              v76 = v75 + 1;
              if ((unint64_t)(v75 + 1) >> 62)
LABEL_146:
                sub_242729A44();
              v77 = v66 - (_QWORD)v74;
              if (v77 >> 1 > v76)
                v76 = v77 >> 1;
              if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFFCLL)
                v78 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v78 = v76;
              if (v78)
              {
                v78 = (unint64_t)sub_2429114B8(v78);
                v74 = (char *)*((_QWORD *)this + 1);
                v67 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v79 = 0;
              }
              v82 = (_DWORD *)(v78 + 4 * v75);
              *v82 = 0;
              v65 = v82 + 1;
              while (v67 != v74)
              {
                v83 = *((_DWORD *)v67 - 1);
                v67 -= 4;
                *--v82 = v83;
              }
              *((_QWORD *)this + 1) = v82;
              *((_QWORD *)this + 2) = v65;
              *((_QWORD *)this + 3) = v78 + 4 * v79;
              if (v74)
                operator delete(v74);
            }
            else
            {
              *(_DWORD *)v67 = 0;
              v65 = v67 + 4;
            }
            *((_QWORD *)this + 2) = v65;
LABEL_131:
            v84 = *((_QWORD *)a2 + 1);
            if (v84 <= 0xFFFFFFFFFFFFFFFBLL && v84 + 4 <= *((_QWORD *)a2 + 2))
            {
              *(v65 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v84);
LABEL_135:
              v29 = *((_QWORD *)a2 + 1) + 4;
LABEL_136:
              *((_QWORD *)a2 + 1) = v29;
            }
            else
            {
LABEL_133:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
          break;
        default:
          goto LABEL_19;
      }
      goto LABEL_137;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_21;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    if ((PB::Reader::skip(a2) & 1) == 0)
      return 0;
LABEL_137:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
}

uint64_t CMMsl::MovementStatsGravityProjection::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;

  v3 = this;
  v4 = *(_BYTE *)(this + 76);
  if ((v4 & 2) == 0)
  {
    if ((*(_BYTE *)(this + 76) & 1) == 0)
      goto LABEL_3;
LABEL_13:
    this = PB::Writer::write(a2, *(double *)(v3 + 56));
    if ((*(_BYTE *)(v3 + 76) & 4) == 0)
      goto LABEL_5;
    goto LABEL_4;
  }
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 76);
  if ((v4 & 1) != 0)
    goto LABEL_13;
LABEL_3:
  if ((v4 & 4) != 0)
LABEL_4:
    this = PB::Writer::write(a2, *(float *)(v3 + 72));
LABEL_5:
  v5 = *(float **)(v3 + 32);
  v6 = *(float **)(v3 + 40);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7);
  }
  v9 = *(float **)(v3 + 8);
  v8 = *(float **)(v3 + 16);
  while (v9 != v8)
  {
    v10 = *v9++;
    this = PB::Writer::write(a2, v10);
  }
  return this;
}

uint64_t CMMsl::MovementStatsGravityProjection::hash_value(CMMsl::MovementStatsGravityProjection *this)
{
  uint64_t v1;
  double v2;
  float v3;
  uint64_t v4;
  uint64_t v5;

  if ((*((_BYTE *)this + 76) & 2) != 0)
  {
    v1 = *((_QWORD *)this + 8);
    if ((*((_BYTE *)this + 76) & 1) != 0)
    {
LABEL_3:
      v2 = *((double *)this + 7);
      if (v2 == 0.0)
        v2 = 0.0;
      if ((*((_BYTE *)this + 76) & 4) != 0)
        goto LABEL_6;
LABEL_11:
      v4 = 0;
      goto LABEL_12;
    }
  }
  else
  {
    v1 = 0;
    if ((*((_BYTE *)this + 76) & 1) != 0)
      goto LABEL_3;
  }
  v2 = 0.0;
  if ((*((_BYTE *)this + 76) & 4) == 0)
    goto LABEL_11;
LABEL_6:
  v3 = *((float *)this + 18);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
LABEL_12:
  v5 = *(_QWORD *)&v2 ^ v1 ^ v4 ^ PBHashBytes();
  return v5 ^ PBHashBytes();
}

void CMMsl::MovementStatsSignal::~MovementStatsSignal(CMMsl::MovementStatsSignal *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::MovementStatsSignal::MovementStatsSignal(CMMsl::MovementStatsSignal *this, const CMMsl::MovementStatsSignal *a2)
{
  char v2;
  char v3;
  uint64_t v4;

  *(_QWORD *)this = &off_25135F698;
  *((_DWORD *)this + 10) = 0;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 40) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_BYTE *)a2 + 40);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 40) & 8) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 6);
    v3 |= 8u;
    *((_BYTE *)this + 40) = v3;
    *((_DWORD *)this + 6) = v4;
    v2 = *((_BYTE *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 0x40) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 9);
    v3 |= 0x40u;
    *((_BYTE *)this + 40) = v3;
    *((_DWORD *)this + 9) = v4;
    v2 = *((_BYTE *)a2 + 40);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *((_BYTE *)this + 40) = v3;
  *((_DWORD *)this + 4) = v4;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0)
      goto LABEL_10;
    goto LABEL_15;
  }
LABEL_14:
  LODWORD(v4) = *((_DWORD *)a2 + 8);
  v3 |= 0x20u;
  *((_BYTE *)this + 40) = v3;
  *((_DWORD *)this + 8) = v4;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 0x10) == 0)
      return *(float *)&v4;
    goto LABEL_16;
  }
LABEL_15:
  LODWORD(v4) = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *((_BYTE *)this + 40) = v3;
  *((_DWORD *)this + 5) = v4;
  if ((*((_BYTE *)a2 + 40) & 0x10) == 0)
    return *(float *)&v4;
LABEL_16:
  LODWORD(v4) = *((_DWORD *)a2 + 7);
  *((_BYTE *)this + 40) = v3 | 0x10;
  *((_DWORD *)this + 7) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::MovementStatsSignal::operator=(uint64_t a1, const CMMsl::MovementStatsSignal *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;

  if ((const CMMsl::MovementStatsSignal *)a1 != a2)
  {
    CMMsl::MovementStatsSignal::MovementStatsSignal((CMMsl::MovementStatsSignal *)&v8, a2);
    v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v12;
    v12 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    v9 = v4;
    v5 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v11;
    v11 = v5;
    v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v10;
    v10 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::MovementStatsSignal *a2, CMMsl::MovementStatsSignal *a3)
{
  int v3;
  uint64_t v4;
  float result;

  v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  result = *((float *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((float *)a2 + 7) = result;
  return result;
}

float CMMsl::MovementStatsSignal::MovementStatsSignal(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135F698;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  result = *(float *)(a2 + 28);
  *(float *)(a1 + 28) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_25135F698;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  result = *(float *)(a2 + 28);
  *(float *)(a1 + 28) = result;
  return result;
}

uint64_t CMMsl::MovementStatsSignal::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _QWORD v10[2];
  __int128 v11;
  uint64_t v12;
  int v13;

  if (a1 != a2)
  {
    v10[0] = &off_25135F698;
    v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v13 = *(_DWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v10[1] = v5;
    v12 = *(_QWORD *)(a1 + 32);
    v6 = *(_OWORD *)(a1 + 16);
    v7 = *(_OWORD *)(a2 + 16);
    v8 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 40) = v3;
    *(_QWORD *)(a1 + 32) = v8;
    *(_OWORD *)(a1 + 16) = v7;
    v11 = v6;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::MovementStatsSignal::formatText(CMMsl::MovementStatsSignal *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "cadence", *((float *)this + 4));
    v5 = *((_BYTE *)this + 40);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*((_BYTE *)this + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "horizontalRotationRateFiltered", *((float *)this + 5));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "sample", *((float *)this + 6));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
LABEL_15:
    PB::TextFormatter::format(a2, "verticalUserAcceleration", *((float *)this + 8));
    if ((*((_BYTE *)this + 40) & 0x40) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_8;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "verticalRotationRateFiltered", *((float *)this + 7));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 0x20) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v5 & 0x40) != 0)
LABEL_8:
    PB::TextFormatter::format(a2, "walkSpeedFilteredSample", *((float *)this + 9));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MovementStatsSignal::readFrom(CMMsl::MovementStatsSignal *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_47;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 40) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_43;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        v2 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_46;
      case 2u:
        *((_BYTE *)this + 40) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_43;
        *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_45;
      case 3u:
        *((_BYTE *)this + 40) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_43;
        *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_45;
      case 4u:
        *((_BYTE *)this + 40) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_43;
        *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_45;
      case 5u:
        *((_BYTE *)this + 40) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_43;
        *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_45;
      case 6u:
        *((_BYTE *)this + 40) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_43;
        *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_45;
      case 7u:
        *((_BYTE *)this + 40) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_45:
          v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_46:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_43:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_47:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::MovementStatsSignal::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 40);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(this + 40) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x10) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 28));
  }
LABEL_14:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  if ((*(_BYTE *)(v3 + 40) & 0x10) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 28));
  return this;
}

uint64_t CMMsl::MovementStatsSignal::hash_value(CMMsl::MovementStatsSignal *this)
{
  double v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v13;

  if ((*((_BYTE *)this + 40) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 40) & 8) != 0)
      goto LABEL_3;
LABEL_24:
    v3 = 0;
    if ((*((_BYTE *)this + 40) & 0x40) != 0)
      goto LABEL_6;
LABEL_25:
    v5 = 0;
    if ((*((_BYTE *)this + 40) & 2) != 0)
      goto LABEL_9;
LABEL_26:
    v7 = 0;
    if ((*((_BYTE *)this + 40) & 0x20) != 0)
      goto LABEL_12;
LABEL_27:
    v9 = 0;
    if ((*((_BYTE *)this + 40) & 4) != 0)
      goto LABEL_15;
    goto LABEL_28;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 40) & 8) == 0)
    goto LABEL_24;
LABEL_3:
  v2 = *((float *)this + 6);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 40) & 0x40) == 0)
    goto LABEL_25;
LABEL_6:
  v4 = *((float *)this + 9);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((*((_BYTE *)this + 40) & 2) == 0)
    goto LABEL_26;
LABEL_9:
  v6 = *((float *)this + 4);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  if ((*((_BYTE *)this + 40) & 0x20) == 0)
    goto LABEL_27;
LABEL_12:
  v8 = *((float *)this + 8);
  v9 = LODWORD(v8);
  if (v8 == 0.0)
    v9 = 0;
  if ((*((_BYTE *)this + 40) & 4) != 0)
  {
LABEL_15:
    v10 = *((float *)this + 5);
    v11 = LODWORD(v10);
    if (v10 == 0.0)
      v11 = 0;
    if ((*((_BYTE *)this + 40) & 0x10) != 0)
      goto LABEL_18;
LABEL_29:
    v13 = 0;
    return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13;
  }
LABEL_28:
  v11 = 0;
  if ((*((_BYTE *)this + 40) & 0x10) == 0)
    goto LABEL_29;
LABEL_18:
  v12 = *((float *)this + 7);
  v13 = LODWORD(v12);
  if (v12 == 0.0)
    v13 = 0;
  return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13;
}

void CMMsl::NatalieData::~NatalieData(CMMsl::NatalieData *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::NatalieData::NatalieData(uint64_t this, const CMMsl::NatalieData *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  *(_QWORD *)this = &off_25135F6D0;
  *(_DWORD *)(this + 68) = 0;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x10) != 0)
  {
    v4 = *((_QWORD *)a2 + 5);
    v3 = 16;
    *(_WORD *)(this + 68) = 16;
    *(_QWORD *)(this + 40) = v4;
    v2 = *((_WORD *)a2 + 34);
    if ((v2 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 12);
    v3 |= 0x20u;
    *(_WORD *)(this + 68) = v3;
    *(_DWORD *)(this + 48) = v5;
    v2 = *((_WORD *)a2 + 34);
  }
LABEL_6:
  if ((v2 & 0x400) != 0)
  {
    v6 = *((_BYTE *)a2 + 65);
    v3 |= 0x400u;
    *(_WORD *)(this + 68) = v3;
    *(_BYTE *)(this + 65) = v6;
    v2 = *((_WORD *)a2 + 34);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_18;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_WORD *)(this + 68) = v3;
  *(_QWORD *)(this + 16) = v7;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  v8 = *((_DWORD *)a2 + 13);
  v3 |= 0x40u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 52) = v8;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  v9 = *((_DWORD *)a2 + 15);
  v3 |= 0x100u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 60) = v9;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0)
      goto LABEL_12;
    goto LABEL_21;
  }
LABEL_20:
  v10 = *((_DWORD *)a2 + 14);
  v3 |= 0x80u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 56) = v10;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  v11 = *((_QWORD *)a2 + 3);
  v3 |= 4u;
  *(_WORD *)(this + 68) = v3;
  *(_QWORD *)(this + 24) = v11;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 1) == 0)
      goto LABEL_14;
    goto LABEL_23;
  }
LABEL_22:
  v12 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *(_WORD *)(this + 68) = v3;
  *(_QWORD *)(this + 32) = v12;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 1) == 0)
  {
LABEL_14:
    if ((v2 & 0x200) == 0)
      return this;
LABEL_24:
    v14 = *((_BYTE *)a2 + 64);
    *(_WORD *)(this + 68) = v3 | 0x200;
    *(_BYTE *)(this + 64) = v14;
    return this;
  }
LABEL_23:
  v13 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 68) = v3;
  *(_QWORD *)(this + 8) = v13;
  if ((*((_WORD *)a2 + 34) & 0x200) != 0)
    goto LABEL_24;
  return this;
}

CMMsl *CMMsl::NatalieData::operator=(CMMsl *a1, const CMMsl::NatalieData *a2)
{
  CMMsl::NatalieData *v3;
  _BYTE v5[72];

  if (a1 != a2)
  {
    CMMsl::NatalieData::NatalieData((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::NatalieData *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::NatalieData *a2, CMMsl::NatalieData *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  v3 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v3;
  v4 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v4;
  v5 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v5;
  LOBYTE(v5) = *((_BYTE *)this + 65);
  *((_BYTE *)this + 65) = *((_BYTE *)a2 + 65);
  *((_BYTE *)a2 + 65) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v7;
  v8 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v8;
  v9 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v9;
  v10 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v10;
  v11 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v11;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  LOBYTE(v9) = *((_BYTE *)this + 64);
  *((_BYTE *)this + 64) = *((_BYTE *)a2 + 64);
  *((_BYTE *)a2 + 64) = v9;
  return result;
}

double CMMsl::NatalieData::NatalieData(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135F6D0;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a2 + 68) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return result;
}

CMMsl *CMMsl::NatalieData::operator=(CMMsl *this, uint64_t a2, CMMsl::NatalieData *a3)
{
  __int128 v4;
  void (**v6)(CMMsl::NatalieData *__hidden);
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int16 v11;
  int v12;

  if (this != (CMMsl *)a2)
  {
    v6 = &off_25135F6D0;
    v12 = *(_DWORD *)(a2 + 68);
    *(_DWORD *)(a2 + 68) = 0;
    v9 = *(_QWORD *)(a2 + 40);
    v10 = *(_OWORD *)(a2 + 48);
    v4 = *(_OWORD *)(a2 + 24);
    v7 = *(_OWORD *)(a2 + 8);
    v8 = v4;
    v11 = *(_WORD *)(a2 + 64);
    CMMsl::swap(this, (CMMsl::NatalieData *)&v6, a3);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return this;
}

uint64_t CMMsl::NatalieData::formatText(CMMsl::NatalieData *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(a2, "activityType");
    v5 = *((_WORD *)this + 34);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 0x200) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "duration", *((double *)this + 1));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x200) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "fGpsAvailability");
  v5 = *((_WORD *)this + 34);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "fractionalGrade", *((double *)this + 2));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "gradeType");
  v5 = *((_WORD *)this + 34);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "hrmin", *((double *)this + 3));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x400) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "isStanding");
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 8) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "metSource");
  v5 = *((_WORD *)this + 34);
  if ((v5 & 8) == 0)
  {
LABEL_10:
    if ((v5 & 0x100) == 0)
      goto LABEL_11;
LABEL_23:
    PB::TextFormatter::format(a2, "rawGradeType");
    if ((*((_WORD *)this + 34) & 0x10) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "mets", *((double *)this + 4));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x100) != 0)
    goto LABEL_23;
LABEL_11:
  if ((v5 & 0x10) != 0)
LABEL_12:
    PB::TextFormatter::format(a2, "startTime", *((double *)this + 5));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::NatalieData::readFrom(CMMsl::NatalieData *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  int v26;
  BOOL v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  uint64_t v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  char v45;
  int v46;
  BOOL v47;
  char v48;
  unsigned int v49;
  unint64_t v50;
  char v51;
  char v52;
  unsigned int v53;
  unint64_t v54;
  char v55;
  char v56;
  unsigned int v57;
  unint64_t v58;
  char v59;
  char v60;
  unsigned int v61;
  unint64_t v62;
  char v63;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_124;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 34) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_67;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_103;
      case 2u:
        *((_WORD *)this + 34) |= 0x20u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v48 = 0;
          v49 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_108;
            }
            v50 = v20++;
            v51 = *(_BYTE *)(v21 + v50);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v51 & 0x7F) << v48;
            if ((v51 & 0x80) == 0)
              break;
            v48 += 7;
            v14 = v49++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_107:
              v2 = v50 + 1;
              goto LABEL_108;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
          goto LABEL_107;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_108;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_108:
        *((_DWORD *)this + 12) = v24;
        break;
      case 3u:
        *((_WORD *)this + 34) |= 0x400u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v27 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v26 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v27 = v26 != 0;
        }
        *((_BYTE *)this + 65) = v27;
        break;
      case 4u:
        *((_WORD *)this + 34) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_67;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_103;
      case 5u:
        *((_WORD *)this + 34) |= 0x40u;
        v28 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v29 = *(_QWORD *)a2;
        if (v28 > 0xFFFFFFFFFFFFFFF5 || v28 + 10 > v2)
        {
          v52 = 0;
          v53 = 0;
          v32 = 0;
          if (v2 <= v28)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v28)
            {
              LODWORD(v32) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_113;
            }
            v54 = v28++;
            v55 = *(_BYTE *)(v29 + v54);
            *((_QWORD *)a2 + 1) = v28;
            v32 |= (unint64_t)(v55 & 0x7F) << v52;
            if ((v55 & 0x80) == 0)
              break;
            v52 += 7;
            v14 = v53++ > 8;
            if (v14)
            {
              LODWORD(v32) = 0;
LABEL_112:
              v2 = v54 + 1;
              goto LABEL_113;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v32) = 0;
          goto LABEL_112;
        }
        v30 = 0;
        v31 = 0;
        v32 = 0;
        do
        {
          v2 = v28 + 1;
          *((_QWORD *)a2 + 1) = v28 + 1;
          v33 = *(_BYTE *)(v29 + v28);
          v32 |= (unint64_t)(v33 & 0x7F) << v30;
          if ((v33 & 0x80) == 0)
            goto LABEL_113;
          v30 += 7;
          v28 = v2;
          v14 = v31++ > 8;
        }
        while (!v14);
        LODWORD(v32) = 0;
LABEL_113:
        *((_DWORD *)this + 13) = v32;
        break;
      case 6u:
        *((_WORD *)this + 34) |= 0x100u;
        v34 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v35 = *(_QWORD *)a2;
        if (v34 > 0xFFFFFFFFFFFFFFF5 || v34 + 10 > v2)
        {
          v56 = 0;
          v57 = 0;
          v38 = 0;
          if (v2 <= v34)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v34)
            {
              LODWORD(v38) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_118;
            }
            v58 = v34++;
            v59 = *(_BYTE *)(v35 + v58);
            *((_QWORD *)a2 + 1) = v34;
            v38 |= (unint64_t)(v59 & 0x7F) << v56;
            if ((v59 & 0x80) == 0)
              break;
            v56 += 7;
            v14 = v57++ > 8;
            if (v14)
            {
              LODWORD(v38) = 0;
LABEL_117:
              v2 = v58 + 1;
              goto LABEL_118;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v38) = 0;
          goto LABEL_117;
        }
        v36 = 0;
        v37 = 0;
        v38 = 0;
        do
        {
          v2 = v34 + 1;
          *((_QWORD *)a2 + 1) = v34 + 1;
          v39 = *(_BYTE *)(v35 + v34);
          v38 |= (unint64_t)(v39 & 0x7F) << v36;
          if ((v39 & 0x80) == 0)
            goto LABEL_118;
          v36 += 7;
          v34 = v2;
          v14 = v37++ > 8;
        }
        while (!v14);
        LODWORD(v38) = 0;
LABEL_118:
        *((_DWORD *)this + 15) = v38;
        break;
      case 7u:
        *((_WORD *)this + 34) |= 0x80u;
        v40 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v41 = *(_QWORD *)a2;
        if (v40 > 0xFFFFFFFFFFFFFFF5 || v40 + 10 > v2)
        {
          v60 = 0;
          v61 = 0;
          v44 = 0;
          if (v2 <= v40)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v40)
            {
              LODWORD(v44) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_123;
            }
            v62 = v40++;
            v63 = *(_BYTE *)(v41 + v62);
            *((_QWORD *)a2 + 1) = v40;
            v44 |= (unint64_t)(v63 & 0x7F) << v60;
            if ((v63 & 0x80) == 0)
              break;
            v60 += 7;
            v14 = v61++ > 8;
            if (v14)
            {
              LODWORD(v44) = 0;
LABEL_122:
              v2 = v62 + 1;
              goto LABEL_123;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v44) = 0;
          goto LABEL_122;
        }
        v42 = 0;
        v43 = 0;
        v44 = 0;
        do
        {
          v2 = v40 + 1;
          *((_QWORD *)a2 + 1) = v40 + 1;
          v45 = *(_BYTE *)(v41 + v40);
          v44 |= (unint64_t)(v45 & 0x7F) << v42;
          if ((v45 & 0x80) == 0)
            goto LABEL_123;
          v42 += 7;
          v40 = v2;
          v14 = v43++ > 8;
        }
        while (!v14);
        LODWORD(v44) = 0;
LABEL_123:
        *((_DWORD *)this + 14) = v44;
        break;
      case 8u:
        *((_WORD *)this + 34) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_67;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_103;
      case 9u:
        *((_WORD *)this + 34) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_67;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_103;
      case 0xAu:
        *((_WORD *)this + 34) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_103:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_67:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 0xBu:
        *((_WORD *)this + 34) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v47 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v46 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v47 = v46 != 0;
        }
        *((_BYTE *)this + 64) = v47;
        break;
      default:
        goto LABEL_19;
    }
LABEL_124:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::NatalieData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 68);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 40));
    v4 = *(_WORD *)(v3 + 68);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 1) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 1) == 0)
  {
LABEL_11:
    if ((v4 & 0x200) == 0)
      return this;
    return PB::Writer::write(a2);
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  if ((*(_WORD *)(v3 + 68) & 0x200) != 0)
    return PB::Writer::write(a2);
  return this;
}

uint64_t CMMsl::NatalieData::hash_value(CMMsl::NatalieData *this)
{
  __int16 v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;

  v1 = *((_WORD *)this + 34);
  if ((v1 & 0x10) != 0)
  {
    v2 = *((double *)this + 5);
    if (v2 == 0.0)
      v2 = 0.0;
    if ((v1 & 0x20) != 0)
    {
LABEL_3:
      v3 = *((unsigned int *)this + 12);
      if ((*((_WORD *)this + 34) & 0x400) != 0)
        goto LABEL_4;
      goto LABEL_25;
    }
  }
  else
  {
    v2 = 0.0;
    if ((v1 & 0x20) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((*((_WORD *)this + 34) & 0x400) != 0)
  {
LABEL_4:
    v4 = *((unsigned __int8 *)this + 65);
    if ((v1 & 2) != 0)
      goto LABEL_5;
LABEL_26:
    v5 = 0.0;
    if ((v1 & 0x40) != 0)
      goto LABEL_8;
    goto LABEL_27;
  }
LABEL_25:
  v4 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_26;
LABEL_5:
  v5 = *((double *)this + 2);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((v1 & 0x40) != 0)
  {
LABEL_8:
    v6 = *((unsigned int *)this + 13);
    if ((*((_WORD *)this + 34) & 0x100) != 0)
      goto LABEL_9;
    goto LABEL_28;
  }
LABEL_27:
  v6 = 0;
  if ((*((_WORD *)this + 34) & 0x100) != 0)
  {
LABEL_9:
    v7 = *((unsigned int *)this + 15);
    if ((v1 & 0x80) != 0)
      goto LABEL_10;
    goto LABEL_29;
  }
LABEL_28:
  v7 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_10:
    v8 = *((unsigned int *)this + 14);
    if ((v1 & 4) != 0)
      goto LABEL_11;
LABEL_30:
    v9 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_14;
LABEL_31:
    v10 = 0.0;
    if ((v1 & 1) != 0)
      goto LABEL_17;
    goto LABEL_32;
  }
LABEL_29:
  v8 = 0;
  if ((v1 & 4) == 0)
    goto LABEL_30;
LABEL_11:
  v9 = *((double *)this + 3);
  if (v9 == 0.0)
    v9 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_31;
LABEL_14:
  v10 = *((double *)this + 4);
  if (v10 == 0.0)
    v10 = 0.0;
  if ((v1 & 1) != 0)
  {
LABEL_17:
    v11 = *((double *)this + 1);
    if (v11 == 0.0)
      v11 = 0.0;
    if ((*((_WORD *)this + 34) & 0x200) != 0)
      goto LABEL_20;
LABEL_33:
    v12 = 0;
    return v3 ^ *(_QWORD *)&v2 ^ v4 ^ *(_QWORD *)&v5 ^ v6 ^ v7 ^ v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ v12;
  }
LABEL_32:
  v11 = 0.0;
  if ((*((_WORD *)this + 34) & 0x200) == 0)
    goto LABEL_33;
LABEL_20:
  v12 = *((unsigned __int8 *)this + 64);
  return v3 ^ *(_QWORD *)&v2 ^ v4 ^ *(_QWORD *)&v5 ^ v6 ^ v7 ^ v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ v12;
}

void CMMsl::NonlinearBiasFit::~NonlinearBiasFit(CMMsl::NonlinearBiasFit *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  *(_QWORD *)this = &off_25135F708;
  v2 = (void *)*((_QWORD *)this + 19);
  if (v2)
  {
    *((_QWORD *)this + 20) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 16);
  if (v3)
  {
    *((_QWORD *)this + 17) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 13);
  if (v4)
  {
    *((_QWORD *)this + 14) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 10);
  if (v5)
  {
    *((_QWORD *)this + 11) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 7);
  if (v6)
  {
    *((_QWORD *)this + 8) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 4);
  if (v7)
  {
    *((_QWORD *)this + 5) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 1);
  if (v8)
  {
    *((_QWORD *)this + 2) = v8;
    operator delete(v8);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::NonlinearBiasFit::~NonlinearBiasFit(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::NonlinearBiasFit *CMMsl::NonlinearBiasFit::NonlinearBiasFit(char **this, char **a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;

  *this = (char *)&off_25135F708;
  *(_OWORD *)(this + 1) = 0u;
  v4 = this + 1;
  *(_OWORD *)(this + 7) = 0u;
  v5 = this + 7;
  *(_OWORD *)(this + 13) = 0u;
  v6 = this + 13;
  *(_OWORD *)(this + 19) = 0u;
  v7 = this + 19;
  *((_DWORD *)this + 45) = 0;
  *(_OWORD *)(this + 3) = 0u;
  *(_OWORD *)(this + 5) = 0u;
  *(_OWORD *)(this + 9) = 0u;
  *(_OWORD *)(this + 11) = 0u;
  *(_OWORD *)(this + 15) = 0u;
  *(_OWORD *)(this + 17) = 0u;
  this[21] = 0;
  if (this != a2)
  {
    sub_242911380(this + 16, a2[16], a2[17], (a2[17] - a2[16]) >> 2);
    sub_242911380(v6, a2[13], a2[14], (a2[14] - a2[13]) >> 2);
    sub_242911380(v7, a2[19], a2[20], (a2[20] - a2[19]) >> 2);
  }
  if ((*((_BYTE *)a2 + 180) & 1) != 0)
  {
    v8 = *((_DWORD *)a2 + 44);
    *((_BYTE *)this + 180) |= 1u;
    *((_DWORD *)this + 44) = v8;
  }
  if (this != a2)
  {
    sub_242911380(this + 10, a2[10], a2[11], (a2[11] - a2[10]) >> 2);
    sub_242911380(v4, a2[1], a2[2], (a2[2] - a2[1]) >> 2);
    sub_242911380(this + 4, a2[4], a2[5], (a2[5] - a2[4]) >> 2);
    sub_242911380(v5, a2[7], a2[8], (a2[8] - a2[7]) >> 2);
  }
  return (CMMsl::NonlinearBiasFit *)this;
}

CMMsl *CMMsl::NonlinearBiasFit::operator=(CMMsl *a1, char **a2)
{
  CMMsl::NonlinearBiasFit *v3;
  char *v5[23];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::NonlinearBiasFit::NonlinearBiasFit(v5, a2);
    CMMsl::swap(a1, (CMMsl::NonlinearBiasFit *)v5, v3);
    CMMsl::NonlinearBiasFit::~NonlinearBiasFit((CMMsl::NonlinearBiasFit *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::NonlinearBiasFit *a2, CMMsl::NonlinearBiasFit *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = *((_DWORD *)this + 45);
  *((_DWORD *)this + 45) = *((_DWORD *)a2 + 45);
  *((_DWORD *)a2 + 45) = v3;
  v4 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v4;
  v5 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v5;
  v6 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v6;
  v7 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v7;
  v8 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v8;
  v9 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v9;
  v10 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 19) = v10;
  v11 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = *((_QWORD *)a2 + 20);
  *((_QWORD *)a2 + 20) = v11;
  v12 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = *((_QWORD *)a2 + 21);
  *((_QWORD *)a2 + 21) = v12;
  result = *((float *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((float *)a2 + 44) = result;
  v14 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v14;
  v15 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v15;
  v16 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v16;
  v17 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v17;
  v18 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v18;
  v19 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v19;
  v20 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v20;
  v21 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v21;
  v22 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v22;
  v23 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v23;
  v24 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v24;
  v25 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v25;
  return result;
}

uint64_t CMMsl::NonlinearBiasFit::NonlinearBiasFit(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_25135F708;
  v4 = a1 + 32;
  v5 = a1 + 80;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a2 + 180) = 0;
  sub_242911330(a1 + 128, (__n128 *)(a2 + 128));
  sub_242911330(a1 + 104, (__n128 *)(a2 + 104));
  sub_242911330(a1 + 152, (__n128 *)(a2 + 152));
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  sub_242911330(v5, (__n128 *)(a2 + 80));
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  sub_242911330(v4, (__n128 *)(a2 + 32));
  sub_242911330(a1 + 56, (__n128 *)(a2 + 56));
  return a1;
}

CMMsl *CMMsl::NonlinearBiasFit::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::NonlinearBiasFit *v3;
  _BYTE v5[184];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::NonlinearBiasFit::NonlinearBiasFit((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::NonlinearBiasFit *)v5, v3);
    CMMsl::NonlinearBiasFit::~NonlinearBiasFit((CMMsl::NonlinearBiasFit *)v5);
  }
  return a1;
}

uint64_t CMMsl::NonlinearBiasFit::formatText(CMMsl::NonlinearBiasFit *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float *v13;
  float *v14;
  float v15;
  float *v16;
  float *v17;
  float v18;
  float *v19;
  float *v20;
  float v21;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 10);
  v6 = *((_QWORD *)this + 11);
  while (v5 != v6)
  {
    v5 += 4;
    PB::TextFormatter::format(a2, "error");
  }
  v7 = *((_QWORD *)this + 1);
  v8 = *((_QWORD *)this + 2);
  while (v7 != v8)
  {
    v7 += 4;
    PB::TextFormatter::format(a2, "errorX");
  }
  v9 = *((_QWORD *)this + 4);
  v10 = *((_QWORD *)this + 5);
  while (v9 != v10)
  {
    v9 += 4;
    PB::TextFormatter::format(a2, "errorY");
  }
  v11 = *((_QWORD *)this + 7);
  v12 = *((_QWORD *)this + 8);
  while (v11 != v12)
  {
    v11 += 4;
    PB::TextFormatter::format(a2, "errorZ");
  }
  v13 = (float *)*((_QWORD *)this + 13);
  v14 = (float *)*((_QWORD *)this + 14);
  while (v13 != v14)
  {
    v15 = *v13++;
    PB::TextFormatter::format(a2, "intercept", v15);
  }
  if ((*((_BYTE *)this + 180) & 1) != 0)
    PB::TextFormatter::format(a2, "overlap", *((float *)this + 44));
  v16 = (float *)*((_QWORD *)this + 16);
  v17 = (float *)*((_QWORD *)this + 17);
  while (v16 != v17)
  {
    v18 = *v16++;
    PB::TextFormatter::format(a2, "slope", v18);
  }
  v19 = (float *)*((_QWORD *)this + 19);
  v20 = (float *)*((_QWORD *)this + 20);
  while (v19 != v20)
  {
    v21 = *v19++;
    PB::TextFormatter::format(a2, "temperature", v21);
  }
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::NonlinearBiasFit::readFrom(CMMsl::NonlinearBiasFit *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  _DWORD *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  _DWORD *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  _DWORD *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  _DWORD *v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  _DWORD *v70;
  char *v71;
  int v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  BOOL v76;
  char v77;
  unsigned int v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  char v82;
  unsigned int v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  _DWORD *v94;
  char *v95;
  int v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  char v101;
  unsigned int v102;
  uint64_t v103;
  unint64_t v104;
  char v105;
  char v106;
  unsigned int v107;
  uint64_t v108;
  unint64_t v109;
  char v110;
  unint64_t v111;
  char *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  _DWORD *v118;
  char *v119;
  int v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  char v125;
  unsigned int v126;
  uint64_t v127;
  unint64_t v128;
  char v129;
  char v130;
  unsigned int v131;
  uint64_t v132;
  unint64_t v133;
  char v134;
  unint64_t v135;
  char *v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  _DWORD *v142;
  char *v143;
  int v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  char v149;
  unsigned int v150;
  uint64_t v151;
  unint64_t v152;
  char v153;
  char v154;
  unsigned int v155;
  uint64_t v156;
  unint64_t v157;
  char v158;
  unint64_t v159;
  char *v160;
  _DWORD *v161;
  unint64_t v162;
  char *v163;
  unint64_t v164;
  char *v165;
  unint64_t v166;
  char *v167;
  _DWORD *v168;
  unint64_t v169;
  char *v170;
  unint64_t v171;
  char *v172;
  unint64_t v173;
  char *v174;
  char *v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  char *v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  _DWORD *v217;
  int v218;
  _DWORD *v219;
  int v220;
  _DWORD *v221;
  int v222;
  unint64_t v223;
  _DWORD *v224;
  int v225;
  unint64_t v226;
  unint64_t v227;
  uint64_t v228;
  char v229;
  unsigned int v230;
  unint64_t v232;
  char v233;
  uint64_t v234;
  unint64_t v235;
  char v236;
  _DWORD *v237;
  int v238;
  unint64_t v239;
  unint64_t v240;
  uint64_t v241;
  char v242;
  unsigned int v243;
  unint64_t v245;
  char v246;
  unint64_t v247;
  char v248;
  _DWORD *v249;
  int v250;
  unint64_t v251;
  unint64_t v252;
  uint64_t v253;
  char v254;
  unsigned int v255;
  unint64_t v257;
  char v258;
  unint64_t v259;
  char v260;
  _DWORD *v261;
  int v262;
  unint64_t v263;
  unint64_t v264;
  uint64_t v265;
  char v266;
  unsigned int v267;
  unint64_t v269;
  char v270;
  unint64_t v271;
  char v272;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v76 = v10++ > 8;
        if (v76)
          goto LABEL_19;
      }
LABEL_21:
      v18 = v11 & 7;
      if (v18 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          if (v18 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v19 = *((_QWORD *)a2 + 1);
            v20 = *((_QWORD *)a2 + 2);
            while (v19 < v20 && !*((_BYTE *)a2 + 24))
            {
              v22 = (char *)*((_QWORD *)this + 17);
              v21 = *((_QWORD *)this + 18);
              if ((unint64_t)v22 >= v21)
              {
                v24 = (char *)*((_QWORD *)this + 16);
                v25 = (v22 - v24) >> 2;
                v26 = v25 + 1;
                if ((unint64_t)(v25 + 1) >> 62)
                  goto LABEL_479;
                v27 = v21 - (_QWORD)v24;
                if (v27 >> 1 > v26)
                  v26 = v27 >> 1;
                if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
                  v28 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v28 = v26;
                if (v28)
                {
                  v28 = (unint64_t)sub_2429114B8(v28);
                  v24 = (char *)*((_QWORD *)this + 16);
                  v22 = (char *)*((_QWORD *)this + 17);
                }
                else
                {
                  v29 = 0;
                }
                v30 = (_DWORD *)(v28 + 4 * v25);
                *v30 = 0;
                v23 = v30 + 1;
                while (v22 != v24)
                {
                  v31 = *((_DWORD *)v22 - 1);
                  v22 -= 4;
                  *--v30 = v31;
                }
                *((_QWORD *)this + 16) = v30;
                *((_QWORD *)this + 17) = v23;
                *((_QWORD *)this + 18) = v28 + 4 * v29;
                if (v24)
                  operator delete(v24);
              }
              else
              {
                *(_DWORD *)v22 = 0;
                v23 = v22 + 4;
              }
              *((_QWORD *)this + 17) = v23;
              v32 = *((_QWORD *)a2 + 1);
              if (v32 > 0xFFFFFFFFFFFFFFFBLL || v32 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_293;
              *(v23 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v32);
              v20 = *((_QWORD *)a2 + 2);
              v19 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v19;
            }
            goto LABEL_294;
          }
          v160 = (char *)*((_QWORD *)this + 17);
          v159 = *((_QWORD *)this + 18);
          if ((unint64_t)v160 >= v159)
          {
            v175 = (char *)*((_QWORD *)this + 16);
            v176 = (v160 - v175) >> 2;
            v177 = v176 + 1;
            if ((unint64_t)(v176 + 1) >> 62)
              goto LABEL_479;
            v178 = v159 - (_QWORD)v175;
            if (v178 >> 1 > v177)
              v177 = v178 >> 1;
            if ((unint64_t)v178 >= 0x7FFFFFFFFFFFFFFCLL)
              v179 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v179 = v177;
            if (v179)
            {
              v179 = (unint64_t)sub_2429114B8(v179);
              v175 = (char *)*((_QWORD *)this + 16);
              v160 = (char *)*((_QWORD *)this + 17);
            }
            else
            {
              v180 = 0;
            }
            v217 = (_DWORD *)(v179 + 4 * v176);
            *v217 = 0;
            v161 = v217 + 1;
            while (v160 != v175)
            {
              v218 = *((_DWORD *)v160 - 1);
              v160 -= 4;
              *--v217 = v218;
            }
            *((_QWORD *)this + 16) = v217;
            *((_QWORD *)this + 17) = v161;
            *((_QWORD *)this + 18) = v179 + 4 * v180;
            if (v175)
              operator delete(v175);
          }
          else
          {
            *(_DWORD *)v160 = 0;
            v161 = v160 + 4;
          }
          *((_QWORD *)this + 17) = v161;
          goto LABEL_372;
        case 2u:
          if (v18 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v33 = *((_QWORD *)a2 + 1);
            v34 = *((_QWORD *)a2 + 2);
            while (v33 < v34 && !*((_BYTE *)a2 + 24))
            {
              v36 = (char *)*((_QWORD *)this + 14);
              v35 = *((_QWORD *)this + 15);
              if ((unint64_t)v36 >= v35)
              {
                v38 = (char *)*((_QWORD *)this + 13);
                v39 = (v36 - v38) >> 2;
                v40 = v39 + 1;
                if ((unint64_t)(v39 + 1) >> 62)
                  goto LABEL_479;
                v41 = v35 - (_QWORD)v38;
                if (v41 >> 1 > v40)
                  v40 = v41 >> 1;
                if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL)
                  v42 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v42 = v40;
                if (v42)
                {
                  v42 = (unint64_t)sub_2429114B8(v42);
                  v38 = (char *)*((_QWORD *)this + 13);
                  v36 = (char *)*((_QWORD *)this + 14);
                }
                else
                {
                  v43 = 0;
                }
                v44 = (_DWORD *)(v42 + 4 * v39);
                *v44 = 0;
                v37 = v44 + 1;
                while (v36 != v38)
                {
                  v45 = *((_DWORD *)v36 - 1);
                  v36 -= 4;
                  *--v44 = v45;
                }
                *((_QWORD *)this + 13) = v44;
                *((_QWORD *)this + 14) = v37;
                *((_QWORD *)this + 15) = v42 + 4 * v43;
                if (v38)
                  operator delete(v38);
              }
              else
              {
                *(_DWORD *)v36 = 0;
                v37 = v36 + 4;
              }
              *((_QWORD *)this + 14) = v37;
              v46 = *((_QWORD *)a2 + 1);
              if (v46 > 0xFFFFFFFFFFFFFFFBLL || v46 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_293;
              *(v37 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v46);
              v34 = *((_QWORD *)a2 + 2);
              v33 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v33;
            }
            goto LABEL_294;
          }
          v163 = (char *)*((_QWORD *)this + 14);
          v162 = *((_QWORD *)this + 15);
          if ((unint64_t)v163 >= v162)
          {
            v181 = (char *)*((_QWORD *)this + 13);
            v182 = (v163 - v181) >> 2;
            v183 = v182 + 1;
            if ((unint64_t)(v182 + 1) >> 62)
              goto LABEL_479;
            v184 = v162 - (_QWORD)v181;
            if (v184 >> 1 > v183)
              v183 = v184 >> 1;
            if ((unint64_t)v184 >= 0x7FFFFFFFFFFFFFFCLL)
              v185 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v185 = v183;
            if (v185)
            {
              v185 = (unint64_t)sub_2429114B8(v185);
              v181 = (char *)*((_QWORD *)this + 13);
              v163 = (char *)*((_QWORD *)this + 14);
            }
            else
            {
              v186 = 0;
            }
            v219 = (_DWORD *)(v185 + 4 * v182);
            *v219 = 0;
            v161 = v219 + 1;
            while (v163 != v181)
            {
              v220 = *((_DWORD *)v163 - 1);
              v163 -= 4;
              *--v219 = v220;
            }
            *((_QWORD *)this + 13) = v219;
            *((_QWORD *)this + 14) = v161;
            *((_QWORD *)this + 15) = v185 + 4 * v186;
            if (v181)
              operator delete(v181);
          }
          else
          {
            *(_DWORD *)v163 = 0;
            v161 = v163 + 4;
          }
          *((_QWORD *)this + 14) = v161;
          goto LABEL_372;
        case 3u:
          if (v18 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v47 = *((_QWORD *)a2 + 1);
            v48 = *((_QWORD *)a2 + 2);
            while (v47 < v48 && !*((_BYTE *)a2 + 24))
            {
              v50 = (char *)*((_QWORD *)this + 20);
              v49 = *((_QWORD *)this + 21);
              if ((unint64_t)v50 >= v49)
              {
                v52 = (char *)*((_QWORD *)this + 19);
                v53 = (v50 - v52) >> 2;
                v54 = v53 + 1;
                if ((unint64_t)(v53 + 1) >> 62)
                  goto LABEL_479;
                v55 = v49 - (_QWORD)v52;
                if (v55 >> 1 > v54)
                  v54 = v55 >> 1;
                if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL)
                  v56 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v56 = v54;
                if (v56)
                {
                  v56 = (unint64_t)sub_2429114B8(v56);
                  v52 = (char *)*((_QWORD *)this + 19);
                  v50 = (char *)*((_QWORD *)this + 20);
                }
                else
                {
                  v57 = 0;
                }
                v58 = (_DWORD *)(v56 + 4 * v53);
                *v58 = 0;
                v51 = v58 + 1;
                while (v50 != v52)
                {
                  v59 = *((_DWORD *)v50 - 1);
                  v50 -= 4;
                  *--v58 = v59;
                }
                *((_QWORD *)this + 19) = v58;
                *((_QWORD *)this + 20) = v51;
                *((_QWORD *)this + 21) = v56 + 4 * v57;
                if (v52)
                  operator delete(v52);
              }
              else
              {
                *(_DWORD *)v50 = 0;
                v51 = v50 + 4;
              }
              *((_QWORD *)this + 20) = v51;
              v60 = *((_QWORD *)a2 + 1);
              if (v60 > 0xFFFFFFFFFFFFFFFBLL || v60 + 4 > *((_QWORD *)a2 + 2))
              {
LABEL_293:
                *((_BYTE *)a2 + 24) = 1;
                goto LABEL_294;
              }
              *(v51 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v60);
              v48 = *((_QWORD *)a2 + 2);
              v47 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v47;
            }
            goto LABEL_294;
          }
          v165 = (char *)*((_QWORD *)this + 20);
          v164 = *((_QWORD *)this + 21);
          if ((unint64_t)v165 >= v164)
          {
            v187 = (char *)*((_QWORD *)this + 19);
            v188 = (v165 - v187) >> 2;
            v189 = v188 + 1;
            if ((unint64_t)(v188 + 1) >> 62)
LABEL_479:
              sub_242729A44();
            v190 = v164 - (_QWORD)v187;
            if (v190 >> 1 > v189)
              v189 = v190 >> 1;
            if ((unint64_t)v190 >= 0x7FFFFFFFFFFFFFFCLL)
              v191 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v191 = v189;
            if (v191)
            {
              v191 = (unint64_t)sub_2429114B8(v191);
              v187 = (char *)*((_QWORD *)this + 19);
              v165 = (char *)*((_QWORD *)this + 20);
            }
            else
            {
              v192 = 0;
            }
            v221 = (_DWORD *)(v191 + 4 * v188);
            *v221 = 0;
            v161 = v221 + 1;
            while (v165 != v187)
            {
              v222 = *((_DWORD *)v165 - 1);
              v165 -= 4;
              *--v221 = v222;
            }
            *((_QWORD *)this + 19) = v221;
            *((_QWORD *)this + 20) = v161;
            *((_QWORD *)this + 21) = v191 + 4 * v192;
            if (v187)
              operator delete(v187);
          }
          else
          {
            *(_DWORD *)v165 = 0;
            v161 = v165 + 4;
          }
          *((_QWORD *)this + 20) = v161;
LABEL_372:
          v223 = *((_QWORD *)a2 + 1);
          if (v223 <= 0xFFFFFFFFFFFFFFFBLL && v223 + 4 <= *((_QWORD *)a2 + 2))
          {
            *(v161 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v223);
LABEL_376:
            *((_QWORD *)a2 + 1) += 4;
          }
          else
          {
LABEL_374:
            *((_BYTE *)a2 + 24) = 1;
          }
          goto LABEL_470;
        case 4u:
          *((_BYTE *)this + 180) |= 1u;
          v61 = *((_QWORD *)a2 + 1);
          if (v61 > 0xFFFFFFFFFFFFFFFBLL || v61 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_374;
          *((_DWORD *)this + 44) = *(_DWORD *)(*(_QWORD *)a2 + v61);
          goto LABEL_376;
        case 5u:
          if (v18 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            if (*((_QWORD *)a2 + 1) < *((_QWORD *)a2 + 2) && !*((_BYTE *)a2 + 24))
            {
              v62 = (char *)*((_QWORD *)this + 11);
              do
              {
                v63 = *((_QWORD *)this + 12);
                if ((unint64_t)v62 >= v63)
                {
                  v64 = (char *)*((_QWORD *)this + 10);
                  v65 = (v62 - v64) >> 2;
                  v66 = v65 + 1;
                  if ((unint64_t)(v65 + 1) >> 62)
                    goto LABEL_480;
                  v67 = v63 - (_QWORD)v64;
                  if (v67 >> 1 > v66)
                    v66 = v67 >> 1;
                  if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL)
                    v68 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v68 = v66;
                  if (v68)
                  {
                    v68 = (unint64_t)sub_2429114B8(v68);
                    v64 = (char *)*((_QWORD *)this + 10);
                    v62 = (char *)*((_QWORD *)this + 11);
                  }
                  else
                  {
                    v69 = 0;
                  }
                  v70 = (_DWORD *)(v68 + 4 * v65);
                  *v70 = 0;
                  v71 = (char *)(v70 + 1);
                  while (v62 != v64)
                  {
                    v72 = *((_DWORD *)v62 - 1);
                    v62 -= 4;
                    *--v70 = v72;
                  }
                  *((_QWORD *)this + 10) = v70;
                  *((_QWORD *)this + 11) = v71;
                  *((_QWORD *)this + 12) = v68 + 4 * v69;
                  if (v64)
                    operator delete(v64);
                  v62 = v71;
                }
                else
                {
                  *(_DWORD *)v62 = 0;
                  v62 += 4;
                }
                *((_QWORD *)this + 11) = v62;
                v74 = *((_QWORD *)a2 + 1);
                v73 = *((_QWORD *)a2 + 2);
                v75 = *(_QWORD *)a2;
                v76 = v74 > 0xFFFFFFFFFFFFFFF5 || v74 + 10 > v73;
                if (v76)
                {
                  v77 = 0;
                  v78 = 0;
                  v84 = 0;
                  if (v73 <= v74)
                    v79 = *((_QWORD *)a2 + 1);
                  else
                    v79 = *((_QWORD *)a2 + 2);
                  while (1)
                  {
                    if (v79 == v74)
                      goto LABEL_278;
                    v80 = v74++;
                    v81 = *(_BYTE *)(v75 + v80);
                    *((_QWORD *)a2 + 1) = v74;
                    v84 |= (unint64_t)(v81 & 0x7F) << v77;
                    if ((v81 & 0x80) == 0)
                      break;
                    v77 += 7;
                    v76 = v78++ > 8;
                    if (v76)
                    {
                      LODWORD(v84) = 0;
                      goto LABEL_139;
                    }
                  }
                  if (*((_BYTE *)a2 + 24))
                    LODWORD(v84) = 0;
LABEL_139:
                  v85 = v80 + 1;
                }
                else
                {
                  v82 = 0;
                  v83 = 0;
                  v84 = 0;
                  while (1)
                  {
                    v85 = v74 + 1;
                    *((_QWORD *)a2 + 1) = v74 + 1;
                    v86 = *(_BYTE *)(v75 + v74);
                    v84 |= (unint64_t)(v86 & 0x7F) << v82;
                    if ((v86 & 0x80) == 0)
                      break;
                    v82 += 7;
                    v74 = v85;
                    v76 = v83++ > 8;
                    if (v76)
                    {
                      LODWORD(v84) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v62 - 1) = v84;
              }
              while (v85 < v73 && !*((_BYTE *)a2 + 24));
            }
            goto LABEL_294;
          }
          v167 = (char *)*((_QWORD *)this + 11);
          v166 = *((_QWORD *)this + 12);
          if ((unint64_t)v167 >= v166)
          {
            v193 = (char *)*((_QWORD *)this + 10);
            v194 = (v167 - v193) >> 2;
            v195 = v194 + 1;
            if ((unint64_t)(v194 + 1) >> 62)
              goto LABEL_480;
            v196 = v166 - (_QWORD)v193;
            if (v196 >> 1 > v195)
              v195 = v196 >> 1;
            if ((unint64_t)v196 >= 0x7FFFFFFFFFFFFFFCLL)
              v197 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v197 = v195;
            if (v197)
            {
              v197 = (unint64_t)sub_2429114B8(v197);
              v193 = (char *)*((_QWORD *)this + 10);
              v167 = (char *)*((_QWORD *)this + 11);
            }
            else
            {
              v198 = 0;
            }
            v224 = (_DWORD *)(v197 + 4 * v194);
            *v224 = 0;
            v168 = v224 + 1;
            while (v167 != v193)
            {
              v225 = *((_DWORD *)v167 - 1);
              v167 -= 4;
              *--v224 = v225;
            }
            *((_QWORD *)this + 10) = v224;
            *((_QWORD *)this + 11) = v168;
            *((_QWORD *)this + 12) = v197 + 4 * v198;
            if (v193)
              operator delete(v193);
          }
          else
          {
            *(_DWORD *)v167 = 0;
            v168 = v167 + 4;
          }
          *((_QWORD *)this + 11) = v168;
          v226 = *((_QWORD *)a2 + 1);
          v227 = *((_QWORD *)a2 + 2);
          v228 = *(_QWORD *)a2;
          v229 = 0;
          v230 = 0;
          if (v226 <= 0xFFFFFFFFFFFFFFF5 && v226 + 10 <= v227)
          {
            v234 = 0;
            while (1)
            {
              v235 = v226 + 1;
              *((_QWORD *)a2 + 1) = v226 + 1;
              v236 = *(_BYTE *)(v228 + v226);
              v234 |= (unint64_t)(v236 & 0x7F) << v229;
              if ((v236 & 0x80) == 0)
                goto LABEL_469;
              v229 += 7;
              v226 = v235;
              v76 = v230++ > 8;
              if (v76)
                goto LABEL_468;
            }
          }
          v234 = 0;
          if (v227 <= v226)
            v227 = *((_QWORD *)a2 + 1);
          while (v227 != v226)
          {
            v232 = v226 + 1;
            v233 = *(_BYTE *)(v228 + v226);
            *((_QWORD *)a2 + 1) = v232;
            v234 |= (unint64_t)(v233 & 0x7F) << v229;
            if ((v233 & 0x80) == 0)
              goto LABEL_462;
            v229 += 7;
            v226 = v232;
            v76 = v230++ > 8;
            if (v76)
              goto LABEL_468;
          }
          goto LABEL_461;
        case 6u:
          if (v18 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            if (*((_QWORD *)a2 + 1) < *((_QWORD *)a2 + 2) && !*((_BYTE *)a2 + 24))
            {
              v62 = (char *)*((_QWORD *)this + 2);
              do
              {
                v87 = *((_QWORD *)this + 3);
                if ((unint64_t)v62 >= v87)
                {
                  v88 = (char *)*((_QWORD *)this + 1);
                  v89 = (v62 - v88) >> 2;
                  v90 = v89 + 1;
                  if ((unint64_t)(v89 + 1) >> 62)
                    goto LABEL_480;
                  v91 = v87 - (_QWORD)v88;
                  if (v91 >> 1 > v90)
                    v90 = v91 >> 1;
                  if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFFCLL)
                    v92 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v92 = v90;
                  if (v92)
                  {
                    v92 = (unint64_t)sub_2429114B8(v92);
                    v88 = (char *)*((_QWORD *)this + 1);
                    v62 = (char *)*((_QWORD *)this + 2);
                  }
                  else
                  {
                    v93 = 0;
                  }
                  v94 = (_DWORD *)(v92 + 4 * v89);
                  *v94 = 0;
                  v95 = (char *)(v94 + 1);
                  while (v62 != v88)
                  {
                    v96 = *((_DWORD *)v62 - 1);
                    v62 -= 4;
                    *--v94 = v96;
                  }
                  *((_QWORD *)this + 1) = v94;
                  *((_QWORD *)this + 2) = v95;
                  *((_QWORD *)this + 3) = v92 + 4 * v93;
                  if (v88)
                    operator delete(v88);
                  v62 = v95;
                }
                else
                {
                  *(_DWORD *)v62 = 0;
                  v62 += 4;
                }
                *((_QWORD *)this + 2) = v62;
                v98 = *((_QWORD *)a2 + 1);
                v97 = *((_QWORD *)a2 + 2);
                v99 = *(_QWORD *)a2;
                if (v98 > 0xFFFFFFFFFFFFFFF5 || v98 + 10 > v97)
                {
                  v101 = 0;
                  v102 = 0;
                  v108 = 0;
                  if (v97 <= v98)
                    v103 = *((_QWORD *)a2 + 1);
                  else
                    v103 = *((_QWORD *)a2 + 2);
                  while (1)
                  {
                    if (v103 == v98)
                      goto LABEL_278;
                    v104 = v98++;
                    v105 = *(_BYTE *)(v99 + v104);
                    *((_QWORD *)a2 + 1) = v98;
                    v108 |= (unint64_t)(v105 & 0x7F) << v101;
                    if ((v105 & 0x80) == 0)
                      break;
                    v101 += 7;
                    v76 = v102++ > 8;
                    if (v76)
                    {
                      LODWORD(v108) = 0;
                      goto LABEL_184;
                    }
                  }
                  if (*((_BYTE *)a2 + 24))
                    LODWORD(v108) = 0;
LABEL_184:
                  v109 = v104 + 1;
                }
                else
                {
                  v106 = 0;
                  v107 = 0;
                  v108 = 0;
                  while (1)
                  {
                    v109 = v98 + 1;
                    *((_QWORD *)a2 + 1) = v98 + 1;
                    v110 = *(_BYTE *)(v99 + v98);
                    v108 |= (unint64_t)(v110 & 0x7F) << v106;
                    if ((v110 & 0x80) == 0)
                      break;
                    v106 += 7;
                    v98 = v109;
                    v76 = v107++ > 8;
                    if (v76)
                    {
                      LODWORD(v108) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v62 - 1) = v108;
              }
              while (v109 < v97 && !*((_BYTE *)a2 + 24));
            }
            goto LABEL_294;
          }
          v170 = (char *)*((_QWORD *)this + 2);
          v169 = *((_QWORD *)this + 3);
          if ((unint64_t)v170 >= v169)
          {
            v199 = (char *)*((_QWORD *)this + 1);
            v200 = (v170 - v199) >> 2;
            v201 = v200 + 1;
            if ((unint64_t)(v200 + 1) >> 62)
              goto LABEL_480;
            v202 = v169 - (_QWORD)v199;
            if (v202 >> 1 > v201)
              v201 = v202 >> 1;
            if ((unint64_t)v202 >= 0x7FFFFFFFFFFFFFFCLL)
              v203 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v203 = v201;
            if (v203)
            {
              v203 = (unint64_t)sub_2429114B8(v203);
              v199 = (char *)*((_QWORD *)this + 1);
              v170 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v204 = 0;
            }
            v237 = (_DWORD *)(v203 + 4 * v200);
            *v237 = 0;
            v168 = v237 + 1;
            while (v170 != v199)
            {
              v238 = *((_DWORD *)v170 - 1);
              v170 -= 4;
              *--v237 = v238;
            }
            *((_QWORD *)this + 1) = v237;
            *((_QWORD *)this + 2) = v168;
            *((_QWORD *)this + 3) = v203 + 4 * v204;
            if (v199)
              operator delete(v199);
          }
          else
          {
            *(_DWORD *)v170 = 0;
            v168 = v170 + 4;
          }
          *((_QWORD *)this + 2) = v168;
          v239 = *((_QWORD *)a2 + 1);
          v240 = *((_QWORD *)a2 + 2);
          v241 = *(_QWORD *)a2;
          v242 = 0;
          v243 = 0;
          if (v239 <= 0xFFFFFFFFFFFFFFF5 && v239 + 10 <= v240)
          {
            v234 = 0;
            while (1)
            {
              v247 = v239 + 1;
              *((_QWORD *)a2 + 1) = v239 + 1;
              v248 = *(_BYTE *)(v241 + v239);
              v234 |= (unint64_t)(v248 & 0x7F) << v242;
              if ((v248 & 0x80) == 0)
                goto LABEL_469;
              v242 += 7;
              v239 = v247;
              v76 = v243++ > 8;
              if (v76)
                goto LABEL_468;
            }
          }
          v234 = 0;
          if (v240 <= v239)
            v240 = *((_QWORD *)a2 + 1);
          while (v240 != v239)
          {
            v245 = v239 + 1;
            v246 = *(_BYTE *)(v241 + v239);
            *((_QWORD *)a2 + 1) = v245;
            v234 |= (unint64_t)(v246 & 0x7F) << v242;
            if ((v246 & 0x80) == 0)
              goto LABEL_462;
            v242 += 7;
            v239 = v245;
            v76 = v243++ > 8;
            if (v76)
              goto LABEL_468;
          }
          goto LABEL_461;
        case 7u:
          if (v18 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            if (*((_QWORD *)a2 + 1) < *((_QWORD *)a2 + 2) && !*((_BYTE *)a2 + 24))
            {
              v62 = (char *)*((_QWORD *)this + 5);
              do
              {
                v111 = *((_QWORD *)this + 6);
                if ((unint64_t)v62 >= v111)
                {
                  v112 = (char *)*((_QWORD *)this + 4);
                  v113 = (v62 - v112) >> 2;
                  v114 = v113 + 1;
                  if ((unint64_t)(v113 + 1) >> 62)
                    goto LABEL_480;
                  v115 = v111 - (_QWORD)v112;
                  if (v115 >> 1 > v114)
                    v114 = v115 >> 1;
                  if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFFCLL)
                    v116 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v116 = v114;
                  if (v116)
                  {
                    v116 = (unint64_t)sub_2429114B8(v116);
                    v112 = (char *)*((_QWORD *)this + 4);
                    v62 = (char *)*((_QWORD *)this + 5);
                  }
                  else
                  {
                    v117 = 0;
                  }
                  v118 = (_DWORD *)(v116 + 4 * v113);
                  *v118 = 0;
                  v119 = (char *)(v118 + 1);
                  while (v62 != v112)
                  {
                    v120 = *((_DWORD *)v62 - 1);
                    v62 -= 4;
                    *--v118 = v120;
                  }
                  *((_QWORD *)this + 4) = v118;
                  *((_QWORD *)this + 5) = v119;
                  *((_QWORD *)this + 6) = v116 + 4 * v117;
                  if (v112)
                    operator delete(v112);
                  v62 = v119;
                }
                else
                {
                  *(_DWORD *)v62 = 0;
                  v62 += 4;
                }
                *((_QWORD *)this + 5) = v62;
                v122 = *((_QWORD *)a2 + 1);
                v121 = *((_QWORD *)a2 + 2);
                v123 = *(_QWORD *)a2;
                if (v122 > 0xFFFFFFFFFFFFFFF5 || v122 + 10 > v121)
                {
                  v125 = 0;
                  v126 = 0;
                  v132 = 0;
                  if (v121 <= v122)
                    v127 = *((_QWORD *)a2 + 1);
                  else
                    v127 = *((_QWORD *)a2 + 2);
                  while (1)
                  {
                    if (v127 == v122)
                      goto LABEL_278;
                    v128 = v122++;
                    v129 = *(_BYTE *)(v123 + v128);
                    *((_QWORD *)a2 + 1) = v122;
                    v132 |= (unint64_t)(v129 & 0x7F) << v125;
                    if ((v129 & 0x80) == 0)
                      break;
                    v125 += 7;
                    v76 = v126++ > 8;
                    if (v76)
                    {
                      LODWORD(v132) = 0;
                      goto LABEL_229;
                    }
                  }
                  if (*((_BYTE *)a2 + 24))
                    LODWORD(v132) = 0;
LABEL_229:
                  v133 = v128 + 1;
                }
                else
                {
                  v130 = 0;
                  v131 = 0;
                  v132 = 0;
                  while (1)
                  {
                    v133 = v122 + 1;
                    *((_QWORD *)a2 + 1) = v122 + 1;
                    v134 = *(_BYTE *)(v123 + v122);
                    v132 |= (unint64_t)(v134 & 0x7F) << v130;
                    if ((v134 & 0x80) == 0)
                      break;
                    v130 += 7;
                    v122 = v133;
                    v76 = v131++ > 8;
                    if (v76)
                    {
                      LODWORD(v132) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v62 - 1) = v132;
              }
              while (v133 < v121 && !*((_BYTE *)a2 + 24));
            }
            goto LABEL_294;
          }
          v172 = (char *)*((_QWORD *)this + 5);
          v171 = *((_QWORD *)this + 6);
          if ((unint64_t)v172 >= v171)
          {
            v205 = (char *)*((_QWORD *)this + 4);
            v206 = (v172 - v205) >> 2;
            v207 = v206 + 1;
            if ((unint64_t)(v206 + 1) >> 62)
              goto LABEL_480;
            v208 = v171 - (_QWORD)v205;
            if (v208 >> 1 > v207)
              v207 = v208 >> 1;
            if ((unint64_t)v208 >= 0x7FFFFFFFFFFFFFFCLL)
              v209 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v209 = v207;
            if (v209)
            {
              v209 = (unint64_t)sub_2429114B8(v209);
              v205 = (char *)*((_QWORD *)this + 4);
              v172 = (char *)*((_QWORD *)this + 5);
            }
            else
            {
              v210 = 0;
            }
            v249 = (_DWORD *)(v209 + 4 * v206);
            *v249 = 0;
            v168 = v249 + 1;
            while (v172 != v205)
            {
              v250 = *((_DWORD *)v172 - 1);
              v172 -= 4;
              *--v249 = v250;
            }
            *((_QWORD *)this + 4) = v249;
            *((_QWORD *)this + 5) = v168;
            *((_QWORD *)this + 6) = v209 + 4 * v210;
            if (v205)
              operator delete(v205);
          }
          else
          {
            *(_DWORD *)v172 = 0;
            v168 = v172 + 4;
          }
          *((_QWORD *)this + 5) = v168;
          v251 = *((_QWORD *)a2 + 1);
          v252 = *((_QWORD *)a2 + 2);
          v253 = *(_QWORD *)a2;
          v254 = 0;
          v255 = 0;
          if (v251 <= 0xFFFFFFFFFFFFFFF5 && v251 + 10 <= v252)
          {
            v234 = 0;
            while (1)
            {
              v259 = v251 + 1;
              *((_QWORD *)a2 + 1) = v251 + 1;
              v260 = *(_BYTE *)(v253 + v251);
              v234 |= (unint64_t)(v260 & 0x7F) << v254;
              if ((v260 & 0x80) == 0)
                goto LABEL_469;
              v254 += 7;
              v251 = v259;
              v76 = v255++ > 8;
              if (v76)
                goto LABEL_468;
            }
          }
          v234 = 0;
          if (v252 <= v251)
            v252 = *((_QWORD *)a2 + 1);
          while (v252 != v251)
          {
            v257 = v251 + 1;
            v258 = *(_BYTE *)(v253 + v251);
            *((_QWORD *)a2 + 1) = v257;
            v234 |= (unint64_t)(v258 & 0x7F) << v254;
            if ((v258 & 0x80) == 0)
              goto LABEL_462;
            v254 += 7;
            v251 = v257;
            v76 = v255++ > 8;
            if (v76)
              goto LABEL_468;
          }
          goto LABEL_461;
        case 8u:
          if (v18 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            if (*((_QWORD *)a2 + 1) < *((_QWORD *)a2 + 2) && !*((_BYTE *)a2 + 24))
            {
              v62 = (char *)*((_QWORD *)this + 8);
              do
              {
                v135 = *((_QWORD *)this + 9);
                if ((unint64_t)v62 >= v135)
                {
                  v136 = (char *)*((_QWORD *)this + 7);
                  v137 = (v62 - v136) >> 2;
                  v138 = v137 + 1;
                  if ((unint64_t)(v137 + 1) >> 62)
                    goto LABEL_480;
                  v139 = v135 - (_QWORD)v136;
                  if (v139 >> 1 > v138)
                    v138 = v139 >> 1;
                  if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFFCLL)
                    v140 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v140 = v138;
                  if (v140)
                  {
                    v140 = (unint64_t)sub_2429114B8(v140);
                    v136 = (char *)*((_QWORD *)this + 7);
                    v62 = (char *)*((_QWORD *)this + 8);
                  }
                  else
                  {
                    v141 = 0;
                  }
                  v142 = (_DWORD *)(v140 + 4 * v137);
                  *v142 = 0;
                  v143 = (char *)(v142 + 1);
                  while (v62 != v136)
                  {
                    v144 = *((_DWORD *)v62 - 1);
                    v62 -= 4;
                    *--v142 = v144;
                  }
                  *((_QWORD *)this + 7) = v142;
                  *((_QWORD *)this + 8) = v143;
                  *((_QWORD *)this + 9) = v140 + 4 * v141;
                  if (v136)
                    operator delete(v136);
                  v62 = v143;
                }
                else
                {
                  *(_DWORD *)v62 = 0;
                  v62 += 4;
                }
                *((_QWORD *)this + 8) = v62;
                v146 = *((_QWORD *)a2 + 1);
                v145 = *((_QWORD *)a2 + 2);
                v147 = *(_QWORD *)a2;
                if (v146 <= 0xFFFFFFFFFFFFFFF5 && v146 + 10 <= v145)
                {
                  v154 = 0;
                  v155 = 0;
                  v156 = 0;
                  while (1)
                  {
                    v157 = v146 + 1;
                    *((_QWORD *)a2 + 1) = v146 + 1;
                    v158 = *(_BYTE *)(v147 + v146);
                    v156 |= (unint64_t)(v158 & 0x7F) << v154;
                    if ((v158 & 0x80) == 0)
                      goto LABEL_275;
                    v154 += 7;
                    v146 = v157;
                    v76 = v155++ > 8;
                    if (v76)
                    {
                      LODWORD(v156) = 0;
                      goto LABEL_275;
                    }
                  }
                }
                v149 = 0;
                v150 = 0;
                v156 = 0;
                if (v145 <= v146)
                  v151 = *((_QWORD *)a2 + 1);
                else
                  v151 = *((_QWORD *)a2 + 2);
                while (1)
                {
                  if (v151 == v146)
                  {
LABEL_278:
                    *((_BYTE *)a2 + 24) = 1;
                    *((_DWORD *)v62 - 1) = 0;
                    goto LABEL_294;
                  }
                  v152 = v146++;
                  v153 = *(_BYTE *)(v147 + v152);
                  *((_QWORD *)a2 + 1) = v146;
                  v156 |= (unint64_t)(v153 & 0x7F) << v149;
                  if ((v153 & 0x80) == 0)
                    break;
                  v149 += 7;
                  v76 = v150++ > 8;
                  if (v76)
                  {
                    LODWORD(v156) = 0;
                    goto LABEL_274;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v156) = 0;
LABEL_274:
                v157 = v152 + 1;
LABEL_275:
                *((_DWORD *)v62 - 1) = v156;
              }
              while (v157 < v145 && !*((_BYTE *)a2 + 24));
            }
LABEL_294:
            PB::Reader::recallMark();
          }
          else
          {
            v174 = (char *)*((_QWORD *)this + 8);
            v173 = *((_QWORD *)this + 9);
            if ((unint64_t)v174 >= v173)
            {
              v211 = (char *)*((_QWORD *)this + 7);
              v212 = (v174 - v211) >> 2;
              v213 = v212 + 1;
              if ((unint64_t)(v212 + 1) >> 62)
LABEL_480:
                sub_242729A44();
              v214 = v173 - (_QWORD)v211;
              if (v214 >> 1 > v213)
                v213 = v214 >> 1;
              if ((unint64_t)v214 >= 0x7FFFFFFFFFFFFFFCLL)
                v215 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v215 = v213;
              if (v215)
              {
                v215 = (unint64_t)sub_2429114B8(v215);
                v211 = (char *)*((_QWORD *)this + 7);
                v174 = (char *)*((_QWORD *)this + 8);
              }
              else
              {
                v216 = 0;
              }
              v261 = (_DWORD *)(v215 + 4 * v212);
              *v261 = 0;
              v168 = v261 + 1;
              while (v174 != v211)
              {
                v262 = *((_DWORD *)v174 - 1);
                v174 -= 4;
                *--v261 = v262;
              }
              *((_QWORD *)this + 7) = v261;
              *((_QWORD *)this + 8) = v168;
              *((_QWORD *)this + 9) = v215 + 4 * v216;
              if (v211)
                operator delete(v211);
            }
            else
            {
              *(_DWORD *)v174 = 0;
              v168 = v174 + 4;
            }
            *((_QWORD *)this + 8) = v168;
            v263 = *((_QWORD *)a2 + 1);
            v264 = *((_QWORD *)a2 + 2);
            v265 = *(_QWORD *)a2;
            v266 = 0;
            v267 = 0;
            if (v263 > 0xFFFFFFFFFFFFFFF5 || v263 + 10 > v264)
            {
              v234 = 0;
              if (v264 <= v263)
                v264 = *((_QWORD *)a2 + 1);
              while (v264 != v263)
              {
                v269 = v263 + 1;
                v270 = *(_BYTE *)(v265 + v263);
                *((_QWORD *)a2 + 1) = v269;
                v234 |= (unint64_t)(v270 & 0x7F) << v266;
                if ((v270 & 0x80) == 0)
                {
LABEL_462:
                  if (*((_BYTE *)a2 + 24))
                    LODWORD(v234) = 0;
                  goto LABEL_469;
                }
                v266 += 7;
                v263 = v269;
                v76 = v267++ > 8;
                if (v76)
                {
LABEL_468:
                  LODWORD(v234) = 0;
                  goto LABEL_469;
                }
              }
LABEL_461:
              LODWORD(v234) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v234 = 0;
              while (1)
              {
                v271 = v263 + 1;
                *((_QWORD *)a2 + 1) = v263 + 1;
                v272 = *(_BYTE *)(v265 + v263);
                v234 |= (unint64_t)(v272 & 0x7F) << v266;
                if ((v272 & 0x80) == 0)
                  break;
                v266 += 7;
                v263 = v271;
                v76 = v267++ > 8;
                if (v76)
                  goto LABEL_468;
              }
            }
LABEL_469:
            *(v168 - 1) = v234;
          }
          break;
        default:
          goto LABEL_19;
      }
      goto LABEL_470;
    }
    v14 = 0;
    v15 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v11 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_21;
      v14 += 7;
      v2 = v16;
      v76 = v15++ > 8;
    }
    while (!v76);
LABEL_19:
    if ((PB::Reader::skip(a2) & 1) == 0)
      return 0;
LABEL_470:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
}

uint64_t CMMsl::NonlinearBiasFit::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;
  float *v10;
  float *v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = this;
  v4 = *(float **)(this + 128);
  v5 = *(float **)(this + 136);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6);
  }
  v7 = *(float **)(v3 + 104);
  v8 = *(float **)(v3 + 112);
  while (v7 != v8)
  {
    v9 = *v7++;
    this = PB::Writer::write(a2, v9);
  }
  v10 = *(float **)(v3 + 152);
  v11 = *(float **)(v3 + 160);
  while (v10 != v11)
  {
    v12 = *v10++;
    this = PB::Writer::write(a2, v12);
  }
  if ((*(_BYTE *)(v3 + 180) & 1) != 0)
    this = PB::Writer::write(a2, *(float *)(v3 + 176));
  v13 = *(_QWORD *)(v3 + 80);
  v14 = *(_QWORD *)(v3 + 88);
  while (v13 != v14)
  {
    v13 += 4;
    this = PB::Writer::writeVarInt(a2);
  }
  v15 = *(_QWORD *)(v3 + 8);
  v16 = *(_QWORD *)(v3 + 16);
  while (v15 != v16)
  {
    v15 += 4;
    this = PB::Writer::writeVarInt(a2);
  }
  v17 = *(_QWORD *)(v3 + 32);
  v18 = *(_QWORD *)(v3 + 40);
  while (v17 != v18)
  {
    v17 += 4;
    this = PB::Writer::writeVarInt(a2);
  }
  v20 = *(_QWORD *)(v3 + 56);
  v19 = *(_QWORD *)(v3 + 64);
  while (v20 != v19)
  {
    v20 += 4;
    this = PB::Writer::writeVarInt(a2);
  }
  return this;
}

uint64_t CMMsl::NonlinearBiasFit::hash_value(CMMsl::NonlinearBiasFit *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = PBHashBytes();
  v3 = PBHashBytes();
  v4 = PBHashBytes();
  if ((*((_BYTE *)this + 180) & 1) != 0)
  {
    v6 = *((float *)this + 44);
    v5 = LODWORD(v6);
    if (v6 == 0.0)
      v5 = 0;
  }
  else
  {
    v5 = 0;
  }
  v7 = v3 ^ v2 ^ v4 ^ v5;
  v8 = PBHashBytes();
  v9 = v8 ^ PBHashBytes();
  v10 = v7 ^ v9 ^ PBHashBytes();
  return v10 ^ PBHashBytes();
}

void CMMsl::ODTPose::~ODTPose(CMMsl::ODTPose *this)
{
  void *v2;

  *(_QWORD *)this = &off_25135F740;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::ODTPose::~ODTPose(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::ODTPose *CMMsl::ODTPose::ODTPose(CMMsl::ODTPose *this, const CMMsl::ODTPose *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_25135F740;
  *((_QWORD *)this + 1) = 0;
  v3 = (_QWORD *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 10) = 0;
  if ((*((_BYTE *)a2 + 40) & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 4);
    *((_BYTE *)this + 40) = 1;
    *((_QWORD *)this + 4) = v4;
  }
  if (this != a2)
    sub_2429111C4(v3, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
  return this;
}

uint64_t CMMsl::ODTPose::operator=(uint64_t a1, const CMMsl::ODTPose *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  if ((const CMMsl::ODTPose *)a1 != a2)
  {
    CMMsl::ODTPose::ODTPose((CMMsl::ODTPose *)&v8, a2);
    v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v12;
    v12 = v3;
    v4 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v11;
    v11 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v9 = v5;
    v6 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v10;
    v10 = v6;
    CMMsl::ODTPose::~ODTPose((CMMsl::ODTPose *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::ODTPose *a2, CMMsl::ODTPose *a3)
{
  int v3;
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  result = *((double *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((double *)a2 + 4) = result;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  return result;
}

uint64_t CMMsl::ODTPose::ODTPose(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_25135F740;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  return a1;
}

{
  *(_QWORD *)a1 = &off_25135F740;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  return a1;
}

uint64_t CMMsl::ODTPose::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  int v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  void (**v12)(CMMsl::ODTPose *__hidden);
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  if (a1 != a2)
  {
    v12 = &off_25135F740;
    v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    v4 = *(_QWORD *)(a2 + 32);
    v5 = *(_QWORD *)(a2 + 24);
    v6 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v7 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v3;
    v16 = v7;
    v8 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v4;
    v15 = v8;
    v9 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    v13 = v9;
    v10 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v5;
    v14 = v10;
    CMMsl::ODTPose::~ODTPose((CMMsl::ODTPose *)&v12);
  }
  return a1;
}

uint64_t CMMsl::ODTPose::formatText(CMMsl::ODTPose *this, PB::TextFormatter *a2, const char *a3)
{
  double *v5;
  double *v6;
  double v7;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (double *)*((_QWORD *)this + 1);
  v6 = (double *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "pose", v7);
  }
  if ((*((_BYTE *)this + 40) & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 4));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::ODTPose::readFrom(CMMsl::ODTPose *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          v14 = v16++ > 8;
          if (v14)
            goto LABEL_26;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_26;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        if ((v11 & 7) != 2)
        {
          v35 = (char *)*((_QWORD *)this + 2);
          v34 = *((_QWORD *)this + 3);
          if ((unint64_t)v35 >= v34)
          {
            v37 = (char *)*((_QWORD *)this + 1);
            v38 = (v35 - v37) >> 3;
            v39 = v38 + 1;
            if ((unint64_t)(v38 + 1) >> 61)
LABEL_82:
              sub_242729A44();
            v40 = v34 - (_QWORD)v37;
            if (v40 >> 2 > v39)
              v39 = v40 >> 2;
            if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
              v41 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v41 = v39;
            if (v41)
            {
              v41 = (unint64_t)sub_2429112FC(v41);
              v37 = (char *)*((_QWORD *)this + 1);
              v35 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v42 = 0;
            }
            v43 = (_QWORD *)(v41 + 8 * v38);
            *v43 = 0;
            v36 = v43 + 1;
            while (v35 != v37)
            {
              v44 = *((_QWORD *)v35 - 1);
              v35 -= 8;
              *--v43 = v44;
            }
            *((_QWORD *)this + 1) = v43;
            *((_QWORD *)this + 2) = v36;
            *((_QWORD *)this + 3) = v41 + 8 * v42;
            if (v37)
              operator delete(v37);
          }
          else
          {
            *(_QWORD *)v35 = 0;
            v36 = v35 + 8;
          }
          *((_QWORD *)this + 2) = v36;
          v45 = *((_QWORD *)a2 + 1);
          if (v45 > 0xFFFFFFFFFFFFFFF7 || v45 + 8 > *((_QWORD *)a2 + 2))
          {
LABEL_72:
            *((_BYTE *)a2 + 24) = 1;
            goto LABEL_75;
          }
          *(v36 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v45);
          goto LABEL_74;
        }
        if ((PB::Reader::placeMark() & 1) != 0)
          return 0;
        v20 = *((_QWORD *)a2 + 1);
        v21 = *((_QWORD *)a2 + 2);
        while (v20 < v21 && !*((_BYTE *)a2 + 24))
        {
          v23 = (char *)*((_QWORD *)this + 2);
          v22 = *((_QWORD *)this + 3);
          if ((unint64_t)v23 >= v22)
          {
            v25 = (char *)*((_QWORD *)this + 1);
            v26 = (v23 - v25) >> 3;
            v27 = v26 + 1;
            if ((unint64_t)(v26 + 1) >> 61)
              goto LABEL_82;
            v28 = v22 - (_QWORD)v25;
            if (v28 >> 2 > v27)
              v27 = v28 >> 2;
            if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
              v29 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v29 = v27;
            if (v29)
            {
              v29 = (unint64_t)sub_2429112FC(v29);
              v25 = (char *)*((_QWORD *)this + 1);
              v23 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v30 = 0;
            }
            v31 = (_QWORD *)(v29 + 8 * v26);
            *v31 = 0;
            v24 = v31 + 1;
            while (v23 != v25)
            {
              v32 = *((_QWORD *)v23 - 1);
              v23 -= 8;
              *--v31 = v32;
            }
            *((_QWORD *)this + 1) = v31;
            *((_QWORD *)this + 2) = v24;
            *((_QWORD *)this + 3) = v29 + 8 * v30;
            if (v25)
              operator delete(v25);
          }
          else
          {
            *(_QWORD *)v23 = 0;
            v24 = v23 + 8;
          }
          *((_QWORD *)this + 2) = v24;
          v33 = *((_QWORD *)a2 + 1);
          if (v33 > 0xFFFFFFFFFFFFFFF7 || v33 + 8 > *((_QWORD *)a2 + 2))
          {
            *((_BYTE *)a2 + 24) = 1;
            break;
          }
          *(v24 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v33);
          v21 = *((_QWORD *)a2 + 2);
          v20 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v20;
        }
        PB::Reader::recallMark();
      }
      else
      {
        if ((v11 >> 3) == 1)
        {
          *((_BYTE *)this + 40) |= 1u;
          v19 = *((_QWORD *)a2 + 1);
          if (v19 > 0xFFFFFFFFFFFFFFF7 || v19 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_72;
          *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v19);
LABEL_74:
          *((_QWORD *)a2 + 1) += 8;
          goto LABEL_75;
        }
LABEL_26:
        if ((PB::Reader::skip(a2) & 1) == 0)
          return 0;
      }
LABEL_75:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::ODTPose::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  double *v4;
  double *v5;
  double v6;

  v3 = this;
  if ((*(_BYTE *)(this + 40) & 1) != 0)
    this = PB::Writer::write(a2, *(double *)(this + 32));
  v5 = *(double **)(v3 + 8);
  v4 = *(double **)(v3 + 16);
  while (v5 != v4)
  {
    v6 = *v5++;
    this = PB::Writer::write(a2, v6);
  }
  return this;
}

uint64_t CMMsl::ODTPose::hash_value(CMMsl::ODTPose *this)
{
  uint64_t v1;

  if ((*((_BYTE *)this + 40) & 1) != 0)
  {
    if (*((double *)this + 4) == 0.0)
      v1 = 0;
    else
      v1 = *((_QWORD *)this + 4);
  }
  else
  {
    v1 = 0;
  }
  return PBHashBytes() ^ v1;
}

void CMMsl::Odometer::~Odometer(CMMsl::Odometer *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::Odometer::Odometer(uint64_t this, const CMMsl::Odometer *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  char v17;

  *(_QWORD *)this = &off_25135F778;
  *(_DWORD *)(this + 100) = 0;
  v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x80) != 0)
  {
    v4 = *((_QWORD *)a2 + 8);
    v3 = 128;
    *(_WORD *)(this + 100) = 128;
    *(_QWORD *)(this + 64) = v4;
    v2 = *((_WORD *)a2 + 50);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 2);
    v3 |= 2u;
    *(_WORD *)(this + 100) = v3;
    *(_QWORD *)(this + 16) = v5;
    v2 = *((_WORD *)a2 + 50);
  }
LABEL_6:
  if ((v2 & 1) != 0)
  {
    v6 = *((_QWORD *)a2 + 1);
    v3 |= 1u;
    *(_WORD *)(this + 100) = v3;
    *(_QWORD *)(this + 8) = v6;
    v2 = *((_WORD *)a2 + 50);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_21;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a2 + 3);
  v3 |= 4u;
  *(_WORD *)(this + 100) = v3;
  *(_QWORD *)(this + 24) = v7;
  v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  v8 = *((_QWORD *)a2 + 7);
  v3 |= 0x40u;
  *(_WORD *)(this + 100) = v3;
  *(_QWORD *)(this + 56) = v8;
  v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  v9 = *((_QWORD *)a2 + 6);
  v3 |= 0x20u;
  *(_WORD *)(this + 100) = v3;
  *(_QWORD *)(this + 48) = v9;
  v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x10) == 0)
  {
LABEL_11:
    if ((v2 & 8) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  v10 = *((_QWORD *)a2 + 5);
  v3 |= 0x10u;
  *(_WORD *)(this + 100) = v3;
  *(_QWORD *)(this + 40) = v10;
  v2 = *((_WORD *)a2 + 50);
  if ((v2 & 8) == 0)
  {
LABEL_12:
    if ((v2 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_25;
  }
LABEL_24:
  v11 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *(_WORD *)(this + 100) = v3;
  *(_QWORD *)(this + 32) = v11;
  v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x100) == 0)
  {
LABEL_13:
    if ((v2 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_26;
  }
LABEL_25:
  v12 = *((_QWORD *)a2 + 9);
  v3 |= 0x100u;
  *(_WORD *)(this + 100) = v3;
  *(_QWORD *)(this + 72) = v12;
  v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x400) == 0)
  {
LABEL_14:
    if ((v2 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_27;
  }
LABEL_26:
  v13 = *((_DWORD *)a2 + 21);
  v3 |= 0x400u;
  *(_WORD *)(this + 100) = v3;
  *(_DWORD *)(this + 84) = v13;
  v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x800) == 0)
  {
LABEL_15:
    if ((v2 & 0x1000) == 0)
      goto LABEL_16;
    goto LABEL_28;
  }
LABEL_27:
  v14 = *((_DWORD *)a2 + 22);
  v3 |= 0x800u;
  *(_WORD *)(this + 100) = v3;
  *(_DWORD *)(this + 88) = v14;
  v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x1000) == 0)
  {
LABEL_16:
    if ((v2 & 0x200) == 0)
      goto LABEL_17;
    goto LABEL_29;
  }
LABEL_28:
  v15 = *((_DWORD *)a2 + 23);
  v3 |= 0x1000u;
  *(_WORD *)(this + 100) = v3;
  *(_DWORD *)(this + 92) = v15;
  v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x200) == 0)
  {
LABEL_17:
    if ((v2 & 0x2000) == 0)
      return this;
LABEL_30:
    v17 = *((_BYTE *)a2 + 96);
    *(_WORD *)(this + 100) = v3 | 0x2000;
    *(_BYTE *)(this + 96) = v17;
    return this;
  }
LABEL_29:
  v16 = *((_DWORD *)a2 + 20);
  v3 |= 0x200u;
  *(_WORD *)(this + 100) = v3;
  *(_DWORD *)(this + 80) = v16;
  if ((*((_WORD *)a2 + 50) & 0x2000) != 0)
    goto LABEL_30;
  return this;
}

CMMsl *CMMsl::Odometer::operator=(CMMsl *a1, const CMMsl::Odometer *a2)
{
  CMMsl::Odometer *v3;
  _BYTE v5[104];

  if (a1 != a2)
  {
    CMMsl::Odometer::Odometer((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::Odometer *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::Odometer *a2, CMMsl::Odometer *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  int v13;
  int v14;
  int v15;
  int v16;

  v3 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v3;
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  v8 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v8;
  v9 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v9;
  v10 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v10;
  v11 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v11;
  result = *((double *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((double *)a2 + 9) = result;
  v13 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v13;
  v14 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v14;
  v15 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v15;
  v16 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v16;
  LOBYTE(v16) = *((_BYTE *)this + 96);
  *((_BYTE *)this + 96) = *((_BYTE *)a2 + 96);
  *((_BYTE *)a2 + 96) = v16;
  return result;
}

double CMMsl::Odometer::Odometer(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135F778;
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a2 + 100) = 0;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  result = *(double *)(a2 + 72);
  *(double *)(a1 + 72) = result;
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  return result;
}

CMMsl *CMMsl::Odometer::operator=(CMMsl *this, uint64_t a2, CMMsl::Odometer *a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  void (**v8)(CMMsl::Odometer *__hidden);
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  char v15;
  int v16;

  if (this != (CMMsl *)a2)
  {
    v8 = &off_25135F778;
    v16 = *(_DWORD *)(a2 + 100);
    *(_DWORD *)(a2 + 100) = 0;
    v4 = *(_OWORD *)(a2 + 8);
    v5 = *(_OWORD *)(a2 + 56);
    v11 = *(_OWORD *)(a2 + 40);
    v12 = v5;
    v6 = *(_OWORD *)(a2 + 24);
    v9 = v4;
    v10 = v6;
    v13 = *(_QWORD *)(a2 + 72);
    v14 = *(_OWORD *)(a2 + 80);
    v15 = *(_BYTE *)(a2 + 96);
    CMMsl::swap(this, (CMMsl::Odometer *)&v8, a3);
    PB::Base::~Base((PB::Base *)&v8);
  }
  return this;
}

uint64_t CMMsl::Odometer::formatText(CMMsl::Odometer *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 50);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "accuracy", *((double *)this + 1));
    v5 = *((_WORD *)this + 50);
    if ((v5 & 0x200) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else if ((*((_WORD *)this + 50) & 0x200) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "batchedLocationFixType");
  v5 = *((_WORD *)this + 50);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "distance", *((double *)this + 2));
  v5 = *((_WORD *)this + 50);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "gpsAltitude", *((double *)this + 3));
  v5 = *((_WORD *)this + 50);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "gpsSpeedAccuracy", *((double *)this + 4));
  v5 = *((_WORD *)this + 50);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "odometer", *((double *)this + 5));
  v5 = *((_WORD *)this + 50);
  if ((v5 & 0x400) == 0)
  {
LABEL_8:
    if ((v5 & 0x800) == 0)
      goto LABEL_9;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "originDevice");
  v5 = *((_WORD *)this + 50);
  if ((v5 & 0x800) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "quality");
  v5 = *((_WORD *)this + 50);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "rawSpeed", *((double *)this + 6));
  v5 = *((_WORD *)this + 50);
  if ((v5 & 0x40) == 0)
  {
LABEL_11:
    if ((v5 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "speed", *((double *)this + 7));
  v5 = *((_WORD *)this + 50);
  if ((v5 & 0x80) == 0)
  {
LABEL_12:
    if ((v5 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 8));
  v5 = *((_WORD *)this + 50);
  if ((v5 & 0x100) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0)
      goto LABEL_14;
LABEL_29:
    PB::TextFormatter::format(a2, "trackRunOdometerHasBeenCorrected");
    if ((*((_WORD *)this + 50) & 0x1000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_15;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "timestampGps", *((double *)this + 9));
  v5 = *((_WORD *)this + 50);
  if ((v5 & 0x2000) != 0)
    goto LABEL_29;
LABEL_14:
  if ((v5 & 0x1000) != 0)
LABEL_15:
    PB::TextFormatter::format(a2, "type");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::Odometer::readFrom(CMMsl::Odometer *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  char v43;
  int v44;
  BOOL v45;
  char v46;
  unsigned int v47;
  unint64_t v48;
  char v49;
  char v50;
  unsigned int v51;
  unint64_t v52;
  char v53;
  char v54;
  unsigned int v55;
  unint64_t v56;
  char v57;
  char v58;
  unsigned int v59;
  unint64_t v60;
  char v61;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_132;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 50) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_49;
        *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_111;
      case 2u:
        *((_WORD *)this + 50) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_49;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_111;
      case 3u:
        *((_WORD *)this + 50) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_49;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_111;
      case 4u:
        *((_WORD *)this + 50) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_49;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_111;
      case 5u:
        *((_WORD *)this + 50) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_49;
        *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_111;
      case 6u:
        *((_WORD *)this + 50) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_49;
        *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_111;
      case 7u:
        *((_WORD *)this + 50) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_49;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_111;
      case 8u:
        *((_WORD *)this + 50) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_49;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_111;
      case 9u:
        *((_WORD *)this + 50) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_111:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_49:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 0xAu:
        *((_WORD *)this + 50) |= 0x400u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v46 = 0;
          v47 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_116;
            }
            v48 = v20++;
            v49 = *(_BYTE *)(v21 + v48);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v49 & 0x7F) << v46;
            if ((v49 & 0x80) == 0)
              break;
            v46 += 7;
            v14 = v47++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_115:
              v2 = v48 + 1;
              goto LABEL_116;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
          goto LABEL_115;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_116;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_116:
        *((_DWORD *)this + 21) = v24;
        break;
      case 0xBu:
        *((_WORD *)this + 50) |= 0x800u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v50 = 0;
          v51 = 0;
          v30 = 0;
          if (v2 <= v26)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_121;
            }
            v52 = v26++;
            v53 = *(_BYTE *)(v27 + v52);
            *((_QWORD *)a2 + 1) = v26;
            v30 |= (unint64_t)(v53 & 0x7F) << v50;
            if ((v53 & 0x80) == 0)
              break;
            v50 += 7;
            v14 = v51++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_120:
              v2 = v52 + 1;
              goto LABEL_121;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v30) = 0;
          goto LABEL_120;
        }
        v28 = 0;
        v29 = 0;
        v30 = 0;
        do
        {
          v2 = v26 + 1;
          *((_QWORD *)a2 + 1) = v26 + 1;
          v31 = *(_BYTE *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0)
            goto LABEL_121;
          v28 += 7;
          v26 = v2;
          v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_121:
        *((_DWORD *)this + 22) = v30;
        break;
      case 0xCu:
        *((_WORD *)this + 50) |= 0x1000u;
        v32 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v33 = *(_QWORD *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
        {
          v54 = 0;
          v55 = 0;
          v36 = 0;
          if (v2 <= v32)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v32)
            {
              LODWORD(v36) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_126;
            }
            v56 = v32++;
            v57 = *(_BYTE *)(v33 + v56);
            *((_QWORD *)a2 + 1) = v32;
            v36 |= (unint64_t)(v57 & 0x7F) << v54;
            if ((v57 & 0x80) == 0)
              break;
            v54 += 7;
            v14 = v55++ > 8;
            if (v14)
            {
              LODWORD(v36) = 0;
LABEL_125:
              v2 = v56 + 1;
              goto LABEL_126;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v36) = 0;
          goto LABEL_125;
        }
        v34 = 0;
        v35 = 0;
        v36 = 0;
        do
        {
          v2 = v32 + 1;
          *((_QWORD *)a2 + 1) = v32 + 1;
          v37 = *(_BYTE *)(v33 + v32);
          v36 |= (unint64_t)(v37 & 0x7F) << v34;
          if ((v37 & 0x80) == 0)
            goto LABEL_126;
          v34 += 7;
          v32 = v2;
          v14 = v35++ > 8;
        }
        while (!v14);
        LODWORD(v36) = 0;
LABEL_126:
        *((_DWORD *)this + 23) = v36;
        break;
      case 0xDu:
        *((_WORD *)this + 50) |= 0x200u;
        v38 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v39 = *(_QWORD *)a2;
        if (v38 > 0xFFFFFFFFFFFFFFF5 || v38 + 10 > v2)
        {
          v58 = 0;
          v59 = 0;
          v42 = 0;
          if (v2 <= v38)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v38)
            {
              LODWORD(v42) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_131;
            }
            v60 = v38++;
            v61 = *(_BYTE *)(v39 + v60);
            *((_QWORD *)a2 + 1) = v38;
            v42 |= (unint64_t)(v61 & 0x7F) << v58;
            if ((v61 & 0x80) == 0)
              break;
            v58 += 7;
            v14 = v59++ > 8;
            if (v14)
            {
              LODWORD(v42) = 0;
LABEL_130:
              v2 = v60 + 1;
              goto LABEL_131;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v42) = 0;
          goto LABEL_130;
        }
        v40 = 0;
        v41 = 0;
        v42 = 0;
        do
        {
          v2 = v38 + 1;
          *((_QWORD *)a2 + 1) = v38 + 1;
          v43 = *(_BYTE *)(v39 + v38);
          v42 |= (unint64_t)(v43 & 0x7F) << v40;
          if ((v43 & 0x80) == 0)
            goto LABEL_131;
          v40 += 7;
          v38 = v2;
          v14 = v41++ > 8;
        }
        while (!v14);
        LODWORD(v42) = 0;
LABEL_131:
        *((_DWORD *)this + 20) = v42;
        break;
      case 0xEu:
        *((_WORD *)this + 50) |= 0x2000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v45 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v44 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v45 = v44 != 0;
        }
        *((_BYTE *)this + 96) = v45;
        break;
      default:
        goto LABEL_19;
    }
LABEL_132:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::Odometer::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 100);
  if ((v4 & 0x80) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 64));
    v4 = *(_WORD *)(v3 + 100);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x10) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(double *)(v3 + 72));
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x400) == 0)
  {
LABEL_11:
    if ((v4 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x800) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x1000) == 0)
  {
LABEL_13:
    if ((v4 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x200) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000) == 0)
      return this;
    return PB::Writer::write(a2);
  }
LABEL_28:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_WORD *)(v3 + 100) & 0x2000) != 0)
    return PB::Writer::write(a2);
  return this;
}

uint64_t CMMsl::Odometer::hash_value(CMMsl::Odometer *this)
{
  __int16 v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *((_WORD *)this + 50);
  if ((v1 & 0x80) == 0)
  {
    v2 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_3;
LABEL_35:
    v3 = 0.0;
    if ((v1 & 1) != 0)
      goto LABEL_6;
LABEL_36:
    v4 = 0.0;
    if ((v1 & 4) != 0)
      goto LABEL_9;
LABEL_37:
    v5 = 0.0;
    if ((v1 & 0x40) != 0)
      goto LABEL_12;
LABEL_38:
    v6 = 0.0;
    if ((v1 & 0x20) != 0)
      goto LABEL_15;
LABEL_39:
    v7 = 0.0;
    if ((v1 & 0x10) != 0)
      goto LABEL_18;
LABEL_40:
    v8 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_21;
LABEL_41:
    v9 = 0.0;
    if ((*((_WORD *)this + 50) & 0x100) != 0)
      goto LABEL_24;
LABEL_42:
    v10 = 0.0;
    if ((*((_WORD *)this + 50) & 0x400) != 0)
      goto LABEL_27;
    goto LABEL_43;
  }
  v2 = *((double *)this + 8);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_35;
LABEL_3:
  v3 = *((double *)this + 2);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_36;
LABEL_6:
  v4 = *((double *)this + 1);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 4) == 0)
    goto LABEL_37;
LABEL_9:
  v5 = *((double *)this + 3);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((v1 & 0x40) == 0)
    goto LABEL_38;
LABEL_12:
  v6 = *((double *)this + 7);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((v1 & 0x20) == 0)
    goto LABEL_39;
LABEL_15:
  v7 = *((double *)this + 6);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((v1 & 0x10) == 0)
    goto LABEL_40;
LABEL_18:
  v8 = *((double *)this + 5);
  if (v8 == 0.0)
    v8 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_41;
LABEL_21:
  v9 = *((double *)this + 4);
  if (v9 == 0.0)
    v9 = 0.0;
  if ((*((_WORD *)this + 50) & 0x100) == 0)
    goto LABEL_42;
LABEL_24:
  v10 = *((double *)this + 9);
  if (v10 == 0.0)
    v10 = 0.0;
  if ((*((_WORD *)this + 50) & 0x400) != 0)
  {
LABEL_27:
    v11 = *((unsigned int *)this + 21);
    if ((*((_WORD *)this + 50) & 0x800) != 0)
      goto LABEL_28;
    goto LABEL_44;
  }
LABEL_43:
  v11 = 0;
  if ((*((_WORD *)this + 50) & 0x800) != 0)
  {
LABEL_28:
    v12 = *((unsigned int *)this + 22);
    if ((*((_WORD *)this + 50) & 0x1000) != 0)
      goto LABEL_29;
    goto LABEL_45;
  }
LABEL_44:
  v12 = 0;
  if ((*((_WORD *)this + 50) & 0x1000) != 0)
  {
LABEL_29:
    v13 = *((unsigned int *)this + 23);
    if ((*((_WORD *)this + 50) & 0x200) != 0)
      goto LABEL_30;
LABEL_46:
    v14 = 0;
    if ((*((_WORD *)this + 50) & 0x2000) != 0)
      goto LABEL_31;
LABEL_47:
    v15 = 0;
    return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15;
  }
LABEL_45:
  v13 = 0;
  if ((*((_WORD *)this + 50) & 0x200) == 0)
    goto LABEL_46;
LABEL_30:
  v14 = *((unsigned int *)this + 20);
  if ((*((_WORD *)this + 50) & 0x2000) == 0)
    goto LABEL_47;
LABEL_31:
  v15 = *((unsigned __int8 *)this + 96);
  return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15;
}

void CMMsl::OdometerWithAltitude::~OdometerWithAltitude(CMMsl::OdometerWithAltitude *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_25135F7B0;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_25135F7B0;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_25135F7B0;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::OdometerWithAltitude *CMMsl::OdometerWithAltitude::OdometerWithAltitude(CMMsl::OdometerWithAltitude *this, const CMMsl::Odometer **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  const CMMsl::Odometer *v8;
  const CMMsl::Odometer *v10;
  const CMMsl::Odometer *v11;
  const CMMsl::Odometer *v12;
  const CMMsl::Odometer *v13;
  const CMMsl::Odometer *v14;
  const CMMsl::Odometer *v15;
  const CMMsl::Odometer *v16;

  *(_QWORD *)this = &off_25135F7B0;
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 20) = 0;
  if (a2[9])
  {
    v4 = operator new();
    v5 = CMMsl::Odometer::Odometer(v4, a2[9]);
    v6 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  v7 = *((_BYTE *)a2 + 80);
  if ((v7 & 4) != 0)
  {
    v10 = a2[3];
    *((_BYTE *)this + 80) |= 4u;
    *((_QWORD *)this + 3) = v10;
    v7 = *((_BYTE *)a2 + 80);
    if ((v7 & 8) == 0)
    {
LABEL_6:
      if ((v7 & 0x40) == 0)
        goto LABEL_7;
      goto LABEL_16;
    }
  }
  else if (((_BYTE)a2[10] & 8) == 0)
  {
    goto LABEL_6;
  }
  v11 = a2[4];
  *((_BYTE *)this + 80) |= 8u;
  *((_QWORD *)this + 4) = v11;
  v7 = *((_BYTE *)a2 + 80);
  if ((v7 & 0x40) == 0)
  {
LABEL_7:
    if ((v7 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  v12 = a2[7];
  *((_BYTE *)this + 80) |= 0x40u;
  *((_QWORD *)this + 7) = v12;
  v7 = *((_BYTE *)a2 + 80);
  if ((v7 & 0x80) == 0)
  {
LABEL_8:
    if ((v7 & 2) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  v13 = a2[8];
  *((_BYTE *)this + 80) |= 0x80u;
  *((_QWORD *)this + 8) = v13;
  v7 = *((_BYTE *)a2 + 80);
  if ((v7 & 2) == 0)
  {
LABEL_9:
    if ((v7 & 1) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  v14 = a2[2];
  *((_BYTE *)this + 80) |= 2u;
  *((_QWORD *)this + 2) = v14;
  v7 = *((_BYTE *)a2 + 80);
  if ((v7 & 1) == 0)
  {
LABEL_10:
    if ((v7 & 0x20) == 0)
      goto LABEL_11;
LABEL_20:
    v16 = a2[6];
    *((_BYTE *)this + 80) |= 0x20u;
    *((_QWORD *)this + 6) = v16;
    if (((_BYTE)a2[10] & 0x10) == 0)
      return this;
    goto LABEL_12;
  }
LABEL_19:
  v15 = a2[1];
  *((_BYTE *)this + 80) |= 1u;
  *((_QWORD *)this + 1) = v15;
  v7 = *((_BYTE *)a2 + 80);
  if ((v7 & 0x20) != 0)
    goto LABEL_20;
LABEL_11:
  if ((v7 & 0x10) != 0)
  {
LABEL_12:
    v8 = a2[5];
    *((_BYTE *)this + 80) |= 0x10u;
    *((_QWORD *)this + 5) = v8;
  }
  return this;
}

uint64_t CMMsl::OdometerWithAltitude::operator=(uint64_t a1, const CMMsl::Odometer **a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  void (**v10)(CMMsl::OdometerWithAltitude *__hidden);
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  int v16;

  if ((const CMMsl::Odometer **)a1 != a2)
  {
    CMMsl::OdometerWithAltitude::OdometerWithAltitude((CMMsl::OdometerWithAltitude *)&v10, a2);
    v3 = *(_DWORD *)(a1 + 80);
    *(_DWORD *)(a1 + 80) = v16;
    v16 = v3;
    v4 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v15;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    v6 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v14;
    v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v11;
    v11 = v7;
    v12 = v5;
    v8 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v13;
    v13 = v8;
    v14 = v6;
    v10 = &off_25135F7B0;
    v15 = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::OdometerWithAltitude *a2, CMMsl::OdometerWithAltitude *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  v3 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v3;
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v4;
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  v6 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v6;
  v7 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v7;
  v8 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v8;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v9;
  v10 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v10;
  v11 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v11;
  result = *((double *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((double *)a2 + 5) = result;
  return result;
}

uint64_t CMMsl::OdometerWithAltitude::OdometerWithAltitude(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_25135F7B0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a2 + 80) = 0;
  v4 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  v5 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t CMMsl::OdometerWithAltitude::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  void (**v10)(CMMsl::OdometerWithAltitude *__hidden);
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  int v16;

  if (a1 != a2)
  {
    CMMsl::OdometerWithAltitude::OdometerWithAltitude((uint64_t)&v10, a2);
    v3 = *(_DWORD *)(a1 + 80);
    *(_DWORD *)(a1 + 80) = v16;
    v16 = v3;
    v4 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v15;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    v6 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v14;
    v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v11;
    v11 = v7;
    v12 = v5;
    v8 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v13;
    v13 = v8;
    v14 = v6;
    v10 = &off_25135F7B0;
    v15 = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

uint64_t CMMsl::OdometerWithAltitude::formatText(CMMsl::OdometerWithAltitude *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;
  uint64_t v6;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 80);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "gpsCourseAccuracy", *((double *)this + 1));
    v5 = *((_BYTE *)this + 80);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((*((_BYTE *)this + 80) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "gpsCourseRadians", *((double *)this + 2));
  v5 = *((_BYTE *)this + 80);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "groundAltitude", *((double *)this + 3));
  v5 = *((_BYTE *)this + 80);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "groundAltitudeUncertainty", *((double *)this + 4));
  v5 = *((_BYTE *)this + 80);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "maxAbsSlope", *((double *)this + 5));
  v5 = *((_BYTE *)this + 80);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
LABEL_18:
    PB::TextFormatter::format(a2, "smoothedGPSAltitude", *((double *)this + 7));
    if ((*((_BYTE *)this + 80) & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "slope", *((double *)this + 6));
  v5 = *((_BYTE *)this + 80);
  if ((v5 & 0x40) != 0)
    goto LABEL_18;
LABEL_8:
  if ((v5 & 0x80) == 0)
    goto LABEL_9;
LABEL_19:
  PB::TextFormatter::format(a2, "smoothedGPSAltitudeUncertainty", *((double *)this + 8));
LABEL_9:
  v6 = *((_QWORD *)this + 9);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::OdometerWithAltitude::readFrom(CMMsl::OdometerWithAltitude *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  _DWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_21:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          v20 = (_DWORD *)operator new();
          *(_QWORD *)v20 = &off_25135F778;
          v20[25] = 0;
          v21 = *((_QWORD *)this + 9);
          *((_QWORD *)this + 9) = v20;
          if (v21)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
            v20 = (_DWORD *)*((_QWORD *)this + 9);
          }
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, a2) & 1) == 0)
          {
            return 0;
          }
          PB::Reader::recallMark();
          break;
        case 2u:
          *((_BYTE *)this + 80) |= 4u;
          v22 = *((_QWORD *)a2 + 1);
          if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_51;
          *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v22);
          goto LABEL_53;
        case 3u:
          *((_BYTE *)this + 80) |= 8u;
          v23 = *((_QWORD *)a2 + 1);
          if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_51;
          *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v23);
          goto LABEL_53;
        case 4u:
          *((_BYTE *)this + 80) |= 0x40u;
          v24 = *((_QWORD *)a2 + 1);
          if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_51;
          *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v24);
          goto LABEL_53;
        case 5u:
          *((_BYTE *)this + 80) |= 0x80u;
          v25 = *((_QWORD *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_51;
          *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v25);
          goto LABEL_53;
        case 6u:
          *((_BYTE *)this + 80) |= 2u;
          v26 = *((_QWORD *)a2 + 1);
          if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_51;
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v26);
          goto LABEL_53;
        case 7u:
          *((_BYTE *)this + 80) |= 1u;
          v27 = *((_QWORD *)a2 + 1);
          if (v27 > 0xFFFFFFFFFFFFFFF7 || v27 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_51;
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v27);
          goto LABEL_53;
        case 8u:
          *((_BYTE *)this + 80) |= 0x20u;
          v28 = *((_QWORD *)a2 + 1);
          if (v28 > 0xFFFFFFFFFFFFFFF7 || v28 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_51;
          *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v28);
          goto LABEL_53;
        case 9u:
          *((_BYTE *)this + 80) |= 0x10u;
          v29 = *((_QWORD *)a2 + 1);
          if (v29 <= 0xFFFFFFFFFFFFFFF7 && v29 + 8 <= *((_QWORD *)a2 + 2))
          {
            *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v29);
LABEL_53:
            *((_QWORD *)a2 + 1) += 8;
          }
          else
          {
LABEL_51:
            *((_BYTE *)a2 + 24) = 1;
          }
          goto LABEL_54;
        default:
          goto LABEL_19;
      }
      goto LABEL_54;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_21;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    result = PB::Reader::skip(a2);
    if (!(_DWORD)result)
      return result;
LABEL_54:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
}

uint64_t CMMsl::OdometerWithAltitude::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  char v5;

  v3 = this;
  v4 = *(const PB::Base **)(this + 72);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = *(_BYTE *)(v3 + 80);
  if ((v5 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 24));
    v5 = *(_BYTE *)(v3 + 80);
    if ((v5 & 8) == 0)
    {
LABEL_5:
      if ((v5 & 0x40) == 0)
        goto LABEL_6;
      goto LABEL_14;
    }
  }
  else if ((*(_BYTE *)(v3 + 80) & 8) == 0)
  {
    goto LABEL_5;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  v5 = *(_BYTE *)(v3 + 80);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  v5 = *(_BYTE *)(v3 + 80);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 2) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  v5 = *(_BYTE *)(v3 + 80);
  if ((v5 & 2) == 0)
  {
LABEL_8:
    if ((v5 & 1) == 0)
      goto LABEL_9;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v5 = *(_BYTE *)(v3 + 80);
  if ((v5 & 1) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  v5 = *(_BYTE *)(v3 + 80);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x10) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 40));
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  if ((*(_BYTE *)(v3 + 80) & 0x10) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 40));
  return this;
}

unint64_t CMMsl::OdometerWithAltitude::hash_value(CMMsl::OdometerWithAltitude *this)
{
  unint64_t v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;

  v2 = *((_QWORD *)this + 9);
  if (v2)
    v2 = CMMsl::Odometer::hash_value((CMMsl::Odometer *)v2);
  if ((*((_BYTE *)this + 80) & 4) == 0)
  {
    v3 = 0.0;
    if ((*((_BYTE *)this + 80) & 8) != 0)
      goto LABEL_5;
LABEL_29:
    v4 = 0.0;
    if ((*((_BYTE *)this + 80) & 0x40) != 0)
      goto LABEL_8;
LABEL_30:
    v5 = 0.0;
    if ((*((_BYTE *)this + 80) & 0x80) != 0)
      goto LABEL_11;
LABEL_31:
    v6 = 0.0;
    if ((*((_BYTE *)this + 80) & 2) != 0)
      goto LABEL_14;
LABEL_32:
    v7 = 0.0;
    if ((*((_BYTE *)this + 80) & 1) != 0)
      goto LABEL_17;
LABEL_33:
    v8 = 0.0;
    if ((*((_BYTE *)this + 80) & 0x20) != 0)
      goto LABEL_20;
    goto LABEL_34;
  }
  v3 = *((double *)this + 3);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((*((_BYTE *)this + 80) & 8) == 0)
    goto LABEL_29;
LABEL_5:
  v4 = *((double *)this + 4);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((*((_BYTE *)this + 80) & 0x40) == 0)
    goto LABEL_30;
LABEL_8:
  v5 = *((double *)this + 7);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((*((_BYTE *)this + 80) & 0x80) == 0)
    goto LABEL_31;
LABEL_11:
  v6 = *((double *)this + 8);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((*((_BYTE *)this + 80) & 2) == 0)
    goto LABEL_32;
LABEL_14:
  v7 = *((double *)this + 2);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((*((_BYTE *)this + 80) & 1) == 0)
    goto LABEL_33;
LABEL_17:
  v8 = *((double *)this + 1);
  if (v8 == 0.0)
    v8 = 0.0;
  if ((*((_BYTE *)this + 80) & 0x20) != 0)
  {
LABEL_20:
    v9 = *((double *)this + 6);
    if (v9 == 0.0)
      v9 = 0.0;
    if ((*((_BYTE *)this + 80) & 0x10) != 0)
      goto LABEL_23;
LABEL_35:
    v10 = 0.0;
    return *(_QWORD *)&v3 ^ v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10;
  }
LABEL_34:
  v9 = 0.0;
  if ((*((_BYTE *)this + 80) & 0x10) == 0)
    goto LABEL_35;
LABEL_23:
  v10 = *((double *)this + 5);
  if (v10 == 0.0)
    v10 = 0.0;
  return *(_QWORD *)&v3 ^ v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10;
}

_QWORD *CMMsl::OdometerWithAltitude::makeSuper(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[9])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135F778;
    *(_DWORD *)(v2 + 100) = 0;
    this = (_QWORD *)v1[9];
    v1[9] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void CMMsl::OnsetHeartRateData::~OnsetHeartRateData(CMMsl::OnsetHeartRateData *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::OnsetHeartRateData::OnsetHeartRateData(uint64_t this, const CMMsl::OnsetHeartRateData *a2)
{
  __int16 v2;
  __int16 v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;

  *(_QWORD *)this = &off_25135F7E8;
  *(_DWORD *)(this + 68) = 0;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x40) != 0)
  {
    v4 = *((_DWORD *)a2 + 13);
    v3 = 64;
    *(_WORD *)(this + 68) = 64;
    *(_DWORD *)(this + 52) = v4;
    v2 = *((_WORD *)a2 + 34);
    if ((v2 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 14);
    v3 |= 0x80u;
    *(_WORD *)(this + 68) = v3;
    *(_DWORD *)(this + 56) = v5;
    v2 = *((_WORD *)a2 + 34);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *((_QWORD *)a2 + 2);
    v3 |= 2u;
    *(_WORD *)(this + 68) = v3;
    *(_QWORD *)(this + 16) = v6;
    v2 = *((_WORD *)a2 + 34);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0)
        goto LABEL_9;
      goto LABEL_17;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 68) = v3;
  *(_QWORD *)(this + 8) = v7;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_18;
  }
LABEL_17:
  v8 = *((_BYTE *)a2 + 64);
  v3 |= 0x200u;
  *(_WORD *)(this + 68) = v3;
  *(_BYTE *)(this + 64) = v8;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0)
      goto LABEL_11;
    goto LABEL_19;
  }
LABEL_18:
  v9 = *((_QWORD *)a2 + 5);
  v3 |= 0x10u;
  *(_WORD *)(this + 68) = v3;
  *(_QWORD *)(this + 40) = v9;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 8) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0)
      goto LABEL_12;
    goto LABEL_20;
  }
LABEL_19:
  v10 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *(_WORD *)(this + 68) = v3;
  *(_QWORD *)(this + 32) = v10;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_21;
  }
LABEL_20:
  v11 = *((_QWORD *)a2 + 3);
  v3 |= 4u;
  *(_WORD *)(this + 68) = v3;
  *(_QWORD *)(this + 24) = v11;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x100) == 0)
  {
LABEL_13:
    if ((v2 & 0x20) == 0)
      return this;
LABEL_22:
    v13 = *((_DWORD *)a2 + 12);
    *(_WORD *)(this + 68) = v3 | 0x20;
    *(_DWORD *)(this + 48) = v13;
    return this;
  }
LABEL_21:
  v12 = *((_DWORD *)a2 + 15);
  v3 |= 0x100u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 60) = v12;
  if ((*((_WORD *)a2 + 34) & 0x20) != 0)
    goto LABEL_22;
  return this;
}

uint64_t CMMsl::OnsetHeartRateData::operator=(uint64_t a1, const CMMsl::OnsetHeartRateData *a2)
{
  int v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  _BYTE v9[8];
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  char v14;
  int v15;

  if ((const CMMsl::OnsetHeartRateData *)a1 != a2)
  {
    CMMsl::OnsetHeartRateData::OnsetHeartRateData((uint64_t)v9, a2);
    v3 = *(_DWORD *)(a1 + 68);
    *(_DWORD *)(a1 + 68) = v15;
    v15 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    LOBYTE(v3) = *(_BYTE *)(a1 + 64);
    *(_BYTE *)(a1 + 64) = v14;
    v14 = v3;
    v5 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v12;
    v12 = v5;
    v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v10 = v4;
    v11 = v6;
    v7 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(a1 + 48) = v13;
    v13 = v7;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::OnsetHeartRateData *a2, CMMsl::OnsetHeartRateData *a3)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;
  int v11;
  int v12;

  v3 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v3;
  v4 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  v5 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v7;
  LOBYTE(v5) = *((_BYTE *)this + 64);
  *((_BYTE *)this + 64) = *((_BYTE *)a2 + 64);
  *((_BYTE *)a2 + 64) = v5;
  v8 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v8;
  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v9;
  result = *((double *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((double *)a2 + 3) = result;
  v11 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v11;
  v12 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v12;
  return result;
}

double CMMsl::OnsetHeartRateData::OnsetHeartRateData(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135F7E8;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a2 + 68) = 0;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  return result;
}

uint64_t CMMsl::OnsetHeartRateData::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  char v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  void (**v14)(CMMsl::OnsetHeartRateData *__hidden);
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  char v19;
  int v20;

  if (a1 != a2)
  {
    v14 = &off_25135F7E8;
    v3 = *(_DWORD *)(a2 + 68);
    *(_DWORD *)(a2 + 68) = 0;
    v4 = *(_BYTE *)(a2 + 64);
    v5 = *(_QWORD *)(a2 + 40);
    v20 = *(_DWORD *)(a1 + 68);
    v6 = *(_OWORD *)(a1 + 8);
    v7 = *(_OWORD *)(a2 + 8);
    v8 = *(_BYTE *)(a1 + 64);
    *(_BYTE *)(a1 + 64) = v4;
    v19 = v8;
    v17 = *(_QWORD *)(a1 + 40);
    v9 = *(_OWORD *)(a1 + 24);
    v10 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 40) = v5;
    *(_OWORD *)(a1 + 24) = v10;
    v15 = v6;
    v16 = v9;
    v11 = *(_OWORD *)(a1 + 48);
    v12 = *(_OWORD *)(a2 + 48);
    *(_DWORD *)(a1 + 68) = v3;
    *(_OWORD *)(a1 + 48) = v12;
    v18 = v11;
    PB::Base::~Base((PB::Base *)&v14);
  }
  return a1;
}

uint64_t CMMsl::OnsetHeartRateData::formatText(CMMsl::OnsetHeartRateData *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 34);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "confidence", *((double *)this + 1));
    v5 = *((_WORD *)this + 34);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "context");
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "dataSource");
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 2) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "error");
  v5 = *((_WORD *)this + 34);
  if ((v5 & 2) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "heartRate", *((double *)this + 2));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "interpolation");
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 4) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "mode");
  v5 = *((_WORD *)this + 34);
  if ((v5 & 4) == 0)
  {
LABEL_9:
    if ((v5 & 8) == 0)
      goto LABEL_10;
LABEL_21:
    PB::TextFormatter::format(a2, "startTime", *((double *)this + 4));
    if ((*((_WORD *)this + 34) & 0x10) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_11;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "sinceLastGood", *((double *)this + 3));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 8) != 0)
    goto LABEL_21;
LABEL_10:
  if ((v5 & 0x10) != 0)
LABEL_11:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 5));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::OnsetHeartRateData::readFrom(CMMsl::OnsetHeartRateData *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  int v32;
  BOOL v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  uint64_t v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  char v45;
  char v46;
  unsigned int v47;
  unint64_t v48;
  char v49;
  char v50;
  unsigned int v51;
  unint64_t v52;
  char v53;
  char v54;
  unsigned int v55;
  unint64_t v56;
  char v57;
  char v58;
  unsigned int v59;
  unint64_t v60;
  char v61;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_120;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 34) |= 0x40u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v46 = 0;
          v47 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_104;
            }
            v48 = v20++;
            v49 = *(_BYTE *)(v21 + v48);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v49 & 0x7F) << v46;
            if ((v49 & 0x80) == 0)
              break;
            v46 += 7;
            v14 = v47++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_103:
              v2 = v48 + 1;
              goto LABEL_104;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
          goto LABEL_103;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_104;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_104:
        *((_DWORD *)this + 13) = v24;
        break;
      case 2u:
        *((_WORD *)this + 34) |= 0x80u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v50 = 0;
          v51 = 0;
          v30 = 0;
          if (v2 <= v26)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_109;
            }
            v52 = v26++;
            v53 = *(_BYTE *)(v27 + v52);
            *((_QWORD *)a2 + 1) = v26;
            v30 |= (unint64_t)(v53 & 0x7F) << v50;
            if ((v53 & 0x80) == 0)
              break;
            v50 += 7;
            v14 = v51++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_108:
              v2 = v52 + 1;
              goto LABEL_109;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v30) = 0;
          goto LABEL_108;
        }
        v28 = 0;
        v29 = 0;
        v30 = 0;
        do
        {
          v2 = v26 + 1;
          *((_QWORD *)a2 + 1) = v26 + 1;
          v31 = *(_BYTE *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0)
            goto LABEL_109;
          v28 += 7;
          v26 = v2;
          v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_109:
        *((_DWORD *)this + 14) = v30;
        break;
      case 3u:
        *((_WORD *)this + 34) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_53;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_99;
      case 4u:
        *((_WORD *)this + 34) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_53;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_99;
      case 5u:
        *((_WORD *)this + 34) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v33 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v32 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v33 = v32 != 0;
        }
        *((_BYTE *)this + 64) = v33;
        break;
      case 6u:
        *((_WORD *)this + 34) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_53;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_99;
      case 7u:
        *((_WORD *)this + 34) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_53;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_99;
      case 8u:
        *((_WORD *)this + 34) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_99:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_53:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 9u:
        *((_WORD *)this + 34) |= 0x100u;
        v34 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v35 = *(_QWORD *)a2;
        if (v34 > 0xFFFFFFFFFFFFFFF5 || v34 + 10 > v2)
        {
          v54 = 0;
          v55 = 0;
          v38 = 0;
          if (v2 <= v34)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v34)
            {
              LODWORD(v38) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_114;
            }
            v56 = v34++;
            v57 = *(_BYTE *)(v35 + v56);
            *((_QWORD *)a2 + 1) = v34;
            v38 |= (unint64_t)(v57 & 0x7F) << v54;
            if ((v57 & 0x80) == 0)
              break;
            v54 += 7;
            v14 = v55++ > 8;
            if (v14)
            {
              LODWORD(v38) = 0;
LABEL_113:
              v2 = v56 + 1;
              goto LABEL_114;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v38) = 0;
          goto LABEL_113;
        }
        v36 = 0;
        v37 = 0;
        v38 = 0;
        do
        {
          v2 = v34 + 1;
          *((_QWORD *)a2 + 1) = v34 + 1;
          v39 = *(_BYTE *)(v35 + v34);
          v38 |= (unint64_t)(v39 & 0x7F) << v36;
          if ((v39 & 0x80) == 0)
            goto LABEL_114;
          v36 += 7;
          v34 = v2;
          v14 = v37++ > 8;
        }
        while (!v14);
        LODWORD(v38) = 0;
LABEL_114:
        *((_DWORD *)this + 15) = v38;
        break;
      case 0xAu:
        *((_WORD *)this + 34) |= 0x20u;
        v40 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v41 = *(_QWORD *)a2;
        if (v40 > 0xFFFFFFFFFFFFFFF5 || v40 + 10 > v2)
        {
          v58 = 0;
          v59 = 0;
          v44 = 0;
          if (v2 <= v40)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v40)
            {
              LODWORD(v44) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_119;
            }
            v60 = v40++;
            v61 = *(_BYTE *)(v41 + v60);
            *((_QWORD *)a2 + 1) = v40;
            v44 |= (unint64_t)(v61 & 0x7F) << v58;
            if ((v61 & 0x80) == 0)
              break;
            v58 += 7;
            v14 = v59++ > 8;
            if (v14)
            {
              LODWORD(v44) = 0;
LABEL_118:
              v2 = v60 + 1;
              goto LABEL_119;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v44) = 0;
          goto LABEL_118;
        }
        v42 = 0;
        v43 = 0;
        v44 = 0;
        do
        {
          v2 = v40 + 1;
          *((_QWORD *)a2 + 1) = v40 + 1;
          v45 = *(_BYTE *)(v41 + v40);
          v44 |= (unint64_t)(v45 & 0x7F) << v42;
          if ((v45 & 0x80) == 0)
            goto LABEL_119;
          v42 += 7;
          v40 = v2;
          v14 = v43++ > 8;
        }
        while (!v14);
        LODWORD(v44) = 0;
LABEL_119:
        *((_DWORD *)this + 12) = v44;
        break;
      default:
        goto LABEL_19;
    }
LABEL_120:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::OnsetHeartRateData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 68);
  if ((v4 & 0x40) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_WORD *)(v3 + 68);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 0x20) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_20:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_WORD *)(v3 + 68) & 0x20) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::OnsetHeartRateData::hash_value(CMMsl::OnsetHeartRateData *this)
{
  __int16 v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *((_WORD *)this + 34);
  if ((v1 & 0x40) != 0)
  {
    v2 = *((unsigned int *)this + 13);
    if ((v1 & 0x80) != 0)
    {
LABEL_3:
      v3 = *((unsigned int *)this + 14);
      if ((v1 & 2) != 0)
        goto LABEL_4;
LABEL_24:
      v4 = 0.0;
      if ((v1 & 1) != 0)
        goto LABEL_7;
LABEL_25:
      v5 = 0.0;
      if ((*((_WORD *)this + 34) & 0x200) != 0)
        goto LABEL_10;
      goto LABEL_26;
    }
  }
  else
  {
    v2 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_24;
LABEL_4:
  v4 = *((double *)this + 2);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_25;
LABEL_7:
  v5 = *((double *)this + 1);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((*((_WORD *)this + 34) & 0x200) != 0)
  {
LABEL_10:
    v6 = *((unsigned __int8 *)this + 64);
    if ((v1 & 0x10) != 0)
      goto LABEL_11;
LABEL_27:
    v7 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_14;
LABEL_28:
    v8 = 0.0;
    if ((v1 & 4) != 0)
      goto LABEL_17;
LABEL_29:
    v9 = 0.0;
    if ((*((_WORD *)this + 34) & 0x100) != 0)
      goto LABEL_20;
LABEL_30:
    v10 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_21;
LABEL_31:
    v11 = 0;
    return v3 ^ v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ v10 ^ v11;
  }
LABEL_26:
  v6 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_27;
LABEL_11:
  v7 = *((double *)this + 5);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_28;
LABEL_14:
  v8 = *((double *)this + 4);
  if (v8 == 0.0)
    v8 = 0.0;
  if ((v1 & 4) == 0)
    goto LABEL_29;
LABEL_17:
  v9 = *((double *)this + 3);
  if (v9 == 0.0)
    v9 = 0.0;
  if ((*((_WORD *)this + 34) & 0x100) == 0)
    goto LABEL_30;
LABEL_20:
  v10 = *((unsigned int *)this + 15);
  if ((v1 & 0x20) == 0)
    goto LABEL_31;
LABEL_21:
  v11 = *((unsigned int *)this + 12);
  return v3 ^ v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ v10 ^ v11;
}

void CMMsl::Orientation::~Orientation(CMMsl::Orientation *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::Orientation::Orientation(uint64_t this, const CMMsl::Orientation *a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)this = &off_25135F820;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::Orientation::operator=(uint64_t a1, uint64_t a2, double a3)
{
  int v3;
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  uint64_t v12;

  if (a1 != a2)
  {
    v11[0] = &off_25135F820;
    HIDWORD(v12) = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      BYTE4(v12) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        v3 = *(_DWORD *)(a2 + 16);
        BYTE4(v12) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_6;
    }
    v7 = HIDWORD(v12);
    v8 = *(_QWORD *)(a1 + 8);
    v9 = *(_QWORD *)(a1 + 16);
    *(double *)(a1 + 8) = a3;
    *(_DWORD *)(a1 + 16) = v3;
    *(_DWORD *)(a1 + 20) = v7;
    v11[1] = v8;
    v12 = v9;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::Orientation *a2, CMMsl::Orientation *a3)
{
  int v3;
  double result;
  int v5;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  return result;
}

double CMMsl::Orientation::Orientation(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135F820;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135F820;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::Orientation::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  if (a1 != a2)
  {
    v8[0] = &off_25135F820;
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    v8[1] = v5;
    v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::Orientation::formatText(CMMsl::Orientation *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "orientation");
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::Orientation::readFrom(CMMsl::Orientation *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_26;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v26 = 0;
          v27 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_47;
            }
            v28 = v20++;
            v29 = *(_BYTE *)(v21 + v28);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0)
              break;
            v26 += 7;
            v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
LABEL_46:
          v2 = v28 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)a2 + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 4) = v24;
      }
      else if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_26:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_26;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::Orientation::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::Orientation::hash_value(CMMsl::Orientation *this)
{
  double v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v2 = 0;
    return v2 ^ *(_QWORD *)&v1;
  }
  v1 = 0.0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((unsigned int *)this + 4);
  return v2 ^ *(_QWORD *)&v1;
}

void CMMsl::PDRAlgType::~PDRAlgType(CMMsl::PDRAlgType *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::PDRAlgType::PDRAlgType(uint64_t this, const CMMsl::PDRAlgType *a2)
{
  int v2;

  *(_QWORD *)this = &off_25135F858;
  *(_QWORD *)(this + 8) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v2 = *((_DWORD *)a2 + 2);
    *(_BYTE *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::PDRAlgType::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v6[0] = &off_25135F858;
    v3 = *(unsigned __int8 *)(a2 + 12);
    v4 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = (v3 << 31 >> 31) & *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 12) = v3 & 1;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v6[0] = &off_25135F858;
    v3 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 12) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::PDRAlgType *a2, CMMsl::PDRAlgType *a3)
{
  int v3;
  int v4;

  v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  v4 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  return this;
}

uint64_t CMMsl::PDRAlgType::formatText(CMMsl::PDRAlgType *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 12) & 1) != 0)
    PB::TextFormatter::format(a2, "type");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PDRAlgType::readFrom(CMMsl::PDRAlgType *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  char v24;
  uint64_t result;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_29;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 12) |= 1u;
        v19 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        v20 = *(_QWORD *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v3)
        {
          v26 = 0;
          v27 = 0;
          v23 = 0;
          if (v3 <= v19)
            v2 = *((_QWORD *)a2 + 1);
          else
            v2 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v2 == v19)
            {
              LODWORD(v23) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_43;
            }
            v28 = v19++;
            v29 = *(_BYTE *)(v20 + v28);
            *((_QWORD *)a2 + 1) = v19;
            v23 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0)
              break;
            v26 += 7;
            v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              goto LABEL_42;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v23) = 0;
LABEL_42:
          v2 = v28 + 1;
        }
        else
        {
          v21 = 0;
          v22 = 0;
          v23 = 0;
          while (1)
          {
            v2 = v19 + 1;
            *((_QWORD *)a2 + 1) = v19 + 1;
            v24 = *(_BYTE *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0)
              break;
            v21 += 7;
            v19 = v2;
            v14 = v22++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              break;
            }
          }
        }
LABEL_43:
        *((_DWORD *)this + 2) = v23;
      }
      else
      {
LABEL_29:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_29;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PDRAlgType::writeTo(uint64_t this, PB::Writer *a2)
{
  if ((*(_BYTE *)(this + 12) & 1) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::PDRAlgType::hash_value(CMMsl::PDRAlgType *this)
{
  if ((*((_BYTE *)this + 12) & 1) != 0)
    return *((int *)this + 2);
  else
    return 0;
}

void CMMsl::PDRDOTEstimatorState::~PDRDOTEstimatorState(CMMsl::PDRDOTEstimatorState *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::PDRDOTEstimatorState::PDRDOTEstimatorState(CMMsl::PDRDOTEstimatorState *this, const CMMsl::PDRDOTEstimatorState *a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)this = &off_25135F890;
  *((_DWORD *)this + 8) = 0;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 1) != 0)
  {
    result = *((double *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 32) = 1;
    *((double *)this + 1) = result;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *((_BYTE *)this + 32) = v3;
    *((_DWORD *)this + 6) = LODWORD(result);
    v2 = *((_BYTE *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0)
      return result;
LABEL_10:
    result = *((double *)a2 + 2);
    *((_BYTE *)this + 32) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
  LODWORD(result) = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *((_BYTE *)this + 32) = v3;
  *((_DWORD *)this + 7) = LODWORD(result);
  if ((*((_BYTE *)a2 + 32) & 2) != 0)
    goto LABEL_10;
  return result;
}

uint64_t CMMsl::PDRDOTEstimatorState::operator=(uint64_t a1, const CMMsl::PDRDOTEstimatorState *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  _BYTE v7[8];
  __int128 v8;
  uint64_t v9;
  int v10;

  if ((const CMMsl::PDRDOTEstimatorState *)a1 != a2)
  {
    CMMsl::PDRDOTEstimatorState::PDRDOTEstimatorState((CMMsl::PDRDOTEstimatorState *)v7, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v9;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PDRDOTEstimatorState *a2, CMMsl::PDRDOTEstimatorState *a3)
{
  int v3;
  uint64_t v4;
  double result;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::PDRDOTEstimatorState::PDRDOTEstimatorState(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135F890;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135F890;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::PDRDOTEstimatorState::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  void (**v8)(CMMsl::PDRDOTEstimatorState *__hidden);
  __int128 v9;
  uint64_t v10;
  int v11;

  if (a1 != a2)
  {
    v8 = &off_25135F890;
    v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    v11 = *(_DWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    v6 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    v9 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::PDRDOTEstimatorState::formatText(CMMsl::PDRDOTEstimatorState *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "dot", *((float *)this + 6));
    v5 = *((_BYTE *)this + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
      if ((*((_BYTE *)this + 32) & 2) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "dotUnc", *((float *)this + 7));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 2) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PDRDOTEstimatorState::readFrom(CMMsl::PDRDOTEstimatorState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_39;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 32) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_35;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_37;
      case 2u:
        *((_BYTE *)this + 32) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_35;
        *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_32;
      case 3u:
        *((_BYTE *)this + 32) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_35;
        *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_32:
        v2 = *((_QWORD *)a2 + 1) + 4;
        goto LABEL_38;
      case 4u:
        *((_BYTE *)this + 32) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_37:
          v2 = *((_QWORD *)a2 + 1) + 8;
LABEL_38:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_35:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_39:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::PDRDOTEstimatorState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 16));
  }
LABEL_8:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 16));
  return this;
}

uint64_t CMMsl::PDRDOTEstimatorState::hash_value(CMMsl::PDRDOTEstimatorState *this)
{
  double v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  double v6;

  if ((*((_BYTE *)this + 32) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 32) & 4) != 0)
      goto LABEL_3;
LABEL_15:
    v3 = 0;
    if ((*((_BYTE *)this + 32) & 8) != 0)
      goto LABEL_6;
    goto LABEL_16;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 32) & 4) == 0)
    goto LABEL_15;
LABEL_3:
  v2 = *((float *)this + 6);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 32) & 8) != 0)
  {
LABEL_6:
    v4 = *((float *)this + 7);
    v5 = LODWORD(v4);
    if (v4 == 0.0)
      v5 = 0;
    if ((*((_BYTE *)this + 32) & 2) != 0)
      goto LABEL_9;
LABEL_17:
    v6 = 0.0;
    return v3 ^ *(_QWORD *)&v1 ^ v5 ^ *(_QWORD *)&v6;
  }
LABEL_16:
  v5 = 0;
  if ((*((_BYTE *)this + 32) & 2) == 0)
    goto LABEL_17;
LABEL_9:
  v6 = *((double *)this + 2);
  if (v6 == 0.0)
    v6 = 0.0;
  return v3 ^ *(_QWORD *)&v1 ^ v5 ^ *(_QWORD *)&v6;
}

void CMMsl::PDRDOTEstimatorStateArmSwing::~PDRDOTEstimatorStateArmSwing(CMMsl::PDRDOTEstimatorStateArmSwing *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::PDRDOTEstimatorStateArmSwing::PDRDOTEstimatorStateArmSwing(CMMsl::PDRDOTEstimatorStateArmSwing *this, const CMMsl::PDRDOTEstimatorStateArmSwing *a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)this = &off_25135F8C8;
  *((_DWORD *)this + 8) = 0;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 1) != 0)
  {
    result = *((double *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 32) = 1;
    *((double *)this + 1) = result;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *((_BYTE *)this + 32) = v3;
    *((_DWORD *)this + 6) = LODWORD(result);
    v2 = *((_BYTE *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0)
      return result;
LABEL_10:
    result = *((double *)a2 + 2);
    *((_BYTE *)this + 32) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
  LODWORD(result) = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *((_BYTE *)this + 32) = v3;
  *((_DWORD *)this + 7) = LODWORD(result);
  if ((*((_BYTE *)a2 + 32) & 2) != 0)
    goto LABEL_10;
  return result;
}

uint64_t CMMsl::PDRDOTEstimatorStateArmSwing::operator=(uint64_t a1, const CMMsl::PDRDOTEstimatorStateArmSwing *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  _BYTE v7[8];
  __int128 v8;
  uint64_t v9;
  int v10;

  if ((const CMMsl::PDRDOTEstimatorStateArmSwing *)a1 != a2)
  {
    CMMsl::PDRDOTEstimatorStateArmSwing::PDRDOTEstimatorStateArmSwing((CMMsl::PDRDOTEstimatorStateArmSwing *)v7, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v9;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PDRDOTEstimatorStateArmSwing *a2, CMMsl::PDRDOTEstimatorStateArmSwing *a3)
{
  int v3;
  uint64_t v4;
  double result;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::PDRDOTEstimatorStateArmSwing::PDRDOTEstimatorStateArmSwing(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135F8C8;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135F8C8;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::PDRDOTEstimatorStateArmSwing::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  void (**v8)(CMMsl::PDRDOTEstimatorStateArmSwing *__hidden);
  __int128 v9;
  uint64_t v10;
  int v11;

  if (a1 != a2)
  {
    v8 = &off_25135F8C8;
    v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    v11 = *(_DWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    v6 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    v9 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::PDRDOTEstimatorStateArmSwing::formatText(CMMsl::PDRDOTEstimatorStateArmSwing *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "dot", *((float *)this + 6));
    v5 = *((_BYTE *)this + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
      if ((*((_BYTE *)this + 32) & 2) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "dotUnc", *((float *)this + 7));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 2) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PDRDOTEstimatorStateArmSwing::readFrom(CMMsl::PDRDOTEstimatorStateArmSwing *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_39;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 32) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_35;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_37;
      case 2u:
        *((_BYTE *)this + 32) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_35;
        *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_32;
      case 3u:
        *((_BYTE *)this + 32) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_35;
        *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_32:
        v2 = *((_QWORD *)a2 + 1) + 4;
        goto LABEL_38;
      case 4u:
        *((_BYTE *)this + 32) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_37:
          v2 = *((_QWORD *)a2 + 1) + 8;
LABEL_38:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_35:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_39:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::PDRDOTEstimatorStateArmSwing::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 16));
  }
LABEL_8:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 16));
  return this;
}

uint64_t CMMsl::PDRDOTEstimatorStateArmSwing::hash_value(CMMsl::PDRDOTEstimatorStateArmSwing *this)
{
  double v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  double v6;

  if ((*((_BYTE *)this + 32) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 32) & 4) != 0)
      goto LABEL_3;
LABEL_15:
    v3 = 0;
    if ((*((_BYTE *)this + 32) & 8) != 0)
      goto LABEL_6;
    goto LABEL_16;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 32) & 4) == 0)
    goto LABEL_15;
LABEL_3:
  v2 = *((float *)this + 6);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 32) & 8) != 0)
  {
LABEL_6:
    v4 = *((float *)this + 7);
    v5 = LODWORD(v4);
    if (v4 == 0.0)
      v5 = 0;
    if ((*((_BYTE *)this + 32) & 2) != 0)
      goto LABEL_9;
LABEL_17:
    v6 = 0.0;
    return v3 ^ *(_QWORD *)&v1 ^ v5 ^ *(_QWORD *)&v6;
  }
LABEL_16:
  v5 = 0;
  if ((*((_BYTE *)this + 32) & 2) == 0)
    goto LABEL_17;
LABEL_9:
  v6 = *((double *)this + 2);
  if (v6 == 0.0)
    v6 = 0.0;
  return v3 ^ *(_QWORD *)&v1 ^ v5 ^ *(_QWORD *)&v6;
}

void CMMsl::PDRDOTEstimatorStateBody::~PDRDOTEstimatorStateBody(CMMsl::PDRDOTEstimatorStateBody *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::PDRDOTEstimatorStateBody::PDRDOTEstimatorStateBody(CMMsl::PDRDOTEstimatorStateBody *this, const CMMsl::PDRDOTEstimatorStateBody *a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)this = &off_25135F900;
  *((_DWORD *)this + 8) = 0;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 1) != 0)
  {
    result = *((double *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 32) = 1;
    *((double *)this + 1) = result;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *((_BYTE *)this + 32) = v3;
    *((_DWORD *)this + 6) = LODWORD(result);
    v2 = *((_BYTE *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0)
      return result;
LABEL_10:
    result = *((double *)a2 + 2);
    *((_BYTE *)this + 32) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
  LODWORD(result) = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *((_BYTE *)this + 32) = v3;
  *((_DWORD *)this + 7) = LODWORD(result);
  if ((*((_BYTE *)a2 + 32) & 2) != 0)
    goto LABEL_10;
  return result;
}

uint64_t CMMsl::PDRDOTEstimatorStateBody::operator=(uint64_t a1, const CMMsl::PDRDOTEstimatorStateBody *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  _BYTE v7[8];
  __int128 v8;
  uint64_t v9;
  int v10;

  if ((const CMMsl::PDRDOTEstimatorStateBody *)a1 != a2)
  {
    CMMsl::PDRDOTEstimatorStateBody::PDRDOTEstimatorStateBody((CMMsl::PDRDOTEstimatorStateBody *)v7, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v9;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PDRDOTEstimatorStateBody *a2, CMMsl::PDRDOTEstimatorStateBody *a3)
{
  int v3;
  uint64_t v4;
  double result;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::PDRDOTEstimatorStateBody::PDRDOTEstimatorStateBody(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135F900;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135F900;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::PDRDOTEstimatorStateBody::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  void (**v8)(CMMsl::PDRDOTEstimatorStateBody *__hidden);
  __int128 v9;
  uint64_t v10;
  int v11;

  if (a1 != a2)
  {
    v8 = &off_25135F900;
    v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    v11 = *(_DWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    v6 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    v9 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::PDRDOTEstimatorStateBody::formatText(CMMsl::PDRDOTEstimatorStateBody *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "dot", *((float *)this + 6));
    v5 = *((_BYTE *)this + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
      if ((*((_BYTE *)this + 32) & 2) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "dotUnc", *((float *)this + 7));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 2) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PDRDOTEstimatorStateBody::readFrom(CMMsl::PDRDOTEstimatorStateBody *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_39;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 32) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_35;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_37;
      case 2u:
        *((_BYTE *)this + 32) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_35;
        *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_32;
      case 3u:
        *((_BYTE *)this + 32) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_35;
        *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_32:
        v2 = *((_QWORD *)a2 + 1) + 4;
        goto LABEL_38;
      case 4u:
        *((_BYTE *)this + 32) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_37:
          v2 = *((_QWORD *)a2 + 1) + 8;
LABEL_38:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_35:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_39:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::PDRDOTEstimatorStateBody::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 16));
  }
LABEL_8:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 16));
  return this;
}

uint64_t CMMsl::PDRDOTEstimatorStateBody::hash_value(CMMsl::PDRDOTEstimatorStateBody *this)
{
  double v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  double v6;

  if ((*((_BYTE *)this + 32) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 32) & 4) != 0)
      goto LABEL_3;
LABEL_15:
    v3 = 0;
    if ((*((_BYTE *)this + 32) & 8) != 0)
      goto LABEL_6;
    goto LABEL_16;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 32) & 4) == 0)
    goto LABEL_15;
LABEL_3:
  v2 = *((float *)this + 6);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 32) & 8) != 0)
  {
LABEL_6:
    v4 = *((float *)this + 7);
    v5 = LODWORD(v4);
    if (v4 == 0.0)
      v5 = 0;
    if ((*((_BYTE *)this + 32) & 2) != 0)
      goto LABEL_9;
LABEL_17:
    v6 = 0.0;
    return v3 ^ *(_QWORD *)&v1 ^ v5 ^ *(_QWORD *)&v6;
  }
LABEL_16:
  v5 = 0;
  if ((*((_BYTE *)this + 32) & 2) == 0)
    goto LABEL_17;
LABEL_9:
  v6 = *((double *)this + 2);
  if (v6 == 0.0)
    v6 = 0.0;
  return v3 ^ *(_QWORD *)&v1 ^ v5 ^ *(_QWORD *)&v6;
}

void CMMsl::PDRDOTEstimatorStateBodyDebug::~PDRDOTEstimatorStateBodyDebug(CMMsl::PDRDOTEstimatorStateBodyDebug *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_25135F938;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::PDRDOTEstimatorStateBodyDebug::~PDRDOTEstimatorStateBodyDebug(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::PDRDOTEstimatorStateBodyDebug *CMMsl::PDRDOTEstimatorStateBodyDebug::PDRDOTEstimatorStateBodyDebug(CMMsl::PDRDOTEstimatorStateBodyDebug *this, const CMMsl::PDRDOTEstimatorStateBodyDebug *a2)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  char v7;
  int v9;
  char v10;

  *(_QWORD *)this = &off_25135F938;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (_QWORD *)((char *)this + 8);
  *((_DWORD *)this + 18) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if ((*((_BYTE *)a2 + 72) & 1) != 0)
  {
    v5 = *((_QWORD *)a2 + 7);
    *((_BYTE *)this + 72) = 1;
    *((_QWORD *)this + 7) = v5;
  }
  if (this != a2)
  {
    sub_242911380(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
    sub_242911380((_QWORD *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
  }
  v6 = *((_BYTE *)a2 + 72);
  if ((v6 & 2) == 0)
  {
    if ((*((_BYTE *)a2 + 72) & 8) == 0)
      goto LABEL_7;
LABEL_11:
    v10 = *((_BYTE *)a2 + 69);
    *((_BYTE *)this + 72) |= 8u;
    *((_BYTE *)this + 69) = v10;
    if ((*((_BYTE *)a2 + 72) & 4) == 0)
      return this;
    goto LABEL_8;
  }
  v9 = *((_DWORD *)a2 + 16);
  *((_BYTE *)this + 72) |= 2u;
  *((_DWORD *)this + 16) = v9;
  v6 = *((_BYTE *)a2 + 72);
  if ((v6 & 8) != 0)
    goto LABEL_11;
LABEL_7:
  if ((v6 & 4) != 0)
  {
LABEL_8:
    v7 = *((_BYTE *)a2 + 68);
    *((_BYTE *)this + 72) |= 4u;
    *((_BYTE *)this + 68) = v7;
  }
  return this;
}

uint64_t CMMsl::PDRDOTEstimatorStateBodyDebug::operator=(uint64_t a1, const CMMsl::PDRDOTEstimatorStateBodyDebug *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  char v15;
  char v16;
  int v17;

  if ((const CMMsl::PDRDOTEstimatorStateBodyDebug *)a1 != a2)
  {
    CMMsl::PDRDOTEstimatorStateBodyDebug::PDRDOTEstimatorStateBodyDebug((CMMsl::PDRDOTEstimatorStateBodyDebug *)&v9, a2);
    v3 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v17;
    v17 = v3;
    v4 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v13;
    v13 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v5;
    v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v11 = v6;
    v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v12 = v7;
    LODWORD(v4) = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v14;
    v14 = v4;
    LOBYTE(v3) = *(_BYTE *)(a1 + 69);
    *(_BYTE *)(a1 + 69) = v16;
    v16 = v3;
    LOBYTE(v3) = *(_BYTE *)(a1 + 68);
    *(_BYTE *)(a1 + 68) = v15;
    v15 = v3;
    CMMsl::PDRDOTEstimatorStateBodyDebug::~PDRDOTEstimatorStateBodyDebug((CMMsl::PDRDOTEstimatorStateBodyDebug *)&v9);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::PDRDOTEstimatorStateBodyDebug *a2, CMMsl::PDRDOTEstimatorStateBodyDebug *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float result;

  v3 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v3;
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  v8 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v8;
  v9 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v9;
  v10 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v10;
  result = *((float *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((float *)a2 + 16) = result;
  LOBYTE(v10) = *((_BYTE *)this + 69);
  *((_BYTE *)this + 69) = *((_BYTE *)a2 + 69);
  *((_BYTE *)a2 + 69) = v10;
  LOBYTE(v10) = *((_BYTE *)this + 68);
  *((_BYTE *)this + 68) = *((_BYTE *)a2 + 68);
  *((_BYTE *)a2 + 68) = v10;
  return result;
}

uint64_t CMMsl::PDRDOTEstimatorStateBodyDebug::PDRDOTEstimatorStateBodyDebug(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = &off_25135F938;
  v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  sub_242911330(v4, (__n128 *)(a2 + 32));
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 69) = *(_BYTE *)(a2 + 69);
  *(_BYTE *)(a1 + 68) = *(_BYTE *)(a2 + 68);
  return a1;
}

uint64_t CMMsl::PDRDOTEstimatorStateBodyDebug::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  char v15;
  char v16;
  int v17;

  if (a1 != a2)
  {
    CMMsl::PDRDOTEstimatorStateBodyDebug::PDRDOTEstimatorStateBodyDebug((uint64_t)&v9, a2);
    v3 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v17;
    v17 = v3;
    v4 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v13;
    v13 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v5;
    v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v11 = v6;
    v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v12 = v7;
    LODWORD(v4) = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v14;
    v14 = v4;
    LOBYTE(v3) = *(_BYTE *)(a1 + 69);
    *(_BYTE *)(a1 + 69) = v16;
    v16 = v3;
    LOBYTE(v3) = *(_BYTE *)(a1 + 68);
    *(_BYTE *)(a1 + 68) = v15;
    v15 = v3;
    CMMsl::PDRDOTEstimatorStateBodyDebug::~PDRDOTEstimatorStateBodyDebug((CMMsl::PDRDOTEstimatorStateBodyDebug *)&v9);
  }
  return a1;
}

uint64_t CMMsl::PDRDOTEstimatorStateBodyDebug::formatText(CMMsl::PDRDOTEstimatorStateBodyDebug *this, PB::TextFormatter *a2, const char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;
  char v11;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (float *)*((_QWORD *)this + 1);
  v6 = (float *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "dotVector", v7);
  }
  if ((*((_BYTE *)this + 72) & 4) != 0)
    PB::TextFormatter::format(a2, "hasValidTNBFrame");
  v8 = (float *)*((_QWORD *)this + 4);
  v9 = (float *)*((_QWORD *)this + 5);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(a2, "headingVector", v10);
  }
  v11 = *((_BYTE *)this + 72);
  if ((v11 & 8) == 0)
  {
    if ((*((_BYTE *)this + 72) & 1) == 0)
      goto LABEL_9;
LABEL_13:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 7));
    if ((*((_BYTE *)this + 72) & 2) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_10;
  }
  PB::TextFormatter::format(a2, "isPedestrian");
  v11 = *((_BYTE *)this + 72);
  if ((v11 & 1) != 0)
    goto LABEL_13;
LABEL_9:
  if ((v11 & 2) != 0)
LABEL_10:
    PB::TextFormatter::format(a2, "uncertainty", *((float *)this + 16));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::PDRDOTEstimatorStateBodyDebug::readFrom(CMMsl::PDRDOTEstimatorStateBodyDebug *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  _DWORD *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  _DWORD *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  int v53;
  BOOL v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  BOOL v58;
  unint64_t v59;
  char *v60;
  _DWORD *v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  _DWORD *v76;
  int v77;
  _DWORD *v78;
  int v79;
  unint64_t v80;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_21:
      v19 = v11 & 7;
      if (v19 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 72) |= 1u;
          v20 = *((_QWORD *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_123;
          *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v20);
          v21 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_126;
        case 2u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v22 = *((_QWORD *)a2 + 1);
            v23 = *((_QWORD *)a2 + 2);
            while (v22 < v23 && !*((_BYTE *)a2 + 24))
            {
              v25 = (char *)*((_QWORD *)this + 2);
              v24 = *((_QWORD *)this + 3);
              if ((unint64_t)v25 >= v24)
              {
                v27 = (char *)*((_QWORD *)this + 1);
                v28 = (v25 - v27) >> 2;
                v29 = v28 + 1;
                if ((unint64_t)(v28 + 1) >> 62)
                  goto LABEL_134;
                v30 = v24 - (_QWORD)v27;
                if (v30 >> 1 > v29)
                  v29 = v30 >> 1;
                if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
                  v31 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v31 = v29;
                if (v31)
                {
                  v31 = (unint64_t)sub_2429114B8(v31);
                  v27 = (char *)*((_QWORD *)this + 1);
                  v25 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v32 = 0;
                }
                v33 = (_DWORD *)(v31 + 4 * v28);
                *v33 = 0;
                v26 = v33 + 1;
                while (v25 != v27)
                {
                  v34 = *((_DWORD *)v25 - 1);
                  v25 -= 4;
                  *--v33 = v34;
                }
                *((_QWORD *)this + 1) = v33;
                *((_QWORD *)this + 2) = v26;
                *((_QWORD *)this + 3) = v31 + 4 * v32;
                if (v27)
                  operator delete(v27);
              }
              else
              {
                *(_DWORD *)v25 = 0;
                v26 = v25 + 4;
              }
              *((_QWORD *)this + 2) = v26;
              v35 = *((_QWORD *)a2 + 1);
              if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_89;
              *(v26 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v35);
              v23 = *((_QWORD *)a2 + 2);
              v22 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v22;
            }
            goto LABEL_90;
          }
          v60 = (char *)*((_QWORD *)this + 2);
          v59 = *((_QWORD *)this + 3);
          if ((unint64_t)v60 >= v59)
          {
            v64 = (char *)*((_QWORD *)this + 1);
            v65 = (v60 - v64) >> 2;
            v66 = v65 + 1;
            if ((unint64_t)(v65 + 1) >> 62)
              goto LABEL_134;
            v67 = v59 - (_QWORD)v64;
            if (v67 >> 1 > v66)
              v66 = v67 >> 1;
            if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL)
              v68 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v68 = v66;
            if (v68)
            {
              v68 = (unint64_t)sub_2429114B8(v68);
              v64 = (char *)*((_QWORD *)this + 1);
              v60 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v69 = 0;
            }
            v76 = (_DWORD *)(v68 + 4 * v65);
            *v76 = 0;
            v61 = v76 + 1;
            while (v60 != v64)
            {
              v77 = *((_DWORD *)v60 - 1);
              v60 -= 4;
              *--v76 = v77;
            }
            *((_QWORD *)this + 1) = v76;
            *((_QWORD *)this + 2) = v61;
            *((_QWORD *)this + 3) = v68 + 4 * v69;
            if (v64)
              operator delete(v64);
          }
          else
          {
            *(_DWORD *)v60 = 0;
            v61 = v60 + 4;
          }
          *((_QWORD *)this + 2) = v61;
          goto LABEL_121;
        case 3u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v36 = *((_QWORD *)a2 + 1);
            v37 = *((_QWORD *)a2 + 2);
            while (v36 < v37 && !*((_BYTE *)a2 + 24))
            {
              v39 = (char *)*((_QWORD *)this + 5);
              v38 = *((_QWORD *)this + 6);
              if ((unint64_t)v39 >= v38)
              {
                v41 = (char *)*((_QWORD *)this + 4);
                v42 = (v39 - v41) >> 2;
                v43 = v42 + 1;
                if ((unint64_t)(v42 + 1) >> 62)
                  goto LABEL_134;
                v44 = v38 - (_QWORD)v41;
                if (v44 >> 1 > v43)
                  v43 = v44 >> 1;
                if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL)
                  v45 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v45 = v43;
                if (v45)
                {
                  v45 = (unint64_t)sub_2429114B8(v45);
                  v41 = (char *)*((_QWORD *)this + 4);
                  v39 = (char *)*((_QWORD *)this + 5);
                }
                else
                {
                  v46 = 0;
                }
                v47 = (_DWORD *)(v45 + 4 * v42);
                *v47 = 0;
                v40 = v47 + 1;
                while (v39 != v41)
                {
                  v48 = *((_DWORD *)v39 - 1);
                  v39 -= 4;
                  *--v47 = v48;
                }
                *((_QWORD *)this + 4) = v47;
                *((_QWORD *)this + 5) = v40;
                *((_QWORD *)this + 6) = v45 + 4 * v46;
                if (v41)
                  operator delete(v41);
              }
              else
              {
                *(_DWORD *)v39 = 0;
                v40 = v39 + 4;
              }
              *((_QWORD *)this + 5) = v40;
              v49 = *((_QWORD *)a2 + 1);
              if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((_QWORD *)a2 + 2))
              {
LABEL_89:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v40 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v49);
              v37 = *((_QWORD *)a2 + 2);
              v36 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v36;
            }
LABEL_90:
            PB::Reader::recallMark();
          }
          else
          {
            v63 = (char *)*((_QWORD *)this + 5);
            v62 = *((_QWORD *)this + 6);
            if ((unint64_t)v63 >= v62)
            {
              v70 = (char *)*((_QWORD *)this + 4);
              v71 = (v63 - v70) >> 2;
              v72 = v71 + 1;
              if ((unint64_t)(v71 + 1) >> 62)
LABEL_134:
                sub_242729A44();
              v73 = v62 - (_QWORD)v70;
              if (v73 >> 1 > v72)
                v72 = v73 >> 1;
              if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL)
                v74 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v74 = v72;
              if (v74)
              {
                v74 = (unint64_t)sub_2429114B8(v74);
                v70 = (char *)*((_QWORD *)this + 4);
                v63 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v75 = 0;
              }
              v78 = (_DWORD *)(v74 + 4 * v71);
              *v78 = 0;
              v61 = v78 + 1;
              while (v63 != v70)
              {
                v79 = *((_DWORD *)v63 - 1);
                v63 -= 4;
                *--v78 = v79;
              }
              *((_QWORD *)this + 4) = v78;
              *((_QWORD *)this + 5) = v61;
              *((_QWORD *)this + 6) = v74 + 4 * v75;
              if (v70)
                operator delete(v70);
            }
            else
            {
              *(_DWORD *)v63 = 0;
              v61 = v63 + 4;
            }
            *((_QWORD *)this + 5) = v61;
LABEL_121:
            v80 = *((_QWORD *)a2 + 1);
            if (v80 <= 0xFFFFFFFFFFFFFFFBLL && v80 + 4 <= *((_QWORD *)a2 + 2))
            {
              *(v61 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v80);
LABEL_125:
              v21 = *((_QWORD *)a2 + 1) + 4;
LABEL_126:
              *((_QWORD *)a2 + 1) = v21;
            }
            else
            {
LABEL_123:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
          break;
        case 4u:
          *((_BYTE *)this + 72) |= 2u;
          v50 = *((_QWORD *)a2 + 1);
          if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_123;
          *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v50);
          goto LABEL_125;
        case 5u:
          *((_BYTE *)this + 72) |= 8u;
          v51 = *((_QWORD *)a2 + 1);
          if (v51 >= *((_QWORD *)a2 + 2))
          {
            v54 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v52 = v51 + 1;
            v53 = *(unsigned __int8 *)(*(_QWORD *)a2 + v51);
            *((_QWORD *)a2 + 1) = v52;
            v54 = v53 != 0;
          }
          *((_BYTE *)this + 69) = v54;
          goto LABEL_127;
        case 6u:
          *((_BYTE *)this + 72) |= 4u;
          v55 = *((_QWORD *)a2 + 1);
          if (v55 >= *((_QWORD *)a2 + 2))
          {
            v58 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v56 = v55 + 1;
            v57 = *(unsigned __int8 *)(*(_QWORD *)a2 + v55);
            *((_QWORD *)a2 + 1) = v56;
            v58 = v57 != 0;
          }
          *((_BYTE *)this + 68) = v58;
          goto LABEL_127;
        default:
          goto LABEL_19;
      }
      goto LABEL_127;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_21;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    if ((PB::Reader::skip(a2) & 1) == 0)
      return 0;
LABEL_127:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
}

uint64_t CMMsl::PDRDOTEstimatorStateBodyDebug::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;
  char v10;

  v3 = this;
  if ((*(_BYTE *)(this + 72) & 1) != 0)
    this = PB::Writer::write(a2, *(double *)(this + 56));
  v4 = *(float **)(v3 + 8);
  v5 = *(float **)(v3 + 16);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6);
  }
  v7 = *(float **)(v3 + 32);
  v8 = *(float **)(v3 + 40);
  while (v7 != v8)
  {
    v9 = *v7++;
    this = PB::Writer::write(a2, v9);
  }
  v10 = *(_BYTE *)(v3 + 72);
  if ((v10 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 64));
    v10 = *(_BYTE *)(v3 + 72);
    if ((v10 & 8) == 0)
    {
LABEL_11:
      if ((v10 & 4) == 0)
        return this;
      return PB::Writer::write(a2);
    }
  }
  else if ((*(_BYTE *)(v3 + 72) & 8) == 0)
  {
    goto LABEL_11;
  }
  this = PB::Writer::write(a2);
  if ((*(_BYTE *)(v3 + 72) & 4) != 0)
    return PB::Writer::write(a2);
  return this;
}

uint64_t CMMsl::PDRDOTEstimatorStateBodyDebug::hash_value(CMMsl::PDRDOTEstimatorStateBodyDebug *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;

  if ((*((_BYTE *)this + 72) & 1) != 0)
  {
    if (*((double *)this + 7) == 0.0)
      v2 = 0;
    else
      v2 = *((_QWORD *)this + 7);
  }
  else
  {
    v2 = 0;
  }
  v3 = PBHashBytes();
  v4 = PBHashBytes();
  if ((*((_BYTE *)this + 72) & 2) == 0)
  {
    v5 = 0;
    if ((*((_BYTE *)this + 72) & 8) != 0)
      goto LABEL_8;
LABEL_13:
    v6 = 0;
    if ((*((_BYTE *)this + 72) & 4) != 0)
      goto LABEL_9;
LABEL_14:
    v7 = 0;
    return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7;
  }
  v8 = *((float *)this + 16);
  v5 = LODWORD(v8);
  if (v8 == 0.0)
    v5 = 0;
  if ((*((_BYTE *)this + 72) & 8) == 0)
    goto LABEL_13;
LABEL_8:
  v6 = *((unsigned __int8 *)this + 69);
  if ((*((_BYTE *)this + 72) & 4) == 0)
    goto LABEL_14;
LABEL_9:
  v7 = *((unsigned __int8 *)this + 68);
  return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7;
}

void CMMsl::PDRDOTEstimatorStateDebug::~PDRDOTEstimatorStateDebug(CMMsl::PDRDOTEstimatorStateDebug *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::PDRDOTEstimatorStateDebug::PDRDOTEstimatorStateDebug(CMMsl::PDRDOTEstimatorStateDebug *this, const CMMsl::PDRDOTEstimatorStateDebug *a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)this = &off_25135F970;
  *((_DWORD *)this + 8) = 0;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 1) != 0)
  {
    result = *((double *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 32) = 1;
    *((double *)this + 1) = result;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *((_BYTE *)this + 32) = v3;
    *((_DWORD *)this + 6) = LODWORD(result);
    v2 = *((_BYTE *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0)
      return result;
LABEL_10:
    result = *((double *)a2 + 2);
    *((_BYTE *)this + 32) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
  LODWORD(result) = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *((_BYTE *)this + 32) = v3;
  *((_DWORD *)this + 7) = LODWORD(result);
  if ((*((_BYTE *)a2 + 32) & 2) != 0)
    goto LABEL_10;
  return result;
}

uint64_t CMMsl::PDRDOTEstimatorStateDebug::operator=(uint64_t a1, const CMMsl::PDRDOTEstimatorStateDebug *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  _BYTE v7[8];
  __int128 v8;
  uint64_t v9;
  int v10;

  if ((const CMMsl::PDRDOTEstimatorStateDebug *)a1 != a2)
  {
    CMMsl::PDRDOTEstimatorStateDebug::PDRDOTEstimatorStateDebug((CMMsl::PDRDOTEstimatorStateDebug *)v7, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v9;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PDRDOTEstimatorStateDebug *a2, CMMsl::PDRDOTEstimatorStateDebug *a3)
{
  int v3;
  uint64_t v4;
  double result;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::PDRDOTEstimatorStateDebug::PDRDOTEstimatorStateDebug(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135F970;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135F970;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::PDRDOTEstimatorStateDebug::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  void (**v8)(CMMsl::PDRDOTEstimatorStateDebug *__hidden);
  __int128 v9;
  uint64_t v10;
  int v11;

  if (a1 != a2)
  {
    v8 = &off_25135F970;
    v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    v11 = *(_DWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    v6 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    v9 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::PDRDOTEstimatorStateDebug::formatText(CMMsl::PDRDOTEstimatorStateDebug *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "dotMeasurement", *((float *)this + 6));
    v5 = *((_BYTE *)this + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
      if ((*((_BYTE *)this + 32) & 2) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "dotMeasurementUnc", *((float *)this + 7));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 2) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PDRDOTEstimatorStateDebug::readFrom(CMMsl::PDRDOTEstimatorStateDebug *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_39;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 32) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_35;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_37;
      case 2u:
        *((_BYTE *)this + 32) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_35;
        *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_32;
      case 3u:
        *((_BYTE *)this + 32) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_35;
        *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_32:
        v2 = *((_QWORD *)a2 + 1) + 4;
        goto LABEL_38;
      case 4u:
        *((_BYTE *)this + 32) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_37:
          v2 = *((_QWORD *)a2 + 1) + 8;
LABEL_38:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_35:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_39:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::PDRDOTEstimatorStateDebug::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 16));
  }
LABEL_8:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 16));
  return this;
}

uint64_t CMMsl::PDRDOTEstimatorStateDebug::hash_value(CMMsl::PDRDOTEstimatorStateDebug *this)
{
  double v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  double v6;

  if ((*((_BYTE *)this + 32) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 32) & 4) != 0)
      goto LABEL_3;
LABEL_15:
    v3 = 0;
    if ((*((_BYTE *)this + 32) & 8) != 0)
      goto LABEL_6;
    goto LABEL_16;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 32) & 4) == 0)
    goto LABEL_15;
LABEL_3:
  v2 = *((float *)this + 6);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 32) & 8) != 0)
  {
LABEL_6:
    v4 = *((float *)this + 7);
    v5 = LODWORD(v4);
    if (v4 == 0.0)
      v5 = 0;
    if ((*((_BYTE *)this + 32) & 2) != 0)
      goto LABEL_9;
LABEL_17:
    v6 = 0.0;
    return v3 ^ *(_QWORD *)&v1 ^ v5 ^ *(_QWORD *)&v6;
  }
LABEL_16:
  v5 = 0;
  if ((*((_BYTE *)this + 32) & 2) == 0)
    goto LABEL_17;
LABEL_9:
  v6 = *((double *)this + 2);
  if (v6 == 0.0)
    v6 = 0.0;
  return v3 ^ *(_QWORD *)&v1 ^ v5 ^ *(_QWORD *)&v6;
}

void CMMsl::PDRDOTEstimatorStateHeading::~PDRDOTEstimatorStateHeading(CMMsl::PDRDOTEstimatorStateHeading *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::PDRDOTEstimatorStateHeading::PDRDOTEstimatorStateHeading(CMMsl::PDRDOTEstimatorStateHeading *this, const CMMsl::PDRDOTEstimatorStateHeading *a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)this = &off_25135F9A8;
  *((_DWORD *)this + 8) = 0;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 1) != 0)
  {
    result = *((double *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 32) = 1;
    *((double *)this + 1) = result;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *((_BYTE *)this + 32) = v3;
    *((_DWORD *)this + 6) = LODWORD(result);
    v2 = *((_BYTE *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0)
      return result;
LABEL_10:
    result = *((double *)a2 + 2);
    *((_BYTE *)this + 32) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
  LODWORD(result) = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *((_BYTE *)this + 32) = v3;
  *((_DWORD *)this + 7) = LODWORD(result);
  if ((*((_BYTE *)a2 + 32) & 2) != 0)
    goto LABEL_10;
  return result;
}

uint64_t CMMsl::PDRDOTEstimatorStateHeading::operator=(uint64_t a1, const CMMsl::PDRDOTEstimatorStateHeading *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  _BYTE v7[8];
  __int128 v8;
  uint64_t v9;
  int v10;

  if ((const CMMsl::PDRDOTEstimatorStateHeading *)a1 != a2)
  {
    CMMsl::PDRDOTEstimatorStateHeading::PDRDOTEstimatorStateHeading((CMMsl::PDRDOTEstimatorStateHeading *)v7, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v9;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PDRDOTEstimatorStateHeading *a2, CMMsl::PDRDOTEstimatorStateHeading *a3)
{
  int v3;
  uint64_t v4;
  double result;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::PDRDOTEstimatorStateHeading::PDRDOTEstimatorStateHeading(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135F9A8;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135F9A8;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::PDRDOTEstimatorStateHeading::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  void (**v8)(CMMsl::PDRDOTEstimatorStateHeading *__hidden);
  __int128 v9;
  uint64_t v10;
  int v11;

  if (a1 != a2)
  {
    v8 = &off_25135F9A8;
    v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    v11 = *(_DWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    v6 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    v9 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::PDRDOTEstimatorStateHeading::formatText(CMMsl::PDRDOTEstimatorStateHeading *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "dot", *((float *)this + 6));
    v5 = *((_BYTE *)this + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
      if ((*((_BYTE *)this + 32) & 2) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "dotUnc", *((float *)this + 7));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 2) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PDRDOTEstimatorStateHeading::readFrom(CMMsl::PDRDOTEstimatorStateHeading *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_39;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 32) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_35;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_37;
      case 2u:
        *((_BYTE *)this + 32) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_35;
        *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_32;
      case 3u:
        *((_BYTE *)this + 32) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_35;
        *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_32:
        v2 = *((_QWORD *)a2 + 1) + 4;
        goto LABEL_38;
      case 4u:
        *((_BYTE *)this + 32) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_37:
          v2 = *((_QWORD *)a2 + 1) + 8;
LABEL_38:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_35:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_39:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::PDRDOTEstimatorStateHeading::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 16));
  }
LABEL_8:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 16));
  return this;
}

uint64_t CMMsl::PDRDOTEstimatorStateHeading::hash_value(CMMsl::PDRDOTEstimatorStateHeading *this)
{
  double v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  double v6;

  if ((*((_BYTE *)this + 32) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 32) & 4) != 0)
      goto LABEL_3;
LABEL_15:
    v3 = 0;
    if ((*((_BYTE *)this + 32) & 8) != 0)
      goto LABEL_6;
    goto LABEL_16;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 32) & 4) == 0)
    goto LABEL_15;
LABEL_3:
  v2 = *((float *)this + 6);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 32) & 8) != 0)
  {
LABEL_6:
    v4 = *((float *)this + 7);
    v5 = LODWORD(v4);
    if (v4 == 0.0)
      v5 = 0;
    if ((*((_BYTE *)this + 32) & 2) != 0)
      goto LABEL_9;
LABEL_17:
    v6 = 0.0;
    return v3 ^ *(_QWORD *)&v1 ^ v5 ^ *(_QWORD *)&v6;
  }
LABEL_16:
  v5 = 0;
  if ((*((_BYTE *)this + 32) & 2) == 0)
    goto LABEL_17;
LABEL_9:
  v6 = *((double *)this + 2);
  if (v6 == 0.0)
    v6 = 0.0;
  return v3 ^ *(_QWORD *)&v1 ^ v5 ^ *(_QWORD *)&v6;
}

void CMMsl::PDRDOTEstimatorUncertaintyModelOnBody::~PDRDOTEstimatorUncertaintyModelOnBody(CMMsl::PDRDOTEstimatorUncertaintyModelOnBody *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::PDRDOTEstimatorUncertaintyModelOnBody::PDRDOTEstimatorUncertaintyModelOnBody(CMMsl::PDRDOTEstimatorUncertaintyModelOnBody *this, const CMMsl::PDRDOTEstimatorUncertaintyModelOnBody *a2)
{
  char v2;
  char v3;
  uint64_t v4;

  *(_QWORD *)this = &off_25135F9E0;
  *((_DWORD *)this + 10) = 0;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 40) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_BYTE *)a2 + 40);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 40) & 4) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *((_BYTE *)this + 40) = v3;
    *((_DWORD *)this + 5) = v4;
    v2 = *((_BYTE *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((_BYTE *)this + 40) = v3;
    *((_DWORD *)this + 4) = v4;
    v2 = *((_BYTE *)a2 + 40);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 8);
  v3 |= 0x20u;
  *((_BYTE *)this + 40) = v3;
  *((_DWORD *)this + 8) = v4;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_15;
  }
LABEL_14:
  LODWORD(v4) = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *((_BYTE *)this + 40) = v3;
  *((_DWORD *)this + 9) = v4;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0)
      return *(float *)&v4;
    goto LABEL_16;
  }
LABEL_15:
  LODWORD(v4) = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *((_BYTE *)this + 40) = v3;
  *((_DWORD *)this + 7) = v4;
  if ((*((_BYTE *)a2 + 40) & 8) == 0)
    return *(float *)&v4;
LABEL_16:
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  *((_BYTE *)this + 40) = v3 | 8;
  *((_DWORD *)this + 6) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::PDRDOTEstimatorUncertaintyModelOnBody::operator=(uint64_t a1, const CMMsl::PDRDOTEstimatorUncertaintyModelOnBody *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;

  if ((const CMMsl::PDRDOTEstimatorUncertaintyModelOnBody *)a1 != a2)
  {
    CMMsl::PDRDOTEstimatorUncertaintyModelOnBody::PDRDOTEstimatorUncertaintyModelOnBody((CMMsl::PDRDOTEstimatorUncertaintyModelOnBody *)&v8, a2);
    v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v12;
    v12 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    v9 = v4;
    v5 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v11;
    v11 = v5;
    v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v10;
    v10 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::PDRDOTEstimatorUncertaintyModelOnBody *a2, CMMsl::PDRDOTEstimatorUncertaintyModelOnBody *a3)
{
  int v3;
  uint64_t v4;
  float result;

  v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  return result;
}

float CMMsl::PDRDOTEstimatorUncertaintyModelOnBody::PDRDOTEstimatorUncertaintyModelOnBody(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135F9E0;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_25135F9E0;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

uint64_t CMMsl::PDRDOTEstimatorUncertaintyModelOnBody::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _QWORD v10[2];
  __int128 v11;
  uint64_t v12;
  int v13;

  if (a1 != a2)
  {
    v10[0] = &off_25135F9E0;
    v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v13 = *(_DWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v10[1] = v5;
    v12 = *(_QWORD *)(a1 + 32);
    v6 = *(_OWORD *)(a1 + 16);
    v7 = *(_OWORD *)(a2 + 16);
    v8 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 40) = v3;
    *(_QWORD *)(a1 + 32) = v8;
    *(_OWORD *)(a1 + 16) = v7;
    v11 = v6;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::PDRDOTEstimatorUncertaintyModelOnBody::formatText(CMMsl::PDRDOTEstimatorUncertaintyModelOnBody *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "dotDeltaBufferMaxAbs", *((float *)this + 4));
    v5 = *((_BYTE *)this + 40);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*((_BYTE *)this + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "dotDeltaBufferVar", *((float *)this + 5));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "dotErrorEstimate", *((float *)this + 6));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "dotRelativeChangeOverBuffer", *((float *)this + 7));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
LABEL_15:
    PB::TextFormatter::format(a2, "headingRelativeChangeOverBuffer", *((float *)this + 9));
    if ((*((_BYTE *)this + 40) & 1) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_8;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "headingDeltaBufferVar", *((float *)this + 8));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 0x40) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v5 & 1) != 0)
LABEL_8:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PDRDOTEstimatorUncertaintyModelOnBody::readFrom(CMMsl::PDRDOTEstimatorUncertaintyModelOnBody *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_47;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 40) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_43;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        v2 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_46;
      case 2u:
        *((_BYTE *)this + 40) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_43;
        *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_45;
      case 3u:
        *((_BYTE *)this + 40) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_43;
        *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_45;
      case 4u:
        *((_BYTE *)this + 40) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_43;
        *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_45;
      case 5u:
        *((_BYTE *)this + 40) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_43;
        *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_45;
      case 6u:
        *((_BYTE *)this + 40) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_43;
        *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_45;
      case 7u:
        *((_BYTE *)this + 40) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_45:
          v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_46:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_43:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_47:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::PDRDOTEstimatorUncertaintyModelOnBody::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 40);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(this + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 24));
  }
LABEL_14:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  if ((*(_BYTE *)(v3 + 40) & 8) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 24));
  return this;
}

uint64_t CMMsl::PDRDOTEstimatorUncertaintyModelOnBody::hash_value(CMMsl::PDRDOTEstimatorUncertaintyModelOnBody *this)
{
  double v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v13;

  if ((*((_BYTE *)this + 40) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 40) & 4) != 0)
      goto LABEL_3;
LABEL_24:
    v3 = 0;
    if ((*((_BYTE *)this + 40) & 2) != 0)
      goto LABEL_6;
LABEL_25:
    v5 = 0;
    if ((*((_BYTE *)this + 40) & 0x20) != 0)
      goto LABEL_9;
LABEL_26:
    v7 = 0;
    if ((*((_BYTE *)this + 40) & 0x40) != 0)
      goto LABEL_12;
LABEL_27:
    v9 = 0;
    if ((*((_BYTE *)this + 40) & 0x10) != 0)
      goto LABEL_15;
    goto LABEL_28;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 40) & 4) == 0)
    goto LABEL_24;
LABEL_3:
  v2 = *((float *)this + 5);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 40) & 2) == 0)
    goto LABEL_25;
LABEL_6:
  v4 = *((float *)this + 4);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((*((_BYTE *)this + 40) & 0x20) == 0)
    goto LABEL_26;
LABEL_9:
  v6 = *((float *)this + 8);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  if ((*((_BYTE *)this + 40) & 0x40) == 0)
    goto LABEL_27;
LABEL_12:
  v8 = *((float *)this + 9);
  v9 = LODWORD(v8);
  if (v8 == 0.0)
    v9 = 0;
  if ((*((_BYTE *)this + 40) & 0x10) != 0)
  {
LABEL_15:
    v10 = *((float *)this + 7);
    v11 = LODWORD(v10);
    if (v10 == 0.0)
      v11 = 0;
    if ((*((_BYTE *)this + 40) & 8) != 0)
      goto LABEL_18;
LABEL_29:
    v13 = 0;
    return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13;
  }
LABEL_28:
  v11 = 0;
  if ((*((_BYTE *)this + 40) & 8) == 0)
    goto LABEL_29;
LABEL_18:
  v12 = *((float *)this + 6);
  v13 = LODWORD(v12);
  if (v12 == 0.0)
    v13 = 0;
  return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13;
}

void CMMsl::PDRDOTMeasurementSelectorState::~PDRDOTMeasurementSelectorState(CMMsl::PDRDOTMeasurementSelectorState *this)
{
  void *v2;

  *(_QWORD *)this = &off_25135FA18;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::PDRDOTMeasurementSelectorState::~PDRDOTMeasurementSelectorState(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::PDRDOTMeasurementSelectorState *CMMsl::PDRDOTMeasurementSelectorState::PDRDOTMeasurementSelectorState(CMMsl::PDRDOTMeasurementSelectorState *this, const CMMsl::PDRDOTMeasurementSelectorState *a2)
{
  _QWORD *v4;
  char v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  *(_QWORD *)this = &off_25135FA18;
  *((_QWORD *)this + 1) = 0;
  v4 = (_QWORD *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 13) = 0;
  if ((*((_BYTE *)a2 + 52) & 1) != 0)
  {
    v6 = *((_QWORD *)a2 + 4);
    *((_BYTE *)this + 52) = 1;
    *((_QWORD *)this + 4) = v6;
    v5 = 5;
    if ((*((_BYTE *)a2 + 52) & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = 4;
  if ((*((_BYTE *)a2 + 52) & 4) != 0)
  {
LABEL_5:
    v7 = *((_DWORD *)a2 + 12);
    *((_BYTE *)this + 52) = v5;
    *((_DWORD *)this + 12) = v7;
  }
LABEL_6:
  if (this != a2)
    sub_242911380(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  if ((*((_BYTE *)a2 + 52) & 2) != 0)
  {
    v8 = *((_QWORD *)a2 + 5);
    *((_BYTE *)this + 52) |= 2u;
    *((_QWORD *)this + 5) = v8;
  }
  return this;
}

uint64_t CMMsl::PDRDOTMeasurementSelectorState::operator=(uint64_t a1, const CMMsl::PDRDOTMeasurementSelectorState *a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _BYTE v8[8];
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  if ((const CMMsl::PDRDOTMeasurementSelectorState *)a1 != a2)
  {
    CMMsl::PDRDOTMeasurementSelectorState::PDRDOTMeasurementSelectorState((CMMsl::PDRDOTMeasurementSelectorState *)v8, a2);
    v3 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v12;
    v12 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v9 = v4;
    v5 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v10;
    v10 = v5;
    v6 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v11;
    v11 = v6;
    CMMsl::PDRDOTMeasurementSelectorState::~PDRDOTMeasurementSelectorState((CMMsl::PDRDOTMeasurementSelectorState *)v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PDRDOTMeasurementSelectorState *a2, CMMsl::PDRDOTMeasurementSelectorState *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;

  v3 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v3;
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  v5 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v5;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v7;
  v8 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v8;
  result = *((double *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((double *)a2 + 5) = result;
  return result;
}

uint64_t CMMsl::PDRDOTMeasurementSelectorState::PDRDOTMeasurementSelectorState(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_25135FA18;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

{
  *(_QWORD *)a1 = &off_25135FA18;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t CMMsl::PDRDOTMeasurementSelectorState::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  void (**v11)(CMMsl::PDRDOTMeasurementSelectorState *__hidden);
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  if (a1 != a2)
  {
    v11 = &off_25135FA18;
    v3 = *(_QWORD *)(a2 + 24);
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v5 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(a2 + 52) = 0;
    v15 = *(_QWORD *)(a1 + 48);
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v4;
    v12 = v6;
    v7 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v3;
    v13 = v7;
    v8 = *(_OWORD *)(a1 + 32);
    v9 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = v5;
    *(_OWORD *)(a1 + 32) = v9;
    v14 = v8;
    CMMsl::PDRDOTMeasurementSelectorState::~PDRDOTMeasurementSelectorState((CMMsl::PDRDOTMeasurementSelectorState *)&v11);
  }
  return a1;
}

uint64_t CMMsl::PDRDOTMeasurementSelectorState::formatText(CMMsl::PDRDOTMeasurementSelectorState *this, PB::TextFormatter *a2, const char *a3)
{
  float *v5;
  float *v6;
  float v7;
  char v8;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 52) & 4) != 0)
    PB::TextFormatter::format(a2, "placementFiltered");
  v5 = (float *)*((_QWORD *)this + 1);
  v6 = (float *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "placementProbabilityFiltered", v7);
  }
  v8 = *((_BYTE *)this + 52);
  if ((v8 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 4));
    v8 = *((_BYTE *)this + 52);
  }
  if ((v8 & 2) != 0)
    PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 5));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::PDRDOTMeasurementSelectorState::readFrom(CMMsl::PDRDOTMeasurementSelectorState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  _DWORD *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  unint64_t v46;
  char v47;
  unint64_t v48;
  char *v49;
  _DWORD *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  int v58;
  unint64_t v59;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      break;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 52) |= 1u;
        v19 = *((_QWORD *)a2 + 1);
        if (v19 > 0xFFFFFFFFFFFFFFF7 || v19 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_93;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v19);
        goto LABEL_60;
      case 2u:
        *((_BYTE *)this + 52) |= 4u;
        v20 = *((_QWORD *)a2 + 1);
        v21 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          do
          {
            v26 = v20 + 1;
            *((_QWORD *)a2 + 1) = v20 + 1;
            v27 = *(_BYTE *)(v22 + v20);
            v25 |= (unint64_t)(v27 & 0x7F) << v23;
            if ((v27 & 0x80) == 0)
              goto LABEL_82;
            v23 += 7;
            v20 = v26;
            v14 = v24++ > 8;
          }
          while (!v14);
LABEL_68:
          LODWORD(v25) = 0;
          goto LABEL_82;
        }
        v44 = 0;
        v45 = 0;
        v25 = 0;
        if (v21 <= v20)
          v21 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v21 == v20)
          {
            LODWORD(v25) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v46 = v20 + 1;
            v47 = *(_BYTE *)(v22 + v20);
            *((_QWORD *)a2 + 1) = v46;
            v25 |= (unint64_t)(v47 & 0x7F) << v44;
            if (v47 < 0)
            {
              v44 += 7;
              v20 = v46;
              v14 = v45++ > 8;
              if (v14)
                goto LABEL_68;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v25) = 0;
          }
          break;
        }
LABEL_82:
        *((_DWORD *)this + 12) = v25;
        break;
      case 3u:
        if ((v11 & 7) == 2)
        {
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v28 = *((_QWORD *)a2 + 1);
          v29 = *((_QWORD *)a2 + 2);
          while (v28 < v29 && !*((_BYTE *)a2 + 24))
          {
            v31 = (char *)*((_QWORD *)this + 2);
            v30 = *((_QWORD *)this + 3);
            if ((unint64_t)v31 >= v30)
            {
              v33 = (char *)*((_QWORD *)this + 1);
              v34 = (v31 - v33) >> 2;
              v35 = v34 + 1;
              if ((unint64_t)(v34 + 1) >> 62)
                goto LABEL_104;
              v36 = v30 - (_QWORD)v33;
              if (v36 >> 1 > v35)
                v35 = v36 >> 1;
              if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
                v37 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v37 = v35;
              if (v37)
              {
                v37 = (unint64_t)sub_2429114B8(v37);
                v33 = (char *)*((_QWORD *)this + 1);
                v31 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v38 = 0;
              }
              v39 = (_DWORD *)(v37 + 4 * v34);
              *v39 = 0;
              v32 = v39 + 1;
              while (v31 != v33)
              {
                v40 = *((_DWORD *)v31 - 1);
                v31 -= 4;
                *--v39 = v40;
              }
              *((_QWORD *)this + 1) = v39;
              *((_QWORD *)this + 2) = v32;
              *((_QWORD *)this + 3) = v37 + 4 * v38;
              if (v33)
                operator delete(v33);
            }
            else
            {
              *(_DWORD *)v31 = 0;
              v32 = v31 + 4;
            }
            *((_QWORD *)this + 2) = v32;
            v41 = *((_QWORD *)a2 + 1);
            if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((_QWORD *)a2 + 2))
            {
              *((_BYTE *)a2 + 24) = 1;
              break;
            }
            *(v32 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v41);
            v29 = *((_QWORD *)a2 + 2);
            v28 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v28;
          }
          PB::Reader::recallMark();
        }
        else
        {
          v49 = (char *)*((_QWORD *)this + 2);
          v48 = *((_QWORD *)this + 3);
          if ((unint64_t)v49 >= v48)
          {
            v51 = (char *)*((_QWORD *)this + 1);
            v52 = (v49 - v51) >> 2;
            v53 = v52 + 1;
            if ((unint64_t)(v52 + 1) >> 62)
LABEL_104:
              sub_242729A44();
            v54 = v48 - (_QWORD)v51;
            if (v54 >> 1 > v53)
              v53 = v54 >> 1;
            if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL)
              v55 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v55 = v53;
            if (v55)
            {
              v55 = (unint64_t)sub_2429114B8(v55);
              v51 = (char *)*((_QWORD *)this + 1);
              v49 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v56 = 0;
            }
            v57 = (_DWORD *)(v55 + 4 * v52);
            *v57 = 0;
            v50 = v57 + 1;
            while (v49 != v51)
            {
              v58 = *((_DWORD *)v49 - 1);
              v49 -= 4;
              *--v57 = v58;
            }
            *((_QWORD *)this + 1) = v57;
            *((_QWORD *)this + 2) = v50;
            *((_QWORD *)this + 3) = v55 + 4 * v56;
            if (v51)
              operator delete(v51);
          }
          else
          {
            *(_DWORD *)v49 = 0;
            v50 = v49 + 4;
          }
          *((_QWORD *)this + 2) = v50;
          v59 = *((_QWORD *)a2 + 1);
          if (v59 <= 0xFFFFFFFFFFFFFFFBLL && v59 + 4 <= *((_QWORD *)a2 + 2))
          {
            *(v50 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v59);
            v43 = *((_QWORD *)a2 + 1) + 4;
LABEL_61:
            *((_QWORD *)a2 + 1) = v43;
          }
          else
          {
LABEL_93:
            *((_BYTE *)a2 + 24) = 1;
          }
        }
        break;
      case 4u:
        *((_BYTE *)this + 52) |= 2u;
        v42 = *((_QWORD *)a2 + 1);
        if (v42 > 0xFFFFFFFFFFFFFFF7 || v42 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_93;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v42);
LABEL_60:
        v43 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_61;
      default:
        goto LABEL_19;
    }
LABEL_94:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v15 = 0;
  v16 = 0;
  v11 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v17 = v2 + 1;
    v18 = *(_BYTE *)(v8 + v2);
    *((_QWORD *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0)
      goto LABEL_21;
    v15 += 7;
    v2 = v17;
    v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  if ((PB::Reader::skip(a2) & 1) != 0)
    goto LABEL_94;
  return 0;
}

uint64_t CMMsl::PDRDOTMeasurementSelectorState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  float *v5;
  float *v6;
  float v7;

  v3 = this;
  v4 = *(_BYTE *)(this + 52);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32));
    v4 = *(_BYTE *)(v3 + 52);
  }
  if ((v4 & 4) != 0)
    this = PB::Writer::writeVarInt(a2);
  v5 = *(float **)(v3 + 8);
  v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7);
  }
  if ((*(_BYTE *)(v3 + 52) & 2) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 40));
  return this;
}

uint64_t CMMsl::PDRDOTMeasurementSelectorState::hash_value(CMMsl::PDRDOTMeasurementSelectorState *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;

  if ((*((_BYTE *)this + 52) & 1) != 0)
  {
    if (*((double *)this + 4) == 0.0)
      v2 = 0;
    else
      v2 = *((_QWORD *)this + 4);
    if ((*((_BYTE *)this + 52) & 4) != 0)
      goto LABEL_3;
  }
  else
  {
    v2 = 0;
    if ((*((_BYTE *)this + 52) & 4) != 0)
    {
LABEL_3:
      v3 = *((unsigned int *)this + 12);
      goto LABEL_9;
    }
  }
  v3 = 0;
LABEL_9:
  v4 = PBHashBytes();
  if ((*((_BYTE *)this + 52) & 2) != 0)
  {
    v5 = *((double *)this + 5);
    if (v5 == 0.0)
      v5 = 0.0;
  }
  else
  {
    v5 = 0.0;
  }
  return v3 ^ v2 ^ *(_QWORD *)&v5 ^ v4;
}

void CMMsl::PDRFeatures::~PDRFeatures(CMMsl::PDRFeatures *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::PDRFeatures::PDRFeatures(CMMsl::PDRFeatures *this, const CMMsl::PDRFeatures *a2)
{
  int v2;
  int v3;
  double result;

  *(_QWORD *)this = &off_25135FA50;
  *((_DWORD *)this + 27) = 0;
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 1) != 0)
  {
    result = *((double *)a2 + 1);
    v3 = 1;
    *((_DWORD *)this + 27) = 1;
    *((double *)this + 1) = result;
    v2 = *((_DWORD *)a2 + 27);
    if ((v2 & 0x40000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x40000) != 0)
  {
LABEL_5:
    LODWORD(result) = *((_DWORD *)a2 + 22);
    v3 |= 0x40000u;
    *((_DWORD *)this + 27) = v3;
    *((_DWORD *)this + 22) = LODWORD(result);
    v2 = *((_DWORD *)a2 + 27);
  }
LABEL_6:
  if ((v2 & 0x100000) != 0)
  {
    LODWORD(result) = *((_DWORD *)a2 + 24);
    v3 |= 0x100000u;
    *((_DWORD *)this + 27) = v3;
    *((_DWORD *)this + 24) = LODWORD(result);
    v2 = *((_DWORD *)a2 + 27);
    if ((v2 & 0x80000) == 0)
    {
LABEL_8:
      if ((v2 & 0x200000) == 0)
        goto LABEL_9;
      goto LABEL_30;
    }
  }
  else if ((v2 & 0x80000) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(result) = *((_DWORD *)a2 + 23);
  v3 |= 0x80000u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 23) = LODWORD(result);
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x200000) == 0)
  {
LABEL_9:
    if ((v2 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_31;
  }
LABEL_30:
  LODWORD(result) = *((_DWORD *)a2 + 25);
  v3 |= 0x200000u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 25) = LODWORD(result);
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x400) == 0)
  {
LABEL_10:
    if ((v2 & 0x1000) == 0)
      goto LABEL_11;
    goto LABEL_32;
  }
LABEL_31:
  LODWORD(result) = *((_DWORD *)a2 + 14);
  v3 |= 0x400u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 14) = LODWORD(result);
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x1000) == 0)
  {
LABEL_11:
    if ((v2 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_33;
  }
LABEL_32:
  LODWORD(result) = *((_DWORD *)a2 + 16);
  v3 |= 0x1000u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 16) = LODWORD(result);
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x800) == 0)
  {
LABEL_12:
    if ((v2 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_34;
  }
LABEL_33:
  LODWORD(result) = *((_DWORD *)a2 + 15);
  v3 |= 0x800u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 15) = LODWORD(result);
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x2000) == 0)
  {
LABEL_13:
    if ((v2 & 4) == 0)
      goto LABEL_14;
    goto LABEL_35;
  }
LABEL_34:
  LODWORD(result) = *((_DWORD *)a2 + 17);
  v3 |= 0x2000u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 17) = LODWORD(result);
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 4) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0)
      goto LABEL_15;
    goto LABEL_36;
  }
LABEL_35:
  LODWORD(result) = *((_DWORD *)a2 + 6);
  v3 |= 4u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 6) = LODWORD(result);
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x10) == 0)
  {
LABEL_15:
    if ((v2 & 8) == 0)
      goto LABEL_16;
    goto LABEL_37;
  }
LABEL_36:
  LODWORD(result) = *((_DWORD *)a2 + 8);
  v3 |= 0x10u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 8) = LODWORD(result);
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 8) == 0)
  {
LABEL_16:
    if ((v2 & 0x20) == 0)
      goto LABEL_17;
    goto LABEL_38;
  }
LABEL_37:
  LODWORD(result) = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 7) = LODWORD(result);
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x20) == 0)
  {
LABEL_17:
    if ((v2 & 0x400000) == 0)
      goto LABEL_18;
    goto LABEL_39;
  }
LABEL_38:
  LODWORD(result) = *((_DWORD *)a2 + 9);
  v3 |= 0x20u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 9) = LODWORD(result);
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x400000) == 0)
  {
LABEL_18:
    if ((v2 & 0x80) == 0)
      goto LABEL_19;
    goto LABEL_40;
  }
LABEL_39:
  LODWORD(result) = *((_DWORD *)a2 + 26);
  v3 |= 0x400000u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 26) = LODWORD(result);
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x80) == 0)
  {
LABEL_19:
    if ((v2 & 0x40) == 0)
      goto LABEL_20;
    goto LABEL_41;
  }
LABEL_40:
  LODWORD(result) = *((_DWORD *)a2 + 11);
  v3 |= 0x80u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 11) = LODWORD(result);
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x40) == 0)
  {
LABEL_20:
    if ((v2 & 0x200) == 0)
      goto LABEL_21;
    goto LABEL_42;
  }
LABEL_41:
  LODWORD(result) = *((_DWORD *)a2 + 10);
  v3 |= 0x40u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 10) = LODWORD(result);
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x200) == 0)
  {
LABEL_21:
    if ((v2 & 0x100) == 0)
      goto LABEL_22;
    goto LABEL_43;
  }
LABEL_42:
  LODWORD(result) = *((_DWORD *)a2 + 13);
  v3 |= 0x200u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 13) = LODWORD(result);
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x100) == 0)
  {
LABEL_22:
    if ((v2 & 0x8000) == 0)
      goto LABEL_23;
    goto LABEL_44;
  }
LABEL_43:
  LODWORD(result) = *((_DWORD *)a2 + 12);
  v3 |= 0x100u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 12) = LODWORD(result);
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x8000) == 0)
  {
LABEL_23:
    if ((v2 & 0x4000) == 0)
      goto LABEL_24;
    goto LABEL_45;
  }
LABEL_44:
  LODWORD(result) = *((_DWORD *)a2 + 19);
  v3 |= 0x8000u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 19) = LODWORD(result);
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x4000) == 0)
  {
LABEL_24:
    if ((v2 & 0x20000) == 0)
      goto LABEL_25;
    goto LABEL_46;
  }
LABEL_45:
  LODWORD(result) = *((_DWORD *)a2 + 18);
  v3 |= 0x4000u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 18) = LODWORD(result);
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x20000) == 0)
  {
LABEL_25:
    if ((v2 & 0x10000) == 0)
      goto LABEL_26;
    goto LABEL_47;
  }
LABEL_46:
  LODWORD(result) = *((_DWORD *)a2 + 21);
  v3 |= 0x20000u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 21) = LODWORD(result);
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x10000) == 0)
  {
LABEL_26:
    if ((v2 & 2) == 0)
      return result;
LABEL_48:
    result = *((double *)a2 + 2);
    *((_DWORD *)this + 27) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
LABEL_47:
  LODWORD(result) = *((_DWORD *)a2 + 20);
  v3 |= 0x10000u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 20) = LODWORD(result);
  if ((*((_DWORD *)a2 + 27) & 2) != 0)
    goto LABEL_48;
  return result;
}

CMMsl *CMMsl::PDRFeatures::operator=(CMMsl *a1, const CMMsl::PDRFeatures *a2)
{
  CMMsl::PDRFeatures *v3;
  _BYTE v5[112];

  if (a1 != a2)
  {
    CMMsl::PDRFeatures::PDRFeatures((CMMsl::PDRFeatures *)v5, a2);
    CMMsl::swap(a1, (CMMsl::PDRFeatures *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PDRFeatures *a2, CMMsl::PDRFeatures *a3)
{
  int v3;
  uint64_t v4;
  double result;

  v3 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v4;
  LODWORD(v4) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v4;
  LODWORD(v4) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v4;
  LODWORD(v4) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v4;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  LODWORD(v4) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v4;
  LODWORD(v4) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  LODWORD(v4) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  LODWORD(v4) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v4;
  LODWORD(v4) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v4;
  LODWORD(v4) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v4;
  LODWORD(v4) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v4;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::PDRFeatures::PDRFeatures(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135FA50;
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a2 + 108) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

CMMsl *CMMsl::PDRFeatures::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::PDRFeatures *v3;
  _BYTE v5[112];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::PDRFeatures::PDRFeatures((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::PDRFeatures *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::PDRFeatures::formatText(CMMsl::PDRFeatures *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "pitchMean", *((float *)this + 6));
    v5 = *((_DWORD *)this + 27);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_28;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "pitchStd", *((float *)this + 7));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "rollMeanAbs", *((float *)this + 8));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "rollStd", *((float *)this + 9));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "rotRateInerFFTAmpXYHigh", *((float *)this + 10));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "rotRateInerFFTAmpXYPed", *((float *)this + 11));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "rotRateInerFFTAmpZHigh", *((float *)this + 12));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "rotRateInerFFTAmpZPed", *((float *)this + 13));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "rotRateInerXYMean", *((float *)this + 14));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "rotRateInerXYStd", *((float *)this + 15));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x1000) == 0)
  {
LABEL_12:
    if ((v5 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "rotRateInerZMean", *((float *)this + 16));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x2000) == 0)
  {
LABEL_13:
    if ((v5 & 1) == 0)
      goto LABEL_14;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "rotRateInerZStd", *((float *)this + 17));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 1) == 0)
  {
LABEL_14:
    if ((v5 & 2) == 0)
      goto LABEL_15;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 2) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 2));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "userAccelInerFFTAmpXYHigh", *((float *)this + 18));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "userAccelInerFFTAmpXYPed", *((float *)this + 19));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "userAccelInerFFTAmpZHigh", *((float *)this + 20));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "userAccelInerFFTAmpZPed", *((float *)this + 21));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "userAccelInerXYMean", *((float *)this + 22));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0)
      goto LABEL_22;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "userAccelInerXYStd", *((float *)this + 23));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0)
      goto LABEL_23;
LABEL_47:
    PB::TextFormatter::format(a2, "userAccelInerZStd", *((float *)this + 25));
    if ((*((_DWORD *)this + 27) & 0x400000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_24;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "userAccelInerZMean", *((float *)this + 24));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x200000) != 0)
    goto LABEL_47;
LABEL_23:
  if ((v5 & 0x400000) != 0)
LABEL_24:
    PB::TextFormatter::format(a2, "yawStd", *((float *)this + 26));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PDRFeatures::readFrom(CMMsl::PDRFeatures *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_96;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 27) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_92;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_89;
      case 2u:
        *((_DWORD *)this + 27) |= 0x40000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_92;
        *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_94;
      case 3u:
        *((_DWORD *)this + 27) |= 0x100000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_92;
        *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_94;
      case 4u:
        *((_DWORD *)this + 27) |= 0x80000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_92;
        *((_DWORD *)this + 23) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_94;
      case 5u:
        *((_DWORD *)this + 27) |= 0x200000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_92;
        *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_94;
      case 6u:
        *((_DWORD *)this + 27) |= 0x400u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_92;
        *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_94;
      case 7u:
        *((_DWORD *)this + 27) |= 0x1000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_92;
        *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_94;
      case 8u:
        *((_DWORD *)this + 27) |= 0x800u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_92;
        *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_94;
      case 9u:
        *((_DWORD *)this + 27) |= 0x2000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_92;
        *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_94;
      case 0xAu:
        *((_DWORD *)this + 27) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_92;
        *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_94;
      case 0xBu:
        *((_DWORD *)this + 27) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_92;
        *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_94;
      case 0xCu:
        *((_DWORD *)this + 27) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_92;
        *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_94;
      case 0xDu:
        *((_DWORD *)this + 27) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_92;
        *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_94;
      case 0xEu:
        *((_DWORD *)this + 27) |= 0x400000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_92;
        *((_DWORD *)this + 26) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_94;
      case 0xFu:
        *((_DWORD *)this + 27) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_92;
        *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_94;
      case 0x10u:
        *((_DWORD *)this + 27) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_92;
        *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_94;
      case 0x11u:
        *((_DWORD *)this + 27) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_92;
        *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_94;
      case 0x12u:
        *((_DWORD *)this + 27) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_92;
        *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_94;
      case 0x13u:
        *((_DWORD *)this + 27) |= 0x8000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_92;
        *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_94;
      case 0x14u:
        *((_DWORD *)this + 27) |= 0x4000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_92;
        *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_94;
      case 0x15u:
        *((_DWORD *)this + 27) |= 0x20000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_92;
        *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_94;
      case 0x16u:
        *((_DWORD *)this + 27) |= 0x10000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_92;
        *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_94:
        v2 = *((_QWORD *)a2 + 1) + 4;
        goto LABEL_95;
      case 0x17u:
        *((_DWORD *)this + 27) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
        {
LABEL_92:
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_89:
          v2 = *((_QWORD *)a2 + 1) + 8;
LABEL_95:
          *((_QWORD *)a2 + 1) = v2;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_96:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::PDRFeatures::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 108);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_DWORD *)(v3 + 108);
    if ((v4 & 0x40000) == 0)
    {
LABEL_3:
      if ((v4 & 0x100000) == 0)
        goto LABEL_4;
      goto LABEL_27;
    }
  }
  else if ((v4 & 0x40000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x100000) == 0)
  {
LABEL_4:
    if ((v4 & 0x80000) == 0)
      goto LABEL_5;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(float *)(v3 + 96));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x80000) == 0)
  {
LABEL_5:
    if ((v4 & 0x200000) == 0)
      goto LABEL_6;
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(float *)(v3 + 92));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x200000) == 0)
  {
LABEL_6:
    if ((v4 & 0x400) == 0)
      goto LABEL_7;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(float *)(v3 + 100));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x400) == 0)
  {
LABEL_7:
    if ((v4 & 0x1000) == 0)
      goto LABEL_8;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x1000) == 0)
  {
LABEL_8:
    if ((v4 & 0x800) == 0)
      goto LABEL_9;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x800) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 60));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x2000) == 0)
  {
LABEL_10:
    if ((v4 & 4) == 0)
      goto LABEL_11;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 68));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 4) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0)
      goto LABEL_12;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x10) == 0)
  {
LABEL_12:
    if ((v4 & 8) == 0)
      goto LABEL_13;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 8) == 0)
  {
LABEL_13:
    if ((v4 & 0x20) == 0)
      goto LABEL_14;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x20) == 0)
  {
LABEL_14:
    if ((v4 & 0x400000) == 0)
      goto LABEL_15;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x400000) == 0)
  {
LABEL_15:
    if ((v4 & 0x80) == 0)
      goto LABEL_16;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 104));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x80) == 0)
  {
LABEL_16:
    if ((v4 & 0x40) == 0)
      goto LABEL_17;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x40) == 0)
  {
LABEL_17:
    if ((v4 & 0x200) == 0)
      goto LABEL_18;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x200) == 0)
  {
LABEL_18:
    if ((v4 & 0x100) == 0)
      goto LABEL_19;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x100) == 0)
  {
LABEL_19:
    if ((v4 & 0x8000) == 0)
      goto LABEL_20;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x8000) == 0)
  {
LABEL_20:
    if ((v4 & 0x4000) == 0)
      goto LABEL_21;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(float *)(v3 + 76));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x4000) == 0)
  {
LABEL_21:
    if ((v4 & 0x20000) == 0)
      goto LABEL_22;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(float *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x20000) == 0)
  {
LABEL_22:
    if ((v4 & 0x10000) == 0)
      goto LABEL_23;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(float *)(v3 + 84));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x10000) == 0)
  {
LABEL_23:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 16));
  }
LABEL_46:
  this = PB::Writer::write(a2, *(float *)(v3 + 80));
  if ((*(_DWORD *)(v3 + 108) & 2) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 16));
  return this;
}

uint64_t CMMsl::PDRFeatures::hash_value(CMMsl::PDRFeatures *this)
{
  int v1;
  double v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  float v43;
  uint64_t v44;
  double v45;

  v1 = *((_DWORD *)this + 27);
  if ((v1 & 1) == 0)
  {
    v2 = 0.0;
    if ((v1 & 0x40000) != 0)
      goto LABEL_3;
LABEL_72:
    v4 = 0;
    if ((v1 & 0x100000) != 0)
      goto LABEL_6;
LABEL_73:
    v6 = 0;
    if ((v1 & 0x80000) != 0)
      goto LABEL_9;
LABEL_74:
    v8 = 0;
    if ((v1 & 0x200000) != 0)
      goto LABEL_12;
LABEL_75:
    v10 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_15;
LABEL_76:
    v12 = 0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_18;
LABEL_77:
    v14 = 0;
    if ((v1 & 0x800) != 0)
      goto LABEL_21;
LABEL_78:
    v16 = 0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_24;
LABEL_79:
    v18 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_27;
LABEL_80:
    v20 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_30;
LABEL_81:
    v22 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_33;
LABEL_82:
    v24 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_36;
LABEL_83:
    v26 = 0;
    if ((v1 & 0x400000) != 0)
      goto LABEL_39;
LABEL_84:
    v28 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_42;
LABEL_85:
    v30 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_45;
LABEL_86:
    v32 = 0;
    if ((v1 & 0x200) != 0)
      goto LABEL_48;
LABEL_87:
    v34 = 0;
    if ((v1 & 0x100) != 0)
      goto LABEL_51;
LABEL_88:
    v36 = 0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_54;
LABEL_89:
    v38 = 0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_57;
LABEL_90:
    v40 = 0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_60;
LABEL_91:
    v42 = 0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_63;
    goto LABEL_92;
  }
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 0x40000) == 0)
    goto LABEL_72;
LABEL_3:
  v3 = *((float *)this + 22);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  if ((v1 & 0x100000) == 0)
    goto LABEL_73;
LABEL_6:
  v5 = *((float *)this + 24);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((v1 & 0x80000) == 0)
    goto LABEL_74;
LABEL_9:
  v7 = *((float *)this + 23);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 0x200000) == 0)
    goto LABEL_75;
LABEL_12:
  v9 = *((float *)this + 25);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((v1 & 0x400) == 0)
    goto LABEL_76;
LABEL_15:
  v11 = *((float *)this + 14);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((v1 & 0x1000) == 0)
    goto LABEL_77;
LABEL_18:
  v13 = *((float *)this + 16);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((v1 & 0x800) == 0)
    goto LABEL_78;
LABEL_21:
  v15 = *((float *)this + 15);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_79;
LABEL_24:
  v17 = *((float *)this + 17);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  if ((v1 & 4) == 0)
    goto LABEL_80;
LABEL_27:
  v19 = *((float *)this + 6);
  v20 = LODWORD(v19);
  if (v19 == 0.0)
    v20 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_81;
LABEL_30:
  v21 = *((float *)this + 8);
  v22 = LODWORD(v21);
  if (v21 == 0.0)
    v22 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_82;
LABEL_33:
  v23 = *((float *)this + 7);
  v24 = LODWORD(v23);
  if (v23 == 0.0)
    v24 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_83;
LABEL_36:
  v25 = *((float *)this + 9);
  v26 = LODWORD(v25);
  if (v25 == 0.0)
    v26 = 0;
  if ((v1 & 0x400000) == 0)
    goto LABEL_84;
LABEL_39:
  v27 = *((float *)this + 26);
  v28 = LODWORD(v27);
  if (v27 == 0.0)
    v28 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_85;
LABEL_42:
  v29 = *((float *)this + 11);
  v30 = LODWORD(v29);
  if (v29 == 0.0)
    v30 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_86;
LABEL_45:
  v31 = *((float *)this + 10);
  v32 = LODWORD(v31);
  if (v31 == 0.0)
    v32 = 0;
  if ((v1 & 0x200) == 0)
    goto LABEL_87;
LABEL_48:
  v33 = *((float *)this + 13);
  v34 = LODWORD(v33);
  if (v33 == 0.0)
    v34 = 0;
  if ((v1 & 0x100) == 0)
    goto LABEL_88;
LABEL_51:
  v35 = *((float *)this + 12);
  v36 = LODWORD(v35);
  if (v35 == 0.0)
    v36 = 0;
  if ((v1 & 0x8000) == 0)
    goto LABEL_89;
LABEL_54:
  v37 = *((float *)this + 19);
  v38 = LODWORD(v37);
  if (v37 == 0.0)
    v38 = 0;
  if ((v1 & 0x4000) == 0)
    goto LABEL_90;
LABEL_57:
  v39 = *((float *)this + 18);
  v40 = LODWORD(v39);
  if (v39 == 0.0)
    v40 = 0;
  if ((v1 & 0x20000) == 0)
    goto LABEL_91;
LABEL_60:
  v41 = *((float *)this + 21);
  v42 = LODWORD(v41);
  if (v41 == 0.0)
    v42 = 0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_63:
    v43 = *((float *)this + 20);
    v44 = LODWORD(v43);
    if (v43 == 0.0)
      v44 = 0;
    if ((v1 & 2) != 0)
      goto LABEL_66;
LABEL_93:
    v45 = 0.0;
    return v4 ^ *(_QWORD *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v32 ^ v34 ^ v36 ^ v38 ^ v40 ^ v42 ^ v44 ^ *(_QWORD *)&v45;
  }
LABEL_92:
  v44 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_93;
LABEL_66:
  v45 = *((double *)this + 2);
  if (v45 == 0.0)
    v45 = 0.0;
  return v4 ^ *(_QWORD *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v32 ^ v34 ^ v36 ^ v38 ^ v40 ^ v42 ^ v44 ^ *(_QWORD *)&v45;
}

void CMMsl::PDRFenceReference::~PDRFenceReference(CMMsl::PDRFenceReference *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::PDRFenceReference::PDRFenceReference(CMMsl::PDRFenceReference *this, const CMMsl::PDRFenceReference *a2)
{
  char v2;
  uint64_t v3;

  *(_QWORD *)this = &off_25135FA88;
  *((_DWORD *)this + 5) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) == 0)
  {
    v2 = 2;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return *(float *)&v3;
    goto LABEL_5;
  }
  v3 = *((_QWORD *)a2 + 1);
  *((_BYTE *)this + 20) = 1;
  *((_QWORD *)this + 1) = v3;
  v2 = 3;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    LODWORD(v3) = *((_DWORD *)a2 + 4);
    *((_BYTE *)this + 20) = v2;
    *((_DWORD *)this + 4) = v3;
  }
  return *(float *)&v3;
}

uint64_t CMMsl::PDRFenceReference::operator=(uint64_t a1, uint64_t a2, double a3, float a4)
{
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  int v9;
  _QWORD v11[2];
  int v12;
  int v13;

  if (a1 != a2)
  {
    v11[0] = &off_25135FA88;
    v13 = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      LOBYTE(v13) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        a4 = *(float *)(a2 + 16);
        LOBYTE(v13) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_6;
    }
    v7 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v13;
    v13 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    *(double *)(a1 + 8) = a3;
    v11[1] = v8;
    v9 = *(_DWORD *)(a1 + 16);
    *(float *)(a1 + 16) = a4;
    v12 = v9;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::PDRFenceReference *a2, CMMsl::PDRFenceReference *a3)
{
  int v3;
  uint64_t v4;
  float result;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  return result;
}

uint64_t CMMsl::PDRFenceReference::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  _QWORD v9[2];
  int v10;
  int v11;

  if (a1 != a2)
  {
    v9[0] = &off_25135FA88;
    v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_DWORD *)(a2 + 16);
    v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    v11 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v9[1] = v7;
    LODWORD(v4) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v5;
    v10 = v4;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::PDRFenceReference::formatText(CMMsl::PDRFenceReference *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "radius", *((float *)this + 4));
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PDRFenceReference::readFrom(CMMsl::PDRFenceReference *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          v14 = v16++ > 8;
          if (v14)
            goto LABEL_26;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_26;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_30;
        *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        v2 = *((_QWORD *)a2 + 1) + 4;
      }
      else
      {
        if ((v11 >> 3) != 1)
        {
LABEL_26:
          result = PB::Reader::skip(a2);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          goto LABEL_33;
        }
        *((_BYTE *)this + 20) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
        {
LABEL_30:
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_33;
        }
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        v2 = *((_QWORD *)a2 + 1) + 8;
      }
      *((_QWORD *)a2 + 1) = v2;
LABEL_33:
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::PDRFenceReference::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 16));
  return this;
}

uint64_t CMMsl::PDRFenceReference::hash_value(CMMsl::PDRFenceReference *this)
{
  double v1;
  float v2;
  uint64_t v3;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_9:
    v3 = 0;
    return v3 ^ *(_QWORD *)&v1;
  }
  v1 = 0.0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_9;
LABEL_3:
  v2 = *((float *)this + 4);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  return v3 ^ *(_QWORD *)&v1;
}

void CMMsl::PDRFenceState::~PDRFenceState(CMMsl::PDRFenceState *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::PDRFenceState::PDRFenceState(uint64_t this, const CMMsl::PDRFenceState *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  char v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;

  *(_QWORD *)this = &off_25135FAC0;
  *(_DWORD *)(this + 68) = 0;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_WORD *)(this + 68) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_WORD *)a2 + 34);
    if ((v2 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_WORD *)a2 + 34) & 0x200) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 13);
    v3 |= 0x200u;
    *(_WORD *)(this + 68) = v3;
    *(_DWORD *)(this + 52) = v5;
    v2 = *((_WORD *)a2 + 34);
  }
LABEL_6:
  if ((v2 & 0x400) != 0)
  {
    v6 = *((_DWORD *)a2 + 14);
    v3 |= 0x400u;
    *(_WORD *)(this + 68) = v3;
    *(_DWORD *)(this + 56) = v6;
    v2 = *((_WORD *)a2 + 34);
    if ((v2 & 0x800) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_20;
    }
  }
  else if ((v2 & 0x800) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 15);
  v3 |= 0x800u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 60) = v7;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  v8 = *((_DWORD *)a2 + 10);
  v3 |= 0x40u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 40) = v8;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x80) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  v9 = *((_DWORD *)a2 + 11);
  v3 |= 0x80u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 44) = v9;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_23;
  }
LABEL_22:
  v10 = *((_DWORD *)a2 + 12);
  v3 |= 0x100u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 48) = v10;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x1000) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0)
      goto LABEL_13;
    goto LABEL_24;
  }
LABEL_23:
  v11 = *((_BYTE *)a2 + 64);
  v3 |= 0x1000u;
  *(_WORD *)(this + 68) = v3;
  *(_BYTE *)(this + 64) = v11;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 8) == 0)
      goto LABEL_14;
    goto LABEL_25;
  }
LABEL_24:
  v12 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_WORD *)(this + 68) = v3;
  *(_QWORD *)(this + 16) = v12;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 8) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0)
      goto LABEL_15;
    goto LABEL_26;
  }
LABEL_25:
  v13 = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 28) = v13;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x10) == 0)
  {
LABEL_15:
    if ((v2 & 0x20) == 0)
      goto LABEL_16;
    goto LABEL_27;
  }
LABEL_26:
  v14 = *((_DWORD *)a2 + 8);
  v3 |= 0x10u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 32) = v14;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x20) == 0)
  {
LABEL_16:
    if ((v2 & 4) == 0)
      return this;
LABEL_28:
    v16 = *((_DWORD *)a2 + 6);
    *(_WORD *)(this + 68) = v3 | 4;
    *(_DWORD *)(this + 24) = v16;
    return this;
  }
LABEL_27:
  v15 = *((_DWORD *)a2 + 9);
  v3 |= 0x20u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 36) = v15;
  if ((*((_WORD *)a2 + 34) & 4) != 0)
    goto LABEL_28;
  return this;
}

CMMsl *CMMsl::PDRFenceState::operator=(CMMsl *a1, const CMMsl::PDRFenceState *a2)
{
  CMMsl::PDRFenceState *v3;
  _BYTE v5[72];

  if (a1 != a2)
  {
    CMMsl::PDRFenceState::PDRFenceState((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::PDRFenceState *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::PDRFenceState *a2, CMMsl::PDRFenceState *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  float result;
  int v7;

  v3 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  LODWORD(v4) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  LOBYTE(v3) = *((_BYTE *)this + 64);
  *((_BYTE *)this + 64) = *((_BYTE *)a2 + 64);
  *((_BYTE *)a2 + 64) = v3;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  LODWORD(v5) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v5;
  LODWORD(v5) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v5;
  result = *((float *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((float *)a2 + 9) = result;
  v7 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v7;
  return result;
}

float CMMsl::PDRFenceState::PDRFenceState(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135FAC0;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a2 + 68) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  result = *(float *)(a2 + 36);
  *(float *)(a1 + 36) = result;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return result;
}

CMMsl *CMMsl::PDRFenceState::operator=(CMMsl *this, uint64_t a2, CMMsl::PDRFenceState *a3)
{
  void (**v5)(CMMsl::PDRFenceState *__hidden);
  __int128 v6;
  int v7;
  __int128 v8;
  __int128 v9;
  int v10;
  char v11;
  int v12;

  if (this != (CMMsl *)a2)
  {
    v5 = &off_25135FAC0;
    v12 = *(_DWORD *)(a2 + 68);
    *(_DWORD *)(a2 + 68) = 0;
    v10 = *(_DWORD *)(a2 + 60);
    v9 = *(_OWORD *)(a2 + 44);
    v11 = *(_BYTE *)(a2 + 64);
    v6 = *(_OWORD *)(a2 + 8);
    v8 = *(_OWORD *)(a2 + 28);
    v7 = *(_DWORD *)(a2 + 24);
    CMMsl::swap(this, (CMMsl::PDRFenceState *)&v5, a3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return this;
}

uint64_t CMMsl::PDRFenceState::formatText(CMMsl::PDRFenceState *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x1000) != 0)
  {
    PB::TextFormatter::format(a2, "didExceedRadius");
    v5 = *((_WORD *)this + 34);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "fenceID");
  v5 = *((_WORD *)this + 34);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "positionRefX", *((float *)this + 7));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "positionRefY", *((float *)this + 8));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "positionRefZ", *((float *)this + 9));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "positionUncX", *((float *)this + 10));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "positionUncY", *((float *)this + 11));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "positionUncZ", *((float *)this + 12));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "positionX", *((float *)this + 13));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "positionY", *((float *)this + 14));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 1) == 0)
      goto LABEL_13;
LABEL_27:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    if ((*((_WORD *)this + 34) & 2) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_14;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "positionZ", *((float *)this + 15));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 1) != 0)
    goto LABEL_27;
LABEL_13:
  if ((v5 & 2) != 0)
LABEL_14:
    PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PDRFenceState::readFrom(CMMsl::PDRFenceState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  char v27;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_83;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 34) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_58;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_49;
      case 2u:
        *((_WORD *)this + 34) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_58;
        *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_76;
      case 3u:
        *((_WORD *)this + 34) |= 0x400u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_58;
        *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_76;
      case 4u:
        *((_WORD *)this + 34) |= 0x800u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_58;
        *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_76;
      case 5u:
        *((_WORD *)this + 34) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_58;
        *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_76;
      case 6u:
        *((_WORD *)this + 34) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_58;
        *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_76;
      case 7u:
        *((_WORD *)this + 34) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_58;
        *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_76;
      case 8u:
        *((_WORD *)this + 34) |= 0x1000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v21 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v21 = v20 != 0;
        }
        *((_BYTE *)this + 64) = v21;
        break;
      case 9u:
        *((_WORD *)this + 34) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_58;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_49:
        v2 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_77;
      case 0xAu:
        *((_WORD *)this + 34) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_58;
        *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_76;
      case 0xBu:
        *((_WORD *)this + 34) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_58;
        *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_76;
      case 0xCu:
        *((_WORD *)this + 34) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_76:
          v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_77:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_58:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 0xDu:
        *((_WORD *)this + 34) |= 4u;
        v22 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v23 = *(_QWORD *)a2;
        if (v22 > 0xFFFFFFFFFFFFFFF5 || v22 + 10 > v2)
        {
          v28 = 0;
          v29 = 0;
          v26 = 0;
          if (v2 <= v22)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v22)
            {
              LODWORD(v26) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_82;
            }
            v30 = v22++;
            v31 = *(_BYTE *)(v23 + v30);
            *((_QWORD *)a2 + 1) = v22;
            v26 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v26) = 0;
LABEL_81:
              v2 = v30 + 1;
              goto LABEL_82;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v26) = 0;
          goto LABEL_81;
        }
        v24 = 0;
        v25 = 0;
        v26 = 0;
        do
        {
          v2 = v22 + 1;
          *((_QWORD *)a2 + 1) = v22 + 1;
          v27 = *(_BYTE *)(v23 + v22);
          v26 |= (unint64_t)(v27 & 0x7F) << v24;
          if ((v27 & 0x80) == 0)
            goto LABEL_82;
          v24 += 7;
          v22 = v2;
          v14 = v25++ > 8;
        }
        while (!v14);
        LODWORD(v26) = 0;
LABEL_82:
        *((_DWORD *)this + 6) = v26;
        break;
      default:
        goto LABEL_19;
    }
LABEL_83:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::PDRFenceState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 68);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_WORD *)(v3 + 68);
    if ((v4 & 0x200) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((*(_WORD *)(this + 68) & 0x200) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 0x800) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x800) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(float *)(v3 + 60));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 8) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 8) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x10) == 0)
  {
LABEL_12:
    if ((v4 & 0x20) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x20) == 0)
  {
LABEL_13:
    if ((v4 & 4) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_26:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  if ((*(_WORD *)(v3 + 68) & 4) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::PDRFenceState::hash_value(CMMsl::PDRFenceState *this)
{
  __int16 v1;
  double v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *((_WORD *)this + 34);
  if ((v1 & 1) == 0)
  {
    v2 = 0.0;
    if ((*((_WORD *)this + 34) & 0x200) != 0)
      goto LABEL_3;
LABEL_38:
    v4 = 0;
    if ((*((_WORD *)this + 34) & 0x400) != 0)
      goto LABEL_6;
LABEL_39:
    v6 = 0;
    if ((*((_WORD *)this + 34) & 0x800) != 0)
      goto LABEL_9;
LABEL_40:
    v8 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_12;
LABEL_41:
    v10 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_15;
LABEL_42:
    v12 = 0;
    if ((*((_WORD *)this + 34) & 0x100) != 0)
      goto LABEL_18;
LABEL_43:
    v14 = 0;
    if ((*((_WORD *)this + 34) & 0x1000) != 0)
      goto LABEL_21;
    goto LABEL_44;
  }
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_WORD *)this + 34) & 0x200) == 0)
    goto LABEL_38;
LABEL_3:
  v3 = *((float *)this + 13);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  if ((*((_WORD *)this + 34) & 0x400) == 0)
    goto LABEL_39;
LABEL_6:
  v5 = *((float *)this + 14);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((*((_WORD *)this + 34) & 0x800) == 0)
    goto LABEL_40;
LABEL_9:
  v7 = *((float *)this + 15);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_41;
LABEL_12:
  v9 = *((float *)this + 10);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_42;
LABEL_15:
  v11 = *((float *)this + 11);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((*((_WORD *)this + 34) & 0x100) == 0)
    goto LABEL_43;
LABEL_18:
  v13 = *((float *)this + 12);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((*((_WORD *)this + 34) & 0x1000) != 0)
  {
LABEL_21:
    v15 = *((unsigned __int8 *)this + 64);
    if ((v1 & 2) != 0)
      goto LABEL_22;
LABEL_45:
    v16 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_25;
LABEL_46:
    v18 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_28;
LABEL_47:
    v20 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_31;
    goto LABEL_48;
  }
LABEL_44:
  v15 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_45;
LABEL_22:
  v16 = *((double *)this + 2);
  if (v16 == 0.0)
    v16 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_46;
LABEL_25:
  v17 = *((float *)this + 7);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_47;
LABEL_28:
  v19 = *((float *)this + 8);
  v20 = LODWORD(v19);
  if (v19 == 0.0)
    v20 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_31:
    v21 = *((float *)this + 9);
    v22 = LODWORD(v21);
    if (v21 == 0.0)
      v22 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_34;
LABEL_49:
    v23 = 0;
    return v4 ^ *(_QWORD *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v15 ^ *(_QWORD *)&v16 ^ v18 ^ v20 ^ v22 ^ v23;
  }
LABEL_48:
  v22 = 0;
  if ((v1 & 4) == 0)
    goto LABEL_49;
LABEL_34:
  v23 = *((unsigned int *)this + 6);
  return v4 ^ *(_QWORD *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v15 ^ *(_QWORD *)&v16 ^ v18 ^ v20 ^ v22 ^ v23;
}

void CMMsl::PDRImpulse::~PDRImpulse(CMMsl::PDRImpulse *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::PDRImpulse::PDRImpulse(CMMsl::PDRImpulse *this, const CMMsl::PDRImpulse *a2)
{
  char v2;
  int v3;
  double result;

  *(_QWORD *)this = &off_25135FAF8;
  *((_DWORD *)this + 5) = 0;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
    v3 = *((_DWORD *)a2 + 4);
    *((_BYTE *)this + 20) = 2;
    *((_DWORD *)this + 4) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 1) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 1);
    *((_BYTE *)this + 20) = v2;
    *((double *)this + 1) = result;
  }
  return result;
}

uint64_t CMMsl::PDRImpulse::operator=(uint64_t a1, uint64_t a2, double a3)
{
  void (**v4)(CMMsl::PDRImpulse *__hidden);
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  uint64_t v12;

  if (a1 != a2)
  {
    v4 = &off_25135FAF8;
    v11[0] = &off_25135FAF8;
    HIDWORD(v12) = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 2) != 0)
    {
      LODWORD(v4) = *(_DWORD *)(a2 + 16);
      BYTE4(v12) = 2;
      v6 = 3;
      if ((v5 & 1) != 0)
      {
LABEL_6:
        a3 = *(double *)(a2 + 8);
        BYTE4(v12) = v6;
      }
    }
    else
    {
      v6 = 1;
      if ((*(_BYTE *)(a2 + 20) & 1) != 0)
        goto LABEL_6;
    }
    v7 = HIDWORD(v12);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = (_DWORD)v4;
    *(_DWORD *)(a1 + 20) = v7;
    *(double *)(a1 + 8) = a3;
    v11[1] = v9;
    v12 = v8;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PDRImpulse *a2, CMMsl::PDRImpulse *a3)
{
  int v3;
  int v4;
  double result;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  v4 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

uint64_t CMMsl::PDRImpulse::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  if (a1 != a2)
  {
    v8[0] = &off_25135FAF8;
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    v6 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    v8[1] = v6;
    v8[2] = v5;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::PDRImpulse::formatText(CMMsl::PDRImpulse *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "type");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PDRImpulse::readFrom(CMMsl::PDRImpulse *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  char v24;
  uint64_t result;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_30;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 20) |= 2u;
        v19 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v20 = *(_QWORD *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v2)
        {
          v26 = 0;
          v27 = 0;
          v23 = 0;
          if (v2 <= v19)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v19)
            {
              LODWORD(v23) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_47;
            }
            v28 = v19++;
            v29 = *(_BYTE *)(v20 + v28);
            *((_QWORD *)a2 + 1) = v19;
            v23 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0)
              break;
            v26 += 7;
            v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v23) = 0;
LABEL_46:
          v2 = v28 + 1;
        }
        else
        {
          v21 = 0;
          v22 = 0;
          v23 = 0;
          while (1)
          {
            v2 = v19 + 1;
            *((_QWORD *)a2 + 1) = v19 + 1;
            v24 = *(_BYTE *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0)
              break;
            v21 += 7;
            v19 = v2;
            v14 = v22++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 4) = v23;
      }
      else
      {
LABEL_30:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_30;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PDRImpulse::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 8));
  return this;
}

uint64_t CMMsl::PDRImpulse::hash_value(CMMsl::PDRImpulse *this)
{
  uint64_t v1;
  double v2;

  if ((*((_BYTE *)this + 20) & 2) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 20) & 1) != 0)
      goto LABEL_3;
LABEL_7:
    v2 = 0.0;
    return *(_QWORD *)&v2 ^ v1;
  }
  v1 = *((int *)this + 4);
  if ((*((_BYTE *)this + 20) & 1) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  return *(_QWORD *)&v2 ^ v1;
}

void CMMsl::PDRPedestrianClassifierState::~PDRPedestrianClassifierState(CMMsl::PDRPedestrianClassifierState *this)
{
  void *v2;

  *(_QWORD *)this = &off_25135FB30;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::PDRPedestrianClassifierState::~PDRPedestrianClassifierState(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::PDRPedestrianClassifierState *CMMsl::PDRPedestrianClassifierState::PDRPedestrianClassifierState(CMMsl::PDRPedestrianClassifierState *this, const CMMsl::PDRPedestrianClassifierState *a2)
{
  _QWORD *v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  *(_QWORD *)this = &off_25135FB30;
  *((_QWORD *)this + 1) = 0;
  v4 = (_QWORD *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 13) = 0;
  if ((*((_BYTE *)a2 + 52) & 1) != 0)
  {
    v6 = *((_QWORD *)a2 + 4);
    *((_BYTE *)this + 52) = 1;
    *((_QWORD *)this + 4) = v6;
    v5 = 5;
    if ((*((_BYTE *)a2 + 52) & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = 4;
  if ((*((_BYTE *)a2 + 52) & 4) != 0)
  {
LABEL_5:
    v7 = *((_BYTE *)a2 + 48);
    *((_BYTE *)this + 52) = v5;
    *((_BYTE *)this + 48) = v7;
  }
LABEL_6:
  if (this != a2)
    sub_242911380(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  if ((*((_BYTE *)a2 + 52) & 2) != 0)
  {
    v8 = *((_QWORD *)a2 + 5);
    *((_BYTE *)this + 52) |= 2u;
    *((_QWORD *)this + 5) = v8;
  }
  return this;
}

uint64_t CMMsl::PDRPedestrianClassifierState::operator=(uint64_t a1, const CMMsl::PDRPedestrianClassifierState *a2)
{
  int v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _BYTE v8[8];
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  char v12;
  int v13;

  if ((const CMMsl::PDRPedestrianClassifierState *)a1 != a2)
  {
    CMMsl::PDRPedestrianClassifierState::PDRPedestrianClassifierState((CMMsl::PDRPedestrianClassifierState *)v8, a2);
    v3 = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a1 + 52) = v13;
    v13 = v3;
    LOBYTE(v3) = *(_BYTE *)(a1 + 48);
    *(_BYTE *)(a1 + 48) = v12;
    v12 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v9 = v4;
    v5 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v10;
    v10 = v5;
    v6 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v11;
    v11 = v6;
    CMMsl::PDRPedestrianClassifierState::~PDRPedestrianClassifierState((CMMsl::PDRPedestrianClassifierState *)v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PDRPedestrianClassifierState *a2, CMMsl::PDRPedestrianClassifierState *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  v3 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v3;
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  LOBYTE(v3) = *((_BYTE *)this + 48);
  *((_BYTE *)this + 48) = *((_BYTE *)a2 + 48);
  *((_BYTE *)a2 + 48) = v3;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  result = *((double *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((double *)a2 + 5) = result;
  return result;
}

uint64_t CMMsl::PDRPedestrianClassifierState::PDRPedestrianClassifierState(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_25135FB30;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

{
  *(_QWORD *)a1 = &off_25135FB30;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t CMMsl::PDRPedestrianClassifierState::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  uint64_t v5;
  __int128 v6;
  char v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  void (**v13)(CMMsl::PDRPedestrianClassifierState *__hidden);
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  char v17;
  int v18;

  if (a1 != a2)
  {
    v13 = &off_25135FB30;
    v3 = *(_DWORD *)(a2 + 52);
    *(_DWORD *)(a2 + 52) = 0;
    v4 = *(_BYTE *)(a2 + 48);
    v5 = *(_QWORD *)(a2 + 24);
    v6 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v18 = *(_DWORD *)(a1 + 52);
    v7 = *(_BYTE *)(a1 + 48);
    *(_BYTE *)(a1 + 48) = v4;
    v17 = v7;
    v8 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    v14 = v8;
    v9 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v5;
    v15 = v9;
    v10 = *(_OWORD *)(a1 + 32);
    v11 = *(_OWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 52) = v3;
    *(_OWORD *)(a1 + 32) = v11;
    v16 = v10;
    CMMsl::PDRPedestrianClassifierState::~PDRPedestrianClassifierState((CMMsl::PDRPedestrianClassifierState *)&v13);
  }
  return a1;
}

uint64_t CMMsl::PDRPedestrianClassifierState::formatText(CMMsl::PDRPedestrianClassifierState *this, PB::TextFormatter *a2, const char *a3)
{
  float *v5;
  float *v6;
  float v7;
  char v8;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 52) & 4) != 0)
    PB::TextFormatter::format(a2, "isPedestrian");
  v5 = (float *)*((_QWORD *)this + 1);
  v6 = (float *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "pedestrianClassProbability", v7);
  }
  v8 = *((_BYTE *)this + 52);
  if ((v8 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 4));
    v8 = *((_BYTE *)this + 52);
  }
  if ((v8 & 2) != 0)
    PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 5));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::PDRPedestrianClassifierState::readFrom(CMMsl::PDRPedestrianClassifierState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  BOOL v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  _DWORD *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  _DWORD *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  int v50;
  unint64_t v51;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      break;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 52) |= 1u;
        v19 = *((_QWORD *)a2 + 1);
        if (v19 > 0xFFFFFFFFFFFFFFF7 || v19 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_79;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v19);
        goto LABEL_55;
      case 2u:
        *((_BYTE *)this + 52) |= 4u;
        v20 = *((_QWORD *)a2 + 1);
        if (v20 >= *((_QWORD *)a2 + 2))
        {
          v23 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v21 = v20 + 1;
          v22 = *(unsigned __int8 *)(*(_QWORD *)a2 + v20);
          *((_QWORD *)a2 + 1) = v21;
          v23 = v22 != 0;
        }
        *((_BYTE *)this + 48) = v23;
        break;
      case 3u:
        if ((v11 & 7) == 2)
        {
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v24 = *((_QWORD *)a2 + 1);
          v25 = *((_QWORD *)a2 + 2);
          while (v24 < v25 && !*((_BYTE *)a2 + 24))
          {
            v27 = (char *)*((_QWORD *)this + 2);
            v26 = *((_QWORD *)this + 3);
            if ((unint64_t)v27 >= v26)
            {
              v29 = (char *)*((_QWORD *)this + 1);
              v30 = (v27 - v29) >> 2;
              v31 = v30 + 1;
              if ((unint64_t)(v30 + 1) >> 62)
                goto LABEL_88;
              v32 = v26 - (_QWORD)v29;
              if (v32 >> 1 > v31)
                v31 = v32 >> 1;
              if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
                v33 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v33 = v31;
              if (v33)
              {
                v33 = (unint64_t)sub_2429114B8(v33);
                v29 = (char *)*((_QWORD *)this + 1);
                v27 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v34 = 0;
              }
              v35 = (_DWORD *)(v33 + 4 * v30);
              *v35 = 0;
              v28 = v35 + 1;
              while (v27 != v29)
              {
                v36 = *((_DWORD *)v27 - 1);
                v27 -= 4;
                *--v35 = v36;
              }
              *((_QWORD *)this + 1) = v35;
              *((_QWORD *)this + 2) = v28;
              *((_QWORD *)this + 3) = v33 + 4 * v34;
              if (v29)
                operator delete(v29);
            }
            else
            {
              *(_DWORD *)v27 = 0;
              v28 = v27 + 4;
            }
            *((_QWORD *)this + 2) = v28;
            v37 = *((_QWORD *)a2 + 1);
            if (v37 > 0xFFFFFFFFFFFFFFFBLL || v37 + 4 > *((_QWORD *)a2 + 2))
            {
              *((_BYTE *)a2 + 24) = 1;
              break;
            }
            *(v28 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v37);
            v25 = *((_QWORD *)a2 + 2);
            v24 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v24;
          }
          PB::Reader::recallMark();
        }
        else
        {
          v41 = (char *)*((_QWORD *)this + 2);
          v40 = *((_QWORD *)this + 3);
          if ((unint64_t)v41 >= v40)
          {
            v43 = (char *)*((_QWORD *)this + 1);
            v44 = (v41 - v43) >> 2;
            v45 = v44 + 1;
            if ((unint64_t)(v44 + 1) >> 62)
LABEL_88:
              sub_242729A44();
            v46 = v40 - (_QWORD)v43;
            if (v46 >> 1 > v45)
              v45 = v46 >> 1;
            if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL)
              v47 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v47 = v45;
            if (v47)
            {
              v47 = (unint64_t)sub_2429114B8(v47);
              v43 = (char *)*((_QWORD *)this + 1);
              v41 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v48 = 0;
            }
            v49 = (_DWORD *)(v47 + 4 * v44);
            *v49 = 0;
            v42 = v49 + 1;
            while (v41 != v43)
            {
              v50 = *((_DWORD *)v41 - 1);
              v41 -= 4;
              *--v49 = v50;
            }
            *((_QWORD *)this + 1) = v49;
            *((_QWORD *)this + 2) = v42;
            *((_QWORD *)this + 3) = v47 + 4 * v48;
            if (v43)
              operator delete(v43);
          }
          else
          {
            *(_DWORD *)v41 = 0;
            v42 = v41 + 4;
          }
          *((_QWORD *)this + 2) = v42;
          v51 = *((_QWORD *)a2 + 1);
          if (v51 <= 0xFFFFFFFFFFFFFFFBLL && v51 + 4 <= *((_QWORD *)a2 + 2))
          {
            *(v42 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v51);
            v39 = *((_QWORD *)a2 + 1) + 4;
LABEL_56:
            *((_QWORD *)a2 + 1) = v39;
          }
          else
          {
LABEL_79:
            *((_BYTE *)a2 + 24) = 1;
          }
        }
        break;
      case 4u:
        *((_BYTE *)this + 52) |= 2u;
        v38 = *((_QWORD *)a2 + 1);
        if (v38 > 0xFFFFFFFFFFFFFFF7 || v38 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_79;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v38);
LABEL_55:
        v39 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_56;
      default:
        goto LABEL_19;
    }
LABEL_80:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v15 = 0;
  v16 = 0;
  v11 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v17 = v2 + 1;
    v18 = *(_BYTE *)(v8 + v2);
    *((_QWORD *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0)
      goto LABEL_21;
    v15 += 7;
    v2 = v17;
    v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  if ((PB::Reader::skip(a2) & 1) != 0)
    goto LABEL_80;
  return 0;
}

uint64_t CMMsl::PDRPedestrianClassifierState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  float *v5;
  float *v6;
  float v7;

  v3 = this;
  v4 = *(_BYTE *)(this + 52);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32));
    v4 = *(_BYTE *)(v3 + 52);
  }
  if ((v4 & 4) != 0)
    this = PB::Writer::write(a2);
  v5 = *(float **)(v3 + 8);
  v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7);
  }
  if ((*(_BYTE *)(v3 + 52) & 2) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 40));
  return this;
}

uint64_t CMMsl::PDRPedestrianClassifierState::hash_value(CMMsl::PDRPedestrianClassifierState *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;

  if ((*((_BYTE *)this + 52) & 1) != 0)
  {
    if (*((double *)this + 4) == 0.0)
      v2 = 0;
    else
      v2 = *((_QWORD *)this + 4);
    if ((*((_BYTE *)this + 52) & 4) != 0)
      goto LABEL_3;
  }
  else
  {
    v2 = 0;
    if ((*((_BYTE *)this + 52) & 4) != 0)
    {
LABEL_3:
      v3 = *((unsigned __int8 *)this + 48);
      goto LABEL_9;
    }
  }
  v3 = 0;
LABEL_9:
  v4 = PBHashBytes();
  if ((*((_BYTE *)this + 52) & 2) != 0)
  {
    v5 = *((double *)this + 5);
    if (v5 == 0.0)
      v5 = 0.0;
  }
  else
  {
    v5 = 0.0;
  }
  return v3 ^ v2 ^ *(_QWORD *)&v5 ^ v4;
}

void CMMsl::PDRPlacementClassifierState::~PDRPlacementClassifierState(CMMsl::PDRPlacementClassifierState *this)
{
  void *v2;

  *(_QWORD *)this = &off_25135FB68;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::PDRPlacementClassifierState::~PDRPlacementClassifierState(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::PDRPlacementClassifierState *CMMsl::PDRPlacementClassifierState::PDRPlacementClassifierState(CMMsl::PDRPlacementClassifierState *this, const CMMsl::PDRPlacementClassifierState *a2)
{
  _QWORD *v4;
  char v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  *(_QWORD *)this = &off_25135FB68;
  *((_QWORD *)this + 1) = 0;
  v4 = (_QWORD *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 13) = 0;
  if ((*((_BYTE *)a2 + 52) & 1) != 0)
  {
    v6 = *((_QWORD *)a2 + 4);
    *((_BYTE *)this + 52) = 1;
    *((_QWORD *)this + 4) = v6;
    v5 = 5;
    if ((*((_BYTE *)a2 + 52) & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = 4;
  if ((*((_BYTE *)a2 + 52) & 4) != 0)
  {
LABEL_5:
    v7 = *((_DWORD *)a2 + 12);
    *((_BYTE *)this + 52) = v5;
    *((_DWORD *)this + 12) = v7;
  }
LABEL_6:
  if (this != a2)
    sub_242911380(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  if ((*((_BYTE *)a2 + 52) & 2) != 0)
  {
    v8 = *((_QWORD *)a2 + 5);
    *((_BYTE *)this + 52) |= 2u;
    *((_QWORD *)this + 5) = v8;
  }
  return this;
}

uint64_t CMMsl::PDRPlacementClassifierState::operator=(uint64_t a1, const CMMsl::PDRPlacementClassifierState *a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _BYTE v8[8];
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  if ((const CMMsl::PDRPlacementClassifierState *)a1 != a2)
  {
    CMMsl::PDRPlacementClassifierState::PDRPlacementClassifierState((CMMsl::PDRPlacementClassifierState *)v8, a2);
    v3 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v12;
    v12 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v9 = v4;
    v5 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v10;
    v10 = v5;
    v6 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v11;
    v11 = v6;
    CMMsl::PDRPlacementClassifierState::~PDRPlacementClassifierState((CMMsl::PDRPlacementClassifierState *)v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PDRPlacementClassifierState *a2, CMMsl::PDRPlacementClassifierState *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;

  v3 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v3;
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  v5 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v5;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v7;
  v8 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v8;
  result = *((double *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((double *)a2 + 5) = result;
  return result;
}

uint64_t CMMsl::PDRPlacementClassifierState::PDRPlacementClassifierState(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_25135FB68;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

{
  *(_QWORD *)a1 = &off_25135FB68;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t CMMsl::PDRPlacementClassifierState::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  void (**v11)(CMMsl::PDRPlacementClassifierState *__hidden);
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  if (a1 != a2)
  {
    v11 = &off_25135FB68;
    v3 = *(_QWORD *)(a2 + 24);
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v5 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(a2 + 52) = 0;
    v15 = *(_QWORD *)(a1 + 48);
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v4;
    v12 = v6;
    v7 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v3;
    v13 = v7;
    v8 = *(_OWORD *)(a1 + 32);
    v9 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = v5;
    *(_OWORD *)(a1 + 32) = v9;
    v14 = v8;
    CMMsl::PDRPlacementClassifierState::~PDRPlacementClassifierState((CMMsl::PDRPlacementClassifierState *)&v11);
  }
  return a1;
}

uint64_t CMMsl::PDRPlacementClassifierState::formatText(CMMsl::PDRPlacementClassifierState *this, PB::TextFormatter *a2, const char *a3)
{
  float *v5;
  float *v6;
  float v7;
  char v8;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 52) & 4) != 0)
    PB::TextFormatter::format(a2, "placement");
  v5 = (float *)*((_QWORD *)this + 1);
  v6 = (float *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "placementProbability", v7);
  }
  v8 = *((_BYTE *)this + 52);
  if ((v8 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 4));
    v8 = *((_BYTE *)this + 52);
  }
  if ((v8 & 2) != 0)
    PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 5));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::PDRPlacementClassifierState::readFrom(CMMsl::PDRPlacementClassifierState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  _DWORD *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  unint64_t v46;
  char v47;
  unint64_t v48;
  char *v49;
  _DWORD *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  int v58;
  unint64_t v59;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      break;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 52) |= 1u;
        v19 = *((_QWORD *)a2 + 1);
        if (v19 > 0xFFFFFFFFFFFFFFF7 || v19 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_93;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v19);
        goto LABEL_60;
      case 2u:
        *((_BYTE *)this + 52) |= 4u;
        v20 = *((_QWORD *)a2 + 1);
        v21 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          do
          {
            v26 = v20 + 1;
            *((_QWORD *)a2 + 1) = v20 + 1;
            v27 = *(_BYTE *)(v22 + v20);
            v25 |= (unint64_t)(v27 & 0x7F) << v23;
            if ((v27 & 0x80) == 0)
              goto LABEL_82;
            v23 += 7;
            v20 = v26;
            v14 = v24++ > 8;
          }
          while (!v14);
LABEL_68:
          LODWORD(v25) = 0;
          goto LABEL_82;
        }
        v44 = 0;
        v45 = 0;
        v25 = 0;
        if (v21 <= v20)
          v21 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v21 == v20)
          {
            LODWORD(v25) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v46 = v20 + 1;
            v47 = *(_BYTE *)(v22 + v20);
            *((_QWORD *)a2 + 1) = v46;
            v25 |= (unint64_t)(v47 & 0x7F) << v44;
            if (v47 < 0)
            {
              v44 += 7;
              v20 = v46;
              v14 = v45++ > 8;
              if (v14)
                goto LABEL_68;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v25) = 0;
          }
          break;
        }
LABEL_82:
        *((_DWORD *)this + 12) = v25;
        break;
      case 3u:
        if ((v11 & 7) == 2)
        {
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v28 = *((_QWORD *)a2 + 1);
          v29 = *((_QWORD *)a2 + 2);
          while (v28 < v29 && !*((_BYTE *)a2 + 24))
          {
            v31 = (char *)*((_QWORD *)this + 2);
            v30 = *((_QWORD *)this + 3);
            if ((unint64_t)v31 >= v30)
            {
              v33 = (char *)*((_QWORD *)this + 1);
              v34 = (v31 - v33) >> 2;
              v35 = v34 + 1;
              if ((unint64_t)(v34 + 1) >> 62)
                goto LABEL_104;
              v36 = v30 - (_QWORD)v33;
              if (v36 >> 1 > v35)
                v35 = v36 >> 1;
              if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
                v37 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v37 = v35;
              if (v37)
              {
                v37 = (unint64_t)sub_2429114B8(v37);
                v33 = (char *)*((_QWORD *)this + 1);
                v31 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v38 = 0;
              }
              v39 = (_DWORD *)(v37 + 4 * v34);
              *v39 = 0;
              v32 = v39 + 1;
              while (v31 != v33)
              {
                v40 = *((_DWORD *)v31 - 1);
                v31 -= 4;
                *--v39 = v40;
              }
              *((_QWORD *)this + 1) = v39;
              *((_QWORD *)this + 2) = v32;
              *((_QWORD *)this + 3) = v37 + 4 * v38;
              if (v33)
                operator delete(v33);
            }
            else
            {
              *(_DWORD *)v31 = 0;
              v32 = v31 + 4;
            }
            *((_QWORD *)this + 2) = v32;
            v41 = *((_QWORD *)a2 + 1);
            if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((_QWORD *)a2 + 2))
            {
              *((_BYTE *)a2 + 24) = 1;
              break;
            }
            *(v32 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v41);
            v29 = *((_QWORD *)a2 + 2);
            v28 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v28;
          }
          PB::Reader::recallMark();
        }
        else
        {
          v49 = (char *)*((_QWORD *)this + 2);
          v48 = *((_QWORD *)this + 3);
          if ((unint64_t)v49 >= v48)
          {
            v51 = (char *)*((_QWORD *)this + 1);
            v52 = (v49 - v51) >> 2;
            v53 = v52 + 1;
            if ((unint64_t)(v52 + 1) >> 62)
LABEL_104:
              sub_242729A44();
            v54 = v48 - (_QWORD)v51;
            if (v54 >> 1 > v53)
              v53 = v54 >> 1;
            if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL)
              v55 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v55 = v53;
            if (v55)
            {
              v55 = (unint64_t)sub_2429114B8(v55);
              v51 = (char *)*((_QWORD *)this + 1);
              v49 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v56 = 0;
            }
            v57 = (_DWORD *)(v55 + 4 * v52);
            *v57 = 0;
            v50 = v57 + 1;
            while (v49 != v51)
            {
              v58 = *((_DWORD *)v49 - 1);
              v49 -= 4;
              *--v57 = v58;
            }
            *((_QWORD *)this + 1) = v57;
            *((_QWORD *)this + 2) = v50;
            *((_QWORD *)this + 3) = v55 + 4 * v56;
            if (v51)
              operator delete(v51);
          }
          else
          {
            *(_DWORD *)v49 = 0;
            v50 = v49 + 4;
          }
          *((_QWORD *)this + 2) = v50;
          v59 = *((_QWORD *)a2 + 1);
          if (v59 <= 0xFFFFFFFFFFFFFFFBLL && v59 + 4 <= *((_QWORD *)a2 + 2))
          {
            *(v50 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v59);
            v43 = *((_QWORD *)a2 + 1) + 4;
LABEL_61:
            *((_QWORD *)a2 + 1) = v43;
          }
          else
          {
LABEL_93:
            *((_BYTE *)a2 + 24) = 1;
          }
        }
        break;
      case 4u:
        *((_BYTE *)this + 52) |= 2u;
        v42 = *((_QWORD *)a2 + 1);
        if (v42 > 0xFFFFFFFFFFFFFFF7 || v42 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_93;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v42);
LABEL_60:
        v43 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_61;
      default:
        goto LABEL_19;
    }
LABEL_94:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v15 = 0;
  v16 = 0;
  v11 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v17 = v2 + 1;
    v18 = *(_BYTE *)(v8 + v2);
    *((_QWORD *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0)
      goto LABEL_21;
    v15 += 7;
    v2 = v17;
    v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  if ((PB::Reader::skip(a2) & 1) != 0)
    goto LABEL_94;
  return 0;
}

uint64_t CMMsl::PDRPlacementClassifierState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  float *v5;
  float *v6;
  float v7;

  v3 = this;
  v4 = *(_BYTE *)(this + 52);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32));
    v4 = *(_BYTE *)(v3 + 52);
  }
  if ((v4 & 4) != 0)
    this = PB::Writer::writeVarInt(a2);
  v5 = *(float **)(v3 + 8);
  v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7);
  }
  if ((*(_BYTE *)(v3 + 52) & 2) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 40));
  return this;
}

uint64_t CMMsl::PDRPlacementClassifierState::hash_value(CMMsl::PDRPlacementClassifierState *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;

  if ((*((_BYTE *)this + 52) & 1) != 0)
  {
    if (*((double *)this + 4) == 0.0)
      v2 = 0;
    else
      v2 = *((_QWORD *)this + 4);
    if ((*((_BYTE *)this + 52) & 4) != 0)
      goto LABEL_3;
  }
  else
  {
    v2 = 0;
    if ((*((_BYTE *)this + 52) & 4) != 0)
    {
LABEL_3:
      v3 = *((unsigned int *)this + 12);
      goto LABEL_9;
    }
  }
  v3 = 0;
LABEL_9:
  v4 = PBHashBytes();
  if ((*((_BYTE *)this + 52) & 2) != 0)
  {
    v5 = *((double *)this + 5);
    if (v5 == 0.0)
      v5 = 0.0;
  }
  else
  {
    v5 = 0.0;
  }
  return v3 ^ v2 ^ *(_QWORD *)&v5 ^ v4;
}

void CMMsl::PDRSpeedEstimatorState::~PDRSpeedEstimatorState(CMMsl::PDRSpeedEstimatorState *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::PDRSpeedEstimatorState::PDRSpeedEstimatorState(CMMsl::PDRSpeedEstimatorState *this, const CMMsl::PDRSpeedEstimatorState *a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)this = &off_25135FBA0;
  *((_DWORD *)this + 8) = 0;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 1) != 0)
  {
    result = *((double *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 32) = 1;
    *((double *)this + 1) = result;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *((_BYTE *)this + 32) = v3;
    *((_DWORD *)this + 6) = LODWORD(result);
    v2 = *((_BYTE *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0)
      return result;
LABEL_10:
    result = *((double *)a2 + 2);
    *((_BYTE *)this + 32) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
  LODWORD(result) = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *((_BYTE *)this + 32) = v3;
  *((_DWORD *)this + 7) = LODWORD(result);
  if ((*((_BYTE *)a2 + 32) & 2) != 0)
    goto LABEL_10;
  return result;
}

uint64_t CMMsl::PDRSpeedEstimatorState::operator=(uint64_t a1, const CMMsl::PDRSpeedEstimatorState *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  _BYTE v7[8];
  __int128 v8;
  uint64_t v9;
  int v10;

  if ((const CMMsl::PDRSpeedEstimatorState *)a1 != a2)
  {
    CMMsl::PDRSpeedEstimatorState::PDRSpeedEstimatorState((CMMsl::PDRSpeedEstimatorState *)v7, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v9;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PDRSpeedEstimatorState *a2, CMMsl::PDRSpeedEstimatorState *a3)
{
  int v3;
  uint64_t v4;
  double result;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::PDRSpeedEstimatorState::PDRSpeedEstimatorState(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135FBA0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135FBA0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::PDRSpeedEstimatorState::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  void (**v8)(CMMsl::PDRSpeedEstimatorState *__hidden);
  __int128 v9;
  uint64_t v10;
  int v11;

  if (a1 != a2)
  {
    v8 = &off_25135FBA0;
    v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    v11 = *(_DWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    v6 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    v9 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::PDRSpeedEstimatorState::formatText(CMMsl::PDRSpeedEstimatorState *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "speed", *((float *)this + 6));
    v5 = *((_BYTE *)this + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
      if ((*((_BYTE *)this + 32) & 2) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "speedUnc", *((float *)this + 7));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 2) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PDRSpeedEstimatorState::readFrom(CMMsl::PDRSpeedEstimatorState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_39;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 32) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_35;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_37;
      case 2u:
        *((_BYTE *)this + 32) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_35;
        *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_32;
      case 3u:
        *((_BYTE *)this + 32) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_35;
        *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_32:
        v2 = *((_QWORD *)a2 + 1) + 4;
        goto LABEL_38;
      case 4u:
        *((_BYTE *)this + 32) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_37:
          v2 = *((_QWORD *)a2 + 1) + 8;
LABEL_38:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_35:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_39:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::PDRSpeedEstimatorState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 16));
  }
LABEL_8:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 16));
  return this;
}

uint64_t CMMsl::PDRSpeedEstimatorState::hash_value(CMMsl::PDRSpeedEstimatorState *this)
{
  double v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  double v6;

  if ((*((_BYTE *)this + 32) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 32) & 4) != 0)
      goto LABEL_3;
LABEL_15:
    v3 = 0;
    if ((*((_BYTE *)this + 32) & 8) != 0)
      goto LABEL_6;
    goto LABEL_16;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 32) & 4) == 0)
    goto LABEL_15;
LABEL_3:
  v2 = *((float *)this + 6);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 32) & 8) != 0)
  {
LABEL_6:
    v4 = *((float *)this + 7);
    v5 = LODWORD(v4);
    if (v4 == 0.0)
      v5 = 0;
    if ((*((_BYTE *)this + 32) & 2) != 0)
      goto LABEL_9;
LABEL_17:
    v6 = 0.0;
    return v3 ^ *(_QWORD *)&v1 ^ v5 ^ *(_QWORD *)&v6;
  }
LABEL_16:
  v5 = 0;
  if ((*((_BYTE *)this + 32) & 2) == 0)
    goto LABEL_17;
LABEL_9:
  v6 = *((double *)this + 2);
  if (v6 == 0.0)
    v6 = 0.0;
  return v3 ^ *(_QWORD *)&v1 ^ v5 ^ *(_QWORD *)&v6;
}

void CMMsl::PDRSpeedEstimatorStateDebug::~PDRSpeedEstimatorStateDebug(CMMsl::PDRSpeedEstimatorStateDebug *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::PDRSpeedEstimatorStateDebug::PDRSpeedEstimatorStateDebug(CMMsl::PDRSpeedEstimatorStateDebug *this, const CMMsl::PDRSpeedEstimatorStateDebug *a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)this = &off_25135FBD8;
  *((_DWORD *)this + 8) = 0;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 1) != 0)
  {
    result = *((double *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 32) = 1;
    *((double *)this + 1) = result;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *((_BYTE *)this + 32) = v3;
    *((_DWORD *)this + 6) = LODWORD(result);
    v2 = *((_BYTE *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0)
      return result;
LABEL_10:
    result = *((double *)a2 + 2);
    *((_BYTE *)this + 32) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
  LODWORD(result) = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *((_BYTE *)this + 32) = v3;
  *((_DWORD *)this + 7) = LODWORD(result);
  if ((*((_BYTE *)a2 + 32) & 2) != 0)
    goto LABEL_10;
  return result;
}

uint64_t CMMsl::PDRSpeedEstimatorStateDebug::operator=(uint64_t a1, const CMMsl::PDRSpeedEstimatorStateDebug *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  _BYTE v7[8];
  __int128 v8;
  uint64_t v9;
  int v10;

  if ((const CMMsl::PDRSpeedEstimatorStateDebug *)a1 != a2)
  {
    CMMsl::PDRSpeedEstimatorStateDebug::PDRSpeedEstimatorStateDebug((CMMsl::PDRSpeedEstimatorStateDebug *)v7, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v9;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PDRSpeedEstimatorStateDebug *a2, CMMsl::PDRSpeedEstimatorStateDebug *a3)
{
  int v3;
  uint64_t v4;
  double result;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::PDRSpeedEstimatorStateDebug::PDRSpeedEstimatorStateDebug(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135FBD8;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135FBD8;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::PDRSpeedEstimatorStateDebug::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  void (**v8)(CMMsl::PDRSpeedEstimatorStateDebug *__hidden);
  __int128 v9;
  uint64_t v10;
  int v11;

  if (a1 != a2)
  {
    v8 = &off_25135FBD8;
    v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    v11 = *(_DWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    v6 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    v9 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::PDRSpeedEstimatorStateDebug::formatText(CMMsl::PDRSpeedEstimatorStateDebug *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "speed", *((float *)this + 6));
    v5 = *((_BYTE *)this + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
      if ((*((_BYTE *)this + 32) & 2) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "speedUnc", *((float *)this + 7));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 2) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PDRSpeedEstimatorStateDebug::readFrom(CMMsl::PDRSpeedEstimatorStateDebug *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_39;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 32) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_35;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_37;
      case 2u:
        *((_BYTE *)this + 32) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_35;
        *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_32;
      case 3u:
        *((_BYTE *)this + 32) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_35;
        *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_32:
        v2 = *((_QWORD *)a2 + 1) + 4;
        goto LABEL_38;
      case 4u:
        *((_BYTE *)this + 32) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_37:
          v2 = *((_QWORD *)a2 + 1) + 8;
LABEL_38:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_35:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_39:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::PDRSpeedEstimatorStateDebug::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 16));
  }
LABEL_8:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 16));
  return this;
}

uint64_t CMMsl::PDRSpeedEstimatorStateDebug::hash_value(CMMsl::PDRSpeedEstimatorStateDebug *this)
{
  double v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  double v6;

  if ((*((_BYTE *)this + 32) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 32) & 4) != 0)
      goto LABEL_3;
LABEL_15:
    v3 = 0;
    if ((*((_BYTE *)this + 32) & 8) != 0)
      goto LABEL_6;
    goto LABEL_16;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 32) & 4) == 0)
    goto LABEL_15;
LABEL_3:
  v2 = *((float *)this + 6);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 32) & 8) != 0)
  {
LABEL_6:
    v4 = *((float *)this + 7);
    v5 = LODWORD(v4);
    if (v4 == 0.0)
      v5 = 0;
    if ((*((_BYTE *)this + 32) & 2) != 0)
      goto LABEL_9;
LABEL_17:
    v6 = 0.0;
    return v3 ^ *(_QWORD *)&v1 ^ v5 ^ *(_QWORD *)&v6;
  }
LABEL_16:
  v5 = 0;
  if ((*((_BYTE *)this + 32) & 2) == 0)
    goto LABEL_17;
LABEL_9:
  v6 = *((double *)this + 2);
  if (v6 == 0.0)
    v6 = 0.0;
  return v3 ^ *(_QWORD *)&v1 ^ v5 ^ *(_QWORD *)&v6;
}

void CMMsl::PDRVelocityEstimatorState::~PDRVelocityEstimatorState(CMMsl::PDRVelocityEstimatorState *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::PDRVelocityEstimatorState::PDRVelocityEstimatorState(CMMsl::PDRVelocityEstimatorState *this, const CMMsl::PDRVelocityEstimatorState *a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)this = &off_25135FC10;
  *((_DWORD *)this + 12) = 0;
  v2 = *((_BYTE *)a2 + 48);
  if ((v2 & 1) != 0)
  {
    result = *((double *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 48) = 1;
    *((double *)this + 1) = result;
    v2 = *((_BYTE *)a2 + 48);
    if ((v2 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 48) & 0x20) != 0)
  {
LABEL_5:
    LODWORD(result) = *((_DWORD *)a2 + 9);
    v3 |= 0x20u;
    *((_BYTE *)this + 48) = v3;
    *((_DWORD *)this + 9) = LODWORD(result);
    v2 = *((_BYTE *)a2 + 48);
  }
LABEL_6:
  if ((v2 & 0x40) != 0)
  {
    LODWORD(result) = *((_DWORD *)a2 + 10);
    v3 |= 0x40u;
    *((_BYTE *)this + 48) = v3;
    *((_DWORD *)this + 10) = LODWORD(result);
    v2 = *((_BYTE *)a2 + 48);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0)
        goto LABEL_9;
      goto LABEL_15;
    }
  }
  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(result) = *((_DWORD *)a2 + 11);
  v3 |= 0x80u;
  *((_BYTE *)this + 48) = v3;
  *((_DWORD *)this + 11) = LODWORD(result);
  v2 = *((_BYTE *)a2 + 48);
  if ((v2 & 4) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0)
      goto LABEL_10;
    goto LABEL_16;
  }
LABEL_15:
  LODWORD(result) = *((_DWORD *)a2 + 6);
  v3 |= 4u;
  *((_BYTE *)this + 48) = v3;
  *((_DWORD *)this + 6) = LODWORD(result);
  v2 = *((_BYTE *)a2 + 48);
  if ((v2 & 8) == 0)
  {
LABEL_10:
    if ((v2 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_17;
  }
LABEL_16:
  LODWORD(result) = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *((_BYTE *)this + 48) = v3;
  *((_DWORD *)this + 7) = LODWORD(result);
  v2 = *((_BYTE *)a2 + 48);
  if ((v2 & 0x10) == 0)
  {
LABEL_11:
    if ((v2 & 2) == 0)
      return result;
LABEL_18:
    result = *((double *)a2 + 2);
    *((_BYTE *)this + 48) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
LABEL_17:
  LODWORD(result) = *((_DWORD *)a2 + 8);
  v3 |= 0x10u;
  *((_BYTE *)this + 48) = v3;
  *((_DWORD *)this + 8) = LODWORD(result);
  if ((*((_BYTE *)a2 + 48) & 2) != 0)
    goto LABEL_18;
  return result;
}

uint64_t CMMsl::PDRVelocityEstimatorState::operator=(uint64_t a1, const CMMsl::PDRVelocityEstimatorState *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  _BYTE v8[8];
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  int v12;

  if ((const CMMsl::PDRVelocityEstimatorState *)a1 != a2)
  {
    CMMsl::PDRVelocityEstimatorState::PDRVelocityEstimatorState((CMMsl::PDRVelocityEstimatorState *)v8, a2);
    v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v12;
    v12 = v3;
    v4 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v11;
    v11 = v4;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v9 = v6;
    v10 = v5;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PDRVelocityEstimatorState *a2, CMMsl::PDRVelocityEstimatorState *a3)
{
  int v3;
  uint64_t v4;
  double result;

  v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::PDRVelocityEstimatorState::PDRVelocityEstimatorState(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135FC10;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135FC10;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::PDRVelocityEstimatorState::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  void (**v9)(CMMsl::PDRVelocityEstimatorState *__hidden);
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  int v13;

  if (a1 != a2)
  {
    v9 = &off_25135FC10;
    v3 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a2 + 48) = 0;
    v13 = *(_DWORD *)(a1 + 48);
    v12 = *(_QWORD *)(a1 + 40);
    v4 = *(_OWORD *)(a1 + 24);
    v5 = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = v5;
    v6 = *(_OWORD *)(a1 + 8);
    v7 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 48) = v3;
    *(_OWORD *)(a1 + 8) = v7;
    v10 = v6;
    v11 = v4;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::PDRVelocityEstimatorState::formatText(CMMsl::PDRVelocityEstimatorState *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 48);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    v5 = *((_BYTE *)this + 48);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*((_BYTE *)this + 48) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 2));
  v5 = *((_BYTE *)this + 48);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "velocityUncX", *((float *)this + 6));
  v5 = *((_BYTE *)this + 48);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "velocityUncY", *((float *)this + 7));
  v5 = *((_BYTE *)this + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "velocityUncZ", *((float *)this + 8));
  v5 = *((_BYTE *)this + 48);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
LABEL_16:
    PB::TextFormatter::format(a2, "velocityY", *((float *)this + 10));
    if ((*((_BYTE *)this + 48) & 0x80) == 0)
      return PB::TextFormatter::endObject(a2);
LABEL_17:
    PB::TextFormatter::format(a2, "velocityZ", *((float *)this + 11));
    return PB::TextFormatter::endObject(a2);
  }
LABEL_15:
  PB::TextFormatter::format(a2, "velocityX", *((float *)this + 9));
  v5 = *((_BYTE *)this + 48);
  if ((v5 & 0x40) != 0)
    goto LABEL_16;
LABEL_8:
  if (v5 < 0)
    goto LABEL_17;
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PDRVelocityEstimatorState::readFrom(CMMsl::PDRVelocityEstimatorState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_51;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 48) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_47;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_44;
      case 2u:
        *((_BYTE *)this + 48) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_47;
        *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_49;
      case 3u:
        *((_BYTE *)this + 48) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_47;
        *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_49;
      case 4u:
        *((_BYTE *)this + 48) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_47;
        *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_49;
      case 5u:
        *((_BYTE *)this + 48) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_47;
        *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_49;
      case 6u:
        *((_BYTE *)this + 48) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_47;
        *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_49;
      case 7u:
        *((_BYTE *)this + 48) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_47;
        *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_49:
        v2 = *((_QWORD *)a2 + 1) + 4;
        goto LABEL_50;
      case 8u:
        *((_BYTE *)this + 48) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
        {
LABEL_47:
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_44:
          v2 = *((_QWORD *)a2 + 1) + 8;
LABEL_50:
          *((_QWORD *)a2 + 1) = v2;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_51:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::PDRVelocityEstimatorState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 48);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 48);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(this + 48) & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_8:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 16));
  }
LABEL_16:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  if ((*(_BYTE *)(v3 + 48) & 2) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 16));
  return this;
}

uint64_t CMMsl::PDRVelocityEstimatorState::hash_value(CMMsl::PDRVelocityEstimatorState *this)
{
  double v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  double v14;

  if ((*((_BYTE *)this + 48) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 48) & 0x20) != 0)
      goto LABEL_3;
LABEL_27:
    v3 = 0;
    if ((*((_BYTE *)this + 48) & 0x40) != 0)
      goto LABEL_6;
LABEL_28:
    v5 = 0;
    if ((*((_BYTE *)this + 48) & 0x80) != 0)
      goto LABEL_9;
LABEL_29:
    v7 = 0;
    if ((*((_BYTE *)this + 48) & 4) != 0)
      goto LABEL_12;
LABEL_30:
    v9 = 0;
    if ((*((_BYTE *)this + 48) & 8) != 0)
      goto LABEL_15;
LABEL_31:
    v11 = 0;
    if ((*((_BYTE *)this + 48) & 0x10) != 0)
      goto LABEL_18;
    goto LABEL_32;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 48) & 0x20) == 0)
    goto LABEL_27;
LABEL_3:
  v2 = *((float *)this + 9);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 48) & 0x40) == 0)
    goto LABEL_28;
LABEL_6:
  v4 = *((float *)this + 10);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((*((_BYTE *)this + 48) & 0x80) == 0)
    goto LABEL_29;
LABEL_9:
  v6 = *((float *)this + 11);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  if ((*((_BYTE *)this + 48) & 4) == 0)
    goto LABEL_30;
LABEL_12:
  v8 = *((float *)this + 6);
  v9 = LODWORD(v8);
  if (v8 == 0.0)
    v9 = 0;
  if ((*((_BYTE *)this + 48) & 8) == 0)
    goto LABEL_31;
LABEL_15:
  v10 = *((float *)this + 7);
  v11 = LODWORD(v10);
  if (v10 == 0.0)
    v11 = 0;
  if ((*((_BYTE *)this + 48) & 0x10) != 0)
  {
LABEL_18:
    v12 = *((float *)this + 8);
    v13 = LODWORD(v12);
    if (v12 == 0.0)
      v13 = 0;
    if ((*((_BYTE *)this + 48) & 2) != 0)
      goto LABEL_21;
LABEL_33:
    v14 = 0.0;
    return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13 ^ *(_QWORD *)&v14;
  }
LABEL_32:
  v13 = 0;
  if ((*((_BYTE *)this + 48) & 2) == 0)
    goto LABEL_33;
LABEL_21:
  v14 = *((double *)this + 2);
  if (v14 == 0.0)
    v14 = 0.0;
  return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13 ^ *(_QWORD *)&v14;
}

void CMMsl::PTSConsumedGNSS::~PTSConsumedGNSS(CMMsl::PTSConsumedGNSS *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_25135FC48;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  PB::Base::~Base(this);
}

{
  CMMsl::PTSConsumedGNSS::~PTSConsumedGNSS(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::PTSConsumedGNSS *CMMsl::PTSConsumedGNSS::PTSConsumedGNSS(CMMsl::PTSConsumedGNSS *this, const CMMsl::LocationOscarEmu **a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const CMMsl::LocationOscarEmu *v9;
  int v10;
  uint64_t v11;

  *(_QWORD *)this = &off_25135FC48;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  if (a2[2])
  {
    v5 = operator new();
    v6 = CMMsl::LocationOscarEmu::LocationOscarEmu(v5, a2[2]);
    v7 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if (a2[1])
  {
    v8 = operator new();
    v9 = a2[1];
    *(_QWORD *)v8 = &off_251360D20;
    *(_QWORD *)(v8 + 8) = 0;
    if ((*((_BYTE *)v9 + 12) & 1) != 0)
    {
      v10 = *((_DWORD *)v9 + 2);
      *(_BYTE *)(v8 + 12) = 1;
      *(_DWORD *)(v8 + 8) = v10;
    }
    v11 = *v4;
    *v4 = v8;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  return this;
}

uint64_t CMMsl::PTSConsumedGNSS::operator=(uint64_t a1, const CMMsl::LocationOscarEmu **a2)
{
  __int128 v3;
  _BYTE v5[8];
  __int128 v6;

  if ((const CMMsl::LocationOscarEmu **)a1 != a2)
  {
    CMMsl::PTSConsumedGNSS::PTSConsumedGNSS((CMMsl::PTSConsumedGNSS *)v5, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    v6 = v3;
    CMMsl::PTSConsumedGNSS::~PTSConsumedGNSS((CMMsl::PTSConsumedGNSS *)v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::PTSConsumedGNSS *a2, CMMsl::PTSConsumedGNSS *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  return this;
}

_QWORD *CMMsl::PTSConsumedGNSS::PTSConsumedGNSS(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  a1[1] = 0;
  v4 = a1 + 1;
  *a1 = &off_25135FC48;
  a1[2] = 0;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v6 = a1[2];
  a1[2] = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v8 = *v4;
  *v4 = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return a1;
}

uint64_t CMMsl::PTSConsumedGNSS::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  void (**v6)(CMMsl::PTSConsumedGNSS *__hidden);
  __int128 v7;

  if (a1 != a2)
  {
    v6 = &off_25135FC48;
    v3 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v3;
    v7 = v4;
    CMMsl::PTSConsumedGNSS::~PTSConsumedGNSS((CMMsl::PTSConsumedGNSS *)&v6);
  }
  return a1;
}

uint64_t CMMsl::PTSConsumedGNSS::formatText(CMMsl::PTSConsumedGNSS *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "signalEnvironment");
  v6 = *((_QWORD *)this + 2);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PTSConsumedGNSS::readFrom(CMMsl::PTSConsumedGNSS *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          v14 = v16++ > 8;
          if (v14)
            goto LABEL_25;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_25;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        v19 = operator new();
        *(_QWORD *)v19 = &off_251360D20;
        *(_QWORD *)(v19 + 8) = 0;
        v22 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v22)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          v19 = *((_QWORD *)this + 1);
        }
      }
      else
      {
        if ((v11 >> 3) != 1)
        {
LABEL_25:
          result = PB::Reader::skip(a2);
          if (!(_DWORD)result)
            return result;
          goto LABEL_32;
        }
        v19 = operator new();
        *(_QWORD *)v19 = &off_25135F0B0;
        *(_DWORD *)(v19 + 100) = 0;
        v20 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = *((_QWORD *)this + 2);
        }
      }
      if (!PB::Reader::placeMark()
        || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
      {
        return 0;
      }
      PB::Reader::recallMark();
LABEL_32:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::PTSConsumedGNSS::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  const PB::Base *v5;

  v3 = this;
  v4 = *(const PB::Base **)(this + 16);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = *(const PB::Base **)(v3 + 8);
  if (v5)
    return PB::Writer::writeSubmessage(a2, v5);
  return this;
}

unint64_t CMMsl::PTSConsumedGNSS::hash_value(CMMsl::PTSConsumedGNSS *this)
{
  unint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    v2 = CMMsl::LocationOscarEmu::hash_value((CMMsl::LocationOscarEmu *)v2);
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    v4 = *(_BYTE *)(v3 + 12);
    v3 = *(int *)(v3 + 8);
    if ((v4 & 1) == 0)
      v3 = 0;
  }
  return v3 ^ v2;
}

_QWORD *CMMsl::PTSConsumedGNSS::makeSuper(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[2])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135F0B0;
    *(_DWORD *)(v2 + 100) = 0;
    this = (_QWORD *)v1[2];
    v1[2] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::PTSConsumedGNSS::makeSignalEnvironment(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[1])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_251360D20;
    v2[1] = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void CMMsl::PTSForwardPropagation::~PTSForwardPropagation(CMMsl::PTSForwardPropagation *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_25135FC80;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_25135FC80;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_25135FC80;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::PTSForwardPropagation *CMMsl::PTSForwardPropagation::PTSForwardPropagation(CMMsl::PTSForwardPropagation *this, const CMMsl::PTSForwardPropagation *a2)
{
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)this = &off_25135FC80;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 16) = 0;
  v4 = *((_BYTE *)a2 + 64);
  if ((v4 & 0x20) != 0)
  {
    v6 = *((_QWORD *)a2 + 7);
    v5 = 32;
    *((_BYTE *)this + 64) = 32;
    *((_QWORD *)this + 7) = v6;
    v4 = *((_BYTE *)a2 + 64);
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = 0;
  if ((*((_BYTE *)a2 + 64) & 8) != 0)
  {
LABEL_5:
    v7 = *((_QWORD *)a2 + 4);
    v5 |= 8u;
    *((_BYTE *)this + 64) = v5;
    *((_QWORD *)this + 4) = v7;
    v4 = *((_BYTE *)a2 + 64);
  }
LABEL_6:
  if ((v4 & 0x10) != 0)
  {
    v14 = *((_QWORD *)a2 + 5);
    v5 |= 0x10u;
    *((_BYTE *)this + 64) = v5;
    *((_QWORD *)this + 5) = v14;
    v4 = *((_BYTE *)a2 + 64);
    if ((v4 & 4) == 0)
    {
LABEL_8:
      if ((v4 & 1) == 0)
        goto LABEL_9;
      goto LABEL_19;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_8;
  }
  v15 = *((_QWORD *)a2 + 3);
  v5 |= 4u;
  *((_BYTE *)this + 64) = v5;
  *((_QWORD *)this + 3) = v15;
  v4 = *((_BYTE *)a2 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
LABEL_19:
  v16 = *((_QWORD *)a2 + 1);
  v5 |= 1u;
  *((_BYTE *)this + 64) = v5;
  *((_QWORD *)this + 1) = v16;
  if ((*((_BYTE *)a2 + 64) & 2) != 0)
  {
LABEL_10:
    v8 = *((_QWORD *)a2 + 2);
    *((_BYTE *)this + 64) = v5 | 2;
    *((_QWORD *)this + 2) = v8;
  }
LABEL_11:
  if (*((_QWORD *)a2 + 6))
  {
    v9 = operator new();
    v10 = *((_QWORD *)a2 + 6);
    *(_QWORD *)v9 = &off_251360D20;
    *(_QWORD *)(v9 + 8) = 0;
    if ((*(_BYTE *)(v10 + 12) & 1) != 0)
    {
      v11 = *(_DWORD *)(v10 + 8);
      *(_BYTE *)(v9 + 12) = 1;
      *(_DWORD *)(v9 + 8) = v11;
    }
    v12 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = v9;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  return this;
}

uint64_t CMMsl::PTSForwardPropagation::operator=(uint64_t a1, const CMMsl::PTSForwardPropagation *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  void (**v10)(CMMsl::PTSForwardPropagation *__hidden);
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  if ((const CMMsl::PTSForwardPropagation *)a1 != a2)
  {
    CMMsl::PTSForwardPropagation::PTSForwardPropagation((CMMsl::PTSForwardPropagation *)&v10, a2);
    v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v16;
    v16 = v3;
    v4 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v15;
    v15 = v4;
    v5 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v13;
    v13 = v5;
    v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v11;
    v11 = v7;
    v12 = v6;
    v8 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v14;
    v10 = &off_25135FC80;
    v14 = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PTSForwardPropagation *a2, CMMsl::PTSForwardPropagation *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  uint64_t v10;

  v3 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v4;
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v5;
  v6 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v8;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  v10 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v10;
  return result;
}

uint64_t CMMsl::PTSForwardPropagation::PTSForwardPropagation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_25135FC80;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  v4 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::PTSForwardPropagation::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  void (**v13)(CMMsl::PTSForwardPropagation *__hidden);
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(a2 + 64) = 0;
    v4 = *(_QWORD *)(a2 + 56);
    v5 = *(_QWORD *)(a2 + 40);
    v6 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a2 + 48) = 0;
    v19 = *(_DWORD *)(a1 + 64);
    v18 = *(_QWORD *)(a1 + 56);
    v16 = *(_QWORD *)(a1 + 40);
    v7 = *(_OWORD *)(a1 + 24);
    v8 = *(_OWORD *)(a2 + 8);
    v9 = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 64) = v3;
    *(_QWORD *)(a1 + 56) = v4;
    *(_QWORD *)(a1 + 40) = v5;
    *(_OWORD *)(a1 + 24) = v9;
    v10 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v14 = v10;
    v15 = v7;
    v11 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v6;
    v13 = &off_25135FC80;
    v17 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    PB::Base::~Base((PB::Base *)&v13);
  }
  return a1;
}

uint64_t CMMsl::PTSForwardPropagation::formatText(CMMsl::PTSForwardPropagation *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;
  uint64_t v6;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 64);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "course", *((double *)this + 1));
    v5 = *((_BYTE *)this + 64);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((*((_BYTE *)this + 64) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "courseAccuracy", *((double *)this + 2));
  v5 = *((_BYTE *)this + 64);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "horizontalAccuracy", *((double *)this + 3));
  v5 = *((_BYTE *)this + 64);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "latitude", *((double *)this + 4));
  if ((*((_BYTE *)this + 64) & 0x10) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "longitude", *((double *)this + 5));
LABEL_7:
  v6 = *((_QWORD *)this + 6);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "signalEnvironment");
  if ((*((_BYTE *)this + 64) & 0x20) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 7));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PTSForwardPropagation::readFrom(CMMsl::PTSForwardPropagation *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_21:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 64) |= 0x20u;
          v20 = *((_QWORD *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_40;
          *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v20);
          goto LABEL_47;
        case 2u:
          *((_BYTE *)this + 64) |= 8u;
          v21 = *((_QWORD *)a2 + 1);
          if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_40;
          *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v21);
          goto LABEL_47;
        case 3u:
          *((_BYTE *)this + 64) |= 0x10u;
          v22 = *((_QWORD *)a2 + 1);
          if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_40;
          *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v22);
          goto LABEL_47;
        case 4u:
          *((_BYTE *)this + 64) |= 4u;
          v23 = *((_QWORD *)a2 + 1);
          if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_40;
          *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v23);
          goto LABEL_47;
        case 5u:
          *((_BYTE *)this + 64) |= 1u;
          v24 = *((_QWORD *)a2 + 1);
          if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_40;
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v24);
          goto LABEL_47;
        case 6u:
          *((_BYTE *)this + 64) |= 2u;
          v25 = *((_QWORD *)a2 + 1);
          if (v25 <= 0xFFFFFFFFFFFFFFF7 && v25 + 8 <= *((_QWORD *)a2 + 2))
          {
            *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v25);
LABEL_47:
            *((_QWORD *)a2 + 1) += 8;
          }
          else
          {
LABEL_40:
            *((_BYTE *)a2 + 24) = 1;
          }
          goto LABEL_48;
        case 7u:
          v26 = (_QWORD *)operator new();
          *v26 = &off_251360D20;
          v26[1] = 0;
          v27 = *((_QWORD *)this + 6);
          *((_QWORD *)this + 6) = v26;
          if (v27)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
            v26 = (_QWORD *)*((_QWORD *)this + 6);
          }
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(_QWORD *, PB::Reader *))(*v26 + 16))(v26, a2) & 1) == 0)
          {
            return 0;
          }
          PB::Reader::recallMark();
          break;
        default:
          goto LABEL_19;
      }
      goto LABEL_48;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_21;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    result = PB::Reader::skip(a2);
    if (!(_DWORD)result)
      return result;
LABEL_48:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
}

uint64_t CMMsl::PTSForwardPropagation::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  const PB::Base *v5;

  v3 = this;
  v4 = *(_BYTE *)(this + 64);
  if ((v4 & 0x20) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 56));
    v4 = *(_BYTE *)(v3 + 64);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(this + 64) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 2) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  if ((*(_BYTE *)(v3 + 64) & 2) != 0)
LABEL_7:
    this = PB::Writer::write(a2, *(double *)(v3 + 16));
LABEL_8:
  v5 = *(const PB::Base **)(v3 + 48);
  if (v5)
    return PB::Writer::writeSubmessage(a2, v5);
  return this;
}

uint64_t CMMsl::PTSForwardPropagation::hash_value(CMMsl::PTSForwardPropagation *this)
{
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  char v8;

  if ((*((_BYTE *)this + 64) & 0x20) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 64) & 8) != 0)
      goto LABEL_3;
LABEL_21:
    v2 = 0.0;
    if ((*((_BYTE *)this + 64) & 0x10) != 0)
      goto LABEL_6;
LABEL_22:
    v3 = 0.0;
    if ((*((_BYTE *)this + 64) & 4) != 0)
      goto LABEL_9;
LABEL_23:
    v4 = 0.0;
    if ((*((_BYTE *)this + 64) & 1) != 0)
      goto LABEL_12;
    goto LABEL_24;
  }
  v1 = *((double *)this + 7);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 64) & 8) == 0)
    goto LABEL_21;
LABEL_3:
  v2 = *((double *)this + 4);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 64) & 0x10) == 0)
    goto LABEL_22;
LABEL_6:
  v3 = *((double *)this + 5);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((*((_BYTE *)this + 64) & 4) == 0)
    goto LABEL_23;
LABEL_9:
  v4 = *((double *)this + 3);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((*((_BYTE *)this + 64) & 1) != 0)
  {
LABEL_12:
    v5 = *((double *)this + 1);
    if (v5 == 0.0)
      v5 = 0.0;
    if ((*((_BYTE *)this + 64) & 2) != 0)
      goto LABEL_15;
LABEL_25:
    v6 = 0.0;
    goto LABEL_26;
  }
LABEL_24:
  v5 = 0.0;
  if ((*((_BYTE *)this + 64) & 2) == 0)
    goto LABEL_25;
LABEL_15:
  v6 = *((double *)this + 2);
  if (v6 == 0.0)
    v6 = 0.0;
LABEL_26:
  v7 = *((_QWORD *)this + 6);
  if (v7)
  {
    v8 = *(_BYTE *)(v7 + 12);
    v7 = *(int *)(v7 + 8);
    if ((v8 & 1) == 0)
      v7 = 0;
  }
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ v7;
}

_QWORD *CMMsl::PTSForwardPropagation::makeSignalEnvironment(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[6])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_251360D20;
    v2[1] = 0;
    this = (_QWORD *)v1[6];
    v1[6] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void CMMsl::PTSMapMatchedRoute::~PTSMapMatchedRoute(CMMsl::PTSMapMatchedRoute *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135FCB8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135FCB8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135FCB8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::PTSMapMatchedRoute *CMMsl::PTSMapMatchedRoute::PTSMapMatchedRoute(CMMsl::PTSMapMatchedRoute *this, const CMMsl::PTSForwardPropagation **a2)
{
  CMMsl::PTSForwardPropagation *v4;
  CMMsl::PTSForwardPropagation *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_25135FCB8;
  *((_QWORD *)this + 1) = 0;
  if (a2[1])
  {
    v4 = (CMMsl::PTSForwardPropagation *)operator new();
    v5 = CMMsl::PTSForwardPropagation::PTSForwardPropagation(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return this;
}

uint64_t CMMsl::PTSMapMatchedRoute::operator=(uint64_t a1, const CMMsl::PTSForwardPropagation **a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::PTSMapMatchedRoute *__hidden);
  uint64_t v6;

  if ((const CMMsl::PTSForwardPropagation **)a1 != a2)
  {
    CMMsl::PTSMapMatchedRoute::PTSMapMatchedRoute((CMMsl::PTSMapMatchedRoute *)&v5, a2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v6;
    v5 = &off_25135FCB8;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::PTSMapMatchedRoute *a2, CMMsl::PTSMapMatchedRoute *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::PTSMapMatchedRoute::PTSMapMatchedRoute(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_25135FCB8;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_25135FCB8;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::PTSMapMatchedRoute::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = &off_25135FCB8;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::PTSMapMatchedRoute::formatText(CMMsl::PTSMapMatchedRoute *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PTSMapMatchedRoute::readFrom(CMMsl::PTSMapMatchedRoute *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v19 = operator new();
        *(_QWORD *)v19 = &off_25135FC80;
        *(_QWORD *)(v19 + 48) = 0;
        *(_DWORD *)(v19 + 64) = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = *((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_27;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PTSMapMatchedRoute::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2);
  return this;
}

CMMsl::PTSForwardPropagation *CMMsl::PTSMapMatchedRoute::hash_value(CMMsl::PTSMapMatchedRoute *this)
{
  CMMsl::PTSForwardPropagation *result;

  result = (CMMsl::PTSForwardPropagation *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::PTSForwardPropagation *)CMMsl::PTSForwardPropagation::hash_value(result);
  return result;
}

_QWORD *CMMsl::PTSMapMatchedRoute::makeSuper(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135FC80;
    *(_QWORD *)(v2 + 48) = 0;
    *(_DWORD *)(v2 + 64) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void CMMsl::PTSReconstructedRoute::~PTSReconstructedRoute(CMMsl::PTSReconstructedRoute *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135FCF0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135FCF0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135FCF0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::PTSReconstructedRoute *CMMsl::PTSReconstructedRoute::PTSReconstructedRoute(CMMsl::PTSReconstructedRoute *this, const CMMsl::PTSForwardPropagation **a2)
{
  CMMsl::PTSForwardPropagation *v4;
  CMMsl::PTSForwardPropagation *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_25135FCF0;
  *((_QWORD *)this + 1) = 0;
  if (a2[1])
  {
    v4 = (CMMsl::PTSForwardPropagation *)operator new();
    v5 = CMMsl::PTSForwardPropagation::PTSForwardPropagation(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return this;
}

uint64_t CMMsl::PTSReconstructedRoute::operator=(uint64_t a1, const CMMsl::PTSForwardPropagation **a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::PTSReconstructedRoute *__hidden);
  uint64_t v6;

  if ((const CMMsl::PTSForwardPropagation **)a1 != a2)
  {
    CMMsl::PTSReconstructedRoute::PTSReconstructedRoute((CMMsl::PTSReconstructedRoute *)&v5, a2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v6;
    v5 = &off_25135FCF0;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::PTSReconstructedRoute *a2, CMMsl::PTSReconstructedRoute *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::PTSReconstructedRoute::PTSReconstructedRoute(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_25135FCF0;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_25135FCF0;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::PTSReconstructedRoute::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = &off_25135FCF0;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::PTSReconstructedRoute::formatText(CMMsl::PTSReconstructedRoute *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PTSReconstructedRoute::readFrom(CMMsl::PTSReconstructedRoute *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v19 = operator new();
        *(_QWORD *)v19 = &off_25135FC80;
        *(_QWORD *)(v19 + 48) = 0;
        *(_DWORD *)(v19 + 64) = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = *((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_27;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PTSReconstructedRoute::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2);
  return this;
}

CMMsl::PTSForwardPropagation *CMMsl::PTSReconstructedRoute::hash_value(CMMsl::PTSReconstructedRoute *this)
{
  CMMsl::PTSForwardPropagation *result;

  result = (CMMsl::PTSForwardPropagation *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::PTSForwardPropagation *)CMMsl::PTSForwardPropagation::hash_value(result);
  return result;
}

_QWORD *CMMsl::PTSReconstructedRoute::makeSuper(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135FC80;
    *(_QWORD *)(v2 + 48) = 0;
    *(_DWORD *)(v2 + 64) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void CMMsl::PdrMLModelOutput::~PdrMLModelOutput(CMMsl::PdrMLModelOutput *this)
{
  void *v2;

  *(_QWORD *)this = &off_25135FD28;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::PdrMLModelOutput::~PdrMLModelOutput(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::PdrMLModelOutput *CMMsl::PdrMLModelOutput::PdrMLModelOutput(CMMsl::PdrMLModelOutput *this, const CMMsl::PdrMLModelOutput *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_25135FD28;
  *((_QWORD *)this + 1) = 0;
  v3 = (_QWORD *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 10) = 0;
  if ((*((_BYTE *)a2 + 40) & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 4);
    *((_BYTE *)this + 40) = 1;
    *((_QWORD *)this + 4) = v4;
  }
  if (this != a2)
    sub_2429111C4(v3, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
  return this;
}

uint64_t CMMsl::PdrMLModelOutput::operator=(uint64_t a1, const CMMsl::PdrMLModelOutput *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  if ((const CMMsl::PdrMLModelOutput *)a1 != a2)
  {
    CMMsl::PdrMLModelOutput::PdrMLModelOutput((CMMsl::PdrMLModelOutput *)&v8, a2);
    v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v12;
    v12 = v3;
    v4 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v11;
    v11 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v9 = v5;
    v6 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v10;
    v10 = v6;
    CMMsl::PdrMLModelOutput::~PdrMLModelOutput((CMMsl::PdrMLModelOutput *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PdrMLModelOutput *a2, CMMsl::PdrMLModelOutput *a3)
{
  int v3;
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  result = *((double *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((double *)a2 + 4) = result;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  return result;
}

uint64_t CMMsl::PdrMLModelOutput::PdrMLModelOutput(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_25135FD28;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  return a1;
}

{
  *(_QWORD *)a1 = &off_25135FD28;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  return a1;
}

uint64_t CMMsl::PdrMLModelOutput::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  int v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  void (**v12)(CMMsl::PdrMLModelOutput *__hidden);
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  if (a1 != a2)
  {
    v12 = &off_25135FD28;
    v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    v4 = *(_QWORD *)(a2 + 32);
    v5 = *(_QWORD *)(a2 + 24);
    v6 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v7 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v3;
    v16 = v7;
    v8 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v4;
    v15 = v8;
    v9 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    v13 = v9;
    v10 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v5;
    v14 = v10;
    CMMsl::PdrMLModelOutput::~PdrMLModelOutput((CMMsl::PdrMLModelOutput *)&v12);
  }
  return a1;
}

uint64_t CMMsl::PdrMLModelOutput::formatText(CMMsl::PdrMLModelOutput *this, PB::TextFormatter *a2, const char *a3)
{
  double *v5;
  double *v6;
  double v7;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 40) & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 4));
  v5 = (double *)*((_QWORD *)this + 1);
  v6 = (double *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "velocity", v7);
  }
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::PdrMLModelOutput::readFrom(CMMsl::PdrMLModelOutput *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          v14 = v16++ > 8;
          if (v14)
            goto LABEL_26;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_26;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        if ((v11 & 7) != 2)
        {
          v35 = (char *)*((_QWORD *)this + 2);
          v34 = *((_QWORD *)this + 3);
          if ((unint64_t)v35 >= v34)
          {
            v37 = (char *)*((_QWORD *)this + 1);
            v38 = (v35 - v37) >> 3;
            v39 = v38 + 1;
            if ((unint64_t)(v38 + 1) >> 61)
LABEL_82:
              sub_242729A44();
            v40 = v34 - (_QWORD)v37;
            if (v40 >> 2 > v39)
              v39 = v40 >> 2;
            if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
              v41 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v41 = v39;
            if (v41)
            {
              v41 = (unint64_t)sub_2429112FC(v41);
              v37 = (char *)*((_QWORD *)this + 1);
              v35 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v42 = 0;
            }
            v43 = (_QWORD *)(v41 + 8 * v38);
            *v43 = 0;
            v36 = v43 + 1;
            while (v35 != v37)
            {
              v44 = *((_QWORD *)v35 - 1);
              v35 -= 8;
              *--v43 = v44;
            }
            *((_QWORD *)this + 1) = v43;
            *((_QWORD *)this + 2) = v36;
            *((_QWORD *)this + 3) = v41 + 8 * v42;
            if (v37)
              operator delete(v37);
          }
          else
          {
            *(_QWORD *)v35 = 0;
            v36 = v35 + 8;
          }
          *((_QWORD *)this + 2) = v36;
          v45 = *((_QWORD *)a2 + 1);
          if (v45 > 0xFFFFFFFFFFFFFFF7 || v45 + 8 > *((_QWORD *)a2 + 2))
          {
LABEL_72:
            *((_BYTE *)a2 + 24) = 1;
            goto LABEL_75;
          }
          *(v36 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v45);
          goto LABEL_74;
        }
        if ((PB::Reader::placeMark() & 1) != 0)
          return 0;
        v20 = *((_QWORD *)a2 + 1);
        v21 = *((_QWORD *)a2 + 2);
        while (v20 < v21 && !*((_BYTE *)a2 + 24))
        {
          v23 = (char *)*((_QWORD *)this + 2);
          v22 = *((_QWORD *)this + 3);
          if ((unint64_t)v23 >= v22)
          {
            v25 = (char *)*((_QWORD *)this + 1);
            v26 = (v23 - v25) >> 3;
            v27 = v26 + 1;
            if ((unint64_t)(v26 + 1) >> 61)
              goto LABEL_82;
            v28 = v22 - (_QWORD)v25;
            if (v28 >> 2 > v27)
              v27 = v28 >> 2;
            if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
              v29 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v29 = v27;
            if (v29)
            {
              v29 = (unint64_t)sub_2429112FC(v29);
              v25 = (char *)*((_QWORD *)this + 1);
              v23 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v30 = 0;
            }
            v31 = (_QWORD *)(v29 + 8 * v26);
            *v31 = 0;
            v24 = v31 + 1;
            while (v23 != v25)
            {
              v32 = *((_QWORD *)v23 - 1);
              v23 -= 8;
              *--v31 = v32;
            }
            *((_QWORD *)this + 1) = v31;
            *((_QWORD *)this + 2) = v24;
            *((_QWORD *)this + 3) = v29 + 8 * v30;
            if (v25)
              operator delete(v25);
          }
          else
          {
            *(_QWORD *)v23 = 0;
            v24 = v23 + 8;
          }
          *((_QWORD *)this + 2) = v24;
          v33 = *((_QWORD *)a2 + 1);
          if (v33 > 0xFFFFFFFFFFFFFFF7 || v33 + 8 > *((_QWORD *)a2 + 2))
          {
            *((_BYTE *)a2 + 24) = 1;
            break;
          }
          *(v24 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v33);
          v21 = *((_QWORD *)a2 + 2);
          v20 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v20;
        }
        PB::Reader::recallMark();
      }
      else
      {
        if ((v11 >> 3) == 1)
        {
          *((_BYTE *)this + 40) |= 1u;
          v19 = *((_QWORD *)a2 + 1);
          if (v19 > 0xFFFFFFFFFFFFFFF7 || v19 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_72;
          *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v19);
LABEL_74:
          *((_QWORD *)a2 + 1) += 8;
          goto LABEL_75;
        }
LABEL_26:
        if ((PB::Reader::skip(a2) & 1) == 0)
          return 0;
      }
LABEL_75:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::PdrMLModelOutput::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  double *v4;
  double *v5;
  double v6;

  v3 = this;
  if ((*(_BYTE *)(this + 40) & 1) != 0)
    this = PB::Writer::write(a2, *(double *)(this + 32));
  v5 = *(double **)(v3 + 8);
  v4 = *(double **)(v3 + 16);
  while (v5 != v4)
  {
    v6 = *v5++;
    this = PB::Writer::write(a2, v6);
  }
  return this;
}

uint64_t CMMsl::PdrMLModelOutput::hash_value(CMMsl::PdrMLModelOutput *this)
{
  uint64_t v1;

  if ((*((_BYTE *)this + 40) & 1) != 0)
  {
    if (*((double *)this + 4) == 0.0)
      v1 = 0;
    else
      v1 = *((_QWORD *)this + 4);
  }
  else
  {
    v1 = 0;
  }
  return PBHashBytes() ^ v1;
}

void CMMsl::PearlAttitude::~PearlAttitude(CMMsl::PearlAttitude *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_25135FD60;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::PearlAttitude::~PearlAttitude(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::PearlAttitude *CMMsl::PearlAttitude::PearlAttitude(CMMsl::PearlAttitude *this, const CMMsl::PearlAttitude *a2)
{
  _QWORD *v4;
  __int16 v5;
  __int16 v6;
  uint64_t v7;
  int v8;
  int v9;
  __int16 v10;
  int v11;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;

  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (_QWORD *)((char *)this + 8);
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_QWORD *)this = &off_25135FD60;
  *((_DWORD *)this + 31) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 9) = 0;
  v5 = *((_WORD *)a2 + 62);
  if ((v5 & 1) != 0)
  {
    v7 = *((_QWORD *)a2 + 10);
    v6 = 1;
    *((_WORD *)this + 62) = 1;
    *((_QWORD *)this + 10) = v7;
    v5 = *((_WORD *)a2 + 62);
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((v5 & 0x40) != 0)
  {
LABEL_5:
    v8 = *((_DWORD *)a2 + 27);
    v6 |= 0x40u;
    *((_WORD *)this + 62) = v6;
    *((_DWORD *)this + 27) = v8;
    v5 = *((_WORD *)a2 + 62);
  }
LABEL_6:
  if ((v5 & 0x20) != 0)
  {
    v13 = *((_DWORD *)a2 + 26);
    v6 |= 0x20u;
    *((_WORD *)this + 62) = v6;
    *((_DWORD *)this + 26) = v13;
    v5 = *((_WORD *)a2 + 62);
    if ((v5 & 0x200) == 0)
    {
LABEL_8:
      if ((v5 & 2) == 0)
        goto LABEL_9;
      goto LABEL_23;
    }
  }
  else if ((v5 & 0x200) == 0)
  {
    goto LABEL_8;
  }
  v14 = *((_DWORD *)a2 + 30);
  v6 |= 0x200u;
  *((_WORD *)this + 62) = v6;
  *((_DWORD *)this + 30) = v14;
  v5 = *((_WORD *)a2 + 62);
  if ((v5 & 2) == 0)
  {
LABEL_9:
    if ((v5 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  v15 = *((_DWORD *)a2 + 22);
  v6 |= 2u;
  *((_WORD *)this + 62) = v6;
  *((_DWORD *)this + 22) = v15;
  v5 = *((_WORD *)a2 + 62);
  if ((v5 & 0x80) == 0)
  {
LABEL_10:
    if ((v5 & 0x10) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_24:
  v16 = *((_DWORD *)a2 + 28);
  v6 |= 0x80u;
  *((_WORD *)this + 62) = v6;
  *((_DWORD *)this + 28) = v16;
  if ((*((_WORD *)a2 + 62) & 0x10) != 0)
  {
LABEL_11:
    v9 = *((_DWORD *)a2 + 25);
    *((_WORD *)this + 62) = v6 | 0x10;
    *((_DWORD *)this + 25) = v9;
  }
LABEL_12:
  if (this != a2)
    sub_242911380(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  v10 = *((_WORD *)a2 + 62);
  if ((v10 & 8) != 0)
  {
    v17 = *((_DWORD *)a2 + 24);
    *((_WORD *)this + 62) |= 8u;
    *((_DWORD *)this + 24) = v17;
    v10 = *((_WORD *)a2 + 62);
    if ((v10 & 0x100) == 0)
    {
LABEL_16:
      if ((v10 & 4) == 0)
        goto LABEL_18;
      goto LABEL_17;
    }
  }
  else if ((*((_WORD *)a2 + 62) & 0x100) == 0)
  {
    goto LABEL_16;
  }
  v18 = *((_DWORD *)a2 + 29);
  *((_WORD *)this + 62) |= 0x100u;
  *((_DWORD *)this + 29) = v18;
  if ((*((_WORD *)a2 + 62) & 4) != 0)
  {
LABEL_17:
    v11 = *((_DWORD *)a2 + 23);
    *((_WORD *)this + 62) |= 4u;
    *((_DWORD *)this + 23) = v11;
  }
LABEL_18:
  if (this != a2)
  {
    sub_242911380((_QWORD *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
    sub_242911380((_QWORD *)this + 7, *((char **)a2 + 7), *((char **)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 2);
  }
  return this;
}

CMMsl *CMMsl::PearlAttitude::operator=(CMMsl *a1, const CMMsl::PearlAttitude *a2)
{
  CMMsl::PearlAttitude *v3;
  _BYTE v5[128];

  if (a1 != a2)
  {
    CMMsl::PearlAttitude::PearlAttitude((CMMsl::PearlAttitude *)v5, a2);
    CMMsl::swap(a1, (CMMsl::PearlAttitude *)v5, v3);
    CMMsl::PearlAttitude::~PearlAttitude((CMMsl::PearlAttitude *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::PearlAttitude *a2, CMMsl::PearlAttitude *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v3;
  v4 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v4;
  LODWORD(v4) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v4;
  LODWORD(v4) = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v4;
  LODWORD(v4) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v4;
  v5 = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v5;
  v6 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v6;
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v7;
  v8 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v8;
  v9 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v9;
  LODWORD(v4) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v4;
  LODWORD(v4) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v4;
  result = *((float *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((float *)a2 + 23) = result;
  v11 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v11;
  v12 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v12;
  v13 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v13;
  v14 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v14;
  v15 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v15;
  v16 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v16;
  return result;
}

uint64_t CMMsl::PearlAttitude::PearlAttitude(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_25135FD60;
  v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  v5 = a1 + 56;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a2 + 124) = 0;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  sub_242911330(v4, (__n128 *)(a2 + 32));
  sub_242911330(v5, (__n128 *)(a2 + 56));
  return a1;
}

CMMsl *CMMsl::PearlAttitude::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::PearlAttitude *v3;
  _BYTE v5[128];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::PearlAttitude::PearlAttitude((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::PearlAttitude *)v5, v3);
    CMMsl::PearlAttitude::~PearlAttitude((CMMsl::PearlAttitude *)v5);
  }
  return a1;
}

uint64_t CMMsl::PearlAttitude::formatText(CMMsl::PearlAttitude *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;
  float *v6;
  float *v7;
  float v8;
  float *v9;
  float *v10;
  float v11;
  __int16 v12;
  float *v13;
  float *v14;
  float v15;
  __int16 v16;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 62);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "distance", *((float *)this + 22));
    v5 = *((_WORD *)this + 62);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_25;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "focalLength", *((float *)this + 23));
  v5 = *((_WORD *)this + 62);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "height", *((float *)this + 24));
  if ((*((_WORD *)this + 62) & 0x10) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "orientation");
LABEL_6:
  v6 = (float *)*((_QWORD *)this + 1);
  v7 = (float *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(a2, "origin", v8);
  }
  if ((*((_WORD *)this + 62) & 0x20) != 0)
    PB::TextFormatter::format(a2, "pitch", *((float *)this + 26));
  v9 = (float *)*((_QWORD *)this + 4);
  v10 = (float *)*((_QWORD *)this + 5);
  while (v9 != v10)
  {
    v11 = *v9++;
    PB::TextFormatter::format(a2, "principlePoint", v11);
  }
  v12 = *((_WORD *)this + 62);
  if ((v12 & 0x40) != 0)
  {
    PB::TextFormatter::format(a2, "roll", *((float *)this + 27));
    v12 = *((_WORD *)this + 62);
  }
  if ((v12 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 10));
  v13 = (float *)*((_QWORD *)this + 7);
  v14 = (float *)*((_QWORD *)this + 8);
  while (v13 != v14)
  {
    v15 = *v13++;
    PB::TextFormatter::format(a2, "transform", v15);
  }
  v16 = *((_WORD *)this + 62);
  if ((v16 & 0x80) == 0)
  {
    if ((*((_WORD *)this + 62) & 0x100) == 0)
      goto LABEL_20;
LABEL_28:
    PB::TextFormatter::format(a2, "width", *((float *)this + 29));
    if ((*((_WORD *)this + 62) & 0x200) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_21;
  }
  PB::TextFormatter::format(a2, "type");
  v16 = *((_WORD *)this + 62);
  if ((v16 & 0x100) != 0)
    goto LABEL_28;
LABEL_20:
  if ((v16 & 0x200) != 0)
LABEL_21:
    PB::TextFormatter::format(a2, "yaw", *((float *)this + 30));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::PearlAttitude::readFrom(CMMsl::PearlAttitude *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  _DWORD *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _DWORD *v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  _DWORD *v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  _DWORD *v70;
  int v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  _DWORD *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  _DWORD *v84;
  int v85;
  unint64_t v86;
  char v87;
  unsigned int v88;
  unint64_t v89;
  char v90;
  char v91;
  unsigned int v92;
  unint64_t v93;
  char v94;
  unint64_t v95;
  char *v96;
  _DWORD *v97;
  unint64_t v98;
  char *v99;
  unint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  _DWORD *v120;
  int v121;
  _DWORD *v122;
  int v123;
  _DWORD *v124;
  int v125;
  unint64_t v126;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_21:
      v19 = v11 & 7;
      if (v19 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_WORD *)this + 62) |= 1u;
          v20 = *((_QWORD *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_210;
          *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v20);
          v21 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_213;
        case 2u:
          *((_WORD *)this + 62) |= 0x40u;
          v22 = *((_QWORD *)a2 + 1);
          if (v22 > 0xFFFFFFFFFFFFFFFBLL || v22 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_210;
          *((_DWORD *)this + 27) = *(_DWORD *)(*(_QWORD *)a2 + v22);
          goto LABEL_212;
        case 3u:
          *((_WORD *)this + 62) |= 0x20u;
          v23 = *((_QWORD *)a2 + 1);
          if (v23 > 0xFFFFFFFFFFFFFFFBLL || v23 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_210;
          *((_DWORD *)this + 26) = *(_DWORD *)(*(_QWORD *)a2 + v23);
          goto LABEL_212;
        case 4u:
          *((_WORD *)this + 62) |= 0x200u;
          v24 = *((_QWORD *)a2 + 1);
          if (v24 > 0xFFFFFFFFFFFFFFFBLL || v24 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_210;
          *((_DWORD *)this + 30) = *(_DWORD *)(*(_QWORD *)a2 + v24);
          goto LABEL_212;
        case 5u:
          *((_WORD *)this + 62) |= 2u;
          v25 = *((_QWORD *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFFBLL || v25 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_210;
          *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v25);
          goto LABEL_212;
        case 6u:
          *((_WORD *)this + 62) |= 0x80u;
          v26 = *((_QWORD *)a2 + 1);
          v27 = *((_QWORD *)a2 + 2);
          v28 = *(_QWORD *)a2;
          if (v26 <= 0xFFFFFFFFFFFFFFF5 && v26 + 10 <= v27)
          {
            v29 = 0;
            v30 = 0;
            v31 = 0;
            do
            {
              v32 = v26 + 1;
              *((_QWORD *)a2 + 1) = v26 + 1;
              v33 = *(_BYTE *)(v28 + v26);
              v31 |= (unint64_t)(v33 & 0x7F) << v29;
              if ((v33 & 0x80) == 0)
                goto LABEL_183;
              v29 += 7;
              v26 = v32;
              v14 = v30++ > 8;
            }
            while (!v14);
LABEL_139:
            LODWORD(v31) = 0;
            goto LABEL_183;
          }
          v87 = 0;
          v88 = 0;
          v31 = 0;
          if (v27 <= v26)
            v27 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v27 == v26)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v89 = v26 + 1;
              v90 = *(_BYTE *)(v28 + v26);
              *((_QWORD *)a2 + 1) = v89;
              v31 |= (unint64_t)(v90 & 0x7F) << v87;
              if (v90 < 0)
              {
                v87 += 7;
                v26 = v89;
                v14 = v88++ > 8;
                if (v14)
                  goto LABEL_139;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v31) = 0;
            }
            break;
          }
LABEL_183:
          *((_DWORD *)this + 28) = v31;
          goto LABEL_214;
        case 7u:
          *((_WORD *)this + 62) |= 0x10u;
          v34 = *((_QWORD *)a2 + 1);
          v35 = *((_QWORD *)a2 + 2);
          v36 = *(_QWORD *)a2;
          if (v34 <= 0xFFFFFFFFFFFFFFF5 && v34 + 10 <= v35)
          {
            v37 = 0;
            v38 = 0;
            v39 = 0;
            do
            {
              v40 = v34 + 1;
              *((_QWORD *)a2 + 1) = v34 + 1;
              v41 = *(_BYTE *)(v36 + v34);
              v39 |= (unint64_t)(v41 & 0x7F) << v37;
              if ((v41 & 0x80) == 0)
                goto LABEL_186;
              v37 += 7;
              v34 = v40;
              v14 = v38++ > 8;
            }
            while (!v14);
LABEL_146:
            LODWORD(v39) = 0;
            goto LABEL_186;
          }
          v91 = 0;
          v92 = 0;
          v39 = 0;
          if (v35 <= v34)
            v35 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v35 == v34)
            {
              LODWORD(v39) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v93 = v34 + 1;
              v94 = *(_BYTE *)(v36 + v34);
              *((_QWORD *)a2 + 1) = v93;
              v39 |= (unint64_t)(v94 & 0x7F) << v91;
              if (v94 < 0)
              {
                v91 += 7;
                v34 = v93;
                v14 = v92++ > 8;
                if (v14)
                  goto LABEL_146;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v39) = 0;
            }
            break;
          }
LABEL_186:
          *((_DWORD *)this + 25) = v39;
          goto LABEL_214;
        case 8u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v42 = *((_QWORD *)a2 + 1);
            v43 = *((_QWORD *)a2 + 2);
            while (v42 < v43 && !*((_BYTE *)a2 + 24))
            {
              v45 = (char *)*((_QWORD *)this + 2);
              v44 = *((_QWORD *)this + 3);
              if ((unint64_t)v45 >= v44)
              {
                v47 = (char *)*((_QWORD *)this + 1);
                v48 = (v45 - v47) >> 2;
                v49 = v48 + 1;
                if ((unint64_t)(v48 + 1) >> 62)
                  goto LABEL_223;
                v50 = v44 - (_QWORD)v47;
                if (v50 >> 1 > v49)
                  v49 = v50 >> 1;
                if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
                  v51 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v51 = v49;
                if (v51)
                {
                  v51 = (unint64_t)sub_2429114B8(v51);
                  v47 = (char *)*((_QWORD *)this + 1);
                  v45 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v52 = 0;
                }
                v53 = (_DWORD *)(v51 + 4 * v48);
                *v53 = 0;
                v46 = v53 + 1;
                while (v45 != v47)
                {
                  v54 = *((_DWORD *)v45 - 1);
                  v45 -= 4;
                  *--v53 = v54;
                }
                *((_QWORD *)this + 1) = v53;
                *((_QWORD *)this + 2) = v46;
                *((_QWORD *)this + 3) = v51 + 4 * v52;
                if (v47)
                  operator delete(v47);
              }
              else
              {
                *(_DWORD *)v45 = 0;
                v46 = v45 + 4;
              }
              *((_QWORD *)this + 2) = v46;
              v55 = *((_QWORD *)a2 + 1);
              if (v55 > 0xFFFFFFFFFFFFFFFBLL || v55 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_153;
              *(v46 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v55);
              v43 = *((_QWORD *)a2 + 2);
              v42 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v42;
            }
            goto LABEL_154;
          }
          v96 = (char *)*((_QWORD *)this + 2);
          v95 = *((_QWORD *)this + 3);
          if ((unint64_t)v96 >= v95)
          {
            v102 = (char *)*((_QWORD *)this + 1);
            v103 = (v96 - v102) >> 2;
            v104 = v103 + 1;
            if ((unint64_t)(v103 + 1) >> 62)
              goto LABEL_223;
            v105 = v95 - (_QWORD)v102;
            if (v105 >> 1 > v104)
              v104 = v105 >> 1;
            if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFFCLL)
              v106 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v106 = v104;
            if (v106)
            {
              v106 = (unint64_t)sub_2429114B8(v106);
              v102 = (char *)*((_QWORD *)this + 1);
              v96 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v107 = 0;
            }
            v120 = (_DWORD *)(v106 + 4 * v103);
            *v120 = 0;
            v97 = v120 + 1;
            while (v96 != v102)
            {
              v121 = *((_DWORD *)v96 - 1);
              v96 -= 4;
              *--v120 = v121;
            }
            *((_QWORD *)this + 1) = v120;
            *((_QWORD *)this + 2) = v97;
            *((_QWORD *)this + 3) = v106 + 4 * v107;
            if (v102)
              operator delete(v102);
          }
          else
          {
            *(_DWORD *)v96 = 0;
            v97 = v96 + 4;
          }
          *((_QWORD *)this + 2) = v97;
          goto LABEL_208;
        case 9u:
          *((_WORD *)this + 62) |= 8u;
          v56 = *((_QWORD *)a2 + 1);
          if (v56 > 0xFFFFFFFFFFFFFFFBLL || v56 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_210;
          *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v56);
          goto LABEL_212;
        case 0xAu:
          *((_WORD *)this + 62) |= 0x100u;
          v57 = *((_QWORD *)a2 + 1);
          if (v57 > 0xFFFFFFFFFFFFFFFBLL || v57 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_210;
          *((_DWORD *)this + 29) = *(_DWORD *)(*(_QWORD *)a2 + v57);
          goto LABEL_212;
        case 0xBu:
          *((_WORD *)this + 62) |= 4u;
          v58 = *((_QWORD *)a2 + 1);
          if (v58 > 0xFFFFFFFFFFFFFFFBLL || v58 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_210;
          *((_DWORD *)this + 23) = *(_DWORD *)(*(_QWORD *)a2 + v58);
          goto LABEL_212;
        case 0xCu:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v59 = *((_QWORD *)a2 + 1);
            v60 = *((_QWORD *)a2 + 2);
            while (v59 < v60 && !*((_BYTE *)a2 + 24))
            {
              v62 = (char *)*((_QWORD *)this + 5);
              v61 = *((_QWORD *)this + 6);
              if ((unint64_t)v62 >= v61)
              {
                v64 = (char *)*((_QWORD *)this + 4);
                v65 = (v62 - v64) >> 2;
                v66 = v65 + 1;
                if ((unint64_t)(v65 + 1) >> 62)
                  goto LABEL_223;
                v67 = v61 - (_QWORD)v64;
                if (v67 >> 1 > v66)
                  v66 = v67 >> 1;
                if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL)
                  v68 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v68 = v66;
                if (v68)
                {
                  v68 = (unint64_t)sub_2429114B8(v68);
                  v64 = (char *)*((_QWORD *)this + 4);
                  v62 = (char *)*((_QWORD *)this + 5);
                }
                else
                {
                  v69 = 0;
                }
                v70 = (_DWORD *)(v68 + 4 * v65);
                *v70 = 0;
                v63 = v70 + 1;
                while (v62 != v64)
                {
                  v71 = *((_DWORD *)v62 - 1);
                  v62 -= 4;
                  *--v70 = v71;
                }
                *((_QWORD *)this + 4) = v70;
                *((_QWORD *)this + 5) = v63;
                *((_QWORD *)this + 6) = v68 + 4 * v69;
                if (v64)
                  operator delete(v64);
              }
              else
              {
                *(_DWORD *)v62 = 0;
                v63 = v62 + 4;
              }
              *((_QWORD *)this + 5) = v63;
              v72 = *((_QWORD *)a2 + 1);
              if (v72 > 0xFFFFFFFFFFFFFFFBLL || v72 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_153;
              *(v63 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v72);
              v60 = *((_QWORD *)a2 + 2);
              v59 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v59;
            }
            goto LABEL_154;
          }
          v99 = (char *)*((_QWORD *)this + 5);
          v98 = *((_QWORD *)this + 6);
          if ((unint64_t)v99 >= v98)
          {
            v108 = (char *)*((_QWORD *)this + 4);
            v109 = (v99 - v108) >> 2;
            v110 = v109 + 1;
            if ((unint64_t)(v109 + 1) >> 62)
              goto LABEL_223;
            v111 = v98 - (_QWORD)v108;
            if (v111 >> 1 > v110)
              v110 = v111 >> 1;
            if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFFCLL)
              v112 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v112 = v110;
            if (v112)
            {
              v112 = (unint64_t)sub_2429114B8(v112);
              v108 = (char *)*((_QWORD *)this + 4);
              v99 = (char *)*((_QWORD *)this + 5);
            }
            else
            {
              v113 = 0;
            }
            v122 = (_DWORD *)(v112 + 4 * v109);
            *v122 = 0;
            v97 = v122 + 1;
            while (v99 != v108)
            {
              v123 = *((_DWORD *)v99 - 1);
              v99 -= 4;
              *--v122 = v123;
            }
            *((_QWORD *)this + 4) = v122;
            *((_QWORD *)this + 5) = v97;
            *((_QWORD *)this + 6) = v112 + 4 * v113;
            if (v108)
              operator delete(v108);
          }
          else
          {
            *(_DWORD *)v99 = 0;
            v97 = v99 + 4;
          }
          *((_QWORD *)this + 5) = v97;
          goto LABEL_208;
        case 0xDu:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v73 = *((_QWORD *)a2 + 1);
            v74 = *((_QWORD *)a2 + 2);
            while (v73 < v74 && !*((_BYTE *)a2 + 24))
            {
              v76 = (char *)*((_QWORD *)this + 8);
              v75 = *((_QWORD *)this + 9);
              if ((unint64_t)v76 >= v75)
              {
                v78 = (char *)*((_QWORD *)this + 7);
                v79 = (v76 - v78) >> 2;
                v80 = v79 + 1;
                if ((unint64_t)(v79 + 1) >> 62)
                  goto LABEL_223;
                v81 = v75 - (_QWORD)v78;
                if (v81 >> 1 > v80)
                  v80 = v81 >> 1;
                if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFFCLL)
                  v82 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v82 = v80;
                if (v82)
                {
                  v82 = (unint64_t)sub_2429114B8(v82);
                  v78 = (char *)*((_QWORD *)this + 7);
                  v76 = (char *)*((_QWORD *)this + 8);
                }
                else
                {
                  v83 = 0;
                }
                v84 = (_DWORD *)(v82 + 4 * v79);
                *v84 = 0;
                v77 = v84 + 1;
                while (v76 != v78)
                {
                  v85 = *((_DWORD *)v76 - 1);
                  v76 -= 4;
                  *--v84 = v85;
                }
                *((_QWORD *)this + 7) = v84;
                *((_QWORD *)this + 8) = v77;
                *((_QWORD *)this + 9) = v82 + 4 * v83;
                if (v78)
                  operator delete(v78);
              }
              else
              {
                *(_DWORD *)v76 = 0;
                v77 = v76 + 4;
              }
              *((_QWORD *)this + 8) = v77;
              v86 = *((_QWORD *)a2 + 1);
              if (v86 > 0xFFFFFFFFFFFFFFFBLL || v86 + 4 > *((_QWORD *)a2 + 2))
              {
LABEL_153:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v77 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v86);
              v74 = *((_QWORD *)a2 + 2);
              v73 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v73;
            }
LABEL_154:
            PB::Reader::recallMark();
          }
          else
          {
            v101 = (char *)*((_QWORD *)this + 8);
            v100 = *((_QWORD *)this + 9);
            if ((unint64_t)v101 >= v100)
            {
              v114 = (char *)*((_QWORD *)this + 7);
              v115 = (v101 - v114) >> 2;
              v116 = v115 + 1;
              if ((unint64_t)(v115 + 1) >> 62)
LABEL_223:
                sub_242729A44();
              v117 = v100 - (_QWORD)v114;
              if (v117 >> 1 > v116)
                v116 = v117 >> 1;
              if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFFCLL)
                v118 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v118 = v116;
              if (v118)
              {
                v118 = (unint64_t)sub_2429114B8(v118);
                v114 = (char *)*((_QWORD *)this + 7);
                v101 = (char *)*((_QWORD *)this + 8);
              }
              else
              {
                v119 = 0;
              }
              v124 = (_DWORD *)(v118 + 4 * v115);
              *v124 = 0;
              v97 = v124 + 1;
              while (v101 != v114)
              {
                v125 = *((_DWORD *)v101 - 1);
                v101 -= 4;
                *--v124 = v125;
              }
              *((_QWORD *)this + 7) = v124;
              *((_QWORD *)this + 8) = v97;
              *((_QWORD *)this + 9) = v118 + 4 * v119;
              if (v114)
                operator delete(v114);
            }
            else
            {
              *(_DWORD *)v101 = 0;
              v97 = v101 + 4;
            }
            *((_QWORD *)this + 8) = v97;
LABEL_208:
            v126 = *((_QWORD *)a2 + 1);
            if (v126 <= 0xFFFFFFFFFFFFFFFBLL && v126 + 4 <= *((_QWORD *)a2 + 2))
            {
              *(v97 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v126);
LABEL_212:
              v21 = *((_QWORD *)a2 + 1) + 4;
LABEL_213:
              *((_QWORD *)a2 + 1) = v21;
            }
            else
            {
LABEL_210:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
          break;
        default:
          goto LABEL_19;
      }
      goto LABEL_214;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_21;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    if ((PB::Reader::skip(a2) & 1) == 0)
      return 0;
LABEL_214:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
}

uint64_t CMMsl::PearlAttitude::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;
  float *v5;
  float *v6;
  float v7;
  __int16 v8;
  float *v9;
  float *v10;
  float v11;
  float *v12;
  float *v13;
  float v14;

  v3 = this;
  v4 = *(_WORD *)(this + 124);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 80));
    v4 = *(_WORD *)(v3 + 124);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_25;
    }
  }
  else if ((v4 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 108));
  v4 = *(_WORD *)(v3 + 124);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 104));
  v4 = *(_WORD *)(v3 + 124);
  if ((v4 & 0x200) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      goto LABEL_6;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(float *)(v3 + 120));
  v4 = *(_WORD *)(v3 + 124);
  if ((v4 & 2) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0)
      goto LABEL_7;
LABEL_28:
    this = PB::Writer::writeVarInt(a2);
    if ((*(_WORD *)(v3 + 124) & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(float *)(v3 + 88));
  v4 = *(_WORD *)(v3 + 124);
  if ((v4 & 0x80) != 0)
    goto LABEL_28;
LABEL_7:
  if ((v4 & 0x10) != 0)
LABEL_8:
    this = PB::Writer::writeVarInt(a2);
LABEL_9:
  v5 = *(float **)(v3 + 8);
  v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7);
  }
  v8 = *(_WORD *)(v3 + 124);
  if ((v8 & 8) == 0)
  {
    if ((*(_WORD *)(v3 + 124) & 0x100) == 0)
      goto LABEL_14;
LABEL_31:
    this = PB::Writer::write(a2, *(float *)(v3 + 116));
    if ((*(_WORD *)(v3 + 124) & 4) == 0)
      goto LABEL_16;
    goto LABEL_15;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 96));
  v8 = *(_WORD *)(v3 + 124);
  if ((v8 & 0x100) != 0)
    goto LABEL_31;
LABEL_14:
  if ((v8 & 4) != 0)
LABEL_15:
    this = PB::Writer::write(a2, *(float *)(v3 + 92));
LABEL_16:
  v9 = *(float **)(v3 + 32);
  v10 = *(float **)(v3 + 40);
  while (v9 != v10)
  {
    v11 = *v9++;
    this = PB::Writer::write(a2, v11);
  }
  v13 = *(float **)(v3 + 56);
  v12 = *(float **)(v3 + 64);
  while (v13 != v12)
  {
    v14 = *v13++;
    this = PB::Writer::write(a2, v14);
  }
  return this;
}

uint64_t CMMsl::PearlAttitude::hash_value(CMMsl::PearlAttitude *this)
{
  __int16 v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  uint64_t v23;

  v2 = *((_WORD *)this + 62);
  if ((v2 & 1) == 0)
  {
    v3 = 0;
    if ((v2 & 0x40) != 0)
      goto LABEL_3;
LABEL_25:
    v5 = 0;
    if ((v2 & 0x20) != 0)
      goto LABEL_7;
LABEL_26:
    v7 = 0;
    if ((*((_WORD *)this + 62) & 0x200) != 0)
      goto LABEL_11;
LABEL_27:
    v9 = 0;
    if ((v2 & 2) != 0)
      goto LABEL_15;
LABEL_28:
    v11 = 0;
    if ((v2 & 0x80) != 0)
      goto LABEL_19;
LABEL_29:
    v12 = 0;
    if ((v2 & 0x10) != 0)
      goto LABEL_20;
    goto LABEL_30;
  }
  if (*((double *)this + 10) == 0.0)
    v3 = 0;
  else
    v3 = *((_QWORD *)this + 10);
  if ((v2 & 0x40) == 0)
    goto LABEL_25;
LABEL_3:
  v4 = *((float *)this + 27);
  if (v4 == 0.0)
    v5 = 0;
  else
    v5 = LODWORD(v4);
  if ((v2 & 0x20) == 0)
    goto LABEL_26;
LABEL_7:
  v6 = *((float *)this + 26);
  if (v6 == 0.0)
    v7 = 0;
  else
    v7 = LODWORD(v6);
  if ((*((_WORD *)this + 62) & 0x200) == 0)
    goto LABEL_27;
LABEL_11:
  v8 = *((float *)this + 30);
  if (v8 == 0.0)
    v9 = 0;
  else
    v9 = LODWORD(v8);
  if ((v2 & 2) == 0)
    goto LABEL_28;
LABEL_15:
  v10 = *((float *)this + 22);
  if (v10 == 0.0)
    v11 = 0;
  else
    v11 = LODWORD(v10);
  if ((v2 & 0x80) == 0)
    goto LABEL_29;
LABEL_19:
  v12 = *((unsigned int *)this + 28);
  if ((v2 & 0x10) != 0)
  {
LABEL_20:
    v13 = *((unsigned int *)this + 25);
    goto LABEL_31;
  }
LABEL_30:
  v13 = 0;
LABEL_31:
  v14 = PBHashBytes();
  v15 = *((_WORD *)this + 62);
  if ((v15 & 8) != 0)
  {
    v21 = *((float *)this + 24);
    v16 = LODWORD(v21);
    if (v21 == 0.0)
      v16 = 0;
    if ((*((_WORD *)this + 62) & 0x100) != 0)
    {
LABEL_33:
      v17 = *((float *)this + 29);
      v18 = LODWORD(v17);
      if (v17 == 0.0)
        v18 = 0;
      if ((v15 & 4) != 0)
        goto LABEL_36;
LABEL_43:
      v20 = 0;
      goto LABEL_44;
    }
  }
  else
  {
    v16 = 0;
    if ((*((_WORD *)this + 62) & 0x100) != 0)
      goto LABEL_33;
  }
  v18 = 0;
  if ((v15 & 4) == 0)
    goto LABEL_43;
LABEL_36:
  v19 = *((float *)this + 23);
  v20 = LODWORD(v19);
  if (v19 == 0.0)
    v20 = 0;
LABEL_44:
  v22 = v5 ^ v3 ^ v7 ^ v9 ^ v11 ^ v12 ^ v13 ^ v16 ^ v18 ^ v20 ^ v14;
  v23 = PBHashBytes();
  return v22 ^ v23 ^ PBHashBytes();
}

void CMMsl::PedOdomFusionExtendedModeSegment::~PedOdomFusionExtendedModeSegment(CMMsl::PedOdomFusionExtendedModeSegment *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::PedOdomFusionExtendedModeSegment::PedOdomFusionExtendedModeSegment(uint64_t this, const CMMsl::PedOdomFusionExtendedModeSegment *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;

  *(_QWORD *)this = &off_25135FD98;
  *(_DWORD *)(this + 56) = 0;
  v2 = *((_BYTE *)a2 + 56);
  if ((v2 & 4) != 0)
  {
    v4 = *((_QWORD *)a2 + 3);
    v3 = 4;
    *(_BYTE *)(this + 56) = 4;
    *(_QWORD *)(this + 24) = v4;
    v2 = *((_BYTE *)a2 + 56);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 56) & 8) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 4);
    v3 |= 8u;
    *(_BYTE *)(this + 56) = v3;
    *(_QWORD *)(this + 32) = v5;
    v2 = *((_BYTE *)a2 + 56);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *((_QWORD *)a2 + 2);
    v3 |= 2u;
    *(_BYTE *)(this + 56) = v3;
    *(_QWORD *)(this + 16) = v6;
    v2 = *((_BYTE *)a2 + 56);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_BYTE *)(this + 56) = v3;
  *(_QWORD *)(this + 8) = v7;
  v2 = *((_BYTE *)a2 + 56);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_15;
  }
LABEL_14:
  v8 = *((_QWORD *)a2 + 5);
  v3 |= 0x10u;
  *(_BYTE *)(this + 56) = v3;
  *(_QWORD *)(this + 40) = v8;
  v2 = *((_BYTE *)a2 + 56);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 0x20) == 0)
      return this;
LABEL_16:
    v10 = *((_DWORD *)a2 + 12);
    *(_BYTE *)(this + 56) = v3 | 0x20;
    *(_DWORD *)(this + 48) = v10;
    return this;
  }
LABEL_15:
  v9 = *((_BYTE *)a2 + 52);
  v3 |= 0x40u;
  *(_BYTE *)(this + 56) = v3;
  *(_BYTE *)(this + 52) = v9;
  if ((*((_BYTE *)a2 + 56) & 0x20) != 0)
    goto LABEL_16;
  return this;
}

uint64_t CMMsl::PedOdomFusionExtendedModeSegment::operator=(uint64_t a1, const CMMsl::PedOdomFusionExtendedModeSegment *a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  char v14;
  int v15;

  if ((const CMMsl::PedOdomFusionExtendedModeSegment *)a1 != a2)
  {
    CMMsl::PedOdomFusionExtendedModeSegment::PedOdomFusionExtendedModeSegment((uint64_t)&v9, a2);
    v3 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v15;
    v15 = v3;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v11 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v5;
    v6 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v12;
    v12 = v6;
    LOBYTE(v3) = *(_BYTE *)(a1 + 52);
    *(_BYTE *)(a1 + 52) = v14;
    v14 = v3;
    v7 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v13;
    v13 = v7;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PedOdomFusionExtendedModeSegment *a2, CMMsl::PedOdomFusionExtendedModeSegment *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  int v9;

  v3 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v3;
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v4;
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v7;
  result = *((double *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((double *)a2 + 5) = result;
  LOBYTE(v3) = *((_BYTE *)this + 52);
  *((_BYTE *)this + 52) = *((_BYTE *)a2 + 52);
  *((_BYTE *)a2 + 52) = v3;
  v9 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v9;
  return result;
}

double CMMsl::PedOdomFusionExtendedModeSegment::PedOdomFusionExtendedModeSegment(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135FD98;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 40);
  *(double *)(a1 + 40) = result;
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135FD98;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 40);
  *(double *)(a1 + 40) = result;
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  return result;
}

uint64_t CMMsl::PedOdomFusionExtendedModeSegment::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  char v5;
  int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  int v10;
  void (**v12)(CMMsl::PedOdomFusionExtendedModeSegment *__hidden);
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  char v17;
  int v18;

  if (a1 != a2)
  {
    v12 = &off_25135FD98;
    v3 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a2 + 56) = 0;
    v4 = *(_QWORD *)(a2 + 40);
    v5 = *(_BYTE *)(a2 + 52);
    v6 = *(_DWORD *)(a2 + 48);
    v18 = *(_DWORD *)(a1 + 56);
    v14 = *(_OWORD *)(a1 + 24);
    v7 = *(_OWORD *)(a1 + 8);
    v8 = *(_OWORD *)(a2 + 8);
    v9 = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 56) = v3;
    *(_OWORD *)(a1 + 24) = v9;
    *(_OWORD *)(a1 + 8) = v8;
    v13 = v7;
    *(_QWORD *)&v7 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v4;
    v15 = v7;
    LOBYTE(v3) = *(_BYTE *)(a1 + 52);
    *(_BYTE *)(a1 + 52) = v5;
    v17 = v3;
    v10 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v6;
    v16 = v10;
    PB::Base::~Base((PB::Base *)&v12);
  }
  return a1;
}

uint64_t CMMsl::PedOdomFusionExtendedModeSegment::formatText(CMMsl::PedOdomFusionExtendedModeSegment *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 56);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(a2, "batchedLocationFixType");
    v5 = *((_BYTE *)this + 56);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*((_BYTE *)this + 56) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "distOdom", *((double *)this + 1));
  v5 = *((_BYTE *)this + 56);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "distPed", *((double *)this + 2));
  v5 = *((_BYTE *)this + 56);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "isValid");
  v5 = *((_BYTE *)this + 56);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0)
      goto LABEL_7;
LABEL_15:
    PB::TextFormatter::format(a2, "timeStop", *((double *)this + 4));
    if ((*((_BYTE *)this + 56) & 0x10) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_8;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "timeStart", *((double *)this + 3));
  v5 = *((_BYTE *)this + 56);
  if ((v5 & 8) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v5 & 0x10) != 0)
LABEL_8:
    PB::TextFormatter::format(a2, "uncOdom", *((double *)this + 5));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PedOdomFusionExtendedModeSegment::readFrom(CMMsl::PedOdomFusionExtendedModeSegment *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  char v27;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_63;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 56) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_37;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_57;
      case 2u:
        *((_BYTE *)this + 56) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_37;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_57;
      case 3u:
        *((_BYTE *)this + 56) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_37;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_57;
      case 4u:
        *((_BYTE *)this + 56) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_37;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_57;
      case 5u:
        *((_BYTE *)this + 56) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_57:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_37:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 6u:
        *((_BYTE *)this + 56) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v21 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v21 = v20 != 0;
        }
        *((_BYTE *)this + 52) = v21;
        break;
      case 7u:
        *((_BYTE *)this + 56) |= 0x20u;
        v22 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v23 = *(_QWORD *)a2;
        if (v22 > 0xFFFFFFFFFFFFFFF5 || v22 + 10 > v2)
        {
          v28 = 0;
          v29 = 0;
          v26 = 0;
          if (v2 <= v22)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v22)
            {
              LODWORD(v26) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_62;
            }
            v30 = v22++;
            v31 = *(_BYTE *)(v23 + v30);
            *((_QWORD *)a2 + 1) = v22;
            v26 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v26) = 0;
LABEL_61:
              v2 = v30 + 1;
              goto LABEL_62;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v26) = 0;
          goto LABEL_61;
        }
        v24 = 0;
        v25 = 0;
        v26 = 0;
        do
        {
          v2 = v22 + 1;
          *((_QWORD *)a2 + 1) = v22 + 1;
          v27 = *(_BYTE *)(v23 + v22);
          v26 |= (unint64_t)(v27 & 0x7F) << v24;
          if ((v27 & 0x80) == 0)
            goto LABEL_62;
          v24 += 7;
          v22 = v2;
          v14 = v25++ > 8;
        }
        while (!v14);
        LODWORD(v26) = 0;
LABEL_62:
        *((_DWORD *)this + 12) = v26;
        break;
      default:
        goto LABEL_19;
    }
LABEL_63:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::PedOdomFusionExtendedModeSegment::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 56);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24));
    v4 = *(_BYTE *)(v3 + 56);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(this + 56) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_14:
  this = PB::Writer::write(a2);
  if ((*(_BYTE *)(v3 + 56) & 0x20) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::PedOdomFusionExtendedModeSegment::hash_value(CMMsl::PedOdomFusionExtendedModeSegment *this)
{
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;

  if ((*((_BYTE *)this + 56) & 4) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 56) & 8) != 0)
      goto LABEL_3;
LABEL_20:
    v2 = 0.0;
    if ((*((_BYTE *)this + 56) & 2) != 0)
      goto LABEL_6;
LABEL_21:
    v3 = 0.0;
    if ((*((_BYTE *)this + 56) & 1) != 0)
      goto LABEL_9;
LABEL_22:
    v4 = 0.0;
    if ((*((_BYTE *)this + 56) & 0x10) != 0)
      goto LABEL_12;
LABEL_23:
    v5 = 0.0;
    if ((*((_BYTE *)this + 56) & 0x40) != 0)
      goto LABEL_15;
LABEL_24:
    v6 = 0;
    if ((*((_BYTE *)this + 56) & 0x20) != 0)
      goto LABEL_16;
LABEL_25:
    v7 = 0;
    return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ v6 ^ v7;
  }
  v1 = *((double *)this + 3);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 56) & 8) == 0)
    goto LABEL_20;
LABEL_3:
  v2 = *((double *)this + 4);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 56) & 2) == 0)
    goto LABEL_21;
LABEL_6:
  v3 = *((double *)this + 2);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((*((_BYTE *)this + 56) & 1) == 0)
    goto LABEL_22;
LABEL_9:
  v4 = *((double *)this + 1);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((*((_BYTE *)this + 56) & 0x10) == 0)
    goto LABEL_23;
LABEL_12:
  v5 = *((double *)this + 5);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((*((_BYTE *)this + 56) & 0x40) == 0)
    goto LABEL_24;
LABEL_15:
  v6 = *((unsigned __int8 *)this + 52);
  if ((*((_BYTE *)this + 56) & 0x20) == 0)
    goto LABEL_25;
LABEL_16:
  v7 = *((int *)this + 12);
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ v6 ^ v7;
}

void CMMsl::PedestrianCalorieModelDebugging::~PedestrianCalorieModelDebugging(CMMsl::PedestrianCalorieModelDebugging *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::PedestrianCalorieModelDebugging::PedestrianCalorieModelDebugging(uint64_t this, const CMMsl::PedestrianCalorieModelDebugging *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  int v19;

  *(_QWORD *)this = &off_25135FDD0;
  *(_DWORD *)(this + 116) = 0;
  v2 = *((_WORD *)a2 + 58);
  if ((v2 & 0x80) != 0)
  {
    v4 = *((_QWORD *)a2 + 8);
    v3 = 128;
    *(_WORD *)(this + 116) = 128;
    *(_QWORD *)(this + 64) = v4;
    v2 = *((_WORD *)a2 + 58);
    if ((v2 & 0x2000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_WORD *)a2 + 58) & 0x2000) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 27);
    v3 |= 0x2000u;
    *(_WORD *)(this + 116) = v3;
    *(_DWORD *)(this + 108) = v5;
    v2 = *((_WORD *)a2 + 58);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *((_QWORD *)a2 + 3);
    v3 |= 4u;
    *(_WORD *)(this + 116) = v3;
    *(_QWORD *)(this + 24) = v6;
    v2 = *((_WORD *)a2 + 58);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_23;
    }
  }
  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a2 + 7);
  v3 |= 0x40u;
  *(_WORD *)(this + 116) = v3;
  *(_QWORD *)(this + 56) = v7;
  v2 = *((_WORD *)a2 + 58);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  v8 = *((_QWORD *)a2 + 5);
  v3 |= 0x10u;
  *(_WORD *)(this + 116) = v3;
  *(_QWORD *)(this + 40) = v8;
  v2 = *((_WORD *)a2 + 58);
  if ((v2 & 1) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  v9 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 116) = v3;
  *(_QWORD *)(this + 8) = v9;
  v2 = *((_WORD *)a2 + 58);
  if ((v2 & 2) == 0)
  {
LABEL_11:
    if ((v2 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  v10 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_WORD *)(this + 116) = v3;
  *(_QWORD *)(this + 16) = v10;
  v2 = *((_WORD *)a2 + 58);
  if ((v2 & 0x800) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0)
      goto LABEL_13;
    goto LABEL_27;
  }
LABEL_26:
  v11 = *((_QWORD *)a2 + 12);
  v3 |= 0x800u;
  *(_WORD *)(this + 116) = v3;
  *(_QWORD *)(this + 96) = v11;
  v2 = *((_WORD *)a2 + 58);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 0x100) == 0)
      goto LABEL_14;
    goto LABEL_28;
  }
LABEL_27:
  v12 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *(_WORD *)(this + 116) = v3;
  *(_QWORD *)(this + 32) = v12;
  v2 = *((_WORD *)a2 + 58);
  if ((v2 & 0x100) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_29;
  }
LABEL_28:
  v13 = *((_QWORD *)a2 + 9);
  v3 |= 0x100u;
  *(_WORD *)(this + 116) = v3;
  *(_QWORD *)(this + 72) = v13;
  v2 = *((_WORD *)a2 + 58);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 0x400) == 0)
      goto LABEL_16;
    goto LABEL_30;
  }
LABEL_29:
  v14 = *((_QWORD *)a2 + 6);
  v3 |= 0x20u;
  *(_WORD *)(this + 116) = v3;
  *(_QWORD *)(this + 48) = v14;
  v2 = *((_WORD *)a2 + 58);
  if ((v2 & 0x400) == 0)
  {
LABEL_16:
    if ((v2 & 0x200) == 0)
      goto LABEL_17;
    goto LABEL_31;
  }
LABEL_30:
  v15 = *((_QWORD *)a2 + 11);
  v3 |= 0x400u;
  *(_WORD *)(this + 116) = v3;
  *(_QWORD *)(this + 88) = v15;
  v2 = *((_WORD *)a2 + 58);
  if ((v2 & 0x200) == 0)
  {
LABEL_17:
    if ((v2 & 0x8000) == 0)
      goto LABEL_18;
    goto LABEL_32;
  }
LABEL_31:
  v16 = *((_QWORD *)a2 + 10);
  v3 |= 0x200u;
  *(_WORD *)(this + 116) = v3;
  *(_QWORD *)(this + 80) = v16;
  v2 = *((_WORD *)a2 + 58);
  if ((v2 & 0x8000) == 0)
  {
LABEL_18:
    if ((v2 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_33;
  }
LABEL_32:
  v17 = *((_BYTE *)a2 + 113);
  v3 |= 0x8000u;
  *(_WORD *)(this + 116) = v3;
  *(_BYTE *)(this + 113) = v17;
  v2 = *((_WORD *)a2 + 58);
  if ((v2 & 0x4000) == 0)
  {
LABEL_19:
    if ((v2 & 0x1000) == 0)
      return this;
LABEL_34:
    v19 = *((_DWORD *)a2 + 26);
    *(_WORD *)(this + 116) = v3 | 0x1000;
    *(_DWORD *)(this + 104) = v19;
    return this;
  }
LABEL_33:
  v18 = *((_BYTE *)a2 + 112);
  v3 |= 0x4000u;
  *(_WORD *)(this + 116) = v3;
  *(_BYTE *)(this + 112) = v18;
  if ((*((_WORD *)a2 + 58) & 0x1000) != 0)
    goto LABEL_34;
  return this;
}

CMMsl *CMMsl::PedestrianCalorieModelDebugging::operator=(CMMsl *a1, const CMMsl::PedestrianCalorieModelDebugging *a2)
{
  CMMsl::PedestrianCalorieModelDebugging *v3;
  _BYTE v5[120];

  if (a1 != a2)
  {
    CMMsl::PedestrianCalorieModelDebugging::PedestrianCalorieModelDebugging((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::PedestrianCalorieModelDebugging *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PedestrianCalorieModelDebugging *a2, CMMsl::PedestrianCalorieModelDebugging *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double result;
  int v17;

  v3 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v3;
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v4;
  v5 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v5;
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  v7 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v7;
  v8 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v8;
  v9 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v9;
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v10;
  v11 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v11;
  v12 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v12;
  v13 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v13;
  v14 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v14;
  v15 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v15;
  result = *((double *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((double *)a2 + 10) = result;
  LOBYTE(v5) = *((_BYTE *)this + 113);
  *((_BYTE *)this + 113) = *((_BYTE *)a2 + 113);
  *((_BYTE *)a2 + 113) = v5;
  LOBYTE(v5) = *((_BYTE *)this + 112);
  *((_BYTE *)this + 112) = *((_BYTE *)a2 + 112);
  *((_BYTE *)a2 + 112) = v5;
  v17 = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v17;
  return result;
}

double CMMsl::PedestrianCalorieModelDebugging::PedestrianCalorieModelDebugging(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135FDD0;
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a2 + 116) = 0;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  result = *(double *)(a2 + 80);
  *(double *)(a1 + 80) = result;
  *(_BYTE *)(a1 + 113) = *(_BYTE *)(a2 + 113);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  return result;
}

CMMsl *CMMsl::PedestrianCalorieModelDebugging::operator=(CMMsl *this, uint64_t a2, CMMsl::PedestrianCalorieModelDebugging *a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  void (**v8)(CMMsl::PedestrianCalorieModelDebugging *__hidden);
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  char v16;
  char v17;
  int v18;

  if (this != (CMMsl *)a2)
  {
    v8 = &off_25135FDD0;
    v18 = *(_DWORD *)(a2 + 116);
    *(_DWORD *)(a2 + 116) = 0;
    v4 = *(_OWORD *)(a2 + 56);
    v5 = *(_OWORD *)(a2 + 24);
    v9 = *(_OWORD *)(a2 + 8);
    v10 = v5;
    v11 = *(_OWORD *)(a2 + 40);
    v12 = v4;
    v6 = *(_OWORD *)(a2 + 88);
    v13 = *(_OWORD *)(a2 + 72);
    v14 = v6;
    v17 = *(_BYTE *)(a2 + 113);
    v16 = *(_BYTE *)(a2 + 112);
    v15 = *(_QWORD *)(a2 + 104);
    CMMsl::swap(this, (CMMsl::PedestrianCalorieModelDebugging *)&v8, a3);
    PB::Base::~Base((PB::Base *)&v8);
  }
  return this;
}

uint64_t CMMsl::PedestrianCalorieModelDebugging::formatText(CMMsl::PedestrianCalorieModelDebugging *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 58);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "activeTime", *((double *)this + 1));
    v5 = *((_WORD *)this + 58);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_21;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "currentPace", *((double *)this + 2));
  v5 = *((_WORD *)this + 58);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "distance", *((double *)this + 3));
  v5 = *((_WORD *)this + 58);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "duration", *((double *)this + 4));
  v5 = *((_WORD *)this + 58);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x1000) == 0)
      goto LABEL_7;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "firstStepTime", *((double *)this + 5));
  v5 = *((_WORD *)this + 58);
  if ((v5 & 0x1000) == 0)
  {
LABEL_7:
    if ((v5 & 0x4000) == 0)
      goto LABEL_8;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "gradeType");
  v5 = *((_WORD *)this + 58);
  if ((v5 & 0x4000) == 0)
  {
LABEL_8:
    if ((v5 & 0x8000) == 0)
      goto LABEL_9;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "isIndoor");
  v5 = *((_WORD *)this + 58);
  if ((v5 & 0x8000) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "isMotionOverrideSet");
  v5 = *((_WORD *)this + 58);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "metsWR", *((double *)this + 6));
  v5 = *((_WORD *)this + 58);
  if ((v5 & 0x40) == 0)
  {
LABEL_11:
    if ((v5 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "rawDistance", *((double *)this + 7));
  v5 = *((_WORD *)this + 58);
  if ((v5 & 0x80) == 0)
  {
LABEL_12:
    if ((v5 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 8));
  v5 = *((_WORD *)this + 58);
  if ((v5 & 0x2000) == 0)
  {
LABEL_13:
    if ((v5 & 0x100) == 0)
      goto LABEL_14;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "steps");
  v5 = *((_WORD *)this + 58);
  if ((v5 & 0x100) == 0)
  {
LABEL_14:
    if ((v5 & 0x200) == 0)
      goto LABEL_15;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "stepsDuration", *((double *)this + 9));
  v5 = *((_WORD *)this + 58);
  if ((v5 & 0x200) == 0)
  {
LABEL_15:
    if ((v5 & 0x400) == 0)
      goto LABEL_16;
LABEL_33:
    PB::TextFormatter::format(a2, "truthMetsStrollerCorrected", *((double *)this + 11));
    if ((*((_WORD *)this + 58) & 0x800) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_17;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "truthMetsGradeCorrected", *((double *)this + 10));
  v5 = *((_WORD *)this + 58);
  if ((v5 & 0x400) != 0)
    goto LABEL_33;
LABEL_16:
  if ((v5 & 0x800) != 0)
LABEL_17:
    PB::TextFormatter::format(a2, "verticalSpeed", *((double *)this + 12));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PedestrianCalorieModelDebugging::readFrom(CMMsl::PedestrianCalorieModelDebugging *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  int v26;
  BOOL v27;
  int v28;
  BOOL v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  unint64_t v42;
  char v43;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_107;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 58) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_65;
        *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_96;
      case 2u:
        *((_WORD *)this + 58) |= 0x2000u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v36 = 0;
          v37 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_101;
            }
            v38 = v20++;
            v39 = *(_BYTE *)(v21 + v38);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v39 & 0x7F) << v36;
            if ((v39 & 0x80) == 0)
              break;
            v36 += 7;
            v14 = v37++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_100:
              v2 = v38 + 1;
              goto LABEL_101;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
          goto LABEL_100;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_101;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_101:
        *((_DWORD *)this + 27) = v24;
        break;
      case 3u:
        *((_WORD *)this + 58) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_65;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_96;
      case 4u:
        *((_WORD *)this + 58) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_65;
        *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_96;
      case 5u:
        *((_WORD *)this + 58) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_65;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_96;
      case 6u:
        *((_WORD *)this + 58) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_65;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_96;
      case 7u:
        *((_WORD *)this + 58) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_65;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_96;
      case 8u:
        *((_WORD *)this + 58) |= 0x800u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_65;
        *((_QWORD *)this + 12) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_96;
      case 9u:
        *((_WORD *)this + 58) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_65;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_96;
      case 0xAu:
        *((_WORD *)this + 58) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_65;
        *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_96;
      case 0xBu:
        *((_WORD *)this + 58) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_65;
        *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_96;
      case 0xCu:
        *((_WORD *)this + 58) |= 0x400u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_65;
        *((_QWORD *)this + 11) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_96;
      case 0xDu:
        *((_WORD *)this + 58) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_96:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_65:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 0xEu:
        *((_WORD *)this + 58) |= 0x8000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v27 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v26 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v27 = v26 != 0;
        }
        *((_BYTE *)this + 113) = v27;
        break;
      case 0xFu:
        *((_WORD *)this + 58) |= 0x4000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v29 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v28 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v29 = v28 != 0;
        }
        *((_BYTE *)this + 112) = v29;
        break;
      case 0x10u:
        *((_WORD *)this + 58) |= 0x1000u;
        v30 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v31 = *(_QWORD *)a2;
        if (v30 > 0xFFFFFFFFFFFFFFF5 || v30 + 10 > v2)
        {
          v40 = 0;
          v41 = 0;
          v34 = 0;
          if (v2 <= v30)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v30)
            {
              LODWORD(v34) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_106;
            }
            v42 = v30++;
            v43 = *(_BYTE *)(v31 + v42);
            *((_QWORD *)a2 + 1) = v30;
            v34 |= (unint64_t)(v43 & 0x7F) << v40;
            if ((v43 & 0x80) == 0)
              break;
            v40 += 7;
            v14 = v41++ > 8;
            if (v14)
            {
              LODWORD(v34) = 0;
LABEL_105:
              v2 = v42 + 1;
              goto LABEL_106;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v34) = 0;
          goto LABEL_105;
        }
        v32 = 0;
        v33 = 0;
        v34 = 0;
        do
        {
          v2 = v30 + 1;
          *((_QWORD *)a2 + 1) = v30 + 1;
          v35 = *(_BYTE *)(v31 + v30);
          v34 |= (unint64_t)(v35 & 0x7F) << v32;
          if ((v35 & 0x80) == 0)
            goto LABEL_106;
          v32 += 7;
          v30 = v2;
          v14 = v33++ > 8;
        }
        while (!v14);
        LODWORD(v34) = 0;
LABEL_106:
        *((_DWORD *)this + 26) = v34;
        break;
      default:
        goto LABEL_19;
    }
LABEL_107:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::PedestrianCalorieModelDebugging::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 116);
  if ((v4 & 0x80) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 64));
    v4 = *(_WORD *)(v3 + 116);
    if ((v4 & 0x2000) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_20;
    }
  }
  else if ((*(_WORD *)(this + 116) & 0x2000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0)
      goto LABEL_7;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 1) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0)
      goto LABEL_8;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 2) == 0)
  {
LABEL_8:
    if ((v4 & 0x800) == 0)
      goto LABEL_9;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x800) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(double *)(v3 + 96));
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x100) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(double *)(v3 + 72));
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x400) == 0)
  {
LABEL_13:
    if ((v4 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(double *)(v3 + 88));
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x200) == 0)
  {
LABEL_14:
    if ((v4 & 0x8000) == 0)
      goto LABEL_15;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(double *)(v3 + 80));
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x8000) == 0)
  {
LABEL_15:
    if ((v4 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2);
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x4000) == 0)
  {
LABEL_16:
    if ((v4 & 0x1000) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_32:
  this = PB::Writer::write(a2);
  if ((*(_WORD *)(v3 + 116) & 0x1000) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::PedestrianCalorieModelDebugging::hash_value(CMMsl::PedestrianCalorieModelDebugging *this)
{
  __int16 v1;
  double v2;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *((_WORD *)this + 58);
  if ((v1 & 0x80) != 0)
  {
    v2 = *((double *)this + 8);
    if (v2 == 0.0)
      v2 = 0.0;
    if ((*((_WORD *)this + 58) & 0x2000) != 0)
    {
LABEL_3:
      v3 = *((int *)this + 27);
      if ((v1 & 4) != 0)
        goto LABEL_4;
LABEL_44:
      v4 = 0.0;
      if ((v1 & 0x40) != 0)
        goto LABEL_7;
LABEL_45:
      v5 = 0.0;
      if ((v1 & 0x10) != 0)
        goto LABEL_10;
LABEL_46:
      v6 = 0.0;
      if ((v1 & 1) != 0)
        goto LABEL_13;
LABEL_47:
      v7 = 0.0;
      if ((v1 & 2) != 0)
        goto LABEL_16;
LABEL_48:
      v8 = 0.0;
      if ((*((_WORD *)this + 58) & 0x800) != 0)
        goto LABEL_19;
LABEL_49:
      v9 = 0.0;
      if ((v1 & 8) != 0)
        goto LABEL_22;
LABEL_50:
      v10 = 0.0;
      if ((*((_WORD *)this + 58) & 0x100) != 0)
        goto LABEL_25;
LABEL_51:
      v11 = 0.0;
      if ((v1 & 0x20) != 0)
        goto LABEL_28;
LABEL_52:
      v12 = 0.0;
      if ((*((_WORD *)this + 58) & 0x400) != 0)
        goto LABEL_31;
LABEL_53:
      v13 = 0.0;
      if ((*((_WORD *)this + 58) & 0x200) != 0)
        goto LABEL_34;
LABEL_54:
      v14 = 0.0;
      if ((*((_WORD *)this + 58) & 0x8000) != 0)
        goto LABEL_37;
      goto LABEL_55;
    }
  }
  else
  {
    v2 = 0.0;
    if ((*((_WORD *)this + 58) & 0x2000) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((v1 & 4) == 0)
    goto LABEL_44;
LABEL_4:
  v4 = *((double *)this + 3);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 0x40) == 0)
    goto LABEL_45;
LABEL_7:
  v5 = *((double *)this + 7);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((v1 & 0x10) == 0)
    goto LABEL_46;
LABEL_10:
  v6 = *((double *)this + 5);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_47;
LABEL_13:
  v7 = *((double *)this + 1);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_48;
LABEL_16:
  v8 = *((double *)this + 2);
  if (v8 == 0.0)
    v8 = 0.0;
  if ((*((_WORD *)this + 58) & 0x800) == 0)
    goto LABEL_49;
LABEL_19:
  v9 = *((double *)this + 12);
  if (v9 == 0.0)
    v9 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_50;
LABEL_22:
  v10 = *((double *)this + 4);
  if (v10 == 0.0)
    v10 = 0.0;
  if ((*((_WORD *)this + 58) & 0x100) == 0)
    goto LABEL_51;
LABEL_25:
  v11 = *((double *)this + 9);
  if (v11 == 0.0)
    v11 = 0.0;
  if ((v1 & 0x20) == 0)
    goto LABEL_52;
LABEL_28:
  v12 = *((double *)this + 6);
  if (v12 == 0.0)
    v12 = 0.0;
  if ((*((_WORD *)this + 58) & 0x400) == 0)
    goto LABEL_53;
LABEL_31:
  v13 = *((double *)this + 11);
  if (v13 == 0.0)
    v13 = 0.0;
  if ((*((_WORD *)this + 58) & 0x200) == 0)
    goto LABEL_54;
LABEL_34:
  v14 = *((double *)this + 10);
  if (v14 == 0.0)
    v14 = 0.0;
  if ((*((_WORD *)this + 58) & 0x8000) != 0)
  {
LABEL_37:
    v15 = *((unsigned __int8 *)this + 113);
    if ((*((_WORD *)this + 58) & 0x4000) != 0)
      goto LABEL_38;
LABEL_56:
    v16 = 0;
    if ((*((_WORD *)this + 58) & 0x1000) != 0)
      goto LABEL_39;
LABEL_57:
    v17 = 0;
    return v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13 ^ *(_QWORD *)&v14 ^ v15 ^ v16 ^ v17;
  }
LABEL_55:
  v15 = 0;
  if ((*((_WORD *)this + 58) & 0x4000) == 0)
    goto LABEL_56;
LABEL_38:
  v16 = *((unsigned __int8 *)this + 112);
  if ((*((_WORD *)this + 58) & 0x1000) == 0)
    goto LABEL_57;
LABEL_39:
  v17 = *((unsigned int *)this + 26);
  return v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13 ^ *(_QWORD *)&v14 ^ v15 ^ v16 ^ v17;
}

void CMMsl::PedestrianFenceExit::~PedestrianFenceExit(CMMsl::PedestrianFenceExit *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::PedestrianFenceExit::PedestrianFenceExit(uint64_t this, const CMMsl::PedestrianFenceExit *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;

  *(_QWORD *)this = &off_25135FE08;
  *(_QWORD *)(this + 28) = 0xFFFFFFFFLL;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 2) != 0)
  {
    v4 = *((_QWORD *)a2 + 2);
    v3 = 2;
    *(_BYTE *)(this + 32) = 2;
    *(_QWORD *)(this + 16) = v4;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 32) & 1) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 1);
    v3 |= 1u;
    *(_BYTE *)(this + 32) = v3;
    *(_QWORD *)(this + 8) = v5;
    v2 = *((_BYTE *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0)
      return this;
LABEL_10:
    v7 = *((_DWORD *)a2 + 7);
    *(_BYTE *)(this + 32) = v3 | 8;
    *(_DWORD *)(this + 28) = v7;
    return this;
  }
  v6 = *((_DWORD *)a2 + 6);
  v3 |= 4u;
  *(_BYTE *)(this + 32) = v3;
  *(_DWORD *)(this + 24) = v6;
  if ((*((_BYTE *)a2 + 32) & 8) != 0)
    goto LABEL_10;
  return this;
}

uint64_t CMMsl::PedestrianFenceExit::operator=(uint64_t a1, const CMMsl::PedestrianFenceExit *a2)
{
  __int128 v3;
  int v4;
  _BYTE v6[8];
  __int128 v7;
  int v8;
  uint64_t v9;

  if ((const CMMsl::PedestrianFenceExit *)a1 != a2)
  {
    CMMsl::PedestrianFenceExit::PedestrianFenceExit((uint64_t)v6, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v3;
    v4 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v8;
    v8 = v4;
    *(_QWORD *)&v3 = *(_QWORD *)(a1 + 28);
    *(_QWORD *)(a1 + 28) = v9;
    v9 = v3;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::PedestrianFenceExit *a2, CMMsl::PedestrianFenceExit *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  float result;
  int v7;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  v7 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v7;
  return result;
}

float CMMsl::PedestrianFenceExit::PedestrianFenceExit(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135FE08;
  *(_DWORD *)(a1 + 28) = -1;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_25135FE08;
  *(_DWORD *)(a1 + 28) = -1;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  return result;
}

uint64_t CMMsl::PedestrianFenceExit::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  void (**v8)(CMMsl::PedestrianFenceExit *__hidden);
  __int128 v9;
  int v10;
  uint64_t v11;

  if (a1 != a2)
  {
    v8 = &off_25135FE08;
    v3 = *(_DWORD *)(a2 + 24);
    v4 = *(_QWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 32) = 0;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    v9 = v5;
    LODWORD(v5) = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v3;
    v10 = v5;
    v6 = *(_QWORD *)(a1 + 28);
    *(_QWORD *)(a1 + 28) = v4;
    v11 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::PedestrianFenceExit::formatText(CMMsl::PedestrianFenceExit *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "radius", *((float *)this + 6));
    v5 = *((_BYTE *)this + 32);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "timestampSet", *((double *)this + 2));
      if ((*((_BYTE *)this + 32) & 8) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 32) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "timestampExit", *((double *)this + 1));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 2) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "userResponse");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PedestrianFenceExit::readFrom(CMMsl::PedestrianFenceExit *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_54;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 32) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_32;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_29;
      case 2u:
        *((_BYTE *)this + 32) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_32;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_29:
        v2 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_48;
      case 3u:
        *((_BYTE *)this + 32) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_48:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_32:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 4u:
        *((_BYTE *)this + 32) |= 8u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v26 = 0;
          v27 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_53;
            }
            v28 = v20++;
            v29 = *(_BYTE *)(v21 + v28);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0)
              break;
            v26 += 7;
            v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_52:
              v2 = v28 + 1;
              goto LABEL_53;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
          goto LABEL_52;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_53;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_53:
        *((_DWORD *)this + 7) = v24;
        break;
      default:
        goto LABEL_19;
    }
LABEL_54:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::PedestrianFenceExit::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16));
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 32) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_8:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  if ((*(_BYTE *)(v3 + 32) & 8) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::PedestrianFenceExit::hash_value(CMMsl::PedestrianFenceExit *this)
{
  double v1;
  double v2;
  float v3;
  uint64_t v4;
  uint64_t v5;

  if ((*((_BYTE *)this + 32) & 2) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 32) & 1) != 0)
      goto LABEL_3;
LABEL_13:
    v2 = 0.0;
    if ((*((_BYTE *)this + 32) & 4) != 0)
      goto LABEL_6;
    goto LABEL_14;
  }
  v1 = *((double *)this + 2);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 32) & 1) == 0)
    goto LABEL_13;
LABEL_3:
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 32) & 4) != 0)
  {
LABEL_6:
    v3 = *((float *)this + 6);
    v4 = LODWORD(v3);
    if (v3 == 0.0)
      v4 = 0;
    if ((*((_BYTE *)this + 32) & 8) != 0)
      goto LABEL_9;
LABEL_15:
    v5 = 0;
    return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ v4 ^ v5;
  }
LABEL_14:
  v4 = 0;
  if ((*((_BYTE *)this + 32) & 8) == 0)
    goto LABEL_15;
LABEL_9:
  v5 = *((int *)this + 7);
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ v4 ^ v5;
}

void CMMsl::PedometerPathStraightness::~PedometerPathStraightness(CMMsl::PedometerPathStraightness *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::PedometerPathStraightness::PedometerPathStraightness(CMMsl::PedometerPathStraightness *this, const CMMsl::PedometerPathStraightness *a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)this = &off_25135FE40;
  *((_DWORD *)this + 14) = 0;
  v2 = *((_BYTE *)a2 + 56);
  if ((v2 & 8) != 0)
  {
    result = *((double *)a2 + 4);
    v3 = 8;
    *((_BYTE *)this + 56) = 8;
    *((double *)this + 4) = result;
    v2 = *((_BYTE *)a2 + 56);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 56) & 4) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 3);
    v3 |= 4u;
    *((_BYTE *)this + 56) = v3;
    *((double *)this + 3) = result;
    v2 = *((_BYTE *)a2 + 56);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    result = *((double *)a2 + 5);
    v3 |= 0x10u;
    *((_BYTE *)this + 56) = v3;
    *((double *)this + 5) = result;
    v2 = *((_BYTE *)a2 + 56);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_13;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  result = *((double *)a2 + 2);
  v3 |= 2u;
  *((_BYTE *)this + 56) = v3;
  *((double *)this + 2) = result;
  v2 = *((_BYTE *)a2 + 56);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0)
      return result;
LABEL_14:
    result = *((double *)a2 + 1);
    *((_BYTE *)this + 56) = v3 | 1;
    *((double *)this + 1) = result;
    return result;
  }
LABEL_13:
  result = *((double *)a2 + 6);
  v3 |= 0x20u;
  *((_BYTE *)this + 56) = v3;
  *((double *)this + 6) = result;
  if ((*((_BYTE *)a2 + 56) & 1) != 0)
    goto LABEL_14;
  return result;
}

uint64_t CMMsl::PedometerPathStraightness::operator=(uint64_t a1, const CMMsl::PedometerPathStraightness *a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;

  if ((const CMMsl::PedometerPathStraightness *)a1 != a2)
  {
    CMMsl::PedometerPathStraightness::PedometerPathStraightness((CMMsl::PedometerPathStraightness *)&v8, a2);
    v3 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v12;
    v12 = v3;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v11;
    v11 = v5;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v9 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PedometerPathStraightness *a2, CMMsl::PedometerPathStraightness *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;

  v3 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v3;
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  v6 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v6;
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v7;
  v8 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v8;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::PedometerPathStraightness::PedometerPathStraightness(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135FE40;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135FE40;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::PedometerPathStraightness::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  void (**v9)(CMMsl::PedometerPathStraightness *__hidden);
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;

  if (a1 != a2)
  {
    v9 = &off_25135FE40;
    v3 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a2 + 56) = 0;
    v13 = *(_DWORD *)(a1 + 56);
    v11 = *(_OWORD *)(a1 + 24);
    v12 = *(_OWORD *)(a1 + 40);
    v4 = *(_OWORD *)(a1 + 8);
    v5 = *(_OWORD *)(a2 + 8);
    v6 = *(_OWORD *)(a2 + 24);
    v7 = *(_OWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 56) = v3;
    *(_OWORD *)(a1 + 24) = v6;
    *(_OWORD *)(a1 + 40) = v7;
    *(_OWORD *)(a1 + 8) = v5;
    v10 = v4;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::PedometerPathStraightness::formatText(CMMsl::PedometerPathStraightness *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 56);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "complexHandMotionPercentage", *((double *)this + 1));
    v5 = *((_BYTE *)this + 56);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*((_BYTE *)this + 56) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "confidence", *((double *)this + 2));
  v5 = *((_BYTE *)this + 56);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "endTime", *((double *)this + 3));
  v5 = *((_BYTE *)this + 56);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(a2, "straightnessMetric", *((double *)this + 5));
    if ((*((_BYTE *)this + 56) & 0x20) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 4));
  v5 = *((_BYTE *)this + 56);
  if ((v5 & 0x10) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 0x20) != 0)
LABEL_7:
    PB::TextFormatter::format(a2, "walkPercentage", *((double *)this + 6));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PedometerPathStraightness::readFrom(CMMsl::PedometerPathStraightness *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_43;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 56) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_40;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_42;
      case 2u:
        *((_BYTE *)this + 56) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_40;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_42;
      case 3u:
        *((_BYTE *)this + 56) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_40;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_42;
      case 4u:
        *((_BYTE *)this + 56) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_40;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_42;
      case 5u:
        *((_BYTE *)this + 56) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_40;
        *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_42;
      case 6u:
        *((_BYTE *)this + 56) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_42:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_40:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_43:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::PedometerPathStraightness::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 56);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32));
    v4 = *(_BYTE *)(v3 + 56);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(this + 56) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 8));
  }
LABEL_12:
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  if ((*(_BYTE *)(v3 + 56) & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 8));
  return this;
}

uint64_t CMMsl::PedometerPathStraightness::hash_value(CMMsl::PedometerPathStraightness *this)
{
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;

  if ((*((_BYTE *)this + 56) & 8) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 56) & 4) != 0)
      goto LABEL_3;
LABEL_21:
    v2 = 0.0;
    if ((*((_BYTE *)this + 56) & 0x10) != 0)
      goto LABEL_6;
LABEL_22:
    v3 = 0.0;
    if ((*((_BYTE *)this + 56) & 2) != 0)
      goto LABEL_9;
LABEL_23:
    v4 = 0.0;
    if ((*((_BYTE *)this + 56) & 0x20) != 0)
      goto LABEL_12;
    goto LABEL_24;
  }
  v1 = *((double *)this + 4);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 56) & 4) == 0)
    goto LABEL_21;
LABEL_3:
  v2 = *((double *)this + 3);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 56) & 0x10) == 0)
    goto LABEL_22;
LABEL_6:
  v3 = *((double *)this + 5);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((*((_BYTE *)this + 56) & 2) == 0)
    goto LABEL_23;
LABEL_9:
  v4 = *((double *)this + 2);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((*((_BYTE *)this + 56) & 0x20) != 0)
  {
LABEL_12:
    v5 = *((double *)this + 6);
    if (v5 == 0.0)
      v5 = 0.0;
    if ((*((_BYTE *)this + 56) & 1) != 0)
      goto LABEL_15;
LABEL_25:
    v6 = 0.0;
    return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6;
  }
LABEL_24:
  v5 = 0.0;
  if ((*((_BYTE *)this + 56) & 1) == 0)
    goto LABEL_25;
LABEL_15:
  v6 = *((double *)this + 1);
  if (v6 == 0.0)
    v6 = 0.0;
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6;
}

void CMMsl::PeerState::~PeerState(CMMsl::PeerState *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::PeerState::PeerState(uint64_t this, const CMMsl::PeerState *a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)this = &off_25135FE78;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::PeerState::operator=(uint64_t a1, uint64_t a2, double a3)
{
  int v3;
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  uint64_t v12;

  if (a1 != a2)
  {
    v11[0] = &off_25135FE78;
    HIDWORD(v12) = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      BYTE4(v12) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        v3 = *(_DWORD *)(a2 + 16);
        BYTE4(v12) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_6;
    }
    v7 = HIDWORD(v12);
    v8 = *(_QWORD *)(a1 + 8);
    v9 = *(_QWORD *)(a1 + 16);
    *(double *)(a1 + 8) = a3;
    *(_DWORD *)(a1 + 16) = v3;
    *(_DWORD *)(a1 + 20) = v7;
    v11[1] = v8;
    v12 = v9;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PeerState *a2, CMMsl::PeerState *a3)
{
  int v3;
  double result;
  int v5;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  return result;
}

double CMMsl::PeerState::PeerState(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135FE78;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135FE78;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::PeerState::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  if (a1 != a2)
  {
    v8[0] = &off_25135FE78;
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    v8[1] = v5;
    v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::PeerState::formatText(CMMsl::PeerState *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "motionState");
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PeerState::readFrom(CMMsl::PeerState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_26;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v26 = 0;
          v27 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_47;
            }
            v28 = v20++;
            v29 = *(_BYTE *)(v21 + v28);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0)
              break;
            v26 += 7;
            v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
LABEL_46:
          v2 = v28 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)a2 + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 4) = v24;
      }
      else if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_26:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_26;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PeerState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::PeerState::hash_value(CMMsl::PeerState *this)
{
  double v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v2 = 0;
    return v2 ^ *(_QWORD *)&v1;
  }
  v1 = 0.0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((unsigned int *)this + 4);
  return v2 ^ *(_QWORD *)&v1;
}

void CMMsl::PencilDeviceMotion::~PencilDeviceMotion(CMMsl::PencilDeviceMotion *this)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = &off_25135FEB0;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::PencilDeviceMotion::~PencilDeviceMotion(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::PencilDeviceMotion *CMMsl::PencilDeviceMotion::PencilDeviceMotion(CMMsl::PencilDeviceMotion *this, const CMMsl::PencilDeviceMotion *a2)
{
  _QWORD *v4;
  CMMsl::AuxiliaryDeviceMotion *v5;
  CMMsl::AuxiliaryDeviceMotion *v6;
  uint64_t v7;
  char v8;
  int v9;
  int v10;

  *(_QWORD *)this = &off_25135FEB0;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (_QWORD *)((char *)this + 8);
  *((_DWORD *)this + 12) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (*((_QWORD *)a2 + 4))
  {
    v5 = (CMMsl::AuxiliaryDeviceMotion *)operator new();
    v6 = CMMsl::AuxiliaryDeviceMotion::AuxiliaryDeviceMotion(v5, *((const CMMsl::AuxiliaryDeviceMotion **)a2 + 4));
    v7 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if (this != a2)
    sub_242911380(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  v8 = *((_BYTE *)a2 + 48);
  if ((v8 & 2) != 0)
  {
    v9 = *((_DWORD *)a2 + 11);
    *((_BYTE *)this + 48) |= 2u;
    *((_DWORD *)this + 11) = v9;
    v8 = *((_BYTE *)a2 + 48);
  }
  if ((v8 & 1) != 0)
  {
    v10 = *((_DWORD *)a2 + 10);
    *((_BYTE *)this + 48) |= 1u;
    *((_DWORD *)this + 10) = v10;
  }
  return this;
}

uint64_t CMMsl::PencilDeviceMotion::operator=(uint64_t a1, const CMMsl::PencilDeviceMotion *a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _BYTE v7[8];
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  int v11;

  if ((const CMMsl::PencilDeviceMotion *)a1 != a2)
  {
    CMMsl::PencilDeviceMotion::PencilDeviceMotion((CMMsl::PencilDeviceMotion *)v7, a2);
    v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v11;
    v11 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v8 = v4;
    v9 = v5;
    *(_QWORD *)&v5 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v10;
    v10 = v5;
    CMMsl::PencilDeviceMotion::~PencilDeviceMotion((CMMsl::PencilDeviceMotion *)v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::PencilDeviceMotion *a2, CMMsl::PencilDeviceMotion *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  float result;

  v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  v8 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v8;
  result = *((float *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((float *)a2 + 10) = result;
  return result;
}

uint64_t CMMsl::PencilDeviceMotion::PencilDeviceMotion(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_25135FEB0;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  sub_242911330(v4, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

uint64_t CMMsl::PencilDeviceMotion::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _BYTE v7[8];
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  int v11;

  if (a1 != a2)
  {
    CMMsl::PencilDeviceMotion::PencilDeviceMotion((uint64_t)v7, a2);
    v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v11;
    v11 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v8 = v4;
    v9 = v5;
    *(_QWORD *)&v5 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v10;
    v10 = v5;
    CMMsl::PencilDeviceMotion::~PencilDeviceMotion((CMMsl::PencilDeviceMotion *)v7);
  }
  return a1;
}

uint64_t CMMsl::PencilDeviceMotion::formatText(CMMsl::PencilDeviceMotion *this, PB::TextFormatter *a2, const char *a3)
{
  float *v5;
  float *v6;
  float v7;
  uint64_t v8;
  char v9;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (float *)*((_QWORD *)this + 1);
  v6 = (float *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "gyroBias", v7);
  }
  v8 = *((_QWORD *)this + 4);
  if (v8)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "super");
  v9 = *((_BYTE *)this + 48);
  if ((v9 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "temperatureGyro", *((float *)this + 10));
    v9 = *((_BYTE *)this + 48);
  }
  if ((v9 & 2) != 0)
    PB::TextFormatter::format(a2, "temperatureGyroBias", *((float *)this + 11));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::PencilDeviceMotion::readFrom(CMMsl::PencilDeviceMotion *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  _DWORD *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  _DWORD *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  int v47;
  unint64_t v48;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      break;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        v19 = operator new();
        *(_QWORD *)v19 = &off_25135C5D0;
        *(_DWORD *)(v19 + 152) = 0;
        *(_OWORD *)(v19 + 8) = 0u;
        *(_OWORD *)(v19 + 24) = 0u;
        *(_OWORD *)(v19 + 40) = 0u;
        *(_OWORD *)(v19 + 56) = 0u;
        *(_OWORD *)(v19 + 72) = 0u;
        *(_OWORD *)(v19 + 88) = 0u;
        *(_OWORD *)(v19 + 104) = 0u;
        *(_QWORD *)(v19 + 120) = 0;
        v20 = *((_QWORD *)this + 4);
        *((_QWORD *)this + 4) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = *((_QWORD *)this + 4);
        }
        if (PB::Reader::placeMark()
          && ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) != 0)
        {
          goto LABEL_27;
        }
        return 0;
      case 2u:
        if ((v11 & 7) == 2)
        {
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v21 = *((_QWORD *)a2 + 1);
          v22 = *((_QWORD *)a2 + 2);
          while (v21 < v22 && !*((_BYTE *)a2 + 24))
          {
            v24 = (char *)*((_QWORD *)this + 2);
            v23 = *((_QWORD *)this + 3);
            if ((unint64_t)v24 >= v23)
            {
              v26 = (char *)*((_QWORD *)this + 1);
              v27 = (v24 - v26) >> 2;
              v28 = v27 + 1;
              if ((unint64_t)(v27 + 1) >> 62)
                goto LABEL_87;
              v29 = v23 - (_QWORD)v26;
              if (v29 >> 1 > v28)
                v28 = v29 >> 1;
              if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL)
                v30 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v30 = v28;
              if (v30)
              {
                v30 = (unint64_t)sub_2429114B8(v30);
                v26 = (char *)*((_QWORD *)this + 1);
                v24 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v31 = 0;
              }
              v32 = (_DWORD *)(v30 + 4 * v27);
              *v32 = 0;
              v25 = v32 + 1;
              while (v24 != v26)
              {
                v33 = *((_DWORD *)v24 - 1);
                v24 -= 4;
                *--v32 = v33;
              }
              *((_QWORD *)this + 1) = v32;
              *((_QWORD *)this + 2) = v25;
              *((_QWORD *)this + 3) = v30 + 4 * v31;
              if (v26)
                operator delete(v26);
            }
            else
            {
              *(_DWORD *)v24 = 0;
              v25 = v24 + 4;
            }
            *((_QWORD *)this + 2) = v25;
            v34 = *((_QWORD *)a2 + 1);
            if (v34 > 0xFFFFFFFFFFFFFFFBLL || v34 + 4 > *((_QWORD *)a2 + 2))
            {
              *((_BYTE *)a2 + 24) = 1;
              break;
            }
            *(v25 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v34);
            v22 = *((_QWORD *)a2 + 2);
            v21 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v21;
          }
LABEL_27:
          PB::Reader::recallMark();
        }
        else
        {
          v38 = (char *)*((_QWORD *)this + 2);
          v37 = *((_QWORD *)this + 3);
          if ((unint64_t)v38 >= v37)
          {
            v40 = (char *)*((_QWORD *)this + 1);
            v41 = (v38 - v40) >> 2;
            v42 = v41 + 1;
            if ((unint64_t)(v41 + 1) >> 62)
LABEL_87:
              sub_242729A44();
            v43 = v37 - (_QWORD)v40;
            if (v43 >> 1 > v42)
              v42 = v43 >> 1;
            if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL)
              v44 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v44 = v42;
            if (v44)
            {
              v44 = (unint64_t)sub_2429114B8(v44);
              v40 = (char *)*((_QWORD *)this + 1);
              v38 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v45 = 0;
            }
            v46 = (_DWORD *)(v44 + 4 * v41);
            *v46 = 0;
            v39 = v46 + 1;
            while (v38 != v40)
            {
              v47 = *((_DWORD *)v38 - 1);
              v38 -= 4;
              *--v46 = v47;
            }
            *((_QWORD *)this + 1) = v46;
            *((_QWORD *)this + 2) = v39;
            *((_QWORD *)this + 3) = v44 + 4 * v45;
            if (v40)
              operator delete(v40);
          }
          else
          {
            *(_DWORD *)v38 = 0;
            v39 = v38 + 4;
          }
          *((_QWORD *)this + 2) = v39;
          v48 = *((_QWORD *)a2 + 1);
          if (v48 <= 0xFFFFFFFFFFFFFFFBLL && v48 + 4 <= *((_QWORD *)a2 + 2))
          {
            *(v39 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v48);
LABEL_79:
            *((_QWORD *)a2 + 1) += 4;
          }
          else
          {
LABEL_77:
            *((_BYTE *)a2 + 24) = 1;
          }
        }
        break;
      case 3u:
        *((_BYTE *)this + 48) |= 2u;
        v35 = *((_QWORD *)a2 + 1);
        if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_77;
        *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v35);
        goto LABEL_79;
      case 4u:
        *((_BYTE *)this + 48) |= 1u;
        v36 = *((_QWORD *)a2 + 1);
        if (v36 > 0xFFFFFFFFFFFFFFFBLL || v36 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_77;
        *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v36);
        goto LABEL_79;
      default:
        goto LABEL_19;
    }
LABEL_80:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v15 = 0;
  v16 = 0;
  v11 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v17 = v2 + 1;
    v18 = *(_BYTE *)(v8 + v2);
    *((_QWORD *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0)
      goto LABEL_21;
    v15 += 7;
    v2 = v17;
    v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  if ((PB::Reader::skip(a2) & 1) != 0)
    goto LABEL_80;
  return 0;
}

uint64_t CMMsl::PencilDeviceMotion::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  float *v5;
  float *v6;
  float v7;
  char v8;

  v3 = this;
  v4 = *(const PB::Base **)(this + 32);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = *(float **)(v3 + 8);
  v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7);
  }
  v8 = *(_BYTE *)(v3 + 48);
  if ((v8 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 44));
    v8 = *(_BYTE *)(v3 + 48);
  }
  if ((v8 & 1) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 40));
  return this;
}

uint64_t CMMsl::PencilDeviceMotion::hash_value(CMMsl::PencilDeviceMotion *this)
{
  CMMsl::AuxiliaryDeviceMotion *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;

  v2 = (CMMsl::AuxiliaryDeviceMotion *)*((_QWORD *)this + 4);
  if (v2)
    v3 = CMMsl::AuxiliaryDeviceMotion::hash_value(v2);
  else
    v3 = 0;
  v4 = PBHashBytes();
  if ((*((_BYTE *)this + 48) & 2) != 0)
  {
    v8 = *((float *)this + 11);
    v5 = LODWORD(v8);
    if (v8 == 0.0)
      v5 = 0;
    if ((*((_BYTE *)this + 48) & 1) != 0)
      goto LABEL_6;
LABEL_12:
    v7 = 0;
    return v4 ^ v3 ^ v5 ^ v7;
  }
  v5 = 0;
  if ((*((_BYTE *)this + 48) & 1) == 0)
    goto LABEL_12;
LABEL_6:
  v6 = *((float *)this + 10);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  return v4 ^ v3 ^ v5 ^ v7;
}

_QWORD *CMMsl::PencilDeviceMotion::makeSuper(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[4])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135C5D0;
    *(_DWORD *)(v2 + 152) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_QWORD *)(v2 + 120) = 0;
    this = (_QWORD *)v1[4];
    v1[4] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void CMMsl::PencilFusionDMYawAlignmentUpdate::~PencilFusionDMYawAlignmentUpdate(CMMsl::PencilFusionDMYawAlignmentUpdate *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::PencilFusionDMYawAlignmentUpdate::PencilFusionDMYawAlignmentUpdate(uint64_t this, const CMMsl::PencilFusionDMYawAlignmentUpdate *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  *(_QWORD *)this = &off_25135FEE8;
  *(_DWORD *)(this + 64) = 0;
  v2 = *((_BYTE *)a2 + 64);
  if ((v2 & 0x20) != 0)
  {
    v4 = *((_QWORD *)a2 + 6);
    v3 = 32;
    *(_BYTE *)(this + 64) = 32;
    *(_QWORD *)(this + 48) = v4;
    v2 = *((_BYTE *)a2 + 64);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 64) & 4) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 3);
    v3 |= 4u;
    *(_BYTE *)(this + 64) = v3;
    *(_QWORD *)(this + 24) = v5;
    v2 = *((_BYTE *)a2 + 64);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    v6 = *((_QWORD *)a2 + 4);
    v3 |= 8u;
    *(_BYTE *)(this + 64) = v3;
    *(_QWORD *)(this + 32) = v6;
    v2 = *((_BYTE *)a2 + 64);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_15;
    }
  }
  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 14);
  v3 |= 0x40u;
  *(_BYTE *)(this + 64) = v3;
  *(_DWORD *)(this + 56) = v7;
  v2 = *((_BYTE *)a2 + 64);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0)
      goto LABEL_10;
    goto LABEL_16;
  }
LABEL_15:
  v8 = *((_QWORD *)a2 + 5);
  v3 |= 0x10u;
  *(_BYTE *)(this + 64) = v3;
  *(_QWORD *)(this + 40) = v8;
  v2 = *((_BYTE *)a2 + 64);
  if ((v2 & 1) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0)
      goto LABEL_11;
    goto LABEL_17;
  }
LABEL_16:
  v9 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_BYTE *)(this + 64) = v3;
  *(_QWORD *)(this + 8) = v9;
  v2 = *((_BYTE *)a2 + 64);
  if ((v2 & 2) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0)
      return this;
LABEL_18:
    v11 = *((_DWORD *)a2 + 15);
    *(_BYTE *)(this + 64) = v3 | 0x80;
    *(_DWORD *)(this + 60) = v11;
    return this;
  }
LABEL_17:
  v10 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_BYTE *)(this + 64) = v3;
  *(_QWORD *)(this + 16) = v10;
  if ((*((_BYTE *)a2 + 64) & 0x80) != 0)
    goto LABEL_18;
  return this;
}

uint64_t CMMsl::PencilFusionDMYawAlignmentUpdate::operator=(uint64_t a1, const CMMsl::PencilFusionDMYawAlignmentUpdate *a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _BYTE v9[8];
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  if ((const CMMsl::PencilFusionDMYawAlignmentUpdate *)a1 != a2)
  {
    CMMsl::PencilFusionDMYawAlignmentUpdate::PencilFusionDMYawAlignmentUpdate((uint64_t)v9, a2);
    v3 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v4;
    v11 = v3;
    *(_QWORD *)&v4 = v14;
    *(_QWORD *)&v3 = *(_QWORD *)(a1 + 48);
    v5 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 48) = v13;
    *(_QWORD *)(a1 + 56) = v4;
    v6 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v15;
    v15 = v6;
    v7 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v12;
    v12 = v7;
    v13 = v3;
    v14 = v5;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PencilFusionDMYawAlignmentUpdate *a2, CMMsl::PencilFusionDMYawAlignmentUpdate *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  double result;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  v4 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v4;
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  result = *((double *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((double *)a2 + 4) = result;
  v7 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v7;
  v8 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v8;
  v9 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v9;
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v10;
  LODWORD(v10) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v10;
  return result;
}

double CMMsl::PencilFusionDMYawAlignmentUpdate::PencilFusionDMYawAlignmentUpdate(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135FEE8;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135FEE8;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  return result;
}

uint64_t CMMsl::PencilFusionDMYawAlignmentUpdate::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  void (**v11)(CMMsl::PencilFusionDMYawAlignmentUpdate *__hidden);
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(a2 + 64) = 0;
    v4 = *(_QWORD *)(a2 + 40);
    v5 = *(_OWORD *)(a2 + 24);
    v6 = *(_QWORD *)(a1 + 48);
    v7 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    v8 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v5;
    v9 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    v11 = &off_25135FEE8;
    v17 = *(_DWORD *)(a1 + 64);
    v14 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v4;
    v12 = v9;
    v13 = v8;
    *(_QWORD *)&v9 = *(_QWORD *)(a2 + 56);
    *(_DWORD *)(a1 + 64) = v3;
    *(_QWORD *)(a1 + 56) = v9;
    v15 = v6;
    v16 = v7;
    PB::Base::~Base((PB::Base *)&v11);
  }
  return a1;
}

uint64_t CMMsl::PencilFusionDMYawAlignmentUpdate::formatText(CMMsl::PencilFusionDMYawAlignmentUpdate *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 64);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "firstRingSensorTimeStampMicroSeconds");
    v5 = *((_BYTE *)this + 64);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((*((_BYTE *)this + 64) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "lastRingSensorTimeStampMicroSeconds");
  v5 = *((_BYTE *)this + 64);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "medianBufferNumSamples");
  v5 = *((_BYTE *)this + 64);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "medianNorthAlignmentEstimateRad", *((double *)this + 3));
  v5 = *((_BYTE *)this + 64);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "newNorthAlignmentEstimateRad", *((double *)this + 4));
  v5 = *((_BYTE *)this + 64);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0)
      goto LABEL_8;
LABEL_17:
    PB::TextFormatter::format(a2, "timeElapsedSinceLastUpdateMicroSeconds");
    if ((*((_BYTE *)this + 64) & 0x20) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_9;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "numRingSensorSamples");
  v5 = *((_BYTE *)this + 64);
  if ((v5 & 0x10) != 0)
    goto LABEL_17;
LABEL_8:
  if ((v5 & 0x20) != 0)
LABEL_9:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 6));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PencilFusionDMYawAlignmentUpdate::readFrom(CMMsl::PencilFusionDMYawAlignmentUpdate *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_26;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_21;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_26:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 64) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_36;
        *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_108;
      case 2u:
        *((_BYTE *)this + 64) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_36;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_108;
      case 3u:
        *((_BYTE *)this + 64) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_108:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_36:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 4u:
        *((_BYTE *)this + 64) |= 0x40u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v51 = 0;
          v52 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_113;
            }
            v53 = v21++;
            v54 = *(_BYTE *)(v22 + v53);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v54 & 0x7F) << v51;
            if ((v54 & 0x80) == 0)
              break;
            v51 += 7;
            v14 = v52++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
LABEL_112:
              v2 = v53 + 1;
              goto LABEL_113;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v25) = 0;
          goto LABEL_112;
        }
        v23 = 0;
        v24 = 0;
        v25 = 0;
        do
        {
          v2 = v21 + 1;
          *((_QWORD *)a2 + 1) = v21 + 1;
          v26 = *(_BYTE *)(v22 + v21);
          v25 |= (unint64_t)(v26 & 0x7F) << v23;
          if ((v26 & 0x80) == 0)
            goto LABEL_113;
          v23 += 7;
          v21 = v2;
          v14 = v24++ > 8;
        }
        while (!v14);
        LODWORD(v25) = 0;
LABEL_113:
        *((_DWORD *)this + 14) = v25;
        break;
      case 5u:
        *((_BYTE *)this + 64) |= 0x10u;
        v27 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v28 = *(_QWORD *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v55 = 0;
          v56 = 0;
          v31 = 0;
          if (v2 <= v27)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v27)
            {
              v31 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_118;
            }
            v57 = v27++;
            v58 = *(_BYTE *)(v28 + v57);
            *((_QWORD *)a2 + 1) = v27;
            v31 |= (unint64_t)(v58 & 0x7F) << v55;
            if ((v58 & 0x80) == 0)
              break;
            v55 += 7;
            v14 = v56++ > 8;
            if (v14)
            {
              v31 = 0;
LABEL_117:
              v2 = v57 + 1;
              goto LABEL_118;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v31 = 0;
          goto LABEL_117;
        }
        v29 = 0;
        v30 = 0;
        v31 = 0;
        do
        {
          v2 = v27 + 1;
          *((_QWORD *)a2 + 1) = v27 + 1;
          v32 = *(_BYTE *)(v28 + v27);
          v31 |= (unint64_t)(v32 & 0x7F) << v29;
          if ((v32 & 0x80) == 0)
            goto LABEL_118;
          v29 += 7;
          v27 = v2;
          v14 = v30++ > 8;
        }
        while (!v14);
        v31 = 0;
LABEL_118:
        *((_QWORD *)this + 5) = v31;
        break;
      case 6u:
        *((_BYTE *)this + 64) |= 1u;
        v33 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v34 = *(_QWORD *)a2;
        if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
        {
          v59 = 0;
          v60 = 0;
          v37 = 0;
          if (v2 <= v33)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v33)
            {
              v37 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_123;
            }
            v61 = v33++;
            v62 = *(_BYTE *)(v34 + v61);
            *((_QWORD *)a2 + 1) = v33;
            v37 |= (unint64_t)(v62 & 0x7F) << v59;
            if ((v62 & 0x80) == 0)
              break;
            v59 += 7;
            v14 = v60++ > 8;
            if (v14)
            {
              v37 = 0;
LABEL_122:
              v2 = v61 + 1;
              goto LABEL_123;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v37 = 0;
          goto LABEL_122;
        }
        v35 = 0;
        v36 = 0;
        v37 = 0;
        do
        {
          v2 = v33 + 1;
          *((_QWORD *)a2 + 1) = v33 + 1;
          v38 = *(_BYTE *)(v34 + v33);
          v37 |= (unint64_t)(v38 & 0x7F) << v35;
          if ((v38 & 0x80) == 0)
            goto LABEL_123;
          v35 += 7;
          v33 = v2;
          v14 = v36++ > 8;
        }
        while (!v14);
        v37 = 0;
LABEL_123:
        *((_QWORD *)this + 1) = v37;
        break;
      case 7u:
        *((_BYTE *)this + 64) |= 2u;
        v39 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v40 = *(_QWORD *)a2;
        if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
        {
          v63 = 0;
          v64 = 0;
          v43 = 0;
          if (v2 <= v39)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v39)
            {
              v43 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_128;
            }
            v65 = v39++;
            v66 = *(_BYTE *)(v40 + v65);
            *((_QWORD *)a2 + 1) = v39;
            v43 |= (unint64_t)(v66 & 0x7F) << v63;
            if ((v66 & 0x80) == 0)
              break;
            v63 += 7;
            v14 = v64++ > 8;
            if (v14)
            {
              v43 = 0;
LABEL_127:
              v2 = v65 + 1;
              goto LABEL_128;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v43 = 0;
          goto LABEL_127;
        }
        v41 = 0;
        v42 = 0;
        v43 = 0;
        do
        {
          v2 = v39 + 1;
          *((_QWORD *)a2 + 1) = v39 + 1;
          v44 = *(_BYTE *)(v40 + v39);
          v43 |= (unint64_t)(v44 & 0x7F) << v41;
          if ((v44 & 0x80) == 0)
            goto LABEL_128;
          v41 += 7;
          v39 = v2;
          v14 = v42++ > 8;
        }
        while (!v14);
        v43 = 0;
LABEL_128:
        *((_QWORD *)this + 2) = v43;
        break;
      case 8u:
        *((_BYTE *)this + 64) |= 0x80u;
        v45 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v46 = *(_QWORD *)a2;
        if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
        {
          v67 = 0;
          v68 = 0;
          v49 = 0;
          if (v2 <= v45)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v45)
            {
              LODWORD(v49) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_133;
            }
            v69 = v45++;
            v70 = *(_BYTE *)(v46 + v69);
            *((_QWORD *)a2 + 1) = v45;
            v49 |= (unint64_t)(v70 & 0x7F) << v67;
            if ((v70 & 0x80) == 0)
              break;
            v67 += 7;
            v14 = v68++ > 8;
            if (v14)
            {
              LODWORD(v49) = 0;
LABEL_132:
              v2 = v69 + 1;
              goto LABEL_133;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v49) = 0;
          goto LABEL_132;
        }
        v47 = 0;
        v48 = 0;
        v49 = 0;
        do
        {
          v2 = v45 + 1;
          *((_QWORD *)a2 + 1) = v45 + 1;
          v50 = *(_BYTE *)(v46 + v45);
          v49 |= (unint64_t)(v50 & 0x7F) << v47;
          if ((v50 & 0x80) == 0)
            goto LABEL_133;
          v47 += 7;
          v45 = v2;
          v14 = v48++ > 8;
        }
        while (!v14);
        LODWORD(v49) = 0;
LABEL_133:
        *((_DWORD *)this + 15) = v49;
        break;
      default:
        goto LABEL_19;
    }
LABEL_21:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::PencilFusionDMYawAlignmentUpdate::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 64);
  if ((v4 & 0x20) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 48));
    v4 = *(_BYTE *)(v3 + 64);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(this + 64) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 2) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_16:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_BYTE *)(v3 + 64) & 0x80) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::PencilFusionDMYawAlignmentUpdate::hash_value(CMMsl::PencilFusionDMYawAlignmentUpdate *this)
{
  double v1;
  double v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((*((_BYTE *)this + 64) & 0x20) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 64) & 4) != 0)
      goto LABEL_3;
LABEL_17:
    v2 = 0.0;
    if ((*((_BYTE *)this + 64) & 8) != 0)
      goto LABEL_6;
LABEL_18:
    v3 = 0.0;
    if ((*((_BYTE *)this + 64) & 0x40) != 0)
      goto LABEL_9;
    goto LABEL_19;
  }
  v1 = *((double *)this + 6);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 64) & 4) == 0)
    goto LABEL_17;
LABEL_3:
  v2 = *((double *)this + 3);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 64) & 8) == 0)
    goto LABEL_18;
LABEL_6:
  v3 = *((double *)this + 4);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((*((_BYTE *)this + 64) & 0x40) != 0)
  {
LABEL_9:
    v4 = *((unsigned int *)this + 14);
    if ((*((_BYTE *)this + 64) & 0x10) != 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  v4 = 0;
  if ((*((_BYTE *)this + 64) & 0x10) != 0)
  {
LABEL_10:
    v5 = *((_QWORD *)this + 5);
    if ((*((_BYTE *)this + 64) & 1) != 0)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_20:
  v5 = 0;
  if ((*((_BYTE *)this + 64) & 1) != 0)
  {
LABEL_11:
    v6 = *((_QWORD *)this + 1);
    if ((*((_BYTE *)this + 64) & 2) != 0)
      goto LABEL_12;
LABEL_22:
    v7 = 0;
    if ((*((_BYTE *)this + 64) & 0x80) != 0)
      goto LABEL_13;
LABEL_23:
    v8 = 0;
    return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8;
  }
LABEL_21:
  v6 = 0;
  if ((*((_BYTE *)this + 64) & 2) == 0)
    goto LABEL_22;
LABEL_12:
  v7 = *((_QWORD *)this + 2);
  if ((*((_BYTE *)this + 64) & 0x80) == 0)
    goto LABEL_23;
LABEL_13:
  v8 = *((unsigned int *)this + 15);
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8;
}

void CMMsl::PencilFusionReplayResult::~PencilFusionReplayResult(CMMsl::PencilFusionReplayResult *this)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = &off_25135FF20;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::PencilFusionReplayResult::~PencilFusionReplayResult(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::PencilFusionReplayResult *CMMsl::PencilFusionReplayResult::PencilFusionReplayResult(CMMsl::PencilFusionReplayResult *this, const CMMsl::PencilFusionReplayResult *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  *((_QWORD *)this + 1) = 0;
  v4 = (_QWORD *)((char *)this + 8);
  *(_QWORD *)this = &off_25135FF20;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 16) = 0;
  if (*((_QWORD *)a2 + 6))
  {
    v5 = operator new();
    v6 = CMMsl::PencilFusionResult::PencilFusionResult(v5, *((const CMMsl::PencilFusionResult **)a2 + 6));
    v7 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if ((*((_BYTE *)a2 + 64) & 4) != 0)
  {
    v8 = *((_QWORD *)a2 + 7);
    *((_BYTE *)this + 64) |= 4u;
    *((_QWORD *)this + 7) = v8;
  }
  if (this != a2)
    sub_2429111C4(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
  v9 = *((_BYTE *)a2 + 64);
  if ((v9 & 1) != 0)
  {
    v10 = *((_QWORD *)a2 + 4);
    *((_BYTE *)this + 64) |= 1u;
    *((_QWORD *)this + 4) = v10;
    v9 = *((_BYTE *)a2 + 64);
  }
  if ((v9 & 2) != 0)
  {
    v11 = *((_QWORD *)a2 + 5);
    *((_BYTE *)this + 64) |= 2u;
    *((_QWORD *)this + 5) = v11;
  }
  return this;
}

uint64_t CMMsl::PencilFusionReplayResult::operator=(uint64_t a1, const CMMsl::PencilFusionReplayResult *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  _BYTE v11[8];
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  if ((const CMMsl::PencilFusionReplayResult *)a1 != a2)
  {
    CMMsl::PencilFusionReplayResult::PencilFusionReplayResult((CMMsl::PencilFusionReplayResult *)v11, a2);
    v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v17;
    v17 = v3;
    v4 = *(_QWORD *)(a1 + 48);
    v5 = *(_QWORD *)(a1 + 56);
    v6 = v16;
    *(_QWORD *)(a1 + 48) = v15;
    *(_QWORD *)(a1 + 56) = v6;
    v15 = v4;
    v16 = v5;
    v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    v12 = v7;
    v8 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v13;
    v13 = v8;
    v9 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v14;
    v14 = v9;
    CMMsl::PencilFusionReplayResult::~PencilFusionReplayResult((CMMsl::PencilFusionReplayResult *)v11);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::PencilFusionReplayResult *a2, CMMsl::PencilFusionReplayResult *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(_DWORD *)(this + 64);
  *(_DWORD *)(this + 64) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  v4 = *(_QWORD *)(this + 48);
  v5 = *(_QWORD *)(this + 56);
  v6 = *((_QWORD *)a2 + 7);
  *(_QWORD *)(this + 48) = *((_QWORD *)a2 + 6);
  *(_QWORD *)(this + 56) = v6;
  *((_QWORD *)a2 + 6) = v4;
  *((_QWORD *)a2 + 7) = v5;
  v7 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v7;
  v8 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v8;
  v9 = *(_QWORD *)(this + 24);
  v10 = *(_QWORD *)(this + 32);
  v11 = *((_QWORD *)a2 + 4);
  *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
  *(_QWORD *)(this + 32) = v11;
  *((_QWORD *)a2 + 3) = v9;
  *((_QWORD *)a2 + 4) = v10;
  v12 = *(_QWORD *)(this + 40);
  *(_QWORD *)(this + 40) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v12;
  return this;
}

uint64_t CMMsl::PencilFusionReplayResult::PencilFusionReplayResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_25135FF20;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  v6 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  sub_242911330(v4, (__n128 *)(a2 + 8));
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t CMMsl::PencilFusionReplayResult::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  _BYTE v11[8];
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  if (a1 != a2)
  {
    CMMsl::PencilFusionReplayResult::PencilFusionReplayResult((uint64_t)v11, a2);
    v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v17;
    v17 = v3;
    v4 = *(_QWORD *)(a1 + 48);
    v5 = *(_QWORD *)(a1 + 56);
    v6 = v16;
    *(_QWORD *)(a1 + 48) = v15;
    *(_QWORD *)(a1 + 56) = v6;
    v15 = v4;
    v16 = v5;
    v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    v12 = v7;
    v8 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v13;
    v13 = v8;
    v9 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v14;
    v14 = v9;
    CMMsl::PencilFusionReplayResult::~PencilFusionReplayResult((CMMsl::PencilFusionReplayResult *)v11);
  }
  return a1;
}

uint64_t CMMsl::PencilFusionReplayResult::formatText(CMMsl::PencilFusionReplayResult *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;
  double *v6;
  double *v7;
  double v8;
  uint64_t v9;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 64);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "lastAuxTimeStampMicroSeconds");
    v5 = *((_BYTE *)this + 64);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "lastRingSensorTimeStampMicroSeconds");
  v6 = (double *)*((_QWORD *)this + 1);
  v7 = (double *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(a2, "qSP", v8);
  }
  v9 = *((_QWORD *)this + 6);
  if (v9)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, a2, "super");
  if ((*((_BYTE *)this + 64) & 4) != 0)
    PB::TextFormatter::format(a2, "timeStampMicroSeconds");
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::PencilFusionReplayResult::readFrom(CMMsl::PencilFusionReplayResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _DWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  char v60;
  unsigned int v61;
  unint64_t v62;
  char v63;
  unint64_t v64;
  char *v65;
  _QWORD *v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  unint64_t v73;
  char v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t v83;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (2)
  {
    v8 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_25:
      if ((v11 & 7) != 4)
      {
        switch((v11 >> 3))
        {
          case 1u:
            v20 = (_DWORD *)operator new();
            *(_QWORD *)v20 = &off_25135FF58;
            v20[19] = 0;
            v21 = *((_QWORD *)this + 6);
            *((_QWORD *)this + 6) = v20;
            if (v21)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
              v20 = (_DWORD *)*((_QWORD *)this + 6);
            }
            if (PB::Reader::placeMark()
              && ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, a2) & 1) != 0)
            {
              goto LABEL_31;
            }
            return 0;
          case 2u:
            *((_BYTE *)this + 64) |= 4u;
            v22 = *((_QWORD *)a2 + 1);
            v23 = *((_QWORD *)a2 + 2);
            v24 = *(_QWORD *)a2;
            if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
            {
              v25 = 0;
              v26 = 0;
              v27 = 0;
              do
              {
                v28 = v22 + 1;
                *((_QWORD *)a2 + 1) = v22 + 1;
                v29 = *(_BYTE *)(v24 + v22);
                v27 |= (unint64_t)(v29 & 0x7F) << v25;
                if ((v29 & 0x80) == 0)
                  goto LABEL_113;
                v25 += 7;
                v22 = v28;
                v14 = v26++ > 8;
              }
              while (!v14);
LABEL_83:
              v27 = 0;
              goto LABEL_113;
            }
            v60 = 0;
            v61 = 0;
            v27 = 0;
            if (v23 <= v22)
              v23 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v23 == v22)
              {
                v27 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v62 = v22 + 1;
                v63 = *(_BYTE *)(v24 + v22);
                *((_QWORD *)a2 + 1) = v62;
                v27 |= (unint64_t)(v63 & 0x7F) << v60;
                if (v63 < 0)
                {
                  v60 += 7;
                  v22 = v62;
                  v14 = v61++ > 8;
                  if (v14)
                    goto LABEL_83;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  v27 = 0;
              }
              break;
            }
LABEL_113:
            *((_QWORD *)this + 7) = v27;
            goto LABEL_20;
          case 3u:
            if ((v11 & 7) == 2)
            {
              if ((PB::Reader::placeMark() & 1) != 0)
                return 0;
              v30 = *((_QWORD *)a2 + 1);
              v31 = *((_QWORD *)a2 + 2);
              while (v30 < v31 && !*((_BYTE *)a2 + 24))
              {
                v33 = (char *)*((_QWORD *)this + 2);
                v32 = *((_QWORD *)this + 3);
                if ((unint64_t)v33 >= v32)
                {
                  v35 = (char *)*((_QWORD *)this + 1);
                  v36 = (v33 - v35) >> 3;
                  v37 = v36 + 1;
                  if ((unint64_t)(v36 + 1) >> 61)
                    goto LABEL_135;
                  v38 = v32 - (_QWORD)v35;
                  if (v38 >> 2 > v37)
                    v37 = v38 >> 2;
                  if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
                    v39 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v39 = v37;
                  if (v39)
                  {
                    v39 = (unint64_t)sub_2429112FC(v39);
                    v35 = (char *)*((_QWORD *)this + 1);
                    v33 = (char *)*((_QWORD *)this + 2);
                  }
                  else
                  {
                    v40 = 0;
                  }
                  v41 = (_QWORD *)(v39 + 8 * v36);
                  *v41 = 0;
                  v34 = v41 + 1;
                  while (v33 != v35)
                  {
                    v42 = *((_QWORD *)v33 - 1);
                    v33 -= 8;
                    *--v41 = v42;
                  }
                  *((_QWORD *)this + 1) = v41;
                  *((_QWORD *)this + 2) = v34;
                  *((_QWORD *)this + 3) = v39 + 8 * v40;
                  if (v35)
                    operator delete(v35);
                }
                else
                {
                  *(_QWORD *)v33 = 0;
                  v34 = v33 + 8;
                }
                *((_QWORD *)this + 2) = v34;
                v43 = *((_QWORD *)a2 + 1);
                if (v43 > 0xFFFFFFFFFFFFFFF7 || v43 + 8 > *((_QWORD *)a2 + 2))
                {
                  *((_BYTE *)a2 + 24) = 1;
                  break;
                }
                *(v34 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v43);
                v31 = *((_QWORD *)a2 + 2);
                v30 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v30;
              }
LABEL_31:
              PB::Reader::recallMark();
            }
            else
            {
              v65 = (char *)*((_QWORD *)this + 2);
              v64 = *((_QWORD *)this + 3);
              if ((unint64_t)v65 >= v64)
              {
                v75 = (char *)*((_QWORD *)this + 1);
                v76 = (v65 - v75) >> 3;
                v77 = v76 + 1;
                if ((unint64_t)(v76 + 1) >> 61)
LABEL_135:
                  sub_242729A44();
                v78 = v64 - (_QWORD)v75;
                if (v78 >> 2 > v77)
                  v77 = v78 >> 2;
                if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF8)
                  v79 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v79 = v77;
                if (v79)
                {
                  v79 = (unint64_t)sub_2429112FC(v79);
                  v75 = (char *)*((_QWORD *)this + 1);
                  v65 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v80 = 0;
                }
                v81 = (_QWORD *)(v79 + 8 * v76);
                *v81 = 0;
                v66 = v81 + 1;
                while (v65 != v75)
                {
                  v82 = *((_QWORD *)v65 - 1);
                  v65 -= 8;
                  *--v81 = v82;
                }
                *((_QWORD *)this + 1) = v81;
                *((_QWORD *)this + 2) = v66;
                *((_QWORD *)this + 3) = v79 + 8 * v80;
                if (v75)
                  operator delete(v75);
              }
              else
              {
                *(_QWORD *)v65 = 0;
                v66 = v65 + 8;
              }
              *((_QWORD *)this + 2) = v66;
              v83 = *((_QWORD *)a2 + 1);
              if (v83 <= 0xFFFFFFFFFFFFFFF7 && v83 + 8 <= *((_QWORD *)a2 + 2))
              {
                *(v66 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v83);
                *((_QWORD *)a2 + 1) += 8;
              }
              else
              {
                *((_BYTE *)a2 + 24) = 1;
              }
            }
LABEL_20:
            v2 = *((_QWORD *)a2 + 1);
            v3 = *((_QWORD *)a2 + 2);
            v4 = *((unsigned __int8 *)a2 + 24);
            if (v2 >= v3 || v4 != 0)
              return v4 == 0;
            continue;
          case 4u:
            *((_BYTE *)this + 64) |= 1u;
            v44 = *((_QWORD *)a2 + 1);
            v45 = *((_QWORD *)a2 + 2);
            v46 = *(_QWORD *)a2;
            if (v44 <= 0xFFFFFFFFFFFFFFF5 && v44 + 10 <= v45)
            {
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v50 = v44 + 1;
                *((_QWORD *)a2 + 1) = v44 + 1;
                v51 = *(_BYTE *)(v46 + v44);
                v49 |= (unint64_t)(v51 & 0x7F) << v47;
                if ((v51 & 0x80) == 0)
                  goto LABEL_116;
                v47 += 7;
                v44 = v50;
                v14 = v48++ > 8;
              }
              while (!v14);
LABEL_92:
              v49 = 0;
              goto LABEL_116;
            }
            v67 = 0;
            v68 = 0;
            v49 = 0;
            if (v45 <= v44)
              v45 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v45 == v44)
              {
                v49 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v69 = v44 + 1;
                v70 = *(_BYTE *)(v46 + v44);
                *((_QWORD *)a2 + 1) = v69;
                v49 |= (unint64_t)(v70 & 0x7F) << v67;
                if (v70 < 0)
                {
                  v67 += 7;
                  v44 = v69;
                  v14 = v68++ > 8;
                  if (v14)
                    goto LABEL_92;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  v49 = 0;
              }
              break;
            }
LABEL_116:
            *((_QWORD *)this + 4) = v49;
            goto LABEL_20;
          case 5u:
            *((_BYTE *)this + 64) |= 2u;
            v52 = *((_QWORD *)a2 + 1);
            v53 = *((_QWORD *)a2 + 2);
            v54 = *(_QWORD *)a2;
            if (v52 <= 0xFFFFFFFFFFFFFFF5 && v52 + 10 <= v53)
            {
              v55 = 0;
              v56 = 0;
              v57 = 0;
              do
              {
                v58 = v52 + 1;
                *((_QWORD *)a2 + 1) = v52 + 1;
                v59 = *(_BYTE *)(v54 + v52);
                v57 |= (unint64_t)(v59 & 0x7F) << v55;
                if ((v59 & 0x80) == 0)
                  goto LABEL_119;
                v55 += 7;
                v52 = v58;
                v14 = v56++ > 8;
              }
              while (!v14);
LABEL_99:
              v57 = 0;
              goto LABEL_119;
            }
            v71 = 0;
            v72 = 0;
            v57 = 0;
            if (v53 <= v52)
              v53 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v53 == v52)
              {
                v57 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v73 = v52 + 1;
                v74 = *(_BYTE *)(v54 + v52);
                *((_QWORD *)a2 + 1) = v73;
                v57 |= (unint64_t)(v74 & 0x7F) << v71;
                if (v74 < 0)
                {
                  v71 += 7;
                  v52 = v73;
                  v14 = v72++ > 8;
                  if (v14)
                    goto LABEL_99;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  v57 = 0;
              }
              break;
            }
LABEL_119:
            *((_QWORD *)this + 5) = v57;
            goto LABEL_20;
          default:
            goto LABEL_19;
        }
      }
      v4 = 0;
      return v4 == 0;
    }
    break;
  }
  v15 = 0;
  v16 = 0;
  v11 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v17 = v2 + 1;
    v18 = *(_BYTE *)(v8 + v2);
    *((_QWORD *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0)
      goto LABEL_25;
    v15 += 7;
    v2 = v17;
    v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  if ((PB::Reader::skip(a2) & 1) != 0)
    goto LABEL_20;
  return 0;
}

uint64_t CMMsl::PencilFusionReplayResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  double *v5;
  double *v6;
  double v7;
  char v8;

  v3 = this;
  v4 = *(const PB::Base **)(this + 48);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  if ((*(_BYTE *)(v3 + 64) & 4) != 0)
    this = PB::Writer::writeVarInt(a2);
  v5 = *(double **)(v3 + 8);
  v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7);
  }
  v8 = *(_BYTE *)(v3 + 64);
  if ((v8 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v8 = *(_BYTE *)(v3 + 64);
  }
  if ((v8 & 2) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::PencilFusionReplayResult::hash_value(CMMsl::PencilFusionReplayResult *this)
{
  CMMsl::PencilFusionResult *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (CMMsl::PencilFusionResult *)*((_QWORD *)this + 6);
  if (v2)
    v3 = CMMsl::PencilFusionResult::hash_value(v2);
  else
    v3 = 0;
  if ((*((_BYTE *)this + 64) & 4) != 0)
    v4 = *((_QWORD *)this + 7);
  else
    v4 = 0;
  v5 = PBHashBytes();
  if ((*((_BYTE *)this + 64) & 1) != 0)
  {
    v6 = *((_QWORD *)this + 4);
    if ((*((_BYTE *)this + 64) & 2) != 0)
      goto LABEL_9;
LABEL_11:
    v7 = 0;
    return v4 ^ v3 ^ v6 ^ v7 ^ v5;
  }
  v6 = 0;
  if ((*((_BYTE *)this + 64) & 2) == 0)
    goto LABEL_11;
LABEL_9:
  v7 = *((_QWORD *)this + 5);
  return v4 ^ v3 ^ v6 ^ v7 ^ v5;
}

_QWORD *CMMsl::PencilFusionReplayResult::makeSuper(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[6])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135FF58;
    *(_DWORD *)(v2 + 76) = 0;
    this = (_QWORD *)v1[6];
    v1[6] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void CMMsl::PencilFusionResult::~PencilFusionResult(CMMsl::PencilFusionResult *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::PencilFusionResult::PencilFusionResult(uint64_t this, const CMMsl::PencilFusionResult *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  *(_QWORD *)this = &off_25135FF58;
  *(_DWORD *)(this + 76) = 0;
  v2 = *((_WORD *)a2 + 38);
  if ((v2 & 0x10) != 0)
  {
    v4 = *((_QWORD *)a2 + 5);
    v3 = 16;
    *(_WORD *)(this + 76) = 16;
    *(_QWORD *)(this + 40) = v4;
    v2 = *((_WORD *)a2 + 38);
    if ((v2 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 6);
    v3 |= 0x20u;
    *(_WORD *)(this + 76) = v3;
    *(_QWORD *)(this + 48) = v5;
    v2 = *((_WORD *)a2 + 38);
  }
LABEL_6:
  if ((v2 & 0x40) != 0)
  {
    v6 = *((_QWORD *)a2 + 7);
    v3 |= 0x40u;
    *(_WORD *)(this + 76) = v3;
    *(_QWORD *)(this + 56) = v6;
    v2 = *((_WORD *)a2 + 38);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0)
        goto LABEL_9;
      goto LABEL_16;
    }
  }
  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a2 + 8);
  v3 |= 0x80u;
  *(_WORD *)(this + 76) = v3;
  *(_QWORD *)(this + 64) = v7;
  v2 = *((_WORD *)a2 + 38);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 2) == 0)
      goto LABEL_10;
    goto LABEL_17;
  }
LABEL_16:
  v8 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 76) = v3;
  *(_QWORD *)(this + 8) = v8;
  v2 = *((_WORD *)a2 + 38);
  if ((v2 & 2) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0)
      goto LABEL_11;
    goto LABEL_18;
  }
LABEL_17:
  v9 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_WORD *)(this + 76) = v3;
  *(_QWORD *)(this + 16) = v9;
  v2 = *((_WORD *)a2 + 38);
  if ((v2 & 8) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0)
      goto LABEL_12;
    goto LABEL_19;
  }
LABEL_18:
  v10 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *(_WORD *)(this + 76) = v3;
  *(_QWORD *)(this + 32) = v10;
  v2 = *((_WORD *)a2 + 38);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 0x100) == 0)
      return this;
LABEL_20:
    v12 = *((_BYTE *)a2 + 72);
    *(_WORD *)(this + 76) = v3 | 0x100;
    *(_BYTE *)(this + 72) = v12;
    return this;
  }
LABEL_19:
  v11 = *((_QWORD *)a2 + 3);
  v3 |= 4u;
  *(_WORD *)(this + 76) = v3;
  *(_QWORD *)(this + 24) = v11;
  if ((*((_WORD *)a2 + 38) & 0x100) != 0)
    goto LABEL_20;
  return this;
}

uint64_t CMMsl::PencilFusionResult::operator=(uint64_t a1, const CMMsl::PencilFusionResult *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  int v8;
  uint64_t v9;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  char v17;
  int v18;

  if ((const CMMsl::PencilFusionResult *)a1 != a2)
  {
    CMMsl::PencilFusionResult::PencilFusionResult((uint64_t)&v11, a2);
    v3 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v16;
    v16 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    v12 = v4;
    v5 = v15;
    v7 = *(_OWORD *)(a1 + 32);
    v6 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(a1 + 32) = v14;
    *(_OWORD *)(a1 + 48) = v5;
    v8 = *(_DWORD *)(a1 + 76);
    *(_DWORD *)(a1 + 76) = v18;
    v18 = v8;
    v14 = v7;
    v15 = v6;
    v9 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v13;
    v13 = v9;
    LOBYTE(v9) = *(_BYTE *)(a1 + 72);
    *(_BYTE *)(a1 + 72) = v17;
    v17 = v9;
    PB::Base::~Base((PB::Base *)&v11);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PencilFusionResult *a2, CMMsl::PencilFusionResult *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;
  uint64_t v11;

  v3 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v3;
  v4 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v4;
  v5 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v5;
  v6 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v6;
  v7 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v7;
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v8;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v9;
  result = *((double *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((double *)a2 + 4) = result;
  v11 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v11;
  LOBYTE(v11) = *((_BYTE *)this + 72);
  *((_BYTE *)this + 72) = *((_BYTE *)a2 + 72);
  *((_BYTE *)a2 + 72) = v11;
  return result;
}

double CMMsl::PencilFusionResult::PencilFusionResult(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135FF58;
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a2 + 76) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135FF58;
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a2 + 76) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return result;
}

uint64_t CMMsl::PencilFusionResult::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  void (**v14)(CMMsl::PencilFusionResult *__hidden);
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  int v21;

  if (a1 != a2)
  {
    v14 = &off_25135FF58;
    v3 = *(_DWORD *)(a2 + 76);
    *(_DWORD *)(a2 + 76) = 0;
    v4 = *(_QWORD *)(a2 + 64);
    v5 = *(_QWORD *)(a2 + 24);
    v6 = *(_BYTE *)(a2 + 72);
    v21 = *(_DWORD *)(a1 + 76);
    v19 = *(_QWORD *)(a1 + 64);
    v7 = *(_OWORD *)(a2 + 8);
    v15 = *(_OWORD *)(a1 + 8);
    v8 = *(_OWORD *)(a2 + 32);
    v9 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = v4;
    v11 = *(_OWORD *)(a1 + 32);
    v10 = *(_OWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 76) = v3;
    *(_OWORD *)(a1 + 8) = v7;
    *(_OWORD *)(a1 + 32) = v8;
    *(_OWORD *)(a1 + 48) = v9;
    v17 = v11;
    v18 = v10;
    v12 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v5;
    v16 = v12;
    LOBYTE(v12) = *(_BYTE *)(a1 + 72);
    *(_BYTE *)(a1 + 72) = v6;
    v20 = v12;
    PB::Base::~Base((PB::Base *)&v14);
  }
  return a1;
}

uint64_t CMMsl::PencilFusionResult::formatText(CMMsl::PencilFusionResult *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 38);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "altitudeAngle", *((double *)this + 1));
    v5 = *((_WORD *)this + 38);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "azimuthAngle", *((double *)this + 2));
  v5 = *((_WORD *)this + 38);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "estimated");
  v5 = *((_WORD *)this + 38);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "estimationUpdateIndex");
  v5 = *((_WORD *)this + 38);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "rollAngle", *((double *)this + 4));
  v5 = *((_WORD *)this + 38);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 5));
  v5 = *((_WORD *)this + 38);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x40) == 0)
      goto LABEL_9;
LABEL_19:
    PB::TextFormatter::format(a2, "y", *((double *)this + 7));
    if ((*((_WORD *)this + 38) & 0x80) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_10;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "x", *((double *)this + 6));
  v5 = *((_WORD *)this + 38);
  if ((v5 & 0x40) != 0)
    goto LABEL_19;
LABEL_9:
  if ((v5 & 0x80) != 0)
LABEL_10:
    PB::TextFormatter::format(a2, "z", *((double *)this + 8));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PencilFusionResult::readFrom(CMMsl::PencilFusionResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  int v26;
  BOOL v27;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_69;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 38) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_43;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_63;
      case 2u:
        *((_WORD *)this + 38) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_43;
        *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_63;
      case 3u:
        *((_WORD *)this + 38) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_43;
        *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_63;
      case 4u:
        *((_WORD *)this + 38) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_43;
        *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_63;
      case 5u:
        *((_WORD *)this + 38) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_43;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_63;
      case 6u:
        *((_WORD *)this + 38) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_43;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_63;
      case 7u:
        *((_WORD *)this + 38) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_63:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_43:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 8u:
        *((_WORD *)this + 38) |= 4u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v28 = 0;
          v29 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              v24 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_68;
            }
            v30 = v20++;
            v31 = *(_BYTE *)(v21 + v30);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v14 = v29++ > 8;
            if (v14)
            {
              v24 = 0;
LABEL_67:
              v2 = v30 + 1;
              goto LABEL_68;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v24 = 0;
          goto LABEL_67;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_68;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        v24 = 0;
LABEL_68:
        *((_QWORD *)this + 3) = v24;
        break;
      case 9u:
        *((_WORD *)this + 38) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v27 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v26 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v27 = v26 != 0;
        }
        *((_BYTE *)this + 72) = v27;
        break;
      default:
        goto LABEL_19;
    }
LABEL_69:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::PencilFusionResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 76);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 40));
    v4 = *(_WORD *)(v3 + 76);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 2) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 2) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0)
      return this;
    return PB::Writer::write(a2);
  }
LABEL_18:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_WORD *)(v3 + 76) & 0x100) != 0)
    return PB::Writer::write(a2);
  return this;
}

uint64_t CMMsl::PencilFusionResult::hash_value(CMMsl::PencilFusionResult *this)
{
  __int16 v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *((_WORD *)this + 38);
  if ((v1 & 0x10) == 0)
  {
    v2 = 0.0;
    if ((v1 & 0x20) != 0)
      goto LABEL_3;
LABEL_26:
    v3 = 0.0;
    if ((v1 & 0x40) != 0)
      goto LABEL_6;
LABEL_27:
    v4 = 0.0;
    if ((v1 & 0x80) != 0)
      goto LABEL_9;
LABEL_28:
    v5 = 0.0;
    if ((v1 & 1) != 0)
      goto LABEL_12;
LABEL_29:
    v6 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_15;
LABEL_30:
    v7 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_18;
LABEL_31:
    v8 = 0.0;
    if ((v1 & 4) != 0)
      goto LABEL_21;
LABEL_32:
    v9 = 0;
    if ((*((_WORD *)this + 38) & 0x100) != 0)
      goto LABEL_22;
LABEL_33:
    v10 = 0;
    return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ v9 ^ v10;
  }
  v2 = *((double *)this + 5);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 0x20) == 0)
    goto LABEL_26;
LABEL_3:
  v3 = *((double *)this + 6);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 0x40) == 0)
    goto LABEL_27;
LABEL_6:
  v4 = *((double *)this + 7);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 0x80) == 0)
    goto LABEL_28;
LABEL_9:
  v5 = *((double *)this + 8);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_29;
LABEL_12:
  v6 = *((double *)this + 1);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_30;
LABEL_15:
  v7 = *((double *)this + 2);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_31;
LABEL_18:
  v8 = *((double *)this + 4);
  if (v8 == 0.0)
    v8 = 0.0;
  if ((v1 & 4) == 0)
    goto LABEL_32;
LABEL_21:
  v9 = *((_QWORD *)this + 3);
  if ((*((_WORD *)this + 38) & 0x100) == 0)
    goto LABEL_33;
LABEL_22:
  v10 = *((unsigned __int8 *)this + 72);
  return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ v9 ^ v10;
}

void CMMsl::PencilFusionRingSensorTrustModelUpdate::~PencilFusionRingSensorTrustModelUpdate(CMMsl::PencilFusionRingSensorTrustModelUpdate *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::PencilFusionRingSensorTrustModelUpdate::PencilFusionRingSensorTrustModelUpdate(CMMsl::PencilFusionRingSensorTrustModelUpdate *this, const CMMsl::PencilFusionRingSensorTrustModelUpdate *a2)
{
  char v2;
  char v3;
  double result;
  char v5;
  int v6;

  *(_QWORD *)this = &off_25135FF90;
  *((_DWORD *)this + 6) = 0;
  *((_DWORD *)this + 8) = 0;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 2) != 0)
  {
    result = *((double *)a2 + 2);
    v3 = 2;
    *((_BYTE *)this + 32) = 2;
    *((double *)this + 2) = result;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 32) & 8) != 0)
  {
LABEL_5:
    v5 = *((_BYTE *)a2 + 28);
    v3 |= 8u;
    *((_BYTE *)this + 32) = v3;
    *((_BYTE *)this + 28) = v5;
    v2 = *((_BYTE *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 1) == 0)
      return result;
LABEL_10:
    result = *((double *)a2 + 1);
    *((_BYTE *)this + 32) = v3 | 1;
    *((double *)this + 1) = result;
    return result;
  }
  v6 = *((_DWORD *)a2 + 6);
  v3 |= 4u;
  *((_BYTE *)this + 32) = v3;
  *((_DWORD *)this + 6) = v6;
  if ((*((_BYTE *)a2 + 32) & 1) != 0)
    goto LABEL_10;
  return result;
}

uint64_t CMMsl::PencilFusionRingSensorTrustModelUpdate::operator=(uint64_t a1, const CMMsl::PencilFusionRingSensorTrustModelUpdate *a2)
{
  int v3;
  int v4;
  __int128 v5;
  _BYTE v7[8];
  __int128 v8;
  int v9;
  char v10;
  int v11;

  if ((const CMMsl::PencilFusionRingSensorTrustModelUpdate *)a1 != a2)
  {
    CMMsl::PencilFusionRingSensorTrustModelUpdate::PencilFusionRingSensorTrustModelUpdate((CMMsl::PencilFusionRingSensorTrustModelUpdate *)v7, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v11;
    v11 = v3;
    LOBYTE(v3) = *(_BYTE *)(a1 + 28);
    *(_BYTE *)(a1 + 28) = v10;
    v10 = v3;
    v4 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v9;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PencilFusionRingSensorTrustModelUpdate *a2, CMMsl::PencilFusionRingSensorTrustModelUpdate *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  double result;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  LOBYTE(v3) = *((_BYTE *)this + 28);
  *((_BYTE *)this + 28) = *((_BYTE *)a2 + 28);
  *((_BYTE *)a2 + 28) = v3;
  v5 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v5;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::PencilFusionRingSensorTrustModelUpdate::PencilFusionRingSensorTrustModelUpdate(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135FF90;
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135FF90;
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::PencilFusionRingSensorTrustModelUpdate::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  int v5;
  char v6;
  int v7;
  __int128 v8;
  __int128 v9;
  void (**v11)(CMMsl::PencilFusionRingSensorTrustModelUpdate *__hidden);
  __int128 v12;
  int v13;
  char v14;
  int v15;

  if (a1 != a2)
  {
    v11 = &off_25135FF90;
    v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    v4 = *(_BYTE *)(a2 + 28);
    v5 = *(_DWORD *)(a2 + 24);
    v15 = *(_DWORD *)(a1 + 32);
    v6 = *(_BYTE *)(a1 + 28);
    *(_BYTE *)(a1 + 28) = v4;
    v14 = v6;
    v7 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v5;
    v13 = v7;
    v8 = *(_OWORD *)(a1 + 8);
    v9 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 8) = v9;
    v12 = v8;
    PB::Base::~Base((PB::Base *)&v11);
  }
  return a1;
}

uint64_t CMMsl::PencilFusionRingSensorTrustModelUpdate::formatText(CMMsl::PencilFusionRingSensorTrustModelUpdate *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "avgRelOmegaRps", *((double *)this + 1));
    v5 = *((_BYTE *)this + 32);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
      if ((*((_BYTE *)this + 32) & 8) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "ringSensorTrustModelMode");
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 2) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "trustPencilRingSensorBool");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PencilFusionRingSensorTrustModelUpdate::readFrom(CMMsl::PencilFusionRingSensorTrustModelUpdate *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  char v27;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_54;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 32) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_37;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_48;
      case 2u:
        *((_BYTE *)this + 32) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v21 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v21 = v20 != 0;
        }
        *((_BYTE *)this + 28) = v21;
        break;
      case 3u:
        *((_BYTE *)this + 32) |= 4u;
        v22 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v23 = *(_QWORD *)a2;
        if (v22 > 0xFFFFFFFFFFFFFFF5 || v22 + 10 > v2)
        {
          v28 = 0;
          v29 = 0;
          v26 = 0;
          if (v2 <= v22)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v22)
            {
              LODWORD(v26) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_53;
            }
            v30 = v22++;
            v31 = *(_BYTE *)(v23 + v30);
            *((_QWORD *)a2 + 1) = v22;
            v26 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v26) = 0;
LABEL_52:
              v2 = v30 + 1;
              goto LABEL_53;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v26) = 0;
          goto LABEL_52;
        }
        v24 = 0;
        v25 = 0;
        v26 = 0;
        do
        {
          v2 = v22 + 1;
          *((_QWORD *)a2 + 1) = v22 + 1;
          v27 = *(_BYTE *)(v23 + v22);
          v26 |= (unint64_t)(v27 & 0x7F) << v24;
          if ((v27 & 0x80) == 0)
            goto LABEL_53;
          v24 += 7;
          v22 = v2;
          v14 = v25++ > 8;
        }
        while (!v14);
        LODWORD(v26) = 0;
LABEL_53:
        *((_DWORD *)this + 6) = v26;
        break;
      case 4u:
        *((_BYTE *)this + 32) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_48:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_37:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_54:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::PencilFusionRingSensorTrustModelUpdate::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16));
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 8));
  }
LABEL_8:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_BYTE *)(v3 + 32) & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 8));
  return this;
}

uint64_t CMMsl::PencilFusionRingSensorTrustModelUpdate::hash_value(CMMsl::PencilFusionRingSensorTrustModelUpdate *this)
{
  double v1;
  uint64_t v2;
  uint64_t v3;
  double v4;

  if ((*((_BYTE *)this + 32) & 2) != 0)
  {
    v1 = *((double *)this + 2);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 32) & 8) != 0)
    {
LABEL_3:
      v2 = *((unsigned __int8 *)this + 28);
      if ((*((_BYTE *)this + 32) & 4) != 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 32) & 8) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 32) & 4) != 0)
  {
LABEL_4:
    v3 = *((int *)this + 6);
    if ((*((_BYTE *)this + 32) & 1) != 0)
      goto LABEL_5;
LABEL_13:
    v4 = 0.0;
    return v2 ^ *(_QWORD *)&v1 ^ v3 ^ *(_QWORD *)&v4;
  }
LABEL_12:
  v3 = 0;
  if ((*((_BYTE *)this + 32) & 1) == 0)
    goto LABEL_13;
LABEL_5:
  v4 = *((double *)this + 1);
  if (v4 == 0.0)
    v4 = 0.0;
  return v2 ^ *(_QWORD *)&v1 ^ v3 ^ *(_QWORD *)&v4;
}

void CMMsl::PencilTipForce::~PencilTipForce(CMMsl::PencilTipForce *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::PencilTipForce::PencilTipForce(CMMsl::PencilTipForce *this, const CMMsl::PencilTipForce *a2)
{
  char v2;
  double result;

  *(_QWORD *)this = &off_25135FFC8;
  *((_DWORD *)this + 6) = 0;
  if ((*((_BYTE *)a2 + 24) & 1) != 0)
  {
    result = *((double *)a2 + 1);
    *((_BYTE *)this + 24) = 1;
    *((double *)this + 1) = result;
    v2 = 3;
    if ((*((_BYTE *)a2 + 24) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 24) & 2) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 2);
    *((_BYTE *)this + 24) = v2;
    *((double *)this + 2) = result;
  }
  return result;
}

uint64_t CMMsl::PencilTipForce::operator=(uint64_t a1, uint64_t a2, double a3, double a4)
{
  char v5;
  char v6;
  int v7;
  __int128 v8;
  void (**v10)(CMMsl::PencilTipForce *__hidden);
  __int128 v11;
  int v12;

  if (a1 != a2)
  {
    v10 = &off_25135FFC8;
    v12 = 0;
    v5 = *(_BYTE *)(a2 + 24);
    if ((v5 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      LOBYTE(v12) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        a4 = *(double *)(a2 + 16);
        LOBYTE(v12) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 24) & 2) != 0)
        goto LABEL_6;
    }
    v7 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v12;
    v12 = v7;
    v8 = *(_OWORD *)(a1 + 8);
    *(double *)(a1 + 8) = a3;
    *(double *)(a1 + 16) = a4;
    v11 = v8;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PencilTipForce *a2, CMMsl::PencilTipForce *a3)
{
  int v3;
  uint64_t v4;
  double result;

  v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

uint64_t CMMsl::PencilTipForce::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  void (**v7)(CMMsl::PencilTipForce *__hidden);
  __int128 v8;
  int v9;

  if (a1 != a2)
  {
    v7 = &off_25135FFC8;
    v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    v9 = *(_DWORD *)(a1 + 24);
    v4 = *(_OWORD *)(a1 + 8);
    v5 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 24) = v3;
    *(_OWORD *)(a1 + 8) = v5;
    v8 = v4;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::PencilTipForce::formatText(CMMsl::PencilTipForce *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    v5 = *((_BYTE *)this + 24);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "tipForce", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PencilTipForce::readFrom(CMMsl::PencilTipForce *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          v14 = v16++ > 8;
          if (v14)
            goto LABEL_26;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_26;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 24) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_30;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
      }
      else
      {
        if ((v11 >> 3) != 1)
        {
LABEL_26:
          result = PB::Reader::skip(a2);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          goto LABEL_33;
        }
        *((_BYTE *)this + 24) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
        {
LABEL_30:
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_33;
        }
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
      }
      v2 = *((_QWORD *)a2 + 1) + 8;
      *((_QWORD *)a2 + 1) = v2;
LABEL_33:
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::PencilTipForce::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 24);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 24);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 16));
  return this;
}

uint64_t CMMsl::PencilTipForce::hash_value(CMMsl::PencilTipForce *this)
{
  double v1;
  double v2;

  if ((*((_BYTE *)this + 24) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 24) & 2) != 0)
      goto LABEL_3;
LABEL_9:
    v2 = 0.0;
    return *(_QWORD *)&v2 ^ *(_QWORD *)&v1;
  }
  v1 = 0.0;
  if ((*((_BYTE *)this + 24) & 2) == 0)
    goto LABEL_9;
LABEL_3:
  v2 = *((double *)this + 2);
  if (v2 == 0.0)
    v2 = 0.0;
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1;
}

void CMMsl::PencilTouch::~PencilTouch(CMMsl::PencilTouch *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::PencilTouch::PencilTouch(CMMsl::PencilTouch *this, const CMMsl::PencilTouch *a2)
{
  __int16 v2;
  __int16 v3;
  double result;
  int v5;
  int v6;

  *(_QWORD *)this = &off_251360000;
  *((_DWORD *)this + 22) = 0;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x20) != 0)
  {
    result = *((double *)a2 + 6);
    v3 = 32;
    *((_WORD *)this + 44) = 32;
    *((double *)this + 6) = result;
    v2 = *((_WORD *)a2 + 44);
    if ((v2 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x40) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 7);
    v3 |= 0x40u;
    *((_WORD *)this + 44) = v3;
    *((double *)this + 7) = result;
    v2 = *((_WORD *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 0x80) != 0)
  {
    result = *((double *)a2 + 8);
    v3 |= 0x80u;
    *((_WORD *)this + 44) = v3;
    *((double *)this + 8) = result;
    v2 = *((_WORD *)a2 + 44);
    if ((v2 & 0x100) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0)
        goto LABEL_9;
      goto LABEL_18;
    }
  }
  else if ((v2 & 0x100) == 0)
  {
    goto LABEL_8;
  }
  result = *((double *)a2 + 9);
  v3 |= 0x100u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 9) = result;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  result = *((double *)a2 + 1);
  v3 |= 1u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 1) = result;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  result = *((double *)a2 + 3);
  v3 |= 4u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 3) = result;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x400) == 0)
  {
LABEL_11:
    if ((v2 & 0x200) == 0)
      goto LABEL_12;
    goto LABEL_21;
  }
LABEL_20:
  v5 = *((_DWORD *)a2 + 21);
  v3 |= 0x400u;
  *((_WORD *)this + 44) = v3;
  *((_DWORD *)this + 21) = v5;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x200) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  v6 = *((_DWORD *)a2 + 20);
  v3 |= 0x200u;
  *((_WORD *)this + 44) = v3;
  *((_DWORD *)this + 20) = v6;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 8) == 0)
      goto LABEL_14;
    goto LABEL_23;
  }
LABEL_22:
  result = *((double *)a2 + 2);
  v3 |= 2u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 2) = result;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 8) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0)
      return result;
LABEL_24:
    result = *((double *)a2 + 5);
    *((_WORD *)this + 44) = v3 | 0x10;
    *((double *)this + 5) = result;
    return result;
  }
LABEL_23:
  result = *((double *)a2 + 4);
  v3 |= 8u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 4) = result;
  if ((*((_WORD *)a2 + 44) & 0x10) != 0)
    goto LABEL_24;
  return result;
}

CMMsl *CMMsl::PencilTouch::operator=(CMMsl *a1, const CMMsl::PencilTouch *a2)
{
  CMMsl::PencilTouch *v3;
  _BYTE v5[96];

  if (a1 != a2)
  {
    CMMsl::PencilTouch::PencilTouch((CMMsl::PencilTouch *)v5, a2);
    CMMsl::swap(a1, (CMMsl::PencilTouch *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PencilTouch *a2, CMMsl::PencilTouch *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  double result;

  v3 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v3;
  v4 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v4;
  v5 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v5;
  v6 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v6;
  v7 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v7;
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v8;
  v9 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v9;
  v10 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v10;
  v11 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v11;
  v12 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v12;
  v13 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v13;
  result = *((double *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((double *)a2 + 5) = result;
  return result;
}

double CMMsl::PencilTouch::PencilTouch(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_251360000;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  result = *(double *)(a2 + 40);
  *(double *)(a1 + 40) = result;
  return result;
}

CMMsl *CMMsl::PencilTouch::operator=(CMMsl *this, uint64_t a2, CMMsl::PencilTouch *a3)
{
  uint64_t v4;
  void (**v6)(CMMsl::PencilTouch *__hidden);
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  if (this != (CMMsl *)a2)
  {
    v6 = &off_251360000;
    v13 = *(_DWORD *)(a2 + 88);
    *(_DWORD *)(a2 + 88) = 0;
    v10 = *(_OWORD *)(a2 + 56);
    v4 = *(_QWORD *)(a2 + 80);
    v11 = *(_QWORD *)(a2 + 72);
    v12 = v4;
    v7 = *(_OWORD *)(a2 + 8);
    v8 = *(_OWORD *)(a2 + 24);
    v9 = *(_OWORD *)(a2 + 40);
    CMMsl::swap(this, (CMMsl::PencilTouch *)&v6, a3);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return this;
}

uint64_t CMMsl::PencilTouch::formatText(CMMsl::PencilTouch *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 44);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "altitudeAngle", *((double *)this + 1));
    v5 = *((_WORD *)this + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "altitudeAngleConfidence", *((double *)this + 2));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "azimuthAngle", *((double *)this + 3));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "azimuthAngleConfidence", *((double *)this + 4));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x200) == 0)
  {
LABEL_6:
    if ((v5 & 0x400) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "pathFlags");
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x400) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "pathStage");
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "positionConfidence", *((double *)this + 5));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 6));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v5 & 0x80) == 0)
      goto LABEL_11;
LABEL_23:
    PB::TextFormatter::format(a2, "y", *((double *)this + 8));
    if ((*((_WORD *)this + 44) & 0x100) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "x", *((double *)this + 7));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x80) != 0)
    goto LABEL_23;
LABEL_11:
  if ((v5 & 0x100) != 0)
LABEL_12:
    PB::TextFormatter::format(a2, "z", *((double *)this + 9));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PencilTouch::readFrom(CMMsl::PencilTouch *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  unint64_t v38;
  char v39;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_90;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 44) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_63;
        *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_79;
      case 2u:
        *((_WORD *)this + 44) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_63;
        *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_79;
      case 3u:
        *((_WORD *)this + 44) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_63;
        *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_79;
      case 4u:
        *((_WORD *)this + 44) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_63;
        *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_79;
      case 5u:
        *((_WORD *)this + 44) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_63;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_79;
      case 6u:
        *((_WORD *)this + 44) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_63;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_79;
      case 7u:
        *((_WORD *)this + 44) |= 0x400u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v32 = 0;
          v33 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_84;
            }
            v34 = v20++;
            v35 = *(_BYTE *)(v21 + v34);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v35 & 0x7F) << v32;
            if ((v35 & 0x80) == 0)
              break;
            v32 += 7;
            v14 = v33++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_83:
              v2 = v34 + 1;
              goto LABEL_84;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
          goto LABEL_83;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_84;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_84:
        *((_DWORD *)this + 21) = v24;
        break;
      case 8u:
        *((_WORD *)this + 44) |= 0x200u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v36 = 0;
          v37 = 0;
          v30 = 0;
          if (v2 <= v26)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_89;
            }
            v38 = v26++;
            v39 = *(_BYTE *)(v27 + v38);
            *((_QWORD *)a2 + 1) = v26;
            v30 |= (unint64_t)(v39 & 0x7F) << v36;
            if ((v39 & 0x80) == 0)
              break;
            v36 += 7;
            v14 = v37++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_88:
              v2 = v38 + 1;
              goto LABEL_89;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v30) = 0;
          goto LABEL_88;
        }
        v28 = 0;
        v29 = 0;
        v30 = 0;
        do
        {
          v2 = v26 + 1;
          *((_QWORD *)a2 + 1) = v26 + 1;
          v31 = *(_BYTE *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0)
            goto LABEL_89;
          v28 += 7;
          v26 = v2;
          v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_89:
        *((_DWORD *)this + 20) = v30;
        break;
      case 9u:
        *((_WORD *)this + 44) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_63;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_79;
      case 0xAu:
        *((_WORD *)this + 44) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_63;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_79;
      case 0xBu:
        *((_WORD *)this + 44) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_79:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_63:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_90:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::PencilTouch::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 88);
  if ((v4 & 0x20) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 48));
    v4 = *(_WORD *)(v3 + 88);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x80) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x80) == 0)
  {
LABEL_4:
    if ((v4 & 0x100) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x100) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 72));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x200) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 8) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 8) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 40));
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  if ((*(_WORD *)(v3 + 88) & 0x10) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 40));
  return this;
}

uint64_t CMMsl::PencilTouch::hash_value(CMMsl::PencilTouch *this)
{
  __int16 v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;

  v1 = *((_WORD *)this + 44);
  if ((v1 & 0x20) == 0)
  {
    v2 = 0.0;
    if ((v1 & 0x40) != 0)
      goto LABEL_3;
LABEL_32:
    v3 = 0.0;
    if ((v1 & 0x80) != 0)
      goto LABEL_6;
LABEL_33:
    v4 = 0.0;
    if ((*((_WORD *)this + 44) & 0x100) != 0)
      goto LABEL_9;
LABEL_34:
    v5 = 0.0;
    if ((v1 & 1) != 0)
      goto LABEL_12;
LABEL_35:
    v6 = 0.0;
    if ((v1 & 4) != 0)
      goto LABEL_15;
LABEL_36:
    v7 = 0.0;
    if ((*((_WORD *)this + 44) & 0x400) != 0)
      goto LABEL_18;
    goto LABEL_37;
  }
  v2 = *((double *)this + 6);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 0x40) == 0)
    goto LABEL_32;
LABEL_3:
  v3 = *((double *)this + 7);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 0x80) == 0)
    goto LABEL_33;
LABEL_6:
  v4 = *((double *)this + 8);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((*((_WORD *)this + 44) & 0x100) == 0)
    goto LABEL_34;
LABEL_9:
  v5 = *((double *)this + 9);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_35;
LABEL_12:
  v6 = *((double *)this + 1);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((v1 & 4) == 0)
    goto LABEL_36;
LABEL_15:
  v7 = *((double *)this + 3);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((*((_WORD *)this + 44) & 0x400) != 0)
  {
LABEL_18:
    v8 = *((unsigned int *)this + 21);
    if ((*((_WORD *)this + 44) & 0x200) != 0)
      goto LABEL_19;
    goto LABEL_38;
  }
LABEL_37:
  v8 = 0;
  if ((*((_WORD *)this + 44) & 0x200) != 0)
  {
LABEL_19:
    v9 = *((unsigned int *)this + 20);
    if ((v1 & 2) != 0)
      goto LABEL_20;
LABEL_39:
    v10 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_23;
    goto LABEL_40;
  }
LABEL_38:
  v9 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_39;
LABEL_20:
  v10 = *((double *)this + 2);
  if (v10 == 0.0)
    v10 = 0.0;
  if ((v1 & 8) != 0)
  {
LABEL_23:
    v11 = *((double *)this + 4);
    if (v11 == 0.0)
      v11 = 0.0;
    if ((v1 & 0x10) != 0)
      goto LABEL_26;
LABEL_41:
    v12 = 0.0;
    return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ v8 ^ v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12;
  }
LABEL_40:
  v11 = 0.0;
  if ((v1 & 0x10) == 0)
    goto LABEL_41;
LABEL_26:
  v12 = *((double *)this + 5);
  if (v12 == 0.0)
    v12 = 0.0;
  return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ v8 ^ v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12;
}

void CMMsl::PhysicalEffortInput::~PhysicalEffortInput(CMMsl::PhysicalEffortInput *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::PhysicalEffortInput::PhysicalEffortInput(uint64_t this, const CMMsl::PhysicalEffortInput *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  *(_QWORD *)this = &off_251360038;
  *(_DWORD *)(this + 28) = 0;
  v2 = *((_BYTE *)a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_BYTE *)(this + 28) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 28) & 2) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 2);
    v3 |= 2u;
    *(_BYTE *)(this + 28) = v3;
    *(_QWORD *)(this + 16) = v5;
    v2 = *((_BYTE *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *((_DWORD *)a2 + 6);
    *(_BYTE *)(this + 28) = v3 | 4;
    *(_DWORD *)(this + 24) = v6;
  }
  return this;
}

uint64_t CMMsl::PhysicalEffortInput::operator=(uint64_t a1, uint64_t a2, double a3, double a4)
{
  int v4;
  char v6;
  char v7;
  int v8;
  __int128 v9;
  uint64_t v10;
  void (**v12)(CMMsl::PhysicalEffortInput *__hidden);
  __int128 v13;
  uint64_t v14;

  if (a1 != a2)
  {
    v12 = &off_251360038;
    HIDWORD(v14) = 0;
    v6 = *(_BYTE *)(a2 + 28);
    if ((v6 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      v7 = 1;
      BYTE4(v14) = 1;
      if ((v6 & 2) != 0)
      {
LABEL_4:
        a4 = *(double *)(a2 + 16);
        v7 |= 2u;
        BYTE4(v14) = v7;
        if ((v6 & 4) != 0)
          goto LABEL_8;
        goto LABEL_9;
      }
    }
    else
    {
      v7 = 0;
      if ((*(_BYTE *)(a2 + 28) & 2) != 0)
        goto LABEL_4;
    }
    if ((v6 & 4) != 0)
    {
LABEL_8:
      v4 = *(_DWORD *)(a2 + 24);
      BYTE4(v14) = v7 | 4;
    }
LABEL_9:
    v8 = HIDWORD(v14);
    v9 = *(_OWORD *)(a1 + 8);
    *(double *)(a1 + 8) = a3;
    *(double *)(a1 + 16) = a4;
    v13 = v9;
    v10 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v4;
    *(_DWORD *)(a1 + 28) = v8;
    v14 = v10;
    PB::Base::~Base((PB::Base *)&v12);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PhysicalEffortInput *a2, CMMsl::PhysicalEffortInput *a3)
{
  int v3;
  uint64_t v4;
  double result;
  int v6;

  v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  v6 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v6;
  return result;
}

double CMMsl::PhysicalEffortInput::PhysicalEffortInput(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_251360038;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_251360038;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return result;
}

uint64_t CMMsl::PhysicalEffortInput::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  void (**v6)(CMMsl::PhysicalEffortInput *__hidden);
  __int128 v7;
  uint64_t v8;

  if (a1 != a2)
  {
    v6 = &off_251360038;
    v3 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 28) = 0;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    v7 = v4;
    *(_QWORD *)&v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v3;
    v8 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

uint64_t CMMsl::PhysicalEffortInput::formatText(CMMsl::PhysicalEffortInput *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 4) == 0)
  {
    if ((*((_BYTE *)this + 28) & 1) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(a2, "sampleTime", *((double *)this + 1));
    if ((*((_BYTE *)this + 28) & 2) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_4;
  }
  PB::TextFormatter::format(a2, "activityType");
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 1) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 2) != 0)
LABEL_4:
    PB::TextFormatter::format(a2, "wrMets", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PhysicalEffortInput::readFrom(CMMsl::PhysicalEffortInput *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int i;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  for (i = *((unsigned __int8 *)a2 + 24); v2 < v3 && i == 0; i = *((unsigned __int8 *)a2 + 24))
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_20;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
        if (v14)
          goto LABEL_27;
      }
      i = 1;
      *((_BYTE *)a2 + 24) = 1;
      return i == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_27;
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      i = 0;
      return i == 0;
    }
    v19 = v11 >> 3;
    if ((v11 >> 3) == 3)
    {
      *((_BYTE *)this + 28) |= 4u;
      v21 = *((_QWORD *)a2 + 1);
      v2 = *((_QWORD *)a2 + 2);
      v22 = *(_QWORD *)a2;
      if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
      {
        v27 = 0;
        v28 = 0;
        v25 = 0;
        if (v2 <= v21)
          v2 = *((_QWORD *)a2 + 1);
        while (1)
        {
          if (v2 == v21)
          {
            LODWORD(v25) = 0;
            *((_BYTE *)a2 + 24) = 1;
            goto LABEL_52;
          }
          v29 = v21++;
          v30 = *(_BYTE *)(v22 + v29);
          *((_QWORD *)a2 + 1) = v21;
          v25 |= (unint64_t)(v30 & 0x7F) << v27;
          if ((v30 & 0x80) == 0)
            break;
          v27 += 7;
          v14 = v28++ > 8;
          if (v14)
          {
            LODWORD(v25) = 0;
            goto LABEL_51;
          }
        }
        if (*((_BYTE *)a2 + 24))
          LODWORD(v25) = 0;
LABEL_51:
        v2 = v29 + 1;
      }
      else
      {
        v23 = 0;
        v24 = 0;
        v25 = 0;
        while (1)
        {
          v2 = v21 + 1;
          *((_QWORD *)a2 + 1) = v21 + 1;
          v26 = *(_BYTE *)(v22 + v21);
          v25 |= (unint64_t)(v26 & 0x7F) << v23;
          if ((v26 & 0x80) == 0)
            break;
          v23 += 7;
          v21 = v2;
          v14 = v24++ > 8;
          if (v14)
          {
            LODWORD(v25) = 0;
            break;
          }
        }
      }
LABEL_52:
      *((_DWORD *)this + 6) = v25;
      goto LABEL_53;
    }
    if ((_DWORD)v19 == 2)
    {
      *((_BYTE *)this + 28) |= 2u;
      v2 = *((_QWORD *)a2 + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
      {
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_47;
      }
    }
    else
    {
      if ((_DWORD)v19 != 1)
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        goto LABEL_53;
      }
      *((_BYTE *)this + 28) |= 1u;
      v2 = *((_QWORD *)a2 + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
      {
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_47:
        v2 = *((_QWORD *)a2 + 1) + 8;
        *((_QWORD *)a2 + 1) = v2;
        goto LABEL_53;
      }
    }
    *((_BYTE *)a2 + 24) = 1;
LABEL_53:
    v3 = *((_QWORD *)a2 + 2);
  }
  return i == 0;
}

uint64_t CMMsl::PhysicalEffortInput::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 28);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        return this;
      return PB::Writer::writeVarInt(a2);
    }
  }
  else if ((*(_BYTE *)(this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  if ((*(_BYTE *)(v3 + 28) & 4) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::PhysicalEffortInput::hash_value(CMMsl::PhysicalEffortInput *this)
{
  double v1;
  double v2;
  uint64_t v3;

  if ((*((_BYTE *)this + 28) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 28) & 2) != 0)
    {
LABEL_3:
      v2 = *((double *)this + 2);
      if (v2 == 0.0)
        v2 = 0.0;
      if ((*((_BYTE *)this + 28) & 4) != 0)
        goto LABEL_6;
LABEL_11:
      v3 = 0;
      return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ v3;
    }
  }
  else
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 28) & 2) != 0)
      goto LABEL_3;
  }
  v2 = 0.0;
  if ((*((_BYTE *)this + 28) & 4) == 0)
    goto LABEL_11;
LABEL_6:
  v3 = *((unsigned int *)this + 6);
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ v3;
}

void CMMsl::PhysicalEffortSample::~PhysicalEffortSample(CMMsl::PhysicalEffortSample *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::PhysicalEffortSample::PhysicalEffortSample(uint64_t this, const CMMsl::PhysicalEffortSample *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;

  *(_QWORD *)this = &off_251360070;
  *(_DWORD *)(this + 44) = 0;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 4) != 0)
  {
    v4 = *((_QWORD *)a2 + 3);
    v3 = 4;
    *(_BYTE *)(this + 44) = 4;
    *(_QWORD *)(this + 24) = v4;
    v2 = *((_BYTE *)a2 + 44);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 44) & 1) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 1);
    v3 |= 1u;
    *(_BYTE *)(this + 44) = v3;
    *(_QWORD *)(this + 8) = v5;
    v2 = *((_BYTE *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *((_QWORD *)a2 + 2);
    v3 |= 2u;
    *(_BYTE *)(this + 44) = v3;
    *(_QWORD *)(this + 16) = v6;
    v2 = *((_BYTE *)a2 + 44);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_13;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 8);
  v3 |= 8u;
  *(_BYTE *)(this + 44) = v3;
  *(_DWORD *)(this + 32) = v7;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      return this;
LABEL_14:
    v9 = *((_DWORD *)a2 + 10);
    *(_BYTE *)(this + 44) = v3 | 0x20;
    *(_DWORD *)(this + 40) = v9;
    return this;
  }
LABEL_13:
  v8 = *((_DWORD *)a2 + 9);
  v3 |= 0x10u;
  *(_BYTE *)(this + 44) = v3;
  *(_DWORD *)(this + 36) = v8;
  if ((*((_BYTE *)a2 + 44) & 0x20) != 0)
    goto LABEL_14;
  return this;
}

uint64_t CMMsl::PhysicalEffortSample::operator=(uint64_t a1, const CMMsl::PhysicalEffortSample *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;

  if ((const CMMsl::PhysicalEffortSample *)a1 != a2)
  {
    CMMsl::PhysicalEffortSample::PhysicalEffortSample((uint64_t)&v7, a2);
    v3 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v9;
    v9 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v4;
    v5 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v10;
    v10 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PhysicalEffortSample *a2, CMMsl::PhysicalEffortSample *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  double result;
  int v7;
  int v8;
  int v9;

  v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  v7 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v7;
  v8 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v8;
  v9 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v9;
  return result;
}

double CMMsl::PhysicalEffortSample::PhysicalEffortSample(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_251360070;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_251360070;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return result;
}

uint64_t CMMsl::PhysicalEffortSample::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  void (**v9)(CMMsl::PhysicalEffortSample *__hidden);
  __int128 v10;
  uint64_t v11;
  __int128 v12;

  if (a1 != a2)
  {
    v9 = &off_251360070;
    v3 = *(_QWORD *)(a2 + 24);
    v4 = *(_OWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 44) = 0;
    v11 = *(_QWORD *)(a1 + 24);
    v5 = *(_OWORD *)(a1 + 8);
    v6 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    v10 = v5;
    v7 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v4;
    v12 = v7;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::PhysicalEffortSample::formatText(CMMsl::PhysicalEffortSample *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "activityType");
    v5 = *((_BYTE *)this + 44);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*((_BYTE *)this + 44) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "algorithmVersion");
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "endDate", *((double *)this + 1));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(a2, "sampleStopReason");
    if ((*((_BYTE *)this + 44) & 4) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "mets", *((double *)this + 2));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 0x20) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 4) != 0)
LABEL_7:
    PB::TextFormatter::format(a2, "startDate", *((double *)this + 3));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PhysicalEffortSample::readFrom(CMMsl::PhysicalEffortSample *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  unint64_t v40;
  char v41;
  char v42;
  unsigned int v43;
  unint64_t v44;
  char v45;
  char v46;
  unsigned int v47;
  unint64_t v48;
  char v49;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_91;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 44) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_31;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_75;
      case 2u:
        *((_BYTE *)this + 44) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_31;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_75;
      case 3u:
        *((_BYTE *)this + 44) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_75:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_31:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 4u:
        *((_BYTE *)this + 44) |= 8u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v38 = 0;
          v39 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_80;
            }
            v40 = v20++;
            v41 = *(_BYTE *)(v21 + v40);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0)
              break;
            v38 += 7;
            v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_79:
              v2 = v40 + 1;
              goto LABEL_80;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
          goto LABEL_79;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_80;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_80:
        *((_DWORD *)this + 8) = v24;
        break;
      case 5u:
        *((_BYTE *)this + 44) |= 0x10u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v42 = 0;
          v43 = 0;
          v30 = 0;
          if (v2 <= v26)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_85;
            }
            v44 = v26++;
            v45 = *(_BYTE *)(v27 + v44);
            *((_QWORD *)a2 + 1) = v26;
            v30 |= (unint64_t)(v45 & 0x7F) << v42;
            if ((v45 & 0x80) == 0)
              break;
            v42 += 7;
            v14 = v43++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_84:
              v2 = v44 + 1;
              goto LABEL_85;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v30) = 0;
          goto LABEL_84;
        }
        v28 = 0;
        v29 = 0;
        v30 = 0;
        do
        {
          v2 = v26 + 1;
          *((_QWORD *)a2 + 1) = v26 + 1;
          v31 = *(_BYTE *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0)
            goto LABEL_85;
          v28 += 7;
          v26 = v2;
          v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_85:
        *((_DWORD *)this + 9) = v30;
        break;
      case 6u:
        *((_BYTE *)this + 44) |= 0x20u;
        v32 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v33 = *(_QWORD *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
        {
          v46 = 0;
          v47 = 0;
          v36 = 0;
          if (v2 <= v32)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v32)
            {
              LODWORD(v36) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_90;
            }
            v48 = v32++;
            v49 = *(_BYTE *)(v33 + v48);
            *((_QWORD *)a2 + 1) = v32;
            v36 |= (unint64_t)(v49 & 0x7F) << v46;
            if ((v49 & 0x80) == 0)
              break;
            v46 += 7;
            v14 = v47++ > 8;
            if (v14)
            {
              LODWORD(v36) = 0;
LABEL_89:
              v2 = v48 + 1;
              goto LABEL_90;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v36) = 0;
          goto LABEL_89;
        }
        v34 = 0;
        v35 = 0;
        v36 = 0;
        do
        {
          v2 = v32 + 1;
          *((_QWORD *)a2 + 1) = v32 + 1;
          v37 = *(_BYTE *)(v33 + v32);
          v36 |= (unint64_t)(v37 & 0x7F) << v34;
          if ((v37 & 0x80) == 0)
            goto LABEL_90;
          v34 += 7;
          v32 = v2;
          v14 = v35++ > 8;
        }
        while (!v14);
        LODWORD(v36) = 0;
LABEL_90:
        *((_DWORD *)this + 10) = v36;
        break;
      default:
        goto LABEL_19;
    }
LABEL_91:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::PhysicalEffortSample::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 44);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24));
    v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(this + 44) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_12:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_BYTE *)(v3 + 44) & 0x20) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::PhysicalEffortSample::hash_value(CMMsl::PhysicalEffortSample *this)
{
  double v1;
  double v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*((_BYTE *)this + 44) & 4) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 44) & 1) != 0)
      goto LABEL_3;
LABEL_15:
    v2 = 0.0;
    if ((*((_BYTE *)this + 44) & 2) != 0)
      goto LABEL_6;
LABEL_16:
    v3 = 0.0;
    if ((*((_BYTE *)this + 44) & 8) != 0)
      goto LABEL_9;
    goto LABEL_17;
  }
  v1 = *((double *)this + 3);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 44) & 1) == 0)
    goto LABEL_15;
LABEL_3:
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 44) & 2) == 0)
    goto LABEL_16;
LABEL_6:
  v3 = *((double *)this + 2);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((*((_BYTE *)this + 44) & 8) != 0)
  {
LABEL_9:
    v4 = *((unsigned int *)this + 8);
    if ((*((_BYTE *)this + 44) & 0x10) != 0)
      goto LABEL_10;
LABEL_18:
    v5 = 0;
    if ((*((_BYTE *)this + 44) & 0x20) != 0)
      goto LABEL_11;
LABEL_19:
    v6 = 0;
    return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ v4 ^ v5 ^ v6;
  }
LABEL_17:
  v4 = 0;
  if ((*((_BYTE *)this + 44) & 0x10) == 0)
    goto LABEL_18;
LABEL_10:
  v5 = *((unsigned int *)this + 9);
  if ((*((_BYTE *)this + 44) & 0x20) == 0)
    goto LABEL_19;
LABEL_11:
  v6 = *((unsigned int *)this + 10);
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ v4 ^ v5 ^ v6;
}

void CMMsl::PocketDetectionPacket::~PocketDetectionPacket(CMMsl::PocketDetectionPacket *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::PocketDetectionPacket::PocketDetectionPacket(CMMsl::PocketDetectionPacket *this, const CMMsl::PocketDetectionPacket *a2)
{
  __int16 v2;
  __int16 v3;
  int v4;
  double result;
  char v6;

  *(_QWORD *)this = &off_2513600A8;
  *((_DWORD *)this + 21) = 0;
  v2 = *((_WORD *)a2 + 42);
  if ((v2 & 0x200) != 0)
  {
    v4 = *((_DWORD *)a2 + 19);
    v3 = 512;
    *((_WORD *)this + 42) = 512;
    *((_DWORD *)this + 19) = v4;
    v2 = *((_WORD *)a2 + 42);
    if ((v2 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 8);
    v3 |= 0x80u;
    *((_WORD *)this + 42) = v3;
    *((double *)this + 8) = result;
    v2 = *((_WORD *)a2 + 42);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    result = *((double *)a2 + 2);
    v3 |= 2u;
    *((_WORD *)this + 42) = v3;
    *((double *)this + 2) = result;
    v2 = *((_WORD *)a2 + 42);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_18;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  result = *((double *)a2 + 3);
  v3 |= 4u;
  *((_WORD *)this + 42) = v3;
  *((double *)this + 3) = result;
  v2 = *((_WORD *)a2 + 42);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  result = *((double *)a2 + 5);
  v3 |= 0x10u;
  *((_WORD *)this + 42) = v3;
  *((double *)this + 5) = result;
  v2 = *((_WORD *)a2 + 42);
  if ((v2 & 8) == 0)
  {
LABEL_10:
    if ((v2 & 1) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  result = *((double *)a2 + 4);
  v3 |= 8u;
  *((_WORD *)this + 42) = v3;
  *((double *)this + 4) = result;
  v2 = *((_WORD *)a2 + 42);
  if ((v2 & 1) == 0)
  {
LABEL_11:
    if ((v2 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_21;
  }
LABEL_20:
  result = *((double *)a2 + 1);
  v3 |= 1u;
  *((_WORD *)this + 42) = v3;
  *((double *)this + 1) = result;
  v2 = *((_WORD *)a2 + 42);
  if ((v2 & 0x400) == 0)
  {
LABEL_12:
    if ((v2 & 0x20) == 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  v6 = *((_BYTE *)a2 + 80);
  v3 |= 0x400u;
  *((_WORD *)this + 42) = v3;
  *((_BYTE *)this + 80) = v6;
  v2 = *((_WORD *)a2 + 42);
  if ((v2 & 0x20) == 0)
  {
LABEL_13:
    if ((v2 & 0x100) == 0)
      goto LABEL_14;
    goto LABEL_23;
  }
LABEL_22:
  result = *((double *)a2 + 6);
  v3 |= 0x20u;
  *((_WORD *)this + 42) = v3;
  *((double *)this + 6) = result;
  v2 = *((_WORD *)a2 + 42);
  if ((v2 & 0x100) == 0)
  {
LABEL_14:
    if ((v2 & 0x40) == 0)
      return result;
LABEL_24:
    result = *((double *)a2 + 7);
    *((_WORD *)this + 42) = v3 | 0x40;
    *((double *)this + 7) = result;
    return result;
  }
LABEL_23:
  LODWORD(result) = *((_DWORD *)a2 + 18);
  v3 |= 0x100u;
  *((_WORD *)this + 42) = v3;
  *((_DWORD *)this + 18) = LODWORD(result);
  if ((*((_WORD *)a2 + 42) & 0x40) != 0)
    goto LABEL_24;
  return result;
}

CMMsl *CMMsl::PocketDetectionPacket::operator=(CMMsl *a1, const CMMsl::PocketDetectionPacket *a2)
{
  CMMsl::PocketDetectionPacket *v3;
  _BYTE v5[88];

  if (a1 != a2)
  {
    CMMsl::PocketDetectionPacket::PocketDetectionPacket((CMMsl::PocketDetectionPacket *)v5, a2);
    CMMsl::swap(a1, (CMMsl::PocketDetectionPacket *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PocketDetectionPacket *a2, CMMsl::PocketDetectionPacket *a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  v3 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v3;
  v4 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v4;
  v5 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  v8 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v8;
  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v9;
  v10 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v10;
  LOBYTE(v4) = *((_BYTE *)this + 80);
  *((_BYTE *)this + 80) = *((_BYTE *)a2 + 80);
  *((_BYTE *)a2 + 80) = v4;
  v11 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v11;
  LODWORD(v11) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v11;
  result = *((double *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((double *)a2 + 7) = result;
  return result;
}

double CMMsl::PocketDetectionPacket::PocketDetectionPacket(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_2513600A8;
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a2 + 84) = 0;
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  result = *(double *)(a2 + 56);
  *(double *)(a1 + 56) = result;
  return result;
}

CMMsl *CMMsl::PocketDetectionPacket::operator=(CMMsl *this, uint64_t a2, CMMsl::PocketDetectionPacket *a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  void (**v8)(CMMsl::PocketDetectionPacket *__hidden);
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  int v14;
  char v15;
  int v16;

  if (this != (CMMsl *)a2)
  {
    v8 = &off_2513600A8;
    v16 = *(_DWORD *)(a2 + 84);
    *(_DWORD *)(a2 + 84) = 0;
    v14 = *(_DWORD *)(a2 + 76);
    v4 = *(_OWORD *)(a2 + 24);
    v9 = *(_OWORD *)(a2 + 8);
    v10 = v4;
    v15 = *(_BYTE *)(a2 + 80);
    v5 = *(_OWORD *)(a2 + 40);
    v13 = *(_DWORD *)(a2 + 72);
    v6 = *(_OWORD *)(a2 + 56);
    v11 = v5;
    v12 = v6;
    CMMsl::swap(this, (CMMsl::PocketDetectionPacket *)&v8, a3);
    PB::Base::~Base((PB::Base *)&v8);
  }
  return this;
}

uint64_t CMMsl::PocketDetectionPacket::formatText(CMMsl::PocketDetectionPacket *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 42);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "ambient", *((double *)this + 1));
    v5 = *((_WORD *)this + 42);
    if ((v5 & 0x100) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((*((_WORD *)this + 42) & 0x100) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "baselineAccuracy", *((float *)this + 18));
  v5 = *((_WORD *)this + 42);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "flags", *((double *)this + 2));
  v5 = *((_WORD *)this + 42);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "header");
  v5 = *((_WORD *)this + 42);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "intensity", *((double *)this + 3));
  v5 = *((_WORD *)this + 42);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "intensityBaselineDelta", *((double *)this + 4));
  v5 = *((_WORD *)this + 42);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x400) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "intensityCalDelta", *((double *)this + 5));
  v5 = *((_WORD *)this + 42);
  if ((v5 & 0x400) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "pocketFlag");
  v5 = *((_WORD *)this + 42);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0)
      goto LABEL_11;
LABEL_23:
    PB::TextFormatter::format(a2, "temperature", *((double *)this + 7));
    if ((*((_WORD *)this + 42) & 0x80) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "pocketProbability", *((double *)this + 6));
  v5 = *((_WORD *)this + 42);
  if ((v5 & 0x40) != 0)
    goto LABEL_23;
LABEL_11:
  if ((v5 & 0x80) != 0)
LABEL_12:
    PB::TextFormatter::format(a2, "ts", *((double *)this + 8));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PocketDetectionPacket::readFrom(CMMsl::PocketDetectionPacket *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  int v26;
  BOOL v27;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_76;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 42) |= 0x200u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v28 = 0;
          v29 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_75;
            }
            v30 = v20++;
            v31 = *(_BYTE *)(v21 + v30);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_74:
              v2 = v30 + 1;
              goto LABEL_75;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
          goto LABEL_74;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_75;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_75:
        *((_DWORD *)this + 19) = v24;
        break;
      case 2u:
        *((_WORD *)this + 42) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_58;
        *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_69;
      case 3u:
        *((_WORD *)this + 42) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_58;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_69;
      case 4u:
        *((_WORD *)this + 42) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_58;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_69;
      case 5u:
        *((_WORD *)this + 42) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_58;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_69;
      case 6u:
        *((_WORD *)this + 42) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_58;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_69;
      case 7u:
        *((_WORD *)this + 42) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_58;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_69;
      case 8u:
        *((_WORD *)this + 42) |= 0x400u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v27 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v26 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v27 = v26 != 0;
        }
        *((_BYTE *)this + 80) = v27;
        break;
      case 9u:
        *((_WORD *)this + 42) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_58;
        *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_69;
      case 0xAu:
        *((_WORD *)this + 42) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_58;
        *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        v2 = *((_QWORD *)a2 + 1) + 4;
        goto LABEL_70;
      case 0xBu:
        *((_WORD *)this + 42) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_69:
          v2 = *((_QWORD *)a2 + 1) + 8;
LABEL_70:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_58:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_76:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::PocketDetectionPacket::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 84);
  if ((v4 & 0x200) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_WORD *)(v3 + 84);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 1) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 1) == 0)
  {
LABEL_8:
    if ((v4 & 0x400) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 0x400) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2);
  v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 0x100) == 0)
  {
LABEL_11:
    if ((v4 & 0x40) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 56));
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 72));
  if ((*(_WORD *)(v3 + 84) & 0x40) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 56));
  return this;
}

uint64_t CMMsl::PocketDetectionPacket::hash_value(CMMsl::PocketDetectionPacket *this)
{
  __int16 v1;
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  double v10;
  float v11;
  uint64_t v12;
  double v13;

  v1 = *((_WORD *)this + 42);
  if ((v1 & 0x200) == 0)
  {
    v2 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_3;
LABEL_32:
    v3 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_6;
LABEL_33:
    v4 = 0.0;
    if ((v1 & 4) != 0)
      goto LABEL_9;
LABEL_34:
    v5 = 0.0;
    if ((v1 & 0x10) != 0)
      goto LABEL_12;
LABEL_35:
    v6 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_15;
LABEL_36:
    v7 = 0.0;
    if ((v1 & 1) != 0)
      goto LABEL_18;
LABEL_37:
    v8 = 0.0;
    if ((*((_WORD *)this + 42) & 0x400) != 0)
      goto LABEL_21;
    goto LABEL_38;
  }
  v2 = *((unsigned int *)this + 19);
  if ((v1 & 0x80) == 0)
    goto LABEL_32;
LABEL_3:
  v3 = *((double *)this + 8);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_33;
LABEL_6:
  v4 = *((double *)this + 2);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 4) == 0)
    goto LABEL_34;
LABEL_9:
  v5 = *((double *)this + 3);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((v1 & 0x10) == 0)
    goto LABEL_35;
LABEL_12:
  v6 = *((double *)this + 5);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_36;
LABEL_15:
  v7 = *((double *)this + 4);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_37;
LABEL_18:
  v8 = *((double *)this + 1);
  if (v8 == 0.0)
    v8 = 0.0;
  if ((*((_WORD *)this + 42) & 0x400) != 0)
  {
LABEL_21:
    v9 = *((unsigned __int8 *)this + 80);
    if ((v1 & 0x20) != 0)
      goto LABEL_22;
LABEL_39:
    v10 = 0.0;
    if ((*((_WORD *)this + 42) & 0x100) != 0)
      goto LABEL_25;
    goto LABEL_40;
  }
LABEL_38:
  v9 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_39;
LABEL_22:
  v10 = *((double *)this + 6);
  if (v10 == 0.0)
    v10 = 0.0;
  if ((*((_WORD *)this + 42) & 0x100) != 0)
  {
LABEL_25:
    v11 = *((float *)this + 18);
    v12 = LODWORD(v11);
    if (v11 == 0.0)
      v12 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_28;
LABEL_41:
    v13 = 0.0;
    return *(_QWORD *)&v3 ^ v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ v9 ^ *(_QWORD *)&v10 ^ v12 ^ *(_QWORD *)&v13;
  }
LABEL_40:
  v12 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_41;
LABEL_28:
  v13 = *((double *)this + 7);
  if (v13 == 0.0)
    v13 = 0.0;
  return *(_QWORD *)&v3 ^ v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ v9 ^ *(_QWORD *)&v10 ^ v12 ^ *(_QWORD *)&v13;
}

void CMMsl::Pose::~Pose(CMMsl::Pose *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_2513600E0;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::Pose::~Pose(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::Pose *CMMsl::Pose::Pose(CMMsl::Pose *this, const CMMsl::Pose *a2)
{
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_2513600E0;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (_QWORD *)((char *)this + 8);
  *((_DWORD *)this + 16) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if ((*((_BYTE *)a2 + 64) & 1) != 0)
  {
    v5 = *((_QWORD *)a2 + 7);
    *((_BYTE *)this + 64) = 1;
    *((_QWORD *)this + 7) = v5;
  }
  if (this != a2)
  {
    sub_2429111C4(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
    sub_2429111C4((_QWORD *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3);
  }
  return this;
}

uint64_t CMMsl::Pose::operator=(uint64_t a1, const CMMsl::Pose *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _BYTE v9[8];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;

  if ((const CMMsl::Pose *)a1 != a2)
  {
    CMMsl::Pose::Pose((CMMsl::Pose *)v9, a2);
    v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v14;
    v14 = v3;
    v4 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v13;
    v13 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v10 = v5;
    v11 = v6;
    v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v12 = v7;
    CMMsl::Pose::~Pose((CMMsl::Pose *)v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::Pose *a2, CMMsl::Pose *a3)
{
  int v3;
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  result = *((double *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((double *)a2 + 7) = result;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  v8 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v8;
  v9 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v9;
  v10 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v10;
  return result;
}

uint64_t CMMsl::Pose::Pose(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = &off_2513600E0;
  v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  sub_242911330(v4, (__n128 *)(a2 + 32));
  return a1;
}

uint64_t CMMsl::Pose::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _BYTE v9[8];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;

  if (a1 != a2)
  {
    CMMsl::Pose::Pose((uint64_t)v9, a2);
    v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v14;
    v14 = v3;
    v4 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v13;
    v13 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v10 = v5;
    v11 = v6;
    v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v12 = v7;
    CMMsl::Pose::~Pose((CMMsl::Pose *)v9);
  }
  return a1;
}

uint64_t CMMsl::Pose::formatText(CMMsl::Pose *this, PB::TextFormatter *a2, const char *a3)
{
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (double *)*((_QWORD *)this + 1);
  v6 = (double *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "attitude", v7);
  }
  v8 = (double *)*((_QWORD *)this + 4);
  v9 = (double *)*((_QWORD *)this + 5);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(a2, "position", v10);
  }
  if ((*((_BYTE *)this + 64) & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 7));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::Pose::readFrom(CMMsl::Pose *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  _QWORD *v52;
  unint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          v14 = v16++ > 8;
          if (v14)
            goto LABEL_27;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      v19 = v11 & 7;
      if (v19 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
        break;
      if ((_DWORD)v20 == 2)
      {
        if (v19 == 2)
        {
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v36 = *((_QWORD *)a2 + 1);
          v37 = *((_QWORD *)a2 + 2);
          while (v36 < v37 && !*((_BYTE *)a2 + 24))
          {
            v39 = (char *)*((_QWORD *)this + 2);
            v38 = *((_QWORD *)this + 3);
            if ((unint64_t)v39 >= v38)
            {
              v41 = (char *)*((_QWORD *)this + 1);
              v42 = (v39 - v41) >> 3;
              v43 = v42 + 1;
              if ((unint64_t)(v42 + 1) >> 61)
                goto LABEL_125;
              v44 = v38 - (_QWORD)v41;
              if (v44 >> 2 > v43)
                v43 = v44 >> 2;
              if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
                v45 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v45 = v43;
              if (v45)
              {
                v45 = (unint64_t)sub_2429112FC(v45);
                v41 = (char *)*((_QWORD *)this + 1);
                v39 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v46 = 0;
              }
              v47 = (_QWORD *)(v45 + 8 * v42);
              *v47 = 0;
              v40 = v47 + 1;
              while (v39 != v41)
              {
                v48 = *((_QWORD *)v39 - 1);
                v39 -= 8;
                *--v47 = v48;
              }
              *((_QWORD *)this + 1) = v47;
              *((_QWORD *)this + 2) = v40;
              *((_QWORD *)this + 3) = v45 + 8 * v46;
              if (v41)
                operator delete(v41);
            }
            else
            {
              *(_QWORD *)v39 = 0;
              v40 = v39 + 8;
            }
            *((_QWORD *)this + 2) = v40;
            v49 = *((_QWORD *)a2 + 1);
            if (v49 > 0xFFFFFFFFFFFFFFF7 || v49 + 8 > *((_QWORD *)a2 + 2))
              goto LABEL_81;
            *(v40 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v49);
            v37 = *((_QWORD *)a2 + 2);
            v36 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v36;
          }
          goto LABEL_82;
        }
        v54 = (char *)*((_QWORD *)this + 2);
        v53 = *((_QWORD *)this + 3);
        if ((unint64_t)v54 >= v53)
        {
          v61 = (char *)*((_QWORD *)this + 1);
          v62 = (v54 - v61) >> 3;
          v63 = v62 + 1;
          if ((unint64_t)(v62 + 1) >> 61)
LABEL_125:
            sub_242729A44();
          v64 = v53 - (_QWORD)v61;
          if (v64 >> 2 > v63)
            v63 = v64 >> 2;
          if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8)
            v65 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v65 = v63;
          if (v65)
          {
            v65 = (unint64_t)sub_2429112FC(v65);
            v61 = (char *)*((_QWORD *)this + 1);
            v54 = (char *)*((_QWORD *)this + 2);
          }
          else
          {
            v66 = 0;
          }
          v69 = (_QWORD *)(v65 + 8 * v62);
          *v69 = 0;
          v52 = v69 + 1;
          while (v54 != v61)
          {
            v70 = *((_QWORD *)v54 - 1);
            v54 -= 8;
            *--v69 = v70;
          }
          *((_QWORD *)this + 1) = v69;
          *((_QWORD *)this + 2) = v52;
          *((_QWORD *)this + 3) = v65 + 8 * v66;
          if (v61)
            operator delete(v61);
        }
        else
        {
          *(_QWORD *)v54 = 0;
          v52 = v54 + 8;
        }
        *((_QWORD *)this + 2) = v52;
LABEL_113:
        v71 = *((_QWORD *)a2 + 1);
        if (v71 > 0xFFFFFFFFFFFFFFF7 || v71 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_115;
        *(v52 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v71);
        goto LABEL_117;
      }
      if ((_DWORD)v20 != 1)
      {
LABEL_27:
        if ((PB::Reader::skip(a2) & 1) == 0)
          return 0;
        goto LABEL_118;
      }
      *((_BYTE *)this + 64) |= 1u;
      v21 = *((_QWORD *)a2 + 1);
      if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((_QWORD *)a2 + 2))
      {
LABEL_115:
        *((_BYTE *)a2 + 24) = 1;
        goto LABEL_118;
      }
      *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v21);
LABEL_117:
      *((_QWORD *)a2 + 1) += 8;
LABEL_118:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    if (v19 == 2)
    {
      if ((PB::Reader::placeMark() & 1) != 0)
        return 0;
      v22 = *((_QWORD *)a2 + 1);
      v23 = *((_QWORD *)a2 + 2);
      while (v22 < v23 && !*((_BYTE *)a2 + 24))
      {
        v25 = (char *)*((_QWORD *)this + 5);
        v24 = *((_QWORD *)this + 6);
        if ((unint64_t)v25 >= v24)
        {
          v27 = (char *)*((_QWORD *)this + 4);
          v28 = (v25 - v27) >> 3;
          v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 61)
            goto LABEL_125;
          v30 = v24 - (_QWORD)v27;
          if (v30 >> 2 > v29)
            v29 = v30 >> 2;
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
            v31 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v31 = v29;
          if (v31)
          {
            v31 = (unint64_t)sub_2429112FC(v31);
            v27 = (char *)*((_QWORD *)this + 4);
            v25 = (char *)*((_QWORD *)this + 5);
          }
          else
          {
            v32 = 0;
          }
          v33 = (_QWORD *)(v31 + 8 * v28);
          *v33 = 0;
          v26 = v33 + 1;
          while (v25 != v27)
          {
            v34 = *((_QWORD *)v25 - 1);
            v25 -= 8;
            *--v33 = v34;
          }
          *((_QWORD *)this + 4) = v33;
          *((_QWORD *)this + 5) = v26;
          *((_QWORD *)this + 6) = v31 + 8 * v32;
          if (v27)
            operator delete(v27);
        }
        else
        {
          *(_QWORD *)v25 = 0;
          v26 = v25 + 8;
        }
        *((_QWORD *)this + 5) = v26;
        v35 = *((_QWORD *)a2 + 1);
        if (v35 > 0xFFFFFFFFFFFFFFF7 || v35 + 8 > *((_QWORD *)a2 + 2))
        {
LABEL_81:
          *((_BYTE *)a2 + 24) = 1;
          break;
        }
        *(v26 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v35);
        v23 = *((_QWORD *)a2 + 2);
        v22 = *((_QWORD *)a2 + 1) + 8;
        *((_QWORD *)a2 + 1) = v22;
      }
LABEL_82:
      PB::Reader::recallMark();
      goto LABEL_118;
    }
    v51 = (char *)*((_QWORD *)this + 5);
    v50 = *((_QWORD *)this + 6);
    if ((unint64_t)v51 >= v50)
    {
      v55 = (char *)*((_QWORD *)this + 4);
      v56 = (v51 - v55) >> 3;
      v57 = v56 + 1;
      if ((unint64_t)(v56 + 1) >> 61)
        goto LABEL_125;
      v58 = v50 - (_QWORD)v55;
      if (v58 >> 2 > v57)
        v57 = v58 >> 2;
      if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8)
        v59 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v59 = v57;
      if (v59)
      {
        v59 = (unint64_t)sub_2429112FC(v59);
        v55 = (char *)*((_QWORD *)this + 4);
        v51 = (char *)*((_QWORD *)this + 5);
      }
      else
      {
        v60 = 0;
      }
      v67 = (_QWORD *)(v59 + 8 * v56);
      *v67 = 0;
      v52 = v67 + 1;
      while (v51 != v55)
      {
        v68 = *((_QWORD *)v51 - 1);
        v51 -= 8;
        *--v67 = v68;
      }
      *((_QWORD *)this + 4) = v67;
      *((_QWORD *)this + 5) = v52;
      *((_QWORD *)this + 6) = v59 + 8 * v60;
      if (v55)
        operator delete(v55);
    }
    else
    {
      *(_QWORD *)v51 = 0;
      v52 = v51 + 8;
    }
    *((_QWORD *)this + 5) = v52;
    goto LABEL_113;
  }
  return v4 == 0;
}

uint64_t CMMsl::Pose::writeTo(uint64_t this, PB::Writer *a2)
{
  _QWORD *v3;
  double *v4;
  double *v5;
  double v6;
  double *v7;
  double *v8;
  double v9;

  v3 = (_QWORD *)this;
  if ((*(_BYTE *)(this + 64) & 1) != 0)
    this = PB::Writer::write(a2, *(double *)(this + 56));
  v4 = (double *)v3[1];
  v5 = (double *)v3[2];
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6);
  }
  v8 = (double *)v3[4];
  v7 = (double *)v3[5];
  while (v8 != v7)
  {
    v9 = *v8++;
    this = PB::Writer::write(a2, v9);
  }
  return this;
}

uint64_t CMMsl::Pose::hash_value(CMMsl::Pose *this)
{
  uint64_t v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 64) & 1) != 0)
  {
    if (*((double *)this + 7) == 0.0)
      v1 = 0;
    else
      v1 = *((_QWORD *)this + 7);
  }
  else
  {
    v1 = 0;
  }
  v2 = PBHashBytes() ^ v1;
  return v2 ^ PBHashBytes();
}

void CMMsl::PoseState::~PoseState(CMMsl::PoseState *this)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = &off_251360118;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::PoseState::~PoseState(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::PoseState *CMMsl::PoseState::PoseState(CMMsl::PoseState *this, const CMMsl::PoseState *a2)
{
  _QWORD *v4;
  CMMsl::Pose *v5;
  CMMsl::Pose *v6;
  uint64_t v7;
  char v8;

  *(_QWORD *)this = &off_251360118;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (_QWORD *)((char *)this + 8);
  *((_DWORD *)this + 11) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (*((_QWORD *)a2 + 4))
  {
    v5 = (CMMsl::Pose *)operator new();
    v6 = CMMsl::Pose::Pose(v5, *((const CMMsl::Pose **)a2 + 4));
    v7 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if (this != a2)
    sub_2429111C4(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
  if ((*((_BYTE *)a2 + 44) & 1) != 0)
  {
    v8 = *((_BYTE *)a2 + 40);
    *((_BYTE *)this + 44) |= 1u;
    *((_BYTE *)this + 40) = v8;
  }
  return this;
}

uint64_t CMMsl::PoseState::operator=(uint64_t a1, const CMMsl::PoseState *a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  char v10;
  int v11;

  if ((const CMMsl::PoseState *)a1 != a2)
  {
    CMMsl::PoseState::PoseState((CMMsl::PoseState *)&v7, a2);
    v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v11;
    v11 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v4;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v9 = v5;
    LOBYTE(v3) = *(_BYTE *)(a1 + 40);
    *(_BYTE *)(a1 + 40) = v10;
    v10 = v3;
    CMMsl::PoseState::~PoseState((CMMsl::PoseState *)&v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::PoseState *a2, CMMsl::PoseState *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_DWORD *)(this + 44);
  *(_DWORD *)(this + 44) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  v4 = *(_QWORD *)(this + 32);
  *(_QWORD *)(this + 32) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  v5 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  LOBYTE(v7) = *(_BYTE *)(this + 40);
  *(_BYTE *)(this + 40) = *((_BYTE *)a2 + 40);
  *((_BYTE *)a2 + 40) = v7;
  return this;
}

uint64_t CMMsl::PoseState::PoseState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_251360118;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  sub_242911330(v4, (__n128 *)(a2 + 8));
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t CMMsl::PoseState::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  char v10;
  int v11;

  if (a1 != a2)
  {
    CMMsl::PoseState::PoseState((uint64_t)&v7, a2);
    v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v11;
    v11 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v4;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v9 = v5;
    LOBYTE(v3) = *(_BYTE *)(a1 + 40);
    *(_BYTE *)(a1 + 40) = v10;
    v10 = v3;
    CMMsl::PoseState::~PoseState((CMMsl::PoseState *)&v7);
  }
  return a1;
}

uint64_t CMMsl::PoseState::formatText(CMMsl::PoseState *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  double *v6;
  double *v7;
  double v8;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 4);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "pose");
  v6 = (double *)*((_QWORD *)this + 1);
  v7 = (double *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(a2, "velocity", v8);
  }
  if ((*((_BYTE *)this + 44) & 1) != 0)
    PB::TextFormatter::format(a2, "wasCorrected");
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::PoseState::readFrom(CMMsl::PoseState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  _QWORD *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_21;
          v15 += 7;
          v2 = v17;
          v14 = v16++ > 8;
          if (v14)
            goto LABEL_19;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_21:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v19 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((_BYTE *)this + 44) |= 1u;
        v22 = *((_QWORD *)a2 + 1);
        if (v22 >= *((_QWORD *)a2 + 2))
        {
          v25 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v23 = v22 + 1;
          v24 = *(unsigned __int8 *)(*(_QWORD *)a2 + v22);
          *((_QWORD *)a2 + 1) = v23;
          v25 = v24 != 0;
        }
        *((_BYTE *)this + 40) = v25;
        goto LABEL_79;
      }
      if ((_DWORD)v19 == 2)
        break;
      if ((_DWORD)v19 == 1)
      {
        v20 = operator new();
        *(_QWORD *)v20 = &off_2513600E0;
        *(_DWORD *)(v20 + 64) = 0;
        *(_OWORD *)(v20 + 8) = 0u;
        *(_OWORD *)(v20 + 24) = 0u;
        *(_OWORD *)(v20 + 40) = 0u;
        v21 = *((_QWORD *)this + 4);
        *((_QWORD *)this + 4) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *((_QWORD *)this + 4);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, a2) & 1) == 0)
        {
          return 0;
        }
LABEL_29:
        PB::Reader::recallMark();
        goto LABEL_79;
      }
LABEL_19:
      if ((PB::Reader::skip(a2) & 1) == 0)
        return 0;
LABEL_79:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    if ((v11 & 7) != 2)
    {
      v41 = (char *)*((_QWORD *)this + 2);
      v40 = *((_QWORD *)this + 3);
      if ((unint64_t)v41 >= v40)
      {
        v43 = (char *)*((_QWORD *)this + 1);
        v44 = (v41 - v43) >> 3;
        v45 = v44 + 1;
        if ((unint64_t)(v44 + 1) >> 61)
LABEL_86:
          sub_242729A44();
        v46 = v40 - (_QWORD)v43;
        if (v46 >> 2 > v45)
          v45 = v46 >> 2;
        if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
          v47 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v47 = v45;
        if (v47)
        {
          v47 = (unint64_t)sub_2429112FC(v47);
          v43 = (char *)*((_QWORD *)this + 1);
          v41 = (char *)*((_QWORD *)this + 2);
        }
        else
        {
          v48 = 0;
        }
        v49 = (_QWORD *)(v47 + 8 * v44);
        *v49 = 0;
        v42 = v49 + 1;
        while (v41 != v43)
        {
          v50 = *((_QWORD *)v41 - 1);
          v41 -= 8;
          *--v49 = v50;
        }
        *((_QWORD *)this + 1) = v49;
        *((_QWORD *)this + 2) = v42;
        *((_QWORD *)this + 3) = v47 + 8 * v48;
        if (v43)
          operator delete(v43);
      }
      else
      {
        *(_QWORD *)v41 = 0;
        v42 = v41 + 8;
      }
      *((_QWORD *)this + 2) = v42;
      v51 = *((_QWORD *)a2 + 1);
      if (v51 <= 0xFFFFFFFFFFFFFFF7 && v51 + 8 <= *((_QWORD *)a2 + 2))
      {
        *(v42 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v51);
        *((_QWORD *)a2 + 1) += 8;
      }
      else
      {
        *((_BYTE *)a2 + 24) = 1;
      }
      goto LABEL_79;
    }
    if ((PB::Reader::placeMark() & 1) != 0)
      return 0;
    v26 = *((_QWORD *)a2 + 1);
    v27 = *((_QWORD *)a2 + 2);
    while (v26 < v27 && !*((_BYTE *)a2 + 24))
    {
      v29 = (char *)*((_QWORD *)this + 2);
      v28 = *((_QWORD *)this + 3);
      if ((unint64_t)v29 >= v28)
      {
        v31 = (char *)*((_QWORD *)this + 1);
        v32 = (v29 - v31) >> 3;
        v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 61)
          goto LABEL_86;
        v34 = v28 - (_QWORD)v31;
        if (v34 >> 2 > v33)
          v33 = v34 >> 2;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
          v35 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v35 = v33;
        if (v35)
        {
          v35 = (unint64_t)sub_2429112FC(v35);
          v31 = (char *)*((_QWORD *)this + 1);
          v29 = (char *)*((_QWORD *)this + 2);
        }
        else
        {
          v36 = 0;
        }
        v37 = (_QWORD *)(v35 + 8 * v32);
        *v37 = 0;
        v30 = v37 + 1;
        while (v29 != v31)
        {
          v38 = *((_QWORD *)v29 - 1);
          v29 -= 8;
          *--v37 = v38;
        }
        *((_QWORD *)this + 1) = v37;
        *((_QWORD *)this + 2) = v30;
        *((_QWORD *)this + 3) = v35 + 8 * v36;
        if (v31)
          operator delete(v31);
      }
      else
      {
        *(_QWORD *)v29 = 0;
        v30 = v29 + 8;
      }
      *((_QWORD *)this + 2) = v30;
      v39 = *((_QWORD *)a2 + 1);
      if (v39 > 0xFFFFFFFFFFFFFFF7 || v39 + 8 > *((_QWORD *)a2 + 2))
      {
        *((_BYTE *)a2 + 24) = 1;
        goto LABEL_29;
      }
      *(v30 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v39);
      v27 = *((_QWORD *)a2 + 2);
      v26 = *((_QWORD *)a2 + 1) + 8;
      *((_QWORD *)a2 + 1) = v26;
    }
    goto LABEL_29;
  }
  return v4 == 0;
}

uint64_t CMMsl::PoseState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  double *v5;
  double *v6;
  double v7;

  v3 = this;
  v4 = *(const PB::Base **)(this + 32);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = *(double **)(v3 + 8);
  v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7);
  }
  if ((*(_BYTE *)(v3 + 44) & 1) != 0)
    return PB::Writer::write(a2);
  return this;
}

uint64_t CMMsl::PoseState::hash_value(CMMsl::PoseState *this)
{
  CMMsl::Pose *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (CMMsl::Pose *)*((_QWORD *)this + 4);
  if (v2)
    v3 = CMMsl::Pose::hash_value(v2);
  else
    v3 = 0;
  v4 = PBHashBytes();
  if ((*((_BYTE *)this + 44) & 1) != 0)
    v5 = *((unsigned __int8 *)this + 40);
  else
    v5 = 0;
  return v4 ^ v3 ^ v5;
}

_QWORD *CMMsl::PoseState::makePose(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[4])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_2513600E0;
    *(_DWORD *)(v2 + 64) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    this = (_QWORD *)v1[4];
    v1[4] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void CMMsl::PostureJoint::~PostureJoint(CMMsl::PostureJoint *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_251360150;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::PostureJoint::~PostureJoint(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::PostureJoint *CMMsl::PostureJoint::PostureJoint(char **this, char **a2)
{
  _QWORD *v4;
  int v5;

  *this = (char *)&off_251360150;
  *(_OWORD *)(this + 1) = 0u;
  v4 = this + 1;
  *(_OWORD *)(this + 3) = 0u;
  *(_OWORD *)(this + 5) = 0u;
  this[7] = 0;
  if (this != a2)
  {
    sub_2429111C4(v4, a2[1], a2[2], (a2[2] - a2[1]) >> 3);
    sub_2429111C4(this + 4, a2[4], a2[5], (a2[5] - a2[4]) >> 3);
  }
  if ((*((_BYTE *)a2 + 60) & 1) != 0)
  {
    v5 = *((_DWORD *)a2 + 14);
    *((_BYTE *)this + 60) |= 1u;
    *((_DWORD *)this + 14) = v5;
  }
  return (CMMsl::PostureJoint *)this;
}

uint64_t CMMsl::PostureJoint::operator=(uint64_t a1, char **a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  char *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if ((char **)a1 != a2)
  {
    CMMsl::PostureJoint::PostureJoint(&v7, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v3;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v10;
    v10 = v5;
    *(_QWORD *)&v5 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v11;
    v11 = v5;
    CMMsl::PostureJoint::~PostureJoint((CMMsl::PostureJoint *)&v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::PostureJoint *a2, CMMsl::PostureJoint *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_DWORD *)(this + 60);
  *(_DWORD *)(this + 60) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  v7 = *(_QWORD *)(this + 32);
  *(_QWORD *)(this + 32) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v7;
  v8 = *(_QWORD *)(this + 40);
  *(_QWORD *)(this + 40) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v8;
  v9 = *(_QWORD *)(this + 48);
  *(_QWORD *)(this + 48) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v9;
  LODWORD(v9) = *(_DWORD *)(this + 56);
  *(_DWORD *)(this + 56) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v9;
  return this;
}

uint64_t CMMsl::PostureJoint::PostureJoint(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = &off_251360150;
  v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  sub_242911330(v4, (__n128 *)(a2 + 32));
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return a1;
}

uint64_t CMMsl::PostureJoint::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if (a1 != a2)
  {
    CMMsl::PostureJoint::PostureJoint((uint64_t)&v7, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v3;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v10;
    v10 = v5;
    *(_QWORD *)&v5 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v11;
    v11 = v5;
    CMMsl::PostureJoint::~PostureJoint((CMMsl::PostureJoint *)&v7);
  }
  return a1;
}

uint64_t CMMsl::PostureJoint::formatText(CMMsl::PostureJoint *this, PB::TextFormatter *a2, const char *a3)
{
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 60) & 1) != 0)
    PB::TextFormatter::format(a2, "jointName");
  v5 = (double *)*((_QWORD *)this + 1);
  v6 = (double *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "rotation", v7);
  }
  v8 = (double *)*((_QWORD *)this + 4);
  v9 = (double *)*((_QWORD *)this + 5);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(a2, "translation", v10);
  }
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::PostureJoint::readFrom(CMMsl::PostureJoint *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int i;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  _QWORD *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  _QWORD *v60;
  char v61;
  unsigned int v62;
  unint64_t v63;
  char v64;
  unint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t v83;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  for (i = *((unsigned __int8 *)a2 + 24); v2 < v3 && i == 0; i = *((unsigned __int8 *)a2 + 24))
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_20;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
        if (v14)
          goto LABEL_48;
      }
      i = 1;
      *((_BYTE *)a2 + 24) = 1;
      return i == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_48;
    }
LABEL_20:
    v19 = v11 & 7;
    if (v19 == 4)
    {
      i = 0;
      return i == 0;
    }
    v20 = v11 >> 3;
    if ((v11 >> 3) == 3)
    {
      *((_BYTE *)this + 60) |= 1u;
      v36 = *((_QWORD *)a2 + 1);
      v37 = *((_QWORD *)a2 + 2);
      v38 = *(_QWORD *)a2;
      if (v36 > 0xFFFFFFFFFFFFFFF5 || v36 + 10 > v37)
      {
        v61 = 0;
        v62 = 0;
        v41 = 0;
        if (v37 <= v36)
          v37 = *((_QWORD *)a2 + 1);
        while (1)
        {
          if (v37 == v36)
          {
            LODWORD(v41) = 0;
            *((_BYTE *)a2 + 24) = 1;
            goto LABEL_117;
          }
          v63 = v36 + 1;
          v64 = *(_BYTE *)(v38 + v36);
          *((_QWORD *)a2 + 1) = v63;
          v41 |= (unint64_t)(v64 & 0x7F) << v61;
          if ((v64 & 0x80) == 0)
            break;
          v61 += 7;
          v36 = v63;
          v14 = v62++ > 8;
          if (v14)
          {
LABEL_93:
            LODWORD(v41) = 0;
            goto LABEL_117;
          }
        }
        if (*((_BYTE *)a2 + 24))
          LODWORD(v41) = 0;
      }
      else
      {
        v39 = 0;
        v40 = 0;
        v41 = 0;
        while (1)
        {
          v42 = v36 + 1;
          *((_QWORD *)a2 + 1) = v36 + 1;
          v43 = *(_BYTE *)(v38 + v36);
          v41 |= (unint64_t)(v43 & 0x7F) << v39;
          if ((v43 & 0x80) == 0)
            break;
          v39 += 7;
          v36 = v42;
          v14 = v40++ > 8;
          if (v14)
            goto LABEL_93;
        }
      }
LABEL_117:
      *((_DWORD *)this + 14) = v41;
      goto LABEL_49;
    }
    if ((_DWORD)v20 == 2)
    {
      if (v19 != 2)
      {
        v66 = (char *)*((_QWORD *)this + 5);
        v65 = *((_QWORD *)this + 6);
        if ((unint64_t)v66 >= v65)
        {
          v73 = (char *)*((_QWORD *)this + 4);
          v74 = (v66 - v73) >> 3;
          v75 = v74 + 1;
          if ((unint64_t)(v74 + 1) >> 61)
LABEL_140:
            sub_242729A44();
          v76 = v65 - (_QWORD)v73;
          if (v76 >> 2 > v75)
            v75 = v76 >> 2;
          if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF8)
            v77 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v77 = v75;
          if (v77)
          {
            v77 = (unint64_t)sub_2429112FC(v77);
            v73 = (char *)*((_QWORD *)this + 4);
            v66 = (char *)*((_QWORD *)this + 5);
          }
          else
          {
            v78 = 0;
          }
          v81 = (_QWORD *)(v77 + 8 * v74);
          *v81 = 0;
          v60 = v81 + 1;
          while (v66 != v73)
          {
            v82 = *((_QWORD *)v66 - 1);
            v66 -= 8;
            *--v81 = v82;
          }
          *((_QWORD *)this + 4) = v81;
          *((_QWORD *)this + 5) = v60;
          *((_QWORD *)this + 6) = v77 + 8 * v78;
          if (v73)
            operator delete(v73);
        }
        else
        {
          *(_QWORD *)v66 = 0;
          v60 = v66 + 8;
        }
        *((_QWORD *)this + 5) = v60;
        goto LABEL_132;
      }
      if ((PB::Reader::placeMark() & 1) != 0)
        return 0;
      v44 = *((_QWORD *)a2 + 1);
      v45 = *((_QWORD *)a2 + 2);
      while (v44 < v45 && !*((_BYTE *)a2 + 24))
      {
        v47 = (char *)*((_QWORD *)this + 5);
        v46 = *((_QWORD *)this + 6);
        if ((unint64_t)v47 >= v46)
        {
          v49 = (char *)*((_QWORD *)this + 4);
          v50 = (v47 - v49) >> 3;
          v51 = v50 + 1;
          if ((unint64_t)(v50 + 1) >> 61)
            goto LABEL_140;
          v52 = v46 - (_QWORD)v49;
          if (v52 >> 2 > v51)
            v51 = v52 >> 2;
          if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8)
            v53 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v53 = v51;
          if (v53)
          {
            v53 = (unint64_t)sub_2429112FC(v53);
            v49 = (char *)*((_QWORD *)this + 4);
            v47 = (char *)*((_QWORD *)this + 5);
          }
          else
          {
            v54 = 0;
          }
          v55 = (_QWORD *)(v53 + 8 * v50);
          *v55 = 0;
          v48 = v55 + 1;
          while (v47 != v49)
          {
            v56 = *((_QWORD *)v47 - 1);
            v47 -= 8;
            *--v55 = v56;
          }
          *((_QWORD *)this + 4) = v55;
          *((_QWORD *)this + 5) = v48;
          *((_QWORD *)this + 6) = v53 + 8 * v54;
          if (v49)
            operator delete(v49);
        }
        else
        {
          *(_QWORD *)v47 = 0;
          v48 = v47 + 8;
        }
        *((_QWORD *)this + 5) = v48;
        v57 = *((_QWORD *)a2 + 1);
        if (v57 > 0xFFFFFFFFFFFFFFF7 || v57 + 8 > *((_QWORD *)a2 + 2))
        {
LABEL_96:
          *((_BYTE *)a2 + 24) = 1;
          break;
        }
        *(v48 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v57);
        v45 = *((_QWORD *)a2 + 2);
        v44 = *((_QWORD *)a2 + 1) + 8;
        *((_QWORD *)a2 + 1) = v44;
      }
    }
    else
    {
      if ((_DWORD)v20 != 1)
      {
LABEL_48:
        if ((PB::Reader::skip(a2) & 1) == 0)
          return 0;
        goto LABEL_49;
      }
      if (v19 != 2)
      {
        v59 = (char *)*((_QWORD *)this + 2);
        v58 = *((_QWORD *)this + 3);
        if ((unint64_t)v59 >= v58)
        {
          v67 = (char *)*((_QWORD *)this + 1);
          v68 = (v59 - v67) >> 3;
          v69 = v68 + 1;
          if ((unint64_t)(v68 + 1) >> 61)
            goto LABEL_140;
          v70 = v58 - (_QWORD)v67;
          if (v70 >> 2 > v69)
            v69 = v70 >> 2;
          if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8)
            v71 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v71 = v69;
          if (v71)
          {
            v71 = (unint64_t)sub_2429112FC(v71);
            v67 = (char *)*((_QWORD *)this + 1);
            v59 = (char *)*((_QWORD *)this + 2);
          }
          else
          {
            v72 = 0;
          }
          v79 = (_QWORD *)(v71 + 8 * v68);
          *v79 = 0;
          v60 = v79 + 1;
          while (v59 != v67)
          {
            v80 = *((_QWORD *)v59 - 1);
            v59 -= 8;
            *--v79 = v80;
          }
          *((_QWORD *)this + 1) = v79;
          *((_QWORD *)this + 2) = v60;
          *((_QWORD *)this + 3) = v71 + 8 * v72;
          if (v67)
            operator delete(v67);
        }
        else
        {
          *(_QWORD *)v59 = 0;
          v60 = v59 + 8;
        }
        *((_QWORD *)this + 2) = v60;
LABEL_132:
        v83 = *((_QWORD *)a2 + 1);
        if (v83 <= 0xFFFFFFFFFFFFFFF7 && v83 + 8 <= *((_QWORD *)a2 + 2))
        {
          *(v60 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v83);
          *((_QWORD *)a2 + 1) += 8;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
        goto LABEL_49;
      }
      if ((PB::Reader::placeMark() & 1) != 0)
        return 0;
      v21 = *((_QWORD *)a2 + 1);
      v22 = *((_QWORD *)a2 + 2);
      while (v21 < v22 && !*((_BYTE *)a2 + 24))
      {
        v24 = (char *)*((_QWORD *)this + 2);
        v23 = *((_QWORD *)this + 3);
        if ((unint64_t)v24 >= v23)
        {
          v26 = (char *)*((_QWORD *)this + 1);
          v27 = (v24 - v26) >> 3;
          v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 61)
            goto LABEL_140;
          v29 = v23 - (_QWORD)v26;
          if (v29 >> 2 > v28)
            v28 = v29 >> 2;
          if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
            v30 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v30 = v28;
          if (v30)
          {
            v30 = (unint64_t)sub_2429112FC(v30);
            v26 = (char *)*((_QWORD *)this + 1);
            v24 = (char *)*((_QWORD *)this + 2);
          }
          else
          {
            v31 = 0;
          }
          v32 = (_QWORD *)(v30 + 8 * v27);
          *v32 = 0;
          v25 = v32 + 1;
          while (v24 != v26)
          {
            v33 = *((_QWORD *)v24 - 1);
            v24 -= 8;
            *--v32 = v33;
          }
          *((_QWORD *)this + 1) = v32;
          *((_QWORD *)this + 2) = v25;
          *((_QWORD *)this + 3) = v30 + 8 * v31;
          if (v26)
            operator delete(v26);
        }
        else
        {
          *(_QWORD *)v24 = 0;
          v25 = v24 + 8;
        }
        *((_QWORD *)this + 2) = v25;
        v34 = *((_QWORD *)a2 + 1);
        if (v34 > 0xFFFFFFFFFFFFFFF7 || v34 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_96;
        *(v25 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v34);
        v22 = *((_QWORD *)a2 + 2);
        v21 = *((_QWORD *)a2 + 1) + 8;
        *((_QWORD *)a2 + 1) = v21;
      }
    }
    PB::Reader::recallMark();
LABEL_49:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
  }
  return i == 0;
}

uint64_t CMMsl::PostureJoint::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  double *v4;
  double *v5;
  double v6;
  double *v7;
  double *v8;
  double v9;

  v3 = this;
  v4 = *(double **)(this + 8);
  v5 = *(double **)(this + 16);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6);
  }
  v7 = *(double **)(v3 + 32);
  v8 = *(double **)(v3 + 40);
  while (v7 != v8)
  {
    v9 = *v7++;
    this = PB::Writer::write(a2, v9);
  }
  if ((*(_BYTE *)(v3 + 60) & 1) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::PostureJoint::hash_value(CMMsl::PostureJoint *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = PBHashBytes();
  v3 = PBHashBytes();
  if ((*((_BYTE *)this + 60) & 1) != 0)
    v4 = *((int *)this + 14);
  else
    v4 = 0;
  return v3 ^ v2 ^ v4;
}

void CMMsl::PostureSkeleton::~PostureSkeleton(CMMsl::PostureSkeleton *this)
{
  void **v2;

  *(_QWORD *)this = &off_251360188;
  v2 = (void **)((char *)this + 8);
  sub_242910B70(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_251360188;
  v2 = (void **)((char *)this + 8);
  sub_242910B70(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_251360188;
  v2 = (void **)((char *)this + 8);
  sub_242910B70(&v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::PostureSkeleton *CMMsl::PostureSkeleton::PostureSkeleton(CMMsl::PostureSkeleton *this, const CMMsl::PostureSkeleton *a2)
{
  int64x2_t *v3;
  char ***v4;
  char ***i;
  char **v6;
  char **v7;
  unint64_t v8;
  char ***v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char ***v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  char **v20;
  int64x2_t v21;
  unint64_t v22;
  uint64_t v24;
  int64x2_t v25;
  unint64_t v26;
  char *v27;

  *((_QWORD *)this + 1) = 0;
  v3 = (int64x2_t *)((char *)this + 8);
  *(_QWORD *)this = &off_251360188;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  v4 = (char ***)*((_QWORD *)a2 + 1);
  for (i = (char ***)*((_QWORD *)a2 + 2); v4 != i; ++v4)
  {
    v6 = *v4;
    v7 = (char **)operator new();
    CMMsl::PostureJoint::PostureJoint(v7, v6);
    v9 = (char ***)*((_QWORD *)this + 2);
    v8 = *((_QWORD *)this + 3);
    if ((unint64_t)v9 >= v8)
    {
      v11 = ((uint64_t)v9 - v3->i64[0]) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        sub_242729A44();
      v12 = v8 - v3->i64[0];
      v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1))
        v13 = v11 + 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      v27 = (char *)this + 24;
      if (v14)
        v14 = (unint64_t)sub_2429112FC(v14);
      else
        v15 = 0;
      v16 = (char ***)(v14 + 8 * v11);
      v17 = v14 + 8 * v15;
      v26 = v17;
      *v16 = v7;
      v10 = v16 + 1;
      v25.i64[1] = (uint64_t)(v16 + 1);
      v19 = (_QWORD *)*((_QWORD *)this + 1);
      v18 = (_QWORD *)*((_QWORD *)this + 2);
      if (v18 == v19)
      {
        v21 = vdupq_n_s64((unint64_t)v18);
      }
      else
      {
        do
        {
          v20 = (char **)*--v18;
          *v18 = 0;
          *--v16 = v20;
        }
        while (v18 != v19);
        v21 = *v3;
        v10 = (_QWORD *)v25.i64[1];
        v17 = v26;
      }
      *((_QWORD *)this + 1) = v16;
      *((_QWORD *)this + 2) = v10;
      v25 = v21;
      v22 = *((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = v17;
      v26 = v22;
      v24 = v21.i64[0];
      sub_2429114EC((uint64_t)&v24);
    }
    else
    {
      *v9 = v7;
      v10 = v9 + 1;
    }
    *((_QWORD *)this + 2) = v10;
  }
  return this;
}

void sub_2428A4844(void *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  sub_2427297D4(a1);
}

uint64_t CMMsl::PostureSkeleton::operator=(uint64_t a1, const CMMsl::PostureSkeleton *a2)
{
  __int128 v3;
  uint64_t v4;
  void (**v6)(CMMsl::PostureSkeleton *__hidden);
  __int128 v7;
  uint64_t v8;
  void **v9;

  if ((const CMMsl::PostureSkeleton *)a1 != a2)
  {
    CMMsl::PostureSkeleton::PostureSkeleton((CMMsl::PostureSkeleton *)&v6, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v4;
    v6 = &off_251360188;
    v9 = (void **)&v7;
    sub_242910B70(&v9);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

_QWORD *CMMsl::swap(_QWORD *this, CMMsl::PostureSkeleton *a2, CMMsl::PostureSkeleton *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  return this;
}

_QWORD *CMMsl::PostureSkeleton::PostureSkeleton(_QWORD *a1, uint64_t a2)
{
  _OWORD *v4;

  *a1 = &off_251360188;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v4 = a1 + 1;
  sub_242910BEC(a1 + 1);
  *v4 = *(_OWORD *)(a2 + 8);
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

{
  _OWORD *v4;

  *a1 = &off_251360188;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v4 = a1 + 1;
  sub_242910BEC(a1 + 1);
  *v4 = *(_OWORD *)(a2 + 8);
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

uint64_t CMMsl::PostureSkeleton::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  void (**v9)(CMMsl::PostureSkeleton *__hidden);
  __int128 v10;
  uint64_t v11;
  void **v12;

  if (a1 != a2)
  {
    v9 = &off_251360188;
    v10 = 0uLL;
    v11 = 0;
    sub_242910BEC(&v10);
    v4 = *(_QWORD *)(a2 + 24);
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    v10 = v6;
    v7 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v4;
    v11 = v7;
    v12 = (void **)&v10;
    v9 = &off_251360188;
    sub_242910B70(&v12);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::PostureSkeleton::formatText(CMMsl::PostureSkeleton *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "joint");
  }
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PostureSkeleton::readFrom(CMMsl::PostureSkeleton *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  char *v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  int64x2_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64x2_t v41;
  unint64_t v42;
  char *v43;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (char *)this + 24;
    while (1)
    {
      v9 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_25;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v12 >> 3) == 1)
      {
        v20 = operator new();
        v21 = v20;
        *(_QWORD *)v20 = &off_251360150;
        *(_OWORD *)(v20 + 8) = 0u;
        *(_OWORD *)(v20 + 24) = 0u;
        *(_OWORD *)(v20 + 40) = 0u;
        *(_QWORD *)(v20 + 56) = 0;
        v23 = (uint64_t *)*((_QWORD *)this + 2);
        v22 = *((_QWORD *)this + 3);
        if ((unint64_t)v23 >= v22)
        {
          v26 = *((_QWORD *)this + 1);
          v27 = ((uint64_t)v23 - v26) >> 3;
          if ((unint64_t)(v27 + 1) >> 61)
            sub_242729A44();
          v28 = v22 - v26;
          v29 = v28 >> 2;
          if (v28 >> 2 <= (unint64_t)(v27 + 1))
            v29 = v27 + 1;
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
            v30 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v30 = v29;
          v43 = v8;
          if (v30)
            v30 = (unint64_t)sub_2429112FC(v30);
          else
            v31 = 0;
          v32 = (uint64_t *)(v30 + 8 * v27);
          v33 = v30 + 8 * v31;
          v42 = v33;
          *v32 = v21;
          v24 = v32 + 1;
          v41.i64[1] = (uint64_t)(v32 + 1);
          v35 = (_QWORD *)*((_QWORD *)this + 1);
          v34 = (_QWORD *)*((_QWORD *)this + 2);
          if (v34 == v35)
          {
            v37 = vdupq_n_s64((unint64_t)v34);
          }
          else
          {
            do
            {
              v36 = *--v34;
              *v34 = 0;
              *--v32 = v36;
            }
            while (v34 != v35);
            v37 = *(int64x2_t *)((char *)this + 8);
            v24 = (_QWORD *)v41.i64[1];
            v33 = v42;
          }
          *((_QWORD *)this + 1) = v32;
          *((_QWORD *)this + 2) = v24;
          v41 = v37;
          v38 = *((_QWORD *)this + 3);
          *((_QWORD *)this + 3) = v33;
          v42 = v38;
          v40 = v37.i64[0];
          sub_2429114EC((uint64_t)&v40);
        }
        else
        {
          *v23 = v20;
          v24 = v23 + 1;
        }
        *((_QWORD *)this + 2) = v24;
        v39 = *(v24 - 1);
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v39 + 16))(v39, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_25:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)a2 + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      v15 = v17++ > 8;
      if (v15)
        goto LABEL_25;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sub_2428A4DA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::PostureSkeleton::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base **v2;
  const PB::Base **i;
  const PB::Base *v5;

  v2 = *(const PB::Base ***)(this + 8);
  for (i = *(const PB::Base ***)(this + 16); v2 != i; this = PB::Writer::writeSubmessage(a2, v5))
    v5 = *v2++;
  return this;
}

BOOL sub_2428A4E10(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 result;
  BOOL v9;

  if (a2 - a1 != a4 - (_QWORD)a3)
    return 0;
  if (a1 == a2)
    return 1;
  v5 = a3;
  v6 = a1 + 8;
  do
  {
    v7 = *v5++;
    result = CMMsl::PostureJoint::operator==(*(_QWORD *)(v6 - 8), v7);
    v9 = !result || v6 == a2;
    v6 += 8;
  }
  while (!v9);
  return result;
}

uint64_t CMMsl::PostureSkeleton::hash_value(CMMsl::PostureSkeleton *this)
{
  CMMsl::PostureJoint **v1;
  CMMsl::PostureJoint **v2;
  uint64_t v3;
  CMMsl::PostureJoint *v4;

  v1 = (CMMsl::PostureJoint **)*((_QWORD *)this + 1);
  v2 = (CMMsl::PostureJoint **)*((_QWORD *)this + 2);
  if (v1 == v2)
    return 0;
  v3 = 0;
  do
  {
    v4 = *v1++;
    v3 ^= CMMsl::PostureJoint::hash_value(v4);
  }
  while (v1 != v2);
  return v3;
}

void CMMsl::PowerManagementUserActivity::~PowerManagementUserActivity(CMMsl::PowerManagementUserActivity *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::PowerManagementUserActivity::PowerManagementUserActivity(uint64_t this, const CMMsl::PowerManagementUserActivity *a2)
{
  uint64_t v2;

  *(_QWORD *)this = &off_2513601C0;
  *(_DWORD *)(this + 16) = 0;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v2 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 16) = 1;
    *(_QWORD *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::PowerManagementUserActivity::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  _QWORD v7[2];
  int v8;

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = *(_BYTE *)(a2 + 16) & 1;
    v8 = v4;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v7[0] = &off_2513601C0;
    v7[1] = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD v8[2];
  int v9;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v3;
    v9 = v5;
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v8[0] = &off_2513601C0;
    v8[1] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::PowerManagementUserActivity *a2, CMMsl::PowerManagementUserActivity *a3)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  return this;
}

uint64_t CMMsl::PowerManagementUserActivity::formatText(CMMsl::PowerManagementUserActivity *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 16) & 1) != 0)
    PB::TextFormatter::format(a2, "userActivity");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PowerManagementUserActivity::readFrom(CMMsl::PowerManagementUserActivity *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  char v24;
  uint64_t result;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_29;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 16) |= 1u;
        v19 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        v20 = *(_QWORD *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v3)
        {
          v26 = 0;
          v27 = 0;
          v23 = 0;
          if (v3 <= v19)
            v2 = *((_QWORD *)a2 + 1);
          else
            v2 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v2 == v19)
            {
              v23 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_43;
            }
            v28 = v19++;
            v29 = *(_BYTE *)(v20 + v28);
            *((_QWORD *)a2 + 1) = v19;
            v23 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0)
              break;
            v26 += 7;
            v14 = v27++ > 8;
            if (v14)
            {
              v23 = 0;
              goto LABEL_42;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v23 = 0;
LABEL_42:
          v2 = v28 + 1;
        }
        else
        {
          v21 = 0;
          v22 = 0;
          v23 = 0;
          while (1)
          {
            v2 = v19 + 1;
            *((_QWORD *)a2 + 1) = v19 + 1;
            v24 = *(_BYTE *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0)
              break;
            v21 += 7;
            v19 = v2;
            v14 = v22++ > 8;
            if (v14)
            {
              v23 = 0;
              break;
            }
          }
        }
LABEL_43:
        *((_QWORD *)this + 1) = v23;
      }
      else
      {
LABEL_29:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_29;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PowerManagementUserActivity::writeTo(uint64_t this, PB::Writer *a2)
{
  if ((*(_BYTE *)(this + 16) & 1) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::PowerManagementUserActivity::hash_value(CMMsl::PowerManagementUserActivity *this)
{
  if ((*((_BYTE *)this + 16) & 1) != 0)
    return *((_QWORD *)this + 1);
  else
    return 0;
}

void CMMsl::PrecisionFindingDOTEstimate::~PrecisionFindingDOTEstimate(CMMsl::PrecisionFindingDOTEstimate *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::PrecisionFindingDOTEstimate::PrecisionFindingDOTEstimate(CMMsl::PrecisionFindingDOTEstimate *this, const CMMsl::PrecisionFindingDOTEstimate *a2)
{
  char v2;
  double result;

  *(_QWORD *)this = &off_2513601F8;
  *((_DWORD *)this + 6) = 0;
  if ((*((_BYTE *)a2 + 24) & 2) != 0)
  {
    result = *((double *)a2 + 2);
    *((_BYTE *)this + 24) = 2;
    *((double *)this + 2) = result;
    v2 = 3;
    if ((*((_BYTE *)a2 + 24) & 1) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*((_BYTE *)a2 + 24) & 1) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 1);
    *((_BYTE *)this + 24) = v2;
    *((double *)this + 1) = result;
  }
  return result;
}

uint64_t CMMsl::PrecisionFindingDOTEstimate::operator=(uint64_t a1, uint64_t a2, double a3, double a4)
{
  char v5;
  char v6;
  int v7;
  __int128 v8;
  void (**v10)(CMMsl::PrecisionFindingDOTEstimate *__hidden);
  __int128 v11;
  int v12;

  if (a1 != a2)
  {
    v10 = &off_2513601F8;
    v12 = 0;
    v5 = *(_BYTE *)(a2 + 24);
    if ((v5 & 2) != 0)
    {
      a3 = *(double *)(a2 + 16);
      LOBYTE(v12) = 2;
      v6 = 3;
      if ((v5 & 1) != 0)
      {
LABEL_6:
        a4 = *(double *)(a2 + 8);
        LOBYTE(v12) = v6;
      }
    }
    else
    {
      v6 = 1;
      if ((*(_BYTE *)(a2 + 24) & 1) != 0)
        goto LABEL_6;
    }
    v7 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v12;
    v12 = v7;
    v8 = *(_OWORD *)(a1 + 8);
    *(double *)(a1 + 8) = a4;
    *(double *)(a1 + 16) = a3;
    v11 = v8;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PrecisionFindingDOTEstimate *a2, CMMsl::PrecisionFindingDOTEstimate *a3)
{
  int v3;
  uint64_t v4;
  double result;

  v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

uint64_t CMMsl::PrecisionFindingDOTEstimate::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  void (**v7)(CMMsl::PrecisionFindingDOTEstimate *__hidden);
  __int128 v8;
  int v9;

  if (a1 != a2)
  {
    v7 = &off_2513601F8;
    v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    v9 = *(_DWORD *)(a1 + 24);
    v4 = *(_OWORD *)(a1 + 8);
    v5 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 24) = v3;
    *(_OWORD *)(a1 + 8) = v5;
    v8 = v4;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::PrecisionFindingDOTEstimate::formatText(CMMsl::PrecisionFindingDOTEstimate *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "dot", *((double *)this + 1));
    v5 = *((_BYTE *)this + 24);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PrecisionFindingDOTEstimate::readFrom(CMMsl::PrecisionFindingDOTEstimate *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          v14 = v16++ > 8;
          if (v14)
            goto LABEL_26;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_26;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 24) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_30;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
      }
      else
      {
        if ((v11 >> 3) != 1)
        {
LABEL_26:
          result = PB::Reader::skip(a2);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          goto LABEL_33;
        }
        *((_BYTE *)this + 24) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
        {
LABEL_30:
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_33;
        }
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
      }
      v2 = *((_QWORD *)a2 + 1) + 8;
      *((_QWORD *)a2 + 1) = v2;
LABEL_33:
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::PrecisionFindingDOTEstimate::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 24);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16));
    v4 = *(_BYTE *)(v3 + 24);
  }
  if ((v4 & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 8));
  return this;
}

uint64_t CMMsl::PrecisionFindingDOTEstimate::hash_value(CMMsl::PrecisionFindingDOTEstimate *this)
{
  double v1;
  double v2;

  if ((*((_BYTE *)this + 24) & 2) != 0)
  {
    v1 = *((double *)this + 2);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 24) & 1) != 0)
      goto LABEL_3;
LABEL_9:
    v2 = 0.0;
    return *(_QWORD *)&v2 ^ *(_QWORD *)&v1;
  }
  v1 = 0.0;
  if ((*((_BYTE *)this + 24) & 1) == 0)
    goto LABEL_9;
LABEL_3:
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1;
}

void CMMsl::PrecisionFindingRangeFilter::~PrecisionFindingRangeFilter(CMMsl::PrecisionFindingRangeFilter *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::PrecisionFindingRangeFilter::PrecisionFindingRangeFilter(uint64_t this, const CMMsl::PrecisionFindingRangeFilter *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  char v9;
  char v10;

  *(_QWORD *)this = &off_251360230;
  *(_DWORD *)(this + 40) = 0;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 2) != 0)
  {
    v4 = *((_QWORD *)a2 + 2);
    v3 = 2;
    *(_BYTE *)(this + 40) = 2;
    *(_QWORD *)(this + 16) = v4;
    v2 = *((_BYTE *)a2 + 40);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 40) & 1) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 1);
    v3 |= 1u;
    *(_BYTE *)(this + 40) = v3;
    *(_QWORD *)(this + 8) = v5;
    v2 = *((_BYTE *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *(_BYTE *)(this + 40) = v3;
    *(_DWORD *)(this + 24) = v6;
    v2 = *((_BYTE *)a2 + 40);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 8);
  v3 |= 0x10u;
  *(_BYTE *)(this + 40) = v3;
  *(_DWORD *)(this + 32) = v7;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_15;
  }
LABEL_14:
  v8 = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *(_BYTE *)(this + 40) = v3;
  *(_DWORD *)(this + 28) = v8;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      return this;
LABEL_16:
    v10 = *((_BYTE *)a2 + 37);
    *(_BYTE *)(this + 40) = v3 | 0x40;
    *(_BYTE *)(this + 37) = v10;
    return this;
  }
LABEL_15:
  v9 = *((_BYTE *)a2 + 36);
  v3 |= 0x20u;
  *(_BYTE *)(this + 40) = v3;
  *(_BYTE *)(this + 36) = v9;
  if ((*((_BYTE *)a2 + 40) & 0x40) != 0)
    goto LABEL_16;
  return this;
}

uint64_t CMMsl::PrecisionFindingRangeFilter::operator=(uint64_t a1, const CMMsl::PrecisionFindingRangeFilter *a2)
{
  int v3;
  __int128 v4;
  int v5;
  uint64_t v7;
  __int128 v8;
  int v9;
  uint64_t v10;
  char v11;
  char v12;
  int v13;

  if ((const CMMsl::PrecisionFindingRangeFilter *)a1 != a2)
  {
    CMMsl::PrecisionFindingRangeFilter::PrecisionFindingRangeFilter((uint64_t)&v7, a2);
    v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v13;
    v13 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v4;
    v5 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v9;
    v9 = v5;
    *(_QWORD *)&v4 = *(_QWORD *)(a1 + 28);
    *(_QWORD *)(a1 + 28) = v10;
    v10 = v4;
    LOBYTE(v5) = *(_BYTE *)(a1 + 36);
    *(_BYTE *)(a1 + 36) = v11;
    v11 = v5;
    LOBYTE(v5) = *(_BYTE *)(a1 + 37);
    *(_BYTE *)(a1 + 37) = v12;
    v12 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::PrecisionFindingRangeFilter *a2, CMMsl::PrecisionFindingRangeFilter *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  float result;

  v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v6;
  LODWORD(v5) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v5;
  result = *((float *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((float *)a2 + 7) = result;
  LOBYTE(v6) = *((_BYTE *)this + 36);
  *((_BYTE *)this + 36) = *((_BYTE *)a2 + 36);
  *((_BYTE *)a2 + 36) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 37);
  *((_BYTE *)this + 37) = *((_BYTE *)a2 + 37);
  *((_BYTE *)a2 + 37) = v6;
  return result;
}

float CMMsl::PrecisionFindingRangeFilter::PrecisionFindingRangeFilter(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_251360230;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  result = *(float *)(a2 + 28);
  *(float *)(a1 + 28) = result;
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_BYTE *)(a1 + 37) = *(_BYTE *)(a2 + 37);
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_251360230;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  result = *(float *)(a2 + 28);
  *(float *)(a1 + 28) = result;
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_BYTE *)(a1 + 37) = *(_BYTE *)(a2 + 37);
  return result;
}

uint64_t CMMsl::PrecisionFindingRangeFilter::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  char v5;
  char v6;
  __int128 v7;
  int v8;
  uint64_t v9;
  void (**v11)(CMMsl::PrecisionFindingRangeFilter *__hidden);
  __int128 v12;
  int v13;
  uint64_t v14;
  char v15;
  char v16;
  int v17;

  if (a1 != a2)
  {
    v11 = &off_251360230;
    v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    v4 = *(_DWORD *)(a2 + 24);
    v5 = *(_BYTE *)(a2 + 36);
    v6 = *(_BYTE *)(a2 + 37);
    v17 = *(_DWORD *)(a1 + 40);
    v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    v12 = v7;
    v8 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v4;
    v13 = v8;
    *(_QWORD *)&v7 = *(_QWORD *)(a1 + 28);
    v9 = *(_QWORD *)(a2 + 28);
    *(_DWORD *)(a1 + 40) = v3;
    *(_QWORD *)(a1 + 28) = v9;
    v14 = v7;
    LOBYTE(v3) = *(_BYTE *)(a1 + 36);
    *(_BYTE *)(a1 + 36) = v5;
    v15 = v3;
    LOBYTE(v3) = *(_BYTE *)(a1 + 37);
    *(_BYTE *)(a1 + 37) = v6;
    v16 = v3;
    PB::Base::~Base((PB::Base *)&v11);
  }
  return a1;
}

uint64_t CMMsl::PrecisionFindingRangeFilter::formatText(CMMsl::PrecisionFindingRangeFilter *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "inlierCount");
    v5 = *((_BYTE *)this + 40);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*((_BYTE *)this + 40) & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "isOutlierCurrentSample");
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "isValidMeasurement");
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "range", *((double *)this + 1));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0)
      goto LABEL_7;
LABEL_15:
    PB::TextFormatter::format(a2, "rangeShift", *((float *)this + 8));
    if ((*((_BYTE *)this + 40) & 2) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_8;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "rangeFrequency", *((float *)this + 7));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 0x10) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v5 & 2) != 0)
LABEL_8:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PrecisionFindingRangeFilter::readFrom(CMMsl::PrecisionFindingRangeFilter *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  int v26;
  BOOL v27;
  int v28;
  BOOL v29;
  char v30;
  unsigned int v31;
  unint64_t v32;
  char v33;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_66;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 40) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_42;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_29;
      case 2u:
        *((_BYTE *)this + 40) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_42;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_29:
        v2 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_60;
      case 3u:
        *((_BYTE *)this + 40) |= 4u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v30 = 0;
          v31 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_65;
            }
            v32 = v20++;
            v33 = *(_BYTE *)(v21 + v32);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v33 & 0x7F) << v30;
            if ((v33 & 0x80) == 0)
              break;
            v30 += 7;
            v14 = v31++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_64:
              v2 = v32 + 1;
              goto LABEL_65;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
          goto LABEL_64;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_65;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_65:
        *((_DWORD *)this + 6) = v24;
        break;
      case 4u:
        *((_BYTE *)this + 40) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_42;
        *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_59;
      case 5u:
        *((_BYTE *)this + 40) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_59:
          v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_60:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_42:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 6u:
        *((_BYTE *)this + 40) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v27 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v26 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v27 = v26 != 0;
        }
        *((_BYTE *)this + 36) = v27;
        break;
      case 7u:
        *((_BYTE *)this + 40) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v29 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v28 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v29 = v28 != 0;
        }
        *((_BYTE *)this + 37) = v29;
        break;
      default:
        goto LABEL_19;
    }
LABEL_66:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::PrecisionFindingRangeFilter::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 40);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16));
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(this + 40) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      return this;
    return PB::Writer::write(a2);
  }
LABEL_14:
  this = PB::Writer::write(a2);
  if ((*(_BYTE *)(v3 + 40) & 0x40) != 0)
    return PB::Writer::write(a2);
  return this;
}

uint64_t CMMsl::PrecisionFindingRangeFilter::hash_value(CMMsl::PrecisionFindingRangeFilter *this)
{
  double v1;
  double v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if ((*((_BYTE *)this + 40) & 2) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 40) & 1) != 0)
      goto LABEL_3;
LABEL_18:
    v2 = 0.0;
    if ((*((_BYTE *)this + 40) & 4) != 0)
      goto LABEL_6;
    goto LABEL_19;
  }
  v1 = *((double *)this + 2);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 40) & 1) == 0)
    goto LABEL_18;
LABEL_3:
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 40) & 4) != 0)
  {
LABEL_6:
    v3 = *((unsigned int *)this + 6);
    if ((*((_BYTE *)this + 40) & 0x10) != 0)
      goto LABEL_7;
LABEL_20:
    v5 = 0;
    if ((*((_BYTE *)this + 40) & 8) != 0)
      goto LABEL_10;
LABEL_21:
    v7 = 0;
    if ((*((_BYTE *)this + 40) & 0x20) != 0)
      goto LABEL_13;
LABEL_22:
    v8 = 0;
    if ((*((_BYTE *)this + 40) & 0x40) != 0)
      goto LABEL_14;
LABEL_23:
    v9 = 0;
    return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ v3 ^ v5 ^ v7 ^ v8 ^ v9;
  }
LABEL_19:
  v3 = 0;
  if ((*((_BYTE *)this + 40) & 0x10) == 0)
    goto LABEL_20;
LABEL_7:
  v4 = *((float *)this + 8);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((*((_BYTE *)this + 40) & 8) == 0)
    goto LABEL_21;
LABEL_10:
  v6 = *((float *)this + 7);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  if ((*((_BYTE *)this + 40) & 0x20) == 0)
    goto LABEL_22;
LABEL_13:
  v8 = *((unsigned __int8 *)this + 36);
  if ((*((_BYTE *)this + 40) & 0x40) == 0)
    goto LABEL_23;
LABEL_14:
  v9 = *((unsigned __int8 *)this + 37);
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ v3 ^ v5 ^ v7 ^ v8 ^ v9;
}

void CMMsl::PrecisionFindingSessionStartStop::~PrecisionFindingSessionStartStop(CMMsl::PrecisionFindingSessionStartStop *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::PrecisionFindingSessionStartStop::PrecisionFindingSessionStartStop(uint64_t this, const CMMsl::PrecisionFindingSessionStartStop *a2)
{
  char v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)this = &off_251360268;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_BYTE *)a2 + 16);
    *(_BYTE *)(this + 20) = v2;
    *(_BYTE *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::PrecisionFindingSessionStartStop::operator=(uint64_t a1, uint64_t a2, double a3)
{
  char v3;
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  _QWORD v10[2];
  char v11;
  int v12;

  if (a1 != a2)
  {
    v10[0] = &off_251360268;
    v12 = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      LOBYTE(v12) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        v3 = *(_BYTE *)(a2 + 16);
        LOBYTE(v12) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_6;
    }
    v7 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v12;
    v12 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    *(double *)(a1 + 8) = a3;
    v10[1] = v8;
    LOBYTE(v7) = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v3;
    v11 = v7;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PrecisionFindingSessionStartStop *a2, CMMsl::PrecisionFindingSessionStartStop *a3)
{
  int v3;
  double result;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  LOBYTE(v3) = *((_BYTE *)this + 16);
  *((_BYTE *)this + 16) = *((_BYTE *)a2 + 16);
  *((_BYTE *)a2 + 16) = v3;
  return result;
}

double CMMsl::PrecisionFindingSessionStartStop::PrecisionFindingSessionStartStop(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_251360268;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_251360268;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return result;
}

uint64_t CMMsl::PrecisionFindingSessionStartStop::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  _QWORD v9[2];
  char v10;
  int v11;

  if (a1 != a2)
  {
    v9[0] = &off_251360268;
    v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_BYTE *)(a2 + 16);
    v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    v11 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v9[1] = v7;
    LOBYTE(v3) = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v5;
    v10 = v3;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::PrecisionFindingSessionStartStop::formatText(CMMsl::PrecisionFindingSessionStartStop *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "isStart");
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PrecisionFindingSessionStartStop::readFrom(CMMsl::PrecisionFindingSessionStartStop *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v20;
  BOOL v21;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_26;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v21 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v21 = v20 != 0;
        }
        *((_BYTE *)this + 16) = v21;
      }
      else if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_26:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_26;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PrecisionFindingSessionStartStop::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(a2);
  return this;
}

uint64_t CMMsl::PrecisionFindingSessionStartStop::hash_value(CMMsl::PrecisionFindingSessionStartStop *this)
{
  double v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v2 = 0;
    return v2 ^ *(_QWORD *)&v1;
  }
  v1 = 0.0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((unsigned __int8 *)this + 16);
  return v2 ^ *(_QWORD *)&v1;
}

void CMMsl::PrecisionFindingState::~PrecisionFindingState(CMMsl::PrecisionFindingState *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::PrecisionFindingState::PrecisionFindingState(CMMsl::PrecisionFindingState *this, const CMMsl::PrecisionFindingState *a2)
{
  __int16 v2;
  __int16 v3;
  double result;
  char v5;
  int v6;
  char v7;

  *(_QWORD *)this = &off_2513602A0;
  *((_DWORD *)this + 23) = 0;
  v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x40) != 0)
  {
    result = *((double *)a2 + 7);
    v3 = 64;
    *((_WORD *)this + 46) = 64;
    *((double *)this + 7) = result;
    v2 = *((_WORD *)a2 + 46);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 1) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 1);
    v3 |= 1u;
    *((_WORD *)this + 46) = v3;
    *((double *)this + 1) = result;
    v2 = *((_WORD *)a2 + 46);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    result = *((double *)a2 + 2);
    v3 |= 2u;
    *((_WORD *)this + 46) = v3;
    *((double *)this + 2) = result;
    v2 = *((_WORD *)a2 + 46);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        goto LABEL_9;
      goto LABEL_20;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  result = *((double *)a2 + 3);
  v3 |= 4u;
  *((_WORD *)this + 46) = v3;
  *((double *)this + 3) = result;
  v2 = *((_WORD *)a2 + 46);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  result = *((double *)a2 + 4);
  v3 |= 8u;
  *((_WORD *)this + 46) = v3;
  *((double *)this + 4) = result;
  v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  result = *((double *)a2 + 5);
  v3 |= 0x10u;
  *((_WORD *)this + 46) = v3;
  *((double *)this + 5) = result;
  v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_23;
  }
LABEL_22:
  result = *((double *)a2 + 8);
  v3 |= 0x80u;
  *((_WORD *)this + 46) = v3;
  *((double *)this + 8) = result;
  v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_24;
  }
LABEL_23:
  result = *((double *)a2 + 9);
  v3 |= 0x100u;
  *((_WORD *)this + 46) = v3;
  *((double *)this + 9) = result;
  v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x800) == 0)
  {
LABEL_13:
    if ((v2 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_25;
  }
LABEL_24:
  v5 = *((_BYTE *)a2 + 88);
  v3 |= 0x800u;
  *((_WORD *)this + 46) = v3;
  *((_BYTE *)this + 88) = v5;
  v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x400) == 0)
  {
LABEL_14:
    if ((v2 & 0x200) == 0)
      goto LABEL_15;
    goto LABEL_26;
  }
LABEL_25:
  v6 = *((_DWORD *)a2 + 21);
  v3 |= 0x400u;
  *((_WORD *)this + 46) = v3;
  *((_DWORD *)this + 21) = v6;
  v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x200) == 0)
  {
LABEL_15:
    if ((v2 & 0x1000) == 0)
      goto LABEL_16;
    goto LABEL_27;
  }
LABEL_26:
  LODWORD(result) = *((_DWORD *)a2 + 20);
  v3 |= 0x200u;
  *((_WORD *)this + 46) = v3;
  *((_DWORD *)this + 20) = LODWORD(result);
  v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x1000) == 0)
  {
LABEL_16:
    if ((v2 & 0x20) == 0)
      return result;
LABEL_28:
    result = *((double *)a2 + 6);
    *((_WORD *)this + 46) = v3 | 0x20;
    *((double *)this + 6) = result;
    return result;
  }
LABEL_27:
  v7 = *((_BYTE *)a2 + 89);
  v3 |= 0x1000u;
  *((_WORD *)this + 46) = v3;
  *((_BYTE *)this + 89) = v7;
  if ((*((_WORD *)a2 + 46) & 0x20) != 0)
    goto LABEL_28;
  return result;
}

CMMsl *CMMsl::PrecisionFindingState::operator=(CMMsl *a1, const CMMsl::PrecisionFindingState *a2)
{
  CMMsl::PrecisionFindingState *v3;
  _BYTE v5[96];

  if (a1 != a2)
  {
    CMMsl::PrecisionFindingState::PrecisionFindingState((CMMsl::PrecisionFindingState *)v5, a2);
    CMMsl::swap(a1, (CMMsl::PrecisionFindingState *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PrecisionFindingState *a2, CMMsl::PrecisionFindingState *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  double result;

  v3 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v3;
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  v8 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v8;
  v9 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v9;
  v10 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v10;
  v11 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v11;
  LOBYTE(v3) = *((_BYTE *)this + 88);
  *((_BYTE *)this + 88) = *((_BYTE *)a2 + 88);
  *((_BYTE *)a2 + 88) = v3;
  v12 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v12;
  LODWORD(v11) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v11;
  LOBYTE(v12) = *((_BYTE *)this + 89);
  *((_BYTE *)this + 89) = *((_BYTE *)a2 + 89);
  *((_BYTE *)a2 + 89) = v12;
  result = *((double *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((double *)a2 + 6) = result;
  return result;
}

double CMMsl::PrecisionFindingState::PrecisionFindingState(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_2513602A0;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a2 + 92) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  result = *(double *)(a2 + 48);
  *(double *)(a1 + 48) = result;
  return result;
}

CMMsl *CMMsl::PrecisionFindingState::operator=(CMMsl *this, uint64_t a2, CMMsl::PrecisionFindingState *a3)
{
  void (**v5)(CMMsl::PrecisionFindingState *__hidden);
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  int v12;
  char v13;
  char v14;
  int v15;

  if (this != (CMMsl *)a2)
  {
    v5 = &off_2513602A0;
    v15 = *(_DWORD *)(a2 + 92);
    *(_DWORD *)(a2 + 92) = 0;
    v6 = *(_OWORD *)(a2 + 8);
    v7 = *(_OWORD *)(a2 + 24);
    v9 = *(_OWORD *)(a2 + 56);
    v10 = *(_QWORD *)(a2 + 72);
    v13 = *(_BYTE *)(a2 + 88);
    v12 = *(_DWORD *)(a2 + 84);
    v11 = *(_DWORD *)(a2 + 80);
    v14 = *(_BYTE *)(a2 + 89);
    v8 = *(_OWORD *)(a2 + 40);
    CMMsl::swap(this, (CMMsl::PrecisionFindingState *)&v5, a3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return this;
}

uint64_t CMMsl::PrecisionFindingState::formatText(CMMsl::PrecisionFindingState *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 46);
  if ((v5 & 0x200) != 0)
  {
    PB::TextFormatter::format(a2, "distanceFromParticleFilter", *((float *)this + 20));
    v5 = *((_WORD *)this + 46);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "horizontalAngle", *((double *)this + 1));
  v5 = *((_WORD *)this + 46);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "horizontalAngleUncertainty", *((double *)this + 2));
  v5 = *((_WORD *)this + 46);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 0x800) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "horizontalAngleUncertaintyUnfiltered", *((double *)this + 3));
  v5 = *((_WORD *)this + 46);
  if ((v5 & 0x800) == 0)
  {
LABEL_6:
    if ((v5 & 0x1000) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "isConverged");
  v5 = *((_WORD *)this + 46);
  if ((v5 & 0x1000) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "isDistanceValid");
  v5 = *((_WORD *)this + 46);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "positionX", *((double *)this + 4));
  v5 = *((_WORD *)this + 46);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "positionY", *((double *)this + 5));
  v5 = *((_WORD *)this + 46);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "positionZ", *((double *)this + 6));
  v5 = *((_WORD *)this + 46);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "revokeReason");
  v5 = *((_WORD *)this + 46);
  if ((v5 & 0x40) == 0)
  {
LABEL_12:
    if ((v5 & 0x80) == 0)
      goto LABEL_13;
LABEL_27:
    PB::TextFormatter::format(a2, "velocityX", *((double *)this + 8));
    if ((*((_WORD *)this + 46) & 0x100) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_14;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 7));
  v5 = *((_WORD *)this + 46);
  if ((v5 & 0x80) != 0)
    goto LABEL_27;
LABEL_13:
  if ((v5 & 0x100) != 0)
LABEL_14:
    PB::TextFormatter::format(a2, "velocityY", *((double *)this + 9));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PrecisionFindingState::readFrom(CMMsl::PrecisionFindingState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  char v27;
  int v28;
  BOOL v29;
  char v30;
  unsigned int v31;
  unint64_t v32;
  char v33;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_83;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 46) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_63;
        *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_76;
      case 2u:
        *((_WORD *)this + 46) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_63;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_76;
      case 3u:
        *((_WORD *)this + 46) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_63;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_76;
      case 4u:
        *((_WORD *)this + 46) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_63;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_76;
      case 5u:
        *((_WORD *)this + 46) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_63;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_76;
      case 6u:
        *((_WORD *)this + 46) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_63;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_76;
      case 7u:
        *((_WORD *)this + 46) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_63;
        *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_76;
      case 8u:
        *((_WORD *)this + 46) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_63;
        *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_76;
      case 9u:
        *((_WORD *)this + 46) |= 0x800u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v21 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v21 = v20 != 0;
        }
        *((_BYTE *)this + 88) = v21;
        break;
      case 0xAu:
        *((_WORD *)this + 46) |= 0x400u;
        v22 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v23 = *(_QWORD *)a2;
        if (v22 > 0xFFFFFFFFFFFFFFF5 || v22 + 10 > v2)
        {
          v30 = 0;
          v31 = 0;
          v26 = 0;
          if (v2 <= v22)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v22)
            {
              LODWORD(v26) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_82;
            }
            v32 = v22++;
            v33 = *(_BYTE *)(v23 + v32);
            *((_QWORD *)a2 + 1) = v22;
            v26 |= (unint64_t)(v33 & 0x7F) << v30;
            if ((v33 & 0x80) == 0)
              break;
            v30 += 7;
            v14 = v31++ > 8;
            if (v14)
            {
              LODWORD(v26) = 0;
LABEL_81:
              v2 = v32 + 1;
              goto LABEL_82;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v26) = 0;
          goto LABEL_81;
        }
        v24 = 0;
        v25 = 0;
        v26 = 0;
        do
        {
          v2 = v22 + 1;
          *((_QWORD *)a2 + 1) = v22 + 1;
          v27 = *(_BYTE *)(v23 + v22);
          v26 |= (unint64_t)(v27 & 0x7F) << v24;
          if ((v27 & 0x80) == 0)
            goto LABEL_82;
          v24 += 7;
          v22 = v2;
          v14 = v25++ > 8;
        }
        while (!v14);
        LODWORD(v26) = 0;
LABEL_82:
        *((_DWORD *)this + 21) = v26;
        break;
      case 0xBu:
        *((_WORD *)this + 46) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_63;
        *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        v2 = *((_QWORD *)a2 + 1) + 4;
        goto LABEL_77;
      case 0xCu:
        *((_WORD *)this + 46) |= 0x1000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v29 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v28 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v29 = v28 != 0;
        }
        *((_BYTE *)this + 89) = v29;
        break;
      case 0xDu:
        *((_WORD *)this + 46) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_76:
          v2 = *((_QWORD *)a2 + 1) + 8;
LABEL_77:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_63:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_83:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::PrecisionFindingState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 92);
  if ((v4 & 0x40) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 56));
    v4 = *(_WORD *)(v3 + 92);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v4 & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x800) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 72));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x800) == 0)
  {
LABEL_10:
    if ((v4 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x400) == 0)
  {
LABEL_11:
    if ((v4 & 0x200) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x200) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 80));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x1000) == 0)
  {
LABEL_13:
    if ((v4 & 0x20) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 48));
  }
LABEL_26:
  this = PB::Writer::write(a2);
  if ((*(_WORD *)(v3 + 92) & 0x20) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 48));
  return this;
}

uint64_t CMMsl::PrecisionFindingState::hash_value(CMMsl::PrecisionFindingState *this)
{
  __int16 v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  double v15;

  v1 = *((_WORD *)this + 46);
  if ((v1 & 0x40) == 0)
  {
    v2 = 0.0;
    if ((v1 & 1) != 0)
      goto LABEL_3;
LABEL_36:
    v3 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_6;
LABEL_37:
    v4 = 0.0;
    if ((v1 & 4) != 0)
      goto LABEL_9;
LABEL_38:
    v5 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_12;
LABEL_39:
    v6 = 0.0;
    if ((v1 & 0x10) != 0)
      goto LABEL_15;
LABEL_40:
    v7 = 0.0;
    if ((v1 & 0x80) != 0)
      goto LABEL_18;
LABEL_41:
    v8 = 0.0;
    if ((*((_WORD *)this + 46) & 0x100) != 0)
      goto LABEL_21;
LABEL_42:
    v9 = 0.0;
    if ((*((_WORD *)this + 46) & 0x800) != 0)
      goto LABEL_24;
    goto LABEL_43;
  }
  v2 = *((double *)this + 7);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_36;
LABEL_3:
  v3 = *((double *)this + 1);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_37;
LABEL_6:
  v4 = *((double *)this + 2);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 4) == 0)
    goto LABEL_38;
LABEL_9:
  v5 = *((double *)this + 3);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_39;
LABEL_12:
  v6 = *((double *)this + 4);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((v1 & 0x10) == 0)
    goto LABEL_40;
LABEL_15:
  v7 = *((double *)this + 5);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((v1 & 0x80) == 0)
    goto LABEL_41;
LABEL_18:
  v8 = *((double *)this + 8);
  if (v8 == 0.0)
    v8 = 0.0;
  if ((*((_WORD *)this + 46) & 0x100) == 0)
    goto LABEL_42;
LABEL_21:
  v9 = *((double *)this + 9);
  if (v9 == 0.0)
    v9 = 0.0;
  if ((*((_WORD *)this + 46) & 0x800) != 0)
  {
LABEL_24:
    v10 = *((unsigned __int8 *)this + 88);
    if ((*((_WORD *)this + 46) & 0x400) != 0)
      goto LABEL_25;
    goto LABEL_44;
  }
LABEL_43:
  v10 = 0;
  if ((*((_WORD *)this + 46) & 0x400) != 0)
  {
LABEL_25:
    v11 = *((unsigned int *)this + 21);
    if ((*((_WORD *)this + 46) & 0x200) != 0)
      goto LABEL_26;
LABEL_45:
    v13 = 0;
    if ((*((_WORD *)this + 46) & 0x1000) != 0)
      goto LABEL_29;
    goto LABEL_46;
  }
LABEL_44:
  v11 = 0;
  if ((*((_WORD *)this + 46) & 0x200) == 0)
    goto LABEL_45;
LABEL_26:
  v12 = *((float *)this + 20);
  v13 = LODWORD(v12);
  if (v12 == 0.0)
    v13 = 0;
  if ((*((_WORD *)this + 46) & 0x1000) != 0)
  {
LABEL_29:
    v14 = *((unsigned __int8 *)this + 89);
    if ((v1 & 0x20) != 0)
      goto LABEL_30;
LABEL_47:
    v15 = 0.0;
    return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ v10 ^ v11 ^ v13 ^ v14 ^ *(_QWORD *)&v15;
  }
LABEL_46:
  v14 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_47;
LABEL_30:
  v15 = *((double *)this + 6);
  if (v15 == 0.0)
    v15 = 0.0;
  return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ v10 ^ v11 ^ v13 ^ v14 ^ *(_QWORD *)&v15;
}

void CMMsl::PrecisionFindingVelocityEstimate::~PrecisionFindingVelocityEstimate(CMMsl::PrecisionFindingVelocityEstimate *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::PrecisionFindingVelocityEstimate::PrecisionFindingVelocityEstimate(CMMsl::PrecisionFindingVelocityEstimate *this, const CMMsl::PrecisionFindingVelocityEstimate *a2)
{
  char v2;
  char v3;
  uint64_t v4;

  *(_QWORD *)this = &off_2513602D8;
  *((_DWORD *)this + 11) = 0;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 44) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_BYTE *)a2 + 44);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 44) & 0x10) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 7);
    v3 |= 0x10u;
    *((_BYTE *)this + 44) = v3;
    *((_DWORD *)this + 7) = v4;
    v2 = *((_BYTE *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 8);
    v3 |= 0x20u;
    *((_BYTE *)this + 44) = v3;
    *((_DWORD *)this + 8) = v4;
    v2 = *((_BYTE *)a2 + 44);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_15;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *((_BYTE *)this + 44) = v3;
  *((_DWORD *)this + 4) = v4;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_16;
  }
LABEL_15:
  LODWORD(v4) = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *((_BYTE *)this + 44) = v3;
  *((_DWORD *)this + 9) = v4;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 0x80) == 0)
  {
LABEL_10:
    if ((v2 & 4) == 0)
      goto LABEL_11;
    goto LABEL_17;
  }
LABEL_16:
  LODWORD(v4) = *((_DWORD *)a2 + 10);
  v3 |= 0x80u;
  *((_BYTE *)this + 44) = v3;
  *((_DWORD *)this + 10) = v4;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 4) == 0)
  {
LABEL_11:
    if ((v2 & 8) == 0)
      return *(float *)&v4;
    goto LABEL_18;
  }
LABEL_17:
  LODWORD(v4) = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *((_BYTE *)this + 44) = v3;
  *((_DWORD *)this + 5) = v4;
  if ((*((_BYTE *)a2 + 44) & 8) == 0)
    return *(float *)&v4;
LABEL_18:
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  *((_BYTE *)this + 44) = v3 | 8;
  *((_DWORD *)this + 6) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::PrecisionFindingVelocityEstimate::operator=(uint64_t a1, const CMMsl::PrecisionFindingVelocityEstimate *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  int v13;

  if ((const CMMsl::PrecisionFindingVelocityEstimate *)a1 != a2)
  {
    CMMsl::PrecisionFindingVelocityEstimate::PrecisionFindingVelocityEstimate((CMMsl::PrecisionFindingVelocityEstimate *)&v8, a2);
    v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v13;
    v13 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    v9 = v4;
    v5 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v11;
    v11 = v5;
    LODWORD(v4) = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v12;
    v12 = v4;
    v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v10;
    v10 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::PrecisionFindingVelocityEstimate *a2, CMMsl::PrecisionFindingVelocityEstimate *a3)
{
  int v3;
  uint64_t v4;
  float result;

  v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  return result;
}

float CMMsl::PrecisionFindingVelocityEstimate::PrecisionFindingVelocityEstimate(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_2513602D8;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_2513602D8;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

uint64_t CMMsl::PrecisionFindingVelocityEstimate::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[2];
  __int128 v12;
  uint64_t v13;
  int v14;
  int v15;

  if (a1 != a2)
  {
    v11[0] = &off_2513602D8;
    v3 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a2 + 44) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_DWORD *)(a2 + 40);
    v15 = *(_DWORD *)(a1 + 44);
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v11[1] = v6;
    v13 = *(_QWORD *)(a1 + 32);
    v14 = *(_DWORD *)(a1 + 40);
    v7 = *(_OWORD *)(a1 + 16);
    v8 = *(_OWORD *)(a2 + 16);
    v9 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 44) = v3;
    *(_QWORD *)(a1 + 32) = v9;
    *(_DWORD *)(a1 + 40) = v5;
    *(_OWORD *)(a1 + 16) = v8;
    v12 = v7;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

uint64_t CMMsl::PrecisionFindingVelocityEstimate::formatText(CMMsl::PrecisionFindingVelocityEstimate *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "dot", *((float *)this + 4));
    v5 = *((_BYTE *)this + 44);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*((_BYTE *)this + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "noiseVelocityX", *((float *)this + 5));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "noiseVelocityY", *((float *)this + 6));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "speed", *((float *)this + 7));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 1) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "speedUncertainty", *((float *)this + 8));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 1) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
LABEL_16:
    PB::TextFormatter::format(a2, "velocityX", *((float *)this + 9));
    if ((*((_BYTE *)this + 44) & 0x80) == 0)
      return PB::TextFormatter::endObject(a2);
LABEL_17:
    PB::TextFormatter::format(a2, "velocityY", *((float *)this + 10));
    return PB::TextFormatter::endObject(a2);
  }
LABEL_15:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 0x40) != 0)
    goto LABEL_16;
LABEL_8:
  if (v5 < 0)
    goto LABEL_17;
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PrecisionFindingVelocityEstimate::readFrom(CMMsl::PrecisionFindingVelocityEstimate *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_50;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 44) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_46;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        v2 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_49;
      case 2u:
        *((_BYTE *)this + 44) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_46;
        *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_48;
      case 3u:
        *((_BYTE *)this + 44) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_46;
        *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_48;
      case 4u:
        *((_BYTE *)this + 44) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_46;
        *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_48;
      case 5u:
        *((_BYTE *)this + 44) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_46;
        *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_48;
      case 6u:
        *((_BYTE *)this + 44) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_46;
        *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_48;
      case 7u:
        *((_BYTE *)this + 44) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_46;
        *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_48;
      case 8u:
        *((_BYTE *)this + 44) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
        {
LABEL_46:
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_48:
          v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_49:
          *((_QWORD *)a2 + 1) = v2;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_50:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::PrecisionFindingVelocityEstimate::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 44);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(this + 44) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 4) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 24));
  }
LABEL_16:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  if ((*(_BYTE *)(v3 + 44) & 8) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 24));
  return this;
}

uint64_t CMMsl::PrecisionFindingVelocityEstimate::hash_value(CMMsl::PrecisionFindingVelocityEstimate *this)
{
  double v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t v15;

  if ((*((_BYTE *)this + 44) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 44) & 0x10) != 0)
      goto LABEL_3;
LABEL_27:
    v3 = 0;
    if ((*((_BYTE *)this + 44) & 0x20) != 0)
      goto LABEL_6;
LABEL_28:
    v5 = 0;
    if ((*((_BYTE *)this + 44) & 2) != 0)
      goto LABEL_9;
LABEL_29:
    v7 = 0;
    if ((*((_BYTE *)this + 44) & 0x40) != 0)
      goto LABEL_12;
LABEL_30:
    v9 = 0;
    if ((*((_BYTE *)this + 44) & 0x80) != 0)
      goto LABEL_15;
LABEL_31:
    v11 = 0;
    if ((*((_BYTE *)this + 44) & 4) != 0)
      goto LABEL_18;
    goto LABEL_32;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 44) & 0x10) == 0)
    goto LABEL_27;
LABEL_3:
  v2 = *((float *)this + 7);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 44) & 0x20) == 0)
    goto LABEL_28;
LABEL_6:
  v4 = *((float *)this + 8);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((*((_BYTE *)this + 44) & 2) == 0)
    goto LABEL_29;
LABEL_9:
  v6 = *((float *)this + 4);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  if ((*((_BYTE *)this + 44) & 0x40) == 0)
    goto LABEL_30;
LABEL_12:
  v8 = *((float *)this + 9);
  v9 = LODWORD(v8);
  if (v8 == 0.0)
    v9 = 0;
  if ((*((_BYTE *)this + 44) & 0x80) == 0)
    goto LABEL_31;
LABEL_15:
  v10 = *((float *)this + 10);
  v11 = LODWORD(v10);
  if (v10 == 0.0)
    v11 = 0;
  if ((*((_BYTE *)this + 44) & 4) != 0)
  {
LABEL_18:
    v12 = *((float *)this + 5);
    v13 = LODWORD(v12);
    if (v12 == 0.0)
      v13 = 0;
    if ((*((_BYTE *)this + 44) & 8) != 0)
      goto LABEL_21;
LABEL_33:
    v15 = 0;
    return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13 ^ v15;
  }
LABEL_32:
  v13 = 0;
  if ((*((_BYTE *)this + 44) & 8) == 0)
    goto LABEL_33;
LABEL_21:
  v14 = *((float *)this + 6);
  v15 = LODWORD(v14);
  if (v14 == 0.0)
    v15 = 0;
  return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13 ^ v15;
}

void CMMsl::PrecisionFindingVerticalState::~PrecisionFindingVerticalState(CMMsl::PrecisionFindingVerticalState *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::PrecisionFindingVerticalState::PrecisionFindingVerticalState(uint64_t this, const CMMsl::PrecisionFindingVerticalState *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;

  *(_QWORD *)this = &off_251360310;
  *(_DWORD *)(this + 60) = 0;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x10) != 0)
  {
    v4 = *((_QWORD *)a2 + 5);
    v3 = 16;
    *(_WORD *)(this + 60) = 16;
    *(_QWORD *)(this + 40) = v4;
    v2 = *((_WORD *)a2 + 30);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 2);
    v3 |= 2u;
    *(_WORD *)(this + 60) = v3;
    *(_QWORD *)(this + 16) = v5;
    v2 = *((_WORD *)a2 + 30);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    v6 = *((_QWORD *)a2 + 6);
    v3 |= 0x20u;
    *(_WORD *)(this + 60) = v3;
    *(_QWORD *)(this + 48) = v6;
    v2 = *((_WORD *)a2 + 30);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0)
        goto LABEL_9;
      goto LABEL_16;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *(_WORD *)(this + 60) = v3;
  *(_QWORD *)(this + 32) = v7;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0)
      goto LABEL_10;
    goto LABEL_17;
  }
LABEL_16:
  v8 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 60) = v3;
  *(_QWORD *)(this + 8) = v8;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_18;
  }
LABEL_17:
  v9 = *((_QWORD *)a2 + 3);
  v3 |= 4u;
  *(_WORD *)(this + 60) = v3;
  *(_QWORD *)(this + 24) = v9;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_19;
  }
LABEL_18:
  v10 = *((_BYTE *)a2 + 58);
  v3 |= 0x100u;
  *(_WORD *)(this + 60) = v3;
  *(_BYTE *)(this + 58) = v10;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x40) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0)
      return this;
LABEL_20:
    v12 = *((_BYTE *)a2 + 57);
    *(_WORD *)(this + 60) = v3 | 0x80;
    *(_BYTE *)(this + 57) = v12;
    return this;
  }
LABEL_19:
  v11 = *((_BYTE *)a2 + 56);
  v3 |= 0x40u;
  *(_WORD *)(this + 60) = v3;
  *(_BYTE *)(this + 56) = v11;
  if ((*((_WORD *)a2 + 30) & 0x80) != 0)
    goto LABEL_20;
  return this;
}

uint64_t CMMsl::PrecisionFindingVerticalState::operator=(uint64_t a1, const CMMsl::PrecisionFindingVerticalState *a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char v12;
  char v13;
  char v14;
  int v15;

  if ((const CMMsl::PrecisionFindingVerticalState *)a1 != a2)
  {
    CMMsl::PrecisionFindingVerticalState::PrecisionFindingVerticalState((uint64_t)&v8, a2);
    v3 = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a1 + 60) = v15;
    v15 = v3;
    v4 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v11;
    v11 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v9 = v5;
    v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    v10 = v6;
    LOBYTE(v3) = *(_BYTE *)(a1 + 58);
    *(_BYTE *)(a1 + 58) = v14;
    v14 = v3;
    LOBYTE(v3) = *(_BYTE *)(a1 + 56);
    *(_BYTE *)(a1 + 56) = v12;
    v12 = v3;
    LOBYTE(v3) = *(_BYTE *)(a1 + 57);
    *(_BYTE *)(a1 + 57) = v13;
    v13 = v3;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PrecisionFindingVerticalState *a2, CMMsl::PrecisionFindingVerticalState *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;

  v3 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v3;
  v4 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v6;
  v7 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v7;
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v8;
  result = *((double *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((double *)a2 + 3) = result;
  LOBYTE(v3) = *((_BYTE *)this + 58);
  *((_BYTE *)this + 58) = *((_BYTE *)a2 + 58);
  *((_BYTE *)a2 + 58) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 56);
  *((_BYTE *)this + 56) = *((_BYTE *)a2 + 56);
  *((_BYTE *)a2 + 56) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 57);
  *((_BYTE *)this + 57) = *((_BYTE *)a2 + 57);
  *((_BYTE *)a2 + 57) = v3;
  return result;
}

double CMMsl::PrecisionFindingVerticalState::PrecisionFindingVerticalState(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_251360310;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 58);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_251360310;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 58);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  return result;
}

uint64_t CMMsl::PrecisionFindingVerticalState::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  char v5;
  char v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  void (**v12)(CMMsl::PrecisionFindingVerticalState *__hidden);
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char v16;
  char v17;
  char v18;
  int v19;

  if (a1 != a2)
  {
    v12 = &off_251360310;
    v3 = *(_DWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 60) = 0;
    v4 = *(_BYTE *)(a2 + 58);
    v5 = *(_BYTE *)(a2 + 56);
    v6 = *(_BYTE *)(a2 + 57);
    v19 = *(_DWORD *)(a1 + 60);
    v15 = *(_OWORD *)(a1 + 40);
    v7 = *(_OWORD *)(a2 + 8);
    v13 = *(_OWORD *)(a1 + 8);
    v8 = *(_OWORD *)(a1 + 24);
    v9 = *(_OWORD *)(a2 + 24);
    v10 = *(_OWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 60) = v3;
    *(_OWORD *)(a1 + 40) = v10;
    *(_OWORD *)(a1 + 8) = v7;
    *(_OWORD *)(a1 + 24) = v9;
    v14 = v8;
    LOBYTE(v3) = *(_BYTE *)(a1 + 58);
    *(_BYTE *)(a1 + 58) = v4;
    v18 = v3;
    LOBYTE(v3) = *(_BYTE *)(a1 + 56);
    *(_BYTE *)(a1 + 56) = v5;
    v16 = v3;
    LOBYTE(v3) = *(_BYTE *)(a1 + 57);
    *(_BYTE *)(a1 + 57) = v6;
    v17 = v3;
    PB::Base::~Base((PB::Base *)&v12);
  }
  return a1;
}

uint64_t CMMsl::PrecisionFindingVerticalState::formatText(CMMsl::PrecisionFindingVerticalState *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 30);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "fractionAboveThreshold", *((double *)this + 1));
    v5 = *((_WORD *)this + 30);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "horizontalDistance", *((double *)this + 2));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "isAboveBelow");
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x80) == 0)
  {
LABEL_5:
    if ((v5 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "isAboveBelowMessageShowing");
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x100) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "isConverged");
  v5 = *((_WORD *)this + 30);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "likelihoodAboveThreshold", *((double *)this + 3));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
LABEL_19:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 5));
    if ((*((_WORD *)this + 30) & 0x20) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_10;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "relativeAltitude", *((double *)this + 4));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x10) != 0)
    goto LABEL_19;
LABEL_9:
  if ((v5 & 0x20) != 0)
LABEL_10:
    PB::TextFormatter::format(a2, "verticalDistance", *((double *)this + 6));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PrecisionFindingVerticalState::readFrom(CMMsl::PrecisionFindingVerticalState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v20;
  BOOL v21;
  int v22;
  BOOL v23;
  int v24;
  BOOL v25;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_55;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 30) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_42;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_54;
      case 2u:
        *((_WORD *)this + 30) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_42;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_54;
      case 3u:
        *((_WORD *)this + 30) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_42;
        *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_54;
      case 4u:
        *((_WORD *)this + 30) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_42;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_54;
      case 5u:
        *((_WORD *)this + 30) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_42;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_54;
      case 6u:
        *((_WORD *)this + 30) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_54:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_42:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 7u:
        *((_WORD *)this + 30) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v23 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v22 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v23 = v22 != 0;
        }
        *((_BYTE *)this + 58) = v23;
        break;
      case 8u:
        *((_WORD *)this + 30) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v21 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v21 = v20 != 0;
        }
        *((_BYTE *)this + 56) = v21;
        break;
      case 9u:
        *((_WORD *)this + 30) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v25 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v24 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v25 = v24 != 0;
        }
        *((_BYTE *)this + 57) = v25;
        break;
      default:
        goto LABEL_19;
    }
LABEL_55:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::PrecisionFindingVerticalState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 60);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 40));
    v4 = *(_WORD *)(v3 + 60);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0)
      return this;
    return PB::Writer::write(a2);
  }
LABEL_18:
  this = PB::Writer::write(a2);
  if ((*(_WORD *)(v3 + 60) & 0x80) != 0)
    return PB::Writer::write(a2);
  return this;
}

uint64_t CMMsl::PrecisionFindingVerticalState::hash_value(CMMsl::PrecisionFindingVerticalState *this)
{
  __int16 v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *((_WORD *)this + 30);
  if ((v1 & 0x10) == 0)
  {
    v2 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_3;
LABEL_24:
    v3 = 0.0;
    if ((v1 & 0x20) != 0)
      goto LABEL_6;
LABEL_25:
    v4 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_9;
LABEL_26:
    v5 = 0.0;
    if ((v1 & 1) != 0)
      goto LABEL_12;
LABEL_27:
    v6 = 0.0;
    if ((v1 & 4) != 0)
      goto LABEL_15;
LABEL_28:
    v7 = 0.0;
    if ((*((_WORD *)this + 30) & 0x100) != 0)
      goto LABEL_18;
    goto LABEL_29;
  }
  v2 = *((double *)this + 5);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_24;
LABEL_3:
  v3 = *((double *)this + 2);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 0x20) == 0)
    goto LABEL_25;
LABEL_6:
  v4 = *((double *)this + 6);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_26;
LABEL_9:
  v5 = *((double *)this + 4);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_27;
LABEL_12:
  v6 = *((double *)this + 1);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((v1 & 4) == 0)
    goto LABEL_28;
LABEL_15:
  v7 = *((double *)this + 3);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((*((_WORD *)this + 30) & 0x100) != 0)
  {
LABEL_18:
    v8 = *((unsigned __int8 *)this + 58);
    if ((v1 & 0x40) != 0)
      goto LABEL_19;
LABEL_30:
    v9 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_20;
LABEL_31:
    v10 = 0;
    return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ v8 ^ v9 ^ v10;
  }
LABEL_29:
  v8 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_30;
LABEL_19:
  v9 = *((unsigned __int8 *)this + 56);
  if ((v1 & 0x80) == 0)
    goto LABEL_31;
LABEL_20:
  v10 = *((unsigned __int8 *)this + 57);
  return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ v8 ^ v9 ^ v10;
}

void CMMsl::PredictedRelativeDeviceMotion::~PredictedRelativeDeviceMotion(CMMsl::PredictedRelativeDeviceMotion *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::PredictedRelativeDeviceMotion::PredictedRelativeDeviceMotion(CMMsl::PredictedRelativeDeviceMotion *this, const CMMsl::PredictedRelativeDeviceMotion *a2)
{
  __int16 v2;
  __int16 v3;
  double result;
  char v5;

  *(_QWORD *)this = &off_251360348;
  *((_DWORD *)this + 20) = 0;
  v2 = *((_WORD *)a2 + 40);
  if ((v2 & 1) != 0)
  {
    result = *((double *)a2 + 1);
    v3 = 1;
    *((_WORD *)this + 40) = 1;
    *((double *)this + 1) = result;
    v2 = *((_WORD *)a2 + 40);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 4) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 3);
    v3 |= 4u;
    *((_WORD *)this + 40) = v3;
    *((double *)this + 3) = result;
    v2 = *((_WORD *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    LODWORD(result) = *((_DWORD *)a2 + 9);
    v3 |= 0x10u;
    *((_WORD *)this + 40) = v3;
    *((_DWORD *)this + 9) = LODWORD(result);
    v2 = *((_WORD *)a2 + 40);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_22;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(result) = *((_DWORD *)a2 + 10);
  v3 |= 0x20u;
  *((_WORD *)this + 40) = v3;
  *((_DWORD *)this + 10) = LODWORD(result);
  v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  LODWORD(result) = *((_DWORD *)a2 + 11);
  v3 |= 0x40u;
  *((_WORD *)this + 40) = v3;
  *((_DWORD *)this + 11) = LODWORD(result);
  v2 = *((_WORD *)a2 + 40);
  if ((v2 & 8) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  LODWORD(result) = *((_DWORD *)a2 + 8);
  v3 |= 8u;
  *((_WORD *)this + 40) = v3;
  *((_DWORD *)this + 8) = LODWORD(result);
  v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 0x200) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  LODWORD(result) = *((_DWORD *)a2 + 13);
  v3 |= 0x100u;
  *((_WORD *)this + 40) = v3;
  *((_DWORD *)this + 13) = LODWORD(result);
  v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x200) == 0)
  {
LABEL_12:
    if ((v2 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  LODWORD(result) = *((_DWORD *)a2 + 14);
  v3 |= 0x200u;
  *((_WORD *)this + 40) = v3;
  *((_DWORD *)this + 14) = LODWORD(result);
  v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x400) == 0)
  {
LABEL_13:
    if ((v2 & 0x80) == 0)
      goto LABEL_14;
    goto LABEL_27;
  }
LABEL_26:
  LODWORD(result) = *((_DWORD *)a2 + 15);
  v3 |= 0x400u;
  *((_WORD *)this + 40) = v3;
  *((_DWORD *)this + 15) = LODWORD(result);
  v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x80) == 0)
  {
LABEL_14:
    if ((v2 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_28;
  }
LABEL_27:
  LODWORD(result) = *((_DWORD *)a2 + 12);
  v3 |= 0x80u;
  *((_WORD *)this + 40) = v3;
  *((_DWORD *)this + 12) = LODWORD(result);
  v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x800) == 0)
  {
LABEL_15:
    if ((v2 & 0x1000) == 0)
      goto LABEL_16;
    goto LABEL_29;
  }
LABEL_28:
  LODWORD(result) = *((_DWORD *)a2 + 16);
  v3 |= 0x800u;
  *((_WORD *)this + 40) = v3;
  *((_DWORD *)this + 16) = LODWORD(result);
  v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x1000) == 0)
  {
LABEL_16:
    if ((v2 & 0x2000) == 0)
      goto LABEL_17;
    goto LABEL_30;
  }
LABEL_29:
  LODWORD(result) = *((_DWORD *)a2 + 17);
  v3 |= 0x1000u;
  *((_WORD *)this + 40) = v3;
  *((_DWORD *)this + 17) = LODWORD(result);
  v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x2000) == 0)
  {
LABEL_17:
    if ((v2 & 0x4000) == 0)
      goto LABEL_18;
    goto LABEL_31;
  }
LABEL_30:
  LODWORD(result) = *((_DWORD *)a2 + 18);
  v3 |= 0x2000u;
  *((_WORD *)this + 40) = v3;
  *((_DWORD *)this + 18) = LODWORD(result);
  v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x4000) == 0)
  {
LABEL_18:
    if ((v2 & 2) == 0)
      return result;
LABEL_32:
    result = *((double *)a2 + 2);
    *((_WORD *)this + 40) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
LABEL_31:
  v5 = *((_BYTE *)a2 + 76);
  v3 |= 0x4000u;
  *((_WORD *)this + 40) = v3;
  *((_BYTE *)this + 76) = v5;
  if ((*((_WORD *)a2 + 40) & 2) != 0)
    goto LABEL_32;
  return result;
}

CMMsl *CMMsl::PredictedRelativeDeviceMotion::operator=(CMMsl *a1, const CMMsl::PredictedRelativeDeviceMotion *a2)
{
  CMMsl::PredictedRelativeDeviceMotion *v3;
  _BYTE v5[88];

  if (a1 != a2)
  {
    CMMsl::PredictedRelativeDeviceMotion::PredictedRelativeDeviceMotion((CMMsl::PredictedRelativeDeviceMotion *)v5, a2);
    CMMsl::swap(a1, (CMMsl::PredictedRelativeDeviceMotion *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PredictedRelativeDeviceMotion *a2, CMMsl::PredictedRelativeDeviceMotion *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v3 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  LODWORD(v5) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v5;
  LODWORD(v5) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v5;
  LODWORD(v5) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v5;
  LODWORD(v5) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v5;
  LODWORD(v5) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v5;
  LODWORD(v5) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v5;
  LODWORD(v5) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v5;
  LODWORD(v5) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v5;
  LODWORD(v5) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v5;
  LODWORD(v5) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v5;
  LODWORD(v5) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v5;
  LOBYTE(v3) = *((_BYTE *)this + 76);
  *((_BYTE *)this + 76) = *((_BYTE *)a2 + 76);
  *((_BYTE *)a2 + 76) = v3;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::PredictedRelativeDeviceMotion::PredictedRelativeDeviceMotion(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_251360348;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

CMMsl *CMMsl::PredictedRelativeDeviceMotion::operator=(CMMsl *this, uint64_t a2, CMMsl::PredictedRelativeDeviceMotion *a3)
{
  __int128 v4;
  void (**v6)(CMMsl::PredictedRelativeDeviceMotion *__hidden);
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  char v13;
  int v14;

  if (this != (CMMsl *)a2)
  {
    v6 = &off_251360348;
    v14 = *(_DWORD *)(a2 + 80);
    *(_DWORD *)(a2 + 80) = 0;
    v8 = *(_QWORD *)(a2 + 24);
    v4 = *(_OWORD *)(a2 + 48);
    v9 = *(_OWORD *)(a2 + 32);
    v10 = v4;
    v11 = *(_QWORD *)(a2 + 64);
    v12 = *(_DWORD *)(a2 + 72);
    v13 = *(_BYTE *)(a2 + 76);
    v7 = *(_OWORD *)(a2 + 8);
    CMMsl::swap(this, (CMMsl::PredictedRelativeDeviceMotion *)&v6, a3);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return this;
}

uint64_t CMMsl::PredictedRelativeDeviceMotion::formatText(CMMsl::PredictedRelativeDeviceMotion *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 40);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "lastStateTimestamp", *((double *)this + 1));
    v5 = *((_WORD *)this + 40);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_20;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "qStartW", *((float *)this + 8));
  v5 = *((_WORD *)this + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "qStartX", *((float *)this + 9));
  v5 = *((_WORD *)this + 40);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "qStartY", *((float *)this + 10));
  v5 = *((_WORD *)this + 40);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "qStartZ", *((float *)this + 11));
  v5 = *((_WORD *)this + 40);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "qStopW", *((float *)this + 12));
  v5 = *((_WORD *)this + 40);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "qStopX", *((float *)this + 13));
  v5 = *((_WORD *)this + 40);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "qStopY", *((float *)this + 14));
  v5 = *((_WORD *)this + 40);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "qStopZ", *((float *)this + 15));
  v5 = *((_WORD *)this + 40);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "rBoresightX", *((float *)this + 16));
  v5 = *((_WORD *)this + 40);
  if ((v5 & 0x1000) == 0)
  {
LABEL_12:
    if ((v5 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "rBoresightY", *((float *)this + 17));
  v5 = *((_WORD *)this + 40);
  if ((v5 & 0x2000) == 0)
  {
LABEL_13:
    if ((v5 & 2) == 0)
      goto LABEL_14;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "rBoresightZ", *((float *)this + 18));
  v5 = *((_WORD *)this + 40);
  if ((v5 & 2) == 0)
  {
LABEL_14:
    if ((v5 & 4) == 0)
      goto LABEL_15;
LABEL_31:
    PB::TextFormatter::format(a2, "targetTimestamp", *((double *)this + 3));
    if ((*((_WORD *)this + 40) & 0x4000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_16;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "srcTimestamp", *((double *)this + 2));
  v5 = *((_WORD *)this + 40);
  if ((v5 & 4) != 0)
    goto LABEL_31;
LABEL_15:
  if ((v5 & 0x4000) != 0)
LABEL_16:
    PB::TextFormatter::format(a2, "useForwardPrediction");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PredictedRelativeDeviceMotion::readFrom(CMMsl::PredictedRelativeDeviceMotion *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v20;
  BOOL v21;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_73;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 40) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_67;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_71;
      case 2u:
        *((_WORD *)this + 40) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_67;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_71;
      case 3u:
        *((_WORD *)this + 40) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_67;
        *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_62;
      case 4u:
        *((_WORD *)this + 40) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_67;
        *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_62;
      case 5u:
        *((_WORD *)this + 40) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_67;
        *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_62;
      case 6u:
        *((_WORD *)this + 40) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_67;
        *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_62;
      case 7u:
        *((_WORD *)this + 40) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_67;
        *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_62;
      case 8u:
        *((_WORD *)this + 40) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_67;
        *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_62;
      case 9u:
        *((_WORD *)this + 40) |= 0x400u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_67;
        *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_62;
      case 0xAu:
        *((_WORD *)this + 40) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_67;
        *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_62;
      case 0xBu:
        *((_WORD *)this + 40) |= 0x800u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_67;
        *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_62;
      case 0xCu:
        *((_WORD *)this + 40) |= 0x1000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_67;
        *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_62;
      case 0xDu:
        *((_WORD *)this + 40) |= 0x2000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_67;
        *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_62:
        v2 = *((_QWORD *)a2 + 1) + 4;
        goto LABEL_72;
      case 0xEu:
        *((_WORD *)this + 40) |= 0x4000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v21 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v21 = v20 != 0;
        }
        *((_BYTE *)this + 76) = v21;
        break;
      case 0xFu:
        *((_WORD *)this + 40) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_71:
          v2 = *((_QWORD *)a2 + 1) + 8;
LABEL_72:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_67:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_73:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::PredictedRelativeDeviceMotion::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 80);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_WORD *)(v3 + 80);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0)
      goto LABEL_7;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x200) == 0)
  {
LABEL_9:
    if ((v4 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x400) == 0)
  {
LABEL_10:
    if ((v4 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 60));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x80) == 0)
  {
LABEL_11:
    if ((v4 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x800) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(float *)(v3 + 64));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x1000) == 0)
  {
LABEL_13:
    if ((v4 & 0x2000) == 0)
      goto LABEL_14;
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(float *)(v3 + 68));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x2000) == 0)
  {
LABEL_14:
    if ((v4 & 0x4000) == 0)
      goto LABEL_15;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(float *)(v3 + 72));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x4000) == 0)
  {
LABEL_15:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 16));
  }
LABEL_30:
  this = PB::Writer::write(a2);
  if ((*(_WORD *)(v3 + 80) & 2) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 16));
  return this;
}

uint64_t CMMsl::PredictedRelativeDeviceMotion::hash_value(CMMsl::PredictedRelativeDeviceMotion *this)
{
  __int16 v1;
  double v2;
  double v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  double v27;

  v1 = *((_WORD *)this + 40);
  if ((v1 & 1) == 0)
  {
    v2 = 0.0;
    if ((v1 & 4) != 0)
      goto LABEL_3;
LABEL_46:
    v3 = 0.0;
    if ((v1 & 0x10) != 0)
      goto LABEL_6;
LABEL_47:
    v5 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_9;
LABEL_48:
    v7 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_12;
LABEL_49:
    v9 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_15;
LABEL_50:
    v11 = 0;
    if ((*((_WORD *)this + 40) & 0x100) != 0)
      goto LABEL_18;
LABEL_51:
    v13 = 0;
    if ((*((_WORD *)this + 40) & 0x200) != 0)
      goto LABEL_21;
LABEL_52:
    v15 = 0;
    if ((*((_WORD *)this + 40) & 0x400) != 0)
      goto LABEL_24;
LABEL_53:
    v17 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_27;
LABEL_54:
    v19 = 0;
    if ((*((_WORD *)this + 40) & 0x800) != 0)
      goto LABEL_30;
LABEL_55:
    v21 = 0;
    if ((*((_WORD *)this + 40) & 0x1000) != 0)
      goto LABEL_33;
LABEL_56:
    v23 = 0;
    if ((*((_WORD *)this + 40) & 0x2000) != 0)
      goto LABEL_36;
LABEL_57:
    v25 = 0;
    if ((*((_WORD *)this + 40) & 0x4000) != 0)
      goto LABEL_39;
    goto LABEL_58;
  }
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 4) == 0)
    goto LABEL_46;
LABEL_3:
  v3 = *((double *)this + 3);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 0x10) == 0)
    goto LABEL_47;
LABEL_6:
  v4 = *((float *)this + 9);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_48;
LABEL_9:
  v6 = *((float *)this + 10);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_49;
LABEL_12:
  v8 = *((float *)this + 11);
  v9 = LODWORD(v8);
  if (v8 == 0.0)
    v9 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_50;
LABEL_15:
  v10 = *((float *)this + 8);
  v11 = LODWORD(v10);
  if (v10 == 0.0)
    v11 = 0;
  if ((*((_WORD *)this + 40) & 0x100) == 0)
    goto LABEL_51;
LABEL_18:
  v12 = *((float *)this + 13);
  v13 = LODWORD(v12);
  if (v12 == 0.0)
    v13 = 0;
  if ((*((_WORD *)this + 40) & 0x200) == 0)
    goto LABEL_52;
LABEL_21:
  v14 = *((float *)this + 14);
  v15 = LODWORD(v14);
  if (v14 == 0.0)
    v15 = 0;
  if ((*((_WORD *)this + 40) & 0x400) == 0)
    goto LABEL_53;
LABEL_24:
  v16 = *((float *)this + 15);
  v17 = LODWORD(v16);
  if (v16 == 0.0)
    v17 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_54;
LABEL_27:
  v18 = *((float *)this + 12);
  v19 = LODWORD(v18);
  if (v18 == 0.0)
    v19 = 0;
  if ((*((_WORD *)this + 40) & 0x800) == 0)
    goto LABEL_55;
LABEL_30:
  v20 = *((float *)this + 16);
  v21 = LODWORD(v20);
  if (v20 == 0.0)
    v21 = 0;
  if ((*((_WORD *)this + 40) & 0x1000) == 0)
    goto LABEL_56;
LABEL_33:
  v22 = *((float *)this + 17);
  v23 = LODWORD(v22);
  if (v22 == 0.0)
    v23 = 0;
  if ((*((_WORD *)this + 40) & 0x2000) == 0)
    goto LABEL_57;
LABEL_36:
  v24 = *((float *)this + 18);
  v25 = LODWORD(v24);
  if (v24 == 0.0)
    v25 = 0;
  if ((*((_WORD *)this + 40) & 0x4000) != 0)
  {
LABEL_39:
    v26 = *((unsigned __int8 *)this + 76);
    if ((v1 & 2) != 0)
      goto LABEL_40;
LABEL_59:
    v27 = 0.0;
    return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13 ^ v15 ^ v17 ^ v19 ^ v21 ^ v23 ^ v25 ^ v26 ^ *(_QWORD *)&v27;
  }
LABEL_58:
  v26 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_59;
LABEL_40:
  v27 = *((double *)this + 2);
  if (v27 == 0.0)
    v27 = 0.0;
  return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13 ^ v15 ^ v17 ^ v19 ^ v21 ^ v23 ^ v25 ^ v26 ^ *(_QWORD *)&v27;
}

void CMMsl::Pressure::~Pressure(CMMsl::Pressure *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::Pressure::Pressure(CMMsl::Pressure *this, const CMMsl::Pressure *a2)
{
  char v2;
  char v3;
  uint64_t v4;

  *(_QWORD *)this = &off_251360380;
  *((_DWORD *)this + 6) = 0;
  v2 = *((_BYTE *)a2 + 24);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 24) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_BYTE *)a2 + 24);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 24) & 2) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((_BYTE *)this + 24) = v3;
    *((_DWORD *)this + 4) = v4;
    v2 = *((_BYTE *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 5);
    *((_BYTE *)this + 24) = v3 | 4;
    *((_DWORD *)this + 5) = v4;
  }
  return *(float *)&v4;
}

uint64_t CMMsl::Pressure::operator=(uint64_t a1, uint64_t a2, double a3, float a4, float a5)
{
  char v6;
  char v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  int v13;

  if (a1 != a2)
  {
    v12[0] = &off_251360380;
    v13 = 0;
    v6 = *(_BYTE *)(a2 + 24);
    if ((v6 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      v7 = 1;
      LOBYTE(v13) = 1;
      if ((v6 & 2) != 0)
      {
LABEL_4:
        a4 = *(float *)(a2 + 16);
        v7 |= 2u;
        LOBYTE(v13) = v7;
        if ((v6 & 4) != 0)
          goto LABEL_8;
        goto LABEL_9;
      }
    }
    else
    {
      v7 = 0;
      if ((*(_BYTE *)(a2 + 24) & 2) != 0)
        goto LABEL_4;
    }
    if ((v6 & 4) != 0)
    {
LABEL_8:
      a5 = *(float *)(a2 + 20);
      LOBYTE(v13) = v7 | 4;
    }
LABEL_9:
    v8 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v13;
    v13 = v8;
    v9 = *(_QWORD *)(a1 + 8);
    v10 = *(_QWORD *)(a1 + 16);
    *(double *)(a1 + 8) = a3;
    *(float *)(a1 + 16) = a4;
    *(float *)(a1 + 20) = a5;
    v12[1] = v9;
    v12[2] = v10;
    PB::Base::~Base((PB::Base *)v12);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::Pressure *a2, CMMsl::Pressure *a3)
{
  int v3;
  uint64_t v4;
  float result;

  v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  result = *((float *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((float *)a2 + 5) = result;
  return result;
}

float CMMsl::Pressure::Pressure(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_251360380;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_251360380;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  return result;
}

uint64_t CMMsl::Pressure::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  int v8;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    v7[0] = &off_251360380;
    v8 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v3;
    v7[1] = v4;
    v7[2] = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

uint64_t CMMsl::Pressure::formatText(CMMsl::Pressure *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 2) == 0)
  {
    if ((*((_BYTE *)this + 24) & 4) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(a2, "temperature", *((float *)this + 5));
    if ((*((_BYTE *)this + 24) & 1) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_4;
  }
  PB::TextFormatter::format(a2, "pressure", *((float *)this + 4));
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 4) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 1) != 0)
LABEL_4:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::Pressure::readFrom(CMMsl::Pressure *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          v14 = v16++ > 8;
          if (v14)
            goto LABEL_27;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v19 = v11 >> 3;
      if ((v11 >> 3) == 3)
        break;
      if ((_DWORD)v19 == 2)
      {
        *((_BYTE *)this + 24) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_36:
        v2 = *((_QWORD *)a2 + 1) + 4;
        goto LABEL_37;
      }
      if ((_DWORD)v19 != 1)
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        goto LABEL_38;
      }
      *((_BYTE *)this + 24) |= 1u;
      v2 = *((_QWORD *)a2 + 1);
      if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
      {
LABEL_34:
        *((_BYTE *)a2 + 24) = 1;
        goto LABEL_38;
      }
      *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
      v2 = *((_QWORD *)a2 + 1) + 8;
LABEL_37:
      *((_QWORD *)a2 + 1) = v2;
LABEL_38:
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    *((_BYTE *)this + 24) |= 4u;
    v2 = *((_QWORD *)a2 + 1);
    if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
      goto LABEL_34;
    *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
    goto LABEL_36;
  }
  return v4 == 0;
}

uint64_t CMMsl::Pressure::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 24);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 24);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        return this;
      return PB::Writer::write(a2, *(float *)(v3 + 20));
    }
  }
  else if ((*(_BYTE *)(this + 24) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  if ((*(_BYTE *)(v3 + 24) & 4) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 20));
  return this;
}

uint64_t CMMsl::Pressure::hash_value(CMMsl::Pressure *this)
{
  double v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;

  if ((*((_BYTE *)this + 24) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 24) & 2) != 0)
    {
LABEL_3:
      v2 = *((float *)this + 4);
      v3 = LODWORD(v2);
      if (v2 == 0.0)
        v3 = 0;
      if ((*((_BYTE *)this + 24) & 4) != 0)
        goto LABEL_6;
LABEL_13:
      v5 = 0;
      return v3 ^ *(_QWORD *)&v1 ^ v5;
    }
  }
  else
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 24) & 2) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((*((_BYTE *)this + 24) & 4) == 0)
    goto LABEL_13;
LABEL_6:
  v4 = *((float *)this + 5);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  return v3 ^ *(_QWORD *)&v1 ^ v5;
}

void CMMsl::PressureCalibration::~PressureCalibration(CMMsl::PressureCalibration *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::PressureCalibration::PressureCalibration(CMMsl::PressureCalibration *this, const CMMsl::PressureCalibration *a2)
{
  char v2;
  char v3;
  float result;

  *(_QWORD *)this = &off_2513603B8;
  *((_DWORD *)this + 8) = 0;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 0x20) != 0)
  {
    result = *((float *)a2 + 7);
    v3 = 32;
    *((_BYTE *)this + 32) = 32;
    *((float *)this + 7) = result;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 32) & 0x10) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 6);
    v3 |= 0x10u;
    *((_BYTE *)this + 32) = v3;
    *((float *)this + 6) = result;
    v2 = *((_BYTE *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    result = *((float *)a2 + 5);
    v3 |= 8u;
    *((_BYTE *)this + 32) = v3;
    *((float *)this + 5) = result;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0)
        goto LABEL_9;
      goto LABEL_13;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  result = *((float *)a2 + 2);
  v3 |= 1u;
  *((_BYTE *)this + 32) = v3;
  *((float *)this + 2) = result;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 2) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0)
      return result;
LABEL_14:
    result = *((float *)a2 + 4);
    *((_BYTE *)this + 32) = v3 | 4;
    *((float *)this + 4) = result;
    return result;
  }
LABEL_13:
  result = *((float *)a2 + 3);
  v3 |= 2u;
  *((_BYTE *)this + 32) = v3;
  *((float *)this + 3) = result;
  if ((*((_BYTE *)a2 + 32) & 4) != 0)
    goto LABEL_14;
  return result;
}

uint64_t CMMsl::PressureCalibration::operator=(uint64_t a1, const CMMsl::PressureCalibration *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  _BYTE v7[8];
  __int128 v8;
  uint64_t v9;
  int v10;

  if ((const CMMsl::PressureCalibration *)a1 != a2)
  {
    CMMsl::PressureCalibration::PressureCalibration((CMMsl::PressureCalibration *)v7, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v9;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::PressureCalibration *a2, CMMsl::PressureCalibration *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  float result;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  v5 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v5;
  v6 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v6;
  v7 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v7;
  v8 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v8;
  result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  return result;
}

float CMMsl::PressureCalibration::PressureCalibration(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_2513603B8;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_2513603B8;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::PressureCalibration::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  void (**v8)(CMMsl::PressureCalibration *__hidden);
  __int128 v9;
  uint64_t v10;
  int v11;

  if (a1 != a2)
  {
    v8 = &off_2513603B8;
    v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    v11 = *(_DWORD *)(a1 + 32);
    v10 = *(_QWORD *)(a1 + 24);
    v4 = *(_OWORD *)(a1 + 8);
    v5 = *(_OWORD *)(a2 + 8);
    v6 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 32) = v3;
    *(_QWORD *)(a1 + 24) = v6;
    *(_OWORD *)(a1 + 8) = v5;
    v9 = v4;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::PressureCalibration::formatText(CMMsl::PressureCalibration *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "inertialX", *((float *)this + 2));
    v5 = *((_BYTE *)this + 32);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*((_BYTE *)this + 32) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "inertialY", *((float *)this + 3));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "inertialZ", *((float *)this + 4));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(a2, "medTocFactoryTemp", *((float *)this + 6));
    if ((*((_BYTE *)this + 32) & 0x20) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "maxTemp", *((float *)this + 5));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 0x10) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 0x20) != 0)
LABEL_7:
    PB::TextFormatter::format(a2, "medianToc", *((float *)this + 7));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PressureCalibration::readFrom(CMMsl::PressureCalibration *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_43;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 32) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_40;
        *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_42;
      case 2u:
        *((_BYTE *)this + 32) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_40;
        *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_42;
      case 3u:
        *((_BYTE *)this + 32) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_40;
        *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_42;
      case 4u:
        *((_BYTE *)this + 32) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_40;
        *((_DWORD *)this + 2) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_42;
      case 5u:
        *((_BYTE *)this + 32) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_40;
        *((_DWORD *)this + 3) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_42;
      case 6u:
        *((_BYTE *)this + 32) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_42:
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_40:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_43:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::PressureCalibration::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 0x20) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 28));
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(this + 32) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(float *)(v3 + 8));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 2) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 16));
  }
LABEL_12:
  this = PB::Writer::write(a2, *(float *)(v3 + 12));
  if ((*(_BYTE *)(v3 + 32) & 4) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 16));
  return this;
}

uint64_t CMMsl::PressureCalibration::hash_value(CMMsl::PressureCalibration *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;

  if ((*((_BYTE *)this + 32) & 0x20) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 32) & 0x10) != 0)
      goto LABEL_3;
LABEL_21:
    v3 = 0;
    if ((*((_BYTE *)this + 32) & 8) != 0)
      goto LABEL_6;
LABEL_22:
    v5 = 0;
    if ((*((_BYTE *)this + 32) & 1) != 0)
      goto LABEL_9;
LABEL_23:
    v7 = 0;
    if ((*((_BYTE *)this + 32) & 2) != 0)
      goto LABEL_12;
    goto LABEL_24;
  }
  v12 = *((float *)this + 7);
  v1 = LODWORD(v12);
  if (v12 == 0.0)
    v1 = 0;
  if ((*((_BYTE *)this + 32) & 0x10) == 0)
    goto LABEL_21;
LABEL_3:
  v2 = *((float *)this + 6);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 32) & 8) == 0)
    goto LABEL_22;
LABEL_6:
  v4 = *((float *)this + 5);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((*((_BYTE *)this + 32) & 1) == 0)
    goto LABEL_23;
LABEL_9:
  v6 = *((float *)this + 2);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  if ((*((_BYTE *)this + 32) & 2) != 0)
  {
LABEL_12:
    v8 = *((float *)this + 3);
    v9 = LODWORD(v8);
    if (v8 == 0.0)
      v9 = 0;
    if ((*((_BYTE *)this + 32) & 4) != 0)
      goto LABEL_15;
LABEL_25:
    v11 = 0;
    return v3 ^ v1 ^ v5 ^ v7 ^ v9 ^ v11;
  }
LABEL_24:
  v9 = 0;
  if ((*((_BYTE *)this + 32) & 4) == 0)
    goto LABEL_25;
LABEL_15:
  v10 = *((float *)this + 4);
  v11 = LODWORD(v10);
  if (v10 == 0.0)
    v11 = 0;
  return v3 ^ v1 ^ v5 ^ v7 ^ v9 ^ v11;
}

void CMMsl::PressureCompensated::~PressureCompensated(CMMsl::PressureCompensated *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_2513603F0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_2513603F0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_2513603F0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::PressureCompensated *CMMsl::PressureCompensated::PressureCompensated(CMMsl::PressureCompensated *this, const CMMsl::Pressure **a2)
{
  CMMsl::Pressure *v4;
  float v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_2513603F0;
  *((_QWORD *)this + 1) = 0;
  if (a2[1])
  {
    v4 = (CMMsl::Pressure *)operator new();
    v5 = CMMsl::Pressure::Pressure(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v7;
    if (v6)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v6 + 8))(v6, v5);
  }
  return this;
}

uint64_t CMMsl::PressureCompensated::operator=(uint64_t a1, const CMMsl::Pressure **a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::PressureCompensated *__hidden);
  uint64_t v6;

  if ((const CMMsl::Pressure **)a1 != a2)
  {
    CMMsl::PressureCompensated::PressureCompensated((CMMsl::PressureCompensated *)&v5, a2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v6;
    v5 = &off_2513603F0;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::PressureCompensated *a2, CMMsl::PressureCompensated *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::PressureCompensated::PressureCompensated(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_2513603F0;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_2513603F0;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::PressureCompensated::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = &off_2513603F0;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::PressureCompensated::formatText(CMMsl::PressureCompensated *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PressureCompensated::readFrom(CMMsl::PressureCompensated *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v19 = (_DWORD *)operator new();
        *(_QWORD *)v19 = &off_251360380;
        v19[6] = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = (_DWORD *)*((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_27;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PressureCompensated::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2);
  return this;
}

CMMsl::Pressure *CMMsl::PressureCompensated::hash_value(CMMsl::PressureCompensated *this)
{
  CMMsl::Pressure *result;

  result = (CMMsl::Pressure *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::Pressure *)CMMsl::Pressure::hash_value(result);
  return result;
}

_QWORD *CMMsl::PressureCompensated::makeSuper(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251360380;
    *(_DWORD *)(v2 + 24) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void CMMsl::PressureFiltered::~PressureFiltered(CMMsl::PressureFiltered *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_251360428;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_251360428;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_251360428;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::PressureFiltered *CMMsl::PressureFiltered::PressureFiltered(CMMsl::PressureFiltered *this, const CMMsl::Pressure **a2)
{
  CMMsl::Pressure *v4;
  float v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_251360428;
  *((_QWORD *)this + 1) = 0;
  if (a2[1])
  {
    v4 = (CMMsl::Pressure *)operator new();
    v5 = CMMsl::Pressure::Pressure(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v7;
    if (v6)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v6 + 8))(v6, v5);
  }
  return this;
}

uint64_t CMMsl::PressureFiltered::operator=(uint64_t a1, const CMMsl::Pressure **a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::PressureFiltered *__hidden);
  uint64_t v6;

  if ((const CMMsl::Pressure **)a1 != a2)
  {
    CMMsl::PressureFiltered::PressureFiltered((CMMsl::PressureFiltered *)&v5, a2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v6;
    v5 = &off_251360428;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::PressureFiltered *a2, CMMsl::PressureFiltered *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::PressureFiltered::PressureFiltered(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_251360428;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_251360428;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::PressureFiltered::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = &off_251360428;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::PressureFiltered::formatText(CMMsl::PressureFiltered *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PressureFiltered::readFrom(CMMsl::PressureFiltered *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v19 = (_DWORD *)operator new();
        *(_QWORD *)v19 = &off_251360380;
        v19[6] = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = (_DWORD *)*((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_27;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PressureFiltered::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2);
  return this;
}

CMMsl::Pressure *CMMsl::PressureFiltered::hash_value(CMMsl::PressureFiltered *this)
{
  CMMsl::Pressure *result;

  result = (CMMsl::Pressure *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::Pressure *)CMMsl::Pressure::hash_value(result);
  return result;
}

_QWORD *CMMsl::PressureFiltered::makeSuper(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251360380;
    *(_DWORD *)(v2 + 24) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void CMMsl::PressureFiltered1HzLowPass::~PressureFiltered1HzLowPass(CMMsl::PressureFiltered1HzLowPass *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_251360460;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_251360460;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_251360460;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::PressureFiltered1HzLowPass *CMMsl::PressureFiltered1HzLowPass::PressureFiltered1HzLowPass(CMMsl::PressureFiltered1HzLowPass *this, const CMMsl::PressureFiltered1HzLowPass *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  *(_QWORD *)this = &off_251360460;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  if ((*((_BYTE *)a2 + 24) & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    *((_BYTE *)this + 24) = 1;
    *((_QWORD *)this + 1) = v4;
  }
  if (*((_QWORD *)a2 + 2))
  {
    v5 = operator new();
    v6 = *((_QWORD *)a2 + 2);
    *(_QWORD *)v5 = &off_251360498;
    *(_DWORD *)(v5 + 20) = 0;
    v7 = *(_BYTE *)(v6 + 20);
    if ((v7 & 1) != 0)
    {
      v9 = *(_QWORD *)(v6 + 8);
      *(_BYTE *)(v5 + 20) = 1;
      *(_QWORD *)(v5 + 8) = v9;
      v8 = 3;
      if ((v7 & 2) == 0)
        goto LABEL_9;
    }
    else
    {
      v8 = 2;
      if ((*(_BYTE *)(v6 + 20) & 2) == 0)
      {
LABEL_9:
        v11 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v5;
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
        return this;
      }
    }
    v10 = *(_DWORD *)(v6 + 16);
    *(_BYTE *)(v5 + 20) = v8;
    *(_DWORD *)(v5 + 16) = v10;
    goto LABEL_9;
  }
  return this;
}

uint64_t CMMsl::PressureFiltered1HzLowPass::operator=(uint64_t a1, const CMMsl::PressureFiltered1HzLowPass *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  void (**v7)(CMMsl::PressureFiltered1HzLowPass *__hidden);
  uint64_t v8;
  uint64_t v9;
  int v10;

  if ((const CMMsl::PressureFiltered1HzLowPass *)a1 != a2)
  {
    CMMsl::PressureFiltered1HzLowPass::PressureFiltered1HzLowPass((CMMsl::PressureFiltered1HzLowPass *)&v7, a2);
    v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v8;
    v8 = v4;
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v9;
    v7 = &off_251360460;
    v9 = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PressureFiltered1HzLowPass *a2, CMMsl::PressureFiltered1HzLowPass *a3)
{
  int v3;
  double result;
  uint64_t v5;

  v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  return result;
}

uint64_t CMMsl::PressureFiltered1HzLowPass::PressureFiltered1HzLowPass(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_251360460;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_251360460;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::PressureFiltered1HzLowPass::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  int v11;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    v6 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v3;
    v11 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v10[1] = v7;
    v8 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v5;
    v10[0] = &off_251360460;
    v10[2] = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::PressureFiltered1HzLowPass::formatText(CMMsl::PressureFiltered1HzLowPass *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 24) & 1) != 0)
    PB::TextFormatter::format(a2, "iostime", *((double *)this + 1));
  v5 = *((_QWORD *)this + 2);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PressureFiltered1HzLowPass::readFrom(CMMsl::PressureFiltered1HzLowPass *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t result;
  _DWORD *v21;
  uint64_t v22;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_26;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        v21 = (_DWORD *)operator new();
        *(_QWORD *)v21 = &off_251360498;
        v21[5] = 0;
        v22 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v21;
        if (v22)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          v21 = (_DWORD *)*((_QWORD *)this + 2);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v21 + 16))(v21, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 24) |= 1u;
        v19 = *((_QWORD *)a2 + 1);
        if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v19);
          *((_QWORD *)a2 + 1) += 8;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_26:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_26;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PressureFiltered1HzLowPass::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = this;
  if ((*(_BYTE *)(this + 24) & 1) != 0)
    this = PB::Writer::write(a2, *(double *)(this + 8));
  v4 = *(const PB::Base **)(v3 + 16);
  if (v4)
    return PB::Writer::writeSubmessage(a2, v4);
  return this;
}

uint64_t CMMsl::PressureFiltered1HzLowPass::hash_value(CMMsl::PressureFiltered1HzLowPass *this)
{
  double v1;
  uint64_t v2;
  uint64_t v3;
  float v4;
  BOOL v5;
  uint64_t v6;

  if ((*((_BYTE *)this + 24) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
  }
  else
  {
    v1 = 0.0;
  }
  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if ((*(_BYTE *)(v2 + 20) & 1) == 0)
      v3 = 0;
    v4 = *(float *)(v2 + 16);
    v5 = v4 == 0.0 || (*(_BYTE *)(v2 + 20) & 2) == 0;
    v6 = LODWORD(v4);
    if (v5)
      v6 = 0;
    v2 = v6 ^ v3;
  }
  return v2 ^ *(_QWORD *)&v1;
}

_QWORD *CMMsl::PressureFiltered1HzLowPass::makeSuper(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[2])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251360498;
    *(_DWORD *)(v2 + 20) = 0;
    this = (_QWORD *)v1[2];
    v1[2] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void CMMsl::PressureFilteredNoTemperature::~PressureFilteredNoTemperature(CMMsl::PressureFilteredNoTemperature *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::PressureFilteredNoTemperature::PressureFilteredNoTemperature(CMMsl::PressureFilteredNoTemperature *this, const CMMsl::PressureFilteredNoTemperature *a2)
{
  char v2;
  uint64_t v3;
  float result;

  *(_QWORD *)this = &off_251360498;
  *((_DWORD *)this + 5) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *((_BYTE *)this + 20) = 1;
    *((_QWORD *)this + 1) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 4);
    *((_BYTE *)this + 20) = v2;
    *((float *)this + 4) = result;
  }
  return result;
}

uint64_t CMMsl::PressureFilteredNoTemperature::operator=(uint64_t a1, uint64_t a2, float a3)
{
  void (**v4)(CMMsl::PressureFilteredNoTemperature *__hidden);
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  int v9;
  _QWORD v11[2];
  int v12;
  int v13;

  if (a1 != a2)
  {
    v4 = &off_251360498;
    v11[0] = &off_251360498;
    v13 = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 1) != 0)
    {
      v4 = *(void (***)(CMMsl::PressureFilteredNoTemperature *__hidden))(a2 + 8);
      LOBYTE(v13) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        a3 = *(float *)(a2 + 16);
        LOBYTE(v13) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_6;
    }
    v7 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v13;
    v13 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v11[1] = v8;
    v9 = *(_DWORD *)(a1 + 16);
    *(float *)(a1 + 16) = a3;
    v12 = v9;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::PressureFilteredNoTemperature *a2, CMMsl::PressureFilteredNoTemperature *a3)
{
  int v3;
  uint64_t v4;
  float result;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  return result;
}

uint64_t CMMsl::PressureFilteredNoTemperature::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  _QWORD v10[2];
  int v11;
  int v12;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_DWORD *)(a2 + 16);
    v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    v12 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v10[0] = &off_251360498;
    v10[1] = v7;
    v8 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v5;
    v11 = v8;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::PressureFilteredNoTemperature::formatText(CMMsl::PressureFilteredNoTemperature *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "pressure", *((float *)this + 4));
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PressureFilteredNoTemperature::readFrom(CMMsl::PressureFilteredNoTemperature *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  char v24;
  uint64_t result;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_30;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v19 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v20 = *(_QWORD *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v2)
        {
          v26 = 0;
          v27 = 0;
          v23 = 0;
          if (v2 <= v19)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v19)
            {
              v23 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_47;
            }
            v28 = v19++;
            v29 = *(_BYTE *)(v20 + v28);
            *((_QWORD *)a2 + 1) = v19;
            v23 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0)
              break;
            v26 += 7;
            v14 = v27++ > 8;
            if (v14)
            {
              v23 = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v23 = 0;
LABEL_46:
          v2 = v28 + 1;
        }
        else
        {
          v21 = 0;
          v22 = 0;
          v23 = 0;
          while (1)
          {
            v2 = v19 + 1;
            *((_QWORD *)a2 + 1) = v19 + 1;
            v24 = *(_BYTE *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0)
              break;
            v21 += 7;
            v19 = v2;
            v14 = v22++ > 8;
            if (v14)
            {
              v23 = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_QWORD *)this + 1) = v23;
      }
      else
      {
LABEL_30:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_30;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PressureFilteredNoTemperature::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 16));
  return this;
}

uint64_t CMMsl::PressureFilteredNoTemperature::hash_value(CMMsl::PressureFilteredNoTemperature *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;

  if ((*((_BYTE *)this + 20) & 1) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v3 = 0;
    return v3 ^ v1;
  }
  v1 = *((_QWORD *)this + 1);
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((float *)this + 4);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  return v3 ^ v1;
}

void CMMsl::PressureGps::~PressureGps(CMMsl::PressureGps *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_2513604D0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_2513604D0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_2513604D0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::PressureGps *CMMsl::PressureGps::PressureGps(CMMsl::PressureGps *this, const CMMsl::Pressure **a2)
{
  CMMsl::Pressure *v4;
  float v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_2513604D0;
  *((_QWORD *)this + 1) = 0;
  if (a2[1])
  {
    v4 = (CMMsl::Pressure *)operator new();
    v5 = CMMsl::Pressure::Pressure(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v7;
    if (v6)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v6 + 8))(v6, v5);
  }
  return this;
}

uint64_t CMMsl::PressureGps::operator=(uint64_t a1, const CMMsl::Pressure **a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::PressureGps *__hidden);
  uint64_t v6;

  if ((const CMMsl::Pressure **)a1 != a2)
  {
    CMMsl::PressureGps::PressureGps((CMMsl::PressureGps *)&v5, a2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v6;
    v5 = &off_2513604D0;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::PressureGps *a2, CMMsl::PressureGps *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::PressureGps::PressureGps(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_2513604D0;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_2513604D0;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::PressureGps::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = &off_2513604D0;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::PressureGps::formatText(CMMsl::PressureGps *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PressureGps::readFrom(CMMsl::PressureGps *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v19 = (_DWORD *)operator new();
        *(_QWORD *)v19 = &off_251360380;
        v19[6] = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = (_DWORD *)*((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_27;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PressureGps::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2);
  return this;
}

CMMsl::Pressure *CMMsl::PressureGps::hash_value(CMMsl::PressureGps *this)
{
  CMMsl::Pressure *result;

  result = (CMMsl::Pressure *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::Pressure *)CMMsl::Pressure::hash_value(result);
  return result;
}

_QWORD *CMMsl::PressureGps::makeSuper(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251360380;
    *(_DWORD *)(v2 + 24) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void CMMsl::PressureOscarEmu::~PressureOscarEmu(CMMsl::PressureOscarEmu *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_251360508;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_251360508;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_251360508;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::PressureOscarEmu *CMMsl::PressureOscarEmu::PressureOscarEmu(CMMsl::PressureOscarEmu *this, const CMMsl::Pressure **a2)
{
  CMMsl::Pressure *v4;
  float v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_251360508;
  *((_QWORD *)this + 1) = 0;
  if (a2[1])
  {
    v4 = (CMMsl::Pressure *)operator new();
    v5 = CMMsl::Pressure::Pressure(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v7;
    if (v6)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v6 + 8))(v6, v5);
  }
  return this;
}

uint64_t CMMsl::PressureOscarEmu::operator=(uint64_t a1, const CMMsl::Pressure **a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::PressureOscarEmu *__hidden);
  uint64_t v6;

  if ((const CMMsl::Pressure **)a1 != a2)
  {
    CMMsl::PressureOscarEmu::PressureOscarEmu((CMMsl::PressureOscarEmu *)&v5, a2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v6;
    v5 = &off_251360508;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::PressureOscarEmu *a2, CMMsl::PressureOscarEmu *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::PressureOscarEmu::PressureOscarEmu(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_251360508;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_251360508;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::PressureOscarEmu::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = &off_251360508;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::PressureOscarEmu::formatText(CMMsl::PressureOscarEmu *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PressureOscarEmu::readFrom(CMMsl::PressureOscarEmu *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v19 = (_DWORD *)operator new();
        *(_QWORD *)v19 = &off_251360380;
        v19[6] = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = (_DWORD *)*((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_27;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PressureOscarEmu::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2);
  return this;
}

CMMsl::Pressure *CMMsl::PressureOscarEmu::hash_value(CMMsl::PressureOscarEmu *this)
{
  CMMsl::Pressure *result;

  result = (CMMsl::Pressure *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::Pressure *)CMMsl::Pressure::hash_value(result);
  return result;
}

_QWORD *CMMsl::PressureOscarEmu::makeSuper(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251360380;
    *(_DWORD *)(v2 + 24) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void CMMsl::PropagatedAnchor::~PropagatedAnchor(CMMsl::PropagatedAnchor *this)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = &off_251360540;
  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::PropagatedAnchor::~PropagatedAnchor(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::PropagatedAnchor *CMMsl::PropagatedAnchor::PropagatedAnchor(CMMsl::PropagatedAnchor *this, const CMMsl::PropagatedAnchor *a2)
{
  _QWORD *v4;
  CMMsl::Pose *v5;
  CMMsl::Pose *v6;
  uint64_t v7;
  uint64_t v8;

  *((_QWORD *)this + 1) = 0;
  v4 = (_QWORD *)((char *)this + 8);
  *(_QWORD *)this = &off_251360540;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
  if (*((_QWORD *)a2 + 5))
  {
    v5 = (CMMsl::Pose *)operator new();
    v6 = CMMsl::Pose::Pose(v5, *((const CMMsl::Pose **)a2 + 5));
    v7 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if (this != a2)
    sub_2429111C4(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
  if ((*((_BYTE *)a2 + 48) & 1) != 0)
  {
    v8 = *((_QWORD *)a2 + 4);
    *((_BYTE *)this + 48) |= 1u;
    *((_QWORD *)this + 4) = v8;
  }
  return this;
}

uint64_t CMMsl::PropagatedAnchor::operator=(uint64_t a1, const CMMsl::PropagatedAnchor *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[8];
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  if ((const CMMsl::PropagatedAnchor *)a1 != a2)
  {
    CMMsl::PropagatedAnchor::PropagatedAnchor((CMMsl::PropagatedAnchor *)v9, a2);
    v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v14;
    v14 = v3;
    v4 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v13;
    v13 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v5;
    v6 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v11;
    v11 = v6;
    v7 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v12;
    v12 = v7;
    CMMsl::PropagatedAnchor::~PropagatedAnchor((CMMsl::PropagatedAnchor *)v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PropagatedAnchor *a2, CMMsl::PropagatedAnchor *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  v4 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  result = *((double *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((double *)a2 + 4) = result;
  return result;
}

uint64_t CMMsl::PropagatedAnchor::PropagatedAnchor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_251360540;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  sub_242911330(v4, (__n128 *)(a2 + 8));
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t CMMsl::PropagatedAnchor::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[8];
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  if (a1 != a2)
  {
    CMMsl::PropagatedAnchor::PropagatedAnchor((uint64_t)v9, a2);
    v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v14;
    v14 = v3;
    v4 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v13;
    v13 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v5;
    v6 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v11;
    v11 = v6;
    v7 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v12;
    v12 = v7;
    CMMsl::PropagatedAnchor::~PropagatedAnchor((CMMsl::PropagatedAnchor *)v9);
  }
  return a1;
}

uint64_t CMMsl::PropagatedAnchor::formatText(CMMsl::PropagatedAnchor *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  double *v6;
  double *v7;
  double v8;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 48) & 1) != 0)
    PB::TextFormatter::format(a2, "originalTimestamp", *((double *)this + 4));
  v5 = *((_QWORD *)this + 5);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "pose");
  v6 = (double *)*((_QWORD *)this + 1);
  v7 = (double *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(a2, "velocity", v8);
  }
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::PropagatedAnchor::readFrom(CMMsl::PropagatedAnchor *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  _QWORD *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_21;
          v15 += 7;
          v2 = v17;
          v14 = v16++ > 8;
          if (v14)
            goto LABEL_19;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_21:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v19 = v11 >> 3;
      if ((v11 >> 3) == 3)
        break;
      if ((_DWORD)v19 == 2)
      {
        if ((v11 & 7) == 2)
        {
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v23 = *((_QWORD *)a2 + 1);
          v24 = *((_QWORD *)a2 + 2);
          while (v23 < v24 && !*((_BYTE *)a2 + 24))
          {
            v26 = (char *)*((_QWORD *)this + 2);
            v25 = *((_QWORD *)this + 3);
            if ((unint64_t)v26 >= v25)
            {
              v28 = (char *)*((_QWORD *)this + 1);
              v29 = (v26 - v28) >> 3;
              v30 = v29 + 1;
              if ((unint64_t)(v29 + 1) >> 61)
                goto LABEL_86;
              v31 = v25 - (_QWORD)v28;
              if (v31 >> 2 > v30)
                v30 = v31 >> 2;
              if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
                v32 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v32 = v30;
              if (v32)
              {
                v32 = (unint64_t)sub_2429112FC(v32);
                v28 = (char *)*((_QWORD *)this + 1);
                v26 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v33 = 0;
              }
              v34 = (_QWORD *)(v32 + 8 * v29);
              *v34 = 0;
              v27 = v34 + 1;
              while (v26 != v28)
              {
                v35 = *((_QWORD *)v26 - 1);
                v26 -= 8;
                *--v34 = v35;
              }
              *((_QWORD *)this + 1) = v34;
              *((_QWORD *)this + 2) = v27;
              *((_QWORD *)this + 3) = v32 + 8 * v33;
              if (v28)
                operator delete(v28);
            }
            else
            {
              *(_QWORD *)v26 = 0;
              v27 = v26 + 8;
            }
            *((_QWORD *)this + 2) = v27;
            v36 = *((_QWORD *)a2 + 1);
            if (v36 > 0xFFFFFFFFFFFFFFF7 || v36 + 8 > *((_QWORD *)a2 + 2))
            {
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_29;
            }
            *(v27 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v36);
            v24 = *((_QWORD *)a2 + 2);
            v23 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v23;
          }
          goto LABEL_29;
        }
        v38 = (char *)*((_QWORD *)this + 2);
        v37 = *((_QWORD *)this + 3);
        if ((unint64_t)v38 >= v37)
        {
          v40 = (char *)*((_QWORD *)this + 1);
          v41 = (v38 - v40) >> 3;
          v42 = v41 + 1;
          if ((unint64_t)(v41 + 1) >> 61)
LABEL_86:
            sub_242729A44();
          v43 = v37 - (_QWORD)v40;
          if (v43 >> 2 > v42)
            v42 = v43 >> 2;
          if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
            v44 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v44 = v42;
          if (v44)
          {
            v44 = (unint64_t)sub_2429112FC(v44);
            v40 = (char *)*((_QWORD *)this + 1);
            v38 = (char *)*((_QWORD *)this + 2);
          }
          else
          {
            v45 = 0;
          }
          v46 = (_QWORD *)(v44 + 8 * v41);
          *v46 = 0;
          v39 = v46 + 1;
          while (v38 != v40)
          {
            v47 = *((_QWORD *)v38 - 1);
            v38 -= 8;
            *--v46 = v47;
          }
          *((_QWORD *)this + 1) = v46;
          *((_QWORD *)this + 2) = v39;
          *((_QWORD *)this + 3) = v44 + 8 * v45;
          if (v40)
            operator delete(v40);
        }
        else
        {
          *(_QWORD *)v38 = 0;
          v39 = v38 + 8;
        }
        *((_QWORD *)this + 2) = v39;
        v48 = *((_QWORD *)a2 + 1);
        if (v48 > 0xFFFFFFFFFFFFFFF7 || v48 + 8 > *((_QWORD *)a2 + 2))
        {
LABEL_76:
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_79;
        }
        *(v39 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v48);
        goto LABEL_78;
      }
      if ((_DWORD)v19 == 1)
      {
        v20 = operator new();
        *(_QWORD *)v20 = &off_2513600E0;
        *(_DWORD *)(v20 + 64) = 0;
        *(_OWORD *)(v20 + 8) = 0u;
        *(_OWORD *)(v20 + 24) = 0u;
        *(_OWORD *)(v20 + 40) = 0u;
        v21 = *((_QWORD *)this + 5);
        *((_QWORD *)this + 5) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *((_QWORD *)this + 5);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, a2) & 1) == 0)
        {
          return 0;
        }
LABEL_29:
        PB::Reader::recallMark();
        goto LABEL_79;
      }
LABEL_19:
      if ((PB::Reader::skip(a2) & 1) == 0)
        return 0;
LABEL_79:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    *((_BYTE *)this + 48) |= 1u;
    v22 = *((_QWORD *)a2 + 1);
    if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((_QWORD *)a2 + 2))
      goto LABEL_76;
    *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v22);
LABEL_78:
    *((_QWORD *)a2 + 1) += 8;
    goto LABEL_79;
  }
  return v4 == 0;
}

uint64_t CMMsl::PropagatedAnchor::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  double *v5;
  double *v6;
  double v7;

  v3 = this;
  v4 = *(const PB::Base **)(this + 40);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = *(double **)(v3 + 8);
  v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7);
  }
  if ((*(_BYTE *)(v3 + 48) & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 32));
  return this;
}

uint64_t CMMsl::PropagatedAnchor::hash_value(CMMsl::PropagatedAnchor *this)
{
  CMMsl::Pose *v2;
  uint64_t v3;
  uint64_t v4;
  double v5;

  v2 = (CMMsl::Pose *)*((_QWORD *)this + 5);
  if (v2)
    v3 = CMMsl::Pose::hash_value(v2);
  else
    v3 = 0;
  v4 = PBHashBytes();
  if ((*((_BYTE *)this + 48) & 1) != 0)
  {
    v5 = *((double *)this + 4);
    if (v5 == 0.0)
      v5 = 0.0;
  }
  else
  {
    v5 = 0.0;
  }
  return v4 ^ v3 ^ *(_QWORD *)&v5;
}

_QWORD *CMMsl::PropagatedAnchor::makePose(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[5])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_2513600E0;
    *(_DWORD *)(v2 + 64) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    this = (_QWORD *)v1[5];
    v1[5] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void CMMsl::Prox::~Prox(CMMsl::Prox *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::Prox::Prox(uint64_t this, const CMMsl::Prox *a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)this = &off_251360578;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::Prox::operator=(uint64_t a1, uint64_t a2, double a3)
{
  int v3;
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  uint64_t v12;

  if (a1 != a2)
  {
    v11[0] = &off_251360578;
    HIDWORD(v12) = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      BYTE4(v12) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        v3 = *(_DWORD *)(a2 + 16);
        BYTE4(v12) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_6;
    }
    v7 = HIDWORD(v12);
    v8 = *(_QWORD *)(a1 + 8);
    v9 = *(_QWORD *)(a1 + 16);
    *(double *)(a1 + 8) = a3;
    *(_DWORD *)(a1 + 16) = v3;
    *(_DWORD *)(a1 + 20) = v7;
    v11[1] = v8;
    v12 = v9;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::Prox *a2, CMMsl::Prox *a3)
{
  int v3;
  double result;
  int v5;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  return result;
}

double CMMsl::Prox::Prox(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_251360578;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_251360578;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::Prox::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  if (a1 != a2)
  {
    v8[0] = &off_251360578;
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    v8[1] = v5;
    v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::Prox::formatText(CMMsl::Prox *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "detectionMask");
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::Prox::readFrom(CMMsl::Prox *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_26;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v26 = 0;
          v27 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_47;
            }
            v28 = v20++;
            v29 = *(_BYTE *)(v21 + v28);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0)
              break;
            v26 += 7;
            v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
LABEL_46:
          v2 = v28 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)a2 + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 4) = v24;
      }
      else if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_26:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_26;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::Prox::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::Prox::hash_value(CMMsl::Prox *this)
{
  double v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v2 = 0;
    return v2 ^ *(_QWORD *)&v1;
  }
  v1 = 0.0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((unsigned int *)this + 4);
  return v2 ^ *(_QWORD *)&v1;
}

void CMMsl::ProxBaselineEstimatorState::~ProxBaselineEstimatorState(CMMsl::ProxBaselineEstimatorState *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::ProxBaselineEstimatorState::ProxBaselineEstimatorState(CMMsl::ProxBaselineEstimatorState *this, const CMMsl::ProxBaselineEstimatorState *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  float result;
  char v6;

  *(_QWORD *)this = &off_2513605B0;
  *((_DWORD *)this + 22) = 0;
  v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_DWORD *)this + 22) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_DWORD *)a2 + 22);
    if ((v2 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x100) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 11);
    v3 |= 0x100u;
    *((_DWORD *)this + 22) = v3;
    *((float *)this + 11) = result;
    v2 = *((_DWORD *)a2 + 22);
  }
LABEL_6:
  if ((v2 & 0x400) != 0)
  {
    result = *((float *)a2 + 13);
    v3 |= 0x400u;
    *((_DWORD *)this + 22) = v3;
    *((float *)this + 13) = result;
    v2 = *((_DWORD *)a2 + 22);
    if ((v2 & 0x1000) == 0)
    {
LABEL_8:
      if ((v2 & 0x800) == 0)
        goto LABEL_9;
      goto LABEL_26;
    }
  }
  else if ((v2 & 0x1000) == 0)
  {
    goto LABEL_8;
  }
  result = *((float *)a2 + 15);
  v3 |= 0x1000u;
  *((_DWORD *)this + 22) = v3;
  *((float *)this + 15) = result;
  v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 0x800) == 0)
  {
LABEL_9:
    if ((v2 & 0x10000) == 0)
      goto LABEL_10;
    goto LABEL_27;
  }
LABEL_26:
  result = *((float *)a2 + 14);
  v3 |= 0x800u;
  *((_DWORD *)this + 22) = v3;
  *((float *)this + 14) = result;
  v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 0x10000) == 0)
  {
LABEL_10:
    if ((v2 & 0x20000) == 0)
      goto LABEL_11;
    goto LABEL_28;
  }
LABEL_27:
  result = *((float *)a2 + 19);
  v3 |= 0x10000u;
  *((_DWORD *)this + 22) = v3;
  *((float *)this + 19) = result;
  v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 0x20000) == 0)
  {
LABEL_11:
    if ((v2 & 0x40000) == 0)
      goto LABEL_12;
    goto LABEL_29;
  }
LABEL_28:
  result = *((float *)a2 + 20);
  v3 |= 0x20000u;
  *((_DWORD *)this + 22) = v3;
  *((float *)this + 20) = result;
  v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 0x40000) == 0)
  {
LABEL_12:
    if ((v2 & 0x4000) == 0)
      goto LABEL_13;
    goto LABEL_30;
  }
LABEL_29:
  v6 = *((_BYTE *)a2 + 84);
  v3 |= 0x40000u;
  *((_DWORD *)this + 22) = v3;
  *((_BYTE *)this + 84) = v6;
  v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 0x4000) == 0)
  {
LABEL_13:
    if ((v2 & 0x2000) == 0)
      goto LABEL_14;
    goto LABEL_31;
  }
LABEL_30:
  result = *((float *)a2 + 17);
  v3 |= 0x4000u;
  *((_DWORD *)this + 22) = v3;
  *((float *)this + 17) = result;
  v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 0x2000) == 0)
  {
LABEL_14:
    if ((v2 & 2) == 0)
      goto LABEL_15;
    goto LABEL_32;
  }
LABEL_31:
  result = *((float *)a2 + 16);
  v3 |= 0x2000u;
  *((_DWORD *)this + 22) = v3;
  *((float *)this + 16) = result;
  v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 2) == 0)
  {
LABEL_15:
    if ((v2 & 0x20) == 0)
      goto LABEL_16;
    goto LABEL_33;
  }
LABEL_32:
  result = *((float *)a2 + 4);
  v3 |= 2u;
  *((_DWORD *)this + 22) = v3;
  *((float *)this + 4) = result;
  v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 0x20) == 0)
  {
LABEL_16:
    if ((v2 & 0x40) == 0)
      goto LABEL_17;
    goto LABEL_34;
  }
LABEL_33:
  result = *((float *)a2 + 8);
  v3 |= 0x20u;
  *((_DWORD *)this + 22) = v3;
  *((float *)this + 8) = result;
  v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 0x40) == 0)
  {
LABEL_17:
    if ((v2 & 0x80) == 0)
      goto LABEL_18;
    goto LABEL_35;
  }
LABEL_34:
  result = *((float *)a2 + 9);
  v3 |= 0x40u;
  *((_DWORD *)this + 22) = v3;
  *((float *)this + 9) = result;
  v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 0x80) == 0)
  {
LABEL_18:
    if ((v2 & 4) == 0)
      goto LABEL_19;
    goto LABEL_36;
  }
LABEL_35:
  result = *((float *)a2 + 10);
  v3 |= 0x80u;
  *((_DWORD *)this + 22) = v3;
  *((float *)this + 10) = result;
  v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 4) == 0)
  {
LABEL_19:
    if ((v2 & 8) == 0)
      goto LABEL_20;
    goto LABEL_37;
  }
LABEL_36:
  result = *((float *)a2 + 5);
  v3 |= 4u;
  *((_DWORD *)this + 22) = v3;
  *((float *)this + 5) = result;
  v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 8) == 0)
  {
LABEL_20:
    if ((v2 & 0x10) == 0)
      goto LABEL_21;
    goto LABEL_38;
  }
LABEL_37:
  result = *((float *)a2 + 6);
  v3 |= 8u;
  *((_DWORD *)this + 22) = v3;
  *((float *)this + 6) = result;
  v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 0x10) == 0)
  {
LABEL_21:
    if ((v2 & 0x8000) == 0)
      goto LABEL_22;
    goto LABEL_39;
  }
LABEL_38:
  result = *((float *)a2 + 7);
  v3 |= 0x10u;
  *((_DWORD *)this + 22) = v3;
  *((float *)this + 7) = result;
  v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 0x8000) == 0)
  {
LABEL_22:
    if ((v2 & 0x200) == 0)
      return result;
LABEL_40:
    result = *((float *)a2 + 12);
    *((_DWORD *)this + 22) = v3 | 0x200;
    *((float *)this + 12) = result;
    return result;
  }
LABEL_39:
  result = *((float *)a2 + 18);
  v3 |= 0x8000u;
  *((_DWORD *)this + 22) = v3;
  *((float *)this + 18) = result;
  if ((*((_DWORD *)a2 + 22) & 0x200) != 0)
    goto LABEL_40;
  return result;
}

CMMsl *CMMsl::ProxBaselineEstimatorState::operator=(CMMsl *a1, const CMMsl::ProxBaselineEstimatorState *a2)
{
  CMMsl::ProxBaselineEstimatorState *v3;
  _BYTE v5[96];

  if (a1 != a2)
  {
    CMMsl::ProxBaselineEstimatorState::ProxBaselineEstimatorState((CMMsl::ProxBaselineEstimatorState *)v5, a2);
    CMMsl::swap(a1, (CMMsl::ProxBaselineEstimatorState *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::ProxBaselineEstimatorState *a2, CMMsl::ProxBaselineEstimatorState *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  float result;

  v3 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v5;
  v6 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v6;
  v7 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v7;
  v8 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v8;
  v9 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v9;
  v10 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v10;
  LOBYTE(v4) = *((_BYTE *)this + 84);
  *((_BYTE *)this + 84) = *((_BYTE *)a2 + 84);
  *((_BYTE *)a2 + 84) = v4;
  v11 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v11;
  v12 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v12;
  v13 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v13;
  v14 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v14;
  v15 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v15;
  v16 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v16;
  v17 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v17;
  v18 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v18;
  v19 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v19;
  v20 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v20;
  result = *((float *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((float *)a2 + 12) = result;
  return result;
}

float CMMsl::ProxBaselineEstimatorState::ProxBaselineEstimatorState(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_2513605B0;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  result = *(float *)(a2 + 48);
  *(float *)(a1 + 48) = result;
  return result;
}

CMMsl *CMMsl::ProxBaselineEstimatorState::operator=(CMMsl *this, uint64_t a2, CMMsl::ProxBaselineEstimatorState *a3)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  _QWORD v8[2];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  char v14;
  int v15;

  if (this != (CMMsl *)a2)
  {
    v15 = *(_DWORD *)(a2 + 88);
    *(_DWORD *)(a2 + 88) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v8[0] = &off_2513605B0;
    v8[1] = v4;
    v13 = *(_DWORD *)(a2 + 80);
    v14 = *(_BYTE *)(a2 + 84);
    v5 = *(_OWORD *)(a2 + 32);
    v9 = *(_OWORD *)(a2 + 16);
    v10 = v5;
    v6 = *(_OWORD *)(a2 + 64);
    v11 = *(_OWORD *)(a2 + 48);
    v12 = v6;
    CMMsl::swap(this, (CMMsl::ProxBaselineEstimatorState *)v8, a3);
    PB::Base::~Base((PB::Base *)v8);
  }
  return this;
}

uint64_t CMMsl::ProxBaselineEstimatorState::formatText(CMMsl::ProxBaselineEstimatorState *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 22);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "baselineError", *((float *)this + 4));
    v5 = *((_DWORD *)this + 22);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_24;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "covariancePostMeasurement00", *((float *)this + 5));
  v5 = *((_DWORD *)this + 22);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "covariancePostMeasurement01", *((float *)this + 6));
  v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "covariancePostMeasurement11", *((float *)this + 7));
  v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "covariancePreMeasurement00", *((float *)this + 8));
  v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "covariancePreMeasurement01", *((float *)this + 9));
  v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "covariancePreMeasurement11", *((float *)this + 10));
  v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "estimate", *((float *)this + 11));
  v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "factoryXTalk", *((float *)this + 12));
  v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "gain", *((float *)this + 13));
  v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "intensity", *((float *)this + 14));
  v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x40000) == 0)
      goto LABEL_14;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "measurement", *((float *)this + 15));
  v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x40000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "possibleObstructed");
  v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "proxBufferMax", *((float *)this + 16));
  v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "proxBufferVariance", *((float *)this + 17));
  v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "sensitivityCal", *((float *)this + 18));
  v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0)
      goto LABEL_19;
LABEL_39:
    PB::TextFormatter::format(a2, "temperatureCalError", *((float *)this + 20));
    if ((*((_DWORD *)this + 22) & 1) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_20;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "temperature", *((float *)this + 19));
  v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x20000) != 0)
    goto LABEL_39;
LABEL_19:
  if ((v5 & 1) != 0)
LABEL_20:
    PB::TextFormatter::format(a2, "timestamp");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ProxBaselineEstimatorState::readFrom(CMMsl::ProxBaselineEstimatorState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  int v26;
  BOOL v27;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_94;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 22) |= 1u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v28 = 0;
          v29 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              v24 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_103;
            }
            v30 = v20++;
            v31 = *(_BYTE *)(v21 + v30);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v14 = v29++ > 8;
            if (v14)
            {
              v24 = 0;
LABEL_102:
              v2 = v30 + 1;
              goto LABEL_103;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v24 = 0;
          goto LABEL_102;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_103;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        v24 = 0;
LABEL_103:
        *((_QWORD *)this + 1) = v24;
        break;
      case 2u:
        *((_DWORD *)this + 22) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_82;
        *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_93;
      case 3u:
        *((_DWORD *)this + 22) |= 0x400u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_82;
        *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_93;
      case 4u:
        *((_DWORD *)this + 22) |= 0x1000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_82;
        *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_93;
      case 5u:
        *((_DWORD *)this + 22) |= 0x800u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_82;
        *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_93;
      case 6u:
        *((_DWORD *)this + 22) |= 0x10000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_82;
        *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_93;
      case 7u:
        *((_DWORD *)this + 22) |= 0x20000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_82;
        *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_93;
      case 8u:
        *((_DWORD *)this + 22) |= 0x40000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v27 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v26 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v27 = v26 != 0;
        }
        *((_BYTE *)this + 84) = v27;
        break;
      case 9u:
        *((_DWORD *)this + 22) |= 0x4000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_82;
        *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_93;
      case 0xAu:
        *((_DWORD *)this + 22) |= 0x2000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_82;
        *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_93;
      case 0xBu:
        *((_DWORD *)this + 22) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_82;
        *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_93;
      case 0xCu:
        *((_DWORD *)this + 22) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_82;
        *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_93;
      case 0xDu:
        *((_DWORD *)this + 22) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_82;
        *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_93;
      case 0xEu:
        *((_DWORD *)this + 22) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_82;
        *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_93;
      case 0xFu:
        *((_DWORD *)this + 22) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_82;
        *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_93;
      case 0x10u:
        *((_DWORD *)this + 22) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_82;
        *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_93;
      case 0x11u:
        *((_DWORD *)this + 22) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_82;
        *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_93;
      case 0x12u:
        *((_DWORD *)this + 22) |= 0x8000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_82;
        *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_93;
      case 0x13u:
        *((_DWORD *)this + 22) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_93:
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_82:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_94:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::ProxBaselineEstimatorState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 88);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_DWORD *)(v3 + 88);
    if ((v4 & 0x100) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0)
        goto LABEL_4;
      goto LABEL_23;
    }
  }
  else if ((v4 & 0x100) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 0x1000) == 0)
      goto LABEL_5;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x1000) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0)
      goto LABEL_6;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 60));
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x10000) == 0)
      goto LABEL_7;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x10000) == 0)
  {
LABEL_7:
    if ((v4 & 0x20000) == 0)
      goto LABEL_8;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(float *)(v3 + 76));
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x20000) == 0)
  {
LABEL_8:
    if ((v4 & 0x40000) == 0)
      goto LABEL_9;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(float *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x40000) == 0)
  {
LABEL_9:
    if ((v4 & 0x4000) == 0)
      goto LABEL_10;
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x4000) == 0)
  {
LABEL_10:
    if ((v4 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(float *)(v3 + 68));
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x2000) == 0)
  {
LABEL_11:
    if ((v4 & 2) == 0)
      goto LABEL_12;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(float *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 2) == 0)
  {
LABEL_12:
    if ((v4 & 0x20) == 0)
      goto LABEL_13;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x20) == 0)
  {
LABEL_13:
    if ((v4 & 0x40) == 0)
      goto LABEL_14;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x40) == 0)
  {
LABEL_14:
    if ((v4 & 0x80) == 0)
      goto LABEL_15;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x80) == 0)
  {
LABEL_15:
    if ((v4 & 4) == 0)
      goto LABEL_16;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 4) == 0)
  {
LABEL_16:
    if ((v4 & 8) == 0)
      goto LABEL_17;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 8) == 0)
  {
LABEL_17:
    if ((v4 & 0x10) == 0)
      goto LABEL_18;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x10) == 0)
  {
LABEL_18:
    if ((v4 & 0x8000) == 0)
      goto LABEL_19;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x8000) == 0)
  {
LABEL_19:
    if ((v4 & 0x200) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 48));
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 72));
  if ((*(_DWORD *)(v3 + 88) & 0x200) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 48));
  return this;
}

uint64_t CMMsl::ProxBaselineEstimatorState::hash_value(CMMsl::ProxBaselineEstimatorState *this)
{
  int v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  float v36;
  uint64_t v37;

  v1 = *((_DWORD *)this + 22);
  if ((v1 & 1) == 0)
  {
    v2 = 0;
    if ((v1 & 0x100) != 0)
      goto LABEL_3;
LABEL_56:
    v4 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_6;
LABEL_57:
    v6 = 0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_9;
LABEL_58:
    v8 = 0;
    if ((v1 & 0x800) != 0)
      goto LABEL_12;
LABEL_59:
    v10 = 0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_15;
LABEL_60:
    v12 = 0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_18;
LABEL_61:
    v14 = 0;
    if ((v1 & 0x40000) != 0)
      goto LABEL_21;
    goto LABEL_62;
  }
  v2 = *((_QWORD *)this + 1);
  if ((v1 & 0x100) == 0)
    goto LABEL_56;
LABEL_3:
  v3 = *((float *)this + 11);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  if ((v1 & 0x400) == 0)
    goto LABEL_57;
LABEL_6:
  v5 = *((float *)this + 13);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((v1 & 0x1000) == 0)
    goto LABEL_58;
LABEL_9:
  v7 = *((float *)this + 15);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 0x800) == 0)
    goto LABEL_59;
LABEL_12:
  v9 = *((float *)this + 14);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((v1 & 0x10000) == 0)
    goto LABEL_60;
LABEL_15:
  v11 = *((float *)this + 19);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((v1 & 0x20000) == 0)
    goto LABEL_61;
LABEL_18:
  v13 = *((float *)this + 20);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((v1 & 0x40000) != 0)
  {
LABEL_21:
    v15 = *((unsigned __int8 *)this + 84);
    if ((v1 & 0x4000) != 0)
      goto LABEL_22;
LABEL_63:
    v17 = 0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_25;
LABEL_64:
    v19 = 0;
    if ((v1 & 2) != 0)
      goto LABEL_28;
LABEL_65:
    v21 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_31;
LABEL_66:
    v23 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_34;
LABEL_67:
    v25 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_37;
LABEL_68:
    v27 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_40;
LABEL_69:
    v29 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_43;
LABEL_70:
    v31 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_46;
LABEL_71:
    v33 = 0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_49;
    goto LABEL_72;
  }
LABEL_62:
  v15 = 0;
  if ((v1 & 0x4000) == 0)
    goto LABEL_63;
LABEL_22:
  v16 = *((float *)this + 17);
  v17 = LODWORD(v16);
  if (v16 == 0.0)
    v17 = 0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_64;
LABEL_25:
  v18 = *((float *)this + 16);
  v19 = LODWORD(v18);
  if (v18 == 0.0)
    v19 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_65;
LABEL_28:
  v20 = *((float *)this + 4);
  v21 = LODWORD(v20);
  if (v20 == 0.0)
    v21 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_66;
LABEL_31:
  v22 = *((float *)this + 8);
  v23 = LODWORD(v22);
  if (v22 == 0.0)
    v23 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_67;
LABEL_34:
  v24 = *((float *)this + 9);
  v25 = LODWORD(v24);
  if (v24 == 0.0)
    v25 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_68;
LABEL_37:
  v26 = *((float *)this + 10);
  v27 = LODWORD(v26);
  if (v26 == 0.0)
    v27 = 0;
  if ((v1 & 4) == 0)
    goto LABEL_69;
LABEL_40:
  v28 = *((float *)this + 5);
  v29 = LODWORD(v28);
  if (v28 == 0.0)
    v29 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_70;
LABEL_43:
  v30 = *((float *)this + 6);
  v31 = LODWORD(v30);
  if (v30 == 0.0)
    v31 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_71;
LABEL_46:
  v32 = *((float *)this + 7);
  v33 = LODWORD(v32);
  if (v32 == 0.0)
    v33 = 0;
  if ((v1 & 0x8000) != 0)
  {
LABEL_49:
    v34 = *((float *)this + 18);
    v35 = LODWORD(v34);
    if (v34 == 0.0)
      v35 = 0;
    if ((v1 & 0x200) != 0)
      goto LABEL_52;
LABEL_73:
    v37 = 0;
    return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v15 ^ v17 ^ v19 ^ v21 ^ v23 ^ v25 ^ v27 ^ v29 ^ v31 ^ v33 ^ v35 ^ v37;
  }
LABEL_72:
  v35 = 0;
  if ((v1 & 0x200) == 0)
    goto LABEL_73;
LABEL_52:
  v36 = *((float *)this + 12);
  v37 = LODWORD(v36);
  if (v36 == 0.0)
    v37 = 0;
  return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v15 ^ v17 ^ v19 ^ v21 ^ v23 ^ v25 ^ v27 ^ v29 ^ v31 ^ v33 ^ v35 ^ v37;
}

void CMMsl::ProxCalibration::~ProxCalibration(CMMsl::ProxCalibration *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_2513605E8;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::ProxCalibration::~ProxCalibration(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::ProxCalibration *CMMsl::ProxCalibration::ProxCalibration(CMMsl::ProxCalibration *this, const CMMsl::ProxCalibration *a2)
{
  _QWORD *v4;
  char v5;
  char v6;
  int v7;
  int v8;
  int v9;
  int v11;

  *(_QWORD *)this = &off_2513605E8;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (_QWORD *)((char *)this + 8);
  *((_DWORD *)this + 18) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  v5 = *((_BYTE *)a2 + 72);
  if ((v5 & 2) != 0)
  {
    v7 = *((_DWORD *)a2 + 15);
    v6 = 2;
    *((_BYTE *)this + 72) = 2;
    *((_DWORD *)this + 15) = v7;
    v5 = *((_BYTE *)a2 + 72);
    if ((v5 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((*((_BYTE *)a2 + 72) & 1) != 0)
  {
LABEL_5:
    v8 = *((_DWORD *)a2 + 14);
    v6 |= 1u;
    *((_BYTE *)this + 72) = v6;
    *((_DWORD *)this + 14) = v8;
    v5 = *((_BYTE *)a2 + 72);
  }
LABEL_6:
  if ((v5 & 4) == 0)
  {
    if ((v5 & 8) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
  v11 = *((_DWORD *)a2 + 16);
  v6 |= 4u;
  *((_BYTE *)this + 72) = v6;
  *((_DWORD *)this + 16) = v11;
  if ((*((_BYTE *)a2 + 72) & 8) != 0)
  {
LABEL_8:
    v9 = *((_DWORD *)a2 + 17);
    *((_BYTE *)this + 72) = v6 | 8;
    *((_DWORD *)this + 17) = v9;
  }
LABEL_9:
  if (this != a2)
  {
    sub_242911380(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
    sub_242911380((_QWORD *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
  }
  return this;
}

uint64_t CMMsl::ProxCalibration::operator=(uint64_t a1, const CMMsl::ProxCalibration *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  if ((const CMMsl::ProxCalibration *)a1 != a2)
  {
    CMMsl::ProxCalibration::ProxCalibration((CMMsl::ProxCalibration *)&v11, a2);
    v3 = v16;
    v4 = *(_QWORD *)(a1 + 56);
    v5 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 56) = v15;
    *(_QWORD *)(a1 + 64) = v3;
    v6 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v17;
    v17 = v6;
    v15 = v4;
    v16 = v5;
    v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    v12 = v7;
    v8 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v13;
    v13 = v8;
    v9 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v14;
    v14 = v9;
    CMMsl::ProxCalibration::~ProxCalibration((CMMsl::ProxCalibration *)&v11);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::ProxCalibration *a2, CMMsl::ProxCalibration *a3)
{
  int v3;
  int v4;
  float result;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v3;
  v4 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  result = *((float *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((float *)a2 + 14) = result;
  v6 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v6;
  v7 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v7;
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v8;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v9;
  v10 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v10;
  v11 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v11;
  v12 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v12;
  v13 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v13;
  return result;
}

uint64_t CMMsl::ProxCalibration::ProxCalibration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = &off_2513605E8;
  v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = 0;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  sub_242911330(v4, (__n128 *)(a2 + 32));
  return a1;
}

uint64_t CMMsl::ProxCalibration::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  if (a1 != a2)
  {
    CMMsl::ProxCalibration::ProxCalibration((uint64_t)&v11, a2);
    v3 = v16;
    v4 = *(_QWORD *)(a1 + 56);
    v5 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 56) = v15;
    *(_QWORD *)(a1 + 64) = v3;
    v6 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v17;
    v17 = v6;
    v15 = v4;
    v16 = v5;
    v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    v12 = v7;
    v8 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v13;
    v13 = v8;
    v9 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v14;
    v14 = v9;
    CMMsl::ProxCalibration::~ProxCalibration((CMMsl::ProxCalibration *)&v11);
  }
  return a1;
}

uint64_t CMMsl::ProxCalibration::formatText(CMMsl::ProxCalibration *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;
  float *v6;
  float *v7;
  float v8;
  float *v9;
  float *v10;
  float v11;
  char v12;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 72);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "bC150RXAVE", *((float *)this + 14));
    v5 = *((_BYTE *)this + 72);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "gC0RXAVE", *((float *)this + 15));
  v6 = (float *)*((_QWORD *)this + 1);
  v7 = (float *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(a2, "ntcRamp", v8);
  }
  v9 = (float *)*((_QWORD *)this + 4);
  v10 = (float *)*((_QWORD *)this + 5);
  while (v9 != v10)
  {
    v11 = *v9++;
    PB::TextFormatter::format(a2, "rxXT", v11);
  }
  v12 = *((_BYTE *)this + 72);
  if ((v12 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "versionPxCL");
    v12 = *((_BYTE *)this + 72);
  }
  if ((v12 & 8) != 0)
    PB::TextFormatter::format(a2, "versionPxTC");
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::ProxCalibration::readFrom(CMMsl::ProxCalibration *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  _DWORD *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  _DWORD *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _DWORD *v63;
  int v64;
  unint64_t v65;
  char v66;
  unsigned int v67;
  unint64_t v68;
  char v69;
  char v70;
  unsigned int v71;
  unint64_t v72;
  char v73;
  unint64_t v74;
  char *v75;
  _DWORD *v76;
  unint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  _DWORD *v91;
  int v92;
  _DWORD *v93;
  int v94;
  unint64_t v95;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_21:
      v19 = v11 & 7;
      if (v19 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 72) |= 2u;
          v20 = *((_QWORD *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFFBLL || v20 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_151;
          *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v20);
          goto LABEL_153;
        case 2u:
          *((_BYTE *)this + 72) |= 1u;
          v21 = *((_QWORD *)a2 + 1);
          if (v21 > 0xFFFFFFFFFFFFFFFBLL || v21 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_151;
          *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v21);
          goto LABEL_153;
        case 3u:
          *((_BYTE *)this + 72) |= 4u;
          v22 = *((_QWORD *)a2 + 1);
          v23 = *((_QWORD *)a2 + 2);
          v24 = *(_QWORD *)a2;
          if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
          {
            v25 = 0;
            v26 = 0;
            v27 = 0;
            do
            {
              v28 = v22 + 1;
              *((_QWORD *)a2 + 1) = v22 + 1;
              v29 = *(_BYTE *)(v24 + v22);
              v27 |= (unint64_t)(v29 & 0x7F) << v25;
              if ((v29 & 0x80) == 0)
                goto LABEL_131;
              v25 += 7;
              v22 = v28;
              v14 = v26++ > 8;
            }
            while (!v14);
LABEL_97:
            LODWORD(v27) = 0;
            goto LABEL_131;
          }
          v66 = 0;
          v67 = 0;
          v27 = 0;
          if (v23 <= v22)
            v23 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v23 == v22)
            {
              LODWORD(v27) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v68 = v22 + 1;
              v69 = *(_BYTE *)(v24 + v22);
              *((_QWORD *)a2 + 1) = v68;
              v27 |= (unint64_t)(v69 & 0x7F) << v66;
              if (v69 < 0)
              {
                v66 += 7;
                v22 = v68;
                v14 = v67++ > 8;
                if (v14)
                  goto LABEL_97;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v27) = 0;
            }
            break;
          }
LABEL_131:
          *((_DWORD *)this + 16) = v27;
          goto LABEL_154;
        case 4u:
          *((_BYTE *)this + 72) |= 8u;
          v30 = *((_QWORD *)a2 + 1);
          v31 = *((_QWORD *)a2 + 2);
          v32 = *(_QWORD *)a2;
          if (v30 <= 0xFFFFFFFFFFFFFFF5 && v30 + 10 <= v31)
          {
            v33 = 0;
            v34 = 0;
            v35 = 0;
            do
            {
              v36 = v30 + 1;
              *((_QWORD *)a2 + 1) = v30 + 1;
              v37 = *(_BYTE *)(v32 + v30);
              v35 |= (unint64_t)(v37 & 0x7F) << v33;
              if ((v37 & 0x80) == 0)
                goto LABEL_134;
              v33 += 7;
              v30 = v36;
              v14 = v34++ > 8;
            }
            while (!v14);
LABEL_104:
            LODWORD(v35) = 0;
            goto LABEL_134;
          }
          v70 = 0;
          v71 = 0;
          v35 = 0;
          if (v31 <= v30)
            v31 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v31 == v30)
            {
              LODWORD(v35) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v72 = v30 + 1;
              v73 = *(_BYTE *)(v32 + v30);
              *((_QWORD *)a2 + 1) = v72;
              v35 |= (unint64_t)(v73 & 0x7F) << v70;
              if (v73 < 0)
              {
                v70 += 7;
                v30 = v72;
                v14 = v71++ > 8;
                if (v14)
                  goto LABEL_104;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v35) = 0;
            }
            break;
          }
LABEL_134:
          *((_DWORD *)this + 17) = v35;
          goto LABEL_154;
        case 5u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v38 = *((_QWORD *)a2 + 1);
            v39 = *((_QWORD *)a2 + 2);
            while (v38 < v39 && !*((_BYTE *)a2 + 24))
            {
              v41 = (char *)*((_QWORD *)this + 2);
              v40 = *((_QWORD *)this + 3);
              if ((unint64_t)v41 >= v40)
              {
                v43 = (char *)*((_QWORD *)this + 1);
                v44 = (v41 - v43) >> 2;
                v45 = v44 + 1;
                if ((unint64_t)(v44 + 1) >> 62)
                  goto LABEL_163;
                v46 = v40 - (_QWORD)v43;
                if (v46 >> 1 > v45)
                  v45 = v46 >> 1;
                if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL)
                  v47 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v47 = v45;
                if (v47)
                {
                  v47 = (unint64_t)sub_2429114B8(v47);
                  v43 = (char *)*((_QWORD *)this + 1);
                  v41 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v48 = 0;
                }
                v49 = (_DWORD *)(v47 + 4 * v44);
                *v49 = 0;
                v42 = v49 + 1;
                while (v41 != v43)
                {
                  v50 = *((_DWORD *)v41 - 1);
                  v41 -= 4;
                  *--v49 = v50;
                }
                *((_QWORD *)this + 1) = v49;
                *((_QWORD *)this + 2) = v42;
                *((_QWORD *)this + 3) = v47 + 4 * v48;
                if (v43)
                  operator delete(v43);
              }
              else
              {
                *(_DWORD *)v41 = 0;
                v42 = v41 + 4;
              }
              *((_QWORD *)this + 2) = v42;
              v51 = *((_QWORD *)a2 + 1);
              if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_109;
              *(v42 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v51);
              v39 = *((_QWORD *)a2 + 2);
              v38 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v38;
            }
            goto LABEL_110;
          }
          v75 = (char *)*((_QWORD *)this + 2);
          v74 = *((_QWORD *)this + 3);
          if ((unint64_t)v75 >= v74)
          {
            v79 = (char *)*((_QWORD *)this + 1);
            v80 = (v75 - v79) >> 2;
            v81 = v80 + 1;
            if ((unint64_t)(v80 + 1) >> 62)
              goto LABEL_163;
            v82 = v74 - (_QWORD)v79;
            if (v82 >> 1 > v81)
              v81 = v82 >> 1;
            if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFFCLL)
              v83 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v83 = v81;
            if (v83)
            {
              v83 = (unint64_t)sub_2429114B8(v83);
              v79 = (char *)*((_QWORD *)this + 1);
              v75 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v84 = 0;
            }
            v91 = (_DWORD *)(v83 + 4 * v80);
            *v91 = 0;
            v76 = v91 + 1;
            while (v75 != v79)
            {
              v92 = *((_DWORD *)v75 - 1);
              v75 -= 4;
              *--v91 = v92;
            }
            *((_QWORD *)this + 1) = v91;
            *((_QWORD *)this + 2) = v76;
            *((_QWORD *)this + 3) = v83 + 4 * v84;
            if (v79)
              operator delete(v79);
          }
          else
          {
            *(_DWORD *)v75 = 0;
            v76 = v75 + 4;
          }
          *((_QWORD *)this + 2) = v76;
          goto LABEL_149;
        case 6u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v52 = *((_QWORD *)a2 + 1);
            v53 = *((_QWORD *)a2 + 2);
            while (v52 < v53 && !*((_BYTE *)a2 + 24))
            {
              v55 = (char *)*((_QWORD *)this + 5);
              v54 = *((_QWORD *)this + 6);
              if ((unint64_t)v55 >= v54)
              {
                v57 = (char *)*((_QWORD *)this + 4);
                v58 = (v55 - v57) >> 2;
                v59 = v58 + 1;
                if ((unint64_t)(v58 + 1) >> 62)
                  goto LABEL_163;
                v60 = v54 - (_QWORD)v57;
                if (v60 >> 1 > v59)
                  v59 = v60 >> 1;
                if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL)
                  v61 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v61 = v59;
                if (v61)
                {
                  v61 = (unint64_t)sub_2429114B8(v61);
                  v57 = (char *)*((_QWORD *)this + 4);
                  v55 = (char *)*((_QWORD *)this + 5);
                }
                else
                {
                  v62 = 0;
                }
                v63 = (_DWORD *)(v61 + 4 * v58);
                *v63 = 0;
                v56 = v63 + 1;
                while (v55 != v57)
                {
                  v64 = *((_DWORD *)v55 - 1);
                  v55 -= 4;
                  *--v63 = v64;
                }
                *((_QWORD *)this + 4) = v63;
                *((_QWORD *)this + 5) = v56;
                *((_QWORD *)this + 6) = v61 + 4 * v62;
                if (v57)
                  operator delete(v57);
              }
              else
              {
                *(_DWORD *)v55 = 0;
                v56 = v55 + 4;
              }
              *((_QWORD *)this + 5) = v56;
              v65 = *((_QWORD *)a2 + 1);
              if (v65 > 0xFFFFFFFFFFFFFFFBLL || v65 + 4 > *((_QWORD *)a2 + 2))
              {
LABEL_109:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v56 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v65);
              v53 = *((_QWORD *)a2 + 2);
              v52 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v52;
            }
LABEL_110:
            PB::Reader::recallMark();
          }
          else
          {
            v78 = (char *)*((_QWORD *)this + 5);
            v77 = *((_QWORD *)this + 6);
            if ((unint64_t)v78 >= v77)
            {
              v85 = (char *)*((_QWORD *)this + 4);
              v86 = (v78 - v85) >> 2;
              v87 = v86 + 1;
              if ((unint64_t)(v86 + 1) >> 62)
LABEL_163:
                sub_242729A44();
              v88 = v77 - (_QWORD)v85;
              if (v88 >> 1 > v87)
                v87 = v88 >> 1;
              if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFFCLL)
                v89 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v89 = v87;
              if (v89)
              {
                v89 = (unint64_t)sub_2429114B8(v89);
                v85 = (char *)*((_QWORD *)this + 4);
                v78 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v90 = 0;
              }
              v93 = (_DWORD *)(v89 + 4 * v86);
              *v93 = 0;
              v76 = v93 + 1;
              while (v78 != v85)
              {
                v94 = *((_DWORD *)v78 - 1);
                v78 -= 4;
                *--v93 = v94;
              }
              *((_QWORD *)this + 4) = v93;
              *((_QWORD *)this + 5) = v76;
              *((_QWORD *)this + 6) = v89 + 4 * v90;
              if (v85)
                operator delete(v85);
            }
            else
            {
              *(_DWORD *)v78 = 0;
              v76 = v78 + 4;
            }
            *((_QWORD *)this + 5) = v76;
LABEL_149:
            v95 = *((_QWORD *)a2 + 1);
            if (v95 <= 0xFFFFFFFFFFFFFFFBLL && v95 + 4 <= *((_QWORD *)a2 + 2))
            {
              *(v76 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v95);
LABEL_153:
              *((_QWORD *)a2 + 1) += 4;
            }
            else
            {
LABEL_151:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
          break;
        default:
          goto LABEL_19;
      }
      goto LABEL_154;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_21;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    if ((PB::Reader::skip(a2) & 1) == 0)
      return 0;
LABEL_154:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
}

uint64_t CMMsl::ProxCalibration::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;

  v3 = this;
  v4 = *(_BYTE *)(this + 72);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 60));
    v4 = *(_BYTE *)(v3 + 72);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
LABEL_15:
      this = PB::Writer::writeVarInt(a2);
      if ((*(_BYTE *)(v3 + 72) & 8) == 0)
        goto LABEL_6;
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(this + 72) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  v4 = *(_BYTE *)(v3 + 72);
  if ((v4 & 4) != 0)
    goto LABEL_15;
LABEL_4:
  if ((v4 & 8) != 0)
LABEL_5:
    this = PB::Writer::writeVarInt(a2);
LABEL_6:
  v5 = *(float **)(v3 + 8);
  v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7);
  }
  v9 = *(float **)(v3 + 32);
  v8 = *(float **)(v3 + 40);
  while (v9 != v8)
  {
    v10 = *v9++;
    this = PB::Writer::write(a2, v10);
  }
  return this;
}

uint64_t CMMsl::ProxCalibration::hash_value(CMMsl::ProxCalibration *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;

  if ((*((_BYTE *)this + 72) & 2) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 72) & 1) != 0)
      goto LABEL_3;
LABEL_11:
    v3 = 0;
    if ((*((_BYTE *)this + 72) & 4) != 0)
      goto LABEL_6;
LABEL_12:
    v4 = 0;
    if ((*((_BYTE *)this + 72) & 8) != 0)
      goto LABEL_7;
LABEL_13:
    v5 = 0;
    goto LABEL_14;
  }
  v6 = *((float *)this + 15);
  v1 = LODWORD(v6);
  if (v6 == 0.0)
    v1 = 0;
  if ((*((_BYTE *)this + 72) & 1) == 0)
    goto LABEL_11;
LABEL_3:
  v2 = *((float *)this + 14);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 72) & 4) == 0)
    goto LABEL_12;
LABEL_6:
  v4 = *((int *)this + 16);
  if ((*((_BYTE *)this + 72) & 8) == 0)
    goto LABEL_13;
LABEL_7:
  v5 = *((int *)this + 17);
LABEL_14:
  v7 = v3 ^ v1 ^ v4 ^ v5 ^ PBHashBytes();
  return v7 ^ PBHashBytes();
}

void CMMsl::ProxPDP::~ProxPDP(CMMsl::ProxPDP *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::ProxPDP::ProxPDP(uint64_t this, const CMMsl::ProxPDP *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  char v12;
  char v13;

  *(_QWORD *)this = &off_251360620;
  *(_DWORD *)(this + 48) = 0;
  v2 = *((_WORD *)a2 + 24);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_WORD *)(this + 48) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_WORD *)a2 + 24);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 8) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 6);
    v3 |= 8u;
    *(_WORD *)(this + 48) = v3;
    *(_DWORD *)(this + 24) = v5;
    v2 = *((_WORD *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    v6 = *((_DWORD *)a2 + 8);
    v3 |= 0x20u;
    *(_WORD *)(this + 48) = v3;
    *(_DWORD *)(this + 32) = v6;
    v2 = *((_WORD *)a2 + 24);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0)
        goto LABEL_9;
      goto LABEL_17;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *(_WORD *)(this + 48) = v3;
  *(_DWORD *)(this + 28) = v7;
  v2 = *((_WORD *)a2 + 24);
  if ((v2 & 2) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_18;
  }
LABEL_17:
  v8 = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *(_WORD *)(this + 48) = v3;
  *(_DWORD *)(this + 16) = v8;
  v2 = *((_WORD *)a2 + 24);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 4) == 0)
      goto LABEL_11;
    goto LABEL_19;
  }
LABEL_18:
  v9 = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *(_WORD *)(this + 48) = v3;
  *(_DWORD *)(this + 36) = v9;
  v2 = *((_WORD *)a2 + 24);
  if ((v2 & 4) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_20;
  }
LABEL_19:
  v10 = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *(_WORD *)(this + 48) = v3;
  *(_DWORD *)(this + 20) = v10;
  v2 = *((_WORD *)a2 + 24);
  if ((v2 & 0x80) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_21;
  }
LABEL_20:
  v11 = *((_DWORD *)a2 + 10);
  v3 |= 0x80u;
  *(_WORD *)(this + 48) = v3;
  *(_DWORD *)(this + 40) = v11;
  v2 = *((_WORD *)a2 + 24);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 0x100) == 0)
      return this;
LABEL_22:
    v13 = *((_BYTE *)a2 + 44);
    *(_WORD *)(this + 48) = v3 | 0x100;
    *(_BYTE *)(this + 44) = v13;
    return this;
  }
LABEL_21:
  v12 = *((_BYTE *)a2 + 45);
  v3 |= 0x200u;
  *(_WORD *)(this + 48) = v3;
  *(_BYTE *)(this + 45) = v12;
  if ((*((_WORD *)a2 + 24) & 0x100) != 0)
    goto LABEL_22;
  return this;
}

uint64_t CMMsl::ProxPDP::operator=(uint64_t a1, const CMMsl::ProxPDP *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  int v7;
  _BYTE v9[8];
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  char v14;
  char v15;
  int v16;

  if ((const CMMsl::ProxPDP *)a1 != a2)
  {
    CMMsl::ProxPDP::ProxPDP((uint64_t)v9, a2);
    v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v16;
    v16 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v10;
    v10 = v4;
    v5 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v12;
    v12 = v5;
    v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v11;
    v11 = v6;
    v7 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v13;
    v13 = v7;
    LOBYTE(v4) = *(_BYTE *)(a1 + 45);
    *(_BYTE *)(a1 + 45) = v15;
    v15 = v4;
    LOBYTE(v4) = *(_BYTE *)(a1 + 44);
    *(_BYTE *)(a1 + 44) = v14;
    v14 = v4;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::ProxPDP *a2, CMMsl::ProxPDP *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  float result;

  v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v5;
  v6 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v6;
  v7 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v7;
  v8 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v8;
  v9 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v9;
  v10 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v10;
  result = *((float *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((float *)a2 + 10) = result;
  LOBYTE(v4) = *((_BYTE *)this + 45);
  *((_BYTE *)this + 45) = *((_BYTE *)a2 + 45);
  *((_BYTE *)a2 + 45) = v4;
  LOBYTE(v4) = *((_BYTE *)this + 44);
  *((_BYTE *)this + 44) = *((_BYTE *)a2 + 44);
  *((_BYTE *)a2 + 44) = v4;
  return result;
}

float CMMsl::ProxPDP::ProxPDP(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_251360620;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  result = *(float *)(a2 + 40);
  *(float *)(a1 + 40) = result;
  *(_BYTE *)(a1 + 45) = *(_BYTE *)(a2 + 45);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  return result;
}

uint64_t CMMsl::ProxPDP::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  char v6;
  char v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v13[2];
  __int128 v14;
  uint64_t v15;
  int v16;
  char v17;
  char v18;
  int v19;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a2 + 48) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_DWORD *)(a2 + 40);
    v6 = *(_BYTE *)(a2 + 45);
    v7 = *(_BYTE *)(a2 + 44);
    v19 = *(_DWORD *)(a1 + 48);
    v8 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v13[0] = &off_251360620;
    v13[1] = v8;
    v15 = *(_QWORD *)(a1 + 32);
    v9 = *(_OWORD *)(a1 + 16);
    v10 = *(_OWORD *)(a2 + 16);
    v11 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 48) = v3;
    *(_QWORD *)(a1 + 32) = v11;
    *(_OWORD *)(a1 + 16) = v10;
    v14 = v9;
    LODWORD(v9) = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v5;
    v16 = v9;
    LOBYTE(v3) = *(_BYTE *)(a1 + 45);
    *(_BYTE *)(a1 + 45) = v6;
    v18 = v3;
    LOBYTE(v3) = *(_BYTE *)(a1 + 44);
    *(_BYTE *)(a1 + 44) = v7;
    v17 = v3;
    PB::Base::~Base((PB::Base *)v13);
  }
  return a1;
}

uint64_t CMMsl::ProxPDP::formatText(CMMsl::ProxPDP *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 24);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "ambient", *((float *)this + 4));
    v5 = *((_WORD *)this + 24);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "baselineConfidence", *((float *)this + 5));
  v5 = *((_WORD *)this + 24);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "intensity", *((float *)this + 6));
  v5 = *((_WORD *)this + 24);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "intensityBaselineDelta", *((float *)this + 7));
  v5 = *((_WORD *)this + 24);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "intensityCalDelta", *((float *)this + 8));
  v5 = *((_WORD *)this + 24);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "pocketFlag");
  v5 = *((_WORD *)this + 24);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "pocketProbability", *((float *)this + 9));
  v5 = *((_WORD *)this + 24);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
LABEL_21:
    PB::TextFormatter::format(a2, "scanFlags");
    if ((*((_WORD *)this + 24) & 1) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_11;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "rxNtcC", *((float *)this + 10));
  v5 = *((_WORD *)this + 24);
  if ((v5 & 0x200) != 0)
    goto LABEL_21;
LABEL_10:
  if ((v5 & 1) != 0)
LABEL_11:
    PB::TextFormatter::format(a2, "timestamp");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ProxPDP::readFrom(CMMsl::ProxPDP *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  int v26;
  BOOL v27;
  int v28;
  BOOL v29;
  char v30;
  unsigned int v31;
  unint64_t v32;
  char v33;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_73;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 24) |= 1u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v30 = 0;
          v31 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              v24 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_72;
            }
            v32 = v20++;
            v33 = *(_BYTE *)(v21 + v32);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v33 & 0x7F) << v30;
            if ((v33 & 0x80) == 0)
              break;
            v30 += 7;
            v14 = v31++ > 8;
            if (v14)
            {
              v24 = 0;
LABEL_71:
              v2 = v32 + 1;
              goto LABEL_72;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v24 = 0;
          goto LABEL_71;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_72;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        v24 = 0;
LABEL_72:
        *((_QWORD *)this + 1) = v24;
        break;
      case 2u:
        *((_WORD *)this + 24) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_50;
        *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_67;
      case 3u:
        *((_WORD *)this + 24) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_50;
        *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_67;
      case 4u:
        *((_WORD *)this + 24) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_50;
        *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_67;
      case 5u:
        *((_WORD *)this + 24) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_50;
        *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_67;
      case 6u:
        *((_WORD *)this + 24) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_50;
        *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_67;
      case 7u:
        *((_WORD *)this + 24) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_50;
        *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_67;
      case 8u:
        *((_WORD *)this + 24) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_67:
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_50:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 9u:
        *((_WORD *)this + 24) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v27 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v26 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v27 = v26 != 0;
        }
        *((_BYTE *)this + 45) = v27;
        break;
      case 0xAu:
        *((_WORD *)this + 24) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v29 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v28 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v29 = v28 != 0;
        }
        *((_BYTE *)this + 44) = v29;
        break;
      default:
        goto LABEL_19;
    }
LABEL_73:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::ProxPDP::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 48);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_WORD *)(v3 + 48);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v4 & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 2) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 4) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0)
      return this;
    return PB::Writer::write(a2);
  }
LABEL_20:
  this = PB::Writer::write(a2);
  if ((*(_WORD *)(v3 + 48) & 0x100) != 0)
    return PB::Writer::write(a2);
  return this;
}

uint64_t CMMsl::ProxPDP::hash_value(CMMsl::ProxPDP *this)
{
  __int16 v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *((_WORD *)this + 24);
  if ((v1 & 1) == 0)
  {
    v2 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_3;
LABEL_27:
    v4 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_6;
LABEL_28:
    v6 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_9;
LABEL_29:
    v8 = 0;
    if ((v1 & 2) != 0)
      goto LABEL_12;
LABEL_30:
    v10 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_15;
LABEL_31:
    v12 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_18;
LABEL_32:
    v14 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_21;
LABEL_33:
    v16 = 0;
    if ((*((_WORD *)this + 24) & 0x200) != 0)
      goto LABEL_24;
LABEL_34:
    v17 = 0;
    if ((*((_WORD *)this + 24) & 0x100) != 0)
      goto LABEL_25;
LABEL_35:
    v18 = 0;
    return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v17 ^ v18;
  }
  v2 = *((_QWORD *)this + 1);
  if ((v1 & 8) == 0)
    goto LABEL_27;
LABEL_3:
  v3 = *((float *)this + 6);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_28;
LABEL_6:
  v5 = *((float *)this + 8);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_29;
LABEL_9:
  v7 = *((float *)this + 7);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_30;
LABEL_12:
  v9 = *((float *)this + 4);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_31;
LABEL_15:
  v11 = *((float *)this + 9);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((v1 & 4) == 0)
    goto LABEL_32;
LABEL_18:
  v13 = *((float *)this + 5);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_33;
LABEL_21:
  v15 = *((float *)this + 10);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  if ((*((_WORD *)this + 24) & 0x200) == 0)
    goto LABEL_34;
LABEL_24:
  v17 = *((unsigned __int8 *)this + 45);
  if ((*((_WORD *)this + 24) & 0x100) == 0)
    goto LABEL_35;
LABEL_25:
  v18 = *((unsigned __int8 *)this + 44);
  return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v17 ^ v18;
}

void CMMsl::RawAudio::~RawAudio(CMMsl::RawAudio *this)
{
  void *v2;

  *(_QWORD *)this = &off_251360658;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::RawAudio::~RawAudio(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::RawAudio *CMMsl::RawAudio::RawAudio(char **this, char **a2)
{
  _QWORD *v3;

  *this = (char *)&off_251360658;
  this[1] = 0;
  v3 = this + 1;
  this[2] = 0;
  this[3] = 0;
  if (this != a2)
    sub_242911380(v3, a2[1], a2[2], (a2[2] - a2[1]) >> 2);
  return (CMMsl::RawAudio *)this;
}

uint64_t CMMsl::RawAudio::operator=(uint64_t a1, char **a2)
{
  __int128 v3;
  uint64_t v4;
  char *v6;
  __int128 v7;
  uint64_t v8;

  if ((char **)a1 != a2)
  {
    CMMsl::RawAudio::RawAudio(&v6, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v4;
    CMMsl::RawAudio::~RawAudio((CMMsl::RawAudio *)&v6);
  }
  return a1;
}

_QWORD *CMMsl::swap(_QWORD *this, CMMsl::RawAudio *a2, CMMsl::RawAudio *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  return this;
}

_QWORD *CMMsl::RawAudio::RawAudio(_QWORD *a1, uint64_t a2)
{
  *a1 = &off_251360658;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  sub_242911330((uint64_t)(a1 + 1), (__n128 *)(a2 + 8));
  return a1;
}

{
  *a1 = &off_251360658;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  sub_242911330((uint64_t)(a1 + 1), (__n128 *)(a2 + 8));
  return a1;
}

uint64_t CMMsl::RawAudio::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  void (**v8)(CMMsl::RawAudio *__hidden);
  __int128 v9;
  uint64_t v10;

  if (a1 != a2)
  {
    v8 = &off_251360658;
    v3 = *(_QWORD *)(a2 + 24);
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v4;
    v9 = v5;
    v6 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v3;
    v10 = v6;
    CMMsl::RawAudio::~RawAudio((CMMsl::RawAudio *)&v8);
  }
  return a1;
}

uint64_t CMMsl::RawAudio::formatText(CMMsl::RawAudio *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v5 += 4;
    PB::TextFormatter::format(a2, "volts");
  }
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::RawAudio::readFrom(CMMsl::RawAudio *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  char *v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  BOOL v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v44;
  char *v45;
  _DWORD *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _DWORD *v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char v58;
  unsigned int v59;
  unint64_t v61;
  char v62;
  uint64_t v63;
  unint64_t v64;
  char v65;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v32 = v10++ > 8;
        if (v32)
          goto LABEL_67;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        if ((v11 & 7) == 2)
        {
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          if (*((_QWORD *)a2 + 1) < *((_QWORD *)a2 + 2) && !*((_BYTE *)a2 + 24))
          {
            v18 = (char *)*((_QWORD *)this + 2);
            do
            {
              v19 = *((_QWORD *)this + 3);
              if ((unint64_t)v18 >= v19)
              {
                v20 = (char *)*((_QWORD *)this + 1);
                v21 = (v18 - v20) >> 2;
                v22 = v21 + 1;
                if ((unint64_t)(v21 + 1) >> 62)
                  goto LABEL_115;
                v23 = v19 - (_QWORD)v20;
                if (v23 >> 1 > v22)
                  v22 = v23 >> 1;
                if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
                  v24 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v24 = v22;
                if (v24)
                {
                  v24 = (unint64_t)sub_2429114B8(v24);
                  v20 = (char *)*((_QWORD *)this + 1);
                  v18 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v25 = 0;
                }
                v26 = (_DWORD *)(v24 + 4 * v21);
                *v26 = 0;
                v27 = (char *)(v26 + 1);
                while (v18 != v20)
                {
                  v28 = *((_DWORD *)v18 - 1);
                  v18 -= 4;
                  *--v26 = v28;
                }
                *((_QWORD *)this + 1) = v26;
                *((_QWORD *)this + 2) = v27;
                *((_QWORD *)this + 3) = v24 + 4 * v25;
                if (v20)
                  operator delete(v20);
                v18 = v27;
              }
              else
              {
                *(_DWORD *)v18 = 0;
                v18 += 4;
              }
              *((_QWORD *)this + 2) = v18;
              v30 = *((_QWORD *)a2 + 1);
              v29 = *((_QWORD *)a2 + 2);
              v31 = *(_QWORD *)a2;
              v32 = v30 > 0xFFFFFFFFFFFFFFF5 || v30 + 10 > v29;
              if (!v32)
              {
                v38 = 0;
                v39 = 0;
                v40 = 0;
                while (1)
                {
                  v41 = v30 + 1;
                  *((_QWORD *)a2 + 1) = v30 + 1;
                  v42 = *(_BYTE *)(v31 + v30);
                  v40 |= (unint64_t)(v42 & 0x7F) << v38;
                  if ((v42 & 0x80) == 0)
                    goto LABEL_64;
                  v38 += 7;
                  v30 = v41;
                  v32 = v39++ > 8;
                  if (v32)
                  {
                    LODWORD(v40) = 0;
                    goto LABEL_64;
                  }
                }
              }
              v33 = 0;
              v34 = 0;
              v40 = 0;
              if (v29 <= v30)
                v35 = *((_QWORD *)a2 + 1);
              else
                v35 = *((_QWORD *)a2 + 2);
              while (1)
              {
                if (v35 == v30)
                {
                  *((_BYTE *)a2 + 24) = 1;
                  *((_DWORD *)v18 - 1) = 0;
                  goto LABEL_84;
                }
                v36 = v30++;
                v37 = *(_BYTE *)(v31 + v36);
                *((_QWORD *)a2 + 1) = v30;
                v40 |= (unint64_t)(v37 & 0x7F) << v33;
                if ((v37 & 0x80) == 0)
                  break;
                v33 += 7;
                v32 = v34++ > 8;
                if (v32)
                {
                  LODWORD(v40) = 0;
                  goto LABEL_63;
                }
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v40) = 0;
LABEL_63:
              v41 = v36 + 1;
LABEL_64:
              *((_DWORD *)v18 - 1) = v40;
            }
            while (v41 < v29 && !*((_BYTE *)a2 + 24));
          }
LABEL_84:
          PB::Reader::recallMark();
        }
        else
        {
          v45 = (char *)*((_QWORD *)this + 2);
          v44 = *((_QWORD *)this + 3);
          if ((unint64_t)v45 >= v44)
          {
            v47 = (char *)*((_QWORD *)this + 1);
            v48 = (v45 - v47) >> 2;
            v49 = v48 + 1;
            if ((unint64_t)(v48 + 1) >> 62)
LABEL_115:
              sub_242729A44();
            v50 = v44 - (_QWORD)v47;
            if (v50 >> 1 > v49)
              v49 = v50 >> 1;
            if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
              v51 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v51 = v49;
            if (v51)
            {
              v51 = (unint64_t)sub_2429114B8(v51);
              v47 = (char *)*((_QWORD *)this + 1);
              v45 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v52 = 0;
            }
            v53 = (_DWORD *)(v51 + 4 * v48);
            *v53 = 0;
            v46 = v53 + 1;
            while (v45 != v47)
            {
              v54 = *((_DWORD *)v45 - 1);
              v45 -= 4;
              *--v53 = v54;
            }
            *((_QWORD *)this + 1) = v53;
            *((_QWORD *)this + 2) = v46;
            *((_QWORD *)this + 3) = v51 + 4 * v52;
            if (v47)
              operator delete(v47);
          }
          else
          {
            *(_DWORD *)v45 = 0;
            v46 = v45 + 4;
          }
          *((_QWORD *)this + 2) = v46;
          v55 = *((_QWORD *)a2 + 1);
          v56 = *((_QWORD *)a2 + 2);
          v57 = *(_QWORD *)a2;
          v58 = 0;
          v59 = 0;
          if (v55 > 0xFFFFFFFFFFFFFFF5 || v55 + 10 > v56)
          {
            v63 = 0;
            if (v56 <= v55)
              v56 = *((_QWORD *)a2 + 1);
            while (1)
            {
              if (v56 == v55)
              {
                LODWORD(v63) = 0;
                *((_BYTE *)a2 + 24) = 1;
                goto LABEL_110;
              }
              v61 = v55 + 1;
              v62 = *(_BYTE *)(v57 + v55);
              *((_QWORD *)a2 + 1) = v61;
              v63 |= (unint64_t)(v62 & 0x7F) << v58;
              if ((v62 & 0x80) == 0)
                break;
              v58 += 7;
              v55 = v61;
              v32 = v59++ > 8;
              if (v32)
              {
LABEL_106:
                LODWORD(v63) = 0;
                goto LABEL_110;
              }
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v63) = 0;
          }
          else
          {
            v63 = 0;
            while (1)
            {
              v64 = v55 + 1;
              *((_QWORD *)a2 + 1) = v55 + 1;
              v65 = *(_BYTE *)(v57 + v55);
              v63 |= (unint64_t)(v65 & 0x7F) << v58;
              if ((v65 & 0x80) == 0)
                break;
              v58 += 7;
              v55 = v64;
              v32 = v59++ > 8;
              if (v32)
                goto LABEL_106;
            }
          }
LABEL_110:
          *(v46 - 1) = v63;
        }
      }
      else
      {
LABEL_67:
        if ((PB::Reader::skip(a2) & 1) == 0)
          return 0;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v11 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      v32 = v15++ > 8;
      if (v32)
        goto LABEL_67;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::RawAudio::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(this + 8);
  for (i = *(_QWORD *)(this + 16); v2 != i; this = PB::Writer::writeVarInt(a2))
    v2 += 4;
  return this;
}

uint64_t CMMsl::RawAudio::hash_value(CMMsl::RawAudio *this)
{
  return PBHashBytes();
}

void CMMsl::RelDMInSystemConfig::~RelDMInSystemConfig(CMMsl::RelDMInSystemConfig *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_251360690;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    sub_242910C5C(v2);
  PB::Base::~Base(this);
}

{
  CMMsl::RelDMInSystemConfig::~RelDMInSystemConfig(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::RelDMInSystemConfig *CMMsl::RelDMInSystemConfig::RelDMInSystemConfig(CMMsl::RelDMInSystemConfig *this, const CMMsl::RelDMInSystemConfig *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = &off_251360690;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  if (*((_QWORD *)a2 + 1))
  {
    v4 = operator new();
    v5 = v4;
    v6 = (__int128 *)*((_QWORD *)a2 + 1);
    if (*((char *)v6 + 23) < 0)
    {
      sub_242910CE8((_BYTE *)v4, *(void **)v6, *((_QWORD *)v6 + 1));
    }
    else
    {
      v7 = *v6;
      *(_QWORD *)(v4 + 16) = *((_QWORD *)v6 + 2);
      *(_OWORD *)v4 = v7;
    }
    v8 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v8)
      sub_242910C5C(v8);
  }
  if ((*((_BYTE *)a2 + 24) & 1) != 0)
  {
    v9 = *((_QWORD *)a2 + 2);
    *((_BYTE *)this + 24) |= 1u;
    *((_QWORD *)this + 2) = v9;
  }
  return this;
}

uint64_t CMMsl::RelDMInSystemConfig::operator=(uint64_t a1, const CMMsl::RelDMInSystemConfig *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  if ((const CMMsl::RelDMInSystemConfig *)a1 != a2)
  {
    CMMsl::RelDMInSystemConfig::RelDMInSystemConfig((CMMsl::RelDMInSystemConfig *)&v7, a2);
    v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v8;
    v8 = v4;
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v9;
    v9 = v5;
    CMMsl::RelDMInSystemConfig::~RelDMInSystemConfig((CMMsl::RelDMInSystemConfig *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::RelDMInSystemConfig *a2, CMMsl::RelDMInSystemConfig *a3)
{
  int v3;
  uint64_t v4;
  double result;

  v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

uint64_t CMMsl::RelDMInSystemConfig::RelDMInSystemConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_251360690;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    sub_242910C5C(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t CMMsl::RelDMInSystemConfig::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  int v11;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v3;
    v11 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v10[0] = &off_251360690;
    v10[1] = v7;
    v8 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v5;
    v10[2] = v8;
    CMMsl::RelDMInSystemConfig::~RelDMInSystemConfig((CMMsl::RelDMInSystemConfig *)v10);
  }
  return a1;
}

uint64_t CMMsl::RelDMInSystemConfig::formatText(CMMsl::RelDMInSystemConfig *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format();
  if ((*((_BYTE *)this + 24) & 1) != 0)
    PB::TextFormatter::format(a2, "value", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::RelDMInSystemConfig::readFrom(CMMsl::RelDMInSystemConfig *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_26;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 24) |= 1u;
        v22 = *((_QWORD *)a2 + 1);
        if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v22);
          *((_QWORD *)a2 + 1) += 8;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else if ((v11 >> 3) == 1)
      {
        v19 = (_QWORD *)operator new();
        v19[1] = 0;
        v19[2] = 0;
        *v19 = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
          sub_242910C5C(v20);
        PB::Reader::read();
      }
      else
      {
LABEL_26:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_26;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::RelDMInSystemConfig::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;

  v3 = this;
  if (*(_QWORD *)(this + 8))
    this = PB::Writer::write();
  if ((*(_BYTE *)(v3 + 24) & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 16));
  return this;
}

unint64_t CMMsl::RelDMInSystemConfig::hash_value(CMMsl::RelDMInSystemConfig *this)
{
  unint64_t v2;
  double v3;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    v2 = sub_242910D74(v2);
  if ((*((_BYTE *)this + 24) & 1) != 0)
  {
    v3 = *((double *)this + 2);
    if (v3 == 0.0)
      v3 = 0.0;
  }
  else
  {
    v3 = 0.0;
  }
  return *(_QWORD *)&v3 ^ v2;
}

void CMMsl::RelativeDeviceMotionComplexTransition::~RelativeDeviceMotionComplexTransition(CMMsl::RelativeDeviceMotionComplexTransition *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::RelativeDeviceMotionComplexTransition::RelativeDeviceMotionComplexTransition(uint64_t this, const CMMsl::RelativeDeviceMotionComplexTransition *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  char v37;
  int v38;
  int v39;
  char v40;
  char v41;
  int v42;
  int v43;
  int v44;
  char v45;
  char v46;
  char v47;
  int v48;
  int v49;
  int v50;
  int v51;
  char v52;
  char v53;

  *(_QWORD *)this = &off_2513606C8;
  *(_QWORD *)(this + 188) = 0;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_QWORD *)(this + 188) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *(_QWORD *)((char *)a2 + 188);
    if ((v2 & 0x800000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x800000) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 26);
    v3 |= 0x800000uLL;
    *(_QWORD *)(this + 188) = v3;
    *(_DWORD *)(this + 104) = v5;
    v2 = *(_QWORD *)((char *)a2 + 188);
  }
LABEL_6:
  if ((v2 & 0x1000000) != 0)
  {
    v6 = *((_DWORD *)a2 + 27);
    v3 |= 0x1000000uLL;
    *(_QWORD *)(this + 188) = v3;
    *(_DWORD *)(this + 108) = v6;
    v2 = *(_QWORD *)((char *)a2 + 188);
    if ((v2 & 0x2000000) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        goto LABEL_9;
      goto LABEL_57;
    }
  }
  else if ((v2 & 0x2000000) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 28);
  v3 |= 0x2000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 112) = v7;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_58;
  }
LABEL_57:
  v8 = *((_DWORD *)a2 + 6);
  v3 |= 8uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 24) = v8;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x20) == 0)
      goto LABEL_11;
    goto LABEL_59;
  }
LABEL_58:
  v9 = *((_DWORD *)a2 + 7);
  v3 |= 0x10uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 28) = v9;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x20) == 0)
  {
LABEL_11:
    if ((v2 & 0x40000000) == 0)
      goto LABEL_12;
    goto LABEL_60;
  }
LABEL_59:
  v10 = *((_DWORD *)a2 + 8);
  v3 |= 0x20uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 32) = v10;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_61;
  }
LABEL_60:
  v11 = *((_DWORD *)a2 + 33);
  v3 |= 0x40000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 132) = v11;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 0x200000) == 0)
      goto LABEL_14;
    goto LABEL_62;
  }
LABEL_61:
  v12 = *((_DWORD *)a2 + 12);
  v3 |= 0x200uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 48) = v12;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x200000) == 0)
  {
LABEL_14:
    if ((v2 & 2) == 0)
      goto LABEL_15;
    goto LABEL_63;
  }
LABEL_62:
  v13 = *((_DWORD *)a2 + 24);
  v3 |= 0x200000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 96) = v13;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 2) == 0)
  {
LABEL_15:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_16;
    goto LABEL_64;
  }
LABEL_63:
  v14 = *((_DWORD *)a2 + 4);
  v3 |= 2uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 16) = v14;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_16:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_17;
    goto LABEL_65;
  }
LABEL_64:
  v15 = *((_DWORD *)a2 + 29);
  v3 |= 0x4000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 116) = v15;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_18;
    goto LABEL_66;
  }
LABEL_65:
  v16 = *((_DWORD *)a2 + 30);
  v3 |= 0x8000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 120) = v16;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x40) == 0)
      goto LABEL_19;
    goto LABEL_67;
  }
LABEL_66:
  v17 = *((_DWORD *)a2 + 31);
  v3 |= 0x10000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 124) = v17;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x40) == 0)
  {
LABEL_19:
    if ((v2 & 0x80) == 0)
      goto LABEL_20;
    goto LABEL_68;
  }
LABEL_67:
  v18 = *((_DWORD *)a2 + 9);
  v3 |= 0x40uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 36) = v18;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x80) == 0)
  {
LABEL_20:
    if ((v2 & 0x100) == 0)
      goto LABEL_21;
    goto LABEL_69;
  }
LABEL_68:
  v19 = *((_DWORD *)a2 + 10);
  v3 |= 0x80uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 40) = v19;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x100) == 0)
  {
LABEL_21:
    if ((v2 & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_70;
  }
LABEL_69:
  v20 = *((_DWORD *)a2 + 11);
  v3 |= 0x100uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 44) = v20;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_22:
    if ((v2 & 0x400) == 0)
      goto LABEL_23;
    goto LABEL_71;
  }
LABEL_70:
  v21 = *((_DWORD *)a2 + 34);
  v3 |= 0x80000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 136) = v21;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x400) == 0)
  {
LABEL_23:
    if ((v2 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_72;
  }
LABEL_71:
  v22 = *((_DWORD *)a2 + 13);
  v3 |= 0x400uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 52) = v22;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x400000) == 0)
  {
LABEL_24:
    if ((v2 & 4) == 0)
      goto LABEL_25;
    goto LABEL_73;
  }
LABEL_72:
  v23 = *((_DWORD *)a2 + 25);
  v3 |= 0x400000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 100) = v23;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 4) == 0)
  {
LABEL_25:
    if ((v2 & 0x400000000) == 0)
      goto LABEL_26;
    goto LABEL_74;
  }
LABEL_73:
  v24 = *((_DWORD *)a2 + 5);
  v3 |= 4uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 20) = v24;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x400000000) == 0)
  {
LABEL_26:
    if ((v2 & 0x4000) == 0)
      goto LABEL_27;
    goto LABEL_75;
  }
LABEL_74:
  v25 = *((_DWORD *)a2 + 37);
  v3 |= 0x400000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 148) = v25;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x4000) == 0)
  {
LABEL_27:
    if ((v2 & 0x2000000000) == 0)
      goto LABEL_28;
    goto LABEL_76;
  }
LABEL_75:
  v26 = *((_DWORD *)a2 + 17);
  v3 |= 0x4000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 68) = v26;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x2000000000) == 0)
  {
LABEL_28:
    if ((v2 & 0x20000) == 0)
      goto LABEL_29;
    goto LABEL_77;
  }
LABEL_76:
  v27 = *((_DWORD *)a2 + 40);
  v3 |= 0x2000000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 160) = v27;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x20000) == 0)
  {
LABEL_29:
    if ((v2 & 0x800000000) == 0)
      goto LABEL_30;
    goto LABEL_78;
  }
LABEL_77:
  v28 = *((_DWORD *)a2 + 20);
  v3 |= 0x20000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 80) = v28;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x800000000) == 0)
  {
LABEL_30:
    if ((v2 & 0x8000) == 0)
      goto LABEL_31;
    goto LABEL_79;
  }
LABEL_78:
  v29 = *((_DWORD *)a2 + 38);
  v3 |= 0x800000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 152) = v29;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x8000) == 0)
  {
LABEL_31:
    if ((v2 & 0x4000000000) == 0)
      goto LABEL_32;
    goto LABEL_80;
  }
LABEL_79:
  v30 = *((_DWORD *)a2 + 18);
  v3 |= 0x8000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 72) = v30;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x4000000000) == 0)
  {
LABEL_32:
    if ((v2 & 0x40000) == 0)
      goto LABEL_33;
    goto LABEL_81;
  }
LABEL_80:
  v31 = *((_DWORD *)a2 + 41);
  v3 |= 0x4000000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 164) = v31;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x40000) == 0)
  {
LABEL_33:
    if ((v2 & 0x1000000000) == 0)
      goto LABEL_34;
    goto LABEL_82;
  }
LABEL_81:
  v32 = *((_DWORD *)a2 + 21);
  v3 |= 0x40000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 84) = v32;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x1000000000) == 0)
  {
LABEL_34:
    if ((v2 & 0x10000) == 0)
      goto LABEL_35;
    goto LABEL_83;
  }
LABEL_82:
  v33 = *((_DWORD *)a2 + 39);
  v3 |= 0x1000000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 156) = v33;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x10000) == 0)
  {
LABEL_35:
    if ((v2 & 0x8000000000) == 0)
      goto LABEL_36;
    goto LABEL_84;
  }
LABEL_83:
  v34 = *((_DWORD *)a2 + 19);
  v3 |= 0x10000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 76) = v34;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x8000000000) == 0)
  {
LABEL_36:
    if ((v2 & 0x80000) == 0)
      goto LABEL_37;
    goto LABEL_85;
  }
LABEL_84:
  v35 = *((_DWORD *)a2 + 42);
  v3 |= 0x8000000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 168) = v35;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x80000) == 0)
  {
LABEL_37:
    if ((v2 & 0x200000000000) == 0)
      goto LABEL_38;
    goto LABEL_86;
  }
LABEL_85:
  v36 = *((_DWORD *)a2 + 22);
  v3 |= 0x80000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 88) = v36;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x200000000000) == 0)
  {
LABEL_38:
    if ((v2 & 0x800) == 0)
      goto LABEL_39;
    goto LABEL_87;
  }
LABEL_86:
  v37 = *((_BYTE *)a2 + 183);
  v3 |= 0x200000000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_BYTE *)(this + 183) = v37;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x800) == 0)
  {
LABEL_39:
    if ((v2 & 0x1000) == 0)
      goto LABEL_40;
    goto LABEL_88;
  }
LABEL_87:
  v38 = *((_DWORD *)a2 + 14);
  v3 |= 0x800uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 56) = v38;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x1000) == 0)
  {
LABEL_40:
    if ((v2 & 0x100000000000) == 0)
      goto LABEL_41;
    goto LABEL_89;
  }
LABEL_88:
  v39 = *((_DWORD *)a2 + 15);
  v3 |= 0x1000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 60) = v39;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x100000000000) == 0)
  {
LABEL_41:
    if ((v2 & 0x400000000000) == 0)
      goto LABEL_42;
    goto LABEL_90;
  }
LABEL_89:
  v40 = *((_BYTE *)a2 + 182);
  v3 |= 0x100000000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_BYTE *)(this + 182) = v40;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x400000000000) == 0)
  {
LABEL_42:
    if ((v2 & 0x2000) == 0)
      goto LABEL_43;
    goto LABEL_91;
  }
LABEL_90:
  v41 = *((_BYTE *)a2 + 184);
  v3 |= 0x400000000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_BYTE *)(this + 184) = v41;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x2000) == 0)
  {
LABEL_43:
    if ((v2 & 0x100000000) == 0)
      goto LABEL_44;
    goto LABEL_92;
  }
LABEL_91:
  v42 = *((_DWORD *)a2 + 16);
  v3 |= 0x2000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 64) = v42;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x100000000) == 0)
  {
LABEL_44:
    if ((v2 & 0x200000000) == 0)
      goto LABEL_45;
    goto LABEL_93;
  }
LABEL_92:
  v43 = *((_DWORD *)a2 + 35);
  v3 |= 0x100000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 140) = v43;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x200000000) == 0)
  {
LABEL_45:
    if ((v2 & 0x1000000000000) == 0)
      goto LABEL_46;
    goto LABEL_94;
  }
LABEL_93:
  v44 = *((_DWORD *)a2 + 36);
  v3 |= 0x200000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 144) = v44;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x1000000000000) == 0)
  {
LABEL_46:
    if ((v2 & 0x80000000000) == 0)
      goto LABEL_47;
    goto LABEL_95;
  }
LABEL_94:
  v45 = *((_BYTE *)a2 + 186);
  v3 |= 0x1000000000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_BYTE *)(this + 186) = v45;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x80000000000) == 0)
  {
LABEL_47:
    if ((v2 & 0x40000000000) == 0)
      goto LABEL_48;
    goto LABEL_96;
  }
LABEL_95:
  v46 = *((_BYTE *)a2 + 181);
  v3 |= 0x80000000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_BYTE *)(this + 181) = v46;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x40000000000) == 0)
  {
LABEL_48:
    if ((v2 & 0x20000000) == 0)
      goto LABEL_49;
    goto LABEL_97;
  }
LABEL_96:
  v47 = *((_BYTE *)a2 + 180);
  v3 |= 0x40000000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_BYTE *)(this + 180) = v47;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_49:
    if ((v2 & 0x20000000000) == 0)
      goto LABEL_50;
    goto LABEL_98;
  }
LABEL_97:
  v48 = *((_DWORD *)a2 + 32);
  v3 |= 0x20000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 128) = v48;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x20000000000) == 0)
  {
LABEL_50:
    if ((v2 & 0x10000000000) == 0)
      goto LABEL_51;
    goto LABEL_99;
  }
LABEL_98:
  v49 = *((_DWORD *)a2 + 44);
  v3 |= 0x20000000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 176) = v49;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x10000000000) == 0)
  {
LABEL_51:
    if ((v2 & 0x100000) == 0)
      goto LABEL_52;
    goto LABEL_100;
  }
LABEL_99:
  v50 = *((_DWORD *)a2 + 43);
  v3 |= 0x10000000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 172) = v50;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x100000) == 0)
  {
LABEL_52:
    if ((v2 & 0x800000000000) == 0)
      goto LABEL_53;
    goto LABEL_101;
  }
LABEL_100:
  v51 = *((_DWORD *)a2 + 23);
  v3 |= 0x100000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 92) = v51;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x800000000000) == 0)
  {
LABEL_53:
    if ((v2 & 0x2000000000000) == 0)
      return this;
LABEL_102:
    v53 = *((_BYTE *)a2 + 187);
    *(_QWORD *)(this + 188) = v3 | 0x2000000000000;
    *(_BYTE *)(this + 187) = v53;
    return this;
  }
LABEL_101:
  v52 = *((_BYTE *)a2 + 185);
  v3 |= 0x800000000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_BYTE *)(this + 185) = v52;
  if ((*(_QWORD *)((_BYTE *)a2 + 188) & 0x2000000000000) != 0)
    goto LABEL_102;
  return this;
}

CMMsl *CMMsl::RelativeDeviceMotionComplexTransition::operator=(CMMsl *a1, const CMMsl::RelativeDeviceMotionComplexTransition *a2)
{
  CMMsl::RelativeDeviceMotionComplexTransition *v3;
  _BYTE v5[200];

  if (a1 != a2)
  {
    CMMsl::RelativeDeviceMotionComplexTransition::RelativeDeviceMotionComplexTransition((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::RelativeDeviceMotionComplexTransition *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::RelativeDeviceMotionComplexTransition *a2, CMMsl::RelativeDeviceMotionComplexTransition *a3)
{
  uint64_t v3;
  uint64_t v4;
  float result;

  v3 = *(_QWORD *)((char *)this + 188);
  *(_QWORD *)((char *)this + 188) = *(_QWORD *)((char *)a2 + 188);
  *(_QWORD *)((char *)a2 + 188) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v4;
  LODWORD(v4) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v4;
  LODWORD(v4) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v4;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  LODWORD(v4) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v4;
  LODWORD(v4) = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v4;
  LODWORD(v4) = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  LODWORD(v4) = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v4;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  LODWORD(v4) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v4;
  LODWORD(v4) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v4;
  LODWORD(v4) = *((_DWORD *)this + 40);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
  *((_DWORD *)a2 + 40) = v4;
  LODWORD(v4) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v4;
  LODWORD(v4) = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v4;
  LODWORD(v4) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v4;
  LODWORD(v4) = *((_DWORD *)this + 41);
  *((_DWORD *)this + 41) = *((_DWORD *)a2 + 41);
  *((_DWORD *)a2 + 41) = v4;
  LODWORD(v4) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v4;
  LODWORD(v4) = *((_DWORD *)this + 39);
  *((_DWORD *)this + 39) = *((_DWORD *)a2 + 39);
  *((_DWORD *)a2 + 39) = v4;
  LODWORD(v4) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v4;
  LODWORD(v4) = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v4;
  LODWORD(v4) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v4;
  LOBYTE(v3) = *((_BYTE *)this + 183);
  *((_BYTE *)this + 183) = *((_BYTE *)a2 + 183);
  *((_BYTE *)a2 + 183) = v3;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  LODWORD(v4) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  LOBYTE(v3) = *((_BYTE *)this + 182);
  *((_BYTE *)this + 182) = *((_BYTE *)a2 + 182);
  *((_BYTE *)a2 + 182) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 184);
  *((_BYTE *)this + 184) = *((_BYTE *)a2 + 184);
  *((_BYTE *)a2 + 184) = v3;
  LODWORD(v3) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  LODWORD(v4) = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v4;
  LODWORD(v4) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v4;
  LOBYTE(v3) = *((_BYTE *)this + 186);
  *((_BYTE *)this + 186) = *((_BYTE *)a2 + 186);
  *((_BYTE *)a2 + 186) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 181);
  *((_BYTE *)this + 181) = *((_BYTE *)a2 + 181);
  *((_BYTE *)a2 + 181) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 180);
  *((_BYTE *)this + 180) = *((_BYTE *)a2 + 180);
  *((_BYTE *)a2 + 180) = v3;
  LODWORD(v4) = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v4;
  LODWORD(v4) = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v4;
  result = *((float *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((float *)a2 + 43) = result;
  LODWORD(v3) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 185);
  *((_BYTE *)this + 185) = *((_BYTE *)a2 + 185);
  *((_BYTE *)a2 + 185) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 187);
  *((_BYTE *)this + 187) = *((_BYTE *)a2 + 187);
  *((_BYTE *)a2 + 187) = v3;
  return result;
}

float CMMsl::RelativeDeviceMotionComplexTransition::RelativeDeviceMotionComplexTransition(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_2513606C8;
  *(_QWORD *)(a1 + 188) = *(_QWORD *)(a2 + 188);
  *(_QWORD *)(a2 + 188) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 183) = *(_BYTE *)(a2 + 183);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 182) = *(_BYTE *)(a2 + 182);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 186) = *(_BYTE *)(a2 + 186);
  *(_BYTE *)(a1 + 181) = *(_BYTE *)(a2 + 181);
  *(_BYTE *)(a1 + 180) = *(_BYTE *)(a2 + 180);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  result = *(float *)(a2 + 172);
  *(float *)(a1 + 172) = result;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_BYTE *)(a1 + 185) = *(_BYTE *)(a2 + 185);
  *(_BYTE *)(a1 + 187) = *(_BYTE *)(a2 + 187);
  return result;
}

CMMsl *CMMsl::RelativeDeviceMotionComplexTransition::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::RelativeDeviceMotionComplexTransition *v3;
  _BYTE v5[200];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::RelativeDeviceMotionComplexTransition::RelativeDeviceMotionComplexTransition((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::RelativeDeviceMotionComplexTransition *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::RelativeDeviceMotionComplexTransition::formatText(CMMsl::RelativeDeviceMotionComplexTransition *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "auxHorizontalRotation", *((float *)this + 4));
    v5 = *(_QWORD *)((char *)this + 188);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_55;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "auxHorizontalTranslation", *((float *)this + 5));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "auxOmegaInertial_X", *((float *)this + 6));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "auxOmegaInertial_Y", *((float *)this + 7));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "auxOmegaInertial_Z", *((float *)this + 8));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "auxUserAccelInertial_X", *((float *)this + 9));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "auxUserAccelInertial_Y", *((float *)this + 10));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "auxUserAccelInertial_Z", *((float *)this + 11));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "auxVerticalRotation", *((float *)this + 12));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x40000000000) == 0)
      goto LABEL_12;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "auxVerticalTranslation", *((float *)this + 13));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x40000000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "blockHeadTurnFalsePositive");
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "bodyTurnDetectionVerticalRotationSrc", *((float *)this + 14));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "bodyTurnMaximaBaseline", *((float *)this + 15));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x80000000000) == 0)
      goto LABEL_16;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "counterBodyTurnAboveBaseline");
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x80000000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x4000) == 0)
      goto LABEL_17;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "hasRecentHeadTurn");
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x4000) == 0)
  {
LABEL_17:
    if ((v5 & 0x8000) == 0)
      goto LABEL_18;
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(a2, "horizontalRotationSimilarity", *((float *)this + 17));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x8000) == 0)
  {
LABEL_18:
    if ((v5 & 0x10000) == 0)
      goto LABEL_19;
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(a2, "horizontalRotationSimilarityBaseline", *((float *)this + 18));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x10000) == 0)
  {
LABEL_19:
    if ((v5 & 0x20000) == 0)
      goto LABEL_20;
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(a2, "horizontalRotationSimilarityThreshold", *((float *)this + 19));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x20000) == 0)
  {
LABEL_20:
    if ((v5 & 0x40000) == 0)
      goto LABEL_21;
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(a2, "horizontalTranslationSimilarity", *((float *)this + 20));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x40000) == 0)
  {
LABEL_21:
    if ((v5 & 0x80000) == 0)
      goto LABEL_22;
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(a2, "horizontalTranslationSimilarityBaseline", *((float *)this + 21));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x80000) == 0)
  {
LABEL_22:
    if ((v5 & 0x100000000000) == 0)
      goto LABEL_23;
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(a2, "horizontalTranslationSimilarityThreshold", *((float *)this + 22));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x100000000000) == 0)
  {
LABEL_23:
    if ((v5 & 0x200000000000) == 0)
      goto LABEL_24;
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(a2, "inBodyTurn");
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x200000000000) == 0)
  {
LABEL_24:
    if ((v5 & 0x400000000000) == 0)
      goto LABEL_25;
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(a2, "inComplexTransitionState");
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x400000000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x100000) == 0)
      goto LABEL_26;
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(a2, "inStrongBodyTurn");
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x100000) == 0)
  {
LABEL_26:
    if ((v5 & 0x800000000000) == 0)
      goto LABEL_27;
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(a2, "longBodyTurnCounter");
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x800000000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x1000000000000) == 0)
      goto LABEL_28;
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(a2, "longBodyTurnState");
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x1000000000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x200000) == 0)
      goto LABEL_29;
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(a2, "overrideHeadTurn");
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x200000) == 0)
  {
LABEL_29:
    if ((v5 & 0x400000) == 0)
      goto LABEL_30;
    goto LABEL_81;
  }
LABEL_80:
  PB::TextFormatter::format(a2, "srcHorizontalRotation", *((float *)this + 24));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x400000) == 0)
  {
LABEL_30:
    if ((v5 & 0x800000) == 0)
      goto LABEL_31;
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(a2, "srcHorizontalTranslation", *((float *)this + 25));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x800000) == 0)
  {
LABEL_31:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_32;
    goto LABEL_83;
  }
LABEL_82:
  PB::TextFormatter::format(a2, "srcOmegaInertial_X", *((float *)this + 26));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_33;
    goto LABEL_84;
  }
LABEL_83:
  PB::TextFormatter::format(a2, "srcOmegaInertial_Y", *((float *)this + 27));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_34;
    goto LABEL_85;
  }
LABEL_84:
  PB::TextFormatter::format(a2, "srcOmegaInertial_Z", *((float *)this + 28));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_35;
    goto LABEL_86;
  }
LABEL_85:
  PB::TextFormatter::format(a2, "srcUserAccelInertial_X", *((float *)this + 29));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_36;
    goto LABEL_87;
  }
LABEL_86:
  PB::TextFormatter::format(a2, "srcUserAccelInertial_Y", *((float *)this + 30));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_37;
    goto LABEL_88;
  }
LABEL_87:
  PB::TextFormatter::format(a2, "srcUserAccelInertial_Z", *((float *)this + 31));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_37:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_38;
    goto LABEL_89;
  }
LABEL_88:
  PB::TextFormatter::format(a2, "srcVertToHrzRotRatio", *((float *)this + 32));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_38:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_39;
    goto LABEL_90;
  }
LABEL_89:
  PB::TextFormatter::format(a2, "srcVerticalRotation", *((float *)this + 33));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_39:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_40;
    goto LABEL_91;
  }
LABEL_90:
  PB::TextFormatter::format(a2, "srcVerticalTranslation", *((float *)this + 34));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_40:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_41;
    goto LABEL_92;
  }
LABEL_91:
  PB::TextFormatter::format(a2, "srcYawRotationExtremaBuffer", *((float *)this + 35));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_41:
    if ((v5 & 1) == 0)
      goto LABEL_42;
    goto LABEL_93;
  }
LABEL_92:
  PB::TextFormatter::format(a2, "srcYawRotationMaximaBaseline", *((float *)this + 36));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 1) == 0)
  {
LABEL_42:
    if ((v5 & 0x400000000) == 0)
      goto LABEL_43;
    goto LABEL_94;
  }
LABEL_93:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_43:
    if ((v5 & 0x800000000) == 0)
      goto LABEL_44;
    goto LABEL_95;
  }
LABEL_94:
  PB::TextFormatter::format(a2, "verticalRotationSimilarity", *((float *)this + 37));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x800000000) == 0)
  {
LABEL_44:
    if ((v5 & 0x1000000000) == 0)
      goto LABEL_45;
    goto LABEL_96;
  }
LABEL_95:
  PB::TextFormatter::format(a2, "verticalRotationSimilarityBaseline", *((float *)this + 38));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x1000000000) == 0)
  {
LABEL_45:
    if ((v5 & 0x2000000000) == 0)
      goto LABEL_46;
    goto LABEL_97;
  }
LABEL_96:
  PB::TextFormatter::format(a2, "verticalRotationSimilarityThreshold", *((float *)this + 39));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x2000000000) == 0)
  {
LABEL_46:
    if ((v5 & 0x4000000000) == 0)
      goto LABEL_47;
    goto LABEL_98;
  }
LABEL_97:
  PB::TextFormatter::format(a2, "verticalTranslationSimilarity", *((float *)this + 40));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x4000000000) == 0)
  {
LABEL_47:
    if ((v5 & 0x8000000000) == 0)
      goto LABEL_48;
    goto LABEL_99;
  }
LABEL_98:
  PB::TextFormatter::format(a2, "verticalTranslationSimilarityBaseline", *((float *)this + 41));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x8000000000) == 0)
  {
LABEL_48:
    if ((v5 & 0x10000000000) == 0)
      goto LABEL_49;
    goto LABEL_100;
  }
LABEL_99:
  PB::TextFormatter::format(a2, "verticalTranslationSimilarityThreshold", *((float *)this + 42));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x10000000000) == 0)
  {
LABEL_49:
    if ((v5 & 0x20000000000) == 0)
      goto LABEL_50;
LABEL_101:
    PB::TextFormatter::format(a2, "yawRateSimilarity200ms", *((float *)this + 44));
    if ((*(_QWORD *)((_BYTE *)this + 188) & 0x2000000000000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_51;
  }
LABEL_100:
  PB::TextFormatter::format(a2, "yawRateSimilarity1000ms", *((float *)this + 43));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x20000000000) != 0)
    goto LABEL_101;
LABEL_50:
  if ((v5 & 0x2000000000000) != 0)
LABEL_51:
    PB::TextFormatter::format(a2, "yawRateSimilarityState");
  return PB::TextFormatter::endObject(a2);
}

