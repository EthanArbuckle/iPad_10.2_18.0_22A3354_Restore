uint64_t CMMsl::RelativeDeviceMotionComplexTransition::readFrom(CMMsl::RelativeDeviceMotionComplexTransition *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  int v56;
  BOOL v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  int v62;
  BOOL v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  BOOL v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  int v80;
  BOOL v81;
  unint64_t v82;
  unint64_t v83;
  int v84;
  BOOL v85;
  unint64_t v86;
  unint64_t v87;
  int v88;
  BOOL v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  char v96;
  unsigned int v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  unint64_t v101;
  unint64_t v102;
  int v103;
  BOOL v104;
  unint64_t v105;
  unint64_t v106;
  int v107;
  BOOL v108;
  char v109;
  unsigned int v110;
  unint64_t v111;
  char v112;
  char v113;
  unsigned int v114;
  unint64_t v115;
  char v116;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      break;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *(_QWORD *)((char *)this + 188) |= 1uLL;
        v20 = *((_QWORD *)a2 + 1);
        if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_161;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v20);
        v21 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_205;
      case 2u:
        *(_QWORD *)((char *)this + 188) |= 0x800000uLL;
        v22 = *((_QWORD *)a2 + 1);
        if (v22 > 0xFFFFFFFFFFFFFFFBLL || v22 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_161;
        *((_DWORD *)this + 26) = *(_DWORD *)(*(_QWORD *)a2 + v22);
        goto LABEL_204;
      case 3u:
        *(_QWORD *)((char *)this + 188) |= 0x1000000uLL;
        v23 = *((_QWORD *)a2 + 1);
        if (v23 > 0xFFFFFFFFFFFFFFFBLL || v23 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_161;
        *((_DWORD *)this + 27) = *(_DWORD *)(*(_QWORD *)a2 + v23);
        goto LABEL_204;
      case 4u:
        *(_QWORD *)((char *)this + 188) |= 0x2000000uLL;
        v24 = *((_QWORD *)a2 + 1);
        if (v24 > 0xFFFFFFFFFFFFFFFBLL || v24 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_161;
        *((_DWORD *)this + 28) = *(_DWORD *)(*(_QWORD *)a2 + v24);
        goto LABEL_204;
      case 5u:
        *(_QWORD *)((char *)this + 188) |= 8uLL;
        v25 = *((_QWORD *)a2 + 1);
        if (v25 > 0xFFFFFFFFFFFFFFFBLL || v25 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_161;
        *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v25);
        goto LABEL_204;
      case 6u:
        *(_QWORD *)((char *)this + 188) |= 0x10uLL;
        v26 = *((_QWORD *)a2 + 1);
        if (v26 > 0xFFFFFFFFFFFFFFFBLL || v26 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_161;
        *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v26);
        goto LABEL_204;
      case 7u:
        *(_QWORD *)((char *)this + 188) |= 0x20uLL;
        v27 = *((_QWORD *)a2 + 1);
        if (v27 > 0xFFFFFFFFFFFFFFFBLL || v27 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_161;
        *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v27);
        goto LABEL_204;
      case 8u:
        *(_QWORD *)((char *)this + 188) |= 0x40000000uLL;
        v28 = *((_QWORD *)a2 + 1);
        if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_161;
        *((_DWORD *)this + 33) = *(_DWORD *)(*(_QWORD *)a2 + v28);
        goto LABEL_204;
      case 9u:
        *(_QWORD *)((char *)this + 188) |= 0x200uLL;
        v29 = *((_QWORD *)a2 + 1);
        if (v29 > 0xFFFFFFFFFFFFFFFBLL || v29 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_161;
        *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v29);
        goto LABEL_204;
      case 0xAu:
        *(_QWORD *)((char *)this + 188) |= 0x200000uLL;
        v30 = *((_QWORD *)a2 + 1);
        if (v30 > 0xFFFFFFFFFFFFFFFBLL || v30 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_161;
        *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v30);
        goto LABEL_204;
      case 0xBu:
        *(_QWORD *)((char *)this + 188) |= 2uLL;
        v31 = *((_QWORD *)a2 + 1);
        if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_161;
        *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v31);
        goto LABEL_204;
      case 0xCu:
        *(_QWORD *)((char *)this + 188) |= 0x4000000uLL;
        v32 = *((_QWORD *)a2 + 1);
        if (v32 > 0xFFFFFFFFFFFFFFFBLL || v32 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_161;
        *((_DWORD *)this + 29) = *(_DWORD *)(*(_QWORD *)a2 + v32);
        goto LABEL_204;
      case 0xDu:
        *(_QWORD *)((char *)this + 188) |= 0x8000000uLL;
        v33 = *((_QWORD *)a2 + 1);
        if (v33 > 0xFFFFFFFFFFFFFFFBLL || v33 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_161;
        *((_DWORD *)this + 30) = *(_DWORD *)(*(_QWORD *)a2 + v33);
        goto LABEL_204;
      case 0xEu:
        *(_QWORD *)((char *)this + 188) |= 0x10000000uLL;
        v34 = *((_QWORD *)a2 + 1);
        if (v34 > 0xFFFFFFFFFFFFFFFBLL || v34 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_161;
        *((_DWORD *)this + 31) = *(_DWORD *)(*(_QWORD *)a2 + v34);
        goto LABEL_204;
      case 0xFu:
        *(_QWORD *)((char *)this + 188) |= 0x40uLL;
        v35 = *((_QWORD *)a2 + 1);
        if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_161;
        *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v35);
        goto LABEL_204;
      case 0x10u:
        *(_QWORD *)((char *)this + 188) |= 0x80uLL;
        v36 = *((_QWORD *)a2 + 1);
        if (v36 > 0xFFFFFFFFFFFFFFFBLL || v36 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_161;
        *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v36);
        goto LABEL_204;
      case 0x11u:
        *(_QWORD *)((char *)this + 188) |= 0x100uLL;
        v37 = *((_QWORD *)a2 + 1);
        if (v37 > 0xFFFFFFFFFFFFFFFBLL || v37 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_161;
        *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v37);
        goto LABEL_204;
      case 0x12u:
        *(_QWORD *)((char *)this + 188) |= 0x80000000uLL;
        v38 = *((_QWORD *)a2 + 1);
        if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_161;
        *((_DWORD *)this + 34) = *(_DWORD *)(*(_QWORD *)a2 + v38);
        goto LABEL_204;
      case 0x13u:
        *(_QWORD *)((char *)this + 188) |= 0x400uLL;
        v39 = *((_QWORD *)a2 + 1);
        if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_161;
        *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v39);
        goto LABEL_204;
      case 0x14u:
        *(_QWORD *)((char *)this + 188) |= 0x400000uLL;
        v40 = *((_QWORD *)a2 + 1);
        if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_161;
        *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v40);
        goto LABEL_204;
      case 0x15u:
        *(_QWORD *)((char *)this + 188) |= 4uLL;
        v41 = *((_QWORD *)a2 + 1);
        if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_161;
        *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v41);
        goto LABEL_204;
      case 0x16u:
        *(_QWORD *)((char *)this + 188) |= 0x400000000uLL;
        v42 = *((_QWORD *)a2 + 1);
        if (v42 > 0xFFFFFFFFFFFFFFFBLL || v42 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_161;
        *((_DWORD *)this + 37) = *(_DWORD *)(*(_QWORD *)a2 + v42);
        goto LABEL_204;
      case 0x17u:
        *(_QWORD *)((char *)this + 188) |= 0x4000uLL;
        v43 = *((_QWORD *)a2 + 1);
        if (v43 > 0xFFFFFFFFFFFFFFFBLL || v43 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_161;
        *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v43);
        goto LABEL_204;
      case 0x18u:
        *(_QWORD *)((char *)this + 188) |= 0x2000000000uLL;
        v44 = *((_QWORD *)a2 + 1);
        if (v44 > 0xFFFFFFFFFFFFFFFBLL || v44 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_161;
        *((_DWORD *)this + 40) = *(_DWORD *)(*(_QWORD *)a2 + v44);
        goto LABEL_204;
      case 0x19u:
        *(_QWORD *)((char *)this + 188) |= 0x20000uLL;
        v45 = *((_QWORD *)a2 + 1);
        if (v45 > 0xFFFFFFFFFFFFFFFBLL || v45 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_161;
        *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v45);
        goto LABEL_204;
      case 0x1Au:
        *(_QWORD *)((char *)this + 188) |= 0x800000000uLL;
        v46 = *((_QWORD *)a2 + 1);
        if (v46 > 0xFFFFFFFFFFFFFFFBLL || v46 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_161;
        *((_DWORD *)this + 38) = *(_DWORD *)(*(_QWORD *)a2 + v46);
        goto LABEL_204;
      case 0x1Bu:
        *(_QWORD *)((char *)this + 188) |= 0x8000uLL;
        v47 = *((_QWORD *)a2 + 1);
        if (v47 > 0xFFFFFFFFFFFFFFFBLL || v47 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_161;
        *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v47);
        goto LABEL_204;
      case 0x1Cu:
        *(_QWORD *)((char *)this + 188) |= 0x4000000000uLL;
        v48 = *((_QWORD *)a2 + 1);
        if (v48 > 0xFFFFFFFFFFFFFFFBLL || v48 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_161;
        *((_DWORD *)this + 41) = *(_DWORD *)(*(_QWORD *)a2 + v48);
        goto LABEL_204;
      case 0x1Du:
        *(_QWORD *)((char *)this + 188) |= 0x40000uLL;
        v49 = *((_QWORD *)a2 + 1);
        if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_161;
        *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v49);
        goto LABEL_204;
      case 0x1Eu:
        *(_QWORD *)((char *)this + 188) |= 0x1000000000uLL;
        v50 = *((_QWORD *)a2 + 1);
        if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_161;
        *((_DWORD *)this + 39) = *(_DWORD *)(*(_QWORD *)a2 + v50);
        goto LABEL_204;
      case 0x1Fu:
        *(_QWORD *)((char *)this + 188) |= 0x10000uLL;
        v51 = *((_QWORD *)a2 + 1);
        if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_161;
        *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v51);
        goto LABEL_204;
      case 0x20u:
        *(_QWORD *)((char *)this + 188) |= 0x8000000000uLL;
        v52 = *((_QWORD *)a2 + 1);
        if (v52 > 0xFFFFFFFFFFFFFFFBLL || v52 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_161;
        *((_DWORD *)this + 42) = *(_DWORD *)(*(_QWORD *)a2 + v52);
        goto LABEL_204;
      case 0x21u:
        *(_QWORD *)((char *)this + 188) |= 0x80000uLL;
        v53 = *((_QWORD *)a2 + 1);
        if (v53 > 0xFFFFFFFFFFFFFFFBLL || v53 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_161;
        *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v53);
        goto LABEL_204;
      case 0x22u:
        *(_QWORD *)((char *)this + 188) |= 0x200000000000uLL;
        v54 = *((_QWORD *)a2 + 1);
        if (v54 >= *((_QWORD *)a2 + 2))
        {
          v57 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v55 = v54 + 1;
          v56 = *(unsigned __int8 *)(*(_QWORD *)a2 + v54);
          *((_QWORD *)a2 + 1) = v55;
          v57 = v56 != 0;
        }
        *((_BYTE *)this + 183) = v57;
        goto LABEL_206;
      case 0x23u:
        *(_QWORD *)((char *)this + 188) |= 0x800uLL;
        v58 = *((_QWORD *)a2 + 1);
        if (v58 > 0xFFFFFFFFFFFFFFFBLL || v58 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_161;
        *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v58);
        goto LABEL_204;
      case 0x24u:
        *(_QWORD *)((char *)this + 188) |= 0x1000uLL;
        v59 = *((_QWORD *)a2 + 1);
        if (v59 > 0xFFFFFFFFFFFFFFFBLL || v59 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_161;
        *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v59);
        goto LABEL_204;
      case 0x25u:
        *(_QWORD *)((char *)this + 188) |= 0x100000000000uLL;
        v60 = *((_QWORD *)a2 + 1);
        if (v60 >= *((_QWORD *)a2 + 2))
        {
          v63 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v61 = v60 + 1;
          v62 = *(unsigned __int8 *)(*(_QWORD *)a2 + v60);
          *((_QWORD *)a2 + 1) = v61;
          v63 = v62 != 0;
        }
        *((_BYTE *)this + 182) = v63;
        goto LABEL_206;
      case 0x26u:
        *(_QWORD *)((char *)this + 188) |= 0x400000000000uLL;
        v64 = *((_QWORD *)a2 + 1);
        if (v64 >= *((_QWORD *)a2 + 2))
        {
          v67 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v65 = v64 + 1;
          v66 = *(unsigned __int8 *)(*(_QWORD *)a2 + v64);
          *((_QWORD *)a2 + 1) = v65;
          v67 = v66 != 0;
        }
        *((_BYTE *)this + 184) = v67;
        goto LABEL_206;
      case 0x27u:
        *(_QWORD *)((char *)this + 188) |= 0x2000uLL;
        v68 = *((_QWORD *)a2 + 1);
        v69 = *((_QWORD *)a2 + 2);
        v70 = *(_QWORD *)a2;
        if (v68 <= 0xFFFFFFFFFFFFFFF5 && v68 + 10 <= v69)
        {
          v71 = 0;
          v72 = 0;
          v73 = 0;
          do
          {
            v74 = v68 + 1;
            *((_QWORD *)a2 + 1) = v68 + 1;
            v75 = *(_BYTE *)(v70 + v68);
            v73 |= (unint64_t)(v75 & 0x7F) << v71;
            if ((v75 & 0x80) == 0)
              goto LABEL_214;
            v71 += 7;
            v68 = v74;
            v14 = v72++ > 8;
          }
          while (!v14);
LABEL_185:
          LODWORD(v73) = 0;
          goto LABEL_214;
        }
        v109 = 0;
        v110 = 0;
        v73 = 0;
        if (v69 <= v68)
          v69 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v69 == v68)
          {
            LODWORD(v73) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v111 = v68 + 1;
            v112 = *(_BYTE *)(v70 + v68);
            *((_QWORD *)a2 + 1) = v111;
            v73 |= (unint64_t)(v112 & 0x7F) << v109;
            if (v112 < 0)
            {
              v109 += 7;
              v68 = v111;
              v14 = v110++ > 8;
              if (v14)
                goto LABEL_185;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v73) = 0;
          }
          break;
        }
LABEL_214:
        *((_DWORD *)this + 16) = v73;
        goto LABEL_206;
      case 0x28u:
        *(_QWORD *)((char *)this + 188) |= 0x100000000uLL;
        v76 = *((_QWORD *)a2 + 1);
        if (v76 > 0xFFFFFFFFFFFFFFFBLL || v76 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_161;
        *((_DWORD *)this + 35) = *(_DWORD *)(*(_QWORD *)a2 + v76);
        goto LABEL_204;
      case 0x29u:
        *(_QWORD *)((char *)this + 188) |= 0x200000000uLL;
        v77 = *((_QWORD *)a2 + 1);
        if (v77 > 0xFFFFFFFFFFFFFFFBLL || v77 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_161;
        *((_DWORD *)this + 36) = *(_DWORD *)(*(_QWORD *)a2 + v77);
        goto LABEL_204;
      case 0x2Au:
        *(_QWORD *)((char *)this + 188) |= 0x1000000000000uLL;
        v78 = *((_QWORD *)a2 + 1);
        if (v78 >= *((_QWORD *)a2 + 2))
        {
          v81 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v79 = v78 + 1;
          v80 = *(unsigned __int8 *)(*(_QWORD *)a2 + v78);
          *((_QWORD *)a2 + 1) = v79;
          v81 = v80 != 0;
        }
        *((_BYTE *)this + 186) = v81;
        goto LABEL_206;
      case 0x2Bu:
        *(_QWORD *)((char *)this + 188) |= 0x80000000000uLL;
        v82 = *((_QWORD *)a2 + 1);
        if (v82 >= *((_QWORD *)a2 + 2))
        {
          v85 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v83 = v82 + 1;
          v84 = *(unsigned __int8 *)(*(_QWORD *)a2 + v82);
          *((_QWORD *)a2 + 1) = v83;
          v85 = v84 != 0;
        }
        *((_BYTE *)this + 181) = v85;
        goto LABEL_206;
      case 0x2Cu:
        *(_QWORD *)((char *)this + 188) |= 0x40000000000uLL;
        v86 = *((_QWORD *)a2 + 1);
        if (v86 >= *((_QWORD *)a2 + 2))
        {
          v89 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v87 = v86 + 1;
          v88 = *(unsigned __int8 *)(*(_QWORD *)a2 + v86);
          *((_QWORD *)a2 + 1) = v87;
          v89 = v88 != 0;
        }
        *((_BYTE *)this + 180) = v89;
        goto LABEL_206;
      case 0x2Du:
        *(_QWORD *)((char *)this + 188) |= 0x20000000uLL;
        v90 = *((_QWORD *)a2 + 1);
        if (v90 > 0xFFFFFFFFFFFFFFFBLL || v90 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_161;
        *((_DWORD *)this + 32) = *(_DWORD *)(*(_QWORD *)a2 + v90);
        goto LABEL_204;
      case 0x2Eu:
        *(_QWORD *)((char *)this + 188) |= 0x20000000000uLL;
        v91 = *((_QWORD *)a2 + 1);
        if (v91 > 0xFFFFFFFFFFFFFFFBLL || v91 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_161;
        *((_DWORD *)this + 44) = *(_DWORD *)(*(_QWORD *)a2 + v91);
        goto LABEL_204;
      case 0x2Fu:
        *(_QWORD *)((char *)this + 188) |= 0x10000000000uLL;
        v92 = *((_QWORD *)a2 + 1);
        if (v92 <= 0xFFFFFFFFFFFFFFFBLL && v92 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 43) = *(_DWORD *)(*(_QWORD *)a2 + v92);
LABEL_204:
          v21 = *((_QWORD *)a2 + 1) + 4;
LABEL_205:
          *((_QWORD *)a2 + 1) = v21;
        }
        else
        {
LABEL_161:
          *((_BYTE *)a2 + 24) = 1;
        }
        goto LABEL_206;
      case 0x30u:
        *(_QWORD *)((char *)this + 188) |= 0x100000uLL;
        v93 = *((_QWORD *)a2 + 1);
        v94 = *((_QWORD *)a2 + 2);
        v95 = *(_QWORD *)a2;
        if (v93 <= 0xFFFFFFFFFFFFFFF5 && v93 + 10 <= v94)
        {
          v96 = 0;
          v97 = 0;
          v98 = 0;
          do
          {
            v99 = v93 + 1;
            *((_QWORD *)a2 + 1) = v93 + 1;
            v100 = *(_BYTE *)(v95 + v93);
            v98 |= (unint64_t)(v100 & 0x7F) << v96;
            if ((v100 & 0x80) == 0)
              goto LABEL_218;
            v96 += 7;
            v93 = v99;
            v14 = v97++ > 8;
          }
          while (!v14);
LABEL_198:
          LODWORD(v98) = 0;
          goto LABEL_218;
        }
        v113 = 0;
        v114 = 0;
        v98 = 0;
        if (v94 <= v93)
          v94 = *((_QWORD *)a2 + 1);
        break;
      case 0x31u:
        *(_QWORD *)((char *)this + 188) |= 0x800000000000uLL;
        v101 = *((_QWORD *)a2 + 1);
        if (v101 >= *((_QWORD *)a2 + 2))
        {
          v104 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v102 = v101 + 1;
          v103 = *(unsigned __int8 *)(*(_QWORD *)a2 + v101);
          *((_QWORD *)a2 + 1) = v102;
          v104 = v103 != 0;
        }
        *((_BYTE *)this + 185) = v104;
        goto LABEL_206;
      case 0x32u:
        *(_QWORD *)((char *)this + 188) |= 0x2000000000000uLL;
        v105 = *((_QWORD *)a2 + 1);
        if (v105 >= *((_QWORD *)a2 + 2))
        {
          v108 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v106 = v105 + 1;
          v107 = *(unsigned __int8 *)(*(_QWORD *)a2 + v105);
          *((_QWORD *)a2 + 1) = v106;
          v108 = v107 != 0;
        }
        *((_BYTE *)this + 187) = v108;
        goto LABEL_206;
      default:
        goto LABEL_19;
    }
    while (1)
    {
      if (v94 == v93)
      {
        LODWORD(v98) = 0;
        *((_BYTE *)a2 + 24) = 1;
        goto LABEL_218;
      }
      v115 = v93 + 1;
      v116 = *(_BYTE *)(v95 + v93);
      *((_QWORD *)a2 + 1) = v115;
      v98 |= (unint64_t)(v116 & 0x7F) << v113;
      if ((v116 & 0x80) == 0)
        break;
      v113 += 7;
      v93 = v115;
      v14 = v114++ > 8;
      if (v14)
        goto LABEL_198;
    }
    if (*((_BYTE *)a2 + 24))
      LODWORD(v98) = 0;
LABEL_218:
    *((_DWORD *)this + 23) = v98;
LABEL_206:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v15 = 0;
  v16 = 0;
  v11 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v17 = v2 + 1;
    v18 = *(_BYTE *)(v8 + v2);
    *((_QWORD *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0)
      goto LABEL_21;
    v15 += 7;
    v2 = v17;
    v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  result = PB::Reader::skip(a2);
  if ((_DWORD)result)
    goto LABEL_206;
  return result;
}

uint64_t CMMsl::RelativeDeviceMotionComplexTransition::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = this;
  v4 = *(_QWORD *)(this + 188);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_QWORD *)(v3 + 188);
    if ((v4 & 0x800000) == 0)
    {
LABEL_3:
      if ((v4 & 0x1000000) == 0)
        goto LABEL_4;
      goto LABEL_54;
    }
  }
  else if ((v4 & 0x800000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 104));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_4:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_5;
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::write(a2, *(float *)(v3 + 108));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::write(a2, *(float *)(v3 + 112));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x20) == 0)
  {
LABEL_8:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_9;
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(float *)(v3 + 132));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x200000) == 0)
      goto LABEL_11;
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x200000) == 0)
  {
LABEL_11:
    if ((v4 & 2) == 0)
      goto LABEL_12;
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::write(a2, *(float *)(v3 + 96));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 2) == 0)
  {
LABEL_12:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_13;
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_13:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_14;
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::write(a2, *(float *)(v3 + 116));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_15;
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::write(a2, *(float *)(v3 + 120));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x40) == 0)
      goto LABEL_16;
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::write(a2, *(float *)(v3 + 124));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x40) == 0)
  {
LABEL_16:
    if ((v4 & 0x80) == 0)
      goto LABEL_17;
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x80) == 0)
  {
LABEL_17:
    if ((v4 & 0x100) == 0)
      goto LABEL_18;
    goto LABEL_68;
  }
LABEL_67:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x100) == 0)
  {
LABEL_18:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_69;
  }
LABEL_68:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x400) == 0)
      goto LABEL_20;
    goto LABEL_70;
  }
LABEL_69:
  this = PB::Writer::write(a2, *(float *)(v3 + 136));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x400) == 0)
  {
LABEL_20:
    if ((v4 & 0x400000) == 0)
      goto LABEL_21;
    goto LABEL_71;
  }
LABEL_70:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x400000) == 0)
  {
LABEL_21:
    if ((v4 & 4) == 0)
      goto LABEL_22;
    goto LABEL_72;
  }
LABEL_71:
  this = PB::Writer::write(a2, *(float *)(v3 + 100));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 4) == 0)
  {
LABEL_22:
    if ((v4 & 0x400000000) == 0)
      goto LABEL_23;
    goto LABEL_73;
  }
LABEL_72:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x4000) == 0)
      goto LABEL_24;
    goto LABEL_74;
  }
LABEL_73:
  this = PB::Writer::write(a2, *(float *)(v3 + 148));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x4000) == 0)
  {
LABEL_24:
    if ((v4 & 0x2000000000) == 0)
      goto LABEL_25;
    goto LABEL_75;
  }
LABEL_74:
  this = PB::Writer::write(a2, *(float *)(v3 + 68));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x2000000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x20000) == 0)
      goto LABEL_26;
    goto LABEL_76;
  }
LABEL_75:
  this = PB::Writer::write(a2, *(float *)(v3 + 160));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x20000) == 0)
  {
LABEL_26:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_27;
    goto LABEL_77;
  }
LABEL_76:
  this = PB::Writer::write(a2, *(float *)(v3 + 80));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_27:
    if ((v4 & 0x8000) == 0)
      goto LABEL_28;
    goto LABEL_78;
  }
LABEL_77:
  this = PB::Writer::write(a2, *(float *)(v3 + 152));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x8000) == 0)
  {
LABEL_28:
    if ((v4 & 0x4000000000) == 0)
      goto LABEL_29;
    goto LABEL_79;
  }
LABEL_78:
  this = PB::Writer::write(a2, *(float *)(v3 + 72));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x4000000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x40000) == 0)
      goto LABEL_30;
    goto LABEL_80;
  }
LABEL_79:
  this = PB::Writer::write(a2, *(float *)(v3 + 164));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x40000) == 0)
  {
LABEL_30:
    if ((v4 & 0x1000000000) == 0)
      goto LABEL_31;
    goto LABEL_81;
  }
LABEL_80:
  this = PB::Writer::write(a2, *(float *)(v3 + 84));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x1000000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x10000) == 0)
      goto LABEL_32;
    goto LABEL_82;
  }
LABEL_81:
  this = PB::Writer::write(a2, *(float *)(v3 + 156));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x10000) == 0)
  {
LABEL_32:
    if ((v4 & 0x8000000000) == 0)
      goto LABEL_33;
    goto LABEL_83;
  }
LABEL_82:
  this = PB::Writer::write(a2, *(float *)(v3 + 76));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x8000000000) == 0)
  {
LABEL_33:
    if ((v4 & 0x80000) == 0)
      goto LABEL_34;
    goto LABEL_84;
  }
LABEL_83:
  this = PB::Writer::write(a2, *(float *)(v3 + 168));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x80000) == 0)
  {
LABEL_34:
    if ((v4 & 0x200000000000) == 0)
      goto LABEL_35;
    goto LABEL_85;
  }
LABEL_84:
  this = PB::Writer::write(a2, *(float *)(v3 + 88));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x200000000000) == 0)
  {
LABEL_35:
    if ((v4 & 0x800) == 0)
      goto LABEL_36;
    goto LABEL_86;
  }
LABEL_85:
  this = PB::Writer::write(a2);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x800) == 0)
  {
LABEL_36:
    if ((v4 & 0x1000) == 0)
      goto LABEL_37;
    goto LABEL_87;
  }
LABEL_86:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x1000) == 0)
  {
LABEL_37:
    if ((v4 & 0x100000000000) == 0)
      goto LABEL_38;
    goto LABEL_88;
  }
LABEL_87:
  this = PB::Writer::write(a2, *(float *)(v3 + 60));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x100000000000) == 0)
  {
LABEL_38:
    if ((v4 & 0x400000000000) == 0)
      goto LABEL_39;
    goto LABEL_89;
  }
LABEL_88:
  this = PB::Writer::write(a2);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x400000000000) == 0)
  {
LABEL_39:
    if ((v4 & 0x2000) == 0)
      goto LABEL_40;
    goto LABEL_90;
  }
LABEL_89:
  this = PB::Writer::write(a2);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x2000) == 0)
  {
LABEL_40:
    if ((v4 & 0x100000000) == 0)
      goto LABEL_41;
    goto LABEL_91;
  }
LABEL_90:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_41:
    if ((v4 & 0x200000000) == 0)
      goto LABEL_42;
    goto LABEL_92;
  }
LABEL_91:
  this = PB::Writer::write(a2, *(float *)(v3 + 140));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_42:
    if ((v4 & 0x1000000000000) == 0)
      goto LABEL_43;
    goto LABEL_93;
  }
LABEL_92:
  this = PB::Writer::write(a2, *(float *)(v3 + 144));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x1000000000000) == 0)
  {
LABEL_43:
    if ((v4 & 0x80000000000) == 0)
      goto LABEL_44;
    goto LABEL_94;
  }
LABEL_93:
  this = PB::Writer::write(a2);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x80000000000) == 0)
  {
LABEL_44:
    if ((v4 & 0x40000000000) == 0)
      goto LABEL_45;
    goto LABEL_95;
  }
LABEL_94:
  this = PB::Writer::write(a2);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x40000000000) == 0)
  {
LABEL_45:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_46;
    goto LABEL_96;
  }
LABEL_95:
  this = PB::Writer::write(a2);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_46:
    if ((v4 & 0x20000000000) == 0)
      goto LABEL_47;
    goto LABEL_97;
  }
LABEL_96:
  this = PB::Writer::write(a2, *(float *)(v3 + 128));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x20000000000) == 0)
  {
LABEL_47:
    if ((v4 & 0x10000000000) == 0)
      goto LABEL_48;
    goto LABEL_98;
  }
LABEL_97:
  this = PB::Writer::write(a2, *(float *)(v3 + 176));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x10000000000) == 0)
  {
LABEL_48:
    if ((v4 & 0x100000) == 0)
      goto LABEL_49;
    goto LABEL_99;
  }
LABEL_98:
  this = PB::Writer::write(a2, *(float *)(v3 + 172));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x100000) == 0)
  {
LABEL_49:
    if ((v4 & 0x800000000000) == 0)
      goto LABEL_50;
    goto LABEL_100;
  }
LABEL_99:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x800000000000) == 0)
  {
LABEL_50:
    if ((v4 & 0x2000000000000) == 0)
      return this;
    return PB::Writer::write(a2);
  }
LABEL_100:
  this = PB::Writer::write(a2);
  if ((*(_QWORD *)(v3 + 188) & 0x2000000000000) != 0)
    return PB::Writer::write(a2);
  return this;
}

uint64_t CMMsl::RelativeDeviceMotionComplexTransition::hash_value(CMMsl::RelativeDeviceMotionComplexTransition *this)
{
  uint64_t v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  float v43;
  uint64_t v44;
  float v45;
  uint64_t v46;
  float v47;
  uint64_t v48;
  float v49;
  uint64_t v50;
  float v51;
  uint64_t v52;
  float v53;
  uint64_t v54;
  float v55;
  uint64_t v56;
  float v57;
  uint64_t v58;
  float v59;
  uint64_t v60;
  float v61;
  uint64_t v62;
  float v63;
  uint64_t v64;
  float v65;
  uint64_t v66;
  uint64_t v67;
  float v68;
  uint64_t v69;
  float v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  float v75;
  uint64_t v76;
  float v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  float v82;
  uint64_t v83;
  float v84;
  uint64_t v85;
  float v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;

  v1 = *(_QWORD *)((char *)this + 188);
  if ((v1 & 1) == 0)
  {
    v2 = 0;
    if ((v1 & 0x800000) != 0)
      goto LABEL_3;
LABEL_137:
    v114 = 0;
    if ((v1 & 0x1000000) != 0)
      goto LABEL_6;
LABEL_138:
    v113 = 0;
    if ((v1 & 0x2000000) != 0)
      goto LABEL_9;
LABEL_139:
    v112 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_12;
LABEL_140:
    v111 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_15;
LABEL_141:
    v110 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_18;
LABEL_142:
    v109 = 0;
    if ((v1 & 0x40000000) != 0)
      goto LABEL_21;
LABEL_143:
    v108 = 0;
    if ((v1 & 0x200) != 0)
      goto LABEL_24;
LABEL_144:
    v107 = 0;
    if ((v1 & 0x200000) != 0)
      goto LABEL_27;
LABEL_145:
    v106 = 0;
    if ((v1 & 2) != 0)
      goto LABEL_30;
LABEL_146:
    v105 = 0;
    if ((v1 & 0x4000000) != 0)
      goto LABEL_33;
LABEL_147:
    v104 = 0;
    if ((v1 & 0x8000000) != 0)
      goto LABEL_36;
LABEL_148:
    v103 = 0;
    if ((v1 & 0x10000000) != 0)
      goto LABEL_39;
LABEL_149:
    v102 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_42;
LABEL_150:
    v101 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_45;
LABEL_151:
    v100 = 0;
    if ((v1 & 0x100) != 0)
      goto LABEL_48;
LABEL_152:
    v99 = 0;
    if ((v1 & 0x80000000) != 0)
      goto LABEL_51;
LABEL_153:
    v98 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_54;
LABEL_154:
    v97 = 0;
    if ((v1 & 0x400000) != 0)
      goto LABEL_57;
LABEL_155:
    v96 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_60;
LABEL_156:
    v95 = 0;
    if ((v1 & 0x400000000) != 0)
      goto LABEL_63;
LABEL_157:
    v94 = 0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_66;
LABEL_158:
    v93 = 0;
    if ((v1 & 0x2000000000) != 0)
      goto LABEL_69;
LABEL_159:
    v92 = 0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_72;
LABEL_160:
    v50 = 0;
    if ((v1 & 0x800000000) != 0)
      goto LABEL_76;
LABEL_161:
    v52 = 0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_80;
LABEL_162:
    v54 = 0;
    if ((v1 & 0x4000000000) != 0)
      goto LABEL_84;
LABEL_163:
    v56 = 0;
    if ((v1 & 0x40000) != 0)
      goto LABEL_87;
LABEL_164:
    v58 = 0;
    if ((v1 & 0x1000000000) != 0)
      goto LABEL_90;
LABEL_165:
    v60 = 0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_93;
LABEL_166:
    v62 = 0;
    if ((v1 & 0x8000000000) != 0)
      goto LABEL_96;
LABEL_167:
    v64 = 0;
    if ((v1 & 0x80000) != 0)
      goto LABEL_99;
LABEL_168:
    v66 = 0;
    if ((v1 & 0x200000000000) != 0)
      goto LABEL_102;
    goto LABEL_169;
  }
  if (*((double *)this + 1) == 0.0)
    v2 = 0;
  else
    v2 = *((_QWORD *)this + 1);
  if ((v1 & 0x800000) == 0)
    goto LABEL_137;
LABEL_3:
  v3 = *((float *)this + 26);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  v114 = v4;
  if ((v1 & 0x1000000) == 0)
    goto LABEL_138;
LABEL_6:
  v5 = *((float *)this + 27);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  v113 = v6;
  if ((v1 & 0x2000000) == 0)
    goto LABEL_139;
LABEL_9:
  v7 = *((float *)this + 28);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  v112 = v8;
  if ((v1 & 8) == 0)
    goto LABEL_140;
LABEL_12:
  v9 = *((float *)this + 6);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  v111 = v10;
  if ((v1 & 0x10) == 0)
    goto LABEL_141;
LABEL_15:
  v11 = *((float *)this + 7);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  v110 = v12;
  if ((v1 & 0x20) == 0)
    goto LABEL_142;
LABEL_18:
  v13 = *((float *)this + 8);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  v109 = v14;
  if ((v1 & 0x40000000) == 0)
    goto LABEL_143;
LABEL_21:
  v15 = *((float *)this + 33);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  v108 = v16;
  if ((v1 & 0x200) == 0)
    goto LABEL_144;
LABEL_24:
  v17 = *((float *)this + 12);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  v107 = v18;
  if ((v1 & 0x200000) == 0)
    goto LABEL_145;
LABEL_27:
  v19 = *((float *)this + 24);
  v20 = LODWORD(v19);
  if (v19 == 0.0)
    v20 = 0;
  v106 = v20;
  if ((v1 & 2) == 0)
    goto LABEL_146;
LABEL_30:
  v21 = *((float *)this + 4);
  v22 = LODWORD(v21);
  if (v21 == 0.0)
    v22 = 0;
  v105 = v22;
  if ((v1 & 0x4000000) == 0)
    goto LABEL_147;
LABEL_33:
  v23 = *((float *)this + 29);
  v24 = LODWORD(v23);
  if (v23 == 0.0)
    v24 = 0;
  v104 = v24;
  if ((v1 & 0x8000000) == 0)
    goto LABEL_148;
LABEL_36:
  v25 = *((float *)this + 30);
  v26 = LODWORD(v25);
  if (v25 == 0.0)
    v26 = 0;
  v103 = v26;
  if ((v1 & 0x10000000) == 0)
    goto LABEL_149;
LABEL_39:
  v27 = *((float *)this + 31);
  v28 = LODWORD(v27);
  if (v27 == 0.0)
    v28 = 0;
  v102 = v28;
  if ((v1 & 0x40) == 0)
    goto LABEL_150;
LABEL_42:
  v29 = *((float *)this + 9);
  v30 = LODWORD(v29);
  if (v29 == 0.0)
    v30 = 0;
  v101 = v30;
  if ((v1 & 0x80) == 0)
    goto LABEL_151;
LABEL_45:
  v31 = *((float *)this + 10);
  v32 = LODWORD(v31);
  if (v31 == 0.0)
    v32 = 0;
  v100 = v32;
  if ((v1 & 0x100) == 0)
    goto LABEL_152;
LABEL_48:
  v33 = *((float *)this + 11);
  v34 = LODWORD(v33);
  if (v33 == 0.0)
    v34 = 0;
  v99 = v34;
  if ((v1 & 0x80000000) == 0)
    goto LABEL_153;
LABEL_51:
  v35 = *((float *)this + 34);
  v36 = LODWORD(v35);
  if (v35 == 0.0)
    v36 = 0;
  v98 = v36;
  if ((v1 & 0x400) == 0)
    goto LABEL_154;
LABEL_54:
  v37 = *((float *)this + 13);
  v38 = LODWORD(v37);
  if (v37 == 0.0)
    v38 = 0;
  v97 = v38;
  if ((v1 & 0x400000) == 0)
    goto LABEL_155;
LABEL_57:
  v39 = *((float *)this + 25);
  v40 = LODWORD(v39);
  if (v39 == 0.0)
    v40 = 0;
  v96 = v40;
  if ((v1 & 4) == 0)
    goto LABEL_156;
LABEL_60:
  v41 = *((float *)this + 5);
  v42 = LODWORD(v41);
  if (v41 == 0.0)
    v42 = 0;
  v95 = v42;
  if ((v1 & 0x400000000) == 0)
    goto LABEL_157;
LABEL_63:
  v43 = *((float *)this + 37);
  v44 = LODWORD(v43);
  if (v43 == 0.0)
    v44 = 0;
  v94 = v44;
  if ((v1 & 0x4000) == 0)
    goto LABEL_158;
LABEL_66:
  v45 = *((float *)this + 17);
  v46 = LODWORD(v45);
  if (v45 == 0.0)
    v46 = 0;
  v93 = v46;
  if ((v1 & 0x2000000000) == 0)
    goto LABEL_159;
LABEL_69:
  v47 = *((float *)this + 40);
  v48 = LODWORD(v47);
  if (v47 == 0.0)
    v48 = 0;
  v92 = v48;
  if ((v1 & 0x20000) == 0)
    goto LABEL_160;
LABEL_72:
  v49 = *((float *)this + 20);
  if (v49 == 0.0)
    v50 = 0;
  else
    v50 = LODWORD(v49);
  if ((v1 & 0x800000000) == 0)
    goto LABEL_161;
LABEL_76:
  v51 = *((float *)this + 38);
  if (v51 == 0.0)
    v52 = 0;
  else
    v52 = LODWORD(v51);
  if ((v1 & 0x8000) == 0)
    goto LABEL_162;
LABEL_80:
  v53 = *((float *)this + 18);
  if (v53 == 0.0)
    v54 = 0;
  else
    v54 = LODWORD(v53);
  if ((v1 & 0x4000000000) == 0)
    goto LABEL_163;
LABEL_84:
  v55 = *((float *)this + 41);
  v56 = LODWORD(v55);
  if (v55 == 0.0)
    v56 = 0;
  if ((v1 & 0x40000) == 0)
    goto LABEL_164;
LABEL_87:
  v57 = *((float *)this + 21);
  v58 = LODWORD(v57);
  if (v57 == 0.0)
    v58 = 0;
  if ((v1 & 0x1000000000) == 0)
    goto LABEL_165;
LABEL_90:
  v59 = *((float *)this + 39);
  v60 = LODWORD(v59);
  if (v59 == 0.0)
    v60 = 0;
  if ((v1 & 0x10000) == 0)
    goto LABEL_166;
LABEL_93:
  v61 = *((float *)this + 19);
  v62 = LODWORD(v61);
  if (v61 == 0.0)
    v62 = 0;
  if ((v1 & 0x8000000000) == 0)
    goto LABEL_167;
LABEL_96:
  v63 = *((float *)this + 42);
  v64 = LODWORD(v63);
  if (v63 == 0.0)
    v64 = 0;
  if ((v1 & 0x80000) == 0)
    goto LABEL_168;
LABEL_99:
  v65 = *((float *)this + 22);
  v66 = LODWORD(v65);
  if (v65 == 0.0)
    v66 = 0;
  if ((v1 & 0x200000000000) != 0)
  {
LABEL_102:
    v67 = *((unsigned __int8 *)this + 183);
    if ((v1 & 0x800) != 0)
      goto LABEL_103;
LABEL_170:
    v69 = 0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_106;
LABEL_171:
    v71 = 0;
    if ((v1 & 0x100000000000) != 0)
      goto LABEL_109;
    goto LABEL_172;
  }
LABEL_169:
  v67 = 0;
  if ((v1 & 0x800) == 0)
    goto LABEL_170;
LABEL_103:
  v68 = *((float *)this + 14);
  v69 = LODWORD(v68);
  if (v68 == 0.0)
    v69 = 0;
  if ((v1 & 0x1000) == 0)
    goto LABEL_171;
LABEL_106:
  v70 = *((float *)this + 15);
  v71 = LODWORD(v70);
  if (v70 == 0.0)
    v71 = 0;
  if ((v1 & 0x100000000000) != 0)
  {
LABEL_109:
    v72 = *((unsigned __int8 *)this + 182);
    if ((v1 & 0x400000000000) != 0)
      goto LABEL_110;
    goto LABEL_173;
  }
LABEL_172:
  v72 = 0;
  if ((v1 & 0x400000000000) != 0)
  {
LABEL_110:
    v73 = *((unsigned __int8 *)this + 184);
    if ((v1 & 0x2000) != 0)
      goto LABEL_111;
    goto LABEL_174;
  }
LABEL_173:
  v73 = 0;
  if ((v1 & 0x2000) != 0)
  {
LABEL_111:
    v74 = *((unsigned int *)this + 16);
    if ((v1 & 0x100000000) != 0)
      goto LABEL_112;
LABEL_175:
    v76 = 0;
    if ((v1 & 0x200000000) != 0)
      goto LABEL_115;
LABEL_176:
    v78 = 0;
    if ((v1 & 0x1000000000000) != 0)
      goto LABEL_118;
    goto LABEL_177;
  }
LABEL_174:
  v74 = 0;
  if ((v1 & 0x100000000) == 0)
    goto LABEL_175;
LABEL_112:
  v75 = *((float *)this + 35);
  v76 = LODWORD(v75);
  if (v75 == 0.0)
    v76 = 0;
  if ((v1 & 0x200000000) == 0)
    goto LABEL_176;
LABEL_115:
  v77 = *((float *)this + 36);
  v78 = LODWORD(v77);
  if (v77 == 0.0)
    v78 = 0;
  if ((v1 & 0x1000000000000) != 0)
  {
LABEL_118:
    v79 = *((unsigned __int8 *)this + 186);
    if ((v1 & 0x80000000000) != 0)
      goto LABEL_119;
    goto LABEL_178;
  }
LABEL_177:
  v79 = 0;
  if ((v1 & 0x80000000000) != 0)
  {
LABEL_119:
    v80 = *((unsigned __int8 *)this + 181);
    if ((v1 & 0x40000000000) != 0)
      goto LABEL_120;
    goto LABEL_179;
  }
LABEL_178:
  v80 = 0;
  if ((v1 & 0x40000000000) != 0)
  {
LABEL_120:
    v81 = *((unsigned __int8 *)this + 180);
    if ((v1 & 0x20000000) != 0)
      goto LABEL_121;
LABEL_180:
    v83 = 0;
    if ((v1 & 0x20000000000) != 0)
      goto LABEL_124;
LABEL_181:
    v85 = 0;
    if ((v1 & 0x10000000000) != 0)
      goto LABEL_127;
LABEL_182:
    v87 = 0;
    if ((v1 & 0x100000) != 0)
      goto LABEL_130;
    goto LABEL_183;
  }
LABEL_179:
  v81 = 0;
  if ((v1 & 0x20000000) == 0)
    goto LABEL_180;
LABEL_121:
  v82 = *((float *)this + 32);
  v83 = LODWORD(v82);
  if (v82 == 0.0)
    v83 = 0;
  if ((v1 & 0x20000000000) == 0)
    goto LABEL_181;
LABEL_124:
  v84 = *((float *)this + 44);
  v85 = LODWORD(v84);
  if (v84 == 0.0)
    v85 = 0;
  if ((v1 & 0x10000000000) == 0)
    goto LABEL_182;
LABEL_127:
  v86 = *((float *)this + 43);
  v87 = LODWORD(v86);
  if (v86 == 0.0)
    v87 = 0;
  if ((v1 & 0x100000) != 0)
  {
LABEL_130:
    v88 = *((unsigned int *)this + 23);
    if ((v1 & 0x800000000000) != 0)
      goto LABEL_131;
LABEL_184:
    v89 = 0;
    if ((v1 & 0x2000000000000) != 0)
      goto LABEL_132;
LABEL_185:
    v90 = 0;
    return v114 ^ v2 ^ v113 ^ v112 ^ v111 ^ v110 ^ v109 ^ v108 ^ v107 ^ v106 ^ v105 ^ v104 ^ v103 ^ v102 ^ v101 ^ v100 ^ v99 ^ v98 ^ v97 ^ v96 ^ v95 ^ v94 ^ v93 ^ v92 ^ v50 ^ v52 ^ v54 ^ v56 ^ v58 ^ v60 ^ v62 ^ v64 ^ v66 ^ v67 ^ v69 ^ v71 ^ v72 ^ v73 ^ v74 ^ v76 ^ v78 ^ v79 ^ v80 ^ v81 ^ v83 ^ v85 ^ v87 ^ v88 ^ v89 ^ v90;
  }
LABEL_183:
  v88 = 0;
  if ((v1 & 0x800000000000) == 0)
    goto LABEL_184;
LABEL_131:
  v89 = *((unsigned __int8 *)this + 185);
  if ((v1 & 0x2000000000000) == 0)
    goto LABEL_185;
LABEL_132:
  v90 = *((unsigned __int8 *)this + 187);
  return v114 ^ v2 ^ v113 ^ v112 ^ v111 ^ v110 ^ v109 ^ v108 ^ v107 ^ v106 ^ v105 ^ v104 ^ v103 ^ v102 ^ v101 ^ v100 ^ v99 ^ v98 ^ v97 ^ v96 ^ v95 ^ v94 ^ v93 ^ v92 ^ v50 ^ v52 ^ v54 ^ v56 ^ v58 ^ v60 ^ v62 ^ v64 ^ v66 ^ v67 ^ v69 ^ v71 ^ v72 ^ v73 ^ v74 ^ v76 ^ v78 ^ v79 ^ v80 ^ v81 ^ v83 ^ v85 ^ v87 ^ v88 ^ v89 ^ v90;
}

void CMMsl::RelativeDeviceMotionCorrelatedMotion::~RelativeDeviceMotionCorrelatedMotion(CMMsl::RelativeDeviceMotionCorrelatedMotion *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::RelativeDeviceMotionCorrelatedMotion::RelativeDeviceMotionCorrelatedMotion(uint64_t this, const CMMsl::RelativeDeviceMotionCorrelatedMotion *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  char v13;
  char v14;
  int v15;
  char v16;
  char v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  char v24;
  int v25;
  int v26;
  int v27;
  int v28;
  char v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  char v35;

  *(_QWORD *)this = &off_251360700;
  *(_DWORD *)(this + 128) = 0;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 4) != 0)
  {
    v4 = *((_QWORD *)a2 + 3);
    v3 = 4;
    *(_DWORD *)(this + 128) = 4;
    *(_QWORD *)(this + 24) = v4;
    v2 = *((_DWORD *)a2 + 32);
    if ((v2 & 0x100000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x100000) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 25);
    v3 |= 0x100000u;
    *(_DWORD *)(this + 128) = v3;
    *(_DWORD *)(this + 100) = v5;
    v2 = *((_DWORD *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 0x80) != 0)
  {
    v6 = *((_DWORD *)a2 + 12);
    v3 |= 0x80u;
    *(_DWORD *)(this + 128) = v3;
    *(_DWORD *)(this + 48) = v6;
    v2 = *((_DWORD *)a2 + 32);
    if ((v2 & 0x80000) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_39;
    }
  }
  else if ((v2 & 0x80000) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 24);
  v3 |= 0x80000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 96) = v7;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x4000) == 0)
      goto LABEL_10;
    goto LABEL_40;
  }
LABEL_39:
  v8 = *((_DWORD *)a2 + 11);
  v3 |= 0x40u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 44) = v8;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x4000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_41;
  }
LABEL_40:
  v9 = *((_DWORD *)a2 + 19);
  v3 |= 0x4000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 76) = v9;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x2000) == 0)
  {
LABEL_11:
    if ((v2 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_42;
  }
LABEL_41:
  v10 = *((_DWORD *)a2 + 18);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 72) = v10;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x1000) == 0)
  {
LABEL_12:
    if ((v2 & 0x800000) == 0)
      goto LABEL_13;
    goto LABEL_43;
  }
LABEL_42:
  v11 = *((_DWORD *)a2 + 17);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 68) = v11;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x800000) == 0)
  {
LABEL_13:
    if ((v2 & 0x20000000) == 0)
      goto LABEL_14;
    goto LABEL_44;
  }
LABEL_43:
  v12 = *((_DWORD *)a2 + 28);
  v3 |= 0x800000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 112) = v12;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_14:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_15;
    goto LABEL_45;
  }
LABEL_44:
  v13 = *((_BYTE *)a2 + 124);
  v3 |= 0x20000000u;
  *(_DWORD *)(this + 128) = v3;
  *(_BYTE *)(this + 124) = v13;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v2 & 0x400) == 0)
      goto LABEL_16;
    goto LABEL_46;
  }
LABEL_45:
  v14 = *((_BYTE *)a2 + 120);
  v3 |= 0x2000000u;
  *(_DWORD *)(this + 128) = v3;
  *(_BYTE *)(this + 120) = v14;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x400) == 0)
  {
LABEL_16:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_17;
    goto LABEL_47;
  }
LABEL_46:
  v15 = *((_DWORD *)a2 + 15);
  v3 |= 0x400u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 60) = v15;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x40000000) == 0)
      goto LABEL_18;
    goto LABEL_48;
  }
LABEL_47:
  v16 = *((_BYTE *)a2 + 123);
  v3 |= 0x10000000u;
  *(_DWORD *)(this + 128) = v3;
  *(_BYTE *)(this + 123) = v16;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x40000) == 0)
      goto LABEL_19;
    goto LABEL_49;
  }
LABEL_48:
  v17 = *((_BYTE *)a2 + 125);
  v3 |= 0x40000000u;
  *(_DWORD *)(this + 128) = v3;
  *(_BYTE *)(this + 125) = v17;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x40000) == 0)
  {
LABEL_19:
    if ((v2 & 0x20) == 0)
      goto LABEL_20;
    goto LABEL_50;
  }
LABEL_49:
  v18 = *((_DWORD *)a2 + 23);
  v3 |= 0x40000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 92) = v18;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x20) == 0)
  {
LABEL_20:
    if ((v2 & 0x20000) == 0)
      goto LABEL_21;
    goto LABEL_51;
  }
LABEL_50:
  v19 = *((_DWORD *)a2 + 10);
  v3 |= 0x20u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 40) = v19;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x20000) == 0)
  {
LABEL_21:
    if ((v2 & 0x10) == 0)
      goto LABEL_22;
    goto LABEL_52;
  }
LABEL_51:
  v20 = *((_DWORD *)a2 + 22);
  v3 |= 0x20000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 88) = v20;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x10) == 0)
  {
LABEL_22:
    if ((v2 & 0x100) == 0)
      goto LABEL_23;
    goto LABEL_53;
  }
LABEL_52:
  v21 = *((_DWORD *)a2 + 9);
  v3 |= 0x10u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 36) = v21;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x100) == 0)
  {
LABEL_23:
    if ((v2 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_54;
  }
LABEL_53:
  v22 = *((_DWORD *)a2 + 13);
  v3 |= 0x100u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 52) = v22;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x400000) == 0)
  {
LABEL_24:
    if ((v2 & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_55;
  }
LABEL_54:
  v23 = *((_DWORD *)a2 + 27);
  v3 |= 0x400000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 108) = v23;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_25:
    if ((v2 & 0x10000) == 0)
      goto LABEL_26;
    goto LABEL_56;
  }
LABEL_55:
  v24 = *((_BYTE *)a2 + 126);
  v3 |= 0x80000000;
  *(_DWORD *)(this + 128) = v3;
  *(_BYTE *)(this + 126) = v24;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x10000) == 0)
  {
LABEL_26:
    if ((v2 & 8) == 0)
      goto LABEL_27;
    goto LABEL_57;
  }
LABEL_56:
  v25 = *((_DWORD *)a2 + 21);
  v3 |= 0x10000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 84) = v25;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 8) == 0)
  {
LABEL_27:
    if ((v2 & 0x200) == 0)
      goto LABEL_28;
    goto LABEL_58;
  }
LABEL_57:
  v26 = *((_DWORD *)a2 + 8);
  v3 |= 8u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 32) = v26;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x200) == 0)
  {
LABEL_28:
    if ((v2 & 0x200000) == 0)
      goto LABEL_29;
    goto LABEL_59;
  }
LABEL_58:
  v27 = *((_DWORD *)a2 + 14);
  v3 |= 0x200u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 56) = v27;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x200000) == 0)
  {
LABEL_29:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_30;
    goto LABEL_60;
  }
LABEL_59:
  v28 = *((_DWORD *)a2 + 26);
  v3 |= 0x200000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 104) = v28;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_30:
    if ((v2 & 0x800) == 0)
      goto LABEL_31;
    goto LABEL_61;
  }
LABEL_60:
  v29 = *((_BYTE *)a2 + 121);
  v3 |= 0x4000000u;
  *(_DWORD *)(this + 128) = v3;
  *(_BYTE *)(this + 121) = v29;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x800) == 0)
  {
LABEL_31:
    if ((v2 & 1) == 0)
      goto LABEL_32;
    goto LABEL_62;
  }
LABEL_61:
  v30 = *((_DWORD *)a2 + 16);
  v3 |= 0x800u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 64) = v30;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 1) == 0)
  {
LABEL_32:
    if ((v2 & 2) == 0)
      goto LABEL_33;
    goto LABEL_63;
  }
LABEL_62:
  v31 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_DWORD *)(this + 128) = v3;
  *(_QWORD *)(this + 8) = v31;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 2) == 0)
  {
LABEL_33:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_34;
    goto LABEL_64;
  }
LABEL_63:
  v32 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_DWORD *)(this + 128) = v3;
  *(_QWORD *)(this + 16) = v32;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_34:
    if ((v2 & 0x8000) == 0)
      goto LABEL_35;
    goto LABEL_65;
  }
LABEL_64:
  v33 = *((_DWORD *)a2 + 29);
  v3 |= 0x1000000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 116) = v33;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x8000) == 0)
  {
LABEL_35:
    if ((v2 & 0x8000000) == 0)
      return this;
LABEL_66:
    v35 = *((_BYTE *)a2 + 122);
    *(_DWORD *)(this + 128) = v3 | 0x8000000;
    *(_BYTE *)(this + 122) = v35;
    return this;
  }
LABEL_65:
  v34 = *((_DWORD *)a2 + 20);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 80) = v34;
  if ((*((_DWORD *)a2 + 32) & 0x8000000) != 0)
    goto LABEL_66;
  return this;
}

CMMsl *CMMsl::RelativeDeviceMotionCorrelatedMotion::operator=(CMMsl *a1, const CMMsl::RelativeDeviceMotionCorrelatedMotion *a2)
{
  CMMsl::RelativeDeviceMotionCorrelatedMotion *v3;
  _BYTE v5[136];

  if (a1 != a2)
  {
    CMMsl::RelativeDeviceMotionCorrelatedMotion::RelativeDeviceMotionCorrelatedMotion((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::RelativeDeviceMotionCorrelatedMotion *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::RelativeDeviceMotionCorrelatedMotion *a2, CMMsl::RelativeDeviceMotionCorrelatedMotion *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float result;

  v3 = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v3;
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v4;
  LODWORD(v4) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v4;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  LODWORD(v4) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  LODWORD(v4) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v4;
  LODWORD(v4) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v4;
  LODWORD(v4) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v4;
  LODWORD(v4) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v4;
  LOBYTE(v3) = *((_BYTE *)this + 124);
  *((_BYTE *)this + 124) = *((_BYTE *)a2 + 124);
  *((_BYTE *)a2 + 124) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 120);
  *((_BYTE *)this + 120) = *((_BYTE *)a2 + 120);
  *((_BYTE *)a2 + 120) = v3;
  LODWORD(v4) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  LOBYTE(v3) = *((_BYTE *)this + 123);
  *((_BYTE *)this + 123) = *((_BYTE *)a2 + 123);
  *((_BYTE *)a2 + 123) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 125);
  *((_BYTE *)this + 125) = *((_BYTE *)a2 + 125);
  *((_BYTE *)a2 + 125) = v3;
  LODWORD(v4) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  LODWORD(v4) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v4;
  LOBYTE(v3) = *((_BYTE *)this + 126);
  *((_BYTE *)this + 126) = *((_BYTE *)a2 + 126);
  *((_BYTE *)a2 + 126) = v3;
  LODWORD(v4) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  LODWORD(v4) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v4;
  LOBYTE(v3) = *((_BYTE *)this + 121);
  *((_BYTE *)this + 121) = *((_BYTE *)a2 + 121);
  *((_BYTE *)a2 + 121) = v3;
  LODWORD(v4) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  LODWORD(v6) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v6;
  result = *((float *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((float *)a2 + 20) = result;
  LOBYTE(v3) = *((_BYTE *)this + 122);
  *((_BYTE *)this + 122) = *((_BYTE *)a2 + 122);
  *((_BYTE *)a2 + 122) = v3;
  return result;
}

float CMMsl::RelativeDeviceMotionCorrelatedMotion::RelativeDeviceMotionCorrelatedMotion(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_251360700;
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 124) = *(_BYTE *)(a2 + 124);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 123) = *(_BYTE *)(a2 + 123);
  *(_BYTE *)(a1 + 125) = *(_BYTE *)(a2 + 125);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_BYTE *)(a1 + 126) = *(_BYTE *)(a2 + 126);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 121) = *(_BYTE *)(a2 + 121);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  result = *(float *)(a2 + 80);
  *(float *)(a1 + 80) = result;
  *(_BYTE *)(a1 + 122) = *(_BYTE *)(a2 + 122);
  return result;
}

CMMsl *CMMsl::RelativeDeviceMotionCorrelatedMotion::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::RelativeDeviceMotionCorrelatedMotion *v3;
  _BYTE v5[136];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::RelativeDeviceMotionCorrelatedMotion::RelativeDeviceMotionCorrelatedMotion((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::RelativeDeviceMotionCorrelatedMotion *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::RelativeDeviceMotionCorrelatedMotion::formatText(CMMsl::RelativeDeviceMotionCorrelatedMotion *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "auxAvgOmegaAroundGrav2s", *((float *)this + 8));
    v5 = *((_DWORD *)this + 32);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_37;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "auxAvgOmegaAroundGravLong", *((float *)this + 9));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "auxAvgOmegaAroundGravShort", *((float *)this + 10));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "auxAvgOmegaLong", *((float *)this + 11));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "auxAvgOmegaShort", *((float *)this + 12));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 0x200) == 0)
      goto LABEL_8;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "auxHistoricalOmegaStdMax", *((float *)this + 13));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x200) == 0)
  {
LABEL_8:
    if ((v5 & 0x400) == 0)
      goto LABEL_9;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "auxOverSrcYawDiffSum", *((float *)this + 14));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x400) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_10;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "dotRotGrav", *((float *)this + 15));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_11;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "hasUnCorrelatedSrcMotion");
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_11:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_12;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "inHeadTurnState");
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_13;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "inLikelySlowBodyTurnPed");
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_13:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_14;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "isInCorrelatedActivity");
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_14:
    if ((v5 & 1) == 0)
      goto LABEL_15;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "isInCorrelatedMotion");
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 1) == 0)
  {
LABEL_15:
    if ((v5 & 2) == 0)
      goto LABEL_16;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "lastHeadTurnStartTime", *((double *)this + 1));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 2) == 0)
  {
LABEL_16:
    if ((v5 & 0x800) == 0)
      goto LABEL_17;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "lastHeadTurnStopTime", *((double *)this + 2));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x800) == 0)
  {
LABEL_17:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_18;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "lastHeadTurnYawRadians", *((float *)this + 16));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_18:
    if ((v5 & 0x1000) == 0)
      goto LABEL_19;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "likelyOnGymMachine");
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x1000) == 0)
  {
LABEL_19:
    if ((v5 & 0x2000) == 0)
      goto LABEL_20;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "relOmegaMeanLong", *((float *)this + 17));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x2000) == 0)
  {
LABEL_20:
    if ((v5 & 0x4000) == 0)
      goto LABEL_21;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "relOmegaVarLong", *((float *)this + 18));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x4000) == 0)
  {
LABEL_21:
    if ((v5 & 0x8000) == 0)
      goto LABEL_22;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "relOmegaVarShort", *((float *)this + 19));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x8000) == 0)
  {
LABEL_22:
    if ((v5 & 0x10000) == 0)
      goto LABEL_23;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "srcAccumulatedYaw4s", *((float *)this + 20));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x10000) == 0)
  {
LABEL_23:
    if ((v5 & 0x20000) == 0)
      goto LABEL_24;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "srcAvgOmegaAroundGrav2s", *((float *)this + 21));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x20000) == 0)
  {
LABEL_24:
    if ((v5 & 0x40000) == 0)
      goto LABEL_25;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "srcAvgOmegaAroundGravLong", *((float *)this + 22));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x40000) == 0)
  {
LABEL_25:
    if ((v5 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "srcAvgOmegaAroundGravShort", *((float *)this + 23));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x80000) == 0)
  {
LABEL_26:
    if ((v5 & 0x100000) == 0)
      goto LABEL_27;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "srcAvgOmegaLong", *((float *)this + 24));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x100000) == 0)
  {
LABEL_27:
    if ((v5 & 0x200000) == 0)
      goto LABEL_28;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "srcAvgOmegaShort", *((float *)this + 25));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x200000) == 0)
  {
LABEL_28:
    if ((v5 & 0x400000) == 0)
      goto LABEL_29;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "srcAvgYawBufferSum", *((float *)this + 26));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x400000) == 0)
  {
LABEL_29:
    if ((v5 & 0x800000) == 0)
      goto LABEL_30;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "srcHistoricalOmegaStdMax", *((float *)this + 27));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x800000) == 0)
  {
LABEL_30:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_31;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "srcRotationAxisAlignment", *((float *)this + 28));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_32;
LABEL_65:
    PB::TextFormatter::format(a2, "steadyStatePedestrian");
    if ((*((_DWORD *)this + 32) & 4) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_33;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "srcYawBufferLongStd", *((float *)this + 29));
  v5 = *((_DWORD *)this + 32);
  if (v5 < 0)
    goto LABEL_65;
LABEL_32:
  if ((v5 & 4) != 0)
LABEL_33:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 3));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::RelativeDeviceMotionCorrelatedMotion::readFrom(CMMsl::RelativeDeviceMotionCorrelatedMotion *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v20;
  BOOL v21;
  int v22;
  BOOL v23;
  int v24;
  BOOL v25;
  int v26;
  BOOL v27;
  int v28;
  BOOL v29;
  int v30;
  BOOL v31;
  int v32;
  BOOL v33;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_130;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 32) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_112;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_101;
      case 2u:
        *((_DWORD *)this + 32) |= 0x100000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_112;
        *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_128;
      case 3u:
        *((_DWORD *)this + 32) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_112;
        *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_128;
      case 4u:
        *((_DWORD *)this + 32) |= 0x80000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_112;
        *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_128;
      case 5u:
        *((_DWORD *)this + 32) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_112;
        *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_128;
      case 6u:
        *((_DWORD *)this + 32) |= 0x4000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_112;
        *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_128;
      case 7u:
        *((_DWORD *)this + 32) |= 0x2000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_112;
        *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_128;
      case 8u:
        *((_DWORD *)this + 32) |= 0x1000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_112;
        *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_128;
      case 9u:
        *((_DWORD *)this + 32) |= 0x800000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_112;
        *((_DWORD *)this + 28) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_128;
      case 0xAu:
        *((_DWORD *)this + 32) |= 0x20000000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v21 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v21 = v20 != 0;
        }
        *((_BYTE *)this + 124) = v21;
        break;
      case 0xBu:
        *((_DWORD *)this + 32) |= 0x2000000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v23 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v22 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v23 = v22 != 0;
        }
        *((_BYTE *)this + 120) = v23;
        break;
      case 0xCu:
        *((_DWORD *)this + 32) |= 0x400u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_112;
        *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_128;
      case 0xDu:
        *((_DWORD *)this + 32) |= 0x10000000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v25 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v24 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v25 = v24 != 0;
        }
        *((_BYTE *)this + 123) = v25;
        break;
      case 0xEu:
        *((_DWORD *)this + 32) |= 0x40000000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v27 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v26 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v27 = v26 != 0;
        }
        *((_BYTE *)this + 125) = v27;
        break;
      case 0xFu:
        *((_DWORD *)this + 32) |= 0x40000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_112;
        *((_DWORD *)this + 23) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_128;
      case 0x10u:
        *((_DWORD *)this + 32) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_112;
        *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_128;
      case 0x11u:
        *((_DWORD *)this + 32) |= 0x20000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_112;
        *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_128;
      case 0x12u:
        *((_DWORD *)this + 32) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_112;
        *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_128;
      case 0x13u:
        *((_DWORD *)this + 32) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_112;
        *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_128;
      case 0x14u:
        *((_DWORD *)this + 32) |= 0x400000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_112;
        *((_DWORD *)this + 27) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_128;
      case 0x15u:
        *((_DWORD *)this + 32) |= 0x80000000;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v29 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v28 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v29 = v28 != 0;
        }
        *((_BYTE *)this + 126) = v29;
        break;
      case 0x16u:
        *((_DWORD *)this + 32) |= 0x10000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_112;
        *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_128;
      case 0x17u:
        *((_DWORD *)this + 32) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_112;
        *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_128;
      case 0x18u:
        *((_DWORD *)this + 32) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_112;
        *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_128;
      case 0x19u:
        *((_DWORD *)this + 32) |= 0x200000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_112;
        *((_DWORD *)this + 26) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_128;
      case 0x1Au:
        *((_DWORD *)this + 32) |= 0x4000000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v31 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v30 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v31 = v30 != 0;
        }
        *((_BYTE *)this + 121) = v31;
        break;
      case 0x1Bu:
        *((_DWORD *)this + 32) |= 0x800u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_112;
        *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_128;
      case 0x1Cu:
        *((_DWORD *)this + 32) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_112;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_101;
      case 0x1Du:
        *((_DWORD *)this + 32) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_112;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_101:
        v2 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_129;
      case 0x1Eu:
        *((_DWORD *)this + 32) |= 0x1000000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_112;
        *((_DWORD *)this + 29) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_128;
      case 0x1Fu:
        *((_DWORD *)this + 32) |= 0x8000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
        {
LABEL_112:
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_128:
          v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_129:
          *((_QWORD *)a2 + 1) = v2;
        }
        break;
      case 0x20u:
        *((_DWORD *)this + 32) |= 0x8000000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v33 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v32 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v33 = v32 != 0;
        }
        *((_BYTE *)this + 122) = v33;
        break;
      default:
        goto LABEL_19;
    }
LABEL_130:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::RelativeDeviceMotionCorrelatedMotion::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 128);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24));
    v4 = *(_DWORD *)(v3 + 128);
    if ((v4 & 0x100000) == 0)
    {
LABEL_3:
      if ((v4 & 0x80) == 0)
        goto LABEL_4;
      goto LABEL_36;
    }
  }
  else if ((v4 & 0x100000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 100));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80) == 0)
  {
LABEL_4:
    if ((v4 & 0x80000) == 0)
      goto LABEL_5;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80000) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 96));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x4000) == 0)
      goto LABEL_7;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x4000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0)
      goto LABEL_8;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 76));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0)
      goto LABEL_9;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(float *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 0x800000) == 0)
      goto LABEL_10;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(float *)(v3 + 68));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x800000) == 0)
  {
LABEL_10:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_11;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 112));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_12;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x400) == 0)
  {
LABEL_13:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_14;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(float *)(v3 + 60));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_15;
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x40000) == 0)
      goto LABEL_16;
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x40000) == 0)
  {
LABEL_16:
    if ((v4 & 0x20) == 0)
      goto LABEL_17;
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(float *)(v3 + 92));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x20) == 0)
  {
LABEL_17:
    if ((v4 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x20000) == 0)
  {
LABEL_18:
    if ((v4 & 0x10) == 0)
      goto LABEL_19;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(float *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10) == 0)
  {
LABEL_19:
    if ((v4 & 0x100) == 0)
      goto LABEL_20;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x100) == 0)
  {
LABEL_20:
    if ((v4 & 0x400000) == 0)
      goto LABEL_21;
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x400000) == 0)
  {
LABEL_21:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::write(a2, *(float *)(v3 + 108));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x10000) == 0)
      goto LABEL_23;
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10000) == 0)
  {
LABEL_23:
    if ((v4 & 8) == 0)
      goto LABEL_24;
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::write(a2, *(float *)(v3 + 84));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 8) == 0)
  {
LABEL_24:
    if ((v4 & 0x200) == 0)
      goto LABEL_25;
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x200) == 0)
  {
LABEL_25:
    if ((v4 & 0x200000) == 0)
      goto LABEL_26;
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x200000) == 0)
  {
LABEL_26:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_27;
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::write(a2, *(float *)(v3 + 104));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_27:
    if ((v4 & 0x800) == 0)
      goto LABEL_28;
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x800) == 0)
  {
LABEL_28:
    if ((v4 & 1) == 0)
      goto LABEL_29;
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::write(a2, *(float *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 1) == 0)
  {
LABEL_29:
    if ((v4 & 2) == 0)
      goto LABEL_30;
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 2) == 0)
  {
LABEL_30:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_31;
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x8000) == 0)
      goto LABEL_32;
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::write(a2, *(float *)(v3 + 116));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x8000) == 0)
  {
LABEL_32:
    if ((v4 & 0x8000000) == 0)
      return this;
    return PB::Writer::write(a2);
  }
LABEL_64:
  this = PB::Writer::write(a2, *(float *)(v3 + 80));
  if ((*(_DWORD *)(v3 + 128) & 0x8000000) != 0)
    return PB::Writer::write(a2);
  return this;
}

uint64_t CMMsl::RelativeDeviceMotionCorrelatedMotion::hash_value(CMMsl::RelativeDeviceMotionCorrelatedMotion *this)
{
  int v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  uint64_t v47;
  double v48;
  double v49;
  float v50;
  uint64_t v51;
  float v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  double v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v1 = *((_DWORD *)this + 32);
  if ((v1 & 4) == 0)
  {
    v57 = 0.0;
    if ((v1 & 0x100000) != 0)
      goto LABEL_3;
LABEL_101:
    v3 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_7;
LABEL_102:
    v61 = 0;
    if ((v1 & 0x80000) != 0)
      goto LABEL_10;
LABEL_103:
    v60 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_13;
LABEL_104:
    v59 = 0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_16;
LABEL_105:
    v58 = 0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_19;
LABEL_106:
    v13 = 0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_23;
LABEL_107:
    v15 = 0;
    if ((v1 & 0x800000) != 0)
      goto LABEL_27;
LABEL_108:
    v17 = 0;
    if ((v1 & 0x20000000) != 0)
      goto LABEL_31;
    goto LABEL_109;
  }
  v55 = *((double *)this + 3);
  if (v55 == 0.0)
    v55 = 0.0;
  v57 = v55;
  if ((v1 & 0x100000) == 0)
    goto LABEL_101;
LABEL_3:
  v2 = *((float *)this + 25);
  if (v2 == 0.0)
    v3 = 0;
  else
    v3 = LODWORD(v2);
  if ((v1 & 0x80) == 0)
    goto LABEL_102;
LABEL_7:
  v4 = *((float *)this + 12);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  v61 = v5;
  if ((v1 & 0x80000) == 0)
    goto LABEL_103;
LABEL_10:
  v6 = *((float *)this + 24);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  v60 = v7;
  if ((v1 & 0x40) == 0)
    goto LABEL_104;
LABEL_13:
  v8 = *((float *)this + 11);
  v9 = LODWORD(v8);
  if (v8 == 0.0)
    v9 = 0;
  v59 = v9;
  if ((v1 & 0x4000) == 0)
    goto LABEL_105;
LABEL_16:
  v10 = *((float *)this + 19);
  v11 = LODWORD(v10);
  if (v10 == 0.0)
    v11 = 0;
  v58 = v11;
  if ((v1 & 0x2000) == 0)
    goto LABEL_106;
LABEL_19:
  v12 = *((float *)this + 18);
  if (v12 == 0.0)
    v13 = 0;
  else
    v13 = LODWORD(v12);
  if ((v1 & 0x1000) == 0)
    goto LABEL_107;
LABEL_23:
  v14 = *((float *)this + 17);
  if (v14 == 0.0)
    v15 = 0;
  else
    v15 = LODWORD(v14);
  if ((v1 & 0x800000) == 0)
    goto LABEL_108;
LABEL_27:
  v16 = *((float *)this + 28);
  if (v16 == 0.0)
    v17 = 0;
  else
    v17 = LODWORD(v16);
  if ((v1 & 0x20000000) != 0)
  {
LABEL_31:
    v18 = *((unsigned __int8 *)this + 124);
    if ((v1 & 0x2000000) != 0)
      goto LABEL_32;
    goto LABEL_110;
  }
LABEL_109:
  v18 = 0;
  if ((v1 & 0x2000000) != 0)
  {
LABEL_32:
    v19 = *((unsigned __int8 *)this + 120);
    if ((v1 & 0x400) != 0)
      goto LABEL_33;
LABEL_111:
    v21 = 0;
    if ((v1 & 0x10000000) != 0)
      goto LABEL_37;
    goto LABEL_112;
  }
LABEL_110:
  v19 = 0;
  if ((v1 & 0x400) == 0)
    goto LABEL_111;
LABEL_33:
  v20 = *((float *)this + 15);
  if (v20 == 0.0)
    v21 = 0;
  else
    v21 = LODWORD(v20);
  if ((v1 & 0x10000000) != 0)
  {
LABEL_37:
    v22 = *((unsigned __int8 *)this + 123);
    if ((v1 & 0x40000000) != 0)
      goto LABEL_38;
    goto LABEL_113;
  }
LABEL_112:
  v22 = 0;
  if ((v1 & 0x40000000) != 0)
  {
LABEL_38:
    v23 = *((unsigned __int8 *)this + 125);
    if ((v1 & 0x40000) != 0)
      goto LABEL_39;
LABEL_114:
    v25 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_43;
LABEL_115:
    v27 = 0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_47;
LABEL_116:
    v29 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_51;
LABEL_117:
    v31 = 0;
    if ((v1 & 0x100) != 0)
      goto LABEL_55;
LABEL_118:
    v33 = 0;
    if ((v1 & 0x400000) != 0)
      goto LABEL_59;
LABEL_119:
    v35 = 0;
    if (v1 < 0)
      goto LABEL_63;
    goto LABEL_120;
  }
LABEL_113:
  v23 = 0;
  if ((v1 & 0x40000) == 0)
    goto LABEL_114;
LABEL_39:
  v24 = *((float *)this + 23);
  if (v24 == 0.0)
    v25 = 0;
  else
    v25 = LODWORD(v24);
  if ((v1 & 0x20) == 0)
    goto LABEL_115;
LABEL_43:
  v26 = *((float *)this + 10);
  if (v26 == 0.0)
    v27 = 0;
  else
    v27 = LODWORD(v26);
  if ((v1 & 0x20000) == 0)
    goto LABEL_116;
LABEL_47:
  v28 = *((float *)this + 22);
  if (v28 == 0.0)
    v29 = 0;
  else
    v29 = LODWORD(v28);
  if ((v1 & 0x10) == 0)
    goto LABEL_117;
LABEL_51:
  v30 = *((float *)this + 9);
  if (v30 == 0.0)
    v31 = 0;
  else
    v31 = LODWORD(v30);
  if ((v1 & 0x100) == 0)
    goto LABEL_118;
LABEL_55:
  v32 = *((float *)this + 13);
  if (v32 == 0.0)
    v33 = 0;
  else
    v33 = LODWORD(v32);
  if ((v1 & 0x400000) == 0)
    goto LABEL_119;
LABEL_59:
  v34 = *((float *)this + 27);
  if (v34 == 0.0)
    v35 = 0;
  else
    v35 = LODWORD(v34);
  if (v1 < 0)
  {
LABEL_63:
    v36 = *((unsigned __int8 *)this + 126);
    if ((v1 & 0x10000) != 0)
      goto LABEL_64;
LABEL_121:
    v38 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_68;
LABEL_122:
    v40 = 0;
    if ((v1 & 0x200) != 0)
      goto LABEL_72;
LABEL_123:
    v42 = 0;
    if ((v1 & 0x200000) != 0)
      goto LABEL_76;
LABEL_124:
    v44 = 0;
    if ((v1 & 0x4000000) != 0)
      goto LABEL_80;
    goto LABEL_125;
  }
LABEL_120:
  v36 = 0;
  if ((v1 & 0x10000) == 0)
    goto LABEL_121;
LABEL_64:
  v37 = *((float *)this + 21);
  if (v37 == 0.0)
    v38 = 0;
  else
    v38 = LODWORD(v37);
  if ((v1 & 8) == 0)
    goto LABEL_122;
LABEL_68:
  v39 = *((float *)this + 8);
  if (v39 == 0.0)
    v40 = 0;
  else
    v40 = LODWORD(v39);
  if ((v1 & 0x200) == 0)
    goto LABEL_123;
LABEL_72:
  v41 = *((float *)this + 14);
  if (v41 == 0.0)
    v42 = 0;
  else
    v42 = LODWORD(v41);
  if ((v1 & 0x200000) == 0)
    goto LABEL_124;
LABEL_76:
  v43 = *((float *)this + 26);
  if (v43 == 0.0)
    v44 = 0;
  else
    v44 = LODWORD(v43);
  if ((v1 & 0x4000000) != 0)
  {
LABEL_80:
    v45 = *((unsigned __int8 *)this + 121);
    if ((v1 & 0x800) != 0)
      goto LABEL_81;
LABEL_126:
    v47 = 0;
    if ((v1 & 1) != 0)
      goto LABEL_85;
LABEL_127:
    v48 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_88;
LABEL_128:
    v49 = 0.0;
    if ((v1 & 0x1000000) != 0)
      goto LABEL_91;
LABEL_129:
    v51 = 0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_94;
    goto LABEL_130;
  }
LABEL_125:
  v45 = 0;
  if ((v1 & 0x800) == 0)
    goto LABEL_126;
LABEL_81:
  v46 = *((float *)this + 16);
  if (v46 == 0.0)
    v47 = 0;
  else
    v47 = LODWORD(v46);
  if ((v1 & 1) == 0)
    goto LABEL_127;
LABEL_85:
  v48 = *((double *)this + 1);
  if (v48 == 0.0)
    v48 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_128;
LABEL_88:
  v49 = *((double *)this + 2);
  if (v49 == 0.0)
    v49 = 0.0;
  if ((v1 & 0x1000000) == 0)
    goto LABEL_129;
LABEL_91:
  v50 = *((float *)this + 29);
  v51 = LODWORD(v50);
  if (v50 == 0.0)
    v51 = 0;
  if ((v1 & 0x8000) != 0)
  {
LABEL_94:
    v52 = *((float *)this + 20);
    v53 = LODWORD(v52);
    if (v52 == 0.0)
      v53 = 0;
    if ((v1 & 0x8000000) != 0)
      goto LABEL_97;
LABEL_131:
    v54 = 0;
    return v3 ^ *(_QWORD *)&v57 ^ v61 ^ v60 ^ v59 ^ v58 ^ v13 ^ v15 ^ v17 ^ v18 ^ v19 ^ v21 ^ v22 ^ v23 ^ v25 ^ v27 ^ v29 ^ v31 ^ v33 ^ v35 ^ v36 ^ v38 ^ v40 ^ v42 ^ v44 ^ v45 ^ v47 ^ *(_QWORD *)&v48 ^ *(_QWORD *)&v49 ^ v51 ^ v53 ^ v54;
  }
LABEL_130:
  v53 = 0;
  if ((v1 & 0x8000000) == 0)
    goto LABEL_131;
LABEL_97:
  v54 = *((unsigned __int8 *)this + 122);
  return v3 ^ *(_QWORD *)&v57 ^ v61 ^ v60 ^ v59 ^ v58 ^ v13 ^ v15 ^ v17 ^ v18 ^ v19 ^ v21 ^ v22 ^ v23 ^ v25 ^ v27 ^ v29 ^ v31 ^ v33 ^ v35 ^ v36 ^ v38 ^ v40 ^ v42 ^ v44 ^ v45 ^ v47 ^ *(_QWORD *)&v48 ^ *(_QWORD *)&v49 ^ v51 ^ v53 ^ v54;
}

void CMMsl::RelativeDeviceMotionInternal::~RelativeDeviceMotionInternal(CMMsl::RelativeDeviceMotionInternal *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_251360738;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::RelativeDeviceMotionInternal::~RelativeDeviceMotionInternal(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::RelativeDeviceMotionInternal *CMMsl::RelativeDeviceMotionInternal::RelativeDeviceMotionInternal(CMMsl::RelativeDeviceMotionInternal *this, const CMMsl::RelativeDeviceMotionInternal *a2)
{
  _QWORD *v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  char v24;
  char v25;
  char v26;
  int v27;
  int v28;
  int v29;
  char v30;
  char v31;
  char v32;
  int v33;
  int v34;
  char v35;
  char v36;
  char v37;
  uint64_t v38;
  int v39;
  char v40;

  *(_QWORD *)this = &off_251360738;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (_QWORD *)((char *)this + 8);
  *((_DWORD *)this + 41) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  v5 = *((_DWORD *)a2 + 41);
  if ((v5 & 2) != 0)
  {
    v7 = *((_QWORD *)a2 + 8);
    v6 = 2;
    *((_DWORD *)this + 41) = 2;
    *((_QWORD *)this + 8) = v7;
    v5 = *((_DWORD *)a2 + 41);
    if ((v5 & 0x800) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((v5 & 0x800) != 0)
  {
LABEL_5:
    v8 = *((_DWORD *)a2 + 27);
    v6 |= 0x800u;
    *((_DWORD *)this + 41) = v6;
    *((_DWORD *)this + 27) = v8;
    v5 = *((_DWORD *)a2 + 41);
  }
LABEL_6:
  if ((v5 & 0x1000) != 0)
  {
    v13 = *((_DWORD *)a2 + 28);
    v6 |= 0x1000u;
    *((_DWORD *)this + 41) = v6;
    *((_DWORD *)this + 28) = v13;
    v5 = *((_DWORD *)a2 + 41);
    if ((v5 & 0x2000) == 0)
    {
LABEL_8:
      if ((v5 & 0x4000) == 0)
        goto LABEL_9;
      goto LABEL_43;
    }
  }
  else if ((v5 & 0x2000) == 0)
  {
    goto LABEL_8;
  }
  v14 = *((_DWORD *)a2 + 29);
  v6 |= 0x2000u;
  *((_DWORD *)this + 41) = v6;
  *((_DWORD *)this + 29) = v14;
  v5 = *((_DWORD *)a2 + 41);
  if ((v5 & 0x4000) == 0)
  {
LABEL_9:
    if ((v5 & 0x8000) == 0)
      goto LABEL_10;
    goto LABEL_44;
  }
LABEL_43:
  v15 = *((_DWORD *)a2 + 30);
  v6 |= 0x4000u;
  *((_DWORD *)this + 41) = v6;
  *((_DWORD *)this + 30) = v15;
  v5 = *((_DWORD *)a2 + 41);
  if ((v5 & 0x8000) == 0)
  {
LABEL_10:
    if ((v5 & 0x10000) == 0)
      goto LABEL_11;
    goto LABEL_45;
  }
LABEL_44:
  v16 = *((_DWORD *)a2 + 31);
  v6 |= 0x8000u;
  *((_DWORD *)this + 41) = v6;
  *((_DWORD *)this + 31) = v16;
  v5 = *((_DWORD *)a2 + 41);
  if ((v5 & 0x10000) == 0)
  {
LABEL_11:
    if ((v5 & 0x80000) == 0)
      goto LABEL_12;
    goto LABEL_46;
  }
LABEL_45:
  v17 = *((_DWORD *)a2 + 32);
  v6 |= 0x10000u;
  *((_DWORD *)this + 41) = v6;
  *((_DWORD *)this + 32) = v17;
  v5 = *((_DWORD *)a2 + 41);
  if ((v5 & 0x80000) == 0)
  {
LABEL_12:
    if ((v5 & 0x100000) == 0)
      goto LABEL_13;
    goto LABEL_47;
  }
LABEL_46:
  v18 = *((_DWORD *)a2 + 35);
  v6 |= 0x80000u;
  *((_DWORD *)this + 41) = v6;
  *((_DWORD *)this + 35) = v18;
  v5 = *((_DWORD *)a2 + 41);
  if ((v5 & 0x100000) == 0)
  {
LABEL_13:
    if ((v5 & 0x200000) == 0)
      goto LABEL_14;
    goto LABEL_48;
  }
LABEL_47:
  v19 = *((_DWORD *)a2 + 36);
  v6 |= 0x100000u;
  *((_DWORD *)this + 41) = v6;
  *((_DWORD *)this + 36) = v19;
  v5 = *((_DWORD *)a2 + 41);
  if ((v5 & 0x200000) == 0)
  {
LABEL_14:
    if ((v5 & 0x100) == 0)
      goto LABEL_15;
    goto LABEL_49;
  }
LABEL_48:
  v20 = *((_DWORD *)a2 + 37);
  v6 |= 0x200000u;
  *((_DWORD *)this + 41) = v6;
  *((_DWORD *)this + 37) = v20;
  v5 = *((_DWORD *)a2 + 41);
  if ((v5 & 0x100) == 0)
  {
LABEL_15:
    if ((v5 & 0x200) == 0)
      goto LABEL_16;
    goto LABEL_50;
  }
LABEL_49:
  v21 = *((_DWORD *)a2 + 24);
  v6 |= 0x100u;
  *((_DWORD *)this + 41) = v6;
  *((_DWORD *)this + 24) = v21;
  v5 = *((_DWORD *)a2 + 41);
  if ((v5 & 0x200) == 0)
  {
LABEL_16:
    if ((v5 & 0x400) == 0)
      goto LABEL_17;
    goto LABEL_51;
  }
LABEL_50:
  v22 = *((_DWORD *)a2 + 25);
  v6 |= 0x200u;
  *((_DWORD *)this + 41) = v6;
  *((_DWORD *)this + 25) = v22;
  v5 = *((_DWORD *)a2 + 41);
  if ((v5 & 0x400) == 0)
  {
LABEL_17:
    if ((v5 & 0x80) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_51:
  v23 = *((_DWORD *)a2 + 26);
  v6 |= 0x400u;
  *((_DWORD *)this + 41) = v6;
  *((_DWORD *)this + 26) = v23;
  if ((*((_DWORD *)a2 + 41) & 0x80) != 0)
  {
LABEL_18:
    v9 = *((_DWORD *)a2 + 23);
    *((_DWORD *)this + 41) = v6 | 0x80;
    *((_DWORD *)this + 23) = v9;
  }
LABEL_19:
  if (this != a2)
  {
    sub_242911380((_QWORD *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
    sub_242911380(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  }
  v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 0x8000000) != 0)
  {
    v24 = *((_BYTE *)a2 + 157);
    *((_DWORD *)this + 41) |= 0x8000000u;
    *((_BYTE *)this + 157) = v24;
    v10 = *((_DWORD *)a2 + 41);
    if ((v10 & 0x400000) == 0)
    {
LABEL_23:
      if ((v10 & 0x1000000) == 0)
        goto LABEL_24;
      goto LABEL_55;
    }
  }
  else if ((v10 & 0x400000) == 0)
  {
    goto LABEL_23;
  }
  v25 = *((_BYTE *)a2 + 152);
  *((_DWORD *)this + 41) |= 0x400000u;
  *((_BYTE *)this + 152) = v25;
  v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 0x1000000) == 0)
  {
LABEL_24:
    if ((v10 & 0x10) == 0)
      goto LABEL_25;
    goto LABEL_56;
  }
LABEL_55:
  v26 = *((_BYTE *)a2 + 154);
  *((_DWORD *)this + 41) |= 0x1000000u;
  *((_BYTE *)this + 154) = v26;
  v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 0x10) == 0)
  {
LABEL_25:
    if ((v10 & 8) == 0)
      goto LABEL_26;
    goto LABEL_57;
  }
LABEL_56:
  v27 = *((_DWORD *)a2 + 20);
  *((_DWORD *)this + 41) |= 0x10u;
  *((_DWORD *)this + 20) = v27;
  v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 8) == 0)
  {
LABEL_26:
    if ((v10 & 4) == 0)
      goto LABEL_27;
    goto LABEL_58;
  }
LABEL_57:
  v28 = *((_DWORD *)a2 + 19);
  *((_DWORD *)this + 41) |= 8u;
  *((_DWORD *)this + 19) = v28;
  v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 4) == 0)
  {
LABEL_27:
    if ((v10 & 0x20000000) == 0)
      goto LABEL_28;
    goto LABEL_59;
  }
LABEL_58:
  v29 = *((_DWORD *)a2 + 18);
  *((_DWORD *)this + 41) |= 4u;
  *((_DWORD *)this + 18) = v29;
  v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 0x20000000) == 0)
  {
LABEL_28:
    if ((v10 & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_60;
  }
LABEL_59:
  v30 = *((_BYTE *)a2 + 159);
  *((_DWORD *)this + 41) |= 0x20000000u;
  *((_BYTE *)this + 159) = v30;
  v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 0x80000000) == 0)
  {
LABEL_29:
    if ((v10 & 0x800000) == 0)
      goto LABEL_30;
    goto LABEL_61;
  }
LABEL_60:
  v31 = *((_BYTE *)a2 + 161);
  *((_DWORD *)this + 41) |= 0x80000000;
  *((_BYTE *)this + 161) = v31;
  v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 0x800000) == 0)
  {
LABEL_30:
    if ((v10 & 0x20) == 0)
      goto LABEL_31;
    goto LABEL_62;
  }
LABEL_61:
  v32 = *((_BYTE *)a2 + 153);
  *((_DWORD *)this + 41) |= 0x800000u;
  *((_BYTE *)this + 153) = v32;
  v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 0x20) == 0)
  {
LABEL_31:
    if ((v10 & 0x40000) == 0)
      goto LABEL_32;
    goto LABEL_63;
  }
LABEL_62:
  v33 = *((_DWORD *)a2 + 21);
  *((_DWORD *)this + 41) |= 0x20u;
  *((_DWORD *)this + 21) = v33;
  v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 0x40000) == 0)
  {
LABEL_32:
    if ((v10 & 0x10000000) == 0)
      goto LABEL_33;
    goto LABEL_64;
  }
LABEL_63:
  v34 = *((_DWORD *)a2 + 34);
  *((_DWORD *)this + 41) |= 0x40000u;
  *((_DWORD *)this + 34) = v34;
  v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 0x10000000) == 0)
  {
LABEL_33:
    if ((v10 & 0x4000000) == 0)
      goto LABEL_34;
    goto LABEL_65;
  }
LABEL_64:
  v35 = *((_BYTE *)a2 + 158);
  *((_DWORD *)this + 41) |= 0x10000000u;
  *((_BYTE *)this + 158) = v35;
  v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 0x4000000) == 0)
  {
LABEL_34:
    if ((v10 & 0x40000000) == 0)
      goto LABEL_35;
    goto LABEL_66;
  }
LABEL_65:
  v36 = *((_BYTE *)a2 + 156);
  *((_DWORD *)this + 41) |= 0x4000000u;
  *((_BYTE *)this + 156) = v36;
  v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 0x40000000) == 0)
  {
LABEL_35:
    if ((v10 & 1) == 0)
      goto LABEL_36;
    goto LABEL_67;
  }
LABEL_66:
  v37 = *((_BYTE *)a2 + 160);
  *((_DWORD *)this + 41) |= 0x40000000u;
  *((_BYTE *)this + 160) = v37;
  v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 1) == 0)
  {
LABEL_36:
    if ((v10 & 0x40) == 0)
      goto LABEL_37;
    goto LABEL_68;
  }
LABEL_67:
  v38 = *((_QWORD *)a2 + 7);
  *((_DWORD *)this + 41) |= 1u;
  *((_QWORD *)this + 7) = v38;
  v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 0x40) == 0)
  {
LABEL_37:
    if ((v10 & 0x2000000) == 0)
      goto LABEL_38;
LABEL_69:
    v40 = *((_BYTE *)a2 + 155);
    *((_DWORD *)this + 41) |= 0x2000000u;
    *((_BYTE *)this + 155) = v40;
    if ((*((_DWORD *)a2 + 41) & 0x20000) == 0)
      return this;
    goto LABEL_39;
  }
LABEL_68:
  v39 = *((_DWORD *)a2 + 22);
  *((_DWORD *)this + 41) |= 0x40u;
  *((_DWORD *)this + 22) = v39;
  v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 0x2000000) != 0)
    goto LABEL_69;
LABEL_38:
  if ((v10 & 0x20000) != 0)
  {
LABEL_39:
    v11 = *((_DWORD *)a2 + 33);
    *((_DWORD *)this + 41) |= 0x20000u;
    *((_DWORD *)this + 33) = v11;
  }
  return this;
}

CMMsl *CMMsl::RelativeDeviceMotionInternal::operator=(CMMsl *a1, const CMMsl::RelativeDeviceMotionInternal *a2)
{
  CMMsl::RelativeDeviceMotionInternal *v3;
  _BYTE v5[168];

  if (a1 != a2)
  {
    CMMsl::RelativeDeviceMotionInternal::RelativeDeviceMotionInternal((CMMsl::RelativeDeviceMotionInternal *)v5, a2);
    CMMsl::swap(a1, (CMMsl::RelativeDeviceMotionInternal *)v5, v3);
    CMMsl::RelativeDeviceMotionInternal::~RelativeDeviceMotionInternal((CMMsl::RelativeDeviceMotionInternal *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::RelativeDeviceMotionInternal *a2, CMMsl::RelativeDeviceMotionInternal *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;

  v3 = *((_DWORD *)this + 41);
  *((_DWORD *)this + 41) = *((_DWORD *)a2 + 41);
  *((_DWORD *)a2 + 41) = v3;
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v4;
  LODWORD(v4) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v4;
  LODWORD(v4) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v4;
  LODWORD(v4) = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v4;
  LODWORD(v4) = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v4;
  LODWORD(v4) = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v4;
  LODWORD(v4) = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v4;
  LODWORD(v4) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v4;
  LODWORD(v4) = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v4;
  LODWORD(v4) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v4;
  LODWORD(v4) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v4;
  LODWORD(v4) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v4;
  LODWORD(v4) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v4;
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v5;
  v6 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v6;
  v7 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v7;
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v8;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v9;
  v10 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v10;
  LOBYTE(v10) = *((_BYTE *)this + 157);
  *((_BYTE *)this + 157) = *((_BYTE *)a2 + 157);
  *((_BYTE *)a2 + 157) = v10;
  LOBYTE(v10) = *((_BYTE *)this + 152);
  *((_BYTE *)this + 152) = *((_BYTE *)a2 + 152);
  *((_BYTE *)a2 + 152) = v10;
  LOBYTE(v10) = *((_BYTE *)this + 154);
  *((_BYTE *)this + 154) = *((_BYTE *)a2 + 154);
  *((_BYTE *)a2 + 154) = v10;
  LODWORD(v4) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v4;
  LODWORD(v4) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v4;
  LODWORD(v4) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v4;
  LOBYTE(v10) = *((_BYTE *)this + 159);
  *((_BYTE *)this + 159) = *((_BYTE *)a2 + 159);
  *((_BYTE *)a2 + 159) = v10;
  LOBYTE(v10) = *((_BYTE *)this + 161);
  *((_BYTE *)this + 161) = *((_BYTE *)a2 + 161);
  *((_BYTE *)a2 + 161) = v10;
  LOBYTE(v10) = *((_BYTE *)this + 153);
  *((_BYTE *)this + 153) = *((_BYTE *)a2 + 153);
  *((_BYTE *)a2 + 153) = v10;
  LODWORD(v4) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v4;
  LODWORD(v10) = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v10;
  LOBYTE(v10) = *((_BYTE *)this + 158);
  *((_BYTE *)this + 158) = *((_BYTE *)a2 + 158);
  *((_BYTE *)a2 + 158) = v10;
  LOBYTE(v10) = *((_BYTE *)this + 156);
  *((_BYTE *)this + 156) = *((_BYTE *)a2 + 156);
  *((_BYTE *)a2 + 156) = v10;
  LOBYTE(v10) = *((_BYTE *)this + 160);
  *((_BYTE *)this + 160) = *((_BYTE *)a2 + 160);
  *((_BYTE *)a2 + 160) = v10;
  result = *((double *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((double *)a2 + 7) = result;
  LODWORD(v10) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v10;
  LOBYTE(v10) = *((_BYTE *)this + 155);
  *((_BYTE *)this + 155) = *((_BYTE *)a2 + 155);
  *((_BYTE *)a2 + 155) = v10;
  LODWORD(v10) = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v10;
  return result;
}

uint64_t CMMsl::RelativeDeviceMotionInternal::RelativeDeviceMotionInternal(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_251360738;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_DWORD *)(a2 + 164) = 0;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  sub_242911330(a1 + 32, (__n128 *)(a2 + 32));
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  *(_BYTE *)(a1 + 157) = *(_BYTE *)(a2 + 157);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_BYTE *)(a1 + 154) = *(_BYTE *)(a2 + 154);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 159) = *(_BYTE *)(a2 + 159);
  *(_BYTE *)(a1 + 161) = *(_BYTE *)(a2 + 161);
  *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 158) = *(_BYTE *)(a2 + 158);
  *(_BYTE *)(a1 + 156) = *(_BYTE *)(a2 + 156);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 155) = *(_BYTE *)(a2 + 155);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  return a1;
}

CMMsl *CMMsl::RelativeDeviceMotionInternal::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::RelativeDeviceMotionInternal *v3;
  _BYTE v5[168];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::RelativeDeviceMotionInternal::RelativeDeviceMotionInternal((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::RelativeDeviceMotionInternal *)v5, v3);
    CMMsl::RelativeDeviceMotionInternal::~RelativeDeviceMotionInternal((CMMsl::RelativeDeviceMotionInternal *)v5);
  }
  return a1;
}

uint64_t CMMsl::RelativeDeviceMotionInternal::formatText(CMMsl::RelativeDeviceMotionInternal *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;
  float *v6;
  float *v7;
  float v8;
  int v9;
  float *v10;
  float *v11;
  float v12;
  int v13;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 41);
  if ((v5 & 0x400000) != 0)
  {
    PB::TextFormatter::format(a2, "btz");
    v5 = *((_DWORD *)this + 41);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 0x800000) == 0)
        goto LABEL_4;
      goto LABEL_43;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "btzDisturbanceDuration", *((float *)this + 18));
  v5 = *((_DWORD *)this + 41);
  if ((v5 & 0x800000) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "btzIsCurrentlyQuiescent");
  v5 = *((_DWORD *)this + 41);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "btzQuiescentDurationLoose", *((float *)this + 19));
  v5 = *((_DWORD *)this + 41);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "btzQuiescentDurationStrict", *((float *)this + 20));
  v5 = *((_DWORD *)this + 41);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_8;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "btzStaticPoseDuration", *((float *)this + 21));
  v5 = *((_DWORD *)this + 41);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_8:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_9;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "centeredBoresight");
  v5 = *((_DWORD *)this + 41);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "centeredBoresightInHighDynamics");
  v5 = *((_DWORD *)this + 41);
  if ((v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "clientMode");
  if ((*((_DWORD *)this + 41) & 0x4000000) != 0)
LABEL_11:
    PB::TextFormatter::format(a2, "inComplexTransitionState");
LABEL_12:
  v6 = (float *)*((_QWORD *)this + 1);
  v7 = (float *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(a2, "noiseVariance", v8);
  }
  v9 = *((_DWORD *)this + 41);
  if ((v9 & 0x8000000) != 0)
  {
    PB::TextFormatter::format(a2, "pinnedBoresight");
    v9 = *((_DWORD *)this + 41);
    if ((v9 & 0x80) == 0)
    {
LABEL_16:
      if ((v9 & 0x100) == 0)
        goto LABEL_17;
      goto LABEL_53;
    }
  }
  else if ((v9 & 0x80) == 0)
  {
    goto LABEL_16;
  }
  PB::TextFormatter::format(a2, "qHat_W", *((float *)this + 23));
  v9 = *((_DWORD *)this + 41);
  if ((v9 & 0x100) == 0)
  {
LABEL_17:
    if ((v9 & 0x200) == 0)
      goto LABEL_18;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "qHat_X", *((float *)this + 24));
  v9 = *((_DWORD *)this + 41);
  if ((v9 & 0x200) == 0)
  {
LABEL_18:
    if ((v9 & 0x400) == 0)
      goto LABEL_19;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "qHat_Y", *((float *)this + 25));
  v9 = *((_DWORD *)this + 41);
  if ((v9 & 0x400) == 0)
  {
LABEL_19:
    if ((v9 & 0x800) == 0)
      goto LABEL_20;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "qHat_Z", *((float *)this + 26));
  v9 = *((_DWORD *)this + 41);
  if ((v9 & 0x800) == 0)
  {
LABEL_20:
    if ((v9 & 0x1000) == 0)
      goto LABEL_21;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "rBoresight_X", *((float *)this + 27));
  v9 = *((_DWORD *)this + 41);
  if ((v9 & 0x1000) == 0)
  {
LABEL_21:
    if ((v9 & 0x2000) == 0)
      goto LABEL_22;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "rBoresight_Y", *((float *)this + 28));
  v9 = *((_DWORD *)this + 41);
  if ((v9 & 0x2000) == 0)
  {
LABEL_22:
    if ((v9 & 0x4000) == 0)
      goto LABEL_23;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "rBoresight_Z", *((float *)this + 29));
  v9 = *((_DWORD *)this + 41);
  if ((v9 & 0x4000) == 0)
  {
LABEL_23:
    if ((v9 & 0x8000) == 0)
      goto LABEL_24;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "rHat_X", *((float *)this + 30));
  v9 = *((_DWORD *)this + 41);
  if ((v9 & 0x8000) == 0)
  {
LABEL_24:
    if ((v9 & 0x10000) == 0)
      goto LABEL_25;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "rHat_Y", *((float *)this + 31));
  v9 = *((_DWORD *)this + 41);
  if ((v9 & 0x10000) == 0)
  {
LABEL_25:
    if ((v9 & 0x10000000) == 0)
      goto LABEL_26;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "rHat_Z", *((float *)this + 32));
  v9 = *((_DWORD *)this + 41);
  if ((v9 & 0x10000000) == 0)
  {
LABEL_26:
    if ((v9 & 1) == 0)
      goto LABEL_28;
    goto LABEL_27;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "requestingCamera");
  if ((*((_DWORD *)this + 41) & 1) != 0)
LABEL_27:
    PB::TextFormatter::format(a2, "srcTimestamp", *((double *)this + 7));
LABEL_28:
  v10 = (float *)*((_QWORD *)this + 4);
  v11 = (float *)*((_QWORD *)this + 5);
  while (v10 != v11)
  {
    v12 = *v10++;
    PB::TextFormatter::format(a2, "stateVariance", v12);
  }
  v13 = *((_DWORD *)this + 41);
  if ((v13 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 8));
    v13 = *((_DWORD *)this + 41);
    if ((v13 & 0x20000000) == 0)
    {
LABEL_32:
      if ((v13 & 0x20000) == 0)
        goto LABEL_33;
      goto LABEL_66;
    }
  }
  else if ((v13 & 0x20000000) == 0)
  {
    goto LABEL_32;
  }
  PB::TextFormatter::format(a2, "tracking1IMU");
  v13 = *((_DWORD *)this + 41);
  if ((v13 & 0x20000) == 0)
  {
LABEL_33:
    if ((v13 & 0x40000000) == 0)
      goto LABEL_34;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "trackingBehavior");
  v13 = *((_DWORD *)this + 41);
  if ((v13 & 0x40000000) == 0)
  {
LABEL_34:
    if ((v13 & 0x40000) == 0)
      goto LABEL_35;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "trackingDisabled");
  v13 = *((_DWORD *)this + 41);
  if ((v13 & 0x40000) == 0)
  {
LABEL_35:
    if ((v13 & 0x80000000) == 0)
      goto LABEL_36;
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(a2, "trackingScheme");
  v13 = *((_DWORD *)this + 41);
  if ((v13 & 0x80000000) == 0)
  {
LABEL_36:
    if ((v13 & 0x80000) == 0)
      goto LABEL_37;
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(a2, "useRelaxedQuiescenceBounds");
  v13 = *((_DWORD *)this + 41);
  if ((v13 & 0x80000) == 0)
  {
LABEL_37:
    if ((v13 & 0x100000) == 0)
      goto LABEL_38;
LABEL_71:
    PB::TextFormatter::format(a2, "vHat_Y", *((float *)this + 36));
    if ((*((_DWORD *)this + 41) & 0x200000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_39;
  }
LABEL_70:
  PB::TextFormatter::format(a2, "vHat_X", *((float *)this + 35));
  v13 = *((_DWORD *)this + 41);
  if ((v13 & 0x100000) != 0)
    goto LABEL_71;
LABEL_38:
  if ((v13 & 0x200000) != 0)
LABEL_39:
    PB::TextFormatter::format(a2, "vHat_Z", *((float *)this + 37));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::RelativeDeviceMotionInternal::readFrom(CMMsl::RelativeDeviceMotionInternal *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  _DWORD *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  BOOL v43;
  unint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  _DWORD *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  _DWORD *v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  int v65;
  BOOL v66;
  unint64_t v67;
  unint64_t v68;
  int v69;
  BOOL v70;
  unint64_t v71;
  unint64_t v72;
  int v73;
  BOOL v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  int v80;
  BOOL v81;
  unint64_t v82;
  unint64_t v83;
  int v84;
  BOOL v85;
  unint64_t v86;
  unint64_t v87;
  int v88;
  BOOL v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  char v94;
  unsigned int v95;
  uint64_t v96;
  unint64_t v97;
  char v98;
  unint64_t v99;
  unint64_t v100;
  int v101;
  BOOL v102;
  unint64_t v103;
  unint64_t v104;
  int v105;
  BOOL v106;
  unint64_t v107;
  unint64_t v108;
  int v109;
  BOOL v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  char v116;
  unsigned int v117;
  uint64_t v118;
  unint64_t v119;
  char v120;
  unint64_t v121;
  unint64_t v122;
  int v123;
  BOOL v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  char v128;
  unsigned int v129;
  uint64_t v130;
  unint64_t v131;
  char v132;
  unint64_t v133;
  char *v134;
  _DWORD *v135;
  unint64_t v136;
  char *v137;
  char v138;
  unsigned int v139;
  unint64_t v140;
  char v141;
  char v142;
  unsigned int v143;
  unint64_t v144;
  char v145;
  char v146;
  unsigned int v147;
  unint64_t v148;
  char v149;
  char *v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  _DWORD *v162;
  int v163;
  _DWORD *v164;
  int v165;
  unint64_t v166;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_21:
      v19 = v11 & 7;
      if (v19 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_DWORD *)this + 41) |= 2u;
          v20 = *((_QWORD *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_257;
          *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v20);
          goto LABEL_151;
        case 2u:
          *((_DWORD *)this + 41) |= 0x800u;
          v21 = *((_QWORD *)a2 + 1);
          if (v21 > 0xFFFFFFFFFFFFFFFBLL || v21 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_257;
          *((_DWORD *)this + 27) = *(_DWORD *)(*(_QWORD *)a2 + v21);
          goto LABEL_259;
        case 3u:
          *((_DWORD *)this + 41) |= 0x1000u;
          v22 = *((_QWORD *)a2 + 1);
          if (v22 > 0xFFFFFFFFFFFFFFFBLL || v22 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_257;
          *((_DWORD *)this + 28) = *(_DWORD *)(*(_QWORD *)a2 + v22);
          goto LABEL_259;
        case 4u:
          *((_DWORD *)this + 41) |= 0x2000u;
          v23 = *((_QWORD *)a2 + 1);
          if (v23 > 0xFFFFFFFFFFFFFFFBLL || v23 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_257;
          *((_DWORD *)this + 29) = *(_DWORD *)(*(_QWORD *)a2 + v23);
          goto LABEL_259;
        case 5u:
          *((_DWORD *)this + 41) |= 0x4000u;
          v24 = *((_QWORD *)a2 + 1);
          if (v24 > 0xFFFFFFFFFFFFFFFBLL || v24 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_257;
          *((_DWORD *)this + 30) = *(_DWORD *)(*(_QWORD *)a2 + v24);
          goto LABEL_259;
        case 6u:
          *((_DWORD *)this + 41) |= 0x8000u;
          v25 = *((_QWORD *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFFBLL || v25 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_257;
          *((_DWORD *)this + 31) = *(_DWORD *)(*(_QWORD *)a2 + v25);
          goto LABEL_259;
        case 7u:
          *((_DWORD *)this + 41) |= 0x10000u;
          v26 = *((_QWORD *)a2 + 1);
          if (v26 > 0xFFFFFFFFFFFFFFFBLL || v26 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_257;
          *((_DWORD *)this + 32) = *(_DWORD *)(*(_QWORD *)a2 + v26);
          goto LABEL_259;
        case 8u:
          *((_DWORD *)this + 41) |= 0x80000u;
          v27 = *((_QWORD *)a2 + 1);
          if (v27 > 0xFFFFFFFFFFFFFFFBLL || v27 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_257;
          *((_DWORD *)this + 35) = *(_DWORD *)(*(_QWORD *)a2 + v27);
          goto LABEL_259;
        case 9u:
          *((_DWORD *)this + 41) |= 0x100000u;
          v28 = *((_QWORD *)a2 + 1);
          if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_257;
          *((_DWORD *)this + 36) = *(_DWORD *)(*(_QWORD *)a2 + v28);
          goto LABEL_259;
        case 0xAu:
          *((_DWORD *)this + 41) |= 0x200000u;
          v29 = *((_QWORD *)a2 + 1);
          if (v29 > 0xFFFFFFFFFFFFFFFBLL || v29 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_257;
          *((_DWORD *)this + 37) = *(_DWORD *)(*(_QWORD *)a2 + v29);
          goto LABEL_259;
        case 0xBu:
          *((_DWORD *)this + 41) |= 0x100u;
          v30 = *((_QWORD *)a2 + 1);
          if (v30 > 0xFFFFFFFFFFFFFFFBLL || v30 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_257;
          *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v30);
          goto LABEL_259;
        case 0xCu:
          *((_DWORD *)this + 41) |= 0x200u;
          v31 = *((_QWORD *)a2 + 1);
          if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_257;
          *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v31);
          goto LABEL_259;
        case 0xDu:
          *((_DWORD *)this + 41) |= 0x400u;
          v32 = *((_QWORD *)a2 + 1);
          if (v32 > 0xFFFFFFFFFFFFFFFBLL || v32 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_257;
          *((_DWORD *)this + 26) = *(_DWORD *)(*(_QWORD *)a2 + v32);
          goto LABEL_259;
        case 0xEu:
          *((_DWORD *)this + 41) |= 0x80u;
          v33 = *((_QWORD *)a2 + 1);
          if (v33 > 0xFFFFFFFFFFFFFFFBLL || v33 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_257;
          *((_DWORD *)this + 23) = *(_DWORD *)(*(_QWORD *)a2 + v33);
          goto LABEL_259;
        case 0xFu:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v34 = *((_QWORD *)a2 + 1);
            v35 = *((_QWORD *)a2 + 2);
            while (v34 < v35 && !*((_BYTE *)a2 + 24))
            {
              v37 = (char *)*((_QWORD *)this + 5);
              v36 = *((_QWORD *)this + 6);
              if ((unint64_t)v37 >= v36)
              {
                v39 = (char *)*((_QWORD *)this + 4);
                v40 = (v37 - v39) >> 2;
                v41 = v40 + 1;
                if ((unint64_t)(v40 + 1) >> 62)
                  goto LABEL_270;
                v42 = v36 - (_QWORD)v39;
                if (v42 >> 1 > v41)
                  v41 = v42 >> 1;
                v43 = (unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL;
                v44 = 0x3FFFFFFFFFFFFFFFLL;
                if (!v43)
                  v44 = v41;
                if (v44)
                {
                  v44 = (unint64_t)sub_2429114B8(v44);
                  v39 = (char *)*((_QWORD *)this + 4);
                  v37 = (char *)*((_QWORD *)this + 5);
                }
                else
                {
                  v45 = 0;
                }
                v46 = (_DWORD *)(v44 + 4 * v40);
                *v46 = 0;
                v38 = v46 + 1;
                while (v37 != v39)
                {
                  v47 = *((_DWORD *)v37 - 1);
                  v37 -= 4;
                  *--v46 = v47;
                }
                *((_QWORD *)this + 4) = v46;
                *((_QWORD *)this + 5) = v38;
                *((_QWORD *)this + 6) = v44 + 4 * v45;
                if (v39)
                  operator delete(v39);
              }
              else
              {
                *(_DWORD *)v37 = 0;
                v38 = v37 + 4;
              }
              *((_QWORD *)this + 5) = v38;
              v48 = *((_QWORD *)a2 + 1);
              if (v48 > 0xFFFFFFFFFFFFFFFBLL || v48 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_213;
              *(v38 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v48);
              v35 = *((_QWORD *)a2 + 2);
              v34 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v34;
            }
            goto LABEL_214;
          }
          v134 = (char *)*((_QWORD *)this + 5);
          v133 = *((_QWORD *)this + 6);
          if ((unint64_t)v134 >= v133)
          {
            v150 = (char *)*((_QWORD *)this + 4);
            v151 = (v134 - v150) >> 2;
            v152 = v151 + 1;
            if ((unint64_t)(v151 + 1) >> 62)
              goto LABEL_270;
            v153 = v133 - (_QWORD)v150;
            if (v153 >> 1 > v152)
              v152 = v153 >> 1;
            v43 = (unint64_t)v153 >= 0x7FFFFFFFFFFFFFFCLL;
            v154 = 0x3FFFFFFFFFFFFFFFLL;
            if (!v43)
              v154 = v152;
            if (v154)
            {
              v154 = (unint64_t)sub_2429114B8(v154);
              v150 = (char *)*((_QWORD *)this + 4);
              v134 = (char *)*((_QWORD *)this + 5);
            }
            else
            {
              v155 = 0;
            }
            v162 = (_DWORD *)(v154 + 4 * v151);
            *v162 = 0;
            v135 = v162 + 1;
            while (v134 != v150)
            {
              v163 = *((_DWORD *)v134 - 1);
              v134 -= 4;
              *--v162 = v163;
            }
            *((_QWORD *)this + 4) = v162;
            *((_QWORD *)this + 5) = v135;
            *((_QWORD *)this + 6) = v154 + 4 * v155;
            if (v150)
              operator delete(v150);
          }
          else
          {
            *(_DWORD *)v134 = 0;
            v135 = v134 + 4;
          }
          *((_QWORD *)this + 5) = v135;
          goto LABEL_255;
        case 0x10u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v49 = *((_QWORD *)a2 + 1);
            v50 = *((_QWORD *)a2 + 2);
            while (v49 < v50 && !*((_BYTE *)a2 + 24))
            {
              v52 = (char *)*((_QWORD *)this + 2);
              v51 = *((_QWORD *)this + 3);
              if ((unint64_t)v52 >= v51)
              {
                v54 = (char *)*((_QWORD *)this + 1);
                v55 = (v52 - v54) >> 2;
                v56 = v55 + 1;
                if ((unint64_t)(v55 + 1) >> 62)
                  goto LABEL_270;
                v57 = v51 - (_QWORD)v54;
                if (v57 >> 1 > v56)
                  v56 = v57 >> 1;
                v43 = (unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL;
                v58 = 0x3FFFFFFFFFFFFFFFLL;
                if (!v43)
                  v58 = v56;
                if (v58)
                {
                  v58 = (unint64_t)sub_2429114B8(v58);
                  v54 = (char *)*((_QWORD *)this + 1);
                  v52 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v59 = 0;
                }
                v60 = (_DWORD *)(v58 + 4 * v55);
                *v60 = 0;
                v53 = v60 + 1;
                while (v52 != v54)
                {
                  v61 = *((_DWORD *)v52 - 1);
                  v52 -= 4;
                  *--v60 = v61;
                }
                *((_QWORD *)this + 1) = v60;
                *((_QWORD *)this + 2) = v53;
                *((_QWORD *)this + 3) = v58 + 4 * v59;
                if (v54)
                  operator delete(v54);
              }
              else
              {
                *(_DWORD *)v52 = 0;
                v53 = v52 + 4;
              }
              *((_QWORD *)this + 2) = v53;
              v62 = *((_QWORD *)a2 + 1);
              if (v62 > 0xFFFFFFFFFFFFFFFBLL || v62 + 4 > *((_QWORD *)a2 + 2))
              {
LABEL_213:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v53 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v62);
              v50 = *((_QWORD *)a2 + 2);
              v49 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v49;
            }
LABEL_214:
            PB::Reader::recallMark();
          }
          else
          {
            v137 = (char *)*((_QWORD *)this + 2);
            v136 = *((_QWORD *)this + 3);
            if ((unint64_t)v137 >= v136)
            {
              v156 = (char *)*((_QWORD *)this + 1);
              v157 = (v137 - v156) >> 2;
              v158 = v157 + 1;
              if ((unint64_t)(v157 + 1) >> 62)
LABEL_270:
                sub_242729A44();
              v159 = v136 - (_QWORD)v156;
              if (v159 >> 1 > v158)
                v158 = v159 >> 1;
              v43 = (unint64_t)v159 >= 0x7FFFFFFFFFFFFFFCLL;
              v160 = 0x3FFFFFFFFFFFFFFFLL;
              if (!v43)
                v160 = v158;
              if (v160)
              {
                v160 = (unint64_t)sub_2429114B8(v160);
                v156 = (char *)*((_QWORD *)this + 1);
                v137 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v161 = 0;
              }
              v164 = (_DWORD *)(v160 + 4 * v157);
              *v164 = 0;
              v135 = v164 + 1;
              while (v137 != v156)
              {
                v165 = *((_DWORD *)v137 - 1);
                v137 -= 4;
                *--v164 = v165;
              }
              *((_QWORD *)this + 1) = v164;
              *((_QWORD *)this + 2) = v135;
              *((_QWORD *)this + 3) = v160 + 4 * v161;
              if (v156)
                operator delete(v156);
            }
            else
            {
              *(_DWORD *)v137 = 0;
              v135 = v137 + 4;
            }
            *((_QWORD *)this + 2) = v135;
LABEL_255:
            v166 = *((_QWORD *)a2 + 1);
            if (v166 <= 0xFFFFFFFFFFFFFFFBLL && v166 + 4 <= *((_QWORD *)a2 + 2))
            {
              *(v135 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v166);
LABEL_259:
              v112 = *((_QWORD *)a2 + 1) + 4;
LABEL_260:
              *((_QWORD *)a2 + 1) = v112;
            }
            else
            {
LABEL_257:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
          break;
        case 0x11u:
          *((_DWORD *)this + 41) |= 0x8000000u;
          v63 = *((_QWORD *)a2 + 1);
          if (v63 >= *((_QWORD *)a2 + 2))
          {
            v66 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v64 = v63 + 1;
            v65 = *(unsigned __int8 *)(*(_QWORD *)a2 + v63);
            *((_QWORD *)a2 + 1) = v64;
            v66 = v65 != 0;
          }
          *((_BYTE *)this + 157) = v66;
          goto LABEL_261;
        case 0x12u:
          *((_DWORD *)this + 41) |= 0x400000u;
          v67 = *((_QWORD *)a2 + 1);
          if (v67 >= *((_QWORD *)a2 + 2))
          {
            v70 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v68 = v67 + 1;
            v69 = *(unsigned __int8 *)(*(_QWORD *)a2 + v67);
            *((_QWORD *)a2 + 1) = v68;
            v70 = v69 != 0;
          }
          *((_BYTE *)this + 152) = v70;
          goto LABEL_261;
        case 0x13u:
          *((_DWORD *)this + 41) |= 0x1000000u;
          v71 = *((_QWORD *)a2 + 1);
          if (v71 >= *((_QWORD *)a2 + 2))
          {
            v74 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v72 = v71 + 1;
            v73 = *(unsigned __int8 *)(*(_QWORD *)a2 + v71);
            *((_QWORD *)a2 + 1) = v72;
            v74 = v73 != 0;
          }
          *((_BYTE *)this + 154) = v74;
          goto LABEL_261;
        case 0x14u:
          *((_DWORD *)this + 41) |= 0x10u;
          v75 = *((_QWORD *)a2 + 1);
          if (v75 > 0xFFFFFFFFFFFFFFFBLL || v75 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_257;
          *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v75);
          goto LABEL_259;
        case 0x15u:
          *((_DWORD *)this + 41) |= 8u;
          v76 = *((_QWORD *)a2 + 1);
          if (v76 > 0xFFFFFFFFFFFFFFFBLL || v76 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_257;
          *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v76);
          goto LABEL_259;
        case 0x16u:
          *((_DWORD *)this + 41) |= 4u;
          v77 = *((_QWORD *)a2 + 1);
          if (v77 > 0xFFFFFFFFFFFFFFFBLL || v77 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_257;
          *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v77);
          goto LABEL_259;
        case 0x17u:
          *((_DWORD *)this + 41) |= 0x20000000u;
          v78 = *((_QWORD *)a2 + 1);
          if (v78 >= *((_QWORD *)a2 + 2))
          {
            v81 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v79 = v78 + 1;
            v80 = *(unsigned __int8 *)(*(_QWORD *)a2 + v78);
            *((_QWORD *)a2 + 1) = v79;
            v81 = v80 != 0;
          }
          *((_BYTE *)this + 159) = v81;
          goto LABEL_261;
        case 0x18u:
          *((_DWORD *)this + 41) |= 0x80000000;
          v82 = *((_QWORD *)a2 + 1);
          if (v82 >= *((_QWORD *)a2 + 2))
          {
            v85 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v83 = v82 + 1;
            v84 = *(unsigned __int8 *)(*(_QWORD *)a2 + v82);
            *((_QWORD *)a2 + 1) = v83;
            v85 = v84 != 0;
          }
          *((_BYTE *)this + 161) = v85;
          goto LABEL_261;
        case 0x19u:
          *((_DWORD *)this + 41) |= 0x800000u;
          v86 = *((_QWORD *)a2 + 1);
          if (v86 >= *((_QWORD *)a2 + 2))
          {
            v89 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v87 = v86 + 1;
            v88 = *(unsigned __int8 *)(*(_QWORD *)a2 + v86);
            *((_QWORD *)a2 + 1) = v87;
            v89 = v88 != 0;
          }
          *((_BYTE *)this + 153) = v89;
          goto LABEL_261;
        case 0x1Au:
          *((_DWORD *)this + 41) |= 0x20u;
          v90 = *((_QWORD *)a2 + 1);
          if (v90 > 0xFFFFFFFFFFFFFFFBLL || v90 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_257;
          *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v90);
          goto LABEL_259;
        case 0x1Bu:
          *((_DWORD *)this + 41) |= 0x40000u;
          v91 = *((_QWORD *)a2 + 1);
          v92 = *((_QWORD *)a2 + 2);
          v93 = *(_QWORD *)a2;
          if (v91 <= 0xFFFFFFFFFFFFFFF5 && v91 + 10 <= v92)
          {
            v94 = 0;
            v95 = 0;
            v96 = 0;
            do
            {
              v97 = v91 + 1;
              *((_QWORD *)a2 + 1) = v91 + 1;
              v98 = *(_BYTE *)(v93 + v91);
              v96 |= (unint64_t)(v98 & 0x7F) << v94;
              if ((v98 & 0x80) == 0)
                goto LABEL_234;
              v94 += 7;
              v91 = v97;
              v14 = v95++ > 8;
            }
            while (!v14);
LABEL_190:
            LODWORD(v96) = 0;
            goto LABEL_234;
          }
          v138 = 0;
          v139 = 0;
          v96 = 0;
          if (v92 <= v91)
            v92 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v92 == v91)
            {
              LODWORD(v96) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v140 = v91 + 1;
              v141 = *(_BYTE *)(v93 + v91);
              *((_QWORD *)a2 + 1) = v140;
              v96 |= (unint64_t)(v141 & 0x7F) << v138;
              if (v141 < 0)
              {
                v138 += 7;
                v91 = v140;
                v14 = v139++ > 8;
                if (v14)
                  goto LABEL_190;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v96) = 0;
            }
            break;
          }
LABEL_234:
          *((_DWORD *)this + 34) = v96;
          goto LABEL_261;
        case 0x1Cu:
          *((_DWORD *)this + 41) |= 0x10000000u;
          v99 = *((_QWORD *)a2 + 1);
          if (v99 >= *((_QWORD *)a2 + 2))
          {
            v102 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v100 = v99 + 1;
            v101 = *(unsigned __int8 *)(*(_QWORD *)a2 + v99);
            *((_QWORD *)a2 + 1) = v100;
            v102 = v101 != 0;
          }
          *((_BYTE *)this + 158) = v102;
          goto LABEL_261;
        case 0x1Du:
          *((_DWORD *)this + 41) |= 0x4000000u;
          v103 = *((_QWORD *)a2 + 1);
          if (v103 >= *((_QWORD *)a2 + 2))
          {
            v106 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v104 = v103 + 1;
            v105 = *(unsigned __int8 *)(*(_QWORD *)a2 + v103);
            *((_QWORD *)a2 + 1) = v104;
            v106 = v105 != 0;
          }
          *((_BYTE *)this + 156) = v106;
          goto LABEL_261;
        case 0x1Eu:
          *((_DWORD *)this + 41) |= 0x40000000u;
          v107 = *((_QWORD *)a2 + 1);
          if (v107 >= *((_QWORD *)a2 + 2))
          {
            v110 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v108 = v107 + 1;
            v109 = *(unsigned __int8 *)(*(_QWORD *)a2 + v107);
            *((_QWORD *)a2 + 1) = v108;
            v110 = v109 != 0;
          }
          *((_BYTE *)this + 160) = v110;
          goto LABEL_261;
        case 0x1Fu:
          *((_DWORD *)this + 41) |= 1u;
          v111 = *((_QWORD *)a2 + 1);
          if (v111 > 0xFFFFFFFFFFFFFFF7 || v111 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_257;
          *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v111);
LABEL_151:
          v112 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_260;
        case 0x20u:
          *((_DWORD *)this + 41) |= 0x40u;
          v113 = *((_QWORD *)a2 + 1);
          v114 = *((_QWORD *)a2 + 2);
          v115 = *(_QWORD *)a2;
          if (v113 <= 0xFFFFFFFFFFFFFFF5 && v113 + 10 <= v114)
          {
            v116 = 0;
            v117 = 0;
            v118 = 0;
            do
            {
              v119 = v113 + 1;
              *((_QWORD *)a2 + 1) = v113 + 1;
              v120 = *(_BYTE *)(v115 + v113);
              v118 |= (unint64_t)(v120 & 0x7F) << v116;
              if ((v120 & 0x80) == 0)
                goto LABEL_237;
              v116 += 7;
              v113 = v119;
              v14 = v117++ > 8;
            }
            while (!v14);
LABEL_203:
            LODWORD(v118) = 0;
            goto LABEL_237;
          }
          v142 = 0;
          v143 = 0;
          v118 = 0;
          if (v114 <= v113)
            v114 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v114 == v113)
            {
              LODWORD(v118) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v144 = v113 + 1;
              v145 = *(_BYTE *)(v115 + v113);
              *((_QWORD *)a2 + 1) = v144;
              v118 |= (unint64_t)(v145 & 0x7F) << v142;
              if (v145 < 0)
              {
                v142 += 7;
                v113 = v144;
                v14 = v143++ > 8;
                if (v14)
                  goto LABEL_203;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v118) = 0;
            }
            break;
          }
LABEL_237:
          *((_DWORD *)this + 22) = v118;
          goto LABEL_261;
        case 0x21u:
          *((_DWORD *)this + 41) |= 0x2000000u;
          v121 = *((_QWORD *)a2 + 1);
          if (v121 >= *((_QWORD *)a2 + 2))
          {
            v124 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v122 = v121 + 1;
            v123 = *(unsigned __int8 *)(*(_QWORD *)a2 + v121);
            *((_QWORD *)a2 + 1) = v122;
            v124 = v123 != 0;
          }
          *((_BYTE *)this + 155) = v124;
          goto LABEL_261;
        case 0x22u:
          *((_DWORD *)this + 41) |= 0x20000u;
          v125 = *((_QWORD *)a2 + 1);
          v126 = *((_QWORD *)a2 + 2);
          v127 = *(_QWORD *)a2;
          if (v125 <= 0xFFFFFFFFFFFFFFF5 && v125 + 10 <= v126)
          {
            v128 = 0;
            v129 = 0;
            v130 = 0;
            do
            {
              v131 = v125 + 1;
              *((_QWORD *)a2 + 1) = v125 + 1;
              v132 = *(_BYTE *)(v127 + v125);
              v130 |= (unint64_t)(v132 & 0x7F) << v128;
              if ((v132 & 0x80) == 0)
                goto LABEL_240;
              v128 += 7;
              v125 = v131;
              v14 = v129++ > 8;
            }
            while (!v14);
LABEL_212:
            LODWORD(v130) = 0;
            goto LABEL_240;
          }
          v146 = 0;
          v147 = 0;
          v130 = 0;
          if (v126 <= v125)
            v126 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v126 == v125)
            {
              LODWORD(v130) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v148 = v125 + 1;
              v149 = *(_BYTE *)(v127 + v125);
              *((_QWORD *)a2 + 1) = v148;
              v130 |= (unint64_t)(v149 & 0x7F) << v146;
              if (v149 < 0)
              {
                v146 += 7;
                v125 = v148;
                v14 = v147++ > 8;
                if (v14)
                  goto LABEL_212;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v130) = 0;
            }
            break;
          }
LABEL_240:
          *((_DWORD *)this + 33) = v130;
          goto LABEL_261;
        default:
          goto LABEL_19;
      }
      goto LABEL_261;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_21;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    if ((PB::Reader::skip(a2) & 1) == 0)
      return 0;
LABEL_261:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
}

uint64_t CMMsl::RelativeDeviceMotionInternal::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;
  int v11;

  v3 = this;
  v4 = *(_DWORD *)(this + 164);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 64));
    v4 = *(_DWORD *)(v3 + 164);
    if ((v4 & 0x800) == 0)
    {
LABEL_3:
      if ((v4 & 0x1000) == 0)
        goto LABEL_4;
      goto LABEL_43;
    }
  }
  else if ((v4 & 0x800) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 108));
  v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x1000) == 0)
  {
LABEL_4:
    if ((v4 & 0x2000) == 0)
      goto LABEL_5;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(float *)(v3 + 112));
  v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x2000) == 0)
  {
LABEL_5:
    if ((v4 & 0x4000) == 0)
      goto LABEL_6;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(float *)(v3 + 116));
  v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x4000) == 0)
  {
LABEL_6:
    if ((v4 & 0x8000) == 0)
      goto LABEL_7;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(float *)(v3 + 120));
  v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x8000) == 0)
  {
LABEL_7:
    if ((v4 & 0x10000) == 0)
      goto LABEL_8;
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(float *)(v3 + 124));
  v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x10000) == 0)
  {
LABEL_8:
    if ((v4 & 0x80000) == 0)
      goto LABEL_9;
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(float *)(v3 + 128));
  v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x80000) == 0)
  {
LABEL_9:
    if ((v4 & 0x100000) == 0)
      goto LABEL_10;
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(float *)(v3 + 140));
  v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x100000) == 0)
  {
LABEL_10:
    if ((v4 & 0x200000) == 0)
      goto LABEL_11;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(float *)(v3 + 144));
  v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x200000) == 0)
  {
LABEL_11:
    if ((v4 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(float *)(v3 + 148));
  v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x100) == 0)
  {
LABEL_12:
    if ((v4 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(float *)(v3 + 96));
  v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x200) == 0)
  {
LABEL_13:
    if ((v4 & 0x400) == 0)
      goto LABEL_14;
LABEL_53:
    this = PB::Writer::write(a2, *(float *)(v3 + 104));
    if ((*(_DWORD *)(v3 + 164) & 0x80) == 0)
      goto LABEL_16;
    goto LABEL_15;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(float *)(v3 + 100));
  v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x400) != 0)
    goto LABEL_53;
LABEL_14:
  if ((v4 & 0x80) != 0)
LABEL_15:
    this = PB::Writer::write(a2, *(float *)(v3 + 92));
LABEL_16:
  v5 = *(float **)(v3 + 32);
  v6 = *(float **)(v3 + 40);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7);
  }
  v8 = *(float **)(v3 + 8);
  v9 = *(float **)(v3 + 16);
  while (v8 != v9)
  {
    v10 = *v8++;
    this = PB::Writer::write(a2, v10);
  }
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x8000000) != 0)
  {
    this = PB::Writer::write(a2);
    v11 = *(_DWORD *)(v3 + 164);
    if ((v11 & 0x400000) == 0)
    {
LABEL_24:
      if ((v11 & 0x1000000) == 0)
        goto LABEL_25;
      goto LABEL_57;
    }
  }
  else if ((v11 & 0x400000) == 0)
  {
    goto LABEL_24;
  }
  this = PB::Writer::write(a2);
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v11 & 0x10) == 0)
      goto LABEL_26;
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2);
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x10) == 0)
  {
LABEL_26:
    if ((v11 & 8) == 0)
      goto LABEL_27;
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::write(a2, *(float *)(v3 + 80));
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 8) == 0)
  {
LABEL_27:
    if ((v11 & 4) == 0)
      goto LABEL_28;
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(float *)(v3 + 76));
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 4) == 0)
  {
LABEL_28:
    if ((v11 & 0x20000000) == 0)
      goto LABEL_29;
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::write(a2, *(float *)(v3 + 72));
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x20000000) == 0)
  {
LABEL_29:
    if ((v11 & 0x80000000) == 0)
      goto LABEL_30;
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::write(a2);
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x80000000) == 0)
  {
LABEL_30:
    if ((v11 & 0x800000) == 0)
      goto LABEL_31;
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::write(a2);
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x800000) == 0)
  {
LABEL_31:
    if ((v11 & 0x20) == 0)
      goto LABEL_32;
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::write(a2);
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x20) == 0)
  {
LABEL_32:
    if ((v11 & 0x40000) == 0)
      goto LABEL_33;
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::write(a2, *(float *)(v3 + 84));
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x40000) == 0)
  {
LABEL_33:
    if ((v11 & 0x10000000) == 0)
      goto LABEL_34;
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::writeVarInt(a2);
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x10000000) == 0)
  {
LABEL_34:
    if ((v11 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::write(a2);
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v11 & 0x40000000) == 0)
      goto LABEL_36;
    goto LABEL_68;
  }
LABEL_67:
  this = PB::Writer::write(a2);
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x40000000) == 0)
  {
LABEL_36:
    if ((v11 & 1) == 0)
      goto LABEL_37;
    goto LABEL_69;
  }
LABEL_68:
  this = PB::Writer::write(a2);
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 1) == 0)
  {
LABEL_37:
    if ((v11 & 0x40) == 0)
      goto LABEL_38;
    goto LABEL_70;
  }
LABEL_69:
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x40) == 0)
  {
LABEL_38:
    if ((v11 & 0x2000000) == 0)
      goto LABEL_39;
    goto LABEL_71;
  }
LABEL_70:
  this = PB::Writer::writeVarInt(a2);
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x2000000) == 0)
  {
LABEL_39:
    if ((v11 & 0x20000) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_71:
  this = PB::Writer::write(a2);
  if ((*(_DWORD *)(v3 + 164) & 0x20000) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::RelativeDeviceMotionInternal::hash_value(CMMsl::RelativeDeviceMotionInternal *this)
{
  int v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v2 = *((_DWORD *)this + 41);
  if ((v2 & 2) == 0)
  {
    v56 = 0.0;
    if ((v2 & 0x800) != 0)
      goto LABEL_3;
LABEL_51:
    v4 = 0;
    if ((v2 & 0x1000) != 0)
      goto LABEL_7;
LABEL_52:
    v62 = 0;
    if ((v2 & 0x2000) != 0)
      goto LABEL_10;
LABEL_53:
    v61 = 0;
    if ((v2 & 0x4000) != 0)
      goto LABEL_13;
LABEL_54:
    v60 = 0;
    if ((v2 & 0x8000) != 0)
      goto LABEL_16;
LABEL_55:
    v59 = 0;
    if ((v2 & 0x10000) != 0)
      goto LABEL_19;
LABEL_56:
    v58 = 0;
    if ((v2 & 0x80000) != 0)
      goto LABEL_22;
LABEL_57:
    v57 = 0;
    if ((v2 & 0x100000) != 0)
      goto LABEL_25;
LABEL_58:
    v18 = 0;
    if ((v2 & 0x200000) != 0)
      goto LABEL_29;
LABEL_59:
    v20 = 0;
    if ((v2 & 0x100) != 0)
      goto LABEL_33;
LABEL_60:
    v22 = 0;
    if ((v2 & 0x200) != 0)
      goto LABEL_37;
LABEL_61:
    v24 = 0;
    if ((v2 & 0x400) != 0)
      goto LABEL_41;
    goto LABEL_62;
  }
  v29 = *((double *)this + 8);
  if (v29 == 0.0)
    v29 = 0.0;
  v56 = v29;
  if ((v2 & 0x800) == 0)
    goto LABEL_51;
LABEL_3:
  v3 = *((float *)this + 27);
  if (v3 == 0.0)
    v4 = 0;
  else
    v4 = LODWORD(v3);
  if ((v2 & 0x1000) == 0)
    goto LABEL_52;
LABEL_7:
  v5 = *((float *)this + 28);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  v62 = v6;
  if ((v2 & 0x2000) == 0)
    goto LABEL_53;
LABEL_10:
  v7 = *((float *)this + 29);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  v61 = v8;
  if ((v2 & 0x4000) == 0)
    goto LABEL_54;
LABEL_13:
  v9 = *((float *)this + 30);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  v60 = v10;
  if ((v2 & 0x8000) == 0)
    goto LABEL_55;
LABEL_16:
  v11 = *((float *)this + 31);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  v59 = v12;
  if ((v2 & 0x10000) == 0)
    goto LABEL_56;
LABEL_19:
  v13 = *((float *)this + 32);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  v58 = v14;
  if ((v2 & 0x80000) == 0)
    goto LABEL_57;
LABEL_22:
  v15 = *((float *)this + 35);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  v57 = v16;
  if ((v2 & 0x100000) == 0)
    goto LABEL_58;
LABEL_25:
  v17 = *((float *)this + 36);
  if (v17 == 0.0)
    v18 = 0;
  else
    v18 = LODWORD(v17);
  if ((v2 & 0x200000) == 0)
    goto LABEL_59;
LABEL_29:
  v19 = *((float *)this + 37);
  if (v19 == 0.0)
    v20 = 0;
  else
    v20 = LODWORD(v19);
  if ((v2 & 0x100) == 0)
    goto LABEL_60;
LABEL_33:
  v21 = *((float *)this + 24);
  if (v21 == 0.0)
    v22 = 0;
  else
    v22 = LODWORD(v21);
  if ((v2 & 0x200) == 0)
    goto LABEL_61;
LABEL_37:
  v23 = *((float *)this + 25);
  if (v23 == 0.0)
    v24 = 0;
  else
    v24 = LODWORD(v23);
  if ((v2 & 0x400) != 0)
  {
LABEL_41:
    v25 = *((float *)this + 26);
    if (v25 == 0.0)
      v26 = 0;
    else
      v26 = LODWORD(v25);
    if ((v2 & 0x80) != 0)
      goto LABEL_45;
LABEL_63:
    v28 = 0;
    goto LABEL_64;
  }
LABEL_62:
  v26 = 0;
  if ((v2 & 0x80) == 0)
    goto LABEL_63;
LABEL_45:
  v27 = *((float *)this + 23);
  if (v27 == 0.0)
    v28 = 0;
  else
    v28 = LODWORD(v27);
LABEL_64:
  v30 = PBHashBytes();
  v31 = PBHashBytes();
  v32 = *((_DWORD *)this + 41);
  if ((v32 & 0x8000000) != 0)
  {
    v33 = *((unsigned __int8 *)this + 157);
    if ((v32 & 0x400000) != 0)
    {
LABEL_66:
      v34 = *((unsigned __int8 *)this + 152);
      if ((v32 & 0x1000000) != 0)
        goto LABEL_67;
      goto LABEL_95;
    }
  }
  else
  {
    v33 = 0;
    if ((v32 & 0x400000) != 0)
      goto LABEL_66;
  }
  v34 = 0;
  if ((v32 & 0x1000000) != 0)
  {
LABEL_67:
    v35 = *((unsigned __int8 *)this + 154);
    if ((v32 & 0x10) != 0)
      goto LABEL_68;
LABEL_96:
    v37 = 0;
    if ((v32 & 8) != 0)
      goto LABEL_71;
LABEL_97:
    v39 = 0;
    if ((v32 & 4) != 0)
      goto LABEL_74;
LABEL_98:
    v41 = 0;
    if ((v32 & 0x20000000) != 0)
      goto LABEL_77;
    goto LABEL_99;
  }
LABEL_95:
  v35 = 0;
  if ((v32 & 0x10) == 0)
    goto LABEL_96;
LABEL_68:
  v36 = *((float *)this + 20);
  v37 = LODWORD(v36);
  if (v36 == 0.0)
    v37 = 0;
  if ((v32 & 8) == 0)
    goto LABEL_97;
LABEL_71:
  v38 = *((float *)this + 19);
  v39 = LODWORD(v38);
  if (v38 == 0.0)
    v39 = 0;
  if ((v32 & 4) == 0)
    goto LABEL_98;
LABEL_74:
  v40 = *((float *)this + 18);
  v41 = LODWORD(v40);
  if (v40 == 0.0)
    v41 = 0;
  if ((v32 & 0x20000000) != 0)
  {
LABEL_77:
    v42 = *((unsigned __int8 *)this + 159);
    if (v32 < 0)
      goto LABEL_78;
    goto LABEL_100;
  }
LABEL_99:
  v42 = 0;
  if (v32 < 0)
  {
LABEL_78:
    v43 = *((unsigned __int8 *)this + 161);
    if ((v32 & 0x800000) != 0)
      goto LABEL_79;
    goto LABEL_101;
  }
LABEL_100:
  v43 = 0;
  if ((v32 & 0x800000) != 0)
  {
LABEL_79:
    v44 = *((unsigned __int8 *)this + 153);
    if ((v32 & 0x20) != 0)
      goto LABEL_80;
LABEL_102:
    v46 = 0;
    if ((v32 & 0x40000) != 0)
      goto LABEL_83;
    goto LABEL_103;
  }
LABEL_101:
  v44 = 0;
  if ((v32 & 0x20) == 0)
    goto LABEL_102;
LABEL_80:
  v45 = *((float *)this + 21);
  v46 = LODWORD(v45);
  if (v45 == 0.0)
    v46 = 0;
  if ((v32 & 0x40000) != 0)
  {
LABEL_83:
    v47 = *((unsigned int *)this + 34);
    if ((v32 & 0x10000000) != 0)
      goto LABEL_84;
    goto LABEL_104;
  }
LABEL_103:
  v47 = 0;
  if ((v32 & 0x10000000) != 0)
  {
LABEL_84:
    v48 = *((unsigned __int8 *)this + 158);
    if ((v32 & 0x4000000) != 0)
      goto LABEL_85;
    goto LABEL_105;
  }
LABEL_104:
  v48 = 0;
  if ((v32 & 0x4000000) != 0)
  {
LABEL_85:
    v49 = *((unsigned __int8 *)this + 156);
    if ((v32 & 0x40000000) != 0)
      goto LABEL_86;
    goto LABEL_106;
  }
LABEL_105:
  v49 = 0;
  if ((v32 & 0x40000000) != 0)
  {
LABEL_86:
    v50 = *((unsigned __int8 *)this + 160);
    if ((v32 & 1) != 0)
      goto LABEL_87;
LABEL_107:
    v51 = 0.0;
    if ((v32 & 0x40) != 0)
      goto LABEL_90;
    goto LABEL_108;
  }
LABEL_106:
  v50 = 0;
  if ((v32 & 1) == 0)
    goto LABEL_107;
LABEL_87:
  v51 = *((double *)this + 7);
  if (v51 == 0.0)
    v51 = 0.0;
  if ((v32 & 0x40) != 0)
  {
LABEL_90:
    v52 = *((unsigned int *)this + 22);
    if ((v32 & 0x2000000) != 0)
      goto LABEL_91;
LABEL_109:
    v53 = 0;
    if ((v32 & 0x20000) != 0)
      goto LABEL_92;
LABEL_110:
    v54 = 0;
    return v4 ^ *(_QWORD *)&v56 ^ v62 ^ v61 ^ v60 ^ v59 ^ v58 ^ v57 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v31 ^ v33 ^ v34 ^ v35 ^ v37 ^ v39 ^ v41 ^ v42 ^ v43 ^ v44 ^ v46 ^ v47 ^ v48 ^ v49 ^ v50 ^ *(_QWORD *)&v51 ^ v52 ^ v53 ^ v54;
  }
LABEL_108:
  v52 = 0;
  if ((v32 & 0x2000000) == 0)
    goto LABEL_109;
LABEL_91:
  v53 = *((unsigned __int8 *)this + 155);
  if ((v32 & 0x20000) == 0)
    goto LABEL_110;
LABEL_92:
  v54 = *((unsigned int *)this + 33);
  return v4 ^ *(_QWORD *)&v56 ^ v62 ^ v61 ^ v60 ^ v59 ^ v58 ^ v57 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v31 ^ v33 ^ v34 ^ v35 ^ v37 ^ v39 ^ v41 ^ v42 ^ v43 ^ v44 ^ v46 ^ v47 ^ v48 ^ v49 ^ v50 ^ *(_QWORD *)&v51 ^ v52 ^ v53 ^ v54;
}

void CMMsl::RelativeGravityConstraints::~RelativeGravityConstraints(CMMsl::RelativeGravityConstraints *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::RelativeGravityConstraints::RelativeGravityConstraints(CMMsl::RelativeGravityConstraints *this, const CMMsl::RelativeGravityConstraints *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  char v5;

  *(_QWORD *)this = &off_251360770;
  *((_DWORD *)this + 12) = 0;
  v2 = *((_WORD *)a2 + 24);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_WORD *)this + 24) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_WORD *)a2 + 24);
    if ((v2 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 8);
    v3 |= 0x20u;
    *((_WORD *)this + 24) = v3;
    *((_DWORD *)this + 8) = v4;
    v2 = *((_WORD *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((_WORD *)this + 24) = v3;
    *((_DWORD *)this + 4) = v4;
    v2 = *((_WORD *)a2 + 24);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_16;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *((_WORD *)this + 24) = v3;
  *((_DWORD *)this + 7) = v4;
  v2 = *((_WORD *)a2 + 24);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_17;
  }
LABEL_16:
  LODWORD(v4) = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *((_WORD *)this + 24) = v3;
  *((_DWORD *)this + 9) = v4;
  v2 = *((_WORD *)a2 + 24);
  if ((v2 & 0x80) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_18;
  }
LABEL_17:
  LODWORD(v4) = *((_DWORD *)a2 + 10);
  v3 |= 0x80u;
  *((_WORD *)this + 24) = v3;
  *((_DWORD *)this + 10) = v4;
  v2 = *((_WORD *)a2 + 24);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 8) == 0)
      goto LABEL_12;
    goto LABEL_19;
  }
LABEL_18:
  v5 = *((_BYTE *)a2 + 44);
  v3 |= 0x100u;
  *((_WORD *)this + 24) = v3;
  *((_BYTE *)this + 44) = v5;
  v2 = *((_WORD *)a2 + 24);
  if ((v2 & 8) == 0)
  {
LABEL_12:
    if ((v2 & 4) == 0)
      return *(float *)&v4;
    goto LABEL_20;
  }
LABEL_19:
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *((_WORD *)this + 24) = v3;
  *((_DWORD *)this + 6) = v4;
  if ((*((_WORD *)a2 + 24) & 4) == 0)
    return *(float *)&v4;
LABEL_20:
  LODWORD(v4) = *((_DWORD *)a2 + 5);
  *((_WORD *)this + 24) = v3 | 4;
  *((_DWORD *)this + 5) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::RelativeGravityConstraints::operator=(uint64_t a1, const CMMsl::RelativeGravityConstraints *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  _BYTE v8[8];
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  char v13;
  int v14;

  if ((const CMMsl::RelativeGravityConstraints *)a1 != a2)
  {
    CMMsl::RelativeGravityConstraints::RelativeGravityConstraints((CMMsl::RelativeGravityConstraints *)v8, a2);
    v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v14;
    v14 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    v9 = v4;
    v5 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v11;
    v11 = v5;
    LODWORD(v4) = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v12;
    v12 = v4;
    LOBYTE(v3) = *(_BYTE *)(a1 + 44);
    *(_BYTE *)(a1 + 44) = v13;
    v13 = v3;
    v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v10;
    v10 = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::RelativeGravityConstraints *a2, CMMsl::RelativeGravityConstraints *a3)
{
  int v3;
  uint64_t v4;
  float result;

  v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LOBYTE(v3) = *((_BYTE *)this + 44);
  *((_BYTE *)this + 44) = *((_BYTE *)a2 + 44);
  *((_BYTE *)a2 + 44) = v3;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  result = *((float *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((float *)a2 + 5) = result;
  return result;
}

float CMMsl::RelativeGravityConstraints::RelativeGravityConstraints(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_251360770;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_251360770;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  return result;
}

uint64_t CMMsl::RelativeGravityConstraints::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  char v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v13[2];
  __int128 v14;
  uint64_t v15;
  int v16;
  char v17;
  int v18;

  if (a1 != a2)
  {
    v13[0] = &off_251360770;
    v3 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a2 + 48) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_DWORD *)(a2 + 40);
    v6 = *(_BYTE *)(a2 + 44);
    v18 = *(_DWORD *)(a1 + 48);
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v13[1] = v7;
    v15 = *(_QWORD *)(a1 + 32);
    v16 = *(_DWORD *)(a1 + 40);
    v8 = *(_BYTE *)(a1 + 44);
    *(_BYTE *)(a1 + 44) = v6;
    v17 = v8;
    v9 = *(_OWORD *)(a1 + 16);
    v10 = *(_OWORD *)(a2 + 16);
    v11 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 48) = v3;
    *(_QWORD *)(a1 + 32) = v11;
    *(_DWORD *)(a1 + 40) = v5;
    *(_OWORD *)(a1 + 16) = v10;
    v14 = v9;
    PB::Base::~Base((PB::Base *)v13);
  }
  return a1;
}

uint64_t CMMsl::RelativeGravityConstraints::formatText(CMMsl::RelativeGravityConstraints *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 24);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "avgRotationMax", *((float *)this + 4));
    v5 = *((_WORD *)this + 24);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "historicalDisturbanceDuration", *((float *)this + 5));
  v5 = *((_WORD *)this + 24);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "historicalQuiescenceDuration", *((float *)this + 6));
  v5 = *((_WORD *)this + 24);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "instAccelMagDiff", *((float *)this + 7));
  v5 = *((_WORD *)this + 24);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "instRotationMax", *((float *)this + 8));
  v5 = *((_WORD *)this + 24);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "isAvgGrav");
  v5 = *((_WORD *)this + 24);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
LABEL_19:
    PB::TextFormatter::format(a2, "measNoiseVar", *((float *)this + 10));
    if ((*((_WORD *)this + 24) & 1) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_10;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "lpfAccelMagDiff", *((float *)this + 9));
  v5 = *((_WORD *)this + 24);
  if ((v5 & 0x80) != 0)
    goto LABEL_19;
LABEL_9:
  if ((v5 & 1) != 0)
LABEL_10:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::RelativeGravityConstraints::readFrom(CMMsl::RelativeGravityConstraints *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v20;
  BOOL v21;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_54;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 24) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_48;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        v2 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_53;
      case 2u:
        *((_WORD *)this + 24) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_48;
        *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_52;
      case 3u:
        *((_WORD *)this + 24) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_48;
        *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_52;
      case 4u:
        *((_WORD *)this + 24) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_48;
        *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_52;
      case 5u:
        *((_WORD *)this + 24) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_48;
        *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_52;
      case 6u:
        *((_WORD *)this + 24) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_48;
        *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_52;
      case 7u:
        *((_WORD *)this + 24) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v21 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v21 = v20 != 0;
        }
        *((_BYTE *)this + 44) = v21;
        break;
      case 8u:
        *((_WORD *)this + 24) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_48;
        *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_52;
      case 9u:
        *((_WORD *)this + 24) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_52:
          v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_53:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_48:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_54:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::RelativeGravityConstraints::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 48);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_WORD *)(v3 + 48);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 4) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 20));
  }
LABEL_18:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  if ((*(_WORD *)(v3 + 48) & 4) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 20));
  return this;
}

uint64_t CMMsl::RelativeGravityConstraints::hash_value(CMMsl::RelativeGravityConstraints *this)
{
  __int16 v1;
  double v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  float v16;
  uint64_t v17;

  v1 = *((_WORD *)this + 24);
  if ((v1 & 1) == 0)
  {
    v2 = 0.0;
    if ((v1 & 0x20) != 0)
      goto LABEL_3;
LABEL_28:
    v4 = 0;
    if ((v1 & 2) != 0)
      goto LABEL_6;
LABEL_29:
    v6 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_9;
LABEL_30:
    v8 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_12;
LABEL_31:
    v10 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_15;
LABEL_32:
    v12 = 0;
    if ((*((_WORD *)this + 24) & 0x100) != 0)
      goto LABEL_18;
    goto LABEL_33;
  }
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 0x20) == 0)
    goto LABEL_28;
LABEL_3:
  v3 = *((float *)this + 8);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_29;
LABEL_6:
  v5 = *((float *)this + 4);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_30;
LABEL_9:
  v7 = *((float *)this + 7);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_31;
LABEL_12:
  v9 = *((float *)this + 9);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_32;
LABEL_15:
  v11 = *((float *)this + 10);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((*((_WORD *)this + 24) & 0x100) != 0)
  {
LABEL_18:
    v13 = *((unsigned __int8 *)this + 44);
    if ((v1 & 8) != 0)
      goto LABEL_19;
    goto LABEL_34;
  }
LABEL_33:
  v13 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_19:
    v14 = *((float *)this + 6);
    v15 = LODWORD(v14);
    if (v14 == 0.0)
      v15 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_22;
LABEL_35:
    v17 = 0;
    return v4 ^ *(_QWORD *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v13 ^ v15 ^ v17;
  }
LABEL_34:
  v15 = 0;
  if ((v1 & 4) == 0)
    goto LABEL_35;
LABEL_22:
  v16 = *((float *)this + 5);
  v17 = LODWORD(v16);
  if (v16 == 0.0)
    v17 = 0;
  return v4 ^ *(_QWORD *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v13 ^ v15 ^ v17;
}

void CMMsl::RelativeGravityCorrection::~RelativeGravityCorrection(CMMsl::RelativeGravityCorrection *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_2513607A8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_2513607A8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_2513607A8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::RelativeGravityCorrection *CMMsl::RelativeGravityCorrection::RelativeGravityCorrection(CMMsl::RelativeGravityCorrection *this, const CMMsl::DeviceMotionCorrection **a2)
{
  CMMsl::DeviceMotionCorrection *v4;
  CMMsl::DeviceMotionCorrection *v5;
  uint64_t v6;
  char v7;

  *(_QWORD *)this = &off_2513607A8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 5) = 0;
  if (a2[1])
  {
    v4 = (CMMsl::DeviceMotionCorrection *)operator new();
    v5 = CMMsl::DeviceMotionCorrection::DeviceMotionCorrection(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v7 = *((_BYTE *)a2 + 16);
    *((_BYTE *)this + 20) |= 1u;
    *((_BYTE *)this + 16) = v7;
  }
  return this;
}

uint64_t CMMsl::RelativeGravityCorrection::operator=(uint64_t a1, const CMMsl::DeviceMotionCorrection **a2)
{
  int v3;
  uint64_t v4;
  void (**v6)(CMMsl::RelativeGravityCorrection *__hidden);
  uint64_t v7;
  char v8;
  int v9;

  if ((const CMMsl::DeviceMotionCorrection **)a1 != a2)
  {
    CMMsl::RelativeGravityCorrection::RelativeGravityCorrection((CMMsl::RelativeGravityCorrection *)&v6, a2);
    v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v9;
    v9 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v7;
    LOBYTE(v3) = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v8;
    v8 = v3;
    v6 = &off_2513607A8;
    v7 = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::RelativeGravityCorrection *a2, CMMsl::RelativeGravityCorrection *a3)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LOBYTE(v4) = *(_BYTE *)(this + 16);
  *(_BYTE *)(this + 16) = *((_BYTE *)a2 + 16);
  *((_BYTE *)a2 + 16) = v4;
  return this;
}

uint64_t CMMsl::RelativeGravityCorrection::RelativeGravityCorrection(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_2513607A8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_2513607A8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t CMMsl::RelativeGravityCorrection::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  _QWORD v9[2];
  char v10;
  int v11;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v5 = *(_BYTE *)(a2 + 16);
    v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    v11 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    LOBYTE(v3) = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v5;
    v10 = v3;
    v9[0] = &off_2513607A8;
    v9[1] = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::RelativeGravityCorrection::formatText(CMMsl::RelativeGravityCorrection *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "correction");
  if ((*((_BYTE *)this + 20) & 1) != 0)
    PB::TextFormatter::format(a2, "isAvgGrav");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::RelativeGravityCorrection::readFrom(CMMsl::RelativeGravityCorrection *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  unint64_t v23;
  int v24;
  BOOL v25;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_28;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 1u;
        v22 = *((_QWORD *)a2 + 1);
        if (v22 >= *((_QWORD *)a2 + 2))
        {
          v25 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v23 = v22 + 1;
          v24 = *(unsigned __int8 *)(*(_QWORD *)a2 + v22);
          *((_QWORD *)a2 + 1) = v23;
          v25 = v24 != 0;
        }
        *((_BYTE *)this + 16) = v25;
      }
      else if ((v11 >> 3) == 1)
      {
        v19 = operator new();
        *(_QWORD *)v19 = &off_25135D130;
        *(_DWORD *)(v19 + 160) = 0;
        *(_OWORD *)(v19 + 8) = 0u;
        *(_OWORD *)(v19 + 24) = 0u;
        *(_OWORD *)(v19 + 40) = 0u;
        *(_OWORD *)(v19 + 56) = 0u;
        *(_OWORD *)(v19 + 72) = 0u;
        *(_OWORD *)(v19 + 88) = 0u;
        *(_OWORD *)(v19 + 104) = 0u;
        *(_OWORD *)(v19 + 120) = 0u;
        *(_OWORD *)(v19 + 136) = 0u;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = *((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_28:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_28;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::RelativeGravityCorrection::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = this;
  v4 = *(const PB::Base **)(this + 8);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  if ((*(_BYTE *)(v3 + 20) & 1) != 0)
    return PB::Writer::write(a2);
  return this;
}

unint64_t CMMsl::RelativeGravityCorrection::hash_value(CMMsl::RelativeGravityCorrection *this)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    v2 = CMMsl::DeviceMotionCorrection::hash_value((CMMsl::DeviceMotionCorrection *)v2);
  if ((*((_BYTE *)this + 20) & 1) != 0)
    v3 = *((unsigned __int8 *)this + 16);
  else
    v3 = 0;
  return v3 ^ v2;
}

_QWORD *CMMsl::RelativeGravityCorrection::makeCorrection(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135D130;
    *(_DWORD *)(v2 + 160) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_OWORD *)(v2 + 120) = 0u;
    *(_OWORD *)(v2 + 136) = 0u;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void CMMsl::RhythmicGnssOperatorStatus::~RhythmicGnssOperatorStatus(CMMsl::RhythmicGnssOperatorStatus *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::RhythmicGnssOperatorStatus::RhythmicGnssOperatorStatus(uint64_t this, const CMMsl::RhythmicGnssOperatorStatus *a2)
{
  char v2;
  char v3;
  int v4;
  char v5;
  int v6;
  int v7;
  char v8;

  *(_QWORD *)this = &off_2513607E0;
  *(_DWORD *)(this + 24) = 0;
  v2 = *((_BYTE *)a2 + 24);
  if ((v2 & 2) != 0)
  {
    v4 = *((_DWORD *)a2 + 3);
    v3 = 2;
    *(_BYTE *)(this + 24) = 2;
    *(_DWORD *)(this + 12) = v4;
    v2 = *((_BYTE *)a2 + 24);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 24) & 8) != 0)
  {
LABEL_5:
    v5 = *((_BYTE *)a2 + 20);
    v3 |= 8u;
    *(_BYTE *)(this + 24) = v3;
    *(_BYTE *)(this + 20) = v5;
    v2 = *((_BYTE *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *((_DWORD *)a2 + 4);
    v3 |= 4u;
    *(_BYTE *)(this + 24) = v3;
    *(_DWORD *)(this + 16) = v6;
    v2 = *((_BYTE *)a2 + 24);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        return this;
LABEL_12:
      v8 = *((_BYTE *)a2 + 21);
      *(_BYTE *)(this + 24) = v3 | 0x10;
      *(_BYTE *)(this + 21) = v8;
      return this;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 2);
  v3 |= 1u;
  *(_BYTE *)(this + 24) = v3;
  *(_DWORD *)(this + 8) = v7;
  if ((*((_BYTE *)a2 + 24) & 0x10) != 0)
    goto LABEL_12;
  return this;
}

uint64_t CMMsl::RhythmicGnssOperatorStatus::operator=(uint64_t a1, const CMMsl::RhythmicGnssOperatorStatus *a2)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  __int16 v10;
  int v11;

  if ((const CMMsl::RhythmicGnssOperatorStatus *)a1 != a2)
  {
    CMMsl::RhythmicGnssOperatorStatus::RhythmicGnssOperatorStatus((uint64_t)&v7, a2);
    v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v11;
    v11 = v3;
    LOWORD(v3) = *(_WORD *)(a1 + 20);
    *(_WORD *)(a1 + 20) = v10;
    v10 = v3;
    v4 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v9;
    v9 = v4;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v8;
    v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::RhythmicGnssOperatorStatus *a2, CMMsl::RhythmicGnssOperatorStatus *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;

  v3 = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  v4 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v4;
  LOBYTE(v4) = *(_BYTE *)(this + 20);
  *(_BYTE *)(this + 20) = *((_BYTE *)a2 + 20);
  *((_BYTE *)a2 + 20) = v4;
  v5 = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  v6 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v6;
  LOBYTE(v6) = *(_BYTE *)(this + 21);
  *(_BYTE *)(this + 21) = *((_BYTE *)a2 + 21);
  *((_BYTE *)a2 + 21) = v6;
  return this;
}

uint64_t CMMsl::RhythmicGnssOperatorStatus::RhythmicGnssOperatorStatus(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = &off_2513607E0;
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_BYTE *)(result + 20) = *(_BYTE *)(a2 + 20);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(result + 21) = *(_BYTE *)(a2 + 21);
  return result;
}

{
  *(_QWORD *)result = &off_2513607E0;
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_BYTE *)(result + 20) = *(_BYTE *)(a2 + 20);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(result + 21) = *(_BYTE *)(a2 + 21);
  return result;
}

uint64_t CMMsl::RhythmicGnssOperatorStatus::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  int v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  int v12;
  char v13;
  char v14;
  int v15;

  if (a1 != a2)
  {
    v11[0] = &off_2513607E0;
    v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    v4 = *(_BYTE *)(a2 + 20);
    v5 = *(_DWORD *)(a2 + 16);
    v6 = *(_BYTE *)(a2 + 21);
    v15 = *(_DWORD *)(a1 + 24);
    v7 = *(_BYTE *)(a1 + 20);
    *(_BYTE *)(a1 + 20) = v4;
    v13 = v7;
    v12 = *(_DWORD *)(a1 + 16);
    v8 = *(_QWORD *)(a1 + 8);
    v9 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 24) = v3;
    *(_DWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 8) = v9;
    v11[1] = v8;
    LOBYTE(v3) = *(_BYTE *)(a1 + 21);
    *(_BYTE *)(a1 + 21) = v6;
    v14 = v3;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

uint64_t CMMsl::RhythmicGnssOperatorStatus::formatText(CMMsl::RhythmicGnssOperatorStatus *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "activeGnssSession");
    v5 = *((_BYTE *)this + 24);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*((_BYTE *)this + 24) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "currentModesOfOperation");
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(a2, "hasSubscribedRhythmicClient");
    if ((*((_BYTE *)this + 24) & 4) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(a2, "gnssModeOfOperation");
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 0x10) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 4) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "rhythmicMode");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::RhythmicGnssOperatorStatus::readFrom(CMMsl::RhythmicGnssOperatorStatus *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  int v26;
  BOOL v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  char v39;
  int v40;
  BOOL v41;
  char v42;
  unsigned int v43;
  unint64_t v44;
  char v45;
  char v46;
  unsigned int v47;
  unint64_t v48;
  char v49;
  char v50;
  unsigned int v51;
  unint64_t v52;
  char v53;

  v3 = *((_QWORD *)a2 + 1);
  v2 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 >= v2 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v3 > v2)
        v2 = v3;
      do
      {
        if (v2 == v3)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v3 + 1;
        v18 = *(_BYTE *)(v8 + v3);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_24;
        v15 += 7;
        v3 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v3 = *((_QWORD *)a2 + 1);
      v2 = *((_QWORD *)a2 + 2);
      goto LABEL_21;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v3 + 1;
      *((_QWORD *)a2 + 1) = v3 + 1;
      v13 = *(_BYTE *)(v8 + v3);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v3 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_24:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 24) |= 2u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v42 = 0;
          v43 = 0;
          v24 = 0;
          if (v2 <= v20)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_83;
            }
            v44 = v20++;
            v45 = *(_BYTE *)(v21 + v44);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v45 & 0x7F) << v42;
            if ((v45 & 0x80) == 0)
              break;
            v42 += 7;
            v14 = v43++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_82:
              v3 = v44 + 1;
              goto LABEL_83;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
          goto LABEL_82;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v3 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_83;
          v22 += 7;
          v20 = v3;
          v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_83:
        *((_DWORD *)this + 3) = v24;
        break;
      case 2u:
        *((_BYTE *)this + 24) |= 8u;
        v3 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        if (v3 >= v2)
        {
          v27 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v26 = *(unsigned __int8 *)(*(_QWORD *)a2 + v3++);
          *((_QWORD *)a2 + 1) = v3;
          v27 = v26 != 0;
        }
        *((_BYTE *)this + 20) = v27;
        break;
      case 3u:
        *((_BYTE *)this + 24) |= 4u;
        v28 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v29 = *(_QWORD *)a2;
        if (v28 > 0xFFFFFFFFFFFFFFF5 || v28 + 10 > v2)
        {
          v46 = 0;
          v47 = 0;
          v32 = 0;
          if (v2 <= v28)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v28)
            {
              LODWORD(v32) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_88;
            }
            v48 = v28++;
            v49 = *(_BYTE *)(v29 + v48);
            *((_QWORD *)a2 + 1) = v28;
            v32 |= (unint64_t)(v49 & 0x7F) << v46;
            if ((v49 & 0x80) == 0)
              break;
            v46 += 7;
            v14 = v47++ > 8;
            if (v14)
            {
              LODWORD(v32) = 0;
LABEL_87:
              v3 = v48 + 1;
              goto LABEL_88;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v32) = 0;
          goto LABEL_87;
        }
        v30 = 0;
        v31 = 0;
        v32 = 0;
        do
        {
          v3 = v28 + 1;
          *((_QWORD *)a2 + 1) = v28 + 1;
          v33 = *(_BYTE *)(v29 + v28);
          v32 |= (unint64_t)(v33 & 0x7F) << v30;
          if ((v33 & 0x80) == 0)
            goto LABEL_88;
          v30 += 7;
          v28 = v3;
          v14 = v31++ > 8;
        }
        while (!v14);
        LODWORD(v32) = 0;
LABEL_88:
        *((_DWORD *)this + 4) = v32;
        break;
      case 4u:
        *((_BYTE *)this + 24) |= 1u;
        v34 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v35 = *(_QWORD *)a2;
        if (v34 > 0xFFFFFFFFFFFFFFF5 || v34 + 10 > v2)
        {
          v50 = 0;
          v51 = 0;
          v38 = 0;
          if (v2 <= v34)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v34)
            {
              LODWORD(v38) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_93;
            }
            v52 = v34++;
            v53 = *(_BYTE *)(v35 + v52);
            *((_QWORD *)a2 + 1) = v34;
            v38 |= (unint64_t)(v53 & 0x7F) << v50;
            if ((v53 & 0x80) == 0)
              break;
            v50 += 7;
            v14 = v51++ > 8;
            if (v14)
            {
              LODWORD(v38) = 0;
LABEL_92:
              v3 = v52 + 1;
              goto LABEL_93;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v38) = 0;
          goto LABEL_92;
        }
        v36 = 0;
        v37 = 0;
        v38 = 0;
        do
        {
          v3 = v34 + 1;
          *((_QWORD *)a2 + 1) = v34 + 1;
          v39 = *(_BYTE *)(v35 + v34);
          v38 |= (unint64_t)(v39 & 0x7F) << v36;
          if ((v39 & 0x80) == 0)
            goto LABEL_93;
          v36 += 7;
          v34 = v3;
          v14 = v37++ > 8;
        }
        while (!v14);
        LODWORD(v38) = 0;
LABEL_93:
        *((_DWORD *)this + 2) = v38;
        break;
      case 5u:
        *((_BYTE *)this + 24) |= 0x10u;
        v3 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        if (v3 >= v2)
        {
          v41 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v40 = *(unsigned __int8 *)(*(_QWORD *)a2 + v3++);
          *((_QWORD *)a2 + 1) = v3;
          v41 = v40 != 0;
        }
        *((_BYTE *)this + 21) = v41;
        break;
      default:
        goto LABEL_19;
    }
LABEL_21:
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v3 >= v2 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::RhythmicGnssOperatorStatus::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 24);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 24);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(this + 24) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2);
  v4 = *(_BYTE *)(v3 + 24);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 24);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      return this;
    return PB::Writer::write(a2);
  }
LABEL_10:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_BYTE *)(v3 + 24) & 0x10) != 0)
    return PB::Writer::write(a2);
  return this;
}

uint64_t CMMsl::RhythmicGnssOperatorStatus::hash_value(CMMsl::RhythmicGnssOperatorStatus *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((*((_BYTE *)this + 24) & 2) != 0)
  {
    v1 = *((unsigned int *)this + 3);
    if ((*((_BYTE *)this + 24) & 8) != 0)
    {
LABEL_3:
      v2 = *((unsigned __int8 *)this + 20);
      if ((*((_BYTE *)this + 24) & 4) != 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v1 = 0;
    if ((*((_BYTE *)this + 24) & 8) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 24) & 4) != 0)
  {
LABEL_4:
    v3 = *((int *)this + 4);
    if ((*((_BYTE *)this + 24) & 1) != 0)
      goto LABEL_5;
LABEL_10:
    v4 = 0;
    if ((*((_BYTE *)this + 24) & 0x10) != 0)
      goto LABEL_6;
LABEL_11:
    v5 = 0;
    return v2 ^ v1 ^ v3 ^ v4 ^ v5;
  }
LABEL_9:
  v3 = 0;
  if ((*((_BYTE *)this + 24) & 1) == 0)
    goto LABEL_10;
LABEL_5:
  v4 = *((unsigned int *)this + 2);
  if ((*((_BYTE *)this + 24) & 0x10) == 0)
    goto LABEL_11;
LABEL_6:
  v5 = *((unsigned __int8 *)this + 21);
  return v2 ^ v1 ^ v3 ^ v4 ^ v5;
}

void CMMsl::RotationRate::~RotationRate(CMMsl::RotationRate *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::RotationRate::RotationRate(CMMsl::RotationRate *this, const CMMsl::RotationRate *a2)
{
  char v2;
  char v3;
  uint64_t v4;

  *(_QWORD *)this = &off_251360818;
  *((_DWORD *)this + 7) = 0;
  v2 = *((_BYTE *)a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 28) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 28) & 2) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((_BYTE *)this + 28) = v3;
    *((_DWORD *)this + 4) = v4;
    v2 = *((_BYTE *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *((_BYTE *)this + 28) = v3;
    *((_DWORD *)this + 5) = v4;
    if ((*((_BYTE *)a2 + 28) & 8) == 0)
      return *(float *)&v4;
  }
  else if ((v2 & 8) == 0)
  {
    return *(float *)&v4;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  *((_BYTE *)this + 28) = v3 | 8;
  *((_DWORD *)this + 6) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::RotationRate::operator=(uint64_t a1, const CMMsl::RotationRate *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;

  if ((const CMMsl::RotationRate *)a1 != a2)
  {
    CMMsl::RotationRate::RotationRate((CMMsl::RotationRate *)&v9, a2);
    v3 = v11;
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v10;
    *(_QWORD *)(a1 + 16) = v3;
    v6 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v13;
    v13 = v6;
    v10 = v4;
    v11 = v5;
    v7 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v12;
    v12 = v7;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::RotationRate *a2, CMMsl::RotationRate *a3)
{
  int v3;
  uint64_t v4;
  float result;

  v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  return result;
}

float CMMsl::RotationRate::RotationRate(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_251360818;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_251360818;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

uint64_t CMMsl::RotationRate::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD v9[3];
  int v10;
  int v11;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    v4 = *(_DWORD *)(a2 + 24);
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    v9[0] = &off_251360818;
    v11 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v3;
    v9[1] = v5;
    v9[2] = v6;
    v7 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v4;
    v10 = v7;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::RotationRate::formatText(CMMsl::RotationRate *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    v5 = *((_BYTE *)this + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "y", *((float *)this + 5));
      if ((*((_BYTE *)this + 28) & 8) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "x", *((float *)this + 4));
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "z", *((float *)this + 6));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::RotationRate::readFrom(CMMsl::RotationRate *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_38;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 28) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        v2 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_37;
      case 2u:
        *((_BYTE *)this + 28) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 3u:
        *((_BYTE *)this + 28) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 4u:
        *((_BYTE *)this + 28) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_36:
          v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_37:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_34:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_38:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::RotationRate::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 28);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 24));
  }
LABEL_8:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  if ((*(_BYTE *)(v3 + 28) & 8) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 24));
  return this;
}

uint64_t CMMsl::RotationRate::hash_value(CMMsl::RotationRate *this)
{
  double v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;

  if ((*((_BYTE *)this + 28) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 28) & 2) != 0)
      goto LABEL_3;
LABEL_15:
    v3 = 0;
    if ((*((_BYTE *)this + 28) & 4) != 0)
      goto LABEL_6;
    goto LABEL_16;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 28) & 2) == 0)
    goto LABEL_15;
LABEL_3:
  v2 = *((float *)this + 4);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 28) & 4) != 0)
  {
LABEL_6:
    v4 = *((float *)this + 5);
    v5 = LODWORD(v4);
    if (v4 == 0.0)
      v5 = 0;
    if ((*((_BYTE *)this + 28) & 8) != 0)
      goto LABEL_9;
LABEL_17:
    v7 = 0;
    return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7;
  }
LABEL_16:
  v5 = 0;
  if ((*((_BYTE *)this + 28) & 8) == 0)
    goto LABEL_17;
LABEL_9:
  v6 = *((float *)this + 6);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7;
}

void CMMsl::RunningArmSwingSignals::~RunningArmSwingSignals(CMMsl::RunningArmSwingSignals *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::RunningArmSwingSignals::RunningArmSwingSignals(CMMsl::RunningArmSwingSignals *this, const CMMsl::RunningArmSwingSignals *a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)this = &off_251360850;
  *((_DWORD *)this + 16) = 0;
  v2 = *((_BYTE *)a2 + 64);
  if ((v2 & 2) != 0)
  {
    result = *((double *)a2 + 2);
    v3 = 2;
    *((_BYTE *)this + 64) = 2;
    *((double *)this + 2) = result;
    v2 = *((_BYTE *)a2 + 64);
    if ((v2 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 64) & 0x40) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 7);
    v3 |= 0x40u;
    *((_BYTE *)this + 64) = v3;
    *((double *)this + 7) = result;
    v2 = *((_BYTE *)a2 + 64);
  }
LABEL_6:
  if ((v2 & 1) != 0)
  {
    result = *((double *)a2 + 1);
    v3 |= 1u;
    *((_BYTE *)this + 64) = v3;
    *((double *)this + 1) = result;
    v2 = *((_BYTE *)a2 + 64);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  result = *((double *)a2 + 3);
  v3 |= 4u;
  *((_BYTE *)this + 64) = v3;
  *((double *)this + 3) = result;
  v2 = *((_BYTE *)a2 + 64);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_15;
  }
LABEL_14:
  result = *((double *)a2 + 5);
  v3 |= 0x10u;
  *((_BYTE *)this + 64) = v3;
  *((double *)this + 5) = result;
  v2 = *((_BYTE *)a2 + 64);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0)
      return result;
LABEL_16:
    result = *((double *)a2 + 4);
    *((_BYTE *)this + 64) = v3 | 8;
    *((double *)this + 4) = result;
    return result;
  }
LABEL_15:
  result = *((double *)a2 + 6);
  v3 |= 0x20u;
  *((_BYTE *)this + 64) = v3;
  *((double *)this + 6) = result;
  if ((*((_BYTE *)a2 + 64) & 8) != 0)
    goto LABEL_16;
  return result;
}

uint64_t CMMsl::RunningArmSwingSignals::operator=(uint64_t a1, const CMMsl::RunningArmSwingSignals *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _BYTE v9[8];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;

  if ((const CMMsl::RunningArmSwingSignals *)a1 != a2)
  {
    CMMsl::RunningArmSwingSignals::RunningArmSwingSignals((CMMsl::RunningArmSwingSignals *)v9, a2);
    v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v14;
    v14 = v3;
    v4 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v13;
    v13 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v6 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v12 = v6;
    v7 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v10 = v5;
    v11 = v7;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::RunningArmSwingSignals *a2, CMMsl::RunningArmSwingSignals *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;

  v3 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v5;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  v8 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v8;
  v9 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v9;
  result = *((double *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((double *)a2 + 4) = result;
  return result;
}

double CMMsl::RunningArmSwingSignals::RunningArmSwingSignals(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_251360850;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_251360850;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  return result;
}

uint64_t CMMsl::RunningArmSwingSignals::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void (**v11)(CMMsl::RunningArmSwingSignals *__hidden);
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  int v16;

  if (a1 != a2)
  {
    v11 = &off_251360850;
    v3 = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(a2 + 64) = 0;
    v4 = *(_QWORD *)(a2 + 56);
    v16 = *(_DWORD *)(a1 + 64);
    v15 = *(_QWORD *)(a1 + 56);
    v5 = *(_OWORD *)(a1 + 8);
    v6 = *(_OWORD *)(a2 + 8);
    v14 = *(_OWORD *)(a1 + 40);
    v7 = *(_OWORD *)(a1 + 24);
    v8 = *(_OWORD *)(a2 + 24);
    v9 = *(_OWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 64) = v3;
    *(_QWORD *)(a1 + 56) = v4;
    *(_OWORD *)(a1 + 8) = v6;
    *(_OWORD *)(a1 + 40) = v9;
    *(_OWORD *)(a1 + 24) = v8;
    v12 = v5;
    v13 = v7;
    PB::Base::~Base((PB::Base *)&v11);
  }
  return a1;
}

uint64_t CMMsl::RunningArmSwingSignals::formatText(CMMsl::RunningArmSwingSignals *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 64);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "cadence", *((double *)this + 1));
    v5 = *((_BYTE *)this + 64);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*((_BYTE *)this + 64) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 2));
  v5 = *((_BYTE *)this + 64);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "swingAccelX", *((double *)this + 3));
  v5 = *((_BYTE *)this + 64);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "swingAccelXStandardized", *((double *)this + 4));
  v5 = *((_BYTE *)this + 64);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
LABEL_15:
    PB::TextFormatter::format(a2, "swingAccelZ", *((double *)this + 6));
    if ((*((_BYTE *)this + 64) & 0x40) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_8;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "swingAccelY", *((double *)this + 5));
  v5 = *((_BYTE *)this + 64);
  if ((v5 & 0x20) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v5 & 0x40) != 0)
LABEL_8:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 7));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::RunningArmSwingSignals::readFrom(CMMsl::RunningArmSwingSignals *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_46;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 64) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_43;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_45;
      case 2u:
        *((_BYTE *)this + 64) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_43;
        *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_45;
      case 3u:
        *((_BYTE *)this + 64) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_43;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_45;
      case 5u:
        *((_BYTE *)this + 64) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_43;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_45;
      case 6u:
        *((_BYTE *)this + 64) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_43;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_45;
      case 7u:
        *((_BYTE *)this + 64) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_43;
        *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_45;
      case 8u:
        *((_BYTE *)this + 64) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
        {
LABEL_43:
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_45:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_46:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::RunningArmSwingSignals::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 64);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16));
    v4 = *(_BYTE *)(v3 + 64);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(this + 64) & 0x40) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 32));
  }
LABEL_14:
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  if ((*(_BYTE *)(v3 + 64) & 8) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 32));
  return this;
}

uint64_t CMMsl::RunningArmSwingSignals::hash_value(CMMsl::RunningArmSwingSignals *this)
{
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;

  if ((*((_BYTE *)this + 64) & 2) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 64) & 0x40) != 0)
      goto LABEL_3;
LABEL_24:
    v2 = 0.0;
    if ((*((_BYTE *)this + 64) & 1) != 0)
      goto LABEL_6;
LABEL_25:
    v3 = 0.0;
    if ((*((_BYTE *)this + 64) & 4) != 0)
      goto LABEL_9;
LABEL_26:
    v4 = 0.0;
    if ((*((_BYTE *)this + 64) & 0x10) != 0)
      goto LABEL_12;
LABEL_27:
    v5 = 0.0;
    if ((*((_BYTE *)this + 64) & 0x20) != 0)
      goto LABEL_15;
    goto LABEL_28;
  }
  v1 = *((double *)this + 2);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 64) & 0x40) == 0)
    goto LABEL_24;
LABEL_3:
  v2 = *((double *)this + 7);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 64) & 1) == 0)
    goto LABEL_25;
LABEL_6:
  v3 = *((double *)this + 1);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((*((_BYTE *)this + 64) & 4) == 0)
    goto LABEL_26;
LABEL_9:
  v4 = *((double *)this + 3);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((*((_BYTE *)this + 64) & 0x10) == 0)
    goto LABEL_27;
LABEL_12:
  v5 = *((double *)this + 5);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((*((_BYTE *)this + 64) & 0x20) != 0)
  {
LABEL_15:
    v6 = *((double *)this + 6);
    if (v6 == 0.0)
      v6 = 0.0;
    if ((*((_BYTE *)this + 64) & 8) != 0)
      goto LABEL_18;
LABEL_29:
    v7 = 0.0;
    return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7;
  }
LABEL_28:
  v6 = 0.0;
  if ((*((_BYTE *)this + 64) & 8) == 0)
    goto LABEL_29;
LABEL_18:
  v7 = *((double *)this + 4);
  if (v7 == 0.0)
    v7 = 0.0;
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7;
}

void CMMsl::RunningCentripetalAccelSignals::~RunningCentripetalAccelSignals(CMMsl::RunningCentripetalAccelSignals *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::RunningCentripetalAccelSignals::RunningCentripetalAccelSignals(CMMsl::RunningCentripetalAccelSignals *this, const CMMsl::RunningCentripetalAccelSignals *a2)
{
  __int16 v2;
  __int16 v3;
  double result;

  *(_QWORD *)this = &off_251360888;
  *((_DWORD *)this + 30) = 0;
  v2 = *((_WORD *)a2 + 60);
  if ((v2 & 0x200) != 0)
  {
    result = *((double *)a2 + 10);
    v3 = 512;
    *((_WORD *)this + 60) = 512;
    *((double *)this + 10) = result;
    v2 = *((_WORD *)a2 + 60);
    if ((v2 & 0x2000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_WORD *)a2 + 60) & 0x2000) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 14);
    v3 |= 0x2000u;
    *((_WORD *)this + 60) = v3;
    *((double *)this + 14) = result;
    v2 = *((_WORD *)a2 + 60);
  }
LABEL_6:
  if ((v2 & 0x400) != 0)
  {
    result = *((double *)a2 + 11);
    v3 |= 0x400u;
    *((_WORD *)this + 60) = v3;
    *((double *)this + 11) = result;
    v2 = *((_WORD *)a2 + 60);
    if ((v2 & 0x800) == 0)
    {
LABEL_8:
      if ((v2 & 0x1000) == 0)
        goto LABEL_9;
      goto LABEL_21;
    }
  }
  else if ((v2 & 0x800) == 0)
  {
    goto LABEL_8;
  }
  result = *((double *)a2 + 12);
  v3 |= 0x800u;
  *((_WORD *)this + 60) = v3;
  *((double *)this + 12) = result;
  v2 = *((_WORD *)a2 + 60);
  if ((v2 & 0x1000) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  result = *((double *)a2 + 13);
  v3 |= 0x1000u;
  *((_WORD *)this + 60) = v3;
  *((double *)this + 13) = result;
  v2 = *((_WORD *)a2 + 60);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  result = *((double *)a2 + 7);
  v3 |= 0x40u;
  *((_WORD *)this + 60) = v3;
  *((double *)this + 7) = result;
  v2 = *((_WORD *)a2 + 60);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  result = *((double *)a2 + 8);
  v3 |= 0x80u;
  *((_WORD *)this + 60) = v3;
  *((double *)this + 8) = result;
  v2 = *((_WORD *)a2 + 60);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0)
      goto LABEL_13;
    goto LABEL_25;
  }
LABEL_24:
  result = *((double *)a2 + 9);
  v3 |= 0x100u;
  *((_WORD *)this + 60) = v3;
  *((double *)this + 9) = result;
  v2 = *((_WORD *)a2 + 60);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_26;
  }
LABEL_25:
  result = *((double *)a2 + 4);
  v3 |= 8u;
  *((_WORD *)this + 60) = v3;
  *((double *)this + 4) = result;
  v2 = *((_WORD *)a2 + 60);
  if ((v2 & 0x10) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_27;
  }
LABEL_26:
  result = *((double *)a2 + 5);
  v3 |= 0x10u;
  *((_WORD *)this + 60) = v3;
  *((double *)this + 5) = result;
  v2 = *((_WORD *)a2 + 60);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 1) == 0)
      goto LABEL_16;
    goto LABEL_28;
  }
LABEL_27:
  result = *((double *)a2 + 6);
  v3 |= 0x20u;
  *((_WORD *)this + 60) = v3;
  *((double *)this + 6) = result;
  v2 = *((_WORD *)a2 + 60);
  if ((v2 & 1) == 0)
  {
LABEL_16:
    if ((v2 & 2) == 0)
      goto LABEL_17;
    goto LABEL_29;
  }
LABEL_28:
  result = *((double *)a2 + 1);
  v3 |= 1u;
  *((_WORD *)this + 60) = v3;
  *((double *)this + 1) = result;
  v2 = *((_WORD *)a2 + 60);
  if ((v2 & 2) == 0)
  {
LABEL_17:
    if ((v2 & 4) == 0)
      return result;
LABEL_30:
    result = *((double *)a2 + 3);
    *((_WORD *)this + 60) = v3 | 4;
    *((double *)this + 3) = result;
    return result;
  }
LABEL_29:
  result = *((double *)a2 + 2);
  v3 |= 2u;
  *((_WORD *)this + 60) = v3;
  *((double *)this + 2) = result;
  if ((*((_WORD *)a2 + 60) & 4) != 0)
    goto LABEL_30;
  return result;
}

CMMsl *CMMsl::RunningCentripetalAccelSignals::operator=(CMMsl *a1, const CMMsl::RunningCentripetalAccelSignals *a2)
{
  CMMsl::RunningCentripetalAccelSignals *v3;
  _BYTE v5[128];

  if (a1 != a2)
  {
    CMMsl::RunningCentripetalAccelSignals::RunningCentripetalAccelSignals((CMMsl::RunningCentripetalAccelSignals *)v5, a2);
    CMMsl::swap(a1, (CMMsl::RunningCentripetalAccelSignals *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::RunningCentripetalAccelSignals *a2, CMMsl::RunningCentripetalAccelSignals *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double result;

  v3 = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v3;
  v4 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v4;
  v5 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v5;
  v6 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v6;
  v7 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v7;
  v8 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v8;
  v9 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v9;
  v10 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v10;
  v11 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v11;
  v12 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v12;
  v13 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v13;
  v14 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v14;
  v15 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v15;
  v16 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v16;
  result = *((double *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((double *)a2 + 3) = result;
  return result;
}

double CMMsl::RunningCentripetalAccelSignals::RunningCentripetalAccelSignals(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_251360888;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  return result;
}

CMMsl *CMMsl::RunningCentripetalAccelSignals::operator=(CMMsl *this, uint64_t a2, CMMsl::RunningCentripetalAccelSignals *a3)
{
  void (**v5)(CMMsl::RunningCentripetalAccelSignals *__hidden);
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;

  if (this != (CMMsl *)a2)
  {
    v5 = &off_251360888;
    v13 = *(_DWORD *)(a2 + 120);
    *(_DWORD *)(a2 + 120) = 0;
    v11 = *(_OWORD *)(a2 + 88);
    v12 = *(_OWORD *)(a2 + 104);
    v9 = *(_OWORD *)(a2 + 56);
    v10 = *(_OWORD *)(a2 + 72);
    v8 = *(_OWORD *)(a2 + 40);
    v6 = *(_OWORD *)(a2 + 8);
    v7 = *(_OWORD *)(a2 + 24);
    CMMsl::swap(this, (CMMsl::RunningCentripetalAccelSignals *)&v5, a3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return this;
}

uint64_t CMMsl::RunningCentripetalAccelSignals::formatText(CMMsl::RunningCentripetalAccelSignals *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 60);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "centerOfMassPrefiltAccelX", *((double *)this + 1));
    v5 = *((_WORD *)this + 60);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "centerOfMassPrefiltAccelY", *((double *)this + 2));
  v5 = *((_WORD *)this + 60);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "centerOfMassPrefiltAccelZ", *((double *)this + 3));
  v5 = *((_WORD *)this + 60);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "centripetalAccelX", *((double *)this + 4));
  v5 = *((_WORD *)this + 60);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "centripetalAccelY", *((double *)this + 5));
  v5 = *((_WORD *)this + 60);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "centripetalAccelZ", *((double *)this + 6));
  v5 = *((_WORD *)this + 60);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "centripetalRotationRateX", *((double *)this + 7));
  v5 = *((_WORD *)this + 60);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "centripetalRotationRateY", *((double *)this + 8));
  v5 = *((_WORD *)this + 60);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "centripetalRotationRateZ", *((double *)this + 9));
  v5 = *((_WORD *)this + 60);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 10));
  v5 = *((_WORD *)this + 60);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "swingVelocityX", *((double *)this + 11));
  v5 = *((_WORD *)this + 60);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
LABEL_29:
    PB::TextFormatter::format(a2, "swingVelocityZ", *((double *)this + 13));
    if ((*((_WORD *)this + 60) & 0x2000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_15;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "swingVelocityY", *((double *)this + 12));
  v5 = *((_WORD *)this + 60);
  if ((v5 & 0x1000) != 0)
    goto LABEL_29;
LABEL_14:
  if ((v5 & 0x2000) != 0)
LABEL_15:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 14));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::RunningCentripetalAccelSignals::readFrom(CMMsl::RunningCentripetalAccelSignals *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_67;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 60) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_64;
        *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_66;
      case 2u:
        *((_WORD *)this + 60) |= 0x2000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_64;
        *((_QWORD *)this + 14) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_66;
      case 3u:
        *((_WORD *)this + 60) |= 0x400u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_64;
        *((_QWORD *)this + 11) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_66;
      case 4u:
        *((_WORD *)this + 60) |= 0x800u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_64;
        *((_QWORD *)this + 12) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_66;
      case 5u:
        *((_WORD *)this + 60) |= 0x1000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_64;
        *((_QWORD *)this + 13) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_66;
      case 6u:
        *((_WORD *)this + 60) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_64;
        *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_66;
      case 7u:
        *((_WORD *)this + 60) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_64;
        *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_66;
      case 8u:
        *((_WORD *)this + 60) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_64;
        *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_66;
      case 9u:
        *((_WORD *)this + 60) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_64;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_66;
      case 0xAu:
        *((_WORD *)this + 60) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_64;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_66;
      case 0xBu:
        *((_WORD *)this + 60) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_64;
        *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_66;
      case 0xCu:
        *((_WORD *)this + 60) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_64;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_66;
      case 0xDu:
        *((_WORD *)this + 60) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_64;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_66;
      case 0xEu:
        *((_WORD *)this + 60) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
        {
LABEL_64:
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_66:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_67:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::RunningCentripetalAccelSignals::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 120);
  if ((v4 & 0x200) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 80));
    v4 = *(_WORD *)(v3 + 120);
    if ((v4 & 0x2000) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((*(_WORD *)(this + 120) & 0x2000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 112));
  v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 0x800) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 88));
  v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x800) == 0)
  {
LABEL_5:
    if ((v4 & 0x1000) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(double *)(v3 + 96));
  v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x1000) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 104));
  v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(double *)(v3 + 72));
  v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 1) == 0)
      goto LABEL_13;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 1) == 0)
  {
LABEL_13:
    if ((v4 & 2) == 0)
      goto LABEL_14;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 2) == 0)
  {
LABEL_14:
    if ((v4 & 4) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 24));
  }
LABEL_28:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  if ((*(_WORD *)(v3 + 120) & 4) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 24));
  return this;
}

uint64_t CMMsl::RunningCentripetalAccelSignals::hash_value(CMMsl::RunningCentripetalAccelSignals *this)
{
  __int16 v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;

  v1 = *((_WORD *)this + 60);
  if ((v1 & 0x200) == 0)
  {
    v2 = 0.0;
    if ((*((_WORD *)this + 60) & 0x2000) != 0)
      goto LABEL_3;
LABEL_45:
    v3 = 0.0;
    if ((*((_WORD *)this + 60) & 0x400) != 0)
      goto LABEL_6;
LABEL_46:
    v4 = 0.0;
    if ((*((_WORD *)this + 60) & 0x800) != 0)
      goto LABEL_9;
LABEL_47:
    v5 = 0.0;
    if ((*((_WORD *)this + 60) & 0x1000) != 0)
      goto LABEL_12;
LABEL_48:
    v6 = 0.0;
    if ((v1 & 0x40) != 0)
      goto LABEL_15;
LABEL_49:
    v7 = 0.0;
    if ((v1 & 0x80) != 0)
      goto LABEL_18;
LABEL_50:
    v8 = 0.0;
    if ((*((_WORD *)this + 60) & 0x100) != 0)
      goto LABEL_21;
LABEL_51:
    v9 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_24;
LABEL_52:
    v10 = 0.0;
    if ((v1 & 0x10) != 0)
      goto LABEL_27;
LABEL_53:
    v11 = 0.0;
    if ((v1 & 0x20) != 0)
      goto LABEL_30;
LABEL_54:
    v12 = 0.0;
    if ((v1 & 1) != 0)
      goto LABEL_33;
LABEL_55:
    v13 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_36;
    goto LABEL_56;
  }
  v2 = *((double *)this + 10);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_WORD *)this + 60) & 0x2000) == 0)
    goto LABEL_45;
LABEL_3:
  v3 = *((double *)this + 14);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((*((_WORD *)this + 60) & 0x400) == 0)
    goto LABEL_46;
LABEL_6:
  v4 = *((double *)this + 11);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((*((_WORD *)this + 60) & 0x800) == 0)
    goto LABEL_47;
LABEL_9:
  v5 = *((double *)this + 12);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((*((_WORD *)this + 60) & 0x1000) == 0)
    goto LABEL_48;
LABEL_12:
  v6 = *((double *)this + 13);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((v1 & 0x40) == 0)
    goto LABEL_49;
LABEL_15:
  v7 = *((double *)this + 7);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((v1 & 0x80) == 0)
    goto LABEL_50;
LABEL_18:
  v8 = *((double *)this + 8);
  if (v8 == 0.0)
    v8 = 0.0;
  if ((*((_WORD *)this + 60) & 0x100) == 0)
    goto LABEL_51;
LABEL_21:
  v9 = *((double *)this + 9);
  if (v9 == 0.0)
    v9 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_52;
LABEL_24:
  v10 = *((double *)this + 4);
  if (v10 == 0.0)
    v10 = 0.0;
  if ((v1 & 0x10) == 0)
    goto LABEL_53;
LABEL_27:
  v11 = *((double *)this + 5);
  if (v11 == 0.0)
    v11 = 0.0;
  if ((v1 & 0x20) == 0)
    goto LABEL_54;
LABEL_30:
  v12 = *((double *)this + 6);
  if (v12 == 0.0)
    v12 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_55;
LABEL_33:
  v13 = *((double *)this + 1);
  if (v13 == 0.0)
    v13 = 0.0;
  if ((v1 & 2) != 0)
  {
LABEL_36:
    v14 = *((double *)this + 2);
    if (v14 == 0.0)
      v14 = 0.0;
    if ((v1 & 4) != 0)
      goto LABEL_39;
LABEL_57:
    v15 = 0.0;
    return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13 ^ *(_QWORD *)&v14 ^ *(_QWORD *)&v15;
  }
LABEL_56:
  v14 = 0.0;
  if ((v1 & 4) == 0)
    goto LABEL_57;
LABEL_39:
  v15 = *((double *)this + 3);
  if (v15 == 0.0)
    v15 = 0.0;
  return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13 ^ *(_QWORD *)&v14 ^ *(_QWORD *)&v15;
}

void CMMsl::RunningFormMetrics::~RunningFormMetrics(CMMsl::RunningFormMetrics *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::RunningFormMetrics::RunningFormMetrics(CMMsl::RunningFormMetrics *this, const CMMsl::RunningFormMetrics *a2)
{
  uint64_t v2;
  uint64_t v3;
  double result;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  char v16;

  *(_QWORD *)this = &off_2513608C0;
  *((_QWORD *)this + 28) = 0;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 0x40) != 0)
  {
    result = *((double *)a2 + 7);
    v3 = 64;
    *((_QWORD *)this + 28) = 64;
    *((double *)this + 7) = result;
    v2 = *((_QWORD *)a2 + 28);
    if ((v2 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 8);
    v3 |= 0x80uLL;
    *((_QWORD *)this + 28) = v3;
    *((double *)this + 8) = result;
    v2 = *((_QWORD *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 0x200000000) != 0)
  {
    v5 = *((_BYTE *)a2 + 220);
    v3 |= 0x200000000uLL;
    *((_QWORD *)this + 28) = v3;
    *((_BYTE *)this + 220) = v5;
    v2 = *((_QWORD *)a2 + 28);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x40000000) == 0)
        goto LABEL_9;
      goto LABEL_42;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  result = *((double *)a2 + 2);
  v3 |= 2uLL;
  *((_QWORD *)this + 28) = v3;
  *((double *)this + 2) = result;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_9:
    if ((v2 & 0x80000) == 0)
      goto LABEL_10;
    goto LABEL_43;
  }
LABEL_42:
  v6 = *((_BYTE *)a2 + 217);
  v3 |= 0x40000000uLL;
  *((_QWORD *)this + 28) = v3;
  *((_BYTE *)this + 217) = v6;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 0x80000) == 0)
  {
LABEL_10:
    if ((v2 & 0x400000000) == 0)
      goto LABEL_11;
    goto LABEL_44;
  }
LABEL_43:
  result = *((double *)a2 + 20);
  v3 |= 0x80000uLL;
  *((_QWORD *)this + 28) = v3;
  *((double *)this + 20) = result;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 0x400000000) == 0)
  {
LABEL_11:
    if ((v2 & 1) == 0)
      goto LABEL_12;
    goto LABEL_45;
  }
LABEL_44:
  v7 = *((_BYTE *)a2 + 221);
  v3 |= 0x400000000uLL;
  *((_QWORD *)this + 28) = v3;
  *((_BYTE *)this + 221) = v7;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 1) == 0)
  {
LABEL_12:
    if ((v2 & 0x20000000) == 0)
      goto LABEL_13;
    goto LABEL_46;
  }
LABEL_45:
  result = *((double *)a2 + 1);
  v3 |= 1uLL;
  *((_QWORD *)this + 28) = v3;
  *((double *)this + 1) = result;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_13:
    if ((v2 & 0x80000000) == 0)
      goto LABEL_14;
    goto LABEL_47;
  }
LABEL_46:
  v8 = *((_BYTE *)a2 + 216);
  v3 |= 0x20000000uLL;
  *((_QWORD *)this + 28) = v3;
  *((_BYTE *)this + 216) = v8;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_14:
    if ((v2 & 0x8000) == 0)
      goto LABEL_15;
    goto LABEL_48;
  }
LABEL_47:
  v9 = *((_BYTE *)a2 + 218);
  v3 |= 0x80000000uLL;
  *((_QWORD *)this + 28) = v3;
  *((_BYTE *)this + 218) = v9;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 0x8000) == 0)
  {
LABEL_15:
    if ((v2 & 0x40000) == 0)
      goto LABEL_16;
    goto LABEL_49;
  }
LABEL_48:
  result = *((double *)a2 + 16);
  v3 |= 0x8000uLL;
  *((_QWORD *)this + 28) = v3;
  *((double *)this + 16) = result;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 0x40000) == 0)
  {
LABEL_16:
    if ((v2 & 0x4000) == 0)
      goto LABEL_17;
    goto LABEL_50;
  }
LABEL_49:
  result = *((double *)a2 + 19);
  v3 |= 0x40000uLL;
  *((_QWORD *)this + 28) = v3;
  *((double *)this + 19) = result;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 0x4000) == 0)
  {
LABEL_17:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_18;
    goto LABEL_51;
  }
LABEL_50:
  result = *((double *)a2 + 15);
  v3 |= 0x4000uLL;
  *((_QWORD *)this + 28) = v3;
  *((double *)this + 15) = result;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_19;
    goto LABEL_52;
  }
LABEL_51:
  v10 = *((_DWORD *)a2 + 52);
  v3 |= 0x8000000uLL;
  *((_QWORD *)this + 28) = v3;
  *((_DWORD *)this + 52) = v10;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_19:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_20;
    goto LABEL_53;
  }
LABEL_52:
  v11 = *((_DWORD *)a2 + 51);
  v3 |= 0x4000000uLL;
  *((_QWORD *)this + 28) = v3;
  *((_DWORD *)this + 51) = v11;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_20:
    if ((v2 & 0x800000) == 0)
      goto LABEL_21;
    goto LABEL_54;
  }
LABEL_53:
  v12 = *((_DWORD *)a2 + 53);
  v3 |= 0x10000000uLL;
  *((_QWORD *)this + 28) = v3;
  *((_DWORD *)this + 53) = v12;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 0x800000) == 0)
  {
LABEL_21:
    if ((v2 & 0x1000) == 0)
      goto LABEL_22;
    goto LABEL_55;
  }
LABEL_54:
  v13 = *((_DWORD *)a2 + 48);
  v3 |= 0x800000uLL;
  *((_QWORD *)this + 28) = v3;
  *((_DWORD *)this + 48) = v13;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 0x1000) == 0)
  {
LABEL_22:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_23;
    goto LABEL_56;
  }
LABEL_55:
  result = *((double *)a2 + 13);
  v3 |= 0x1000uLL;
  *((_QWORD *)this + 28) = v3;
  *((double *)this + 13) = result;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_23:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_24;
    goto LABEL_57;
  }
LABEL_56:
  v14 = *((_DWORD *)a2 + 50);
  v3 |= 0x2000000uLL;
  *((_QWORD *)this + 28) = v3;
  *((_DWORD *)this + 50) = v14;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_24:
    if ((v2 & 8) == 0)
      goto LABEL_25;
    goto LABEL_58;
  }
LABEL_57:
  v15 = *((_DWORD *)a2 + 49);
  v3 |= 0x1000000uLL;
  *((_QWORD *)this + 28) = v3;
  *((_DWORD *)this + 49) = v15;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 8) == 0)
  {
LABEL_25:
    if ((v2 & 4) == 0)
      goto LABEL_26;
    goto LABEL_59;
  }
LABEL_58:
  result = *((double *)a2 + 4);
  v3 |= 8uLL;
  *((_QWORD *)this + 28) = v3;
  *((double *)this + 4) = result;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 4) == 0)
  {
LABEL_26:
    if ((v2 & 0x10) == 0)
      goto LABEL_27;
    goto LABEL_60;
  }
LABEL_59:
  result = *((double *)a2 + 3);
  v3 |= 4uLL;
  *((_QWORD *)this + 28) = v3;
  *((double *)this + 3) = result;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 0x10) == 0)
  {
LABEL_27:
    if ((v2 & 0x100000000) == 0)
      goto LABEL_28;
    goto LABEL_61;
  }
LABEL_60:
  result = *((double *)a2 + 5);
  v3 |= 0x10uLL;
  *((_QWORD *)this + 28) = v3;
  *((double *)this + 5) = result;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 0x100000000) == 0)
  {
LABEL_28:
    if ((v2 & 0x100) == 0)
      goto LABEL_29;
    goto LABEL_62;
  }
LABEL_61:
  v16 = *((_BYTE *)a2 + 219);
  v3 |= 0x100000000uLL;
  *((_QWORD *)this + 28) = v3;
  *((_BYTE *)this + 219) = v16;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 0x100) == 0)
  {
LABEL_29:
    if ((v2 & 0x800) == 0)
      goto LABEL_30;
    goto LABEL_63;
  }
LABEL_62:
  result = *((double *)a2 + 9);
  v3 |= 0x100uLL;
  *((_QWORD *)this + 28) = v3;
  *((double *)this + 9) = result;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 0x800) == 0)
  {
LABEL_30:
    if ((v2 & 0x10000) == 0)
      goto LABEL_31;
    goto LABEL_64;
  }
LABEL_63:
  result = *((double *)a2 + 12);
  v3 |= 0x800uLL;
  *((_QWORD *)this + 28) = v3;
  *((double *)this + 12) = result;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 0x10000) == 0)
  {
LABEL_31:
    if ((v2 & 0x20000) == 0)
      goto LABEL_32;
    goto LABEL_65;
  }
LABEL_64:
  result = *((double *)a2 + 17);
  v3 |= 0x10000uLL;
  *((_QWORD *)this + 28) = v3;
  *((double *)this + 17) = result;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 0x20000) == 0)
  {
LABEL_32:
    if ((v2 & 0x20) == 0)
      goto LABEL_33;
    goto LABEL_66;
  }
LABEL_65:
  result = *((double *)a2 + 18);
  v3 |= 0x20000uLL;
  *((_QWORD *)this + 28) = v3;
  *((double *)this + 18) = result;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 0x20) == 0)
  {
LABEL_33:
    if ((v2 & 0x400000) == 0)
      goto LABEL_34;
    goto LABEL_67;
  }
LABEL_66:
  result = *((double *)a2 + 6);
  v3 |= 0x20uLL;
  *((_QWORD *)this + 28) = v3;
  *((double *)this + 6) = result;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 0x400000) == 0)
  {
LABEL_34:
    if ((v2 & 0x2000) == 0)
      goto LABEL_35;
    goto LABEL_68;
  }
LABEL_67:
  result = *((double *)a2 + 23);
  v3 |= 0x400000uLL;
  *((_QWORD *)this + 28) = v3;
  *((double *)this + 23) = result;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 0x2000) == 0)
  {
LABEL_35:
    if ((v2 & 0x100000) == 0)
      goto LABEL_36;
    goto LABEL_69;
  }
LABEL_68:
  result = *((double *)a2 + 14);
  v3 |= 0x2000uLL;
  *((_QWORD *)this + 28) = v3;
  *((double *)this + 14) = result;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 0x100000) == 0)
  {
LABEL_36:
    if ((v2 & 0x200) == 0)
      goto LABEL_37;
    goto LABEL_70;
  }
LABEL_69:
  result = *((double *)a2 + 21);
  v3 |= 0x100000uLL;
  *((_QWORD *)this + 28) = v3;
  *((double *)this + 21) = result;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 0x200) == 0)
  {
LABEL_37:
    if ((v2 & 0x200000) == 0)
      goto LABEL_38;
    goto LABEL_71;
  }
LABEL_70:
  result = *((double *)a2 + 10);
  v3 |= 0x200uLL;
  *((_QWORD *)this + 28) = v3;
  *((double *)this + 10) = result;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 0x200000) == 0)
  {
LABEL_38:
    if ((v2 & 0x400) == 0)
      return result;
LABEL_72:
    result = *((double *)a2 + 11);
    *((_QWORD *)this + 28) = v3 | 0x400;
    *((double *)this + 11) = result;
    return result;
  }
LABEL_71:
  result = *((double *)a2 + 22);
  v3 |= 0x200000uLL;
  *((_QWORD *)this + 28) = v3;
  *((double *)this + 22) = result;
  if ((*((_QWORD *)a2 + 28) & 0x400) != 0)
    goto LABEL_72;
  return result;
}

CMMsl *CMMsl::RunningFormMetrics::operator=(CMMsl *a1, const CMMsl::RunningFormMetrics *a2)
{
  CMMsl::RunningFormMetrics *v3;
  _BYTE v5[232];

  if (a1 != a2)
  {
    CMMsl::RunningFormMetrics::RunningFormMetrics((CMMsl::RunningFormMetrics *)v5, a2);
    CMMsl::swap(a1, (CMMsl::RunningFormMetrics *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::RunningFormMetrics *a2, CMMsl::RunningFormMetrics *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double result;

  v3 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = *((_QWORD *)a2 + 28);
  *((_QWORD *)a2 + 28) = v3;
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v4;
  v5 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v5;
  LOBYTE(v3) = *((_BYTE *)this + 220);
  *((_BYTE *)this + 220) = *((_BYTE *)a2 + 220);
  *((_BYTE *)a2 + 220) = v3;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  LOBYTE(v3) = *((_BYTE *)this + 217);
  *((_BYTE *)this + 217) = *((_BYTE *)a2 + 217);
  *((_BYTE *)a2 + 217) = v3;
  v7 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = *((_QWORD *)a2 + 20);
  *((_QWORD *)a2 + 20) = v7;
  LOBYTE(v3) = *((_BYTE *)this + 221);
  *((_BYTE *)this + 221) = *((_BYTE *)a2 + 221);
  *((_BYTE *)a2 + 221) = v3;
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v8;
  LOBYTE(v3) = *((_BYTE *)this + 216);
  *((_BYTE *)this + 216) = *((_BYTE *)a2 + 216);
  *((_BYTE *)a2 + 216) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 218);
  *((_BYTE *)this + 218) = *((_BYTE *)a2 + 218);
  *((_BYTE *)a2 + 218) = v3;
  v9 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v9;
  v10 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 19) = v10;
  v11 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v11;
  LODWORD(v3) = *((_DWORD *)this + 52);
  *((_DWORD *)this + 52) = *((_DWORD *)a2 + 52);
  *((_DWORD *)a2 + 52) = v3;
  LODWORD(v3) = *((_DWORD *)this + 51);
  *((_DWORD *)this + 51) = *((_DWORD *)a2 + 51);
  *((_DWORD *)a2 + 51) = v3;
  LODWORD(v3) = *((_DWORD *)this + 53);
  *((_DWORD *)this + 53) = *((_DWORD *)a2 + 53);
  *((_DWORD *)a2 + 53) = v3;
  LODWORD(v3) = *((_DWORD *)this + 48);
  *((_DWORD *)this + 48) = *((_DWORD *)a2 + 48);
  *((_DWORD *)a2 + 48) = v3;
  v12 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v12;
  LODWORD(v3) = *((_DWORD *)this + 50);
  *((_DWORD *)this + 50) = *((_DWORD *)a2 + 50);
  *((_DWORD *)a2 + 50) = v3;
  LODWORD(v3) = *((_DWORD *)this + 49);
  *((_DWORD *)this + 49) = *((_DWORD *)a2 + 49);
  *((_DWORD *)a2 + 49) = v3;
  v13 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v13;
  v14 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v14;
  v15 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v15;
  LOBYTE(v3) = *((_BYTE *)this + 219);
  *((_BYTE *)this + 219) = *((_BYTE *)a2 + 219);
  *((_BYTE *)a2 + 219) = v3;
  v16 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v16;
  v17 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v17;
  v18 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v18;
  v19 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v19;
  v20 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v20;
  v21 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = *((_QWORD *)a2 + 23);
  *((_QWORD *)a2 + 23) = v21;
  v22 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v22;
  v23 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = *((_QWORD *)a2 + 21);
  *((_QWORD *)a2 + 21) = v23;
  v24 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v24;
  v25 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = *((_QWORD *)a2 + 22);
  *((_QWORD *)a2 + 22) = v25;
  result = *((double *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((double *)a2 + 11) = result;
  return result;
}

double CMMsl::RunningFormMetrics::RunningFormMetrics(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_2513608C0;
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a2 + 224) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 220) = *(_BYTE *)(a2 + 220);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 217) = *(_BYTE *)(a2 + 217);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 221) = *(_BYTE *)(a2 + 221);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(_BYTE *)(a1 + 218) = *(_BYTE *)(a2 + 218);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 196);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 219) = *(_BYTE *)(a2 + 219);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  result = *(double *)(a2 + 88);
  *(double *)(a1 + 88) = result;
  return result;
}

CMMsl *CMMsl::RunningFormMetrics::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::RunningFormMetrics *v3;
  _BYTE v5[232];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::RunningFormMetrics::RunningFormMetrics((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::RunningFormMetrics *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::RunningFormMetrics::formatText(CMMsl::RunningFormMetrics *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "emptyField0", *((double *)this + 1));
    v5 = *((_QWORD *)this + 28);
    if ((v5 & 0x20000000) == 0)
    {
LABEL_3:
      if ((v5 & 0x800000) == 0)
        goto LABEL_4;
      goto LABEL_40;
    }
  }
  else if ((v5 & 0x20000000) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "emptyField1");
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x800000) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0)
      goto LABEL_5;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "emptyField2");
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0)
      goto LABEL_6;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "groundContactTime", *((double *)this + 2));
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0)
      goto LABEL_7;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "groundContactTimeCadence", *((double *)this + 3));
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_8;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "groundContactTimeGrade", *((double *)this + 4));
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_8:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_9;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "groundContactTimeGradeSource");
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_9:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_10;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "groundContactTimeGradeType");
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "groundContactTimeIsValid");
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x10) == 0)
  {
LABEL_11:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_12;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "groundContactTimePace", *((double *)this + 5));
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x20) == 0)
      goto LABEL_13;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "groundContactTimeReportingStatus");
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x20) == 0)
  {
LABEL_13:
    if ((v5 & 0x40) == 0)
      goto LABEL_14;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "groundContactTimeUnsmoothed", *((double *)this + 6));
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x40) == 0)
  {
LABEL_14:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "groundContactTimeWindowEndTime", *((double *)this + 7));
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_15:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_16;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "isFlat");
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x80) == 0)
      goto LABEL_17;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "isFormBasedStrideLength");
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x80) == 0)
  {
LABEL_17:
    if ((v5 & 0x100) == 0)
      goto LABEL_18;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "strideLength", *((double *)this + 8));
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x100) == 0)
  {
LABEL_18:
    if ((v5 & 0x200) == 0)
      goto LABEL_19;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "strideLengthCadence", *((double *)this + 9));
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x200) == 0)
  {
LABEL_19:
    if ((v5 & 0x400) == 0)
      goto LABEL_20;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "strideLengthGrade", *((double *)this + 10));
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x400) == 0)
  {
LABEL_20:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_21;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "strideLengthGradeType", *((double *)this + 11));
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_21:
    if ((v5 & 0x800) == 0)
      goto LABEL_22;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "strideLengthIsValid");
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x800) == 0)
  {
LABEL_22:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_23;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "strideLengthPace", *((double *)this + 12));
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_23:
    if ((v5 & 0x1000) == 0)
      goto LABEL_24;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "strideLengthReportingStatus");
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x1000) == 0)
  {
LABEL_24:
    if ((v5 & 0x2000) == 0)
      goto LABEL_25;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "strideLengthUncalibrated", *((double *)this + 13));
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x2000) == 0)
  {
LABEL_25:
    if ((v5 & 0x4000) == 0)
      goto LABEL_26;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "strideLengthUnsmoothed", *((double *)this + 14));
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x4000) == 0)
  {
LABEL_26:
    if ((v5 & 0x8000) == 0)
      goto LABEL_27;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "strideLengthWindowEndTime", *((double *)this + 15));
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x8000) == 0)
  {
LABEL_27:
    if ((v5 & 0x10000) == 0)
      goto LABEL_28;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 16));
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x10000) == 0)
  {
LABEL_28:
    if ((v5 & 0x20000) == 0)
      goto LABEL_29;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "verticalOscCadence", *((double *)this + 17));
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x20000) == 0)
  {
LABEL_29:
    if ((v5 & 0x40000) == 0)
      goto LABEL_30;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "verticalOscPace", *((double *)this + 18));
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x40000) == 0)
  {
LABEL_30:
    if ((v5 & 0x80000) == 0)
      goto LABEL_31;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "verticalOscWindowEndTime", *((double *)this + 19));
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x80000) == 0)
  {
LABEL_31:
    if ((v5 & 0x100000) == 0)
      goto LABEL_32;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "verticalOscillation", *((double *)this + 20));
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x100000) == 0)
  {
LABEL_32:
    if ((v5 & 0x200000) == 0)
      goto LABEL_33;
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(a2, "verticalOscillationGrade", *((double *)this + 21));
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x200000) == 0)
  {
LABEL_33:
    if ((v5 & 0x400000000) == 0)
      goto LABEL_34;
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(a2, "verticalOscillationGradeType", *((double *)this + 22));
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_35;
LABEL_71:
    PB::TextFormatter::format(a2, "verticalOscillationReportingStatus");
    if ((*((_QWORD *)this + 28) & 0x400000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_36;
  }
LABEL_70:
  PB::TextFormatter::format(a2, "verticalOscillationIsValid");
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x10000000) != 0)
    goto LABEL_71;
LABEL_35:
  if ((v5 & 0x400000) != 0)
LABEL_36:
    PB::TextFormatter::format(a2, "verticalOscillationUnsmoothed", *((double *)this + 23));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::RunningFormMetrics::readFrom(CMMsl::RunningFormMetrics *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v20;
  BOOL v21;
  int v22;
  BOOL v23;
  int v24;
  BOOL v25;
  int v26;
  BOOL v27;
  int v28;
  BOOL v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  char v47;
  unint64_t v48;
  uint64_t v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  char v53;
  unint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  uint64_t v58;
  char v59;
  unint64_t v60;
  uint64_t v61;
  char v62;
  unsigned int v63;
  uint64_t v64;
  char v65;
  int v66;
  BOOL v67;
  char v68;
  unsigned int v69;
  unint64_t v70;
  char v71;
  char v72;
  unsigned int v73;
  unint64_t v74;
  char v75;
  char v76;
  unsigned int v77;
  unint64_t v78;
  char v79;
  char v80;
  unsigned int v81;
  unint64_t v82;
  char v83;
  char v84;
  unsigned int v85;
  unint64_t v86;
  char v87;
  char v88;
  unsigned int v89;
  unint64_t v90;
  char v91;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_202;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_QWORD *)this + 28) |= 0x40uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_145;
        *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_201;
      case 2u:
        *((_QWORD *)this + 28) |= 0x80uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_145;
        *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_201;
      case 3u:
        *((_QWORD *)this + 28) |= 0x200000000uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v21 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v21 = v20 != 0;
        }
        *((_BYTE *)this + 220) = v21;
        break;
      case 4u:
        *((_QWORD *)this + 28) |= 2uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_145;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_201;
      case 5u:
        *((_QWORD *)this + 28) |= 0x40000000uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v23 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v22 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v23 = v22 != 0;
        }
        *((_BYTE *)this + 217) = v23;
        break;
      case 6u:
        *((_QWORD *)this + 28) |= 0x80000uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_145;
        *((_QWORD *)this + 20) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_201;
      case 7u:
        *((_QWORD *)this + 28) |= 0x400000000uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v25 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v24 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v25 = v24 != 0;
        }
        *((_BYTE *)this + 221) = v25;
        break;
      case 8u:
        *((_QWORD *)this + 28) |= 1uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_145;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_201;
      case 9u:
        *((_QWORD *)this + 28) |= 0x20000000uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v27 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v26 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v27 = v26 != 0;
        }
        *((_BYTE *)this + 216) = v27;
        break;
      case 0xAu:
        *((_QWORD *)this + 28) |= 0x80000000uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v29 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v28 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v29 = v28 != 0;
        }
        *((_BYTE *)this + 218) = v29;
        break;
      case 0xBu:
        *((_QWORD *)this + 28) |= 0x8000uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_145;
        *((_QWORD *)this + 16) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_201;
      case 0xCu:
        *((_QWORD *)this + 28) |= 0x40000uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_145;
        *((_QWORD *)this + 19) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_201;
      case 0xDu:
        *((_QWORD *)this + 28) |= 0x4000uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_145;
        *((_QWORD *)this + 15) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_201;
      case 0xEu:
        *((_QWORD *)this + 28) |= 0x8000000uLL;
        v30 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v31 = *(_QWORD *)a2;
        if (v30 > 0xFFFFFFFFFFFFFFF5 || v30 + 10 > v2)
        {
          v68 = 0;
          v69 = 0;
          v34 = 0;
          if (v2 <= v30)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v30)
            {
              LODWORD(v34) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_211;
            }
            v70 = v30++;
            v71 = *(_BYTE *)(v31 + v70);
            *((_QWORD *)a2 + 1) = v30;
            v34 |= (unint64_t)(v71 & 0x7F) << v68;
            if ((v71 & 0x80) == 0)
              break;
            v68 += 7;
            v14 = v69++ > 8;
            if (v14)
            {
              LODWORD(v34) = 0;
LABEL_210:
              v2 = v70 + 1;
              goto LABEL_211;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v34) = 0;
          goto LABEL_210;
        }
        v32 = 0;
        v33 = 0;
        v34 = 0;
        do
        {
          v2 = v30 + 1;
          *((_QWORD *)a2 + 1) = v30 + 1;
          v35 = *(_BYTE *)(v31 + v30);
          v34 |= (unint64_t)(v35 & 0x7F) << v32;
          if ((v35 & 0x80) == 0)
            goto LABEL_211;
          v32 += 7;
          v30 = v2;
          v14 = v33++ > 8;
        }
        while (!v14);
        LODWORD(v34) = 0;
LABEL_211:
        *((_DWORD *)this + 52) = v34;
        break;
      case 0xFu:
        *((_QWORD *)this + 28) |= 0x4000000uLL;
        v36 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v37 = *(_QWORD *)a2;
        if (v36 > 0xFFFFFFFFFFFFFFF5 || v36 + 10 > v2)
        {
          v72 = 0;
          v73 = 0;
          v40 = 0;
          if (v2 <= v36)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v36)
            {
              LODWORD(v40) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_216;
            }
            v74 = v36++;
            v75 = *(_BYTE *)(v37 + v74);
            *((_QWORD *)a2 + 1) = v36;
            v40 |= (unint64_t)(v75 & 0x7F) << v72;
            if ((v75 & 0x80) == 0)
              break;
            v72 += 7;
            v14 = v73++ > 8;
            if (v14)
            {
              LODWORD(v40) = 0;
LABEL_215:
              v2 = v74 + 1;
              goto LABEL_216;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v40) = 0;
          goto LABEL_215;
        }
        v38 = 0;
        v39 = 0;
        v40 = 0;
        do
        {
          v2 = v36 + 1;
          *((_QWORD *)a2 + 1) = v36 + 1;
          v41 = *(_BYTE *)(v37 + v36);
          v40 |= (unint64_t)(v41 & 0x7F) << v38;
          if ((v41 & 0x80) == 0)
            goto LABEL_216;
          v38 += 7;
          v36 = v2;
          v14 = v39++ > 8;
        }
        while (!v14);
        LODWORD(v40) = 0;
LABEL_216:
        *((_DWORD *)this + 51) = v40;
        break;
      case 0x10u:
        *((_QWORD *)this + 28) |= 0x10000000uLL;
        v42 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v43 = *(_QWORD *)a2;
        if (v42 > 0xFFFFFFFFFFFFFFF5 || v42 + 10 > v2)
        {
          v76 = 0;
          v77 = 0;
          v46 = 0;
          if (v2 <= v42)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v42)
            {
              LODWORD(v46) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_221;
            }
            v78 = v42++;
            v79 = *(_BYTE *)(v43 + v78);
            *((_QWORD *)a2 + 1) = v42;
            v46 |= (unint64_t)(v79 & 0x7F) << v76;
            if ((v79 & 0x80) == 0)
              break;
            v76 += 7;
            v14 = v77++ > 8;
            if (v14)
            {
              LODWORD(v46) = 0;
LABEL_220:
              v2 = v78 + 1;
              goto LABEL_221;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v46) = 0;
          goto LABEL_220;
        }
        v44 = 0;
        v45 = 0;
        v46 = 0;
        do
        {
          v2 = v42 + 1;
          *((_QWORD *)a2 + 1) = v42 + 1;
          v47 = *(_BYTE *)(v43 + v42);
          v46 |= (unint64_t)(v47 & 0x7F) << v44;
          if ((v47 & 0x80) == 0)
            goto LABEL_221;
          v44 += 7;
          v42 = v2;
          v14 = v45++ > 8;
        }
        while (!v14);
        LODWORD(v46) = 0;
LABEL_221:
        *((_DWORD *)this + 53) = v46;
        break;
      case 0x11u:
        *((_QWORD *)this + 28) |= 0x800000uLL;
        v48 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v49 = *(_QWORD *)a2;
        if (v48 > 0xFFFFFFFFFFFFFFF5 || v48 + 10 > v2)
        {
          v80 = 0;
          v81 = 0;
          v52 = 0;
          if (v2 <= v48)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v48)
            {
              LODWORD(v52) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_226;
            }
            v82 = v48++;
            v83 = *(_BYTE *)(v49 + v82);
            *((_QWORD *)a2 + 1) = v48;
            v52 |= (unint64_t)(v83 & 0x7F) << v80;
            if ((v83 & 0x80) == 0)
              break;
            v80 += 7;
            v14 = v81++ > 8;
            if (v14)
            {
              LODWORD(v52) = 0;
LABEL_225:
              v2 = v82 + 1;
              goto LABEL_226;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v52) = 0;
          goto LABEL_225;
        }
        v50 = 0;
        v51 = 0;
        v52 = 0;
        do
        {
          v2 = v48 + 1;
          *((_QWORD *)a2 + 1) = v48 + 1;
          v53 = *(_BYTE *)(v49 + v48);
          v52 |= (unint64_t)(v53 & 0x7F) << v50;
          if ((v53 & 0x80) == 0)
            goto LABEL_226;
          v50 += 7;
          v48 = v2;
          v14 = v51++ > 8;
        }
        while (!v14);
        LODWORD(v52) = 0;
LABEL_226:
        *((_DWORD *)this + 48) = v52;
        break;
      case 0x12u:
        *((_QWORD *)this + 28) |= 0x1000uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_145;
        *((_QWORD *)this + 13) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_201;
      case 0x13u:
        *((_QWORD *)this + 28) |= 0x2000000uLL;
        v54 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v55 = *(_QWORD *)a2;
        if (v54 > 0xFFFFFFFFFFFFFFF5 || v54 + 10 > v2)
        {
          v84 = 0;
          v85 = 0;
          v58 = 0;
          if (v2 <= v54)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v54)
            {
              LODWORD(v58) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_231;
            }
            v86 = v54++;
            v87 = *(_BYTE *)(v55 + v86);
            *((_QWORD *)a2 + 1) = v54;
            v58 |= (unint64_t)(v87 & 0x7F) << v84;
            if ((v87 & 0x80) == 0)
              break;
            v84 += 7;
            v14 = v85++ > 8;
            if (v14)
            {
              LODWORD(v58) = 0;
LABEL_230:
              v2 = v86 + 1;
              goto LABEL_231;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v58) = 0;
          goto LABEL_230;
        }
        v56 = 0;
        v57 = 0;
        v58 = 0;
        do
        {
          v2 = v54 + 1;
          *((_QWORD *)a2 + 1) = v54 + 1;
          v59 = *(_BYTE *)(v55 + v54);
          v58 |= (unint64_t)(v59 & 0x7F) << v56;
          if ((v59 & 0x80) == 0)
            goto LABEL_231;
          v56 += 7;
          v54 = v2;
          v14 = v57++ > 8;
        }
        while (!v14);
        LODWORD(v58) = 0;
LABEL_231:
        *((_DWORD *)this + 50) = v58;
        break;
      case 0x14u:
        *((_QWORD *)this + 28) |= 0x1000000uLL;
        v60 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v61 = *(_QWORD *)a2;
        if (v60 > 0xFFFFFFFFFFFFFFF5 || v60 + 10 > v2)
        {
          v88 = 0;
          v89 = 0;
          v64 = 0;
          if (v2 <= v60)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v60)
            {
              LODWORD(v64) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_236;
            }
            v90 = v60++;
            v91 = *(_BYTE *)(v61 + v90);
            *((_QWORD *)a2 + 1) = v60;
            v64 |= (unint64_t)(v91 & 0x7F) << v88;
            if ((v91 & 0x80) == 0)
              break;
            v88 += 7;
            v14 = v89++ > 8;
            if (v14)
            {
              LODWORD(v64) = 0;
LABEL_235:
              v2 = v90 + 1;
              goto LABEL_236;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v64) = 0;
          goto LABEL_235;
        }
        v62 = 0;
        v63 = 0;
        v64 = 0;
        do
        {
          v2 = v60 + 1;
          *((_QWORD *)a2 + 1) = v60 + 1;
          v65 = *(_BYTE *)(v61 + v60);
          v64 |= (unint64_t)(v65 & 0x7F) << v62;
          if ((v65 & 0x80) == 0)
            goto LABEL_236;
          v62 += 7;
          v60 = v2;
          v14 = v63++ > 8;
        }
        while (!v14);
        LODWORD(v64) = 0;
LABEL_236:
        *((_DWORD *)this + 49) = v64;
        break;
      case 0x15u:
        *((_QWORD *)this + 28) |= 8uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_145;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_201;
      case 0x16u:
        *((_QWORD *)this + 28) |= 4uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_145;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_201;
      case 0x17u:
        *((_QWORD *)this + 28) |= 0x10uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_145;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_201;
      case 0x18u:
        *((_QWORD *)this + 28) |= 0x100000000uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v67 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v66 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v67 = v66 != 0;
        }
        *((_BYTE *)this + 219) = v67;
        break;
      case 0x19u:
        *((_QWORD *)this + 28) |= 0x100uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_145;
        *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_201;
      case 0x1Au:
        *((_QWORD *)this + 28) |= 0x800uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_145;
        *((_QWORD *)this + 12) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_201;
      case 0x1Bu:
        *((_QWORD *)this + 28) |= 0x10000uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_145;
        *((_QWORD *)this + 17) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_201;
      case 0x1Cu:
        *((_QWORD *)this + 28) |= 0x20000uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_145;
        *((_QWORD *)this + 18) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_201;
      case 0x1Du:
        *((_QWORD *)this + 28) |= 0x20uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_145;
        *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_201;
      case 0x1Eu:
        *((_QWORD *)this + 28) |= 0x400000uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_145;
        *((_QWORD *)this + 23) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_201;
      case 0x1Fu:
        *((_QWORD *)this + 28) |= 0x2000uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_145;
        *((_QWORD *)this + 14) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_201;
      case 0x20u:
        *((_QWORD *)this + 28) |= 0x100000uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_145;
        *((_QWORD *)this + 21) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_201;
      case 0x21u:
        *((_QWORD *)this + 28) |= 0x200uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_145;
        *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_201;
      case 0x22u:
        *((_QWORD *)this + 28) |= 0x200000uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_145;
        *((_QWORD *)this + 22) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_201;
      case 0x23u:
        *((_QWORD *)this + 28) |= 0x400uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 11) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_201:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_145:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_202:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::RunningFormMetrics::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = this;
  v4 = *(_QWORD *)(this + 224);
  if ((v4 & 0x40) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 56));
    v4 = *(_QWORD *)(v3 + 224);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 0x200000000) == 0)
        goto LABEL_4;
      goto LABEL_39;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_6;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x80000) == 0)
      goto LABEL_7;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x80000) == 0)
  {
LABEL_7:
    if ((v4 & 0x400000000) == 0)
      goto LABEL_8;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(double *)(v3 + 160));
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0)
      goto LABEL_9;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_10;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x8000) == 0)
      goto LABEL_12;
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x8000) == 0)
  {
LABEL_12:
    if ((v4 & 0x40000) == 0)
      goto LABEL_13;
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(double *)(v3 + 128));
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x40000) == 0)
  {
LABEL_13:
    if ((v4 & 0x4000) == 0)
      goto LABEL_14;
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(double *)(v3 + 152));
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x4000) == 0)
  {
LABEL_14:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_15;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(double *)(v3 + 120));
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_16;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_17;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x800000) == 0)
      goto LABEL_18;
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x800000) == 0)
  {
LABEL_18:
    if ((v4 & 0x1000) == 0)
      goto LABEL_19;
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x1000) == 0)
  {
LABEL_19:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_20;
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::write(a2, *(double *)(v3 + 104));
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_20:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_21;
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_21:
    if ((v4 & 8) == 0)
      goto LABEL_22;
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 8) == 0)
  {
LABEL_22:
    if ((v4 & 4) == 0)
      goto LABEL_23;
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 4) == 0)
  {
LABEL_23:
    if ((v4 & 0x10) == 0)
      goto LABEL_24;
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x10) == 0)
  {
LABEL_24:
    if ((v4 & 0x100000000) == 0)
      goto LABEL_25;
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x100) == 0)
      goto LABEL_26;
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::write(a2);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x100) == 0)
  {
LABEL_26:
    if ((v4 & 0x800) == 0)
      goto LABEL_27;
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::write(a2, *(double *)(v3 + 72));
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x800) == 0)
  {
LABEL_27:
    if ((v4 & 0x10000) == 0)
      goto LABEL_28;
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::write(a2, *(double *)(v3 + 96));
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x10000) == 0)
  {
LABEL_28:
    if ((v4 & 0x20000) == 0)
      goto LABEL_29;
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::write(a2, *(double *)(v3 + 136));
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x20000) == 0)
  {
LABEL_29:
    if ((v4 & 0x20) == 0)
      goto LABEL_30;
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::write(a2, *(double *)(v3 + 144));
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x20) == 0)
  {
LABEL_30:
    if ((v4 & 0x400000) == 0)
      goto LABEL_31;
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x400000) == 0)
  {
LABEL_31:
    if ((v4 & 0x2000) == 0)
      goto LABEL_32;
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::write(a2, *(double *)(v3 + 184));
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x2000) == 0)
  {
LABEL_32:
    if ((v4 & 0x100000) == 0)
      goto LABEL_33;
    goto LABEL_68;
  }
LABEL_67:
  this = PB::Writer::write(a2, *(double *)(v3 + 112));
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x100000) == 0)
  {
LABEL_33:
    if ((v4 & 0x200) == 0)
      goto LABEL_34;
    goto LABEL_69;
  }
LABEL_68:
  this = PB::Writer::write(a2, *(double *)(v3 + 168));
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x200) == 0)
  {
LABEL_34:
    if ((v4 & 0x200000) == 0)
      goto LABEL_35;
    goto LABEL_70;
  }
LABEL_69:
  this = PB::Writer::write(a2, *(double *)(v3 + 80));
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x200000) == 0)
  {
LABEL_35:
    if ((v4 & 0x400) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 88));
  }
LABEL_70:
  this = PB::Writer::write(a2, *(double *)(v3 + 176));
  if ((*(_QWORD *)(v3 + 224) & 0x400) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 88));
  return this;
}

uint64_t CMMsl::RunningFormMetrics::hash_value(CMMsl::RunningFormMetrics *this)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  uint64_t v34;
  double v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  double v41;

  v1 = *((_QWORD *)this + 28);
  if ((v1 & 0x40) == 0)
  {
    v2 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_3;
LABEL_95:
    v41 = 0.0;
    if ((v1 & 0x200000000) != 0)
      goto LABEL_6;
    goto LABEL_96;
  }
  if (*((double *)this + 7) == 0.0)
    v2 = 0;
  else
    v2 = *((_QWORD *)this + 7);
  if ((v1 & 0x80) == 0)
    goto LABEL_95;
LABEL_3:
  v3 = *((double *)this + 8);
  if (v3 == 0.0)
    v3 = 0.0;
  v41 = v3;
  if ((v1 & 0x200000000) != 0)
  {
LABEL_6:
    v40 = *((unsigned __int8 *)this + 220);
    if ((v1 & 2) != 0)
      goto LABEL_7;
LABEL_97:
    v39 = 0.0;
    if ((v1 & 0x40000000) != 0)
      goto LABEL_10;
    goto LABEL_98;
  }
LABEL_96:
  v40 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_97;
LABEL_7:
  v4 = *((double *)this + 2);
  if (v4 == 0.0)
    v4 = 0.0;
  v39 = v4;
  if ((v1 & 0x40000000) != 0)
  {
LABEL_10:
    v38 = *((unsigned __int8 *)this + 217);
    if ((v1 & 0x80000) != 0)
      goto LABEL_11;
LABEL_99:
    v37 = 0.0;
    if ((v1 & 0x400000000) != 0)
      goto LABEL_14;
    goto LABEL_100;
  }
LABEL_98:
  v38 = 0;
  if ((v1 & 0x80000) == 0)
    goto LABEL_99;
LABEL_11:
  v5 = *((double *)this + 20);
  if (v5 == 0.0)
    v5 = 0.0;
  v37 = v5;
  if ((v1 & 0x400000000) != 0)
  {
LABEL_14:
    v36 = *((unsigned __int8 *)this + 221);
    if ((v1 & 1) != 0)
      goto LABEL_15;
LABEL_101:
    v35 = 0.0;
    if ((v1 & 0x20000000) != 0)
      goto LABEL_18;
    goto LABEL_102;
  }
LABEL_100:
  v36 = 0;
  if ((v1 & 1) == 0)
    goto LABEL_101;
LABEL_15:
  v6 = *((double *)this + 1);
  if (v6 == 0.0)
    v6 = 0.0;
  v35 = v6;
  if ((v1 & 0x20000000) != 0)
  {
LABEL_18:
    v34 = *((unsigned __int8 *)this + 216);
    if ((v1 & 0x80000000) != 0)
      goto LABEL_19;
    goto LABEL_103;
  }
LABEL_102:
  v34 = 0;
  if ((v1 & 0x80000000) != 0)
  {
LABEL_19:
    v7 = *((unsigned __int8 *)this + 218);
    if ((v1 & 0x8000) != 0)
      goto LABEL_20;
LABEL_104:
    v8 = 0;
    if ((v1 & 0x40000) != 0)
      goto LABEL_24;
LABEL_105:
    v9 = 0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_28;
LABEL_106:
    v10 = 0;
    if ((v1 & 0x8000000) != 0)
      goto LABEL_32;
    goto LABEL_107;
  }
LABEL_103:
  v7 = 0;
  if ((v1 & 0x8000) == 0)
    goto LABEL_104;
LABEL_20:
  if (*((double *)this + 16) == 0.0)
    v8 = 0;
  else
    v8 = *((_QWORD *)this + 16);
  if ((v1 & 0x40000) == 0)
    goto LABEL_105;
LABEL_24:
  if (*((double *)this + 19) == 0.0)
    v9 = 0;
  else
    v9 = *((_QWORD *)this + 19);
  if ((v1 & 0x4000) == 0)
    goto LABEL_106;
LABEL_28:
  if (*((double *)this + 15) == 0.0)
    v10 = 0;
  else
    v10 = *((_QWORD *)this + 15);
  if ((v1 & 0x8000000) != 0)
  {
LABEL_32:
    v11 = *((int *)this + 52);
    if ((v1 & 0x4000000) != 0)
      goto LABEL_33;
    goto LABEL_108;
  }
LABEL_107:
  v11 = 0;
  if ((v1 & 0x4000000) != 0)
  {
LABEL_33:
    v12 = *((int *)this + 51);
    if ((v1 & 0x10000000) != 0)
      goto LABEL_34;
    goto LABEL_109;
  }
LABEL_108:
  v12 = 0;
  if ((v1 & 0x10000000) != 0)
  {
LABEL_34:
    v13 = *((int *)this + 53);
    if ((v1 & 0x800000) != 0)
      goto LABEL_35;
    goto LABEL_110;
  }
LABEL_109:
  v13 = 0;
  if ((v1 & 0x800000) != 0)
  {
LABEL_35:
    v14 = *((int *)this + 48);
    if ((v1 & 0x1000) != 0)
      goto LABEL_36;
LABEL_111:
    v15 = 0;
    if ((v1 & 0x2000000) != 0)
      goto LABEL_40;
    goto LABEL_112;
  }
LABEL_110:
  v14 = 0;
  if ((v1 & 0x1000) == 0)
    goto LABEL_111;
LABEL_36:
  if (*((double *)this + 13) == 0.0)
    v15 = 0;
  else
    v15 = *((_QWORD *)this + 13);
  if ((v1 & 0x2000000) != 0)
  {
LABEL_40:
    v16 = *((int *)this + 50);
    if ((v1 & 0x1000000) != 0)
      goto LABEL_41;
    goto LABEL_113;
  }
LABEL_112:
  v16 = 0;
  if ((v1 & 0x1000000) != 0)
  {
LABEL_41:
    v17 = *((int *)this + 49);
    if ((v1 & 8) != 0)
      goto LABEL_42;
LABEL_114:
    v18 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_46;
LABEL_115:
    v19 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_50;
LABEL_116:
    v20 = 0;
    if ((v1 & 0x100000000) != 0)
      goto LABEL_54;
    goto LABEL_117;
  }
LABEL_113:
  v17 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_114;
LABEL_42:
  if (*((double *)this + 4) == 0.0)
    v18 = 0;
  else
    v18 = *((_QWORD *)this + 4);
  if ((v1 & 4) == 0)
    goto LABEL_115;
LABEL_46:
  if (*((double *)this + 3) == 0.0)
    v19 = 0;
  else
    v19 = *((_QWORD *)this + 3);
  if ((v1 & 0x10) == 0)
    goto LABEL_116;
LABEL_50:
  if (*((double *)this + 5) == 0.0)
    v20 = 0;
  else
    v20 = *((_QWORD *)this + 5);
  if ((v1 & 0x100000000) != 0)
  {
LABEL_54:
    v21 = *((unsigned __int8 *)this + 219);
    if ((v1 & 0x100) != 0)
      goto LABEL_55;
LABEL_118:
    v22 = 0;
    if ((v1 & 0x800) != 0)
      goto LABEL_59;
LABEL_119:
    v23 = 0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_63;
LABEL_120:
    v24 = 0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_67;
LABEL_121:
    v25 = 0.0;
    if ((v1 & 0x20) != 0)
      goto LABEL_70;
LABEL_122:
    v26 = 0.0;
    if ((v1 & 0x400000) != 0)
      goto LABEL_73;
LABEL_123:
    v27 = 0.0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_76;
LABEL_124:
    v28 = 0.0;
    if ((v1 & 0x100000) != 0)
      goto LABEL_79;
LABEL_125:
    v29 = 0.0;
    if ((v1 & 0x200) != 0)
      goto LABEL_82;
LABEL_126:
    v30 = 0.0;
    if ((v1 & 0x200000) != 0)
      goto LABEL_85;
    goto LABEL_127;
  }
LABEL_117:
  v21 = 0;
  if ((v1 & 0x100) == 0)
    goto LABEL_118;
LABEL_55:
  if (*((double *)this + 9) == 0.0)
    v22 = 0;
  else
    v22 = *((_QWORD *)this + 9);
  if ((v1 & 0x800) == 0)
    goto LABEL_119;
LABEL_59:
  if (*((double *)this + 12) == 0.0)
    v23 = 0;
  else
    v23 = *((_QWORD *)this + 12);
  if ((v1 & 0x10000) == 0)
    goto LABEL_120;
LABEL_63:
  if (*((double *)this + 17) == 0.0)
    v24 = 0;
  else
    v24 = *((_QWORD *)this + 17);
  if ((v1 & 0x20000) == 0)
    goto LABEL_121;
LABEL_67:
  v25 = *((double *)this + 18);
  if (v25 == 0.0)
    v25 = 0.0;
  if ((v1 & 0x20) == 0)
    goto LABEL_122;
LABEL_70:
  v26 = *((double *)this + 6);
  if (v26 == 0.0)
    v26 = 0.0;
  if ((v1 & 0x400000) == 0)
    goto LABEL_123;
LABEL_73:
  v27 = *((double *)this + 23);
  if (v27 == 0.0)
    v27 = 0.0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_124;
LABEL_76:
  v28 = *((double *)this + 14);
  if (v28 == 0.0)
    v28 = 0.0;
  if ((v1 & 0x100000) == 0)
    goto LABEL_125;
LABEL_79:
  v29 = *((double *)this + 21);
  if (v29 == 0.0)
    v29 = 0.0;
  if ((v1 & 0x200) == 0)
    goto LABEL_126;
LABEL_82:
  v30 = *((double *)this + 10);
  if (v30 == 0.0)
    v30 = 0.0;
  if ((v1 & 0x200000) != 0)
  {
LABEL_85:
    v31 = *((double *)this + 22);
    if (v31 == 0.0)
      v31 = 0.0;
    if ((v1 & 0x400) != 0)
      goto LABEL_88;
LABEL_128:
    v32 = 0.0;
    return *(_QWORD *)&v41 ^ v2 ^ v40 ^ *(_QWORD *)&v39 ^ v38 ^ *(_QWORD *)&v37 ^ v36 ^ *(_QWORD *)&v35 ^ v34 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ *(_QWORD *)&v25 ^ *(_QWORD *)&v26 ^ *(_QWORD *)&v27 ^ *(_QWORD *)&v28 ^ *(_QWORD *)&v29 ^ *(_QWORD *)&v30 ^ *(_QWORD *)&v31 ^ *(_QWORD *)&v32;
  }
LABEL_127:
  v31 = 0.0;
  if ((v1 & 0x400) == 0)
    goto LABEL_128;
LABEL_88:
  v32 = *((double *)this + 11);
  if (v32 == 0.0)
    v32 = 0.0;
  return *(_QWORD *)&v41 ^ v2 ^ v40 ^ *(_QWORD *)&v39 ^ v38 ^ *(_QWORD *)&v37 ^ v36 ^ *(_QWORD *)&v35 ^ v34 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ *(_QWORD *)&v25 ^ *(_QWORD *)&v26 ^ *(_QWORD *)&v27 ^ *(_QWORD *)&v28 ^ *(_QWORD *)&v29 ^ *(_QWORD *)&v30 ^ *(_QWORD *)&v31 ^ *(_QWORD *)&v32;
}

void CMMsl::RunningPower::~RunningPower(CMMsl::RunningPower *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::RunningPower::RunningPower(uint64_t this, const CMMsl::RunningPower *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  int v22;
  char v23;
  char v24;
  int v25;

  *(_QWORD *)this = &off_2513608F8;
  *(_DWORD *)(this + 128) = 0;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x40) != 0)
  {
    v4 = *((_QWORD *)a2 + 7);
    v3 = 64;
    *(_DWORD *)(this + 128) = 64;
    *(_QWORD *)(this + 56) = v4;
    v2 = *((_DWORD *)a2 + 32);
    if ((v2 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 6);
    v3 |= 0x20u;
    *(_DWORD *)(this + 128) = v3;
    *(_QWORD *)(this + 48) = v5;
    v2 = *((_DWORD *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 0x100) != 0)
  {
    v6 = *((_QWORD *)a2 + 9);
    v3 |= 0x100u;
    *(_DWORD *)(this + 128) = v3;
    *(_QWORD *)(this + 72) = v6;
    v2 = *((_DWORD *)a2 + 32);
    if ((v2 & 0x100000) == 0)
    {
LABEL_8:
      if ((v2 & 0x800) == 0)
        goto LABEL_9;
      goto LABEL_29;
    }
  }
  else if ((v2 & 0x100000) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_BYTE *)a2 + 124);
  v3 |= 0x100000u;
  *(_DWORD *)(this + 128) = v3;
  *(_BYTE *)(this + 124) = v7;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x800) == 0)
  {
LABEL_9:
    if ((v2 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_30;
  }
LABEL_29:
  v8 = *((_QWORD *)a2 + 12);
  v3 |= 0x800u;
  *(_DWORD *)(this + 128) = v3;
  *(_QWORD *)(this + 96) = v8;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x400) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_31;
  }
LABEL_30:
  v9 = *((_QWORD *)a2 + 11);
  v3 |= 0x400u;
  *(_DWORD *)(this + 128) = v3;
  *(_QWORD *)(this + 88) = v9;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x2000) == 0)
  {
LABEL_11:
    if ((v2 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_32;
  }
LABEL_31:
  v10 = *((_DWORD *)a2 + 27);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 108) = v10;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x1000) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0)
      goto LABEL_13;
    goto LABEL_33;
  }
LABEL_32:
  v11 = *((_DWORD *)a2 + 26);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 104) = v11;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 8) == 0)
      goto LABEL_14;
    goto LABEL_34;
  }
LABEL_33:
  v12 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_DWORD *)(this + 128) = v3;
  *(_QWORD *)(this + 16) = v12;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 8) == 0)
  {
LABEL_14:
    if ((v2 & 4) == 0)
      goto LABEL_15;
    goto LABEL_35;
  }
LABEL_34:
  v13 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *(_DWORD *)(this + 128) = v3;
  *(_QWORD *)(this + 32) = v13;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 4) == 0)
  {
LABEL_15:
    if ((v2 & 0x80000) == 0)
      goto LABEL_16;
    goto LABEL_36;
  }
LABEL_35:
  v14 = *((_QWORD *)a2 + 3);
  v3 |= 4u;
  *(_DWORD *)(this + 128) = v3;
  *(_QWORD *)(this + 24) = v14;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x80000) == 0)
  {
LABEL_16:
    if ((v2 & 0x10) == 0)
      goto LABEL_17;
    goto LABEL_37;
  }
LABEL_36:
  v15 = *((_BYTE *)a2 + 123);
  v3 |= 0x80000u;
  *(_DWORD *)(this + 128) = v3;
  *(_BYTE *)(this + 123) = v15;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x10) == 0)
  {
LABEL_17:
    if ((v2 & 0x200) == 0)
      goto LABEL_18;
    goto LABEL_38;
  }
LABEL_37:
  v16 = *((_QWORD *)a2 + 5);
  v3 |= 0x10u;
  *(_DWORD *)(this + 128) = v3;
  *(_QWORD *)(this + 40) = v16;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x200) == 0)
  {
LABEL_18:
    if ((v2 & 0x80) == 0)
      goto LABEL_19;
    goto LABEL_39;
  }
LABEL_38:
  v17 = *((_QWORD *)a2 + 10);
  v3 |= 0x200u;
  *(_DWORD *)(this + 128) = v3;
  *(_QWORD *)(this + 80) = v17;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x80) == 0)
  {
LABEL_19:
    if ((v2 & 1) == 0)
      goto LABEL_20;
    goto LABEL_40;
  }
LABEL_39:
  v18 = *((_QWORD *)a2 + 8);
  v3 |= 0x80u;
  *(_DWORD *)(this + 128) = v3;
  *(_QWORD *)(this + 64) = v18;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 1) == 0)
  {
LABEL_20:
    if ((v2 & 0x200000) == 0)
      goto LABEL_21;
    goto LABEL_41;
  }
LABEL_40:
  v19 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_DWORD *)(this + 128) = v3;
  *(_QWORD *)(this + 8) = v19;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x200000) == 0)
  {
LABEL_21:
    if ((v2 & 0x20000) == 0)
      goto LABEL_22;
    goto LABEL_42;
  }
LABEL_41:
  v20 = *((_BYTE *)a2 + 125);
  v3 |= 0x200000u;
  *(_DWORD *)(this + 128) = v3;
  *(_BYTE *)(this + 125) = v20;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x20000) == 0)
  {
LABEL_22:
    if ((v2 & 0x8000) == 0)
      goto LABEL_23;
    goto LABEL_43;
  }
LABEL_42:
  v21 = *((_BYTE *)a2 + 121);
  v3 |= 0x20000u;
  *(_DWORD *)(this + 128) = v3;
  *(_BYTE *)(this + 121) = v21;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x8000) == 0)
  {
LABEL_23:
    if ((v2 & 0x10000) == 0)
      goto LABEL_24;
    goto LABEL_44;
  }
LABEL_43:
  v22 = *((_DWORD *)a2 + 29);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 116) = v22;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x10000) == 0)
  {
LABEL_24:
    if ((v2 & 0x40000) == 0)
      goto LABEL_25;
    goto LABEL_45;
  }
LABEL_44:
  v23 = *((_BYTE *)a2 + 120);
  v3 |= 0x10000u;
  *(_DWORD *)(this + 128) = v3;
  *(_BYTE *)(this + 120) = v23;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x40000) == 0)
  {
LABEL_25:
    if ((v2 & 0x4000) == 0)
      return this;
LABEL_46:
    v25 = *((_DWORD *)a2 + 28);
    *(_DWORD *)(this + 128) = v3 | 0x4000;
    *(_DWORD *)(this + 112) = v25;
    return this;
  }
LABEL_45:
  v24 = *((_BYTE *)a2 + 122);
  v3 |= 0x40000u;
  *(_DWORD *)(this + 128) = v3;
  *(_BYTE *)(this + 122) = v24;
  if ((*((_DWORD *)a2 + 32) & 0x4000) != 0)
    goto LABEL_46;
  return this;
}

CMMsl *CMMsl::RunningPower::operator=(CMMsl *a1, const CMMsl::RunningPower *a2)
{
  CMMsl::RunningPower *v3;
  _BYTE v5[136];

  if (a1 != a2)
  {
    CMMsl::RunningPower::RunningPower((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::RunningPower *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::RunningPower *a2, CMMsl::RunningPower *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double result;
  int v18;
  int v19;

  v3 = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v3;
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v4;
  v5 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v5;
  v6 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v6;
  LOBYTE(v3) = *((_BYTE *)this + 124);
  *((_BYTE *)this + 124) = *((_BYTE *)a2 + 124);
  *((_BYTE *)a2 + 124) = v3;
  v7 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v7;
  v8 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v8;
  v9 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v9;
  v10 = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v10;
  v11 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v11;
  v12 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v12;
  v13 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v13;
  LOBYTE(v10) = *((_BYTE *)this + 123);
  *((_BYTE *)this + 123) = *((_BYTE *)a2 + 123);
  *((_BYTE *)a2 + 123) = v10;
  v14 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v14;
  v15 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v15;
  v16 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v16;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  LOBYTE(v10) = *((_BYTE *)this + 125);
  *((_BYTE *)this + 125) = *((_BYTE *)a2 + 125);
  *((_BYTE *)a2 + 125) = v10;
  LOBYTE(v10) = *((_BYTE *)this + 121);
  *((_BYTE *)this + 121) = *((_BYTE *)a2 + 121);
  *((_BYTE *)a2 + 121) = v10;
  v18 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v18;
  LOBYTE(v18) = *((_BYTE *)this + 120);
  *((_BYTE *)this + 120) = *((_BYTE *)a2 + 120);
  *((_BYTE *)a2 + 120) = v18;
  LOBYTE(v18) = *((_BYTE *)this + 122);
  *((_BYTE *)this + 122) = *((_BYTE *)a2 + 122);
  *((_BYTE *)a2 + 122) = v18;
  v19 = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v19;
  return result;
}

double CMMsl::RunningPower::RunningPower(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_2513608F8;
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 124) = *(_BYTE *)(a2 + 124);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 123) = *(_BYTE *)(a2 + 123);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 125) = *(_BYTE *)(a2 + 125);
  *(_BYTE *)(a1 + 121) = *(_BYTE *)(a2 + 121);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_BYTE *)(a1 + 122) = *(_BYTE *)(a2 + 122);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  return result;
}

CMMsl *CMMsl::RunningPower::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::RunningPower *v3;
  _BYTE v5[136];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::RunningPower::RunningPower((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::RunningPower *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::RunningPower::formatText(CMMsl::RunningPower *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x1000) != 0)
  {
    PB::TextFormatter::format(a2, "activityType");
    v5 = *((_DWORD *)this + 32);
    if ((v5 & 0x2000) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
      goto LABEL_27;
    }
  }
  else if ((v5 & 0x2000) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "activityTypeWithoutOverride");
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0)
      goto LABEL_5;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "currentCadence", *((double *)this + 1));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 0x4000) == 0)
      goto LABEL_6;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "currentPace", *((double *)this + 2));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x4000) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0)
      goto LABEL_7;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "elevationSource");
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "eta", *((double *)this + 3));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x8000) == 0)
      goto LABEL_9;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "grade", *((double *)this + 4));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x8000) == 0)
  {
LABEL_9:
    if ((v5 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "gradeOnsetCounter");
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x10) == 0)
  {
LABEL_10:
    if ((v5 & 0x10000) == 0)
      goto LABEL_11;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "horizSpeed", *((double *)this + 5));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x10000) == 0)
  {
LABEL_11:
    if ((v5 & 0x20000) == 0)
      goto LABEL_12;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "isArmConstrainedStateValid");
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x20000) == 0)
  {
LABEL_12:
    if ((v5 & 0x40000) == 0)
      goto LABEL_13;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "isGradeOnsetEscalated");
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x40000) == 0)
  {
LABEL_13:
    if ((v5 & 0x80000) == 0)
      goto LABEL_14;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "isRunning");
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x80000) == 0)
  {
LABEL_14:
    if ((v5 & 0x100000) == 0)
      goto LABEL_15;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "isValid");
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x100000) == 0)
  {
LABEL_15:
    if ((v5 & 0x200000) == 0)
      goto LABEL_16;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "isWeightSet");
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x200000) == 0)
  {
LABEL_16:
    if ((v5 & 0x20) == 0)
      goto LABEL_17;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "isWorkoutSelected");
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x20) == 0)
  {
LABEL_17:
    if ((v5 & 0x40) == 0)
      goto LABEL_18;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "powerWattage", *((double *)this + 6));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x40) == 0)
  {
LABEL_18:
    if ((v5 & 0x80) == 0)
      goto LABEL_19;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 7));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x80) == 0)
  {
LABEL_19:
    if ((v5 & 0x100) == 0)
      goto LABEL_20;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "userHeight", *((double *)this + 8));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x100) == 0)
  {
LABEL_20:
    if ((v5 & 0x200) == 0)
      goto LABEL_21;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "userWeight", *((double *)this + 9));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x200) == 0)
  {
LABEL_21:
    if ((v5 & 0x400) == 0)
      goto LABEL_22;
LABEL_45:
    PB::TextFormatter::format(a2, "wLoad", *((double *)this + 11));
    if ((*((_DWORD *)this + 32) & 0x800) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_23;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "verticalSpeed", *((double *)this + 10));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x400) != 0)
    goto LABEL_45;
LABEL_22:
  if ((v5 & 0x800) != 0)
LABEL_23:
    PB::TextFormatter::format(a2, "workrateMETs", *((double *)this + 12));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::RunningPower::readFrom(CMMsl::RunningPower *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  char v33;
  int v34;
  BOOL v35;
  int v36;
  BOOL v37;
  int v38;
  BOOL v39;
  unint64_t v40;
  uint64_t v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  char v45;
  int v46;
  BOOL v47;
  int v48;
  BOOL v49;
  unint64_t v50;
  uint64_t v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  char v55;
  char v56;
  unsigned int v57;
  unint64_t v58;
  char v59;
  char v60;
  unsigned int v61;
  unint64_t v62;
  char v63;
  char v64;
  unsigned int v65;
  unint64_t v66;
  char v67;
  char v68;
  unsigned int v69;
  unint64_t v70;
  char v71;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_161;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 32) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_76;
        *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_140;
      case 2u:
        *((_DWORD *)this + 32) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_76;
        *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_140;
      case 3u:
        *((_DWORD *)this + 32) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_76;
        *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_140;
      case 4u:
        *((_DWORD *)this + 32) |= 0x100000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v21 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v21 = v20 != 0;
        }
        *((_BYTE *)this + 124) = v21;
        break;
      case 5u:
        *((_DWORD *)this + 32) |= 0x800u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_76;
        *((_QWORD *)this + 12) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_140;
      case 6u:
        *((_DWORD *)this + 32) |= 0x400u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_76;
        *((_QWORD *)this + 11) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_140;
      case 7u:
        *((_DWORD *)this + 32) |= 0x2000u;
        v22 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v23 = *(_QWORD *)a2;
        if (v22 > 0xFFFFFFFFFFFFFFF5 || v22 + 10 > v2)
        {
          v56 = 0;
          v57 = 0;
          v26 = 0;
          if (v2 <= v22)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v22)
            {
              LODWORD(v26) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_145;
            }
            v58 = v22++;
            v59 = *(_BYTE *)(v23 + v58);
            *((_QWORD *)a2 + 1) = v22;
            v26 |= (unint64_t)(v59 & 0x7F) << v56;
            if ((v59 & 0x80) == 0)
              break;
            v56 += 7;
            v14 = v57++ > 8;
            if (v14)
            {
              LODWORD(v26) = 0;
LABEL_144:
              v2 = v58 + 1;
              goto LABEL_145;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v26) = 0;
          goto LABEL_144;
        }
        v24 = 0;
        v25 = 0;
        v26 = 0;
        do
        {
          v2 = v22 + 1;
          *((_QWORD *)a2 + 1) = v22 + 1;
          v27 = *(_BYTE *)(v23 + v22);
          v26 |= (unint64_t)(v27 & 0x7F) << v24;
          if ((v27 & 0x80) == 0)
            goto LABEL_145;
          v24 += 7;
          v22 = v2;
          v14 = v25++ > 8;
        }
        while (!v14);
        LODWORD(v26) = 0;
LABEL_145:
        *((_DWORD *)this + 27) = v26;
        break;
      case 8u:
        *((_DWORD *)this + 32) |= 0x1000u;
        v28 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v29 = *(_QWORD *)a2;
        if (v28 > 0xFFFFFFFFFFFFFFF5 || v28 + 10 > v2)
        {
          v60 = 0;
          v61 = 0;
          v32 = 0;
          if (v2 <= v28)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v28)
            {
              LODWORD(v32) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_150;
            }
            v62 = v28++;
            v63 = *(_BYTE *)(v29 + v62);
            *((_QWORD *)a2 + 1) = v28;
            v32 |= (unint64_t)(v63 & 0x7F) << v60;
            if ((v63 & 0x80) == 0)
              break;
            v60 += 7;
            v14 = v61++ > 8;
            if (v14)
            {
              LODWORD(v32) = 0;
LABEL_149:
              v2 = v62 + 1;
              goto LABEL_150;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v32) = 0;
          goto LABEL_149;
        }
        v30 = 0;
        v31 = 0;
        v32 = 0;
        do
        {
          v2 = v28 + 1;
          *((_QWORD *)a2 + 1) = v28 + 1;
          v33 = *(_BYTE *)(v29 + v28);
          v32 |= (unint64_t)(v33 & 0x7F) << v30;
          if ((v33 & 0x80) == 0)
            goto LABEL_150;
          v30 += 7;
          v28 = v2;
          v14 = v31++ > 8;
        }
        while (!v14);
        LODWORD(v32) = 0;
LABEL_150:
        *((_DWORD *)this + 26) = v32;
        break;
      case 9u:
        *((_DWORD *)this + 32) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_76;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_140;
      case 0xAu:
        *((_DWORD *)this + 32) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_76;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_140;
      case 0xBu:
        *((_DWORD *)this + 32) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_76;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_140;
      case 0xCu:
        *((_DWORD *)this + 32) |= 0x80000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v35 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v34 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v35 = v34 != 0;
        }
        *((_BYTE *)this + 123) = v35;
        break;
      case 0xDu:
        *((_DWORD *)this + 32) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_76;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_140;
      case 0xEu:
        *((_DWORD *)this + 32) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_76;
        *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_140;
      case 0xFu:
        *((_DWORD *)this + 32) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_76;
        *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_140;
      case 0x10u:
        *((_DWORD *)this + 32) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_140:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_76:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 0x11u:
        *((_DWORD *)this + 32) |= 0x200000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v37 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v36 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v37 = v36 != 0;
        }
        *((_BYTE *)this + 125) = v37;
        break;
      case 0x12u:
        *((_DWORD *)this + 32) |= 0x20000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v39 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v38 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v39 = v38 != 0;
        }
        *((_BYTE *)this + 121) = v39;
        break;
      case 0x13u:
        *((_DWORD *)this + 32) |= 0x8000u;
        v40 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v41 = *(_QWORD *)a2;
        if (v40 > 0xFFFFFFFFFFFFFFF5 || v40 + 10 > v2)
        {
          v64 = 0;
          v65 = 0;
          v44 = 0;
          if (v2 <= v40)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v40)
            {
              LODWORD(v44) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_155;
            }
            v66 = v40++;
            v67 = *(_BYTE *)(v41 + v66);
            *((_QWORD *)a2 + 1) = v40;
            v44 |= (unint64_t)(v67 & 0x7F) << v64;
            if ((v67 & 0x80) == 0)
              break;
            v64 += 7;
            v14 = v65++ > 8;
            if (v14)
            {
              LODWORD(v44) = 0;
LABEL_154:
              v2 = v66 + 1;
              goto LABEL_155;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v44) = 0;
          goto LABEL_154;
        }
        v42 = 0;
        v43 = 0;
        v44 = 0;
        do
        {
          v2 = v40 + 1;
          *((_QWORD *)a2 + 1) = v40 + 1;
          v45 = *(_BYTE *)(v41 + v40);
          v44 |= (unint64_t)(v45 & 0x7F) << v42;
          if ((v45 & 0x80) == 0)
            goto LABEL_155;
          v42 += 7;
          v40 = v2;
          v14 = v43++ > 8;
        }
        while (!v14);
        LODWORD(v44) = 0;
LABEL_155:
        *((_DWORD *)this + 29) = v44;
        break;
      case 0x14u:
        *((_DWORD *)this + 32) |= 0x10000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v47 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v46 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v47 = v46 != 0;
        }
        *((_BYTE *)this + 120) = v47;
        break;
      case 0x15u:
        *((_DWORD *)this + 32) |= 0x40000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v49 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v48 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v49 = v48 != 0;
        }
        *((_BYTE *)this + 122) = v49;
        break;
      case 0x16u:
        *((_DWORD *)this + 32) |= 0x4000u;
        v50 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v51 = *(_QWORD *)a2;
        if (v50 > 0xFFFFFFFFFFFFFFF5 || v50 + 10 > v2)
        {
          v68 = 0;
          v69 = 0;
          v54 = 0;
          if (v2 <= v50)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v50)
            {
              LODWORD(v54) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_160;
            }
            v70 = v50++;
            v71 = *(_BYTE *)(v51 + v70);
            *((_QWORD *)a2 + 1) = v50;
            v54 |= (unint64_t)(v71 & 0x7F) << v68;
            if ((v71 & 0x80) == 0)
              break;
            v68 += 7;
            v14 = v69++ > 8;
            if (v14)
            {
              LODWORD(v54) = 0;
LABEL_159:
              v2 = v70 + 1;
              goto LABEL_160;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v54) = 0;
          goto LABEL_159;
        }
        v52 = 0;
        v53 = 0;
        v54 = 0;
        do
        {
          v2 = v50 + 1;
          *((_QWORD *)a2 + 1) = v50 + 1;
          v55 = *(_BYTE *)(v51 + v50);
          v54 |= (unint64_t)(v55 & 0x7F) << v52;
          if ((v55 & 0x80) == 0)
            goto LABEL_160;
          v52 += 7;
          v50 = v2;
          v14 = v53++ > 8;
        }
        while (!v14);
        LODWORD(v54) = 0;
LABEL_160:
        *((_DWORD *)this + 28) = v54;
        break;
      default:
        goto LABEL_19;
    }
LABEL_161:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::RunningPower::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 128);
  if ((v4 & 0x40) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 56));
    v4 = *(_DWORD *)(v3 + 128);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x100) == 0)
        goto LABEL_4;
      goto LABEL_26;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x100) == 0)
  {
LABEL_4:
    if ((v4 & 0x100000) == 0)
      goto LABEL_5;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(double *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x100000) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0)
      goto LABEL_6;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x400) == 0)
      goto LABEL_7;
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(double *)(v3 + 96));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x400) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0)
      goto LABEL_8;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(double *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0)
      goto LABEL_9;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0)
      goto LABEL_10;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 8) == 0)
      goto LABEL_11;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 8) == 0)
  {
LABEL_11:
    if ((v4 & 4) == 0)
      goto LABEL_12;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 4) == 0)
  {
LABEL_12:
    if ((v4 & 0x80000) == 0)
      goto LABEL_13;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80000) == 0)
  {
LABEL_13:
    if ((v4 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10) == 0)
  {
LABEL_14:
    if ((v4 & 0x200) == 0)
      goto LABEL_15;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x200) == 0)
  {
LABEL_15:
    if ((v4 & 0x80) == 0)
      goto LABEL_16;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(double *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80) == 0)
  {
LABEL_16:
    if ((v4 & 1) == 0)
      goto LABEL_17;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 1) == 0)
  {
LABEL_17:
    if ((v4 & 0x200000) == 0)
      goto LABEL_18;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x200000) == 0)
  {
LABEL_18:
    if ((v4 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x20000) == 0)
  {
LABEL_19:
    if ((v4 & 0x8000) == 0)
      goto LABEL_20;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x8000) == 0)
  {
LABEL_20:
    if ((v4 & 0x10000) == 0)
      goto LABEL_21;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10000) == 0)
  {
LABEL_21:
    if ((v4 & 0x40000) == 0)
      goto LABEL_22;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x40000) == 0)
  {
LABEL_22:
    if ((v4 & 0x4000) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_44:
  this = PB::Writer::write(a2);
  if ((*(_DWORD *)(v3 + 128) & 0x4000) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::RunningPower::hash_value(CMMsl::RunningPower *this)
{
  int v1;
  double v2;
  double v3;
  double v4;
  uint64_t v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *((_DWORD *)this + 32);
  if ((v1 & 0x40) == 0)
  {
    v2 = 0.0;
    if ((v1 & 0x20) != 0)
      goto LABEL_3;
LABEL_49:
    v3 = 0.0;
    if ((v1 & 0x100) != 0)
      goto LABEL_6;
LABEL_50:
    v4 = 0.0;
    if ((v1 & 0x100000) != 0)
      goto LABEL_9;
    goto LABEL_51;
  }
  v2 = *((double *)this + 7);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 0x20) == 0)
    goto LABEL_49;
LABEL_3:
  v3 = *((double *)this + 6);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 0x100) == 0)
    goto LABEL_50;
LABEL_6:
  v4 = *((double *)this + 9);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 0x100000) != 0)
  {
LABEL_9:
    v5 = *((unsigned __int8 *)this + 124);
    if ((v1 & 0x800) != 0)
      goto LABEL_10;
LABEL_52:
    v6 = 0.0;
    if ((v1 & 0x400) != 0)
      goto LABEL_13;
LABEL_53:
    v7 = 0.0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_16;
    goto LABEL_54;
  }
LABEL_51:
  v5 = 0;
  if ((v1 & 0x800) == 0)
    goto LABEL_52;
LABEL_10:
  v6 = *((double *)this + 12);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((v1 & 0x400) == 0)
    goto LABEL_53;
LABEL_13:
  v7 = *((double *)this + 11);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((v1 & 0x2000) != 0)
  {
LABEL_16:
    v8 = *((int *)this + 27);
    if ((v1 & 0x1000) != 0)
      goto LABEL_17;
    goto LABEL_55;
  }
LABEL_54:
  v8 = 0;
  if ((v1 & 0x1000) != 0)
  {
LABEL_17:
    v9 = *((int *)this + 26);
    if ((v1 & 2) != 0)
      goto LABEL_18;
LABEL_56:
    v10 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_21;
LABEL_57:
    v11 = 0.0;
    if ((v1 & 4) != 0)
      goto LABEL_24;
LABEL_58:
    v12 = 0.0;
    if ((v1 & 0x80000) != 0)
      goto LABEL_27;
    goto LABEL_59;
  }
LABEL_55:
  v9 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_56;
LABEL_18:
  v10 = *((double *)this + 2);
  if (v10 == 0.0)
    v10 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_57;
LABEL_21:
  v11 = *((double *)this + 4);
  if (v11 == 0.0)
    v11 = 0.0;
  if ((v1 & 4) == 0)
    goto LABEL_58;
LABEL_24:
  v12 = *((double *)this + 3);
  if (v12 == 0.0)
    v12 = 0.0;
  if ((v1 & 0x80000) != 0)
  {
LABEL_27:
    v13 = *((unsigned __int8 *)this + 123);
    if ((v1 & 0x10) != 0)
      goto LABEL_28;
LABEL_60:
    v14 = 0.0;
    if ((v1 & 0x200) != 0)
      goto LABEL_31;
LABEL_61:
    v15 = 0.0;
    if ((v1 & 0x80) != 0)
      goto LABEL_34;
LABEL_62:
    v16 = 0.0;
    if ((v1 & 1) != 0)
      goto LABEL_37;
LABEL_63:
    v17 = 0.0;
    if ((v1 & 0x200000) != 0)
      goto LABEL_40;
    goto LABEL_64;
  }
LABEL_59:
  v13 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_60;
LABEL_28:
  v14 = *((double *)this + 5);
  if (v14 == 0.0)
    v14 = 0.0;
  if ((v1 & 0x200) == 0)
    goto LABEL_61;
LABEL_31:
  v15 = *((double *)this + 10);
  if (v15 == 0.0)
    v15 = 0.0;
  if ((v1 & 0x80) == 0)
    goto LABEL_62;
LABEL_34:
  v16 = *((double *)this + 8);
  if (v16 == 0.0)
    v16 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_63;
LABEL_37:
  v17 = *((double *)this + 1);
  if (v17 == 0.0)
    v17 = 0.0;
  if ((v1 & 0x200000) != 0)
  {
LABEL_40:
    v18 = *((unsigned __int8 *)this + 125);
    if ((v1 & 0x20000) != 0)
      goto LABEL_41;
    goto LABEL_65;
  }
LABEL_64:
  v18 = 0;
  if ((v1 & 0x20000) != 0)
  {
LABEL_41:
    v19 = *((unsigned __int8 *)this + 121);
    if ((v1 & 0x8000) != 0)
      goto LABEL_42;
    goto LABEL_66;
  }
LABEL_65:
  v19 = 0;
  if ((v1 & 0x8000) != 0)
  {
LABEL_42:
    v20 = *((int *)this + 29);
    if ((v1 & 0x10000) != 0)
      goto LABEL_43;
    goto LABEL_67;
  }
LABEL_66:
  v20 = 0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_43:
    v21 = *((unsigned __int8 *)this + 120);
    if ((v1 & 0x40000) != 0)
      goto LABEL_44;
LABEL_68:
    v22 = 0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_45;
LABEL_69:
    v23 = 0;
    return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ v8 ^ v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12 ^ v13 ^ *(_QWORD *)&v14 ^ *(_QWORD *)&v15 ^ *(_QWORD *)&v16 ^ *(_QWORD *)&v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23;
  }
LABEL_67:
  v21 = 0;
  if ((v1 & 0x40000) == 0)
    goto LABEL_68;
LABEL_44:
  v22 = *((unsigned __int8 *)this + 122);
  if ((v1 & 0x4000) == 0)
    goto LABEL_69;
LABEL_45:
  v23 = *((int *)this + 28);
  return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ v8 ^ v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12 ^ v13 ^ *(_QWORD *)&v14 ^ *(_QWORD *)&v15 ^ *(_QWORD *)&v16 ^ *(_QWORD *)&v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23;
}

void CMMsl::RunningRotationAxis::~RunningRotationAxis(CMMsl::RunningRotationAxis *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::RunningRotationAxis::RunningRotationAxis(CMMsl::RunningRotationAxis *this, const CMMsl::RunningRotationAxis *a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)this = &off_251360930;
  *((_DWORD *)this + 12) = 0;
  v2 = *((_BYTE *)a2 + 48);
  if ((v2 & 8) != 0)
  {
    result = *((double *)a2 + 4);
    v3 = 8;
    *((_BYTE *)this + 48) = 8;
    *((double *)this + 4) = result;
    v2 = *((_BYTE *)a2 + 48);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 48) & 0x10) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 5);
    v3 |= 0x10u;
    *((_BYTE *)this + 48) = v3;
    *((double *)this + 5) = result;
    v2 = *((_BYTE *)a2 + 48);
  }
LABEL_6:
  if ((v2 & 1) != 0)
  {
    result = *((double *)a2 + 1);
    v3 |= 1u;
    *((_BYTE *)this + 48) = v3;
    *((double *)this + 1) = result;
    v2 = *((_BYTE *)a2 + 48);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0)
        return result;
LABEL_12:
      result = *((double *)a2 + 3);
      *((_BYTE *)this + 48) = v3 | 4;
      *((double *)this + 3) = result;
      return result;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  result = *((double *)a2 + 2);
  v3 |= 2u;
  *((_BYTE *)this + 48) = v3;
  *((double *)this + 2) = result;
  if ((*((_BYTE *)a2 + 48) & 4) != 0)
    goto LABEL_12;
  return result;
}

uint64_t CMMsl::RunningRotationAxis::operator=(uint64_t a1, const CMMsl::RunningRotationAxis *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  _BYTE v8[8];
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  int v12;

  if ((const CMMsl::RunningRotationAxis *)a1 != a2)
  {
    CMMsl::RunningRotationAxis::RunningRotationAxis((CMMsl::RunningRotationAxis *)v8, a2);
    v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v12;
    v12 = v3;
    v4 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v11;
    v11 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    v9 = v5;
    v10 = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::RunningRotationAxis *a2, CMMsl::RunningRotationAxis *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  v5 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v5;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v7;
  result = *((double *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((double *)a2 + 3) = result;
  return result;
}

double CMMsl::RunningRotationAxis::RunningRotationAxis(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_251360930;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_251360930;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  return result;
}

uint64_t CMMsl::RunningRotationAxis::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  void (**v10)(CMMsl::RunningRotationAxis *__hidden);
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;

  if (a1 != a2)
  {
    v10 = &off_251360930;
    v3 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a2 + 48) = 0;
    v4 = *(_QWORD *)(a2 + 40);
    v14 = *(_DWORD *)(a1 + 48);
    v13 = *(_QWORD *)(a1 + 40);
    v5 = *(_OWORD *)(a1 + 8);
    v6 = *(_OWORD *)(a2 + 8);
    v7 = *(_OWORD *)(a1 + 24);
    v8 = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 48) = v3;
    *(_QWORD *)(a1 + 40) = v4;
    *(_OWORD *)(a1 + 8) = v6;
    *(_OWORD *)(a1 + 24) = v8;
    v11 = v5;
    v12 = v7;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

uint64_t CMMsl::RunningRotationAxis::formatText(CMMsl::RunningRotationAxis *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 48);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "primaryAxisX", *((double *)this + 1));
    v5 = *((_BYTE *)this + 48);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*((_BYTE *)this + 48) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "primaryAxisY", *((double *)this + 2));
  v5 = *((_BYTE *)this + 48);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(a2, "startTime", *((double *)this + 4));
    if ((*((_BYTE *)this + 48) & 0x10) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(a2, "primaryAxisZ", *((double *)this + 3));
  v5 = *((_BYTE *)this + 48);
  if ((v5 & 8) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 0x10) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 5));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::RunningRotationAxis::readFrom(CMMsl::RunningRotationAxis *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_40;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 48) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_37;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_39;
      case 2u:
        *((_BYTE *)this + 48) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_37;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_39;
      case 3u:
        *((_BYTE *)this + 48) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_37;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_39;
      case 4u:
        *((_BYTE *)this + 48) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_37;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_39;
      case 5u:
        *((_BYTE *)this + 48) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_39:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_37:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_40:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::RunningRotationAxis::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 48);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32));
    v4 = *(_BYTE *)(v3 + 48);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(this + 48) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 24));
  }
LABEL_10:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  if ((*(_BYTE *)(v3 + 48) & 4) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 24));
  return this;
}

uint64_t CMMsl::RunningRotationAxis::hash_value(CMMsl::RunningRotationAxis *this)
{
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;

  if ((*((_BYTE *)this + 48) & 8) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 48) & 0x10) != 0)
      goto LABEL_3;
LABEL_18:
    v2 = 0.0;
    if ((*((_BYTE *)this + 48) & 1) != 0)
      goto LABEL_6;
LABEL_19:
    v3 = 0.0;
    if ((*((_BYTE *)this + 48) & 2) != 0)
      goto LABEL_9;
    goto LABEL_20;
  }
  v1 = *((double *)this + 4);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 48) & 0x10) == 0)
    goto LABEL_18;
LABEL_3:
  v2 = *((double *)this + 5);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 48) & 1) == 0)
    goto LABEL_19;
LABEL_6:
  v3 = *((double *)this + 1);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((*((_BYTE *)this + 48) & 2) != 0)
  {
LABEL_9:
    v4 = *((double *)this + 2);
    if (v4 == 0.0)
      v4 = 0.0;
    if ((*((_BYTE *)this + 48) & 4) != 0)
      goto LABEL_12;
LABEL_21:
    v5 = 0.0;
    return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5;
  }
LABEL_20:
  v4 = 0.0;
  if ((*((_BYTE *)this + 48) & 4) == 0)
    goto LABEL_21;
LABEL_12:
  v5 = *((double *)this + 3);
  if (v5 == 0.0)
    v5 = 0.0;
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5;
}

void CMMsl::RunningSpeedKFResult::~RunningSpeedKFResult(CMMsl::RunningSpeedKFResult *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::RunningSpeedKFResult::RunningSpeedKFResult(uint64_t this, const CMMsl::RunningSpeedKFResult *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  *(_QWORD *)this = &off_251360968;
  *(_DWORD *)(this + 188) = 0;
  v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x80000) != 0)
  {
    v4 = *((_QWORD *)a2 + 20);
    v3 = 0x80000;
    *(_DWORD *)(this + 188) = 0x80000;
    *(_QWORD *)(this + 160) = v4;
    v2 = *((_DWORD *)a2 + 47);
    if ((v2 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 8);
    v3 |= 0x80u;
    *(_DWORD *)(this + 188) = v3;
    *(_QWORD *)(this + 64) = v5;
    v2 = *((_DWORD *)a2 + 47);
  }
LABEL_6:
  if ((v2 & 0x40000) != 0)
  {
    v6 = *((_QWORD *)a2 + 19);
    v3 |= 0x40000u;
    *(_DWORD *)(this + 188) = v3;
    *(_QWORD *)(this + 152) = v6;
    v2 = *((_DWORD *)a2 + 47);
    if ((v2 & 0x8000000) == 0)
    {
LABEL_8:
      if ((v2 & 0x20000) == 0)
        goto LABEL_9;
      goto LABEL_35;
    }
  }
  else if ((v2 & 0x8000000) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_BYTE *)a2 + 184);
  v3 |= 0x8000000u;
  *(_DWORD *)(this + 188) = v3;
  *(_BYTE *)(this + 184) = v7;
  v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x20000) == 0)
  {
LABEL_9:
    if ((v2 & 0x10000) == 0)
      goto LABEL_10;
    goto LABEL_36;
  }
LABEL_35:
  v8 = *((_QWORD *)a2 + 18);
  v3 |= 0x20000u;
  *(_DWORD *)(this + 188) = v3;
  *(_QWORD *)(this + 144) = v8;
  v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x10000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_11;
    goto LABEL_37;
  }
LABEL_36:
  v9 = *((_QWORD *)a2 + 17);
  v3 |= 0x10000u;
  *(_DWORD *)(this + 188) = v3;
  *(_QWORD *)(this + 136) = v9;
  v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_11:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_12;
    goto LABEL_38;
  }
LABEL_37:
  v10 = *((_BYTE *)a2 + 182);
  v3 |= 0x2000000u;
  *(_DWORD *)(this + 188) = v3;
  *(_BYTE *)(this + 182) = v10;
  v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_12:
    if ((v2 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_39;
  }
LABEL_38:
  v11 = *((_BYTE *)a2 + 183);
  v3 |= 0x4000000u;
  *(_DWORD *)(this + 188) = v3;
  *(_BYTE *)(this + 183) = v11;
  v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x40) == 0)
  {
LABEL_13:
    if ((v2 & 8) == 0)
      goto LABEL_14;
    goto LABEL_40;
  }
LABEL_39:
  v12 = *((_QWORD *)a2 + 7);
  v3 |= 0x40u;
  *(_DWORD *)(this + 188) = v3;
  *(_QWORD *)(this + 56) = v12;
  v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 8) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_41;
  }
LABEL_40:
  v13 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *(_DWORD *)(this + 188) = v3;
  *(_QWORD *)(this + 32) = v13;
  v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 0x10) == 0)
      goto LABEL_16;
    goto LABEL_42;
  }
LABEL_41:
  v14 = *((_QWORD *)a2 + 6);
  v3 |= 0x20u;
  *(_DWORD *)(this + 188) = v3;
  *(_QWORD *)(this + 48) = v14;
  v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x10) == 0)
  {
LABEL_16:
    if ((v2 & 1) == 0)
      goto LABEL_17;
    goto LABEL_43;
  }
LABEL_42:
  v15 = *((_QWORD *)a2 + 5);
  v3 |= 0x10u;
  *(_DWORD *)(this + 188) = v3;
  *(_QWORD *)(this + 40) = v15;
  v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 1) == 0)
  {
LABEL_17:
    if ((v2 & 2) == 0)
      goto LABEL_18;
    goto LABEL_44;
  }
LABEL_43:
  v16 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_DWORD *)(this + 188) = v3;
  *(_QWORD *)(this + 8) = v16;
  v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 2) == 0)
  {
LABEL_18:
    if ((v2 & 0x8000) == 0)
      goto LABEL_19;
    goto LABEL_45;
  }
LABEL_44:
  v17 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_DWORD *)(this + 188) = v3;
  *(_QWORD *)(this + 16) = v17;
  v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x8000) == 0)
  {
LABEL_19:
    if ((v2 & 0x4000) == 0)
      goto LABEL_20;
    goto LABEL_46;
  }
LABEL_45:
  v18 = *((_QWORD *)a2 + 16);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 188) = v3;
  *(_QWORD *)(this + 128) = v18;
  v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x4000) == 0)
  {
LABEL_20:
    if ((v2 & 0x100) == 0)
      goto LABEL_21;
    goto LABEL_47;
  }
LABEL_46:
  v19 = *((_QWORD *)a2 + 15);
  v3 |= 0x4000u;
  *(_DWORD *)(this + 188) = v3;
  *(_QWORD *)(this + 120) = v19;
  v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x100) == 0)
  {
LABEL_21:
    if ((v2 & 0x200) == 0)
      goto LABEL_22;
    goto LABEL_48;
  }
LABEL_47:
  v20 = *((_QWORD *)a2 + 9);
  v3 |= 0x100u;
  *(_DWORD *)(this + 188) = v3;
  *(_QWORD *)(this + 72) = v20;
  v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x200) == 0)
  {
LABEL_22:
    if ((v2 & 4) == 0)
      goto LABEL_23;
    goto LABEL_49;
  }
LABEL_48:
  v21 = *((_QWORD *)a2 + 10);
  v3 |= 0x200u;
  *(_DWORD *)(this + 188) = v3;
  *(_QWORD *)(this + 80) = v21;
  v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 4) == 0)
  {
LABEL_23:
    if ((v2 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_50;
  }
LABEL_49:
  v22 = *((_QWORD *)a2 + 3);
  v3 |= 4u;
  *(_DWORD *)(this + 188) = v3;
  *(_QWORD *)(this + 24) = v22;
  v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x400000) == 0)
  {
LABEL_24:
    if ((v2 & 0x100000) == 0)
      goto LABEL_25;
    goto LABEL_51;
  }
LABEL_50:
  v23 = *((_DWORD *)a2 + 44);
  v3 |= 0x400000u;
  *(_DWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 176) = v23;
  v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x100000) == 0)
  {
LABEL_25:
    if ((v2 & 0x200000) == 0)
      goto LABEL_26;
    goto LABEL_52;
  }
LABEL_51:
  v24 = *((_DWORD *)a2 + 42);
  v3 |= 0x100000u;
  *(_DWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 168) = v24;
  v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x200000) == 0)
  {
LABEL_26:
    if ((v2 & 0x800000) == 0)
      goto LABEL_27;
    goto LABEL_53;
  }
LABEL_52:
  v25 = *((_DWORD *)a2 + 43);
  v3 |= 0x200000u;
  *(_DWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 172) = v25;
  v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x800000) == 0)
  {
LABEL_27:
    if ((v2 & 0x1000) == 0)
      goto LABEL_28;
    goto LABEL_54;
  }
LABEL_53:
  v26 = *((_BYTE *)a2 + 180);
  v3 |= 0x800000u;
  *(_DWORD *)(this + 188) = v3;
  *(_BYTE *)(this + 180) = v26;
  v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x1000) == 0)
  {
LABEL_28:
    if ((v2 & 0x2000) == 0)
      goto LABEL_29;
    goto LABEL_55;
  }
LABEL_54:
  v27 = *((_QWORD *)a2 + 13);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 188) = v3;
  *(_QWORD *)(this + 104) = v27;
  v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x2000) == 0)
  {
LABEL_29:
    if ((v2 & 0x400) == 0)
      goto LABEL_30;
    goto LABEL_56;
  }
LABEL_55:
  v28 = *((_QWORD *)a2 + 14);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 188) = v3;
  *(_QWORD *)(this + 112) = v28;
  v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x400) == 0)
  {
LABEL_30:
    if ((v2 & 0x800) == 0)
      goto LABEL_31;
    goto LABEL_57;
  }
LABEL_56:
  v29 = *((_QWORD *)a2 + 11);
  v3 |= 0x400u;
  *(_DWORD *)(this + 188) = v3;
  *(_QWORD *)(this + 88) = v29;
  v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x800) == 0)
  {
LABEL_31:
    if ((v2 & 0x1000000) == 0)
      return this;
LABEL_58:
    v31 = *((_BYTE *)a2 + 181);
    *(_DWORD *)(this + 188) = v3 | 0x1000000;
    *(_BYTE *)(this + 181) = v31;
    return this;
  }
LABEL_57:
  v30 = *((_QWORD *)a2 + 12);
  v3 |= 0x800u;
  *(_DWORD *)(this + 188) = v3;
  *(_QWORD *)(this + 96) = v30;
  if ((*((_DWORD *)a2 + 47) & 0x1000000) != 0)
    goto LABEL_58;
  return this;
}

CMMsl *CMMsl::RunningSpeedKFResult::operator=(CMMsl *a1, const CMMsl::RunningSpeedKFResult *a2)
{
  CMMsl::RunningSpeedKFResult *v3;
  _BYTE v5[192];

  if (a1 != a2)
  {
    CMMsl::RunningSpeedKFResult::RunningSpeedKFResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::RunningSpeedKFResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::RunningSpeedKFResult *a2, CMMsl::RunningSpeedKFResult *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double result;

  v3 = *((_DWORD *)this + 47);
  *((_DWORD *)this + 47) = *((_DWORD *)a2 + 47);
  *((_DWORD *)a2 + 47) = v3;
  v4 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = *((_QWORD *)a2 + 20);
  *((_QWORD *)a2 + 20) = v4;
  v5 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v5;
  v6 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 19) = v6;
  LOBYTE(v3) = *((_BYTE *)this + 184);
  *((_BYTE *)this + 184) = *((_BYTE *)a2 + 184);
  *((_BYTE *)a2 + 184) = v3;
  v7 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v7;
  v8 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v8;
  LOBYTE(v3) = *((_BYTE *)this + 182);
  *((_BYTE *)this + 182) = *((_BYTE *)a2 + 182);
  *((_BYTE *)a2 + 182) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 183);
  *((_BYTE *)this + 183) = *((_BYTE *)a2 + 183);
  *((_BYTE *)a2 + 183) = v3;
  v9 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v9;
  v10 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v10;
  v11 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v11;
  v12 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v12;
  v13 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v13;
  v14 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v14;
  v15 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v15;
  v16 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v16;
  v17 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v17;
  v18 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v18;
  v19 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v19;
  v20 = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v20;
  v21 = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v21;
  v22 = *((_DWORD *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((_DWORD *)a2 + 43) = v22;
  LOBYTE(v22) = *((_BYTE *)this + 180);
  *((_BYTE *)this + 180) = *((_BYTE *)a2 + 180);
  *((_BYTE *)a2 + 180) = v22;
  v23 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v23;
  v24 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v24;
  v25 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v25;
  result = *((double *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((double *)a2 + 12) = result;
  LOBYTE(v22) = *((_BYTE *)this + 181);
  *((_BYTE *)this + 181) = *((_BYTE *)a2 + 181);
  *((_BYTE *)a2 + 181) = v22;
  return result;
}

double CMMsl::RunningSpeedKFResult::RunningSpeedKFResult(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_251360968;
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(_DWORD *)(a2 + 188) = 0;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 182) = *(_BYTE *)(a2 + 182);
  *(_BYTE *)(a1 + 183) = *(_BYTE *)(a2 + 183);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_BYTE *)(a1 + 180) = *(_BYTE *)(a2 + 180);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  result = *(double *)(a2 + 96);
  *(double *)(a1 + 96) = result;
  *(_BYTE *)(a1 + 181) = *(_BYTE *)(a2 + 181);
  return result;
}

CMMsl *CMMsl::RunningSpeedKFResult::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::RunningSpeedKFResult *v3;
  _BYTE v5[192];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::RunningSpeedKFResult::RunningSpeedKFResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::RunningSpeedKFResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::RunningSpeedKFResult::formatText(CMMsl::RunningSpeedKFResult *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 47);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "algDelay", *((double *)this + 1));
    v5 = *((_DWORD *)this + 47);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_33;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "biasFactor", *((double *)this + 2));
  v5 = *((_DWORD *)this + 47);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "deltaCalibratedPedometerDistance", *((double *)this + 3));
  v5 = *((_DWORD *)this + 47);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "deltaOdometerDistance", *((double *)this + 4));
  v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "deltaOdometerTime", *((double *)this + 5));
  v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "deltaPedometerTime", *((double *)this + 6));
  v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "deltaRawPedometerDistance", *((double *)this + 7));
  v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100000) == 0)
      goto LABEL_10;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "endTime", *((double *)this + 8));
  v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x100000) == 0)
  {
LABEL_10:
    if ((v5 & 0x200000) == 0)
      goto LABEL_11;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "gestureState");
  v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x200000) == 0)
  {
LABEL_11:
    if ((v5 & 0x800000) == 0)
      goto LABEL_12;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "gestureType");
  v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x800000) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_13;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "interruptFlag");
  v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_14;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "isTrackRunOdometer");
  v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_15;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "isValidOdometerSpeed");
  v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_16;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "isValidPedometerSpeed");
  v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x100) == 0)
      goto LABEL_17;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "isValidRunningSpeed");
  v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x100) == 0)
  {
LABEL_17:
    if ((v5 & 0x200) == 0)
      goto LABEL_18;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "kalmanEpsOdometer", *((double *)this + 9));
  v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x200) == 0)
  {
LABEL_18:
    if ((v5 & 0x400) == 0)
      goto LABEL_19;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "kalmanEpsPedometer", *((double *)this + 10));
  v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x400) == 0)
  {
LABEL_19:
    if ((v5 & 0x800) == 0)
      goto LABEL_20;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "kalmanGainOdometer", *((double *)this + 11));
  v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x800) == 0)
  {
LABEL_20:
    if ((v5 & 0x1000) == 0)
      goto LABEL_21;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "kalmanGainPedometer", *((double *)this + 12));
  v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x1000) == 0)
  {
LABEL_21:
    if ((v5 & 0x2000) == 0)
      goto LABEL_22;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "kalmanMeasurementNoiseOdometer", *((double *)this + 13));
  v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x2000) == 0)
  {
LABEL_22:
    if ((v5 & 0x4000) == 0)
      goto LABEL_23;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "kalmanMeasurementNoisePedometer", *((double *)this + 14));
  v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x4000) == 0)
  {
LABEL_23:
    if ((v5 & 0x8000) == 0)
      goto LABEL_24;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "kalmanProcessNoise", *((double *)this + 15));
  v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x8000) == 0)
  {
LABEL_24:
    if ((v5 & 0x400000) == 0)
      goto LABEL_25;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "kalmanStateCovariance", *((double *)this + 16));
  v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x400000) == 0)
  {
LABEL_25:
    if ((v5 & 0x10000) == 0)
      goto LABEL_26;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "odometerQuality");
  v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x10000) == 0)
  {
LABEL_26:
    if ((v5 & 0x20000) == 0)
      goto LABEL_27;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "odometerSpeed", *((double *)this + 17));
  v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x20000) == 0)
  {
LABEL_27:
    if ((v5 & 0x40000) == 0)
      goto LABEL_28;
LABEL_57:
    PB::TextFormatter::format(a2, "runningSpeed", *((double *)this + 19));
    if ((*((_DWORD *)this + 47) & 0x80000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_29;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "pedometerSpeed", *((double *)this + 18));
  v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x40000) != 0)
    goto LABEL_57;
LABEL_28:
  if ((v5 & 0x80000) != 0)
LABEL_29:
    PB::TextFormatter::format(a2, "startTime", *((double *)this + 20));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::RunningSpeedKFResult::readFrom(CMMsl::RunningSpeedKFResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v20;
  BOOL v21;
  int v22;
  BOOL v23;
  int v24;
  BOOL v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  char v43;
  int v44;
  BOOL v45;
  int v46;
  BOOL v47;
  char v48;
  unsigned int v49;
  unint64_t v50;
  char v51;
  char v52;
  unsigned int v53;
  unint64_t v54;
  char v55;
  char v56;
  unsigned int v57;
  unint64_t v58;
  char v59;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_147;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 47) |= 0x80000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_111;
        *((_QWORD *)this + 20) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_146;
      case 2u:
        *((_DWORD *)this + 47) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_111;
        *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_146;
      case 3u:
        *((_DWORD *)this + 47) |= 0x40000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_111;
        *((_QWORD *)this + 19) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_146;
      case 4u:
        *((_DWORD *)this + 47) |= 0x8000000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v21 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v21 = v20 != 0;
        }
        *((_BYTE *)this + 184) = v21;
        break;
      case 5u:
        *((_DWORD *)this + 47) |= 0x20000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_111;
        *((_QWORD *)this + 18) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_146;
      case 6u:
        *((_DWORD *)this + 47) |= 0x10000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_111;
        *((_QWORD *)this + 17) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_146;
      case 7u:
        *((_DWORD *)this + 47) |= 0x2000000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v23 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v22 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v23 = v22 != 0;
        }
        *((_BYTE *)this + 182) = v23;
        break;
      case 8u:
        *((_DWORD *)this + 47) |= 0x4000000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v25 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v24 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v25 = v24 != 0;
        }
        *((_BYTE *)this + 183) = v25;
        break;
      case 9u:
        *((_DWORD *)this + 47) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_111;
        *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_146;
      case 0xAu:
        *((_DWORD *)this + 47) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_111;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_146;
      case 0xBu:
        *((_DWORD *)this + 47) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_111;
        *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_146;
      case 0xCu:
        *((_DWORD *)this + 47) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_111;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_146;
      case 0xDu:
        *((_DWORD *)this + 47) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_111;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_146;
      case 0xEu:
        *((_DWORD *)this + 47) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_111;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_146;
      case 0xFu:
        *((_DWORD *)this + 47) |= 0x8000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_111;
        *((_QWORD *)this + 16) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_146;
      case 0x10u:
        *((_DWORD *)this + 47) |= 0x4000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_111;
        *((_QWORD *)this + 15) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_146;
      case 0x11u:
        *((_DWORD *)this + 47) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_111;
        *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_146;
      case 0x12u:
        *((_DWORD *)this + 47) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_111;
        *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_146;
      case 0x13u:
        *((_DWORD *)this + 47) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_111;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_146;
      case 0x14u:
        *((_DWORD *)this + 47) |= 0x400000u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v48 = 0;
          v49 = 0;
          v30 = 0;
          if (v2 <= v26)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_156;
            }
            v50 = v26++;
            v51 = *(_BYTE *)(v27 + v50);
            *((_QWORD *)a2 + 1) = v26;
            v30 |= (unint64_t)(v51 & 0x7F) << v48;
            if ((v51 & 0x80) == 0)
              break;
            v48 += 7;
            v14 = v49++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_155:
              v2 = v50 + 1;
              goto LABEL_156;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v30) = 0;
          goto LABEL_155;
        }
        v28 = 0;
        v29 = 0;
        v30 = 0;
        do
        {
          v2 = v26 + 1;
          *((_QWORD *)a2 + 1) = v26 + 1;
          v31 = *(_BYTE *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0)
            goto LABEL_156;
          v28 += 7;
          v26 = v2;
          v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_156:
        *((_DWORD *)this + 44) = v30;
        break;
      case 0x15u:
        *((_DWORD *)this + 47) |= 0x100000u;
        v32 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v33 = *(_QWORD *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
        {
          v52 = 0;
          v53 = 0;
          v36 = 0;
          if (v2 <= v32)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v32)
            {
              LODWORD(v36) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_161;
            }
            v54 = v32++;
            v55 = *(_BYTE *)(v33 + v54);
            *((_QWORD *)a2 + 1) = v32;
            v36 |= (unint64_t)(v55 & 0x7F) << v52;
            if ((v55 & 0x80) == 0)
              break;
            v52 += 7;
            v14 = v53++ > 8;
            if (v14)
            {
              LODWORD(v36) = 0;
LABEL_160:
              v2 = v54 + 1;
              goto LABEL_161;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v36) = 0;
          goto LABEL_160;
        }
        v34 = 0;
        v35 = 0;
        v36 = 0;
        do
        {
          v2 = v32 + 1;
          *((_QWORD *)a2 + 1) = v32 + 1;
          v37 = *(_BYTE *)(v33 + v32);
          v36 |= (unint64_t)(v37 & 0x7F) << v34;
          if ((v37 & 0x80) == 0)
            goto LABEL_161;
          v34 += 7;
          v32 = v2;
          v14 = v35++ > 8;
        }
        while (!v14);
        LODWORD(v36) = 0;
LABEL_161:
        *((_DWORD *)this + 42) = v36;
        break;
      case 0x16u:
        *((_DWORD *)this + 47) |= 0x200000u;
        v38 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v39 = *(_QWORD *)a2;
        if (v38 > 0xFFFFFFFFFFFFFFF5 || v38 + 10 > v2)
        {
          v56 = 0;
          v57 = 0;
          v42 = 0;
          if (v2 <= v38)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v38)
            {
              LODWORD(v42) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_166;
            }
            v58 = v38++;
            v59 = *(_BYTE *)(v39 + v58);
            *((_QWORD *)a2 + 1) = v38;
            v42 |= (unint64_t)(v59 & 0x7F) << v56;
            if ((v59 & 0x80) == 0)
              break;
            v56 += 7;
            v14 = v57++ > 8;
            if (v14)
            {
              LODWORD(v42) = 0;
LABEL_165:
              v2 = v58 + 1;
              goto LABEL_166;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v42) = 0;
          goto LABEL_165;
        }
        v40 = 0;
        v41 = 0;
        v42 = 0;
        do
        {
          v2 = v38 + 1;
          *((_QWORD *)a2 + 1) = v38 + 1;
          v43 = *(_BYTE *)(v39 + v38);
          v42 |= (unint64_t)(v43 & 0x7F) << v40;
          if ((v43 & 0x80) == 0)
            goto LABEL_166;
          v40 += 7;
          v38 = v2;
          v14 = v41++ > 8;
        }
        while (!v14);
        LODWORD(v42) = 0;
LABEL_166:
        *((_DWORD *)this + 43) = v42;
        break;
      case 0x17u:
        *((_DWORD *)this + 47) |= 0x800000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v45 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v44 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v45 = v44 != 0;
        }
        *((_BYTE *)this + 180) = v45;
        break;
      case 0x18u:
        *((_DWORD *)this + 47) |= 0x1000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_111;
        *((_QWORD *)this + 13) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_146;
      case 0x19u:
        *((_DWORD *)this + 47) |= 0x2000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_111;
        *((_QWORD *)this + 14) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_146;
      case 0x1Au:
        *((_DWORD *)this + 47) |= 0x400u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_111;
        *((_QWORD *)this + 11) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_146;
      case 0x1Bu:
        *((_DWORD *)this + 47) |= 0x800u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 12) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_146:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_111:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 0x1Cu:
        *((_DWORD *)this + 47) |= 0x1000000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v47 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v46 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v47 = v46 != 0;
        }
        *((_BYTE *)this + 181) = v47;
        break;
      default:
        goto LABEL_19;
    }
LABEL_147:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::RunningSpeedKFResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 188);
  if ((v4 & 0x80000) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 160));
    v4 = *(_DWORD *)(v3 + 188);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 0x40000) == 0)
        goto LABEL_4;
      goto LABEL_32;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x40000) == 0)
  {
LABEL_4:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_5;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(double *)(v3 + 152));
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_5:
    if ((v4 & 0x20000) == 0)
      goto LABEL_6;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x20000) == 0)
  {
LABEL_6:
    if ((v4 & 0x10000) == 0)
      goto LABEL_7;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(double *)(v3 + 144));
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x10000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_8;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(double *)(v3 + 136));
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_8:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_9;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x40) == 0)
  {
LABEL_10:
    if ((v4 & 8) == 0)
      goto LABEL_11;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 8) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 0x10) == 0)
      goto LABEL_13;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x10) == 0)
  {
LABEL_13:
    if ((v4 & 1) == 0)
      goto LABEL_14;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 1) == 0)
  {
LABEL_14:
    if ((v4 & 2) == 0)
      goto LABEL_15;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 2) == 0)
  {
LABEL_15:
    if ((v4 & 0x8000) == 0)
      goto LABEL_16;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x8000) == 0)
  {
LABEL_16:
    if ((v4 & 0x4000) == 0)
      goto LABEL_17;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(double *)(v3 + 128));
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x4000) == 0)
  {
LABEL_17:
    if ((v4 & 0x100) == 0)
      goto LABEL_18;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(double *)(v3 + 120));
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x100) == 0)
  {
LABEL_18:
    if ((v4 & 0x200) == 0)
      goto LABEL_19;
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(double *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x200) == 0)
  {
LABEL_19:
    if ((v4 & 4) == 0)
      goto LABEL_20;
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(double *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 4) == 0)
  {
LABEL_20:
    if ((v4 & 0x400000) == 0)
      goto LABEL_21;
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x400000) == 0)
  {
LABEL_21:
    if ((v4 & 0x100000) == 0)
      goto LABEL_22;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x100000) == 0)
  {
LABEL_22:
    if ((v4 & 0x200000) == 0)
      goto LABEL_23;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x200000) == 0)
  {
LABEL_23:
    if ((v4 & 0x800000) == 0)
      goto LABEL_24;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x800000) == 0)
  {
LABEL_24:
    if ((v4 & 0x1000) == 0)
      goto LABEL_25;
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x1000) == 0)
  {
LABEL_25:
    if ((v4 & 0x2000) == 0)
      goto LABEL_26;
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::write(a2, *(double *)(v3 + 104));
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x2000) == 0)
  {
LABEL_26:
    if ((v4 & 0x400) == 0)
      goto LABEL_27;
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::write(a2, *(double *)(v3 + 112));
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x400) == 0)
  {
LABEL_27:
    if ((v4 & 0x800) == 0)
      goto LABEL_28;
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::write(a2, *(double *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x800) == 0)
  {
LABEL_28:
    if ((v4 & 0x1000000) == 0)
      return this;
    return PB::Writer::write(a2);
  }
LABEL_56:
  this = PB::Writer::write(a2, *(double *)(v3 + 96));
  if ((*(_DWORD *)(v3 + 188) & 0x1000000) != 0)
    return PB::Writer::write(a2);
  return this;
}

uint64_t CMMsl::RunningSpeedKFResult::hash_value(CMMsl::RunningSpeedKFResult *this)
{
  int v1;
  double v2;
  double v3;
  double v4;
  uint64_t v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;

  v1 = *((_DWORD *)this + 47);
  if ((v1 & 0x80000) == 0)
  {
    v2 = 0.0;
    if ((v1 & 0x80) != 0)
      goto LABEL_3;
LABEL_71:
    v3 = 0.0;
    if ((v1 & 0x40000) != 0)
      goto LABEL_6;
LABEL_72:
    v4 = 0.0;
    if ((v1 & 0x8000000) != 0)
      goto LABEL_9;
    goto LABEL_73;
  }
  v2 = *((double *)this + 20);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 0x80) == 0)
    goto LABEL_71;
LABEL_3:
  v3 = *((double *)this + 8);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 0x40000) == 0)
    goto LABEL_72;
LABEL_6:
  v4 = *((double *)this + 19);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 0x8000000) != 0)
  {
LABEL_9:
    v5 = *((unsigned __int8 *)this + 184);
    if ((v1 & 0x20000) != 0)
      goto LABEL_10;
LABEL_74:
    v6 = 0.0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_13;
LABEL_75:
    v7 = 0.0;
    if ((v1 & 0x2000000) != 0)
      goto LABEL_16;
    goto LABEL_76;
  }
LABEL_73:
  v5 = 0;
  if ((v1 & 0x20000) == 0)
    goto LABEL_74;
LABEL_10:
  v6 = *((double *)this + 18);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((v1 & 0x10000) == 0)
    goto LABEL_75;
LABEL_13:
  v7 = *((double *)this + 17);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((v1 & 0x2000000) != 0)
  {
LABEL_16:
    v8 = *((unsigned __int8 *)this + 182);
    if ((v1 & 0x4000000) != 0)
      goto LABEL_17;
    goto LABEL_77;
  }
LABEL_76:
  v8 = 0;
  if ((v1 & 0x4000000) != 0)
  {
LABEL_17:
    v9 = *((unsigned __int8 *)this + 183);
    if ((v1 & 0x40) != 0)
      goto LABEL_18;
LABEL_78:
    v10 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_21;
LABEL_79:
    v11 = 0.0;
    if ((v1 & 0x20) != 0)
      goto LABEL_24;
LABEL_80:
    v12 = 0.0;
    if ((v1 & 0x10) != 0)
      goto LABEL_27;
LABEL_81:
    v13 = 0.0;
    if ((v1 & 1) != 0)
      goto LABEL_30;
LABEL_82:
    v14 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_33;
LABEL_83:
    v15 = 0.0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_36;
LABEL_84:
    v16 = 0.0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_39;
LABEL_85:
    v17 = 0.0;
    if ((v1 & 0x100) != 0)
      goto LABEL_42;
LABEL_86:
    v18 = 0.0;
    if ((v1 & 0x200) != 0)
      goto LABEL_45;
LABEL_87:
    v19 = 0.0;
    if ((v1 & 4) != 0)
      goto LABEL_48;
LABEL_88:
    v20 = 0.0;
    if ((v1 & 0x400000) != 0)
      goto LABEL_51;
    goto LABEL_89;
  }
LABEL_77:
  v9 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_78;
LABEL_18:
  v10 = *((double *)this + 7);
  if (v10 == 0.0)
    v10 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_79;
LABEL_21:
  v11 = *((double *)this + 4);
  if (v11 == 0.0)
    v11 = 0.0;
  if ((v1 & 0x20) == 0)
    goto LABEL_80;
LABEL_24:
  v12 = *((double *)this + 6);
  if (v12 == 0.0)
    v12 = 0.0;
  if ((v1 & 0x10) == 0)
    goto LABEL_81;
LABEL_27:
  v13 = *((double *)this + 5);
  if (v13 == 0.0)
    v13 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_82;
LABEL_30:
  v14 = *((double *)this + 1);
  if (v14 == 0.0)
    v14 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_83;
LABEL_33:
  v15 = *((double *)this + 2);
  if (v15 == 0.0)
    v15 = 0.0;
  if ((v1 & 0x8000) == 0)
    goto LABEL_84;
LABEL_36:
  v16 = *((double *)this + 16);
  if (v16 == 0.0)
    v16 = 0.0;
  if ((v1 & 0x4000) == 0)
    goto LABEL_85;
LABEL_39:
  v17 = *((double *)this + 15);
  if (v17 == 0.0)
    v17 = 0.0;
  if ((v1 & 0x100) == 0)
    goto LABEL_86;
LABEL_42:
  v18 = *((double *)this + 9);
  if (v18 == 0.0)
    v18 = 0.0;
  if ((v1 & 0x200) == 0)
    goto LABEL_87;
LABEL_45:
  v19 = *((double *)this + 10);
  if (v19 == 0.0)
    v19 = 0.0;
  if ((v1 & 4) == 0)
    goto LABEL_88;
LABEL_48:
  v20 = *((double *)this + 3);
  if (v20 == 0.0)
    v20 = 0.0;
  if ((v1 & 0x400000) != 0)
  {
LABEL_51:
    v21 = *((int *)this + 44);
    if ((v1 & 0x100000) != 0)
      goto LABEL_52;
    goto LABEL_90;
  }
LABEL_89:
  v21 = 0;
  if ((v1 & 0x100000) != 0)
  {
LABEL_52:
    v22 = *((int *)this + 42);
    if ((v1 & 0x200000) != 0)
      goto LABEL_53;
    goto LABEL_91;
  }
LABEL_90:
  v22 = 0;
  if ((v1 & 0x200000) != 0)
  {
LABEL_53:
    v23 = *((int *)this + 43);
    if ((v1 & 0x800000) != 0)
      goto LABEL_54;
    goto LABEL_92;
  }
LABEL_91:
  v23 = 0;
  if ((v1 & 0x800000) != 0)
  {
LABEL_54:
    v24 = *((unsigned __int8 *)this + 180);
    if ((v1 & 0x1000) != 0)
      goto LABEL_55;
LABEL_93:
    v25 = 0.0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_58;
LABEL_94:
    v26 = 0.0;
    if ((v1 & 0x400) != 0)
      goto LABEL_61;
LABEL_95:
    v27 = 0.0;
    if ((v1 & 0x800) != 0)
      goto LABEL_64;
    goto LABEL_96;
  }
LABEL_92:
  v24 = 0;
  if ((v1 & 0x1000) == 0)
    goto LABEL_93;
LABEL_55:
  v25 = *((double *)this + 13);
  if (v25 == 0.0)
    v25 = 0.0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_94;
LABEL_58:
  v26 = *((double *)this + 14);
  if (v26 == 0.0)
    v26 = 0.0;
  if ((v1 & 0x400) == 0)
    goto LABEL_95;
LABEL_61:
  v27 = *((double *)this + 11);
  if (v27 == 0.0)
    v27 = 0.0;
  if ((v1 & 0x800) != 0)
  {
LABEL_64:
    v28 = *((double *)this + 12);
    if (v28 == 0.0)
      v28 = 0.0;
    if ((v1 & 0x1000000) != 0)
      goto LABEL_67;
LABEL_97:
    v29 = 0;
    return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ v8 ^ v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13 ^ *(_QWORD *)&v14 ^ *(_QWORD *)&v15 ^ *(_QWORD *)&v16 ^ *(_QWORD *)&v17 ^ *(_QWORD *)&v18 ^ *(_QWORD *)&v19 ^ *(_QWORD *)&v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ *(_QWORD *)&v25 ^ *(_QWORD *)&v26 ^ *(_QWORD *)&v27 ^ *(_QWORD *)&v28 ^ v29;
  }
LABEL_96:
  v28 = 0.0;
  if ((v1 & 0x1000000) == 0)
    goto LABEL_97;
LABEL_67:
  v29 = *((unsigned __int8 *)this + 181);
  return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ v8 ^ v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13 ^ *(_QWORD *)&v14 ^ *(_QWORD *)&v15 ^ *(_QWORD *)&v16 ^ *(_QWORD *)&v17 ^ *(_QWORD *)&v18 ^ *(_QWORD *)&v19 ^ *(_QWORD *)&v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ *(_QWORD *)&v25 ^ *(_QWORD *)&v26 ^ *(_QWORD *)&v27 ^ *(_QWORD *)&v28 ^ v29;
}

void CMMsl::RunningStrideLength::~RunningStrideLength(CMMsl::RunningStrideLength *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::RunningStrideLength::RunningStrideLength(CMMsl::RunningStrideLength *this, const CMMsl::RunningStrideLength *a2)
{
  int v2;
  int v3;
  double result;
  int v5;
  char v6;

  *(_QWORD *)this = &off_2513609A0;
  *((_DWORD *)this + 34) = 0;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 4) != 0)
  {
    result = *((double *)a2 + 3);
    v3 = 4;
    *((_DWORD *)this + 34) = 4;
    *((double *)this + 3) = result;
    v2 = *((_DWORD *)a2 + 34);
    if ((v2 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x200) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 10);
    v3 |= 0x200u;
    *((_DWORD *)this + 34) = v3;
    *((double *)this + 10) = result;
    v2 = *((_DWORD *)a2 + 34);
  }
LABEL_6:
  if ((v2 & 0x4000) != 0)
  {
    result = *((double *)a2 + 15);
    v3 |= 0x4000u;
    *((_DWORD *)this + 34) = v3;
    *((double *)this + 15) = result;
    v2 = *((_DWORD *)a2 + 34);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_24;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }
  result = *((double *)a2 + 11);
  v3 |= 0x400u;
  *((_DWORD *)this + 34) = v3;
  *((double *)this + 11) = result;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  result = *((double *)a2 + 5);
  v3 |= 0x10u;
  *((_DWORD *)this + 34) = v3;
  *((double *)this + 5) = result;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  result = *((double *)a2 + 6);
  v3 |= 0x20u;
  *((_DWORD *)this + 34) = v3;
  *((double *)this + 6) = result;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  result = *((double *)a2 + 8);
  v3 |= 0x80u;
  *((_DWORD *)this + 34) = v3;
  *((double *)this + 8) = result;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x40) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  result = *((double *)a2 + 7);
  v3 |= 0x40u;
  *((_DWORD *)this + 34) = v3;
  *((double *)this + 7) = result;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_29;
  }
LABEL_28:
  result = *((double *)a2 + 4);
  v3 |= 8u;
  *((_DWORD *)this + 34) = v3;
  *((double *)this + 4) = result;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x1000) == 0)
  {
LABEL_14:
    if ((v2 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_30;
  }
LABEL_29:
  result = *((double *)a2 + 13);
  v3 |= 0x1000u;
  *((_DWORD *)this + 34) = v3;
  *((double *)this + 13) = result;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x800) == 0)
  {
LABEL_15:
    if ((v2 & 0x2000) == 0)
      goto LABEL_16;
    goto LABEL_31;
  }
LABEL_30:
  result = *((double *)a2 + 12);
  v3 |= 0x800u;
  *((_DWORD *)this + 34) = v3;
  *((double *)this + 12) = result;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x2000) == 0)
  {
LABEL_16:
    if ((v2 & 1) == 0)
      goto LABEL_17;
    goto LABEL_32;
  }
LABEL_31:
  result = *((double *)a2 + 14);
  v3 |= 0x2000u;
  *((_DWORD *)this + 34) = v3;
  *((double *)this + 14) = result;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 1) == 0)
  {
LABEL_17:
    if ((v2 & 0x8000) == 0)
      goto LABEL_18;
    goto LABEL_33;
  }
LABEL_32:
  result = *((double *)a2 + 1);
  v3 |= 1u;
  *((_DWORD *)this + 34) = v3;
  *((double *)this + 1) = result;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x8000) == 0)
  {
LABEL_18:
    if ((v2 & 0x10000) == 0)
      goto LABEL_19;
    goto LABEL_34;
  }
LABEL_33:
  v5 = *((_DWORD *)a2 + 32);
  v3 |= 0x8000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 32) = v5;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x10000) == 0)
  {
LABEL_19:
    if ((v2 & 0x100) == 0)
      goto LABEL_20;
    goto LABEL_35;
  }
LABEL_34:
  v6 = *((_BYTE *)a2 + 132);
  v3 |= 0x10000u;
  *((_DWORD *)this + 34) = v3;
  *((_BYTE *)this + 132) = v6;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x100) == 0)
  {
LABEL_20:
    if ((v2 & 2) == 0)
      return result;
LABEL_36:
    result = *((double *)a2 + 2);
    *((_DWORD *)this + 34) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
LABEL_35:
  result = *((double *)a2 + 9);
  v3 |= 0x100u;
  *((_DWORD *)this + 34) = v3;
  *((double *)this + 9) = result;
  if ((*((_DWORD *)a2 + 34) & 2) != 0)
    goto LABEL_36;
  return result;
}

CMMsl *CMMsl::RunningStrideLength::operator=(CMMsl *a1, const CMMsl::RunningStrideLength *a2)
{
  CMMsl::RunningStrideLength *v3;
  _BYTE v5[144];

  if (a1 != a2)
  {
    CMMsl::RunningStrideLength::RunningStrideLength((CMMsl::RunningStrideLength *)v5, a2);
    CMMsl::swap(a1, (CMMsl::RunningStrideLength *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::RunningStrideLength *a2, CMMsl::RunningStrideLength *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  double result;

  v3 = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v3;
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v4;
  v5 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v5;
  v6 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v6;
  v7 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v7;
  v8 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v8;
  v9 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v9;
  v10 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v10;
  v11 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v11;
  v12 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v12;
  v13 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v13;
  v14 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v14;
  v15 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v15;
  v16 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v16;
  v17 = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v17;
  LOBYTE(v17) = *((_BYTE *)this + 132);
  *((_BYTE *)this + 132) = *((_BYTE *)a2 + 132);
  *((_BYTE *)a2 + 132) = v17;
  v18 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v18;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::RunningStrideLength::RunningStrideLength(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_2513609A0;
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 132) = *(_BYTE *)(a2 + 132);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

CMMsl *CMMsl::RunningStrideLength::operator=(CMMsl *this, uint64_t a2, CMMsl::RunningStrideLength *a3)
{
  void (**v5)(CMMsl::RunningStrideLength *__hidden);
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  char v15;
  int v16;

  if (this != (CMMsl *)a2)
  {
    v5 = &off_2513609A0;
    v16 = *(_DWORD *)(a2 + 136);
    *(_DWORD *)(a2 + 136) = 0;
    v13 = *(_QWORD *)(a2 + 120);
    v8 = *(_OWORD *)(a2 + 40);
    v9 = *(_OWORD *)(a2 + 56);
    v7 = *(_OWORD *)(a2 + 24);
    v11 = *(_OWORD *)(a2 + 88);
    v12 = *(_OWORD *)(a2 + 104);
    v14 = *(_DWORD *)(a2 + 128);
    v15 = *(_BYTE *)(a2 + 132);
    v10 = *(_OWORD *)(a2 + 72);
    v6 = *(_OWORD *)(a2 + 8);
    CMMsl::swap(this, (CMMsl::RunningStrideLength *)&v5, a3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return this;
}

uint64_t CMMsl::RunningStrideLength::formatText(CMMsl::RunningStrideLength *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x8000) != 0)
  {
    PB::TextFormatter::format(a2, "algorithmType");
    v5 = *((_DWORD *)this + 34);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_22;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "alpha", *((double *)this + 1));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "cadence", *((double *)this + 2));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "formBasedStartTime", *((double *)this + 3));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "grade", *((double *)this + 4));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "heightCM", *((double *)this + 5));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x10000) == 0)
      goto LABEL_9;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "horizontalAccelMagnitudeMeanSqrt", *((double *)this + 6));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x10000) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "isValid");
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v5 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "rotationRateGravityProjectionMax", *((double *)this + 7));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x80) == 0)
  {
LABEL_11:
    if ((v5 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "rotationRateMagnitudeMin", *((double *)this + 8));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x100) == 0)
  {
LABEL_12:
    if ((v5 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "speed", *((double *)this + 9));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x200) == 0)
  {
LABEL_13:
    if ((v5 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "speedBasedStartTime", *((double *)this + 10));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x400) == 0)
  {
LABEL_14:
    if ((v5 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "strideLength", *((double *)this + 11));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x800) == 0)
  {
LABEL_15:
    if ((v5 & 0x1000) == 0)
      goto LABEL_16;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "strideLengthFormBasedCalibrated", *((double *)this + 12));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x1000) == 0)
  {
LABEL_16:
    if ((v5 & 0x2000) == 0)
      goto LABEL_17;
LABEL_35:
    PB::TextFormatter::format(a2, "strideLengthSpeedBased", *((double *)this + 14));
    if ((*((_DWORD *)this + 34) & 0x4000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_18;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "strideLengthFormBasedUncalibrated", *((double *)this + 13));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x2000) != 0)
    goto LABEL_35;
LABEL_17:
  if ((v5 & 0x4000) != 0)
LABEL_18:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 15));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::RunningStrideLength::readFrom(CMMsl::RunningStrideLength *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  int v26;
  BOOL v27;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_93;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 34) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_76;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_87;
      case 2u:
        *((_DWORD *)this + 34) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_76;
        *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_87;
      case 3u:
        *((_DWORD *)this + 34) |= 0x4000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_76;
        *((_QWORD *)this + 15) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_87;
      case 4u:
        *((_DWORD *)this + 34) |= 0x400u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_76;
        *((_QWORD *)this + 11) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_87;
      case 5u:
        *((_DWORD *)this + 34) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_76;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_87;
      case 6u:
        *((_DWORD *)this + 34) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_76;
        *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_87;
      case 7u:
        *((_DWORD *)this + 34) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_76;
        *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_87;
      case 8u:
        *((_DWORD *)this + 34) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_76;
        *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_87;
      case 9u:
        *((_DWORD *)this + 34) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_76;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_87;
      case 0xAu:
        *((_DWORD *)this + 34) |= 0x1000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_76;
        *((_QWORD *)this + 13) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_87;
      case 0xBu:
        *((_DWORD *)this + 34) |= 0x800u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_76;
        *((_QWORD *)this + 12) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_87;
      case 0xCu:
        *((_DWORD *)this + 34) |= 0x2000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_76;
        *((_QWORD *)this + 14) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_87;
      case 0xDu:
        *((_DWORD *)this + 34) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_76;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_87;
      case 0xEu:
        *((_DWORD *)this + 34) |= 0x8000u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v28 = 0;
          v29 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_92;
            }
            v30 = v20++;
            v31 = *(_BYTE *)(v21 + v30);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_91:
              v2 = v30 + 1;
              goto LABEL_92;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
          goto LABEL_91;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_92;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_92:
        *((_DWORD *)this + 32) = v24;
        break;
      case 0xFu:
        *((_DWORD *)this + 34) |= 0x10000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v27 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v26 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v27 = v26 != 0;
        }
        *((_BYTE *)this + 132) = v27;
        break;
      case 0x10u:
        *((_DWORD *)this + 34) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_76;
        *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_87;
      case 0x11u:
        *((_DWORD *)this + 34) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_87:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_76:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_93:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::RunningStrideLength::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 136);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24));
    v4 = *(_DWORD *)(v3 + 136);
    if ((v4 & 0x200) == 0)
    {
LABEL_3:
      if ((v4 & 0x4000) == 0)
        goto LABEL_4;
      goto LABEL_21;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x4000) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0)
      goto LABEL_5;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 120));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0)
      goto LABEL_10;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x1000) == 0)
      goto LABEL_11;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x1000) == 0)
  {
LABEL_11:
    if ((v4 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(double *)(v3 + 104));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x800) == 0)
  {
LABEL_12:
    if ((v4 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(double *)(v3 + 96));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x2000) == 0)
  {
LABEL_13:
    if ((v4 & 1) == 0)
      goto LABEL_14;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(double *)(v3 + 112));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 1) == 0)
  {
LABEL_14:
    if ((v4 & 0x8000) == 0)
      goto LABEL_15;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x8000) == 0)
  {
LABEL_15:
    if ((v4 & 0x10000) == 0)
      goto LABEL_16;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x10000) == 0)
  {
LABEL_16:
    if ((v4 & 0x100) == 0)
      goto LABEL_17;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x100) == 0)
  {
LABEL_17:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 16));
  }
LABEL_34:
  this = PB::Writer::write(a2, *(double *)(v3 + 72));
  if ((*(_DWORD *)(v3 + 136) & 2) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 16));
  return this;
}

uint64_t CMMsl::RunningStrideLength::hash_value(CMMsl::RunningStrideLength *this)
{
  int v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;

  v1 = *((_DWORD *)this + 34);
  if ((v1 & 4) == 0)
  {
    v2 = 0.0;
    if ((v1 & 0x200) != 0)
      goto LABEL_3;
LABEL_50:
    v3 = 0.0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_6;
LABEL_51:
    v4 = 0.0;
    if ((v1 & 0x400) != 0)
      goto LABEL_9;
LABEL_52:
    v5 = 0.0;
    if ((v1 & 0x10) != 0)
      goto LABEL_12;
LABEL_53:
    v6 = 0.0;
    if ((v1 & 0x20) != 0)
      goto LABEL_15;
LABEL_54:
    v7 = 0.0;
    if ((v1 & 0x80) != 0)
      goto LABEL_18;
LABEL_55:
    v8 = 0.0;
    if ((v1 & 0x40) != 0)
      goto LABEL_21;
LABEL_56:
    v9 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_24;
LABEL_57:
    v10 = 0.0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_27;
LABEL_58:
    v11 = 0.0;
    if ((v1 & 0x800) != 0)
      goto LABEL_30;
LABEL_59:
    v12 = 0.0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_33;
LABEL_60:
    v13 = 0.0;
    if ((v1 & 1) != 0)
      goto LABEL_36;
LABEL_61:
    v14 = 0.0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_39;
    goto LABEL_62;
  }
  v2 = *((double *)this + 3);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 0x200) == 0)
    goto LABEL_50;
LABEL_3:
  v3 = *((double *)this + 10);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 0x4000) == 0)
    goto LABEL_51;
LABEL_6:
  v4 = *((double *)this + 15);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 0x400) == 0)
    goto LABEL_52;
LABEL_9:
  v5 = *((double *)this + 11);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((v1 & 0x10) == 0)
    goto LABEL_53;
LABEL_12:
  v6 = *((double *)this + 5);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((v1 & 0x20) == 0)
    goto LABEL_54;
LABEL_15:
  v7 = *((double *)this + 6);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((v1 & 0x80) == 0)
    goto LABEL_55;
LABEL_18:
  v8 = *((double *)this + 8);
  if (v8 == 0.0)
    v8 = 0.0;
  if ((v1 & 0x40) == 0)
    goto LABEL_56;
LABEL_21:
  v9 = *((double *)this + 7);
  if (v9 == 0.0)
    v9 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_57;
LABEL_24:
  v10 = *((double *)this + 4);
  if (v10 == 0.0)
    v10 = 0.0;
  if ((v1 & 0x1000) == 0)
    goto LABEL_58;
LABEL_27:
  v11 = *((double *)this + 13);
  if (v11 == 0.0)
    v11 = 0.0;
  if ((v1 & 0x800) == 0)
    goto LABEL_59;
LABEL_30:
  v12 = *((double *)this + 12);
  if (v12 == 0.0)
    v12 = 0.0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_60;
LABEL_33:
  v13 = *((double *)this + 14);
  if (v13 == 0.0)
    v13 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_61;
LABEL_36:
  v14 = *((double *)this + 1);
  if (v14 == 0.0)
    v14 = 0.0;
  if ((v1 & 0x8000) != 0)
  {
LABEL_39:
    v15 = *((int *)this + 32);
    if ((v1 & 0x10000) != 0)
      goto LABEL_40;
    goto LABEL_63;
  }
LABEL_62:
  v15 = 0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_40:
    v16 = *((unsigned __int8 *)this + 132);
    if ((v1 & 0x100) != 0)
      goto LABEL_41;
    goto LABEL_64;
  }
LABEL_63:
  v16 = 0;
  if ((v1 & 0x100) != 0)
  {
LABEL_41:
    v17 = *((double *)this + 9);
    if (v17 == 0.0)
      v17 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_44;
LABEL_65:
    v18 = 0.0;
    return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13 ^ *(_QWORD *)&v14 ^ v15 ^ v16 ^ *(_QWORD *)&v17 ^ *(_QWORD *)&v18;
  }
LABEL_64:
  v17 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_65;
LABEL_44:
  v18 = *((double *)this + 2);
  if (v18 == 0.0)
    v18 = 0.0;
  return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13 ^ *(_QWORD *)&v14 ^ v15 ^ v16 ^ *(_QWORD *)&v17 ^ *(_QWORD *)&v18;
}

void CMMsl::RunningVerticalOscillation::~RunningVerticalOscillation(CMMsl::RunningVerticalOscillation *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::RunningVerticalOscillation::RunningVerticalOscillation(CMMsl::RunningVerticalOscillation *this, const CMMsl::RunningVerticalOscillation *a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)this = &off_2513609D8;
  *((_DWORD *)this + 10) = 0;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 4) != 0)
  {
    result = *((double *)a2 + 3);
    v3 = 4;
    *((_BYTE *)this + 40) = 4;
    *((double *)this + 3) = result;
    v2 = *((_BYTE *)a2 + 40);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 40) & 8) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 4);
    v3 |= 8u;
    *((_BYTE *)this + 40) = v3;
    *((double *)this + 4) = result;
    v2 = *((_BYTE *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 1) == 0)
  {
    if ((v2 & 2) == 0)
      return result;
LABEL_10:
    result = *((double *)a2 + 2);
    *((_BYTE *)this + 40) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
  result = *((double *)a2 + 1);
  v3 |= 1u;
  *((_BYTE *)this + 40) = v3;
  *((double *)this + 1) = result;
  if ((*((_BYTE *)a2 + 40) & 2) != 0)
    goto LABEL_10;
  return result;
}

uint64_t CMMsl::RunningVerticalOscillation::operator=(uint64_t a1, const CMMsl::RunningVerticalOscillation *a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  int v10;

  if ((const CMMsl::RunningVerticalOscillation *)a1 != a2)
  {
    CMMsl::RunningVerticalOscillation::RunningVerticalOscillation((CMMsl::RunningVerticalOscillation *)&v7, a2);
    v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v10;
    v10 = v3;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::RunningVerticalOscillation *a2, CMMsl::RunningVerticalOscillation *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v4;
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v5;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::RunningVerticalOscillation::RunningVerticalOscillation(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_2513609D8;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_2513609D8;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::RunningVerticalOscillation::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  void (**v8)(CMMsl::RunningVerticalOscillation *__hidden);
  __int128 v9;
  __int128 v10;
  int v11;

  if (a1 != a2)
  {
    v8 = &off_2513609D8;
    v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    v11 = *(_DWORD *)(a1 + 40);
    v10 = *(_OWORD *)(a1 + 24);
    v4 = *(_OWORD *)(a1 + 8);
    v5 = *(_OWORD *)(a2 + 8);
    v6 = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 40) = v3;
    *(_OWORD *)(a1 + 24) = v6;
    *(_OWORD *)(a1 + 8) = v5;
    v9 = v4;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::RunningVerticalOscillation::formatText(CMMsl::RunningVerticalOscillation *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "displacement", *((double *)this + 1));
    v5 = *((_BYTE *)this + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "startTime", *((double *)this + 3));
      if ((*((_BYTE *)this + 40) & 8) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "endTime", *((double *)this + 2));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 4));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::RunningVerticalOscillation::readFrom(CMMsl::RunningVerticalOscillation *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_37;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 40) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 2u:
        *((_BYTE *)this + 40) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 3u:
        *((_BYTE *)this + 40) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 4u:
        *((_BYTE *)this + 40) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_36:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_34:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_37:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::RunningVerticalOscillation::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 40);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24));
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 40) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 16));
  }
LABEL_8:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  if ((*(_BYTE *)(v3 + 40) & 2) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 16));
  return this;
}

uint64_t CMMsl::RunningVerticalOscillation::hash_value(CMMsl::RunningVerticalOscillation *this)
{
  double v1;
  double v2;
  double v3;
  double v4;

  if ((*((_BYTE *)this + 40) & 4) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 40) & 8) != 0)
      goto LABEL_3;
LABEL_15:
    v2 = 0.0;
    if ((*((_BYTE *)this + 40) & 1) != 0)
      goto LABEL_6;
    goto LABEL_16;
  }
  v1 = *((double *)this + 3);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 40) & 8) == 0)
    goto LABEL_15;
LABEL_3:
  v2 = *((double *)this + 4);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 40) & 1) != 0)
  {
LABEL_6:
    v3 = *((double *)this + 1);
    if (v3 == 0.0)
      v3 = 0.0;
    if ((*((_BYTE *)this + 40) & 2) != 0)
      goto LABEL_9;
LABEL_17:
    v4 = 0.0;
    return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4;
  }
LABEL_16:
  v3 = 0.0;
  if ((*((_BYTE *)this + 40) & 2) == 0)
    goto LABEL_17;
LABEL_9:
  v4 = *((double *)this + 2);
  if (v4 == 0.0)
    v4 = 0.0;
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4;
}

void CMMsl::RunningVerticalOscillationGradientBoostedSignals::~RunningVerticalOscillationGradientBoostedSignals(CMMsl::RunningVerticalOscillationGradientBoostedSignals *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::RunningVerticalOscillationGradientBoostedSignals::RunningVerticalOscillationGradientBoostedSignals(uint64_t this, const CMMsl::RunningVerticalOscillationGradientBoostedSignals *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;

  *(_QWORD *)this = &off_251360A10;
  *(_DWORD *)(this + 212) = 0;
  v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x40000) != 0)
  {
    v4 = *((_QWORD *)a2 + 19);
    v3 = 0x40000;
    *(_DWORD *)(this + 212) = 0x40000;
    *(_QWORD *)(this + 152) = v4;
    v2 = *((_DWORD *)a2 + 53);
    if ((v2 & 0x4000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x4000) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 15);
    v3 |= 0x4000u;
    *(_DWORD *)(this + 212) = v3;
    *(_QWORD *)(this + 120) = v5;
    v2 = *((_DWORD *)a2 + 53);
  }
LABEL_6:
  if ((v2 & 0x400) != 0)
  {
    v6 = *((_QWORD *)a2 + 11);
    v3 |= 0x400u;
    *(_DWORD *)(this + 212) = v3;
    *(_QWORD *)(this + 88) = v6;
    v2 = *((_DWORD *)a2 + 53);
    if ((v2 & 0x800) == 0)
    {
LABEL_8:
      if ((v2 & 0x1000) == 0)
        goto LABEL_9;
      goto LABEL_33;
    }
  }
  else if ((v2 & 0x800) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a2 + 12);
  v3 |= 0x800u;
  *(_DWORD *)(this + 212) = v3;
  *(_QWORD *)(this + 96) = v7;
  v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x1000) == 0)
  {
LABEL_9:
    if ((v2 & 2) == 0)
      goto LABEL_10;
    goto LABEL_34;
  }
LABEL_33:
  v8 = *((_QWORD *)a2 + 13);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 212) = v3;
  *(_QWORD *)(this + 104) = v8;
  v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 2) == 0)
  {
LABEL_10:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_11;
    goto LABEL_35;
  }
LABEL_34:
  v9 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_DWORD *)(this + 212) = v3;
  *(_QWORD *)(this + 16) = v9;
  v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_11:
    if ((v2 & 0x200000) == 0)
      goto LABEL_12;
    goto LABEL_36;
  }
LABEL_35:
  v10 = *((_QWORD *)a2 + 25);
  v3 |= 0x1000000u;
  *(_DWORD *)(this + 212) = v3;
  *(_QWORD *)(this + 200) = v10;
  v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x200000) == 0)
  {
LABEL_12:
    if ((v2 & 0x100000) == 0)
      goto LABEL_13;
    goto LABEL_37;
  }
LABEL_36:
  v11 = *((_QWORD *)a2 + 22);
  v3 |= 0x200000u;
  *(_DWORD *)(this + 212) = v3;
  *(_QWORD *)(this + 176) = v11;
  v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x100000) == 0)
  {
LABEL_13:
    if ((v2 & 0x20000) == 0)
      goto LABEL_14;
    goto LABEL_38;
  }
LABEL_37:
  v12 = *((_QWORD *)a2 + 21);
  v3 |= 0x100000u;
  *(_DWORD *)(this + 212) = v3;
  *(_QWORD *)(this + 168) = v12;
  v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x20000) == 0)
  {
LABEL_14:
    if ((v2 & 0x8000) == 0)
      goto LABEL_15;
    goto LABEL_39;
  }
LABEL_38:
  v13 = *((_QWORD *)a2 + 18);
  v3 |= 0x20000u;
  *(_DWORD *)(this + 212) = v3;
  *(_QWORD *)(this + 144) = v13;
  v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x8000) == 0)
  {
LABEL_15:
    if ((v2 & 0x200) == 0)
      goto LABEL_16;
    goto LABEL_40;
  }
LABEL_39:
  v14 = *((_QWORD *)a2 + 16);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 212) = v3;
  *(_QWORD *)(this + 128) = v14;
  v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x200) == 0)
  {
LABEL_16:
    if ((v2 & 0x40) == 0)
      goto LABEL_17;
    goto LABEL_41;
  }
LABEL_40:
  v15 = *((_QWORD *)a2 + 10);
  v3 |= 0x200u;
  *(_DWORD *)(this + 212) = v3;
  *(_QWORD *)(this + 80) = v15;
  v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x40) == 0)
  {
LABEL_17:
    if ((v2 & 0x20) == 0)
      goto LABEL_18;
    goto LABEL_42;
  }
LABEL_41:
  v16 = *((_QWORD *)a2 + 7);
  v3 |= 0x40u;
  *(_DWORD *)(this + 212) = v3;
  *(_QWORD *)(this + 56) = v16;
  v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x20) == 0)
  {
LABEL_18:
    if ((v2 & 8) == 0)
      goto LABEL_19;
    goto LABEL_43;
  }
LABEL_42:
  v17 = *((_QWORD *)a2 + 6);
  v3 |= 0x20u;
  *(_DWORD *)(this + 212) = v3;
  *(_QWORD *)(this + 48) = v17;
  v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 8) == 0)
  {
LABEL_19:
    if ((v2 & 0x800000) == 0)
      goto LABEL_20;
    goto LABEL_44;
  }
LABEL_43:
  v18 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *(_DWORD *)(this + 212) = v3;
  *(_QWORD *)(this + 32) = v18;
  v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x800000) == 0)
  {
LABEL_20:
    if ((v2 & 0x10) == 0)
      goto LABEL_21;
    goto LABEL_45;
  }
LABEL_44:
  v19 = *((_QWORD *)a2 + 24);
  v3 |= 0x800000u;
  *(_DWORD *)(this + 212) = v3;
  *(_QWORD *)(this + 192) = v19;
  v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x10) == 0)
  {
LABEL_21:
    if ((v2 & 0x2000) == 0)
      goto LABEL_22;
    goto LABEL_46;
  }
LABEL_45:
  v20 = *((_QWORD *)a2 + 5);
  v3 |= 0x10u;
  *(_DWORD *)(this + 212) = v3;
  *(_QWORD *)(this + 40) = v20;
  v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x2000) == 0)
  {
LABEL_22:
    if ((v2 & 0x100) == 0)
      goto LABEL_23;
    goto LABEL_47;
  }
LABEL_46:
  v21 = *((_QWORD *)a2 + 14);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 212) = v3;
  *(_QWORD *)(this + 112) = v21;
  v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x100) == 0)
  {
LABEL_23:
    if ((v2 & 0x10000) == 0)
      goto LABEL_24;
    goto LABEL_48;
  }
LABEL_47:
  v22 = *((_QWORD *)a2 + 9);
  v3 |= 0x100u;
  *(_DWORD *)(this + 212) = v3;
  *(_QWORD *)(this + 72) = v22;
  v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x10000) == 0)
  {
LABEL_24:
    if ((v2 & 0x80) == 0)
      goto LABEL_25;
    goto LABEL_49;
  }
LABEL_48:
  v23 = *((_QWORD *)a2 + 17);
  v3 |= 0x10000u;
  *(_DWORD *)(this + 212) = v3;
  *(_QWORD *)(this + 136) = v23;
  v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x80) == 0)
  {
LABEL_25:
    if ((v2 & 4) == 0)
      goto LABEL_26;
    goto LABEL_50;
  }
LABEL_49:
  v24 = *((_QWORD *)a2 + 8);
  v3 |= 0x80u;
  *(_DWORD *)(this + 212) = v3;
  *(_QWORD *)(this + 64) = v24;
  v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 4) == 0)
  {
LABEL_26:
    if ((v2 & 1) == 0)
      goto LABEL_27;
    goto LABEL_51;
  }
LABEL_50:
  v25 = *((_QWORD *)a2 + 3);
  v3 |= 4u;
  *(_DWORD *)(this + 212) = v3;
  *(_QWORD *)(this + 24) = v25;
  v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 1) == 0)
  {
LABEL_27:
    if ((v2 & 0x400000) == 0)
      goto LABEL_28;
    goto LABEL_52;
  }
LABEL_51:
  v26 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_DWORD *)(this + 212) = v3;
  *(_QWORD *)(this + 8) = v26;
  v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x400000) == 0)
  {
LABEL_28:
    if ((v2 & 0x80000) == 0)
      goto LABEL_29;
    goto LABEL_53;
  }
LABEL_52:
  v27 = *((_QWORD *)a2 + 23);
  v3 |= 0x400000u;
  *(_DWORD *)(this + 212) = v3;
  *(_QWORD *)(this + 184) = v27;
  v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x80000) == 0)
  {
LABEL_29:
    if ((v2 & 0x2000000) == 0)
      return this;
LABEL_54:
    v29 = *((_BYTE *)a2 + 208);
    *(_DWORD *)(this + 212) = v3 | 0x2000000;
    *(_BYTE *)(this + 208) = v29;
    return this;
  }
LABEL_53:
  v28 = *((_QWORD *)a2 + 20);
  v3 |= 0x80000u;
  *(_DWORD *)(this + 212) = v3;
  *(_QWORD *)(this + 160) = v28;
  if ((*((_DWORD *)a2 + 53) & 0x2000000) != 0)
    goto LABEL_54;
  return this;
}

CMMsl *CMMsl::RunningVerticalOscillationGradientBoostedSignals::operator=(CMMsl *a1, const CMMsl::RunningVerticalOscillationGradientBoostedSignals *a2)
{
  CMMsl::RunningVerticalOscillationGradientBoostedSignals *v3;
  _BYTE v5[216];

  if (a1 != a2)
  {
    CMMsl::RunningVerticalOscillationGradientBoostedSignals::RunningVerticalOscillationGradientBoostedSignals((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::RunningVerticalOscillationGradientBoostedSignals *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::RunningVerticalOscillationGradientBoostedSignals *a2, CMMsl::RunningVerticalOscillationGradientBoostedSignals *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double result;

  v3 = *((_DWORD *)this + 53);
  *((_DWORD *)this + 53) = *((_DWORD *)a2 + 53);
  *((_DWORD *)a2 + 53) = v3;
  v4 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 19) = v4;
  v5 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v5;
  v6 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v6;
  v7 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v7;
  v8 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v8;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v9;
  v10 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = *((_QWORD *)a2 + 25);
  *((_QWORD *)a2 + 25) = v10;
  v11 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = *((_QWORD *)a2 + 22);
  *((_QWORD *)a2 + 22) = v11;
  v12 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = *((_QWORD *)a2 + 21);
  *((_QWORD *)a2 + 21) = v12;
  v13 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v13;
  v14 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v14;
  v15 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v15;
  v16 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v16;
  v17 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v17;
  v18 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v18;
  v19 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = *((_QWORD *)a2 + 24);
  *((_QWORD *)a2 + 24) = v19;
  v20 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v20;
  v21 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v21;
  v22 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v22;
  v23 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v23;
  v24 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v24;
  v25 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v25;
  v26 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v26;
  v27 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = *((_QWORD *)a2 + 23);
  *((_QWORD *)a2 + 23) = v27;
  result = *((double *)this + 20);
  *((_QWORD *)this + 20) = *((_QWORD *)a2 + 20);
  *((double *)a2 + 20) = result;
  LOBYTE(v3) = *((_BYTE *)this + 208);
  *((_BYTE *)this + 208) = *((_BYTE *)a2 + 208);
  *((_BYTE *)a2 + 208) = v3;
  return result;
}

double CMMsl::RunningVerticalOscillationGradientBoostedSignals::RunningVerticalOscillationGradientBoostedSignals(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_251360A10;
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
  *(_DWORD *)(a2 + 212) = 0;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  result = *(double *)(a2 + 160);
  *(double *)(a1 + 160) = result;
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  return result;
}

CMMsl *CMMsl::RunningVerticalOscillationGradientBoostedSignals::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::RunningVerticalOscillationGradientBoostedSignals *v3;
  _BYTE v5[216];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::RunningVerticalOscillationGradientBoostedSignals::RunningVerticalOscillationGradientBoostedSignals((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::RunningVerticalOscillationGradientBoostedSignals *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::RunningVerticalOscillationGradientBoostedSignals::formatText(CMMsl::RunningVerticalOscillationGradientBoostedSignals *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "centerOfMassAccelZAmplitudeBackwards", *((double *)this + 1));
    v5 = *((_DWORD *)this + 53);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_31;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "height", *((double *)this + 2));
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "integratedAngleYg", *((double *)this + 3));
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "integratedAngleYgBackwards", *((double *)this + 4));
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "integratedCenterOfAccelZMaxBackwards", *((double *)this + 5));
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "integratedRotationAxisWZ", *((double *)this + 6));
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "integratedRotationAxisWZForwards", *((double *)this + 7));
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "integratedRotationRateYBackwards", *((double *)this + 8));
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "integratedUserAccelTForwards", *((double *)this + 9));
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "integratedUserAccelY", *((double *)this + 10));
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "integratedVelocityZ", *((double *)this + 11));
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "integratedVelocityZBackwards", *((double *)this + 12));
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_15;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "integratedVelocityZForwards", *((double *)this + 13));
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v5 & 0x2000) == 0)
      goto LABEL_16;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "isValidPeak");
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x2000) == 0)
  {
LABEL_16:
    if ((v5 & 0x4000) == 0)
      goto LABEL_17;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "medianCadence", *((double *)this + 14));
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x4000) == 0)
  {
LABEL_17:
    if ((v5 & 0x8000) == 0)
      goto LABEL_18;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "peakTime", *((double *)this + 15));
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x8000) == 0)
  {
LABEL_18:
    if ((v5 & 0x10000) == 0)
      goto LABEL_19;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "rotationAxisWTAmplitudeXForwards", *((double *)this + 16));
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x10000) == 0)
  {
LABEL_19:
    if ((v5 & 0x20000) == 0)
      goto LABEL_20;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "rotationRateMaxZForwards", *((double *)this + 17));
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x20000) == 0)
  {
LABEL_20:
    if ((v5 & 0x40000) == 0)
      goto LABEL_21;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "rotationTMaxZForwards", *((double *)this + 18));
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x40000) == 0)
  {
LABEL_21:
    if ((v5 & 0x80000) == 0)
      goto LABEL_22;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 19));
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x80000) == 0)
  {
LABEL_22:
    if ((v5 & 0x100000) == 0)
      goto LABEL_23;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "strideLengthCadence", *((double *)this + 20));
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x100000) == 0)
  {
LABEL_23:
    if ((v5 & 0x200000) == 0)
      goto LABEL_24;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "swingAccelAmplitudeYBackwards", *((double *)this + 21));
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x200000) == 0)
  {
LABEL_24:
    if ((v5 & 0x400000) == 0)
      goto LABEL_25;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "swingAccelMeanXBackwards", *((double *)this + 22));
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x400000) == 0)
  {
LABEL_25:
    if ((v5 & 0x800000) == 0)
      goto LABEL_26;
LABEL_53:
    PB::TextFormatter::format(a2, "userAccelTMeanXBackards", *((double *)this + 24));
    if ((*((_DWORD *)this + 53) & 0x1000000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_27;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "swingAccelTZMean", *((double *)this + 23));
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x800000) != 0)
    goto LABEL_53;
LABEL_26:
  if ((v5 & 0x1000000) != 0)
LABEL_27:
    PB::TextFormatter::format(a2, "weight", *((double *)this + 25));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::RunningVerticalOscillationGradientBoostedSignals::readFrom(CMMsl::RunningVerticalOscillationGradientBoostedSignals *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v20;
  BOOL v21;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_104;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 53) |= 0x40000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_99;
        *((_QWORD *)this + 19) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_103;
      case 2u:
        *((_DWORD *)this + 53) |= 0x4000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_99;
        *((_QWORD *)this + 15) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_103;
      case 3u:
        *((_DWORD *)this + 53) |= 0x400u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_99;
        *((_QWORD *)this + 11) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_103;
      case 4u:
        *((_DWORD *)this + 53) |= 0x800u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_99;
        *((_QWORD *)this + 12) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_103;
      case 5u:
        *((_DWORD *)this + 53) |= 0x1000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_99;
        *((_QWORD *)this + 13) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_103;
      case 6u:
        *((_DWORD *)this + 53) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_99;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_103;
      case 7u:
        *((_DWORD *)this + 53) |= 0x1000000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_99;
        *((_QWORD *)this + 25) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_103;
      case 8u:
        *((_DWORD *)this + 53) |= 0x200000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_99;
        *((_QWORD *)this + 22) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_103;
      case 9u:
        *((_DWORD *)this + 53) |= 0x100000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_99;
        *((_QWORD *)this + 21) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_103;
      case 0xAu:
        *((_DWORD *)this + 53) |= 0x20000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_99;
        *((_QWORD *)this + 18) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_103;
      case 0xBu:
        *((_DWORD *)this + 53) |= 0x8000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_99;
        *((_QWORD *)this + 16) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_103;
      case 0xCu:
        *((_DWORD *)this + 53) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_99;
        *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_103;
      case 0xDu:
        *((_DWORD *)this + 53) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_99;
        *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_103;
      case 0xEu:
        *((_DWORD *)this + 53) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_99;
        *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_103;
      case 0xFu:
        *((_DWORD *)this + 53) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_99;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_103;
      case 0x10u:
        *((_DWORD *)this + 53) |= 0x800000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_99;
        *((_QWORD *)this + 24) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_103;
      case 0x11u:
        *((_DWORD *)this + 53) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_99;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_103;
      case 0x12u:
        *((_DWORD *)this + 53) |= 0x2000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_99;
        *((_QWORD *)this + 14) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_103;
      case 0x13u:
        *((_DWORD *)this + 53) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_99;
        *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_103;
      case 0x14u:
        *((_DWORD *)this + 53) |= 0x10000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_99;
        *((_QWORD *)this + 17) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_103;
      case 0x15u:
        *((_DWORD *)this + 53) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_99;
        *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_103;
      case 0x16u:
        *((_DWORD *)this + 53) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_99;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_103;
      case 0x17u:
        *((_DWORD *)this + 53) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_99;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_103;
      case 0x18u:
        *((_DWORD *)this + 53) |= 0x400000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_99;
        *((_QWORD *)this + 23) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_103;
      case 0x19u:
        *((_DWORD *)this + 53) |= 0x80000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
        {
LABEL_99:
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          *((_QWORD *)this + 20) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_103:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        break;
      case 0x1Au:
        *((_DWORD *)this + 53) |= 0x2000000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v21 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v21 = v20 != 0;
        }
        *((_BYTE *)this + 208) = v21;
        break;
      default:
        goto LABEL_19;
    }
LABEL_104:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::RunningVerticalOscillationGradientBoostedSignals::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 212);
  if ((v4 & 0x40000) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 152));
    v4 = *(_DWORD *)(v3 + 212);
    if ((v4 & 0x4000) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0)
        goto LABEL_4;
      goto LABEL_30;
    }
  }
  else if ((v4 & 0x4000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 120));
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 0x800) == 0)
      goto LABEL_5;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(double *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x800) == 0)
  {
LABEL_5:
    if ((v4 & 0x1000) == 0)
      goto LABEL_6;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(double *)(v3 + 96));
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x1000) == 0)
  {
LABEL_6:
    if ((v4 & 2) == 0)
      goto LABEL_7;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(double *)(v3 + 104));
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 2) == 0)
  {
LABEL_7:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_8;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_8:
    if ((v4 & 0x200000) == 0)
      goto LABEL_9;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(double *)(v3 + 200));
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x200000) == 0)
  {
LABEL_9:
    if ((v4 & 0x100000) == 0)
      goto LABEL_10;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(double *)(v3 + 176));
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x100000) == 0)
  {
LABEL_10:
    if ((v4 & 0x20000) == 0)
      goto LABEL_11;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(double *)(v3 + 168));
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x20000) == 0)
  {
LABEL_11:
    if ((v4 & 0x8000) == 0)
      goto LABEL_12;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(double *)(v3 + 144));
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x8000) == 0)
  {
LABEL_12:
    if ((v4 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(double *)(v3 + 128));
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x200) == 0)
  {
LABEL_13:
    if ((v4 & 0x40) == 0)
      goto LABEL_14;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(double *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x40) == 0)
  {
LABEL_14:
    if ((v4 & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x20) == 0)
  {
LABEL_15:
    if ((v4 & 8) == 0)
      goto LABEL_16;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 8) == 0)
  {
LABEL_16:
    if ((v4 & 0x800000) == 0)
      goto LABEL_17;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x800000) == 0)
  {
LABEL_17:
    if ((v4 & 0x10) == 0)
      goto LABEL_18;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(double *)(v3 + 192));
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x10) == 0)
  {
LABEL_18:
    if ((v4 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x2000) == 0)
  {
LABEL_19:
    if ((v4 & 0x100) == 0)
      goto LABEL_20;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(double *)(v3 + 112));
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x100) == 0)
  {
LABEL_20:
    if ((v4 & 0x10000) == 0)
      goto LABEL_21;
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(double *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x10000) == 0)
  {
LABEL_21:
    if ((v4 & 0x80) == 0)
      goto LABEL_22;
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(double *)(v3 + 136));
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x80) == 0)
  {
LABEL_22:
    if ((v4 & 4) == 0)
      goto LABEL_23;
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 4) == 0)
  {
LABEL_23:
    if ((v4 & 1) == 0)
      goto LABEL_24;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 1) == 0)
  {
LABEL_24:
    if ((v4 & 0x400000) == 0)
      goto LABEL_25;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x400000) == 0)
  {
LABEL_25:
    if ((v4 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(double *)(v3 + 184));
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x80000) == 0)
  {
LABEL_26:
    if ((v4 & 0x2000000) == 0)
      return this;
    return PB::Writer::write(a2);
  }
LABEL_52:
  this = PB::Writer::write(a2, *(double *)(v3 + 160));
  if ((*(_DWORD *)(v3 + 212) & 0x2000000) != 0)
    return PB::Writer::write(a2);
  return this;
}

uint64_t CMMsl::RunningVerticalOscillationGradientBoostedSignals::hash_value(CMMsl::RunningVerticalOscillationGradientBoostedSignals *this)
{
  int v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;

  v1 = *((_DWORD *)this + 53);
  if ((v1 & 0x40000) == 0)
  {
    v2 = 0.0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_3;
LABEL_79:
    v3 = 0.0;
    if ((v1 & 0x400) != 0)
      goto LABEL_6;
LABEL_80:
    v4 = 0.0;
    if ((v1 & 0x800) != 0)
      goto LABEL_9;
LABEL_81:
    v5 = 0.0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_12;
LABEL_82:
    v6 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_15;
LABEL_83:
    v7 = 0.0;
    if ((v1 & 0x1000000) != 0)
      goto LABEL_18;
LABEL_84:
    v8 = 0.0;
    if ((v1 & 0x200000) != 0)
      goto LABEL_21;
LABEL_85:
    v9 = 0.0;
    if ((v1 & 0x100000) != 0)
      goto LABEL_24;
LABEL_86:
    v10 = 0.0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_27;
LABEL_87:
    v11 = 0.0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_30;
LABEL_88:
    v12 = 0.0;
    if ((v1 & 0x200) != 0)
      goto LABEL_33;
LABEL_89:
    v13 = 0.0;
    if ((v1 & 0x40) != 0)
      goto LABEL_36;
LABEL_90:
    v14 = 0.0;
    if ((v1 & 0x20) != 0)
      goto LABEL_39;
LABEL_91:
    v15 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_42;
LABEL_92:
    v16 = 0.0;
    if ((v1 & 0x800000) != 0)
      goto LABEL_45;
LABEL_93:
    v17 = 0.0;
    if ((v1 & 0x10) != 0)
      goto LABEL_48;
LABEL_94:
    v18 = 0.0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_51;
LABEL_95:
    v19 = 0.0;
    if ((v1 & 0x100) != 0)
      goto LABEL_54;
LABEL_96:
    v20 = 0.0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_57;
LABEL_97:
    v21 = 0.0;
    if ((v1 & 0x80) != 0)
      goto LABEL_60;
LABEL_98:
    v22 = 0.0;
    if ((v1 & 4) != 0)
      goto LABEL_63;
LABEL_99:
    v23 = 0.0;
    if ((v1 & 1) != 0)
      goto LABEL_66;
LABEL_100:
    v24 = 0.0;
    if ((v1 & 0x400000) != 0)
      goto LABEL_69;
LABEL_101:
    v25 = 0.0;
    if ((v1 & 0x80000) != 0)
      goto LABEL_72;
    goto LABEL_102;
  }
  v2 = *((double *)this + 19);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 0x4000) == 0)
    goto LABEL_79;
LABEL_3:
  v3 = *((double *)this + 15);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 0x400) == 0)
    goto LABEL_80;
LABEL_6:
  v4 = *((double *)this + 11);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 0x800) == 0)
    goto LABEL_81;
LABEL_9:
  v5 = *((double *)this + 12);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((v1 & 0x1000) == 0)
    goto LABEL_82;
LABEL_12:
  v6 = *((double *)this + 13);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_83;
LABEL_15:
  v7 = *((double *)this + 2);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((v1 & 0x1000000) == 0)
    goto LABEL_84;
LABEL_18:
  v8 = *((double *)this + 25);
  if (v8 == 0.0)
    v8 = 0.0;
  if ((v1 & 0x200000) == 0)
    goto LABEL_85;
LABEL_21:
  v9 = *((double *)this + 22);
  if (v9 == 0.0)
    v9 = 0.0;
  if ((v1 & 0x100000) == 0)
    goto LABEL_86;
LABEL_24:
  v10 = *((double *)this + 21);
  if (v10 == 0.0)
    v10 = 0.0;
  if ((v1 & 0x20000) == 0)
    goto LABEL_87;
LABEL_27:
  v11 = *((double *)this + 18);
  if (v11 == 0.0)
    v11 = 0.0;
  if ((v1 & 0x8000) == 0)
    goto LABEL_88;
LABEL_30:
  v12 = *((double *)this + 16);
  if (v12 == 0.0)
    v12 = 0.0;
  if ((v1 & 0x200) == 0)
    goto LABEL_89;
LABEL_33:
  v13 = *((double *)this + 10);
  if (v13 == 0.0)
    v13 = 0.0;
  if ((v1 & 0x40) == 0)
    goto LABEL_90;
LABEL_36:
  v14 = *((double *)this + 7);
  if (v14 == 0.0)
    v14 = 0.0;
  if ((v1 & 0x20) == 0)
    goto LABEL_91;
LABEL_39:
  v15 = *((double *)this + 6);
  if (v15 == 0.0)
    v15 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_92;
LABEL_42:
  v16 = *((double *)this + 4);
  if (v16 == 0.0)
    v16 = 0.0;
  if ((v1 & 0x800000) == 0)
    goto LABEL_93;
LABEL_45:
  v17 = *((double *)this + 24);
  if (v17 == 0.0)
    v17 = 0.0;
  if ((v1 & 0x10) == 0)
    goto LABEL_94;
LABEL_48:
  v18 = *((double *)this + 5);
  if (v18 == 0.0)
    v18 = 0.0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_95;
LABEL_51:
  v19 = *((double *)this + 14);
  if (v19 == 0.0)
    v19 = 0.0;
  if ((v1 & 0x100) == 0)
    goto LABEL_96;
LABEL_54:
  v20 = *((double *)this + 9);
  if (v20 == 0.0)
    v20 = 0.0;
  if ((v1 & 0x10000) == 0)
    goto LABEL_97;
LABEL_57:
  v21 = *((double *)this + 17);
  if (v21 == 0.0)
    v21 = 0.0;
  if ((v1 & 0x80) == 0)
    goto LABEL_98;
LABEL_60:
  v22 = *((double *)this + 8);
  if (v22 == 0.0)
    v22 = 0.0;
  if ((v1 & 4) == 0)
    goto LABEL_99;
LABEL_63:
  v23 = *((double *)this + 3);
  if (v23 == 0.0)
    v23 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_100;
LABEL_66:
  v24 = *((double *)this + 1);
  if (v24 == 0.0)
    v24 = 0.0;
  if ((v1 & 0x400000) == 0)
    goto LABEL_101;
LABEL_69:
  v25 = *((double *)this + 23);
  if (v25 == 0.0)
    v25 = 0.0;
  if ((v1 & 0x80000) != 0)
  {
LABEL_72:
    v26 = *((double *)this + 20);
    if (v26 == 0.0)
      v26 = 0.0;
    if ((v1 & 0x2000000) != 0)
      goto LABEL_75;
LABEL_103:
    v27 = 0;
    return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13 ^ *(_QWORD *)&v14 ^ *(_QWORD *)&v15 ^ *(_QWORD *)&v16 ^ *(_QWORD *)&v17 ^ *(_QWORD *)&v18 ^ *(_QWORD *)&v19 ^ *(_QWORD *)&v20 ^ *(_QWORD *)&v21 ^ *(_QWORD *)&v22 ^ *(_QWORD *)&v23 ^ *(_QWORD *)&v24 ^ *(_QWORD *)&v25 ^ *(_QWORD *)&v26 ^ v27;
  }
LABEL_102:
  v26 = 0.0;
  if ((v1 & 0x2000000) == 0)
    goto LABEL_103;
LABEL_75:
  v27 = *((unsigned __int8 *)this + 208);
  return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13 ^ *(_QWORD *)&v14 ^ *(_QWORD *)&v15 ^ *(_QWORD *)&v16 ^ *(_QWORD *)&v17 ^ *(_QWORD *)&v18 ^ *(_QWORD *)&v19 ^ *(_QWORD *)&v20 ^ *(_QWORD *)&v21 ^ *(_QWORD *)&v22 ^ *(_QWORD *)&v23 ^ *(_QWORD *)&v24 ^ *(_QWORD *)&v25 ^ *(_QWORD *)&v26 ^ v27;
}

void CMMsl::RunningVerticalOscillationSignals::~RunningVerticalOscillationSignals(CMMsl::RunningVerticalOscillationSignals *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::RunningVerticalOscillationSignals::RunningVerticalOscillationSignals(CMMsl::RunningVerticalOscillationSignals *this, const CMMsl::RunningVerticalOscillationSignals *a2)
{
  int v2;
  int v3;
  double result;

  *(_QWORD *)this = &off_251360A48;
  *((_DWORD *)this + 52) = 0;
  v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x400) != 0)
  {
    result = *((double *)a2 + 11);
    v3 = 1024;
    *((_DWORD *)this + 52) = 1024;
    *((double *)this + 11) = result;
    v2 = *((_DWORD *)a2 + 52);
    if ((v2 & 0x10000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x10000) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 17);
    v3 |= 0x10000u;
    *((_DWORD *)this + 52) = v3;
    *((double *)this + 17) = result;
    v2 = *((_DWORD *)a2 + 52);
  }
LABEL_6:
  if ((v2 & 1) != 0)
  {
    result = *((double *)a2 + 1);
    v3 |= 1u;
    *((_DWORD *)this + 52) = v3;
    *((double *)this + 1) = result;
    v2 = *((_DWORD *)a2 + 52);
    if ((v2 & 0x800000) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_32;
    }
  }
  else if ((v2 & 0x800000) == 0)
  {
    goto LABEL_8;
  }
  result = *((double *)a2 + 24);
  v3 |= 0x800000u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 24) = result;
  v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x800) == 0)
      goto LABEL_10;
    goto LABEL_33;
  }
LABEL_32:
  result = *((double *)a2 + 7);
  v3 |= 0x40u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 7) = result;
  v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x800) == 0)
  {
LABEL_10:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_11;
    goto LABEL_34;
  }
LABEL_33:
  result = *((double *)a2 + 12);
  v3 |= 0x800u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 12) = result;
  v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_11:
    if ((v2 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_35;
  }
LABEL_34:
  result = *((double *)a2 + 25);
  v3 |= 0x1000000u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 25) = result;
  v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x20) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0)
      goto LABEL_13;
    goto LABEL_36;
  }
LABEL_35:
  result = *((double *)a2 + 6);
  v3 |= 0x20u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 6) = result;
  v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 0x100000) == 0)
      goto LABEL_14;
    goto LABEL_37;
  }
LABEL_36:
  result = *((double *)a2 + 8);
  v3 |= 0x80u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 8) = result;
  v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x100000) == 0)
  {
LABEL_14:
    if ((v2 & 8) == 0)
      goto LABEL_15;
    goto LABEL_38;
  }
LABEL_37:
  result = *((double *)a2 + 21);
  v3 |= 0x100000u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 21) = result;
  v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 8) == 0)
  {
LABEL_15:
    if ((v2 & 0x200000) == 0)
      goto LABEL_16;
    goto LABEL_39;
  }
LABEL_38:
  result = *((double *)a2 + 4);
  v3 |= 8u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 4) = result;
  v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x200000) == 0)
  {
LABEL_16:
    if ((v2 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_40;
  }
LABEL_39:
  result = *((double *)a2 + 22);
  v3 |= 0x200000u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 22) = result;
  v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x8000) == 0)
  {
LABEL_17:
    if ((v2 & 4) == 0)
      goto LABEL_18;
    goto LABEL_41;
  }
LABEL_40:
  result = *((double *)a2 + 16);
  v3 |= 0x8000u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 16) = result;
  v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 4) == 0)
  {
LABEL_18:
    if ((v2 & 0x10) == 0)
      goto LABEL_19;
    goto LABEL_42;
  }
LABEL_41:
  result = *((double *)a2 + 3);
  v3 |= 4u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 3) = result;
  v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x10) == 0)
  {
LABEL_19:
    if ((v2 & 0x200) == 0)
      goto LABEL_20;
    goto LABEL_43;
  }
LABEL_42:
  result = *((double *)a2 + 5);
  v3 |= 0x10u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 5) = result;
  v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x200) == 0)
  {
LABEL_20:
    if ((v2 & 0x2000) == 0)
      goto LABEL_21;
    goto LABEL_44;
  }
LABEL_43:
  result = *((double *)a2 + 10);
  v3 |= 0x200u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 10) = result;
  v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x2000) == 0)
  {
LABEL_21:
    if ((v2 & 0x1000) == 0)
      goto LABEL_22;
    goto LABEL_45;
  }
LABEL_44:
  result = *((double *)a2 + 14);
  v3 |= 0x2000u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 14) = result;
  v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x1000) == 0)
  {
LABEL_22:
    if ((v2 & 0x4000) == 0)
      goto LABEL_23;
    goto LABEL_46;
  }
LABEL_45:
  result = *((double *)a2 + 13);
  v3 |= 0x1000u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 13) = result;
  v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x4000) == 0)
  {
LABEL_23:
    if ((v2 & 0x80000) == 0)
      goto LABEL_24;
    goto LABEL_47;
  }
LABEL_46:
  result = *((double *)a2 + 15);
  v3 |= 0x4000u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 15) = result;
  v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x80000) == 0)
  {
LABEL_24:
    if ((v2 & 0x400000) == 0)
      goto LABEL_25;
    goto LABEL_48;
  }
LABEL_47:
  result = *((double *)a2 + 20);
  v3 |= 0x80000u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 20) = result;
  v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x400000) == 0)
  {
LABEL_25:
    if ((v2 & 0x40000) == 0)
      goto LABEL_26;
    goto LABEL_49;
  }
LABEL_48:
  result = *((double *)a2 + 23);
  v3 |= 0x400000u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 23) = result;
  v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x40000) == 0)
  {
LABEL_26:
    if ((v2 & 0x20000) == 0)
      goto LABEL_27;
    goto LABEL_50;
  }
LABEL_49:
  result = *((double *)a2 + 19);
  v3 |= 0x40000u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 19) = result;
  v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x20000) == 0)
  {
LABEL_27:
    if ((v2 & 0x100) == 0)
      goto LABEL_28;
    goto LABEL_51;
  }
LABEL_50:
  result = *((double *)a2 + 18);
  v3 |= 0x20000u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 18) = result;
  v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x100) == 0)
  {
LABEL_28:
    if ((v2 & 2) == 0)
      return result;
LABEL_52:
    result = *((double *)a2 + 2);
    *((_DWORD *)this + 52) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
LABEL_51:
  result = *((double *)a2 + 9);
  v3 |= 0x100u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 9) = result;
  if ((*((_DWORD *)a2 + 52) & 2) != 0)
    goto LABEL_52;
  return result;
}

CMMsl *CMMsl::RunningVerticalOscillationSignals::operator=(CMMsl *a1, const CMMsl::RunningVerticalOscillationSignals *a2)
{
  CMMsl::RunningVerticalOscillationSignals *v3;
  _BYTE v5[216];

  if (a1 != a2)
  {
    CMMsl::RunningVerticalOscillationSignals::RunningVerticalOscillationSignals((CMMsl::RunningVerticalOscillationSignals *)v5, a2);
    CMMsl::swap(a1, (CMMsl::RunningVerticalOscillationSignals *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::RunningVerticalOscillationSignals *a2, CMMsl::RunningVerticalOscillationSignals *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double result;

  v3 = *((_DWORD *)this + 52);
  *((_DWORD *)this + 52) = *((_DWORD *)a2 + 52);
  *((_DWORD *)a2 + 52) = v3;
  v4 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v4;
  v5 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v5;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  v7 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = *((_QWORD *)a2 + 24);
  *((_QWORD *)a2 + 24) = v7;
  v8 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v8;
  v9 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v9;
  v10 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = *((_QWORD *)a2 + 25);
  *((_QWORD *)a2 + 25) = v10;
  v11 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v11;
  v12 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v12;
  v13 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = *((_QWORD *)a2 + 21);
  *((_QWORD *)a2 + 21) = v13;
  v14 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v14;
  v15 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = *((_QWORD *)a2 + 22);
  *((_QWORD *)a2 + 22) = v15;
  v16 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v16;
  v17 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v17;
  v18 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v18;
  v19 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v19;
  v20 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v20;
  v21 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v21;
  v22 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v22;
  v23 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = *((_QWORD *)a2 + 20);
  *((_QWORD *)a2 + 20) = v23;
  v24 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = *((_QWORD *)a2 + 23);
  *((_QWORD *)a2 + 23) = v24;
  v25 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 19) = v25;
  v26 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v26;
  v27 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v27;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::RunningVerticalOscillationSignals::RunningVerticalOscillationSignals(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_251360A48;
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  *(_DWORD *)(a2 + 208) = 0;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

CMMsl *CMMsl::RunningVerticalOscillationSignals::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::RunningVerticalOscillationSignals *v3;
  _BYTE v5[216];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::RunningVerticalOscillationSignals::RunningVerticalOscillationSignals((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::RunningVerticalOscillationSignals *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::RunningVerticalOscillationSignals::formatText(CMMsl::RunningVerticalOscillationSignals *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 52);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "acceleration", *((double *)this + 1));
    v5 = *((_DWORD *)this + 52);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_30;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "centerOfMassAccelAmplitude", *((double *)this + 2));
  v5 = *((_DWORD *)this + 52);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "centerOfMassAccelMax", *((double *)this + 3));
  v5 = *((_DWORD *)this + 52);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "centripetalAccelMeanY", *((double *)this + 4));
  v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "centripetalAccelMeanZ", *((double *)this + 5));
  v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "height", *((double *)this + 6));
  v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "position", *((double *)this + 7));
  v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "rotationProjectedGravityAmplitude", *((double *)this + 8));
  v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "rotationRateMean", *((double *)this + 9));
  v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "rotationRateMeanX", *((double *)this + 10));
  v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 11));
  v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "strideLengthCadence", *((double *)this + 12));
  v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "swingAccelAmplitudeY", *((double *)this + 13));
  v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "swingAccelAmplitudeZ", *((double *)this + 14));
  v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "swingAccelMaxY", *((double *)this + 15));
  v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "swingAccelMaxZ", *((double *)this + 16));
  v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 17));
  v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "userAccelAmplitudeZ", *((double *)this + 18));
  v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "userAccelMaxX", *((double *)this + 19));
  v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0)
      goto LABEL_22;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "userAccelMaxY", *((double *)this + 20));
  v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0)
      goto LABEL_23;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "userAccelMean", *((double *)this + 21));
  v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x200000) == 0)
  {
LABEL_23:
    if ((v5 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "userAccelMeanY", *((double *)this + 22));
  v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x400000) == 0)
  {
LABEL_24:
    if ((v5 & 0x800000) == 0)
      goto LABEL_25;
LABEL_51:
    PB::TextFormatter::format(a2, "velocity", *((double *)this + 24));
    if ((*((_DWORD *)this + 52) & 0x1000000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_26;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "userAccelProjectedGravityAmplitudeCadence", *((double *)this + 23));
  v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x800000) != 0)
    goto LABEL_51;
LABEL_25:
  if ((v5 & 0x1000000) != 0)
LABEL_26:
    PB::TextFormatter::format(a2, "weight", *((double *)this + 25));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::RunningVerticalOscillationSignals::readFrom(CMMsl::RunningVerticalOscillationSignals *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_100;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 52) |= 0x400u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_97;
        *((_QWORD *)this + 11) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_99;
      case 2u:
        *((_DWORD *)this + 52) |= 0x10000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_97;
        *((_QWORD *)this + 17) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_99;
      case 3u:
        *((_DWORD *)this + 52) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_97;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_99;
      case 4u:
        *((_DWORD *)this + 52) |= 0x800000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_97;
        *((_QWORD *)this + 24) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_99;
      case 5u:
        *((_DWORD *)this + 52) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_97;
        *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_99;
      case 6u:
        *((_DWORD *)this + 52) |= 0x800u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_97;
        *((_QWORD *)this + 12) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_99;
      case 7u:
        *((_DWORD *)this + 52) |= 0x1000000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_97;
        *((_QWORD *)this + 25) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_99;
      case 8u:
        *((_DWORD *)this + 52) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_97;
        *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_99;
      case 9u:
        *((_DWORD *)this + 52) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_97;
        *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_99;
      case 0xAu:
        *((_DWORD *)this + 52) |= 0x100000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_97;
        *((_QWORD *)this + 21) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_99;
      case 0xBu:
        *((_DWORD *)this + 52) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_97;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_99;
      case 0xCu:
        *((_DWORD *)this + 52) |= 0x200000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_97;
        *((_QWORD *)this + 22) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_99;
      case 0xDu:
        *((_DWORD *)this + 52) |= 0x8000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_97;
        *((_QWORD *)this + 16) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_99;
      case 0xEu:
        *((_DWORD *)this + 52) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_97;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_99;
      case 0xFu:
        *((_DWORD *)this + 52) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_97;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_99;
      case 0x10u:
        *((_DWORD *)this + 52) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_97;
        *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_99;
      case 0x11u:
        *((_DWORD *)this + 52) |= 0x2000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_97;
        *((_QWORD *)this + 14) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_99;
      case 0x12u:
        *((_DWORD *)this + 52) |= 0x1000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_97;
        *((_QWORD *)this + 13) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_99;
      case 0x13u:
        *((_DWORD *)this + 52) |= 0x4000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_97;
        *((_QWORD *)this + 15) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_99;
      case 0x14u:
        *((_DWORD *)this + 52) |= 0x80000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_97;
        *((_QWORD *)this + 20) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_99;
      case 0x15u:
        *((_DWORD *)this + 52) |= 0x400000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_97;
        *((_QWORD *)this + 23) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_99;
      case 0x16u:
        *((_DWORD *)this + 52) |= 0x40000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_97;
        *((_QWORD *)this + 19) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_99;
      case 0x17u:
        *((_DWORD *)this + 52) |= 0x20000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_97;
        *((_QWORD *)this + 18) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_99;
      case 0x18u:
        *((_DWORD *)this + 52) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_97;
        *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_99;
      case 0x19u:
        *((_DWORD *)this + 52) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
        {
LABEL_97:
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_99:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_100:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::RunningVerticalOscillationSignals::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 208);
  if ((v4 & 0x400) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 88));
    v4 = *(_DWORD *)(v3 + 208);
    if ((v4 & 0x10000) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_29;
    }
  }
  else if ((v4 & 0x10000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 136));
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 0x800000) == 0)
      goto LABEL_5;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x800000) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(double *)(v3 + 192));
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x800) == 0)
      goto LABEL_7;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x800) == 0)
  {
LABEL_7:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_8;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(double *)(v3 + 96));
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_8:
    if ((v4 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(double *)(v3 + 200));
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x20) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 0x100000) == 0)
      goto LABEL_11;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x100000) == 0)
  {
LABEL_11:
    if ((v4 & 8) == 0)
      goto LABEL_12;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(double *)(v3 + 168));
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 8) == 0)
  {
LABEL_12:
    if ((v4 & 0x200000) == 0)
      goto LABEL_13;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x200000) == 0)
  {
LABEL_13:
    if ((v4 & 0x8000) == 0)
      goto LABEL_14;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(double *)(v3 + 176));
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x8000) == 0)
  {
LABEL_14:
    if ((v4 & 4) == 0)
      goto LABEL_15;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(double *)(v3 + 128));
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 4) == 0)
  {
LABEL_15:
    if ((v4 & 0x10) == 0)
      goto LABEL_16;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x10) == 0)
  {
LABEL_16:
    if ((v4 & 0x200) == 0)
      goto LABEL_17;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x200) == 0)
  {
LABEL_17:
    if ((v4 & 0x2000) == 0)
      goto LABEL_18;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(double *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x2000) == 0)
  {
LABEL_18:
    if ((v4 & 0x1000) == 0)
      goto LABEL_19;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(double *)(v3 + 112));
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x1000) == 0)
  {
LABEL_19:
    if ((v4 & 0x4000) == 0)
      goto LABEL_20;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(double *)(v3 + 104));
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x4000) == 0)
  {
LABEL_20:
    if ((v4 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(double *)(v3 + 120));
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x80000) == 0)
  {
LABEL_21:
    if ((v4 & 0x400000) == 0)
      goto LABEL_22;
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(double *)(v3 + 160));
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x400000) == 0)
  {
LABEL_22:
    if ((v4 & 0x40000) == 0)
      goto LABEL_23;
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(double *)(v3 + 184));
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x40000) == 0)
  {
LABEL_23:
    if ((v4 & 0x20000) == 0)
      goto LABEL_24;
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(double *)(v3 + 152));
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x20000) == 0)
  {
LABEL_24:
    if ((v4 & 0x100) == 0)
      goto LABEL_25;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(double *)(v3 + 144));
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x100) == 0)
  {
LABEL_25:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 16));
  }
LABEL_50:
  this = PB::Writer::write(a2, *(double *)(v3 + 72));
  if ((*(_DWORD *)(v3 + 208) & 2) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 16));
  return this;
}

uint64_t CMMsl::RunningVerticalOscillationSignals::hash_value(CMMsl::RunningVerticalOscillationSignals *this)
{
  int v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;

  v1 = *((_DWORD *)this + 52);
  if ((v1 & 0x400) == 0)
  {
    v2 = 0.0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_3;
LABEL_78:
    v3 = 0.0;
    if ((v1 & 1) != 0)
      goto LABEL_6;
LABEL_79:
    v4 = 0.0;
    if ((v1 & 0x800000) != 0)
      goto LABEL_9;
LABEL_80:
    v5 = 0.0;
    if ((v1 & 0x40) != 0)
      goto LABEL_12;
LABEL_81:
    v6 = 0.0;
    if ((v1 & 0x800) != 0)
      goto LABEL_15;
LABEL_82:
    v7 = 0.0;
    if ((v1 & 0x1000000) != 0)
      goto LABEL_18;
LABEL_83:
    v8 = 0.0;
    if ((v1 & 0x20) != 0)
      goto LABEL_21;
LABEL_84:
    v9 = 0.0;
    if ((v1 & 0x80) != 0)
      goto LABEL_24;
LABEL_85:
    v10 = 0.0;
    if ((v1 & 0x100000) != 0)
      goto LABEL_27;
LABEL_86:
    v11 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_30;
LABEL_87:
    v12 = 0.0;
    if ((v1 & 0x200000) != 0)
      goto LABEL_33;
LABEL_88:
    v13 = 0.0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_36;
LABEL_89:
    v14 = 0.0;
    if ((v1 & 4) != 0)
      goto LABEL_39;
LABEL_90:
    v15 = 0.0;
    if ((v1 & 0x10) != 0)
      goto LABEL_42;
LABEL_91:
    v16 = 0.0;
    if ((v1 & 0x200) != 0)
      goto LABEL_45;
LABEL_92:
    v17 = 0.0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_48;
LABEL_93:
    v18 = 0.0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_51;
LABEL_94:
    v19 = 0.0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_54;
LABEL_95:
    v20 = 0.0;
    if ((v1 & 0x80000) != 0)
      goto LABEL_57;
LABEL_96:
    v21 = 0.0;
    if ((v1 & 0x400000) != 0)
      goto LABEL_60;
LABEL_97:
    v22 = 0.0;
    if ((v1 & 0x40000) != 0)
      goto LABEL_63;
LABEL_98:
    v23 = 0.0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_66;
LABEL_99:
    v24 = 0.0;
    if ((v1 & 0x100) != 0)
      goto LABEL_69;
    goto LABEL_100;
  }
  v2 = *((double *)this + 11);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 0x10000) == 0)
    goto LABEL_78;
LABEL_3:
  v3 = *((double *)this + 17);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_79;
LABEL_6:
  v4 = *((double *)this + 1);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 0x800000) == 0)
    goto LABEL_80;
LABEL_9:
  v5 = *((double *)this + 24);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((v1 & 0x40) == 0)
    goto LABEL_81;
LABEL_12:
  v6 = *((double *)this + 7);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((v1 & 0x800) == 0)
    goto LABEL_82;
LABEL_15:
  v7 = *((double *)this + 12);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((v1 & 0x1000000) == 0)
    goto LABEL_83;
LABEL_18:
  v8 = *((double *)this + 25);
  if (v8 == 0.0)
    v8 = 0.0;
  if ((v1 & 0x20) == 0)
    goto LABEL_84;
LABEL_21:
  v9 = *((double *)this + 6);
  if (v9 == 0.0)
    v9 = 0.0;
  if ((v1 & 0x80) == 0)
    goto LABEL_85;
LABEL_24:
  v10 = *((double *)this + 8);
  if (v10 == 0.0)
    v10 = 0.0;
  if ((v1 & 0x100000) == 0)
    goto LABEL_86;
LABEL_27:
  v11 = *((double *)this + 21);
  if (v11 == 0.0)
    v11 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_87;
LABEL_30:
  v12 = *((double *)this + 4);
  if (v12 == 0.0)
    v12 = 0.0;
  if ((v1 & 0x200000) == 0)
    goto LABEL_88;
LABEL_33:
  v13 = *((double *)this + 22);
  if (v13 == 0.0)
    v13 = 0.0;
  if ((v1 & 0x8000) == 0)
    goto LABEL_89;
LABEL_36:
  v14 = *((double *)this + 16);
  if (v14 == 0.0)
    v14 = 0.0;
  if ((v1 & 4) == 0)
    goto LABEL_90;
LABEL_39:
  v15 = *((double *)this + 3);
  if (v15 == 0.0)
    v15 = 0.0;
  if ((v1 & 0x10) == 0)
    goto LABEL_91;
LABEL_42:
  v16 = *((double *)this + 5);
  if (v16 == 0.0)
    v16 = 0.0;
  if ((v1 & 0x200) == 0)
    goto LABEL_92;
LABEL_45:
  v17 = *((double *)this + 10);
  if (v17 == 0.0)
    v17 = 0.0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_93;
LABEL_48:
  v18 = *((double *)this + 14);
  if (v18 == 0.0)
    v18 = 0.0;
  if ((v1 & 0x1000) == 0)
    goto LABEL_94;
LABEL_51:
  v19 = *((double *)this + 13);
  if (v19 == 0.0)
    v19 = 0.0;
  if ((v1 & 0x4000) == 0)
    goto LABEL_95;
LABEL_54:
  v20 = *((double *)this + 15);
  if (v20 == 0.0)
    v20 = 0.0;
  if ((v1 & 0x80000) == 0)
    goto LABEL_96;
LABEL_57:
  v21 = *((double *)this + 20);
  if (v21 == 0.0)
    v21 = 0.0;
  if ((v1 & 0x400000) == 0)
    goto LABEL_97;
LABEL_60:
  v22 = *((double *)this + 23);
  if (v22 == 0.0)
    v22 = 0.0;
  if ((v1 & 0x40000) == 0)
    goto LABEL_98;
LABEL_63:
  v23 = *((double *)this + 19);
  if (v23 == 0.0)
    v23 = 0.0;
  if ((v1 & 0x20000) == 0)
    goto LABEL_99;
LABEL_66:
  v24 = *((double *)this + 18);
  if (v24 == 0.0)
    v24 = 0.0;
  if ((v1 & 0x100) != 0)
  {
LABEL_69:
    v25 = *((double *)this + 9);
    if (v25 == 0.0)
      v25 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_72;
LABEL_101:
    v26 = 0.0;
    return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13 ^ *(_QWORD *)&v14 ^ *(_QWORD *)&v15 ^ *(_QWORD *)&v16 ^ *(_QWORD *)&v17 ^ *(_QWORD *)&v18 ^ *(_QWORD *)&v19 ^ *(_QWORD *)&v20 ^ *(_QWORD *)&v21 ^ *(_QWORD *)&v22 ^ *(_QWORD *)&v23 ^ *(_QWORD *)&v24 ^ *(_QWORD *)&v25 ^ *(_QWORD *)&v26;
  }
LABEL_100:
  v25 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_101;
LABEL_72:
  v26 = *((double *)this + 2);
  if (v26 == 0.0)
    v26 = 0.0;
  return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13 ^ *(_QWORD *)&v14 ^ *(_QWORD *)&v15 ^ *(_QWORD *)&v16 ^ *(_QWORD *)&v17 ^ *(_QWORD *)&v18 ^ *(_QWORD *)&v19 ^ *(_QWORD *)&v20 ^ *(_QWORD *)&v21 ^ *(_QWORD *)&v22 ^ *(_QWORD *)&v23 ^ *(_QWORD *)&v24 ^ *(_QWORD *)&v25 ^ *(_QWORD *)&v26;
}

uint64_t CMMsl::SMEstimatedTimeOfArrival::SMEstimatedTimeOfArrival(uint64_t this)
{
  *(_QWORD *)this = &off_251360A80;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251360A80;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

void CMMsl::SMEstimatedTimeOfArrival::~SMEstimatedTimeOfArrival(CMMsl::SMEstimatedTimeOfArrival *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::SMEstimatedTimeOfArrival::SMEstimatedTimeOfArrival(uint64_t this, const CMMsl::SMEstimatedTimeOfArrival *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  *(_QWORD *)this = &off_251360A80;
  *(_DWORD *)(this + 36) = 0;
  v2 = *((_BYTE *)a2 + 36);
  if ((v2 & 4) != 0)
  {
    v4 = *((_QWORD *)a2 + 3);
    v3 = 4;
    *(_BYTE *)(this + 36) = 4;
    *(_QWORD *)(this + 24) = v4;
    v2 = *((_BYTE *)a2 + 36);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 36) & 1) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 1);
    v3 |= 1u;
    *(_BYTE *)(this + 36) = v3;
    *(_QWORD *)(this + 8) = v5;
    v2 = *((_BYTE *)a2 + 36);
  }
LABEL_6:
  if ((v2 & 2) == 0)
  {
    if ((v2 & 8) == 0)
      return this;
LABEL_10:
    v7 = *((_DWORD *)a2 + 8);
    *(_BYTE *)(this + 36) = v3 | 8;
    *(_DWORD *)(this + 32) = v7;
    return this;
  }
  v6 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_BYTE *)(this + 36) = v3;
  *(_QWORD *)(this + 16) = v6;
  if ((*((_BYTE *)a2 + 36) & 8) != 0)
    goto LABEL_10;
  return this;
}

uint64_t CMMsl::SMEstimatedTimeOfArrival::operator=(uint64_t a1, const CMMsl::SMEstimatedTimeOfArrival *a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[8];
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  if ((const CMMsl::SMEstimatedTimeOfArrival *)a1 != a2)
  {
    CMMsl::SMEstimatedTimeOfArrival::SMEstimatedTimeOfArrival((uint64_t)v7, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v3;
    *(_QWORD *)&v3 = v10;
    v4 = *(_QWORD *)(a1 + 24);
    v5 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 24) = v9;
    *(_QWORD *)(a1 + 32) = v3;
    v9 = v4;
    v10 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SMEstimatedTimeOfArrival *a2, CMMsl::SMEstimatedTimeOfArrival *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  double result;
  int v7;

  v3 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v3;
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  v7 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v7;
  return result;
}

double CMMsl::SMEstimatedTimeOfArrival::SMEstimatedTimeOfArrival(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_251360A80;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_251360A80;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return result;
}

uint64_t CMMsl::SMEstimatedTimeOfArrival::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  void (**v8)(CMMsl::SMEstimatedTimeOfArrival *__hidden);
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    v8 = &off_251360A80;
    v3 = *(_QWORD *)(a2 + 24);
    v4 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 36) = 0;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    v9 = v5;
    *(_QWORD *)&v5 = *(_QWORD *)(a1 + 24);
    v6 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 24) = v3;
    *(_QWORD *)(a1 + 32) = v4;
    v10 = v5;
    v11 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::SMEstimatedTimeOfArrival::formatText(CMMsl::SMEstimatedTimeOfArrival *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 36);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "calculatedArrival", *((double *)this + 1));
    v5 = *((_BYTE *)this + 36);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "originalArrival", *((double *)this + 2));
      if ((*((_BYTE *)this + 36) & 4) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 36) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "motionState");
  v5 = *((_BYTE *)this + 36);
  if ((v5 & 2) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 4) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 3));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SMEstimatedTimeOfArrival::readFrom(CMMsl::SMEstimatedTimeOfArrival *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_53;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 36) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_31;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_47;
      case 2u:
        *((_BYTE *)this + 36) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_31;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_47;
      case 3u:
        *((_BYTE *)this + 36) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_47:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_31:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 4u:
        *((_BYTE *)this + 36) |= 8u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v26 = 0;
          v27 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_52;
            }
            v28 = v20++;
            v29 = *(_BYTE *)(v21 + v28);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0)
              break;
            v26 += 7;
            v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_51:
              v2 = v28 + 1;
              goto LABEL_52;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
          goto LABEL_51;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_52;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_52:
        *((_DWORD *)this + 8) = v24;
        break;
      default:
        goto LABEL_19;
    }
LABEL_53:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::SMEstimatedTimeOfArrival::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 36);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24));
    v4 = *(_BYTE *)(v3 + 36);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 36) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_8:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  if ((*(_BYTE *)(v3 + 36) & 8) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

BOOL CMMsl::SMEstimatedTimeOfArrival::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 36) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 36) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 36) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 36) & 8) == 0;
  if ((*(_BYTE *)(a1 + 36) & 8) != 0)
    return (*(_BYTE *)(a2 + 36) & 8) != 0 && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32);
  return v2;
}

uint64_t CMMsl::SMEstimatedTimeOfArrival::hash_value(CMMsl::SMEstimatedTimeOfArrival *this)
{
  double v1;
  double v2;
  double v3;
  uint64_t v4;

  if ((*((_BYTE *)this + 36) & 4) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 36) & 1) != 0)
      goto LABEL_3;
LABEL_13:
    v2 = 0.0;
    if ((*((_BYTE *)this + 36) & 2) != 0)
      goto LABEL_6;
    goto LABEL_14;
  }
  v1 = *((double *)this + 3);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 36) & 1) == 0)
    goto LABEL_13;
LABEL_3:
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 36) & 2) != 0)
  {
LABEL_6:
    v3 = *((double *)this + 2);
    if (v3 == 0.0)
      v3 = 0.0;
    if ((*((_BYTE *)this + 36) & 8) != 0)
      goto LABEL_9;
LABEL_15:
    v4 = 0;
    return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ v4;
  }
LABEL_14:
  v3 = 0.0;
  if ((*((_BYTE *)this + 36) & 8) == 0)
    goto LABEL_15;
LABEL_9:
  v4 = *((int *)this + 8);
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ v4;
}

uint64_t CMMsl::SMLastScreenLock::SMLastScreenLock(uint64_t this)
{
  *(_QWORD *)this = &off_251360AB8;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251360AB8;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void CMMsl::SMLastScreenLock::~SMLastScreenLock(CMMsl::SMLastScreenLock *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::SMLastScreenLock::SMLastScreenLock(CMMsl::SMLastScreenLock *this, const CMMsl::SMLastScreenLock *a2)
{
  char v2;
  double result;

  *(_QWORD *)this = &off_251360AB8;
  *((_DWORD *)this + 6) = 0;
  if ((*((_BYTE *)a2 + 24) & 2) != 0)
  {
    result = *((double *)a2 + 2);
    *((_BYTE *)this + 24) = 2;
    *((double *)this + 2) = result;
    v2 = 3;
    if ((*((_BYTE *)a2 + 24) & 1) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*((_BYTE *)a2 + 24) & 1) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 1);
    *((_BYTE *)this + 24) = v2;
    *((double *)this + 1) = result;
  }
  return result;
}

{
  char v2;
  double result;

  *(_QWORD *)this = &off_251360AB8;
  *((_DWORD *)this + 6) = 0;
  if ((*((_BYTE *)a2 + 24) & 2) != 0)
  {
    result = *((double *)a2 + 2);
    *((_BYTE *)this + 24) = 2;
    *((double *)this + 2) = result;
    v2 = 3;
    if ((*((_BYTE *)a2 + 24) & 1) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*((_BYTE *)a2 + 24) & 1) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 1);
    *((_BYTE *)this + 24) = v2;
    *((double *)this + 1) = result;
  }
  return result;
}

uint64_t CMMsl::SMLastScreenLock::operator=(uint64_t a1, uint64_t a2, double a3, double a4)
{
  char v5;
  char v6;
  int v7;
  __int128 v8;
  void (**v10)(CMMsl::SMLastScreenLock *__hidden);
  __int128 v11;
  int v12;

  if (a1 != a2)
  {
    v10 = &off_251360AB8;
    v12 = 0;
    v5 = *(_BYTE *)(a2 + 24);
    if ((v5 & 2) != 0)
    {
      a3 = *(double *)(a2 + 16);
      LOBYTE(v12) = 2;
      v6 = 3;
      if ((v5 & 1) != 0)
      {
LABEL_6:
        a4 = *(double *)(a2 + 8);
        LOBYTE(v12) = v6;
      }
    }
    else
    {
      v6 = 1;
      if ((*(_BYTE *)(a2 + 24) & 1) != 0)
        goto LABEL_6;
    }
    v7 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v12;
    v12 = v7;
    v8 = *(_OWORD *)(a1 + 8);
    *(double *)(a1 + 8) = a4;
    *(double *)(a1 + 16) = a3;
    v11 = v8;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SMLastScreenLock *a2, CMMsl::SMLastScreenLock *a3)
{
  int v3;
  uint64_t v4;
  double result;

  v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::SMLastScreenLock::SMLastScreenLock(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_251360AB8;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_251360AB8;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::SMLastScreenLock::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  void (**v7)(CMMsl::SMLastScreenLock *__hidden);
  __int128 v8;
  int v9;

  if (a1 != a2)
  {
    v7 = &off_251360AB8;
    v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    v9 = *(_DWORD *)(a1 + 24);
    v4 = *(_OWORD *)(a1 + 8);
    v5 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 24) = v3;
    *(_OWORD *)(a1 + 8) = v5;
    v8 = v4;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::SMLastScreenLock::formatText(CMMsl::SMLastScreenLock *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "lastUnlockDate", *((double *)this + 1));
    v5 = *((_BYTE *)this + 24);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SMLastScreenLock::readFrom(CMMsl::SMLastScreenLock *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          v14 = v16++ > 8;
          if (v14)
            goto LABEL_26;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_26;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 24) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_30;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
      }
      else
      {
        if ((v11 >> 3) != 1)
        {
LABEL_26:
          result = PB::Reader::skip(a2);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          goto LABEL_33;
        }
        *((_BYTE *)this + 24) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
        {
LABEL_30:
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_33;
        }
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
      }
      v2 = *((_QWORD *)a2 + 1) + 8;
      *((_QWORD *)a2 + 1) = v2;
LABEL_33:
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::SMLastScreenLock::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 24);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16));
    v4 = *(_BYTE *)(v3 + 24);
  }
  if ((v4 & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 8));
  return this;
}

BOOL CMMsl::SMLastScreenLock::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 24) & 1) == 0;
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    return (*(_BYTE *)(a2 + 24) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  return v2;
}

uint64_t CMMsl::SMLastScreenLock::hash_value(CMMsl::SMLastScreenLock *this)
{
  double v1;
  double v2;

  if ((*((_BYTE *)this + 24) & 2) != 0)
  {
    v1 = *((double *)this + 2);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 24) & 1) != 0)
      goto LABEL_3;
LABEL_9:
    v2 = 0.0;
    return *(_QWORD *)&v2 ^ *(_QWORD *)&v1;
  }
  v1 = 0.0;
  if ((*((_BYTE *)this + 24) & 1) == 0)
    goto LABEL_9;
LABEL_3:
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1;
}

uint64_t CMMsl::SMLockStateChange::SMLockStateChange(uint64_t this)
{
  *(_QWORD *)this = &off_251360AF0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251360AF0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void CMMsl::SMLockStateChange::~SMLockStateChange(CMMsl::SMLockStateChange *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::SMLockStateChange::SMLockStateChange(CMMsl::SMLockStateChange *this, const CMMsl::SMLockStateChange *a2)
{
  char v2;
  double result;

  *(_QWORD *)this = &off_251360AF0;
  *((_DWORD *)this + 6) = 0;
  if ((*((_BYTE *)a2 + 24) & 2) != 0)
  {
    result = *((double *)a2 + 2);
    *((_BYTE *)this + 24) = 2;
    *((double *)this + 2) = result;
    v2 = 3;
    if ((*((_BYTE *)a2 + 24) & 1) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*((_BYTE *)a2 + 24) & 1) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 1);
    *((_BYTE *)this + 24) = v2;
    *((double *)this + 1) = result;
  }
  return result;
}

{
  char v2;
  double result;

  *(_QWORD *)this = &off_251360AF0;
  *((_DWORD *)this + 6) = 0;
  if ((*((_BYTE *)a2 + 24) & 2) != 0)
  {
    result = *((double *)a2 + 2);
    *((_BYTE *)this + 24) = 2;
    *((double *)this + 2) = result;
    v2 = 3;
    if ((*((_BYTE *)a2 + 24) & 1) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*((_BYTE *)a2 + 24) & 1) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 1);
    *((_BYTE *)this + 24) = v2;
    *((double *)this + 1) = result;
  }
  return result;
}

uint64_t CMMsl::SMLockStateChange::operator=(uint64_t a1, uint64_t a2, double a3, double a4)
{
  char v5;
  char v6;
  int v7;
  __int128 v8;
  void (**v10)(CMMsl::SMLockStateChange *__hidden);
  __int128 v11;
  int v12;

  if (a1 != a2)
  {
    v10 = &off_251360AF0;
    v12 = 0;
    v5 = *(_BYTE *)(a2 + 24);
    if ((v5 & 2) != 0)
    {
      a3 = *(double *)(a2 + 16);
      LOBYTE(v12) = 2;
      v6 = 3;
      if ((v5 & 1) != 0)
      {
LABEL_6:
        a4 = *(double *)(a2 + 8);
        LOBYTE(v12) = v6;
      }
    }
    else
    {
      v6 = 1;
      if ((*(_BYTE *)(a2 + 24) & 1) != 0)
        goto LABEL_6;
    }
    v7 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v12;
    v12 = v7;
    v8 = *(_OWORD *)(a1 + 8);
    *(double *)(a1 + 8) = a4;
    *(double *)(a1 + 16) = a3;
    v11 = v8;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SMLockStateChange *a2, CMMsl::SMLockStateChange *a3)
{
  int v3;
  uint64_t v4;
  double result;

  v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::SMLockStateChange::SMLockStateChange(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_251360AF0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_251360AF0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::SMLockStateChange::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  void (**v7)(CMMsl::SMLockStateChange *__hidden);
  __int128 v8;
  int v9;

  if (a1 != a2)
  {
    v7 = &off_251360AF0;
    v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    v9 = *(_DWORD *)(a1 + 24);
    v4 = *(_OWORD *)(a1 + 8);
    v5 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 24) = v3;
    *(_OWORD *)(a1 + 8) = v5;
    v8 = v4;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::SMLockStateChange::formatText(CMMsl::SMLockStateChange *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "stateChangeType", *((double *)this + 1));
    v5 = *((_BYTE *)this + 24);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SMLockStateChange::readFrom(CMMsl::SMLockStateChange *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          v14 = v16++ > 8;
          if (v14)
            goto LABEL_26;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_26;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 24) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_30;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
      }
      else
      {
        if ((v11 >> 3) != 1)
        {
LABEL_26:
          result = PB::Reader::skip(a2);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          goto LABEL_33;
        }
        *((_BYTE *)this + 24) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
        {
LABEL_30:
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_33;
        }
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
      }
      v2 = *((_QWORD *)a2 + 1) + 8;
      *((_QWORD *)a2 + 1) = v2;
LABEL_33:
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::SMLockStateChange::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 24);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16));
    v4 = *(_BYTE *)(v3 + 24);
  }
  if ((v4 & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 8));
  return this;
}

BOOL CMMsl::SMLockStateChange::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 24) & 1) == 0;
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    return (*(_BYTE *)(a2 + 24) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  return v2;
}

uint64_t CMMsl::SMLockStateChange::hash_value(CMMsl::SMLockStateChange *this)
{
  double v1;
  double v2;

  if ((*((_BYTE *)this + 24) & 2) != 0)
  {
    v1 = *((double *)this + 2);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 24) & 1) != 0)
      goto LABEL_3;
LABEL_9:
    v2 = 0.0;
    return *(_QWORD *)&v2 ^ *(_QWORD *)&v1;
  }
  v1 = 0.0;
  if ((*((_BYTE *)this + 24) & 1) == 0)
    goto LABEL_9;
LABEL_3:
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1;
}

uint64_t CMMsl::SMSessionConfiguration::SMSessionConfiguration(uint64_t this)
{
  *(_QWORD *)this = &off_251360B28;
  *(_DWORD *)(this + 56) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251360B28;
  *(_DWORD *)(this + 56) = 0;
  return this;
}

void CMMsl::SMSessionConfiguration::~SMSessionConfiguration(CMMsl::SMSessionConfiguration *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::SMSessionConfiguration::SMSessionConfiguration(CMMsl::SMSessionConfiguration *this, const CMMsl::SMSessionConfiguration *a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)this = &off_251360B28;
  *((_DWORD *)this + 14) = 0;
  v2 = *((_BYTE *)a2 + 56);
  if ((v2 & 0x10) != 0)
  {
    result = *((double *)a2 + 5);
    v3 = 16;
    *((_BYTE *)this + 56) = 16;
    *((double *)this + 5) = result;
    v2 = *((_BYTE *)a2 + 56);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 56) & 8) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 4);
    v3 |= 8u;
    *((_BYTE *)this + 56) = v3;
    *((double *)this + 4) = result;
    v2 = *((_BYTE *)a2 + 56);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    result = *((double *)a2 + 2);
    v3 |= 2u;
    *((_BYTE *)this + 56) = v3;
    *((double *)this + 2) = result;
    v2 = *((_BYTE *)a2 + 56);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0)
        goto LABEL_9;
      goto LABEL_13;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  result = *((double *)a2 + 3);
  v3 |= 4u;
  *((_BYTE *)this + 56) = v3;
  *((double *)this + 3) = result;
  v2 = *((_BYTE *)a2 + 56);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      return result;
LABEL_14:
    result = *((double *)a2 + 6);
    *((_BYTE *)this + 56) = v3 | 0x20;
    *((double *)this + 6) = result;
    return result;
  }
LABEL_13:
  result = *((double *)a2 + 1);
  v3 |= 1u;
  *((_BYTE *)this + 56) = v3;
  *((double *)this + 1) = result;
  if ((*((_BYTE *)a2 + 56) & 0x20) != 0)
    goto LABEL_14;
  return result;
}

uint64_t CMMsl::SMSessionConfiguration::operator=(uint64_t a1, const CMMsl::SMSessionConfiguration *a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;

  if ((const CMMsl::SMSessionConfiguration *)a1 != a2)
  {
    CMMsl::SMSessionConfiguration::SMSessionConfiguration((CMMsl::SMSessionConfiguration *)&v8, a2);
    v3 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v12;
    v12 = v3;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v9 = v5;
    v6 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v11;
    v11 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SMSessionConfiguration *a2, CMMsl::SMSessionConfiguration *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;

  v3 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v3;
  v4 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v4;
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v8;
  result = *((double *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((double *)a2 + 6) = result;
  return result;
}

double CMMsl::SMSessionConfiguration::SMSessionConfiguration(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_251360B28;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 48);
  *(double *)(a1 + 48) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_251360B28;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 48);
  *(double *)(a1 + 48) = result;
  return result;
}

uint64_t CMMsl::SMSessionConfiguration::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  void (**v9)(CMMsl::SMSessionConfiguration *__hidden);
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;

  if (a1 != a2)
  {
    v9 = &off_251360B28;
    v3 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a2 + 56) = 0;
    v13 = *(_DWORD *)(a1 + 56);
    v11 = *(_OWORD *)(a1 + 24);
    v4 = *(_OWORD *)(a2 + 8);
    v5 = *(_OWORD *)(a2 + 24);
    v10 = *(_OWORD *)(a1 + 8);
    v6 = *(_OWORD *)(a1 + 40);
    v7 = *(_OWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 56) = v3;
    *(_OWORD *)(a1 + 24) = v5;
    *(_OWORD *)(a1 + 8) = v4;
    *(_OWORD *)(a1 + 40) = v7;
    v12 = v6;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::SMSessionConfiguration::formatText(CMMsl::SMSessionConfiguration *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 56);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "destinationHunc", *((double *)this + 1));
    v5 = *((_BYTE *)this + 56);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*((_BYTE *)this + 56) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "destinationLat", *((double *)this + 2));
  v5 = *((_BYTE *)this + 56);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "destinationLon", *((double *)this + 3));
  v5 = *((_BYTE *)this + 56);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(a2, "sessionStartTimestamp", *((double *)this + 5));
    if ((*((_BYTE *)this + 56) & 0x20) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "sessionEndTimestamp", *((double *)this + 4));
  v5 = *((_BYTE *)this + 56);
  if ((v5 & 0x10) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 0x20) != 0)
LABEL_7:
    PB::TextFormatter::format(a2, "transportationType", *((double *)this + 6));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SMSessionConfiguration::readFrom(CMMsl::SMSessionConfiguration *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_43;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 56) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_40;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_42;
      case 2u:
        *((_BYTE *)this + 56) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_40;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_42;
      case 3u:
        *((_BYTE *)this + 56) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_40;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_42;
      case 4u:
        *((_BYTE *)this + 56) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_40;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_42;
      case 5u:
        *((_BYTE *)this + 56) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_40;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_42;
      case 6u:
        *((_BYTE *)this + 56) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_42:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_40:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_43:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::SMSessionConfiguration::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 56);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 40));
    v4 = *(_BYTE *)(v3 + 56);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(this + 56) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 48));
  }
LABEL_12:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  if ((*(_BYTE *)(v3 + 56) & 0x20) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 48));
  return this;
}

BOOL CMMsl::SMSessionConfiguration::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 56) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 56) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 56) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 56) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 56) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 56) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 56) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 56) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 56) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 56) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 56) & 0x20) == 0;
  if ((*(_BYTE *)(a1 + 56) & 0x20) != 0)
    return (*(_BYTE *)(a2 + 56) & 0x20) != 0 && *(double *)(a1 + 48) == *(double *)(a2 + 48);
  return v2;
}

uint64_t CMMsl::SMSessionConfiguration::hash_value(CMMsl::SMSessionConfiguration *this)
{
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;

  if ((*((_BYTE *)this + 56) & 0x10) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 56) & 8) != 0)
      goto LABEL_3;
LABEL_21:
    v2 = 0.0;
    if ((*((_BYTE *)this + 56) & 2) != 0)
      goto LABEL_6;
LABEL_22:
    v3 = 0.0;
    if ((*((_BYTE *)this + 56) & 4) != 0)
      goto LABEL_9;
LABEL_23:
    v4 = 0.0;
    if ((*((_BYTE *)this + 56) & 1) != 0)
      goto LABEL_12;
    goto LABEL_24;
  }
  v1 = *((double *)this + 5);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 56) & 8) == 0)
    goto LABEL_21;
LABEL_3:
  v2 = *((double *)this + 4);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 56) & 2) == 0)
    goto LABEL_22;
LABEL_6:
  v3 = *((double *)this + 2);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((*((_BYTE *)this + 56) & 4) == 0)
    goto LABEL_23;
LABEL_9:
  v4 = *((double *)this + 3);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((*((_BYTE *)this + 56) & 1) != 0)
  {
LABEL_12:
    v5 = *((double *)this + 1);
    if (v5 == 0.0)
      v5 = 0.0;
    if ((*((_BYTE *)this + 56) & 0x20) != 0)
      goto LABEL_15;
LABEL_25:
    v6 = 0.0;
    return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6;
  }
LABEL_24:
  v5 = 0.0;
  if ((*((_BYTE *)this + 56) & 0x20) == 0)
    goto LABEL_25;
LABEL_15:
  v6 = *((double *)this + 6);
  if (v6 == 0.0)
    v6 = 0.0;
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6;
}

void CMMsl::SPUPlaybackExampleDeviceMotion::~SPUPlaybackExampleDeviceMotion(CMMsl::SPUPlaybackExampleDeviceMotion *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_251360B60;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_251360B60;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_251360B60;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::SPUPlaybackExampleDeviceMotion *CMMsl::SPUPlaybackExampleDeviceMotion::SPUPlaybackExampleDeviceMotion(CMMsl::SPUPlaybackExampleDeviceMotion *this, const CMMsl::DeviceMotion **a2)
{
  CMMsl::DeviceMotion *v4;
  float v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_251360B60;
  *((_QWORD *)this + 1) = 0;
  if (a2[1])
  {
    v4 = (CMMsl::DeviceMotion *)operator new();
    v5 = CMMsl::DeviceMotion::DeviceMotion(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v7;
    if (v6)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v6 + 8))(v6, v5);
  }
  return this;
}

uint64_t CMMsl::SPUPlaybackExampleDeviceMotion::operator=(uint64_t a1, const CMMsl::DeviceMotion **a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::SPUPlaybackExampleDeviceMotion *__hidden);
  uint64_t v6;

  if ((const CMMsl::DeviceMotion **)a1 != a2)
  {
    CMMsl::SPUPlaybackExampleDeviceMotion::SPUPlaybackExampleDeviceMotion((CMMsl::SPUPlaybackExampleDeviceMotion *)&v5, a2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v6;
    v5 = &off_251360B60;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::SPUPlaybackExampleDeviceMotion *a2, CMMsl::SPUPlaybackExampleDeviceMotion *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::SPUPlaybackExampleDeviceMotion::SPUPlaybackExampleDeviceMotion(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_251360B60;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_251360B60;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::SPUPlaybackExampleDeviceMotion::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = &off_251360B60;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::SPUPlaybackExampleDeviceMotion::formatText(CMMsl::SPUPlaybackExampleDeviceMotion *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SPUPlaybackExampleDeviceMotion::readFrom(CMMsl::SPUPlaybackExampleDeviceMotion *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v19 = (_DWORD *)operator new();
        *(_QWORD *)v19 = &off_25135D0C0;
        v19[31] = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = (_DWORD *)*((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_27;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SPUPlaybackExampleDeviceMotion::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2);
  return this;
}

CMMsl::DeviceMotion *CMMsl::SPUPlaybackExampleDeviceMotion::hash_value(CMMsl::SPUPlaybackExampleDeviceMotion *this)
{
  CMMsl::DeviceMotion *result;

  result = (CMMsl::DeviceMotion *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::DeviceMotion *)CMMsl::DeviceMotion::hash_value(result);
  return result;
}

_QWORD *CMMsl::SPUPlaybackExampleDeviceMotion::makeSuper(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135D0C0;
    *(_DWORD *)(v2 + 124) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void CMMsl::SPUPlaybackExampleMotionStateUpdate::~SPUPlaybackExampleMotionStateUpdate(CMMsl::SPUPlaybackExampleMotionStateUpdate *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_251360B98;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_251360B98;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_251360B98;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::SPUPlaybackExampleMotionStateUpdate *CMMsl::SPUPlaybackExampleMotionStateUpdate::SPUPlaybackExampleMotionStateUpdate(CMMsl::SPUPlaybackExampleMotionStateUpdate *this, const CMMsl::MotionStateUpdate **a2)
{
  CMMsl::MotionStateUpdate *v4;
  CMMsl::MotionStateUpdate *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_251360B98;
  *((_QWORD *)this + 1) = 0;
  if (a2[1])
  {
    v4 = (CMMsl::MotionStateUpdate *)operator new();
    v5 = CMMsl::MotionStateUpdate::MotionStateUpdate(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return this;
}

uint64_t CMMsl::SPUPlaybackExampleMotionStateUpdate::operator=(uint64_t a1, const CMMsl::MotionStateUpdate **a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::SPUPlaybackExampleMotionStateUpdate *__hidden);
  uint64_t v6;

  if ((const CMMsl::MotionStateUpdate **)a1 != a2)
  {
    CMMsl::SPUPlaybackExampleMotionStateUpdate::SPUPlaybackExampleMotionStateUpdate((CMMsl::SPUPlaybackExampleMotionStateUpdate *)&v5, a2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v6;
    v5 = &off_251360B98;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::SPUPlaybackExampleMotionStateUpdate *a2, CMMsl::SPUPlaybackExampleMotionStateUpdate *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::SPUPlaybackExampleMotionStateUpdate::SPUPlaybackExampleMotionStateUpdate(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_251360B98;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_251360B98;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::SPUPlaybackExampleMotionStateUpdate::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = &off_251360B98;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::SPUPlaybackExampleMotionStateUpdate::formatText(CMMsl::SPUPlaybackExampleMotionStateUpdate *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SPUPlaybackExampleMotionStateUpdate::readFrom(CMMsl::SPUPlaybackExampleMotionStateUpdate *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v19 = (_QWORD *)operator new();
        *v19 = &off_25135F580;
        v19[4] = 0;
        v19[24] = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = (_QWORD *)*((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_QWORD *, PB::Reader *))(*v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_27;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SPUPlaybackExampleMotionStateUpdate::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2);
  return this;
}

CMMsl::MotionStateUpdate *CMMsl::SPUPlaybackExampleMotionStateUpdate::hash_value(CMMsl::SPUPlaybackExampleMotionStateUpdate *this)
{
  CMMsl::MotionStateUpdate *result;

  result = (CMMsl::MotionStateUpdate *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::MotionStateUpdate *)CMMsl::MotionStateUpdate::hash_value(result);
  return result;
}

_QWORD *CMMsl::SPUPlaybackExampleMotionStateUpdate::makeSuper(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[1])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_25135F580;
    v2[4] = 0;
    v2[24] = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void CMMsl::SafetyCompanionStatus::~SafetyCompanionStatus(CMMsl::SafetyCompanionStatus *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::SafetyCompanionStatus::SafetyCompanionStatus(uint64_t this, const CMMsl::SafetyCompanionStatus *a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)this = &off_251360BD0;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::SafetyCompanionStatus::operator=(uint64_t a1, uint64_t a2)
{
  int v2;
  void (**v4)(CMMsl::SafetyCompanionStatus *__hidden);
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  uint64_t v12;

  if (a1 != a2)
  {
    v4 = &off_251360BD0;
    v11[0] = &off_251360BD0;
    HIDWORD(v12) = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 1) != 0)
    {
      v4 = *(void (***)(CMMsl::SafetyCompanionStatus *__hidden))(a2 + 8);
      BYTE4(v12) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        v2 = *(_DWORD *)(a2 + 16);
        BYTE4(v12) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_6;
    }
    v7 = HIDWORD(v12);
    v8 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v11[1] = v8;
    v9 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v2;
    *(_DWORD *)(a1 + 20) = v7;
    v12 = v9;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v8[0] = &off_251360BD0;
    v8[1] = v5;
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v4;
    v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::SafetyCompanionStatus *a2, CMMsl::SafetyCompanionStatus *a3)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  return this;
}

uint64_t CMMsl::SafetyCompanionStatus::formatText(CMMsl::SafetyCompanionStatus *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "code");
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SafetyCompanionStatus::readFrom(CMMsl::SafetyCompanionStatus *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  char v24;
  uint64_t result;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  unint64_t v38;
  char v39;

  v3 = *((_QWORD *)a2 + 1);
  v2 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v3 + 1;
        *((_QWORD *)a2 + 1) = v3 + 1;
        v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v3 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_30;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v36 = 0;
          v37 = 0;
          v30 = 0;
          if (v2 <= v26)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_64;
            }
            v38 = v26++;
            v39 = *(_BYTE *)(v27 + v38);
            *((_QWORD *)a2 + 1) = v26;
            v30 |= (unint64_t)(v39 & 0x7F) << v36;
            if ((v39 & 0x80) == 0)
              break;
            v36 += 7;
            v14 = v37++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              goto LABEL_63;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v30) = 0;
LABEL_63:
          v3 = v38 + 1;
        }
        else
        {
          v28 = 0;
          v29 = 0;
          v30 = 0;
          while (1)
          {
            v3 = v26 + 1;
            *((_QWORD *)a2 + 1) = v26 + 1;
            v31 = *(_BYTE *)(v27 + v26);
            v30 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v26 = v3;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              break;
            }
          }
        }
LABEL_64:
        *((_DWORD *)this + 4) = v30;
      }
      else if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v19 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v20 = *(_QWORD *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v2)
        {
          v32 = 0;
          v33 = 0;
          v23 = 0;
          if (v2 <= v19)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v19)
            {
              v23 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_60;
            }
            v34 = v19++;
            v35 = *(_BYTE *)(v20 + v34);
            *((_QWORD *)a2 + 1) = v19;
            v23 |= (unint64_t)(v35 & 0x7F) << v32;
            if ((v35 & 0x80) == 0)
              break;
            v32 += 7;
            v14 = v33++ > 8;
            if (v14)
            {
              v23 = 0;
              goto LABEL_59;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v23 = 0;
LABEL_59:
          v3 = v34 + 1;
        }
        else
        {
          v21 = 0;
          v22 = 0;
          v23 = 0;
          while (1)
          {
            v3 = v19 + 1;
            *((_QWORD *)a2 + 1) = v19 + 1;
            v24 = *(_BYTE *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0)
              break;
            v21 += 7;
            v19 = v3;
            v14 = v22++ > 8;
            if (v14)
            {
              v23 = 0;
              break;
            }
          }
        }
LABEL_60:
        *((_QWORD *)this + 1) = v23;
      }
      else
      {
LABEL_30:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v3 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v2 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v3 > v2)
      v2 = v3;
    while (v2 != v3)
    {
      v17 = v3 + 1;
      v18 = *(_BYTE *)(v8 + v3);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v3 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_30;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SafetyCompanionStatus::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::SafetyCompanionStatus::hash_value(CMMsl::SafetyCompanionStatus *this)
{
  uint64_t v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((_QWORD *)this + 1);
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_5:
    v2 = 0;
    return v2 ^ v1;
  }
  v1 = 0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_5;
LABEL_3:
  v2 = *((int *)this + 4);
  return v2 ^ v1;
}

void CMMsl::SafetyHertzSample::~SafetyHertzSample(CMMsl::SafetyHertzSample *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::SafetyHertzSample::SafetyHertzSample(uint64_t this, const CMMsl::SafetyHertzSample *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;

  *(_QWORD *)this = &off_251360C08;
  *(_DWORD *)(this + 24) = 0;
  v2 = *((_BYTE *)a2 + 24);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_BYTE *)(this + 24) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 24);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 24) & 4) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *(_BYTE *)(this + 24) = v3;
    *(_DWORD *)(this + 20) = v5;
    v2 = *((_BYTE *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 24) = v3 | 2;
    *(_DWORD *)(this + 16) = v6;
  }
  return this;
}

uint64_t CMMsl::SafetyHertzSample::operator=(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  void (**v5)(CMMsl::SafetyHertzSample *__hidden);
  char v6;
  char v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  int v13;

  if (a1 != a2)
  {
    v5 = &off_251360C08;
    v12[0] = &off_251360C08;
    v13 = 0;
    v6 = *(_BYTE *)(a2 + 24);
    if ((v6 & 1) != 0)
    {
      v5 = *(void (***)(CMMsl::SafetyHertzSample *__hidden))(a2 + 8);
      v7 = 1;
      LOBYTE(v13) = 1;
      if ((v6 & 4) != 0)
      {
LABEL_4:
        v2 = *(_DWORD *)(a2 + 20);
        v7 |= 4u;
        LOBYTE(v13) = v7;
        if ((v6 & 2) != 0)
          goto LABEL_8;
        goto LABEL_9;
      }
    }
    else
    {
      v7 = 0;
      if ((*(_BYTE *)(a2 + 24) & 4) != 0)
        goto LABEL_4;
    }
    if ((v6 & 2) != 0)
    {
LABEL_8:
      v3 = *(_DWORD *)(a2 + 16);
      LOBYTE(v13) = v7 | 2;
    }
LABEL_9:
    v8 = v13;
    v13 = *(_DWORD *)(a1 + 24);
    v9 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v5;
    v12[1] = v9;
    v10 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 20) = v2;
    *(_DWORD *)(a1 + 24) = v8;
    *(_DWORD *)(a1 + 16) = v3;
    v12[2] = v10;
    PB::Base::~Base((PB::Base *)v12);
  }
  return a1;
}

{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];
  int v10;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v10 = *(_DWORD *)(a1 + 24);
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v9[0] = &off_251360C08;
    v9[1] = v5;
    v6 = *(_QWORD *)(a1 + 16);
    v7 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 24) = v3;
    *(_QWORD *)(a1 + 16) = v7;
    v9[2] = v6;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::SafetyHertzSample *a2, CMMsl::SafetyHertzSample *a3)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  return this;
}

uint64_t CMMsl::SafetyHertzSample::SafetyHertzSample(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = &off_251360C08;
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  *(_QWORD *)result = &off_251360C08;
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::SafetyHertzSample::formatText(CMMsl::SafetyHertzSample *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 2) == 0)
  {
    if ((*((_BYTE *)this + 24) & 1) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(a2, "timestamp");
    if ((*((_BYTE *)this + 24) & 4) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_4;
  }
  PB::TextFormatter::format(a2, "dramDurationMs");
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 1) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 4) != 0)
LABEL_4:
    PB::TextFormatter::format(a2, "vehicularFlags");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SafetyHertzSample::readFrom(CMMsl::SafetyHertzSample *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;

  v3 = *((_QWORD *)a2 + 1);
  v2 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v3 + 1;
        *((_QWORD *)a2 + 1) = v3 + 1;
        v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v3 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_31;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v19 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((_BYTE *)this + 24) |= 2u;
        v27 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v28 = *(_QWORD *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v43 = 0;
          v44 = 0;
          v31 = 0;
          if (v2 <= v27)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_83;
            }
            v45 = v27++;
            v46 = *(_BYTE *)(v28 + v45);
            *((_QWORD *)a2 + 1) = v27;
            v31 |= (unint64_t)(v46 & 0x7F) << v43;
            if ((v46 & 0x80) == 0)
              break;
            v43 += 7;
            v14 = v44++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_82;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v31) = 0;
LABEL_82:
          v3 = v45 + 1;
        }
        else
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          while (1)
          {
            v3 = v27 + 1;
            *((_QWORD *)a2 + 1) = v27 + 1;
            v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0)
              break;
            v29 += 7;
            v27 = v3;
            v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_83:
        *((_DWORD *)this + 4) = v31;
      }
      else if ((_DWORD)v19 == 2)
      {
        *((_BYTE *)this + 24) |= 4u;
        v33 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v34 = *(_QWORD *)a2;
        if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
        {
          v47 = 0;
          v48 = 0;
          v37 = 0;
          if (v2 <= v33)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v33)
            {
              LODWORD(v37) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_88;
            }
            v49 = v33++;
            v50 = *(_BYTE *)(v34 + v49);
            *((_QWORD *)a2 + 1) = v33;
            v37 |= (unint64_t)(v50 & 0x7F) << v47;
            if ((v50 & 0x80) == 0)
              break;
            v47 += 7;
            v14 = v48++ > 8;
            if (v14)
            {
              LODWORD(v37) = 0;
              goto LABEL_87;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v37) = 0;
LABEL_87:
          v3 = v49 + 1;
        }
        else
        {
          v35 = 0;
          v36 = 0;
          v37 = 0;
          while (1)
          {
            v3 = v33 + 1;
            *((_QWORD *)a2 + 1) = v33 + 1;
            v38 = *(_BYTE *)(v34 + v33);
            v37 |= (unint64_t)(v38 & 0x7F) << v35;
            if ((v38 & 0x80) == 0)
              break;
            v35 += 7;
            v33 = v3;
            v14 = v36++ > 8;
            if (v14)
            {
              LODWORD(v37) = 0;
              break;
            }
          }
        }
LABEL_88:
        *((_DWORD *)this + 5) = v37;
      }
      else if ((_DWORD)v19 == 1)
      {
        *((_BYTE *)this + 24) |= 1u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v39 = 0;
          v40 = 0;
          v24 = 0;
          if (v2 <= v20)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v20)
            {
              v24 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_78;
            }
            v41 = v20++;
            v42 = *(_BYTE *)(v21 + v41);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v42 & 0x7F) << v39;
            if ((v42 & 0x80) == 0)
              break;
            v39 += 7;
            v14 = v40++ > 8;
            if (v14)
            {
              v24 = 0;
              goto LABEL_77;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v24 = 0;
LABEL_77:
          v3 = v41 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v3 = v20 + 1;
            *((_QWORD *)a2 + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v3;
            v14 = v23++ > 8;
            if (v14)
            {
              v24 = 0;
              break;
            }
          }
        }
LABEL_78:
        *((_QWORD *)this + 1) = v24;
      }
      else
      {
LABEL_31:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v3 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v2 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v3 > v2)
      v2 = v3;
    while (v2 != v3)
    {
      v17 = v3 + 1;
      v18 = *(_BYTE *)(v8 + v3);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v3 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_31;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SafetyHertzSample::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 24);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 24);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        return this;
      return PB::Writer::writeVarInt(a2);
    }
  }
  else if ((*(_BYTE *)(this + 24) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  if ((*(_BYTE *)(v3 + 24) & 2) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::SafetyHertzSample::hash_value(CMMsl::SafetyHertzSample *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if ((*((_BYTE *)this + 24) & 1) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 24) & 4) != 0)
      goto LABEL_3;
LABEL_6:
    v2 = 0;
    if ((*((_BYTE *)this + 24) & 2) != 0)
      goto LABEL_4;
LABEL_7:
    v3 = 0;
    return v2 ^ v1 ^ v3;
  }
  v1 = *((_QWORD *)this + 1);
  if ((*((_BYTE *)this + 24) & 4) == 0)
    goto LABEL_6;
LABEL_3:
  v2 = *((unsigned int *)this + 5);
  if ((*((_BYTE *)this + 24) & 2) == 0)
    goto LABEL_7;
LABEL_4:
  v3 = *((unsigned int *)this + 4);
  return v2 ^ v1 ^ v3;
}

void CMMsl::SafetyRemoteSample::~SafetyRemoteSample(CMMsl::SafetyRemoteSample *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::SafetyRemoteSample::SafetyRemoteSample(uint64_t this, const CMMsl::SafetyRemoteSample *a2)
{
  char v2;
  char v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)this = &off_251360C40;
  *(_DWORD *)(this + 52) = 0;
  v2 = *((_BYTE *)a2 + 52);
  if ((v2 & 0x20) != 0)
  {
    v4 = *((_DWORD *)a2 + 11);
    v3 = 32;
    *(_BYTE *)(this + 52) = 32;
    *(_DWORD *)(this + 44) = v4;
    v2 = *((_BYTE *)a2 + 52);
    if ((v2 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 52) & 0x40) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 12);
    v3 |= 0x40u;
    *(_BYTE *)(this + 52) = v3;
    *(_DWORD *)(this + 48) = v5;
    v2 = *((_BYTE *)a2 + 52);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    v6 = *((_DWORD *)a2 + 10);
    v3 |= 0x10u;
    *(_BYTE *)(this + 52) = v3;
    *(_DWORD *)(this + 40) = v6;
    v2 = *((_BYTE *)a2 + 52);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *(_BYTE *)(this + 52) = v3;
  *(_QWORD *)(this + 32) = v7;
  v2 = *((_BYTE *)a2 + 52);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0)
      goto LABEL_10;
    goto LABEL_15;
  }
LABEL_14:
  v8 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_BYTE *)(this + 52) = v3;
  *(_QWORD *)(this + 8) = v8;
  v2 = *((_BYTE *)a2 + 52);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0)
      return this;
LABEL_16:
    v10 = *((_QWORD *)a2 + 2);
    *(_BYTE *)(this + 52) = v3 | 2;
    *(_QWORD *)(this + 16) = v10;
    return this;
  }
LABEL_15:
  v9 = *((_QWORD *)a2 + 3);
  v3 |= 4u;
  *(_BYTE *)(this + 52) = v3;
  *(_QWORD *)(this + 24) = v9;
  if ((*((_BYTE *)a2 + 52) & 2) != 0)
    goto LABEL_16;
  return this;
}

uint64_t CMMsl::SafetyRemoteSample::operator=(uint64_t a1, const CMMsl::SafetyRemoteSample *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _BYTE v7[8];
  __int128 v8;
  __int128 v9;
  __int128 v10;

  if ((const CMMsl::SafetyRemoteSample *)a1 != a2)
  {
    CMMsl::SafetyRemoteSample::SafetyRemoteSample((uint64_t)v7, a2);
    v3 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v10;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v9 = v4;
    v10 = v3;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::SafetyRemoteSample *a2, CMMsl::SafetyRemoteSample *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_DWORD *)(this + 52);
  *(_DWORD *)(this + 52) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v3;
  v4 = *(_DWORD *)(this + 44);
  *(_DWORD *)(this + 44) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  v5 = *(_DWORD *)(this + 48);
  *(_DWORD *)(this + 48) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v5;
  v6 = *(_DWORD *)(this + 40);
  *(_DWORD *)(this + 40) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v6;
  v7 = *(_QWORD *)(this + 32);
  *(_QWORD *)(this + 32) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v7;
  v8 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v8;
  v9 = *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v9;
  v10 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v10;
  return this;
}

uint64_t CMMsl::SafetyRemoteSample::SafetyRemoteSample(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = &off_251360C40;
  *(_DWORD *)(result + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(_DWORD *)(result + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
  return result;
}

{
  *(_QWORD *)result = &off_251360C40;
  *(_DWORD *)(result + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(_DWORD *)(result + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::SafetyRemoteSample::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  void (**v9)(CMMsl::SafetyRemoteSample *__hidden);
  __int128 v10;
  __int128 v11;
  __int128 v12;

  if (a1 != a2)
  {
    v9 = &off_251360C40;
    v3 = *(_OWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 52) = 0;
    v4 = *(_OWORD *)(a1 + 40);
    v11 = *(_OWORD *)(a1 + 24);
    v12 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    v6 = *(_OWORD *)(a2 + 8);
    v7 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v3;
    *(_OWORD *)(a1 + 24) = v7;
    *(_OWORD *)(a1 + 8) = v6;
    v10 = v5;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::SafetyRemoteSample::formatText(CMMsl::SafetyRemoteSample *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 52);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "createdAtTimestamp");
    v5 = *((_BYTE *)this + 52);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*((_BYTE *)this + 52) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "epochNumber");
  v5 = *((_BYTE *)this + 52);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "epochTimestamp");
  v5 = *((_BYTE *)this + 52);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "lastRealTriggerTimestamp");
  v5 = *((_BYTE *)this + 52);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0)
      goto LABEL_7;
LABEL_15:
    PB::TextFormatter::format(a2, "receivedAtTimestamp");
    if ((*((_BYTE *)this + 52) & 0x40) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_8;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "mode");
  v5 = *((_BYTE *)this + 52);
  if ((v5 & 8) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v5 & 0x40) != 0)
LABEL_8:
    PB::TextFormatter::format(a2, "sessionNumber");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SafetyRemoteSample::readFrom(CMMsl::SafetyRemoteSample *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  unint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  unint64_t v77;
  char v78;
  char v79;
  unsigned int v80;
  unint64_t v81;
  char v82;
  char v83;
  unsigned int v84;
  unint64_t v85;
  char v86;
  char v87;
  unsigned int v88;
  unint64_t v89;
  char v90;

  v3 = *((_QWORD *)a2 + 1);
  v2 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v3 > v2)
          v2 = v3;
        while (v2 != v3)
        {
          v17 = v3 + 1;
          v18 = *(_BYTE *)(v8 + v3);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_24;
          v15 += 7;
          v3 = v17;
          v14 = v16++ > 8;
          if (v14)
            goto LABEL_19;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v3 + 1;
          *((_QWORD *)a2 + 1) = v3 + 1;
          v13 = *(_BYTE *)(v8 + v3);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v3 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_24:
        if ((v11 & 7) != 4)
        {
          v20 = v11 >> 3;
          switch((v11 >> 3))
          {
            case 2u:
              *((_BYTE *)this + 52) |= 0x20u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v63 = 0;
                v64 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v3 = *((_QWORD *)a2 + 1);
                else
                  v3 = *((_QWORD *)a2 + 2);
                while (1)
                {
                  if (v3 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_137;
                  }
                  v65 = v21++;
                  v66 = *(_BYTE *)(v22 + v65);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0)
                    break;
                  v63 += 7;
                  v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
                    goto LABEL_136;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
LABEL_136:
                v3 = v65 + 1;
              }
              else
              {
                v23 = 0;
                v24 = 0;
                v25 = 0;
                do
                {
                  v3 = v21 + 1;
                  *((_QWORD *)a2 + 1) = v21 + 1;
                  v26 = *(_BYTE *)(v22 + v21);
                  v25 |= (unint64_t)(v26 & 0x7F) << v23;
                  if ((v26 & 0x80) == 0)
                    goto LABEL_137;
                  v23 += 7;
                  v21 = v3;
                  v14 = v24++ > 8;
                }
                while (!v14);
                LODWORD(v25) = 0;
              }
LABEL_137:
              *((_DWORD *)this + 11) = v25;
              goto LABEL_21;
            case 3u:
              *((_BYTE *)this + 52) |= 0x40u;
              v33 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v34 = *(_QWORD *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v71 = 0;
                v72 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v3 = *((_QWORD *)a2 + 1);
                else
                  v3 = *((_QWORD *)a2 + 2);
                while (1)
                {
                  if (v3 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_147;
                  }
                  v73 = v33++;
                  v74 = *(_BYTE *)(v34 + v73);
                  *((_QWORD *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0)
                    break;
                  v71 += 7;
                  v14 = v72++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_146:
                    v3 = v73 + 1;
                    goto LABEL_147;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v37) = 0;
                goto LABEL_146;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v3 = v33 + 1;
                *((_QWORD *)a2 + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_147;
                v35 += 7;
                v33 = v3;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_147:
              *((_DWORD *)this + 12) = v37;
              goto LABEL_21;
            case 4u:
              *((_BYTE *)this + 52) |= 0x10u;
              v39 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v40 = *(_QWORD *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v75 = 0;
                v76 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v3 = *((_QWORD *)a2 + 1);
                else
                  v3 = *((_QWORD *)a2 + 2);
                while (1)
                {
                  if (v3 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_152;
                  }
                  v77 = v39++;
                  v78 = *(_BYTE *)(v40 + v77);
                  *((_QWORD *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0)
                    break;
                  v75 += 7;
                  v14 = v76++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_151:
                    v3 = v77 + 1;
                    goto LABEL_152;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v43) = 0;
                goto LABEL_151;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v3 = v39 + 1;
                *((_QWORD *)a2 + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_152;
                v41 += 7;
                v39 = v3;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_152:
              *((_DWORD *)this + 10) = v43;
              goto LABEL_21;
            case 5u:
              *((_BYTE *)this + 52) |= 8u;
              v45 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v46 = *(_QWORD *)a2;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v79 = 0;
                v80 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v3 = *((_QWORD *)a2 + 1);
                else
                  v3 = *((_QWORD *)a2 + 2);
                while (1)
                {
                  if (v3 == v45)
                  {
                    v49 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_157;
                  }
                  v81 = v45++;
                  v82 = *(_BYTE *)(v46 + v81);
                  *((_QWORD *)a2 + 1) = v45;
                  v49 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0)
                    break;
                  v79 += 7;
                  v14 = v80++ > 8;
                  if (v14)
                  {
                    v49 = 0;
LABEL_156:
                    v3 = v81 + 1;
                    goto LABEL_157;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v49 = 0;
                goto LABEL_156;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v3 = v45 + 1;
                *((_QWORD *)a2 + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_157;
                v47 += 7;
                v45 = v3;
                v14 = v48++ > 8;
              }
              while (!v14);
              v49 = 0;
LABEL_157:
              *((_QWORD *)this + 4) = v49;
              goto LABEL_21;
            case 6u:
              *((_BYTE *)this + 52) |= 1u;
              v51 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v52 = *(_QWORD *)a2;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                v83 = 0;
                v84 = 0;
                v55 = 0;
                if (v2 <= v51)
                  v3 = *((_QWORD *)a2 + 1);
                else
                  v3 = *((_QWORD *)a2 + 2);
                while (1)
                {
                  if (v3 == v51)
                  {
                    v55 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_162;
                  }
                  v85 = v51++;
                  v86 = *(_BYTE *)(v52 + v85);
                  *((_QWORD *)a2 + 1) = v51;
                  v55 |= (unint64_t)(v86 & 0x7F) << v83;
                  if ((v86 & 0x80) == 0)
                    break;
                  v83 += 7;
                  v14 = v84++ > 8;
                  if (v14)
                  {
                    v55 = 0;
LABEL_161:
                    v3 = v85 + 1;
                    goto LABEL_162;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v55 = 0;
                goto LABEL_161;
              }
              v53 = 0;
              v54 = 0;
              v55 = 0;
              do
              {
                v3 = v51 + 1;
                *((_QWORD *)a2 + 1) = v51 + 1;
                v56 = *(_BYTE *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0)
                  goto LABEL_162;
                v53 += 7;
                v51 = v3;
                v14 = v54++ > 8;
              }
              while (!v14);
              v55 = 0;
LABEL_162:
              *((_QWORD *)this + 1) = v55;
              goto LABEL_21;
            default:
              if ((_DWORD)v20 == 100)
              {
                *((_BYTE *)this + 52) |= 4u;
                v57 = *((_QWORD *)a2 + 1);
                v2 = *((_QWORD *)a2 + 2);
                v58 = *(_QWORD *)a2;
                if (v57 > 0xFFFFFFFFFFFFFFF5 || v57 + 10 > v2)
                {
                  v87 = 0;
                  v88 = 0;
                  v61 = 0;
                  if (v2 <= v57)
                    v3 = *((_QWORD *)a2 + 1);
                  else
                    v3 = *((_QWORD *)a2 + 2);
                  while (1)
                  {
                    if (v3 == v57)
                    {
                      v61 = 0;
                      *((_BYTE *)a2 + 24) = 1;
                      goto LABEL_167;
                    }
                    v89 = v57++;
                    v90 = *(_BYTE *)(v58 + v89);
                    *((_QWORD *)a2 + 1) = v57;
                    v61 |= (unint64_t)(v90 & 0x7F) << v87;
                    if ((v90 & 0x80) == 0)
                      break;
                    v87 += 7;
                    v14 = v88++ > 8;
                    if (v14)
                    {
                      v61 = 0;
                      goto LABEL_166;
                    }
                  }
                  if (*((_BYTE *)a2 + 24))
                    v61 = 0;
LABEL_166:
                  v3 = v89 + 1;
                }
                else
                {
                  v59 = 0;
                  v60 = 0;
                  v61 = 0;
                  while (1)
                  {
                    v3 = v57 + 1;
                    *((_QWORD *)a2 + 1) = v57 + 1;
                    v62 = *(_BYTE *)(v58 + v57);
                    v61 |= (unint64_t)(v62 & 0x7F) << v59;
                    if ((v62 & 0x80) == 0)
                      break;
                    v59 += 7;
                    v57 = v3;
                    v14 = v60++ > 8;
                    if (v14)
                    {
                      v61 = 0;
                      break;
                    }
                  }
                }
LABEL_167:
                *((_QWORD *)this + 3) = v61;
              }
              else if ((_DWORD)v20 == 101)
              {
                *((_BYTE *)this + 52) |= 2u;
                v27 = *((_QWORD *)a2 + 1);
                v2 = *((_QWORD *)a2 + 2);
                v28 = *(_QWORD *)a2;
                if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
                {
                  v67 = 0;
                  v68 = 0;
                  v31 = 0;
                  if (v2 <= v27)
                    v3 = *((_QWORD *)a2 + 1);
                  else
                    v3 = *((_QWORD *)a2 + 2);
                  while (1)
                  {
                    if (v3 == v27)
                    {
                      v31 = 0;
                      *((_BYTE *)a2 + 24) = 1;
                      goto LABEL_142;
                    }
                    v69 = v27++;
                    v70 = *(_BYTE *)(v28 + v69);
                    *((_QWORD *)a2 + 1) = v27;
                    v31 |= (unint64_t)(v70 & 0x7F) << v67;
                    if ((v70 & 0x80) == 0)
                      break;
                    v67 += 7;
                    v14 = v68++ > 8;
                    if (v14)
                    {
                      v31 = 0;
                      goto LABEL_141;
                    }
                  }
                  if (*((_BYTE *)a2 + 24))
                    v31 = 0;
LABEL_141:
                  v3 = v69 + 1;
                }
                else
                {
                  v29 = 0;
                  v30 = 0;
                  v31 = 0;
                  while (1)
                  {
                    v3 = v27 + 1;
                    *((_QWORD *)a2 + 1) = v27 + 1;
                    v32 = *(_BYTE *)(v28 + v27);
                    v31 |= (unint64_t)(v32 & 0x7F) << v29;
                    if ((v32 & 0x80) == 0)
                      break;
                    v29 += 7;
                    v27 = v3;
                    v14 = v30++ > 8;
                    if (v14)
                    {
                      v31 = 0;
                      break;
                    }
                  }
                }
LABEL_142:
                *((_QWORD *)this + 2) = v31;
              }
              else
              {
LABEL_19:
                result = PB::Reader::skip(a2);
                if (!(_DWORD)result)
                  return result;
                v3 = *((_QWORD *)a2 + 1);
                v2 = *((_QWORD *)a2 + 2);
              }
LABEL_21:
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v3 >= v2 || *((_BYTE *)a2 + 24))
                return v4 == 0;
              continue;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::SafetyRemoteSample::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 52);
  if ((v4 & 0x20) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 52);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(this + 52) & 0x40) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 52);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 52);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 52);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 52);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_14:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_BYTE *)(v3 + 52) & 2) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::SafetyRemoteSample::hash_value(CMMsl::SafetyRemoteSample *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((*((_BYTE *)this + 52) & 0x20) != 0)
  {
    v1 = *((unsigned int *)this + 11);
    if ((*((_BYTE *)this + 52) & 0x40) != 0)
    {
LABEL_3:
      v2 = *((unsigned int *)this + 12);
      if ((*((_BYTE *)this + 52) & 0x10) != 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else
  {
    v1 = 0;
    if ((*((_BYTE *)this + 52) & 0x40) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 52) & 0x10) != 0)
  {
LABEL_4:
    v3 = *((unsigned int *)this + 10);
    if ((*((_BYTE *)this + 52) & 8) != 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  v3 = 0;
  if ((*((_BYTE *)this + 52) & 8) != 0)
  {
LABEL_5:
    v4 = *((_QWORD *)this + 4);
    if ((*((_BYTE *)this + 52) & 1) != 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  v4 = 0;
  if ((*((_BYTE *)this + 52) & 1) != 0)
  {
LABEL_6:
    v5 = *((_QWORD *)this + 1);
    if ((*((_BYTE *)this + 52) & 4) != 0)
      goto LABEL_7;
LABEL_14:
    v6 = 0;
    if ((*((_BYTE *)this + 52) & 2) != 0)
      goto LABEL_8;
LABEL_15:
    v7 = 0;
    return v2 ^ v1 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7;
  }
LABEL_13:
  v5 = 0;
  if ((*((_BYTE *)this + 52) & 4) == 0)
    goto LABEL_14;
LABEL_7:
  v6 = *((_QWORD *)this + 3);
  if ((*((_BYTE *)this + 52) & 2) == 0)
    goto LABEL_15;
LABEL_8:
  v7 = *((_QWORD *)this + 2);
  return v2 ^ v1 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7;
}

void CMMsl::SafetyTrustedAudioResult::~SafetyTrustedAudioResult(CMMsl::SafetyTrustedAudioResult *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::SafetyTrustedAudioResult::SafetyTrustedAudioResult(uint64_t this, const CMMsl::SafetyTrustedAudioResult *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  char v38;
  char v39;
  int v40;

  *(_QWORD *)this = &off_251360C78;
  *(_QWORD *)(this + 188) = 0;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x100) != 0)
  {
    v4 = *((_QWORD *)a2 + 9);
    v3 = 256;
    *(_QWORD *)(this + 188) = 256;
    *(_QWORD *)(this + 72) = v4;
    v2 = *(_QWORD *)((char *)a2 + 188);
    if ((v2 & 0x40000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x40000) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 29);
    v3 |= 0x40000uLL;
    *(_QWORD *)(this + 188) = v3;
    *(_DWORD *)(this + 116) = v5;
    v2 = *(_QWORD *)((char *)a2 + 188);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    v6 = *((_QWORD *)a2 + 4);
    v3 |= 8uLL;
    *(_QWORD *)(this + 188) = v3;
    *(_QWORD *)(this + 32) = v6;
    v2 = *(_QWORD *)((char *)a2 + 188);
    if ((v2 & 0x2000) == 0)
    {
LABEL_8:
      if ((v2 & 0x200000) == 0)
        goto LABEL_9;
      goto LABEL_44;
    }
  }
  else if ((v2 & 0x2000) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 24);
  v3 |= 0x2000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 96) = v7;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x200000) == 0)
  {
LABEL_9:
    if ((v2 & 0x20000) == 0)
      goto LABEL_10;
    goto LABEL_45;
  }
LABEL_44:
  v8 = *((_DWORD *)a2 + 32);
  v3 |= 0x200000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 128) = v8;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x20000) == 0)
  {
LABEL_10:
    if ((v2 & 4) == 0)
      goto LABEL_11;
    goto LABEL_46;
  }
LABEL_45:
  v9 = *((_DWORD *)a2 + 28);
  v3 |= 0x20000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 112) = v9;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 4) == 0)
  {
LABEL_11:
    if ((v2 & 0x8000) == 0)
      goto LABEL_12;
    goto LABEL_47;
  }
LABEL_46:
  v10 = *((_QWORD *)a2 + 3);
  v3 |= 4uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_QWORD *)(this + 24) = v10;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x8000) == 0)
  {
LABEL_12:
    if ((v2 & 0x100000) == 0)
      goto LABEL_13;
    goto LABEL_48;
  }
LABEL_47:
  v11 = *((_DWORD *)a2 + 26);
  v3 |= 0x8000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 104) = v11;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x100000) == 0)
  {
LABEL_13:
    if ((v2 & 0x80000) == 0)
      goto LABEL_14;
    goto LABEL_49;
  }
LABEL_48:
  v12 = *((_DWORD *)a2 + 31);
  v3 |= 0x100000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 124) = v12;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x80000) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0)
      goto LABEL_15;
    goto LABEL_50;
  }
LABEL_49:
  v13 = *((_DWORD *)a2 + 30);
  v3 |= 0x80000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 120) = v13;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x10) == 0)
  {
LABEL_15:
    if ((v2 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_51;
  }
LABEL_50:
  v14 = *((_QWORD *)a2 + 5);
  v3 |= 0x10uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_QWORD *)(this + 40) = v14;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x4000) == 0)
  {
LABEL_16:
    if ((v2 & 0x10000) == 0)
      goto LABEL_17;
    goto LABEL_52;
  }
LABEL_51:
  v15 = *((_DWORD *)a2 + 25);
  v3 |= 0x4000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 100) = v15;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x10000) == 0)
  {
LABEL_17:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_18;
    goto LABEL_53;
  }
LABEL_52:
  v16 = *((_DWORD *)a2 + 27);
  v3 |= 0x10000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 108) = v16;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x40) == 0)
      goto LABEL_19;
    goto LABEL_54;
  }
LABEL_53:
  v17 = *((_DWORD *)a2 + 38);
  v3 |= 0x8000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 152) = v17;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x40) == 0)
  {
LABEL_19:
    if ((v2 & 0x400000) == 0)
      goto LABEL_20;
    goto LABEL_55;
  }
LABEL_54:
  v18 = *((_QWORD *)a2 + 7);
  v3 |= 0x40uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_QWORD *)(this + 56) = v18;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x400000) == 0)
  {
LABEL_20:
    if ((v2 & 0x40000000) == 0)
      goto LABEL_21;
    goto LABEL_56;
  }
LABEL_55:
  v19 = *((_DWORD *)a2 + 33);
  v3 |= 0x400000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 132) = v19;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_21:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_22;
    goto LABEL_57;
  }
LABEL_56:
  v20 = *((_DWORD *)a2 + 41);
  v3 |= 0x40000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 164) = v20;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_22:
    if ((v2 & 0x20) == 0)
      goto LABEL_23;
    goto LABEL_58;
  }
LABEL_57:
  v21 = *((_DWORD *)a2 + 37);
  v3 |= 0x4000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 148) = v21;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x20) == 0)
  {
LABEL_23:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_24;
    goto LABEL_59;
  }
LABEL_58:
  v22 = *((_QWORD *)a2 + 6);
  v3 |= 0x20uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_QWORD *)(this + 48) = v22;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_24:
    if ((v2 & 0x20000000) == 0)
      goto LABEL_25;
    goto LABEL_60;
  }
LABEL_59:
  v23 = *((_DWORD *)a2 + 35);
  v3 |= 0x1000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 140) = v23;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_25:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_26;
    goto LABEL_61;
  }
LABEL_60:
  v24 = *((_DWORD *)a2 + 40);
  v3 |= 0x20000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 160) = v24;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_26:
    if ((v2 & 0x80) == 0)
      goto LABEL_27;
    goto LABEL_62;
  }
LABEL_61:
  v25 = *((_DWORD *)a2 + 39);
  v3 |= 0x10000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 156) = v25;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x80) == 0)
  {
LABEL_27:
    if ((v2 & 0x800000) == 0)
      goto LABEL_28;
    goto LABEL_63;
  }
LABEL_62:
  v26 = *((_QWORD *)a2 + 8);
  v3 |= 0x80uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_QWORD *)(this + 64) = v26;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x800000) == 0)
  {
LABEL_28:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_29;
    goto LABEL_64;
  }
LABEL_63:
  v27 = *((_DWORD *)a2 + 34);
  v3 |= 0x800000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 136) = v27;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_29:
    if ((v2 & 0x400) == 0)
      goto LABEL_30;
    goto LABEL_65;
  }
LABEL_64:
  v28 = *((_DWORD *)a2 + 36);
  v3 |= 0x2000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 144) = v28;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x400) == 0)
  {
LABEL_30:
    if ((v2 & 0x1000) == 0)
      goto LABEL_31;
    goto LABEL_66;
  }
LABEL_65:
  v29 = *((_DWORD *)a2 + 21);
  v3 |= 0x400uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 84) = v29;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x1000) == 0)
  {
LABEL_31:
    if ((v2 & 0x800) == 0)
      goto LABEL_32;
    goto LABEL_67;
  }
LABEL_66:
  v30 = *((_DWORD *)a2 + 23);
  v3 |= 0x1000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 92) = v30;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x800) == 0)
  {
LABEL_32:
    if ((v2 & 2) == 0)
      goto LABEL_33;
    goto LABEL_68;
  }
LABEL_67:
  v31 = *((_DWORD *)a2 + 22);
  v3 |= 0x800uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 88) = v31;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 2) == 0)
  {
LABEL_33:
    if ((v2 & 1) == 0)
      goto LABEL_34;
    goto LABEL_69;
  }
LABEL_68:
  v32 = *((_QWORD *)a2 + 2);
  v3 |= 2uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_QWORD *)(this + 16) = v32;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 1) == 0)
  {
LABEL_34:
    if ((v2 & 0x100000000) == 0)
      goto LABEL_35;
    goto LABEL_70;
  }
LABEL_69:
  v33 = *((_QWORD *)a2 + 1);
  v3 |= 1uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_QWORD *)(this + 8) = v33;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x100000000) == 0)
  {
LABEL_35:
    if ((v2 & 0x400000000) == 0)
      goto LABEL_36;
    goto LABEL_71;
  }
LABEL_70:
  v34 = *((_DWORD *)a2 + 43);
  v3 |= 0x100000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 172) = v34;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x400000000) == 0)
  {
LABEL_36:
    if ((v2 & 0x200000000) == 0)
      goto LABEL_37;
    goto LABEL_72;
  }
LABEL_71:
  v35 = *((_DWORD *)a2 + 45);
  v3 |= 0x400000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 180) = v35;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x200000000) == 0)
  {
LABEL_37:
    if ((v2 & 0x80000000) == 0)
      goto LABEL_38;
    goto LABEL_73;
  }
LABEL_72:
  v36 = *((_DWORD *)a2 + 44);
  v3 |= 0x200000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 176) = v36;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_38:
    if ((v2 & 0x800000000) == 0)
      goto LABEL_39;
    goto LABEL_74;
  }
LABEL_73:
  v37 = *((_DWORD *)a2 + 42);
  v3 |= 0x80000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 168) = v37;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x800000000) == 0)
  {
LABEL_39:
    if ((v2 & 0x1000000000) == 0)
      goto LABEL_40;
    goto LABEL_75;
  }
LABEL_74:
  v38 = *((_BYTE *)a2 + 184);
  v3 |= 0x800000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_BYTE *)(this + 184) = v38;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x1000000000) == 0)
  {
LABEL_40:
    if ((v2 & 0x200) == 0)
      return this;
LABEL_76:
    v40 = *((_DWORD *)a2 + 20);
    *(_QWORD *)(this + 188) = v3 | 0x200;
    *(_DWORD *)(this + 80) = v40;
    return this;
  }
LABEL_75:
  v39 = *((_BYTE *)a2 + 185);
  v3 |= 0x1000000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_BYTE *)(this + 185) = v39;
  if ((*(_QWORD *)((_BYTE *)a2 + 188) & 0x200) != 0)
    goto LABEL_76;
  return this;
}

CMMsl *CMMsl::SafetyTrustedAudioResult::operator=(CMMsl *a1, const CMMsl::SafetyTrustedAudioResult *a2)
{
  CMMsl::SafetyTrustedAudioResult *v3;
  _BYTE v5[200];

  if (a1 != a2)
  {
    CMMsl::SafetyTrustedAudioResult::SafetyTrustedAudioResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::SafetyTrustedAudioResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::SafetyTrustedAudioResult *a2, CMMsl::SafetyTrustedAudioResult *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  float result;

  v3 = *(_QWORD *)((char *)this + 188);
  *(_QWORD *)((char *)this + 188) = *(_QWORD *)((char *)a2 + 188);
  *(_QWORD *)((char *)a2 + 188) = v3;
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v4;
  v5 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v5;
  v6 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v6;
  v7 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v7;
  v8 = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v8;
  v9 = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v9;
  v10 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v10;
  v11 = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v11;
  v12 = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v12;
  v13 = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v13;
  v14 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v14;
  v15 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v15;
  v16 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v16;
  v17 = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v17;
  v18 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v18;
  v19 = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v19;
  v20 = *((_DWORD *)this + 41);
  *((_DWORD *)this + 41) = *((_DWORD *)a2 + 41);
  *((_DWORD *)a2 + 41) = v20;
  v21 = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v21;
  v22 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v22;
  v23 = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v23;
  v24 = *((_DWORD *)this + 40);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
  *((_DWORD *)a2 + 40) = v24;
  v25 = *((_DWORD *)this + 39);
  *((_DWORD *)this + 39) = *((_DWORD *)a2 + 39);
  *((_DWORD *)a2 + 39) = v25;
  v26 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v26;
  v27 = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v27;
  v28 = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v28;
  v29 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v29;
  LODWORD(v26) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v26;
  LODWORD(v26) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v26;
  v30 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v30;
  v31 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v31;
  v32 = *((_DWORD *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((_DWORD *)a2 + 43) = v32;
  v33 = *((_DWORD *)this + 45);
  *((_DWORD *)this + 45) = *((_DWORD *)a2 + 45);
  *((_DWORD *)a2 + 45) = v33;
  v34 = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v34;
  result = *((float *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((float *)a2 + 42) = result;
  LOBYTE(v31) = *((_BYTE *)this + 184);
  *((_BYTE *)this + 184) = *((_BYTE *)a2 + 184);
  *((_BYTE *)a2 + 184) = v31;
  LOBYTE(v31) = *((_BYTE *)this + 185);
  *((_BYTE *)this + 185) = *((_BYTE *)a2 + 185);
  *((_BYTE *)a2 + 185) = v31;
  LODWORD(v31) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v31;
  return result;
}

float CMMsl::SafetyTrustedAudioResult::SafetyTrustedAudioResult(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_251360C78;
  *(_QWORD *)(a1 + 188) = *(_QWORD *)(a2 + 188);
  *(_QWORD *)(a2 + 188) = 0;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  result = *(float *)(a2 + 168);
  *(float *)(a1 + 168) = result;
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_BYTE *)(a1 + 185) = *(_BYTE *)(a2 + 185);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  return result;
}

CMMsl *CMMsl::SafetyTrustedAudioResult::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::SafetyTrustedAudioResult *v3;
  _BYTE v5[200];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::SafetyTrustedAudioResult::SafetyTrustedAudioResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::SafetyTrustedAudioResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::SafetyTrustedAudioResult::formatText(CMMsl::SafetyTrustedAudioResult *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x200) != 0)
  {
    PB::TextFormatter::format(a2, "dramDuration");
    v5 = *(_QWORD *)((char *)this + 188);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_42;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "epochMaxTimestamp");
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x400) == 0)
      goto LABEL_5;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "epochMinTimestamp");
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x400) == 0)
  {
LABEL_5:
    if ((v5 & 0x800) == 0)
      goto LABEL_6;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "maxRMS", *((float *)this + 21));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x800) == 0)
  {
LABEL_6:
    if ((v5 & 0x1000) == 0)
      goto LABEL_7;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "numPointsInEpoch");
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x1000) == 0)
  {
LABEL_7:
    if ((v5 & 0x2000) == 0)
      goto LABEL_8;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "numShortAudio");
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x2000) == 0)
  {
LABEL_8:
    if ((v5 & 0x4000) == 0)
      goto LABEL_9;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "planarChaosAtMaxEnergy", *((float *)this + 24));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x4000) == 0)
  {
LABEL_9:
    if ((v5 & 0x8000) == 0)
      goto LABEL_10;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "planarChaosAtMaxSaturation", *((float *)this + 25));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x8000) == 0)
  {
LABEL_10:
    if ((v5 & 0x10000) == 0)
      goto LABEL_11;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "planarEnergyAtMaxChaos", *((float *)this + 26));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x10000) == 0)
  {
LABEL_11:
    if ((v5 & 0x20000) == 0)
      goto LABEL_12;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "planarEnergyAtMaxSaturation", *((float *)this + 27));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x20000) == 0)
  {
LABEL_12:
    if ((v5 & 0x40000) == 0)
      goto LABEL_13;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "planarMaxChaos", *((float *)this + 28));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x40000) == 0)
  {
LABEL_13:
    if ((v5 & 0x80000) == 0)
      goto LABEL_14;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "planarMaxEnergy", *((float *)this + 29));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x80000) == 0)
  {
LABEL_14:
    if ((v5 & 0x800000000) == 0)
      goto LABEL_15;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "planarMaxSaturation", *((float *)this + 30));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x800000000) == 0)
  {
LABEL_15:
    if ((v5 & 0x100000) == 0)
      goto LABEL_16;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "planarPassThru");
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x100000) == 0)
  {
LABEL_16:
    if ((v5 & 0x200000) == 0)
      goto LABEL_17;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "planarSaturationAtMaxChaos", *((float *)this + 31));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x200000) == 0)
  {
LABEL_17:
    if ((v5 & 4) == 0)
      goto LABEL_18;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "planarSaturationAtMaxEnergy", *((float *)this + 32));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 4) == 0)
  {
LABEL_18:
    if ((v5 & 8) == 0)
      goto LABEL_19;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "planarTimestampAtMaxChaos");
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 8) == 0)
  {
LABEL_19:
    if ((v5 & 0x10) == 0)
      goto LABEL_20;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "planarTimestampAtMaxEnergy");
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x10) == 0)
  {
LABEL_20:
    if ((v5 & 0x400000) == 0)
      goto LABEL_21;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "planarTimestampAtMaxSaturation");
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x400000) == 0)
  {
LABEL_21:
    if ((v5 & 0x800000) == 0)
      goto LABEL_22;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "rolloverChaosAtMaxEnergy", *((float *)this + 33));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x800000) == 0)
  {
LABEL_22:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_23;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "rolloverChaosAtMaxSaturation", *((float *)this + 34));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_23:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_24;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "rolloverEnergyAtMaxChaos", *((float *)this + 35));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_24:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_25;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "rolloverEnergyAtMaxSaturation", *((float *)this + 36));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_26;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "rolloverMaxChaos", *((float *)this + 37));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_27;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "rolloverMaxEnergy", *((float *)this + 38));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x1000000000) == 0)
      goto LABEL_28;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "rolloverMaxSaturation", *((float *)this + 39));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x1000000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_29;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "rolloverPassThru");
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_30;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "rolloverSaturationAtMaxChaos", *((float *)this + 40));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x20) == 0)
      goto LABEL_31;
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(a2, "rolloverSaturationAtMaxEnergy", *((float *)this + 41));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x20) == 0)
  {
LABEL_31:
    if ((v5 & 0x40) == 0)
      goto LABEL_32;
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(a2, "rolloverTimestampAtMaxChaos");
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x40) == 0)
  {
LABEL_32:
    if ((v5 & 0x80) == 0)
      goto LABEL_33;
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(a2, "rolloverTimestampAtMaxEnergy");
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x80) == 0)
  {
LABEL_33:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_34;
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(a2, "rolloverTimestampAtMaxSaturation");
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_35;
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(a2, "soundEnvelopeCount", *((float *)this + 42));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_36;
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(a2, "soundMaxMeanOverArmSession", *((float *)this + 43));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x400000000) == 0)
      goto LABEL_37;
LABEL_75:
    PB::TextFormatter::format(a2, "soundMeanLast15s", *((float *)this + 45));
    if ((*(_QWORD *)((_BYTE *)this + 188) & 0x100) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_38;
  }
LABEL_74:
  PB::TextFormatter::format(a2, "soundMeanCurrentWindow", *((float *)this + 44));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x400000000) != 0)
    goto LABEL_75;
LABEL_37:
  if ((v5 & 0x100) != 0)
LABEL_38:
    PB::TextFormatter::format(a2, "timestamp");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SafetyTrustedAudioResult::readFrom(CMMsl::SafetyTrustedAudioResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char v54;
  unsigned int v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char v76;
  unsigned int v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  char v87;
  unsigned int v88;
  uint64_t v89;
  unint64_t v90;
  char v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  char v98;
  unsigned int v99;
  uint64_t v100;
  unint64_t v101;
  char v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  char v106;
  unsigned int v107;
  uint64_t v108;
  unint64_t v109;
  char v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  char v114;
  unsigned int v115;
  uint64_t v116;
  unint64_t v117;
  char v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  char v122;
  unsigned int v123;
  uint64_t v124;
  unint64_t v125;
  char v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  int v133;
  BOOL v134;
  unint64_t v135;
  unint64_t v136;
  int v137;
  BOOL v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  char v142;
  unsigned int v143;
  uint64_t v144;
  unint64_t v145;
  char v146;
  char v147;
  unsigned int v148;
  unint64_t v149;
  char v150;
  char v151;
  unsigned int v152;
  unint64_t v153;
  char v154;
  char v155;
  unsigned int v156;
  unint64_t v157;
  char v158;
  char v159;
  unsigned int v160;
  unint64_t v161;
  char v162;
  char v163;
  unsigned int v164;
  unint64_t v165;
  char v166;
  char v167;
  unsigned int v168;
  unint64_t v169;
  char v170;
  char v171;
  unsigned int v172;
  unint64_t v173;
  char v174;
  char v175;
  unsigned int v176;
  unint64_t v177;
  char v178;
  char v179;
  unsigned int v180;
  unint64_t v181;
  char v182;
  char v183;
  unsigned int v184;
  unint64_t v185;
  char v186;
  char v187;
  unsigned int v188;
  unint64_t v189;
  char v190;
  char v191;
  unsigned int v192;
  unint64_t v193;
  char v194;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      break;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *(_QWORD *)((char *)this + 188) |= 0x100uLL;
        v20 = *((_QWORD *)a2 + 1);
        v21 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          do
          {
            v26 = v20 + 1;
            *((_QWORD *)a2 + 1) = v20 + 1;
            v27 = *(_BYTE *)(v22 + v20);
            v25 |= (unint64_t)(v27 & 0x7F) << v23;
            if ((v27 & 0x80) == 0)
              goto LABEL_278;
            v23 += 7;
            v20 = v26;
            v14 = v24++ > 8;
          }
          while (!v14);
LABEL_186:
          v25 = 0;
          goto LABEL_278;
        }
        v147 = 0;
        v148 = 0;
        v25 = 0;
        if (v21 <= v20)
          v21 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v21 == v20)
          {
            v25 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v149 = v20 + 1;
            v150 = *(_BYTE *)(v22 + v20);
            *((_QWORD *)a2 + 1) = v149;
            v25 |= (unint64_t)(v150 & 0x7F) << v147;
            if (v150 < 0)
            {
              v147 += 7;
              v20 = v149;
              v14 = v148++ > 8;
              if (v14)
                goto LABEL_186;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v25 = 0;
          }
          break;
        }
LABEL_278:
        *((_QWORD *)this + 9) = v25;
        goto LABEL_270;
      case 2u:
        *(_QWORD *)((char *)this + 188) |= 0x40000uLL;
        v28 = *((_QWORD *)a2 + 1);
        if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_168;
        *((_DWORD *)this + 29) = *(_DWORD *)(*(_QWORD *)a2 + v28);
        goto LABEL_269;
      case 3u:
        *(_QWORD *)((char *)this + 188) |= 8uLL;
        v29 = *((_QWORD *)a2 + 1);
        v30 = *((_QWORD *)a2 + 2);
        v31 = *(_QWORD *)a2;
        if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
        {
          v32 = 0;
          v33 = 0;
          v34 = 0;
          do
          {
            v35 = v29 + 1;
            *((_QWORD *)a2 + 1) = v29 + 1;
            v36 = *(_BYTE *)(v31 + v29);
            v34 |= (unint64_t)(v36 & 0x7F) << v32;
            if ((v36 & 0x80) == 0)
              goto LABEL_282;
            v32 += 7;
            v29 = v35;
            v14 = v33++ > 8;
          }
          while (!v14);
LABEL_193:
          v34 = 0;
          goto LABEL_282;
        }
        v151 = 0;
        v152 = 0;
        v34 = 0;
        if (v30 <= v29)
          v30 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v30 == v29)
          {
            v34 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v153 = v29 + 1;
            v154 = *(_BYTE *)(v31 + v29);
            *((_QWORD *)a2 + 1) = v153;
            v34 |= (unint64_t)(v154 & 0x7F) << v151;
            if (v154 < 0)
            {
              v151 += 7;
              v29 = v153;
              v14 = v152++ > 8;
              if (v14)
                goto LABEL_193;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v34 = 0;
          }
          break;
        }
LABEL_282:
        *((_QWORD *)this + 4) = v34;
        goto LABEL_270;
      case 4u:
        *(_QWORD *)((char *)this + 188) |= 0x2000uLL;
        v37 = *((_QWORD *)a2 + 1);
        if (v37 > 0xFFFFFFFFFFFFFFFBLL || v37 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_168;
        *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v37);
        goto LABEL_269;
      case 5u:
        *(_QWORD *)((char *)this + 188) |= 0x200000uLL;
        v38 = *((_QWORD *)a2 + 1);
        if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_168;
        *((_DWORD *)this + 32) = *(_DWORD *)(*(_QWORD *)a2 + v38);
        goto LABEL_269;
      case 6u:
        *(_QWORD *)((char *)this + 188) |= 0x20000uLL;
        v39 = *((_QWORD *)a2 + 1);
        if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_168;
        *((_DWORD *)this + 28) = *(_DWORD *)(*(_QWORD *)a2 + v39);
        goto LABEL_269;
      case 7u:
        *(_QWORD *)((char *)this + 188) |= 4uLL;
        v40 = *((_QWORD *)a2 + 1);
        v41 = *((_QWORD *)a2 + 2);
        v42 = *(_QWORD *)a2;
        if (v40 <= 0xFFFFFFFFFFFFFFF5 && v40 + 10 <= v41)
        {
          v43 = 0;
          v44 = 0;
          v45 = 0;
          do
          {
            v46 = v40 + 1;
            *((_QWORD *)a2 + 1) = v40 + 1;
            v47 = *(_BYTE *)(v42 + v40);
            v45 |= (unint64_t)(v47 & 0x7F) << v43;
            if ((v47 & 0x80) == 0)
              goto LABEL_286;
            v43 += 7;
            v40 = v46;
            v14 = v44++ > 8;
          }
          while (!v14);
LABEL_200:
          v45 = 0;
          goto LABEL_286;
        }
        v155 = 0;
        v156 = 0;
        v45 = 0;
        if (v41 <= v40)
          v41 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v41 == v40)
          {
            v45 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v157 = v40 + 1;
            v158 = *(_BYTE *)(v42 + v40);
            *((_QWORD *)a2 + 1) = v157;
            v45 |= (unint64_t)(v158 & 0x7F) << v155;
            if (v158 < 0)
            {
              v155 += 7;
              v40 = v157;
              v14 = v156++ > 8;
              if (v14)
                goto LABEL_200;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v45 = 0;
          }
          break;
        }
LABEL_286:
        *((_QWORD *)this + 3) = v45;
        goto LABEL_270;
      case 8u:
        *(_QWORD *)((char *)this + 188) |= 0x8000uLL;
        v48 = *((_QWORD *)a2 + 1);
        if (v48 > 0xFFFFFFFFFFFFFFFBLL || v48 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_168;
        *((_DWORD *)this + 26) = *(_DWORD *)(*(_QWORD *)a2 + v48);
        goto LABEL_269;
      case 9u:
        *(_QWORD *)((char *)this + 188) |= 0x100000uLL;
        v49 = *((_QWORD *)a2 + 1);
        if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_168;
        *((_DWORD *)this + 31) = *(_DWORD *)(*(_QWORD *)a2 + v49);
        goto LABEL_269;
      case 0xAu:
        *(_QWORD *)((char *)this + 188) |= 0x80000uLL;
        v50 = *((_QWORD *)a2 + 1);
        if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_168;
        *((_DWORD *)this + 30) = *(_DWORD *)(*(_QWORD *)a2 + v50);
        goto LABEL_269;
      case 0xBu:
        *(_QWORD *)((char *)this + 188) |= 0x10uLL;
        v51 = *((_QWORD *)a2 + 1);
        v52 = *((_QWORD *)a2 + 2);
        v53 = *(_QWORD *)a2;
        if (v51 <= 0xFFFFFFFFFFFFFFF5 && v51 + 10 <= v52)
        {
          v54 = 0;
          v55 = 0;
          v56 = 0;
          do
          {
            v57 = v51 + 1;
            *((_QWORD *)a2 + 1) = v51 + 1;
            v58 = *(_BYTE *)(v53 + v51);
            v56 |= (unint64_t)(v58 & 0x7F) << v54;
            if ((v58 & 0x80) == 0)
              goto LABEL_290;
            v54 += 7;
            v51 = v57;
            v14 = v55++ > 8;
          }
          while (!v14);
LABEL_207:
          v56 = 0;
          goto LABEL_290;
        }
        v159 = 0;
        v160 = 0;
        v56 = 0;
        if (v52 <= v51)
          v52 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v52 == v51)
          {
            v56 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v161 = v51 + 1;
            v162 = *(_BYTE *)(v53 + v51);
            *((_QWORD *)a2 + 1) = v161;
            v56 |= (unint64_t)(v162 & 0x7F) << v159;
            if (v162 < 0)
            {
              v159 += 7;
              v51 = v161;
              v14 = v160++ > 8;
              if (v14)
                goto LABEL_207;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v56 = 0;
          }
          break;
        }
LABEL_290:
        *((_QWORD *)this + 5) = v56;
        goto LABEL_270;
      case 0xCu:
        *(_QWORD *)((char *)this + 188) |= 0x4000uLL;
        v59 = *((_QWORD *)a2 + 1);
        if (v59 > 0xFFFFFFFFFFFFFFFBLL || v59 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_168;
        *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v59);
        goto LABEL_269;
      case 0xDu:
        *(_QWORD *)((char *)this + 188) |= 0x10000uLL;
        v60 = *((_QWORD *)a2 + 1);
        if (v60 > 0xFFFFFFFFFFFFFFFBLL || v60 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_168;
        *((_DWORD *)this + 27) = *(_DWORD *)(*(_QWORD *)a2 + v60);
        goto LABEL_269;
      case 0xEu:
        *(_QWORD *)((char *)this + 188) |= 0x8000000uLL;
        v61 = *((_QWORD *)a2 + 1);
        if (v61 > 0xFFFFFFFFFFFFFFFBLL || v61 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_168;
        *((_DWORD *)this + 38) = *(_DWORD *)(*(_QWORD *)a2 + v61);
        goto LABEL_269;
      case 0xFu:
        *(_QWORD *)((char *)this + 188) |= 0x40uLL;
        v62 = *((_QWORD *)a2 + 1);
        v63 = *((_QWORD *)a2 + 2);
        v64 = *(_QWORD *)a2;
        if (v62 <= 0xFFFFFFFFFFFFFFF5 && v62 + 10 <= v63)
        {
          v65 = 0;
          v66 = 0;
          v67 = 0;
          do
          {
            v68 = v62 + 1;
            *((_QWORD *)a2 + 1) = v62 + 1;
            v69 = *(_BYTE *)(v64 + v62);
            v67 |= (unint64_t)(v69 & 0x7F) << v65;
            if ((v69 & 0x80) == 0)
              goto LABEL_294;
            v65 += 7;
            v62 = v68;
            v14 = v66++ > 8;
          }
          while (!v14);
LABEL_214:
          v67 = 0;
          goto LABEL_294;
        }
        v163 = 0;
        v164 = 0;
        v67 = 0;
        if (v63 <= v62)
          v63 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v63 == v62)
          {
            v67 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v165 = v62 + 1;
            v166 = *(_BYTE *)(v64 + v62);
            *((_QWORD *)a2 + 1) = v165;
            v67 |= (unint64_t)(v166 & 0x7F) << v163;
            if (v166 < 0)
            {
              v163 += 7;
              v62 = v165;
              v14 = v164++ > 8;
              if (v14)
                goto LABEL_214;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v67 = 0;
          }
          break;
        }
LABEL_294:
        *((_QWORD *)this + 7) = v67;
        goto LABEL_270;
      case 0x10u:
        *(_QWORD *)((char *)this + 188) |= 0x400000uLL;
        v70 = *((_QWORD *)a2 + 1);
        if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_168;
        *((_DWORD *)this + 33) = *(_DWORD *)(*(_QWORD *)a2 + v70);
        goto LABEL_269;
      case 0x11u:
        *(_QWORD *)((char *)this + 188) |= 0x40000000uLL;
        v71 = *((_QWORD *)a2 + 1);
        if (v71 > 0xFFFFFFFFFFFFFFFBLL || v71 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_168;
        *((_DWORD *)this + 41) = *(_DWORD *)(*(_QWORD *)a2 + v71);
        goto LABEL_269;
      case 0x12u:
        *(_QWORD *)((char *)this + 188) |= 0x4000000uLL;
        v72 = *((_QWORD *)a2 + 1);
        if (v72 > 0xFFFFFFFFFFFFFFFBLL || v72 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_168;
        *((_DWORD *)this + 37) = *(_DWORD *)(*(_QWORD *)a2 + v72);
        goto LABEL_269;
      case 0x13u:
        *(_QWORD *)((char *)this + 188) |= 0x20uLL;
        v73 = *((_QWORD *)a2 + 1);
        v74 = *((_QWORD *)a2 + 2);
        v75 = *(_QWORD *)a2;
        if (v73 <= 0xFFFFFFFFFFFFFFF5 && v73 + 10 <= v74)
        {
          v76 = 0;
          v77 = 0;
          v78 = 0;
          do
          {
            v79 = v73 + 1;
            *((_QWORD *)a2 + 1) = v73 + 1;
            v80 = *(_BYTE *)(v75 + v73);
            v78 |= (unint64_t)(v80 & 0x7F) << v76;
            if ((v80 & 0x80) == 0)
              goto LABEL_298;
            v76 += 7;
            v73 = v79;
            v14 = v77++ > 8;
          }
          while (!v14);
LABEL_221:
          v78 = 0;
          goto LABEL_298;
        }
        v167 = 0;
        v168 = 0;
        v78 = 0;
        if (v74 <= v73)
          v74 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v74 == v73)
          {
            v78 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v169 = v73 + 1;
            v170 = *(_BYTE *)(v75 + v73);
            *((_QWORD *)a2 + 1) = v169;
            v78 |= (unint64_t)(v170 & 0x7F) << v167;
            if (v170 < 0)
            {
              v167 += 7;
              v73 = v169;
              v14 = v168++ > 8;
              if (v14)
                goto LABEL_221;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v78 = 0;
          }
          break;
        }
LABEL_298:
        *((_QWORD *)this + 6) = v78;
        goto LABEL_270;
      case 0x14u:
        *(_QWORD *)((char *)this + 188) |= 0x1000000uLL;
        v81 = *((_QWORD *)a2 + 1);
        if (v81 > 0xFFFFFFFFFFFFFFFBLL || v81 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_168;
        *((_DWORD *)this + 35) = *(_DWORD *)(*(_QWORD *)a2 + v81);
        goto LABEL_269;
      case 0x15u:
        *(_QWORD *)((char *)this + 188) |= 0x20000000uLL;
        v82 = *((_QWORD *)a2 + 1);
        if (v82 > 0xFFFFFFFFFFFFFFFBLL || v82 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_168;
        *((_DWORD *)this + 40) = *(_DWORD *)(*(_QWORD *)a2 + v82);
        goto LABEL_269;
      case 0x16u:
        *(_QWORD *)((char *)this + 188) |= 0x10000000uLL;
        v83 = *((_QWORD *)a2 + 1);
        if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_168;
        *((_DWORD *)this + 39) = *(_DWORD *)(*(_QWORD *)a2 + v83);
        goto LABEL_269;
      case 0x17u:
        *(_QWORD *)((char *)this + 188) |= 0x80uLL;
        v84 = *((_QWORD *)a2 + 1);
        v85 = *((_QWORD *)a2 + 2);
        v86 = *(_QWORD *)a2;
        if (v84 <= 0xFFFFFFFFFFFFFFF5 && v84 + 10 <= v85)
        {
          v87 = 0;
          v88 = 0;
          v89 = 0;
          do
          {
            v90 = v84 + 1;
            *((_QWORD *)a2 + 1) = v84 + 1;
            v91 = *(_BYTE *)(v86 + v84);
            v89 |= (unint64_t)(v91 & 0x7F) << v87;
            if ((v91 & 0x80) == 0)
              goto LABEL_302;
            v87 += 7;
            v84 = v90;
            v14 = v88++ > 8;
          }
          while (!v14);
LABEL_228:
          v89 = 0;
          goto LABEL_302;
        }
        v171 = 0;
        v172 = 0;
        v89 = 0;
        if (v85 <= v84)
          v85 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v85 == v84)
          {
            v89 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v173 = v84 + 1;
            v174 = *(_BYTE *)(v86 + v84);
            *((_QWORD *)a2 + 1) = v173;
            v89 |= (unint64_t)(v174 & 0x7F) << v171;
            if (v174 < 0)
            {
              v171 += 7;
              v84 = v173;
              v14 = v172++ > 8;
              if (v14)
                goto LABEL_228;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v89 = 0;
          }
          break;
        }
LABEL_302:
        *((_QWORD *)this + 8) = v89;
        goto LABEL_270;
      case 0x18u:
        *(_QWORD *)((char *)this + 188) |= 0x800000uLL;
        v92 = *((_QWORD *)a2 + 1);
        if (v92 > 0xFFFFFFFFFFFFFFFBLL || v92 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_168;
        *((_DWORD *)this + 34) = *(_DWORD *)(*(_QWORD *)a2 + v92);
        goto LABEL_269;
      case 0x19u:
        *(_QWORD *)((char *)this + 188) |= 0x2000000uLL;
        v93 = *((_QWORD *)a2 + 1);
        if (v93 > 0xFFFFFFFFFFFFFFFBLL || v93 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_168;
        *((_DWORD *)this + 36) = *(_DWORD *)(*(_QWORD *)a2 + v93);
        goto LABEL_269;
      case 0x1Au:
        *(_QWORD *)((char *)this + 188) |= 0x400uLL;
        v94 = *((_QWORD *)a2 + 1);
        if (v94 > 0xFFFFFFFFFFFFFFFBLL || v94 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_168;
        *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v94);
        goto LABEL_269;
      case 0x1Bu:
        *(_QWORD *)((char *)this + 188) |= 0x1000uLL;
        v95 = *((_QWORD *)a2 + 1);
        v96 = *((_QWORD *)a2 + 2);
        v97 = *(_QWORD *)a2;
        if (v95 <= 0xFFFFFFFFFFFFFFF5 && v95 + 10 <= v96)
        {
          v98 = 0;
          v99 = 0;
          v100 = 0;
          do
          {
            v101 = v95 + 1;
            *((_QWORD *)a2 + 1) = v95 + 1;
            v102 = *(_BYTE *)(v97 + v95);
            v100 |= (unint64_t)(v102 & 0x7F) << v98;
            if ((v102 & 0x80) == 0)
              goto LABEL_306;
            v98 += 7;
            v95 = v101;
            v14 = v99++ > 8;
          }
          while (!v14);
LABEL_235:
          LODWORD(v100) = 0;
          goto LABEL_306;
        }
        v175 = 0;
        v176 = 0;
        v100 = 0;
        if (v96 <= v95)
          v96 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v96 == v95)
          {
            LODWORD(v100) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v177 = v95 + 1;
            v178 = *(_BYTE *)(v97 + v95);
            *((_QWORD *)a2 + 1) = v177;
            v100 |= (unint64_t)(v178 & 0x7F) << v175;
            if (v178 < 0)
            {
              v175 += 7;
              v95 = v177;
              v14 = v176++ > 8;
              if (v14)
                goto LABEL_235;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v100) = 0;
          }
          break;
        }
LABEL_306:
        *((_DWORD *)this + 23) = v100;
        goto LABEL_270;
      case 0x1Cu:
        *(_QWORD *)((char *)this + 188) |= 0x800uLL;
        v103 = *((_QWORD *)a2 + 1);
        v104 = *((_QWORD *)a2 + 2);
        v105 = *(_QWORD *)a2;
        if (v103 <= 0xFFFFFFFFFFFFFFF5 && v103 + 10 <= v104)
        {
          v106 = 0;
          v107 = 0;
          v108 = 0;
          do
          {
            v109 = v103 + 1;
            *((_QWORD *)a2 + 1) = v103 + 1;
            v110 = *(_BYTE *)(v105 + v103);
            v108 |= (unint64_t)(v110 & 0x7F) << v106;
            if ((v110 & 0x80) == 0)
              goto LABEL_310;
            v106 += 7;
            v103 = v109;
            v14 = v107++ > 8;
          }
          while (!v14);
LABEL_242:
          LODWORD(v108) = 0;
          goto LABEL_310;
        }
        v179 = 0;
        v180 = 0;
        v108 = 0;
        if (v104 <= v103)
          v104 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v104 == v103)
          {
            LODWORD(v108) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v181 = v103 + 1;
            v182 = *(_BYTE *)(v105 + v103);
            *((_QWORD *)a2 + 1) = v181;
            v108 |= (unint64_t)(v182 & 0x7F) << v179;
            if (v182 < 0)
            {
              v179 += 7;
              v103 = v181;
              v14 = v180++ > 8;
              if (v14)
                goto LABEL_242;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v108) = 0;
          }
          break;
        }
LABEL_310:
        *((_DWORD *)this + 22) = v108;
        goto LABEL_270;
      case 0x1Du:
        *(_QWORD *)((char *)this + 188) |= 2uLL;
        v111 = *((_QWORD *)a2 + 1);
        v112 = *((_QWORD *)a2 + 2);
        v113 = *(_QWORD *)a2;
        if (v111 <= 0xFFFFFFFFFFFFFFF5 && v111 + 10 <= v112)
        {
          v114 = 0;
          v115 = 0;
          v116 = 0;
          do
          {
            v117 = v111 + 1;
            *((_QWORD *)a2 + 1) = v111 + 1;
            v118 = *(_BYTE *)(v113 + v111);
            v116 |= (unint64_t)(v118 & 0x7F) << v114;
            if ((v118 & 0x80) == 0)
              goto LABEL_314;
            v114 += 7;
            v111 = v117;
            v14 = v115++ > 8;
          }
          while (!v14);
LABEL_249:
          v116 = 0;
          goto LABEL_314;
        }
        v183 = 0;
        v184 = 0;
        v116 = 0;
        if (v112 <= v111)
          v112 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v112 == v111)
          {
            v116 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v185 = v111 + 1;
            v186 = *(_BYTE *)(v113 + v111);
            *((_QWORD *)a2 + 1) = v185;
            v116 |= (unint64_t)(v186 & 0x7F) << v183;
            if (v186 < 0)
            {
              v183 += 7;
              v111 = v185;
              v14 = v184++ > 8;
              if (v14)
                goto LABEL_249;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v116 = 0;
          }
          break;
        }
LABEL_314:
        *((_QWORD *)this + 2) = v116;
        goto LABEL_270;
      case 0x1Eu:
        *(_QWORD *)((char *)this + 188) |= 1uLL;
        v119 = *((_QWORD *)a2 + 1);
        v120 = *((_QWORD *)a2 + 2);
        v121 = *(_QWORD *)a2;
        if (v119 <= 0xFFFFFFFFFFFFFFF5 && v119 + 10 <= v120)
        {
          v122 = 0;
          v123 = 0;
          v124 = 0;
          do
          {
            v125 = v119 + 1;
            *((_QWORD *)a2 + 1) = v119 + 1;
            v126 = *(_BYTE *)(v121 + v119);
            v124 |= (unint64_t)(v126 & 0x7F) << v122;
            if ((v126 & 0x80) == 0)
              goto LABEL_318;
            v122 += 7;
            v119 = v125;
            v14 = v123++ > 8;
          }
          while (!v14);
LABEL_256:
          v124 = 0;
          goto LABEL_318;
        }
        v187 = 0;
        v188 = 0;
        v124 = 0;
        if (v120 <= v119)
          v120 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v120 == v119)
          {
            v124 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v189 = v119 + 1;
            v190 = *(_BYTE *)(v121 + v119);
            *((_QWORD *)a2 + 1) = v189;
            v124 |= (unint64_t)(v190 & 0x7F) << v187;
            if (v190 < 0)
            {
              v187 += 7;
              v119 = v189;
              v14 = v188++ > 8;
              if (v14)
                goto LABEL_256;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v124 = 0;
          }
          break;
        }
LABEL_318:
        *((_QWORD *)this + 1) = v124;
        goto LABEL_270;
      case 0x1Fu:
        *(_QWORD *)((char *)this + 188) |= 0x100000000uLL;
        v127 = *((_QWORD *)a2 + 1);
        if (v127 > 0xFFFFFFFFFFFFFFFBLL || v127 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_168;
        *((_DWORD *)this + 43) = *(_DWORD *)(*(_QWORD *)a2 + v127);
        goto LABEL_269;
      case 0x20u:
        *(_QWORD *)((char *)this + 188) |= 0x400000000uLL;
        v128 = *((_QWORD *)a2 + 1);
        if (v128 > 0xFFFFFFFFFFFFFFFBLL || v128 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_168;
        *((_DWORD *)this + 45) = *(_DWORD *)(*(_QWORD *)a2 + v128);
        goto LABEL_269;
      case 0x21u:
        *(_QWORD *)((char *)this + 188) |= 0x200000000uLL;
        v129 = *((_QWORD *)a2 + 1);
        if (v129 > 0xFFFFFFFFFFFFFFFBLL || v129 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_168;
        *((_DWORD *)this + 44) = *(_DWORD *)(*(_QWORD *)a2 + v129);
        goto LABEL_269;
      case 0x22u:
        *(_QWORD *)((char *)this + 188) |= 0x80000000uLL;
        v130 = *((_QWORD *)a2 + 1);
        if (v130 <= 0xFFFFFFFFFFFFFFFBLL && v130 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 42) = *(_DWORD *)(*(_QWORD *)a2 + v130);
LABEL_269:
          *((_QWORD *)a2 + 1) += 4;
        }
        else
        {
LABEL_168:
          *((_BYTE *)a2 + 24) = 1;
        }
        goto LABEL_270;
      case 0x23u:
        *(_QWORD *)((char *)this + 188) |= 0x800000000uLL;
        v131 = *((_QWORD *)a2 + 1);
        if (v131 >= *((_QWORD *)a2 + 2))
        {
          v134 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v132 = v131 + 1;
          v133 = *(unsigned __int8 *)(*(_QWORD *)a2 + v131);
          *((_QWORD *)a2 + 1) = v132;
          v134 = v133 != 0;
        }
        *((_BYTE *)this + 184) = v134;
        goto LABEL_270;
      case 0x24u:
        *(_QWORD *)((char *)this + 188) |= 0x1000000000uLL;
        v135 = *((_QWORD *)a2 + 1);
        if (v135 >= *((_QWORD *)a2 + 2))
        {
          v138 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v136 = v135 + 1;
          v137 = *(unsigned __int8 *)(*(_QWORD *)a2 + v135);
          *((_QWORD *)a2 + 1) = v136;
          v138 = v137 != 0;
        }
        *((_BYTE *)this + 185) = v138;
        goto LABEL_270;
      case 0x25u:
        *(_QWORD *)((char *)this + 188) |= 0x200uLL;
        v139 = *((_QWORD *)a2 + 1);
        v140 = *((_QWORD *)a2 + 2);
        v141 = *(_QWORD *)a2;
        if (v139 <= 0xFFFFFFFFFFFFFFF5 && v139 + 10 <= v140)
        {
          v142 = 0;
          v143 = 0;
          v144 = 0;
          do
          {
            v145 = v139 + 1;
            *((_QWORD *)a2 + 1) = v139 + 1;
            v146 = *(_BYTE *)(v141 + v139);
            v144 |= (unint64_t)(v146 & 0x7F) << v142;
            if ((v146 & 0x80) == 0)
              goto LABEL_322;
            v142 += 7;
            v139 = v145;
            v14 = v143++ > 8;
          }
          while (!v14);
LABEL_267:
          LODWORD(v144) = 0;
          goto LABEL_322;
        }
        v191 = 0;
        v192 = 0;
        v144 = 0;
        if (v140 <= v139)
          v140 = *((_QWORD *)a2 + 1);
        break;
      default:
        goto LABEL_19;
    }
    while (1)
    {
      if (v140 == v139)
      {
        LODWORD(v144) = 0;
        *((_BYTE *)a2 + 24) = 1;
        goto LABEL_322;
      }
      v193 = v139 + 1;
      v194 = *(_BYTE *)(v141 + v139);
      *((_QWORD *)a2 + 1) = v193;
      v144 |= (unint64_t)(v194 & 0x7F) << v191;
      if ((v194 & 0x80) == 0)
        break;
      v191 += 7;
      v139 = v193;
      v14 = v192++ > 8;
      if (v14)
        goto LABEL_267;
    }
    if (*((_BYTE *)a2 + 24))
      LODWORD(v144) = 0;
LABEL_322:
    *((_DWORD *)this + 20) = v144;
LABEL_270:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v15 = 0;
  v16 = 0;
  v11 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v17 = v2 + 1;
    v18 = *(_BYTE *)(v8 + v2);
    *((_QWORD *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0)
      goto LABEL_21;
    v15 += 7;
    v2 = v17;
    v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  result = PB::Reader::skip(a2);
  if ((_DWORD)result)
    goto LABEL_270;
  return result;
}

uint64_t CMMsl::SafetyTrustedAudioResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = this;
  v4 = *(_QWORD *)(this + 188);
  if ((v4 & 0x100) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_QWORD *)(v3 + 188);
    if ((v4 & 0x40000) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_41;
    }
  }
  else if ((v4 & 0x40000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 116));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x2000) == 0)
      goto LABEL_5;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x2000) == 0)
  {
LABEL_5:
    if ((v4 & 0x200000) == 0)
      goto LABEL_6;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 96));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x200000) == 0)
  {
LABEL_6:
    if ((v4 & 0x20000) == 0)
      goto LABEL_7;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(float *)(v3 + 128));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x20000) == 0)
  {
LABEL_7:
    if ((v4 & 4) == 0)
      goto LABEL_8;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(float *)(v3 + 112));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 0x8000) == 0)
      goto LABEL_9;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x8000) == 0)
  {
LABEL_9:
    if ((v4 & 0x100000) == 0)
      goto LABEL_10;
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(float *)(v3 + 104));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x100000) == 0)
  {
LABEL_10:
    if ((v4 & 0x80000) == 0)
      goto LABEL_11;
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(float *)(v3 + 124));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x80000) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0)
      goto LABEL_12;
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(float *)(v3 + 120));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x10) == 0)
  {
LABEL_12:
    if ((v4 & 0x4000) == 0)
      goto LABEL_13;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x4000) == 0)
  {
LABEL_13:
    if ((v4 & 0x10000) == 0)
      goto LABEL_14;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(float *)(v3 + 100));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x10000) == 0)
  {
LABEL_14:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_15;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(float *)(v3 + 108));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x40) == 0)
      goto LABEL_16;
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(float *)(v3 + 152));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x40) == 0)
  {
LABEL_16:
    if ((v4 & 0x400000) == 0)
      goto LABEL_17;
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x400000) == 0)
  {
LABEL_17:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_18;
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::write(a2, *(float *)(v3 + 132));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_19;
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::write(a2, *(float *)(v3 + 164));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x20) == 0)
      goto LABEL_20;
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::write(a2, *(float *)(v3 + 148));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x20) == 0)
  {
LABEL_20:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_21;
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_21:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_22;
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::write(a2, *(float *)(v3 + 140));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_23;
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(float *)(v3 + 160));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x80) == 0)
      goto LABEL_24;
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::write(a2, *(float *)(v3 + 156));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x80) == 0)
  {
LABEL_24:
    if ((v4 & 0x800000) == 0)
      goto LABEL_25;
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x800000) == 0)
  {
LABEL_25:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_26;
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::write(a2, *(float *)(v3 + 136));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_26:
    if ((v4 & 0x400) == 0)
      goto LABEL_27;
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::write(a2, *(float *)(v3 + 144));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x400) == 0)
  {
LABEL_27:
    if ((v4 & 0x1000) == 0)
      goto LABEL_28;
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::write(a2, *(float *)(v3 + 84));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x1000) == 0)
  {
LABEL_28:
    if ((v4 & 0x800) == 0)
      goto LABEL_29;
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x800) == 0)
  {
LABEL_29:
    if ((v4 & 2) == 0)
      goto LABEL_30;
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 2) == 0)
  {
LABEL_30:
    if ((v4 & 1) == 0)
      goto LABEL_31;
    goto LABEL_68;
  }
LABEL_67:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 1) == 0)
  {
LABEL_31:
    if ((v4 & 0x100000000) == 0)
      goto LABEL_32;
    goto LABEL_69;
  }
LABEL_68:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_32:
    if ((v4 & 0x400000000) == 0)
      goto LABEL_33;
    goto LABEL_70;
  }
LABEL_69:
  this = PB::Writer::write(a2, *(float *)(v3 + 172));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_33:
    if ((v4 & 0x200000000) == 0)
      goto LABEL_34;
    goto LABEL_71;
  }
LABEL_70:
  this = PB::Writer::write(a2, *(float *)(v3 + 180));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_34:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_35;
    goto LABEL_72;
  }
LABEL_71:
  this = PB::Writer::write(a2, *(float *)(v3 + 176));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_35:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_36;
    goto LABEL_73;
  }
LABEL_72:
  this = PB::Writer::write(a2, *(float *)(v3 + 168));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_36:
    if ((v4 & 0x1000000000) == 0)
      goto LABEL_37;
    goto LABEL_74;
  }
LABEL_73:
  this = PB::Writer::write(a2);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x1000000000) == 0)
  {
LABEL_37:
    if ((v4 & 0x200) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_74:
  this = PB::Writer::write(a2);
  if ((*(_QWORD *)(v3 + 188) & 0x200) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::SafetyTrustedAudioResult::hash_value(CMMsl::SafetyTrustedAudioResult *this)
{
  uint64_t v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  float v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float v48;
  uint64_t v49;
  float v50;
  uint64_t v51;
  float v52;
  uint64_t v53;
  float v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v1 = *(_QWORD *)((char *)this + 188);
  if ((v1 & 0x100) == 0)
  {
    v2 = 0;
    if ((v1 & 0x40000) != 0)
      goto LABEL_3;
LABEL_98:
    v69 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_6;
    goto LABEL_99;
  }
  v2 = *((_QWORD *)this + 9);
  if ((v1 & 0x40000) == 0)
    goto LABEL_98;
LABEL_3:
  v3 = *((float *)this + 29);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  v69 = v4;
  if ((v1 & 8) != 0)
  {
LABEL_6:
    v68 = *((_QWORD *)this + 4);
    if ((v1 & 0x2000) != 0)
      goto LABEL_7;
LABEL_100:
    v67 = 0;
    if ((v1 & 0x200000) != 0)
      goto LABEL_10;
LABEL_101:
    v66 = 0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_13;
LABEL_102:
    v65 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_16;
    goto LABEL_103;
  }
LABEL_99:
  v68 = 0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_100;
LABEL_7:
  v5 = *((float *)this + 24);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  v67 = v6;
  if ((v1 & 0x200000) == 0)
    goto LABEL_101;
LABEL_10:
  v7 = *((float *)this + 32);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  v66 = v8;
  if ((v1 & 0x20000) == 0)
    goto LABEL_102;
LABEL_13:
  v9 = *((float *)this + 28);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  v65 = v10;
  if ((v1 & 4) != 0)
  {
LABEL_16:
    v64 = *((_QWORD *)this + 3);
    if ((v1 & 0x8000) != 0)
      goto LABEL_17;
LABEL_104:
    v63 = 0;
    if ((v1 & 0x100000) != 0)
      goto LABEL_20;
LABEL_105:
    v62 = 0;
    if ((v1 & 0x80000) != 0)
      goto LABEL_23;
LABEL_106:
    v61 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_26;
    goto LABEL_107;
  }
LABEL_103:
  v64 = 0;
  if ((v1 & 0x8000) == 0)
    goto LABEL_104;
LABEL_17:
  v11 = *((float *)this + 26);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  v63 = v12;
  if ((v1 & 0x100000) == 0)
    goto LABEL_105;
LABEL_20:
  v13 = *((float *)this + 31);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  v62 = v14;
  if ((v1 & 0x80000) == 0)
    goto LABEL_106;
LABEL_23:
  v15 = *((float *)this + 30);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  v61 = v16;
  if ((v1 & 0x10) != 0)
  {
LABEL_26:
    v60 = *((_QWORD *)this + 5);
    if ((v1 & 0x4000) != 0)
      goto LABEL_27;
LABEL_108:
    v18 = 0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_31;
LABEL_109:
    v20 = 0;
    if ((v1 & 0x8000000) != 0)
      goto LABEL_35;
LABEL_110:
    v22 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_39;
    goto LABEL_111;
  }
LABEL_107:
  v60 = 0;
  if ((v1 & 0x4000) == 0)
    goto LABEL_108;
LABEL_27:
  v17 = *((float *)this + 25);
  if (v17 == 0.0)
    v18 = 0;
  else
    v18 = LODWORD(v17);
  if ((v1 & 0x10000) == 0)
    goto LABEL_109;
LABEL_31:
  v19 = *((float *)this + 27);
  if (v19 == 0.0)
    v20 = 0;
  else
    v20 = LODWORD(v19);
  if ((v1 & 0x8000000) == 0)
    goto LABEL_110;
LABEL_35:
  v21 = *((float *)this + 38);
  if (v21 == 0.0)
    v22 = 0;
  else
    v22 = LODWORD(v21);
  if ((v1 & 0x40) != 0)
  {
LABEL_39:
    v23 = *((_QWORD *)this + 7);
    if ((v1 & 0x400000) != 0)
      goto LABEL_40;
LABEL_112:
    v25 = 0;
    if ((v1 & 0x40000000) != 0)
      goto LABEL_44;
LABEL_113:
    v27 = 0;
    if ((v1 & 0x4000000) != 0)
      goto LABEL_48;
LABEL_114:
    v29 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_52;
    goto LABEL_115;
  }
LABEL_111:
  v23 = 0;
  if ((v1 & 0x400000) == 0)
    goto LABEL_112;
LABEL_40:
  v24 = *((float *)this + 33);
  if (v24 == 0.0)
    v25 = 0;
  else
    v25 = LODWORD(v24);
  if ((v1 & 0x40000000) == 0)
    goto LABEL_113;
LABEL_44:
  v26 = *((float *)this + 41);
  if (v26 == 0.0)
    v27 = 0;
  else
    v27 = LODWORD(v26);
  if ((v1 & 0x4000000) == 0)
    goto LABEL_114;
LABEL_48:
  v28 = *((float *)this + 37);
  if (v28 == 0.0)
    v29 = 0;
  else
    v29 = LODWORD(v28);
  if ((v1 & 0x20) != 0)
  {
LABEL_52:
    v30 = *((_QWORD *)this + 6);
    if ((v1 & 0x1000000) != 0)
      goto LABEL_53;
LABEL_116:
    v32 = 0;
    if ((v1 & 0x20000000) != 0)
      goto LABEL_57;
LABEL_117:
    v34 = 0;
    if ((v1 & 0x10000000) != 0)
      goto LABEL_61;
LABEL_118:
    v36 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_65;
    goto LABEL_119;
  }
LABEL_115:
  v30 = 0;
  if ((v1 & 0x1000000) == 0)
    goto LABEL_116;
LABEL_53:
  v31 = *((float *)this + 35);
  if (v31 == 0.0)
    v32 = 0;
  else
    v32 = LODWORD(v31);
  if ((v1 & 0x20000000) == 0)
    goto LABEL_117;
LABEL_57:
  v33 = *((float *)this + 40);
  if (v33 == 0.0)
    v34 = 0;
  else
    v34 = LODWORD(v33);
  if ((v1 & 0x10000000) == 0)
    goto LABEL_118;
LABEL_61:
  v35 = *((float *)this + 39);
  if (v35 == 0.0)
    v36 = 0;
  else
    v36 = LODWORD(v35);
  if ((v1 & 0x80) != 0)
  {
LABEL_65:
    v37 = *((_QWORD *)this + 8);
    if ((v1 & 0x800000) != 0)
      goto LABEL_66;
LABEL_120:
    v39 = 0;
    if ((v1 & 0x2000000) != 0)
      goto LABEL_70;
LABEL_121:
    v41 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_74;
LABEL_122:
    v43 = 0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_78;
    goto LABEL_123;
  }
LABEL_119:
  v37 = 0;
  if ((v1 & 0x800000) == 0)
    goto LABEL_120;
LABEL_66:
  v38 = *((float *)this + 34);
  if (v38 == 0.0)
    v39 = 0;
  else
    v39 = LODWORD(v38);
  if ((v1 & 0x2000000) == 0)
    goto LABEL_121;
LABEL_70:
  v40 = *((float *)this + 36);
  if (v40 == 0.0)
    v41 = 0;
  else
    v41 = LODWORD(v40);
  if ((v1 & 0x400) == 0)
    goto LABEL_122;
LABEL_74:
  v42 = *((float *)this + 21);
  if (v42 == 0.0)
    v43 = 0;
  else
    v43 = LODWORD(v42);
  if ((v1 & 0x1000) != 0)
  {
LABEL_78:
    v44 = *((int *)this + 23);
    if ((v1 & 0x800) != 0)
      goto LABEL_79;
    goto LABEL_124;
  }
LABEL_123:
  v44 = 0;
  if ((v1 & 0x800) != 0)
  {
LABEL_79:
    v45 = *((unsigned int *)this + 22);
    if ((v1 & 2) != 0)
      goto LABEL_80;
    goto LABEL_125;
  }
LABEL_124:
  v45 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_80:
    v46 = *((_QWORD *)this + 2);
    if ((v1 & 1) != 0)
      goto LABEL_81;
    goto LABEL_126;
  }
LABEL_125:
  v46 = 0;
  if ((v1 & 1) != 0)
  {
LABEL_81:
    v47 = *((_QWORD *)this + 1);
    if ((v1 & 0x100000000) != 0)
      goto LABEL_82;
LABEL_127:
    v49 = 0;
    if ((v1 & 0x400000000) != 0)
      goto LABEL_85;
LABEL_128:
    v51 = 0;
    if ((v1 & 0x200000000) != 0)
      goto LABEL_88;
LABEL_129:
    v53 = 0;
    if ((v1 & 0x80000000) != 0)
      goto LABEL_91;
LABEL_130:
    v55 = 0;
    if ((v1 & 0x800000000) != 0)
      goto LABEL_94;
    goto LABEL_131;
  }
LABEL_126:
  v47 = 0;
  if ((v1 & 0x100000000) == 0)
    goto LABEL_127;
LABEL_82:
  v48 = *((float *)this + 43);
  v49 = LODWORD(v48);
  if (v48 == 0.0)
    v49 = 0;
  if ((v1 & 0x400000000) == 0)
    goto LABEL_128;
LABEL_85:
  v50 = *((float *)this + 45);
  v51 = LODWORD(v50);
  if (v50 == 0.0)
    v51 = 0;
  if ((v1 & 0x200000000) == 0)
    goto LABEL_129;
LABEL_88:
  v52 = *((float *)this + 44);
  v53 = LODWORD(v52);
  if (v52 == 0.0)
    v53 = 0;
  if ((v1 & 0x80000000) == 0)
    goto LABEL_130;
LABEL_91:
  v54 = *((float *)this + 42);
  v55 = LODWORD(v54);
  if (v54 == 0.0)
    v55 = 0;
  if ((v1 & 0x800000000) != 0)
  {
LABEL_94:
    v56 = *((unsigned __int8 *)this + 184);
    if ((v1 & 0x1000000000) != 0)
      goto LABEL_95;
LABEL_132:
    v57 = 0;
    if ((v1 & 0x200) != 0)
      goto LABEL_96;
LABEL_133:
    v58 = 0;
    return v69 ^ v2 ^ v68 ^ v67 ^ v66 ^ v65 ^ v64 ^ v63 ^ v62 ^ v61 ^ v60 ^ v18 ^ v20 ^ v22 ^ v23 ^ v25 ^ v27 ^ v29 ^ v30 ^ v32 ^ v34 ^ v36 ^ v37 ^ v39 ^ v41 ^ v43 ^ v44 ^ v45 ^ v46 ^ v47 ^ v49 ^ v51 ^ v53 ^ v55 ^ v56 ^ v57 ^ v58;
  }
LABEL_131:
  v56 = 0;
  if ((v1 & 0x1000000000) == 0)
    goto LABEL_132;
LABEL_95:
  v57 = *((unsigned __int8 *)this + 185);
  if ((v1 & 0x200) == 0)
    goto LABEL_133;
LABEL_96:
  v58 = *((unsigned int *)this + 20);
  return v69 ^ v2 ^ v68 ^ v67 ^ v66 ^ v65 ^ v64 ^ v63 ^ v62 ^ v61 ^ v60 ^ v18 ^ v20 ^ v22 ^ v23 ^ v25 ^ v27 ^ v29 ^ v30 ^ v32 ^ v34 ^ v36 ^ v37 ^ v39 ^ v41 ^ v43 ^ v44 ^ v45 ^ v46 ^ v47 ^ v49 ^ v51 ^ v53 ^ v55 ^ v56 ^ v57 ^ v58;
}

uint64_t CMMsl::SatelliteInfo::SatelliteInfo(uint64_t this)
{
  *(_QWORD *)this = &off_251360CB0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251360CB0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::SatelliteInfo::~SatelliteInfo(CMMsl::SatelliteInfo *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::SatelliteInfo::SatelliteInfo(CMMsl::SatelliteInfo *this, const CMMsl::SatelliteInfo *a2)
{
  char v2;
  char v3;
  float result;

  *(_QWORD *)this = &off_251360CB0;
  *((_DWORD *)this + 5) = 0;
  v2 = *((_BYTE *)a2 + 20);
  if ((v2 & 2) != 0)
  {
    result = *((float *)a2 + 3);
    v3 = 2;
    *((_BYTE *)this + 20) = 2;
    *((float *)this + 3) = result;
    v2 = *((_BYTE *)a2 + 20);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 2);
    v3 |= 1u;
    *((_BYTE *)this + 20) = v3;
    *((float *)this + 2) = result;
    v2 = *((_BYTE *)a2 + 20);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    result = *((float *)a2 + 4);
    *((_BYTE *)this + 20) = v3 | 4;
    *((float *)this + 4) = result;
  }
  return result;
}

uint64_t CMMsl::SatelliteInfo::operator=(uint64_t a1, uint64_t a2, float a3, float a4, float a5)
{
  char v6;
  char v7;
  int v8;
  uint64_t v9;
  int v10;
  _QWORD v12[2];
  int v13;
  int v14;

  if (a1 != a2)
  {
    v12[0] = &off_251360CB0;
    v14 = 0;
    v6 = *(_BYTE *)(a2 + 20);
    if ((v6 & 2) != 0)
    {
      a3 = *(float *)(a2 + 12);
      v7 = 2;
      LOBYTE(v14) = 2;
      if ((v6 & 1) != 0)
      {
LABEL_4:
        a4 = *(float *)(a2 + 8);
        v7 |= 1u;
        LOBYTE(v14) = v7;
        if ((v6 & 4) != 0)
          goto LABEL_8;
        goto LABEL_9;
      }
    }
    else
    {
      v7 = 0;
      if ((*(_BYTE *)(a2 + 20) & 1) != 0)
        goto LABEL_4;
    }
    if ((v6 & 4) != 0)
    {
LABEL_8:
      a5 = *(float *)(a2 + 16);
      LOBYTE(v14) = v7 | 4;
    }
LABEL_9:
    v8 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v14;
    v14 = v8;
    v9 = *(_QWORD *)(a1 + 8);
    *(float *)(a1 + 8) = a4;
    *(float *)(a1 + 12) = a3;
    v12[1] = v9;
    v10 = *(_DWORD *)(a1 + 16);
    *(float *)(a1 + 16) = a5;
    v13 = v10;
    PB::Base::~Base((PB::Base *)v12);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::SatelliteInfo *a2, CMMsl::SatelliteInfo *a3)
{
  int v3;
  int v4;
  int v5;
  float result;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  v4 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v4;
  v5 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v5;
  result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  return result;
}

float CMMsl::SatelliteInfo::SatelliteInfo(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_251360CB0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_251360CB0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::SatelliteInfo::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  int v9;
  int v10;

  if (a1 != a2)
  {
    v8[0] = &off_251360CB0;
    v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    v4 = *(_DWORD *)(a2 + 16);
    v10 = *(_DWORD *)(a1 + 20);
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 20) = v3;
    *(_QWORD *)(a1 + 8) = v6;
    v8[1] = v5;
    LODWORD(v5) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v4;
    v9 = v5;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::SatelliteInfo::formatText(CMMsl::SatelliteInfo *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 1) == 0)
  {
    if ((*((_BYTE *)this + 20) & 2) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(a2, "elevationDeg", *((float *)this + 3));
    if ((*((_BYTE *)this + 20) & 4) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_4;
  }
  PB::TextFormatter::format(a2, "azimuthDeg", *((float *)this + 2));
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 4) != 0)
LABEL_4:
    PB::TextFormatter::format(a2, "l1Cn0", *((float *)this + 4));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SatelliteInfo::readFrom(CMMsl::SatelliteInfo *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          v14 = v16++ > 8;
          if (v14)
            goto LABEL_27;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v19 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((_BYTE *)this + 20) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
      }
      else if ((_DWORD)v19 == 2)
      {
        *((_BYTE *)this + 20) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_DWORD *)this + 2) = *(_DWORD *)(*(_QWORD *)a2 + v2);
      }
      else
      {
        if ((_DWORD)v19 != 1)
        {
LABEL_27:
          result = PB::Reader::skip(a2);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          goto LABEL_37;
        }
        *((_BYTE *)this + 20) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
        {
LABEL_34:
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_37;
        }
        *((_DWORD *)this + 3) = *(_DWORD *)(*(_QWORD *)a2 + v2);
      }
      v2 = *((_QWORD *)a2 + 1) + 4;
      *((_QWORD *)a2 + 1) = v2;
LABEL_37:
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::SatelliteInfo::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 12));
    v4 = *(_BYTE *)(v3 + 20);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        return this;
      return PB::Writer::write(a2, *(float *)(v3 + 16));
    }
  }
  else if ((*(_BYTE *)(this + 20) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 8));
  if ((*(_BYTE *)(v3 + 20) & 4) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 16));
  return this;
}

BOOL CMMsl::SatelliteInfo::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 2) == 0 || *(float *)(a1 + 12) != *(float *)(a2 + 12))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(float *)(a1 + 8) != *(float *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 4) == 0;
  if ((*(_BYTE *)(a1 + 20) & 4) != 0)
    return (*(_BYTE *)(a2 + 20) & 4) != 0 && *(float *)(a1 + 16) == *(float *)(a2 + 16);
  return v2;
}

uint64_t CMMsl::SatelliteInfo::hash_value(CMMsl::SatelliteInfo *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;

  if ((*((_BYTE *)this + 20) & 2) != 0)
  {
    v6 = *((float *)this + 3);
    v1 = LODWORD(v6);
    if (v6 == 0.0)
      v1 = 0;
    if ((*((_BYTE *)this + 20) & 1) != 0)
    {
LABEL_3:
      v2 = *((float *)this + 2);
      v3 = LODWORD(v2);
      if (v2 == 0.0)
        v3 = 0;
      if ((*((_BYTE *)this + 20) & 4) != 0)
        goto LABEL_6;
LABEL_13:
      v5 = 0;
      return v3 ^ v1 ^ v5;
    }
  }
  else
  {
    v1 = 0;
    if ((*((_BYTE *)this + 20) & 1) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((*((_BYTE *)this + 20) & 4) == 0)
    goto LABEL_13;
LABEL_6:
  v4 = *((float *)this + 4);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  return v3 ^ v1 ^ v5;
}

void CMMsl::SessionOverride::~SessionOverride(CMMsl::SessionOverride *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::SessionOverride::SessionOverride(uint64_t this, const CMMsl::SessionOverride *a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)this = &off_251360CE8;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::SessionOverride::operator=(uint64_t a1, uint64_t a2, double a3)
{
  int v3;
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  uint64_t v12;

  if (a1 != a2)
  {
    v11[0] = &off_251360CE8;
    HIDWORD(v12) = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      BYTE4(v12) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        v3 = *(_DWORD *)(a2 + 16);
        BYTE4(v12) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_6;
    }
    v7 = HIDWORD(v12);
    v8 = *(_QWORD *)(a1 + 8);
    v9 = *(_QWORD *)(a1 + 16);
    *(double *)(a1 + 8) = a3;
    *(_DWORD *)(a1 + 16) = v3;
    *(_DWORD *)(a1 + 20) = v7;
    v11[1] = v8;
    v12 = v9;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SessionOverride *a2, CMMsl::SessionOverride *a3)
{
  int v3;
  double result;
  int v5;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  return result;
}

double CMMsl::SessionOverride::SessionOverride(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_251360CE8;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_251360CE8;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::SessionOverride::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  if (a1 != a2)
  {
    v8[0] = &off_251360CE8;
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    v8[1] = v5;
    v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::SessionOverride::formatText(CMMsl::SessionOverride *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "sessionType");
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SessionOverride::readFrom(CMMsl::SessionOverride *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_26;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v26 = 0;
          v27 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_47;
            }
            v28 = v20++;
            v29 = *(_BYTE *)(v21 + v28);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0)
              break;
            v26 += 7;
            v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
LABEL_46:
          v2 = v28 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)a2 + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 4) = v24;
      }
      else if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_26:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_26;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SessionOverride::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::SessionOverride::hash_value(CMMsl::SessionOverride *this)
{
  double v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v2 = 0;
    return v2 ^ *(_QWORD *)&v1;
  }
  v1 = 0.0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((unsigned int *)this + 4);
  return v2 ^ *(_QWORD *)&v1;
}

void CMMsl::SignalEnvironment::~SignalEnvironment(CMMsl::SignalEnvironment *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::SignalEnvironment::SignalEnvironment(uint64_t this, const CMMsl::SignalEnvironment *a2)
{
  int v2;

  *(_QWORD *)this = &off_251360D20;
  *(_QWORD *)(this + 8) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v2 = *((_DWORD *)a2 + 2);
    *(_BYTE *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::SignalEnvironment::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v6[0] = &off_251360D20;
    v3 = *(unsigned __int8 *)(a2 + 12);
    v4 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = (v3 << 31 >> 31) & *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 12) = v3 & 1;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v6[0] = &off_251360D20;
    v3 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 12) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::SignalEnvironment *a2, CMMsl::SignalEnvironment *a3)
{
  int v3;
  int v4;

  v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  v4 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  return this;
}

uint64_t CMMsl::SignalEnvironment::formatText(CMMsl::SignalEnvironment *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 12) & 1) != 0)
    PB::TextFormatter::format(a2, "type");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SignalEnvironment::readFrom(CMMsl::SignalEnvironment *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  char v24;
  uint64_t result;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_29;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 12) |= 1u;
        v19 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        v20 = *(_QWORD *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v3)
        {
          v26 = 0;
          v27 = 0;
          v23 = 0;
          if (v3 <= v19)
            v2 = *((_QWORD *)a2 + 1);
          else
            v2 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v2 == v19)
            {
              LODWORD(v23) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_43;
            }
            v28 = v19++;
            v29 = *(_BYTE *)(v20 + v28);
            *((_QWORD *)a2 + 1) = v19;
            v23 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0)
              break;
            v26 += 7;
            v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              goto LABEL_42;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v23) = 0;
LABEL_42:
          v2 = v28 + 1;
        }
        else
        {
          v21 = 0;
          v22 = 0;
          v23 = 0;
          while (1)
          {
            v2 = v19 + 1;
            *((_QWORD *)a2 + 1) = v19 + 1;
            v24 = *(_BYTE *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0)
              break;
            v21 += 7;
            v19 = v2;
            v14 = v22++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              break;
            }
          }
        }
LABEL_43:
        *((_DWORD *)this + 2) = v23;
      }
      else
      {
LABEL_29:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_29;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SignalEnvironment::writeTo(uint64_t this, PB::Writer *a2)
{
  if ((*(_BYTE *)(this + 12) & 1) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::SignalEnvironment::hash_value(CMMsl::SignalEnvironment *this)
{
  if ((*((_BYTE *)this + 12) & 1) != 0)
    return *((int *)this + 2);
  else
    return 0;
}

void CMMsl::SignificantUserInteraction::~SignificantUserInteraction(CMMsl::SignificantUserInteraction *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::SignificantUserInteraction::SignificantUserInteraction(uint64_t this, const CMMsl::SignificantUserInteraction *a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)this = &off_251360D58;
  *(_QWORD *)(this + 16) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::SignificantUserInteraction::operator=(uint64_t a1, uint64_t a2)
{
  void (**v3)(CMMsl::SignificantUserInteraction *__hidden);
  char v4;
  char v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  uint64_t v12;

  if (a1 != a2)
  {
    v3 = &off_251360D58;
    v11[0] = &off_251360D58;
    HIDWORD(v12) = 0;
    v4 = *(_BYTE *)(a2 + 20);
    if ((v4 & 1) != 0)
    {
      v3 = *(void (***)(CMMsl::SignificantUserInteraction *__hidden))(a2 + 8);
      BYTE4(v12) = 1;
      v5 = 3;
      if ((v4 & 2) != 0)
        goto LABEL_4;
    }
    else
    {
      v5 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
      {
LABEL_4:
        v6 = *(_DWORD *)(a2 + 16);
        BYTE4(v12) = v5;
LABEL_7:
        v7 = HIDWORD(v12);
        v8 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v3;
        v11[1] = v8;
        v9 = *(_QWORD *)(a1 + 16);
        *(_DWORD *)(a1 + 16) = v6;
        *(_DWORD *)(a1 + 20) = v7;
        v12 = v9;
        PB::Base::~Base((PB::Base *)v11);
        return a1;
      }
    }
    v6 = 0;
    goto LABEL_7;
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v8[0] = &off_251360D58;
    v8[1] = v5;
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v4;
    v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::SignificantUserInteraction *a2, CMMsl::SignificantUserInteraction *a3)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  return this;
}

uint64_t CMMsl::SignificantUserInteraction::formatText(CMMsl::SignificantUserInteraction *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "timestamp");
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "type");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SignificantUserInteraction::readFrom(CMMsl::SignificantUserInteraction *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  char v24;
  uint64_t result;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  unint64_t v38;
  char v39;

  v3 = *((_QWORD *)a2 + 1);
  v2 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v3 + 1;
        *((_QWORD *)a2 + 1) = v3 + 1;
        v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v3 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_30;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v36 = 0;
          v37 = 0;
          v30 = 0;
          if (v2 <= v26)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_64;
            }
            v38 = v26++;
            v39 = *(_BYTE *)(v27 + v38);
            *((_QWORD *)a2 + 1) = v26;
            v30 |= (unint64_t)(v39 & 0x7F) << v36;
            if ((v39 & 0x80) == 0)
              break;
            v36 += 7;
            v14 = v37++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              goto LABEL_63;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v30) = 0;
LABEL_63:
          v3 = v38 + 1;
        }
        else
        {
          v28 = 0;
          v29 = 0;
          v30 = 0;
          while (1)
          {
            v3 = v26 + 1;
            *((_QWORD *)a2 + 1) = v26 + 1;
            v31 = *(_BYTE *)(v27 + v26);
            v30 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v26 = v3;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              break;
            }
          }
        }
LABEL_64:
        *((_DWORD *)this + 4) = v30;
      }
      else if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v19 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v20 = *(_QWORD *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v2)
        {
          v32 = 0;
          v33 = 0;
          v23 = 0;
          if (v2 <= v19)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v19)
            {
              v23 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_60;
            }
            v34 = v19++;
            v35 = *(_BYTE *)(v20 + v34);
            *((_QWORD *)a2 + 1) = v19;
            v23 |= (unint64_t)(v35 & 0x7F) << v32;
            if ((v35 & 0x80) == 0)
              break;
            v32 += 7;
            v14 = v33++ > 8;
            if (v14)
            {
              v23 = 0;
              goto LABEL_59;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v23 = 0;
LABEL_59:
          v3 = v34 + 1;
        }
        else
        {
          v21 = 0;
          v22 = 0;
          v23 = 0;
          while (1)
          {
            v3 = v19 + 1;
            *((_QWORD *)a2 + 1) = v19 + 1;
            v24 = *(_BYTE *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0)
              break;
            v21 += 7;
            v19 = v3;
            v14 = v22++ > 8;
            if (v14)
            {
              v23 = 0;
              break;
            }
          }
        }
LABEL_60:
        *((_QWORD *)this + 1) = v23;
      }
      else
      {
LABEL_30:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v3 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v2 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v3 > v2)
      v2 = v3;
    while (v2 != v3)
    {
      v17 = v3 + 1;
      v18 = *(_BYTE *)(v8 + v3);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v3 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_30;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SignificantUserInteraction::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::SignificantUserInteraction::hash_value(CMMsl::SignificantUserInteraction *this)
{
  uint64_t v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((_QWORD *)this + 1);
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_5:
    v2 = 0;
    return v2 ^ v1;
  }
  v1 = 0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_5;
LABEL_3:
  v2 = *((int *)this + 4);
  return v2 ^ v1;
}

void CMMsl::SimActivityEvent::~SimActivityEvent(CMMsl::SimActivityEvent *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_251360D90;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_251360D90;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_251360D90;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::SimActivityEvent *CMMsl::SimActivityEvent::SimActivityEvent(CMMsl::SimActivityEvent *this, const CMMsl::SimActivityEvent *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  *(_QWORD *)this = &off_251360D90;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  if ((*((_BYTE *)a2 + 24) & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 2);
    *((_BYTE *)this + 24) = 1;
    *((_QWORD *)this + 2) = v4;
  }
  if (*((_QWORD *)a2 + 1))
  {
    v5 = operator new();
    v6 = *((_QWORD *)a2 + 1);
    *(_QWORD *)v5 = &off_251360DC8;
    *(_DWORD *)(v5 + 12) = 0;
    if ((*(_BYTE *)(v6 + 12) & 1) != 0)
    {
      v7 = *(_DWORD *)(v6 + 8);
      *(_BYTE *)(v5 + 12) = 1;
      *(_DWORD *)(v5 + 8) = v7;
    }
    v8 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  return this;
}

uint64_t CMMsl::SimMotionState::SimMotionState(uint64_t result, uint64_t a2)
{
  int v2;

  *(_QWORD *)result = &off_251360DC8;
  *(_DWORD *)(result + 12) = 0;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    v2 = *(_DWORD *)(a2 + 8);
    *(_BYTE *)(result + 12) = 1;
    *(_DWORD *)(result + 8) = v2;
  }
  return result;
}

{
  *(_QWORD *)result = &off_251360DC8;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

{
  *(_QWORD *)result = &off_251360DC8;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t CMMsl::SimActivityEvent::operator=(uint64_t a1, const CMMsl::SimActivityEvent *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (**v9)(CMMsl::SimActivityEvent *__hidden);
  uint64_t v10;
  uint64_t v11;
  int v12;

  if ((const CMMsl::SimActivityEvent *)a1 != a2)
  {
    CMMsl::SimActivityEvent::SimActivityEvent((CMMsl::SimActivityEvent *)&v9, a2);
    v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v12;
    v12 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a1 + 16);
    v7 = v10;
    v6 = v11;
    v10 = 0;
    v11 = v5;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v6;
    v9 = &off_251360D90;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::SimActivityEvent *a2, CMMsl::SimActivityEvent *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  v5 = *(_QWORD *)(this + 8);
  v4 = *(_QWORD *)(this + 16);
  v6 = *((_QWORD *)a2 + 2);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *(_QWORD *)(this + 16) = v6;
  *((_QWORD *)a2 + 1) = v5;
  *((_QWORD *)a2 + 2) = v4;
  return this;
}

uint64_t CMMsl::SimActivityEvent::SimActivityEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_251360D90;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v3;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_251360D90;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v3;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

uint64_t CMMsl::SimActivityEvent::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  int v11;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    v5 = *(_QWORD *)(a2 + 8);
    v4 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 8) = 0;
    v6 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v3;
    v11 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    v10[1] = 0;
    v10[2] = v8;
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v4;
    v10[0] = &off_251360D90;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::SimActivityEvent::formatText(CMMsl::SimActivityEvent *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "motionState");
  if ((*((_BYTE *)this + 24) & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SimActivityEvent::readFrom(CMMsl::SimActivityEvent *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t result;
  _DWORD *v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  unint64_t v32;
  char v33;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_30;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        v28 = (_DWORD *)operator new();
        *(_QWORD *)v28 = &off_251360DC8;
        v28[3] = 0;
        v29 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v28;
        if (v29)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
          v28 = (_DWORD *)*((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v28 + 16))(v28, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 24) |= 1u;
        v19 = *((_QWORD *)a2 + 1);
        v20 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v20)
        {
          v30 = 0;
          v31 = 0;
          v24 = 0;
          if (v20 <= v19)
            v20 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v20 == v19)
            {
              v24 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_47;
            }
            v32 = v19 + 1;
            v33 = *(_BYTE *)(v21 + v19);
            *((_QWORD *)a2 + 1) = v32;
            v24 |= (unint64_t)(v33 & 0x7F) << v30;
            if ((v33 & 0x80) == 0)
              break;
            v30 += 7;
            v19 = v32;
            v14 = v31++ > 8;
            if (v14)
            {
LABEL_43:
              v24 = 0;
              goto LABEL_47;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v24 = 0;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v25 = v19 + 1;
            *((_QWORD *)a2 + 1) = v19 + 1;
            v26 = *(_BYTE *)(v21 + v19);
            v24 |= (unint64_t)(v26 & 0x7F) << v22;
            if ((v26 & 0x80) == 0)
              break;
            v22 += 7;
            v19 = v25;
            v14 = v23++ > 8;
            if (v14)
              goto LABEL_43;
          }
        }
LABEL_47:
        *((_QWORD *)this + 2) = v24;
      }
      else
      {
LABEL_30:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_30;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SimMotionState::SimMotionState(uint64_t this)
{
  *(_QWORD *)this = &off_251360DC8;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251360DC8;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

uint64_t CMMsl::SimActivityEvent::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = this;
  if ((*(_BYTE *)(this + 24) & 1) != 0)
    this = PB::Writer::writeVarInt(a2);
  v4 = *(const PB::Base **)(v3 + 8);
  if (v4)
    return PB::Writer::writeSubmessage(a2, v4);
  return this;
}

BOOL CMMsl::SimMotionState::operator==(uint64_t a1, uint64_t a2)
{
  char v3;
  _BOOL8 result;

  v3 = *(_BYTE *)(a1 + 12);
  result = (*(_BYTE *)(a2 + 12) & 1) == 0;
  if ((v3 & 1) != 0)
    return (*(_BYTE *)(a2 + 12) & 1) != 0 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t CMMsl::SimActivityEvent::hash_value(CMMsl::SimActivityEvent *this)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if ((*((_BYTE *)this + 24) & 1) != 0)
    v1 = *((_QWORD *)this + 2);
  else
    v1 = 0;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = *(_BYTE *)(v2 + 12);
    v2 = *(unsigned int *)(v2 + 8);
    if ((v3 & 1) == 0)
      v2 = 0;
  }
  return v2 ^ v1;
}

_QWORD *CMMsl::SimActivityEvent::makeMotionState(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251360DC8;
    *(_DWORD *)(v2 + 12) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void CMMsl::SimMotionState::~SimMotionState(CMMsl::SimMotionState *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::SimMotionState::SimMotionState(uint64_t this, const CMMsl::SimMotionState *a2)
{
  int v2;

  *(_QWORD *)this = &off_251360DC8;
  *(_DWORD *)(this + 12) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v2 = *((_DWORD *)a2 + 2);
    *(_BYTE *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::SimMotionState::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v6[0] = &off_251360DC8;
    v3 = *(_BYTE *)(a2 + 12) & 1;
    v4 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 12) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v6[0] = &off_251360DC8;
    v3 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 12) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::SimMotionState *a2, CMMsl::SimMotionState *a3)
{
  int v3;
  int v4;

  v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  v4 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  return this;
}

uint64_t CMMsl::SimMotionState::formatText(CMMsl::SimMotionState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 12) & 1) != 0)
    PB::TextFormatter::format(a2, "type");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SimMotionState::readFrom(CMMsl::SimMotionState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  char v24;
  uint64_t result;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_29;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 12) |= 1u;
        v19 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        v20 = *(_QWORD *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v3)
        {
          v26 = 0;
          v27 = 0;
          v23 = 0;
          if (v3 <= v19)
            v2 = *((_QWORD *)a2 + 1);
          else
            v2 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v2 == v19)
            {
              LODWORD(v23) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_43;
            }
            v28 = v19++;
            v29 = *(_BYTE *)(v20 + v28);
            *((_QWORD *)a2 + 1) = v19;
            v23 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0)
              break;
            v26 += 7;
            v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              goto LABEL_42;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v23) = 0;
LABEL_42:
          v2 = v28 + 1;
        }
        else
        {
          v21 = 0;
          v22 = 0;
          v23 = 0;
          while (1)
          {
            v2 = v19 + 1;
            *((_QWORD *)a2 + 1) = v19 + 1;
            v24 = *(_BYTE *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0)
              break;
            v21 += 7;
            v19 = v2;
            v14 = v22++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              break;
            }
          }
        }
LABEL_43:
        *((_DWORD *)this + 2) = v23;
      }
      else
      {
LABEL_29:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_29;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SimMotionState::writeTo(uint64_t this, PB::Writer *a2)
{
  if ((*(_BYTE *)(this + 12) & 1) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::SimMotionState::hash_value(CMMsl::SimMotionState *this)
{
  if ((*((_BYTE *)this + 12) & 1) != 0)
    return *((unsigned int *)this + 2);
  else
    return 0;
}

void CMMsl::SitStandDetectorFeatures::~SitStandDetectorFeatures(CMMsl::SitStandDetectorFeatures *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::SitStandDetectorFeatures::SitStandDetectorFeatures(CMMsl::SitStandDetectorFeatures *this, const CMMsl::SitStandDetectorFeatures *a2)
{
  char v2;
  char v3;
  uint64_t v4;

  *(_QWORD *)this = &off_251360E00;
  *((_DWORD *)this + 11) = 0;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 44) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_BYTE *)a2 + 44);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 44) & 0x10) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 7);
    v3 |= 0x10u;
    *((_BYTE *)this + 44) = v3;
    *((_DWORD *)this + 7) = v4;
    v2 = *((_BYTE *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((_BYTE *)this + 44) = v3;
    *((_DWORD *)this + 4) = v4;
    v2 = *((_BYTE *)a2 + 44);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        goto LABEL_9;
      goto LABEL_15;
    }
  }
  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 10);
  v3 |= 0x80u;
  *((_BYTE *)this + 44) = v3;
  *((_DWORD *)this + 10) = v4;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0)
      goto LABEL_10;
    goto LABEL_16;
  }
LABEL_15:
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *((_BYTE *)this + 44) = v3;
  *((_DWORD *)this + 6) = v4;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_17;
  }
LABEL_16:
  LODWORD(v4) = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *((_BYTE *)this + 44) = v3;
  *((_DWORD *)this + 5) = v4;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x20) == 0)
      return *(float *)&v4;
    goto LABEL_18;
  }
LABEL_17:
  LODWORD(v4) = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *((_BYTE *)this + 44) = v3;
  *((_DWORD *)this + 9) = v4;
  if ((*((_BYTE *)a2 + 44) & 0x20) == 0)
    return *(float *)&v4;
LABEL_18:
  LODWORD(v4) = *((_DWORD *)a2 + 8);
  *((_BYTE *)this + 44) = v3 | 0x20;
  *((_DWORD *)this + 8) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::SitStandDetectorFeatures::operator=(uint64_t a1, const CMMsl::SitStandDetectorFeatures *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  int v12;

  if ((const CMMsl::SitStandDetectorFeatures *)a1 != a2)
  {
    CMMsl::SitStandDetectorFeatures::SitStandDetectorFeatures((CMMsl::SitStandDetectorFeatures *)&v7, a2);
    v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v12;
    v12 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v8;
    v8 = v4;
    LODWORD(v4) = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v11;
    v11 = v4;
    v5 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v9;
    v9 = v5;
    *(_QWORD *)&v5 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v10;
    v10 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::SitStandDetectorFeatures *a2, CMMsl::SitStandDetectorFeatures *a3)
{
  int v3;
  uint64_t v4;
  float result;

  v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  result = *((float *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((float *)a2 + 8) = result;
  return result;
}

float CMMsl::SitStandDetectorFeatures::SitStandDetectorFeatures(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_251360E00;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  result = *(float *)(a2 + 32);
  *(float *)(a1 + 32) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_251360E00;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  result = *(float *)(a2 + 32);
  *(float *)(a1 + 32) = result;
  return result;
}

uint64_t CMMsl::SitStandDetectorFeatures::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  __int128 v12;
  uint64_t v13;
  int v14;
  int v15;

  if (a1 != a2)
  {
    v11[0] = &off_251360E00;
    v3 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a2 + 44) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_DWORD *)(a2 + 40);
    v15 = *(_DWORD *)(a1 + 44);
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v11[1] = v6;
    v14 = *(_DWORD *)(a1 + 40);
    v7 = *(_OWORD *)(a2 + 16);
    v12 = *(_OWORD *)(a1 + 16);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 44) = v3;
    *(_DWORD *)(a1 + 40) = v5;
    *(_OWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 32) = v9;
    v13 = v8;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

uint64_t CMMsl::SitStandDetectorFeatures::formatText(CMMsl::SitStandDetectorFeatures *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "magnitudeRangeInertialVertical", *((float *)this + 4));
    v5 = *((_BYTE *)this + 44);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*((_BYTE *)this + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "maxAngleBetweenThighAndShinDeg", *((float *)this + 5));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "minAngleBetweenThighAndShinDeg", *((float *)this + 6));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "motionPlanarity", *((float *)this + 7));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "timeToReachMaxThighAndShinAngleThreshold", *((float *)this + 8));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0)
      goto LABEL_8;
LABEL_16:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    if ((*((_BYTE *)this + 44) & 0x80) == 0)
      return PB::TextFormatter::endObject(a2);
LABEL_17:
    PB::TextFormatter::format(a2, "vm", *((float *)this + 10));
    return PB::TextFormatter::endObject(a2);
  }
LABEL_15:
  PB::TextFormatter::format(a2, "timeToReachMinThighAndShinAngleThreshold", *((float *)this + 9));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 1) != 0)
    goto LABEL_16;
LABEL_8:
  if (v5 < 0)
    goto LABEL_17;
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SitStandDetectorFeatures::readFrom(CMMsl::SitStandDetectorFeatures *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_50;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 44) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_46;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        v2 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_49;
      case 2u:
        *((_BYTE *)this + 44) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_46;
        *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_48;
      case 3u:
        *((_BYTE *)this + 44) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_46;
        *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_48;
      case 4u:
        *((_BYTE *)this + 44) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_46;
        *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_48;
      case 5u:
        *((_BYTE *)this + 44) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_46;
        *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_48;
      case 6u:
        *((_BYTE *)this + 44) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_46;
        *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_48;
      case 7u:
        *((_BYTE *)this + 44) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_46;
        *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_48;
      case 8u:
        *((_BYTE *)this + 44) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
        {
LABEL_46:
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_48:
          v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_49:
          *((_QWORD *)a2 + 1) = v2;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_50:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::SitStandDetectorFeatures::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 44);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(this + 44) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x20) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 32));
  }
LABEL_16:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  if ((*(_BYTE *)(v3 + 44) & 0x20) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 32));
  return this;
}

uint64_t CMMsl::SitStandDetectorFeatures::hash_value(CMMsl::SitStandDetectorFeatures *this)
{
  double v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t v15;

  if ((*((_BYTE *)this + 44) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 44) & 0x10) != 0)
      goto LABEL_3;
LABEL_27:
    v3 = 0;
    if ((*((_BYTE *)this + 44) & 2) != 0)
      goto LABEL_6;
LABEL_28:
    v5 = 0;
    if ((*((_BYTE *)this + 44) & 0x80) != 0)
      goto LABEL_9;
LABEL_29:
    v7 = 0;
    if ((*((_BYTE *)this + 44) & 8) != 0)
      goto LABEL_12;
LABEL_30:
    v9 = 0;
    if ((*((_BYTE *)this + 44) & 4) != 0)
      goto LABEL_15;
LABEL_31:
    v11 = 0;
    if ((*((_BYTE *)this + 44) & 0x40) != 0)
      goto LABEL_18;
    goto LABEL_32;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 44) & 0x10) == 0)
    goto LABEL_27;
LABEL_3:
  v2 = *((float *)this + 7);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 44) & 2) == 0)
    goto LABEL_28;
LABEL_6:
  v4 = *((float *)this + 4);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((*((_BYTE *)this + 44) & 0x80) == 0)
    goto LABEL_29;
LABEL_9:
  v6 = *((float *)this + 10);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  if ((*((_BYTE *)this + 44) & 8) == 0)
    goto LABEL_30;
LABEL_12:
  v8 = *((float *)this + 6);
  v9 = LODWORD(v8);
  if (v8 == 0.0)
    v9 = 0;
  if ((*((_BYTE *)this + 44) & 4) == 0)
    goto LABEL_31;
LABEL_15:
  v10 = *((float *)this + 5);
  v11 = LODWORD(v10);
  if (v10 == 0.0)
    v11 = 0;
  if ((*((_BYTE *)this + 44) & 0x40) != 0)
  {
LABEL_18:
    v12 = *((float *)this + 9);
    v13 = LODWORD(v12);
    if (v12 == 0.0)
      v13 = 0;
    if ((*((_BYTE *)this + 44) & 0x20) != 0)
      goto LABEL_21;
LABEL_33:
    v15 = 0;
    return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13 ^ v15;
  }
LABEL_32:
  v13 = 0;
  if ((*((_BYTE *)this + 44) & 0x20) == 0)
    goto LABEL_33;
LABEL_21:
  v14 = *((float *)this + 8);
  v15 = LODWORD(v14);
  if (v14 == 0.0)
    v15 = 0;
  return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13 ^ v15;
}

void CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand::~SitStandDetectorPosteriorBufferStatsForSitToStand(CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand::SitStandDetectorPosteriorBufferStatsForSitToStand(CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand *this, const CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand *a2)
{
  char v2;
  char v3;
  uint64_t v4;

  *(_QWORD *)this = &off_251360E38;
  *((_DWORD *)this + 7) = 0;
  v2 = *((_BYTE *)a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 28) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 28) & 8) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 6);
    v3 |= 8u;
    *((_BYTE *)this + 28) = v3;
    *((_DWORD *)this + 6) = v4;
    v2 = *((_BYTE *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((_BYTE *)this + 28) = v3;
    *((_DWORD *)this + 4) = v4;
    if ((*((_BYTE *)a2 + 28) & 4) == 0)
      return *(float *)&v4;
  }
  else if ((v2 & 4) == 0)
  {
    return *(float *)&v4;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 5);
  *((_BYTE *)this + 28) = v3 | 4;
  *((_DWORD *)this + 5) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand::operator=(uint64_t a1, const CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;

  if ((const CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand *)a1 != a2)
  {
    CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand::SitStandDetectorPosteriorBufferStatsForSitToStand((CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand *)&v9, a2);
    v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v12;
    v12 = v3;
    v4 = v11;
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v10;
    *(_QWORD *)(a1 + 16) = v4;
    v7 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v13;
    v13 = v7;
    v10 = v5;
    v11 = v6;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand *a2, CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand *a3)
{
  int v3;
  uint64_t v4;
  float result;

  v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  result = *((float *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((float *)a2 + 5) = result;
  return result;
}

float CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand::SitStandDetectorPosteriorBufferStatsForSitToStand(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_251360E38;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_251360E38;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  return result;
}

uint64_t CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];
  int v10;
  int v11;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    v4 = *(_DWORD *)(a2 + 24);
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    v10 = *(_DWORD *)(a1 + 24);
    v7 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 24) = v4;
    v9[0] = &off_251360E38;
    v11 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v3;
    *(_QWORD *)(a1 + 16) = v7;
    v9[1] = v5;
    v9[2] = v6;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand::formatText(CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "maxPosterior", *((float *)this + 4));
    v5 = *((_BYTE *)this + 28);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "minPosterior", *((float *)this + 6));
      if ((*((_BYTE *)this + 28) & 1) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "meanPosterior", *((float *)this + 5));
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 8) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 1) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand::readFrom(CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_38;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 28) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        v2 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_37;
      case 2u:
        *((_BYTE *)this + 28) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 3u:
        *((_BYTE *)this + 28) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 4u:
        *((_BYTE *)this + 28) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_36:
          v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_37:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_34:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_38:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 28);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 28) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 20));
  }
LABEL_8:
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  if ((*(_BYTE *)(v3 + 28) & 4) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 20));
  return this;
}

uint64_t CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand::hash_value(CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand *this)
{
  double v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;

  if ((*((_BYTE *)this + 28) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 28) & 8) != 0)
      goto LABEL_3;
LABEL_15:
    v3 = 0;
    if ((*((_BYTE *)this + 28) & 2) != 0)
      goto LABEL_6;
    goto LABEL_16;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 28) & 8) == 0)
    goto LABEL_15;
LABEL_3:
  v2 = *((float *)this + 6);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 28) & 2) != 0)
  {
LABEL_6:
    v4 = *((float *)this + 4);
    v5 = LODWORD(v4);
    if (v4 == 0.0)
      v5 = 0;
    if ((*((_BYTE *)this + 28) & 4) != 0)
      goto LABEL_9;
LABEL_17:
    v7 = 0;
    return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7;
  }
LABEL_16:
  v5 = 0;
  if ((*((_BYTE *)this + 28) & 4) == 0)
    goto LABEL_17;
LABEL_9:
  v6 = *((float *)this + 5);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7;
}

void CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit::~SitStandDetectorPosteriorBufferStatsForStandToSit(CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit::SitStandDetectorPosteriorBufferStatsForStandToSit(CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit *this, const CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit *a2)
{
  char v2;
  char v3;
  uint64_t v4;

  *(_QWORD *)this = &off_251360E70;
  *((_DWORD *)this + 7) = 0;
  v2 = *((_BYTE *)a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 28) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 28) & 8) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 6);
    v3 |= 8u;
    *((_BYTE *)this + 28) = v3;
    *((_DWORD *)this + 6) = v4;
    v2 = *((_BYTE *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((_BYTE *)this + 28) = v3;
    *((_DWORD *)this + 4) = v4;
    if ((*((_BYTE *)a2 + 28) & 4) == 0)
      return *(float *)&v4;
  }
  else if ((v2 & 4) == 0)
  {
    return *(float *)&v4;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 5);
  *((_BYTE *)this + 28) = v3 | 4;
  *((_DWORD *)this + 5) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit::operator=(uint64_t a1, const CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;

  if ((const CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit *)a1 != a2)
  {
    CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit::SitStandDetectorPosteriorBufferStatsForStandToSit((CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit *)&v9, a2);
    v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v12;
    v12 = v3;
    v4 = v11;
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v10;
    *(_QWORD *)(a1 + 16) = v4;
    v7 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v13;
    v13 = v7;
    v10 = v5;
    v11 = v6;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit *a2, CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit *a3)
{
  int v3;
  uint64_t v4;
  float result;

  v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  result = *((float *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((float *)a2 + 5) = result;
  return result;
}

float CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit::SitStandDetectorPosteriorBufferStatsForStandToSit(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_251360E70;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_251360E70;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  return result;
}

uint64_t CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];
  int v10;
  int v11;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    v4 = *(_DWORD *)(a2 + 24);
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    v10 = *(_DWORD *)(a1 + 24);
    v7 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 24) = v4;
    v9[0] = &off_251360E70;
    v11 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v3;
    *(_QWORD *)(a1 + 16) = v7;
    v9[1] = v5;
    v9[2] = v6;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit::formatText(CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "maxPosterior", *((float *)this + 4));
    v5 = *((_BYTE *)this + 28);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "minPosterior", *((float *)this + 6));
      if ((*((_BYTE *)this + 28) & 1) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "meanPosterior", *((float *)this + 5));
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 8) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 1) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit::readFrom(CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_38;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 28) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        v2 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_37;
      case 2u:
        *((_BYTE *)this + 28) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 3u:
        *((_BYTE *)this + 28) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 4u:
        *((_BYTE *)this + 28) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_36:
          v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_37:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_34:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_38:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 28);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 28) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 20));
  }
LABEL_8:
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  if ((*(_BYTE *)(v3 + 28) & 4) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 20));
  return this;
}

uint64_t CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit::hash_value(CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit *this)
{
  double v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;

  if ((*((_BYTE *)this + 28) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 28) & 8) != 0)
      goto LABEL_3;
LABEL_15:
    v3 = 0;
    if ((*((_BYTE *)this + 28) & 2) != 0)
      goto LABEL_6;
    goto LABEL_16;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 28) & 8) == 0)
    goto LABEL_15;
LABEL_3:
  v2 = *((float *)this + 6);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 28) & 2) != 0)
  {
LABEL_6:
    v4 = *((float *)this + 4);
    v5 = LODWORD(v4);
    if (v4 == 0.0)
      v5 = 0;
    if ((*((_BYTE *)this + 28) & 4) != 0)
      goto LABEL_9;
LABEL_17:
    v7 = 0;
    return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7;
  }
LABEL_16:
  v5 = 0;
  if ((*((_BYTE *)this + 28) & 4) == 0)
    goto LABEL_17;
LABEL_9:
  v6 = *((float *)this + 5);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7;
}

void CMMsl::SitStandDetectorTransition::~SitStandDetectorTransition(CMMsl::SitStandDetectorTransition *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::SitStandDetectorTransition::SitStandDetectorTransition(uint64_t this, const CMMsl::SitStandDetectorTransition *a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)this = &off_251360EA8;
  *(_QWORD *)(this + 16) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::SitStandDetectorTransition::operator=(uint64_t a1, uint64_t a2, double a3)
{
  char v4;
  char v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  uint64_t v12;

  if (a1 != a2)
  {
    v11[0] = &off_251360EA8;
    HIDWORD(v12) = 0;
    v4 = *(_BYTE *)(a2 + 20);
    if ((v4 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      BYTE4(v12) = 1;
      v5 = 3;
      if ((v4 & 2) != 0)
        goto LABEL_4;
    }
    else
    {
      v5 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
      {
LABEL_4:
        v6 = *(_DWORD *)(a2 + 16);
        BYTE4(v12) = v5;
LABEL_7:
        v7 = HIDWORD(v12);
        v8 = *(_QWORD *)(a1 + 8);
        v9 = *(_QWORD *)(a1 + 16);
        *(double *)(a1 + 8) = a3;
        *(_DWORD *)(a1 + 16) = v6;
        *(_DWORD *)(a1 + 20) = v7;
        v11[1] = v8;
        v12 = v9;
        PB::Base::~Base((PB::Base *)v11);
        return a1;
      }
    }
    v6 = 0;
    goto LABEL_7;
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SitStandDetectorTransition *a2, CMMsl::SitStandDetectorTransition *a3)
{
  int v3;
  double result;
  int v5;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  return result;
}

double CMMsl::SitStandDetectorTransition::SitStandDetectorTransition(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_251360EA8;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_251360EA8;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::SitStandDetectorTransition::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  if (a1 != a2)
  {
    v8[0] = &off_251360EA8;
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    v8[1] = v5;
    v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::SitStandDetectorTransition::formatText(CMMsl::SitStandDetectorTransition *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "transitionType");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SitStandDetectorTransition::readFrom(CMMsl::SitStandDetectorTransition *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_26;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v26 = 0;
          v27 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_47;
            }
            v28 = v20++;
            v29 = *(_BYTE *)(v21 + v28);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0)
              break;
            v26 += 7;
            v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
LABEL_46:
          v2 = v28 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)a2 + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 4) = v24;
      }
      else if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_26:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_26;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SitStandDetectorTransition::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::SitStandDetectorTransition::hash_value(CMMsl::SitStandDetectorTransition *this)
{
  double v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v2 = 0;
    return v2 ^ *(_QWORD *)&v1;
  }
  v1 = 0.0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((int *)this + 4);
  return v2 ^ *(_QWORD *)&v1;
}

void CMMsl::Skeleton2D::~Skeleton2D(CMMsl::Skeleton2D *this)
{
  void **v2;

  *(_QWORD *)this = &off_251360EE0;
  v2 = (void **)((char *)this + 16);
  sub_242910B70(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_251360EE0;
  v2 = (void **)((char *)this + 16);
  sub_242910B70(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_251360EE0;
  v2 = (void **)((char *)this + 16);
  sub_242910B70(&v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::Skeleton2D *CMMsl::Skeleton2D::Skeleton2D(CMMsl::Skeleton2D *this, const CMMsl::Skeleton2D *a2)
{
  int64x2_t *v4;
  const CMMsl::Skeleton2DJoint **v5;
  const CMMsl::Skeleton2DJoint **i;
  const CMMsl::Skeleton2DJoint *v7;
  CMMsl::Skeleton2DJoint *v8;
  unint64_t v9;
  CMMsl::Skeleton2DJoint **v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  CMMsl::Skeleton2DJoint **v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  CMMsl::Skeleton2DJoint *v21;
  int64x2_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  int64x2_t v29;
  unint64_t v30;
  char *v31;

  *(_QWORD *)this = &off_251360EE0;
  *((_QWORD *)this + 2) = 0;
  v4 = (int64x2_t *)((char *)this + 16);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 12) = 0;
  v5 = (const CMMsl::Skeleton2DJoint **)*((_QWORD *)a2 + 2);
  for (i = (const CMMsl::Skeleton2DJoint **)*((_QWORD *)a2 + 3); v5 != i; ++v5)
  {
    v7 = *v5;
    v8 = (CMMsl::Skeleton2DJoint *)operator new();
    CMMsl::Skeleton2DJoint::Skeleton2DJoint(v8, v7);
    v10 = (CMMsl::Skeleton2DJoint **)*((_QWORD *)this + 3);
    v9 = *((_QWORD *)this + 4);
    if ((unint64_t)v10 >= v9)
    {
      v12 = ((uint64_t)v10 - v4->i64[0]) >> 3;
      if ((unint64_t)(v12 + 1) >> 61)
        sub_242729A44();
      v13 = v9 - v4->i64[0];
      v14 = v13 >> 2;
      if (v13 >> 2 <= (unint64_t)(v12 + 1))
        v14 = v12 + 1;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v14;
      v31 = (char *)this + 32;
      if (v15)
        v15 = (unint64_t)sub_2429112FC(v15);
      else
        v16 = 0;
      v17 = (CMMsl::Skeleton2DJoint **)(v15 + 8 * v12);
      v18 = v15 + 8 * v16;
      v30 = v18;
      *v17 = v8;
      v11 = v17 + 1;
      v29.i64[1] = (uint64_t)(v17 + 1);
      v20 = (_QWORD *)*((_QWORD *)this + 2);
      v19 = (_QWORD *)*((_QWORD *)this + 3);
      if (v19 == v20)
      {
        v22 = vdupq_n_s64((unint64_t)v19);
      }
      else
      {
        do
        {
          v21 = (CMMsl::Skeleton2DJoint *)*--v19;
          *v19 = 0;
          *--v17 = v21;
        }
        while (v19 != v20);
        v22 = *v4;
        v11 = (_QWORD *)v29.i64[1];
        v18 = v30;
      }
      *((_QWORD *)this + 2) = v17;
      *((_QWORD *)this + 3) = v11;
      v29 = v22;
      v23 = *((_QWORD *)this + 4);
      *((_QWORD *)this + 4) = v18;
      v30 = v23;
      v28 = v22.i64[0];
      sub_2429114EC((uint64_t)&v28);
    }
    else
    {
      *v10 = v8;
      v11 = v10 + 1;
    }
    *((_QWORD *)this + 3) = v11;
  }
  v24 = *((_BYTE *)a2 + 48);
  if ((v24 & 2) != 0)
  {
    v25 = *((_QWORD *)a2 + 5);
    *((_BYTE *)this + 48) |= 2u;
    *((_QWORD *)this + 5) = v25;
    v24 = *((_BYTE *)a2 + 48);
  }
  if ((v24 & 1) != 0)
  {
    v26 = *((_QWORD *)a2 + 1);
    *((_BYTE *)this + 48) |= 1u;
    *((_QWORD *)this + 1) = v26;
  }
  return this;
}

void sub_2428D0E84(void *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  sub_2427297D4(a1);
}

uint64_t CMMsl::Skeleton2D::operator=(uint64_t a1, const CMMsl::Skeleton2D *a2)
{
  int v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (**v9)(CMMsl::Skeleton2D *__hidden);
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void **v15;

  if ((const CMMsl::Skeleton2D *)a1 != a2)
  {
    CMMsl::Skeleton2D::Skeleton2D((CMMsl::Skeleton2D *)&v9, a2);
    v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v14;
    v14 = v3;
    v4 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v11;
    v11 = v4;
    v5 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v12;
    v12 = v5;
    v6 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v13;
    v13 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v10;
    v10 = v7;
    v9 = &off_251360EE0;
    v15 = (void **)&v11;
    sub_242910B70(&v15);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::Skeleton2D *a2, CMMsl::Skeleton2D *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  v6 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v6;
  v7 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v7;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

uint64_t CMMsl::Skeleton2D::Skeleton2D(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = &off_251360EE0;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = a1 + 16;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  v5 = *(_QWORD **)(a1 + 16);
  if (v5)
  {
    v6 = *(_QWORD **)(a1 + 24);
    v7 = *(void **)(a1 + 16);
    if (v6 != v5)
    {
      do
      {
        v9 = *--v6;
        v8 = v9;
        *v6 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
      while (v6 != v5);
      v7 = *(void **)v4;
    }
    *(_QWORD *)(a1 + 24) = v5;
    operator delete(v7);
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = 0;
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  return a1;
}

uint64_t CMMsl::Skeleton2D::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (**v9)(CMMsl::Skeleton2D *__hidden);
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void **v15;

  if (a1 != a2)
  {
    CMMsl::Skeleton2D::Skeleton2D((uint64_t)&v9, a2);
    v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v14;
    v14 = v3;
    v4 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v11;
    v11 = v4;
    v5 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v12;
    v12 = v5;
    v6 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v13;
    v13 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v10;
    v10 = v7;
    v9 = &off_251360EE0;
    v15 = (void **)&v11;
    sub_242910B70(&v15);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::Skeleton2D::formatText(CMMsl::Skeleton2D *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 48) & 1) != 0)
    PB::TextFormatter::format(a2, "globalMachtime", *((double *)this + 1));
  v5 = (uint64_t *)*((_QWORD *)this + 2);
  v6 = (uint64_t *)*((_QWORD *)this + 3);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "joint");
  }
  if ((*((_BYTE *)this + 48) & 2) != 0)
    PB::TextFormatter::format(a2, "localMachtime", *((double *)this + 5));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::Skeleton2D::readFrom(int64x2_t *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  int64x2_t *v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  int64x2_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int64x2_t v44;
  unint64_t v45;
  int64x2_t *v46;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = this + 2;
    while (1)
    {
      v9 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v16 = 0;
        v17 = 0;
        v12 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v18 = v2 + 1;
          v19 = *(_BYTE *)(v9 + v2);
          *((_QWORD *)a2 + 1) = v18;
          v12 |= (unint64_t)(v19 & 0x7F) << v16;
          if ((v19 & 0x80) == 0)
            goto LABEL_22;
          v16 += 7;
          v2 = v18;
          v15 = v17++ > 8;
          if (v15)
            goto LABEL_20;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_20;
      }
LABEL_22:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v21 = v12 >> 3;
      if ((v12 >> 3) == 3)
        break;
      if ((_DWORD)v21 == 2)
      {
        this[3].i8[0] |= 2u;
        v27 = *((_QWORD *)a2 + 1);
        if (v27 > 0xFFFFFFFFFFFFFFF7 || v27 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_33;
        this[2].i64[1] = *(_QWORD *)(*(_QWORD *)a2 + v27);
LABEL_43:
        *((_QWORD *)a2 + 1) += 8;
        goto LABEL_53;
      }
      if ((_DWORD)v21 == 1)
      {
        v22 = operator new();
        v23 = v22;
        *(_QWORD *)v22 = &off_251360F18;
        *(_QWORD *)(v22 + 8) = 0;
        *(_QWORD *)(v22 + 16) = 0;
        *(_QWORD *)(v22 + 24) = 0;
        *(_DWORD *)(v22 + 36) = 0;
        *(_DWORD *)(v22 + 44) = 0;
        v25 = (uint64_t *)this[1].i64[1];
        v24 = this[2].u64[0];
        if ((unint64_t)v25 >= v24)
        {
          v29 = this[1].i64[0];
          v30 = ((uint64_t)v25 - v29) >> 3;
          if ((unint64_t)(v30 + 1) >> 61)
            sub_242729A44();
          v31 = v24 - v29;
          v32 = v31 >> 2;
          if (v31 >> 2 <= (unint64_t)(v30 + 1))
            v32 = v30 + 1;
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
            v33 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v33 = v32;
          v46 = v8;
          if (v33)
            v33 = (unint64_t)sub_2429112FC(v33);
          else
            v34 = 0;
          v35 = (uint64_t *)(v33 + 8 * v30);
          v36 = v33 + 8 * v34;
          v45 = v36;
          *v35 = v23;
          v26 = v35 + 1;
          v44.i64[1] = (uint64_t)(v35 + 1);
          v38 = (_QWORD *)this[1].i64[0];
          v37 = (_QWORD *)this[1].i64[1];
          if (v37 == v38)
          {
            v40 = vdupq_n_s64((unint64_t)v37);
          }
          else
          {
            do
            {
              v39 = *--v37;
              *v37 = 0;
              *--v35 = v39;
            }
            while (v37 != v38);
            v40 = this[1];
            v26 = (_QWORD *)v44.i64[1];
            v36 = v45;
          }
          this[1].i64[0] = (uint64_t)v35;
          this[1].i64[1] = (uint64_t)v26;
          v44 = v40;
          v41 = this[2].i64[0];
          this[2].i64[0] = v36;
          v45 = v41;
          v43 = v40.i64[0];
          sub_2429114EC((uint64_t)&v43);
        }
        else
        {
          *v25 = v22;
          v26 = v25 + 1;
        }
        this[1].i64[1] = (uint64_t)v26;
        v42 = *(v26 - 1);
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v42 + 16))(v42, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_20:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
LABEL_53:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    this[3].i8[0] |= 1u;
    v28 = *((_QWORD *)a2 + 1);
    if (v28 > 0xFFFFFFFFFFFFFFF7 || v28 + 8 > *((_QWORD *)a2 + 2))
    {
LABEL_33:
      *((_BYTE *)a2 + 24) = 1;
      goto LABEL_53;
    }
    this->i64[1] = *(_QWORD *)(*(_QWORD *)a2 + v28);
    goto LABEL_43;
  }
  return v4 == 0;
}

void sub_2428D153C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::Skeleton2D::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base **v4;
  const PB::Base **v5;
  const PB::Base *v6;
  char v7;

  v3 = this;
  v4 = *(const PB::Base ***)(this + 16);
  v5 = *(const PB::Base ***)(this + 24);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::writeSubmessage(a2, v6);
  }
  v7 = *(_BYTE *)(v3 + 48);
  if ((v7 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 40));
    v7 = *(_BYTE *)(v3 + 48);
  }
  if ((v7 & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 8));
  return this;
}

uint64_t CMMsl::Skeleton2D::hash_value(CMMsl::Skeleton2D *this)
{
  CMMsl::Skeleton2DJoint **v2;
  CMMsl::Skeleton2DJoint **v3;
  uint64_t v4;
  CMMsl::Skeleton2DJoint *v5;
  double v6;
  double v7;

  v2 = (CMMsl::Skeleton2DJoint **)*((_QWORD *)this + 2);
  v3 = (CMMsl::Skeleton2DJoint **)*((_QWORD *)this + 3);
  if (v2 == v3)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *v2++;
      v4 ^= CMMsl::Skeleton2DJoint::hash_value(v5);
    }
    while (v2 != v3);
  }
  if ((*((_BYTE *)this + 48) & 2) != 0)
  {
    v6 = *((double *)this + 5);
    if (v6 == 0.0)
      v6 = 0.0;
    if ((*((_BYTE *)this + 48) & 1) != 0)
      goto LABEL_8;
LABEL_14:
    v7 = 0.0;
    return *(_QWORD *)&v6 ^ v4 ^ *(_QWORD *)&v7;
  }
  v6 = 0.0;
  if ((*((_BYTE *)this + 48) & 1) == 0)
    goto LABEL_14;
LABEL_8:
  v7 = *((double *)this + 1);
  if (v7 == 0.0)
    v7 = 0.0;
  return *(_QWORD *)&v6 ^ v4 ^ *(_QWORD *)&v7;
}

uint64_t CMMsl::Skeleton2DJoint::Skeleton2DJoint(uint64_t this)
{
  *(_QWORD *)this = &off_251360F18;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 36) = 0;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251360F18;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 36) = 0;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

void CMMsl::Skeleton2DJoint::~Skeleton2DJoint(CMMsl::Skeleton2DJoint *this)
{
  void *v2;

  *(_QWORD *)this = &off_251360F18;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::Skeleton2DJoint::~Skeleton2DJoint(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::Skeleton2DJoint *CMMsl::Skeleton2DJoint::Skeleton2DJoint(CMMsl::Skeleton2DJoint *this, const CMMsl::Skeleton2DJoint *a2)
{
  _QWORD *v4;
  int v5;
  char v6;
  int v7;
  char v8;

  *((_QWORD *)this + 1) = 0;
  v4 = (_QWORD *)((char *)this + 8);
  *(_QWORD *)this = &off_251360F18;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 9) = 0;
  *((_DWORD *)this + 11) = 0;
  if ((*((_BYTE *)a2 + 44) & 2) != 0)
  {
    v5 = *((_DWORD *)a2 + 9);
    *((_BYTE *)this + 44) = 2;
    *((_DWORD *)this + 9) = v5;
  }
  if (this != a2)
    sub_242911380(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  v6 = *((_BYTE *)a2 + 44);
  if ((v6 & 1) != 0)
  {
    v7 = *((_DWORD *)a2 + 8);
    *((_BYTE *)this + 44) |= 1u;
    *((_DWORD *)this + 8) = v7;
    v6 = *((_BYTE *)a2 + 44);
  }
  if ((v6 & 4) != 0)
  {
    v8 = *((_BYTE *)a2 + 40);
    *((_BYTE *)this + 44) |= 4u;
    *((_BYTE *)this + 40) = v8;
  }
  return this;
}

uint64_t CMMsl::Skeleton2DJoint::operator=(uint64_t a1, const CMMsl::Skeleton2DJoint *a2)
{
  int v3;
  int v4;
  __int128 v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  int v13;
  char v14;
  int v15;

  if ((const CMMsl::Skeleton2DJoint *)a1 != a2)
  {
    CMMsl::Skeleton2DJoint::Skeleton2DJoint((CMMsl::Skeleton2DJoint *)&v9, a2);
    v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v15;
    v15 = v3;
    v4 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v13;
    v13 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v5;
    v6 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v11;
    v11 = v6;
    v7 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v12;
    v12 = v7;
    LOBYTE(v6) = *(_BYTE *)(a1 + 40);
    *(_BYTE *)(a1 + 40) = v14;
    v14 = v6;
    CMMsl::Skeleton2DJoint::~Skeleton2DJoint((CMMsl::Skeleton2DJoint *)&v9);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::Skeleton2DJoint *a2, CMMsl::Skeleton2DJoint *a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float result;

  v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  v4 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  result = *((float *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((float *)a2 + 8) = result;
  LOBYTE(v7) = *((_BYTE *)this + 40);
  *((_BYTE *)this + 40) = *((_BYTE *)a2 + 40);
  *((_BYTE *)a2 + 40) = v7;
  return result;
}

uint64_t CMMsl::Skeleton2DJoint::Skeleton2DJoint(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_251360F18;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

{
  *(_QWORD *)a1 = &off_251360F18;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t CMMsl::Skeleton2DJoint::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  char v5;
  int v6;
  uint64_t v7;
  __int128 v8;
  int v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  void (**v14)(CMMsl::Skeleton2DJoint *__hidden);
  __int128 v15;
  uint64_t v16;
  int v17;
  int v18;
  char v19;
  int v20;

  if (a1 != a2)
  {
    v14 = &off_251360F18;
    v3 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a2 + 44) = 0;
    v4 = *(_DWORD *)(a2 + 36);
    v5 = *(_BYTE *)(a2 + 40);
    v6 = *(_DWORD *)(a2 + 32);
    v7 = *(_QWORD *)(a2 + 24);
    v8 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v9 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v3;
    v20 = v9;
    v10 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v4;
    v18 = v10;
    v11 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v15 = v11;
    v12 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v7;
    v16 = v12;
    LODWORD(v8) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v6;
    v17 = v8;
    LOBYTE(v12) = *(_BYTE *)(a1 + 40);
    *(_BYTE *)(a1 + 40) = v5;
    v19 = v12;
    CMMsl::Skeleton2DJoint::~Skeleton2DJoint((CMMsl::Skeleton2DJoint *)&v14);
  }
  return a1;
}

uint64_t CMMsl::Skeleton2DJoint::formatText(CMMsl::Skeleton2DJoint *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;
  float *v6;
  float *v7;
  float v8;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "confidence", *((float *)this + 8));
    v5 = *((_BYTE *)this + 44);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "joint");
  v6 = (float *)*((_QWORD *)this + 1);
  v7 = (float *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(a2, "position", v8);
  }
  if ((*((_BYTE *)this + 44) & 4) != 0)
    PB::TextFormatter::format(a2, "visible");
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::Skeleton2DJoint::readFrom(CMMsl::Skeleton2DJoint *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  _DWORD *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  BOOL v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;
  unint64_t v51;
  char *v52;
  _DWORD *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  _DWORD *v60;
  int v61;
  unint64_t v62;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (2)
  {
    v8 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_25:
      if ((v11 & 7) != 4)
      {
        switch((v11 >> 3))
        {
          case 1u:
            *((_BYTE *)this + 44) |= 2u;
            v20 = *((_QWORD *)a2 + 1);
            v21 = *((_QWORD *)a2 + 2);
            v22 = *(_QWORD *)a2;
            if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
            {
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v26 = v20 + 1;
                *((_QWORD *)a2 + 1) = v20 + 1;
                v27 = *(_BYTE *)(v22 + v20);
                v25 |= (unint64_t)(v27 & 0x7F) << v23;
                if ((v27 & 0x80) == 0)
                  goto LABEL_85;
                v23 += 7;
                v20 = v26;
                v14 = v24++ > 8;
              }
              while (!v14);
LABEL_69:
              LODWORD(v25) = 0;
              goto LABEL_85;
            }
            v47 = 0;
            v48 = 0;
            v25 = 0;
            if (v21 <= v20)
              v21 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v21 == v20)
              {
                LODWORD(v25) = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v49 = v20 + 1;
                v50 = *(_BYTE *)(v22 + v20);
                *((_QWORD *)a2 + 1) = v49;
                v25 |= (unint64_t)(v50 & 0x7F) << v47;
                if (v50 < 0)
                {
                  v47 += 7;
                  v20 = v49;
                  v14 = v48++ > 8;
                  if (v14)
                    goto LABEL_69;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
              }
              break;
            }
LABEL_85:
            *((_DWORD *)this + 9) = v25;
            goto LABEL_20;
          case 2u:
            if ((v11 & 7) == 2)
            {
              if ((PB::Reader::placeMark() & 1) != 0)
                return 0;
              v28 = *((_QWORD *)a2 + 1);
              v29 = *((_QWORD *)a2 + 2);
              while (v28 < v29 && !*((_BYTE *)a2 + 24))
              {
                v31 = (char *)*((_QWORD *)this + 2);
                v30 = *((_QWORD *)this + 3);
                if ((unint64_t)v31 >= v30)
                {
                  v33 = (char *)*((_QWORD *)this + 1);
                  v34 = (v31 - v33) >> 2;
                  v35 = v34 + 1;
                  if ((unint64_t)(v34 + 1) >> 62)
                    goto LABEL_103;
                  v36 = v30 - (_QWORD)v33;
                  if (v36 >> 1 > v35)
                    v35 = v36 >> 1;
                  if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
                    v37 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v37 = v35;
                  if (v37)
                  {
                    v37 = (unint64_t)sub_2429114B8(v37);
                    v33 = (char *)*((_QWORD *)this + 1);
                    v31 = (char *)*((_QWORD *)this + 2);
                  }
                  else
                  {
                    v38 = 0;
                  }
                  v39 = (_DWORD *)(v37 + 4 * v34);
                  *v39 = 0;
                  v32 = v39 + 1;
                  while (v31 != v33)
                  {
                    v40 = *((_DWORD *)v31 - 1);
                    v31 -= 4;
                    *--v39 = v40;
                  }
                  *((_QWORD *)this + 1) = v39;
                  *((_QWORD *)this + 2) = v32;
                  *((_QWORD *)this + 3) = v37 + 4 * v38;
                  if (v33)
                    operator delete(v33);
                }
                else
                {
                  *(_DWORD *)v31 = 0;
                  v32 = v31 + 4;
                }
                *((_QWORD *)this + 2) = v32;
                v41 = *((_QWORD *)a2 + 1);
                if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((_QWORD *)a2 + 2))
                {
                  *((_BYTE *)a2 + 24) = 1;
                  break;
                }
                *(v32 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v41);
                v29 = *((_QWORD *)a2 + 2);
                v28 = *((_QWORD *)a2 + 1) + 4;
                *((_QWORD *)a2 + 1) = v28;
              }
              PB::Reader::recallMark();
            }
            else
            {
              v52 = (char *)*((_QWORD *)this + 2);
              v51 = *((_QWORD *)this + 3);
              if ((unint64_t)v52 >= v51)
              {
                v54 = (char *)*((_QWORD *)this + 1);
                v55 = (v52 - v54) >> 2;
                v56 = v55 + 1;
                if ((unint64_t)(v55 + 1) >> 62)
LABEL_103:
                  sub_242729A44();
                v57 = v51 - (_QWORD)v54;
                if (v57 >> 1 > v56)
                  v56 = v57 >> 1;
                if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL)
                  v58 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v58 = v56;
                if (v58)
                {
                  v58 = (unint64_t)sub_2429114B8(v58);
                  v54 = (char *)*((_QWORD *)this + 1);
                  v52 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v59 = 0;
                }
                v60 = (_DWORD *)(v58 + 4 * v55);
                *v60 = 0;
                v53 = v60 + 1;
                while (v52 != v54)
                {
                  v61 = *((_DWORD *)v52 - 1);
                  v52 -= 4;
                  *--v60 = v61;
                }
                *((_QWORD *)this + 1) = v60;
                *((_QWORD *)this + 2) = v53;
                *((_QWORD *)this + 3) = v58 + 4 * v59;
                if (v54)
                  operator delete(v54);
              }
              else
              {
                *(_DWORD *)v52 = 0;
                v53 = v52 + 4;
              }
              *((_QWORD *)this + 2) = v53;
              v62 = *((_QWORD *)a2 + 1);
              if (v62 <= 0xFFFFFFFFFFFFFFFBLL && v62 + 4 <= *((_QWORD *)a2 + 2))
              {
                *(v53 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v62);
LABEL_98:
                *((_QWORD *)a2 + 1) += 4;
              }
              else
              {
LABEL_96:
                *((_BYTE *)a2 + 24) = 1;
              }
            }
LABEL_20:
            v2 = *((_QWORD *)a2 + 1);
            v3 = *((_QWORD *)a2 + 2);
            v4 = *((unsigned __int8 *)a2 + 24);
            if (v2 >= v3 || v4 != 0)
              return v4 == 0;
            continue;
          case 3u:
            *((_BYTE *)this + 44) |= 1u;
            v42 = *((_QWORD *)a2 + 1);
            if (v42 > 0xFFFFFFFFFFFFFFFBLL || v42 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_96;
            *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v42);
            goto LABEL_98;
          case 4u:
            *((_BYTE *)this + 44) |= 4u;
            v43 = *((_QWORD *)a2 + 1);
            if (v43 >= *((_QWORD *)a2 + 2))
            {
              v46 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v44 = v43 + 1;
              v45 = *(unsigned __int8 *)(*(_QWORD *)a2 + v43);
              *((_QWORD *)a2 + 1) = v44;
              v46 = v45 != 0;
            }
            *((_BYTE *)this + 40) = v46;
            goto LABEL_20;
          default:
            goto LABEL_19;
        }
      }
      v4 = 0;
      return v4 == 0;
    }
    break;
  }
  v15 = 0;
  v16 = 0;
  v11 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v17 = v2 + 1;
    v18 = *(_BYTE *)(v8 + v2);
    *((_QWORD *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0)
      goto LABEL_25;
    v15 += 7;
    v2 = v17;
    v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  if ((PB::Reader::skip(a2) & 1) != 0)
    goto LABEL_20;
  return 0;
}

uint64_t CMMsl::Skeleton2DJoint::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  char v7;

  v3 = this;
  if ((*(_BYTE *)(this + 44) & 2) != 0)
    this = PB::Writer::writeVarInt(a2);
  v4 = *(float **)(v3 + 8);
  v5 = *(float **)(v3 + 16);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6);
  }
  v7 = *(_BYTE *)(v3 + 44);
  if ((v7 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 32));
    v7 = *(_BYTE *)(v3 + 44);
  }
  if ((v7 & 4) != 0)
    return PB::Writer::write(a2);
  return this;
}

BOOL CMMsl::Skeleton2DJoint::operator==(uint64_t a1, uint64_t a2)
{
  float *v2;
  float *v3;
  float *v4;
  _BOOL8 v5;

  if ((*(_BYTE *)(a1 + 44) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 2) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 2) != 0)
  {
    return 0;
  }
  v3 = *(float **)(a1 + 8);
  v2 = *(float **)(a1 + 16);
  v4 = *(float **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 16) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 1) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 1) != 0)
  {
    return 0;
  }
  v5 = (*(_BYTE *)(a2 + 44) & 4) == 0;
  if ((*(_BYTE *)(a1 + 44) & 4) != 0)
    return (*(_BYTE *)(a2 + 44) & 4) != 0 && *(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40);
  return v5;
}

uint64_t CMMsl::Skeleton2DJoint::hash_value(CMMsl::Skeleton2DJoint *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  if ((*((_BYTE *)this + 44) & 2) != 0)
    v2 = *((int *)this + 9);
  else
    v2 = 0;
  v3 = PBHashBytes();
  if ((*((_BYTE *)this + 44) & 1) != 0)
  {
    v6 = *((float *)this + 8);
    v4 = LODWORD(v6);
    if (v6 == 0.0)
      v4 = 0;
    if ((*((_BYTE *)this + 44) & 4) != 0)
      goto LABEL_6;
LABEL_10:
    v5 = 0;
    return v3 ^ v2 ^ v4 ^ v5;
  }
  v4 = 0;
  if ((*((_BYTE *)this + 44) & 4) == 0)
    goto LABEL_10;
LABEL_6:
  v5 = *((unsigned __int8 *)this + 40);
  return v3 ^ v2 ^ v4 ^ v5;
}

void CMMsl::Skeleton3D::~Skeleton3D(CMMsl::Skeleton3D *this)
{
  void **v2;

  *(_QWORD *)this = &off_251360F50;
  v2 = (void **)((char *)this + 8);
  sub_242910B70(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_251360F50;
  v2 = (void **)((char *)this + 8);
  sub_242910B70(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_251360F50;
  v2 = (void **)((char *)this + 8);
  sub_242910B70(&v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::Skeleton3D *CMMsl::Skeleton3D::Skeleton3D(CMMsl::Skeleton3D *this, const CMMsl::Skeleton3D *a2)
{
  CMMsl::SkeletonJoint ***v3;
  const CMMsl::SkeletonJoint **v4;
  const CMMsl::SkeletonJoint **v5;

  *((_QWORD *)this + 1) = 0;
  v3 = (CMMsl::SkeletonJoint ***)((char *)this + 8);
  *(_QWORD *)this = &off_251360F50;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  v4 = (const CMMsl::SkeletonJoint **)*((_QWORD *)a2 + 1);
  v5 = (const CMMsl::SkeletonJoint **)*((_QWORD *)a2 + 2);
  while (v4 != v5)
    sub_2428D231C(v3, *v4++);
  return this;
}

uint64_t sub_2428D231C(CMMsl::SkeletonJoint ***a1, const CMMsl::SkeletonJoint *a2)
{
  CMMsl::SkeletonJoint *v4;
  uint64_t result;
  unint64_t v6;
  CMMsl::SkeletonJoint **v7;
  CMMsl::SkeletonJoint **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  CMMsl::SkeletonJoint **v14;
  unint64_t v15;
  CMMsl::SkeletonJoint **v16;
  CMMsl::SkeletonJoint **v17;
  CMMsl::SkeletonJoint *v18;
  int64x2_t v19;
  CMMsl::SkeletonJoint **v20;
  uint64_t v21;
  int64x2_t v22;
  unint64_t v23;
  _QWORD *v24;

  v4 = (CMMsl::SkeletonJoint *)operator new();
  result = (uint64_t)CMMsl::SkeletonJoint::SkeletonJoint(v4, a2);
  v6 = (unint64_t)a1[2];
  v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    v9 = v7 - *a1;
    if ((unint64_t)(v9 + 1) >> 61)
      sub_242729A44();
    v10 = v6 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v24 = a1 + 2;
    if (v12)
      v12 = (unint64_t)sub_2429112FC(v12);
    else
      v13 = 0;
    v14 = (CMMsl::SkeletonJoint **)(v12 + 8 * v9);
    v15 = v12 + 8 * v13;
    v23 = v15;
    *v14 = v4;
    v8 = v14 + 1;
    v22.i64[1] = (uint64_t)(v14 + 1);
    v17 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        v18 = *--v16;
        *v16 = 0;
        *--v14 = v18;
      }
      while (v16 != v17);
      v19 = *(int64x2_t *)a1;
      v8 = (CMMsl::SkeletonJoint **)v22.i64[1];
      v15 = v23;
    }
    *a1 = v14;
    a1[1] = v8;
    v22 = v19;
    v20 = a1[2];
    a1[2] = (CMMsl::SkeletonJoint **)v15;
    v23 = (unint64_t)v20;
    v21 = v19.i64[0];
    result = sub_2429114EC((uint64_t)&v21);
  }
  else
  {
    *v7 = v4;
    v8 = v7 + 1;
  }
  a1[1] = v8;
  return result;
}

void sub_2428D244C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::Skeleton3D::operator=(uint64_t a1, const CMMsl::Skeleton3D *a2)
{
  __int128 v3;
  uint64_t v4;
  void (**v6)(CMMsl::Skeleton3D *__hidden);
  __int128 v7;
  uint64_t v8;
  void **v9;

  if ((const CMMsl::Skeleton3D *)a1 != a2)
  {
    CMMsl::Skeleton3D::Skeleton3D((CMMsl::Skeleton3D *)&v6, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v4;
    v6 = &off_251360F50;
    v9 = (void **)&v7;
    sub_242910B70(&v9);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

_QWORD *CMMsl::swap(_QWORD *this, CMMsl::Skeleton3D *a2, CMMsl::Skeleton3D *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  return this;
}

_QWORD *CMMsl::Skeleton3D::Skeleton3D(_QWORD *a1, uint64_t a2)
{
  _OWORD *v4;

  *a1 = &off_251360F50;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v4 = a1 + 1;
  sub_242910BEC(a1 + 1);
  *v4 = *(_OWORD *)(a2 + 8);
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

{
  _OWORD *v4;

  *a1 = &off_251360F50;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v4 = a1 + 1;
  sub_242910BEC(a1 + 1);
  *v4 = *(_OWORD *)(a2 + 8);
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

uint64_t CMMsl::Skeleton3D::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  void (**v9)(CMMsl::Skeleton3D *__hidden);
  __int128 v10;
  uint64_t v11;
  void **v12;

  if (a1 != a2)
  {
    v9 = &off_251360F50;
    v10 = 0uLL;
    v11 = 0;
    sub_242910BEC(&v10);
    v4 = *(_QWORD *)(a2 + 24);
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    v10 = v6;
    v7 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v4;
    v11 = v7;
    v12 = (void **)&v10;
    v9 = &off_251360F50;
    sub_242910B70(&v12);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::Skeleton3D::formatText(CMMsl::Skeleton3D *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "joint");
  }
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::Skeleton3D::readFrom(CMMsl::Skeleton3D *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (uint64_t **)((char *)this + 8);
    while (1)
    {
      v9 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_26;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v12 >> 3) == 1)
      {
        sub_2428D2890(v8);
        v20 = *(_QWORD *)(*((_QWORD *)this + 2) - 8);
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_26:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)a2 + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      v15 = v17++ > 8;
      if (v15)
        goto LABEL_26;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_2428D2890(uint64_t **a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int64x2_t v17;
  unint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  unint64_t v21;
  _QWORD *v22;

  result = operator new();
  v3 = result;
  *(_QWORD *)result = &off_251361030;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_QWORD *)(result + 56) = 0;
  v4 = (unint64_t)a1[2];
  v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = v5 - *a1;
    if ((unint64_t)(v7 + 1) >> 61)
      sub_242729A44();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v22 = a1 + 2;
    if (v10)
      v10 = (unint64_t)sub_2429112FC(v10);
    else
      v11 = 0;
    v12 = (uint64_t *)(v10 + 8 * v7);
    v13 = v10 + 8 * v11;
    v21 = v13;
    *v12 = v3;
    v6 = v12 + 1;
    v20.i64[1] = (uint64_t)(v12 + 1);
    v15 = *a1;
    v14 = a1[1];
    if (v14 == *a1)
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *--v14;
        *v14 = 0;
        *--v12 = v16;
      }
      while (v14 != v15);
      v17 = *(int64x2_t *)a1;
      v6 = (uint64_t *)v20.i64[1];
      v13 = v21;
    }
    *a1 = v12;
    a1[1] = v6;
    v20 = v17;
    v18 = (unint64_t)a1[2];
    a1[2] = (uint64_t *)v13;
    v21 = v18;
    v19 = v17.i64[0];
    result = sub_2429114EC((uint64_t)&v19);
  }
  else
  {
    *v5 = result;
    v6 = v5 + 1;
  }
  a1[1] = v6;
  return result;
}

void sub_2428D29D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::Skeleton3D::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base **v2;
  const PB::Base **i;
  const PB::Base *v5;

  v2 = *(const PB::Base ***)(this + 8);
  for (i = *(const PB::Base ***)(this + 16); v2 != i; this = PB::Writer::writeSubmessage(a2, v5))
    v5 = *v2++;
  return this;
}

BOOL sub_2428D2A38(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 result;
  BOOL v9;

  if (a2 - a1 != a4 - (_QWORD)a3)
    return 0;
  if (a1 == a2)
    return 1;
  v5 = a3;
  v6 = a1 + 8;
  do
  {
    v7 = *v5++;
    result = CMMsl::SkeletonJoint::operator==(*(_QWORD *)(v6 - 8), v7);
    v9 = !result || v6 == a2;
    v6 += 8;
  }
  while (!v9);
  return result;
}

uint64_t CMMsl::Skeleton3D::hash_value(CMMsl::Skeleton3D *this)
{
  CMMsl::SkeletonJoint **v1;
  CMMsl::SkeletonJoint **v2;
  uint64_t v3;
  CMMsl::SkeletonJoint *v4;

  v1 = (CMMsl::SkeletonJoint **)*((_QWORD *)this + 1);
  v2 = (CMMsl::SkeletonJoint **)*((_QWORD *)this + 2);
  if (v1 == v2)
    return 0;
  v3 = 0;
  do
  {
    v4 = *v1++;
    v3 ^= CMMsl::SkeletonJoint::hash_value(v4);
  }
  while (v1 != v2);
  return v3;
}

void CMMsl::Skeleton3DLifted::~Skeleton3DLifted(CMMsl::Skeleton3DLifted *this)
{
  void **v2;

  *(_QWORD *)this = &off_251360F88;
  v2 = (void **)((char *)this + 16);
  sub_242910B70(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_251360F88;
  v2 = (void **)((char *)this + 16);
  sub_242910B70(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_251360F88;
  v2 = (void **)((char *)this + 16);
  sub_242910B70(&v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::Skeleton3DLifted *CMMsl::Skeleton3DLifted::Skeleton3DLifted(CMMsl::Skeleton3DLifted *this, const CMMsl::Skeleton3DLifted *a2)
{
  int64x2_t *v4;
  const CMMsl::Skeleton3DLiftedJoint **v5;
  const CMMsl::Skeleton3DLiftedJoint **i;
  const CMMsl::Skeleton3DLiftedJoint *v7;
  CMMsl::Skeleton3DLiftedJoint *v8;
  unint64_t v9;
  CMMsl::Skeleton3DLiftedJoint **v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  CMMsl::Skeleton3DLiftedJoint **v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  CMMsl::Skeleton3DLiftedJoint *v21;
  int64x2_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  int64x2_t v29;
  unint64_t v30;
  char *v31;

  *(_QWORD *)this = &off_251360F88;
  *((_QWORD *)this + 2) = 0;
  v4 = (int64x2_t *)((char *)this + 16);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 12) = 0;
  v5 = (const CMMsl::Skeleton3DLiftedJoint **)*((_QWORD *)a2 + 2);
  for (i = (const CMMsl::Skeleton3DLiftedJoint **)*((_QWORD *)a2 + 3); v5 != i; ++v5)
  {
    v7 = *v5;
    v8 = (CMMsl::Skeleton3DLiftedJoint *)operator new();
    CMMsl::Skeleton3DLiftedJoint::Skeleton3DLiftedJoint(v8, v7);
    v10 = (CMMsl::Skeleton3DLiftedJoint **)*((_QWORD *)this + 3);
    v9 = *((_QWORD *)this + 4);
    if ((unint64_t)v10 >= v9)
    {
      v12 = ((uint64_t)v10 - v4->i64[0]) >> 3;
      if ((unint64_t)(v12 + 1) >> 61)
        sub_242729A44();
      v13 = v9 - v4->i64[0];
      v14 = v13 >> 2;
      if (v13 >> 2 <= (unint64_t)(v12 + 1))
        v14 = v12 + 1;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v14;
      v31 = (char *)this + 32;
      if (v15)
        v15 = (unint64_t)sub_2429112FC(v15);
      else
        v16 = 0;
      v17 = (CMMsl::Skeleton3DLiftedJoint **)(v15 + 8 * v12);
      v18 = v15 + 8 * v16;
      v30 = v18;
      *v17 = v8;
      v11 = v17 + 1;
      v29.i64[1] = (uint64_t)(v17 + 1);
      v20 = (_QWORD *)*((_QWORD *)this + 2);
      v19 = (_QWORD *)*((_QWORD *)this + 3);
      if (v19 == v20)
      {
        v22 = vdupq_n_s64((unint64_t)v19);
      }
      else
      {
        do
        {
          v21 = (CMMsl::Skeleton3DLiftedJoint *)*--v19;
          *v19 = 0;
          *--v17 = v21;
        }
        while (v19 != v20);
        v22 = *v4;
        v11 = (_QWORD *)v29.i64[1];
        v18 = v30;
      }
      *((_QWORD *)this + 2) = v17;
      *((_QWORD *)this + 3) = v11;
      v29 = v22;
      v23 = *((_QWORD *)this + 4);
      *((_QWORD *)this + 4) = v18;
      v30 = v23;
      v28 = v22.i64[0];
      sub_2429114EC((uint64_t)&v28);
    }
    else
    {
      *v10 = v8;
      v11 = v10 + 1;
    }
    *((_QWORD *)this + 3) = v11;
  }
  v24 = *((_BYTE *)a2 + 48);
  if ((v24 & 2) != 0)
  {
    v25 = *((_QWORD *)a2 + 5);
    *((_BYTE *)this + 48) |= 2u;
    *((_QWORD *)this + 5) = v25;
    v24 = *((_BYTE *)a2 + 48);
  }
  if ((v24 & 1) != 0)
  {
    v26 = *((_QWORD *)a2 + 1);
    *((_BYTE *)this + 48) |= 1u;
    *((_QWORD *)this + 1) = v26;
  }
  return this;
}

void sub_2428D2DAC(void *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  sub_2427297D4(a1);
}

uint64_t CMMsl::Skeleton3DLifted::operator=(uint64_t a1, const CMMsl::Skeleton3DLifted *a2)
{
  int v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (**v9)(CMMsl::Skeleton3DLifted *__hidden);
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void **v15;

  if ((const CMMsl::Skeleton3DLifted *)a1 != a2)
  {
    CMMsl::Skeleton3DLifted::Skeleton3DLifted((CMMsl::Skeleton3DLifted *)&v9, a2);
    v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v14;
    v14 = v3;
    v4 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v11;
    v11 = v4;
    v5 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v12;
    v12 = v5;
    v6 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v13;
    v13 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v10;
    v10 = v7;
    v9 = &off_251360F88;
    v15 = (void **)&v11;
    sub_242910B70(&v15);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::Skeleton3DLifted *a2, CMMsl::Skeleton3DLifted *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  v6 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v6;
  v7 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v7;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

uint64_t CMMsl::Skeleton3DLifted::Skeleton3DLifted(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = &off_251360F88;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = a1 + 16;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  v5 = *(_QWORD **)(a1 + 16);
  if (v5)
  {
    v6 = *(_QWORD **)(a1 + 24);
    v7 = *(void **)(a1 + 16);
    if (v6 != v5)
    {
      do
      {
        v9 = *--v6;
        v8 = v9;
        *v6 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
      while (v6 != v5);
      v7 = *(void **)v4;
    }
    *(_QWORD *)(a1 + 24) = v5;
    operator delete(v7);
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = 0;
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  return a1;
}

uint64_t CMMsl::Skeleton3DLifted::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (**v9)(CMMsl::Skeleton3DLifted *__hidden);
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void **v15;

  if (a1 != a2)
  {
    CMMsl::Skeleton3DLifted::Skeleton3DLifted((uint64_t)&v9, a2);
    v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v14;
    v14 = v3;
    v4 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v11;
    v11 = v4;
    v5 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v12;
    v12 = v5;
    v6 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v13;
    v13 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v10;
    v10 = v7;
    v9 = &off_251360F88;
    v15 = (void **)&v11;
    sub_242910B70(&v15);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::Skeleton3DLifted::formatText(CMMsl::Skeleton3DLifted *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 48) & 1) != 0)
    PB::TextFormatter::format(a2, "globalMachtime", *((double *)this + 1));
  v5 = (uint64_t *)*((_QWORD *)this + 2);
  v6 = (uint64_t *)*((_QWORD *)this + 3);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "joint");
  }
  if ((*((_BYTE *)this + 48) & 2) != 0)
    PB::TextFormatter::format(a2, "localMachtime", *((double *)this + 5));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::Skeleton3DLifted::readFrom(int64x2_t *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  int64x2_t *v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  int64x2_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int64x2_t v44;
  unint64_t v45;
  int64x2_t *v46;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = this + 2;
    while (1)
    {
      v9 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v16 = 0;
        v17 = 0;
        v12 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v18 = v2 + 1;
          v19 = *(_BYTE *)(v9 + v2);
          *((_QWORD *)a2 + 1) = v18;
          v12 |= (unint64_t)(v19 & 0x7F) << v16;
          if ((v19 & 0x80) == 0)
            goto LABEL_22;
          v16 += 7;
          v2 = v18;
          v15 = v17++ > 8;
          if (v15)
            goto LABEL_20;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_20;
      }
LABEL_22:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v21 = v12 >> 3;
      if ((v12 >> 3) == 3)
        break;
      if ((_DWORD)v21 == 2)
      {
        this[3].i8[0] |= 2u;
        v27 = *((_QWORD *)a2 + 1);
        if (v27 > 0xFFFFFFFFFFFFFFF7 || v27 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_33;
        this[2].i64[1] = *(_QWORD *)(*(_QWORD *)a2 + v27);
LABEL_43:
        *((_QWORD *)a2 + 1) += 8;
        goto LABEL_53;
      }
      if ((_DWORD)v21 == 1)
      {
        v22 = operator new();
        v23 = v22;
        *(_QWORD *)v22 = &off_251360FC0;
        *(_OWORD *)(v22 + 8) = 0u;
        *(_OWORD *)(v22 + 24) = 0u;
        v25 = (uint64_t *)this[1].i64[1];
        v24 = this[2].u64[0];
        if ((unint64_t)v25 >= v24)
        {
          v29 = this[1].i64[0];
          v30 = ((uint64_t)v25 - v29) >> 3;
          if ((unint64_t)(v30 + 1) >> 61)
            sub_242729A44();
          v31 = v24 - v29;
          v32 = v31 >> 2;
          if (v31 >> 2 <= (unint64_t)(v30 + 1))
            v32 = v30 + 1;
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
            v33 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v33 = v32;
          v46 = v8;
          if (v33)
            v33 = (unint64_t)sub_2429112FC(v33);
          else
            v34 = 0;
          v35 = (uint64_t *)(v33 + 8 * v30);
          v36 = v33 + 8 * v34;
          v45 = v36;
          *v35 = v23;
          v26 = v35 + 1;
          v44.i64[1] = (uint64_t)(v35 + 1);
          v38 = (_QWORD *)this[1].i64[0];
          v37 = (_QWORD *)this[1].i64[1];
          if (v37 == v38)
          {
            v40 = vdupq_n_s64((unint64_t)v37);
          }
          else
          {
            do
            {
              v39 = *--v37;
              *v37 = 0;
              *--v35 = v39;
            }
            while (v37 != v38);
            v40 = this[1];
            v26 = (_QWORD *)v44.i64[1];
            v36 = v45;
          }
          this[1].i64[0] = (uint64_t)v35;
          this[1].i64[1] = (uint64_t)v26;
          v44 = v40;
          v41 = this[2].i64[0];
          this[2].i64[0] = v36;
          v45 = v41;
          v43 = v40.i64[0];
          sub_2429114EC((uint64_t)&v43);
        }
        else
        {
          *v25 = v22;
          v26 = v25 + 1;
        }
        this[1].i64[1] = (uint64_t)v26;
        v42 = *(v26 - 1);
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v42 + 16))(v42, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_20:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
LABEL_53:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    this[3].i8[0] |= 1u;
    v28 = *((_QWORD *)a2 + 1);
    if (v28 > 0xFFFFFFFFFFFFFFF7 || v28 + 8 > *((_QWORD *)a2 + 2))
    {
LABEL_33:
      *((_BYTE *)a2 + 24) = 1;
      goto LABEL_53;
    }
    this->i64[1] = *(_QWORD *)(*(_QWORD *)a2 + v28);
    goto LABEL_43;
  }
  return v4 == 0;
}

void sub_2428D3464(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::Skeleton3DLifted::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base **v4;
  const PB::Base **v5;
  const PB::Base *v6;
  char v7;

  v3 = this;
  v4 = *(const PB::Base ***)(this + 16);
  v5 = *(const PB::Base ***)(this + 24);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::writeSubmessage(a2, v6);
  }
  v7 = *(_BYTE *)(v3 + 48);
  if ((v7 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 40));
    v7 = *(_BYTE *)(v3 + 48);
  }
  if ((v7 & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 8));
  return this;
}

uint64_t CMMsl::Skeleton3DLifted::hash_value(CMMsl::Skeleton3DLifted *this)
{
  CMMsl::Skeleton3DLiftedJoint **v2;
  CMMsl::Skeleton3DLiftedJoint **v3;
  uint64_t v4;
  CMMsl::Skeleton3DLiftedJoint *v5;
  double v6;
  double v7;

  v2 = (CMMsl::Skeleton3DLiftedJoint **)*((_QWORD *)this + 2);
  v3 = (CMMsl::Skeleton3DLiftedJoint **)*((_QWORD *)this + 3);
  if (v2 == v3)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *v2++;
      v4 ^= CMMsl::Skeleton3DLiftedJoint::hash_value(v5);
    }
    while (v2 != v3);
  }
  if ((*((_BYTE *)this + 48) & 2) != 0)
  {
    v6 = *((double *)this + 5);
    if (v6 == 0.0)
      v6 = 0.0;
    if ((*((_BYTE *)this + 48) & 1) != 0)
      goto LABEL_8;
LABEL_14:
    v7 = 0.0;
    return *(_QWORD *)&v6 ^ v4 ^ *(_QWORD *)&v7;
  }
  v6 = 0.0;
  if ((*((_BYTE *)this + 48) & 1) == 0)
    goto LABEL_14;
LABEL_8:
  v7 = *((double *)this + 1);
  if (v7 == 0.0)
    v7 = 0.0;
  return *(_QWORD *)&v6 ^ v4 ^ *(_QWORD *)&v7;
}

double CMMsl::Skeleton3DLiftedJoint::Skeleton3DLiftedJoint(CMMsl::Skeleton3DLiftedJoint *this)
{
  double result;

  *(_QWORD *)this = &off_251360FC0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_251360FC0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

void CMMsl::Skeleton3DLiftedJoint::~Skeleton3DLiftedJoint(CMMsl::Skeleton3DLiftedJoint *this)
{
  void *v2;

  *(_QWORD *)this = &off_251360FC0;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::Skeleton3DLiftedJoint::~Skeleton3DLiftedJoint(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::Skeleton3DLiftedJoint *CMMsl::Skeleton3DLiftedJoint::Skeleton3DLiftedJoint(CMMsl::Skeleton3DLiftedJoint *this, const CMMsl::Skeleton3DLiftedJoint *a2)
{
  _QWORD *v3;
  int v4;

  *(_QWORD *)this = &off_251360FC0;
  *(_OWORD *)((char *)this + 8) = 0u;
  v3 = (_QWORD *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  if ((*((_BYTE *)a2 + 36) & 1) != 0)
  {
    v4 = *((_DWORD *)a2 + 8);
    *((_BYTE *)this + 36) = 1;
    *((_DWORD *)this + 8) = v4;
  }
  if (this != a2)
    sub_242911380(v3, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  return this;
}

uint64_t CMMsl::Skeleton3DLiftedJoint::operator=(uint64_t a1, const CMMsl::Skeleton3DLiftedJoint *a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  _BYTE v7[8];
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  if ((const CMMsl::Skeleton3DLiftedJoint *)a1 != a2)
  {
    CMMsl::Skeleton3DLiftedJoint::Skeleton3DLiftedJoint((CMMsl::Skeleton3DLiftedJoint *)v7, a2);
    v3 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v10;
    v10 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v4;
    v5 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v9;
    v9 = v5;
    CMMsl::Skeleton3DLiftedJoint::~Skeleton3DLiftedJoint((CMMsl::Skeleton3DLiftedJoint *)v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::Skeleton3DLiftedJoint *a2, CMMsl::Skeleton3DLiftedJoint *a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_DWORD *)(this + 36);
  *(_DWORD *)(this + 36) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v3;
  v4 = *(_DWORD *)(this + 32);
  *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  v5 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  return this;
}

uint64_t CMMsl::Skeleton3DLiftedJoint::Skeleton3DLiftedJoint(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_251360FC0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  return a1;
}

{
  *(_QWORD *)a1 = &off_251360FC0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  return a1;
}

uint64_t CMMsl::Skeleton3DLiftedJoint::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  void (**v10)(CMMsl::Skeleton3DLiftedJoint *__hidden);
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  if (a1 != a2)
  {
    v10 = &off_251360FC0;
    v3 = *(_QWORD *)(a2 + 24);
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v5 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 36) = 0;
    v6 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v5;
    v13 = v6;
    v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v4;
    v11 = v7;
    v8 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v3;
    v12 = v8;
    CMMsl::Skeleton3DLiftedJoint::~Skeleton3DLiftedJoint((CMMsl::Skeleton3DLiftedJoint *)&v10);
  }
  return a1;
}

uint64_t CMMsl::Skeleton3DLiftedJoint::formatText(CMMsl::Skeleton3DLiftedJoint *this, PB::TextFormatter *a2, const char *a3)
{
  float *v5;
  float *v6;
  float v7;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 36) & 1) != 0)
    PB::TextFormatter::format(a2, "joint");
  v5 = (float *)*((_QWORD *)this + 1);
  v6 = (float *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "position", v7);
  }
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::Skeleton3DLiftedJoint::readFrom(CMMsl::Skeleton3DLiftedJoint *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  _DWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  int v39;
  unint64_t v40;
  char v41;
  unsigned int v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  char *v46;
  _DWORD *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _DWORD *v54;
  int v55;
  unint64_t v56;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_30;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        if ((v11 & 7) == 2)
        {
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v27 = *((_QWORD *)a2 + 1);
          v28 = *((_QWORD *)a2 + 2);
          while (v27 < v28 && !*((_BYTE *)a2 + 24))
          {
            v30 = (char *)*((_QWORD *)this + 2);
            v29 = *((_QWORD *)this + 3);
            if ((unint64_t)v30 >= v29)
            {
              v32 = (char *)*((_QWORD *)this + 1);
              v33 = (v30 - v32) >> 2;
              v34 = v33 + 1;
              if ((unint64_t)(v33 + 1) >> 62)
                goto LABEL_98;
              v35 = v29 - (_QWORD)v32;
              if (v35 >> 1 > v34)
                v34 = v35 >> 1;
              if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
                v36 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v36 = v34;
              if (v36)
              {
                v36 = (unint64_t)sub_2429114B8(v36);
                v32 = (char *)*((_QWORD *)this + 1);
                v30 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v37 = 0;
              }
              v38 = (_DWORD *)(v36 + 4 * v33);
              *v38 = 0;
              v31 = v38 + 1;
              while (v30 != v32)
              {
                v39 = *((_DWORD *)v30 - 1);
                v30 -= 4;
                *--v38 = v39;
              }
              *((_QWORD *)this + 1) = v38;
              *((_QWORD *)this + 2) = v31;
              *((_QWORD *)this + 3) = v36 + 4 * v37;
              if (v32)
                operator delete(v32);
            }
            else
            {
              *(_DWORD *)v30 = 0;
              v31 = v30 + 4;
            }
            *((_QWORD *)this + 2) = v31;
            v40 = *((_QWORD *)a2 + 1);
            if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((_QWORD *)a2 + 2))
            {
              *((_BYTE *)a2 + 24) = 1;
              break;
            }
            *(v31 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v40);
            v28 = *((_QWORD *)a2 + 2);
            v27 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v27;
          }
          PB::Reader::recallMark();
        }
        else
        {
          v46 = (char *)*((_QWORD *)this + 2);
          v45 = *((_QWORD *)this + 3);
          if ((unint64_t)v46 >= v45)
          {
            v48 = (char *)*((_QWORD *)this + 1);
            v49 = (v46 - v48) >> 2;
            v50 = v49 + 1;
            if ((unint64_t)(v49 + 1) >> 62)
LABEL_98:
              sub_242729A44();
            v51 = v45 - (_QWORD)v48;
            if (v51 >> 1 > v50)
              v50 = v51 >> 1;
            if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
              v52 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v52 = v50;
            if (v52)
            {
              v52 = (unint64_t)sub_2429114B8(v52);
              v48 = (char *)*((_QWORD *)this + 1);
              v46 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v53 = 0;
            }
            v54 = (_DWORD *)(v52 + 4 * v49);
            *v54 = 0;
            v47 = v54 + 1;
            while (v46 != v48)
            {
              v55 = *((_DWORD *)v46 - 1);
              v46 -= 4;
              *--v54 = v55;
            }
            *((_QWORD *)this + 1) = v54;
            *((_QWORD *)this + 2) = v47;
            *((_QWORD *)this + 3) = v52 + 4 * v53;
            if (v48)
              operator delete(v48);
          }
          else
          {
            *(_DWORD *)v46 = 0;
            v47 = v46 + 4;
          }
          *((_QWORD *)this + 2) = v47;
          v56 = *((_QWORD *)a2 + 1);
          if (v56 <= 0xFFFFFFFFFFFFFFFBLL && v56 + 4 <= *((_QWORD *)a2 + 2))
          {
            *(v47 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v56);
            *((_QWORD *)a2 + 1) += 4;
          }
          else
          {
            *((_BYTE *)a2 + 24) = 1;
          }
        }
      }
      else if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 36) |= 1u;
        v19 = *((_QWORD *)a2 + 1);
        v20 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v20)
        {
          v41 = 0;
          v42 = 0;
          v24 = 0;
          if (v20 <= v19)
            v20 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v20 == v19)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_76;
            }
            v43 = v19 + 1;
            v44 = *(_BYTE *)(v21 + v19);
            *((_QWORD *)a2 + 1) = v43;
            v24 |= (unint64_t)(v44 & 0x7F) << v41;
            if ((v44 & 0x80) == 0)
              break;
            v41 += 7;
            v19 = v43;
            v14 = v42++ > 8;
            if (v14)
            {
LABEL_62:
              LODWORD(v24) = 0;
              goto LABEL_76;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v25 = v19 + 1;
            *((_QWORD *)a2 + 1) = v19 + 1;
            v26 = *(_BYTE *)(v21 + v19);
            v24 |= (unint64_t)(v26 & 0x7F) << v22;
            if ((v26 & 0x80) == 0)
              break;
            v22 += 7;
            v19 = v25;
            v14 = v23++ > 8;
            if (v14)
              goto LABEL_62;
          }
        }
LABEL_76:
        *((_DWORD *)this + 8) = v24;
      }
      else
      {
LABEL_30:
        if ((PB::Reader::skip(a2) & 1) == 0)
          return 0;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_30;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::Skeleton3DLiftedJoint::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;

  v3 = this;
  if ((*(_BYTE *)(this + 36) & 1) != 0)
    this = PB::Writer::writeVarInt(a2);
  v5 = *(float **)(v3 + 8);
  v4 = *(float **)(v3 + 16);
  while (v5 != v4)
  {
    v6 = *v5++;
    this = PB::Writer::write(a2, v6);
  }
  return this;
}

BOOL CMMsl::Skeleton3DLiftedJoint::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  float *v4;
  uint64_t v5;
  float v6;
  _BOOL8 result;
  BOOL v8;

  if ((*(_BYTE *)(a1 + 36) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 1) != 0)
  {
    return 0;
  }
  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v4 = *(float **)(a2 + 8);
  if (v2 - v3 != *(_QWORD *)(a2 + 16) - (_QWORD)v4)
    return 0;
  if (v3 == v2)
    return 1;
  v5 = v3 + 4;
  do
  {
    v6 = *v4++;
    result = *(float *)(v5 - 4) == v6;
    v8 = *(float *)(v5 - 4) != v6 || v5 == v2;
    v5 += 4;
  }
  while (!v8);
  return result;
}

uint64_t CMMsl::Skeleton3DLiftedJoint::hash_value(CMMsl::Skeleton3DLiftedJoint *this)
{
  uint64_t v1;

  if ((*((_BYTE *)this + 36) & 1) != 0)
    v1 = *((int *)this + 8);
  else
    v1 = 0;
  return PBHashBytes() ^ v1;
}

void CMMsl::Skeleton3DRetargeted::~Skeleton3DRetargeted(CMMsl::Skeleton3DRetargeted *this)
{
  void **v2;

  *(_QWORD *)this = &off_251360FF8;
  v2 = (void **)((char *)this + 16);
  sub_242910B70(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_251360FF8;
  v2 = (void **)((char *)this + 16);
  sub_242910B70(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_251360FF8;
  v2 = (void **)((char *)this + 16);
  sub_242910B70(&v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::Skeleton3DRetargeted *CMMsl::Skeleton3DRetargeted::Skeleton3DRetargeted(CMMsl::Skeleton3DRetargeted *this, const CMMsl::Skeleton3DRetargeted *a2)
{
  CMMsl::SkeletonJoint ***v4;
  const CMMsl::SkeletonJoint **v5;
  const CMMsl::SkeletonJoint **v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = &off_251360FF8;
  *((_QWORD *)this + 2) = 0;
  v4 = (CMMsl::SkeletonJoint ***)((char *)this + 16);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 12) = 0;
  v5 = (const CMMsl::SkeletonJoint **)*((_QWORD *)a2 + 2);
  v6 = (const CMMsl::SkeletonJoint **)*((_QWORD *)a2 + 3);
  while (v5 != v6)
    sub_2428D231C(v4, *v5++);
  v7 = *((_BYTE *)a2 + 48);
  if ((v7 & 2) != 0)
  {
    v8 = *((_QWORD *)a2 + 5);
    *((_BYTE *)this + 48) |= 2u;
    *((_QWORD *)this + 5) = v8;
    v7 = *((_BYTE *)a2 + 48);
  }
  if ((v7 & 1) != 0)
  {
    v9 = *((_QWORD *)a2 + 1);
    *((_BYTE *)this + 48) |= 1u;
    *((_QWORD *)this + 1) = v9;
  }
  return this;
}

uint64_t CMMsl::Skeleton3DRetargeted::operator=(uint64_t a1, const CMMsl::Skeleton3DRetargeted *a2)
{
  int v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (**v9)(CMMsl::Skeleton3DRetargeted *__hidden);
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void **v15;

  if ((const CMMsl::Skeleton3DRetargeted *)a1 != a2)
  {
    CMMsl::Skeleton3DRetargeted::Skeleton3DRetargeted((CMMsl::Skeleton3DRetargeted *)&v9, a2);
    v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v14;
    v14 = v3;
    v4 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v11;
    v11 = v4;
    v5 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v12;
    v12 = v5;
    v6 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v13;
    v13 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v10;
    v10 = v7;
    v9 = &off_251360FF8;
    v15 = (void **)&v11;
    sub_242910B70(&v15);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::Skeleton3DRetargeted *a2, CMMsl::Skeleton3DRetargeted *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  v6 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v6;
  v7 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v7;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

uint64_t CMMsl::Skeleton3DRetargeted::Skeleton3DRetargeted(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;

  *(_QWORD *)a1 = &off_251360FF8;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = (_OWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  sub_242910BEC((_QWORD *)(a1 + 16));
  *v4 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  return a1;
}

uint64_t CMMsl::Skeleton3DRetargeted::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (**v9)(CMMsl::Skeleton3DRetargeted *__hidden);
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void **v15;

  if (a1 != a2)
  {
    CMMsl::Skeleton3DRetargeted::Skeleton3DRetargeted((uint64_t)&v9, a2);
    v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v14;
    v14 = v3;
    v4 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v11;
    v11 = v4;
    v5 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v12;
    v12 = v5;
    v6 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v13;
    v13 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v10;
    v10 = v7;
    v9 = &off_251360FF8;
    v15 = (void **)&v11;
    sub_242910B70(&v15);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::Skeleton3DRetargeted::formatText(CMMsl::Skeleton3DRetargeted *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 48) & 1) != 0)
    PB::TextFormatter::format(a2, "globalMachtime", *((double *)this + 1));
  v5 = (uint64_t *)*((_QWORD *)this + 2);
  v6 = (uint64_t *)*((_QWORD *)this + 3);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "joint");
  }
  if ((*((_BYTE *)this + 48) & 2) != 0)
    PB::TextFormatter::format(a2, "localMachtime", *((double *)this + 5));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::Skeleton3DRetargeted::readFrom(CMMsl::Skeleton3DRetargeted *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (uint64_t **)((char *)this + 16);
    while (1)
    {
      v9 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v16 = 0;
        v17 = 0;
        v12 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v18 = v2 + 1;
          v19 = *(_BYTE *)(v9 + v2);
          *((_QWORD *)a2 + 1) = v18;
          v12 |= (unint64_t)(v19 & 0x7F) << v16;
          if ((v19 & 0x80) == 0)
            goto LABEL_22;
          v16 += 7;
          v2 = v18;
          v15 = v17++ > 8;
          if (v15)
            goto LABEL_20;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_20;
      }
LABEL_22:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v21 = v12 >> 3;
      if ((v12 >> 3) == 3)
        break;
      if ((_DWORD)v21 == 2)
      {
        *((_BYTE *)this + 48) |= 2u;
        v24 = *((_QWORD *)a2 + 1);
        if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v24);
LABEL_36:
        *((_QWORD *)a2 + 1) += 8;
        goto LABEL_37;
      }
      if ((_DWORD)v21 == 1)
      {
        sub_2428D2890(v8);
        v22 = *(_QWORD *)(*((_QWORD *)this + 3) - 8);
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v22 + 16))(v22, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_20:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
LABEL_37:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    *((_BYTE *)this + 48) |= 1u;
    v23 = *((_QWORD *)a2 + 1);
    if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((_QWORD *)a2 + 2))
    {
LABEL_34:
      *((_BYTE *)a2 + 24) = 1;
      goto LABEL_37;
    }
    *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v23);
    goto LABEL_36;
  }
  return v4 == 0;
}

uint64_t CMMsl::Skeleton3DRetargeted::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base **v4;
  const PB::Base **v5;
  const PB::Base *v6;
  char v7;

  v3 = this;
  v4 = *(const PB::Base ***)(this + 16);
  v5 = *(const PB::Base ***)(this + 24);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::writeSubmessage(a2, v6);
  }
  v7 = *(_BYTE *)(v3 + 48);
  if ((v7 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 40));
    v7 = *(_BYTE *)(v3 + 48);
  }
  if ((v7 & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 8));
  return this;
}

uint64_t CMMsl::Skeleton3DRetargeted::hash_value(CMMsl::Skeleton3DRetargeted *this)
{
  CMMsl::SkeletonJoint **v2;
  CMMsl::SkeletonJoint **v3;
  uint64_t v4;
  CMMsl::SkeletonJoint *v5;
  double v6;
  double v7;

  v2 = (CMMsl::SkeletonJoint **)*((_QWORD *)this + 2);
  v3 = (CMMsl::SkeletonJoint **)*((_QWORD *)this + 3);
  if (v2 == v3)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *v2++;
      v4 ^= CMMsl::SkeletonJoint::hash_value(v5);
    }
    while (v2 != v3);
  }
  if ((*((_BYTE *)this + 48) & 2) != 0)
  {
    v6 = *((double *)this + 5);
    if (v6 == 0.0)
      v6 = 0.0;
    if ((*((_BYTE *)this + 48) & 1) != 0)
      goto LABEL_8;
LABEL_14:
    v7 = 0.0;
    return *(_QWORD *)&v6 ^ v4 ^ *(_QWORD *)&v7;
  }
  v6 = 0.0;
  if ((*((_BYTE *)this + 48) & 1) == 0)
    goto LABEL_14;
LABEL_8:
  v7 = *((double *)this + 1);
  if (v7 == 0.0)
    v7 = 0.0;
  return *(_QWORD *)&v6 ^ v4 ^ *(_QWORD *)&v7;
}

double CMMsl::SkeletonJoint::SkeletonJoint(CMMsl::SkeletonJoint *this)
{
  double result;

  *(_QWORD *)this = &off_251361030;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_251361030;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = 0;
  return result;
}

void CMMsl::SkeletonJoint::~SkeletonJoint(CMMsl::SkeletonJoint *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_251361030;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::SkeletonJoint::~SkeletonJoint(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::SkeletonJoint *CMMsl::SkeletonJoint::SkeletonJoint(CMMsl::SkeletonJoint *this, const CMMsl::SkeletonJoint *a2)
{
  _QWORD *v4;
  int v5;

  *(_QWORD *)this = &off_251361030;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (_QWORD *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = 0;
  if ((*((_BYTE *)a2 + 60) & 1) != 0)
  {
    v5 = *((_DWORD *)a2 + 14);
    *((_BYTE *)this + 60) = 1;
    *((_DWORD *)this + 14) = v5;
  }
  if (this != a2)
  {
    sub_242911380(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
    sub_242911380((_QWORD *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
  }
  return this;
}

uint64_t CMMsl::SkeletonJoint::operator=(uint64_t a1, const CMMsl::SkeletonJoint *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  if ((const CMMsl::SkeletonJoint *)a1 != a2)
  {
    CMMsl::SkeletonJoint::SkeletonJoint((CMMsl::SkeletonJoint *)&v8, a2);
    v3 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v12;
    v12 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    v10 = v5;
    v6 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v11;
    v11 = v6;
    CMMsl::SkeletonJoint::~SkeletonJoint((CMMsl::SkeletonJoint *)&v8);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::SkeletonJoint *a2, CMMsl::SkeletonJoint *a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_DWORD *)(this + 60);
  *(_DWORD *)(this + 60) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v3;
  v4 = *(_DWORD *)(this + 56);
  *(_DWORD *)(this + 56) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  v5 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  v8 = *(_QWORD *)(this + 32);
  *(_QWORD *)(this + 32) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v8;
  v9 = *(_QWORD *)(this + 40);
  *(_QWORD *)(this + 40) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v9;
  v10 = *(_QWORD *)(this + 48);
  *(_QWORD *)(this + 48) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v10;
  return this;
}

uint64_t CMMsl::SkeletonJoint::SkeletonJoint(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = &off_251361030;
  v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  sub_242911330(v4, (__n128 *)(a2 + 32));
  return a1;
}

uint64_t CMMsl::SkeletonJoint::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  if (a1 != a2)
  {
    CMMsl::SkeletonJoint::SkeletonJoint((uint64_t)&v8, a2);
    v3 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v12;
    v12 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    v10 = v5;
    v6 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v11;
    v11 = v6;
    CMMsl::SkeletonJoint::~SkeletonJoint((CMMsl::SkeletonJoint *)&v8);
  }
  return a1;
}

uint64_t CMMsl::SkeletonJoint::formatText(CMMsl::SkeletonJoint *this, PB::TextFormatter *a2, const char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 60) & 1) != 0)
    PB::TextFormatter::format(a2, "joint");
  v5 = (float *)*((_QWORD *)this + 1);
  v6 = (float *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "position", v7);
  }
  v8 = (float *)*((_QWORD *)this + 4);
  v9 = (float *)*((_QWORD *)this + 5);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(a2, "quaternion", v10);
  }
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::SkeletonJoint::readFrom(CMMsl::SkeletonJoint *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int i;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  _DWORD *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  _DWORD *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  int v56;
  unint64_t v57;
  char v58;
  unsigned int v59;
  unint64_t v60;
  char v61;
  unint64_t v62;
  char *v63;
  _DWORD *v64;
  unint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  _DWORD *v79;
  int v80;
  _DWORD *v81;
  int v82;
  unint64_t v83;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  for (i = *((unsigned __int8 *)a2 + 24); v2 < v3 && i == 0; i = *((unsigned __int8 *)a2 + 24))
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_20;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
        if (v14)
          goto LABEL_31;
      }
      i = 1;
      *((_BYTE *)a2 + 24) = 1;
      return i == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_31;
    }
LABEL_20:
    v19 = v11 & 7;
    if (v19 == 4)
    {
      i = 0;
      return i == 0;
    }
    v20 = v11 >> 3;
    if ((v11 >> 3) == 3)
    {
      if (v19 != 2)
      {
        v63 = (char *)*((_QWORD *)this + 5);
        v62 = *((_QWORD *)this + 6);
        if ((unint64_t)v63 >= v62)
        {
          v67 = (char *)*((_QWORD *)this + 4);
          v68 = (v63 - v67) >> 2;
          v69 = v68 + 1;
          if ((unint64_t)(v68 + 1) >> 62)
            goto LABEL_140;
          v70 = v62 - (_QWORD)v67;
          if (v70 >> 1 > v69)
            v69 = v70 >> 1;
          if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFFCLL)
            v71 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v71 = v69;
          if (v71)
          {
            v71 = (unint64_t)sub_2429114B8(v71);
            v67 = (char *)*((_QWORD *)this + 4);
            v63 = (char *)*((_QWORD *)this + 5);
          }
          else
          {
            v72 = 0;
          }
          v79 = (_DWORD *)(v71 + 4 * v68);
          *v79 = 0;
          v64 = v79 + 1;
          while (v63 != v67)
          {
            v80 = *((_DWORD *)v63 - 1);
            v63 -= 4;
            *--v79 = v80;
          }
          *((_QWORD *)this + 4) = v79;
          *((_QWORD *)this + 5) = v64;
          *((_QWORD *)this + 6) = v71 + 4 * v72;
          if (v67)
            operator delete(v67);
        }
        else
        {
          *(_DWORD *)v63 = 0;
          v64 = v63 + 4;
        }
        *((_QWORD *)this + 5) = v64;
LABEL_132:
        v83 = *((_QWORD *)a2 + 1);
        if (v83 <= 0xFFFFFFFFFFFFFFFBLL && v83 + 4 <= *((_QWORD *)a2 + 2))
        {
          *(v64 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v83);
          *((_QWORD *)a2 + 1) += 4;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
        goto LABEL_32;
      }
      if ((PB::Reader::placeMark() & 1) != 0)
        return 0;
      v30 = *((_QWORD *)a2 + 1);
      v31 = *((_QWORD *)a2 + 2);
      while (v30 < v31 && !*((_BYTE *)a2 + 24))
      {
        v33 = (char *)*((_QWORD *)this + 5);
        v32 = *((_QWORD *)this + 6);
        if ((unint64_t)v33 >= v32)
        {
          v35 = (char *)*((_QWORD *)this + 4);
          v36 = (v33 - v35) >> 2;
          v37 = v36 + 1;
          if ((unint64_t)(v36 + 1) >> 62)
            goto LABEL_140;
          v38 = v32 - (_QWORD)v35;
          if (v38 >> 1 > v37)
            v37 = v38 >> 1;
          if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
            v39 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v39 = v37;
          if (v39)
          {
            v39 = (unint64_t)sub_2429114B8(v39);
            v35 = (char *)*((_QWORD *)this + 4);
            v33 = (char *)*((_QWORD *)this + 5);
          }
          else
          {
            v40 = 0;
          }
          v41 = (_DWORD *)(v39 + 4 * v36);
          *v41 = 0;
          v34 = v41 + 1;
          while (v33 != v35)
          {
            v42 = *((_DWORD *)v33 - 1);
            v33 -= 4;
            *--v41 = v42;
          }
          *((_QWORD *)this + 4) = v41;
          *((_QWORD *)this + 5) = v34;
          *((_QWORD *)this + 6) = v39 + 4 * v40;
          if (v35)
            operator delete(v35);
        }
        else
        {
          *(_DWORD *)v33 = 0;
          v34 = v33 + 4;
        }
        *((_QWORD *)this + 5) = v34;
        v43 = *((_QWORD *)a2 + 1);
        if (v43 > 0xFFFFFFFFFFFFFFFBLL || v43 + 4 > *((_QWORD *)a2 + 2))
        {
LABEL_96:
          *((_BYTE *)a2 + 24) = 1;
          break;
        }
        *(v34 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v43);
        v31 = *((_QWORD *)a2 + 2);
        v30 = *((_QWORD *)a2 + 1) + 4;
        *((_QWORD *)a2 + 1) = v30;
      }
    }
    else
    {
      if ((_DWORD)v20 != 2)
      {
        if ((_DWORD)v20 == 1)
        {
          *((_BYTE *)this + 60) |= 1u;
          v21 = *((_QWORD *)a2 + 1);
          v22 = *((_QWORD *)a2 + 2);
          v23 = *(_QWORD *)a2;
          if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v22)
          {
            v58 = 0;
            v59 = 0;
            v26 = 0;
            if (v22 <= v21)
              v22 = *((_QWORD *)a2 + 1);
            while (1)
            {
              if (v22 == v21)
              {
                LODWORD(v26) = 0;
                *((_BYTE *)a2 + 24) = 1;
                goto LABEL_117;
              }
              v60 = v21 + 1;
              v61 = *(_BYTE *)(v23 + v21);
              *((_QWORD *)a2 + 1) = v60;
              v26 |= (unint64_t)(v61 & 0x7F) << v58;
              if ((v61 & 0x80) == 0)
                break;
              v58 += 7;
              v21 = v60;
              v14 = v59++ > 8;
              if (v14)
              {
LABEL_91:
                LODWORD(v26) = 0;
                goto LABEL_117;
              }
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v26) = 0;
          }
          else
          {
            v24 = 0;
            v25 = 0;
            v26 = 0;
            while (1)
            {
              v27 = v21 + 1;
              *((_QWORD *)a2 + 1) = v21 + 1;
              v28 = *(_BYTE *)(v23 + v21);
              v26 |= (unint64_t)(v28 & 0x7F) << v24;
              if ((v28 & 0x80) == 0)
                break;
              v24 += 7;
              v21 = v27;
              v14 = v25++ > 8;
              if (v14)
                goto LABEL_91;
            }
          }
LABEL_117:
          *((_DWORD *)this + 14) = v26;
        }
        else
        {
LABEL_31:
          if ((PB::Reader::skip(a2) & 1) == 0)
            return 0;
        }
        goto LABEL_32;
      }
      if (v19 != 2)
      {
        v66 = (char *)*((_QWORD *)this + 2);
        v65 = *((_QWORD *)this + 3);
        if ((unint64_t)v66 >= v65)
        {
          v73 = (char *)*((_QWORD *)this + 1);
          v74 = (v66 - v73) >> 2;
          v75 = v74 + 1;
          if ((unint64_t)(v74 + 1) >> 62)
LABEL_140:
            sub_242729A44();
          v76 = v65 - (_QWORD)v73;
          if (v76 >> 1 > v75)
            v75 = v76 >> 1;
          if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFFCLL)
            v77 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v77 = v75;
          if (v77)
          {
            v77 = (unint64_t)sub_2429114B8(v77);
            v73 = (char *)*((_QWORD *)this + 1);
            v66 = (char *)*((_QWORD *)this + 2);
          }
          else
          {
            v78 = 0;
          }
          v81 = (_DWORD *)(v77 + 4 * v74);
          *v81 = 0;
          v64 = v81 + 1;
          while (v66 != v73)
          {
            v82 = *((_DWORD *)v66 - 1);
            v66 -= 4;
            *--v81 = v82;
          }
          *((_QWORD *)this + 1) = v81;
          *((_QWORD *)this + 2) = v64;
          *((_QWORD *)this + 3) = v77 + 4 * v78;
          if (v73)
            operator delete(v73);
        }
        else
        {
          *(_DWORD *)v66 = 0;
          v64 = v66 + 4;
        }
        *((_QWORD *)this + 2) = v64;
        goto LABEL_132;
      }
      if ((PB::Reader::placeMark() & 1) != 0)
        return 0;
      v44 = *((_QWORD *)a2 + 1);
      v45 = *((_QWORD *)a2 + 2);
      while (v44 < v45 && !*((_BYTE *)a2 + 24))
      {
        v47 = (char *)*((_QWORD *)this + 2);
        v46 = *((_QWORD *)this + 3);
        if ((unint64_t)v47 >= v46)
        {
          v49 = (char *)*((_QWORD *)this + 1);
          v50 = (v47 - v49) >> 2;
          v51 = v50 + 1;
          if ((unint64_t)(v50 + 1) >> 62)
            goto LABEL_140;
          v52 = v46 - (_QWORD)v49;
          if (v52 >> 1 > v51)
            v51 = v52 >> 1;
          if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL)
            v53 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v53 = v51;
          if (v53)
          {
            v53 = (unint64_t)sub_2429114B8(v53);
            v49 = (char *)*((_QWORD *)this + 1);
            v47 = (char *)*((_QWORD *)this + 2);
          }
          else
          {
            v54 = 0;
          }
          v55 = (_DWORD *)(v53 + 4 * v50);
          *v55 = 0;
          v48 = v55 + 1;
          while (v47 != v49)
          {
            v56 = *((_DWORD *)v47 - 1);
            v47 -= 4;
            *--v55 = v56;
          }
          *((_QWORD *)this + 1) = v55;
          *((_QWORD *)this + 2) = v48;
          *((_QWORD *)this + 3) = v53 + 4 * v54;
          if (v49)
            operator delete(v49);
        }
        else
        {
          *(_DWORD *)v47 = 0;
          v48 = v47 + 4;
        }
        *((_QWORD *)this + 2) = v48;
        v57 = *((_QWORD *)a2 + 1);
        if (v57 > 0xFFFFFFFFFFFFFFFBLL || v57 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_96;
        *(v48 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v57);
        v45 = *((_QWORD *)a2 + 2);
        v44 = *((_QWORD *)a2 + 1) + 4;
        *((_QWORD *)a2 + 1) = v44;
      }
    }
    PB::Reader::recallMark();
LABEL_32:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
  }
  return i == 0;
}

uint64_t CMMsl::SkeletonJoint::writeTo(uint64_t this, PB::Writer *a2)
{
  _QWORD *v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;

  v3 = (_QWORD *)this;
  if ((*(_BYTE *)(this + 60) & 1) != 0)
    this = PB::Writer::writeVarInt(a2);
  v4 = (float *)v3[1];
  v5 = (float *)v3[2];
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6);
  }
  v8 = (float *)v3[4];
  v7 = (float *)v3[5];
  while (v8 != v7)
  {
    v9 = *v8++;
    this = PB::Writer::write(a2, v9);
  }
  return this;
}

BOOL CMMsl::SkeletonJoint::operator==(uint64_t a1, uint64_t a2)
{
  float *v2;
  float *v3;
  float *v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  float v9;
  _BOOL8 result;
  BOOL v11;

  if ((*(_BYTE *)(a1 + 60) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 60) & 1) == 0 || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 60) & 1) != 0)
  {
    return 0;
  }
  v3 = *(float **)(a1 + 8);
  v2 = *(float **)(a1 + 16);
  v4 = *(float **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 16) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v6 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v7 = *(float **)(a2 + 32);
  if (v5 - v6 != *(_QWORD *)(a2 + 40) - (_QWORD)v7)
    return 0;
  if (v6 == v5)
    return 1;
  v8 = v6 + 4;
  do
  {
    v9 = *v7++;
    result = *(float *)(v8 - 4) == v9;
    v11 = *(float *)(v8 - 4) != v9 || v8 == v5;
    v8 += 4;
  }
  while (!v11);
  return result;
}

uint64_t CMMsl::SkeletonJoint::hash_value(CMMsl::SkeletonJoint *this)
{
  uint64_t v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 60) & 1) != 0)
    v1 = *((int *)this + 14);
  else
    v1 = 0;
  v2 = PBHashBytes() ^ v1;
  return v2 ^ PBHashBytes();
}

void CMMsl::SoundPressureLevel::~SoundPressureLevel(CMMsl::SoundPressureLevel *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::SoundPressureLevel::SoundPressureLevel(uint64_t this, const CMMsl::SoundPressureLevel *a2)
{
  char v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)this = &off_251361068;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
    v3 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 20) = 2;
    *(_DWORD *)(this + 16) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 1) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
LABEL_5:
    v4 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = v2;
    *(_QWORD *)(this + 8) = v4;
  }
  return this;
}

uint64_t CMMsl::SoundPressureLevel::operator=(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v3;
  char v5;
  char v6;
  int v7;
  int v8;
  uint64_t v9;
  _QWORD v11[2];
  int v12;
  int v13;

  if (a1 != a2)
  {
    v11[0] = &off_251361068;
    v13 = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 2) != 0)
    {
      a3 = *(float *)(a2 + 16);
      LOBYTE(v13) = 2;
      v6 = 3;
      if ((v5 & 1) != 0)
      {
LABEL_6:
        v3 = *(_QWORD *)(a2 + 8);
        LOBYTE(v13) = v6;
      }
    }
    else
    {
      v6 = 1;
      if ((*(_BYTE *)(a2 + 20) & 1) != 0)
        goto LABEL_6;
    }
    v7 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v13;
    v13 = v7;
    v8 = *(_DWORD *)(a1 + 16);
    *(float *)(a1 + 16) = a3;
    v12 = v8;
    v9 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v11[1] = v9;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::SoundPressureLevel *a2, CMMsl::SoundPressureLevel *a3)
{
  int v3;
  float result;
  uint64_t v5;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  return result;
}

float CMMsl::SoundPressureLevel::SoundPressureLevel(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_251361068;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_251361068;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t CMMsl::SoundPressureLevel::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  _QWORD v10[2];
  int v11;
  int v12;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    v4 = *(_DWORD *)(a2 + 16);
    v5 = *(_QWORD *)(a2 + 8);
    v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    v12 = v6;
    v7 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v4;
    v11 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v5;
    v10[0] = &off_251361068;
    v10[1] = v8;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::SoundPressureLevel::formatText(CMMsl::SoundPressureLevel *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "rms", *((float *)this + 4));
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SoundPressureLevel::readFrom(CMMsl::SoundPressureLevel *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_26;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 1u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v26 = 0;
          v27 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              v24 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_47;
            }
            v28 = v20++;
            v29 = *(_BYTE *)(v21 + v28);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0)
              break;
            v26 += 7;
            v14 = v27++ > 8;
            if (v14)
            {
              v24 = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v24 = 0;
LABEL_46:
          v2 = v28 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)a2 + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              v24 = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_QWORD *)this + 1) = v24;
      }
      else if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 20) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_26:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_26;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SoundPressureLevel::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 16));
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 1) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::SoundPressureLevel::hash_value(CMMsl::SoundPressureLevel *this)
{
  uint64_t v1;
  uint64_t v2;
  float v3;

  if ((*((_BYTE *)this + 20) & 2) != 0)
  {
    v3 = *((float *)this + 4);
    v1 = LODWORD(v3);
    if (v3 == 0.0)
      v1 = 0;
    if ((*((_BYTE *)this + 20) & 1) != 0)
      goto LABEL_3;
LABEL_7:
    v2 = 0;
    return v2 ^ v1;
  }
  v1 = 0;
  if ((*((_BYTE *)this + 20) & 1) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((_QWORD *)this + 1);
  return v2 ^ v1;
}

void CMMsl::SpatialEvent::~SpatialEvent(CMMsl::SpatialEvent *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::SpatialEvent::SpatialEvent(CMMsl::SpatialEvent *this, const CMMsl::SpatialEvent *a2)
{
  char v2;
  int v3;
  double result;

  *(_QWORD *)this = &off_2513610A0;
  *((_QWORD *)this + 2) = 0;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
    v3 = *((_DWORD *)a2 + 4);
    *((_BYTE *)this + 20) = 2;
    *((_DWORD *)this + 4) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 1) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 1);
    *((_BYTE *)this + 20) = v2;
    *((double *)this + 1) = result;
  }
  return result;
}

uint64_t CMMsl::SpatialEvent::operator=(uint64_t a1, uint64_t a2, double a3)
{
  char v4;
  int v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  uint64_t v12;

  if (a1 != a2)
  {
    v11[0] = &off_2513610A0;
    HIDWORD(v12) = 0;
    v4 = *(_BYTE *)(a2 + 20);
    if ((v4 & 2) != 0)
    {
      v5 = *(_DWORD *)(a2 + 16);
      BYTE4(v12) = 2;
      v6 = 3;
      if ((v4 & 1) != 0)
      {
LABEL_6:
        a3 = *(double *)(a2 + 8);
        BYTE4(v12) = v6;
      }
    }
    else
    {
      v5 = 0;
      v6 = 1;
      if ((*(_BYTE *)(a2 + 20) & 1) != 0)
        goto LABEL_6;
    }
    v7 = HIDWORD(v12);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v5;
    *(_DWORD *)(a1 + 20) = v7;
    *(double *)(a1 + 8) = a3;
    v11[1] = v9;
    v12 = v8;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SpatialEvent *a2, CMMsl::SpatialEvent *a3)
{
  int v3;
  int v4;
  double result;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  v4 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

uint64_t CMMsl::SpatialEvent::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  if (a1 != a2)
  {
    v8[0] = &off_2513610A0;
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    v6 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    v8[1] = v6;
    v8[2] = v5;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::SpatialEvent::formatText(CMMsl::SpatialEvent *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "event");
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SpatialEvent::readFrom(CMMsl::SpatialEvent *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  char v24;
  uint64_t result;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_30;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 20) |= 2u;
        v19 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v20 = *(_QWORD *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v2)
        {
          v26 = 0;
          v27 = 0;
          v23 = 0;
          if (v2 <= v19)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v19)
            {
              LODWORD(v23) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_47;
            }
            v28 = v19++;
            v29 = *(_BYTE *)(v20 + v28);
            *((_QWORD *)a2 + 1) = v19;
            v23 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0)
              break;
            v26 += 7;
            v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v23) = 0;
LABEL_46:
          v2 = v28 + 1;
        }
        else
        {
          v21 = 0;
          v22 = 0;
          v23 = 0;
          while (1)
          {
            v2 = v19 + 1;
            *((_QWORD *)a2 + 1) = v19 + 1;
            v24 = *(_BYTE *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0)
              break;
            v21 += 7;
            v19 = v2;
            v14 = v22++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 4) = v23;
      }
      else
      {
LABEL_30:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_30;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SpatialEvent::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 8));
  return this;
}

uint64_t CMMsl::SpatialEvent::hash_value(CMMsl::SpatialEvent *this)
{
  uint64_t v1;
  double v2;

  if ((*((_BYTE *)this + 20) & 2) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 20) & 1) != 0)
      goto LABEL_3;
LABEL_7:
    v2 = 0.0;
    return *(_QWORD *)&v2 ^ v1;
  }
  v1 = *((int *)this + 4);
  if ((*((_BYTE *)this + 20) & 1) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  return *(_QWORD *)&v2 ^ v1;
}

void CMMsl::SteadinessEvent::~SteadinessEvent(CMMsl::SteadinessEvent *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::SteadinessEvent::SteadinessEvent(CMMsl::SteadinessEvent *this, const CMMsl::SteadinessEvent *a2)
{
  __int16 v2;
  __int16 v3;
  double result;
  int v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;

  *(_QWORD *)this = &off_2513610D8;
  *((_DWORD *)this + 15) = 0;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 8) != 0)
  {
    result = *((double *)a2 + 4);
    v3 = 8;
    *((_WORD *)this + 30) = 8;
    *((double *)this + 4) = result;
    v2 = *((_WORD *)a2 + 30);
    if ((v2 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 12);
    v3 |= 0x20u;
    *((_WORD *)this + 30) = v3;
    *((_DWORD *)this + 12) = v5;
    v2 = *((_WORD *)a2 + 30);
  }
LABEL_6:
  if ((v2 & 0x200) != 0)
  {
    v6 = *((_BYTE *)a2 + 55);
    v3 |= 0x200u;
    *((_WORD *)this + 30) = v3;
    *((_BYTE *)this + 55) = v6;
    v2 = *((_WORD *)a2 + 30);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_18;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_BYTE *)a2 + 56);
  v3 |= 0x400u;
  *((_WORD *)this + 30) = v3;
  *((_BYTE *)this + 56) = v7;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  v8 = *((_BYTE *)a2 + 52);
  v3 |= 0x40u;
  *((_WORD *)this + 30) = v3;
  *((_BYTE *)this + 52) = v8;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x80) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  v9 = *((_BYTE *)a2 + 53);
  v3 |= 0x80u;
  *((_WORD *)this + 30) = v3;
  *((_BYTE *)this + 53) = v9;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 2) == 0)
      goto LABEL_12;
    goto LABEL_21;
  }
LABEL_20:
  v10 = *((_BYTE *)a2 + 54);
  v3 |= 0x100u;
  *((_WORD *)this + 30) = v3;
  *((_BYTE *)this + 54) = v10;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 2) == 0)
  {
LABEL_12:
    if ((v2 & 1) == 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  result = *((double *)a2 + 2);
  v3 |= 2u;
  *((_WORD *)this + 30) = v3;
  *((double *)this + 2) = result;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 1) == 0)
  {
LABEL_13:
    if ((v2 & 4) == 0)
      goto LABEL_14;
    goto LABEL_23;
  }
LABEL_22:
  result = *((double *)a2 + 1);
  v3 |= 1u;
  *((_WORD *)this + 30) = v3;
  *((double *)this + 1) = result;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 4) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0)
      return result;
LABEL_24:
    result = *((double *)a2 + 5);
    *((_WORD *)this + 30) = v3 | 0x10;
    *((double *)this + 5) = result;
    return result;
  }
LABEL_23:
  result = *((double *)a2 + 3);
  v3 |= 4u;
  *((_WORD *)this + 30) = v3;
  *((double *)this + 3) = result;
  if ((*((_WORD *)a2 + 30) & 0x10) != 0)
    goto LABEL_24;
  return result;
}

CMMsl *CMMsl::SteadinessEvent::operator=(CMMsl *a1, const CMMsl::SteadinessEvent *a2)
{
  CMMsl::SteadinessEvent *v3;
  _BYTE v5[64];

  if (a1 != a2)
  {
    CMMsl::SteadinessEvent::SteadinessEvent((CMMsl::SteadinessEvent *)v5, a2);
    CMMsl::swap(a1, (CMMsl::SteadinessEvent *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SteadinessEvent *a2, CMMsl::SteadinessEvent *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;

  v3 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v3;
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  v5 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v5;
  LOBYTE(v5) = *((_BYTE *)this + 55);
  *((_BYTE *)this + 55) = *((_BYTE *)a2 + 55);
  *((_BYTE *)a2 + 55) = v5;
  LOBYTE(v5) = *((_BYTE *)this + 56);
  *((_BYTE *)this + 56) = *((_BYTE *)a2 + 56);
  *((_BYTE *)a2 + 56) = v5;
  LOBYTE(v5) = *((_BYTE *)this + 52);
  *((_BYTE *)this + 52) = *((_BYTE *)a2 + 52);
  *((_BYTE *)a2 + 52) = v5;
  LOBYTE(v5) = *((_BYTE *)this + 53);
  *((_BYTE *)this + 53) = *((_BYTE *)a2 + 53);
  *((_BYTE *)a2 + 53) = v5;
  LOBYTE(v5) = *((_BYTE *)this + 54);
  *((_BYTE *)this + 54) = *((_BYTE *)a2 + 54);
  *((_BYTE *)a2 + 54) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v7;
  v8 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v8;
  result = *((double *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((double *)a2 + 5) = result;
  return result;
}

double CMMsl::SteadinessEvent::SteadinessEvent(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_2513610D8;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 55) = *(_BYTE *)(a2 + 55);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_BYTE *)(a1 + 53) = *(_BYTE *)(a2 + 53);
  *(_BYTE *)(a1 + 54) = *(_BYTE *)(a2 + 54);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  result = *(double *)(a2 + 40);
  *(double *)(a1 + 40) = result;
  return result;
}

CMMsl *CMMsl::SteadinessEvent::operator=(CMMsl *this, uint64_t a2, CMMsl::SteadinessEvent *a3)
{
  void (**v5)(CMMsl::SteadinessEvent *__hidden);
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  int v9;
  int v10;
  char v11;
  int v12;

  if (this != (CMMsl *)a2)
  {
    v5 = &off_2513610D8;
    v12 = *(_DWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 60) = 0;
    v9 = *(_DWORD *)(a2 + 48);
    v11 = *(_BYTE *)(a2 + 56);
    v10 = *(_DWORD *)(a2 + 52);
    v6 = *(_OWORD *)(a2 + 8);
    v7 = *(_OWORD *)(a2 + 24);
    v8 = *(_QWORD *)(a2 + 40);
    CMMsl::swap(this, (CMMsl::SteadinessEvent *)&v5, a3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return this;
}

uint64_t CMMsl::SteadinessEvent::formatText(CMMsl::SteadinessEvent *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x40) != 0)
  {
    PB::TextFormatter::format(a2, "isBlockoutPeriodLow");
    v5 = *((_WORD *)this + 30);
    if ((v5 & 0x80) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "isBlockoutPeriodVeryLow");
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "isSampleRecent");
  v5 = *((_WORD *)this + 30);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 2) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "percentLow", *((double *)this + 1));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 2) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "percentOK", *((double *)this + 2));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "percentVeryLow", *((double *)this + 3));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 4));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "totalValidDuration", *((double *)this + 5));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x20) == 0)
      goto LABEL_11;
LABEL_23:
    PB::TextFormatter::format(a2, "value");
    if ((*((_WORD *)this + 30) & 0x400) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "userHasOnboarded");
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x20) != 0)
    goto LABEL_23;
LABEL_11:
  if ((v5 & 0x400) != 0)
LABEL_12:
    PB::TextFormatter::format(a2, "writtenToHealthKit");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SteadinessEvent::readFrom(CMMsl::SteadinessEvent *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  int v26;
  BOOL v27;
  int v28;
  BOOL v29;
  int v30;
  BOOL v31;
  int v32;
  BOOL v33;
  int v34;
  BOOL v35;
  char v36;
  unsigned int v37;
  unint64_t v38;
  char v39;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_79;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 30) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_54;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_73;
      case 2u:
        *((_WORD *)this + 30) |= 0x20u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v36 = 0;
          v37 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_78;
            }
            v38 = v20++;
            v39 = *(_BYTE *)(v21 + v38);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v39 & 0x7F) << v36;
            if ((v39 & 0x80) == 0)
              break;
            v36 += 7;
            v14 = v37++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_77:
              v2 = v38 + 1;
              goto LABEL_78;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
          goto LABEL_77;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_78;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_78:
        *((_DWORD *)this + 12) = v24;
        break;
      case 3u:
        *((_WORD *)this + 30) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v27 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v26 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v27 = v26 != 0;
        }
        *((_BYTE *)this + 55) = v27;
        break;
      case 4u:
        *((_WORD *)this + 30) |= 0x400u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v29 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v28 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v29 = v28 != 0;
        }
        *((_BYTE *)this + 56) = v29;
        break;
      case 5u:
        *((_WORD *)this + 30) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v31 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v30 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v31 = v30 != 0;
        }
        *((_BYTE *)this + 52) = v31;
        break;
      case 6u:
        *((_WORD *)this + 30) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v33 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v32 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v33 = v32 != 0;
        }
        *((_BYTE *)this + 53) = v33;
        break;
      case 7u:
        *((_WORD *)this + 30) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v35 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v34 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v35 = v34 != 0;
        }
        *((_BYTE *)this + 54) = v35;
        break;
      case 8u:
        *((_WORD *)this + 30) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_54;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_73;
      case 9u:
        *((_WORD *)this + 30) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_54;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_73;
      case 0xAu:
        *((_WORD *)this + 30) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_54;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_73;
      case 0xBu:
        *((_WORD *)this + 30) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_73:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_54:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_79:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::SteadinessEvent::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 60);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32));
    v4 = *(_WORD *)(v3 + 60);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x200) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x200) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 2) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 2) == 0)
  {
LABEL_9:
    if ((v4 & 1) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 1) == 0)
  {
LABEL_10:
    if ((v4 & 4) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 4) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 40));
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  if ((*(_WORD *)(v3 + 60) & 0x10) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 40));
  return this;
}

uint64_t CMMsl::SteadinessEvent::hash_value(CMMsl::SteadinessEvent *this)
{
  __int16 v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;

  v1 = *((_WORD *)this + 30);
  if ((v1 & 8) != 0)
  {
    v2 = *((double *)this + 4);
    if (v2 == 0.0)
      v2 = 0.0;
    if ((v1 & 0x20) != 0)
    {
LABEL_3:
      v3 = *((int *)this + 12);
      if ((*((_WORD *)this + 30) & 0x200) != 0)
        goto LABEL_4;
      goto LABEL_25;
    }
  }
  else
  {
    v2 = 0.0;
    if ((v1 & 0x20) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((*((_WORD *)this + 30) & 0x200) != 0)
  {
LABEL_4:
    v4 = *((unsigned __int8 *)this + 55);
    if ((*((_WORD *)this + 30) & 0x400) != 0)
      goto LABEL_5;
    goto LABEL_26;
  }
LABEL_25:
  v4 = 0;
  if ((*((_WORD *)this + 30) & 0x400) != 0)
  {
LABEL_5:
    v5 = *((unsigned __int8 *)this + 56);
    if ((v1 & 0x40) != 0)
      goto LABEL_6;
    goto LABEL_27;
  }
LABEL_26:
  v5 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_6:
    v6 = *((unsigned __int8 *)this + 52);
    if ((v1 & 0x80) != 0)
      goto LABEL_7;
    goto LABEL_28;
  }
LABEL_27:
  v6 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_7:
    v7 = *((unsigned __int8 *)this + 53);
    if ((*((_WORD *)this + 30) & 0x100) != 0)
      goto LABEL_8;
    goto LABEL_29;
  }
LABEL_28:
  v7 = 0;
  if ((*((_WORD *)this + 30) & 0x100) != 0)
  {
LABEL_8:
    v8 = *((unsigned __int8 *)this + 54);
    if ((v1 & 2) != 0)
      goto LABEL_9;
LABEL_30:
    v9 = 0.0;
    if ((v1 & 1) != 0)
      goto LABEL_12;
LABEL_31:
    v10 = 0.0;
    if ((v1 & 4) != 0)
      goto LABEL_15;
    goto LABEL_32;
  }
LABEL_29:
  v8 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_30;
LABEL_9:
  v9 = *((double *)this + 2);
  if (v9 == 0.0)
    v9 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_31;
LABEL_12:
  v10 = *((double *)this + 1);
  if (v10 == 0.0)
    v10 = 0.0;
  if ((v1 & 4) != 0)
  {
LABEL_15:
    v11 = *((double *)this + 3);
    if (v11 == 0.0)
      v11 = 0.0;
    if ((v1 & 0x10) != 0)
      goto LABEL_18;
LABEL_33:
    v12 = 0.0;
    return v3 ^ *(_QWORD *)&v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12;
  }
LABEL_32:
  v11 = 0.0;
  if ((v1 & 0x10) == 0)
    goto LABEL_33;
LABEL_18:
  v12 = *((double *)this + 5);
  if (v12 == 0.0)
    v12 = 0.0;
  return v3 ^ *(_QWORD *)&v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12;
}

void CMMsl::SteadinessModelBalanceFeatures::~SteadinessModelBalanceFeatures(CMMsl::SteadinessModelBalanceFeatures *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::SteadinessModelBalanceFeatures::SteadinessModelBalanceFeatures(CMMsl::SteadinessModelBalanceFeatures *this, const CMMsl::SteadinessModelBalanceFeatures *a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)this = &off_251361110;
  *((_DWORD *)this + 10) = 0;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 2) != 0)
  {
    result = *((double *)a2 + 2);
    v3 = 2;
    *((_BYTE *)this + 40) = 2;
    *((double *)this + 2) = result;
    v2 = *((_BYTE *)a2 + 40);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 40) & 1) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 1);
    v3 |= 1u;
    *((_BYTE *)this + 40) = v3;
    *((double *)this + 1) = result;
    v2 = *((_BYTE *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0)
      return result;
LABEL_10:
    result = *((double *)a2 + 4);
    *((_BYTE *)this + 40) = v3 | 8;
    *((double *)this + 4) = result;
    return result;
  }
  result = *((double *)a2 + 3);
  v3 |= 4u;
  *((_BYTE *)this + 40) = v3;
  *((double *)this + 3) = result;
  if ((*((_BYTE *)a2 + 40) & 8) != 0)
    goto LABEL_10;
  return result;
}

uint64_t CMMsl::SteadinessModelBalanceFeatures::operator=(uint64_t a1, const CMMsl::SteadinessModelBalanceFeatures *a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  int v10;

  if ((const CMMsl::SteadinessModelBalanceFeatures *)a1 != a2)
  {
    CMMsl::SteadinessModelBalanceFeatures::SteadinessModelBalanceFeatures((CMMsl::SteadinessModelBalanceFeatures *)&v7, a2);
    v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v10;
    v10 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v4;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v9 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SteadinessModelBalanceFeatures *a2, CMMsl::SteadinessModelBalanceFeatures *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  result = *((double *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((double *)a2 + 4) = result;
  return result;
}

double CMMsl::SteadinessModelBalanceFeatures::SteadinessModelBalanceFeatures(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_251361110;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_251361110;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  return result;
}

uint64_t CMMsl::SteadinessModelBalanceFeatures::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  void (**v8)(CMMsl::SteadinessModelBalanceFeatures *__hidden);
  __int128 v9;
  __int128 v10;
  int v11;

  if (a1 != a2)
  {
    v8 = &off_251361110;
    v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    v11 = *(_DWORD *)(a1 + 40);
    v4 = *(_OWORD *)(a2 + 8);
    v9 = *(_OWORD *)(a1 + 8);
    v5 = *(_OWORD *)(a1 + 24);
    v6 = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 40) = v3;
    *(_OWORD *)(a1 + 8) = v4;
    *(_OWORD *)(a1 + 24) = v6;
    v10 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::SteadinessModelBalanceFeatures::formatText(CMMsl::SteadinessModelBalanceFeatures *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "intermediateBoutsAsymmetryPercentageCv", *((double *)this + 1));
    v5 = *((_BYTE *)this + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "intermediateBoutsDoubleSupportPercentageMedian", *((double *)this + 3));
      if ((*((_BYTE *)this + 40) & 8) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "intermediateBoutsAsymmetryPercentageMedian", *((double *)this + 2));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "intermediateBoutsDoubleSupportPercentageStd", *((double *)this + 4));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SteadinessModelBalanceFeatures::readFrom(CMMsl::SteadinessModelBalanceFeatures *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_37;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 40) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 2u:
        *((_BYTE *)this + 40) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 3u:
        *((_BYTE *)this + 40) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 4u:
        *((_BYTE *)this + 40) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_36:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_34:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_37:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::SteadinessModelBalanceFeatures::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 40);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16));
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 40) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 32));
  }
LABEL_8:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  if ((*(_BYTE *)(v3 + 40) & 8) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 32));
  return this;
}

uint64_t CMMsl::SteadinessModelBalanceFeatures::hash_value(CMMsl::SteadinessModelBalanceFeatures *this)
{
  double v1;
  double v2;
  double v3;
  double v4;

  if ((*((_BYTE *)this + 40) & 2) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 40) & 1) != 0)
      goto LABEL_3;
LABEL_15:
    v2 = 0.0;
    if ((*((_BYTE *)this + 40) & 4) != 0)
      goto LABEL_6;
    goto LABEL_16;
  }
  v1 = *((double *)this + 2);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 40) & 1) == 0)
    goto LABEL_15;
LABEL_3:
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 40) & 4) != 0)
  {
LABEL_6:
    v3 = *((double *)this + 3);
    if (v3 == 0.0)
      v3 = 0.0;
    if ((*((_BYTE *)this + 40) & 8) != 0)
      goto LABEL_9;
LABEL_17:
    v4 = 0.0;
    return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4;
  }
LABEL_16:
  v3 = 0.0;
  if ((*((_BYTE *)this + 40) & 8) == 0)
    goto LABEL_17;
LABEL_9:
  v4 = *((double *)this + 4);
  if (v4 == 0.0)
    v4 = 0.0;
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4;
}

void CMMsl::SteadinessModelContinuousWalkingFeatures::~SteadinessModelContinuousWalkingFeatures(CMMsl::SteadinessModelContinuousWalkingFeatures *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::SteadinessModelContinuousWalkingFeatures::SteadinessModelContinuousWalkingFeatures(CMMsl::SteadinessModelContinuousWalkingFeatures *this, const CMMsl::SteadinessModelContinuousWalkingFeatures *a2)
{
  int v2;
  int v3;
  double result;

  *(_QWORD *)this = &off_251361148;
  *((_DWORD *)this + 44) = 0;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 1) != 0)
  {
    result = *((double *)a2 + 1);
    v3 = 1;
    *((_DWORD *)this + 44) = 1;
    *((double *)this + 1) = result;
    v2 = *((_DWORD *)a2 + 44);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 2);
    v3 |= 2u;
    *((_DWORD *)this + 44) = v3;
    *((double *)this + 2) = result;
    v2 = *((_DWORD *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    result = *((double *)a2 + 3);
    v3 |= 4u;
    *((_DWORD *)this + 44) = v3;
    *((double *)this + 3) = result;
    v2 = *((_DWORD *)a2 + 44);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0)
        goto LABEL_9;
      goto LABEL_28;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }
  result = *((double *)a2 + 11);
  v3 |= 0x400u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 11) = result;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_29;
  }
LABEL_28:
  result = *((double *)a2 + 10);
  v3 |= 0x200u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 10) = result;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0)
      goto LABEL_11;
    goto LABEL_30;
  }
LABEL_29:
  result = *((double *)a2 + 5);
  v3 |= 0x10u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 5) = result;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 8) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_31;
  }
LABEL_30:
  result = *((double *)a2 + 4);
  v3 |= 8u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 4) = result;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x80) == 0)
  {
LABEL_12:
    if ((v2 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_32;
  }
LABEL_31:
  result = *((double *)a2 + 8);
  v3 |= 0x80u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 8) = result;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x40) == 0)
  {
LABEL_13:
    if ((v2 & 0x20) == 0)
      goto LABEL_14;
    goto LABEL_33;
  }
LABEL_32:
  result = *((double *)a2 + 7);
  v3 |= 0x40u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 7) = result;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x20) == 0)
  {
LABEL_14:
    if ((v2 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_34;
  }
LABEL_33:
  result = *((double *)a2 + 6);
  v3 |= 0x20u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 6) = result;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x800) == 0)
  {
LABEL_15:
    if ((v2 & 0x100) == 0)
      goto LABEL_16;
    goto LABEL_35;
  }
LABEL_34:
  result = *((double *)a2 + 12);
  v3 |= 0x800u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 12) = result;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x100) == 0)
  {
LABEL_16:
    if ((v2 & 0x80000) == 0)
      goto LABEL_17;
    goto LABEL_36;
  }
LABEL_35:
  result = *((double *)a2 + 9);
  v3 |= 0x100u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 9) = result;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x80000) == 0)
  {
LABEL_17:
    if ((v2 & 0x100000) == 0)
      goto LABEL_18;
    goto LABEL_37;
  }
LABEL_36:
  result = *((double *)a2 + 20);
  v3 |= 0x80000u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 20) = result;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x100000) == 0)
  {
LABEL_18:
    if ((v2 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_38;
  }
LABEL_37:
  result = *((double *)a2 + 21);
  v3 |= 0x100000u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 21) = result;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x20000) == 0)
  {
LABEL_19:
    if ((v2 & 0x4000) == 0)
      goto LABEL_20;
    goto LABEL_39;
  }
LABEL_38:
  result = *((double *)a2 + 18);
  v3 |= 0x20000u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 18) = result;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x4000) == 0)
  {
LABEL_20:
    if ((v2 & 0x8000) == 0)
      goto LABEL_21;
    goto LABEL_40;
  }
LABEL_39:
  result = *((double *)a2 + 15);
  v3 |= 0x4000u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 15) = result;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x8000) == 0)
  {
LABEL_21:
    if ((v2 & 0x40000) == 0)
      goto LABEL_22;
    goto LABEL_41;
  }
LABEL_40:
  result = *((double *)a2 + 16);
  v3 |= 0x8000u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 16) = result;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x40000) == 0)
  {
LABEL_22:
    if ((v2 & 0x2000) == 0)
      goto LABEL_23;
    goto LABEL_42;
  }
LABEL_41:
  result = *((double *)a2 + 19);
  v3 |= 0x40000u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 19) = result;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x2000) == 0)
  {
LABEL_23:
    if ((v2 & 0x10000) == 0)
      goto LABEL_24;
    goto LABEL_43;
  }
LABEL_42:
  result = *((double *)a2 + 14);
  v3 |= 0x2000u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 14) = result;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x10000) == 0)
  {
LABEL_24:
    if ((v2 & 0x1000) == 0)
      return result;
LABEL_44:
    result = *((double *)a2 + 13);
    *((_DWORD *)this + 44) = v3 | 0x1000;
    *((double *)this + 13) = result;
    return result;
  }
LABEL_43:
  result = *((double *)a2 + 17);
  v3 |= 0x10000u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 17) = result;
  if ((*((_DWORD *)a2 + 44) & 0x1000) != 0)
    goto LABEL_44;
  return result;
}

CMMsl *CMMsl::SteadinessModelContinuousWalkingFeatures::operator=(CMMsl *a1, const CMMsl::SteadinessModelContinuousWalkingFeatures *a2)
{
  CMMsl::SteadinessModelContinuousWalkingFeatures *v3;
  _BYTE v5[184];

  if (a1 != a2)
  {
    CMMsl::SteadinessModelContinuousWalkingFeatures::SteadinessModelContinuousWalkingFeatures((CMMsl::SteadinessModelContinuousWalkingFeatures *)v5, a2);
    CMMsl::swap(a1, (CMMsl::SteadinessModelContinuousWalkingFeatures *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SteadinessModelContinuousWalkingFeatures *a2, CMMsl::SteadinessModelContinuousWalkingFeatures *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double result;

  v3 = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  v7 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v7;
  v8 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v8;
  v9 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v9;
  v10 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v10;
  v11 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v11;
  v12 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v12;
  v13 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v13;
  v14 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v14;
  v15 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v15;
  v16 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = *((_QWORD *)a2 + 20);
  *((_QWORD *)a2 + 20) = v16;
  v17 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = *((_QWORD *)a2 + 21);
  *((_QWORD *)a2 + 21) = v17;
  v18 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v18;
  v19 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v19;
  v20 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v20;
  v21 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 19) = v21;
  v22 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v22;
  v23 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v23;
  result = *((double *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((double *)a2 + 13) = result;
  return result;
}

double CMMsl::SteadinessModelContinuousWalkingFeatures::SteadinessModelContinuousWalkingFeatures(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_251361148;
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  result = *(double *)(a2 + 104);
  *(double *)(a1 + 104) = result;
  return result;
}

CMMsl *CMMsl::SteadinessModelContinuousWalkingFeatures::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::SteadinessModelContinuousWalkingFeatures *v3;
  _BYTE v5[184];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::SteadinessModelContinuousWalkingFeatures::SteadinessModelContinuousWalkingFeatures((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::SteadinessModelContinuousWalkingFeatures *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::SteadinessModelContinuousWalkingFeatures::formatText(CMMsl::SteadinessModelContinuousWalkingFeatures *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "allBoutsBoutDurationSecCv", *((double *)this + 1));
    v5 = *((_DWORD *)this + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_26;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "allBoutsBoutDurationSecMedian", *((double *)this + 2));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "allBoutsCycleTimeCv", *((double *)this + 3));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "intermediateBoutsCycleTimeCv", *((double *)this + 4));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "intermediateBoutsCycleTimeMedian", *((double *)this + 5));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "intermediateBoutsDoubleSupportPercentageMedian", *((double *)this + 6));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "intermediateBoutsStepLengthCv", *((double *)this + 7));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "intermediateBoutsStepLengthMedian", *((double *)this + 8));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "intermediateBoutsStepLengthMedianHeightnorm", *((double *)this + 9));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "intermediateBoutsWalkingSpeedCv", *((double *)this + 10));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "intermediateBoutsWalkingSpeedMedian", *((double *)this + 11));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "intermediateBoutsWalkingSpeedMedianSqrtheightnorm", *((double *)this + 12));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "longBoutsWalkingSpeedCountRatioLog", *((double *)this + 13));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "shortBoutsCycleTimeCv", *((double *)this + 14));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "shortBoutsCycleTimeMedian", *((double *)this + 15));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "shortBoutsDoubleSupportPercentageMedian", *((double *)this + 16));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "shortBoutsStepLengthCv", *((double *)this + 17));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "shortBoutsStepLengthMedianHeightnorm", *((double *)this + 18));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0)
      goto LABEL_21;
LABEL_43:
    PB::TextFormatter::format(a2, "shortBoutsWalkingSpeedMedian", *((double *)this + 20));
    if ((*((_DWORD *)this + 44) & 0x100000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_22;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "shortBoutsWalkingSpeedCv", *((double *)this + 19));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x80000) != 0)
    goto LABEL_43;
LABEL_21:
  if ((v5 & 0x100000) != 0)
LABEL_22:
    PB::TextFormatter::format(a2, "shortBoutsWalkingSpeedMedianSqrtheightnorm", *((double *)this + 21));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SteadinessModelContinuousWalkingFeatures::readFrom(CMMsl::SteadinessModelContinuousWalkingFeatures *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_88;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 44) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_85;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_87;
      case 2u:
        *((_DWORD *)this + 44) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_85;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_87;
      case 3u:
        *((_DWORD *)this + 44) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_85;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_87;
      case 4u:
        *((_DWORD *)this + 44) |= 0x400u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_85;
        *((_QWORD *)this + 11) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_87;
      case 5u:
        *((_DWORD *)this + 44) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_85;
        *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_87;
      case 6u:
        *((_DWORD *)this + 44) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_85;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_87;
      case 7u:
        *((_DWORD *)this + 44) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_85;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_87;
      case 8u:
        *((_DWORD *)this + 44) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_85;
        *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_87;
      case 9u:
        *((_DWORD *)this + 44) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_85;
        *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_87;
      case 0xAu:
        *((_DWORD *)this + 44) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_85;
        *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_87;
      case 0xBu:
        *((_DWORD *)this + 44) |= 0x800u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_85;
        *((_QWORD *)this + 12) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_87;
      case 0xCu:
        *((_DWORD *)this + 44) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_85;
        *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_87;
      case 0xDu:
        *((_DWORD *)this + 44) |= 0x80000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_85;
        *((_QWORD *)this + 20) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_87;
      case 0xEu:
        *((_DWORD *)this + 44) |= 0x100000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_85;
        *((_QWORD *)this + 21) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_87;
      case 0xFu:
        *((_DWORD *)this + 44) |= 0x20000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_85;
        *((_QWORD *)this + 18) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_87;
      case 0x10u:
        *((_DWORD *)this + 44) |= 0x4000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_85;
        *((_QWORD *)this + 15) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_87;
      case 0x11u:
        *((_DWORD *)this + 44) |= 0x8000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_85;
        *((_QWORD *)this + 16) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_87;
      case 0x12u:
        *((_DWORD *)this + 44) |= 0x40000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_85;
        *((_QWORD *)this + 19) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_87;
      case 0x13u:
        *((_DWORD *)this + 44) |= 0x2000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_85;
        *((_QWORD *)this + 14) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_87;
      case 0x14u:
        *((_DWORD *)this + 44) |= 0x10000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_85;
        *((_QWORD *)this + 17) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_87;
      case 0x15u:
        *((_DWORD *)this + 44) |= 0x1000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
        {
LABEL_85:
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          *((_QWORD *)this + 13) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_87:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_88:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::SteadinessModelContinuousWalkingFeatures::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 176);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_DWORD *)(v3 + 176);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_25;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0)
      goto LABEL_5;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(double *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(double *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0)
      goto LABEL_8;
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x40) == 0)
  {
LABEL_10:
    if ((v4 & 0x20) == 0)
      goto LABEL_11;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x20) == 0)
  {
LABEL_11:
    if ((v4 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x800) == 0)
  {
LABEL_12:
    if ((v4 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(double *)(v3 + 96));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x100) == 0)
  {
LABEL_13:
    if ((v4 & 0x80000) == 0)
      goto LABEL_14;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(double *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x80000) == 0)
  {
LABEL_14:
    if ((v4 & 0x100000) == 0)
      goto LABEL_15;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(double *)(v3 + 160));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x100000) == 0)
  {
LABEL_15:
    if ((v4 & 0x20000) == 0)
      goto LABEL_16;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(double *)(v3 + 168));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x20000) == 0)
  {
LABEL_16:
    if ((v4 & 0x4000) == 0)
      goto LABEL_17;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(double *)(v3 + 144));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x4000) == 0)
  {
LABEL_17:
    if ((v4 & 0x8000) == 0)
      goto LABEL_18;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(double *)(v3 + 120));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x8000) == 0)
  {
LABEL_18:
    if ((v4 & 0x40000) == 0)
      goto LABEL_19;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(double *)(v3 + 128));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x40000) == 0)
  {
LABEL_19:
    if ((v4 & 0x2000) == 0)
      goto LABEL_20;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(double *)(v3 + 152));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x2000) == 0)
  {
LABEL_20:
    if ((v4 & 0x10000) == 0)
      goto LABEL_21;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(double *)(v3 + 112));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x10000) == 0)
  {
LABEL_21:
    if ((v4 & 0x1000) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 104));
  }
LABEL_42:
  this = PB::Writer::write(a2, *(double *)(v3 + 136));
  if ((*(_DWORD *)(v3 + 176) & 0x1000) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 104));
  return this;
}

uint64_t CMMsl::SteadinessModelContinuousWalkingFeatures::hash_value(CMMsl::SteadinessModelContinuousWalkingFeatures *this)
{
  int v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;

  v1 = *((_DWORD *)this + 44);
  if ((v1 & 1) == 0)
  {
    v2 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_3;
LABEL_66:
    v3 = 0.0;
    if ((v1 & 4) != 0)
      goto LABEL_6;
LABEL_67:
    v4 = 0.0;
    if ((v1 & 0x400) != 0)
      goto LABEL_9;
LABEL_68:
    v5 = 0.0;
    if ((v1 & 0x200) != 0)
      goto LABEL_12;
LABEL_69:
    v6 = 0.0;
    if ((v1 & 0x10) != 0)
      goto LABEL_15;
LABEL_70:
    v7 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_18;
LABEL_71:
    v8 = 0.0;
    if ((v1 & 0x80) != 0)
      goto LABEL_21;
LABEL_72:
    v9 = 0.0;
    if ((v1 & 0x40) != 0)
      goto LABEL_24;
LABEL_73:
    v10 = 0.0;
    if ((v1 & 0x20) != 0)
      goto LABEL_27;
LABEL_74:
    v11 = 0.0;
    if ((v1 & 0x800) != 0)
      goto LABEL_30;
LABEL_75:
    v12 = 0.0;
    if ((v1 & 0x100) != 0)
      goto LABEL_33;
LABEL_76:
    v13 = 0.0;
    if ((v1 & 0x80000) != 0)
      goto LABEL_36;
LABEL_77:
    v14 = 0.0;
    if ((v1 & 0x100000) != 0)
      goto LABEL_39;
LABEL_78:
    v15 = 0.0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_42;
LABEL_79:
    v16 = 0.0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_45;
LABEL_80:
    v17 = 0.0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_48;
LABEL_81:
    v18 = 0.0;
    if ((v1 & 0x40000) != 0)
      goto LABEL_51;
LABEL_82:
    v19 = 0.0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_54;
LABEL_83:
    v20 = 0.0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_57;
    goto LABEL_84;
  }
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_66;
LABEL_3:
  v3 = *((double *)this + 2);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 4) == 0)
    goto LABEL_67;
LABEL_6:
  v4 = *((double *)this + 3);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 0x400) == 0)
    goto LABEL_68;
LABEL_9:
  v5 = *((double *)this + 11);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((v1 & 0x200) == 0)
    goto LABEL_69;
LABEL_12:
  v6 = *((double *)this + 10);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((v1 & 0x10) == 0)
    goto LABEL_70;
LABEL_15:
  v7 = *((double *)this + 5);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_71;
LABEL_18:
  v8 = *((double *)this + 4);
  if (v8 == 0.0)
    v8 = 0.0;
  if ((v1 & 0x80) == 0)
    goto LABEL_72;
LABEL_21:
  v9 = *((double *)this + 8);
  if (v9 == 0.0)
    v9 = 0.0;
  if ((v1 & 0x40) == 0)
    goto LABEL_73;
LABEL_24:
  v10 = *((double *)this + 7);
  if (v10 == 0.0)
    v10 = 0.0;
  if ((v1 & 0x20) == 0)
    goto LABEL_74;
LABEL_27:
  v11 = *((double *)this + 6);
  if (v11 == 0.0)
    v11 = 0.0;
  if ((v1 & 0x800) == 0)
    goto LABEL_75;
LABEL_30:
  v12 = *((double *)this + 12);
  if (v12 == 0.0)
    v12 = 0.0;
  if ((v1 & 0x100) == 0)
    goto LABEL_76;
LABEL_33:
  v13 = *((double *)this + 9);
  if (v13 == 0.0)
    v13 = 0.0;
  if ((v1 & 0x80000) == 0)
    goto LABEL_77;
LABEL_36:
  v14 = *((double *)this + 20);
  if (v14 == 0.0)
    v14 = 0.0;
  if ((v1 & 0x100000) == 0)
    goto LABEL_78;
LABEL_39:
  v15 = *((double *)this + 21);
  if (v15 == 0.0)
    v15 = 0.0;
  if ((v1 & 0x20000) == 0)
    goto LABEL_79;
LABEL_42:
  v16 = *((double *)this + 18);
  if (v16 == 0.0)
    v16 = 0.0;
  if ((v1 & 0x4000) == 0)
    goto LABEL_80;
LABEL_45:
  v17 = *((double *)this + 15);
  if (v17 == 0.0)
    v17 = 0.0;
  if ((v1 & 0x8000) == 0)
    goto LABEL_81;
LABEL_48:
  v18 = *((double *)this + 16);
  if (v18 == 0.0)
    v18 = 0.0;
  if ((v1 & 0x40000) == 0)
    goto LABEL_82;
LABEL_51:
  v19 = *((double *)this + 19);
  if (v19 == 0.0)
    v19 = 0.0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_83;
LABEL_54:
  v20 = *((double *)this + 14);
  if (v20 == 0.0)
    v20 = 0.0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_57:
    v21 = *((double *)this + 17);
    if (v21 == 0.0)
      v21 = 0.0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_60;
LABEL_85:
    v22 = 0.0;
    return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13 ^ *(_QWORD *)&v14 ^ *(_QWORD *)&v15 ^ *(_QWORD *)&v16 ^ *(_QWORD *)&v17 ^ *(_QWORD *)&v18 ^ *(_QWORD *)&v19 ^ *(_QWORD *)&v20 ^ *(_QWORD *)&v21 ^ *(_QWORD *)&v22;
  }
LABEL_84:
  v21 = 0.0;
  if ((v1 & 0x1000) == 0)
    goto LABEL_85;
LABEL_60:
  v22 = *((double *)this + 13);
  if (v22 == 0.0)
    v22 = 0.0;
  return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13 ^ *(_QWORD *)&v14 ^ *(_QWORD *)&v15 ^ *(_QWORD *)&v16 ^ *(_QWORD *)&v17 ^ *(_QWORD *)&v18 ^ *(_QWORD *)&v19 ^ *(_QWORD *)&v20 ^ *(_QWORD *)&v21 ^ *(_QWORD *)&v22;
}

void CMMsl::SteadinessModelGaitBaselineFeatures::~SteadinessModelGaitBaselineFeatures(CMMsl::SteadinessModelGaitBaselineFeatures *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::SteadinessModelGaitBaselineFeatures::SteadinessModelGaitBaselineFeatures(CMMsl::SteadinessModelGaitBaselineFeatures *this, const CMMsl::SteadinessModelGaitBaselineFeatures *a2)
{
  __int16 v2;
  __int16 v3;
  double result;

  *(_QWORD *)this = &off_251361180;
  *((_DWORD *)this + 22) = 0;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 1) != 0)
  {
    result = *((double *)a2 + 1);
    v3 = 1;
    *((_WORD *)this + 44) = 1;
    *((double *)this + 1) = result;
    v2 = *((_WORD *)a2 + 44);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 2);
    v3 |= 2u;
    *((_WORD *)this + 44) = v3;
    *((double *)this + 2) = result;
    v2 = *((_WORD *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    result = *((double *)a2 + 3);
    v3 |= 4u;
    *((_WORD *)this + 44) = v3;
    *((double *)this + 3) = result;
    v2 = *((_WORD *)a2 + 44);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0)
        goto LABEL_9;
      goto LABEL_17;
    }
  }
  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  result = *((double *)a2 + 8);
  v3 |= 0x80u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 8) = result;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_18;
  }
LABEL_17:
  result = *((double *)a2 + 10);
  v3 |= 0x200u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 10) = result;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0)
      goto LABEL_11;
    goto LABEL_19;
  }
LABEL_18:
  result = *((double *)a2 + 9);
  v3 |= 0x100u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 9) = result;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 8) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_20;
  }
LABEL_19:
  result = *((double *)a2 + 4);
  v3 |= 8u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 4) = result;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x40) == 0)
  {
LABEL_12:
    if ((v2 & 0x10) == 0)
      goto LABEL_13;
    goto LABEL_21;
  }
LABEL_20:
  result = *((double *)a2 + 7);
  v3 |= 0x40u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 7) = result;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x10) == 0)
  {
LABEL_13:
    if ((v2 & 0x20) == 0)
      return result;
LABEL_22:
    result = *((double *)a2 + 6);
    *((_WORD *)this + 44) = v3 | 0x20;
    *((double *)this + 6) = result;
    return result;
  }
LABEL_21:
  result = *((double *)a2 + 5);
  v3 |= 0x10u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 5) = result;
  if ((*((_WORD *)a2 + 44) & 0x20) != 0)
    goto LABEL_22;
  return result;
}

uint64_t CMMsl::SteadinessModelGaitBaselineFeatures::operator=(uint64_t a1, const CMMsl::SteadinessModelGaitBaselineFeatures *a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;

  if ((const CMMsl::SteadinessModelGaitBaselineFeatures *)a1 != a2)
  {
    CMMsl::SteadinessModelGaitBaselineFeatures::SteadinessModelGaitBaselineFeatures((CMMsl::SteadinessModelGaitBaselineFeatures *)&v10, a2);
    v3 = *(_DWORD *)(a1 + 88);
    *(_DWORD *)(a1 + 88) = v16;
    v16 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v11;
    v11 = v4;
    v5 = *(_OWORD *)(a1 + 72);
    *(_OWORD *)(a1 + 72) = v15;
    v15 = v5;
    v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    v12 = v6;
    v7 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v14;
    v14 = v7;
    v8 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v13;
    v13 = v8;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SteadinessModelGaitBaselineFeatures *a2, CMMsl::SteadinessModelGaitBaselineFeatures *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double result;

  v3 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  v7 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v7;
  v8 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v8;
  v9 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v9;
  v10 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v10;
  v11 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v11;
  v12 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v12;
  result = *((double *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((double *)a2 + 6) = result;
  return result;
}

double CMMsl::SteadinessModelGaitBaselineFeatures::SteadinessModelGaitBaselineFeatures(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_251361180;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  result = *(double *)(a2 + 48);
  *(double *)(a1 + 48) = result;
  return result;
}

uint64_t CMMsl::SteadinessModelGaitBaselineFeatures::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  void (**v12)(CMMsl::SteadinessModelGaitBaselineFeatures *__hidden);
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;

  if (a1 != a2)
  {
    v12 = &off_251361180;
    v3 = *(_DWORD *)(a2 + 88);
    *(_DWORD *)(a2 + 88) = 0;
    v18 = *(_DWORD *)(a1 + 88);
    v4 = *(_OWORD *)(a2 + 8);
    v13 = *(_OWORD *)(a1 + 8);
    v17 = *(_OWORD *)(a1 + 72);
    v5 = *(_OWORD *)(a2 + 24);
    v14 = *(_OWORD *)(a1 + 24);
    v6 = *(_OWORD *)(a1 + 56);
    v7 = *(_OWORD *)(a1 + 40);
    v8 = *(_OWORD *)(a2 + 40);
    v9 = *(_OWORD *)(a2 + 56);
    v10 = *(_OWORD *)(a2 + 72);
    *(_DWORD *)(a1 + 88) = v3;
    *(_OWORD *)(a1 + 8) = v4;
    *(_OWORD *)(a1 + 72) = v10;
    *(_OWORD *)(a1 + 24) = v5;
    *(_OWORD *)(a1 + 56) = v9;
    v16 = v6;
    *(_OWORD *)(a1 + 40) = v8;
    v15 = v7;
    PB::Base::~Base((PB::Base *)&v12);
  }
  return a1;
}

uint64_t CMMsl::SteadinessModelGaitBaselineFeatures::formatText(CMMsl::SteadinessModelGaitBaselineFeatures *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 44);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "asymmetryPercentageMedian", *((double *)this + 1));
    v5 = *((_WORD *)this + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "asymmetryPercentageStd", *((double *)this + 2));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "doubleSupportPercentageMedian", *((double *)this + 3));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "height", *((double *)this + 4));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "intermediateBoutsStepLengthQ95Heightnorm", *((double *)this + 5));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "intermediateBoutsWalkingSpeedQ95Sqrtheightnorm", *((double *)this + 6));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "modelOutputBalancePrior", *((double *)this + 7));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
LABEL_21:
    PB::TextFormatter::format(a2, "stepLengthXWalkingSpeedMedian", *((double *)this + 9));
    if ((*((_WORD *)this + 44) & 0x200) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_11;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "stepLengthMedian", *((double *)this + 8));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x100) != 0)
    goto LABEL_21;
LABEL_10:
  if ((v5 & 0x200) != 0)
LABEL_11:
    PB::TextFormatter::format(a2, "walkingSpeedMedian", *((double *)this + 10));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SteadinessModelGaitBaselineFeatures::readFrom(CMMsl::SteadinessModelGaitBaselineFeatures *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_55;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 44) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_52;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_54;
      case 2u:
        *((_WORD *)this + 44) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_52;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_54;
      case 3u:
        *((_WORD *)this + 44) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_52;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_54;
      case 4u:
        *((_WORD *)this + 44) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_52;
        *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_54;
      case 5u:
        *((_WORD *)this + 44) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_52;
        *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_54;
      case 6u:
        *((_WORD *)this + 44) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_52;
        *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_54;
      case 7u:
        *((_WORD *)this + 44) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_52;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_54;
      case 8u:
        *((_WORD *)this + 44) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_52;
        *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_54;
      case 9u:
        *((_WORD *)this + 44) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_52;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_54;
      case 0xAu:
        *((_WORD *)this + 44) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
        {
LABEL_52:
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_54:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_55:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::SteadinessModelGaitBaselineFeatures::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 88);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_WORD *)(v3 + 88);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 80));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 72));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 0x20) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 48));
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  if ((*(_WORD *)(v3 + 88) & 0x20) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 48));
  return this;
}

uint64_t CMMsl::SteadinessModelGaitBaselineFeatures::hash_value(CMMsl::SteadinessModelGaitBaselineFeatures *this)
{
  __int16 v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;

  v1 = *((_WORD *)this + 44);
  if ((v1 & 1) == 0)
  {
    v2 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_3;
LABEL_33:
    v3 = 0.0;
    if ((v1 & 4) != 0)
      goto LABEL_6;
LABEL_34:
    v4 = 0.0;
    if ((v1 & 0x80) != 0)
      goto LABEL_9;
LABEL_35:
    v5 = 0.0;
    if ((*((_WORD *)this + 44) & 0x200) != 0)
      goto LABEL_12;
LABEL_36:
    v6 = 0.0;
    if ((*((_WORD *)this + 44) & 0x100) != 0)
      goto LABEL_15;
LABEL_37:
    v7 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_18;
LABEL_38:
    v8 = 0.0;
    if ((v1 & 0x40) != 0)
      goto LABEL_21;
LABEL_39:
    v9 = 0.0;
    if ((v1 & 0x10) != 0)
      goto LABEL_24;
    goto LABEL_40;
  }
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_33;
LABEL_3:
  v3 = *((double *)this + 2);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 4) == 0)
    goto LABEL_34;
LABEL_6:
  v4 = *((double *)this + 3);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 0x80) == 0)
    goto LABEL_35;
LABEL_9:
  v5 = *((double *)this + 8);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((*((_WORD *)this + 44) & 0x200) == 0)
    goto LABEL_36;
LABEL_12:
  v6 = *((double *)this + 10);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((*((_WORD *)this + 44) & 0x100) == 0)
    goto LABEL_37;
LABEL_15:
  v7 = *((double *)this + 9);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_38;
LABEL_18:
  v8 = *((double *)this + 4);
  if (v8 == 0.0)
    v8 = 0.0;
  if ((v1 & 0x40) == 0)
    goto LABEL_39;
LABEL_21:
  v9 = *((double *)this + 7);
  if (v9 == 0.0)
    v9 = 0.0;
  if ((v1 & 0x10) != 0)
  {
LABEL_24:
    v10 = *((double *)this + 5);
    if (v10 == 0.0)
      v10 = 0.0;
    if ((v1 & 0x20) != 0)
      goto LABEL_27;
LABEL_41:
    v11 = 0.0;
    return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11;
  }
LABEL_40:
  v10 = 0.0;
  if ((v1 & 0x20) == 0)
    goto LABEL_41;
LABEL_27:
  v11 = *((double *)this + 6);
  if (v11 == 0.0)
    v11 = 0.0;
  return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11;
}

void CMMsl::SteadinessModelHarmonicFeatures::~SteadinessModelHarmonicFeatures(CMMsl::SteadinessModelHarmonicFeatures *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::SteadinessModelHarmonicFeatures::SteadinessModelHarmonicFeatures(CMMsl::SteadinessModelHarmonicFeatures *this, const CMMsl::SteadinessModelHarmonicFeatures *a2)
{
  int v2;
  int v3;
  double result;

  *(_QWORD *)this = &off_2513611B8;
  *((_DWORD *)this + 62) = 0;
  v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 1) != 0)
  {
    result = *((double *)a2 + 1);
    v3 = 1;
    *((_DWORD *)this + 62) = 1;
    *((double *)this + 1) = result;
    v2 = *((_DWORD *)a2 + 62);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 2);
    v3 |= 2u;
    *((_DWORD *)this + 62) = v3;
    *((double *)this + 2) = result;
    v2 = *((_DWORD *)a2 + 62);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    result = *((double *)a2 + 3);
    v3 |= 4u;
    *((_DWORD *)this + 62) = v3;
    *((double *)this + 3) = result;
    v2 = *((_DWORD *)a2 + 62);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_37;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  result = *((double *)a2 + 4);
  v3 |= 8u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 4) = result;
  v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_38;
  }
LABEL_37:
  result = *((double *)a2 + 5);
  v3 |= 0x10u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 5) = result;
  v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_39;
  }
LABEL_38:
  result = *((double *)a2 + 6);
  v3 |= 0x20u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 6) = result;
  v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_40;
  }
LABEL_39:
  result = *((double *)a2 + 7);
  v3 |= 0x40u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 7) = result;
  v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x80) == 0)
  {
LABEL_12:
    if ((v2 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_41;
  }
LABEL_40:
  result = *((double *)a2 + 8);
  v3 |= 0x80u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 8) = result;
  v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x100) == 0)
  {
LABEL_13:
    if ((v2 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_42;
  }
LABEL_41:
  result = *((double *)a2 + 9);
  v3 |= 0x100u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 9) = result;
  v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x200) == 0)
  {
LABEL_14:
    if ((v2 & 0x400) == 0)
      goto LABEL_15;
    goto LABEL_43;
  }
LABEL_42:
  result = *((double *)a2 + 10);
  v3 |= 0x200u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 10) = result;
  v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x400) == 0)
  {
LABEL_15:
    if ((v2 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_44;
  }
LABEL_43:
  result = *((double *)a2 + 11);
  v3 |= 0x400u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 11) = result;
  v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x800) == 0)
  {
LABEL_16:
    if ((v2 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_45;
  }
LABEL_44:
  result = *((double *)a2 + 12);
  v3 |= 0x800u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 12) = result;
  v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x1000) == 0)
  {
LABEL_17:
    if ((v2 & 0x2000) == 0)
      goto LABEL_18;
    goto LABEL_46;
  }
LABEL_45:
  result = *((double *)a2 + 13);
  v3 |= 0x1000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 13) = result;
  v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x2000) == 0)
  {
LABEL_18:
    if ((v2 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_47;
  }
LABEL_46:
  result = *((double *)a2 + 14);
  v3 |= 0x2000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 14) = result;
  v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x4000) == 0)
  {
LABEL_19:
    if ((v2 & 0x8000) == 0)
      goto LABEL_20;
    goto LABEL_48;
  }
LABEL_47:
  result = *((double *)a2 + 15);
  v3 |= 0x4000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 15) = result;
  v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x8000) == 0)
  {
LABEL_20:
    if ((v2 & 0x10000) == 0)
      goto LABEL_21;
    goto LABEL_49;
  }
LABEL_48:
  result = *((double *)a2 + 16);
  v3 |= 0x8000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 16) = result;
  v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x10000) == 0)
  {
LABEL_21:
    if ((v2 & 0x20000) == 0)
      goto LABEL_22;
    goto LABEL_50;
  }
LABEL_49:
  result = *((double *)a2 + 17);
  v3 |= 0x10000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 17) = result;
  v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x20000) == 0)
  {
LABEL_22:
    if ((v2 & 0x40000) == 0)
      goto LABEL_23;
    goto LABEL_51;
  }
LABEL_50:
  result = *((double *)a2 + 18);
  v3 |= 0x20000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 18) = result;
  v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x40000) == 0)
  {
LABEL_23:
    if ((v2 & 0x80000) == 0)
      goto LABEL_24;
    goto LABEL_52;
  }
LABEL_51:
  result = *((double *)a2 + 19);
  v3 |= 0x40000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 19) = result;
  v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x80000) == 0)
  {
LABEL_24:
    if ((v2 & 0x100000) == 0)
      goto LABEL_25;
    goto LABEL_53;
  }
LABEL_52:
  result = *((double *)a2 + 20);
  v3 |= 0x80000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 20) = result;
  v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x100000) == 0)
  {
LABEL_25:
    if ((v2 & 0x200000) == 0)
      goto LABEL_26;
    goto LABEL_54;
  }
LABEL_53:
  result = *((double *)a2 + 21);
  v3 |= 0x100000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 21) = result;
  v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x200000) == 0)
  {
LABEL_26:
    if ((v2 & 0x400000) == 0)
      goto LABEL_27;
    goto LABEL_55;
  }
LABEL_54:
  result = *((double *)a2 + 22);
  v3 |= 0x200000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 22) = result;
  v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x400000) == 0)
  {
LABEL_27:
    if ((v2 & 0x800000) == 0)
      goto LABEL_28;
    goto LABEL_56;
  }
LABEL_55:
  result = *((double *)a2 + 23);
  v3 |= 0x400000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 23) = result;
  v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x800000) == 0)
  {
LABEL_28:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_29;
    goto LABEL_57;
  }
LABEL_56:
  result = *((double *)a2 + 24);
  v3 |= 0x800000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 24) = result;
  v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_29:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_30;
    goto LABEL_58;
  }
LABEL_57:
  result = *((double *)a2 + 25);
  v3 |= 0x1000000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 25) = result;
  v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_30:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_31;
    goto LABEL_59;
  }
LABEL_58:
  result = *((double *)a2 + 27);
  v3 |= 0x4000000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 27) = result;
  v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_31:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_32;
    goto LABEL_60;
  }
LABEL_59:
  result = *((double *)a2 + 28);
  v3 |= 0x8000000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 28) = result;
  v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_32:
    if ((v2 & 0x20000000) == 0)
      goto LABEL_33;
    goto LABEL_61;
  }
LABEL_60:
  result = *((double *)a2 + 29);
  v3 |= 0x10000000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 29) = result;
  v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_33:
    if ((v2 & 0x2000000) == 0)
      return result;
LABEL_62:
    result = *((double *)a2 + 26);
    *((_DWORD *)this + 62) = v3 | 0x2000000;
    *((double *)this + 26) = result;
    return result;
  }
LABEL_61:
  result = *((double *)a2 + 30);
  v3 |= 0x20000000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 30) = result;
  if ((*((_DWORD *)a2 + 62) & 0x2000000) != 0)
    goto LABEL_62;
  return result;
}

CMMsl *CMMsl::SteadinessModelHarmonicFeatures::operator=(CMMsl *a1, const CMMsl::SteadinessModelHarmonicFeatures *a2)
{
  CMMsl::SteadinessModelHarmonicFeatures *v3;
  _BYTE v5[256];

  if (a1 != a2)
  {
    CMMsl::SteadinessModelHarmonicFeatures::SteadinessModelHarmonicFeatures((CMMsl::SteadinessModelHarmonicFeatures *)v5, a2);
    CMMsl::swap(a1, (CMMsl::SteadinessModelHarmonicFeatures *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SteadinessModelHarmonicFeatures *a2, CMMsl::SteadinessModelHarmonicFeatures *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double result;

  v3 = *((_DWORD *)this + 62);
  *((_DWORD *)this + 62) = *((_DWORD *)a2 + 62);
  *((_DWORD *)a2 + 62) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  v7 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v7;
  v8 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v8;
  v9 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v9;
  v10 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v10;
  v11 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v11;
  v12 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v12;
  v13 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v13;
  v14 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v14;
  v15 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v15;
  v16 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v16;
  v17 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v17;
  v18 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v18;
  v19 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v19;
  v20 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v20;
  v21 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v21;
  v22 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 19) = v22;
  v23 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = *((_QWORD *)a2 + 20);
  *((_QWORD *)a2 + 20) = v23;
  v24 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = *((_QWORD *)a2 + 21);
  *((_QWORD *)a2 + 21) = v24;
  v25 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = *((_QWORD *)a2 + 22);
  *((_QWORD *)a2 + 22) = v25;
  v26 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = *((_QWORD *)a2 + 23);
  *((_QWORD *)a2 + 23) = v26;
  v27 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = *((_QWORD *)a2 + 24);
  *((_QWORD *)a2 + 24) = v27;
  v28 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = *((_QWORD *)a2 + 25);
  *((_QWORD *)a2 + 25) = v28;
  v29 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = *((_QWORD *)a2 + 27);
  *((_QWORD *)a2 + 27) = v29;
  v30 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = *((_QWORD *)a2 + 28);
  *((_QWORD *)a2 + 28) = v30;
  v31 = *((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = *((_QWORD *)a2 + 29);
  *((_QWORD *)a2 + 29) = v31;
  v32 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = *((_QWORD *)a2 + 30);
  *((_QWORD *)a2 + 30) = v32;
  result = *((double *)this + 26);
  *((_QWORD *)this + 26) = *((_QWORD *)a2 + 26);
  *((double *)a2 + 26) = result;
  return result;
}

double CMMsl::SteadinessModelHarmonicFeatures::SteadinessModelHarmonicFeatures(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_2513611B8;
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  *(_DWORD *)(a2 + 248) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  result = *(double *)(a2 + 208);
  *(double *)(a1 + 208) = result;
  return result;
}

CMMsl *CMMsl::SteadinessModelHarmonicFeatures::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::SteadinessModelHarmonicFeatures *v3;
  _BYTE v5[256];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::SteadinessModelHarmonicFeatures::SteadinessModelHarmonicFeatures((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::SteadinessModelHarmonicFeatures *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::SteadinessModelHarmonicFeatures::formatText(CMMsl::SteadinessModelHarmonicFeatures *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 62);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityApCv", *((double *)this + 1));
    v5 = *((_DWORD *)this + 62);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_35;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityApMean", *((double *)this + 2));
  v5 = *((_DWORD *)this + 62);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityApMedian", *((double *)this + 3));
  v5 = *((_DWORD *)this + 62);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityApQ5", *((double *)this + 4));
  v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityApQ95", *((double *)this + 5));
  v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityMlCv", *((double *)this + 6));
  v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityMlMean", *((double *)this + 7));
  v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityMlMedian", *((double *)this + 8));
  v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityMlQ5", *((double *)this + 9));
  v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityMlQ95", *((double *)this + 10));
  v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityVtCv", *((double *)this + 11));
  v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityVtMean", *((double *)this + 12));
  v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityVtMedian", *((double *)this + 13));
  v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityVtQ5", *((double *)this + 14));
  v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityVtQ95", *((double *)this + 15));
  v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityApCv", *((double *)this + 16));
  v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityApMean", *((double *)this + 17));
  v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityApMedian", *((double *)this + 18));
  v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityApQ5", *((double *)this + 19));
  v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0)
      goto LABEL_22;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityApQ95", *((double *)this + 20));
  v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0)
      goto LABEL_23;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityMlCv", *((double *)this + 21));
  v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x200000) == 0)
  {
LABEL_23:
    if ((v5 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityMlMean", *((double *)this + 22));
  v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x400000) == 0)
  {
LABEL_24:
    if ((v5 & 0x800000) == 0)
      goto LABEL_25;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityMlMedian", *((double *)this + 23));
  v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x800000) == 0)
  {
LABEL_25:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_26;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityMlQ5", *((double *)this + 24));
  v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_27;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityMlQ95", *((double *)this + 25));
  v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_28;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityVtCv", *((double *)this + 26));
  v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_29;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityVtMean", *((double *)this + 27));
  v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_30;
LABEL_61:
    PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityVtQ5", *((double *)this + 29));
    if ((*((_DWORD *)this + 62) & 0x20000000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_31;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityVtMedian", *((double *)this + 28));
  v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x10000000) != 0)
    goto LABEL_61;
LABEL_30:
  if ((v5 & 0x20000000) != 0)
LABEL_31:
    PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityVtQ95", *((double *)this + 30));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SteadinessModelHarmonicFeatures::readFrom(CMMsl::SteadinessModelHarmonicFeatures *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_115;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 62) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_112;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_114;
      case 2u:
        *((_DWORD *)this + 62) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_112;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_114;
      case 3u:
        *((_DWORD *)this + 62) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_112;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_114;
      case 4u:
        *((_DWORD *)this + 62) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_112;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_114;
      case 5u:
        *((_DWORD *)this + 62) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_112;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_114;
      case 6u:
        *((_DWORD *)this + 62) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_112;
        *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_114;
      case 7u:
        *((_DWORD *)this + 62) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_112;
        *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_114;
      case 8u:
        *((_DWORD *)this + 62) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_112;
        *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_114;
      case 9u:
        *((_DWORD *)this + 62) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_112;
        *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_114;
      case 0xAu:
        *((_DWORD *)this + 62) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_112;
        *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_114;
      case 0xBu:
        *((_DWORD *)this + 62) |= 0x400u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_112;
        *((_QWORD *)this + 11) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_114;
      case 0xCu:
        *((_DWORD *)this + 62) |= 0x800u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_112;
        *((_QWORD *)this + 12) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_114;
      case 0xDu:
        *((_DWORD *)this + 62) |= 0x1000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_112;
        *((_QWORD *)this + 13) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_114;
      case 0xEu:
        *((_DWORD *)this + 62) |= 0x2000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_112;
        *((_QWORD *)this + 14) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_114;
      case 0xFu:
        *((_DWORD *)this + 62) |= 0x4000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_112;
        *((_QWORD *)this + 15) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_114;
      case 0x10u:
        *((_DWORD *)this + 62) |= 0x8000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_112;
        *((_QWORD *)this + 16) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_114;
      case 0x11u:
        *((_DWORD *)this + 62) |= 0x10000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_112;
        *((_QWORD *)this + 17) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_114;
      case 0x12u:
        *((_DWORD *)this + 62) |= 0x20000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_112;
        *((_QWORD *)this + 18) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_114;
      case 0x13u:
        *((_DWORD *)this + 62) |= 0x40000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_112;
        *((_QWORD *)this + 19) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_114;
      case 0x14u:
        *((_DWORD *)this + 62) |= 0x80000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_112;
        *((_QWORD *)this + 20) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_114;
      case 0x15u:
        *((_DWORD *)this + 62) |= 0x100000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_112;
        *((_QWORD *)this + 21) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_114;
      case 0x16u:
        *((_DWORD *)this + 62) |= 0x200000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_112;
        *((_QWORD *)this + 22) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_114;
      case 0x17u:
        *((_DWORD *)this + 62) |= 0x400000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_112;
        *((_QWORD *)this + 23) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_114;
      case 0x18u:
        *((_DWORD *)this + 62) |= 0x800000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_112;
        *((_QWORD *)this + 24) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_114;
      case 0x19u:
        *((_DWORD *)this + 62) |= 0x1000000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_112;
        *((_QWORD *)this + 25) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_114;
      case 0x1Au:
        *((_DWORD *)this + 62) |= 0x4000000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_112;
        *((_QWORD *)this + 27) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_114;
      case 0x1Bu:
        *((_DWORD *)this + 62) |= 0x8000000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_112;
        *((_QWORD *)this + 28) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_114;
      case 0x1Cu:
        *((_DWORD *)this + 62) |= 0x10000000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_112;
        *((_QWORD *)this + 29) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_114;
      case 0x1Du:
        *((_DWORD *)this + 62) |= 0x20000000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_112;
        *((_QWORD *)this + 30) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_114;
      case 0x1Eu:
        *((_DWORD *)this + 62) |= 0x2000000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
        {
LABEL_112:
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          *((_QWORD *)this + 26) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_114:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_115:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::SteadinessModelHarmonicFeatures::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 248);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_DWORD *)(v3 + 248);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_34;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(double *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x200) == 0)
  {
LABEL_11:
    if ((v4 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(double *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x400) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(double *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x800) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(double *)(v3 + 96));
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x1000) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(double *)(v3 + 104));
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x2000) == 0)
  {
LABEL_15:
    if ((v4 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(double *)(v3 + 112));
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x4000) == 0)
  {
LABEL_16:
    if ((v4 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(double *)(v3 + 120));
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x8000) == 0)
  {
LABEL_17:
    if ((v4 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(double *)(v3 + 128));
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x10000) == 0)
  {
LABEL_18:
    if ((v4 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(double *)(v3 + 136));
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x20000) == 0)
  {
LABEL_19:
    if ((v4 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(double *)(v3 + 144));
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x40000) == 0)
  {
LABEL_20:
    if ((v4 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(double *)(v3 + 152));
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x80000) == 0)
  {
LABEL_21:
    if ((v4 & 0x100000) == 0)
      goto LABEL_22;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(double *)(v3 + 160));
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x100000) == 0)
  {
LABEL_22:
    if ((v4 & 0x200000) == 0)
      goto LABEL_23;
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(double *)(v3 + 168));
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x200000) == 0)
  {
LABEL_23:
    if ((v4 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::write(a2, *(double *)(v3 + 176));
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x400000) == 0)
  {
LABEL_24:
    if ((v4 & 0x800000) == 0)
      goto LABEL_25;
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::write(a2, *(double *)(v3 + 184));
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x800000) == 0)
  {
LABEL_25:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_26;
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::write(a2, *(double *)(v3 + 192));
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_27;
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::write(a2, *(double *)(v3 + 200));
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_27:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_28;
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(double *)(v3 + 216));
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_28:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_29;
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::write(a2, *(double *)(v3 + 224));
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_30;
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(double *)(v3 + 232));
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_30:
    if ((v4 & 0x2000000) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 208));
  }
LABEL_60:
  this = PB::Writer::write(a2, *(double *)(v3 + 240));
  if ((*(_DWORD *)(v3 + 248) & 0x2000000) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 208));
  return this;
}

uint64_t CMMsl::SteadinessModelHarmonicFeatures::hash_value(CMMsl::SteadinessModelHarmonicFeatures *this)
{
  int v1;
  double v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v33;
  double v34;
  double v35;

  v1 = *((_DWORD *)this + 62);
  if ((v1 & 1) == 0)
  {
    v35 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_3;
LABEL_117:
    v34 = 0.0;
    if ((v1 & 4) != 0)
      goto LABEL_6;
LABEL_118:
    v33 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_9;
LABEL_119:
    v4 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_13;
LABEL_120:
    v5 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_17;
LABEL_121:
    v6 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_21;
LABEL_122:
    v7 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_25;
LABEL_123:
    v8 = 0;
    if ((v1 & 0x100) != 0)
      goto LABEL_29;
LABEL_124:
    v9 = 0;
    if ((v1 & 0x200) != 0)
      goto LABEL_33;
LABEL_125:
    v10 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_37;
LABEL_126:
    v11 = 0;
    if ((v1 & 0x800) != 0)
      goto LABEL_41;
LABEL_127:
    v12 = 0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_45;
LABEL_128:
    v13 = 0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_49;
LABEL_129:
    v14 = 0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_53;
LABEL_130:
    v15 = 0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_57;
LABEL_131:
    v16 = 0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_61;
LABEL_132:
    v17 = 0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_65;
LABEL_133:
    v18 = 0;
    if ((v1 & 0x40000) != 0)
      goto LABEL_69;
LABEL_134:
    v19 = 0;
    if ((v1 & 0x80000) != 0)
      goto LABEL_73;
LABEL_135:
    v20 = 0;
    if ((v1 & 0x100000) != 0)
      goto LABEL_77;
LABEL_136:
    v21 = 0;
    if ((v1 & 0x200000) != 0)
      goto LABEL_81;
LABEL_137:
    v22 = 0;
    if ((v1 & 0x400000) != 0)
      goto LABEL_85;
LABEL_138:
    v23 = 0;
    if ((v1 & 0x800000) != 0)
      goto LABEL_89;
LABEL_139:
    v24 = 0;
    if ((v1 & 0x1000000) != 0)
      goto LABEL_93;
LABEL_140:
    v25 = 0;
    if ((v1 & 0x4000000) != 0)
      goto LABEL_97;
LABEL_141:
    v26 = 0;
    if ((v1 & 0x8000000) != 0)
      goto LABEL_101;
LABEL_142:
    v27 = 0;
    if ((v1 & 0x10000000) != 0)
      goto LABEL_105;
LABEL_143:
    v28 = 0.0;
    if ((v1 & 0x20000000) != 0)
      goto LABEL_108;
    goto LABEL_144;
  }
  v31 = *((double *)this + 1);
  if (v31 == 0.0)
    v31 = 0.0;
  v35 = v31;
  if ((v1 & 2) == 0)
    goto LABEL_117;
LABEL_3:
  v2 = *((double *)this + 2);
  if (v2 == 0.0)
    v2 = 0.0;
  v34 = v2;
  if ((v1 & 4) == 0)
    goto LABEL_118;
LABEL_6:
  v3 = *((double *)this + 3);
  if (v3 == 0.0)
    v3 = 0.0;
  v33 = v3;
  if ((v1 & 8) == 0)
    goto LABEL_119;
LABEL_9:
  if (*((double *)this + 4) == 0.0)
    v4 = 0;
  else
    v4 = *((_QWORD *)this + 4);
  if ((v1 & 0x10) == 0)
    goto LABEL_120;
LABEL_13:
  if (*((double *)this + 5) == 0.0)
    v5 = 0;
  else
    v5 = *((_QWORD *)this + 5);
  if ((v1 & 0x20) == 0)
    goto LABEL_121;
LABEL_17:
  if (*((double *)this + 6) == 0.0)
    v6 = 0;
  else
    v6 = *((_QWORD *)this + 6);
  if ((v1 & 0x40) == 0)
    goto LABEL_122;
LABEL_21:
  if (*((double *)this + 7) == 0.0)
    v7 = 0;
  else
    v7 = *((_QWORD *)this + 7);
  if ((v1 & 0x80) == 0)
    goto LABEL_123;
LABEL_25:
  if (*((double *)this + 8) == 0.0)
    v8 = 0;
  else
    v8 = *((_QWORD *)this + 8);
  if ((v1 & 0x100) == 0)
    goto LABEL_124;
LABEL_29:
  if (*((double *)this + 9) == 0.0)
    v9 = 0;
  else
    v9 = *((_QWORD *)this + 9);
  if ((v1 & 0x200) == 0)
    goto LABEL_125;
LABEL_33:
  if (*((double *)this + 10) == 0.0)
    v10 = 0;
  else
    v10 = *((_QWORD *)this + 10);
  if ((v1 & 0x400) == 0)
    goto LABEL_126;
LABEL_37:
  if (*((double *)this + 11) == 0.0)
    v11 = 0;
  else
    v11 = *((_QWORD *)this + 11);
  if ((v1 & 0x800) == 0)
    goto LABEL_127;
LABEL_41:
  if (*((double *)this + 12) == 0.0)
    v12 = 0;
  else
    v12 = *((_QWORD *)this + 12);
  if ((v1 & 0x1000) == 0)
    goto LABEL_128;
LABEL_45:
  if (*((double *)this + 13) == 0.0)
    v13 = 0;
  else
    v13 = *((_QWORD *)this + 13);
  if ((v1 & 0x2000) == 0)
    goto LABEL_129;
LABEL_49:
  if (*((double *)this + 14) == 0.0)
    v14 = 0;
  else
    v14 = *((_QWORD *)this + 14);
  if ((v1 & 0x4000) == 0)
    goto LABEL_130;
LABEL_53:
  if (*((double *)this + 15) == 0.0)
    v15 = 0;
  else
    v15 = *((_QWORD *)this + 15);
  if ((v1 & 0x8000) == 0)
    goto LABEL_131;
LABEL_57:
  if (*((double *)this + 16) == 0.0)
    v16 = 0;
  else
    v16 = *((_QWORD *)this + 16);
  if ((v1 & 0x10000) == 0)
    goto LABEL_132;
LABEL_61:
  if (*((double *)this + 17) == 0.0)
    v17 = 0;
  else
    v17 = *((_QWORD *)this + 17);
  if ((v1 & 0x20000) == 0)
    goto LABEL_133;
LABEL_65:
  if (*((double *)this + 18) == 0.0)
    v18 = 0;
  else
    v18 = *((_QWORD *)this + 18);
  if ((v1 & 0x40000) == 0)
    goto LABEL_134;
LABEL_69:
  if (*((double *)this + 19) == 0.0)
    v19 = 0;
  else
    v19 = *((_QWORD *)this + 19);
  if ((v1 & 0x80000) == 0)
    goto LABEL_135;
LABEL_73:
  if (*((double *)this + 20) == 0.0)
    v20 = 0;
  else
    v20 = *((_QWORD *)this + 20);
  if ((v1 & 0x100000) == 0)
    goto LABEL_136;
LABEL_77:
  if (*((double *)this + 21) == 0.0)
    v21 = 0;
  else
    v21 = *((_QWORD *)this + 21);
  if ((v1 & 0x200000) == 0)
    goto LABEL_137;
LABEL_81:
  if (*((double *)this + 22) == 0.0)
    v22 = 0;
  else
    v22 = *((_QWORD *)this + 22);
  if ((v1 & 0x400000) == 0)
    goto LABEL_138;
LABEL_85:
  if (*((double *)this + 23) == 0.0)
    v23 = 0;
  else
    v23 = *((_QWORD *)this + 23);
  if ((v1 & 0x800000) == 0)
    goto LABEL_139;
LABEL_89:
  if (*((double *)this + 24) == 0.0)
    v24 = 0;
  else
    v24 = *((_QWORD *)this + 24);
  if ((v1 & 0x1000000) == 0)
    goto LABEL_140;
LABEL_93:
  if (*((double *)this + 25) == 0.0)
    v25 = 0;
  else
    v25 = *((_QWORD *)this + 25);
  if ((v1 & 0x4000000) == 0)
    goto LABEL_141;
LABEL_97:
  if (*((double *)this + 27) == 0.0)
    v26 = 0;
  else
    v26 = *((_QWORD *)this + 27);
  if ((v1 & 0x8000000) == 0)
    goto LABEL_142;
LABEL_101:
  if (*((double *)this + 28) == 0.0)
    v27 = 0;
  else
    v27 = *((_QWORD *)this + 28);
  if ((v1 & 0x10000000) == 0)
    goto LABEL_143;
LABEL_105:
  v28 = *((double *)this + 29);
  if (v28 == 0.0)
    v28 = 0.0;
  if ((v1 & 0x20000000) != 0)
  {
LABEL_108:
    v29 = *((double *)this + 30);
    if (v29 == 0.0)
      v29 = 0.0;
    if ((v1 & 0x2000000) != 0)
      goto LABEL_111;
LABEL_145:
    v30 = 0.0;
    return *(_QWORD *)&v34 ^ *(_QWORD *)&v35 ^ *(_QWORD *)&v33 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ *(_QWORD *)&v28 ^ *(_QWORD *)&v29 ^ *(_QWORD *)&v30;
  }
LABEL_144:
  v29 = 0.0;
  if ((v1 & 0x2000000) == 0)
    goto LABEL_145;
LABEL_111:
  v30 = *((double *)this + 26);
  if (v30 == 0.0)
    v30 = 0.0;
  return *(_QWORD *)&v34 ^ *(_QWORD *)&v35 ^ *(_QWORD *)&v33 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ *(_QWORD *)&v28 ^ *(_QWORD *)&v29 ^ *(_QWORD *)&v30;
}

void CMMsl::SteadinessModelResult::~SteadinessModelResult(CMMsl::SteadinessModelResult *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::SteadinessModelResult::SteadinessModelResult(uint64_t this, const CMMsl::SteadinessModelResult *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;

  *(_QWORD *)this = &off_2513611F0;
  *(_DWORD *)(this + 52) = 0;
  v2 = *((_BYTE *)a2 + 52);
  if ((v2 & 4) != 0)
  {
    v4 = *((_QWORD *)a2 + 3);
    v3 = 4;
    *(_BYTE *)(this + 52) = 4;
    *(_QWORD *)(this + 24) = v4;
    v2 = *((_BYTE *)a2 + 52);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 52) & 2) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 2);
    v3 |= 2u;
    *(_BYTE *)(this + 52) = v3;
    *(_QWORD *)(this + 16) = v5;
    v2 = *((_BYTE *)a2 + 52);
  }
LABEL_6:
  if ((v2 & 1) != 0)
  {
    v6 = *((_QWORD *)a2 + 1);
    v3 |= 1u;
    *(_BYTE *)(this + 52) = v3;
    *(_QWORD *)(this + 8) = v6;
    v2 = *((_BYTE *)a2 + 52);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_15;
    }
  }
  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 12);
  v3 |= 0x80u;
  *(_BYTE *)(this + 52) = v3;
  *(_DWORD *)(this + 48) = v7;
  v2 = *((_BYTE *)a2 + 52);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0)
      goto LABEL_10;
    goto LABEL_16;
  }
LABEL_15:
  v8 = *((_DWORD *)a2 + 9);
  v3 |= 0x10u;
  *(_BYTE *)(this + 52) = v3;
  *(_DWORD *)(this + 36) = v8;
  v2 = *((_BYTE *)a2 + 52);
  if ((v2 & 8) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_17;
  }
LABEL_16:
  v9 = *((_DWORD *)a2 + 8);
  v3 |= 8u;
  *(_BYTE *)(this + 52) = v3;
  *(_DWORD *)(this + 32) = v9;
  v2 = *((_BYTE *)a2 + 52);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x20) == 0)
      return this;
LABEL_18:
    v11 = *((_DWORD *)a2 + 10);
    *(_BYTE *)(this + 52) = v3 | 0x20;
    *(_DWORD *)(this + 40) = v11;
    return this;
  }
LABEL_17:
  v10 = *((_DWORD *)a2 + 11);
  v3 |= 0x40u;
  *(_BYTE *)(this + 52) = v3;
  *(_DWORD *)(this + 44) = v10;
  if ((*((_BYTE *)a2 + 52) & 0x20) != 0)
    goto LABEL_18;
  return this;
}

uint64_t CMMsl::SteadinessModelResult::operator=(uint64_t a1, const CMMsl::SteadinessModelResult *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _BYTE v7[8];
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  if ((const CMMsl::SteadinessModelResult *)a1 != a2)
  {
    CMMsl::SteadinessModelResult::SteadinessModelResult((uint64_t)v7, a2);
    v3 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v9;
    v9 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v4;
    *(_QWORD *)&v4 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v11;
    v11 = v4;
    v5 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v10;
    v10 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SteadinessModelResult *a2, CMMsl::SteadinessModelResult *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  double result;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;

  v3 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v3;
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  v7 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v7;
  v8 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v8;
  v9 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v9;
  v10 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v10;
  v11 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v11;
  return result;
}

double CMMsl::SteadinessModelResult::SteadinessModelResult(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_2513611F0;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_2513611F0;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return result;
}

uint64_t CMMsl::SteadinessModelResult::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  void (**v10)(CMMsl::SteadinessModelResult *__hidden);
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  if (a1 != a2)
  {
    v10 = &off_2513611F0;
    v3 = *(_QWORD *)(a2 + 24);
    v4 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(a2 + 52) = 0;
    v12 = *(_QWORD *)(a1 + 24);
    v5 = *(_OWORD *)(a1 + 8);
    v6 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    v11 = v5;
    v14 = *(_QWORD *)(a1 + 48);
    v7 = *(_OWORD *)(a1 + 32);
    v8 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = v4;
    *(_OWORD *)(a1 + 32) = v8;
    v13 = v7;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

uint64_t CMMsl::SteadinessModelResult::formatText(CMMsl::SteadinessModelResult *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 52);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "likelihoodNotOK", *((double *)this + 1));
    v5 = *((_BYTE *)this + 52);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*((_BYTE *)this + 52) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "likelihoodOK", *((double *)this + 2));
  v5 = *((_BYTE *)this + 52);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "numDaysWithDataLast30Days");
  v5 = *((_BYTE *)this + 52);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "numDaysWithDataLast7Days");
  v5 = *((_BYTE *)this + 52);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "numValidBouts28Days");
  v5 = *((_BYTE *)this + 52);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 4) == 0)
      goto LABEL_8;
LABEL_16:
    PB::TextFormatter::format(a2, "rawSteadiness", *((double *)this + 3));
    if ((*((_BYTE *)this + 52) & 0x80) == 0)
      return PB::TextFormatter::endObject(a2);
LABEL_17:
    PB::TextFormatter::format(a2, "rejectionStatus");
    return PB::TextFormatter::endObject(a2);
  }
LABEL_15:
  PB::TextFormatter::format(a2, "numValidBouts7Days");
  v5 = *((_BYTE *)this + 52);
  if ((v5 & 4) != 0)
    goto LABEL_16;
LABEL_8:
  if (v5 < 0)
    goto LABEL_17;
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SteadinessModelResult::readFrom(CMMsl::SteadinessModelResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_26;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_21;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_26:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 52) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_36;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_108;
      case 2u:
        *((_BYTE *)this + 52) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_36;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_108;
      case 3u:
        *((_BYTE *)this + 52) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_108:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_36:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 4u:
        *((_BYTE *)this + 52) |= 0x80u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v51 = 0;
          v52 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_113;
            }
            v53 = v21++;
            v54 = *(_BYTE *)(v22 + v53);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v54 & 0x7F) << v51;
            if ((v54 & 0x80) == 0)
              break;
            v51 += 7;
            v14 = v52++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
LABEL_112:
              v2 = v53 + 1;
              goto LABEL_113;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v25) = 0;
          goto LABEL_112;
        }
        v23 = 0;
        v24 = 0;
        v25 = 0;
        do
        {
          v2 = v21 + 1;
          *((_QWORD *)a2 + 1) = v21 + 1;
          v26 = *(_BYTE *)(v22 + v21);
          v25 |= (unint64_t)(v26 & 0x7F) << v23;
          if ((v26 & 0x80) == 0)
            goto LABEL_113;
          v23 += 7;
          v21 = v2;
          v14 = v24++ > 8;
        }
        while (!v14);
        LODWORD(v25) = 0;
LABEL_113:
        *((_DWORD *)this + 12) = v25;
        break;
      case 5u:
        *((_BYTE *)this + 52) |= 0x10u;
        v27 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v28 = *(_QWORD *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v55 = 0;
          v56 = 0;
          v31 = 0;
          if (v2 <= v27)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_118;
            }
            v57 = v27++;
            v58 = *(_BYTE *)(v28 + v57);
            *((_QWORD *)a2 + 1) = v27;
            v31 |= (unint64_t)(v58 & 0x7F) << v55;
            if ((v58 & 0x80) == 0)
              break;
            v55 += 7;
            v14 = v56++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
LABEL_117:
              v2 = v57 + 1;
              goto LABEL_118;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v31) = 0;
          goto LABEL_117;
        }
        v29 = 0;
        v30 = 0;
        v31 = 0;
        do
        {
          v2 = v27 + 1;
          *((_QWORD *)a2 + 1) = v27 + 1;
          v32 = *(_BYTE *)(v28 + v27);
          v31 |= (unint64_t)(v32 & 0x7F) << v29;
          if ((v32 & 0x80) == 0)
            goto LABEL_118;
          v29 += 7;
          v27 = v2;
          v14 = v30++ > 8;
        }
        while (!v14);
        LODWORD(v31) = 0;
LABEL_118:
        *((_DWORD *)this + 9) = v31;
        break;
      case 6u:
        *((_BYTE *)this + 52) |= 8u;
        v33 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v34 = *(_QWORD *)a2;
        if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
        {
          v59 = 0;
          v60 = 0;
          v37 = 0;
          if (v2 <= v33)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v33)
            {
              LODWORD(v37) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_123;
            }
            v61 = v33++;
            v62 = *(_BYTE *)(v34 + v61);
            *((_QWORD *)a2 + 1) = v33;
            v37 |= (unint64_t)(v62 & 0x7F) << v59;
            if ((v62 & 0x80) == 0)
              break;
            v59 += 7;
            v14 = v60++ > 8;
            if (v14)
            {
              LODWORD(v37) = 0;
LABEL_122:
              v2 = v61 + 1;
              goto LABEL_123;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v37) = 0;
          goto LABEL_122;
        }
        v35 = 0;
        v36 = 0;
        v37 = 0;
        do
        {
          v2 = v33 + 1;
          *((_QWORD *)a2 + 1) = v33 + 1;
          v38 = *(_BYTE *)(v34 + v33);
          v37 |= (unint64_t)(v38 & 0x7F) << v35;
          if ((v38 & 0x80) == 0)
            goto LABEL_123;
          v35 += 7;
          v33 = v2;
          v14 = v36++ > 8;
        }
        while (!v14);
        LODWORD(v37) = 0;
LABEL_123:
        *((_DWORD *)this + 8) = v37;
        break;
      case 7u:
        *((_BYTE *)this + 52) |= 0x40u;
        v39 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v40 = *(_QWORD *)a2;
        if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
        {
          v63 = 0;
          v64 = 0;
          v43 = 0;
          if (v2 <= v39)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v39)
            {
              LODWORD(v43) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_128;
            }
            v65 = v39++;
            v66 = *(_BYTE *)(v40 + v65);
            *((_QWORD *)a2 + 1) = v39;
            v43 |= (unint64_t)(v66 & 0x7F) << v63;
            if ((v66 & 0x80) == 0)
              break;
            v63 += 7;
            v14 = v64++ > 8;
            if (v14)
            {
              LODWORD(v43) = 0;
LABEL_127:
              v2 = v65 + 1;
              goto LABEL_128;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v43) = 0;
          goto LABEL_127;
        }
        v41 = 0;
        v42 = 0;
        v43 = 0;
        do
        {
          v2 = v39 + 1;
          *((_QWORD *)a2 + 1) = v39 + 1;
          v44 = *(_BYTE *)(v40 + v39);
          v43 |= (unint64_t)(v44 & 0x7F) << v41;
          if ((v44 & 0x80) == 0)
            goto LABEL_128;
          v41 += 7;
          v39 = v2;
          v14 = v42++ > 8;
        }
        while (!v14);
        LODWORD(v43) = 0;
LABEL_128:
        *((_DWORD *)this + 11) = v43;
        break;
      case 8u:
        *((_BYTE *)this + 52) |= 0x20u;
        v45 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v46 = *(_QWORD *)a2;
        if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
        {
          v67 = 0;
          v68 = 0;
          v49 = 0;
          if (v2 <= v45)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v45)
            {
              LODWORD(v49) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_133;
            }
            v69 = v45++;
            v70 = *(_BYTE *)(v46 + v69);
            *((_QWORD *)a2 + 1) = v45;
            v49 |= (unint64_t)(v70 & 0x7F) << v67;
            if ((v70 & 0x80) == 0)
              break;
            v67 += 7;
            v14 = v68++ > 8;
            if (v14)
            {
              LODWORD(v49) = 0;
LABEL_132:
              v2 = v69 + 1;
              goto LABEL_133;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v49) = 0;
          goto LABEL_132;
        }
        v47 = 0;
        v48 = 0;
        v49 = 0;
        do
        {
          v2 = v45 + 1;
          *((_QWORD *)a2 + 1) = v45 + 1;
          v50 = *(_BYTE *)(v46 + v45);
          v49 |= (unint64_t)(v50 & 0x7F) << v47;
          if ((v50 & 0x80) == 0)
            goto LABEL_133;
          v47 += 7;
          v45 = v2;
          v14 = v48++ > 8;
        }
        while (!v14);
        LODWORD(v49) = 0;
LABEL_133:
        *((_DWORD *)this + 10) = v49;
        break;
      default:
        goto LABEL_19;
    }
LABEL_21:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::SteadinessModelResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 52);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24));
    v4 = *(_BYTE *)(v3 + 52);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(this + 52) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 52);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  v4 = *(_BYTE *)(v3 + 52);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 52);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 52);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 52);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x20) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_16:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_BYTE *)(v3 + 52) & 0x20) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::SteadinessModelResult::hash_value(CMMsl::SteadinessModelResult *this)
{
  double v1;
  double v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((*((_BYTE *)this + 52) & 4) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 52) & 2) != 0)
      goto LABEL_3;
LABEL_17:
    v2 = 0.0;
    if ((*((_BYTE *)this + 52) & 1) != 0)
      goto LABEL_6;
LABEL_18:
    v3 = 0.0;
    if ((*((_BYTE *)this + 52) & 0x80) != 0)
      goto LABEL_9;
    goto LABEL_19;
  }
  v1 = *((double *)this + 3);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 52) & 2) == 0)
    goto LABEL_17;
LABEL_3:
  v2 = *((double *)this + 2);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 52) & 1) == 0)
    goto LABEL_18;
LABEL_6:
  v3 = *((double *)this + 1);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((*((_BYTE *)this + 52) & 0x80) != 0)
  {
LABEL_9:
    v4 = *((unsigned int *)this + 12);
    if ((*((_BYTE *)this + 52) & 0x10) != 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  v4 = 0;
  if ((*((_BYTE *)this + 52) & 0x10) != 0)
  {
LABEL_10:
    v5 = *((int *)this + 9);
    if ((*((_BYTE *)this + 52) & 8) != 0)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_20:
  v5 = 0;
  if ((*((_BYTE *)this + 52) & 8) != 0)
  {
LABEL_11:
    v6 = *((int *)this + 8);
    if ((*((_BYTE *)this + 52) & 0x40) != 0)
      goto LABEL_12;
LABEL_22:
    v7 = 0;
    if ((*((_BYTE *)this + 52) & 0x20) != 0)
      goto LABEL_13;
LABEL_23:
    v8 = 0;
    return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8;
  }
LABEL_21:
  v6 = 0;
  if ((*((_BYTE *)this + 52) & 0x40) == 0)
    goto LABEL_22;
LABEL_12:
  v7 = *((int *)this + 11);
  if ((*((_BYTE *)this + 52) & 0x20) == 0)
    goto LABEL_23;
LABEL_13:
  v8 = *((int *)this + 10);
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8;
}

void CMMsl::SteadinessModelTemporalDispersionFeatures::~SteadinessModelTemporalDispersionFeatures(CMMsl::SteadinessModelTemporalDispersionFeatures *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::SteadinessModelTemporalDispersionFeatures::SteadinessModelTemporalDispersionFeatures(CMMsl::SteadinessModelTemporalDispersionFeatures *this, const CMMsl::SteadinessModelTemporalDispersionFeatures *a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)this = &off_251361228;
  *((_DWORD *)this + 10) = 0;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 8) != 0)
  {
    result = *((double *)a2 + 4);
    v3 = 8;
    *((_BYTE *)this + 40) = 8;
    *((double *)this + 4) = result;
    v2 = *((_BYTE *)a2 + 40);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 40) & 4) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 3);
    v3 |= 4u;
    *((_BYTE *)this + 40) = v3;
    *((double *)this + 3) = result;
    v2 = *((_BYTE *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 2) == 0)
  {
    if ((v2 & 1) == 0)
      return result;
LABEL_10:
    result = *((double *)a2 + 1);
    *((_BYTE *)this + 40) = v3 | 1;
    *((double *)this + 1) = result;
    return result;
  }
  result = *((double *)a2 + 2);
  v3 |= 2u;
  *((_BYTE *)this + 40) = v3;
  *((double *)this + 2) = result;
  if ((*((_BYTE *)a2 + 40) & 1) != 0)
    goto LABEL_10;
  return result;
}

uint64_t CMMsl::SteadinessModelTemporalDispersionFeatures::operator=(uint64_t a1, const CMMsl::SteadinessModelTemporalDispersionFeatures *a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  int v10;

  if ((const CMMsl::SteadinessModelTemporalDispersionFeatures *)a1 != a2)
  {
    CMMsl::SteadinessModelTemporalDispersionFeatures::SteadinessModelTemporalDispersionFeatures((CMMsl::SteadinessModelTemporalDispersionFeatures *)&v7, a2);
    v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v10;
    v10 = v3;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SteadinessModelTemporalDispersionFeatures *a2, CMMsl::SteadinessModelTemporalDispersionFeatures *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::SteadinessModelTemporalDispersionFeatures::SteadinessModelTemporalDispersionFeatures(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_251361228;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_251361228;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::SteadinessModelTemporalDispersionFeatures::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  void (**v8)(CMMsl::SteadinessModelTemporalDispersionFeatures *__hidden);
  __int128 v9;
  __int128 v10;
  int v11;

  if (a1 != a2)
  {
    v8 = &off_251361228;
    v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    v11 = *(_DWORD *)(a1 + 40);
    v10 = *(_OWORD *)(a1 + 24);
    v4 = *(_OWORD *)(a1 + 8);
    v5 = *(_OWORD *)(a2 + 8);
    v6 = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 40) = v3;
    *(_OWORD *)(a1 + 24) = v6;
    *(_OWORD *)(a1 + 8) = v5;
    v9 = v4;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::SteadinessModelTemporalDispersionFeatures::formatText(CMMsl::SteadinessModelTemporalDispersionFeatures *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "centroidSlopeHeightNormDoubleSupportPercentageCadence", *((double *)this + 1));
    v5 = *((_BYTE *)this + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "l2DispersionHeightNormDoubleSupportPercentageCadence", *((double *)this + 3));
      if ((*((_BYTE *)this + 40) & 8) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "centroidSlopeHeightNormWalkingSpeedStepLength", *((double *)this + 2));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "l2DispersionHeightNormWalkingSpeedStepLength", *((double *)this + 4));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SteadinessModelTemporalDispersionFeatures::readFrom(CMMsl::SteadinessModelTemporalDispersionFeatures *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_37;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 40) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 2u:
        *((_BYTE *)this + 40) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 3u:
        *((_BYTE *)this + 40) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 4u:
        *((_BYTE *)this + 40) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_36:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_34:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_37:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::SteadinessModelTemporalDispersionFeatures::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 40);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32));
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 8));
  }
LABEL_8:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  if ((*(_BYTE *)(v3 + 40) & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 8));
  return this;
}

uint64_t CMMsl::SteadinessModelTemporalDispersionFeatures::hash_value(CMMsl::SteadinessModelTemporalDispersionFeatures *this)
{
  double v1;
  double v2;
  double v3;
  double v4;

  if ((*((_BYTE *)this + 40) & 8) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 40) & 4) != 0)
      goto LABEL_3;
LABEL_15:
    v2 = 0.0;
    if ((*((_BYTE *)this + 40) & 2) != 0)
      goto LABEL_6;
    goto LABEL_16;
  }
  v1 = *((double *)this + 4);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 40) & 4) == 0)
    goto LABEL_15;
LABEL_3:
  v2 = *((double *)this + 3);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 40) & 2) != 0)
  {
LABEL_6:
    v3 = *((double *)this + 2);
    if (v3 == 0.0)
      v3 = 0.0;
    if ((*((_BYTE *)this + 40) & 1) != 0)
      goto LABEL_9;
LABEL_17:
    v4 = 0.0;
    return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4;
  }
LABEL_16:
  v3 = 0.0;
  if ((*((_BYTE *)this + 40) & 1) == 0)
    goto LABEL_17;
LABEL_9:
  v4 = *((double *)this + 1);
  if (v4 == 0.0)
    v4 = 0.0;
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4;
}

void CMMsl::SteadinessModelTemporalEntropyFeatures::~SteadinessModelTemporalEntropyFeatures(CMMsl::SteadinessModelTemporalEntropyFeatures *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::SteadinessModelTemporalEntropyFeatures::SteadinessModelTemporalEntropyFeatures(CMMsl::SteadinessModelTemporalEntropyFeatures *this, const CMMsl::SteadinessModelTemporalEntropyFeatures *a2)
{
  int v2;
  int v3;
  double result;

  *(_QWORD *)this = &off_251361260;
  *((_DWORD *)this + 54) = 0;
  v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x80000) != 0)
  {
    result = *((double *)a2 + 20);
    v3 = 0x80000;
    *((_DWORD *)this + 54) = 0x80000;
    *((double *)this + 20) = result;
    v2 = *((_DWORD *)a2 + 54);
    if ((v2 & 0x40000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x40000) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 19);
    v3 |= 0x40000u;
    *((_DWORD *)this + 54) = v3;
    *((double *)this + 19) = result;
    v2 = *((_DWORD *)a2 + 54);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    result = *((double *)a2 + 2);
    v3 |= 2u;
    *((_DWORD *)this + 54) = v3;
    *((double *)this + 2) = result;
    v2 = *((_DWORD *)a2 + 54);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x100000) == 0)
        goto LABEL_9;
      goto LABEL_33;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  result = *((double *)a2 + 1);
  v3 |= 1u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 1) = result;
  v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x100000) == 0)
  {
LABEL_9:
    if ((v2 & 0x400000) == 0)
      goto LABEL_10;
    goto LABEL_34;
  }
LABEL_33:
  result = *((double *)a2 + 21);
  v3 |= 0x100000u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 21) = result;
  v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x400000) == 0)
  {
LABEL_10:
    if ((v2 & 0x200000) == 0)
      goto LABEL_11;
    goto LABEL_35;
  }
LABEL_34:
  result = *((double *)a2 + 23);
  v3 |= 0x400000u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 23) = result;
  v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x200000) == 0)
  {
LABEL_11:
    if ((v2 & 0x800000) == 0)
      goto LABEL_12;
    goto LABEL_36;
  }
LABEL_35:
  result = *((double *)a2 + 22);
  v3 |= 0x200000u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 22) = result;
  v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x800000) == 0)
  {
LABEL_12:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_13;
    goto LABEL_37;
  }
LABEL_36:
  result = *((double *)a2 + 24);
  v3 |= 0x800000u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 24) = result;
  v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_13:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_14;
    goto LABEL_38;
  }
LABEL_37:
  result = *((double *)a2 + 26);
  v3 |= 0x2000000u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 26) = result;
  v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_14:
    if ((v2 & 4) == 0)
      goto LABEL_15;
    goto LABEL_39;
  }
LABEL_38:
  result = *((double *)a2 + 25);
  v3 |= 0x1000000u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 25) = result;
  v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 4) == 0)
  {
LABEL_15:
    if ((v2 & 0x10) == 0)
      goto LABEL_16;
    goto LABEL_40;
  }
LABEL_39:
  result = *((double *)a2 + 3);
  v3 |= 4u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 3) = result;
  v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x10) == 0)
  {
LABEL_16:
    if ((v2 & 8) == 0)
      goto LABEL_17;
    goto LABEL_41;
  }
LABEL_40:
  result = *((double *)a2 + 5);
  v3 |= 0x10u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 5) = result;
  v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 8) == 0)
  {
LABEL_17:
    if ((v2 & 0x20) == 0)
      goto LABEL_18;
    goto LABEL_42;
  }
LABEL_41:
  result = *((double *)a2 + 4);
  v3 |= 8u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 4) = result;
  v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x20) == 0)
  {
LABEL_18:
    if ((v2 & 0x80) == 0)
      goto LABEL_19;
    goto LABEL_43;
  }
LABEL_42:
  result = *((double *)a2 + 6);
  v3 |= 0x20u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 6) = result;
  v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x80) == 0)
  {
LABEL_19:
    if ((v2 & 0x40) == 0)
      goto LABEL_20;
    goto LABEL_44;
  }
LABEL_43:
  result = *((double *)a2 + 8);
  v3 |= 0x80u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 8) = result;
  v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x40) == 0)
  {
LABEL_20:
    if ((v2 & 0x2000) == 0)
      goto LABEL_21;
    goto LABEL_45;
  }
LABEL_44:
  result = *((double *)a2 + 7);
  v3 |= 0x40u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 7) = result;
  v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x2000) == 0)
  {
LABEL_21:
    if ((v2 & 0x200) == 0)
      goto LABEL_22;
    goto LABEL_46;
  }
LABEL_45:
  result = *((double *)a2 + 14);
  v3 |= 0x2000u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 14) = result;
  v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x200) == 0)
  {
LABEL_22:
    if ((v2 & 0x100) == 0)
      goto LABEL_23;
    goto LABEL_47;
  }
LABEL_46:
  result = *((double *)a2 + 10);
  v3 |= 0x200u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 10) = result;
  v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x100) == 0)
  {
LABEL_23:
    if ((v2 & 0x400) == 0)
      goto LABEL_24;
    goto LABEL_48;
  }
LABEL_47:
  result = *((double *)a2 + 9);
  v3 |= 0x100u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 9) = result;
  v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x400) == 0)
  {
LABEL_24:
    if ((v2 & 0x4000) == 0)
      goto LABEL_25;
    goto LABEL_49;
  }
LABEL_48:
  result = *((double *)a2 + 11);
  v3 |= 0x400u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 11) = result;
  v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x4000) == 0)
  {
LABEL_25:
    if ((v2 & 0x8000) == 0)
      goto LABEL_26;
    goto LABEL_50;
  }
LABEL_49:
  result = *((double *)a2 + 15);
  v3 |= 0x4000u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 15) = result;
  v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x8000) == 0)
  {
LABEL_26:
    if ((v2 & 0x20000) == 0)
      goto LABEL_27;
    goto LABEL_51;
  }
LABEL_50:
  result = *((double *)a2 + 16);
  v3 |= 0x8000u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 16) = result;
  v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x20000) == 0)
  {
LABEL_27:
    if ((v2 & 0x10000) == 0)
      goto LABEL_28;
    goto LABEL_52;
  }
LABEL_51:
  result = *((double *)a2 + 18);
  v3 |= 0x20000u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 18) = result;
  v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x10000) == 0)
  {
LABEL_28:
    if ((v2 & 0x800) == 0)
      goto LABEL_29;
    goto LABEL_53;
  }
LABEL_52:
  result = *((double *)a2 + 17);
  v3 |= 0x10000u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 17) = result;
  v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x800) == 0)
  {
LABEL_29:
    if ((v2 & 0x1000) == 0)
      return result;
LABEL_54:
    result = *((double *)a2 + 13);
    *((_DWORD *)this + 54) = v3 | 0x1000;
    *((double *)this + 13) = result;
    return result;
  }
LABEL_53:
  result = *((double *)a2 + 12);
  v3 |= 0x800u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 12) = result;
  if ((*((_DWORD *)a2 + 54) & 0x1000) != 0)
    goto LABEL_54;
  return result;
}

CMMsl *CMMsl::SteadinessModelTemporalEntropyFeatures::operator=(CMMsl *a1, const CMMsl::SteadinessModelTemporalEntropyFeatures *a2)
{
  CMMsl::SteadinessModelTemporalEntropyFeatures *v3;
  _BYTE v5[224];

  if (a1 != a2)
  {
    CMMsl::SteadinessModelTemporalEntropyFeatures::SteadinessModelTemporalEntropyFeatures((CMMsl::SteadinessModelTemporalEntropyFeatures *)v5, a2);
    CMMsl::swap(a1, (CMMsl::SteadinessModelTemporalEntropyFeatures *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SteadinessModelTemporalEntropyFeatures *a2, CMMsl::SteadinessModelTemporalEntropyFeatures *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double result;

  v3 = *((_DWORD *)this + 54);
  *((_DWORD *)this + 54) = *((_DWORD *)a2 + 54);
  *((_DWORD *)a2 + 54) = v3;
  v4 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = *((_QWORD *)a2 + 20);
  *((_QWORD *)a2 + 20) = v4;
  v5 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 19) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v7;
  v8 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = *((_QWORD *)a2 + 21);
  *((_QWORD *)a2 + 21) = v8;
  v9 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = *((_QWORD *)a2 + 23);
  *((_QWORD *)a2 + 23) = v9;
  v10 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = *((_QWORD *)a2 + 22);
  *((_QWORD *)a2 + 22) = v10;
  v11 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = *((_QWORD *)a2 + 24);
  *((_QWORD *)a2 + 24) = v11;
  v12 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = *((_QWORD *)a2 + 26);
  *((_QWORD *)a2 + 26) = v12;
  v13 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = *((_QWORD *)a2 + 25);
  *((_QWORD *)a2 + 25) = v13;
  v14 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v14;
  v15 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v15;
  v16 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v16;
  v17 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v17;
  v18 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v18;
  v19 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v19;
  v20 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v20;
  v21 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v21;
  v22 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v22;
  v23 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v23;
  v24 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v24;
  v25 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v25;
  v26 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v26;
  v27 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v27;
  v28 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v28;
  result = *((double *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((double *)a2 + 13) = result;
  return result;
}

double CMMsl::SteadinessModelTemporalEntropyFeatures::SteadinessModelTemporalEntropyFeatures(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_251361260;
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  *(_DWORD *)(a2 + 216) = 0;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  result = *(double *)(a2 + 104);
  *(double *)(a1 + 104) = result;
  return result;
}

CMMsl *CMMsl::SteadinessModelTemporalEntropyFeatures::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::SteadinessModelTemporalEntropyFeatures *v3;
  _BYTE v5[224];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::SteadinessModelTemporalEntropyFeatures::SteadinessModelTemporalEntropyFeatures((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::SteadinessModelTemporalEntropyFeatures *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::SteadinessModelTemporalEntropyFeatures::formatText(CMMsl::SteadinessModelTemporalEntropyFeatures *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 54);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "allBoutsCycleTimeEntropy5thTo95th", *((double *)this + 1));
    v5 = *((_DWORD *)this + 54);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_31;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "allBoutsCycleTimeEntropyMean", *((double *)this + 2));
  v5 = *((_DWORD *)this + 54);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "allBoutsCycleTimePoincareSd1Mean", *((double *)this + 3));
  v5 = *((_DWORD *)this + 54);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "allBoutsCycleTimePoincareSd1P5", *((double *)this + 4));
  v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "allBoutsCycleTimePoincareSd1P95", *((double *)this + 5));
  v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "allBoutsCycleTimePoincareSd2Mean", *((double *)this + 6));
  v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "allBoutsCycleTimePoincareSd2P5", *((double *)this + 7));
  v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "allBoutsCycleTimePoincareSd2P95", *((double *)this + 8));
  v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "allBoutsMinGaitMetrics21CycleTimeEntropy5thTo95thLog", *((double *)this + 9));
  v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "allBoutsMinGaitMetrics21CycleTimeEntropyMeanLog", *((double *)this + 10));
  v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "allBoutsMinGaitMetrics21CycleTimeEntropyP5Log", *((double *)this + 11));
  v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "allBoutsMinGaitMetrics21CycleTimePoincareSd1P5Log", *((double *)this + 12));
  v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "allBoutsMinGaitMetrics21CycleTimePoincareSd2P5Log", *((double *)this + 13));
  v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "allBoutsMinGaitMetrics21StepLengthEntropyMeanLog", *((double *)this + 14));
  v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "allBoutsMinGaitMetrics21StepLengthPoincareSd1P5Log", *((double *)this + 15));
  v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "allBoutsMinGaitMetrics21StepLengthPoincareSd1P95Log", *((double *)this + 16));
  v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "allBoutsMinGaitMetrics21StepLengthPoincareSd2MeanLog", *((double *)this + 17));
  v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "allBoutsMinGaitMetrics21StepLengthPoincareSd2P5Log", *((double *)this + 18));
  v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "allBoutsStepLengthEntropy5thTo95th", *((double *)this + 19));
  v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0)
      goto LABEL_22;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "allBoutsStepLengthEntropyMean", *((double *)this + 20));
  v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0)
      goto LABEL_23;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "allBoutsStepLengthPoincareSd1Mean", *((double *)this + 21));
  v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x200000) == 0)
  {
LABEL_23:
    if ((v5 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "allBoutsStepLengthPoincareSd1P5", *((double *)this + 22));
  v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x400000) == 0)
  {
LABEL_24:
    if ((v5 & 0x800000) == 0)
      goto LABEL_25;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "allBoutsStepLengthPoincareSd1P95", *((double *)this + 23));
  v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x800000) == 0)
  {
LABEL_25:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_26;
LABEL_53:
    PB::TextFormatter::format(a2, "allBoutsStepLengthPoincareSd2P5", *((double *)this + 25));
    if ((*((_DWORD *)this + 54) & 0x2000000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_27;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "allBoutsStepLengthPoincareSd2Mean", *((double *)this + 24));
  v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x1000000) != 0)
    goto LABEL_53;
LABEL_26:
  if ((v5 & 0x2000000) != 0)
LABEL_27:
    PB::TextFormatter::format(a2, "allBoutsStepLengthPoincareSd2P95", *((double *)this + 26));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SteadinessModelTemporalEntropyFeatures::readFrom(CMMsl::SteadinessModelTemporalEntropyFeatures *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_103;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 54) |= 0x80000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_100;
        *((_QWORD *)this + 20) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_102;
      case 2u:
        *((_DWORD *)this + 54) |= 0x40000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_100;
        *((_QWORD *)this + 19) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_102;
      case 3u:
        *((_DWORD *)this + 54) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_100;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_102;
      case 4u:
        *((_DWORD *)this + 54) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_100;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_102;
      case 5u:
        *((_DWORD *)this + 54) |= 0x100000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_100;
        *((_QWORD *)this + 21) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_102;
      case 6u:
        *((_DWORD *)this + 54) |= 0x400000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_100;
        *((_QWORD *)this + 23) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_102;
      case 7u:
        *((_DWORD *)this + 54) |= 0x200000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_100;
        *((_QWORD *)this + 22) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_102;
      case 8u:
        *((_DWORD *)this + 54) |= 0x800000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_100;
        *((_QWORD *)this + 24) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_102;
      case 9u:
        *((_DWORD *)this + 54) |= 0x2000000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_100;
        *((_QWORD *)this + 26) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_102;
      case 0xAu:
        *((_DWORD *)this + 54) |= 0x1000000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_100;
        *((_QWORD *)this + 25) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_102;
      case 0xBu:
        *((_DWORD *)this + 54) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_100;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_102;
      case 0xCu:
        *((_DWORD *)this + 54) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_100;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_102;
      case 0xDu:
        *((_DWORD *)this + 54) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_100;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_102;
      case 0xEu:
        *((_DWORD *)this + 54) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_100;
        *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_102;
      case 0xFu:
        *((_DWORD *)this + 54) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_100;
        *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_102;
      case 0x10u:
        *((_DWORD *)this + 54) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_100;
        *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_102;
      case 0x11u:
        *((_DWORD *)this + 54) |= 0x2000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_100;
        *((_QWORD *)this + 14) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_102;
      case 0x12u:
        *((_DWORD *)this + 54) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_100;
        *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_102;
      case 0x13u:
        *((_DWORD *)this + 54) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_100;
        *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_102;
      case 0x14u:
        *((_DWORD *)this + 54) |= 0x400u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_100;
        *((_QWORD *)this + 11) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_102;
      case 0x15u:
        *((_DWORD *)this + 54) |= 0x4000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_100;
        *((_QWORD *)this + 15) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_102;
      case 0x16u:
        *((_DWORD *)this + 54) |= 0x8000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_100;
        *((_QWORD *)this + 16) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_102;
      case 0x17u:
        *((_DWORD *)this + 54) |= 0x20000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_100;
        *((_QWORD *)this + 18) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_102;
      case 0x18u:
        *((_DWORD *)this + 54) |= 0x10000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_100;
        *((_QWORD *)this + 17) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_102;
      case 0x19u:
        *((_DWORD *)this + 54) |= 0x800u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_100;
        *((_QWORD *)this + 12) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_102;
      case 0x1Au:
        *((_DWORD *)this + 54) |= 0x1000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
        {
LABEL_100:
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          *((_QWORD *)this + 13) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_102:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_103:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::SteadinessModelTemporalEntropyFeatures::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 216);
  if ((v4 & 0x80000) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 160));
    v4 = *(_DWORD *)(v3 + 216);
    if ((v4 & 0x40000) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_30;
    }
  }
  else if ((v4 & 0x40000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 152));
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x100000) == 0)
      goto LABEL_6;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x100000) == 0)
  {
LABEL_6:
    if ((v4 & 0x400000) == 0)
      goto LABEL_7;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(double *)(v3 + 168));
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x400000) == 0)
  {
LABEL_7:
    if ((v4 & 0x200000) == 0)
      goto LABEL_8;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(double *)(v3 + 184));
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x200000) == 0)
  {
LABEL_8:
    if ((v4 & 0x800000) == 0)
      goto LABEL_9;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(double *)(v3 + 176));
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x800000) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_10;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(double *)(v3 + 192));
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_11;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(double *)(v3 + 208));
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_11:
    if ((v4 & 4) == 0)
      goto LABEL_12;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(double *)(v3 + 200));
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 4) == 0)
  {
LABEL_12:
    if ((v4 & 0x10) == 0)
      goto LABEL_13;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x10) == 0)
  {
LABEL_13:
    if ((v4 & 8) == 0)
      goto LABEL_14;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 8) == 0)
  {
LABEL_14:
    if ((v4 & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x20) == 0)
  {
LABEL_15:
    if ((v4 & 0x80) == 0)
      goto LABEL_16;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x80) == 0)
  {
LABEL_16:
    if ((v4 & 0x40) == 0)
      goto LABEL_17;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x40) == 0)
  {
LABEL_17:
    if ((v4 & 0x2000) == 0)
      goto LABEL_18;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x2000) == 0)
  {
LABEL_18:
    if ((v4 & 0x200) == 0)
      goto LABEL_19;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(double *)(v3 + 112));
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x200) == 0)
  {
LABEL_19:
    if ((v4 & 0x100) == 0)
      goto LABEL_20;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(double *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x100) == 0)
  {
LABEL_20:
    if ((v4 & 0x400) == 0)
      goto LABEL_21;
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(double *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x400) == 0)
  {
LABEL_21:
    if ((v4 & 0x4000) == 0)
      goto LABEL_22;
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(double *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x4000) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000) == 0)
      goto LABEL_23;
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(double *)(v3 + 120));
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x8000) == 0)
  {
LABEL_23:
    if ((v4 & 0x20000) == 0)
      goto LABEL_24;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(double *)(v3 + 128));
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x20000) == 0)
  {
LABEL_24:
    if ((v4 & 0x10000) == 0)
      goto LABEL_25;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(double *)(v3 + 144));
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x10000) == 0)
  {
LABEL_25:
    if ((v4 & 0x800) == 0)
      goto LABEL_26;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(double *)(v3 + 136));
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x800) == 0)
  {
LABEL_26:
    if ((v4 & 0x1000) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 104));
  }
LABEL_52:
  this = PB::Writer::write(a2, *(double *)(v3 + 96));
  if ((*(_DWORD *)(v3 + 216) & 0x1000) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 104));
  return this;
}

uint64_t CMMsl::SteadinessModelTemporalEntropyFeatures::hash_value(CMMsl::SteadinessModelTemporalEntropyFeatures *this)
{
  int v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;

  v1 = *((_DWORD *)this + 54);
  if ((v1 & 0x80000) == 0)
  {
    v2 = 0.0;
    if ((v1 & 0x40000) != 0)
      goto LABEL_3;
LABEL_81:
    v3 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_6;
LABEL_82:
    v4 = 0.0;
    if ((v1 & 1) != 0)
      goto LABEL_9;
LABEL_83:
    v5 = 0.0;
    if ((v1 & 0x100000) != 0)
      goto LABEL_12;
LABEL_84:
    v6 = 0.0;
    if ((v1 & 0x400000) != 0)
      goto LABEL_15;
LABEL_85:
    v7 = 0.0;
    if ((v1 & 0x200000) != 0)
      goto LABEL_18;
LABEL_86:
    v8 = 0.0;
    if ((v1 & 0x800000) != 0)
      goto LABEL_21;
LABEL_87:
    v9 = 0.0;
    if ((v1 & 0x2000000) != 0)
      goto LABEL_24;
LABEL_88:
    v10 = 0.0;
    if ((v1 & 0x1000000) != 0)
      goto LABEL_27;
LABEL_89:
    v11 = 0.0;
    if ((v1 & 4) != 0)
      goto LABEL_30;
LABEL_90:
    v12 = 0.0;
    if ((v1 & 0x10) != 0)
      goto LABEL_33;
LABEL_91:
    v13 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_36;
LABEL_92:
    v14 = 0.0;
    if ((v1 & 0x20) != 0)
      goto LABEL_39;
LABEL_93:
    v15 = 0.0;
    if ((v1 & 0x80) != 0)
      goto LABEL_42;
LABEL_94:
    v16 = 0.0;
    if ((v1 & 0x40) != 0)
      goto LABEL_45;
LABEL_95:
    v17 = 0.0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_48;
LABEL_96:
    v18 = 0.0;
    if ((v1 & 0x200) != 0)
      goto LABEL_51;
LABEL_97:
    v19 = 0.0;
    if ((v1 & 0x100) != 0)
      goto LABEL_54;
LABEL_98:
    v20 = 0.0;
    if ((v1 & 0x400) != 0)
      goto LABEL_57;
LABEL_99:
    v21 = 0.0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_60;
LABEL_100:
    v22 = 0.0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_63;
LABEL_101:
    v23 = 0.0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_66;
LABEL_102:
    v24 = 0.0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_69;
LABEL_103:
    v25 = 0.0;
    if ((v1 & 0x800) != 0)
      goto LABEL_72;
    goto LABEL_104;
  }
  v2 = *((double *)this + 20);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 0x40000) == 0)
    goto LABEL_81;
LABEL_3:
  v3 = *((double *)this + 19);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_82;
LABEL_6:
  v4 = *((double *)this + 2);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_83;
LABEL_9:
  v5 = *((double *)this + 1);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((v1 & 0x100000) == 0)
    goto LABEL_84;
LABEL_12:
  v6 = *((double *)this + 21);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((v1 & 0x400000) == 0)
    goto LABEL_85;
LABEL_15:
  v7 = *((double *)this + 23);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((v1 & 0x200000) == 0)
    goto LABEL_86;
LABEL_18:
  v8 = *((double *)this + 22);
  if (v8 == 0.0)
    v8 = 0.0;
  if ((v1 & 0x800000) == 0)
    goto LABEL_87;
LABEL_21:
  v9 = *((double *)this + 24);
  if (v9 == 0.0)
    v9 = 0.0;
  if ((v1 & 0x2000000) == 0)
    goto LABEL_88;
LABEL_24:
  v10 = *((double *)this + 26);
  if (v10 == 0.0)
    v10 = 0.0;
  if ((v1 & 0x1000000) == 0)
    goto LABEL_89;
LABEL_27:
  v11 = *((double *)this + 25);
  if (v11 == 0.0)
    v11 = 0.0;
  if ((v1 & 4) == 0)
    goto LABEL_90;
LABEL_30:
  v12 = *((double *)this + 3);
  if (v12 == 0.0)
    v12 = 0.0;
  if ((v1 & 0x10) == 0)
    goto LABEL_91;
LABEL_33:
  v13 = *((double *)this + 5);
  if (v13 == 0.0)
    v13 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_92;
LABEL_36:
  v14 = *((double *)this + 4);
  if (v14 == 0.0)
    v14 = 0.0;
  if ((v1 & 0x20) == 0)
    goto LABEL_93;
LABEL_39:
  v15 = *((double *)this + 6);
  if (v15 == 0.0)
    v15 = 0.0;
  if ((v1 & 0x80) == 0)
    goto LABEL_94;
LABEL_42:
  v16 = *((double *)this + 8);
  if (v16 == 0.0)
    v16 = 0.0;
  if ((v1 & 0x40) == 0)
    goto LABEL_95;
LABEL_45:
  v17 = *((double *)this + 7);
  if (v17 == 0.0)
    v17 = 0.0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_96;
LABEL_48:
  v18 = *((double *)this + 14);
  if (v18 == 0.0)
    v18 = 0.0;
  if ((v1 & 0x200) == 0)
    goto LABEL_97;
LABEL_51:
  v19 = *((double *)this + 10);
  if (v19 == 0.0)
    v19 = 0.0;
  if ((v1 & 0x100) == 0)
    goto LABEL_98;
LABEL_54:
  v20 = *((double *)this + 9);
  if (v20 == 0.0)
    v20 = 0.0;
  if ((v1 & 0x400) == 0)
    goto LABEL_99;
LABEL_57:
  v21 = *((double *)this + 11);
  if (v21 == 0.0)
    v21 = 0.0;
  if ((v1 & 0x4000) == 0)
    goto LABEL_100;
LABEL_60:
  v22 = *((double *)this + 15);
  if (v22 == 0.0)
    v22 = 0.0;
  if ((v1 & 0x8000) == 0)
    goto LABEL_101;
LABEL_63:
  v23 = *((double *)this + 16);
  if (v23 == 0.0)
    v23 = 0.0;
  if ((v1 & 0x20000) == 0)
    goto LABEL_102;
LABEL_66:
  v24 = *((double *)this + 18);
  if (v24 == 0.0)
    v24 = 0.0;
  if ((v1 & 0x10000) == 0)
    goto LABEL_103;
LABEL_69:
  v25 = *((double *)this + 17);
  if (v25 == 0.0)
    v25 = 0.0;
  if ((v1 & 0x800) != 0)
  {
LABEL_72:
    v26 = *((double *)this + 12);
    if (v26 == 0.0)
      v26 = 0.0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_75;
LABEL_105:
    v27 = 0.0;
    return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13 ^ *(_QWORD *)&v14 ^ *(_QWORD *)&v15 ^ *(_QWORD *)&v16 ^ *(_QWORD *)&v17 ^ *(_QWORD *)&v18 ^ *(_QWORD *)&v19 ^ *(_QWORD *)&v20 ^ *(_QWORD *)&v21 ^ *(_QWORD *)&v22 ^ *(_QWORD *)&v23 ^ *(_QWORD *)&v24 ^ *(_QWORD *)&v25 ^ *(_QWORD *)&v26 ^ *(_QWORD *)&v27;
  }
LABEL_104:
  v26 = 0.0;
  if ((v1 & 0x1000) == 0)
    goto LABEL_105;
LABEL_75:
  v27 = *((double *)this + 13);
  if (v27 == 0.0)
    v27 = 0.0;
  return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13 ^ *(_QWORD *)&v14 ^ *(_QWORD *)&v15 ^ *(_QWORD *)&v16 ^ *(_QWORD *)&v17 ^ *(_QWORD *)&v18 ^ *(_QWORD *)&v19 ^ *(_QWORD *)&v20 ^ *(_QWORD *)&v21 ^ *(_QWORD *)&v22 ^ *(_QWORD *)&v23 ^ *(_QWORD *)&v24 ^ *(_QWORD *)&v25 ^ *(_QWORD *)&v26 ^ *(_QWORD *)&v27;
}

void CMMsl::StepCadenceToStrideLengthBin::~StepCadenceToStrideLengthBin(CMMsl::StepCadenceToStrideLengthBin *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::StepCadenceToStrideLengthBin::StepCadenceToStrideLengthBin(CMMsl::StepCadenceToStrideLengthBin *this, const CMMsl::StepCadenceToStrideLengthBin *a2)
{
  char v2;
  char v3;
  int v4;
  double result;
  int v6;

  *(_QWORD *)this = &off_251361298;
  *((_DWORD *)this + 10) = 0;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 8) != 0)
  {
    v4 = *((_DWORD *)a2 + 8);
    v3 = 8;
    *((_BYTE *)this + 40) = 8;
    *((_DWORD *)this + 8) = v4;
    v2 = *((_BYTE *)a2 + 40);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 40) & 1) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 1);
    v3 |= 1u;
    *((_BYTE *)this + 40) = v3;
    *((double *)this + 1) = result;
    v2 = *((_BYTE *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    result = *((double *)a2 + 2);
    v3 |= 2u;
    *((_BYTE *)this + 40) = v3;
    *((double *)this + 2) = result;
    v2 = *((_BYTE *)a2 + 40);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0)
        return result;
LABEL_12:
      result = *((double *)a2 + 3);
      *((_BYTE *)this + 40) = v3 | 4;
      *((double *)this + 3) = result;
      return result;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v6 = *((_DWORD *)a2 + 9);
  v3 |= 0x10u;
  *((_BYTE *)this + 40) = v3;
  *((_DWORD *)this + 9) = v6;
  if ((*((_BYTE *)a2 + 40) & 4) != 0)
    goto LABEL_12;
  return result;
}

uint64_t CMMsl::StepCadenceToStrideLengthBin::operator=(uint64_t a1, const CMMsl::StepCadenceToStrideLengthBin *a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  if ((const CMMsl::StepCadenceToStrideLengthBin *)a1 != a2)
  {
    CMMsl::StepCadenceToStrideLengthBin::StepCadenceToStrideLengthBin((CMMsl::StepCadenceToStrideLengthBin *)&v8, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v9 = v3;
    *(_QWORD *)&v3 = *(_QWORD *)(a1 + 24);
    v4 = *(_QWORD *)(a1 + 32);
    v5 = v11;
    *(_QWORD *)(a1 + 24) = v10;
    *(_QWORD *)(a1 + 32) = v5;
    v6 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v12;
    v12 = v6;
    v10 = v3;
    v11 = v4;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::StepCadenceToStrideLengthBin *a2, CMMsl::StepCadenceToStrideLengthBin *a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  double result;

  v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  v4 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v7;
  result = *((double *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((double *)a2 + 3) = result;
  return result;
}

double CMMsl::StepCadenceToStrideLengthBin::StepCadenceToStrideLengthBin(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_251361298;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_251361298;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  return result;
}

uint64_t CMMsl::StepCadenceToStrideLengthBin::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  void (**v9)(CMMsl::StepCadenceToStrideLengthBin *__hidden);
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  if (a1 != a2)
  {
    v9 = &off_251361298;
    v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    v4 = *(_QWORD *)(a2 + 24);
    v13 = *(_DWORD *)(a1 + 40);
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    v10 = v5;
    *(_QWORD *)&v5 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 40) = v3;
    v7 = *(_QWORD *)(a1 + 24);
    v6 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = v5;
    v11 = v7;
    v12 = v6;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::StepCadenceToStrideLengthBin::formatText(CMMsl::StepCadenceToStrideLengthBin *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "begin", *((double *)this + 1));
    v5 = *((_BYTE *)this + 40);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*((_BYTE *)this + 40) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "bin");
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(a2, "state");
    if ((*((_BYTE *)this + 40) & 4) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(a2, "end", *((double *)this + 2));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 0x10) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 4) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "strideLength", *((double *)this + 3));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::StepCadenceToStrideLengthBin::readFrom(CMMsl::StepCadenceToStrideLengthBin *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  unint64_t v38;
  char v39;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_72;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 40) |= 8u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v32 = 0;
          v33 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_66;
            }
            v34 = v20++;
            v35 = *(_BYTE *)(v21 + v34);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v35 & 0x7F) << v32;
            if ((v35 & 0x80) == 0)
              break;
            v32 += 7;
            v14 = v33++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_65:
              v2 = v34 + 1;
              goto LABEL_66;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
          goto LABEL_65;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_66;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_66:
        *((_DWORD *)this + 8) = v24;
        break;
      case 2u:
        *((_BYTE *)this + 40) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_45;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_61;
      case 3u:
        *((_BYTE *)this + 40) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_45;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_61;
      case 4u:
        *((_BYTE *)this + 40) |= 0x10u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v36 = 0;
          v37 = 0;
          v30 = 0;
          if (v2 <= v26)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_71;
            }
            v38 = v26++;
            v39 = *(_BYTE *)(v27 + v38);
            *((_QWORD *)a2 + 1) = v26;
            v30 |= (unint64_t)(v39 & 0x7F) << v36;
            if ((v39 & 0x80) == 0)
              break;
            v36 += 7;
            v14 = v37++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_70:
              v2 = v38 + 1;
              goto LABEL_71;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v30) = 0;
          goto LABEL_70;
        }
        v28 = 0;
        v29 = 0;
        v30 = 0;
        do
        {
          v2 = v26 + 1;
          *((_QWORD *)a2 + 1) = v26 + 1;
          v31 = *(_BYTE *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0)
            goto LABEL_71;
          v28 += 7;
          v26 = v2;
          v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_71:
        *((_DWORD *)this + 9) = v30;
        break;
      case 5u:
        *((_BYTE *)this + 40) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_61:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_45:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_72:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::StepCadenceToStrideLengthBin::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 40);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(this + 40) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 24));
  }
LABEL_10:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_BYTE *)(v3 + 40) & 4) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 24));
  return this;
}

uint64_t CMMsl::StepCadenceToStrideLengthBin::hash_value(CMMsl::StepCadenceToStrideLengthBin *this)
{
  uint64_t v1;
  double v2;
  double v3;
  uint64_t v4;
  double v5;

  if ((*((_BYTE *)this + 40) & 8) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 40) & 1) != 0)
      goto LABEL_3;
LABEL_14:
    v2 = 0.0;
    if ((*((_BYTE *)this + 40) & 2) != 0)
      goto LABEL_6;
LABEL_15:
    v3 = 0.0;
    if ((*((_BYTE *)this + 40) & 0x10) != 0)
      goto LABEL_9;
    goto LABEL_16;
  }
  v1 = *((unsigned int *)this + 8);
  if ((*((_BYTE *)this + 40) & 1) == 0)
    goto LABEL_14;
LABEL_3:
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 40) & 2) == 0)
    goto LABEL_15;
LABEL_6:
  v3 = *((double *)this + 2);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((*((_BYTE *)this + 40) & 0x10) != 0)
  {
LABEL_9:
    v4 = *((unsigned int *)this + 9);
    if ((*((_BYTE *)this + 40) & 4) != 0)
      goto LABEL_10;
LABEL_17:
    v5 = 0.0;
    return *(_QWORD *)&v2 ^ v1 ^ *(_QWORD *)&v3 ^ v4 ^ *(_QWORD *)&v5;
  }
LABEL_16:
  v4 = 0;
  if ((*((_BYTE *)this + 40) & 4) == 0)
    goto LABEL_17;
LABEL_10:
  v5 = *((double *)this + 3);
  if (v5 == 0.0)
    v5 = 0.0;
  return *(_QWORD *)&v2 ^ v1 ^ *(_QWORD *)&v3 ^ v4 ^ *(_QWORD *)&v5;
}

void CMMsl::StepCountEntry::~StepCountEntry(CMMsl::StepCountEntry *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_2513612D0;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    sub_242910C5C(v2);
  v3 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  PB::Base::~Base(this);
}

{
  CMMsl::StepCountEntry::~StepCountEntry(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::StepCountEntry *CMMsl::StepCountEntry::StepCountEntry(CMMsl::StepCountEntry *this, const CMMsl::StepCountEntry *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  char v25;
  CMMsl::AccelerometerPace *v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;

  *(_QWORD *)this = &off_2513612D0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 38) = 0;
  v4 = *((_DWORD *)a2 + 38);
  if ((v4 & 0x80) != 0)
  {
    v6 = *((_QWORD *)a2 + 11);
    v5 = 128;
    *((_DWORD *)this + 38) = 128;
    *((_QWORD *)this + 11) = v6;
    v4 = *((_DWORD *)a2 + 38);
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = 0;
  if ((v4 & 0x40) != 0)
  {
LABEL_5:
    v7 = *((_QWORD *)a2 + 10);
    v5 |= 0x40u;
    *((_DWORD *)this + 38) = v5;
    *((_QWORD *)this + 10) = v7;
    v4 = *((_DWORD *)a2 + 38);
  }
LABEL_6:
  if ((v4 & 0x10) != 0)
  {
    v13 = *((_QWORD *)a2 + 6);
    v5 |= 0x10u;
    *((_DWORD *)this + 38) = v5;
    *((_QWORD *)this + 6) = v13;
    v4 = *((_DWORD *)a2 + 38);
    if ((v4 & 0x100) == 0)
    {
LABEL_8:
      if ((v4 & 8) == 0)
        goto LABEL_9;
      goto LABEL_22;
    }
  }
  else if ((v4 & 0x100) == 0)
  {
    goto LABEL_8;
  }
  v14 = *((_DWORD *)a2 + 24);
  v5 |= 0x100u;
  *((_DWORD *)this + 38) = v5;
  *((_DWORD *)this + 24) = v14;
  v4 = *((_DWORD *)a2 + 38);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  v15 = *((_QWORD *)a2 + 5);
  v5 |= 8u;
  *((_DWORD *)this + 38) = v5;
  *((_QWORD *)this + 5) = v15;
  v4 = *((_DWORD *)a2 + 38);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 0x4000) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  v16 = *((_QWORD *)a2 + 8);
  v5 |= 0x20u;
  *((_DWORD *)this + 38) = v5;
  *((_QWORD *)this + 8) = v16;
  v4 = *((_DWORD *)a2 + 38);
  if ((v4 & 0x4000) == 0)
  {
LABEL_11:
    if ((v4 & 0x8000) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  v17 = *((_DWORD *)a2 + 30);
  v5 |= 0x4000u;
  *((_DWORD *)this + 38) = v5;
  *((_DWORD *)this + 30) = v17;
  v4 = *((_DWORD *)a2 + 38);
  if ((v4 & 0x8000) == 0)
  {
LABEL_12:
    if ((v4 & 4) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  v18 = *((_DWORD *)a2 + 31);
  v5 |= 0x8000u;
  *((_DWORD *)this + 38) = v5;
  *((_DWORD *)this + 31) = v18;
  v4 = *((_DWORD *)a2 + 38);
  if ((v4 & 4) == 0)
  {
LABEL_13:
    if ((v4 & 2) == 0)
      goto LABEL_14;
    goto LABEL_27;
  }
LABEL_26:
  v19 = *((_QWORD *)a2 + 4);
  v5 |= 4u;
  *((_DWORD *)this + 38) = v5;
  *((_QWORD *)this + 4) = v19;
  v4 = *((_DWORD *)a2 + 38);
  if ((v4 & 2) == 0)
  {
LABEL_14:
    if ((v4 & 1) == 0)
      goto LABEL_15;
LABEL_28:
    v21 = *((_QWORD *)a2 + 2);
    v5 |= 1u;
    *((_DWORD *)this + 38) = v5;
    *((_QWORD *)this + 2) = v21;
    if ((*((_DWORD *)a2 + 38) & 0x80000) == 0)
      goto LABEL_17;
    goto LABEL_16;
  }
LABEL_27:
  v20 = *((_QWORD *)a2 + 3);
  v5 |= 2u;
  *((_DWORD *)this + 38) = v5;
  *((_QWORD *)this + 3) = v20;
  v4 = *((_DWORD *)a2 + 38);
  if ((v4 & 1) != 0)
    goto LABEL_28;
LABEL_15:
  if ((v4 & 0x80000) != 0)
  {
LABEL_16:
    v8 = *((_DWORD *)a2 + 35);
    *((_DWORD *)this + 38) = v5 | 0x80000;
    *((_DWORD *)this + 35) = v8;
  }
LABEL_17:
  if (*((_QWORD *)a2 + 9))
  {
    v9 = operator new();
    v10 = v9;
    v11 = (__int128 *)*((_QWORD *)a2 + 9);
    if (*((char *)v11 + 23) < 0)
    {
      sub_242910CE8((_BYTE *)v9, *(void **)v11, *((_QWORD *)v11 + 1));
    }
    else
    {
      v12 = *v11;
      *(_QWORD *)(v9 + 16) = *((_QWORD *)v11 + 2);
      *(_OWORD *)v9 = v12;
    }
    v22 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v10;
    if (v22)
      sub_242910C5C(v22);
  }
  v23 = *((_DWORD *)a2 + 38);
  if ((v23 & 0x200000) != 0)
  {
    v24 = *((_BYTE *)a2 + 148);
    *((_DWORD *)this + 38) |= 0x200000u;
    *((_BYTE *)this + 148) = v24;
    v23 = *((_DWORD *)a2 + 38);
  }
  if ((v23 & 0x400000) != 0)
  {
    v25 = *((_BYTE *)a2 + 149);
    *((_DWORD *)this + 38) |= 0x400000u;
    *((_BYTE *)this + 149) = v25;
  }
  if (*((_QWORD *)a2 + 1))
  {
    v26 = (CMMsl::AccelerometerPace *)operator new();
    v27 = CMMsl::AccelerometerPace::AccelerometerPace(v26, *((const CMMsl::AccelerometerPace **)a2 + 1));
    v28 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v29;
    if (v28)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v28 + 8))(v28, v27);
  }
  v30 = *((_DWORD *)a2 + 38);
  if ((v30 & 0x40000) != 0)
  {
    v38 = *((_DWORD *)a2 + 34);
    *((_DWORD *)this + 38) |= 0x40000u;
    *((_DWORD *)this + 34) = v38;
    v30 = *((_DWORD *)a2 + 38);
    if ((v30 & 0x100000) == 0)
    {
LABEL_42:
      if ((v30 & 0x20000) == 0)
        goto LABEL_43;
      goto LABEL_59;
    }
  }
  else if ((v30 & 0x100000) == 0)
  {
    goto LABEL_42;
  }
  v39 = *((_DWORD *)a2 + 36);
  *((_DWORD *)this + 38) |= 0x100000u;
  *((_DWORD *)this + 36) = v39;
  v30 = *((_DWORD *)a2 + 38);
  if ((v30 & 0x20000) == 0)
  {
LABEL_43:
    if ((v30 & 0x400) == 0)
      goto LABEL_44;
    goto LABEL_60;
  }
LABEL_59:
  v40 = *((_DWORD *)a2 + 33);
  *((_DWORD *)this + 38) |= 0x20000u;
  *((_DWORD *)this + 33) = v40;
  v30 = *((_DWORD *)a2 + 38);
  if ((v30 & 0x400) == 0)
  {
LABEL_44:
    if ((v30 & 0x800) == 0)
      goto LABEL_45;
    goto LABEL_61;
  }
LABEL_60:
  v41 = *((_DWORD *)a2 + 26);
  *((_DWORD *)this + 38) |= 0x400u;
  *((_DWORD *)this + 26) = v41;
  v30 = *((_DWORD *)a2 + 38);
  if ((v30 & 0x800) == 0)
  {
LABEL_45:
    if ((v30 & 0x2000) == 0)
      goto LABEL_46;
    goto LABEL_62;
  }
LABEL_61:
  v42 = *((_DWORD *)a2 + 27);
  *((_DWORD *)this + 38) |= 0x800u;
  *((_DWORD *)this + 27) = v42;
  v30 = *((_DWORD *)a2 + 38);
  if ((v30 & 0x2000) == 0)
  {
LABEL_46:
    if ((v30 & 0x200) == 0)
      goto LABEL_47;
    goto LABEL_63;
  }
LABEL_62:
  v43 = *((_DWORD *)a2 + 29);
  *((_DWORD *)this + 38) |= 0x2000u;
  *((_DWORD *)this + 29) = v43;
  v30 = *((_DWORD *)a2 + 38);
  if ((v30 & 0x200) == 0)
  {
LABEL_47:
    if ((v30 & 0x1000) == 0)
      goto LABEL_49;
    goto LABEL_48;
  }
LABEL_63:
  v44 = *((_DWORD *)a2 + 25);
  *((_DWORD *)this + 38) |= 0x200u;
  *((_DWORD *)this + 25) = v44;
  if ((*((_DWORD *)a2 + 38) & 0x1000) != 0)
  {
LABEL_48:
    v31 = *((_DWORD *)a2 + 28);
    *((_DWORD *)this + 38) |= 0x1000u;
    *((_DWORD *)this + 28) = v31;
  }
LABEL_49:
  if (*((_QWORD *)a2 + 7))
  {
    v32 = operator new();
    v33 = *((_QWORD *)a2 + 7);
    *(_QWORD *)v32 = &off_25135F628;
    *(_DWORD *)(v32 + 12) = 0;
    if ((*(_BYTE *)(v33 + 12) & 1) != 0)
    {
      v34 = *(_DWORD *)(v33 + 8);
      *(_BYTE *)(v32 + 12) = 1;
      *(_DWORD *)(v32 + 8) = v34;
    }
    v35 = *((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v32;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  }
  if ((*((_BYTE *)a2 + 154) & 1) != 0)
  {
    v36 = *((_DWORD *)a2 + 32);
    *((_DWORD *)this + 38) |= 0x10000u;
    *((_DWORD *)this + 32) = v36;
  }
  return this;
}

CMMsl *CMMsl::StepCountEntry::operator=(CMMsl *a1, const CMMsl::StepCountEntry *a2)
{
  CMMsl::StepCountEntry *v3;
  _BYTE v5[160];

  if (a1 != a2)
  {
    CMMsl::StepCountEntry::StepCountEntry((CMMsl::StepCountEntry *)v5, a2);
    CMMsl::swap(a1, (CMMsl::StepCountEntry *)v5, v3);
    CMMsl::StepCountEntry::~StepCountEntry((CMMsl::StepCountEntry *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::StepCountEntry *a2, CMMsl::StepCountEntry *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  double result;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v3;
  v4 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v4;
  v5 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v5;
  v6 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v6;
  v7 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v7;
  v8 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v8;
  v9 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v9;
  v10 = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v10;
  v11 = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v11;
  v12 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v12;
  v13 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v13;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  v15 = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v15;
  v16 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v16;
  LOBYTE(v16) = *((_BYTE *)this + 148);
  *((_BYTE *)this + 148) = *((_BYTE *)a2 + 148);
  *((_BYTE *)a2 + 148) = v16;
  LOBYTE(v16) = *((_BYTE *)this + 149);
  *((_BYTE *)this + 149) = *((_BYTE *)a2 + 149);
  *((_BYTE *)a2 + 149) = v16;
  v17 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v17;
  LODWORD(v17) = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v17;
  LODWORD(v17) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v17;
  LODWORD(v17) = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v17;
  LODWORD(v17) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v17;
  LODWORD(v17) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v17;
  LODWORD(v17) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v17;
  LODWORD(v17) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v17;
  LODWORD(v17) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v17;
  v18 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v18;
  LODWORD(v18) = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v18;
  return result;
}

uint64_t CMMsl::StepCountEntry::StepCountEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = &off_2513612D0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  v4 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  v5 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v4;
  if (v5)
    sub_242910C5C(v5);
  *(_BYTE *)(a1 + 148) = *(_BYTE *)(a2 + 148);
  *(_BYTE *)(a1 + 149) = *(_BYTE *)(a2 + 149);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  v9 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v8;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  return a1;
}

CMMsl *CMMsl::StepCountEntry::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::StepCountEntry *v3;
  _BYTE v5[160];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::StepCountEntry::StepCountEntry((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::StepCountEntry *)v5, v3);
    CMMsl::StepCountEntry::~StepCountEntry((CMMsl::StepCountEntry *)v5);
  }
  return a1;
}

uint64_t CMMsl::StepCountEntry::formatText(CMMsl::StepCountEntry *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "accelerometerPace");
  v6 = *((_DWORD *)this + 38);
  if ((v6 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "activeTime", *((double *)this + 2));
    v6 = *((_DWORD *)this + 38);
    if ((v6 & 0x100) == 0)
    {
LABEL_5:
      if ((v6 & 2) == 0)
        goto LABEL_6;
      goto LABEL_36;
    }
  }
  else if ((v6 & 0x100) == 0)
  {
    goto LABEL_5;
  }
  PB::TextFormatter::format(a2, "count");
  v6 = *((_DWORD *)this + 38);
  if ((v6 & 2) == 0)
  {
LABEL_6:
    if ((v6 & 4) == 0)
      goto LABEL_7;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "currentCadence", *((double *)this + 3));
  v6 = *((_DWORD *)this + 38);
  if ((v6 & 4) == 0)
  {
LABEL_7:
    if ((v6 & 8) == 0)
      goto LABEL_8;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "currentPace", *((double *)this + 4));
  v6 = *((_DWORD *)this + 38);
  if ((v6 & 8) == 0)
  {
LABEL_8:
    if ((v6 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "distance", *((double *)this + 5));
  v6 = *((_DWORD *)this + 38);
  if ((v6 & 0x200) == 0)
  {
LABEL_9:
    if ((v6 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "distanceSource");
  v6 = *((_DWORD *)this + 38);
  if ((v6 & 0x400) == 0)
  {
LABEL_10:
    if ((v6 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "elevationAscended");
  v6 = *((_DWORD *)this + 38);
  if ((v6 & 0x800) == 0)
  {
LABEL_11:
    if ((v6 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "elevationDescended");
  v6 = *((_DWORD *)this + 38);
  if ((v6 & 0x1000) == 0)
  {
LABEL_12:
    if ((v6 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "falseStepDetectorState");
  v6 = *((_DWORD *)this + 38);
  if ((v6 & 0x2000) == 0)
  {
LABEL_13:
    if ((v6 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "falseStepsSuppressed");
  v6 = *((_DWORD *)this + 38);
  if ((v6 & 0x10) == 0)
  {
LABEL_14:
    if ((v6 & 0x4000) == 0)
      goto LABEL_15;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "firstStepTime", *((double *)this + 6));
  v6 = *((_DWORD *)this + 38);
  if ((v6 & 0x4000) == 0)
  {
LABEL_15:
    if ((v6 & 0x8000) == 0)
      goto LABEL_16;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "floorsAscended");
  v6 = *((_DWORD *)this + 38);
  if ((v6 & 0x8000) == 0)
  {
LABEL_16:
    if ((v6 & 0x200000) == 0)
      goto LABEL_17;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "floorsDescended");
  v6 = *((_DWORD *)this + 38);
  if ((v6 & 0x200000) == 0)
  {
LABEL_17:
    if ((v6 & 0x400000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "isOdometerDistance");
  if ((*((_DWORD *)this + 38) & 0x400000) != 0)
LABEL_18:
    PB::TextFormatter::format(a2, "isOdometerPace");
LABEL_19:
  v7 = *((_QWORD *)this + 7);
  if (v7)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "movementStats");
  v8 = *((_DWORD *)this + 38);
  if ((v8 & 0x10000) != 0)
  {
    PB::TextFormatter::format(a2, "paceSource");
    v8 = *((_DWORD *)this + 38);
    if ((v8 & 0x20000) == 0)
    {
LABEL_23:
      if ((v8 & 0x40000) == 0)
        goto LABEL_24;
      goto LABEL_51;
    }
  }
  else if ((v8 & 0x20000) == 0)
  {
    goto LABEL_23;
  }
  PB::TextFormatter::format(a2, "pedometerArmConstrainedState");
  v8 = *((_DWORD *)this + 38);
  if ((v8 & 0x40000) == 0)
  {
LABEL_24:
    if ((v8 & 0x20) == 0)
      goto LABEL_25;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "pushCount");
  v8 = *((_DWORD *)this + 38);
  if ((v8 & 0x20) == 0)
  {
LABEL_25:
    if ((v8 & 0x80000) == 0)
      goto LABEL_27;
    goto LABEL_26;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "rawDistance", *((double *)this + 8));
  if ((*((_DWORD *)this + 38) & 0x80000) != 0)
LABEL_26:
    PB::TextFormatter::format(a2, "recordId");
LABEL_27:
  if (*((_QWORD *)this + 9))
    PB::TextFormatter::format();
  v9 = *((_DWORD *)this + 38);
  if ((v9 & 0x40) == 0)
  {
    if ((v9 & 0x80) == 0)
      goto LABEL_31;
LABEL_55:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 11));
    if ((*((_DWORD *)this + 38) & 0x100000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_32;
  }
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 10));
  v9 = *((_DWORD *)this + 38);
  if ((v9 & 0x80) != 0)
    goto LABEL_55;
LABEL_31:
  if ((v9 & 0x100000) != 0)
LABEL_32:
    PB::TextFormatter::format(a2, "workoutType");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::StepCountEntry::readFrom(CMMsl::StepCountEntry *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  int v65;
  BOOL v66;
  unint64_t v67;
  unint64_t v68;
  int v69;
  BOOL v70;
  _DWORD *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char v76;
  unsigned int v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  char v84;
  unsigned int v85;
  uint64_t v86;
  unint64_t v87;
  char v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  char v92;
  unsigned int v93;
  uint64_t v94;
  unint64_t v95;
  char v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  char v100;
  unsigned int v101;
  uint64_t v102;
  unint64_t v103;
  char v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  char v108;
  unsigned int v109;
  uint64_t v110;
  unint64_t v111;
  char v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  char v116;
  unsigned int v117;
  uint64_t v118;
  unint64_t v119;
  char v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  char v124;
  unsigned int v125;
  uint64_t v126;
  unint64_t v127;
  char v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  char v132;
  unsigned int v133;
  uint64_t v134;
  unint64_t v135;
  char v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  char v141;
  unsigned int v142;
  uint64_t v143;
  unint64_t v144;
  char v145;
  char v146;
  unsigned int v147;
  unint64_t v148;
  char v149;
  char v150;
  unsigned int v151;
  unint64_t v152;
  char v153;
  char v154;
  unsigned int v155;
  unint64_t v156;
  char v157;
  char v158;
  unsigned int v159;
  unint64_t v160;
  char v161;
  char v162;
  unsigned int v163;
  unint64_t v164;
  char v165;
  char v166;
  unsigned int v167;
  unint64_t v168;
  char v169;
  char v170;
  unsigned int v171;
  unint64_t v172;
  char v173;
  char v174;
  unsigned int v175;
  unint64_t v176;
  char v177;
  char v178;
  unsigned int v179;
  unint64_t v180;
  char v181;
  char v182;
  unsigned int v183;
  unint64_t v184;
  char v185;
  char v186;
  unsigned int v187;
  unint64_t v188;
  char v189;
  char v190;
  unsigned int v191;
  unint64_t v192;
  char v193;
  char v194;
  unsigned int v195;
  unint64_t v196;
  char v197;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      break;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_25:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 38) |= 0x80u;
        v21 = *((_QWORD *)a2 + 1);
        if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_71;
        *((_QWORD *)this + 11) = *(_QWORD *)(*(_QWORD *)a2 + v21);
        goto LABEL_252;
      case 2u:
        *((_DWORD *)this + 38) |= 0x40u;
        v22 = *((_QWORD *)a2 + 1);
        if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_71;
        *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v22);
        goto LABEL_252;
      case 3u:
        *((_DWORD *)this + 38) |= 0x10u;
        v23 = *((_QWORD *)a2 + 1);
        if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_71;
        *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v23);
        goto LABEL_252;
      case 4u:
        *((_DWORD *)this + 38) |= 0x100u;
        v24 = *((_QWORD *)a2 + 1);
        v25 = *((_QWORD *)a2 + 2);
        v26 = *(_QWORD *)a2;
        if (v24 <= 0xFFFFFFFFFFFFFFF5 && v24 + 10 <= v25)
        {
          v27 = 0;
          v28 = 0;
          v29 = 0;
          do
          {
            v30 = v24 + 1;
            *((_QWORD *)a2 + 1) = v24 + 1;
            v31 = *(_BYTE *)(v26 + v24);
            v29 |= (unint64_t)(v31 & 0x7F) << v27;
            if ((v31 & 0x80) == 0)
              goto LABEL_256;
            v27 += 7;
            v24 = v30;
            v14 = v28++ > 8;
          }
          while (!v14);
LABEL_162:
          LODWORD(v29) = 0;
          goto LABEL_256;
        }
        v146 = 0;
        v147 = 0;
        v29 = 0;
        if (v25 <= v24)
          v25 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v25 == v24)
          {
            LODWORD(v29) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v148 = v24 + 1;
            v149 = *(_BYTE *)(v26 + v24);
            *((_QWORD *)a2 + 1) = v148;
            v29 |= (unint64_t)(v149 & 0x7F) << v146;
            if (v149 < 0)
            {
              v146 += 7;
              v24 = v148;
              v14 = v147++ > 8;
              if (v14)
                goto LABEL_162;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v29) = 0;
          }
          break;
        }
LABEL_256:
        *((_DWORD *)this + 24) = v29;
        goto LABEL_20;
      case 5u:
        *((_DWORD *)this + 38) |= 8u;
        v32 = *((_QWORD *)a2 + 1);
        if (v32 > 0xFFFFFFFFFFFFFFF7 || v32 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_71;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v32);
        goto LABEL_252;
      case 6u:
        *((_DWORD *)this + 38) |= 0x20u;
        v33 = *((_QWORD *)a2 + 1);
        if (v33 > 0xFFFFFFFFFFFFFFF7 || v33 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_71;
        *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v33);
        goto LABEL_252;
      case 7u:
        *((_DWORD *)this + 38) |= 0x4000u;
        v34 = *((_QWORD *)a2 + 1);
        v35 = *((_QWORD *)a2 + 2);
        v36 = *(_QWORD *)a2;
        if (v34 <= 0xFFFFFFFFFFFFFFF5 && v34 + 10 <= v35)
        {
          v37 = 0;
          v38 = 0;
          v39 = 0;
          do
          {
            v40 = v34 + 1;
            *((_QWORD *)a2 + 1) = v34 + 1;
            v41 = *(_BYTE *)(v36 + v34);
            v39 |= (unint64_t)(v41 & 0x7F) << v37;
            if ((v41 & 0x80) == 0)
              goto LABEL_260;
            v37 += 7;
            v34 = v40;
            v14 = v38++ > 8;
          }
          while (!v14);
LABEL_169:
          LODWORD(v39) = 0;
          goto LABEL_260;
        }
        v150 = 0;
        v151 = 0;
        v39 = 0;
        if (v35 <= v34)
          v35 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v35 == v34)
          {
            LODWORD(v39) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v152 = v34 + 1;
            v153 = *(_BYTE *)(v36 + v34);
            *((_QWORD *)a2 + 1) = v152;
            v39 |= (unint64_t)(v153 & 0x7F) << v150;
            if (v153 < 0)
            {
              v150 += 7;
              v34 = v152;
              v14 = v151++ > 8;
              if (v14)
                goto LABEL_169;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v39) = 0;
          }
          break;
        }
LABEL_260:
        *((_DWORD *)this + 30) = v39;
        goto LABEL_20;
      case 8u:
        *((_DWORD *)this + 38) |= 0x8000u;
        v42 = *((_QWORD *)a2 + 1);
        v43 = *((_QWORD *)a2 + 2);
        v44 = *(_QWORD *)a2;
        if (v42 <= 0xFFFFFFFFFFFFFFF5 && v42 + 10 <= v43)
        {
          v45 = 0;
          v46 = 0;
          v47 = 0;
          do
          {
            v48 = v42 + 1;
            *((_QWORD *)a2 + 1) = v42 + 1;
            v49 = *(_BYTE *)(v44 + v42);
            v47 |= (unint64_t)(v49 & 0x7F) << v45;
            if ((v49 & 0x80) == 0)
              goto LABEL_264;
            v45 += 7;
            v42 = v48;
            v14 = v46++ > 8;
          }
          while (!v14);
LABEL_176:
          LODWORD(v47) = 0;
          goto LABEL_264;
        }
        v154 = 0;
        v155 = 0;
        v47 = 0;
        if (v43 <= v42)
          v43 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v43 == v42)
          {
            LODWORD(v47) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v156 = v42 + 1;
            v157 = *(_BYTE *)(v44 + v42);
            *((_QWORD *)a2 + 1) = v156;
            v47 |= (unint64_t)(v157 & 0x7F) << v154;
            if (v157 < 0)
            {
              v154 += 7;
              v42 = v156;
              v14 = v155++ > 8;
              if (v14)
                goto LABEL_176;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v47) = 0;
          }
          break;
        }
LABEL_264:
        *((_DWORD *)this + 31) = v47;
        goto LABEL_20;
      case 9u:
        *((_DWORD *)this + 38) |= 4u;
        v50 = *((_QWORD *)a2 + 1);
        if (v50 > 0xFFFFFFFFFFFFFFF7 || v50 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_71;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v50);
        goto LABEL_252;
      case 0xAu:
        *((_DWORD *)this + 38) |= 2u;
        v51 = *((_QWORD *)a2 + 1);
        if (v51 > 0xFFFFFFFFFFFFFFF7 || v51 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_71;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v51);
        goto LABEL_252;
      case 0xBu:
        *((_DWORD *)this + 38) |= 1u;
        v52 = *((_QWORD *)a2 + 1);
        if (v52 <= 0xFFFFFFFFFFFFFFF7 && v52 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v52);
LABEL_252:
          *((_QWORD *)a2 + 1) += 8;
        }
        else
        {
LABEL_71:
          *((_BYTE *)a2 + 24) = 1;
        }
        goto LABEL_20;
      case 0xCu:
        *((_DWORD *)this + 38) |= 0x80000u;
        v53 = *((_QWORD *)a2 + 1);
        v54 = *((_QWORD *)a2 + 2);
        v55 = *(_QWORD *)a2;
        if (v53 <= 0xFFFFFFFFFFFFFFF5 && v53 + 10 <= v54)
        {
          v56 = 0;
          v57 = 0;
          v58 = 0;
          do
          {
            v59 = v53 + 1;
            *((_QWORD *)a2 + 1) = v53 + 1;
            v60 = *(_BYTE *)(v55 + v53);
            v58 |= (unint64_t)(v60 & 0x7F) << v56;
            if ((v60 & 0x80) == 0)
              goto LABEL_268;
            v56 += 7;
            v53 = v59;
            v14 = v57++ > 8;
          }
          while (!v14);
LABEL_183:
          LODWORD(v58) = 0;
          goto LABEL_268;
        }
        v158 = 0;
        v159 = 0;
        v58 = 0;
        if (v54 <= v53)
          v54 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v54 == v53)
          {
            LODWORD(v58) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v160 = v53 + 1;
            v161 = *(_BYTE *)(v55 + v53);
            *((_QWORD *)a2 + 1) = v160;
            v58 |= (unint64_t)(v161 & 0x7F) << v158;
            if (v161 < 0)
            {
              v158 += 7;
              v53 = v160;
              v14 = v159++ > 8;
              if (v14)
                goto LABEL_183;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v58) = 0;
          }
          break;
        }
LABEL_268:
        *((_DWORD *)this + 35) = v58;
        goto LABEL_20;
      case 0xDu:
        v61 = (_QWORD *)operator new();
        v61[1] = 0;
        v61[2] = 0;
        *v61 = 0;
        v62 = *((_QWORD *)this + 9);
        *((_QWORD *)this + 9) = v61;
        if (v62)
          sub_242910C5C(v62);
        PB::Reader::read();
        goto LABEL_20;
      case 0xEu:
        *((_DWORD *)this + 38) |= 0x200000u;
        v63 = *((_QWORD *)a2 + 1);
        if (v63 >= *((_QWORD *)a2 + 2))
        {
          v66 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v64 = v63 + 1;
          v65 = *(unsigned __int8 *)(*(_QWORD *)a2 + v63);
          *((_QWORD *)a2 + 1) = v64;
          v66 = v65 != 0;
        }
        *((_BYTE *)this + 148) = v66;
        goto LABEL_20;
      case 0xFu:
        *((_DWORD *)this + 38) |= 0x400000u;
        v67 = *((_QWORD *)a2 + 1);
        if (v67 >= *((_QWORD *)a2 + 2))
        {
          v70 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v68 = v67 + 1;
          v69 = *(unsigned __int8 *)(*(_QWORD *)a2 + v67);
          *((_QWORD *)a2 + 1) = v68;
          v70 = v69 != 0;
        }
        *((_BYTE *)this + 149) = v70;
        goto LABEL_20;
      case 0x10u:
        v71 = (_DWORD *)operator new();
        *(_QWORD *)v71 = &off_25135BE98;
        v71[8] = 0;
        v72 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v71;
        if (v72)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
          v71 = (_DWORD *)*((_QWORD *)this + 1);
        }
        goto LABEL_146;
      case 0x11u:
        *((_DWORD *)this + 38) |= 0x40000u;
        v73 = *((_QWORD *)a2 + 1);
        v74 = *((_QWORD *)a2 + 2);
        v75 = *(_QWORD *)a2;
        if (v73 <= 0xFFFFFFFFFFFFFFF5 && v73 + 10 <= v74)
        {
          v76 = 0;
          v77 = 0;
          v78 = 0;
          do
          {
            v79 = v73 + 1;
            *((_QWORD *)a2 + 1) = v73 + 1;
            v80 = *(_BYTE *)(v75 + v73);
            v78 |= (unint64_t)(v80 & 0x7F) << v76;
            if ((v80 & 0x80) == 0)
              goto LABEL_272;
            v76 += 7;
            v73 = v79;
            v14 = v77++ > 8;
          }
          while (!v14);
LABEL_194:
          LODWORD(v78) = 0;
          goto LABEL_272;
        }
        v162 = 0;
        v163 = 0;
        v78 = 0;
        if (v74 <= v73)
          v74 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v74 == v73)
          {
            LODWORD(v78) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v164 = v73 + 1;
            v165 = *(_BYTE *)(v75 + v73);
            *((_QWORD *)a2 + 1) = v164;
            v78 |= (unint64_t)(v165 & 0x7F) << v162;
            if (v165 < 0)
            {
              v162 += 7;
              v73 = v164;
              v14 = v163++ > 8;
              if (v14)
                goto LABEL_194;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v78) = 0;
          }
          break;
        }
LABEL_272:
        *((_DWORD *)this + 34) = v78;
        goto LABEL_20;
      case 0x12u:
        *((_DWORD *)this + 38) |= 0x100000u;
        v81 = *((_QWORD *)a2 + 1);
        v82 = *((_QWORD *)a2 + 2);
        v83 = *(_QWORD *)a2;
        if (v81 <= 0xFFFFFFFFFFFFFFF5 && v81 + 10 <= v82)
        {
          v84 = 0;
          v85 = 0;
          v86 = 0;
          do
          {
            v87 = v81 + 1;
            *((_QWORD *)a2 + 1) = v81 + 1;
            v88 = *(_BYTE *)(v83 + v81);
            v86 |= (unint64_t)(v88 & 0x7F) << v84;
            if ((v88 & 0x80) == 0)
              goto LABEL_276;
            v84 += 7;
            v81 = v87;
            v14 = v85++ > 8;
          }
          while (!v14);
LABEL_201:
          LODWORD(v86) = 0;
          goto LABEL_276;
        }
        v166 = 0;
        v167 = 0;
        v86 = 0;
        if (v82 <= v81)
          v82 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v82 == v81)
          {
            LODWORD(v86) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v168 = v81 + 1;
            v169 = *(_BYTE *)(v83 + v81);
            *((_QWORD *)a2 + 1) = v168;
            v86 |= (unint64_t)(v169 & 0x7F) << v166;
            if (v169 < 0)
            {
              v166 += 7;
              v81 = v168;
              v14 = v167++ > 8;
              if (v14)
                goto LABEL_201;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v86) = 0;
          }
          break;
        }
LABEL_276:
        *((_DWORD *)this + 36) = v86;
        goto LABEL_20;
      case 0x13u:
        *((_DWORD *)this + 38) |= 0x20000u;
        v89 = *((_QWORD *)a2 + 1);
        v90 = *((_QWORD *)a2 + 2);
        v91 = *(_QWORD *)a2;
        if (v89 <= 0xFFFFFFFFFFFFFFF5 && v89 + 10 <= v90)
        {
          v92 = 0;
          v93 = 0;
          v94 = 0;
          do
          {
            v95 = v89 + 1;
            *((_QWORD *)a2 + 1) = v89 + 1;
            v96 = *(_BYTE *)(v91 + v89);
            v94 |= (unint64_t)(v96 & 0x7F) << v92;
            if ((v96 & 0x80) == 0)
              goto LABEL_280;
            v92 += 7;
            v89 = v95;
            v14 = v93++ > 8;
          }
          while (!v14);
LABEL_208:
          LODWORD(v94) = 0;
          goto LABEL_280;
        }
        v170 = 0;
        v171 = 0;
        v94 = 0;
        if (v90 <= v89)
          v90 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v90 == v89)
          {
            LODWORD(v94) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v172 = v89 + 1;
            v173 = *(_BYTE *)(v91 + v89);
            *((_QWORD *)a2 + 1) = v172;
            v94 |= (unint64_t)(v173 & 0x7F) << v170;
            if (v173 < 0)
            {
              v170 += 7;
              v89 = v172;
              v14 = v171++ > 8;
              if (v14)
                goto LABEL_208;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v94) = 0;
          }
          break;
        }
LABEL_280:
        *((_DWORD *)this + 33) = v94;
        goto LABEL_20;
      case 0x14u:
        *((_DWORD *)this + 38) |= 0x400u;
        v97 = *((_QWORD *)a2 + 1);
        v98 = *((_QWORD *)a2 + 2);
        v99 = *(_QWORD *)a2;
        if (v97 <= 0xFFFFFFFFFFFFFFF5 && v97 + 10 <= v98)
        {
          v100 = 0;
          v101 = 0;
          v102 = 0;
          do
          {
            v103 = v97 + 1;
            *((_QWORD *)a2 + 1) = v97 + 1;
            v104 = *(_BYTE *)(v99 + v97);
            v102 |= (unint64_t)(v104 & 0x7F) << v100;
            if ((v104 & 0x80) == 0)
              goto LABEL_284;
            v100 += 7;
            v97 = v103;
            v14 = v101++ > 8;
          }
          while (!v14);
LABEL_215:
          LODWORD(v102) = 0;
          goto LABEL_284;
        }
        v174 = 0;
        v175 = 0;
        v102 = 0;
        if (v98 <= v97)
          v98 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v98 == v97)
          {
            LODWORD(v102) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v176 = v97 + 1;
            v177 = *(_BYTE *)(v99 + v97);
            *((_QWORD *)a2 + 1) = v176;
            v102 |= (unint64_t)(v177 & 0x7F) << v174;
            if (v177 < 0)
            {
              v174 += 7;
              v97 = v176;
              v14 = v175++ > 8;
              if (v14)
                goto LABEL_215;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v102) = 0;
          }
          break;
        }
LABEL_284:
        *((_DWORD *)this + 26) = v102;
        goto LABEL_20;
      case 0x15u:
        *((_DWORD *)this + 38) |= 0x800u;
        v105 = *((_QWORD *)a2 + 1);
        v106 = *((_QWORD *)a2 + 2);
        v107 = *(_QWORD *)a2;
        if (v105 <= 0xFFFFFFFFFFFFFFF5 && v105 + 10 <= v106)
        {
          v108 = 0;
          v109 = 0;
          v110 = 0;
          do
          {
            v111 = v105 + 1;
            *((_QWORD *)a2 + 1) = v105 + 1;
            v112 = *(_BYTE *)(v107 + v105);
            v110 |= (unint64_t)(v112 & 0x7F) << v108;
            if ((v112 & 0x80) == 0)
              goto LABEL_288;
            v108 += 7;
            v105 = v111;
            v14 = v109++ > 8;
          }
          while (!v14);
LABEL_222:
          LODWORD(v110) = 0;
          goto LABEL_288;
        }
        v178 = 0;
        v179 = 0;
        v110 = 0;
        if (v106 <= v105)
          v106 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v106 == v105)
          {
            LODWORD(v110) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v180 = v105 + 1;
            v181 = *(_BYTE *)(v107 + v105);
            *((_QWORD *)a2 + 1) = v180;
            v110 |= (unint64_t)(v181 & 0x7F) << v178;
            if (v181 < 0)
            {
              v178 += 7;
              v105 = v180;
              v14 = v179++ > 8;
              if (v14)
                goto LABEL_222;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v110) = 0;
          }
          break;
        }
LABEL_288:
        *((_DWORD *)this + 27) = v110;
        goto LABEL_20;
      case 0x16u:
        *((_DWORD *)this + 38) |= 0x2000u;
        v113 = *((_QWORD *)a2 + 1);
        v114 = *((_QWORD *)a2 + 2);
        v115 = *(_QWORD *)a2;
        if (v113 <= 0xFFFFFFFFFFFFFFF5 && v113 + 10 <= v114)
        {
          v116 = 0;
          v117 = 0;
          v118 = 0;
          do
          {
            v119 = v113 + 1;
            *((_QWORD *)a2 + 1) = v113 + 1;
            v120 = *(_BYTE *)(v115 + v113);
            v118 |= (unint64_t)(v120 & 0x7F) << v116;
            if ((v120 & 0x80) == 0)
              goto LABEL_292;
            v116 += 7;
            v113 = v119;
            v14 = v117++ > 8;
          }
          while (!v14);
LABEL_229:
          LODWORD(v118) = 0;
          goto LABEL_292;
        }
        v182 = 0;
        v183 = 0;
        v118 = 0;
        if (v114 <= v113)
          v114 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v114 == v113)
          {
            LODWORD(v118) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v184 = v113 + 1;
            v185 = *(_BYTE *)(v115 + v113);
            *((_QWORD *)a2 + 1) = v184;
            v118 |= (unint64_t)(v185 & 0x7F) << v182;
            if (v185 < 0)
            {
              v182 += 7;
              v113 = v184;
              v14 = v183++ > 8;
              if (v14)
                goto LABEL_229;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v118) = 0;
          }
          break;
        }
LABEL_292:
        *((_DWORD *)this + 29) = v118;
        goto LABEL_20;
      case 0x17u:
        *((_DWORD *)this + 38) |= 0x200u;
        v121 = *((_QWORD *)a2 + 1);
        v122 = *((_QWORD *)a2 + 2);
        v123 = *(_QWORD *)a2;
        if (v121 <= 0xFFFFFFFFFFFFFFF5 && v121 + 10 <= v122)
        {
          v124 = 0;
          v125 = 0;
          v126 = 0;
          do
          {
            v127 = v121 + 1;
            *((_QWORD *)a2 + 1) = v121 + 1;
            v128 = *(_BYTE *)(v123 + v121);
            v126 |= (unint64_t)(v128 & 0x7F) << v124;
            if ((v128 & 0x80) == 0)
              goto LABEL_296;
            v124 += 7;
            v121 = v127;
            v14 = v125++ > 8;
          }
          while (!v14);
LABEL_236:
          LODWORD(v126) = 0;
          goto LABEL_296;
        }
        v186 = 0;
        v187 = 0;
        v126 = 0;
        if (v122 <= v121)
          v122 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v122 == v121)
          {
            LODWORD(v126) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v188 = v121 + 1;
            v189 = *(_BYTE *)(v123 + v121);
            *((_QWORD *)a2 + 1) = v188;
            v126 |= (unint64_t)(v189 & 0x7F) << v186;
            if (v189 < 0)
            {
              v186 += 7;
              v121 = v188;
              v14 = v187++ > 8;
              if (v14)
                goto LABEL_236;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v126) = 0;
          }
          break;
        }
LABEL_296:
        *((_DWORD *)this + 25) = v126;
        goto LABEL_20;
      case 0x18u:
        *((_DWORD *)this + 38) |= 0x1000u;
        v129 = *((_QWORD *)a2 + 1);
        v130 = *((_QWORD *)a2 + 2);
        v131 = *(_QWORD *)a2;
        if (v129 <= 0xFFFFFFFFFFFFFFF5 && v129 + 10 <= v130)
        {
          v132 = 0;
          v133 = 0;
          v134 = 0;
          do
          {
            v135 = v129 + 1;
            *((_QWORD *)a2 + 1) = v129 + 1;
            v136 = *(_BYTE *)(v131 + v129);
            v134 |= (unint64_t)(v136 & 0x7F) << v132;
            if ((v136 & 0x80) == 0)
              goto LABEL_300;
            v132 += 7;
            v129 = v135;
            v14 = v133++ > 8;
          }
          while (!v14);
LABEL_243:
          LODWORD(v134) = 0;
          goto LABEL_300;
        }
        v190 = 0;
        v191 = 0;
        v134 = 0;
        if (v130 <= v129)
          v130 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v130 == v129)
          {
            LODWORD(v134) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v192 = v129 + 1;
            v193 = *(_BYTE *)(v131 + v129);
            *((_QWORD *)a2 + 1) = v192;
            v134 |= (unint64_t)(v193 & 0x7F) << v190;
            if (v193 < 0)
            {
              v190 += 7;
              v129 = v192;
              v14 = v191++ > 8;
              if (v14)
                goto LABEL_243;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v134) = 0;
          }
          break;
        }
LABEL_300:
        *((_DWORD *)this + 28) = v134;
        goto LABEL_20;
      case 0x19u:
        v71 = (_DWORD *)operator new();
        *(_QWORD *)v71 = &off_25135F628;
        v71[3] = 0;
        v137 = *((_QWORD *)this + 7);
        *((_QWORD *)this + 7) = v71;
        if (v137)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v137 + 8))(v137);
          v71 = (_DWORD *)*((_QWORD *)this + 7);
        }
LABEL_146:
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v71 + 16))(v71, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
LABEL_20:
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        v4 = *((unsigned __int8 *)a2 + 24);
        if (v2 >= v3 || v4 != 0)
          return v4 == 0;
        break;
      case 0x1Au:
        *((_DWORD *)this + 38) |= 0x10000u;
        v138 = *((_QWORD *)a2 + 1);
        v139 = *((_QWORD *)a2 + 2);
        v140 = *(_QWORD *)a2;
        if (v138 <= 0xFFFFFFFFFFFFFFF5 && v138 + 10 <= v139)
        {
          v141 = 0;
          v142 = 0;
          v143 = 0;
          do
          {
            v144 = v138 + 1;
            *((_QWORD *)a2 + 1) = v138 + 1;
            v145 = *(_BYTE *)(v140 + v138);
            v143 |= (unint64_t)(v145 & 0x7F) << v141;
            if ((v145 & 0x80) == 0)
              goto LABEL_304;
            v141 += 7;
            v138 = v144;
            v14 = v142++ > 8;
          }
          while (!v14);
LABEL_250:
          LODWORD(v143) = 0;
          goto LABEL_304;
        }
        v194 = 0;
        v195 = 0;
        v143 = 0;
        if (v139 <= v138)
          v139 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v139 == v138)
          {
            LODWORD(v143) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v196 = v138 + 1;
            v197 = *(_BYTE *)(v140 + v138);
            *((_QWORD *)a2 + 1) = v196;
            v143 |= (unint64_t)(v197 & 0x7F) << v194;
            if (v197 < 0)
            {
              v194 += 7;
              v138 = v196;
              v14 = v195++ > 8;
              if (v14)
                goto LABEL_250;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v143) = 0;
          }
          break;
        }
LABEL_304:
        *((_DWORD *)this + 32) = v143;
        goto LABEL_20;
      default:
        goto LABEL_19;
    }
  }
  v15 = 0;
  v16 = 0;
  v11 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v17 = v2 + 1;
    v18 = *(_BYTE *)(v8 + v2);
    *((_QWORD *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0)
      goto LABEL_25;
    v15 += 7;
    v2 = v17;
    v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  result = PB::Reader::skip(a2);
  if ((_DWORD)result)
    goto LABEL_20;
  return result;
}

uint64_t CMMsl::StepCountEntry::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  const PB::Base *v6;
  int v7;
  const PB::Base *v8;

  v3 = this;
  v4 = *(_DWORD *)(this + 152);
  if ((v4 & 0x80) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 88));
    v4 = *(_DWORD *)(v3 + 152);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_37;
    }
  }
  else if ((v4 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 0x100) == 0)
      goto LABEL_5;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x100) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x4000) == 0)
      goto LABEL_8;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x4000) == 0)
  {
LABEL_8:
    if ((v4 & 0x8000) == 0)
      goto LABEL_9;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x8000) == 0)
  {
LABEL_9:
    if ((v4 & 4) == 0)
      goto LABEL_10;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 4) == 0)
  {
LABEL_10:
    if ((v4 & 2) == 0)
      goto LABEL_11;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 2) == 0)
  {
LABEL_11:
    if ((v4 & 1) == 0)
      goto LABEL_12;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 1) == 0)
  {
LABEL_12:
    if ((v4 & 0x80000) == 0)
      goto LABEL_14;
    goto LABEL_13;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  if ((*(_DWORD *)(v3 + 152) & 0x80000) != 0)
LABEL_13:
    this = PB::Writer::writeVarInt(a2);
LABEL_14:
  if (*(_QWORD *)(v3 + 72))
    this = PB::Writer::write();
  v5 = *(_DWORD *)(v3 + 152);
  if ((v5 & 0x200000) != 0)
  {
    this = PB::Writer::write(a2);
    v5 = *(_DWORD *)(v3 + 152);
  }
  if ((v5 & 0x400000) != 0)
    this = PB::Writer::write(a2);
  v6 = *(const PB::Base **)(v3 + 8);
  if (v6)
    this = PB::Writer::writeSubmessage(a2, v6);
  v7 = *(_DWORD *)(v3 + 152);
  if ((v7 & 0x40000) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v7 = *(_DWORD *)(v3 + 152);
    if ((v7 & 0x100000) == 0)
    {
LABEL_24:
      if ((v7 & 0x20000) == 0)
        goto LABEL_25;
      goto LABEL_49;
    }
  }
  else if ((v7 & 0x100000) == 0)
  {
    goto LABEL_24;
  }
  this = PB::Writer::writeVarInt(a2);
  v7 = *(_DWORD *)(v3 + 152);
  if ((v7 & 0x20000) == 0)
  {
LABEL_25:
    if ((v7 & 0x400) == 0)
      goto LABEL_26;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::writeVarInt(a2);
  v7 = *(_DWORD *)(v3 + 152);
  if ((v7 & 0x400) == 0)
  {
LABEL_26:
    if ((v7 & 0x800) == 0)
      goto LABEL_27;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::writeVarInt(a2);
  v7 = *(_DWORD *)(v3 + 152);
  if ((v7 & 0x800) == 0)
  {
LABEL_27:
    if ((v7 & 0x2000) == 0)
      goto LABEL_28;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::writeVarInt(a2);
  v7 = *(_DWORD *)(v3 + 152);
  if ((v7 & 0x2000) == 0)
  {
LABEL_28:
    if ((v7 & 0x200) == 0)
      goto LABEL_29;
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::writeVarInt(a2);
  v7 = *(_DWORD *)(v3 + 152);
  if ((v7 & 0x200) == 0)
  {
LABEL_29:
    if ((v7 & 0x1000) == 0)
      goto LABEL_31;
    goto LABEL_30;
  }
LABEL_53:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_DWORD *)(v3 + 152) & 0x1000) != 0)
LABEL_30:
    this = PB::Writer::writeVarInt(a2);
LABEL_31:
  v8 = *(const PB::Base **)(v3 + 56);
  if (v8)
    this = PB::Writer::writeSubmessage(a2, v8);
  if ((*(_BYTE *)(v3 + 154) & 1) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

unint64_t CMMsl::StepCountEntry::hash_value(CMMsl::StepCountEntry *this)
{
  int v2;
  double v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v31;
  double v32;
  double v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;

  v2 = *((_DWORD *)this + 38);
  if ((v2 & 0x80) == 0)
  {
    v37 = 0.0;
    if ((v2 & 0x40) != 0)
      goto LABEL_3;
LABEL_34:
    v36 = 0.0;
    if ((v2 & 0x10) != 0)
      goto LABEL_6;
LABEL_35:
    v35 = 0.0;
    if ((v2 & 0x100) != 0)
      goto LABEL_9;
    goto LABEL_36;
  }
  v12 = *((double *)this + 11);
  if (v12 == 0.0)
    v12 = 0.0;
  v37 = v12;
  if ((v2 & 0x40) == 0)
    goto LABEL_34;
LABEL_3:
  v3 = *((double *)this + 10);
  if (v3 == 0.0)
    v3 = 0.0;
  v36 = v3;
  if ((v2 & 0x10) == 0)
    goto LABEL_35;
LABEL_6:
  v4 = *((double *)this + 6);
  if (v4 == 0.0)
    v4 = 0.0;
  v35 = v4;
  if ((v2 & 0x100) != 0)
  {
LABEL_9:
    v34 = *((unsigned int *)this + 24);
    if ((v2 & 8) != 0)
      goto LABEL_10;
LABEL_37:
    v33 = 0.0;
    if ((v2 & 0x20) != 0)
      goto LABEL_13;
LABEL_38:
    v32 = 0.0;
    if ((v2 & 0x4000) != 0)
      goto LABEL_16;
    goto LABEL_39;
  }
LABEL_36:
  v34 = 0;
  if ((v2 & 8) == 0)
    goto LABEL_37;
LABEL_10:
  v5 = *((double *)this + 5);
  if (v5 == 0.0)
    v5 = 0.0;
  v33 = v5;
  if ((v2 & 0x20) == 0)
    goto LABEL_38;
LABEL_13:
  v6 = *((double *)this + 8);
  if (v6 == 0.0)
    v6 = 0.0;
  v32 = v6;
  if ((v2 & 0x4000) != 0)
  {
LABEL_16:
    v31 = *((unsigned int *)this + 30);
    if ((v2 & 0x8000) != 0)
      goto LABEL_17;
    goto LABEL_40;
  }
LABEL_39:
  v31 = 0;
  if ((v2 & 0x8000) != 0)
  {
LABEL_17:
    v7 = *((unsigned int *)this + 31);
    if ((v2 & 4) != 0)
      goto LABEL_18;
LABEL_41:
    v8 = 0;
    if ((v2 & 2) != 0)
      goto LABEL_22;
LABEL_42:
    v9 = 0;
    if ((v2 & 1) != 0)
      goto LABEL_26;
    goto LABEL_43;
  }
LABEL_40:
  v7 = 0;
  if ((v2 & 4) == 0)
    goto LABEL_41;
LABEL_18:
  if (*((double *)this + 4) == 0.0)
    v8 = 0;
  else
    v8 = *((_QWORD *)this + 4);
  if ((v2 & 2) == 0)
    goto LABEL_42;
LABEL_22:
  if (*((double *)this + 3) == 0.0)
    v9 = 0;
  else
    v9 = *((_QWORD *)this + 3);
  if ((v2 & 1) != 0)
  {
LABEL_26:
    if (*((double *)this + 2) == 0.0)
      v10 = 0;
    else
      v10 = *((_QWORD *)this + 2);
    if ((v2 & 0x80000) != 0)
      goto LABEL_30;
    goto LABEL_44;
  }
LABEL_43:
  v10 = 0;
  if ((v2 & 0x80000) != 0)
  {
LABEL_30:
    v11 = *((int *)this + 35);
    goto LABEL_45;
  }
LABEL_44:
  v11 = 0;
LABEL_45:
  v13 = *((_QWORD *)this + 9);
  if (v13)
  {
    v14 = sub_242910D74(v13);
    if ((v2 & 0x200000) == 0)
      goto LABEL_47;
LABEL_50:
    v15 = *((unsigned __int8 *)this + 148);
    if ((v2 & 0x400000) != 0)
      goto LABEL_48;
    goto LABEL_51;
  }
  v14 = 0;
  if ((v2 & 0x200000) != 0)
    goto LABEL_50;
LABEL_47:
  v15 = 0;
  if ((v2 & 0x400000) != 0)
  {
LABEL_48:
    v16 = *((unsigned __int8 *)this + 149);
    goto LABEL_52;
  }
LABEL_51:
  v16 = 0;
LABEL_52:
  v17 = *((_QWORD *)this + 1);
  if (v17)
    v17 = CMMsl::AccelerometerPace::hash_value((CMMsl::AccelerometerPace *)v17);
  if ((v2 & 0x40000) != 0)
  {
    v18 = *((unsigned int *)this + 34);
    if ((v2 & 0x100000) != 0)
    {
LABEL_56:
      v19 = *((unsigned int *)this + 36);
      if ((v2 & 0x20000) != 0)
        goto LABEL_57;
      goto LABEL_65;
    }
  }
  else
  {
    v18 = 0;
    if ((v2 & 0x100000) != 0)
      goto LABEL_56;
  }
  v19 = 0;
  if ((v2 & 0x20000) != 0)
  {
LABEL_57:
    v20 = *((unsigned int *)this + 33);
    if ((v2 & 0x400) != 0)
      goto LABEL_58;
    goto LABEL_66;
  }
LABEL_65:
  v20 = 0;
  if ((v2 & 0x400) != 0)
  {
LABEL_58:
    v21 = *((unsigned int *)this + 26);
    if ((v2 & 0x800) != 0)
      goto LABEL_59;
    goto LABEL_67;
  }
LABEL_66:
  v21 = 0;
  if ((v2 & 0x800) != 0)
  {
LABEL_59:
    v22 = *((unsigned int *)this + 27);
    if ((v2 & 0x2000) != 0)
      goto LABEL_60;
    goto LABEL_68;
  }
LABEL_67:
  v22 = 0;
  if ((v2 & 0x2000) != 0)
  {
LABEL_60:
    v23 = *((unsigned int *)this + 29);
    if ((v2 & 0x200) != 0)
      goto LABEL_61;
LABEL_69:
    v24 = 0;
    if ((v2 & 0x1000) != 0)
      goto LABEL_62;
LABEL_70:
    v25 = 0;
    goto LABEL_71;
  }
LABEL_68:
  v23 = 0;
  if ((v2 & 0x200) == 0)
    goto LABEL_69;
LABEL_61:
  v24 = *((unsigned int *)this + 25);
  if ((v2 & 0x1000) == 0)
    goto LABEL_70;
LABEL_62:
  v25 = *((unsigned int *)this + 28);
LABEL_71:
  v26 = *((_QWORD *)this + 7);
  if (v26)
  {
    v27 = *(float *)(v26 + 8);
    v28 = v27 == 0.0 || (*(_BYTE *)(v26 + 12) & 1) == 0;
    v26 = LODWORD(v27);
    if (v28)
      v26 = 0;
  }
  if ((v2 & 0x10000) != 0)
    v29 = *((int *)this + 32);
  else
    v29 = 0;
  return *(_QWORD *)&v36 ^ *(_QWORD *)&v37 ^ *(_QWORD *)&v35 ^ v34 ^ *(_QWORD *)&v33 ^ *(_QWORD *)&v32 ^ v31 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ v25 ^ v26 ^ v29;
}

_QWORD *CMMsl::StepCountEntry::makeAccelerometerPace(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135BE98;
    *(_DWORD *)(v2 + 32) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::StepCountEntry::makeMovementStats(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[7])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135F628;
    *(_DWORD *)(v2 + 12) = 0;
    this = (_QWORD *)v1[7];
    v1[7] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void CMMsl::StepCountEntryAddition::~StepCountEntryAddition(CMMsl::StepCountEntryAddition *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::StepCountEntryAddition::StepCountEntryAddition(uint64_t this, const CMMsl::StepCountEntryAddition *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;

  *(_QWORD *)this = &off_251361308;
  *(_DWORD *)(this + 72) = 0;
  v2 = *((_WORD *)a2 + 36);
  if ((v2 & 0x20) != 0)
  {
    v4 = *((_QWORD *)a2 + 6);
    v3 = 32;
    *(_WORD *)(this + 72) = 32;
    *(_QWORD *)(this + 48) = v4;
    v2 = *((_WORD *)a2 + 36);
    if ((v2 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 16);
    v3 |= 0x80u;
    *(_WORD *)(this + 72) = v3;
    *(_DWORD *)(this + 64) = v5;
    v2 = *((_WORD *)a2 + 36);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *((_QWORD *)a2 + 3);
    v3 |= 4u;
    *(_WORD *)(this + 72) = v3;
    *(_QWORD *)(this + 24) = v6;
    v2 = *((_WORD *)a2 + 36);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_18;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *(_WORD *)(this + 72) = v3;
  *(_QWORD *)(this + 32) = v7;
  v2 = *((_WORD *)a2 + 36);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  v8 = *((_QWORD *)a2 + 5);
  v3 |= 0x10u;
  *(_WORD *)(this + 72) = v3;
  *(_QWORD *)(this + 40) = v8;
  v2 = *((_WORD *)a2 + 36);
  if ((v2 & 0x200) == 0)
  {
LABEL_10:
    if ((v2 & 1) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  v9 = *((_BYTE *)a2 + 69);
  v3 |= 0x200u;
  *(_WORD *)(this + 72) = v3;
  *(_BYTE *)(this + 69) = v9;
  v2 = *((_WORD *)a2 + 36);
  if ((v2 & 1) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_21;
  }
LABEL_20:
  v10 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 72) = v3;
  *(_QWORD *)(this + 8) = v10;
  v2 = *((_WORD *)a2 + 36);
  if ((v2 & 0x40) == 0)
  {
LABEL_12:
    if ((v2 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  v11 = *((_QWORD *)a2 + 7);
  v3 |= 0x40u;
  *(_WORD *)(this + 72) = v3;
  *(_QWORD *)(this + 56) = v11;
  v2 = *((_WORD *)a2 + 36);
  if ((v2 & 0x400) == 0)
  {
LABEL_13:
    if ((v2 & 2) == 0)
      goto LABEL_14;
    goto LABEL_23;
  }
LABEL_22:
  v12 = *((_BYTE *)a2 + 70);
  v3 |= 0x400u;
  *(_WORD *)(this + 72) = v3;
  *(_BYTE *)(this + 70) = v12;
  v2 = *((_WORD *)a2 + 36);
  if ((v2 & 2) == 0)
  {
LABEL_14:
    if ((v2 & 0x100) == 0)
      return this;
LABEL_24:
    v14 = *((_BYTE *)a2 + 68);
    *(_WORD *)(this + 72) = v3 | 0x100;
    *(_BYTE *)(this + 68) = v14;
    return this;
  }
LABEL_23:
  v13 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_WORD *)(this + 72) = v3;
  *(_QWORD *)(this + 16) = v13;
  if ((*((_WORD *)a2 + 36) & 0x100) != 0)
    goto LABEL_24;
  return this;
}

CMMsl *CMMsl::StepCountEntryAddition::operator=(CMMsl *a1, const CMMsl::StepCountEntryAddition *a2)
{
  CMMsl::StepCountEntryAddition *v3;
  _BYTE v5[80];

  if (a1 != a2)
  {
    CMMsl::StepCountEntryAddition::StepCountEntryAddition((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::StepCountEntryAddition *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::StepCountEntryAddition *a2, CMMsl::StepCountEntryAddition *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;

  v3 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v3;
  v4 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v4;
  v5 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v5;
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  v7 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v7;
  v8 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v8;
  LOBYTE(v5) = *((_BYTE *)this + 69);
  *((_BYTE *)this + 69) = *((_BYTE *)a2 + 69);
  *((_BYTE *)a2 + 69) = v5;
  v9 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v9;
  v10 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v10;
  LOBYTE(v5) = *((_BYTE *)this + 70);
  *((_BYTE *)this + 70) = *((_BYTE *)a2 + 70);
  *((_BYTE *)a2 + 70) = v5;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  LOBYTE(v5) = *((_BYTE *)this + 68);
  *((_BYTE *)this + 68) = *((_BYTE *)a2 + 68);
  *((_BYTE *)a2 + 68) = v5;
  return result;
}

double CMMsl::StepCountEntryAddition::StepCountEntryAddition(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_251361308;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 69) = *(_BYTE *)(a2 + 69);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 70) = *(_BYTE *)(a2 + 70);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_BYTE *)(a1 + 68) = *(_BYTE *)(a2 + 68);
  return result;
}

CMMsl *CMMsl::StepCountEntryAddition::operator=(CMMsl *this, uint64_t a2, CMMsl::StepCountEntryAddition *a3)
{
  void (**v5)(CMMsl::StepCountEntryAddition *__hidden);
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  char v11;
  __int16 v12;
  int v13;

  if (this != (CMMsl *)a2)
  {
    v5 = &off_251361308;
    v13 = *(_DWORD *)(a2 + 72);
    *(_DWORD *)(a2 + 72) = 0;
    v10 = *(_DWORD *)(a2 + 64);
    v7 = *(_OWORD *)(a2 + 24);
    v8 = *(_OWORD *)(a2 + 40);
    v12 = *(_WORD *)(a2 + 69);
    v9 = *(_QWORD *)(a2 + 56);
    v6 = *(_OWORD *)(a2 + 8);
    v11 = *(_BYTE *)(a2 + 68);
    CMMsl::swap(this, (CMMsl::StepCountEntryAddition *)&v5, a3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return this;
}

uint64_t CMMsl::StepCountEntryAddition::formatText(CMMsl::StepCountEntryAddition *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 36);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "calibratedDistance", *((double *)this + 1));
    v5 = *((_WORD *)this + 36);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "energyDeltaDistance", *((double *)this + 2));
  v5 = *((_WORD *)this + 36);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "energyIsCalibrated");
  v5 = *((_WORD *)this + 36);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "incrementalActiveTime", *((double *)this + 3));
  v5 = *((_WORD *)this + 36);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "incrementalSteps");
  v5 = *((_WORD *)this + 36);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "lastStepTime", *((double *)this + 4));
  v5 = *((_WORD *)this + 36);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "odometerSpeed", *((double *)this + 5));
  v5 = *((_WORD *)this + 36);
  if ((v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "rawPace", *((double *)this + 6));
  v5 = *((_WORD *)this + 36);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0)
      goto LABEL_11;
LABEL_23:
    PB::TextFormatter::format(a2, "stepCadenceDeltaDistance", *((double *)this + 7));
    if ((*((_WORD *)this + 36) & 0x400) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "rawPaceDidJump");
  v5 = *((_WORD *)this + 36);
  if ((v5 & 0x40) != 0)
    goto LABEL_23;
LABEL_11:
  if ((v5 & 0x400) != 0)
LABEL_12:
    PB::TextFormatter::format(a2, "stepCadenceIsCalibrated");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::StepCountEntryAddition::readFrom(CMMsl::StepCountEntryAddition *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  int v26;
  BOOL v27;
  int v28;
  BOOL v29;
  int v30;
  BOOL v31;
  char v32;
  unsigned int v33;
  unint64_t v34;
  char v35;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_77;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 36) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_54;
        *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_71;
      case 2u:
        *((_WORD *)this + 36) |= 0x80u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v32 = 0;
          v33 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_76;
            }
            v34 = v20++;
            v35 = *(_BYTE *)(v21 + v34);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v35 & 0x7F) << v32;
            if ((v35 & 0x80) == 0)
              break;
            v32 += 7;
            v14 = v33++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_75:
              v2 = v34 + 1;
              goto LABEL_76;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
          goto LABEL_75;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_76;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_76:
        *((_DWORD *)this + 16) = v24;
        break;
      case 3u:
        *((_WORD *)this + 36) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_54;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_71;
      case 4u:
        *((_WORD *)this + 36) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_54;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_71;
      case 5u:
        *((_WORD *)this + 36) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_54;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_71;
      case 6u:
        *((_WORD *)this + 36) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v27 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v26 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v27 = v26 != 0;
        }
        *((_BYTE *)this + 69) = v27;
        break;
      case 7u:
        *((_WORD *)this + 36) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_54;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_71;
      case 8u:
        *((_WORD *)this + 36) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_54;
        *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_71;
      case 9u:
        *((_WORD *)this + 36) |= 0x400u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v29 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v28 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v29 = v28 != 0;
        }
        *((_BYTE *)this + 70) = v29;
        break;
      case 0xAu:
        *((_WORD *)this + 36) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_71:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_54:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 0xBu:
        *((_WORD *)this + 36) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v31 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v30 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v31 = v30 != 0;
        }
        *((_BYTE *)this + 68) = v31;
        break;
      default:
        goto LABEL_19;
    }
LABEL_77:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::StepCountEntryAddition::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 72);
  if ((v4 & 0x20) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 48));
    v4 = *(_WORD *)(v3 + 72);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 1) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 1) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x400) == 0)
  {
LABEL_10:
    if ((v4 & 2) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 2) == 0)
  {
LABEL_11:
    if ((v4 & 0x100) == 0)
      return this;
    return PB::Writer::write(a2);
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  if ((*(_WORD *)(v3 + 72) & 0x100) != 0)
    return PB::Writer::write(a2);
  return this;
}

uint64_t CMMsl::StepCountEntryAddition::hash_value(CMMsl::StepCountEntryAddition *this)
{
  __int16 v1;
  double v2;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  double v8;
  double v9;
  uint64_t v10;
  double v11;
  uint64_t v12;

  v1 = *((_WORD *)this + 36);
  if ((v1 & 0x20) != 0)
  {
    v2 = *((double *)this + 6);
    if (v2 == 0.0)
      v2 = 0.0;
    if ((v1 & 0x80) != 0)
    {
LABEL_3:
      v3 = *((unsigned int *)this + 16);
      if ((v1 & 4) != 0)
        goto LABEL_4;
LABEL_29:
      v4 = 0.0;
      if ((v1 & 8) != 0)
        goto LABEL_7;
LABEL_30:
      v5 = 0.0;
      if ((v1 & 0x10) != 0)
        goto LABEL_10;
LABEL_31:
      v6 = 0.0;
      if ((*((_WORD *)this + 36) & 0x200) != 0)
        goto LABEL_13;
      goto LABEL_32;
    }
  }
  else
  {
    v2 = 0.0;
    if ((v1 & 0x80) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((v1 & 4) == 0)
    goto LABEL_29;
LABEL_4:
  v4 = *((double *)this + 3);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_30;
LABEL_7:
  v5 = *((double *)this + 4);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((v1 & 0x10) == 0)
    goto LABEL_31;
LABEL_10:
  v6 = *((double *)this + 5);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((*((_WORD *)this + 36) & 0x200) != 0)
  {
LABEL_13:
    v7 = *((unsigned __int8 *)this + 69);
    if ((v1 & 1) != 0)
      goto LABEL_14;
LABEL_33:
    v8 = 0.0;
    if ((v1 & 0x40) != 0)
      goto LABEL_17;
LABEL_34:
    v9 = 0.0;
    if ((*((_WORD *)this + 36) & 0x400) != 0)
      goto LABEL_20;
    goto LABEL_35;
  }
LABEL_32:
  v7 = 0;
  if ((v1 & 1) == 0)
    goto LABEL_33;
LABEL_14:
  v8 = *((double *)this + 1);
  if (v8 == 0.0)
    v8 = 0.0;
  if ((v1 & 0x40) == 0)
    goto LABEL_34;
LABEL_17:
  v9 = *((double *)this + 7);
  if (v9 == 0.0)
    v9 = 0.0;
  if ((*((_WORD *)this + 36) & 0x400) != 0)
  {
LABEL_20:
    v10 = *((unsigned __int8 *)this + 70);
    if ((v1 & 2) != 0)
      goto LABEL_21;
    goto LABEL_36;
  }
LABEL_35:
  v10 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_21:
    v11 = *((double *)this + 2);
    if (v11 == 0.0)
      v11 = 0.0;
    if ((*((_WORD *)this + 36) & 0x100) != 0)
      goto LABEL_24;
LABEL_37:
    v12 = 0;
    return v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ v10 ^ *(_QWORD *)&v11 ^ v12;
  }
LABEL_36:
  v11 = 0.0;
  if ((*((_WORD *)this + 36) & 0x100) == 0)
    goto LABEL_37;
LABEL_24:
  v12 = *((unsigned __int8 *)this + 68);
  return v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ v10 ^ *(_QWORD *)&v11 ^ v12;
}

void CMMsl::StepDistanceFusionResult::~StepDistanceFusionResult(CMMsl::StepDistanceFusionResult *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_251361340;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  PB::Base::~Base(this);
}

{
  CMMsl::StepDistanceFusionResult::~StepDistanceFusionResult(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::StepDistanceFusionResult *CMMsl::StepDistanceFusionResult::StepDistanceFusionResult(CMMsl::StepDistanceFusionResult *this, const CMMsl::StepCountEntry **a2)
{
  uint64_t *v4;
  CMMsl::StepCountEntry *v5;
  CMMsl::StepCountEntry *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  int v12;
  const CMMsl::StepCountEntry *v14;
  const CMMsl::StepCountEntry *v15;
  const CMMsl::StepCountEntry *v16;
  const CMMsl::StepCountEntry *v17;
  const CMMsl::StepCountEntry *v18;
  const CMMsl::StepCountEntry *v19;
  const CMMsl::StepCountEntry *v20;
  const CMMsl::StepCountEntry *v21;
  char v22;
  int v23;

  *(_QWORD *)this = &off_251361340;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_DWORD *)this + 25) = 0;
  *((_QWORD *)this + 2) = 0;
  if (a2[2])
  {
    v5 = (CMMsl::StepCountEntry *)operator new();
    v6 = CMMsl::StepCountEntry::StepCountEntry(v5, a2[2]);
    v7 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if (a2[1])
  {
    v8 = operator new();
    v9 = CMMsl::StepCountEntryAddition::StepCountEntryAddition(v8, a2[1]);
    v10 = *v4;
    *v4 = v9;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = *((_WORD *)a2 + 50);
  if ((v11 & 1) != 0)
  {
    v14 = a2[3];
    *((_WORD *)this + 50) |= 1u;
    *((_QWORD *)this + 3) = v14;
    v11 = *((_WORD *)a2 + 50);
    if ((v11 & 2) == 0)
    {
LABEL_9:
      if ((v11 & 0x80) == 0)
        goto LABEL_10;
      goto LABEL_22;
    }
  }
  else if ((v11 & 2) == 0)
  {
    goto LABEL_9;
  }
  v15 = a2[4];
  *((_WORD *)this + 50) |= 2u;
  *((_QWORD *)this + 4) = v15;
  v11 = *((_WORD *)a2 + 50);
  if ((v11 & 0x80) == 0)
  {
LABEL_10:
    if ((v11 & 0x20) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  v16 = a2[10];
  *((_WORD *)this + 50) |= 0x80u;
  *((_QWORD *)this + 10) = v16;
  v11 = *((_WORD *)a2 + 50);
  if ((v11 & 0x20) == 0)
  {
LABEL_11:
    if ((v11 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  v17 = a2[8];
  *((_WORD *)this + 50) |= 0x20u;
  *((_QWORD *)this + 8) = v17;
  v11 = *((_WORD *)a2 + 50);
  if ((v11 & 0x40) == 0)
  {
LABEL_12:
    if ((v11 & 4) == 0)
      goto LABEL_13;
    goto LABEL_25;
  }
LABEL_24:
  v18 = a2[9];
  *((_WORD *)this + 50) |= 0x40u;
  *((_QWORD *)this + 9) = v18;
  v11 = *((_WORD *)a2 + 50);
  if ((v11 & 4) == 0)
  {
LABEL_13:
    if ((v11 & 8) == 0)
      goto LABEL_14;
    goto LABEL_26;
  }
LABEL_25:
  v19 = a2[5];
  *((_WORD *)this + 50) |= 4u;
  *((_QWORD *)this + 5) = v19;
  v11 = *((_WORD *)a2 + 50);
  if ((v11 & 8) == 0)
  {
LABEL_14:
    if ((v11 & 0x10) == 0)
      goto LABEL_15;
    goto LABEL_27;
  }
LABEL_26:
  v20 = a2[6];
  *((_WORD *)this + 50) |= 8u;
  *((_QWORD *)this + 6) = v20;
  v11 = *((_WORD *)a2 + 50);
  if ((v11 & 0x10) == 0)
  {
LABEL_15:
    if ((v11 & 0x400) == 0)
      goto LABEL_16;
    goto LABEL_28;
  }
LABEL_27:
  v21 = a2[7];
  *((_WORD *)this + 50) |= 0x10u;
  *((_QWORD *)this + 7) = v21;
  v11 = *((_WORD *)a2 + 50);
  if ((v11 & 0x400) == 0)
  {
LABEL_16:
    if ((v11 & 0x200) == 0)
      goto LABEL_17;
LABEL_29:
    v23 = *((_DWORD *)a2 + 23);
    *((_WORD *)this + 50) |= 0x200u;
    *((_DWORD *)this + 23) = v23;
    if ((*((_WORD *)a2 + 50) & 0x100) == 0)
      return this;
    goto LABEL_18;
  }
LABEL_28:
  v22 = *((_BYTE *)a2 + 96);
  *((_WORD *)this + 50) |= 0x400u;
  *((_BYTE *)this + 96) = v22;
  v11 = *((_WORD *)a2 + 50);
  if ((v11 & 0x200) != 0)
    goto LABEL_29;
LABEL_17:
  if ((v11 & 0x100) != 0)
  {
LABEL_18:
    v12 = *((_DWORD *)a2 + 22);
    *((_WORD *)this + 50) |= 0x100u;
    *((_DWORD *)this + 22) = v12;
  }
  return this;
}

CMMsl *CMMsl::StepDistanceFusionResult::operator=(CMMsl *a1, const CMMsl::StepCountEntry **a2)
{
  CMMsl::StepDistanceFusionResult *v3;
  _BYTE v5[104];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::StepDistanceFusionResult::StepDistanceFusionResult((CMMsl::StepDistanceFusionResult *)v5, a2);
    CMMsl::swap(a1, (CMMsl::StepDistanceFusionResult *)v5, v3);
    CMMsl::StepDistanceFusionResult::~StepDistanceFusionResult((CMMsl::StepDistanceFusionResult *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::StepDistanceFusionResult *a2, CMMsl::StepDistanceFusionResult *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double result;

  v3 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  v7 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v7;
  v8 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v8;
  v9 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v9;
  v10 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v10;
  v11 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v11;
  v12 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v12;
  result = *((double *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((double *)a2 + 7) = result;
  LOBYTE(v5) = *((_BYTE *)this + 96);
  *((_BYTE *)this + 96) = *((_BYTE *)a2 + 96);
  *((_BYTE *)a2 + 96) = v5;
  LODWORD(v5) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v5;
  LODWORD(v5) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v5;
  return result;
}

uint64_t CMMsl::StepDistanceFusionResult::StepDistanceFusionResult(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = &off_251361340;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a2 + 100) = 0;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v8 = *v4;
  *v4 = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  return a1;
}

CMMsl *CMMsl::StepDistanceFusionResult::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::StepDistanceFusionResult *v3;
  _BYTE v5[104];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::StepDistanceFusionResult::StepDistanceFusionResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::StepDistanceFusionResult *)v5, v3);
    CMMsl::StepDistanceFusionResult::~StepDistanceFusionResult((CMMsl::StepDistanceFusionResult *)v5);
  }
  return a1;
}

uint64_t CMMsl::StepDistanceFusionResult::formatText(CMMsl::StepDistanceFusionResult *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "addition");
  v6 = *((_QWORD *)this + 2);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "fused");
  v7 = *((_WORD *)this + 50);
  if ((v7 & 0x400) != 0)
  {
    PB::TextFormatter::format(a2, "isVehicular");
    v7 = *((_WORD *)this + 50);
    if ((v7 & 1) == 0)
    {
LABEL_7:
      if ((v7 & 0x100) == 0)
        goto LABEL_8;
      goto LABEL_20;
    }
  }
  else if ((v7 & 1) == 0)
  {
    goto LABEL_7;
  }
  PB::TextFormatter::format(a2, "odometerDeltaDistance", *((double *)this + 3));
  v7 = *((_WORD *)this + 50);
  if ((v7 & 0x100) == 0)
  {
LABEL_8:
    if ((v7 & 2) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "odometerQuality");
  v7 = *((_WORD *)this + 50);
  if ((v7 & 2) == 0)
  {
LABEL_9:
    if ((v7 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "odometerSmoothMeanPace", *((double *)this + 4));
  v7 = *((_WORD *)this + 50);
  if ((v7 & 0x200) == 0)
  {
LABEL_10:
    if ((v7 & 4) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "pedometerDistanceSource");
  v7 = *((_WORD *)this + 50);
  if ((v7 & 4) == 0)
  {
LABEL_11:
    if ((v7 & 8) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "speedStdDevOdometer", *((double *)this + 5));
  v7 = *((_WORD *)this + 50);
  if ((v7 & 8) == 0)
  {
LABEL_12:
    if ((v7 & 0x10) == 0)
      goto LABEL_13;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "speedStdDevPedometer", *((double *)this + 6));
  v7 = *((_WORD *)this + 50);
  if ((v7 & 0x10) == 0)
  {
LABEL_13:
    if ((v7 & 0x20) == 0)
      goto LABEL_14;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "speedStdDevResidualTolerance", *((double *)this + 7));
  v7 = *((_WORD *)this + 50);
  if ((v7 & 0x20) == 0)
  {
LABEL_14:
    if ((v7 & 0x40) == 0)
      goto LABEL_15;
LABEL_27:
    PB::TextFormatter::format(a2, "totalDistanceFused", *((double *)this + 9));
    if ((*((_WORD *)this + 50) & 0x80) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_16;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "totalDistanceCalibratedPedometer", *((double *)this + 8));
  v7 = *((_WORD *)this + 50);
  if ((v7 & 0x40) != 0)
    goto LABEL_27;
LABEL_15:
  if ((v7 & 0x80) != 0)
LABEL_16:
    PB::TextFormatter::format(a2, "totalDistanceOdometer", *((double *)this + 10));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::StepDistanceFusionResult::readFrom(CMMsl::StepDistanceFusionResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  BOOL v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  unint64_t v57;
  char v58;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_21:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          v20 = operator new();
          *(_QWORD *)v20 = &off_2513612D0;
          *(_QWORD *)(v20 + 8) = 0;
          *(_QWORD *)(v20 + 56) = 0;
          *(_QWORD *)(v20 + 72) = 0;
          *(_DWORD *)(v20 + 152) = 0;
          v21 = *((_QWORD *)this + 2);
          *((_QWORD *)this + 2) = v20;
          if (v21)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
            v20 = *((_QWORD *)this + 2);
          }
          goto LABEL_27;
        case 2u:
          v20 = operator new();
          *(_QWORD *)v20 = &off_251361308;
          *(_DWORD *)(v20 + 72) = 0;
          v22 = *((_QWORD *)this + 1);
          *((_QWORD *)this + 1) = v20;
          if (v22)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
            v20 = *((_QWORD *)this + 1);
          }
LABEL_27:
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, a2) & 1) == 0)
          {
            return 0;
          }
          PB::Reader::recallMark();
          break;
        case 3u:
          *((_WORD *)this + 50) |= 1u;
          v23 = *((_QWORD *)a2 + 1);
          if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_53;
          *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v23);
          goto LABEL_87;
        case 4u:
          *((_WORD *)this + 50) |= 2u;
          v24 = *((_QWORD *)a2 + 1);
          if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_53;
          *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v24);
          goto LABEL_87;
        case 5u:
          *((_WORD *)this + 50) |= 0x80u;
          v25 = *((_QWORD *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_53;
          *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v25);
          goto LABEL_87;
        case 6u:
          *((_WORD *)this + 50) |= 0x20u;
          v26 = *((_QWORD *)a2 + 1);
          if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_53;
          *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v26);
          goto LABEL_87;
        case 7u:
          *((_WORD *)this + 50) |= 0x40u;
          v27 = *((_QWORD *)a2 + 1);
          if (v27 > 0xFFFFFFFFFFFFFFF7 || v27 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_53;
          *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v27);
          goto LABEL_87;
        case 8u:
          *((_WORD *)this + 50) |= 4u;
          v28 = *((_QWORD *)a2 + 1);
          if (v28 > 0xFFFFFFFFFFFFFFF7 || v28 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_53;
          *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v28);
          goto LABEL_87;
        case 9u:
          *((_WORD *)this + 50) |= 8u;
          v29 = *((_QWORD *)a2 + 1);
          if (v29 > 0xFFFFFFFFFFFFFFF7 || v29 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_53;
          *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v29);
          goto LABEL_87;
        case 0xAu:
          *((_WORD *)this + 50) |= 0x10u;
          v30 = *((_QWORD *)a2 + 1);
          if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *((_QWORD *)a2 + 2))
          {
            *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v30);
LABEL_87:
            *((_QWORD *)a2 + 1) += 8;
          }
          else
          {
LABEL_53:
            *((_BYTE *)a2 + 24) = 1;
          }
          goto LABEL_96;
        case 0xBu:
          *((_WORD *)this + 50) |= 0x400u;
          v31 = *((_QWORD *)a2 + 1);
          if (v31 >= *((_QWORD *)a2 + 2))
          {
            v34 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v32 = v31 + 1;
            v33 = *(unsigned __int8 *)(*(_QWORD *)a2 + v31);
            *((_QWORD *)a2 + 1) = v32;
            v34 = v33 != 0;
          }
          *((_BYTE *)this + 96) = v34;
          goto LABEL_96;
        case 0xCu:
          *((_WORD *)this + 50) |= 0x200u;
          v35 = *((_QWORD *)a2 + 1);
          v36 = *((_QWORD *)a2 + 2);
          v37 = *(_QWORD *)a2;
          if (v35 <= 0xFFFFFFFFFFFFFFF5 && v35 + 10 <= v36)
          {
            v38 = 0;
            v39 = 0;
            v40 = 0;
            do
            {
              v41 = v35 + 1;
              *((_QWORD *)a2 + 1) = v35 + 1;
              v42 = *(_BYTE *)(v37 + v35);
              v40 |= (unint64_t)(v42 & 0x7F) << v38;
              if ((v42 & 0x80) == 0)
                goto LABEL_91;
              v38 += 7;
              v35 = v41;
              v14 = v39++ > 8;
            }
            while (!v14);
LABEL_78:
            LODWORD(v40) = 0;
            goto LABEL_91;
          }
          v51 = 0;
          v52 = 0;
          v40 = 0;
          if (v36 <= v35)
            v36 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v36 == v35)
            {
              LODWORD(v40) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v53 = v35 + 1;
              v54 = *(_BYTE *)(v37 + v35);
              *((_QWORD *)a2 + 1) = v53;
              v40 |= (unint64_t)(v54 & 0x7F) << v51;
              if (v54 < 0)
              {
                v51 += 7;
                v35 = v53;
                v14 = v52++ > 8;
                if (v14)
                  goto LABEL_78;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v40) = 0;
            }
            break;
          }
LABEL_91:
          *((_DWORD *)this + 23) = v40;
          goto LABEL_96;
        case 0xDu:
          *((_WORD *)this + 50) |= 0x100u;
          v43 = *((_QWORD *)a2 + 1);
          v44 = *((_QWORD *)a2 + 2);
          v45 = *(_QWORD *)a2;
          if (v43 <= 0xFFFFFFFFFFFFFFF5 && v43 + 10 <= v44)
          {
            v46 = 0;
            v47 = 0;
            v48 = 0;
            do
            {
              v49 = v43 + 1;
              *((_QWORD *)a2 + 1) = v43 + 1;
              v50 = *(_BYTE *)(v45 + v43);
              v48 |= (unint64_t)(v50 & 0x7F) << v46;
              if ((v50 & 0x80) == 0)
                goto LABEL_95;
              v46 += 7;
              v43 = v49;
              v14 = v47++ > 8;
            }
            while (!v14);
LABEL_85:
            LODWORD(v48) = 0;
            goto LABEL_95;
          }
          v55 = 0;
          v56 = 0;
          v48 = 0;
          if (v44 <= v43)
            v44 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v44 == v43)
            {
              LODWORD(v48) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v57 = v43 + 1;
              v58 = *(_BYTE *)(v45 + v43);
              *((_QWORD *)a2 + 1) = v57;
              v48 |= (unint64_t)(v58 & 0x7F) << v55;
              if (v58 < 0)
              {
                v55 += 7;
                v43 = v57;
                v14 = v56++ > 8;
                if (v14)
                  goto LABEL_85;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v48) = 0;
            }
            break;
          }
LABEL_95:
          *((_DWORD *)this + 22) = v48;
          goto LABEL_96;
        default:
          goto LABEL_19;
      }
      goto LABEL_96;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_21;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    result = PB::Reader::skip(a2);
    if (!(_DWORD)result)
      return result;
LABEL_96:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
}

uint64_t CMMsl::StepDistanceFusionResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  const PB::Base *v5;
  __int16 v6;

  v3 = this;
  v4 = *(const PB::Base **)(this + 16);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = *(const PB::Base **)(v3 + 8);
  if (v5)
    this = PB::Writer::writeSubmessage(a2, v5);
  v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 24));
    v6 = *(_WORD *)(v3 + 100);
    if ((v6 & 2) == 0)
    {
LABEL_7:
      if ((v6 & 0x80) == 0)
        goto LABEL_8;
      goto LABEL_19;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_7;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 0x80) == 0)
  {
LABEL_8:
    if ((v6 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(double *)(v3 + 80));
  v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 0x20) == 0)
  {
LABEL_9:
    if ((v6 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 0x40) == 0)
  {
LABEL_10:
    if ((v6 & 4) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 72));
  v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 4) == 0)
  {
LABEL_11:
    if ((v6 & 8) == 0)
      goto LABEL_12;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 8) == 0)
  {
LABEL_12:
    if ((v6 & 0x10) == 0)
      goto LABEL_13;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 0x10) == 0)
  {
LABEL_13:
    if ((v6 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 0x400) == 0)
  {
LABEL_14:
    if ((v6 & 0x200) == 0)
      goto LABEL_15;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2);
  v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 0x200) == 0)
  {
LABEL_15:
    if ((v6 & 0x100) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_26:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_WORD *)(v3 + 100) & 0x100) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

unint64_t CMMsl::StepDistanceFusionResult::hash_value(CMMsl::StepDistanceFusionResult *this)
{
  CMMsl::StepCountEntry *v2;
  unint64_t v3;
  unint64_t v4;
  __int16 v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = (CMMsl::StepCountEntry *)*((_QWORD *)this + 2);
  if (v2)
    v3 = CMMsl::StepCountEntry::hash_value(v2);
  else
    v3 = 0;
  v4 = *((_QWORD *)this + 1);
  if (v4)
    v4 = CMMsl::StepCountEntryAddition::hash_value((CMMsl::StepCountEntryAddition *)v4);
  v5 = *((_WORD *)this + 50);
  if ((v5 & 1) == 0)
  {
    v6 = 0.0;
    if ((v5 & 2) != 0)
      goto LABEL_8;
LABEL_35:
    v7 = 0.0;
    if ((v5 & 0x80) != 0)
      goto LABEL_11;
LABEL_36:
    v8 = 0.0;
    if ((v5 & 0x20) != 0)
      goto LABEL_14;
LABEL_37:
    v9 = 0.0;
    if ((v5 & 0x40) != 0)
      goto LABEL_17;
LABEL_38:
    v10 = 0.0;
    if ((v5 & 4) != 0)
      goto LABEL_20;
LABEL_39:
    v11 = 0.0;
    if ((v5 & 8) != 0)
      goto LABEL_23;
LABEL_40:
    v12 = 0.0;
    if ((v5 & 0x10) != 0)
      goto LABEL_26;
LABEL_41:
    v13 = 0.0;
    if ((*((_WORD *)this + 50) & 0x400) != 0)
      goto LABEL_29;
    goto LABEL_42;
  }
  v6 = *((double *)this + 3);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((v5 & 2) == 0)
    goto LABEL_35;
LABEL_8:
  v7 = *((double *)this + 4);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((v5 & 0x80) == 0)
    goto LABEL_36;
LABEL_11:
  v8 = *((double *)this + 10);
  if (v8 == 0.0)
    v8 = 0.0;
  if ((v5 & 0x20) == 0)
    goto LABEL_37;
LABEL_14:
  v9 = *((double *)this + 8);
  if (v9 == 0.0)
    v9 = 0.0;
  if ((v5 & 0x40) == 0)
    goto LABEL_38;
LABEL_17:
  v10 = *((double *)this + 9);
  if (v10 == 0.0)
    v10 = 0.0;
  if ((v5 & 4) == 0)
    goto LABEL_39;
LABEL_20:
  v11 = *((double *)this + 5);
  if (v11 == 0.0)
    v11 = 0.0;
  if ((v5 & 8) == 0)
    goto LABEL_40;
LABEL_23:
  v12 = *((double *)this + 6);
  if (v12 == 0.0)
    v12 = 0.0;
  if ((v5 & 0x10) == 0)
    goto LABEL_41;
LABEL_26:
  v13 = *((double *)this + 7);
  if (v13 == 0.0)
    v13 = 0.0;
  if ((*((_WORD *)this + 50) & 0x400) != 0)
  {
LABEL_29:
    v14 = *((unsigned __int8 *)this + 96);
    if ((*((_WORD *)this + 50) & 0x200) != 0)
      goto LABEL_30;
LABEL_43:
    v15 = 0;
    if ((*((_WORD *)this + 50) & 0x100) != 0)
      goto LABEL_31;
LABEL_44:
    v16 = 0;
    return v4 ^ v3 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13 ^ v14 ^ v15 ^ v16;
  }
LABEL_42:
  v14 = 0;
  if ((*((_WORD *)this + 50) & 0x200) == 0)
    goto LABEL_43;
LABEL_30:
  v15 = *((int *)this + 23);
  if ((*((_WORD *)this + 50) & 0x100) == 0)
    goto LABEL_44;
LABEL_31:
  v16 = *((int *)this + 22);
  return v4 ^ v3 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13 ^ v14 ^ v15 ^ v16;
}

_QWORD *CMMsl::StepDistanceFusionResult::makeFused(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[2])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_2513612D0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 56) = 0;
    *(_QWORD *)(v2 + 72) = 0;
    *(_DWORD *)(v2 + 152) = 0;
    this = (_QWORD *)v1[2];
    v1[2] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::StepDistanceFusionResult::makeAddition(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251361308;
    *(_DWORD *)(v2 + 72) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void CMMsl::StepLikelihoodFeatures::~StepLikelihoodFeatures(CMMsl::StepLikelihoodFeatures *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::StepLikelihoodFeatures::StepLikelihoodFeatures(CMMsl::StepLikelihoodFeatures *this, const CMMsl::StepLikelihoodFeatures *a2)
{
  __int16 v2;
  __int16 v3;
  double result;

  *(_QWORD *)this = &off_251361378;
  *((_DWORD *)this + 24) = 0;
  v2 = *((_WORD *)a2 + 48);
  if ((v2 & 0x40) != 0)
  {
    result = *((double *)a2 + 7);
    v3 = 64;
    *((_WORD *)this + 48) = 64;
    *((double *)this + 7) = result;
    v2 = *((_WORD *)a2 + 48);
    if ((v2 & 0x400) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_WORD *)a2 + 48) & 0x400) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 11);
    v3 |= 0x400u;
    *((_WORD *)this + 48) = v3;
    *((double *)this + 11) = result;
    v2 = *((_WORD *)a2 + 48);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    result = *((double *)a2 + 6);
    v3 |= 0x20u;
    *((_WORD *)this + 48) = v3;
    *((double *)this + 6) = result;
    v2 = *((_WORD *)a2 + 48);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0)
        goto LABEL_9;
      goto LABEL_18;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  result = *((double *)a2 + 4);
  v3 |= 8u;
  *((_WORD *)this + 48) = v3;
  *((double *)this + 4) = result;
  v2 = *((_WORD *)a2 + 48);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  result = *((double *)a2 + 10);
  v3 |= 0x200u;
  *((_WORD *)this + 48) = v3;
  *((double *)this + 10) = result;
  v2 = *((_WORD *)a2 + 48);
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  result = *((double *)a2 + 9);
  v3 |= 0x100u;
  *((_WORD *)this + 48) = v3;
  *((double *)this + 9) = result;
  v2 = *((_WORD *)a2 + 48);
  if ((v2 & 0x10) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0)
      goto LABEL_12;
    goto LABEL_21;
  }
LABEL_20:
  result = *((double *)a2 + 5);
  v3 |= 0x10u;
  *((_WORD *)this + 48) = v3;
  *((double *)this + 5) = result;
  v2 = *((_WORD *)a2 + 48);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  result = *((double *)a2 + 3);
  v3 |= 4u;
  *((_WORD *)this + 48) = v3;
  *((double *)this + 3) = result;
  v2 = *((_WORD *)a2 + 48);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 0x80) == 0)
      goto LABEL_14;
    goto LABEL_23;
  }
LABEL_22:
  result = *((double *)a2 + 2);
  v3 |= 2u;
  *((_WORD *)this + 48) = v3;
  *((double *)this + 2) = result;
  v2 = *((_WORD *)a2 + 48);
  if ((v2 & 0x80) == 0)
  {
LABEL_14:
    if ((v2 & 1) == 0)
      return result;
LABEL_24:
    result = *((double *)a2 + 1);
    *((_WORD *)this + 48) = v3 | 1;
    *((double *)this + 1) = result;
    return result;
  }
LABEL_23:
  result = *((double *)a2 + 8);
  v3 |= 0x80u;
  *((_WORD *)this + 48) = v3;
  *((double *)this + 8) = result;
  if ((*((_WORD *)a2 + 48) & 1) != 0)
    goto LABEL_24;
  return result;
}

CMMsl *CMMsl::StepLikelihoodFeatures::operator=(CMMsl *a1, const CMMsl::StepLikelihoodFeatures *a2)
{
  CMMsl::StepLikelihoodFeatures *v3;
  _BYTE v5[104];

  if (a1 != a2)
  {
    CMMsl::StepLikelihoodFeatures::StepLikelihoodFeatures((CMMsl::StepLikelihoodFeatures *)v5, a2);
    CMMsl::swap(a1, (CMMsl::StepLikelihoodFeatures *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::StepLikelihoodFeatures *a2, CMMsl::StepLikelihoodFeatures *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double result;

  v3 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v3;
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v4;
  v5 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v5;
  v6 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v6;
  v7 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v7;
  v8 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v8;
  v9 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v9;
  v10 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v10;
  v11 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v11;
  v12 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v12;
  v13 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v13;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::StepLikelihoodFeatures::StepLikelihoodFeatures(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_251361378;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

CMMsl *CMMsl::StepLikelihoodFeatures::operator=(CMMsl *this, uint64_t a2, CMMsl::StepLikelihoodFeatures *a3)
{
  __int128 v4;
  __int128 v5;
  void (**v7)(CMMsl::StepLikelihoodFeatures *__hidden);
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;

  if (this != (CMMsl *)a2)
  {
    v7 = &off_251361378;
    v14 = *(_DWORD *)(a2 + 96);
    *(_DWORD *)(a2 + 96) = 0;
    v13 = *(_QWORD *)(a2 + 88);
    v4 = *(_OWORD *)(a2 + 72);
    v5 = *(_OWORD *)(a2 + 40);
    v9 = *(_OWORD *)(a2 + 24);
    v10 = v5;
    v11 = *(_OWORD *)(a2 + 56);
    v12 = v4;
    v8 = *(_OWORD *)(a2 + 8);
    CMMsl::swap(this, (CMMsl::StepLikelihoodFeatures *)&v7, a3);
    PB::Base::~Base((PB::Base *)&v7);
  }
  return this;
}

uint64_t CMMsl::StepLikelihoodFeatures::formatText(CMMsl::StepLikelihoodFeatures *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 48);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "bobbiness", *((double *)this + 1));
    v5 = *((_WORD *)this + 48);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "bufferAvgSampleRateHz", *((double *)this + 2));
  v5 = *((_WORD *)this + 48);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "concavityDeltaDeg", *((double *)this + 3));
  v5 = *((_WORD *)this + 48);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "deltaInertialZVel", *((double *)this + 4));
  v5 = *((_WORD *)this + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "horizontalDisplacement", *((double *)this + 5));
  v5 = *((_WORD *)this + 48);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "impulseDurationSec", *((double *)this + 6));
  v5 = *((_WORD *)this + 48);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "likelihoodRatio", *((double *)this + 7));
  v5 = *((_WORD *)this + 48);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "peakiness", *((double *)this + 8));
  v5 = *((_WORD *)this + 48);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
LABEL_23:
    PB::TextFormatter::format(a2, "thetaRollFaceDeg", *((double *)this + 10));
    if ((*((_WORD *)this + 48) & 0x400) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "thetaPitchFaceDeg", *((double *)this + 9));
  v5 = *((_WORD *)this + 48);
  if ((v5 & 0x200) != 0)
    goto LABEL_23;
LABEL_11:
  if ((v5 & 0x400) != 0)
LABEL_12:
    PB::TextFormatter::format(a2, "timeSinceLastStepSec", *((double *)this + 11));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::StepLikelihoodFeatures::readFrom(CMMsl::StepLikelihoodFeatures *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_58;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 48) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_55;
        *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_57;
      case 2u:
        *((_WORD *)this + 48) |= 0x400u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_55;
        *((_QWORD *)this + 11) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_57;
      case 3u:
        *((_WORD *)this + 48) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_55;
        *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_57;
      case 4u:
        *((_WORD *)this + 48) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_55;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_57;
      case 5u:
        *((_WORD *)this + 48) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_55;
        *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_57;
      case 6u:
        *((_WORD *)this + 48) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_55;
        *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_57;
      case 7u:
        *((_WORD *)this + 48) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_55;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_57;
      case 8u:
        *((_WORD *)this + 48) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_55;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_57;
      case 9u:
        *((_WORD *)this + 48) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_55;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_57;
      case 0xAu:
        *((_WORD *)this + 48) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_55;
        *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_57;
      case 0xBu:
        *((_WORD *)this + 48) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_57:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_55:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_58:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::StepLikelihoodFeatures::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 96);
  if ((v4 & 0x40) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 56));
    v4 = *(_WORD *)(v3 + 96);
    if ((v4 & 0x400) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((*(_WORD *)(this + 96) & 0x400) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 88));
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 80));
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 72));
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x10) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x80) == 0)
  {
LABEL_11:
    if ((v4 & 1) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 8));
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  if ((*(_WORD *)(v3 + 96) & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 8));
  return this;
}

uint64_t CMMsl::StepLikelihoodFeatures::hash_value(CMMsl::StepLikelihoodFeatures *this)
{
  __int16 v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;

  v1 = *((_WORD *)this + 48);
  if ((v1 & 0x40) == 0)
  {
    v2 = 0.0;
    if ((*((_WORD *)this + 48) & 0x400) != 0)
      goto LABEL_3;
LABEL_36:
    v3 = 0.0;
    if ((v1 & 0x20) != 0)
      goto LABEL_6;
LABEL_37:
    v4 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_9;
LABEL_38:
    v5 = 0.0;
    if ((*((_WORD *)this + 48) & 0x200) != 0)
      goto LABEL_12;
LABEL_39:
    v6 = 0.0;
    if ((*((_WORD *)this + 48) & 0x100) != 0)
      goto LABEL_15;
LABEL_40:
    v7 = 0.0;
    if ((v1 & 0x10) != 0)
      goto LABEL_18;
LABEL_41:
    v8 = 0.0;
    if ((v1 & 4) != 0)
      goto LABEL_21;
LABEL_42:
    v9 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_24;
LABEL_43:
    v10 = 0.0;
    if ((v1 & 0x80) != 0)
      goto LABEL_27;
    goto LABEL_44;
  }
  v2 = *((double *)this + 7);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_WORD *)this + 48) & 0x400) == 0)
    goto LABEL_36;
LABEL_3:
  v3 = *((double *)this + 11);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 0x20) == 0)
    goto LABEL_37;
LABEL_6:
  v4 = *((double *)this + 6);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_38;
LABEL_9:
  v5 = *((double *)this + 4);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((*((_WORD *)this + 48) & 0x200) == 0)
    goto LABEL_39;
LABEL_12:
  v6 = *((double *)this + 10);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((*((_WORD *)this + 48) & 0x100) == 0)
    goto LABEL_40;
LABEL_15:
  v7 = *((double *)this + 9);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((v1 & 0x10) == 0)
    goto LABEL_41;
LABEL_18:
  v8 = *((double *)this + 5);
  if (v8 == 0.0)
    v8 = 0.0;
  if ((v1 & 4) == 0)
    goto LABEL_42;
LABEL_21:
  v9 = *((double *)this + 3);
  if (v9 == 0.0)
    v9 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_43;
LABEL_24:
  v10 = *((double *)this + 2);
  if (v10 == 0.0)
    v10 = 0.0;
  if ((v1 & 0x80) != 0)
  {
LABEL_27:
    v11 = *((double *)this + 8);
    if (v11 == 0.0)
      v11 = 0.0;
    if ((v1 & 1) != 0)
      goto LABEL_30;
LABEL_45:
    v12 = 0.0;
    return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12;
  }
LABEL_44:
  v11 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_45;
LABEL_30:
  v12 = *((double *)this + 1);
  if (v12 == 0.0)
    v12 = 0.0;
  return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12;
}

void CMMsl::StreamingHeartRateData::~StreamingHeartRateData(CMMsl::StreamingHeartRateData *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_2513613B0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_2513613B0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_2513613B0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::StreamingHeartRateData *CMMsl::StreamingHeartRateData::StreamingHeartRateData(CMMsl::StreamingHeartRateData *this, const CMMsl::OnsetHeartRateData **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_2513613B0;
  *((_QWORD *)this + 1) = 0;
  if (a2[1])
  {
    v4 = operator new();
    v5 = CMMsl::OnsetHeartRateData::OnsetHeartRateData(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return this;
}

uint64_t CMMsl::StreamingHeartRateData::operator=(uint64_t a1, const CMMsl::OnsetHeartRateData **a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::StreamingHeartRateData *__hidden);
  uint64_t v6;

  if ((const CMMsl::OnsetHeartRateData **)a1 != a2)
  {
    CMMsl::StreamingHeartRateData::StreamingHeartRateData((CMMsl::StreamingHeartRateData *)&v5, a2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v6;
    v5 = &off_2513613B0;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::StreamingHeartRateData *a2, CMMsl::StreamingHeartRateData *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::StreamingHeartRateData::StreamingHeartRateData(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_2513613B0;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_2513613B0;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::StreamingHeartRateData::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = &off_2513613B0;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::StreamingHeartRateData::formatText(CMMsl::StreamingHeartRateData *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::StreamingHeartRateData::readFrom(CMMsl::StreamingHeartRateData *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v19 = (_DWORD *)operator new();
        *(_QWORD *)v19 = &off_25135F7E8;
        v19[17] = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = (_DWORD *)*((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_27;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::StreamingHeartRateData::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2);
  return this;
}

CMMsl::OnsetHeartRateData *CMMsl::StreamingHeartRateData::hash_value(CMMsl::StreamingHeartRateData *this)
{
  CMMsl::OnsetHeartRateData *result;

  result = (CMMsl::OnsetHeartRateData *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::OnsetHeartRateData *)CMMsl::OnsetHeartRateData::hash_value(result);
  return result;
}

_QWORD *CMMsl::StreamingHeartRateData::makeSuper(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135F7E8;
    *(_DWORD *)(v2 + 68) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void CMMsl::StreamingHighFrequencyHeartRateData::~StreamingHighFrequencyHeartRateData(CMMsl::StreamingHighFrequencyHeartRateData *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_2513613E8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_2513613E8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_2513613E8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::StreamingHighFrequencyHeartRateData *CMMsl::StreamingHighFrequencyHeartRateData::StreamingHighFrequencyHeartRateData(CMMsl::StreamingHighFrequencyHeartRateData *this, const CMMsl::OnsetHeartRateData **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_2513613E8;
  *((_QWORD *)this + 1) = 0;
  if (a2[1])
  {
    v4 = operator new();
    v5 = CMMsl::OnsetHeartRateData::OnsetHeartRateData(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return this;
}

uint64_t CMMsl::StreamingHighFrequencyHeartRateData::operator=(uint64_t a1, const CMMsl::OnsetHeartRateData **a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::StreamingHighFrequencyHeartRateData *__hidden);
  uint64_t v6;

  if ((const CMMsl::OnsetHeartRateData **)a1 != a2)
  {
    CMMsl::StreamingHighFrequencyHeartRateData::StreamingHighFrequencyHeartRateData((CMMsl::StreamingHighFrequencyHeartRateData *)&v5, a2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v6;
    v5 = &off_2513613E8;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::StreamingHighFrequencyHeartRateData *a2, CMMsl::StreamingHighFrequencyHeartRateData *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::StreamingHighFrequencyHeartRateData::StreamingHighFrequencyHeartRateData(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_2513613E8;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_2513613E8;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::StreamingHighFrequencyHeartRateData::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = &off_2513613E8;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::StreamingHighFrequencyHeartRateData::formatText(CMMsl::StreamingHighFrequencyHeartRateData *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::StreamingHighFrequencyHeartRateData::readFrom(CMMsl::StreamingHighFrequencyHeartRateData *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v19 = (_DWORD *)operator new();
        *(_QWORD *)v19 = &off_25135F7E8;
        v19[17] = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = (_DWORD *)*((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_27;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::StreamingHighFrequencyHeartRateData::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2);
  return this;
}

CMMsl::OnsetHeartRateData *CMMsl::StreamingHighFrequencyHeartRateData::hash_value(CMMsl::StreamingHighFrequencyHeartRateData *this)
{
  CMMsl::OnsetHeartRateData *result;

  result = (CMMsl::OnsetHeartRateData *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::OnsetHeartRateData *)CMMsl::OnsetHeartRateData::hash_value(result);
  return result;
}

_QWORD *CMMsl::StreamingHighFrequencyHeartRateData::makeSuper(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135F7E8;
    *(_DWORD *)(v2 + 68) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void CMMsl::StrideCalBin::~StrideCalBin(CMMsl::StrideCalBin *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::StrideCalBin::StrideCalBin(CMMsl::StrideCalBin *this, const CMMsl::StrideCalBin *a2)
{
  char v2;
  char v3;
  int v4;
  double result;
  int v6;

  *(_QWORD *)this = &off_251361420;
  *((_DWORD *)this + 10) = 0;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 8) != 0)
  {
    v4 = *((_DWORD *)a2 + 8);
    v3 = 8;
    *((_BYTE *)this + 40) = 8;
    *((_DWORD *)this + 8) = v4;
    v2 = *((_BYTE *)a2 + 40);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 40) & 1) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 1);
    v3 |= 1u;
    *((_BYTE *)this + 40) = v3;
    *((double *)this + 1) = result;
    v2 = *((_BYTE *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    result = *((double *)a2 + 2);
    v3 |= 2u;
    *((_BYTE *)this + 40) = v3;
    *((double *)this + 2) = result;
    v2 = *((_BYTE *)a2 + 40);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0)
        return result;
LABEL_12:
      result = *((double *)a2 + 3);
      *((_BYTE *)this + 40) = v3 | 4;
      *((double *)this + 3) = result;
      return result;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v6 = *((_DWORD *)a2 + 9);
  v3 |= 0x10u;
  *((_BYTE *)this + 40) = v3;
  *((_DWORD *)this + 9) = v6;
  if ((*((_BYTE *)a2 + 40) & 4) != 0)
    goto LABEL_12;
  return result;
}

uint64_t CMMsl::StrideCalBin::operator=(uint64_t a1, const CMMsl::StrideCalBin *a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  if ((const CMMsl::StrideCalBin *)a1 != a2)
  {
    CMMsl::StrideCalBin::StrideCalBin((CMMsl::StrideCalBin *)&v8, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v9 = v3;
    *(_QWORD *)&v3 = *(_QWORD *)(a1 + 24);
    v4 = *(_QWORD *)(a1 + 32);
    v5 = v11;
    *(_QWORD *)(a1 + 24) = v10;
    *(_QWORD *)(a1 + 32) = v5;
    v6 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v12;
    v12 = v6;
    v10 = v3;
    v11 = v4;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::StrideCalBin *a2, CMMsl::StrideCalBin *a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  double result;

  v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  v4 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v7;
  result = *((double *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((double *)a2 + 3) = result;
  return result;
}

double CMMsl::StrideCalBin::StrideCalBin(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_251361420;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_251361420;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  return result;
}

uint64_t CMMsl::StrideCalBin::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  void (**v9)(CMMsl::StrideCalBin *__hidden);
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  if (a1 != a2)
  {
    v9 = &off_251361420;
    v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    v4 = *(_QWORD *)(a2 + 24);
    v13 = *(_DWORD *)(a1 + 40);
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    v10 = v5;
    *(_QWORD *)&v5 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 40) = v3;
    v7 = *(_QWORD *)(a1 + 24);
    v6 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = v5;
    v11 = v7;
    v12 = v6;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::StrideCalBin::formatText(CMMsl::StrideCalBin *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "begin", *((double *)this + 1));
    v5 = *((_BYTE *)this + 40);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*((_BYTE *)this + 40) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "bin");
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(a2, "kValue", *((double *)this + 3));
    if ((*((_BYTE *)this + 40) & 0x10) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(a2, "end", *((double *)this + 2));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 4) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 0x10) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "state");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::StrideCalBin::readFrom(CMMsl::StrideCalBin *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  unint64_t v38;
  char v39;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_72;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 40) |= 8u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v32 = 0;
          v33 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_66;
            }
            v34 = v20++;
            v35 = *(_BYTE *)(v21 + v34);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v35 & 0x7F) << v32;
            if ((v35 & 0x80) == 0)
              break;
            v32 += 7;
            v14 = v33++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_65:
              v2 = v34 + 1;
              goto LABEL_66;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
          goto LABEL_65;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_66;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_66:
        *((_DWORD *)this + 8) = v24;
        break;
      case 2u:
        *((_BYTE *)this + 40) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_45;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_61;
      case 3u:
        *((_BYTE *)this + 40) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_45;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_61;
      case 4u:
        *((_BYTE *)this + 40) |= 0x10u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v36 = 0;
          v37 = 0;
          v30 = 0;
          if (v2 <= v26)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_71;
            }
            v38 = v26++;
            v39 = *(_BYTE *)(v27 + v38);
            *((_QWORD *)a2 + 1) = v26;
            v30 |= (unint64_t)(v39 & 0x7F) << v36;
            if ((v39 & 0x80) == 0)
              break;
            v36 += 7;
            v14 = v37++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_70:
              v2 = v38 + 1;
              goto LABEL_71;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v30) = 0;
          goto LABEL_70;
        }
        v28 = 0;
        v29 = 0;
        v30 = 0;
        do
        {
          v2 = v26 + 1;
          *((_QWORD *)a2 + 1) = v26 + 1;
          v31 = *(_BYTE *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0)
            goto LABEL_71;
          v28 += 7;
          v26 = v2;
          v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_71:
        *((_DWORD *)this + 9) = v30;
        break;
      case 5u:
        *((_BYTE *)this + 40) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_61:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_45:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_72:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::StrideCalBin::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 40);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(this + 40) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 24));
  }
LABEL_10:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_BYTE *)(v3 + 40) & 4) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 24));
  return this;
}

uint64_t CMMsl::StrideCalBin::hash_value(CMMsl::StrideCalBin *this)
{
  uint64_t v1;
  double v2;
  double v3;
  uint64_t v4;
  double v5;

  if ((*((_BYTE *)this + 40) & 8) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 40) & 1) != 0)
      goto LABEL_3;
LABEL_14:
    v2 = 0.0;
    if ((*((_BYTE *)this + 40) & 2) != 0)
      goto LABEL_6;
LABEL_15:
    v3 = 0.0;
    if ((*((_BYTE *)this + 40) & 0x10) != 0)
      goto LABEL_9;
    goto LABEL_16;
  }
  v1 = *((unsigned int *)this + 8);
  if ((*((_BYTE *)this + 40) & 1) == 0)
    goto LABEL_14;
LABEL_3:
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 40) & 2) == 0)
    goto LABEL_15;
LABEL_6:
  v3 = *((double *)this + 2);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((*((_BYTE *)this + 40) & 0x10) != 0)
  {
LABEL_9:
    v4 = *((unsigned int *)this + 9);
    if ((*((_BYTE *)this + 40) & 4) != 0)
      goto LABEL_10;
LABEL_17:
    v5 = 0.0;
    return *(_QWORD *)&v2 ^ v1 ^ *(_QWORD *)&v3 ^ v4 ^ *(_QWORD *)&v5;
  }
LABEL_16:
  v4 = 0;
  if ((*((_BYTE *)this + 40) & 4) == 0)
    goto LABEL_17;
LABEL_10:
  v5 = *((double *)this + 3);
  if (v5 == 0.0)
    v5 = 0.0;
  return *(_QWORD *)&v2 ^ v1 ^ *(_QWORD *)&v3 ^ v4 ^ *(_QWORD *)&v5;
}

void CMMsl::StrideCalEntry::~StrideCalEntry(CMMsl::StrideCalEntry *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::StrideCalEntry::StrideCalEntry(uint64_t this, const CMMsl::StrideCalEntry *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  *(_QWORD *)this = &off_251361458;
  *(_DWORD *)(this + 92) = 0;
  v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x100) != 0)
  {
    v4 = *((_QWORD *)a2 + 9);
    v3 = 256;
    *(_WORD *)(this + 92) = 256;
    *(_QWORD *)(this + 72) = v4;
    v2 = *((_WORD *)a2 + 46);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 2);
    v3 |= 2u;
    *(_WORD *)(this + 92) = v3;
    *(_QWORD *)(this + 16) = v5;
    v2 = *((_WORD *)a2 + 46);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    v6 = *((_QWORD *)a2 + 4);
    v3 |= 8u;
    *(_WORD *)(this + 92) = v3;
    *(_QWORD *)(this + 32) = v6;
    v2 = *((_WORD *)a2 + 46);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0)
        goto LABEL_9;
      goto LABEL_19;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a2 + 5);
  v3 |= 0x10u;
  *(_WORD *)(this + 92) = v3;
  *(_QWORD *)(this + 40) = v7;
  v2 = *((_WORD *)a2 + 46);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 0x800) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  v8 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 92) = v3;
  *(_QWORD *)(this + 8) = v8;
  v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x800) == 0)
  {
LABEL_10:
    if ((v2 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_20:
  v9 = *((_DWORD *)a2 + 22);
  v3 |= 0x800u;
  *(_WORD *)(this + 92) = v3;
  *(_DWORD *)(this + 88) = v9;
  v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x400) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_22;
  }
LABEL_21:
  v10 = *((_DWORD *)a2 + 21);
  v3 |= 0x400u;
  *(_WORD *)(this + 92) = v3;
  *(_DWORD *)(this + 84) = v10;
  v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x80) == 0)
  {
LABEL_12:
    if ((v2 & 0x20) == 0)
      goto LABEL_13;
    goto LABEL_23;
  }
LABEL_22:
  v11 = *((_QWORD *)a2 + 8);
  v3 |= 0x80u;
  *(_WORD *)(this + 92) = v3;
  *(_QWORD *)(this + 64) = v11;
  v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x20) == 0)
  {
LABEL_13:
    if ((v2 & 4) == 0)
      goto LABEL_14;
    goto LABEL_24;
  }
LABEL_23:
  v12 = *((_QWORD *)a2 + 6);
  v3 |= 0x20u;
  *(_WORD *)(this + 92) = v3;
  *(_QWORD *)(this + 48) = v12;
  v2 = *((_WORD *)a2 + 46);
  if ((v2 & 4) == 0)
  {
LABEL_14:
    if ((v2 & 0x40) == 0)
      goto LABEL_15;
    goto LABEL_25;
  }
LABEL_24:
  v13 = *((_QWORD *)a2 + 3);
  v3 |= 4u;
  *(_WORD *)(this + 92) = v3;
  *(_QWORD *)(this + 24) = v13;
  v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x40) == 0)
  {
LABEL_15:
    if ((v2 & 0x200) == 0)
      return this;
LABEL_26:
    v15 = *((_DWORD *)a2 + 20);
    *(_WORD *)(this + 92) = v3 | 0x200;
    *(_DWORD *)(this + 80) = v15;
    return this;
  }
LABEL_25:
  v14 = *((_QWORD *)a2 + 7);
  v3 |= 0x40u;
  *(_WORD *)(this + 92) = v3;
  *(_QWORD *)(this + 56) = v14;
  if ((*((_WORD *)a2 + 46) & 0x200) != 0)
    goto LABEL_26;
  return this;
}

CMMsl *CMMsl::StrideCalEntry::operator=(CMMsl *a1, const CMMsl::StrideCalEntry *a2)
{
  CMMsl::StrideCalEntry *v3;
  _BYTE v5[96];

  if (a1 != a2)
  {
    CMMsl::StrideCalEntry::StrideCalEntry((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::StrideCalEntry *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::StrideCalEntry *a2, CMMsl::StrideCalEntry *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double result;
  int v15;

  v3 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v3;
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v6;
  v7 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v7;
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v8;
  v9 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v9;
  v10 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v10;
  v11 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v11;
  v12 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v12;
  v13 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v13;
  result = *((double *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((double *)a2 + 7) = result;
  v15 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v15;
  return result;
}

double CMMsl::StrideCalEntry::StrideCalEntry(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_251361458;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a2 + 92) = 0;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  result = *(double *)(a2 + 56);
  *(double *)(a1 + 56) = result;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  return result;
}

CMMsl *CMMsl::StrideCalEntry::operator=(CMMsl *this, uint64_t a2, CMMsl::StrideCalEntry *a3)
{
  __int128 v4;
  void (**v6)(CMMsl::StrideCalEntry *__hidden);
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;

  if (this != (CMMsl *)a2)
  {
    v6 = &off_251361458;
    v11 = *(_QWORD *)(a2 + 72);
    v7 = *(_OWORD *)(a2 + 8);
    v9 = *(_OWORD *)(a2 + 40);
    v8 = *(_OWORD *)(a2 + 24);
    v10 = *(_OWORD *)(a2 + 56);
    v4 = *(_OWORD *)(a2 + 80);
    *(_DWORD *)(a2 + 92) = 0;
    v12 = v4;
    CMMsl::swap(this, (CMMsl::StrideCalEntry *)&v6, a3);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return this;
}

uint64_t CMMsl::StrideCalEntry::formatText(CMMsl::StrideCalEntry *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 46);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "distance", *((double *)this + 1));
    v5 = *((_WORD *)this + 46);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "endTime", *((double *)this + 2));
  v5 = *((_WORD *)this + 46);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "gpsSource", *((double *)this + 3));
  v5 = *((_WORD *)this + 46);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "kvalue", *((double *)this + 4));
  v5 = *((_WORD *)this + 46);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "kvalueTrack", *((double *)this + 5));
  v5 = *((_WORD *)this + 46);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "percentGrade", *((double *)this + 6));
  v5 = *((_WORD *)this + 46);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "runningFormStrideLength", *((double *)this + 7));
  v5 = *((_WORD *)this + 46);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "runningFormStrideLengthMetrics");
  v5 = *((_WORD *)this + 46);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "session");
  v5 = *((_WORD *)this + 46);
  if ((v5 & 0x80) == 0)
  {
LABEL_11:
    if ((v5 & 0x100) == 0)
      goto LABEL_12;
LABEL_25:
    PB::TextFormatter::format(a2, "startTime", *((double *)this + 9));
    if ((*((_WORD *)this + 46) & 0x800) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_13;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "speed", *((double *)this + 8));
  v5 = *((_WORD *)this + 46);
  if ((v5 & 0x100) != 0)
    goto LABEL_25;
LABEL_12:
  if ((v5 & 0x800) != 0)
LABEL_13:
    PB::TextFormatter::format(a2, "steps");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::StrideCalEntry::readFrom(CMMsl::StrideCalEntry *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  unint64_t v40;
  char v41;
  char v42;
  unsigned int v43;
  unint64_t v44;
  char v45;
  char v46;
  unsigned int v47;
  unint64_t v48;
  char v49;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_109;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 46) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_63;
        *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_93;
      case 2u:
        *((_WORD *)this + 46) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_63;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_93;
      case 3u:
        *((_WORD *)this + 46) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_63;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_93;
      case 4u:
        *((_WORD *)this + 46) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_63;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_93;
      case 5u:
        *((_WORD *)this + 46) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_63;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_93;
      case 6u:
        *((_WORD *)this + 46) |= 0x800u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v38 = 0;
          v39 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_98;
            }
            v40 = v20++;
            v41 = *(_BYTE *)(v21 + v40);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0)
              break;
            v38 += 7;
            v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_97:
              v2 = v40 + 1;
              goto LABEL_98;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
          goto LABEL_97;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_98;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_98:
        *((_DWORD *)this + 22) = v24;
        break;
      case 7u:
        *((_WORD *)this + 46) |= 0x400u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v42 = 0;
          v43 = 0;
          v30 = 0;
          if (v2 <= v26)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_103;
            }
            v44 = v26++;
            v45 = *(_BYTE *)(v27 + v44);
            *((_QWORD *)a2 + 1) = v26;
            v30 |= (unint64_t)(v45 & 0x7F) << v42;
            if ((v45 & 0x80) == 0)
              break;
            v42 += 7;
            v14 = v43++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_102:
              v2 = v44 + 1;
              goto LABEL_103;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v30) = 0;
          goto LABEL_102;
        }
        v28 = 0;
        v29 = 0;
        v30 = 0;
        do
        {
          v2 = v26 + 1;
          *((_QWORD *)a2 + 1) = v26 + 1;
          v31 = *(_BYTE *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0)
            goto LABEL_103;
          v28 += 7;
          v26 = v2;
          v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_103:
        *((_DWORD *)this + 21) = v30;
        break;
      case 8u:
        *((_WORD *)this + 46) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_63;
        *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_93;
      case 9u:
        *((_WORD *)this + 46) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_63;
        *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_93;
      case 0xAu:
        *((_WORD *)this + 46) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_63;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_93;
      case 0xBu:
        *((_WORD *)this + 46) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_93:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_63:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 0xCu:
        *((_WORD *)this + 46) |= 0x200u;
        v32 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v33 = *(_QWORD *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
        {
          v46 = 0;
          v47 = 0;
          v36 = 0;
          if (v2 <= v32)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v32)
            {
              LODWORD(v36) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_108;
            }
            v48 = v32++;
            v49 = *(_BYTE *)(v33 + v48);
            *((_QWORD *)a2 + 1) = v32;
            v36 |= (unint64_t)(v49 & 0x7F) << v46;
            if ((v49 & 0x80) == 0)
              break;
            v46 += 7;
            v14 = v47++ > 8;
            if (v14)
            {
              LODWORD(v36) = 0;
LABEL_107:
              v2 = v48 + 1;
              goto LABEL_108;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v36) = 0;
          goto LABEL_107;
        }
        v34 = 0;
        v35 = 0;
        v36 = 0;
        do
        {
          v2 = v32 + 1;
          *((_QWORD *)a2 + 1) = v32 + 1;
          v37 = *(_BYTE *)(v33 + v32);
          v36 |= (unint64_t)(v37 & 0x7F) << v34;
          if ((v37 & 0x80) == 0)
            goto LABEL_108;
          v34 += 7;
          v32 = v2;
          v14 = v35++ > 8;
        }
        while (!v14);
        LODWORD(v36) = 0;
LABEL_108:
        *((_DWORD *)this + 20) = v36;
        break;
      default:
        goto LABEL_19;
    }
LABEL_109:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::StrideCalEntry::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 92);
  if ((v4 & 0x100) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 72));
    v4 = *(_WORD *)(v3 + 92);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 0x800) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x800) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 4) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 4) == 0)
  {
LABEL_11:
    if ((v4 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x40) == 0)
  {
LABEL_12:
    if ((v4 & 0x200) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_24:
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  if ((*(_WORD *)(v3 + 92) & 0x200) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::StrideCalEntry::hash_value(CMMsl::StrideCalEntry *this)
{
  __int16 v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;

  v1 = *((_WORD *)this + 46);
  if ((v1 & 0x100) == 0)
  {
    v2 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_3;
LABEL_33:
    v3 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_6;
LABEL_34:
    v4 = 0.0;
    if ((v1 & 0x10) != 0)
      goto LABEL_9;
LABEL_35:
    v5 = 0.0;
    if ((v1 & 1) != 0)
      goto LABEL_12;
LABEL_36:
    v6 = 0.0;
    if ((*((_WORD *)this + 46) & 0x800) != 0)
      goto LABEL_15;
    goto LABEL_37;
  }
  v2 = *((double *)this + 9);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_33;
LABEL_3:
  v3 = *((double *)this + 2);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_34;
LABEL_6:
  v4 = *((double *)this + 4);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 0x10) == 0)
    goto LABEL_35;
LABEL_9:
  v5 = *((double *)this + 5);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_36;
LABEL_12:
  v6 = *((double *)this + 1);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((*((_WORD *)this + 46) & 0x800) != 0)
  {
LABEL_15:
    v7 = *((int *)this + 22);
    if ((*((_WORD *)this + 46) & 0x400) != 0)
      goto LABEL_16;
    goto LABEL_38;
  }
LABEL_37:
  v7 = 0;
  if ((*((_WORD *)this + 46) & 0x400) != 0)
  {
LABEL_16:
    v8 = *((int *)this + 21);
    if ((v1 & 0x80) != 0)
      goto LABEL_17;
LABEL_39:
    v9 = 0.0;
    if ((v1 & 0x20) != 0)
      goto LABEL_20;
LABEL_40:
    v10 = 0.0;
    if ((v1 & 4) != 0)
      goto LABEL_23;
LABEL_41:
    v11 = 0.0;
    if ((v1 & 0x40) != 0)
      goto LABEL_26;
    goto LABEL_42;
  }
LABEL_38:
  v8 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_39;
LABEL_17:
  v9 = *((double *)this + 8);
  if (v9 == 0.0)
    v9 = 0.0;
  if ((v1 & 0x20) == 0)
    goto LABEL_40;
LABEL_20:
  v10 = *((double *)this + 6);
  if (v10 == 0.0)
    v10 = 0.0;
  if ((v1 & 4) == 0)
    goto LABEL_41;
LABEL_23:
  v11 = *((double *)this + 3);
  if (v11 == 0.0)
    v11 = 0.0;
  if ((v1 & 0x40) != 0)
  {
LABEL_26:
    v12 = *((double *)this + 7);
    if (v12 == 0.0)
      v12 = 0.0;
    if ((*((_WORD *)this + 46) & 0x200) != 0)
      goto LABEL_29;
LABEL_43:
    v13 = 0;
    return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ v7 ^ v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12 ^ v13;
  }
LABEL_42:
  v12 = 0.0;
  if ((*((_WORD *)this + 46) & 0x200) == 0)
    goto LABEL_43;
LABEL_29:
  v13 = *((int *)this + 20);
  return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ v7 ^ v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12 ^ v13;
}

void CMMsl::SubStats::~SubStats(CMMsl::SubStats *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::SubStats::SubStats(CMMsl::SubStats *this, const CMMsl::SubStats *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  int v5;
  float result;
  char v7;
  int v8;
  int v9;

  *(_QWORD *)this = &off_251361490;
  *((_DWORD *)this + 14) = 0;
  v2 = *((_WORD *)a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_WORD *)this + 28) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_WORD *)a2 + 28);
    if ((v2 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 8);
    v3 |= 0x20u;
    *((_WORD *)this + 28) = v3;
    *((_DWORD *)this + 8) = v5;
    v2 = *((_WORD *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    result = *((float *)a2 + 5);
    v3 |= 4u;
    *((_WORD *)this + 28) = v3;
    *((float *)this + 5) = result;
    v2 = *((_WORD *)a2 + 28);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        goto LABEL_9;
      goto LABEL_18;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  result = *((float *)a2 + 7);
  v3 |= 0x10u;
  *((_WORD *)this + 28) = v3;
  *((float *)this + 7) = result;
  v2 = *((_WORD *)a2 + 28);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  result = *((float *)a2 + 6);
  v3 |= 8u;
  *((_WORD *)this + 28) = v3;
  *((float *)this + 6) = result;
  v2 = *((_WORD *)a2 + 28);
  if ((v2 & 0x200) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  result = *((float *)a2 + 12);
  v3 |= 0x200u;
  *((_WORD *)this + 28) = v3;
  *((float *)this + 12) = result;
  v2 = *((_WORD *)a2 + 28);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_21;
  }
LABEL_20:
  result = *((float *)a2 + 10);
  v3 |= 0x80u;
  *((_WORD *)this + 28) = v3;
  *((float *)this + 10) = result;
  v2 = *((_WORD *)a2 + 28);
  if ((v2 & 0x400) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  v7 = *((_BYTE *)a2 + 52);
  v3 |= 0x400u;
  *((_WORD *)this + 28) = v3;
  *((_BYTE *)this + 52) = v7;
  v2 = *((_WORD *)a2 + 28);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 0x100) == 0)
      goto LABEL_14;
    goto LABEL_23;
  }
LABEL_22:
  v8 = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *((_WORD *)this + 28) = v3;
  *((_DWORD *)this + 4) = v8;
  v2 = *((_WORD *)a2 + 28);
  if ((v2 & 0x100) == 0)
  {
LABEL_14:
    if ((v2 & 0x40) == 0)
      return result;
LABEL_24:
    result = *((float *)a2 + 9);
    *((_WORD *)this + 28) = v3 | 0x40;
    *((float *)this + 9) = result;
    return result;
  }
LABEL_23:
  v9 = *((_DWORD *)a2 + 11);
  v3 |= 0x100u;
  *((_WORD *)this + 28) = v3;
  *((_DWORD *)this + 11) = v9;
  if ((*((_WORD *)a2 + 28) & 0x40) != 0)
    goto LABEL_24;
  return result;
}

CMMsl *CMMsl::SubStats::operator=(CMMsl *a1, const CMMsl::SubStats *a2)
{
  CMMsl::SubStats *v3;
  _BYTE v5[64];

  if (a1 != a2)
  {
    CMMsl::SubStats::SubStats((CMMsl::SubStats *)v5, a2);
    CMMsl::swap(a1, (CMMsl::SubStats *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::SubStats *a2, CMMsl::SubStats *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  float result;

  v3 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  v5 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v5;
  v6 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v6;
  v7 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v7;
  v8 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v8;
  v9 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v9;
  LOBYTE(v4) = *((_BYTE *)this + 52);
  *((_BYTE *)this + 52) = *((_BYTE *)a2 + 52);
  *((_BYTE *)a2 + 52) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  result = *((float *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((float *)a2 + 9) = result;
  return result;
}

float CMMsl::SubStats::SubStats(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_251361490;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  result = *(float *)(a2 + 36);
  *(float *)(a1 + 36) = result;
  return result;
}

CMMsl *CMMsl::SubStats::operator=(CMMsl *this, uint64_t a2, CMMsl::SubStats *a3)
{
  uint64_t v4;
  _QWORD v6[2];
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  char v14;
  int v15;

  if (this != (CMMsl *)a2)
  {
    v15 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a2 + 56) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v6[0] = &off_251361490;
    v6[1] = v4;
    v10 = *(_DWORD *)(a2 + 32);
    v9 = *(_DWORD *)(a2 + 28);
    v8 = *(_QWORD *)(a2 + 20);
    v13 = *(_DWORD *)(a2 + 48);
    v14 = *(_BYTE *)(a2 + 52);
    v7 = *(_DWORD *)(a2 + 16);
    v12 = *(_DWORD *)(a2 + 44);
    v11 = *(_QWORD *)(a2 + 36);
    CMMsl::swap(this, (CMMsl::SubStats *)v6, a3);
    PB::Base::~Base((PB::Base *)v6);
  }
  return this;
}

uint64_t CMMsl::SubStats::formatText(CMMsl::SubStats *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 28);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "classifierCall");
    v5 = *((_WORD *)this + 28);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "featureSlope", *((float *)this + 5));
  v5 = *((_WORD *)this + 28);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "maxAccel", *((float *)this + 6));
  v5 = *((_WORD *)this + 28);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "maxMinPressure", *((float *)this + 7));
  v5 = *((_WORD *)this + 28);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "model");
  v5 = *((_WORD *)this + 28);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "sCal", *((float *)this + 9));
  v5 = *((_WORD *)this + 28);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "slopeNxCorr", *((float *)this + 10));
  v5 = *((_WORD *)this + 28);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 1) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "state");
  v5 = *((_WORD *)this + 28);
  if ((v5 & 1) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
LABEL_23:
    PB::TextFormatter::format(a2, "xCorr", *((float *)this + 12));
    if ((*((_WORD *)this + 28) & 0x400) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "timestamp");
  v5 = *((_WORD *)this + 28);
  if ((v5 & 0x200) != 0)
    goto LABEL_23;
LABEL_11:
  if ((v5 & 0x400) != 0)
LABEL_12:
    PB::TextFormatter::format(a2, "zoh");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SubStats::readFrom(CMMsl::SubStats *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  int v32;
  BOOL v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  uint64_t v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  char v45;
  char v46;
  unsigned int v47;
  unint64_t v48;
  char v49;
  char v50;
  unsigned int v51;
  unint64_t v52;
  char v53;
  char v54;
  unsigned int v55;
  unint64_t v56;
  char v57;
  char v58;
  unsigned int v59;
  unint64_t v60;
  char v61;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_123;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 28) |= 1u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v46 = 0;
          v47 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              v24 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_107;
            }
            v48 = v20++;
            v49 = *(_BYTE *)(v21 + v48);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v49 & 0x7F) << v46;
            if ((v49 & 0x80) == 0)
              break;
            v46 += 7;
            v14 = v47++ > 8;
            if (v14)
            {
              v24 = 0;
LABEL_106:
              v2 = v48 + 1;
              goto LABEL_107;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v24 = 0;
          goto LABEL_106;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_107;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        v24 = 0;
LABEL_107:
        *((_QWORD *)this + 1) = v24;
        break;
      case 2u:
        *((_WORD *)this + 28) |= 0x20u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v50 = 0;
          v51 = 0;
          v30 = 0;
          if (v2 <= v26)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_112;
            }
            v52 = v26++;
            v53 = *(_BYTE *)(v27 + v52);
            *((_QWORD *)a2 + 1) = v26;
            v30 |= (unint64_t)(v53 & 0x7F) << v50;
            if ((v53 & 0x80) == 0)
              break;
            v50 += 7;
            v14 = v51++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_111:
              v2 = v52 + 1;
              goto LABEL_112;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v30) = 0;
          goto LABEL_111;
        }
        v28 = 0;
        v29 = 0;
        v30 = 0;
        do
        {
          v2 = v26 + 1;
          *((_QWORD *)a2 + 1) = v26 + 1;
          v31 = *(_BYTE *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0)
            goto LABEL_112;
          v28 += 7;
          v26 = v2;
          v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_112:
        *((_DWORD *)this + 8) = v30;
        break;
      case 3u:
        *((_WORD *)this + 28) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_70;
        *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_102;
      case 4u:
        *((_WORD *)this + 28) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_70;
        *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_102;
      case 5u:
        *((_WORD *)this + 28) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_70;
        *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_102;
      case 6u:
        *((_WORD *)this + 28) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_70;
        *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_102;
      case 7u:
        *((_WORD *)this + 28) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_70;
        *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_102;
      case 8u:
        *((_WORD *)this + 28) |= 0x400u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v33 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v32 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v33 = v32 != 0;
        }
        *((_BYTE *)this + 52) = v33;
        break;
      case 9u:
        *((_WORD *)this + 28) |= 2u;
        v34 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v35 = *(_QWORD *)a2;
        if (v34 > 0xFFFFFFFFFFFFFFF5 || v34 + 10 > v2)
        {
          v54 = 0;
          v55 = 0;
          v38 = 0;
          if (v2 <= v34)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v34)
            {
              LODWORD(v38) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_117;
            }
            v56 = v34++;
            v57 = *(_BYTE *)(v35 + v56);
            *((_QWORD *)a2 + 1) = v34;
            v38 |= (unint64_t)(v57 & 0x7F) << v54;
            if ((v57 & 0x80) == 0)
              break;
            v54 += 7;
            v14 = v55++ > 8;
            if (v14)
            {
              LODWORD(v38) = 0;
LABEL_116:
              v2 = v56 + 1;
              goto LABEL_117;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v38) = 0;
          goto LABEL_116;
        }
        v36 = 0;
        v37 = 0;
        v38 = 0;
        do
        {
          v2 = v34 + 1;
          *((_QWORD *)a2 + 1) = v34 + 1;
          v39 = *(_BYTE *)(v35 + v34);
          v38 |= (unint64_t)(v39 & 0x7F) << v36;
          if ((v39 & 0x80) == 0)
            goto LABEL_117;
          v36 += 7;
          v34 = v2;
          v14 = v37++ > 8;
        }
        while (!v14);
        LODWORD(v38) = 0;
LABEL_117:
        *((_DWORD *)this + 4) = v38;
        break;
      case 0xAu:
        *((_WORD *)this + 28) |= 0x100u;
        v40 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v41 = *(_QWORD *)a2;
        if (v40 > 0xFFFFFFFFFFFFFFF5 || v40 + 10 > v2)
        {
          v58 = 0;
          v59 = 0;
          v44 = 0;
          if (v2 <= v40)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v40)
            {
              LODWORD(v44) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_122;
            }
            v60 = v40++;
            v61 = *(_BYTE *)(v41 + v60);
            *((_QWORD *)a2 + 1) = v40;
            v44 |= (unint64_t)(v61 & 0x7F) << v58;
            if ((v61 & 0x80) == 0)
              break;
            v58 += 7;
            v14 = v59++ > 8;
            if (v14)
            {
              LODWORD(v44) = 0;
LABEL_121:
              v2 = v60 + 1;
              goto LABEL_122;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v44) = 0;
          goto LABEL_121;
        }
        v42 = 0;
        v43 = 0;
        v44 = 0;
        do
        {
          v2 = v40 + 1;
          *((_QWORD *)a2 + 1) = v40 + 1;
          v45 = *(_BYTE *)(v41 + v40);
          v44 |= (unint64_t)(v45 & 0x7F) << v42;
          if ((v45 & 0x80) == 0)
            goto LABEL_122;
          v42 += 7;
          v40 = v2;
          v14 = v43++ > 8;
        }
        while (!v14);
        LODWORD(v44) = 0;
LABEL_122:
        *((_DWORD *)this + 11) = v44;
        break;
      case 0xBu:
        *((_WORD *)this + 28) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_102:
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_70:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_123:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::SubStats::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 56);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_WORD *)(v3 + 56);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x400) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x400) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2);
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x100) == 0)
  {
LABEL_11:
    if ((v4 & 0x40) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 36));
  }
LABEL_22:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_WORD *)(v3 + 56) & 0x40) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 36));
  return this;
}

uint64_t CMMsl::SubStats::hash_value(CMMsl::SubStats *this)
{
  __int16 v1;
  uint64_t v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;

  v1 = *((_WORD *)this + 28);
  if ((v1 & 1) != 0)
  {
    v2 = *((_QWORD *)this + 1);
    if ((v1 & 0x20) != 0)
    {
LABEL_3:
      v3 = *((int *)this + 8);
      if ((v1 & 4) != 0)
        goto LABEL_4;
LABEL_27:
      v5 = 0;
      if ((v1 & 0x10) != 0)
        goto LABEL_7;
LABEL_28:
      v7 = 0;
      if ((v1 & 8) != 0)
        goto LABEL_10;
LABEL_29:
      v9 = 0;
      if ((*((_WORD *)this + 28) & 0x200) != 0)
        goto LABEL_13;
LABEL_30:
      v11 = 0;
      if ((v1 & 0x80) != 0)
        goto LABEL_16;
LABEL_31:
      v13 = 0;
      if ((*((_WORD *)this + 28) & 0x400) != 0)
        goto LABEL_19;
      goto LABEL_32;
    }
  }
  else
  {
    v2 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((v1 & 4) == 0)
    goto LABEL_27;
LABEL_4:
  v4 = *((float *)this + 5);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_28;
LABEL_7:
  v6 = *((float *)this + 7);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_29;
LABEL_10:
  v8 = *((float *)this + 6);
  v9 = LODWORD(v8);
  if (v8 == 0.0)
    v9 = 0;
  if ((*((_WORD *)this + 28) & 0x200) == 0)
    goto LABEL_30;
LABEL_13:
  v10 = *((float *)this + 12);
  v11 = LODWORD(v10);
  if (v10 == 0.0)
    v11 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_31;
LABEL_16:
  v12 = *((float *)this + 10);
  v13 = LODWORD(v12);
  if (v12 == 0.0)
    v13 = 0;
  if ((*((_WORD *)this + 28) & 0x400) != 0)
  {
LABEL_19:
    v14 = *((unsigned __int8 *)this + 52);
    if ((v1 & 2) != 0)
      goto LABEL_20;
    goto LABEL_33;
  }
LABEL_32:
  v14 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_20:
    v15 = *((int *)this + 4);
    if ((*((_WORD *)this + 28) & 0x100) != 0)
      goto LABEL_21;
    goto LABEL_34;
  }
LABEL_33:
  v15 = 0;
  if ((*((_WORD *)this + 28) & 0x100) != 0)
  {
LABEL_21:
    v16 = *((unsigned int *)this + 11);
    if ((v1 & 0x40) != 0)
      goto LABEL_22;
LABEL_35:
    v18 = 0;
    return v3 ^ v2 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13 ^ v14 ^ v15 ^ v16 ^ v18;
  }
LABEL_34:
  v16 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_35;
LABEL_22:
  v17 = *((float *)this + 9);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  return v3 ^ v2 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13 ^ v14 ^ v15 ^ v16 ^ v18;
}

void CMMsl::SwingDoTCandidate::~SwingDoTCandidate(CMMsl::SwingDoTCandidate *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::SwingDoTCandidate::SwingDoTCandidate(CMMsl::SwingDoTCandidate *this, const CMMsl::SwingDoTCandidate *a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)this = &off_2513614C8;
  *((_DWORD *)this + 8) = 0;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 8) != 0)
  {
    LODWORD(result) = *((_DWORD *)a2 + 7);
    v3 = 8;
    *((_BYTE *)this + 32) = 8;
    *((_DWORD *)this + 7) = LODWORD(result);
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *((_BYTE *)this + 32) = v3;
    *((_DWORD *)this + 6) = LODWORD(result);
    v2 = *((_BYTE *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 1) == 0)
  {
    if ((v2 & 2) == 0)
      return result;
LABEL_10:
    result = *((double *)a2 + 2);
    *((_BYTE *)this + 32) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
  result = *((double *)a2 + 1);
  v3 |= 1u;
  *((_BYTE *)this + 32) = v3;
  *((double *)this + 1) = result;
  if ((*((_BYTE *)a2 + 32) & 2) != 0)
    goto LABEL_10;
  return result;
}

uint64_t CMMsl::SwingDoTCandidate::operator=(uint64_t a1, const CMMsl::SwingDoTCandidate *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  _BYTE v7[8];
  __int128 v8;
  uint64_t v9;
  int v10;

  if ((const CMMsl::SwingDoTCandidate *)a1 != a2)
  {
    CMMsl::SwingDoTCandidate::SwingDoTCandidate((CMMsl::SwingDoTCandidate *)v7, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v9;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SwingDoTCandidate *a2, CMMsl::SwingDoTCandidate *a3)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  double result;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  v5 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v5;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::SwingDoTCandidate::SwingDoTCandidate(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_2513614C8;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_2513614C8;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::SwingDoTCandidate::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  void (**v8)(CMMsl::SwingDoTCandidate *__hidden);
  __int128 v9;
  uint64_t v10;
  int v11;

  if (a1 != a2)
  {
    v8 = &off_2513614C8;
    v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    v11 = *(_DWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    v6 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    v9 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::SwingDoTCandidate::formatText(CMMsl::SwingDoTCandidate *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "dirAngleRad", *((float *)this + 6));
    v5 = *((_BYTE *)this + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "peakTimestamp", *((double *)this + 1));
      if ((*((_BYTE *)this + 32) & 2) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "extremaVal", *((float *)this + 7));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 2) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "valleyTimestamp", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SwingDoTCandidate::readFrom(CMMsl::SwingDoTCandidate *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_39;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 32) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_35;
        *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_29;
      case 2u:
        *((_BYTE *)this + 32) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_35;
        *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_29:
        v2 = *((_QWORD *)a2 + 1) + 4;
        goto LABEL_38;
      case 3u:
        *((_BYTE *)this + 32) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_35;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_37;
      case 4u:
        *((_BYTE *)this + 32) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_37:
          v2 = *((_QWORD *)a2 + 1) + 8;
LABEL_38:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_35:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_39:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::SwingDoTCandidate::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 28));
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 16));
  }
LABEL_8:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 16));
  return this;
}

uint64_t CMMsl::SwingDoTCandidate::hash_value(CMMsl::SwingDoTCandidate *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  double v4;
  double v5;
  float v6;

  if ((*((_BYTE *)this + 32) & 8) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 32) & 4) != 0)
      goto LABEL_3;
LABEL_15:
    v3 = 0;
    if ((*((_BYTE *)this + 32) & 1) != 0)
      goto LABEL_6;
    goto LABEL_16;
  }
  v6 = *((float *)this + 7);
  v1 = LODWORD(v6);
  if (v6 == 0.0)
    v1 = 0;
  if ((*((_BYTE *)this + 32) & 4) == 0)
    goto LABEL_15;
LABEL_3:
  v2 = *((float *)this + 6);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 32) & 1) != 0)
  {
LABEL_6:
    v4 = *((double *)this + 1);
    if (v4 == 0.0)
      v4 = 0.0;
    if ((*((_BYTE *)this + 32) & 2) != 0)
      goto LABEL_9;
LABEL_17:
    v5 = 0.0;
    return v3 ^ v1 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5;
  }
LABEL_16:
  v4 = 0.0;
  if ((*((_BYTE *)this + 32) & 2) == 0)
    goto LABEL_17;
LABEL_9:
  v5 = *((double *)this + 2);
  if (v5 == 0.0)
    v5 = 0.0;
  return v3 ^ v1 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5;
}

void CMMsl::TapAccept::~TapAccept(CMMsl::TapAccept *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::TapAccept::TapAccept(uint64_t this, const CMMsl::TapAccept *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;

  *(_QWORD *)this = &off_251361500;
  *(_DWORD *)(this + 36) = -1;
  *(_DWORD *)(this + 44) = 0;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 2) != 0)
  {
    v4 = *((_QWORD *)a2 + 2);
    v3 = 2;
    *(_BYTE *)(this + 44) = 2;
    *(_QWORD *)(this + 16) = v4;
    v2 = *((_BYTE *)a2 + 44);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 44) & 4) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *(_BYTE *)(this + 44) = v3;
    *(_DWORD *)(this + 24) = v5;
    v2 = *((_BYTE *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    v6 = *((_DWORD *)a2 + 9);
    v3 |= 0x20u;
    *(_BYTE *)(this + 44) = v3;
    *(_DWORD *)(this + 36) = v6;
    v2 = *((_BYTE *)a2 + 44);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 8);
  v3 |= 0x10u;
  *(_BYTE *)(this + 44) = v3;
  *(_DWORD *)(this + 32) = v7;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0)
      goto LABEL_10;
    goto LABEL_15;
  }
LABEL_14:
  v8 = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *(_BYTE *)(this + 44) = v3;
  *(_DWORD *)(this + 28) = v8;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 1) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      return this;
LABEL_16:
    v10 = *((_DWORD *)a2 + 10);
    *(_BYTE *)(this + 44) = v3 | 0x40;
    *(_DWORD *)(this + 40) = v10;
    return this;
  }
LABEL_15:
  v9 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_BYTE *)(this + 44) = v3;
  *(_QWORD *)(this + 8) = v9;
  if ((*((_BYTE *)a2 + 44) & 0x40) != 0)
    goto LABEL_16;
  return this;
}

uint64_t CMMsl::TapAccept::operator=(uint64_t a1, const CMMsl::TapAccept *a2)
{
  int v3;
  int v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v8;
  __int128 v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  if ((const CMMsl::TapAccept *)a1 != a2)
  {
    CMMsl::TapAccept::TapAccept((uint64_t)&v8, a2);
    v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v13;
    v13 = v3;
    v4 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    v10 = v4;
    v5 = *(_QWORD *)(a1 + 28);
    *(_QWORD *)(a1 + 28) = v11;
    v11 = v5;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v9 = v6;
    *(_QWORD *)&v6 = *(_QWORD *)(a1 + 36);
    *(_QWORD *)(a1 + 36) = v12;
    v12 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::TapAccept *a2, CMMsl::TapAccept *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  double result;
  uint64_t v8;

  v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v5;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  result = *(double *)((char *)a2 + 36);
  v8 = *(_QWORD *)((char *)this + 36);
  *(double *)((char *)this + 36) = result;
  *(_QWORD *)((char *)a2 + 36) = v8;
  return result;
}

double CMMsl::TapAccept::TapAccept(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_251361500;
  *(_DWORD *)(a1 + 36) = -1;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 36);
  *(double *)(a1 + 36) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_251361500;
  *(_DWORD *)(a1 + 36) = -1;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 36);
  *(double *)(a1 + 36) = result;
  return result;
}

uint64_t CMMsl::TapAccept::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  void (**v9)(CMMsl::TapAccept *__hidden);
  __int128 v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  if (a1 != a2)
  {
    v9 = &off_251361500;
    v3 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a2 + 44) = 0;
    v4 = *(_DWORD *)(a2 + 24);
    v14 = *(_DWORD *)(a1 + 44);
    v11 = *(_DWORD *)(a1 + 24);
    v5 = *(_QWORD *)(a1 + 28);
    *(_QWORD *)(a1 + 28) = *(_QWORD *)(a2 + 28);
    v12 = v5;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    v10 = v6;
    *(_QWORD *)&v6 = *(_QWORD *)(a1 + 36);
    v7 = *(_QWORD *)(a2 + 36);
    *(_DWORD *)(a1 + 24) = v4;
    *(_DWORD *)(a1 + 44) = v3;
    *(_QWORD *)(a1 + 36) = v7;
    v13 = v6;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::TapAccept::formatText(CMMsl::TapAccept *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "location");
    v5 = *((_BYTE *)this + 44);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*((_BYTE *)this + 44) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "peakHalfWidth", *((float *)this + 7));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "peakMagnitude", *((float *)this + 8));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "peakTime", *((double *)this + 1));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
LABEL_15:
    PB::TextFormatter::format(a2, "tapCounter");
    if ((*((_BYTE *)this + 44) & 2) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_8;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "tapAcceptStatus");
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 0x40) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v5 & 2) != 0)
LABEL_8:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::TapAccept::readFrom(CMMsl::TapAccept *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  unint64_t v40;
  char v41;
  char v42;
  unsigned int v43;
  unint64_t v44;
  char v45;
  char v46;
  unsigned int v47;
  unint64_t v48;
  char v49;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_96;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 44) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_49;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_79;
      case 2u:
        *((_BYTE *)this + 44) |= 4u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v38 = 0;
          v39 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_85;
            }
            v40 = v20++;
            v41 = *(_BYTE *)(v21 + v40);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0)
              break;
            v38 += 7;
            v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_84:
              v2 = v40 + 1;
              goto LABEL_85;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
          goto LABEL_84;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_85;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_85:
        *((_DWORD *)this + 6) = v24;
        break;
      case 3u:
        *((_BYTE *)this + 44) |= 0x20u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v42 = 0;
          v43 = 0;
          v30 = 0;
          if (v2 <= v26)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_90;
            }
            v44 = v26++;
            v45 = *(_BYTE *)(v27 + v44);
            *((_QWORD *)a2 + 1) = v26;
            v30 |= (unint64_t)(v45 & 0x7F) << v42;
            if ((v45 & 0x80) == 0)
              break;
            v42 += 7;
            v14 = v43++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_89:
              v2 = v44 + 1;
              goto LABEL_90;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v30) = 0;
          goto LABEL_89;
        }
        v28 = 0;
        v29 = 0;
        v30 = 0;
        do
        {
          v2 = v26 + 1;
          *((_QWORD *)a2 + 1) = v26 + 1;
          v31 = *(_BYTE *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0)
            goto LABEL_90;
          v28 += 7;
          v26 = v2;
          v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_90:
        *((_DWORD *)this + 9) = v30;
        break;
      case 4u:
        *((_BYTE *)this + 44) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_49;
        *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_46;
      case 5u:
        *((_BYTE *)this + 44) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_49;
        *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_46:
        v2 = *((_QWORD *)a2 + 1) + 4;
        goto LABEL_80;
      case 6u:
        *((_BYTE *)this + 44) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_79:
          v2 = *((_QWORD *)a2 + 1) + 8;
LABEL_80:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_49:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 7u:
        *((_BYTE *)this + 44) |= 0x40u;
        v32 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v33 = *(_QWORD *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
        {
          v46 = 0;
          v47 = 0;
          v36 = 0;
          if (v2 <= v32)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v32)
            {
              LODWORD(v36) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_95;
            }
            v48 = v32++;
            v49 = *(_BYTE *)(v33 + v48);
            *((_QWORD *)a2 + 1) = v32;
            v36 |= (unint64_t)(v49 & 0x7F) << v46;
            if ((v49 & 0x80) == 0)
              break;
            v46 += 7;
            v14 = v47++ > 8;
            if (v14)
            {
              LODWORD(v36) = 0;
LABEL_94:
              v2 = v48 + 1;
              goto LABEL_95;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v36) = 0;
          goto LABEL_94;
        }
        v34 = 0;
        v35 = 0;
        v36 = 0;
        do
        {
          v2 = v32 + 1;
          *((_QWORD *)a2 + 1) = v32 + 1;
          v37 = *(_BYTE *)(v33 + v32);
          v36 |= (unint64_t)(v37 & 0x7F) << v34;
          if ((v37 & 0x80) == 0)
            goto LABEL_95;
          v34 += 7;
          v32 = v2;
          v14 = v35++ > 8;
        }
        while (!v14);
        LODWORD(v36) = 0;
LABEL_95:
        *((_DWORD *)this + 10) = v36;
        break;
      default:
        goto LABEL_19;
    }
LABEL_96:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::TapAccept::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 44);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16));
    v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(this + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 1) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_14:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  if ((*(_BYTE *)(v3 + 44) & 0x40) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::TapAccept::hash_value(CMMsl::TapAccept *this)
{
  double v1;
  uint64_t v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  double v8;
  uint64_t v9;

  if ((*((_BYTE *)this + 44) & 2) != 0)
  {
    v1 = *((double *)this + 2);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 44) & 4) != 0)
    {
LABEL_3:
      v2 = *((unsigned int *)this + 6);
      if ((*((_BYTE *)this + 44) & 0x20) != 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 44) & 4) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 44) & 0x20) != 0)
  {
LABEL_4:
    v3 = *((int *)this + 9);
    if ((*((_BYTE *)this + 44) & 0x10) != 0)
      goto LABEL_5;
LABEL_20:
    v5 = 0;
    if ((*((_BYTE *)this + 44) & 8) != 0)
      goto LABEL_8;
LABEL_21:
    v7 = 0;
    if ((*((_BYTE *)this + 44) & 1) != 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_19:
  v3 = 0;
  if ((*((_BYTE *)this + 44) & 0x10) == 0)
    goto LABEL_20;
LABEL_5:
  v4 = *((float *)this + 8);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((*((_BYTE *)this + 44) & 8) == 0)
    goto LABEL_21;
LABEL_8:
  v6 = *((float *)this + 7);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  if ((*((_BYTE *)this + 44) & 1) != 0)
  {
LABEL_11:
    v8 = *((double *)this + 1);
    if (v8 == 0.0)
      v8 = 0.0;
    if ((*((_BYTE *)this + 44) & 0x40) != 0)
      goto LABEL_14;
LABEL_23:
    v9 = 0;
    return v2 ^ *(_QWORD *)&v1 ^ v3 ^ v5 ^ v7 ^ *(_QWORD *)&v8 ^ v9;
  }
LABEL_22:
  v8 = 0.0;
  if ((*((_BYTE *)this + 44) & 0x40) == 0)
    goto LABEL_23;
LABEL_14:
  v9 = *((unsigned int *)this + 10);
  return v2 ^ *(_QWORD *)&v1 ^ v3 ^ v5 ^ v7 ^ *(_QWORD *)&v8 ^ v9;
}

void CMMsl::TapDetect::~TapDetect(CMMsl::TapDetect *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::TapDetect::TapDetect(CMMsl::TapDetect *this, const CMMsl::TapDetect *a2)
{
  double result;
  __int16 v3;
  __int16 v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;

  *(_QWORD *)this = &off_251361538;
  *((_DWORD *)this + 7) = -2;
  result = NAN;
  *(_OWORD *)((char *)this + 52) = xmmword_242924C70;
  v3 = *((_WORD *)a2 + 32);
  if ((v3 & 2) != 0)
  {
    result = *((double *)a2 + 2);
    v4 = 2;
    *((_WORD *)this + 32) = 2;
    *((double *)this + 2) = result;
    v3 = *((_WORD *)a2 + 32);
    if ((v3 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v4 = 0;
  if ((v3 & 0x20) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 9);
    v4 |= 0x20u;
    *((_WORD *)this + 32) = v4;
    *((_DWORD *)this + 9) = v5;
    v3 = *((_WORD *)a2 + 32);
  }
LABEL_6:
  if ((v3 & 0x400) != 0)
  {
    v6 = *((_DWORD *)a2 + 14);
    v4 |= 0x400u;
    *((_WORD *)this + 32) = v4;
    *((_DWORD *)this + 14) = v6;
    v3 = *((_WORD *)a2 + 32);
    if ((v3 & 4) == 0)
    {
LABEL_8:
      if ((v3 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_19;
    }
  }
  else if ((v3 & 4) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 6);
  v4 |= 4u;
  *((_WORD *)this + 32) = v4;
  *((_DWORD *)this + 6) = v7;
  v3 = *((_WORD *)a2 + 32);
  if ((v3 & 0x10) == 0)
  {
LABEL_9:
    if ((v3 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  v8 = *((_DWORD *)a2 + 8);
  v4 |= 0x10u;
  *((_WORD *)this + 32) = v4;
  *((_DWORD *)this + 8) = v8;
  v3 = *((_WORD *)a2 + 32);
  if ((v3 & 0x200) == 0)
  {
LABEL_10:
    if ((v3 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_20:
  v9 = *((_DWORD *)a2 + 13);
  v4 |= 0x200u;
  *((_WORD *)this + 32) = v4;
  *((_DWORD *)this + 13) = v9;
  v3 = *((_WORD *)a2 + 32);
  if ((v3 & 0x800) == 0)
  {
LABEL_11:
    if ((v3 & 8) == 0)
      goto LABEL_12;
    goto LABEL_22;
  }
LABEL_21:
  v10 = *((_DWORD *)a2 + 15);
  v4 |= 0x800u;
  *((_WORD *)this + 32) = v4;
  *((_DWORD *)this + 15) = v10;
  v3 = *((_WORD *)a2 + 32);
  if ((v3 & 8) == 0)
  {
LABEL_12:
    if ((v3 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_23;
  }
LABEL_22:
  v11 = *((_DWORD *)a2 + 7);
  v4 |= 8u;
  *((_WORD *)this + 32) = v4;
  *((_DWORD *)this + 7) = v11;
  v3 = *((_WORD *)a2 + 32);
  if ((v3 & 0x100) == 0)
  {
LABEL_13:
    if ((v3 & 0x80) == 0)
      goto LABEL_14;
    goto LABEL_24;
  }
LABEL_23:
  LODWORD(result) = *((_DWORD *)a2 + 12);
  v4 |= 0x100u;
  *((_WORD *)this + 32) = v4;
  *((_DWORD *)this + 12) = LODWORD(result);
  v3 = *((_WORD *)a2 + 32);
  if ((v3 & 0x80) == 0)
  {
LABEL_14:
    if ((v3 & 0x40) == 0)
      goto LABEL_15;
    goto LABEL_25;
  }
LABEL_24:
  LODWORD(result) = *((_DWORD *)a2 + 11);
  v4 |= 0x80u;
  *((_WORD *)this + 32) = v4;
  *((_DWORD *)this + 11) = LODWORD(result);
  v3 = *((_WORD *)a2 + 32);
  if ((v3 & 0x40) == 0)
  {
LABEL_15:
    if ((v3 & 1) == 0)
      return result;
LABEL_26:
    result = *((double *)a2 + 1);
    *((_WORD *)this + 32) = v4 | 1;
    *((double *)this + 1) = result;
    return result;
  }
LABEL_25:
  LODWORD(result) = *((_DWORD *)a2 + 10);
  v4 |= 0x40u;
  *((_WORD *)this + 32) = v4;
  *((_DWORD *)this + 10) = LODWORD(result);
  if ((*((_WORD *)a2 + 32) & 1) != 0)
    goto LABEL_26;
  return result;
}

CMMsl *CMMsl::TapDetect::operator=(CMMsl *a1, const CMMsl::TapDetect *a2)
{
  CMMsl::TapDetect *v3;
  _BYTE v5[72];

  if (a1 != a2)
  {
    CMMsl::TapDetect::TapDetect((CMMsl::TapDetect *)v5, a2);
    CMMsl::swap(a1, (CMMsl::TapDetect *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::TapDetect *a2, CMMsl::TapDetect *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  double result;

  v3 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v5;
  v6 = *(_QWORD *)((char *)this + 52);
  *(_QWORD *)((char *)this + 52) = *(_QWORD *)((char *)a2 + 52);
  *(_QWORD *)((char *)a2 + 52) = v6;
  v7 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v7;
  v8 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v8;
  v9 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v9;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::TapDetect::TapDetect(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_251361538;
  *(_DWORD *)(a1 + 28) = -2;
  *(_QWORD *)(a1 + 52) = 0x100000001;
  *(_DWORD *)(a1 + 60) = -2;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 52) = *(_QWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

CMMsl *CMMsl::TapDetect::operator=(CMMsl *this, uint64_t a2, CMMsl::TapDetect *a3)
{
  __int128 v4;
  __int128 v5;
  void (**v7)(CMMsl::TapDetect *__hidden);
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  __int128 v12;

  if (this != (CMMsl *)a2)
  {
    v7 = &off_251361538;
    v4 = *(_OWORD *)(a2 + 52);
    *(_DWORD *)(a2 + 64) = 0;
    v12 = v4;
    v5 = *(_OWORD *)(a2 + 24);
    v11 = *(_DWORD *)(a2 + 48);
    v10 = *(_QWORD *)(a2 + 40);
    v8 = *(_OWORD *)(a2 + 8);
    v9 = v5;
    CMMsl::swap(this, (CMMsl::TapDetect *)&v7, a3);
    PB::Base::~Base((PB::Base *)&v7);
  }
  return this;
}

uint64_t CMMsl::TapDetect::formatText(CMMsl::TapDetect *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "axis");
    v5 = *((_WORD *)this + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "clippedPeakType");
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "direction");
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "location");
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "peakHalfWidth", *((float *)this + 10));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "peakMagnitude", *((float *)this + 11));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "peakTime", *((double *)this + 1));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "peakValue", *((float *)this + 12));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "strideDirection");
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 2) == 0)
      goto LABEL_12;
LABEL_25:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
    if ((*((_WORD *)this + 32) & 0x800) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_13;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "tapDetectStatus");
  v5 = *((_WORD *)this + 32);
  if ((v5 & 2) != 0)
    goto LABEL_25;
LABEL_12:
  if ((v5 & 0x800) != 0)
LABEL_13:
    PB::TextFormatter::format(a2, "widthCalculationMethod");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::TapDetect::readFrom(CMMsl::TapDetect *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  uint64_t v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  char v55;
  unint64_t v56;
  uint64_t v57;
  char v58;
  unsigned int v59;
  uint64_t v60;
  char v61;
  char v62;
  unsigned int v63;
  unint64_t v64;
  char v65;
  char v66;
  unsigned int v67;
  unint64_t v68;
  char v69;
  char v70;
  unsigned int v71;
  unint64_t v72;
  char v73;
  char v74;
  unsigned int v75;
  unint64_t v76;
  char v77;
  char v78;
  unsigned int v79;
  unint64_t v80;
  char v81;
  char v82;
  unsigned int v83;
  unint64_t v84;
  char v85;
  char v86;
  unsigned int v87;
  unint64_t v88;
  char v89;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_175;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 32) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_87;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_138;
      case 2u:
        *((_WORD *)this + 32) |= 0x20u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v62 = 0;
          v63 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_144;
            }
            v64 = v20++;
            v65 = *(_BYTE *)(v21 + v64);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v65 & 0x7F) << v62;
            if ((v65 & 0x80) == 0)
              break;
            v62 += 7;
            v14 = v63++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_143:
              v2 = v64 + 1;
              goto LABEL_144;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
          goto LABEL_143;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_144;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_144:
        *((_DWORD *)this + 9) = v24;
        break;
      case 3u:
        *((_WORD *)this + 32) |= 0x400u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v66 = 0;
          v67 = 0;
          v30 = 0;
          if (v2 <= v26)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_149;
            }
            v68 = v26++;
            v69 = *(_BYTE *)(v27 + v68);
            *((_QWORD *)a2 + 1) = v26;
            v30 |= (unint64_t)(v69 & 0x7F) << v66;
            if ((v69 & 0x80) == 0)
              break;
            v66 += 7;
            v14 = v67++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_148:
              v2 = v68 + 1;
              goto LABEL_149;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v30) = 0;
          goto LABEL_148;
        }
        v28 = 0;
        v29 = 0;
        v30 = 0;
        do
        {
          v2 = v26 + 1;
          *((_QWORD *)a2 + 1) = v26 + 1;
          v31 = *(_BYTE *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0)
            goto LABEL_149;
          v28 += 7;
          v26 = v2;
          v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_149:
        *((_DWORD *)this + 14) = v30;
        break;
      case 4u:
        *((_WORD *)this + 32) |= 4u;
        v32 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v33 = *(_QWORD *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
        {
          v70 = 0;
          v71 = 0;
          v36 = 0;
          if (v2 <= v32)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v32)
            {
              LODWORD(v36) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_154;
            }
            v72 = v32++;
            v73 = *(_BYTE *)(v33 + v72);
            *((_QWORD *)a2 + 1) = v32;
            v36 |= (unint64_t)(v73 & 0x7F) << v70;
            if ((v73 & 0x80) == 0)
              break;
            v70 += 7;
            v14 = v71++ > 8;
            if (v14)
            {
              LODWORD(v36) = 0;
LABEL_153:
              v2 = v72 + 1;
              goto LABEL_154;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v36) = 0;
          goto LABEL_153;
        }
        v34 = 0;
        v35 = 0;
        v36 = 0;
        do
        {
          v2 = v32 + 1;
          *((_QWORD *)a2 + 1) = v32 + 1;
          v37 = *(_BYTE *)(v33 + v32);
          v36 |= (unint64_t)(v37 & 0x7F) << v34;
          if ((v37 & 0x80) == 0)
            goto LABEL_154;
          v34 += 7;
          v32 = v2;
          v14 = v35++ > 8;
        }
        while (!v14);
        LODWORD(v36) = 0;
LABEL_154:
        *((_DWORD *)this + 6) = v36;
        break;
      case 5u:
        *((_WORD *)this + 32) |= 0x10u;
        v38 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v39 = *(_QWORD *)a2;
        if (v38 > 0xFFFFFFFFFFFFFFF5 || v38 + 10 > v2)
        {
          v74 = 0;
          v75 = 0;
          v42 = 0;
          if (v2 <= v38)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v38)
            {
              LODWORD(v42) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_159;
            }
            v76 = v38++;
            v77 = *(_BYTE *)(v39 + v76);
            *((_QWORD *)a2 + 1) = v38;
            v42 |= (unint64_t)(v77 & 0x7F) << v74;
            if ((v77 & 0x80) == 0)
              break;
            v74 += 7;
            v14 = v75++ > 8;
            if (v14)
            {
              LODWORD(v42) = 0;
LABEL_158:
              v2 = v76 + 1;
              goto LABEL_159;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v42) = 0;
          goto LABEL_158;
        }
        v40 = 0;
        v41 = 0;
        v42 = 0;
        do
        {
          v2 = v38 + 1;
          *((_QWORD *)a2 + 1) = v38 + 1;
          v43 = *(_BYTE *)(v39 + v38);
          v42 |= (unint64_t)(v43 & 0x7F) << v40;
          if ((v43 & 0x80) == 0)
            goto LABEL_159;
          v40 += 7;
          v38 = v2;
          v14 = v41++ > 8;
        }
        while (!v14);
        LODWORD(v42) = 0;
LABEL_159:
        *((_DWORD *)this + 8) = v42;
        break;
      case 6u:
        *((_WORD *)this + 32) |= 0x200u;
        v44 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v45 = *(_QWORD *)a2;
        if (v44 > 0xFFFFFFFFFFFFFFF5 || v44 + 10 > v2)
        {
          v78 = 0;
          v79 = 0;
          v48 = 0;
          if (v2 <= v44)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v44)
            {
              LODWORD(v48) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_164;
            }
            v80 = v44++;
            v81 = *(_BYTE *)(v45 + v80);
            *((_QWORD *)a2 + 1) = v44;
            v48 |= (unint64_t)(v81 & 0x7F) << v78;
            if ((v81 & 0x80) == 0)
              break;
            v78 += 7;
            v14 = v79++ > 8;
            if (v14)
            {
              LODWORD(v48) = 0;
LABEL_163:
              v2 = v80 + 1;
              goto LABEL_164;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v48) = 0;
          goto LABEL_163;
        }
        v46 = 0;
        v47 = 0;
        v48 = 0;
        do
        {
          v2 = v44 + 1;
          *((_QWORD *)a2 + 1) = v44 + 1;
          v49 = *(_BYTE *)(v45 + v44);
          v48 |= (unint64_t)(v49 & 0x7F) << v46;
          if ((v49 & 0x80) == 0)
            goto LABEL_164;
          v46 += 7;
          v44 = v2;
          v14 = v47++ > 8;
        }
        while (!v14);
        LODWORD(v48) = 0;
LABEL_164:
        *((_DWORD *)this + 13) = v48;
        break;
      case 7u:
        *((_WORD *)this + 32) |= 0x800u;
        v50 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v51 = *(_QWORD *)a2;
        if (v50 > 0xFFFFFFFFFFFFFFF5 || v50 + 10 > v2)
        {
          v82 = 0;
          v83 = 0;
          v54 = 0;
          if (v2 <= v50)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v50)
            {
              LODWORD(v54) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_169;
            }
            v84 = v50++;
            v85 = *(_BYTE *)(v51 + v84);
            *((_QWORD *)a2 + 1) = v50;
            v54 |= (unint64_t)(v85 & 0x7F) << v82;
            if ((v85 & 0x80) == 0)
              break;
            v82 += 7;
            v14 = v83++ > 8;
            if (v14)
            {
              LODWORD(v54) = 0;
LABEL_168:
              v2 = v84 + 1;
              goto LABEL_169;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v54) = 0;
          goto LABEL_168;
        }
        v52 = 0;
        v53 = 0;
        v54 = 0;
        do
        {
          v2 = v50 + 1;
          *((_QWORD *)a2 + 1) = v50 + 1;
          v55 = *(_BYTE *)(v51 + v50);
          v54 |= (unint64_t)(v55 & 0x7F) << v52;
          if ((v55 & 0x80) == 0)
            goto LABEL_169;
          v52 += 7;
          v50 = v2;
          v14 = v53++ > 8;
        }
        while (!v14);
        LODWORD(v54) = 0;
LABEL_169:
        *((_DWORD *)this + 15) = v54;
        break;
      case 8u:
        *((_WORD *)this + 32) |= 8u;
        v56 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v57 = *(_QWORD *)a2;
        if (v56 > 0xFFFFFFFFFFFFFFF5 || v56 + 10 > v2)
        {
          v86 = 0;
          v87 = 0;
          v60 = 0;
          if (v2 <= v56)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v56)
            {
              LODWORD(v60) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_174;
            }
            v88 = v56++;
            v89 = *(_BYTE *)(v57 + v88);
            *((_QWORD *)a2 + 1) = v56;
            v60 |= (unint64_t)(v89 & 0x7F) << v86;
            if ((v89 & 0x80) == 0)
              break;
            v86 += 7;
            v14 = v87++ > 8;
            if (v14)
            {
              LODWORD(v60) = 0;
LABEL_173:
              v2 = v88 + 1;
              goto LABEL_174;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v60) = 0;
          goto LABEL_173;
        }
        v58 = 0;
        v59 = 0;
        v60 = 0;
        do
        {
          v2 = v56 + 1;
          *((_QWORD *)a2 + 1) = v56 + 1;
          v61 = *(_BYTE *)(v57 + v56);
          v60 |= (unint64_t)(v61 & 0x7F) << v58;
          if ((v61 & 0x80) == 0)
            goto LABEL_174;
          v58 += 7;
          v56 = v2;
          v14 = v59++ > 8;
        }
        while (!v14);
        LODWORD(v60) = 0;
LABEL_174:
        *((_DWORD *)this + 7) = v60;
        break;
      case 9u:
        *((_WORD *)this + 32) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_87;
        *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_84;
      case 0xAu:
        *((_WORD *)this + 32) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_87;
        *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_84;
      case 0xBu:
        *((_WORD *)this + 32) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_87;
        *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_84:
        v2 = *((_QWORD *)a2 + 1) + 4;
        goto LABEL_139;
      case 0xCu:
        *((_WORD *)this + 32) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_138:
          v2 = *((_QWORD *)a2 + 1) + 8;
LABEL_139:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_87:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_175:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::TapDetect::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 64);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16));
    v4 = *(_WORD *)(v3 + 64);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 0x800) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x800) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x80) == 0)
  {
LABEL_11:
    if ((v4 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x40) == 0)
  {
LABEL_12:
    if ((v4 & 1) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 8));
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  if ((*(_WORD *)(v3 + 64) & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 8));
  return this;
}

uint64_t CMMsl::TapDetect::hash_value(CMMsl::TapDetect *this)
{
  __int16 v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  double v16;

  v1 = *((_WORD *)this + 32);
  if ((v1 & 2) != 0)
  {
    v2 = *((double *)this + 2);
    if (v2 == 0.0)
      v2 = 0.0;
    if ((v1 & 0x20) != 0)
    {
LABEL_3:
      v3 = *((unsigned int *)this + 9);
      if ((*((_WORD *)this + 32) & 0x400) != 0)
        goto LABEL_4;
      goto LABEL_26;
    }
  }
  else
  {
    v2 = 0.0;
    if ((v1 & 0x20) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((*((_WORD *)this + 32) & 0x400) != 0)
  {
LABEL_4:
    v4 = *((int *)this + 14);
    if ((v1 & 4) != 0)
      goto LABEL_5;
    goto LABEL_27;
  }
LABEL_26:
  v4 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_5:
    v5 = *((int *)this + 6);
    if ((v1 & 0x10) != 0)
      goto LABEL_6;
    goto LABEL_28;
  }
LABEL_27:
  v5 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_6:
    v6 = *((int *)this + 8);
    if ((*((_WORD *)this + 32) & 0x200) != 0)
      goto LABEL_7;
    goto LABEL_29;
  }
LABEL_28:
  v6 = 0;
  if ((*((_WORD *)this + 32) & 0x200) != 0)
  {
LABEL_7:
    v7 = *((int *)this + 13);
    if ((*((_WORD *)this + 32) & 0x800) != 0)
      goto LABEL_8;
    goto LABEL_30;
  }
LABEL_29:
  v7 = 0;
  if ((*((_WORD *)this + 32) & 0x800) != 0)
  {
LABEL_8:
    v8 = *((int *)this + 15);
    if ((v1 & 8) != 0)
      goto LABEL_9;
    goto LABEL_31;
  }
LABEL_30:
  v8 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_9:
    v9 = *((int *)this + 7);
    if ((*((_WORD *)this + 32) & 0x100) != 0)
      goto LABEL_10;
LABEL_32:
    v11 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_13;
LABEL_33:
    v13 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_16;
    goto LABEL_34;
  }
LABEL_31:
  v9 = 0;
  if ((*((_WORD *)this + 32) & 0x100) == 0)
    goto LABEL_32;
LABEL_10:
  v10 = *((float *)this + 12);
  v11 = LODWORD(v10);
  if (v10 == 0.0)
    v11 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_33;
LABEL_13:
  v12 = *((float *)this + 11);
  v13 = LODWORD(v12);
  if (v12 == 0.0)
    v13 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_16:
    v14 = *((float *)this + 10);
    v15 = LODWORD(v14);
    if (v14 == 0.0)
      v15 = 0;
    if ((v1 & 1) != 0)
      goto LABEL_19;
LABEL_35:
    v16 = 0.0;
    return v3 ^ *(_QWORD *)&v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v11 ^ v13 ^ v15 ^ *(_QWORD *)&v16;
  }
LABEL_34:
  v15 = 0;
  if ((v1 & 1) == 0)
    goto LABEL_35;
LABEL_19:
  v16 = *((double *)this + 1);
  if (v16 == 0.0)
    v16 = 0.0;
  return v3 ^ *(_QWORD *)&v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v11 ^ v13 ^ v15 ^ *(_QWORD *)&v16;
}

void CMMsl::TempestPoCAuxiliaryDeviceMotion::~TempestPoCAuxiliaryDeviceMotion(CMMsl::TempestPoCAuxiliaryDeviceMotion *this)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = &off_251361570;
  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::TempestPoCAuxiliaryDeviceMotion::~TempestPoCAuxiliaryDeviceMotion(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::TempestPoCAuxiliaryDeviceMotion *CMMsl::TempestPoCAuxiliaryDeviceMotion::TempestPoCAuxiliaryDeviceMotion(CMMsl::TempestPoCAuxiliaryDeviceMotion *this, const CMMsl::TempestPoCAuxiliaryDeviceMotion *a2)
{
  _QWORD *v4;
  CMMsl::AuxiliaryDeviceMotion *v5;
  CMMsl::AuxiliaryDeviceMotion *v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *((_QWORD *)this + 1) = 0;
  v4 = (_QWORD *)((char *)this + 8);
  *(_QWORD *)this = &off_251361570;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_DWORD *)this + 26) = 0;
  if (*((_QWORD *)a2 + 10))
  {
    v5 = (CMMsl::AuxiliaryDeviceMotion *)operator new();
    v6 = CMMsl::AuxiliaryDeviceMotion::AuxiliaryDeviceMotion(v5, *((const CMMsl::AuxiliaryDeviceMotion **)a2 + 10));
    v7 = *((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if (this != a2)
    sub_242911380(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  v8 = *((_WORD *)a2 + 52);
  if ((v8 & 0x80) != 0)
  {
    v11 = *((_DWORD *)a2 + 23);
    *((_WORD *)this + 52) |= 0x80u;
    *((_DWORD *)this + 23) = v11;
    v8 = *((_WORD *)a2 + 52);
    if ((v8 & 0x40) == 0)
    {
LABEL_8:
      if ((v8 & 0x100) == 0)
        goto LABEL_9;
      goto LABEL_20;
    }
  }
  else if ((v8 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  v12 = *((_DWORD *)a2 + 22);
  *((_WORD *)this + 52) |= 0x40u;
  *((_DWORD *)this + 22) = v12;
  v8 = *((_WORD *)a2 + 52);
  if ((v8 & 0x100) == 0)
  {
LABEL_9:
    if ((v8 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  v13 = *((_DWORD *)a2 + 24);
  *((_WORD *)this + 52) |= 0x100u;
  *((_DWORD *)this + 24) = v13;
  v8 = *((_WORD *)a2 + 52);
  if ((v8 & 0x200) == 0)
  {
LABEL_10:
    if ((v8 & 2) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  v14 = *((_DWORD *)a2 + 25);
  *((_WORD *)this + 52) |= 0x200u;
  *((_DWORD *)this + 25) = v14;
  v8 = *((_WORD *)a2 + 52);
  if ((v8 & 2) == 0)
  {
LABEL_11:
    if ((v8 & 4) == 0)
      goto LABEL_12;
    goto LABEL_23;
  }
LABEL_22:
  v15 = *((_QWORD *)a2 + 5);
  *((_WORD *)this + 52) |= 2u;
  *((_QWORD *)this + 5) = v15;
  v8 = *((_WORD *)a2 + 52);
  if ((v8 & 4) == 0)
  {
LABEL_12:
    if ((v8 & 0x10) == 0)
      goto LABEL_13;
    goto LABEL_24;
  }
LABEL_23:
  v16 = *((_QWORD *)a2 + 6);
  *((_WORD *)this + 52) |= 4u;
  *((_QWORD *)this + 6) = v16;
  v8 = *((_WORD *)a2 + 52);
  if ((v8 & 0x10) == 0)
  {
LABEL_13:
    if ((v8 & 0x20) == 0)
      goto LABEL_14;
    goto LABEL_25;
  }
LABEL_24:
  v17 = *((_QWORD *)a2 + 8);
  *((_WORD *)this + 52) |= 0x10u;
  *((_QWORD *)this + 8) = v17;
  v8 = *((_WORD *)a2 + 52);
  if ((v8 & 0x20) == 0)
  {
LABEL_14:
    if ((v8 & 1) == 0)
      goto LABEL_15;
LABEL_26:
    v19 = *((_QWORD *)a2 + 4);
    *((_WORD *)this + 52) |= 1u;
    *((_QWORD *)this + 4) = v19;
    if ((*((_WORD *)a2 + 52) & 8) == 0)
      return this;
    goto LABEL_16;
  }
LABEL_25:
  v18 = *((_QWORD *)a2 + 9);
  *((_WORD *)this + 52) |= 0x20u;
  *((_QWORD *)this + 9) = v18;
  v8 = *((_WORD *)a2 + 52);
  if ((v8 & 1) != 0)
    goto LABEL_26;
LABEL_15:
  if ((v8 & 8) != 0)
  {
LABEL_16:
    v9 = *((_QWORD *)a2 + 7);
    *((_WORD *)this + 52) |= 8u;
    *((_QWORD *)this + 7) = v9;
  }
  return this;
}

CMMsl *CMMsl::TempestPoCAuxiliaryDeviceMotion::operator=(CMMsl *a1, const CMMsl::TempestPoCAuxiliaryDeviceMotion *a2)
{
  CMMsl::TempestPoCAuxiliaryDeviceMotion *v3;
  _BYTE v5[112];

  if (a1 != a2)
  {
    CMMsl::TempestPoCAuxiliaryDeviceMotion::TempestPoCAuxiliaryDeviceMotion((CMMsl::TempestPoCAuxiliaryDeviceMotion *)v5, a2);
    CMMsl::swap(a1, (CMMsl::TempestPoCAuxiliaryDeviceMotion *)v5, v3);
    CMMsl::TempestPoCAuxiliaryDeviceMotion::~TempestPoCAuxiliaryDeviceMotion((CMMsl::TempestPoCAuxiliaryDeviceMotion *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::TempestPoCAuxiliaryDeviceMotion *a2, CMMsl::TempestPoCAuxiliaryDeviceMotion *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double result;

  v3 = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v3;
  v4 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  v8 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v8;
  LODWORD(v7) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v7;
  LODWORD(v7) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v7;
  v9 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v9;
  v10 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v10;
  v11 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v11;
  v12 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v12;
  v13 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v13;
  v14 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v14;
  result = *((double *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((double *)a2 + 7) = result;
  return result;
}

uint64_t CMMsl::TempestPoCAuxiliaryDeviceMotion::TempestPoCAuxiliaryDeviceMotion(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_251361570;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a2 + 104) = 0;
  v5 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = 0;
  v6 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  sub_242911330(v4, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

CMMsl *CMMsl::TempestPoCAuxiliaryDeviceMotion::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::TempestPoCAuxiliaryDeviceMotion *v3;
  _BYTE v5[112];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::TempestPoCAuxiliaryDeviceMotion::TempestPoCAuxiliaryDeviceMotion((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::TempestPoCAuxiliaryDeviceMotion *)v5, v3);
    CMMsl::TempestPoCAuxiliaryDeviceMotion::~TempestPoCAuxiliaryDeviceMotion((CMMsl::TempestPoCAuxiliaryDeviceMotion *)v5);
  }
  return a1;
}

uint64_t CMMsl::TempestPoCAuxiliaryDeviceMotion::formatText(CMMsl::TempestPoCAuxiliaryDeviceMotion *this, PB::TextFormatter *a2, const char *a3)
{
  float *v5;
  float *v6;
  float v7;
  __int16 v8;
  uint64_t v9;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_WORD *)this + 52) & 1) != 0)
    PB::TextFormatter::format(a2, "auxiliaryIosTimeUncertainty", *((double *)this + 4));
  v5 = (float *)*((_QWORD *)this + 1);
  v6 = (float *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "filteredAcceleration", v7);
  }
  v8 = *((_WORD *)this + 52);
  if ((v8 & 0x40) != 0)
  {
    PB::TextFormatter::format(a2, "quiescentMode");
    v8 = *((_WORD *)this + 52);
    if ((v8 & 0x80) == 0)
    {
LABEL_7:
      if ((v8 & 2) == 0)
        goto LABEL_8;
      goto LABEL_21;
    }
  }
  else if ((v8 & 0x80) == 0)
  {
    goto LABEL_7;
  }
  PB::TextFormatter::format(a2, "quiescentNoise", *((float *)this + 23));
  v8 = *((_WORD *)this + 52);
  if ((v8 & 2) == 0)
  {
LABEL_8:
    if ((v8 & 4) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "sensorTimeBeforeAlignment", *((double *)this + 5));
  v8 = *((_WORD *)this + 52);
  if ((v8 & 4) == 0)
  {
LABEL_9:
    if ((v8 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "sentCftime", *((double *)this + 6));
  v8 = *((_WORD *)this + 52);
  if ((v8 & 0x100) == 0)
  {
LABEL_10:
    if ((v8 & 8) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "sequenceNumber");
  v8 = *((_WORD *)this + 52);
  if ((v8 & 8) == 0)
  {
LABEL_11:
    if ((v8 & 0x10) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "sourceIosTimeUncertainty", *((double *)this + 7));
  v8 = *((_WORD *)this + 52);
  if ((v8 & 0x10) == 0)
  {
LABEL_12:
    if ((v8 & 0x20) == 0)
      goto LABEL_14;
    goto LABEL_13;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "sourceReceiveCftime", *((double *)this + 8));
  if ((*((_WORD *)this + 52) & 0x20) != 0)
LABEL_13:
    PB::TextFormatter::format(a2, "sourceReceiveSensorTimestamp", *((double *)this + 9));
LABEL_14:
  v9 = *((_QWORD *)this + 10);
  if (v9)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, a2, "super");
  if ((*((_WORD *)this + 52) & 0x200) != 0)
    PB::TextFormatter::format(a2, "version", *((float *)this + 25));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::TempestPoCAuxiliaryDeviceMotion::readFrom(CMMsl::TempestPoCAuxiliaryDeviceMotion *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  _DWORD *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  _DWORD *v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  _DWORD *v77;
  int v78;
  unint64_t v79;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      break;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        v19 = operator new();
        *(_QWORD *)v19 = &off_25135C5D0;
        *(_DWORD *)(v19 + 152) = 0;
        *(_OWORD *)(v19 + 8) = 0u;
        *(_OWORD *)(v19 + 24) = 0u;
        *(_OWORD *)(v19 + 40) = 0u;
        *(_OWORD *)(v19 + 56) = 0u;
        *(_OWORD *)(v19 + 72) = 0u;
        *(_OWORD *)(v19 + 88) = 0u;
        *(_OWORD *)(v19 + 104) = 0u;
        *(_QWORD *)(v19 + 120) = 0;
        v20 = *((_QWORD *)this + 10);
        *((_QWORD *)this + 10) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = *((_QWORD *)this + 10);
        }
        if (PB::Reader::placeMark()
          && ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) != 0)
        {
          goto LABEL_27;
        }
        return 0;
      case 2u:
        if ((v11 & 7) == 2)
        {
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v21 = *((_QWORD *)a2 + 1);
          v22 = *((_QWORD *)a2 + 2);
          while (v21 < v22 && !*((_BYTE *)a2 + 24))
          {
            v24 = (char *)*((_QWORD *)this + 2);
            v23 = *((_QWORD *)this + 3);
            if ((unint64_t)v24 >= v23)
            {
              v26 = (char *)*((_QWORD *)this + 1);
              v27 = (v24 - v26) >> 2;
              v28 = v27 + 1;
              if ((unint64_t)(v27 + 1) >> 62)
                goto LABEL_145;
              v29 = v23 - (_QWORD)v26;
              if (v29 >> 1 > v28)
                v28 = v29 >> 1;
              if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL)
                v30 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v30 = v28;
              if (v30)
              {
                v30 = (unint64_t)sub_2429114B8(v30);
                v26 = (char *)*((_QWORD *)this + 1);
                v24 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v31 = 0;
              }
              v32 = (_DWORD *)(v30 + 4 * v27);
              *v32 = 0;
              v25 = v32 + 1;
              while (v24 != v26)
              {
                v33 = *((_DWORD *)v24 - 1);
                v24 -= 4;
                *--v32 = v33;
              }
              *((_QWORD *)this + 1) = v32;
              *((_QWORD *)this + 2) = v25;
              *((_QWORD *)this + 3) = v30 + 4 * v31;
              if (v26)
                operator delete(v26);
            }
            else
            {
              *(_DWORD *)v24 = 0;
              v25 = v24 + 4;
            }
            *((_QWORD *)this + 2) = v25;
            v34 = *((_QWORD *)a2 + 1);
            if (v34 > 0xFFFFFFFFFFFFFFFBLL || v34 + 4 > *((_QWORD *)a2 + 2))
            {
              *((_BYTE *)a2 + 24) = 1;
              break;
            }
            *(v25 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v34);
            v22 = *((_QWORD *)a2 + 2);
            v21 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v21;
          }
LABEL_27:
          PB::Reader::recallMark();
        }
        else
        {
          v61 = (char *)*((_QWORD *)this + 2);
          v60 = *((_QWORD *)this + 3);
          if ((unint64_t)v61 >= v60)
          {
            v71 = (char *)*((_QWORD *)this + 1);
            v72 = (v61 - v71) >> 2;
            v73 = v72 + 1;
            if ((unint64_t)(v72 + 1) >> 62)
LABEL_145:
              sub_242729A44();
            v74 = v60 - (_QWORD)v71;
            if (v74 >> 1 > v73)
              v73 = v74 >> 1;
            if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFFCLL)
              v75 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v75 = v73;
            if (v75)
            {
              v75 = (unint64_t)sub_2429114B8(v75);
              v71 = (char *)*((_QWORD *)this + 1);
              v61 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v76 = 0;
            }
            v77 = (_DWORD *)(v75 + 4 * v72);
            *v77 = 0;
            v62 = v77 + 1;
            while (v61 != v71)
            {
              v78 = *((_DWORD *)v61 - 1);
              v61 -= 4;
              *--v77 = v78;
            }
            *((_QWORD *)this + 1) = v77;
            *((_QWORD *)this + 2) = v62;
            *((_QWORD *)this + 3) = v75 + 4 * v76;
            if (v71)
              operator delete(v71);
          }
          else
          {
            *(_DWORD *)v61 = 0;
            v62 = v61 + 4;
          }
          *((_QWORD *)this + 2) = v62;
          v79 = *((_QWORD *)a2 + 1);
          if (v79 <= 0xFFFFFFFFFFFFFFFBLL && v79 + 4 <= *((_QWORD *)a2 + 2))
          {
            *(v62 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v79);
LABEL_134:
            v59 = *((_QWORD *)a2 + 1) + 4;
LABEL_135:
            *((_QWORD *)a2 + 1) = v59;
          }
          else
          {
LABEL_132:
            *((_BYTE *)a2 + 24) = 1;
          }
        }
        break;
      case 3u:
        *((_WORD *)this + 52) |= 0x80u;
        v35 = *((_QWORD *)a2 + 1);
        if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_132;
        *((_DWORD *)this + 23) = *(_DWORD *)(*(_QWORD *)a2 + v35);
        goto LABEL_134;
      case 4u:
        *((_WORD *)this + 52) |= 0x40u;
        v36 = *((_QWORD *)a2 + 1);
        v37 = *((_QWORD *)a2 + 2);
        v38 = *(_QWORD *)a2;
        if (v36 <= 0xFFFFFFFFFFFFFFF5 && v36 + 10 <= v37)
        {
          v39 = 0;
          v40 = 0;
          v41 = 0;
          do
          {
            v42 = v36 + 1;
            *((_QWORD *)a2 + 1) = v36 + 1;
            v43 = *(_BYTE *)(v38 + v36);
            v41 |= (unint64_t)(v43 & 0x7F) << v39;
            if ((v43 & 0x80) == 0)
              goto LABEL_119;
            v39 += 7;
            v36 = v42;
            v14 = v40++ > 8;
          }
          while (!v14);
LABEL_99:
          LODWORD(v41) = 0;
          goto LABEL_119;
        }
        v63 = 0;
        v64 = 0;
        v41 = 0;
        if (v37 <= v36)
          v37 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v37 == v36)
          {
            LODWORD(v41) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v65 = v36 + 1;
            v66 = *(_BYTE *)(v38 + v36);
            *((_QWORD *)a2 + 1) = v65;
            v41 |= (unint64_t)(v66 & 0x7F) << v63;
            if (v66 < 0)
            {
              v63 += 7;
              v36 = v65;
              v14 = v64++ > 8;
              if (v14)
                goto LABEL_99;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v41) = 0;
          }
          break;
        }
LABEL_119:
        *((_DWORD *)this + 22) = v41;
        break;
      case 5u:
        *((_WORD *)this + 52) |= 0x100u;
        v44 = *((_QWORD *)a2 + 1);
        v45 = *((_QWORD *)a2 + 2);
        v46 = *(_QWORD *)a2;
        if (v44 <= 0xFFFFFFFFFFFFFFF5 && v44 + 10 <= v45)
        {
          v47 = 0;
          v48 = 0;
          v49 = 0;
          do
          {
            v50 = v44 + 1;
            *((_QWORD *)a2 + 1) = v44 + 1;
            v51 = *(_BYTE *)(v46 + v44);
            v49 |= (unint64_t)(v51 & 0x7F) << v47;
            if ((v51 & 0x80) == 0)
              goto LABEL_122;
            v47 += 7;
            v44 = v50;
            v14 = v48++ > 8;
          }
          while (!v14);
LABEL_106:
          LODWORD(v49) = 0;
          goto LABEL_122;
        }
        v67 = 0;
        v68 = 0;
        v49 = 0;
        if (v45 <= v44)
          v45 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v45 == v44)
          {
            LODWORD(v49) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v69 = v44 + 1;
            v70 = *(_BYTE *)(v46 + v44);
            *((_QWORD *)a2 + 1) = v69;
            v49 |= (unint64_t)(v70 & 0x7F) << v67;
            if (v70 < 0)
            {
              v67 += 7;
              v44 = v69;
              v14 = v68++ > 8;
              if (v14)
                goto LABEL_106;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v49) = 0;
          }
          break;
        }
LABEL_122:
        *((_DWORD *)this + 24) = v49;
        break;
      case 6u:
        *((_WORD *)this + 52) |= 0x200u;
        v52 = *((_QWORD *)a2 + 1);
        if (v52 > 0xFFFFFFFFFFFFFFFBLL || v52 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_132;
        *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v52);
        goto LABEL_134;
      case 7u:
        *((_WORD *)this + 52) |= 2u;
        v53 = *((_QWORD *)a2 + 1);
        if (v53 > 0xFFFFFFFFFFFFFFF7 || v53 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_132;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v53);
        goto LABEL_90;
      case 8u:
        *((_WORD *)this + 52) |= 4u;
        v54 = *((_QWORD *)a2 + 1);
        if (v54 > 0xFFFFFFFFFFFFFFF7 || v54 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_132;
        *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v54);
        goto LABEL_90;
      case 9u:
        *((_WORD *)this + 52) |= 0x10u;
        v55 = *((_QWORD *)a2 + 1);
        if (v55 > 0xFFFFFFFFFFFFFFF7 || v55 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_132;
        *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v55);
        goto LABEL_90;
      case 0xAu:
        *((_WORD *)this + 52) |= 0x20u;
        v56 = *((_QWORD *)a2 + 1);
        if (v56 > 0xFFFFFFFFFFFFFFF7 || v56 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_132;
        *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v56);
        goto LABEL_90;
      case 0xBu:
        *((_WORD *)this + 52) |= 1u;
        v57 = *((_QWORD *)a2 + 1);
        if (v57 > 0xFFFFFFFFFFFFFFF7 || v57 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_132;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v57);
        goto LABEL_90;
      case 0xCu:
        *((_WORD *)this + 52) |= 8u;
        v58 = *((_QWORD *)a2 + 1);
        if (v58 > 0xFFFFFFFFFFFFFFF7 || v58 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_132;
        *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v58);
LABEL_90:
        v59 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_135;
      default:
        goto LABEL_19;
    }
LABEL_136:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v15 = 0;
  v16 = 0;
  v11 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v17 = v2 + 1;
    v18 = *(_BYTE *)(v8 + v2);
    *((_QWORD *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0)
      goto LABEL_21;
    v15 += 7;
    v2 = v17;
    v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  if ((PB::Reader::skip(a2) & 1) != 0)
    goto LABEL_136;
  return 0;
}

uint64_t CMMsl::TempestPoCAuxiliaryDeviceMotion::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  float *v5;
  float *v6;
  float v7;
  __int16 v8;

  v3 = this;
  v4 = *(const PB::Base **)(this + 80);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = *(float **)(v3 + 8);
  v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7);
  }
  v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 0x80) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 92));
    v8 = *(_WORD *)(v3 + 104);
    if ((v8 & 0x40) == 0)
    {
LABEL_8:
      if ((v8 & 0x100) == 0)
        goto LABEL_9;
      goto LABEL_19;
    }
  }
  else if ((v8 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  this = PB::Writer::writeVarInt(a2);
  v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 0x100) == 0)
  {
LABEL_9:
    if ((v8 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::writeVarInt(a2);
  v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 0x200) == 0)
  {
LABEL_10:
    if ((v8 & 2) == 0)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(float *)(v3 + 100));
  v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 2) == 0)
  {
LABEL_11:
    if ((v8 & 4) == 0)
      goto LABEL_12;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 4) == 0)
  {
LABEL_12:
    if ((v8 & 0x10) == 0)
      goto LABEL_13;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 0x10) == 0)
  {
LABEL_13:
    if ((v8 & 0x20) == 0)
      goto LABEL_14;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 0x20) == 0)
  {
LABEL_14:
    if ((v8 & 1) == 0)
      goto LABEL_15;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(double *)(v3 + 72));
  v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 1) == 0)
  {
LABEL_15:
    if ((v8 & 8) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 56));
  }
LABEL_25:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  if ((*(_WORD *)(v3 + 104) & 8) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 56));
  return this;
}

uint64_t CMMsl::TempestPoCAuxiliaryDeviceMotion::hash_value(CMMsl::TempestPoCAuxiliaryDeviceMotion *this)
{
  CMMsl::AuxiliaryDeviceMotion *v2;
  uint64_t v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  float v17;

  v2 = (CMMsl::AuxiliaryDeviceMotion *)*((_QWORD *)this + 10);
  if (v2)
    v3 = CMMsl::AuxiliaryDeviceMotion::hash_value(v2);
  else
    v3 = 0;
  v4 = PBHashBytes();
  v5 = *((_WORD *)this + 52);
  if ((v5 & 0x80) != 0)
  {
    v17 = *((float *)this + 23);
    v6 = LODWORD(v17);
    if (v17 == 0.0)
      v6 = 0;
    if ((v5 & 0x40) != 0)
    {
LABEL_6:
      v7 = *((unsigned int *)this + 22);
      if ((*((_WORD *)this + 52) & 0x100) != 0)
        goto LABEL_7;
      goto LABEL_33;
    }
  }
  else
  {
    v6 = 0;
    if ((v5 & 0x40) != 0)
      goto LABEL_6;
  }
  v7 = 0;
  if ((*((_WORD *)this + 52) & 0x100) != 0)
  {
LABEL_7:
    v8 = *((unsigned int *)this + 24);
    if ((*((_WORD *)this + 52) & 0x200) != 0)
      goto LABEL_8;
LABEL_34:
    v10 = 0;
    if ((v5 & 2) != 0)
      goto LABEL_11;
LABEL_35:
    v11 = 0.0;
    if ((v5 & 4) != 0)
      goto LABEL_14;
LABEL_36:
    v12 = 0.0;
    if ((v5 & 0x10) != 0)
      goto LABEL_17;
LABEL_37:
    v13 = 0.0;
    if ((v5 & 0x20) != 0)
      goto LABEL_20;
LABEL_38:
    v14 = 0.0;
    if ((v5 & 1) != 0)
      goto LABEL_23;
    goto LABEL_39;
  }
LABEL_33:
  v8 = 0;
  if ((*((_WORD *)this + 52) & 0x200) == 0)
    goto LABEL_34;
LABEL_8:
  v9 = *((float *)this + 25);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((v5 & 2) == 0)
    goto LABEL_35;
LABEL_11:
  v11 = *((double *)this + 5);
  if (v11 == 0.0)
    v11 = 0.0;
  if ((v5 & 4) == 0)
    goto LABEL_36;
LABEL_14:
  v12 = *((double *)this + 6);
  if (v12 == 0.0)
    v12 = 0.0;
  if ((v5 & 0x10) == 0)
    goto LABEL_37;
LABEL_17:
  v13 = *((double *)this + 8);
  if (v13 == 0.0)
    v13 = 0.0;
  if ((v5 & 0x20) == 0)
    goto LABEL_38;
LABEL_20:
  v14 = *((double *)this + 9);
  if (v14 == 0.0)
    v14 = 0.0;
  if ((v5 & 1) != 0)
  {
LABEL_23:
    v15 = *((double *)this + 4);
    if (v15 == 0.0)
      v15 = 0.0;
    if ((v5 & 8) != 0)
      goto LABEL_26;
LABEL_40:
    v16 = 0.0;
    return v4 ^ v3 ^ v6 ^ v7 ^ v8 ^ v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13 ^ *(_QWORD *)&v14 ^ *(_QWORD *)&v15 ^ *(_QWORD *)&v16;
  }
LABEL_39:
  v15 = 0.0;
  if ((v5 & 8) == 0)
    goto LABEL_40;
LABEL_26:
  v16 = *((double *)this + 7);
  if (v16 == 0.0)
    v16 = 0.0;
  return v4 ^ v3 ^ v6 ^ v7 ^ v8 ^ v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13 ^ *(_QWORD *)&v14 ^ *(_QWORD *)&v15 ^ *(_QWORD *)&v16;
}

_QWORD *CMMsl::TempestPoCAuxiliaryDeviceMotion::makeSuper(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[10])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135C5D0;
    *(_DWORD *)(v2 + 152) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_QWORD *)(v2 + 120) = 0;
    this = (_QWORD *)v1[10];
    v1[10] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void CMMsl::TempestPoCListenerOrientation::~TempestPoCListenerOrientation(CMMsl::TempestPoCListenerOrientation *this)
{
  void *v2;

  *(_QWORD *)this = &off_2513615A8;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::TempestPoCListenerOrientation::~TempestPoCListenerOrientation(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::TempestPoCListenerOrientation *CMMsl::TempestPoCListenerOrientation::TempestPoCListenerOrientation(CMMsl::TempestPoCListenerOrientation *this, const CMMsl::TempestPoCListenerOrientation *a2)
{
  _QWORD *v4;
  __int16 v5;
  __int16 v6;
  uint64_t v7;
  int v8;
  int v9;
  __int16 v10;
  uint64_t v11;
  int v13;
  char v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)this = &off_2513615A8;
  *((_QWORD *)this + 1) = 0;
  v4 = (_QWORD *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 24) = 0;
  v5 = *((_WORD *)a2 + 48);
  if ((v5 & 0x10) != 0)
  {
    v7 = *((_QWORD *)a2 + 8);
    v6 = 16;
    *((_WORD *)this + 48) = 16;
    *((_QWORD *)this + 8) = v7;
    v5 = *((_WORD *)a2 + 48);
    if ((v5 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((*((_WORD *)a2 + 48) & 0x200) != 0)
  {
LABEL_5:
    v8 = *((_DWORD *)a2 + 22);
    v6 |= 0x200u;
    *((_WORD *)this + 48) = v6;
    *((_DWORD *)this + 22) = v8;
    v5 = *((_WORD *)a2 + 48);
  }
LABEL_6:
  if ((v5 & 0x80) == 0)
  {
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
  v13 = *((_DWORD *)a2 + 20);
  v6 |= 0x80u;
  *((_WORD *)this + 48) = v6;
  *((_DWORD *)this + 20) = v13;
  if ((*((_WORD *)a2 + 48) & 0x100) != 0)
  {
LABEL_8:
    v9 = *((_DWORD *)a2 + 21);
    *((_WORD *)this + 48) = v6 | 0x100;
    *((_DWORD *)this + 21) = v9;
  }
LABEL_9:
  if (this != a2)
    sub_242911380(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  v10 = *((_WORD *)a2 + 48);
  if ((v10 & 0x400) != 0)
  {
    v14 = *((_BYTE *)a2 + 92);
    *((_WORD *)this + 48) |= 0x400u;
    *((_BYTE *)this + 92) = v14;
    v10 = *((_WORD *)a2 + 48);
    if ((v10 & 0x20) == 0)
    {
LABEL_13:
      if ((v10 & 0x40) == 0)
        goto LABEL_14;
      goto LABEL_24;
    }
  }
  else if ((v10 & 0x20) == 0)
  {
    goto LABEL_13;
  }
  v15 = *((_DWORD *)a2 + 18);
  *((_WORD *)this + 48) |= 0x20u;
  *((_DWORD *)this + 18) = v15;
  v10 = *((_WORD *)a2 + 48);
  if ((v10 & 0x40) == 0)
  {
LABEL_14:
    if ((v10 & 8) == 0)
      goto LABEL_15;
    goto LABEL_25;
  }
LABEL_24:
  v16 = *((_DWORD *)a2 + 19);
  *((_WORD *)this + 48) |= 0x40u;
  *((_DWORD *)this + 19) = v16;
  v10 = *((_WORD *)a2 + 48);
  if ((v10 & 8) == 0)
  {
LABEL_15:
    if ((v10 & 1) == 0)
      goto LABEL_16;
    goto LABEL_26;
  }
LABEL_25:
  v17 = *((_QWORD *)a2 + 7);
  *((_WORD *)this + 48) |= 8u;
  *((_QWORD *)this + 7) = v17;
  v10 = *((_WORD *)a2 + 48);
  if ((v10 & 1) == 0)
  {
LABEL_16:
    if ((v10 & 4) == 0)
      goto LABEL_17;
LABEL_27:
    v19 = *((_QWORD *)a2 + 6);
    *((_WORD *)this + 48) |= 4u;
    *((_QWORD *)this + 6) = v19;
    if ((*((_WORD *)a2 + 48) & 2) == 0)
      return this;
    goto LABEL_18;
  }
LABEL_26:
  v18 = *((_QWORD *)a2 + 4);
  *((_WORD *)this + 48) |= 1u;
  *((_QWORD *)this + 4) = v18;
  v10 = *((_WORD *)a2 + 48);
  if ((v10 & 4) != 0)
    goto LABEL_27;
LABEL_17:
  if ((v10 & 2) != 0)
  {
LABEL_18:
    v11 = *((_QWORD *)a2 + 5);
    *((_WORD *)this + 48) |= 2u;
    *((_QWORD *)this + 5) = v11;
  }
  return this;
}

CMMsl *CMMsl::TempestPoCListenerOrientation::operator=(CMMsl *a1, const CMMsl::TempestPoCListenerOrientation *a2)
{
  CMMsl::TempestPoCListenerOrientation *v3;
  _BYTE v5[104];

  if (a1 != a2)
  {
    CMMsl::TempestPoCListenerOrientation::TempestPoCListenerOrientation((CMMsl::TempestPoCListenerOrientation *)v5, a2);
    CMMsl::swap(a1, (CMMsl::TempestPoCListenerOrientation *)v5, v3);
    CMMsl::TempestPoCListenerOrientation::~TempestPoCListenerOrientation((CMMsl::TempestPoCListenerOrientation *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::TempestPoCListenerOrientation *a2, CMMsl::TempestPoCListenerOrientation *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;

  v3 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v3;
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v4;
  LODWORD(v4) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v4;
  LODWORD(v4) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 92);
  *((_BYTE *)this + 92) = *((_BYTE *)a2 + 92);
  *((_BYTE *)a2 + 92) = v7;
  LODWORD(v4) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v4;
  LODWORD(v4) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v4;
  v8 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v8;
  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v9;
  v10 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v10;
  result = *((double *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((double *)a2 + 5) = result;
  return result;
}

uint64_t CMMsl::TempestPoCListenerOrientation::TempestPoCListenerOrientation(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_2513615A8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

CMMsl *CMMsl::TempestPoCListenerOrientation::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::TempestPoCListenerOrientation *v3;
  _BYTE v5[104];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::TempestPoCListenerOrientation::TempestPoCListenerOrientation((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::TempestPoCListenerOrientation *)v5, v3);
    CMMsl::TempestPoCListenerOrientation::~TempestPoCListenerOrientation((CMMsl::TempestPoCListenerOrientation *)v5);
  }
  return a1;
}

uint64_t CMMsl::TempestPoCListenerOrientation::formatText(CMMsl::TempestPoCListenerOrientation *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;
  float *v6;
  float *v7;
  float v8;
  __int16 v9;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 48);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(a2, "angularVelocityConstraintRps", *((float *)this + 18));
    v5 = *((_WORD *)this + 48);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "consumedAuxTimestamp", *((double *)this + 4));
  v5 = *((_WORD *)this + 48);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x400) == 0)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "dthetaNormRad", *((float *)this + 19));
  v5 = *((_WORD *)this + 48);
  if ((v5 & 0x400) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "inBTZ");
  v5 = *((_WORD *)this + 48);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "listenerPitch", *((float *)this + 20));
  v5 = *((_WORD *)this + 48);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 0x200) == 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "listenerRoll", *((float *)this + 21));
  v5 = *((_WORD *)this + 48);
  if ((v5 & 0x200) == 0)
  {
LABEL_8:
    if ((v5 & 2) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "listenerYaw", *((float *)this + 22));
  if ((*((_WORD *)this + 48) & 2) != 0)
LABEL_9:
    PB::TextFormatter::format(a2, "machAbsTimestamp", *((double *)this + 5));
LABEL_10:
  v6 = (float *)*((_QWORD *)this + 1);
  v7 = (float *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(a2, "quaternion", v8);
  }
  v9 = *((_WORD *)this + 48);
  if ((v9 & 4) == 0)
  {
    if ((v9 & 8) == 0)
      goto LABEL_14;
LABEL_26:
    PB::TextFormatter::format(a2, "srcTimestamp", *((double *)this + 7));
    if ((*((_WORD *)this + 48) & 0x10) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_15;
  }
  PB::TextFormatter::format(a2, "receivedAuxTimestamp", *((double *)this + 6));
  v9 = *((_WORD *)this + 48);
  if ((v9 & 8) != 0)
    goto LABEL_26;
LABEL_14:
  if ((v9 & 0x10) != 0)
LABEL_15:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 8));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::TempestPoCListenerOrientation::readFrom(CMMsl::TempestPoCListenerOrientation *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  _DWORD *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  BOOL v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  _DWORD *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  int v58;
  unint64_t v59;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      break;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 48) |= 0x10u;
        v19 = *((_QWORD *)a2 + 1);
        if (v19 > 0xFFFFFFFFFFFFFFF7 || v19 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_102;
        *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v19);
        goto LABEL_79;
      case 2u:
        *((_WORD *)this + 48) |= 0x200u;
        v20 = *((_QWORD *)a2 + 1);
        if (v20 > 0xFFFFFFFFFFFFFFFBLL || v20 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_102;
        *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v20);
        goto LABEL_104;
      case 3u:
        *((_WORD *)this + 48) |= 0x80u;
        v21 = *((_QWORD *)a2 + 1);
        if (v21 > 0xFFFFFFFFFFFFFFFBLL || v21 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_102;
        *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v21);
        goto LABEL_104;
      case 4u:
        *((_WORD *)this + 48) |= 0x100u;
        v22 = *((_QWORD *)a2 + 1);
        if (v22 > 0xFFFFFFFFFFFFFFFBLL || v22 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_102;
        *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v22);
        goto LABEL_104;
      case 5u:
        if ((v11 & 7) == 2)
        {
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v23 = *((_QWORD *)a2 + 1);
          v24 = *((_QWORD *)a2 + 2);
          while (v23 < v24 && !*((_BYTE *)a2 + 24))
          {
            v26 = (char *)*((_QWORD *)this + 2);
            v25 = *((_QWORD *)this + 3);
            if ((unint64_t)v26 >= v25)
            {
              v28 = (char *)*((_QWORD *)this + 1);
              v29 = (v26 - v28) >> 2;
              v30 = v29 + 1;
              if ((unint64_t)(v29 + 1) >> 62)
                goto LABEL_113;
              v31 = v25 - (_QWORD)v28;
              if (v31 >> 1 > v30)
                v30 = v31 >> 1;
              if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
                v32 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v32 = v30;
              if (v32)
              {
                v32 = (unint64_t)sub_2429114B8(v32);
                v28 = (char *)*((_QWORD *)this + 1);
                v26 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v33 = 0;
              }
              v34 = (_DWORD *)(v32 + 4 * v29);
              *v34 = 0;
              v27 = v34 + 1;
              while (v26 != v28)
              {
                v35 = *((_DWORD *)v26 - 1);
                v26 -= 4;
                *--v34 = v35;
              }
              *((_QWORD *)this + 1) = v34;
              *((_QWORD *)this + 2) = v27;
              *((_QWORD *)this + 3) = v32 + 4 * v33;
              if (v28)
                operator delete(v28);
            }
            else
            {
              *(_DWORD *)v26 = 0;
              v27 = v26 + 4;
            }
            *((_QWORD *)this + 2) = v27;
            v36 = *((_QWORD *)a2 + 1);
            if (v36 > 0xFFFFFFFFFFFFFFFBLL || v36 + 4 > *((_QWORD *)a2 + 2))
            {
              *((_BYTE *)a2 + 24) = 1;
              break;
            }
            *(v27 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v36);
            v24 = *((_QWORD *)a2 + 2);
            v23 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v23;
          }
          PB::Reader::recallMark();
        }
        else
        {
          v49 = (char *)*((_QWORD *)this + 2);
          v48 = *((_QWORD *)this + 3);
          if ((unint64_t)v49 >= v48)
          {
            v51 = (char *)*((_QWORD *)this + 1);
            v52 = (v49 - v51) >> 2;
            v53 = v52 + 1;
            if ((unint64_t)(v52 + 1) >> 62)
LABEL_113:
              sub_242729A44();
            v54 = v48 - (_QWORD)v51;
            if (v54 >> 1 > v53)
              v53 = v54 >> 1;
            if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL)
              v55 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v55 = v53;
            if (v55)
            {
              v55 = (unint64_t)sub_2429114B8(v55);
              v51 = (char *)*((_QWORD *)this + 1);
              v49 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v56 = 0;
            }
            v57 = (_DWORD *)(v55 + 4 * v52);
            *v57 = 0;
            v50 = v57 + 1;
            while (v49 != v51)
            {
              v58 = *((_DWORD *)v49 - 1);
              v49 -= 4;
              *--v57 = v58;
            }
            *((_QWORD *)this + 1) = v57;
            *((_QWORD *)this + 2) = v50;
            *((_QWORD *)this + 3) = v55 + 4 * v56;
            if (v51)
              operator delete(v51);
          }
          else
          {
            *(_DWORD *)v49 = 0;
            v50 = v49 + 4;
          }
          *((_QWORD *)this + 2) = v50;
          v59 = *((_QWORD *)a2 + 1);
          if (v59 <= 0xFFFFFFFFFFFFFFFBLL && v59 + 4 <= *((_QWORD *)a2 + 2))
          {
            *(v50 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v59);
LABEL_104:
            v47 = *((_QWORD *)a2 + 1) + 4;
LABEL_105:
            *((_QWORD *)a2 + 1) = v47;
          }
          else
          {
LABEL_102:
            *((_BYTE *)a2 + 24) = 1;
          }
        }
        break;
      case 6u:
        *((_WORD *)this + 48) |= 0x400u;
        v37 = *((_QWORD *)a2 + 1);
        if (v37 >= *((_QWORD *)a2 + 2))
        {
          v40 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v38 = v37 + 1;
          v39 = *(unsigned __int8 *)(*(_QWORD *)a2 + v37);
          *((_QWORD *)a2 + 1) = v38;
          v40 = v39 != 0;
        }
        *((_BYTE *)this + 92) = v40;
        break;
      case 7u:
        *((_WORD *)this + 48) |= 0x20u;
        v41 = *((_QWORD *)a2 + 1);
        if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_102;
        *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v41);
        goto LABEL_104;
      case 8u:
        *((_WORD *)this + 48) |= 0x40u;
        v42 = *((_QWORD *)a2 + 1);
        if (v42 > 0xFFFFFFFFFFFFFFFBLL || v42 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_102;
        *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v42);
        goto LABEL_104;
      case 9u:
        *((_WORD *)this + 48) |= 8u;
        v43 = *((_QWORD *)a2 + 1);
        if (v43 > 0xFFFFFFFFFFFFFFF7 || v43 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_102;
        *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v43);
        goto LABEL_79;
      case 0xAu:
        *((_WORD *)this + 48) |= 1u;
        v44 = *((_QWORD *)a2 + 1);
        if (v44 > 0xFFFFFFFFFFFFFFF7 || v44 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_102;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v44);
        goto LABEL_79;
      case 0xBu:
        *((_WORD *)this + 48) |= 4u;
        v45 = *((_QWORD *)a2 + 1);
        if (v45 > 0xFFFFFFFFFFFFFFF7 || v45 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_102;
        *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v45);
        goto LABEL_79;
      case 0xCu:
        *((_WORD *)this + 48) |= 2u;
        v46 = *((_QWORD *)a2 + 1);
        if (v46 > 0xFFFFFFFFFFFFFFF7 || v46 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_102;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v46);
LABEL_79:
        v47 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_105;
      default:
        goto LABEL_19;
    }
LABEL_106:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v15 = 0;
  v16 = 0;
  v11 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v17 = v2 + 1;
    v18 = *(_BYTE *)(v8 + v2);
    *((_QWORD *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0)
      goto LABEL_21;
    v15 += 7;
    v2 = v17;
    v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  if ((PB::Reader::skip(a2) & 1) != 0)
    goto LABEL_106;
  return 0;
}

uint64_t CMMsl::TempestPoCListenerOrientation::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;
  float *v5;
  float *v6;
  float v7;
  __int16 v8;

  v3 = this;
  v4 = *(_WORD *)(this + 96);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 64));
    v4 = *(_WORD *)(v3 + 96);
    if ((v4 & 0x200) == 0)
    {
LABEL_3:
      if ((v4 & 0x80) == 0)
        goto LABEL_4;
LABEL_19:
      this = PB::Writer::write(a2, *(float *)(v3 + 80));
      if ((*(_WORD *)(v3 + 96) & 0x100) == 0)
        goto LABEL_6;
      goto LABEL_5;
    }
  }
  else if ((*(_WORD *)(this + 96) & 0x200) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 88));
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x80) != 0)
    goto LABEL_19;
LABEL_4:
  if ((v4 & 0x100) != 0)
LABEL_5:
    this = PB::Writer::write(a2, *(float *)(v3 + 84));
LABEL_6:
  v5 = *(float **)(v3 + 8);
  v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7);
  }
  v8 = *(_WORD *)(v3 + 96);
  if ((v8 & 0x400) != 0)
  {
    this = PB::Writer::write(a2);
    v8 = *(_WORD *)(v3 + 96);
    if ((v8 & 0x20) == 0)
    {
LABEL_11:
      if ((v8 & 0x40) == 0)
        goto LABEL_12;
      goto LABEL_23;
    }
  }
  else if ((v8 & 0x20) == 0)
  {
    goto LABEL_11;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 72));
  v8 = *(_WORD *)(v3 + 96);
  if ((v8 & 0x40) == 0)
  {
LABEL_12:
    if ((v8 & 8) == 0)
      goto LABEL_13;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 76));
  v8 = *(_WORD *)(v3 + 96);
  if ((v8 & 8) == 0)
  {
LABEL_13:
    if ((v8 & 1) == 0)
      goto LABEL_14;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  v8 = *(_WORD *)(v3 + 96);
  if ((v8 & 1) == 0)
  {
LABEL_14:
    if ((v8 & 4) == 0)
      goto LABEL_15;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  v8 = *(_WORD *)(v3 + 96);
  if ((v8 & 4) == 0)
  {
LABEL_15:
    if ((v8 & 2) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 40));
  }
LABEL_26:
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  if ((*(_WORD *)(v3 + 96) & 2) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 40));
  return this;
}

uint64_t CMMsl::TempestPoCListenerOrientation::hash_value(CMMsl::TempestPoCListenerOrientation *this)
{
  __int16 v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;

  v2 = *((_WORD *)this + 48);
  if ((v2 & 0x10) == 0)
  {
    v3 = 0;
    if ((*((_WORD *)this + 48) & 0x200) != 0)
      goto LABEL_3;
LABEL_18:
    v5 = 0;
    if ((v2 & 0x80) != 0)
      goto LABEL_7;
    goto LABEL_19;
  }
  if (*((double *)this + 8) == 0.0)
    v3 = 0;
  else
    v3 = *((_QWORD *)this + 8);
  if ((*((_WORD *)this + 48) & 0x200) == 0)
    goto LABEL_18;
LABEL_3:
  v4 = *((float *)this + 22);
  if (v4 == 0.0)
    v5 = 0;
  else
    v5 = LODWORD(v4);
  if ((v2 & 0x80) != 0)
  {
LABEL_7:
    v6 = *((float *)this + 20);
    if (v6 == 0.0)
      v7 = 0;
    else
      v7 = LODWORD(v6);
    if ((*((_WORD *)this + 48) & 0x100) != 0)
      goto LABEL_11;
LABEL_20:
    v9 = 0;
    goto LABEL_21;
  }
LABEL_19:
  v7 = 0;
  if ((*((_WORD *)this + 48) & 0x100) == 0)
    goto LABEL_20;
LABEL_11:
  v8 = *((float *)this + 21);
  if (v8 == 0.0)
    v9 = 0;
  else
    v9 = LODWORD(v8);
LABEL_21:
  v10 = PBHashBytes();
  v11 = *((_WORD *)this + 48);
  if ((v11 & 0x400) == 0)
  {
    v12 = 0;
    if ((v11 & 0x20) != 0)
      goto LABEL_23;
LABEL_42:
    v14 = 0;
    if ((v11 & 0x40) != 0)
      goto LABEL_26;
LABEL_43:
    v16 = 0;
    if ((v11 & 8) != 0)
      goto LABEL_29;
LABEL_44:
    v17 = 0.0;
    if ((v11 & 1) != 0)
      goto LABEL_32;
LABEL_45:
    v18 = 0.0;
    if ((v11 & 4) != 0)
      goto LABEL_35;
    goto LABEL_46;
  }
  v12 = *((unsigned __int8 *)this + 92);
  if ((v11 & 0x20) == 0)
    goto LABEL_42;
LABEL_23:
  v13 = *((float *)this + 18);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((v11 & 0x40) == 0)
    goto LABEL_43;
LABEL_26:
  v15 = *((float *)this + 19);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  if ((v11 & 8) == 0)
    goto LABEL_44;
LABEL_29:
  v17 = *((double *)this + 7);
  if (v17 == 0.0)
    v17 = 0.0;
  if ((v11 & 1) == 0)
    goto LABEL_45;
LABEL_32:
  v18 = *((double *)this + 4);
  if (v18 == 0.0)
    v18 = 0.0;
  if ((v11 & 4) != 0)
  {
LABEL_35:
    v19 = *((double *)this + 6);
    if (v19 == 0.0)
      v19 = 0.0;
    if ((v11 & 2) != 0)
      goto LABEL_38;
LABEL_47:
    v20 = 0.0;
    return v5 ^ v3 ^ v7 ^ v9 ^ v12 ^ v14 ^ v16 ^ *(_QWORD *)&v17 ^ v10 ^ *(_QWORD *)&v18 ^ *(_QWORD *)&v19 ^ *(_QWORD *)&v20;
  }
LABEL_46:
  v19 = 0.0;
  if ((v11 & 2) == 0)
    goto LABEL_47;
LABEL_38:
  v20 = *((double *)this + 5);
  if (v20 == 0.0)
    v20 = 0.0;
  return v5 ^ v3 ^ v7 ^ v9 ^ v12 ^ v14 ^ v16 ^ *(_QWORD *)&v17 ^ v10 ^ *(_QWORD *)&v18 ^ *(_QWORD *)&v19 ^ *(_QWORD *)&v20;
}

void CMMsl::Timestamp::~Timestamp(CMMsl::Timestamp *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::Timestamp::Timestamp(uint64_t this, const CMMsl::Timestamp *a2)
{
  char v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)this = &off_2513615E0;
  *(_QWORD *)(this + 16) = 0;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
    v3 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 20) = 2;
    *(_DWORD *)(this + 16) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 1) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
LABEL_5:
    v4 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = v2;
    *(_QWORD *)(this + 8) = v4;
  }
  return this;
}

uint64_t CMMsl::Timestamp::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v4;
  int v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  uint64_t v12;

  if (a1 != a2)
  {
    v11[0] = &off_2513615E0;
    HIDWORD(v12) = 0;
    v4 = *(_BYTE *)(a2 + 20);
    if ((v4 & 2) != 0)
    {
      v5 = *(_DWORD *)(a2 + 16);
      BYTE4(v12) = 2;
      v6 = 3;
      if ((v4 & 1) != 0)
      {
LABEL_6:
        v2 = *(_QWORD *)(a2 + 8);
        BYTE4(v12) = v6;
      }
    }
    else
    {
      v5 = 0;
      v6 = 1;
      if ((*(_BYTE *)(a2 + 20) & 1) != 0)
        goto LABEL_6;
    }
    v7 = HIDWORD(v12);
    v8 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v5;
    *(_DWORD *)(a1 + 20) = v7;
    v12 = v8;
    v9 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v2;
    v11[1] = v9;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v4;
    v8[2] = v5;
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v8[0] = &off_2513615E0;
    v8[1] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::Timestamp *a2, CMMsl::Timestamp *a3)
{
  int v3;
  int v4;
  uint64_t v5;

  v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  v4 = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  v5 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  return this;
}

uint64_t CMMsl::Timestamp::formatText(CMMsl::Timestamp *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "source");
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::Timestamp::readFrom(CMMsl::Timestamp *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  char v24;
  uint64_t result;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  unint64_t v38;
  char v39;

  v3 = *((_QWORD *)a2 + 1);
  v2 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v3 + 1;
        *((_QWORD *)a2 + 1) = v3 + 1;
        v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v3 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_30;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 1u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v36 = 0;
          v37 = 0;
          v30 = 0;
          if (v2 <= v26)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v26)
            {
              v30 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_64;
            }
            v38 = v26++;
            v39 = *(_BYTE *)(v27 + v38);
            *((_QWORD *)a2 + 1) = v26;
            v30 |= (unint64_t)(v39 & 0x7F) << v36;
            if ((v39 & 0x80) == 0)
              break;
            v36 += 7;
            v14 = v37++ > 8;
            if (v14)
            {
              v30 = 0;
              goto LABEL_63;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v30 = 0;
LABEL_63:
          v3 = v38 + 1;
        }
        else
        {
          v28 = 0;
          v29 = 0;
          v30 = 0;
          while (1)
          {
            v3 = v26 + 1;
            *((_QWORD *)a2 + 1) = v26 + 1;
            v31 = *(_BYTE *)(v27 + v26);
            v30 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v26 = v3;
            v14 = v29++ > 8;
            if (v14)
            {
              v30 = 0;
              break;
            }
          }
        }
LABEL_64:
        *((_QWORD *)this + 1) = v30;
      }
      else if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 20) |= 2u;
        v19 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v20 = *(_QWORD *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v2)
        {
          v32 = 0;
          v33 = 0;
          v23 = 0;
          if (v2 <= v19)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v19)
            {
              LODWORD(v23) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_60;
            }
            v34 = v19++;
            v35 = *(_BYTE *)(v20 + v34);
            *((_QWORD *)a2 + 1) = v19;
            v23 |= (unint64_t)(v35 & 0x7F) << v32;
            if ((v35 & 0x80) == 0)
              break;
            v32 += 7;
            v14 = v33++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              goto LABEL_59;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v23) = 0;
LABEL_59:
          v3 = v34 + 1;
        }
        else
        {
          v21 = 0;
          v22 = 0;
          v23 = 0;
          while (1)
          {
            v3 = v19 + 1;
            *((_QWORD *)a2 + 1) = v19 + 1;
            v24 = *(_BYTE *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0)
              break;
            v21 += 7;
            v19 = v3;
            v14 = v22++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              break;
            }
          }
        }
LABEL_60:
        *((_DWORD *)this + 4) = v23;
      }
      else
      {
LABEL_30:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v3 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v2 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v3 > v2)
      v2 = v3;
    while (v2 != v3)
    {
      v17 = v3 + 1;
      v18 = *(_BYTE *)(v8 + v3);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v3 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_30;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::Timestamp::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 1) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::Timestamp::hash_value(CMMsl::Timestamp *this)
{
  uint64_t v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 20) & 2) != 0)
  {
    v1 = *((int *)this + 4);
    if ((*((_BYTE *)this + 20) & 1) != 0)
      goto LABEL_3;
LABEL_5:
    v2 = 0;
    return v2 ^ v1;
  }
  v1 = 0;
  if ((*((_BYTE *)this + 20) & 1) == 0)
    goto LABEL_5;
LABEL_3:
  v2 = *((_QWORD *)this + 1);
  return v2 ^ v1;
}

void CMMsl::TouchOscarEmu::~TouchOscarEmu(CMMsl::TouchOscarEmu *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::TouchOscarEmu::TouchOscarEmu(uint64_t this, const CMMsl::TouchOscarEmu *a2)
{
  char v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)this = &off_251361618;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_BYTE *)a2 + 16);
    *(_BYTE *)(this + 20) = v2;
    *(_BYTE *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::TouchOscarEmu::operator=(uint64_t a1, uint64_t a2, double a3)
{
  char v3;
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  _QWORD v10[2];
  char v11;
  int v12;

  if (a1 != a2)
  {
    v10[0] = &off_251361618;
    v12 = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      LOBYTE(v12) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        v3 = *(_BYTE *)(a2 + 16);
        LOBYTE(v12) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_6;
    }
    v7 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v12;
    v12 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    *(double *)(a1 + 8) = a3;
    v10[1] = v8;
    LOBYTE(v7) = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v3;
    v11 = v7;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::TouchOscarEmu *a2, CMMsl::TouchOscarEmu *a3)
{
  int v3;
  double result;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  LOBYTE(v3) = *((_BYTE *)this + 16);
  *((_BYTE *)this + 16) = *((_BYTE *)a2 + 16);
  *((_BYTE *)a2 + 16) = v3;
  return result;
}

double CMMsl::TouchOscarEmu::TouchOscarEmu(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_251361618;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_251361618;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return result;
}

uint64_t CMMsl::TouchOscarEmu::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  _QWORD v9[2];
  char v10;
  int v11;

  if (a1 != a2)
  {
    v9[0] = &off_251361618;
    v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_BYTE *)(a2 + 16);
    v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    v11 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v9[1] = v7;
    LOBYTE(v3) = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v5;
    v10 = v3;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::TouchOscarEmu::formatText(CMMsl::TouchOscarEmu *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "touchDetected");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::TouchOscarEmu::readFrom(CMMsl::TouchOscarEmu *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v20;
  BOOL v21;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_26;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v21 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v21 = v20 != 0;
        }
        *((_BYTE *)this + 16) = v21;
      }
      else if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_26:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_26;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::TouchOscarEmu::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(a2);
  return this;
}

uint64_t CMMsl::TouchOscarEmu::hash_value(CMMsl::TouchOscarEmu *this)
{
  double v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v2 = 0;
    return v2 ^ *(_QWORD *)&v1;
  }
  v1 = 0.0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((unsigned __int8 *)this + 16);
  return v2 ^ *(_QWORD *)&v1;
}

void CMMsl::TrackRunData::~TrackRunData(CMMsl::TrackRunData *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::TrackRunData::TrackRunData(uint64_t this, const CMMsl::TrackRunData *a2)
{
  char v2;
  char v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  char v10;

  *(_QWORD *)this = &off_251361650;
  *(_DWORD *)(this + 40) = 0;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 0x10) != 0)
  {
    v4 = *((_DWORD *)a2 + 7);
    v3 = 16;
    *(_BYTE *)(this + 40) = 16;
    *(_DWORD *)(this + 28) = v4;
    v2 = *((_BYTE *)a2 + 40);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 40) & 4) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *(_BYTE *)(this + 40) = v3;
    *(_DWORD *)(this + 20) = v5;
    v2 = *((_BYTE *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    v6 = *((_DWORD *)a2 + 6);
    v3 |= 8u;
    *(_BYTE *)(this + 40) = v3;
    *(_DWORD *)(this + 24) = v6;
    v2 = *((_BYTE *)a2 + 40);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *(_BYTE *)(this + 40) = v3;
  *(_DWORD *)(this + 16) = v7;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0)
      goto LABEL_10;
    goto LABEL_15;
  }
LABEL_14:
  v8 = *((_DWORD *)a2 + 8);
  v3 |= 0x20u;
  *(_BYTE *)(this + 40) = v3;
  *(_DWORD *)(this + 32) = v8;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 1) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      return this;
LABEL_16:
    v10 = *((_BYTE *)a2 + 36);
    *(_BYTE *)(this + 40) = v3 | 0x40;
    *(_BYTE *)(this + 36) = v10;
    return this;
  }
LABEL_15:
  v9 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_BYTE *)(this + 40) = v3;
  *(_QWORD *)(this + 8) = v9;
  if ((*((_BYTE *)a2 + 40) & 0x40) != 0)
    goto LABEL_16;
  return this;
}

uint64_t CMMsl::TrackRunData::operator=(uint64_t a1, const CMMsl::TrackRunData *a2)
{
  int v3;
  __int128 v4;
  int v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  int v11;
  char v12;
  int v13;

  if ((const CMMsl::TrackRunData *)a1 != a2)
  {
    CMMsl::TrackRunData::TrackRunData((uint64_t)&v8, a2);
    v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v13;
    v13 = v3;
    v4 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v10;
    v10 = v4;
    v5 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v11;
    v11 = v5;
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    v9 = v6;
    LOBYTE(v5) = *(_BYTE *)(a1 + 36);
    *(_BYTE *)(a1 + 36) = v12;
    v12 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::TrackRunData *a2, CMMsl::TrackRunData *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  double result;

  v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  v4 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  v5 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v5;
  v6 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v6;
  v7 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v7;
  v8 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v8;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  LOBYTE(v8) = *((_BYTE *)this + 36);
  *((_BYTE *)this + 36) = *((_BYTE *)a2 + 36);
  *((_BYTE *)a2 + 36) = v8;
  return result;
}

double CMMsl::TrackRunData::TrackRunData(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_251361650;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_251361650;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  return result;
}

uint64_t CMMsl::TrackRunData::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t v5;
  char v6;
  __int128 v7;
  __int128 v8;
  int v9;
  _QWORD v11[2];
  __int128 v12;
  int v13;
  char v14;
  int v15;

  if (a1 != a2)
  {
    v11[0] = &off_251361650;
    v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    v4 = *(_DWORD *)(a2 + 32);
    v5 = *(_QWORD *)(a2 + 8);
    v6 = *(_BYTE *)(a2 + 36);
    v15 = *(_DWORD *)(a1 + 40);
    v7 = *(_OWORD *)(a1 + 16);
    v8 = *(_OWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 40) = v3;
    *(_OWORD *)(a1 + 16) = v8;
    v12 = v7;
    v9 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v4;
    v13 = v9;
    *(_QWORD *)&v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v5;
    v11[1] = v7;
    LOBYTE(v9) = *(_BYTE *)(a1 + 36);
    *(_BYTE *)(a1 + 36) = v6;
    v14 = v9;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

uint64_t CMMsl::TrackRunData::formatText(CMMsl::TrackRunData *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "distanceToTrackMeters", *((double *)this + 1));
    v5 = *((_BYTE *)this + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*((_BYTE *)this + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "estimatedLaneConfidence");
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "estimatedLaneNumber");
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "laneCount");
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
LABEL_15:
    PB::TextFormatter::format(a2, "odometerHasBeenCorrected");
    if ((*((_BYTE *)this + 40) & 0x20) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_8;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "laneNumber");
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 0x40) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v5 & 0x20) != 0)
LABEL_8:
    PB::TextFormatter::format(a2, "trackProximity");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::TrackRunData::readFrom(CMMsl::TrackRunData *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  int v51;
  BOOL v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;
  char v61;
  unsigned int v62;
  unint64_t v63;
  char v64;
  char v65;
  unsigned int v66;
  unint64_t v67;
  char v68;
  char v69;
  unsigned int v70;
  unint64_t v71;
  char v72;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_26;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_21;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_26:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 40) |= 0x10u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v53 = 0;
          v54 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_110;
            }
            v55 = v21++;
            v56 = *(_BYTE *)(v22 + v55);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v56 & 0x7F) << v53;
            if ((v56 & 0x80) == 0)
              break;
            v53 += 7;
            v14 = v54++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
LABEL_109:
              v2 = v55 + 1;
              goto LABEL_110;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v25) = 0;
          goto LABEL_109;
        }
        v23 = 0;
        v24 = 0;
        v25 = 0;
        do
        {
          v2 = v21 + 1;
          *((_QWORD *)a2 + 1) = v21 + 1;
          v26 = *(_BYTE *)(v22 + v21);
          v25 |= (unint64_t)(v26 & 0x7F) << v23;
          if ((v26 & 0x80) == 0)
            goto LABEL_110;
          v23 += 7;
          v21 = v2;
          v14 = v24++ > 8;
        }
        while (!v14);
        LODWORD(v25) = 0;
LABEL_110:
        *((_DWORD *)this + 7) = v25;
        break;
      case 2u:
        *((_BYTE *)this + 40) |= 4u;
        v27 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v28 = *(_QWORD *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v57 = 0;
          v58 = 0;
          v31 = 0;
          if (v2 <= v27)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_115;
            }
            v59 = v27++;
            v60 = *(_BYTE *)(v28 + v59);
            *((_QWORD *)a2 + 1) = v27;
            v31 |= (unint64_t)(v60 & 0x7F) << v57;
            if ((v60 & 0x80) == 0)
              break;
            v57 += 7;
            v14 = v58++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
LABEL_114:
              v2 = v59 + 1;
              goto LABEL_115;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v31) = 0;
          goto LABEL_114;
        }
        v29 = 0;
        v30 = 0;
        v31 = 0;
        do
        {
          v2 = v27 + 1;
          *((_QWORD *)a2 + 1) = v27 + 1;
          v32 = *(_BYTE *)(v28 + v27);
          v31 |= (unint64_t)(v32 & 0x7F) << v29;
          if ((v32 & 0x80) == 0)
            goto LABEL_115;
          v29 += 7;
          v27 = v2;
          v14 = v30++ > 8;
        }
        while (!v14);
        LODWORD(v31) = 0;
LABEL_115:
        *((_DWORD *)this + 5) = v31;
        break;
      case 3u:
        *((_BYTE *)this + 40) |= 8u;
        v33 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v34 = *(_QWORD *)a2;
        if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
        {
          v61 = 0;
          v62 = 0;
          v37 = 0;
          if (v2 <= v33)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v33)
            {
              LODWORD(v37) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_120;
            }
            v63 = v33++;
            v64 = *(_BYTE *)(v34 + v63);
            *((_QWORD *)a2 + 1) = v33;
            v37 |= (unint64_t)(v64 & 0x7F) << v61;
            if ((v64 & 0x80) == 0)
              break;
            v61 += 7;
            v14 = v62++ > 8;
            if (v14)
            {
              LODWORD(v37) = 0;
LABEL_119:
              v2 = v63 + 1;
              goto LABEL_120;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v37) = 0;
          goto LABEL_119;
        }
        v35 = 0;
        v36 = 0;
        v37 = 0;
        do
        {
          v2 = v33 + 1;
          *((_QWORD *)a2 + 1) = v33 + 1;
          v38 = *(_BYTE *)(v34 + v33);
          v37 |= (unint64_t)(v38 & 0x7F) << v35;
          if ((v38 & 0x80) == 0)
            goto LABEL_120;
          v35 += 7;
          v33 = v2;
          v14 = v36++ > 8;
        }
        while (!v14);
        LODWORD(v37) = 0;
LABEL_120:
        *((_DWORD *)this + 6) = v37;
        break;
      case 4u:
        *((_BYTE *)this + 40) |= 2u;
        v39 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v40 = *(_QWORD *)a2;
        if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
        {
          v65 = 0;
          v66 = 0;
          v43 = 0;
          if (v2 <= v39)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v39)
            {
              LODWORD(v43) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_125;
            }
            v67 = v39++;
            v68 = *(_BYTE *)(v40 + v67);
            *((_QWORD *)a2 + 1) = v39;
            v43 |= (unint64_t)(v68 & 0x7F) << v65;
            if ((v68 & 0x80) == 0)
              break;
            v65 += 7;
            v14 = v66++ > 8;
            if (v14)
            {
              LODWORD(v43) = 0;
LABEL_124:
              v2 = v67 + 1;
              goto LABEL_125;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v43) = 0;
          goto LABEL_124;
        }
        v41 = 0;
        v42 = 0;
        v43 = 0;
        do
        {
          v2 = v39 + 1;
          *((_QWORD *)a2 + 1) = v39 + 1;
          v44 = *(_BYTE *)(v40 + v39);
          v43 |= (unint64_t)(v44 & 0x7F) << v41;
          if ((v44 & 0x80) == 0)
            goto LABEL_125;
          v41 += 7;
          v39 = v2;
          v14 = v42++ > 8;
        }
        while (!v14);
        LODWORD(v43) = 0;
LABEL_125:
        *((_DWORD *)this + 4) = v43;
        break;
      case 5u:
        *((_BYTE *)this + 40) |= 0x20u;
        v45 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v46 = *(_QWORD *)a2;
        if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
        {
          v69 = 0;
          v70 = 0;
          v49 = 0;
          if (v2 <= v45)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v45)
            {
              LODWORD(v49) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_130;
            }
            v71 = v45++;
            v72 = *(_BYTE *)(v46 + v71);
            *((_QWORD *)a2 + 1) = v45;
            v49 |= (unint64_t)(v72 & 0x7F) << v69;
            if ((v72 & 0x80) == 0)
              break;
            v69 += 7;
            v14 = v70++ > 8;
            if (v14)
            {
              LODWORD(v49) = 0;
LABEL_129:
              v2 = v71 + 1;
              goto LABEL_130;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v49) = 0;
          goto LABEL_129;
        }
        v47 = 0;
        v48 = 0;
        v49 = 0;
        do
        {
          v2 = v45 + 1;
          *((_QWORD *)a2 + 1) = v45 + 1;
          v50 = *(_BYTE *)(v46 + v45);
          v49 |= (unint64_t)(v50 & 0x7F) << v47;
          if ((v50 & 0x80) == 0)
            goto LABEL_130;
          v47 += 7;
          v45 = v2;
          v14 = v48++ > 8;
        }
        while (!v14);
        LODWORD(v49) = 0;
LABEL_130:
        *((_DWORD *)this + 8) = v49;
        break;
      case 6u:
        *((_BYTE *)this + 40) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 7u:
        *((_BYTE *)this + 40) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v52 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v51 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v52 = v51 != 0;
        }
        *((_BYTE *)this + 36) = v52;
        break;
      default:
        goto LABEL_19;
    }
LABEL_21:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::TrackRunData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 40);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(this + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 1) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      return this;
    return PB::Writer::write(a2);
  }
LABEL_14:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  if ((*(_BYTE *)(v3 + 40) & 0x40) != 0)
    return PB::Writer::write(a2);
  return this;
}

uint64_t CMMsl::TrackRunData::hash_value(CMMsl::TrackRunData *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;

  if ((*((_BYTE *)this + 40) & 0x10) != 0)
  {
    v1 = *((int *)this + 7);
    if ((*((_BYTE *)this + 40) & 4) != 0)
    {
LABEL_3:
      v2 = *((int *)this + 5);
      if ((*((_BYTE *)this + 40) & 8) != 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else
  {
    v1 = 0;
    if ((*((_BYTE *)this + 40) & 4) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 40) & 8) != 0)
  {
LABEL_4:
    v3 = *((int *)this + 6);
    if ((*((_BYTE *)this + 40) & 2) != 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  v3 = 0;
  if ((*((_BYTE *)this + 40) & 2) != 0)
  {
LABEL_5:
    v4 = *((int *)this + 4);
    if ((*((_BYTE *)this + 40) & 0x20) != 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  v4 = 0;
  if ((*((_BYTE *)this + 40) & 0x20) != 0)
  {
LABEL_6:
    v5 = *((int *)this + 8);
    if ((*((_BYTE *)this + 40) & 1) != 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  v5 = 0;
  if ((*((_BYTE *)this + 40) & 1) != 0)
  {
LABEL_7:
    v6 = *((double *)this + 1);
    if (v6 == 0.0)
      v6 = 0.0;
    if ((*((_BYTE *)this + 40) & 0x40) != 0)
      goto LABEL_10;
LABEL_17:
    v7 = 0;
    return v2 ^ v1 ^ v3 ^ v4 ^ v5 ^ *(_QWORD *)&v6 ^ v7;
  }
LABEL_16:
  v6 = 0.0;
  if ((*((_BYTE *)this + 40) & 0x40) == 0)
    goto LABEL_17;
LABEL_10:
  v7 = *((unsigned __int8 *)this + 36);
  return v2 ^ v1 ^ v3 ^ v4 ^ v5 ^ *(_QWORD *)&v6 ^ v7;
}

void CMMsl::UWBRange::~UWBRange(CMMsl::UWBRange *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::UWBRange::UWBRange(CMMsl::UWBRange *this, const CMMsl::UWBRange *a2)
{
  char v2;
  char v3;
  double result;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_251361688;
  *((_DWORD *)this + 14) = 0;
  v2 = *((_BYTE *)a2 + 56);
  if ((v2 & 8) != 0)
  {
    result = *((double *)a2 + 4);
    v3 = 8;
    *((_BYTE *)this + 56) = 8;
    *((double *)this + 4) = result;
    v2 = *((_BYTE *)a2 + 56);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 56) & 4) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 3);
    v3 |= 4u;
    *((_BYTE *)this + 56) = v3;
    *((double *)this + 3) = result;
    v2 = *((_BYTE *)a2 + 56);
  }
LABEL_6:
  if ((v2 & 1) != 0)
  {
    v5 = *((_QWORD *)a2 + 1);
    v3 |= 1u;
    *((_BYTE *)this + 56) = v3;
    *((_QWORD *)this + 1) = v5;
    v2 = *((_BYTE *)a2 + 56);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_13;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *((_BYTE *)this + 56) = v3;
  *((_QWORD *)this + 2) = v6;
  v2 = *((_BYTE *)a2 + 56);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      return result;
LABEL_14:
    result = *((double *)a2 + 6);
    *((_BYTE *)this + 56) = v3 | 0x20;
    *((double *)this + 6) = result;
    return result;
  }
LABEL_13:
  result = *((double *)a2 + 5);
  v3 |= 0x10u;
  *((_BYTE *)this + 56) = v3;
  *((double *)this + 5) = result;
  if ((*((_BYTE *)a2 + 56) & 0x20) != 0)
    goto LABEL_14;
  return result;
}

uint64_t CMMsl::UWBRange::operator=(uint64_t a1, const CMMsl::UWBRange *a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;

  if ((const CMMsl::UWBRange *)a1 != a2)
  {
    CMMsl::UWBRange::UWBRange((CMMsl::UWBRange *)&v8, a2);
    v3 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v12;
    v12 = v3;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v9 = v5;
    v6 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v11;
    v11 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::UWBRange *a2, CMMsl::UWBRange *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;

  v3 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v3;
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v7;
  v8 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v8;
  result = *((double *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((double *)a2 + 6) = result;
  return result;
}

double CMMsl::UWBRange::UWBRange(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_251361688;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  result = *(double *)(a2 + 48);
  *(double *)(a1 + 48) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_251361688;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  result = *(double *)(a2 + 48);
  *(double *)(a1 + 48) = result;
  return result;
}

uint64_t CMMsl::UWBRange::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  void (**v9)(CMMsl::UWBRange *__hidden);
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;

  if (a1 != a2)
  {
    v9 = &off_251361688;
    v3 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a2 + 56) = 0;
    v13 = *(_DWORD *)(a1 + 56);
    v4 = *(_OWORD *)(a2 + 24);
    v11 = *(_OWORD *)(a1 + 24);
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    v10 = v5;
    v6 = *(_OWORD *)(a1 + 40);
    v7 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = v4;
    *(_DWORD *)(a1 + 56) = v3;
    *(_OWORD *)(a1 + 40) = v7;
    v12 = v6;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::UWBRange::formatText(CMMsl::UWBRange *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 56);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "cycleIndex");
    v5 = *((_BYTE *)this + 56);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*((_BYTE *)this + 56) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "error");
  v5 = *((_BYTE *)this + 56);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "machAbsoluteTimestamp", *((double *)this + 3));
  v5 = *((_BYTE *)this + 56);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(a2, "range", *((double *)this + 5));
    if ((*((_BYTE *)this + 56) & 0x20) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "machContinuousTimestamp", *((double *)this + 4));
  v5 = *((_BYTE *)this + 56);
  if ((v5 & 0x10) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 0x20) != 0)
LABEL_7:
    PB::TextFormatter::format(a2, "rssi", *((double *)this + 6));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::UWBRange::readFrom(CMMsl::UWBRange *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  unint64_t v38;
  char v39;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_75;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 56) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_48;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_64;
      case 2u:
        *((_BYTE *)this + 56) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_48;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_64;
      case 3u:
        *((_BYTE *)this + 56) |= 1u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v32 = 0;
          v33 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              v24 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_69;
            }
            v34 = v20++;
            v35 = *(_BYTE *)(v21 + v34);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v35 & 0x7F) << v32;
            if ((v35 & 0x80) == 0)
              break;
            v32 += 7;
            v14 = v33++ > 8;
            if (v14)
            {
              v24 = 0;
LABEL_68:
              v2 = v34 + 1;
              goto LABEL_69;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v24 = 0;
          goto LABEL_68;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_69;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        v24 = 0;
LABEL_69:
        *((_QWORD *)this + 1) = v24;
        break;
      case 4u:
        *((_BYTE *)this + 56) |= 2u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v36 = 0;
          v37 = 0;
          v30 = 0;
          if (v2 <= v26)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v26)
            {
              v30 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_74;
            }
            v38 = v26++;
            v39 = *(_BYTE *)(v27 + v38);
            *((_QWORD *)a2 + 1) = v26;
            v30 |= (unint64_t)(v39 & 0x7F) << v36;
            if ((v39 & 0x80) == 0)
              break;
            v36 += 7;
            v14 = v37++ > 8;
            if (v14)
            {
              v30 = 0;
LABEL_73:
              v2 = v38 + 1;
              goto LABEL_74;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v30 = 0;
          goto LABEL_73;
        }
        v28 = 0;
        v29 = 0;
        v30 = 0;
        do
        {
          v2 = v26 + 1;
          *((_QWORD *)a2 + 1) = v26 + 1;
          v31 = *(_BYTE *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0)
            goto LABEL_74;
          v28 += 7;
          v26 = v2;
          v14 = v29++ > 8;
        }
        while (!v14);
        v30 = 0;
LABEL_74:
        *((_QWORD *)this + 2) = v30;
        break;
      case 5u:
        *((_BYTE *)this + 56) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_48;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_64;
      case 6u:
        *((_BYTE *)this + 56) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_64:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_48:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_75:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::UWBRange::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 56);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32));
    v4 = *(_BYTE *)(v3 + 56);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(this + 56) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 48));
  }
LABEL_12:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  if ((*(_BYTE *)(v3 + 56) & 0x20) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 48));
  return this;
}

uint64_t CMMsl::UWBRange::hash_value(CMMsl::UWBRange *this)
{
  double v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;

  if ((*((_BYTE *)this + 56) & 8) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 56) & 4) != 0)
      goto LABEL_3;
LABEL_17:
    v2 = 0.0;
    if ((*((_BYTE *)this + 56) & 1) != 0)
      goto LABEL_6;
    goto LABEL_18;
  }
  v1 = *((double *)this + 4);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 56) & 4) == 0)
    goto LABEL_17;
LABEL_3:
  v2 = *((double *)this + 3);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 56) & 1) != 0)
  {
LABEL_6:
    v3 = *((_QWORD *)this + 1);
    if ((*((_BYTE *)this + 56) & 2) != 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  v3 = 0;
  if ((*((_BYTE *)this + 56) & 2) != 0)
  {
LABEL_7:
    v4 = *((_QWORD *)this + 2);
    if ((*((_BYTE *)this + 56) & 0x10) != 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  v4 = 0;
  if ((*((_BYTE *)this + 56) & 0x10) != 0)
  {
LABEL_8:
    v5 = *((double *)this + 5);
    if (v5 == 0.0)
      v5 = 0.0;
    if ((*((_BYTE *)this + 56) & 0x20) != 0)
      goto LABEL_11;
LABEL_21:
    v6 = 0.0;
    return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ v3 ^ v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6;
  }
LABEL_20:
  v5 = 0.0;
  if ((*((_BYTE *)this + 56) & 0x20) == 0)
    goto LABEL_21;
LABEL_11:
  v6 = *((double *)this + 6);
  if (v6 == 0.0)
    v6 = 0.0;
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ v3 ^ v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6;
}

void CMMsl::UltraFastAccel::~UltraFastAccel(CMMsl::UltraFastAccel *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_2513616C0;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_2513616C0;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_2513616C0;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::UltraFastAccel *CMMsl::UltraFastAccel::UltraFastAccel(CMMsl::UltraFastAccel *this, const CMMsl::Accel **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const CMMsl::Accel *v7;

  *(_QWORD *)this = &off_2513616C0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  if (a2[2])
  {
    v4 = operator new();
    v5 = CMMsl::Accel::Accel(v4, a2[2]);
    v6 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  if (((_BYTE)a2[3] & 1) != 0)
  {
    v7 = a2[1];
    *((_BYTE *)this + 24) |= 1u;
    *((_QWORD *)this + 1) = v7;
  }
  return this;
}

uint64_t CMMsl::UltraFastAccel::operator=(uint64_t a1, const CMMsl::Accel **a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (**v8)(CMMsl::UltraFastAccel *__hidden);
  uint64_t v9;
  uint64_t v10;
  int v11;

  if ((const CMMsl::Accel **)a1 != a2)
  {
    CMMsl::UltraFastAccel::UltraFastAccel((CMMsl::UltraFastAccel *)&v8, a2);
    v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v11;
    v11 = v3;
    v5 = *(_QWORD *)(a1 + 8);
    v4 = *(_QWORD *)(a1 + 16);
    v6 = v10;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v6;
    v8 = &off_2513616C0;
    v9 = v5;
    v10 = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::UltraFastAccel *a2, CMMsl::UltraFastAccel *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  v5 = *(_QWORD *)(this + 8);
  v4 = *(_QWORD *)(this + 16);
  v6 = *((_QWORD *)a2 + 2);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *(_QWORD *)(this + 16) = v6;
  *((_QWORD *)a2 + 1) = v5;
  *((_QWORD *)a2 + 2) = v4;
  return this;
}

uint64_t CMMsl::UltraFastAccel::UltraFastAccel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_2513616C0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_2513616C0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  return a1;
}

uint64_t CMMsl::UltraFastAccel::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  int v11;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    v5 = *(_QWORD *)(a2 + 8);
    v4 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    v6 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v3;
    v11 = v6;
    v8 = *(_QWORD *)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v4;
    v10[0] = &off_2513616C0;
    v10[1] = v8;
    v10[2] = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::UltraFastAccel::formatText(CMMsl::UltraFastAccel *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 24) & 1) != 0)
    PB::TextFormatter::format(a2, "aopTimestamp");
  v5 = *((_QWORD *)this + 2);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::UltraFastAccel::readFrom(CMMsl::UltraFastAccel *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  unint64_t v32;
  char v33;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_28;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 24) |= 1u;
        v22 = *((_QWORD *)a2 + 1);
        v23 = *((_QWORD *)a2 + 2);
        v24 = *(_QWORD *)a2;
        if (v22 > 0xFFFFFFFFFFFFFFF5 || v22 + 10 > v23)
        {
          v30 = 0;
          v31 = 0;
          v27 = 0;
          if (v23 <= v22)
            v23 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v23 == v22)
            {
              v27 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_47;
            }
            v32 = v22 + 1;
            v33 = *(_BYTE *)(v24 + v22);
            *((_QWORD *)a2 + 1) = v32;
            v27 |= (unint64_t)(v33 & 0x7F) << v30;
            if ((v33 & 0x80) == 0)
              break;
            v30 += 7;
            v22 = v32;
            v14 = v31++ > 8;
            if (v14)
            {
LABEL_43:
              v27 = 0;
              goto LABEL_47;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v27 = 0;
        }
        else
        {
          v25 = 0;
          v26 = 0;
          v27 = 0;
          while (1)
          {
            v28 = v22 + 1;
            *((_QWORD *)a2 + 1) = v22 + 1;
            v29 = *(_BYTE *)(v24 + v22);
            v27 |= (unint64_t)(v29 & 0x7F) << v25;
            if ((v29 & 0x80) == 0)
              break;
            v25 += 7;
            v22 = v28;
            v14 = v26++ > 8;
            if (v14)
              goto LABEL_43;
          }
        }
LABEL_47:
        *((_QWORD *)this + 1) = v27;
      }
      else if ((v11 >> 3) == 1)
      {
        v19 = (_DWORD *)operator new();
        *(_QWORD *)v19 = &off_25135BD10;
        v19[8] = 0;
        v20 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = (_DWORD *)*((_QWORD *)this + 2);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_28:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_28;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::UltraFastAccel::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = this;
  v4 = *(const PB::Base **)(this + 16);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  if ((*(_BYTE *)(v3 + 24) & 1) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

unint64_t CMMsl::UltraFastAccel::hash_value(CMMsl::UltraFastAccel *this)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    v2 = CMMsl::Accel::hash_value((CMMsl::Accel *)v2);
  if ((*((_BYTE *)this + 24) & 1) != 0)
    v3 = *((_QWORD *)this + 1);
  else
    v3 = 0;
  return v3 ^ v2;
}

_QWORD *CMMsl::UltraFastAccel::makeSuper(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[2])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135BD10;
    *(_DWORD *)(v2 + 32) = 0;
    this = (_QWORD *)v1[2];
    v1[2] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void CMMsl::UserStudyEvent::~UserStudyEvent(CMMsl::UserStudyEvent *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_2513616F8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    sub_242910C5C(v2);
  PB::Base::~Base(this);
}

{
  CMMsl::UserStudyEvent::~UserStudyEvent(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::UserStudyEvent *CMMsl::UserStudyEvent::UserStudyEvent(CMMsl::UserStudyEvent *this, const CMMsl::UserStudyEvent *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  __int128 v8;
  uint64_t v9;

  *(_QWORD *)this = &off_2513616F8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  if ((*((_BYTE *)a2 + 24) & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 2);
    *((_BYTE *)this + 24) = 1;
    *((_QWORD *)this + 2) = v4;
  }
  if (*((_QWORD *)a2 + 1))
  {
    v5 = operator new();
    v6 = v5;
    v7 = (__int128 *)*((_QWORD *)a2 + 1);
    if (*((char *)v7 + 23) < 0)
    {
      sub_242910CE8((_BYTE *)v5, *(void **)v7, *((_QWORD *)v7 + 1));
    }
    else
    {
      v8 = *v7;
      *(_QWORD *)(v5 + 16) = *((_QWORD *)v7 + 2);
      *(_OWORD *)v5 = v8;
    }
    v9 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v6;
    if (v9)
      sub_242910C5C(v9);
  }
  return this;
}

uint64_t CMMsl::UserStudyEvent::operator=(uint64_t a1, const CMMsl::UserStudyEvent *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  if ((const CMMsl::UserStudyEvent *)a1 != a2)
  {
    CMMsl::UserStudyEvent::UserStudyEvent((CMMsl::UserStudyEvent *)&v7, a2);
    v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v9;
    v9 = v4;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v8;
    v8 = v5;
    CMMsl::UserStudyEvent::~UserStudyEvent((CMMsl::UserStudyEvent *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::UserStudyEvent *a2, CMMsl::UserStudyEvent *a3)
{
  int v3;
  double result;
  uint64_t v5;

  v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  return result;
}

uint64_t CMMsl::UserStudyEvent::UserStudyEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_2513616F8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  if (v4)
    sub_242910C5C(v4);
  return a1;
}

uint64_t CMMsl::UserStudyEvent::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  int v11;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    v4 = *(_QWORD *)(a2 + 16);
    v5 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v6 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v3;
    v11 = v6;
    v7 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v4;
    v10[2] = v7;
    v8 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v5;
    v10[0] = &off_2513616F8;
    v10[1] = v8;
    CMMsl::UserStudyEvent::~UserStudyEvent((CMMsl::UserStudyEvent *)v10);
  }
  return a1;
}

uint64_t CMMsl::UserStudyEvent::formatText(CMMsl::UserStudyEvent *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format();
  if ((*((_BYTE *)this + 24) & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::UserStudyEvent::readFrom(CMMsl::UserStudyEvent *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t result;
  _QWORD *v21;
  uint64_t v22;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_26;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        v21 = (_QWORD *)operator new();
        v21[1] = 0;
        v21[2] = 0;
        *v21 = 0;
        v22 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v21;
        if (v22)
          sub_242910C5C(v22);
        PB::Reader::read();
      }
      else if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 24) |= 1u;
        v19 = *((_QWORD *)a2 + 1);
        if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v19);
          *((_QWORD *)a2 + 1) += 8;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_26:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_26;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::UserStudyEvent::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v2;

  v2 = this;
  if ((*(_BYTE *)(this + 24) & 1) != 0)
    this = PB::Writer::write(a2, *(double *)(this + 16));
  if (*(_QWORD *)(v2 + 8))
    return PB::Writer::write();
  return this;
}

unint64_t CMMsl::UserStudyEvent::hash_value(CMMsl::UserStudyEvent *this)
{
  uint64_t v1;
  unint64_t v2;

  if ((*((_BYTE *)this + 24) & 1) != 0)
  {
    if (*((double *)this + 2) == 0.0)
      v1 = 0;
    else
      v1 = *((_QWORD *)this + 2);
  }
  else
  {
    v1 = 0;
  }
  v2 = *((_QWORD *)this + 1);
  if (v2)
    v2 = sub_242910D74(v2);
  return v2 ^ v1;
}

void CMMsl::VIOEstimation::~VIOEstimation(CMMsl::VIOEstimation *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  *(_QWORD *)this = &off_251361730;
  v2 = (void *)*((_QWORD *)this + 34);
  if (v2)
  {
    *((_QWORD *)this + 35) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 31);
  if (v3)
  {
    *((_QWORD *)this + 32) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 28);
  if (v4)
  {
    *((_QWORD *)this + 29) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 25);
  if (v5)
  {
    *((_QWORD *)this + 26) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 22);
  if (v6)
  {
    *((_QWORD *)this + 23) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 19);
  if (v7)
  {
    *((_QWORD *)this + 20) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 16);
  if (v8)
  {
    *((_QWORD *)this + 17) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 13);
  if (v9)
  {
    *((_QWORD *)this + 14) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 10);
  if (v10)
  {
    *((_QWORD *)this + 11) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 7);
  if (v11)
  {
    *((_QWORD *)this + 8) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 4);
  if (v12)
  {
    *((_QWORD *)this + 5) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)this + 1);
  if (v13)
  {
    *((_QWORD *)this + 2) = v13;
    operator delete(v13);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::VIOEstimation::~VIOEstimation(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::VIOEstimation *CMMsl::VIOEstimation::VIOEstimation(CMMsl::VIOEstimation *this, const CMMsl::VIOEstimation *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  char v10;
  char v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  int v17;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)this = &off_251361730;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (_QWORD *)((char *)this + 8);
  *(_OWORD *)((char *)this + 56) = 0u;
  v5 = (_QWORD *)((char *)this + 56);
  *(_OWORD *)((char *)this + 104) = 0u;
  v6 = (_QWORD *)((char *)this + 104);
  *(_OWORD *)((char *)this + 152) = 0u;
  v7 = (_QWORD *)((char *)this + 152);
  *(_OWORD *)((char *)this + 200) = 0u;
  v8 = (_QWORD *)((char *)this + 200);
  *(_OWORD *)((char *)this + 248) = 0u;
  v9 = (_QWORD *)((char *)this + 248);
  *((_QWORD *)this + 42) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  v10 = *((_BYTE *)a2 + 340);
  if ((v10 & 0x40) != 0)
  {
    v12 = *((_DWORD *)a2 + 84);
    v11 = 64;
    *((_BYTE *)this + 340) = 64;
    *((_DWORD *)this + 84) = v12;
    v10 = *((_BYTE *)a2 + 340);
    if ((v10 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v11 = 0;
  if ((*((_BYTE *)a2 + 340) & 4) != 0)
  {
LABEL_5:
    v13 = *((_QWORD *)a2 + 39);
    v11 |= 4u;
    *((_BYTE *)this + 340) = v11;
    *((_QWORD *)this + 39) = v13;
    v10 = *((_BYTE *)a2 + 340);
  }
LABEL_6:
  if ((v10 & 1) != 0)
  {
    v19 = *((_QWORD *)a2 + 37);
    v11 |= 1u;
    *((_BYTE *)this + 340) = v11;
    *((_QWORD *)this + 37) = v19;
    v10 = *((_BYTE *)a2 + 340);
    if ((v10 & 8) == 0)
    {
LABEL_8:
      if ((v10 & 2) == 0)
        goto LABEL_10;
      goto LABEL_9;
    }
  }
  else if ((v10 & 8) == 0)
  {
    goto LABEL_8;
  }
  v20 = *((_QWORD *)a2 + 40);
  v11 |= 8u;
  *((_BYTE *)this + 340) = v11;
  *((_QWORD *)this + 40) = v20;
  if ((*((_BYTE *)a2 + 340) & 2) != 0)
  {
LABEL_9:
    v14 = *((_QWORD *)a2 + 38);
    *((_BYTE *)this + 340) = v11 | 2;
    *((_QWORD *)this + 38) = v14;
  }
LABEL_10:
  if (this != a2)
  {
    sub_2429111C4((_QWORD *)this + 22, *((char **)a2 + 22), *((char **)a2 + 23), (uint64_t)(*((_QWORD *)a2 + 23) - *((_QWORD *)a2 + 22)) >> 3);
    sub_2429111C4(v6, *((char **)a2 + 13), *((char **)a2 + 14), (uint64_t)(*((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13)) >> 3);
    sub_2429111C4((_QWORD *)this + 34, *((char **)a2 + 34), *((char **)a2 + 35), (uint64_t)(*((_QWORD *)a2 + 35) - *((_QWORD *)a2 + 34)) >> 3);
    sub_2429111C4(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
    sub_2429111C4((_QWORD *)this + 28, *((char **)a2 + 28), *((char **)a2 + 29), (uint64_t)(*((_QWORD *)a2 + 29) - *((_QWORD *)a2 + 28)) >> 3);
    sub_2429111C4(v7, *((char **)a2 + 19), *((char **)a2 + 20), (uint64_t)(*((_QWORD *)a2 + 20) - *((_QWORD *)a2 + 19)) >> 3);
    sub_2429111C4((_QWORD *)this + 16, *((char **)a2 + 16), *((char **)a2 + 17), (uint64_t)(*((_QWORD *)a2 + 17) - *((_QWORD *)a2 + 16)) >> 3);
    sub_2429111C4(v9, *((char **)a2 + 31), *((char **)a2 + 32), (uint64_t)(*((_QWORD *)a2 + 32) - *((_QWORD *)a2 + 31)) >> 3);
    sub_2429111C4((_QWORD *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3);
    sub_2429111C4(v8, *((char **)a2 + 25), *((char **)a2 + 26), (uint64_t)(*((_QWORD *)a2 + 26) - *((_QWORD *)a2 + 25)) >> 3);
    sub_2429111C4((_QWORD *)this + 10, *((char **)a2 + 10), *((char **)a2 + 11), (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 3);
    sub_2429111C4(v5, *((char **)a2 + 7), *((char **)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 3);
  }
  v15 = *((_BYTE *)a2 + 340);
  if ((v15 & 0x20) != 0)
  {
    v16 = *((_DWORD *)a2 + 83);
    *((_BYTE *)this + 340) |= 0x20u;
    *((_DWORD *)this + 83) = v16;
    v15 = *((_BYTE *)a2 + 340);
  }
  if ((v15 & 0x10) != 0)
  {
    v17 = *((_DWORD *)a2 + 82);
    *((_BYTE *)this + 340) |= 0x10u;
    *((_DWORD *)this + 82) = v17;
  }
  return this;
}

CMMsl *CMMsl::VIOEstimation::operator=(CMMsl *a1, const CMMsl::VIOEstimation *a2)
{
  CMMsl::VIOEstimation *v3;
  _BYTE v5[344];

  if (a1 != a2)
  {
    CMMsl::VIOEstimation::VIOEstimation((CMMsl::VIOEstimation *)v5, a2);
    CMMsl::swap(a1, (CMMsl::VIOEstimation *)v5, v3);
    CMMsl::VIOEstimation::~VIOEstimation((CMMsl::VIOEstimation *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::VIOEstimation *a2, CMMsl::VIOEstimation *a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float result;

  v3 = *((_DWORD *)this + 85);
  *((_DWORD *)this + 85) = *((_DWORD *)a2 + 85);
  *((_DWORD *)a2 + 85) = v3;
  v4 = *((_DWORD *)this + 84);
  *((_DWORD *)this + 84) = *((_DWORD *)a2 + 84);
  *((_DWORD *)a2 + 84) = v4;
  v5 = *((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = *((_QWORD *)a2 + 39);
  *((_QWORD *)a2 + 39) = v5;
  v6 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = *((_QWORD *)a2 + 37);
  *((_QWORD *)a2 + 37) = v6;
  v7 = *((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = *((_QWORD *)a2 + 40);
  *((_QWORD *)a2 + 40) = v7;
  v8 = *((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = *((_QWORD *)a2 + 38);
  *((_QWORD *)a2 + 38) = v8;
  v9 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = *((_QWORD *)a2 + 22);
  *((_QWORD *)a2 + 22) = v9;
  v10 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = *((_QWORD *)a2 + 23);
  *((_QWORD *)a2 + 23) = v10;
  v11 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = *((_QWORD *)a2 + 24);
  *((_QWORD *)a2 + 24) = v11;
  v12 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v12;
  v13 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v13;
  v14 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v14;
  v15 = *((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = *((_QWORD *)a2 + 34);
  *((_QWORD *)a2 + 34) = v15;
  v16 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = *((_QWORD *)a2 + 35);
  *((_QWORD *)a2 + 35) = v16;
  v17 = *((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = *((_QWORD *)a2 + 36);
  *((_QWORD *)a2 + 36) = v17;
  v18 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v18;
  v19 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v19;
  v20 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v20;
  v21 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = *((_QWORD *)a2 + 28);
  *((_QWORD *)a2 + 28) = v21;
  v22 = *((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = *((_QWORD *)a2 + 29);
  *((_QWORD *)a2 + 29) = v22;
  v23 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = *((_QWORD *)a2 + 30);
  *((_QWORD *)a2 + 30) = v23;
  v24 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 19) = v24;
  v25 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = *((_QWORD *)a2 + 20);
  *((_QWORD *)a2 + 20) = v25;
  v26 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = *((_QWORD *)a2 + 21);
  *((_QWORD *)a2 + 21) = v26;
  v27 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v27;
  v28 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v28;
  v29 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v29;
  v30 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = *((_QWORD *)a2 + 31);
  *((_QWORD *)a2 + 31) = v30;
  v31 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = *((_QWORD *)a2 + 32);
  *((_QWORD *)a2 + 32) = v31;
  v32 = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = *((_QWORD *)a2 + 33);
  *((_QWORD *)a2 + 33) = v32;
  v33 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v33;
  v34 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v34;
  v35 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v35;
  v36 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = *((_QWORD *)a2 + 25);
  *((_QWORD *)a2 + 25) = v36;
  v37 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = *((_QWORD *)a2 + 26);
  *((_QWORD *)a2 + 26) = v37;
  v38 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = *((_QWORD *)a2 + 27);
  *((_QWORD *)a2 + 27) = v38;
  v39 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v39;
  v40 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v40;
  v41 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v41;
  v42 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v42;
  v43 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v43;
  v44 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v44;
  LODWORD(v8) = *((_DWORD *)this + 83);
  *((_DWORD *)this + 83) = *((_DWORD *)a2 + 83);
  *((_DWORD *)a2 + 83) = v8;
  result = *((float *)this + 82);
  *((_DWORD *)this + 82) = *((_DWORD *)a2 + 82);
  *((float *)a2 + 82) = result;
  return result;
}

uint64_t CMMsl::VIOEstimation::VIOEstimation(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = &off_251361730;
  v6 = a1 + 32;
  v7 = a1 + 80;
  v5 = a1 + 128;
  *(_DWORD *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 340) = *(_DWORD *)(a2 + 340);
  *(_DWORD *)(a2 + 340) = 0;
  *(_DWORD *)(a1 + 336) = *(_DWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  sub_242911330(a1 + 176, (__n128 *)(a2 + 176));
  sub_242911330(a1 + 104, (__n128 *)(a2 + 104));
  sub_242911330(a1 + 272, (__n128 *)(a2 + 272));
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  sub_242911330(a1 + 224, (__n128 *)(a2 + 224));
  sub_242911330(a1 + 152, (__n128 *)(a2 + 152));
  sub_242911330(v5, (__n128 *)(a2 + 128));
  sub_242911330(a1 + 248, (__n128 *)(a2 + 248));
  sub_242911330(v6, (__n128 *)(a2 + 32));
  sub_242911330(a1 + 200, (__n128 *)(a2 + 200));
  sub_242911330(v7, (__n128 *)(a2 + 80));
  sub_242911330(a1 + 56, (__n128 *)(a2 + 56));
  *(_DWORD *)(a1 + 332) = *(_DWORD *)(a2 + 332);
  *(_DWORD *)(a1 + 328) = *(_DWORD *)(a2 + 328);
  return a1;
}

CMMsl *CMMsl::VIOEstimation::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::VIOEstimation *v3;
  _BYTE v5[344];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::VIOEstimation::VIOEstimation((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::VIOEstimation *)v5, v3);
    CMMsl::VIOEstimation::~VIOEstimation((CMMsl::VIOEstimation *)v5);
  }
  return a1;
}

uint64_t CMMsl::VIOEstimation::formatText(CMMsl::VIOEstimation *this, PB::TextFormatter *a2, const char *a3)
{
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;
  char v11;
  double *v12;
  double *v13;
  double v14;
  double *v15;
  double *v16;
  double v17;
  double *v18;
  double *v19;
  double v20;
  double *v21;
  double *v22;
  double v23;
  char v24;
  double *v25;
  double *v26;
  double v27;
  double *v28;
  double *v29;
  double v30;
  double *v31;
  double *v32;
  double v33;
  double *v34;
  double *v35;
  double v36;
  char v37;
  double *v38;
  double *v39;
  double v40;
  double *v41;
  double *v42;
  double v43;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (double *)*((_QWORD *)this + 1);
  v6 = (double *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "accelBias", v7);
  }
  v8 = (double *)*((_QWORD *)this + 4);
  v9 = (double *)*((_QWORD *)this + 5);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(a2, "accelBiasCov", v10);
  }
  v11 = *((_BYTE *)this + 340);
  if ((v11 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "cameraImageResolutionHeight", *((float *)this + 82));
    v11 = *((_BYTE *)this + 340);
  }
  if ((v11 & 0x20) != 0)
    PB::TextFormatter::format(a2, "cameraImageResolutionWidth", *((float *)this + 83));
  v12 = (double *)*((_QWORD *)this + 7);
  v13 = (double *)*((_QWORD *)this + 8);
  while (v12 != v13)
  {
    v14 = *v12++;
    PB::TextFormatter::format(a2, "cameraIntrinsics", v14);
  }
  v15 = (double *)*((_QWORD *)this + 10);
  v16 = (double *)*((_QWORD *)this + 11);
  while (v15 != v16)
  {
    v17 = *v15++;
    PB::TextFormatter::format(a2, "cameraPose", v17);
  }
  v18 = (double *)*((_QWORD *)this + 13);
  v19 = (double *)*((_QWORD *)this + 14);
  while (v18 != v19)
  {
    v20 = *v18++;
    PB::TextFormatter::format(a2, "gyroBias", v20);
  }
  v21 = (double *)*((_QWORD *)this + 16);
  v22 = (double *)*((_QWORD *)this + 17);
  while (v21 != v22)
  {
    v23 = *v21++;
    PB::TextFormatter::format(a2, "gyroBiasCov", v23);
  }
  v24 = *((_BYTE *)this + 340);
  if ((v24 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "machContinuousOriginTimestamp", *((double *)this + 37));
    v24 = *((_BYTE *)this + 340);
  }
  if ((v24 & 2) != 0)
    PB::TextFormatter::format(a2, "machContinuousTimestamp", *((double *)this + 38));
  v25 = (double *)*((_QWORD *)this + 22);
  v26 = (double *)*((_QWORD *)this + 23);
  while (v25 != v26)
  {
    v27 = *v25++;
    PB::TextFormatter::format(a2, "orientation", v27);
  }
  v28 = (double *)*((_QWORD *)this + 19);
  v29 = (double *)*((_QWORD *)this + 20);
  while (v28 != v29)
  {
    v30 = *v28++;
    PB::TextFormatter::format(a2, "orientationCov", v30);
  }
  if ((*((_BYTE *)this + 340) & 4) != 0)
    PB::TextFormatter::format(a2, "originTimestamp", *((double *)this + 39));
  v31 = (double *)*((_QWORD *)this + 28);
  v32 = (double *)*((_QWORD *)this + 29);
  while (v31 != v32)
  {
    v33 = *v31++;
    PB::TextFormatter::format(a2, "position", v33);
  }
  v34 = (double *)*((_QWORD *)this + 25);
  v35 = (double *)*((_QWORD *)this + 26);
  while (v34 != v35)
  {
    v36 = *v34++;
    PB::TextFormatter::format(a2, "positionCov", v36);
  }
  v37 = *((_BYTE *)this + 340);
  if ((v37 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 40));
    v37 = *((_BYTE *)this + 340);
  }
  if ((v37 & 0x40) != 0)
    PB::TextFormatter::format(a2, "trackingState");
  v38 = (double *)*((_QWORD *)this + 34);
  v39 = (double *)*((_QWORD *)this + 35);
  while (v38 != v39)
  {
    v40 = *v38++;
    PB::TextFormatter::format(a2, "velocity", v40);
  }
  v41 = (double *)*((_QWORD *)this + 31);
  v42 = (double *)*((_QWORD *)this + 32);
  while (v41 != v42)
  {
    v43 = *v41++;
    PB::TextFormatter::format(a2, "velocityCov", v43);
  }
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::VIOEstimation::readFrom(CMMsl::VIOEstimation *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  _QWORD *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  _QWORD *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  _QWORD *v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  _QWORD *v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  char *v105;
  _QWORD *v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  char *v119;
  _QWORD *v120;
  char *v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  char *v133;
  _QWORD *v134;
  char *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  char *v147;
  _QWORD *v148;
  char *v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  char *v161;
  _QWORD *v162;
  char *v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  char *v175;
  _QWORD *v176;
  char *v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  char *v189;
  _QWORD *v190;
  char *v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t v202;
  char v203;
  unsigned int v204;
  unint64_t v205;
  char v206;
  unint64_t v207;
  char *v208;
  _QWORD *v209;
  unint64_t v210;
  char *v211;
  unint64_t v212;
  char *v213;
  unint64_t v214;
  char *v215;
  unint64_t v216;
  char *v217;
  unint64_t v218;
  char *v219;
  unint64_t v220;
  char *v221;
  unint64_t v222;
  char *v223;
  unint64_t v224;
  char *v225;
  unint64_t v226;
  char *v227;
  unint64_t v228;
  char *v229;
  unint64_t v230;
  char *v231;
  char *v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  char *v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  char *v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  unint64_t v248;
  uint64_t v249;
  char *v250;
  uint64_t v251;
  unint64_t v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  char *v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  char *v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  char *v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t v271;
  unint64_t v272;
  uint64_t v273;
  char *v274;
  uint64_t v275;
  unint64_t v276;
  uint64_t v277;
  unint64_t v278;
  uint64_t v279;
  char *v280;
  uint64_t v281;
  unint64_t v282;
  uint64_t v283;
  unint64_t v284;
  uint64_t v285;
  char *v286;
  uint64_t v287;
  unint64_t v288;
  uint64_t v289;
  unint64_t v290;
  uint64_t v291;
  char *v292;
  uint64_t v293;
  unint64_t v294;
  uint64_t v295;
  unint64_t v296;
  uint64_t v297;
  char *v298;
  uint64_t v299;
  unint64_t v300;
  uint64_t v301;
  unint64_t v302;
  uint64_t v303;
  _QWORD *v304;
  uint64_t v305;
  _QWORD *v306;
  uint64_t v307;
  _QWORD *v308;
  uint64_t v309;
  _QWORD *v310;
  uint64_t v311;
  _QWORD *v312;
  uint64_t v313;
  _QWORD *v314;
  uint64_t v315;
  _QWORD *v316;
  uint64_t v317;
  _QWORD *v318;
  uint64_t v319;
  _QWORD *v320;
  uint64_t v321;
  _QWORD *v322;
  uint64_t v323;
  _QWORD *v324;
  uint64_t v325;
  _QWORD *v326;
  uint64_t v327;
  unint64_t v328;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_21:
      v19 = v11 & 7;
      if (v19 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 340) |= 0x40u;
          v20 = *((_QWORD *)a2 + 1);
          v21 = *((_QWORD *)a2 + 2);
          v22 = *(_QWORD *)a2;
          if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
          {
            v23 = 0;
            v24 = 0;
            v25 = 0;
            do
            {
              v26 = v20 + 1;
              *((_QWORD *)a2 + 1) = v20 + 1;
              v27 = *(_BYTE *)(v22 + v20);
              v25 |= (unint64_t)(v27 & 0x7F) << v23;
              if ((v27 & 0x80) == 0)
                goto LABEL_469;
              v23 += 7;
              v20 = v26;
              v14 = v24++ > 8;
            }
            while (!v14);
LABEL_345:
            LODWORD(v25) = 0;
            goto LABEL_469;
          }
          v203 = 0;
          v204 = 0;
          v25 = 0;
          if (v21 <= v20)
            v21 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v21 == v20)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v205 = v20 + 1;
              v206 = *(_BYTE *)(v22 + v20);
              *((_QWORD *)a2 + 1) = v205;
              v25 |= (unint64_t)(v206 & 0x7F) << v203;
              if (v206 < 0)
              {
                v203 += 7;
                v20 = v205;
                v14 = v204++ > 8;
                if (v14)
                  goto LABEL_345;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v25) = 0;
            }
            break;
          }
LABEL_469:
          *((_DWORD *)this + 84) = v25;
          goto LABEL_560;
        case 2u:
          *((_BYTE *)this + 340) |= 4u;
          v28 = *((_QWORD *)a2 + 1);
          if (v28 > 0xFFFFFFFFFFFFFFF7 || v28 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_556;
          *((_QWORD *)this + 39) = *(_QWORD *)(*(_QWORD *)a2 + v28);
          goto LABEL_558;
        case 3u:
          *((_BYTE *)this + 340) |= 1u;
          v29 = *((_QWORD *)a2 + 1);
          if (v29 > 0xFFFFFFFFFFFFFFF7 || v29 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_556;
          *((_QWORD *)this + 37) = *(_QWORD *)(*(_QWORD *)a2 + v29);
          goto LABEL_558;
        case 4u:
          *((_BYTE *)this + 340) |= 8u;
          v30 = *((_QWORD *)a2 + 1);
          if (v30 > 0xFFFFFFFFFFFFFFF7 || v30 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_556;
          *((_QWORD *)this + 40) = *(_QWORD *)(*(_QWORD *)a2 + v30);
          goto LABEL_558;
        case 5u:
          *((_BYTE *)this + 340) |= 2u;
          v31 = *((_QWORD *)a2 + 1);
          if (v31 > 0xFFFFFFFFFFFFFFF7 || v31 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_556;
          *((_QWORD *)this + 38) = *(_QWORD *)(*(_QWORD *)a2 + v31);
          goto LABEL_558;
        case 6u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v32 = *((_QWORD *)a2 + 1);
            v33 = *((_QWORD *)a2 + 2);
            while (v32 < v33 && !*((_BYTE *)a2 + 24))
            {
              v35 = (char *)*((_QWORD *)this + 23);
              v34 = *((_QWORD *)this + 24);
              if ((unint64_t)v35 >= v34)
              {
                v37 = (char *)*((_QWORD *)this + 22);
                v38 = (v35 - v37) >> 3;
                v39 = v38 + 1;
                if ((unint64_t)(v38 + 1) >> 61)
                  goto LABEL_569;
                v40 = v34 - (_QWORD)v37;
                if (v40 >> 2 > v39)
                  v39 = v40 >> 2;
                if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
                  v41 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v41 = v39;
                if (v41)
                {
                  v41 = (unint64_t)sub_2429112FC(v41);
                  v37 = (char *)*((_QWORD *)this + 22);
                  v35 = (char *)*((_QWORD *)this + 23);
                }
                else
                {
                  v42 = 0;
                }
                v43 = (_QWORD *)(v41 + 8 * v38);
                *v43 = 0;
                v36 = v43 + 1;
                while (v35 != v37)
                {
                  v44 = *((_QWORD *)v35 - 1);
                  v35 -= 8;
                  *--v43 = v44;
                }
                *((_QWORD *)this + 22) = v43;
                *((_QWORD *)this + 23) = v36;
                *((_QWORD *)this + 24) = v41 + 8 * v42;
                if (v37)
                  operator delete(v37);
              }
              else
              {
                *(_QWORD *)v35 = 0;
                v36 = v35 + 8;
              }
              *((_QWORD *)this + 23) = v36;
              v45 = *((_QWORD *)a2 + 1);
              if (v45 > 0xFFFFFFFFFFFFFFF7 || v45 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_330;
              *(v36 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v45);
              v33 = *((_QWORD *)a2 + 2);
              v32 = *((_QWORD *)a2 + 1) + 8;
              *((_QWORD *)a2 + 1) = v32;
            }
            goto LABEL_331;
          }
          v208 = (char *)*((_QWORD *)this + 23);
          v207 = *((_QWORD *)this + 24);
          if ((unint64_t)v208 >= v207)
          {
            v232 = (char *)*((_QWORD *)this + 22);
            v233 = (v208 - v232) >> 3;
            v234 = v233 + 1;
            if ((unint64_t)(v233 + 1) >> 61)
              goto LABEL_569;
            v235 = v207 - (_QWORD)v232;
            if (v235 >> 2 > v234)
              v234 = v235 >> 2;
            if ((unint64_t)v235 >= 0x7FFFFFFFFFFFFFF8)
              v236 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v236 = v234;
            if (v236)
            {
              v236 = (unint64_t)sub_2429112FC(v236);
              v232 = (char *)*((_QWORD *)this + 22);
              v208 = (char *)*((_QWORD *)this + 23);
            }
            else
            {
              v237 = 0;
            }
            v304 = (_QWORD *)(v236 + 8 * v233);
            *v304 = 0;
            v209 = v304 + 1;
            while (v208 != v232)
            {
              v305 = *((_QWORD *)v208 - 1);
              v208 -= 8;
              *--v304 = v305;
            }
            *((_QWORD *)this + 22) = v304;
            *((_QWORD *)this + 23) = v209;
            *((_QWORD *)this + 24) = v236 + 8 * v237;
            if (v232)
              operator delete(v232);
          }
          else
          {
            *(_QWORD *)v208 = 0;
            v209 = v208 + 8;
          }
          *((_QWORD *)this + 23) = v209;
          goto LABEL_554;
        case 7u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v46 = *((_QWORD *)a2 + 1);
            v47 = *((_QWORD *)a2 + 2);
            while (v46 < v47 && !*((_BYTE *)a2 + 24))
            {
              v49 = (char *)*((_QWORD *)this + 14);
              v48 = *((_QWORD *)this + 15);
              if ((unint64_t)v49 >= v48)
              {
                v51 = (char *)*((_QWORD *)this + 13);
                v52 = (v49 - v51) >> 3;
                v53 = v52 + 1;
                if ((unint64_t)(v52 + 1) >> 61)
                  goto LABEL_569;
                v54 = v48 - (_QWORD)v51;
                if (v54 >> 2 > v53)
                  v53 = v54 >> 2;
                if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8)
                  v55 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v55 = v53;
                if (v55)
                {
                  v55 = (unint64_t)sub_2429112FC(v55);
                  v51 = (char *)*((_QWORD *)this + 13);
                  v49 = (char *)*((_QWORD *)this + 14);
                }
                else
                {
                  v56 = 0;
                }
                v57 = (_QWORD *)(v55 + 8 * v52);
                *v57 = 0;
                v50 = v57 + 1;
                while (v49 != v51)
                {
                  v58 = *((_QWORD *)v49 - 1);
                  v49 -= 8;
                  *--v57 = v58;
                }
                *((_QWORD *)this + 13) = v57;
                *((_QWORD *)this + 14) = v50;
                *((_QWORD *)this + 15) = v55 + 8 * v56;
                if (v51)
                  operator delete(v51);
              }
              else
              {
                *(_QWORD *)v49 = 0;
                v50 = v49 + 8;
              }
              *((_QWORD *)this + 14) = v50;
              v59 = *((_QWORD *)a2 + 1);
              if (v59 > 0xFFFFFFFFFFFFFFF7 || v59 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_330;
              *(v50 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v59);
              v47 = *((_QWORD *)a2 + 2);
              v46 = *((_QWORD *)a2 + 1) + 8;
              *((_QWORD *)a2 + 1) = v46;
            }
            goto LABEL_331;
          }
          v211 = (char *)*((_QWORD *)this + 14);
          v210 = *((_QWORD *)this + 15);
          if ((unint64_t)v211 >= v210)
          {
            v238 = (char *)*((_QWORD *)this + 13);
            v239 = (v211 - v238) >> 3;
            v240 = v239 + 1;
            if ((unint64_t)(v239 + 1) >> 61)
              goto LABEL_569;
            v241 = v210 - (_QWORD)v238;
            if (v241 >> 2 > v240)
              v240 = v241 >> 2;
            if ((unint64_t)v241 >= 0x7FFFFFFFFFFFFFF8)
              v242 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v242 = v240;
            if (v242)
            {
              v242 = (unint64_t)sub_2429112FC(v242);
              v238 = (char *)*((_QWORD *)this + 13);
              v211 = (char *)*((_QWORD *)this + 14);
            }
            else
            {
              v243 = 0;
            }
            v306 = (_QWORD *)(v242 + 8 * v239);
            *v306 = 0;
            v209 = v306 + 1;
            while (v211 != v238)
            {
              v307 = *((_QWORD *)v211 - 1);
              v211 -= 8;
              *--v306 = v307;
            }
            *((_QWORD *)this + 13) = v306;
            *((_QWORD *)this + 14) = v209;
            *((_QWORD *)this + 15) = v242 + 8 * v243;
            if (v238)
              operator delete(v238);
          }
          else
          {
            *(_QWORD *)v211 = 0;
            v209 = v211 + 8;
          }
          *((_QWORD *)this + 14) = v209;
          goto LABEL_554;
        case 8u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v60 = *((_QWORD *)a2 + 1);
            v61 = *((_QWORD *)a2 + 2);
            while (v60 < v61 && !*((_BYTE *)a2 + 24))
            {
              v63 = (char *)*((_QWORD *)this + 35);
              v62 = *((_QWORD *)this + 36);
              if ((unint64_t)v63 >= v62)
              {
                v65 = (char *)*((_QWORD *)this + 34);
                v66 = (v63 - v65) >> 3;
                v67 = v66 + 1;
                if ((unint64_t)(v66 + 1) >> 61)
                  goto LABEL_569;
                v68 = v62 - (_QWORD)v65;
                if (v68 >> 2 > v67)
                  v67 = v68 >> 2;
                if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8)
                  v69 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v69 = v67;
                if (v69)
                {
                  v69 = (unint64_t)sub_2429112FC(v69);
                  v65 = (char *)*((_QWORD *)this + 34);
                  v63 = (char *)*((_QWORD *)this + 35);
                }
                else
                {
                  v70 = 0;
                }
                v71 = (_QWORD *)(v69 + 8 * v66);
                *v71 = 0;
                v64 = v71 + 1;
                while (v63 != v65)
                {
                  v72 = *((_QWORD *)v63 - 1);
                  v63 -= 8;
                  *--v71 = v72;
                }
                *((_QWORD *)this + 34) = v71;
                *((_QWORD *)this + 35) = v64;
                *((_QWORD *)this + 36) = v69 + 8 * v70;
                if (v65)
                  operator delete(v65);
              }
              else
              {
                *(_QWORD *)v63 = 0;
                v64 = v63 + 8;
              }
              *((_QWORD *)this + 35) = v64;
              v73 = *((_QWORD *)a2 + 1);
              if (v73 > 0xFFFFFFFFFFFFFFF7 || v73 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_330;
              *(v64 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v73);
              v61 = *((_QWORD *)a2 + 2);
              v60 = *((_QWORD *)a2 + 1) + 8;
              *((_QWORD *)a2 + 1) = v60;
            }
            goto LABEL_331;
          }
          v213 = (char *)*((_QWORD *)this + 35);
          v212 = *((_QWORD *)this + 36);
          if ((unint64_t)v213 >= v212)
          {
            v244 = (char *)*((_QWORD *)this + 34);
            v245 = (v213 - v244) >> 3;
            v246 = v245 + 1;
            if ((unint64_t)(v245 + 1) >> 61)
              goto LABEL_569;
            v247 = v212 - (_QWORD)v244;
            if (v247 >> 2 > v246)
              v246 = v247 >> 2;
            if ((unint64_t)v247 >= 0x7FFFFFFFFFFFFFF8)
              v248 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v248 = v246;
            if (v248)
            {
              v248 = (unint64_t)sub_2429112FC(v248);
              v244 = (char *)*((_QWORD *)this + 34);
              v213 = (char *)*((_QWORD *)this + 35);
            }
            else
            {
              v249 = 0;
            }
            v308 = (_QWORD *)(v248 + 8 * v245);
            *v308 = 0;
            v209 = v308 + 1;
            while (v213 != v244)
            {
              v309 = *((_QWORD *)v213 - 1);
              v213 -= 8;
              *--v308 = v309;
            }
            *((_QWORD *)this + 34) = v308;
            *((_QWORD *)this + 35) = v209;
            *((_QWORD *)this + 36) = v248 + 8 * v249;
            if (v244)
              operator delete(v244);
          }
          else
          {
            *(_QWORD *)v213 = 0;
            v209 = v213 + 8;
          }
          *((_QWORD *)this + 35) = v209;
          goto LABEL_554;
        case 9u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v74 = *((_QWORD *)a2 + 1);
            v75 = *((_QWORD *)a2 + 2);
            while (v74 < v75 && !*((_BYTE *)a2 + 24))
            {
              v77 = (char *)*((_QWORD *)this + 2);
              v76 = *((_QWORD *)this + 3);
              if ((unint64_t)v77 >= v76)
              {
                v79 = (char *)*((_QWORD *)this + 1);
                v80 = (v77 - v79) >> 3;
                v81 = v80 + 1;
                if ((unint64_t)(v80 + 1) >> 61)
                  goto LABEL_569;
                v82 = v76 - (_QWORD)v79;
                if (v82 >> 2 > v81)
                  v81 = v82 >> 2;
                if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF8)
                  v83 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v83 = v81;
                if (v83)
                {
                  v83 = (unint64_t)sub_2429112FC(v83);
                  v79 = (char *)*((_QWORD *)this + 1);
                  v77 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v84 = 0;
                }
                v85 = (_QWORD *)(v83 + 8 * v80);
                *v85 = 0;
                v78 = v85 + 1;
                while (v77 != v79)
                {
                  v86 = *((_QWORD *)v77 - 1);
                  v77 -= 8;
                  *--v85 = v86;
                }
                *((_QWORD *)this + 1) = v85;
                *((_QWORD *)this + 2) = v78;
                *((_QWORD *)this + 3) = v83 + 8 * v84;
                if (v79)
                  operator delete(v79);
              }
              else
              {
                *(_QWORD *)v77 = 0;
                v78 = v77 + 8;
              }
              *((_QWORD *)this + 2) = v78;
              v87 = *((_QWORD *)a2 + 1);
              if (v87 > 0xFFFFFFFFFFFFFFF7 || v87 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_330;
              *(v78 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v87);
              v75 = *((_QWORD *)a2 + 2);
              v74 = *((_QWORD *)a2 + 1) + 8;
              *((_QWORD *)a2 + 1) = v74;
            }
            goto LABEL_331;
          }
          v215 = (char *)*((_QWORD *)this + 2);
          v214 = *((_QWORD *)this + 3);
          if ((unint64_t)v215 >= v214)
          {
            v250 = (char *)*((_QWORD *)this + 1);
            v251 = (v215 - v250) >> 3;
            v252 = v251 + 1;
            if ((unint64_t)(v251 + 1) >> 61)
              goto LABEL_569;
            v253 = v214 - (_QWORD)v250;
            if (v253 >> 2 > v252)
              v252 = v253 >> 2;
            if ((unint64_t)v253 >= 0x7FFFFFFFFFFFFFF8)
              v254 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v254 = v252;
            if (v254)
            {
              v254 = (unint64_t)sub_2429112FC(v254);
              v250 = (char *)*((_QWORD *)this + 1);
              v215 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v255 = 0;
            }
            v310 = (_QWORD *)(v254 + 8 * v251);
            *v310 = 0;
            v209 = v310 + 1;
            while (v215 != v250)
            {
              v311 = *((_QWORD *)v215 - 1);
              v215 -= 8;
              *--v310 = v311;
            }
            *((_QWORD *)this + 1) = v310;
            *((_QWORD *)this + 2) = v209;
            *((_QWORD *)this + 3) = v254 + 8 * v255;
            if (v250)
              operator delete(v250);
          }
          else
          {
            *(_QWORD *)v215 = 0;
            v209 = v215 + 8;
          }
          *((_QWORD *)this + 2) = v209;
          goto LABEL_554;
        case 0xAu:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v88 = *((_QWORD *)a2 + 1);
            v89 = *((_QWORD *)a2 + 2);
            while (v88 < v89 && !*((_BYTE *)a2 + 24))
            {
              v91 = (char *)*((_QWORD *)this + 29);
              v90 = *((_QWORD *)this + 30);
              if ((unint64_t)v91 >= v90)
              {
                v93 = (char *)*((_QWORD *)this + 28);
                v94 = (v91 - v93) >> 3;
                v95 = v94 + 1;
                if ((unint64_t)(v94 + 1) >> 61)
                  goto LABEL_569;
                v96 = v90 - (_QWORD)v93;
                if (v96 >> 2 > v95)
                  v95 = v96 >> 2;
                if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFF8)
                  v97 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v97 = v95;
                if (v97)
                {
                  v97 = (unint64_t)sub_2429112FC(v97);
                  v93 = (char *)*((_QWORD *)this + 28);
                  v91 = (char *)*((_QWORD *)this + 29);
                }
                else
                {
                  v98 = 0;
                }
                v99 = (_QWORD *)(v97 + 8 * v94);
                *v99 = 0;
                v92 = v99 + 1;
                while (v91 != v93)
                {
                  v100 = *((_QWORD *)v91 - 1);
                  v91 -= 8;
                  *--v99 = v100;
                }
                *((_QWORD *)this + 28) = v99;
                *((_QWORD *)this + 29) = v92;
                *((_QWORD *)this + 30) = v97 + 8 * v98;
                if (v93)
                  operator delete(v93);
              }
              else
              {
                *(_QWORD *)v91 = 0;
                v92 = v91 + 8;
              }
              *((_QWORD *)this + 29) = v92;
              v101 = *((_QWORD *)a2 + 1);
              if (v101 > 0xFFFFFFFFFFFFFFF7 || v101 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_330;
              *(v92 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v101);
              v89 = *((_QWORD *)a2 + 2);
              v88 = *((_QWORD *)a2 + 1) + 8;
              *((_QWORD *)a2 + 1) = v88;
            }
            goto LABEL_331;
          }
          v217 = (char *)*((_QWORD *)this + 29);
          v216 = *((_QWORD *)this + 30);
          if ((unint64_t)v217 >= v216)
          {
            v256 = (char *)*((_QWORD *)this + 28);
            v257 = (v217 - v256) >> 3;
            v258 = v257 + 1;
            if ((unint64_t)(v257 + 1) >> 61)
              goto LABEL_569;
            v259 = v216 - (_QWORD)v256;
            if (v259 >> 2 > v258)
              v258 = v259 >> 2;
            if ((unint64_t)v259 >= 0x7FFFFFFFFFFFFFF8)
              v260 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v260 = v258;
            if (v260)
            {
              v260 = (unint64_t)sub_2429112FC(v260);
              v256 = (char *)*((_QWORD *)this + 28);
              v217 = (char *)*((_QWORD *)this + 29);
            }
            else
            {
              v261 = 0;
            }
            v312 = (_QWORD *)(v260 + 8 * v257);
            *v312 = 0;
            v209 = v312 + 1;
            while (v217 != v256)
            {
              v313 = *((_QWORD *)v217 - 1);
              v217 -= 8;
              *--v312 = v313;
            }
            *((_QWORD *)this + 28) = v312;
            *((_QWORD *)this + 29) = v209;
            *((_QWORD *)this + 30) = v260 + 8 * v261;
            if (v256)
              operator delete(v256);
          }
          else
          {
            *(_QWORD *)v217 = 0;
            v209 = v217 + 8;
          }
          *((_QWORD *)this + 29) = v209;
          goto LABEL_554;
        case 0xBu:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v102 = *((_QWORD *)a2 + 1);
            v103 = *((_QWORD *)a2 + 2);
            while (v102 < v103 && !*((_BYTE *)a2 + 24))
            {
              v105 = (char *)*((_QWORD *)this + 20);
              v104 = *((_QWORD *)this + 21);
              if ((unint64_t)v105 >= v104)
              {
                v107 = (char *)*((_QWORD *)this + 19);
                v108 = (v105 - v107) >> 3;
                v109 = v108 + 1;
                if ((unint64_t)(v108 + 1) >> 61)
                  goto LABEL_569;
                v110 = v104 - (_QWORD)v107;
                if (v110 >> 2 > v109)
                  v109 = v110 >> 2;
                if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFF8)
                  v111 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v111 = v109;
                if (v111)
                {
                  v111 = (unint64_t)sub_2429112FC(v111);
                  v107 = (char *)*((_QWORD *)this + 19);
                  v105 = (char *)*((_QWORD *)this + 20);
                }
                else
                {
                  v112 = 0;
                }
                v113 = (_QWORD *)(v111 + 8 * v108);
                *v113 = 0;
                v106 = v113 + 1;
                while (v105 != v107)
                {
                  v114 = *((_QWORD *)v105 - 1);
                  v105 -= 8;
                  *--v113 = v114;
                }
                *((_QWORD *)this + 19) = v113;
                *((_QWORD *)this + 20) = v106;
                *((_QWORD *)this + 21) = v111 + 8 * v112;
                if (v107)
                  operator delete(v107);
              }
              else
              {
                *(_QWORD *)v105 = 0;
                v106 = v105 + 8;
              }
              *((_QWORD *)this + 20) = v106;
              v115 = *((_QWORD *)a2 + 1);
              if (v115 > 0xFFFFFFFFFFFFFFF7 || v115 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_330;
              *(v106 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v115);
              v103 = *((_QWORD *)a2 + 2);
              v102 = *((_QWORD *)a2 + 1) + 8;
              *((_QWORD *)a2 + 1) = v102;
            }
            goto LABEL_331;
          }
          v219 = (char *)*((_QWORD *)this + 20);
          v218 = *((_QWORD *)this + 21);
          if ((unint64_t)v219 >= v218)
          {
            v262 = (char *)*((_QWORD *)this + 19);
            v263 = (v219 - v262) >> 3;
            v264 = v263 + 1;
            if ((unint64_t)(v263 + 1) >> 61)
              goto LABEL_569;
            v265 = v218 - (_QWORD)v262;
            if (v265 >> 2 > v264)
              v264 = v265 >> 2;
            if ((unint64_t)v265 >= 0x7FFFFFFFFFFFFFF8)
              v266 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v266 = v264;
            if (v266)
            {
              v266 = (unint64_t)sub_2429112FC(v266);
              v262 = (char *)*((_QWORD *)this + 19);
              v219 = (char *)*((_QWORD *)this + 20);
            }
            else
            {
              v267 = 0;
            }
            v314 = (_QWORD *)(v266 + 8 * v263);
            *v314 = 0;
            v209 = v314 + 1;
            while (v219 != v262)
            {
              v315 = *((_QWORD *)v219 - 1);
              v219 -= 8;
              *--v314 = v315;
            }
            *((_QWORD *)this + 19) = v314;
            *((_QWORD *)this + 20) = v209;
            *((_QWORD *)this + 21) = v266 + 8 * v267;
            if (v262)
              operator delete(v262);
          }
          else
          {
            *(_QWORD *)v219 = 0;
            v209 = v219 + 8;
          }
          *((_QWORD *)this + 20) = v209;
          goto LABEL_554;
        case 0xCu:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v116 = *((_QWORD *)a2 + 1);
            v117 = *((_QWORD *)a2 + 2);
            while (v116 < v117 && !*((_BYTE *)a2 + 24))
            {
              v119 = (char *)*((_QWORD *)this + 17);
              v118 = *((_QWORD *)this + 18);
              if ((unint64_t)v119 >= v118)
              {
                v121 = (char *)*((_QWORD *)this + 16);
                v122 = (v119 - v121) >> 3;
                v123 = v122 + 1;
                if ((unint64_t)(v122 + 1) >> 61)
                  goto LABEL_569;
                v124 = v118 - (_QWORD)v121;
                if (v124 >> 2 > v123)
                  v123 = v124 >> 2;
                if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFF8)
                  v125 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v125 = v123;
                if (v125)
                {
                  v125 = (unint64_t)sub_2429112FC(v125);
                  v121 = (char *)*((_QWORD *)this + 16);
                  v119 = (char *)*((_QWORD *)this + 17);
                }
                else
                {
                  v126 = 0;
                }
                v127 = (_QWORD *)(v125 + 8 * v122);
                *v127 = 0;
                v120 = v127 + 1;
                while (v119 != v121)
                {
                  v128 = *((_QWORD *)v119 - 1);
                  v119 -= 8;
                  *--v127 = v128;
                }
                *((_QWORD *)this + 16) = v127;
                *((_QWORD *)this + 17) = v120;
                *((_QWORD *)this + 18) = v125 + 8 * v126;
                if (v121)
                  operator delete(v121);
              }
              else
              {
                *(_QWORD *)v119 = 0;
                v120 = v119 + 8;
              }
              *((_QWORD *)this + 17) = v120;
              v129 = *((_QWORD *)a2 + 1);
              if (v129 > 0xFFFFFFFFFFFFFFF7 || v129 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_330;
              *(v120 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v129);
              v117 = *((_QWORD *)a2 + 2);
              v116 = *((_QWORD *)a2 + 1) + 8;
              *((_QWORD *)a2 + 1) = v116;
            }
            goto LABEL_331;
          }
          v221 = (char *)*((_QWORD *)this + 17);
          v220 = *((_QWORD *)this + 18);
          if ((unint64_t)v221 >= v220)
          {
            v268 = (char *)*((_QWORD *)this + 16);
            v269 = (v221 - v268) >> 3;
            v270 = v269 + 1;
            if ((unint64_t)(v269 + 1) >> 61)
              goto LABEL_569;
            v271 = v220 - (_QWORD)v268;
            if (v271 >> 2 > v270)
              v270 = v271 >> 2;
            if ((unint64_t)v271 >= 0x7FFFFFFFFFFFFFF8)
              v272 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v272 = v270;
            if (v272)
            {
              v272 = (unint64_t)sub_2429112FC(v272);
              v268 = (char *)*((_QWORD *)this + 16);
              v221 = (char *)*((_QWORD *)this + 17);
            }
            else
            {
              v273 = 0;
            }
            v316 = (_QWORD *)(v272 + 8 * v269);
            *v316 = 0;
            v209 = v316 + 1;
            while (v221 != v268)
            {
              v317 = *((_QWORD *)v221 - 1);
              v221 -= 8;
              *--v316 = v317;
            }
            *((_QWORD *)this + 16) = v316;
            *((_QWORD *)this + 17) = v209;
            *((_QWORD *)this + 18) = v272 + 8 * v273;
            if (v268)
              operator delete(v268);
          }
          else
          {
            *(_QWORD *)v221 = 0;
            v209 = v221 + 8;
          }
          *((_QWORD *)this + 17) = v209;
          goto LABEL_554;
        case 0xDu:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v130 = *((_QWORD *)a2 + 1);
            v131 = *((_QWORD *)a2 + 2);
            while (v130 < v131 && !*((_BYTE *)a2 + 24))
            {
              v133 = (char *)*((_QWORD *)this + 32);
              v132 = *((_QWORD *)this + 33);
              if ((unint64_t)v133 >= v132)
              {
                v135 = (char *)*((_QWORD *)this + 31);
                v136 = (v133 - v135) >> 3;
                v137 = v136 + 1;
                if ((unint64_t)(v136 + 1) >> 61)
                  goto LABEL_569;
                v138 = v132 - (_QWORD)v135;
                if (v138 >> 2 > v137)
                  v137 = v138 >> 2;
                if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFF8)
                  v139 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v139 = v137;
                if (v139)
                {
                  v139 = (unint64_t)sub_2429112FC(v139);
                  v135 = (char *)*((_QWORD *)this + 31);
                  v133 = (char *)*((_QWORD *)this + 32);
                }
                else
                {
                  v140 = 0;
                }
                v141 = (_QWORD *)(v139 + 8 * v136);
                *v141 = 0;
                v134 = v141 + 1;
                while (v133 != v135)
                {
                  v142 = *((_QWORD *)v133 - 1);
                  v133 -= 8;
                  *--v141 = v142;
                }
                *((_QWORD *)this + 31) = v141;
                *((_QWORD *)this + 32) = v134;
                *((_QWORD *)this + 33) = v139 + 8 * v140;
                if (v135)
                  operator delete(v135);
              }
              else
              {
                *(_QWORD *)v133 = 0;
                v134 = v133 + 8;
              }
              *((_QWORD *)this + 32) = v134;
              v143 = *((_QWORD *)a2 + 1);
              if (v143 > 0xFFFFFFFFFFFFFFF7 || v143 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_330;
              *(v134 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v143);
              v131 = *((_QWORD *)a2 + 2);
              v130 = *((_QWORD *)a2 + 1) + 8;
              *((_QWORD *)a2 + 1) = v130;
            }
            goto LABEL_331;
          }
          v223 = (char *)*((_QWORD *)this + 32);
          v222 = *((_QWORD *)this + 33);
          if ((unint64_t)v223 >= v222)
          {
            v274 = (char *)*((_QWORD *)this + 31);
            v275 = (v223 - v274) >> 3;
            v276 = v275 + 1;
            if ((unint64_t)(v275 + 1) >> 61)
              goto LABEL_569;
            v277 = v222 - (_QWORD)v274;
            if (v277 >> 2 > v276)
              v276 = v277 >> 2;
            if ((unint64_t)v277 >= 0x7FFFFFFFFFFFFFF8)
              v278 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v278 = v276;
            if (v278)
            {
              v278 = (unint64_t)sub_2429112FC(v278);
              v274 = (char *)*((_QWORD *)this + 31);
              v223 = (char *)*((_QWORD *)this + 32);
            }
            else
            {
              v279 = 0;
            }
            v318 = (_QWORD *)(v278 + 8 * v275);
            *v318 = 0;
            v209 = v318 + 1;
            while (v223 != v274)
            {
              v319 = *((_QWORD *)v223 - 1);
              v223 -= 8;
              *--v318 = v319;
            }
            *((_QWORD *)this + 31) = v318;
            *((_QWORD *)this + 32) = v209;
            *((_QWORD *)this + 33) = v278 + 8 * v279;
            if (v274)
              operator delete(v274);
          }
          else
          {
            *(_QWORD *)v223 = 0;
            v209 = v223 + 8;
          }
          *((_QWORD *)this + 32) = v209;
          goto LABEL_554;
        case 0xEu:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v144 = *((_QWORD *)a2 + 1);
            v145 = *((_QWORD *)a2 + 2);
            while (v144 < v145 && !*((_BYTE *)a2 + 24))
            {
              v147 = (char *)*((_QWORD *)this + 5);
              v146 = *((_QWORD *)this + 6);
              if ((unint64_t)v147 >= v146)
              {
                v149 = (char *)*((_QWORD *)this + 4);
                v150 = (v147 - v149) >> 3;
                v151 = v150 + 1;
                if ((unint64_t)(v150 + 1) >> 61)
                  goto LABEL_569;
                v152 = v146 - (_QWORD)v149;
                if (v152 >> 2 > v151)
                  v151 = v152 >> 2;
                if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFF8)
                  v153 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v153 = v151;
                if (v153)
                {
                  v153 = (unint64_t)sub_2429112FC(v153);
                  v149 = (char *)*((_QWORD *)this + 4);
                  v147 = (char *)*((_QWORD *)this + 5);
                }
                else
                {
                  v154 = 0;
                }
                v155 = (_QWORD *)(v153 + 8 * v150);
                *v155 = 0;
                v148 = v155 + 1;
                while (v147 != v149)
                {
                  v156 = *((_QWORD *)v147 - 1);
                  v147 -= 8;
                  *--v155 = v156;
                }
                *((_QWORD *)this + 4) = v155;
                *((_QWORD *)this + 5) = v148;
                *((_QWORD *)this + 6) = v153 + 8 * v154;
                if (v149)
                  operator delete(v149);
              }
              else
              {
                *(_QWORD *)v147 = 0;
                v148 = v147 + 8;
              }
              *((_QWORD *)this + 5) = v148;
              v157 = *((_QWORD *)a2 + 1);
              if (v157 > 0xFFFFFFFFFFFFFFF7 || v157 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_330;
              *(v148 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v157);
              v145 = *((_QWORD *)a2 + 2);
              v144 = *((_QWORD *)a2 + 1) + 8;
              *((_QWORD *)a2 + 1) = v144;
            }
            goto LABEL_331;
          }
          v225 = (char *)*((_QWORD *)this + 5);
          v224 = *((_QWORD *)this + 6);
          if ((unint64_t)v225 >= v224)
          {
            v280 = (char *)*((_QWORD *)this + 4);
            v281 = (v225 - v280) >> 3;
            v282 = v281 + 1;
            if ((unint64_t)(v281 + 1) >> 61)
              goto LABEL_569;
            v283 = v224 - (_QWORD)v280;
            if (v283 >> 2 > v282)
              v282 = v283 >> 2;
            if ((unint64_t)v283 >= 0x7FFFFFFFFFFFFFF8)
              v284 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v284 = v282;
            if (v284)
            {
              v284 = (unint64_t)sub_2429112FC(v284);
              v280 = (char *)*((_QWORD *)this + 4);
              v225 = (char *)*((_QWORD *)this + 5);
            }
            else
            {
              v285 = 0;
            }
            v320 = (_QWORD *)(v284 + 8 * v281);
            *v320 = 0;
            v209 = v320 + 1;
            while (v225 != v280)
            {
              v321 = *((_QWORD *)v225 - 1);
              v225 -= 8;
              *--v320 = v321;
            }
            *((_QWORD *)this + 4) = v320;
            *((_QWORD *)this + 5) = v209;
            *((_QWORD *)this + 6) = v284 + 8 * v285;
            if (v280)
              operator delete(v280);
          }
          else
          {
            *(_QWORD *)v225 = 0;
            v209 = v225 + 8;
          }
          *((_QWORD *)this + 5) = v209;
          goto LABEL_554;
        case 0xFu:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v158 = *((_QWORD *)a2 + 1);
            v159 = *((_QWORD *)a2 + 2);
            while (v158 < v159 && !*((_BYTE *)a2 + 24))
            {
              v161 = (char *)*((_QWORD *)this + 26);
              v160 = *((_QWORD *)this + 27);
              if ((unint64_t)v161 >= v160)
              {
                v163 = (char *)*((_QWORD *)this + 25);
                v164 = (v161 - v163) >> 3;
                v165 = v164 + 1;
                if ((unint64_t)(v164 + 1) >> 61)
                  goto LABEL_569;
                v166 = v160 - (_QWORD)v163;
                if (v166 >> 2 > v165)
                  v165 = v166 >> 2;
                if ((unint64_t)v166 >= 0x7FFFFFFFFFFFFFF8)
                  v167 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v167 = v165;
                if (v167)
                {
                  v167 = (unint64_t)sub_2429112FC(v167);
                  v163 = (char *)*((_QWORD *)this + 25);
                  v161 = (char *)*((_QWORD *)this + 26);
                }
                else
                {
                  v168 = 0;
                }
                v169 = (_QWORD *)(v167 + 8 * v164);
                *v169 = 0;
                v162 = v169 + 1;
                while (v161 != v163)
                {
                  v170 = *((_QWORD *)v161 - 1);
                  v161 -= 8;
                  *--v169 = v170;
                }
                *((_QWORD *)this + 25) = v169;
                *((_QWORD *)this + 26) = v162;
                *((_QWORD *)this + 27) = v167 + 8 * v168;
                if (v163)
                  operator delete(v163);
              }
              else
              {
                *(_QWORD *)v161 = 0;
                v162 = v161 + 8;
              }
              *((_QWORD *)this + 26) = v162;
              v171 = *((_QWORD *)a2 + 1);
              if (v171 > 0xFFFFFFFFFFFFFFF7 || v171 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_330;
              *(v162 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v171);
              v159 = *((_QWORD *)a2 + 2);
              v158 = *((_QWORD *)a2 + 1) + 8;
              *((_QWORD *)a2 + 1) = v158;
            }
            goto LABEL_331;
          }
          v227 = (char *)*((_QWORD *)this + 26);
          v226 = *((_QWORD *)this + 27);
          if ((unint64_t)v227 >= v226)
          {
            v286 = (char *)*((_QWORD *)this + 25);
            v287 = (v227 - v286) >> 3;
            v288 = v287 + 1;
            if ((unint64_t)(v287 + 1) >> 61)
              goto LABEL_569;
            v289 = v226 - (_QWORD)v286;
            if (v289 >> 2 > v288)
              v288 = v289 >> 2;
            if ((unint64_t)v289 >= 0x7FFFFFFFFFFFFFF8)
              v290 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v290 = v288;
            if (v290)
            {
              v290 = (unint64_t)sub_2429112FC(v290);
              v286 = (char *)*((_QWORD *)this + 25);
              v227 = (char *)*((_QWORD *)this + 26);
            }
            else
            {
              v291 = 0;
            }
            v322 = (_QWORD *)(v290 + 8 * v287);
            *v322 = 0;
            v209 = v322 + 1;
            while (v227 != v286)
            {
              v323 = *((_QWORD *)v227 - 1);
              v227 -= 8;
              *--v322 = v323;
            }
            *((_QWORD *)this + 25) = v322;
            *((_QWORD *)this + 26) = v209;
            *((_QWORD *)this + 27) = v290 + 8 * v291;
            if (v286)
              operator delete(v286);
          }
          else
          {
            *(_QWORD *)v227 = 0;
            v209 = v227 + 8;
          }
          *((_QWORD *)this + 26) = v209;
          goto LABEL_554;
        case 0x10u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v172 = *((_QWORD *)a2 + 1);
            v173 = *((_QWORD *)a2 + 2);
            while (v172 < v173 && !*((_BYTE *)a2 + 24))
            {
              v175 = (char *)*((_QWORD *)this + 11);
              v174 = *((_QWORD *)this + 12);
              if ((unint64_t)v175 >= v174)
              {
                v177 = (char *)*((_QWORD *)this + 10);
                v178 = (v175 - v177) >> 3;
                v179 = v178 + 1;
                if ((unint64_t)(v178 + 1) >> 61)
                  goto LABEL_569;
                v180 = v174 - (_QWORD)v177;
                if (v180 >> 2 > v179)
                  v179 = v180 >> 2;
                if ((unint64_t)v180 >= 0x7FFFFFFFFFFFFFF8)
                  v181 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v181 = v179;
                if (v181)
                {
                  v181 = (unint64_t)sub_2429112FC(v181);
                  v177 = (char *)*((_QWORD *)this + 10);
                  v175 = (char *)*((_QWORD *)this + 11);
                }
                else
                {
                  v182 = 0;
                }
                v183 = (_QWORD *)(v181 + 8 * v178);
                *v183 = 0;
                v176 = v183 + 1;
                while (v175 != v177)
                {
                  v184 = *((_QWORD *)v175 - 1);
                  v175 -= 8;
                  *--v183 = v184;
                }
                *((_QWORD *)this + 10) = v183;
                *((_QWORD *)this + 11) = v176;
                *((_QWORD *)this + 12) = v181 + 8 * v182;
                if (v177)
                  operator delete(v177);
              }
              else
              {
                *(_QWORD *)v175 = 0;
                v176 = v175 + 8;
              }
              *((_QWORD *)this + 11) = v176;
              v185 = *((_QWORD *)a2 + 1);
              if (v185 > 0xFFFFFFFFFFFFFFF7 || v185 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_330;
              *(v176 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v185);
              v173 = *((_QWORD *)a2 + 2);
              v172 = *((_QWORD *)a2 + 1) + 8;
              *((_QWORD *)a2 + 1) = v172;
            }
            goto LABEL_331;
          }
          v229 = (char *)*((_QWORD *)this + 11);
          v228 = *((_QWORD *)this + 12);
          if ((unint64_t)v229 >= v228)
          {
            v292 = (char *)*((_QWORD *)this + 10);
            v293 = (v229 - v292) >> 3;
            v294 = v293 + 1;
            if ((unint64_t)(v293 + 1) >> 61)
              goto LABEL_569;
            v295 = v228 - (_QWORD)v292;
            if (v295 >> 2 > v294)
              v294 = v295 >> 2;
            if ((unint64_t)v295 >= 0x7FFFFFFFFFFFFFF8)
              v296 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v296 = v294;
            if (v296)
            {
              v296 = (unint64_t)sub_2429112FC(v296);
              v292 = (char *)*((_QWORD *)this + 10);
              v229 = (char *)*((_QWORD *)this + 11);
            }
            else
            {
              v297 = 0;
            }
            v324 = (_QWORD *)(v296 + 8 * v293);
            *v324 = 0;
            v209 = v324 + 1;
            while (v229 != v292)
            {
              v325 = *((_QWORD *)v229 - 1);
              v229 -= 8;
              *--v324 = v325;
            }
            *((_QWORD *)this + 10) = v324;
            *((_QWORD *)this + 11) = v209;
            *((_QWORD *)this + 12) = v296 + 8 * v297;
            if (v292)
              operator delete(v292);
          }
          else
          {
            *(_QWORD *)v229 = 0;
            v209 = v229 + 8;
          }
          *((_QWORD *)this + 11) = v209;
          goto LABEL_554;
        case 0x11u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v186 = *((_QWORD *)a2 + 1);
            v187 = *((_QWORD *)a2 + 2);
            while (v186 < v187 && !*((_BYTE *)a2 + 24))
            {
              v189 = (char *)*((_QWORD *)this + 8);
              v188 = *((_QWORD *)this + 9);
              if ((unint64_t)v189 >= v188)
              {
                v191 = (char *)*((_QWORD *)this + 7);
                v192 = (v189 - v191) >> 3;
                v193 = v192 + 1;
                if ((unint64_t)(v192 + 1) >> 61)
                  goto LABEL_569;
                v194 = v188 - (_QWORD)v191;
                if (v194 >> 2 > v193)
                  v193 = v194 >> 2;
                if ((unint64_t)v194 >= 0x7FFFFFFFFFFFFFF8)
                  v195 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v195 = v193;
                if (v195)
                {
                  v195 = (unint64_t)sub_2429112FC(v195);
                  v191 = (char *)*((_QWORD *)this + 7);
                  v189 = (char *)*((_QWORD *)this + 8);
                }
                else
                {
                  v196 = 0;
                }
                v197 = (_QWORD *)(v195 + 8 * v192);
                *v197 = 0;
                v190 = v197 + 1;
                while (v189 != v191)
                {
                  v198 = *((_QWORD *)v189 - 1);
                  v189 -= 8;
                  *--v197 = v198;
                }
                *((_QWORD *)this + 7) = v197;
                *((_QWORD *)this + 8) = v190;
                *((_QWORD *)this + 9) = v195 + 8 * v196;
                if (v191)
                  operator delete(v191);
              }
              else
              {
                *(_QWORD *)v189 = 0;
                v190 = v189 + 8;
              }
              *((_QWORD *)this + 8) = v190;
              v199 = *((_QWORD *)a2 + 1);
              if (v199 > 0xFFFFFFFFFFFFFFF7 || v199 + 8 > *((_QWORD *)a2 + 2))
              {
LABEL_330:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v190 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v199);
              v187 = *((_QWORD *)a2 + 2);
              v186 = *((_QWORD *)a2 + 1) + 8;
              *((_QWORD *)a2 + 1) = v186;
            }
LABEL_331:
            PB::Reader::recallMark();
          }
          else
          {
            v231 = (char *)*((_QWORD *)this + 8);
            v230 = *((_QWORD *)this + 9);
            if ((unint64_t)v231 >= v230)
            {
              v298 = (char *)*((_QWORD *)this + 7);
              v299 = (v231 - v298) >> 3;
              v300 = v299 + 1;
              if ((unint64_t)(v299 + 1) >> 61)
LABEL_569:
                sub_242729A44();
              v301 = v230 - (_QWORD)v298;
              if (v301 >> 2 > v300)
                v300 = v301 >> 2;
              if ((unint64_t)v301 >= 0x7FFFFFFFFFFFFFF8)
                v302 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v302 = v300;
              if (v302)
              {
                v302 = (unint64_t)sub_2429112FC(v302);
                v298 = (char *)*((_QWORD *)this + 7);
                v231 = (char *)*((_QWORD *)this + 8);
              }
              else
              {
                v303 = 0;
              }
              v326 = (_QWORD *)(v302 + 8 * v299);
              *v326 = 0;
              v209 = v326 + 1;
              while (v231 != v298)
              {
                v327 = *((_QWORD *)v231 - 1);
                v231 -= 8;
                *--v326 = v327;
              }
              *((_QWORD *)this + 7) = v326;
              *((_QWORD *)this + 8) = v209;
              *((_QWORD *)this + 9) = v302 + 8 * v303;
              if (v298)
                operator delete(v298);
            }
            else
            {
              *(_QWORD *)v231 = 0;
              v209 = v231 + 8;
            }
            *((_QWORD *)this + 8) = v209;
LABEL_554:
            v328 = *((_QWORD *)a2 + 1);
            if (v328 <= 0xFFFFFFFFFFFFFFF7 && v328 + 8 <= *((_QWORD *)a2 + 2))
            {
              *(v209 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v328);
LABEL_558:
              v202 = *((_QWORD *)a2 + 1) + 8;
LABEL_559:
              *((_QWORD *)a2 + 1) = v202;
            }
            else
            {
LABEL_556:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
          break;
        case 0x12u:
          *((_BYTE *)this + 340) |= 0x20u;
          v200 = *((_QWORD *)a2 + 1);
          if (v200 > 0xFFFFFFFFFFFFFFFBLL || v200 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_556;
          *((_DWORD *)this + 83) = *(_DWORD *)(*(_QWORD *)a2 + v200);
          goto LABEL_338;
        case 0x13u:
          *((_BYTE *)this + 340) |= 0x10u;
          v201 = *((_QWORD *)a2 + 1);
          if (v201 > 0xFFFFFFFFFFFFFFFBLL || v201 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_556;
          *((_DWORD *)this + 82) = *(_DWORD *)(*(_QWORD *)a2 + v201);
LABEL_338:
          v202 = *((_QWORD *)a2 + 1) + 4;
          goto LABEL_559;
        default:
          goto LABEL_19;
      }
      goto LABEL_560;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_21;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    if ((PB::Reader::skip(a2) & 1) == 0)
      return 0;
LABEL_560:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
}

uint64_t CMMsl::VIOEstimation::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;
  double *v11;
  double *v12;
  double v13;
  double *v14;
  double *v15;
  double v16;
  double *v17;
  double *v18;
  double v19;
  double *v20;
  double *v21;
  double v22;
  double *v23;
  double *v24;
  double v25;
  double *v26;
  double *v27;
  double v28;
  double *v29;
  double *v30;
  double v31;
  double *v32;
  double *v33;
  double v34;
  double *v35;
  double *v36;
  double v37;
  double *v38;
  double *v39;
  double v40;
  char v41;

  v3 = this;
  v4 = *(_BYTE *)(this + 340);
  if ((v4 & 0x40) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 340);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_49;
    }
  }
  else if ((*(_BYTE *)(this + 340) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 312));
  v4 = *(_BYTE *)(v3 + 340);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
LABEL_50:
    this = PB::Writer::write(a2, *(double *)(v3 + 320));
    if ((*(_BYTE *)(v3 + 340) & 2) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(double *)(v3 + 296));
  v4 = *(_BYTE *)(v3 + 340);
  if ((v4 & 8) != 0)
    goto LABEL_50;
LABEL_5:
  if ((v4 & 2) != 0)
LABEL_6:
    this = PB::Writer::write(a2, *(double *)(v3 + 304));
LABEL_7:
  v5 = *(double **)(v3 + 176);
  v6 = *(double **)(v3 + 184);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7);
  }
  v8 = *(double **)(v3 + 104);
  v9 = *(double **)(v3 + 112);
  while (v8 != v9)
  {
    v10 = *v8++;
    this = PB::Writer::write(a2, v10);
  }
  v11 = *(double **)(v3 + 272);
  v12 = *(double **)(v3 + 280);
  while (v11 != v12)
  {
    v13 = *v11++;
    this = PB::Writer::write(a2, v13);
  }
  v14 = *(double **)(v3 + 8);
  v15 = *(double **)(v3 + 16);
  while (v14 != v15)
  {
    v16 = *v14++;
    this = PB::Writer::write(a2, v16);
  }
  v17 = *(double **)(v3 + 224);
  v18 = *(double **)(v3 + 232);
  while (v17 != v18)
  {
    v19 = *v17++;
    this = PB::Writer::write(a2, v19);
  }
  v20 = *(double **)(v3 + 152);
  v21 = *(double **)(v3 + 160);
  while (v20 != v21)
  {
    v22 = *v20++;
    this = PB::Writer::write(a2, v22);
  }
  v23 = *(double **)(v3 + 128);
  v24 = *(double **)(v3 + 136);
  while (v23 != v24)
  {
    v25 = *v23++;
    this = PB::Writer::write(a2, v25);
  }
  v26 = *(double **)(v3 + 248);
  v27 = *(double **)(v3 + 256);
  while (v26 != v27)
  {
    v28 = *v26++;
    this = PB::Writer::write(a2, v28);
  }
  v29 = *(double **)(v3 + 32);
  v30 = *(double **)(v3 + 40);
  while (v29 != v30)
  {
    v31 = *v29++;
    this = PB::Writer::write(a2, v31);
  }
  v32 = *(double **)(v3 + 200);
  v33 = *(double **)(v3 + 208);
  while (v32 != v33)
  {
    v34 = *v32++;
    this = PB::Writer::write(a2, v34);
  }
  v35 = *(double **)(v3 + 80);
  v36 = *(double **)(v3 + 88);
  while (v35 != v36)
  {
    v37 = *v35++;
    this = PB::Writer::write(a2, v37);
  }
  v38 = *(double **)(v3 + 56);
  v39 = *(double **)(v3 + 64);
  while (v38 != v39)
  {
    v40 = *v38++;
    this = PB::Writer::write(a2, v40);
  }
  v41 = *(_BYTE *)(v3 + 340);
  if ((v41 & 0x20) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 332));
    v41 = *(_BYTE *)(v3 + 340);
  }
  if ((v41 & 0x10) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 328));
  return this;
}

uint64_t CMMsl::VIOEstimation::hash_value(CMMsl::VIOEstimation *this)
{
  double v2;
  double v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;

  if ((*((_BYTE *)this + 340) & 0x40) == 0)
  {
    v27 = 0;
    if ((*((_BYTE *)this + 340) & 4) != 0)
      goto LABEL_3;
LABEL_16:
    v26 = 0.0;
    if ((*((_BYTE *)this + 340) & 1) != 0)
      goto LABEL_6;
LABEL_17:
    v25 = 0.0;
    if ((*((_BYTE *)this + 340) & 8) != 0)
      goto LABEL_9;
    goto LABEL_18;
  }
  v27 = *((int *)this + 84);
  if ((*((_BYTE *)this + 340) & 4) == 0)
    goto LABEL_16;
LABEL_3:
  v2 = *((double *)this + 39);
  if (v2 == 0.0)
    v2 = 0.0;
  v26 = v2;
  if ((*((_BYTE *)this + 340) & 1) == 0)
    goto LABEL_17;
LABEL_6:
  v3 = *((double *)this + 37);
  if (v3 == 0.0)
    v3 = 0.0;
  v25 = v3;
  if ((*((_BYTE *)this + 340) & 8) != 0)
  {
LABEL_9:
    v4 = *((double *)this + 40);
    if (v4 == 0.0)
      v4 = 0.0;
    v24 = v4;
    if ((*((_BYTE *)this + 340) & 2) != 0)
      goto LABEL_12;
LABEL_19:
    v23 = 0.0;
    goto LABEL_20;
  }
LABEL_18:
  v24 = 0.0;
  if ((*((_BYTE *)this + 340) & 2) == 0)
    goto LABEL_19;
LABEL_12:
  v5 = *((double *)this + 38);
  if (v5 == 0.0)
    v5 = 0.0;
  v23 = v5;
LABEL_20:
  v22 = PBHashBytes();
  v21 = PBHashBytes();
  v6 = PBHashBytes();
  v7 = PBHashBytes();
  v8 = PBHashBytes();
  v9 = PBHashBytes();
  v10 = PBHashBytes();
  v11 = PBHashBytes();
  v12 = PBHashBytes();
  v13 = PBHashBytes();
  v14 = PBHashBytes();
  v15 = PBHashBytes();
  if ((*((_BYTE *)this + 340) & 0x20) != 0)
  {
    v19 = *((float *)this + 83);
    v16 = LODWORD(v19);
    if (v19 == 0.0)
      v16 = 0;
    if ((*((_BYTE *)this + 340) & 0x10) != 0)
      goto LABEL_22;
LABEL_28:
    v18 = 0;
    return *(_QWORD *)&v26 ^ v27 ^ *(_QWORD *)&v25 ^ *(_QWORD *)&v24 ^ *(_QWORD *)&v23 ^ v22 ^ v21 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v18;
  }
  v16 = 0;
  if ((*((_BYTE *)this + 340) & 0x10) == 0)
    goto LABEL_28;
LABEL_22:
  v17 = *((float *)this + 82);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  return *(_QWORD *)&v26 ^ v27 ^ *(_QWORD *)&v25 ^ *(_QWORD *)&v24 ^ *(_QWORD *)&v23 ^ v22 ^ v21 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v18;
}

void CMMsl::VIOPose::~VIOPose(CMMsl::VIOPose *this)
{
  void *v2;

  *(_QWORD *)this = &off_251361768;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::VIOPose::~VIOPose(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::VIOPose *CMMsl::VIOPose::VIOPose(CMMsl::VIOPose *this, const CMMsl::VIOPose *a2)
{
  _QWORD *v4;
  __int16 v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)this = &off_251361768;
  *((_QWORD *)this + 1) = 0;
  v4 = (_QWORD *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 28) = 0;
  v5 = *((_WORD *)a2 + 56);
  if ((v5 & 1) != 0)
  {
    v7 = *((_QWORD *)a2 + 4);
    v6 = 1;
    *((_WORD *)this + 56) = 1;
    *((_QWORD *)this + 4) = v7;
    v5 = *((_WORD *)a2 + 56);
    if ((v5 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((*((_WORD *)a2 + 56) & 0x200) != 0)
  {
LABEL_5:
    v8 = *((_QWORD *)a2 + 13);
    v6 |= 0x200u;
    *((_WORD *)this + 56) = v6;
    *((_QWORD *)this + 13) = v8;
    v5 = *((_WORD *)a2 + 56);
  }
LABEL_6:
  if ((v5 & 2) != 0)
  {
    v9 = *((_QWORD *)a2 + 5);
    *((_WORD *)this + 56) = v6 | 2;
    *((_QWORD *)this + 5) = v9;
  }
  if (this != a2)
    sub_2429111C4(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
  v10 = *((_WORD *)a2 + 56);
  if ((v10 & 8) != 0)
  {
    v13 = *((_QWORD *)a2 + 7);
    *((_WORD *)this + 56) |= 8u;
    *((_QWORD *)this + 7) = v13;
    v10 = *((_WORD *)a2 + 56);
    if ((v10 & 0x10) == 0)
    {
LABEL_12:
      if ((v10 & 0x20) == 0)
        goto LABEL_13;
      goto LABEL_21;
    }
  }
  else if ((v10 & 0x10) == 0)
  {
    goto LABEL_12;
  }
  v14 = *((_QWORD *)a2 + 8);
  *((_WORD *)this + 56) |= 0x10u;
  *((_QWORD *)this + 8) = v14;
  v10 = *((_WORD *)a2 + 56);
  if ((v10 & 0x20) == 0)
  {
LABEL_13:
    if ((v10 & 4) == 0)
      goto LABEL_14;
    goto LABEL_22;
  }
LABEL_21:
  v15 = *((_QWORD *)a2 + 9);
  *((_WORD *)this + 56) |= 0x20u;
  *((_QWORD *)this + 9) = v15;
  v10 = *((_WORD *)a2 + 56);
  if ((v10 & 4) == 0)
  {
LABEL_14:
    if ((v10 & 0x80) == 0)
      goto LABEL_15;
    goto LABEL_23;
  }
LABEL_22:
  v16 = *((_QWORD *)a2 + 6);
  *((_WORD *)this + 56) |= 4u;
  *((_QWORD *)this + 6) = v16;
  v10 = *((_WORD *)a2 + 56);
  if ((v10 & 0x80) == 0)
  {
LABEL_15:
    if ((v10 & 0x100) == 0)
      goto LABEL_16;
LABEL_24:
    v18 = *((_QWORD *)a2 + 12);
    *((_WORD *)this + 56) |= 0x100u;
    *((_QWORD *)this + 12) = v18;
    if ((*((_WORD *)a2 + 56) & 0x40) == 0)
      return this;
    goto LABEL_17;
  }
LABEL_23:
  v17 = *((_QWORD *)a2 + 11);
  *((_WORD *)this + 56) |= 0x80u;
  *((_QWORD *)this + 11) = v17;
  v10 = *((_WORD *)a2 + 56);
  if ((v10 & 0x100) != 0)
    goto LABEL_24;
LABEL_16:
  if ((v10 & 0x40) != 0)
  {
LABEL_17:
    v11 = *((_QWORD *)a2 + 10);
    *((_WORD *)this + 56) |= 0x40u;
    *((_QWORD *)this + 10) = v11;
  }
  return this;
}

CMMsl *CMMsl::VIOPose::operator=(CMMsl *a1, const CMMsl::VIOPose *a2)
{
  CMMsl::VIOPose *v3;
  _BYTE v5[120];

  if (a1 != a2)
  {
    CMMsl::VIOPose::VIOPose((CMMsl::VIOPose *)v5, a2);
    CMMsl::swap(a1, (CMMsl::VIOPose *)v5, v3);
    CMMsl::VIOPose::~VIOPose((CMMsl::VIOPose *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::VIOPose *a2, CMMsl::VIOPose *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double result;

  v3 = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v3;
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  v5 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v5;
  v6 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v6;
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v7;
  v8 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v8;
  v9 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v9;
  v10 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v10;
  v11 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v11;
  v12 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v12;
  v13 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v13;
  v14 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v14;
  v15 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v15;
  result = *((double *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((double *)a2 + 10) = result;
  return result;
}

uint64_t CMMsl::VIOPose::VIOPose(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_251361768;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  return a1;
}

CMMsl *CMMsl::VIOPose::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::VIOPose *v3;
  _BYTE v5[120];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::VIOPose::VIOPose((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::VIOPose *)v5, v3);
    CMMsl::VIOPose::~VIOPose((CMMsl::VIOPose *)v5);
  }
  return a1;
}

uint64_t CMMsl::VIOPose::formatText(CMMsl::VIOPose *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;
  double *v6;
  double *v7;
  double v8;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 56);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "currentTimestamp", *((double *)this + 4));
    v5 = *((_WORD *)this + 56);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "latestInertialTimestamp", *((double *)this + 5));
  v5 = *((_WORD *)this + 56);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "latestInertialTimestampMeta", *((double *)this + 6));
  v5 = *((_WORD *)this + 56);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "positionX", *((double *)this + 7));
  v5 = *((_WORD *)this + 56);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "positionY", *((double *)this + 8));
  v5 = *((_WORD *)this + 56);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "positionZ", *((double *)this + 9));
  v5 = *((_WORD *)this + 56);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "predictionComputeTimeMeta", *((double *)this + 10));
  v5 = *((_WORD *)this + 56);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "predictionTimeMeta", *((double *)this + 11));
  if ((*((_WORD *)this + 56) & 0x100) != 0)
LABEL_10:
    PB::TextFormatter::format(a2, "propagationTimeMeta", *((double *)this + 12));
LABEL_11:
  v6 = (double *)*((_QWORD *)this + 1);
  v7 = (double *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(a2, "rotationMatrixElement", v8);
  }
  if ((*((_WORD *)this + 56) & 0x200) != 0)
    PB::TextFormatter::format(a2, "targetTimestamp", *((double *)this + 13));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::VIOPose::readFrom(CMMsl::VIOPose *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      break;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 56) |= 1u;
        v19 = *((_QWORD *)a2 + 1);
        if (v19 > 0xFFFFFFFFFFFFFFF7 || v19 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_97;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v19);
        goto LABEL_99;
      case 2u:
        *((_WORD *)this + 56) |= 0x200u;
        v20 = *((_QWORD *)a2 + 1);
        if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_97;
        *((_QWORD *)this + 13) = *(_QWORD *)(*(_QWORD *)a2 + v20);
        goto LABEL_99;
      case 3u:
        *((_WORD *)this + 56) |= 2u;
        v21 = *((_QWORD *)a2 + 1);
        if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_97;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v21);
        goto LABEL_99;
      case 4u:
        if ((v11 & 7) == 2)
        {
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v22 = *((_QWORD *)a2 + 1);
          v23 = *((_QWORD *)a2 + 2);
          while (v22 < v23 && !*((_BYTE *)a2 + 24))
          {
            v25 = (char *)*((_QWORD *)this + 2);
            v24 = *((_QWORD *)this + 3);
            if ((unint64_t)v25 >= v24)
            {
              v27 = (char *)*((_QWORD *)this + 1);
              v28 = (v25 - v27) >> 3;
              v29 = v28 + 1;
              if ((unint64_t)(v28 + 1) >> 61)
                goto LABEL_107;
              v30 = v24 - (_QWORD)v27;
              if (v30 >> 2 > v29)
                v29 = v30 >> 2;
              if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
                v31 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v31 = v29;
              if (v31)
              {
                v31 = (unint64_t)sub_2429112FC(v31);
                v27 = (char *)*((_QWORD *)this + 1);
                v25 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v32 = 0;
              }
              v33 = (_QWORD *)(v31 + 8 * v28);
              *v33 = 0;
              v26 = v33 + 1;
              while (v25 != v27)
              {
                v34 = *((_QWORD *)v25 - 1);
                v25 -= 8;
                *--v33 = v34;
              }
              *((_QWORD *)this + 1) = v33;
              *((_QWORD *)this + 2) = v26;
              *((_QWORD *)this + 3) = v31 + 8 * v32;
              if (v27)
                operator delete(v27);
            }
            else
            {
              *(_QWORD *)v25 = 0;
              v26 = v25 + 8;
            }
            *((_QWORD *)this + 2) = v26;
            v35 = *((_QWORD *)a2 + 1);
            if (v35 > 0xFFFFFFFFFFFFFFF7 || v35 + 8 > *((_QWORD *)a2 + 2))
            {
              *((_BYTE *)a2 + 24) = 1;
              break;
            }
            *(v26 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v35);
            v23 = *((_QWORD *)a2 + 2);
            v22 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v22;
          }
          PB::Reader::recallMark();
        }
        else
        {
          v44 = (char *)*((_QWORD *)this + 2);
          v43 = *((_QWORD *)this + 3);
          if ((unint64_t)v44 >= v43)
          {
            v46 = (char *)*((_QWORD *)this + 1);
            v47 = (v44 - v46) >> 3;
            v48 = v47 + 1;
            if ((unint64_t)(v47 + 1) >> 61)
LABEL_107:
              sub_242729A44();
            v49 = v43 - (_QWORD)v46;
            if (v49 >> 2 > v48)
              v48 = v49 >> 2;
            if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
              v50 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v50 = v48;
            if (v50)
            {
              v50 = (unint64_t)sub_2429112FC(v50);
              v46 = (char *)*((_QWORD *)this + 1);
              v44 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v51 = 0;
            }
            v52 = (_QWORD *)(v50 + 8 * v47);
            *v52 = 0;
            v45 = v52 + 1;
            while (v44 != v46)
            {
              v53 = *((_QWORD *)v44 - 1);
              v44 -= 8;
              *--v52 = v53;
            }
            *((_QWORD *)this + 1) = v52;
            *((_QWORD *)this + 2) = v45;
            *((_QWORD *)this + 3) = v50 + 8 * v51;
            if (v46)
              operator delete(v46);
          }
          else
          {
            *(_QWORD *)v44 = 0;
            v45 = v44 + 8;
          }
          *((_QWORD *)this + 2) = v45;
          v54 = *((_QWORD *)a2 + 1);
          if (v54 <= 0xFFFFFFFFFFFFFFF7 && v54 + 8 <= *((_QWORD *)a2 + 2))
          {
            *(v45 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v54);
LABEL_99:
            *((_QWORD *)a2 + 1) += 8;
          }
          else
          {
LABEL_97:
            *((_BYTE *)a2 + 24) = 1;
          }
        }
        break;
      case 5u:
        *((_WORD *)this + 56) |= 8u;
        v36 = *((_QWORD *)a2 + 1);
        if (v36 > 0xFFFFFFFFFFFFFFF7 || v36 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_97;
        *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v36);
        goto LABEL_99;
      case 6u:
        *((_WORD *)this + 56) |= 0x10u;
        v37 = *((_QWORD *)a2 + 1);
        if (v37 > 0xFFFFFFFFFFFFFFF7 || v37 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_97;
        *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v37);
        goto LABEL_99;
      case 7u:
        *((_WORD *)this + 56) |= 0x20u;
        v38 = *((_QWORD *)a2 + 1);
        if (v38 > 0xFFFFFFFFFFFFFFF7 || v38 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_97;
        *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v38);
        goto LABEL_99;
      case 8u:
        *((_WORD *)this + 56) |= 4u;
        v39 = *((_QWORD *)a2 + 1);
        if (v39 > 0xFFFFFFFFFFFFFFF7 || v39 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_97;
        *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v39);
        goto LABEL_99;
      case 9u:
        *((_WORD *)this + 56) |= 0x80u;
        v40 = *((_QWORD *)a2 + 1);
        if (v40 > 0xFFFFFFFFFFFFFFF7 || v40 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_97;
        *((_QWORD *)this + 11) = *(_QWORD *)(*(_QWORD *)a2 + v40);
        goto LABEL_99;
      case 0xAu:
        *((_WORD *)this + 56) |= 0x100u;
        v41 = *((_QWORD *)a2 + 1);
        if (v41 > 0xFFFFFFFFFFFFFFF7 || v41 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_97;
        *((_QWORD *)this + 12) = *(_QWORD *)(*(_QWORD *)a2 + v41);
        goto LABEL_99;
      case 0xBu:
        *((_WORD *)this + 56) |= 0x40u;
        v42 = *((_QWORD *)a2 + 1);
        if (v42 > 0xFFFFFFFFFFFFFFF7 || v42 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_97;
        *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v42);
        goto LABEL_99;
      default:
        goto LABEL_19;
    }
LABEL_100:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v15 = 0;
  v16 = 0;
  v11 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v17 = v2 + 1;
    v18 = *(_BYTE *)(v8 + v2);
    *((_QWORD *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0)
      goto LABEL_21;
    v15 += 7;
    v2 = v17;
    v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  if ((PB::Reader::skip(a2) & 1) != 0)
    goto LABEL_100;
  return 0;
}

uint64_t CMMsl::VIOPose::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;
  double *v5;
  double *v6;
  double v7;
  __int16 v8;

  v3 = this;
  v4 = *(_WORD *)(this + 112);
  if ((v4 & 1) == 0)
  {
    if ((*(_WORD *)(this + 112) & 0x200) == 0)
      goto LABEL_3;
LABEL_17:
    this = PB::Writer::write(a2, *(double *)(v3 + 104));
    if ((*(_WORD *)(v3 + 112) & 2) == 0)
      goto LABEL_5;
    goto LABEL_4;
  }
  this = PB::Writer::write(a2, *(double *)(this + 32));
  v4 = *(_WORD *)(v3 + 112);
  if ((v4 & 0x200) != 0)
    goto LABEL_17;
LABEL_3:
  if ((v4 & 2) != 0)
LABEL_4:
    this = PB::Writer::write(a2, *(double *)(v3 + 40));
LABEL_5:
  v5 = *(double **)(v3 + 8);
  v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7);
  }
  v8 = *(_WORD *)(v3 + 112);
  if ((v8 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 56));
    v8 = *(_WORD *)(v3 + 112);
    if ((v8 & 0x10) == 0)
    {
LABEL_10:
      if ((v8 & 0x20) == 0)
        goto LABEL_11;
      goto LABEL_21;
    }
  }
  else if ((v8 & 0x10) == 0)
  {
    goto LABEL_10;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  v8 = *(_WORD *)(v3 + 112);
  if ((v8 & 0x20) == 0)
  {
LABEL_11:
    if ((v8 & 4) == 0)
      goto LABEL_12;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 72));
  v8 = *(_WORD *)(v3 + 112);
  if ((v8 & 4) == 0)
  {
LABEL_12:
    if ((v8 & 0x80) == 0)
      goto LABEL_13;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  v8 = *(_WORD *)(v3 + 112);
  if ((v8 & 0x80) == 0)
  {
LABEL_13:
    if ((v8 & 0x100) == 0)
      goto LABEL_14;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(double *)(v3 + 88));
  v8 = *(_WORD *)(v3 + 112);
  if ((v8 & 0x100) == 0)
  {
LABEL_14:
    if ((v8 & 0x40) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 80));
  }
LABEL_24:
  this = PB::Writer::write(a2, *(double *)(v3 + 96));
  if ((*(_WORD *)(v3 + 112) & 0x40) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 80));
  return this;
}

uint64_t CMMsl::VIOPose::hash_value(CMMsl::VIOPose *this)
{
  __int16 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;

  v2 = *((_WORD *)this + 56);
  if ((v2 & 1) != 0)
  {
    if (*((double *)this + 4) == 0.0)
      v3 = 0;
    else
      v3 = *((_QWORD *)this + 4);
    if ((*((_WORD *)this + 56) & 0x200) != 0)
    {
LABEL_3:
      if (*((double *)this + 13) == 0.0)
        v4 = 0;
      else
        v4 = *((_QWORD *)this + 13);
      if ((v2 & 2) != 0)
        goto LABEL_7;
LABEL_15:
      v5 = 0;
      goto LABEL_16;
    }
  }
  else
  {
    v3 = 0;
    if ((*((_WORD *)this + 56) & 0x200) != 0)
      goto LABEL_3;
  }
  v4 = 0;
  if ((v2 & 2) == 0)
    goto LABEL_15;
LABEL_7:
  if (*((double *)this + 5) == 0.0)
    v5 = 0;
  else
    v5 = *((_QWORD *)this + 5);
LABEL_16:
  v6 = PBHashBytes();
  v7 = *((_WORD *)this + 56);
  if ((v7 & 8) == 0)
  {
    v8 = 0.0;
    if ((v7 & 0x10) != 0)
      goto LABEL_18;
LABEL_39:
    v9 = 0.0;
    if ((v7 & 0x20) != 0)
      goto LABEL_21;
LABEL_40:
    v10 = 0.0;
    if ((v7 & 4) != 0)
      goto LABEL_24;
LABEL_41:
    v11 = 0.0;
    if ((v7 & 0x80) != 0)
      goto LABEL_27;
LABEL_42:
    v12 = 0.0;
    if ((*((_WORD *)this + 56) & 0x100) != 0)
      goto LABEL_30;
    goto LABEL_43;
  }
  v8 = *((double *)this + 7);
  if (v8 == 0.0)
    v8 = 0.0;
  if ((v7 & 0x10) == 0)
    goto LABEL_39;
LABEL_18:
  v9 = *((double *)this + 8);
  if (v9 == 0.0)
    v9 = 0.0;
  if ((v7 & 0x20) == 0)
    goto LABEL_40;
LABEL_21:
  v10 = *((double *)this + 9);
  if (v10 == 0.0)
    v10 = 0.0;
  if ((v7 & 4) == 0)
    goto LABEL_41;
LABEL_24:
  v11 = *((double *)this + 6);
  if (v11 == 0.0)
    v11 = 0.0;
  if ((v7 & 0x80) == 0)
    goto LABEL_42;
LABEL_27:
  v12 = *((double *)this + 11);
  if (v12 == 0.0)
    v12 = 0.0;
  if ((*((_WORD *)this + 56) & 0x100) != 0)
  {
LABEL_30:
    v13 = *((double *)this + 12);
    if (v13 == 0.0)
      v13 = 0.0;
    if ((v7 & 0x40) != 0)
      goto LABEL_33;
LABEL_44:
    v14 = 0.0;
    return v4 ^ v3 ^ v5 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ v6 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13 ^ *(_QWORD *)&v14;
  }
LABEL_43:
  v13 = 0.0;
  if ((v7 & 0x40) == 0)
    goto LABEL_44;
LABEL_33:
  v14 = *((double *)this + 10);
  if (v14 == 0.0)
    v14 = 0.0;
  return v4 ^ v3 ^ v5 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ v6 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13 ^ *(_QWORD *)&v14;
}

void CMMsl::VIOReplayPose::~VIOReplayPose(CMMsl::VIOReplayPose *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_2513617A0;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::VIOReplayPose::~VIOReplayPose(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::VIOReplayPose *CMMsl::VIOReplayPose::VIOReplayPose(CMMsl::VIOReplayPose *this, const CMMsl::VIOReplayPose *a2)
{
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_2513617A0;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (_QWORD *)((char *)this + 8);
  *((_DWORD *)this + 16) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if ((*((_BYTE *)a2 + 64) & 1) != 0)
  {
    v5 = *((_QWORD *)a2 + 7);
    *((_BYTE *)this + 64) = 1;
    *((_QWORD *)this + 7) = v5;
  }
  if (this != a2)
  {
    sub_2429111C4(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
    sub_2429111C4((_QWORD *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3);
  }
  return this;
}

uint64_t CMMsl::VIOReplayPose::operator=(uint64_t a1, const CMMsl::VIOReplayPose *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _BYTE v9[8];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;

  if ((const CMMsl::VIOReplayPose *)a1 != a2)
  {
    CMMsl::VIOReplayPose::VIOReplayPose((CMMsl::VIOReplayPose *)v9, a2);
    v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v14;
    v14 = v3;
    v4 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v13;
    v13 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v10 = v5;
    v11 = v6;
    v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v12 = v7;
    CMMsl::VIOReplayPose::~VIOReplayPose((CMMsl::VIOReplayPose *)v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::VIOReplayPose *a2, CMMsl::VIOReplayPose *a3)
{
  int v3;
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  result = *((double *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((double *)a2 + 7) = result;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  v8 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v8;
  v9 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v9;
  v10 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v10;
  return result;
}

uint64_t CMMsl::VIOReplayPose::VIOReplayPose(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = &off_2513617A0;
  v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  sub_242911330(v4, (__n128 *)(a2 + 32));
  return a1;
}

uint64_t CMMsl::VIOReplayPose::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _BYTE v9[8];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;

  if (a1 != a2)
  {
    CMMsl::VIOReplayPose::VIOReplayPose((uint64_t)v9, a2);
    v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v14;
    v14 = v3;
    v4 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v13;
    v13 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v10 = v5;
    v11 = v6;
    v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v12 = v7;
    CMMsl::VIOReplayPose::~VIOReplayPose((CMMsl::VIOReplayPose *)v9);
  }
  return a1;
}

uint64_t CMMsl::VIOReplayPose::formatText(CMMsl::VIOReplayPose *this, PB::TextFormatter *a2, const char *a3)
{
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (double *)*((_QWORD *)this + 1);
  v6 = (double *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "so3", v7);
  }
  if ((*((_BYTE *)this + 64) & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 7));
  v8 = (double *)*((_QWORD *)this + 4);
  v9 = (double *)*((_QWORD *)this + 5);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(a2, "translation", v10);
  }
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::VIOReplayPose::readFrom(CMMsl::VIOReplayPose *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  _QWORD *v52;
  unint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          v14 = v16++ > 8;
          if (v14)
            goto LABEL_27;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      v19 = v11 & 7;
      if (v19 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
        break;
      if ((_DWORD)v20 == 2)
      {
        if (v19 == 2)
        {
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v36 = *((_QWORD *)a2 + 1);
          v37 = *((_QWORD *)a2 + 2);
          while (v36 < v37 && !*((_BYTE *)a2 + 24))
          {
            v39 = (char *)*((_QWORD *)this + 2);
            v38 = *((_QWORD *)this + 3);
            if ((unint64_t)v39 >= v38)
            {
              v41 = (char *)*((_QWORD *)this + 1);
              v42 = (v39 - v41) >> 3;
              v43 = v42 + 1;
              if ((unint64_t)(v42 + 1) >> 61)
                goto LABEL_125;
              v44 = v38 - (_QWORD)v41;
              if (v44 >> 2 > v43)
                v43 = v44 >> 2;
              if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
                v45 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v45 = v43;
              if (v45)
              {
                v45 = (unint64_t)sub_2429112FC(v45);
                v41 = (char *)*((_QWORD *)this + 1);
                v39 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v46 = 0;
              }
              v47 = (_QWORD *)(v45 + 8 * v42);
              *v47 = 0;
              v40 = v47 + 1;
              while (v39 != v41)
              {
                v48 = *((_QWORD *)v39 - 1);
                v39 -= 8;
                *--v47 = v48;
              }
              *((_QWORD *)this + 1) = v47;
              *((_QWORD *)this + 2) = v40;
              *((_QWORD *)this + 3) = v45 + 8 * v46;
              if (v41)
                operator delete(v41);
            }
            else
            {
              *(_QWORD *)v39 = 0;
              v40 = v39 + 8;
            }
            *((_QWORD *)this + 2) = v40;
            v49 = *((_QWORD *)a2 + 1);
            if (v49 > 0xFFFFFFFFFFFFFFF7 || v49 + 8 > *((_QWORD *)a2 + 2))
              goto LABEL_81;
            *(v40 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v49);
            v37 = *((_QWORD *)a2 + 2);
            v36 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v36;
          }
          goto LABEL_82;
        }
        v54 = (char *)*((_QWORD *)this + 2);
        v53 = *((_QWORD *)this + 3);
        if ((unint64_t)v54 >= v53)
        {
          v61 = (char *)*((_QWORD *)this + 1);
          v62 = (v54 - v61) >> 3;
          v63 = v62 + 1;
          if ((unint64_t)(v62 + 1) >> 61)
LABEL_125:
            sub_242729A44();
          v64 = v53 - (_QWORD)v61;
          if (v64 >> 2 > v63)
            v63 = v64 >> 2;
          if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8)
            v65 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v65 = v63;
          if (v65)
          {
            v65 = (unint64_t)sub_2429112FC(v65);
            v61 = (char *)*((_QWORD *)this + 1);
            v54 = (char *)*((_QWORD *)this + 2);
          }
          else
          {
            v66 = 0;
          }
          v69 = (_QWORD *)(v65 + 8 * v62);
          *v69 = 0;
          v52 = v69 + 1;
          while (v54 != v61)
          {
            v70 = *((_QWORD *)v54 - 1);
            v54 -= 8;
            *--v69 = v70;
          }
          *((_QWORD *)this + 1) = v69;
          *((_QWORD *)this + 2) = v52;
          *((_QWORD *)this + 3) = v65 + 8 * v66;
          if (v61)
            operator delete(v61);
        }
        else
        {
          *(_QWORD *)v54 = 0;
          v52 = v54 + 8;
        }
        *((_QWORD *)this + 2) = v52;
LABEL_113:
        v71 = *((_QWORD *)a2 + 1);
        if (v71 > 0xFFFFFFFFFFFFFFF7 || v71 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_115;
        *(v52 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v71);
        goto LABEL_117;
      }
      if ((_DWORD)v20 != 1)
      {
LABEL_27:
        if ((PB::Reader::skip(a2) & 1) == 0)
          return 0;
        goto LABEL_118;
      }
      *((_BYTE *)this + 64) |= 1u;
      v21 = *((_QWORD *)a2 + 1);
      if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((_QWORD *)a2 + 2))
      {
LABEL_115:
        *((_BYTE *)a2 + 24) = 1;
        goto LABEL_118;
      }
      *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v21);
LABEL_117:
      *((_QWORD *)a2 + 1) += 8;
LABEL_118:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    if (v19 == 2)
    {
      if ((PB::Reader::placeMark() & 1) != 0)
        return 0;
      v22 = *((_QWORD *)a2 + 1);
      v23 = *((_QWORD *)a2 + 2);
      while (v22 < v23 && !*((_BYTE *)a2 + 24))
      {
        v25 = (char *)*((_QWORD *)this + 5);
        v24 = *((_QWORD *)this + 6);
        if ((unint64_t)v25 >= v24)
        {
          v27 = (char *)*((_QWORD *)this + 4);
          v28 = (v25 - v27) >> 3;
          v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 61)
            goto LABEL_125;
          v30 = v24 - (_QWORD)v27;
          if (v30 >> 2 > v29)
            v29 = v30 >> 2;
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
            v31 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v31 = v29;
          if (v31)
          {
            v31 = (unint64_t)sub_2429112FC(v31);
            v27 = (char *)*((_QWORD *)this + 4);
            v25 = (char *)*((_QWORD *)this + 5);
          }
          else
          {
            v32 = 0;
          }
          v33 = (_QWORD *)(v31 + 8 * v28);
          *v33 = 0;
          v26 = v33 + 1;
          while (v25 != v27)
          {
            v34 = *((_QWORD *)v25 - 1);
            v25 -= 8;
            *--v33 = v34;
          }
          *((_QWORD *)this + 4) = v33;
          *((_QWORD *)this + 5) = v26;
          *((_QWORD *)this + 6) = v31 + 8 * v32;
          if (v27)
            operator delete(v27);
        }
        else
        {
          *(_QWORD *)v25 = 0;
          v26 = v25 + 8;
        }
        *((_QWORD *)this + 5) = v26;
        v35 = *((_QWORD *)a2 + 1);
        if (v35 > 0xFFFFFFFFFFFFFFF7 || v35 + 8 > *((_QWORD *)a2 + 2))
        {
LABEL_81:
          *((_BYTE *)a2 + 24) = 1;
          break;
        }
        *(v26 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v35);
        v23 = *((_QWORD *)a2 + 2);
        v22 = *((_QWORD *)a2 + 1) + 8;
        *((_QWORD *)a2 + 1) = v22;
      }
LABEL_82:
      PB::Reader::recallMark();
      goto LABEL_118;
    }
    v51 = (char *)*((_QWORD *)this + 5);
    v50 = *((_QWORD *)this + 6);
    if ((unint64_t)v51 >= v50)
    {
      v55 = (char *)*((_QWORD *)this + 4);
      v56 = (v51 - v55) >> 3;
      v57 = v56 + 1;
      if ((unint64_t)(v56 + 1) >> 61)
        goto LABEL_125;
      v58 = v50 - (_QWORD)v55;
      if (v58 >> 2 > v57)
        v57 = v58 >> 2;
      if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8)
        v59 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v59 = v57;
      if (v59)
      {
        v59 = (unint64_t)sub_2429112FC(v59);
        v55 = (char *)*((_QWORD *)this + 4);
        v51 = (char *)*((_QWORD *)this + 5);
      }
      else
      {
        v60 = 0;
      }
      v67 = (_QWORD *)(v59 + 8 * v56);
      *v67 = 0;
      v52 = v67 + 1;
      while (v51 != v55)
      {
        v68 = *((_QWORD *)v51 - 1);
        v51 -= 8;
        *--v67 = v68;
      }
      *((_QWORD *)this + 4) = v67;
      *((_QWORD *)this + 5) = v52;
      *((_QWORD *)this + 6) = v59 + 8 * v60;
      if (v55)
        operator delete(v55);
    }
    else
    {
      *(_QWORD *)v51 = 0;
      v52 = v51 + 8;
    }
    *((_QWORD *)this + 5) = v52;
    goto LABEL_113;
  }
  return v4 == 0;
}

uint64_t CMMsl::VIOReplayPose::writeTo(uint64_t this, PB::Writer *a2)
{
  _QWORD *v3;
  double *v4;
  double *v5;
  double v6;
  double *v7;
  double *v8;
  double v9;

  v3 = (_QWORD *)this;
  if ((*(_BYTE *)(this + 64) & 1) != 0)
    this = PB::Writer::write(a2, *(double *)(this + 56));
  v4 = (double *)v3[1];
  v5 = (double *)v3[2];
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6);
  }
  v8 = (double *)v3[4];
  v7 = (double *)v3[5];
  while (v8 != v7)
  {
    v9 = *v8++;
    this = PB::Writer::write(a2, v9);
  }
  return this;
}

uint64_t CMMsl::VIOReplayPose::hash_value(CMMsl::VIOReplayPose *this)
{
  uint64_t v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 64) & 1) != 0)
  {
    if (*((double *)this + 7) == 0.0)
      v1 = 0;
    else
      v1 = *((_QWORD *)this + 7);
  }
  else
  {
    v1 = 0;
  }
  v2 = PBHashBytes() ^ v1;
  return v2 ^ PBHashBytes();
}

void CMMsl::VO2MaxInput::~VO2MaxInput(CMMsl::VO2MaxInput *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::VO2MaxInput::VO2MaxInput(CMMsl::VO2MaxInput *this, const CMMsl::VO2MaxInput *a2)
{
  __int16 v2;
  __int16 v3;
  double result;
  int v5;
  int v6;
  char v7;
  char v8;
  int v9;
  char v10;

  *(_QWORD *)this = &off_2513617D8;
  *((_DWORD *)this + 22) = 0;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x80) != 0)
  {
    result = *((double *)a2 + 8);
    v3 = 128;
    *((_WORD *)this + 44) = 128;
    *((double *)this + 8) = result;
    v2 = *((_WORD *)a2 + 44);
    if ((v2 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 6);
    v3 |= 0x20u;
    *((_WORD *)this + 44) = v3;
    *((double *)this + 6) = result;
    v2 = *((_WORD *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 0x200) != 0)
  {
    v5 = *((_DWORD *)a2 + 19);
    v3 |= 0x200u;
    *((_WORD *)this + 44) = v3;
    *((_DWORD *)this + 19) = v5;
    v2 = *((_WORD *)a2 + 44);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        goto LABEL_9;
      goto LABEL_21;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  result = *((double *)a2 + 3);
  v3 |= 4u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 3) = result;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 2) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  result = *((double *)a2 + 4);
  v3 |= 8u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 4) = result;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 2) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  result = *((double *)a2 + 2);
  v3 |= 2u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 2) = result;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 1) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  v6 = *((_DWORD *)a2 + 18);
  v3 |= 0x100u;
  *((_WORD *)this + 44) = v3;
  *((_DWORD *)this + 18) = v6;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 1) == 0)
  {
LABEL_12:
    if ((v2 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_25;
  }
LABEL_24:
  result = *((double *)a2 + 1);
  v3 |= 1u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 1) = result;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x40) == 0)
  {
LABEL_13:
    if ((v2 & 0x800) == 0)
      goto LABEL_14;
    goto LABEL_26;
  }
LABEL_25:
  result = *((double *)a2 + 7);
  v3 |= 0x40u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 7) = result;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x800) == 0)
  {
LABEL_14:
    if ((v2 & 0x1000) == 0)
      goto LABEL_15;
    goto LABEL_27;
  }
LABEL_26:
  v7 = *((_BYTE *)a2 + 84);
  v3 |= 0x800u;
  *((_WORD *)this + 44) = v3;
  *((_BYTE *)this + 84) = v7;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x1000) == 0)
  {
LABEL_15:
    if ((v2 & 0x400) == 0)
      goto LABEL_16;
    goto LABEL_28;
  }
LABEL_27:
  v8 = *((_BYTE *)a2 + 85);
  v3 |= 0x1000u;
  *((_WORD *)this + 44) = v3;
  *((_BYTE *)this + 85) = v8;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x400) == 0)
  {
LABEL_16:
    if ((v2 & 0x2000) == 0)
      goto LABEL_17;
    goto LABEL_29;
  }
LABEL_28:
  v9 = *((_DWORD *)a2 + 20);
  v3 |= 0x400u;
  *((_WORD *)this + 44) = v3;
  *((_DWORD *)this + 20) = v9;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x2000) == 0)
  {
LABEL_17:
    if ((v2 & 0x10) == 0)
      return result;
LABEL_30:
    result = *((double *)a2 + 5);
    *((_WORD *)this + 44) = v3 | 0x10;
    *((double *)this + 5) = result;
    return result;
  }
LABEL_29:
  v10 = *((_BYTE *)a2 + 86);
  v3 |= 0x2000u;
  *((_WORD *)this + 44) = v3;
  *((_BYTE *)this + 86) = v10;
  if ((*((_WORD *)a2 + 44) & 0x10) != 0)
    goto LABEL_30;
  return result;
}

CMMsl *CMMsl::VO2MaxInput::operator=(CMMsl *a1, const CMMsl::VO2MaxInput *a2)
{
  CMMsl::VO2MaxInput *v3;
  _BYTE v5[96];

  if (a1 != a2)
  {
    CMMsl::VO2MaxInput::VO2MaxInput((CMMsl::VO2MaxInput *)v5, a2);
    CMMsl::swap(a1, (CMMsl::VO2MaxInput *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::VO2MaxInput *a2, CMMsl::VO2MaxInput *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  double result;

  v3 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v3;
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v4;
  v5 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v5;
  v6 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  v8 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v8;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v9;
  v10 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v10;
  v11 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v11;
  v12 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v12;
  LOBYTE(v10) = *((_BYTE *)this + 84);
  *((_BYTE *)this + 84) = *((_BYTE *)a2 + 84);
  *((_BYTE *)a2 + 84) = v10;
  LOBYTE(v10) = *((_BYTE *)this + 85);
  *((_BYTE *)this + 85) = *((_BYTE *)a2 + 85);
  *((_BYTE *)a2 + 85) = v10;
  v13 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 86);
  *((_BYTE *)this + 86) = *((_BYTE *)a2 + 86);
  *((_BYTE *)a2 + 86) = v13;
  result = *((double *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((double *)a2 + 5) = result;
  return result;
}

double CMMsl::VO2MaxInput::VO2MaxInput(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_2513617D8;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
  *(_BYTE *)(a1 + 85) = *(_BYTE *)(a2 + 85);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 86) = *(_BYTE *)(a2 + 86);
  result = *(double *)(a2 + 40);
  *(double *)(a1 + 40) = result;
  return result;
}

CMMsl *CMMsl::VO2MaxInput::operator=(CMMsl *this, uint64_t a2, CMMsl::VO2MaxInput *a3)
{
  void (**v5)(CMMsl::VO2MaxInput *__hidden);
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  __int16 v12;
  char v13;
  int v14;

  if (this != (CMMsl *)a2)
  {
    v5 = &off_2513617D8;
    v14 = *(_DWORD *)(a2 + 88);
    *(_DWORD *)(a2 + 88) = 0;
    v7 = *(_OWORD *)(a2 + 24);
    v10 = *(_QWORD *)(a2 + 72);
    v6 = *(_OWORD *)(a2 + 8);
    v9 = *(_OWORD *)(a2 + 56);
    v12 = *(_WORD *)(a2 + 84);
    v11 = *(_DWORD *)(a2 + 80);
    v13 = *(_BYTE *)(a2 + 86);
    v8 = *(_OWORD *)(a2 + 40);
    CMMsl::swap(this, (CMMsl::VO2MaxInput *)&v5, a3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return this;
}

uint64_t CMMsl::VO2MaxInput::formatText(CMMsl::VO2MaxInput *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 44);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "cadence", *((double *)this + 1));
    v5 = *((_WORD *)this + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "grade", *((double *)this + 2));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 0x800) == 0)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "gradeType");
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x800) == 0)
  {
LABEL_5:
    if ((v5 & 0x1000) == 0)
      goto LABEL_6;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "hasGps");
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x1000) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0)
      goto LABEL_7;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "hasStrideCal");
  v5 = *((_WORD *)this + 44);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "heartRate", *((double *)this + 3));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "heartRateConfidence", *((double *)this + 4));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "hrTime", *((double *)this + 5));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x2000) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "isStroller");
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "metSource");
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_12:
    if ((v5 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "mets", *((double *)this + 6));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x40) == 0)
  {
LABEL_13:
    if ((v5 & 0x80) == 0)
      goto LABEL_14;
LABEL_29:
    PB::TextFormatter::format(a2, "startDate", *((double *)this + 8));
    if ((*((_WORD *)this + 44) & 0x400) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_15;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "pace", *((double *)this + 7));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x80) != 0)
    goto LABEL_29;
LABEL_14:
  if ((v5 & 0x400) != 0)
LABEL_15:
    PB::TextFormatter::format(a2, "workoutType");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::VO2MaxInput::readFrom(CMMsl::VO2MaxInput *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  int v32;
  BOOL v33;
  int v34;
  BOOL v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  char v41;
  int v42;
  BOOL v43;
  char v44;
  unsigned int v45;
  unint64_t v46;
  char v47;
  char v48;
  unsigned int v49;
  unint64_t v50;
  char v51;
  char v52;
  unsigned int v53;
  unint64_t v54;
  char v55;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_118;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 44) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_73;
        *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_102;
      case 2u:
        *((_WORD *)this + 44) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_73;
        *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_102;
      case 3u:
        *((_WORD *)this + 44) |= 0x200u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v44 = 0;
          v45 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_107;
            }
            v46 = v20++;
            v47 = *(_BYTE *)(v21 + v46);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v47 & 0x7F) << v44;
            if ((v47 & 0x80) == 0)
              break;
            v44 += 7;
            v14 = v45++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_106:
              v2 = v46 + 1;
              goto LABEL_107;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
          goto LABEL_106;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_107;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_107:
        *((_DWORD *)this + 19) = v24;
        break;
      case 4u:
        *((_WORD *)this + 44) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_73;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_102;
      case 5u:
        *((_WORD *)this + 44) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_73;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_102;
      case 6u:
        *((_WORD *)this + 44) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_73;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_102;
      case 7u:
        *((_WORD *)this + 44) |= 0x100u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v48 = 0;
          v49 = 0;
          v30 = 0;
          if (v2 <= v26)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_112;
            }
            v50 = v26++;
            v51 = *(_BYTE *)(v27 + v50);
            *((_QWORD *)a2 + 1) = v26;
            v30 |= (unint64_t)(v51 & 0x7F) << v48;
            if ((v51 & 0x80) == 0)
              break;
            v48 += 7;
            v14 = v49++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_111:
              v2 = v50 + 1;
              goto LABEL_112;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v30) = 0;
          goto LABEL_111;
        }
        v28 = 0;
        v29 = 0;
        v30 = 0;
        do
        {
          v2 = v26 + 1;
          *((_QWORD *)a2 + 1) = v26 + 1;
          v31 = *(_BYTE *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0)
            goto LABEL_112;
          v28 += 7;
          v26 = v2;
          v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_112:
        *((_DWORD *)this + 18) = v30;
        break;
      case 8u:
        *((_WORD *)this + 44) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_73;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_102;
      case 9u:
        *((_WORD *)this + 44) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_73;
        *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_102;
      case 0xAu:
        *((_WORD *)this + 44) |= 0x800u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v33 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v32 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v33 = v32 != 0;
        }
        *((_BYTE *)this + 84) = v33;
        break;
      case 0xBu:
        *((_WORD *)this + 44) |= 0x1000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v35 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v34 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v35 = v34 != 0;
        }
        *((_BYTE *)this + 85) = v35;
        break;
      case 0xCu:
        *((_WORD *)this + 44) |= 0x400u;
        v36 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v37 = *(_QWORD *)a2;
        if (v36 > 0xFFFFFFFFFFFFFFF5 || v36 + 10 > v2)
        {
          v52 = 0;
          v53 = 0;
          v40 = 0;
          if (v2 <= v36)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v36)
            {
              LODWORD(v40) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_117;
            }
            v54 = v36++;
            v55 = *(_BYTE *)(v37 + v54);
            *((_QWORD *)a2 + 1) = v36;
            v40 |= (unint64_t)(v55 & 0x7F) << v52;
            if ((v55 & 0x80) == 0)
              break;
            v52 += 7;
            v14 = v53++ > 8;
            if (v14)
            {
              LODWORD(v40) = 0;
LABEL_116:
              v2 = v54 + 1;
              goto LABEL_117;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v40) = 0;
          goto LABEL_116;
        }
        v38 = 0;
        v39 = 0;
        v40 = 0;
        do
        {
          v2 = v36 + 1;
          *((_QWORD *)a2 + 1) = v36 + 1;
          v41 = *(_BYTE *)(v37 + v36);
          v40 |= (unint64_t)(v41 & 0x7F) << v38;
          if ((v41 & 0x80) == 0)
            goto LABEL_117;
          v38 += 7;
          v36 = v2;
          v14 = v39++ > 8;
        }
        while (!v14);
        LODWORD(v40) = 0;
LABEL_117:
        *((_DWORD *)this + 20) = v40;
        break;
      case 0xDu:
        *((_WORD *)this + 44) |= 0x2000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v43 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v42 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v43 = v42 != 0;
        }
        *((_BYTE *)this + 86) = v43;
        break;
      case 0xEu:
        *((_WORD *)this + 44) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_102:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_73:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_118:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::VO2MaxInput::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 88);
  if ((v4 & 0x80) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 64));
    v4 = *(_WORD *)(v3 + 88);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x200) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x200) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 2) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 2) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x40) == 0)
  {
LABEL_10:
    if ((v4 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x800) == 0)
  {
LABEL_11:
    if ((v4 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x1000) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x400) == 0)
  {
LABEL_13:
    if ((v4 & 0x2000) == 0)
      goto LABEL_14;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x2000) == 0)
  {
LABEL_14:
    if ((v4 & 0x10) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 40));
  }
LABEL_28:
  this = PB::Writer::write(a2);
  if ((*(_WORD *)(v3 + 88) & 0x10) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 40));
  return this;
}

uint64_t CMMsl::VO2MaxInput::hash_value(CMMsl::VO2MaxInput *this)
{
  __int16 v1;
  double v2;
  double v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;

  v1 = *((_WORD *)this + 44);
  if ((v1 & 0x80) == 0)
  {
    v2 = 0.0;
    if ((v1 & 0x20) != 0)
      goto LABEL_3;
LABEL_33:
    v3 = 0.0;
    if ((*((_WORD *)this + 44) & 0x200) != 0)
      goto LABEL_6;
    goto LABEL_34;
  }
  v2 = *((double *)this + 8);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 0x20) == 0)
    goto LABEL_33;
LABEL_3:
  v3 = *((double *)this + 6);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((*((_WORD *)this + 44) & 0x200) != 0)
  {
LABEL_6:
    v4 = *((int *)this + 19);
    if ((v1 & 4) != 0)
      goto LABEL_7;
LABEL_35:
    v5 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_10;
LABEL_36:
    v6 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_13;
LABEL_37:
    v7 = 0.0;
    if ((*((_WORD *)this + 44) & 0x100) != 0)
      goto LABEL_16;
    goto LABEL_38;
  }
LABEL_34:
  v4 = 0;
  if ((v1 & 4) == 0)
    goto LABEL_35;
LABEL_7:
  v5 = *((double *)this + 3);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_36;
LABEL_10:
  v6 = *((double *)this + 4);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_37;
LABEL_13:
  v7 = *((double *)this + 2);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((*((_WORD *)this + 44) & 0x100) != 0)
  {
LABEL_16:
    v8 = *((int *)this + 18);
    if ((v1 & 1) != 0)
      goto LABEL_17;
LABEL_39:
    v9 = 0.0;
    if ((v1 & 0x40) != 0)
      goto LABEL_20;
LABEL_40:
    v10 = 0.0;
    if ((*((_WORD *)this + 44) & 0x800) != 0)
      goto LABEL_23;
    goto LABEL_41;
  }
LABEL_38:
  v8 = 0;
  if ((v1 & 1) == 0)
    goto LABEL_39;
LABEL_17:
  v9 = *((double *)this + 1);
  if (v9 == 0.0)
    v9 = 0.0;
  if ((v1 & 0x40) == 0)
    goto LABEL_40;
LABEL_20:
  v10 = *((double *)this + 7);
  if (v10 == 0.0)
    v10 = 0.0;
  if ((*((_WORD *)this + 44) & 0x800) != 0)
  {
LABEL_23:
    v11 = *((unsigned __int8 *)this + 84);
    if ((*((_WORD *)this + 44) & 0x1000) != 0)
      goto LABEL_24;
    goto LABEL_42;
  }
LABEL_41:
  v11 = 0;
  if ((*((_WORD *)this + 44) & 0x1000) != 0)
  {
LABEL_24:
    v12 = *((unsigned __int8 *)this + 85);
    if ((*((_WORD *)this + 44) & 0x400) != 0)
      goto LABEL_25;
    goto LABEL_43;
  }
LABEL_42:
  v12 = 0;
  if ((*((_WORD *)this + 44) & 0x400) != 0)
  {
LABEL_25:
    v13 = *((int *)this + 20);
    if ((*((_WORD *)this + 44) & 0x2000) != 0)
      goto LABEL_26;
    goto LABEL_44;
  }
LABEL_43:
  v13 = 0;
  if ((*((_WORD *)this + 44) & 0x2000) != 0)
  {
LABEL_26:
    v14 = *((unsigned __int8 *)this + 86);
    if ((v1 & 0x10) != 0)
      goto LABEL_27;
LABEL_45:
    v15 = 0.0;
    return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ *(_QWORD *)&v15;
  }
LABEL_44:
  v14 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_45;
LABEL_27:
  v15 = *((double *)this + 5);
  if (v15 == 0.0)
    v15 = 0.0;
  return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ *(_QWORD *)&v15;
}

void CMMsl::VO2MaxModelInput::~VO2MaxModelInput(CMMsl::VO2MaxModelInput *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::VO2MaxModelInput::VO2MaxModelInput(CMMsl::VO2MaxModelInput *this, const CMMsl::VO2MaxModelInput *a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)this = &off_251361810;
  *((_DWORD *)this + 10) = 0;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 4) != 0)
  {
    result = *((double *)a2 + 3);
    v3 = 4;
    *((_BYTE *)this + 40) = 4;
    *((double *)this + 3) = result;
    v2 = *((_BYTE *)a2 + 40);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 40) & 2) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 2);
    v3 |= 2u;
    *((_BYTE *)this + 40) = v3;
    *((double *)this + 2) = result;
    v2 = *((_BYTE *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 1) == 0)
  {
    if ((v2 & 8) == 0)
      return result;
LABEL_10:
    result = *((double *)a2 + 4);
    *((_BYTE *)this + 40) = v3 | 8;
    *((double *)this + 4) = result;
    return result;
  }
  result = *((double *)a2 + 1);
  v3 |= 1u;
  *((_BYTE *)this + 40) = v3;
  *((double *)this + 1) = result;
  if ((*((_BYTE *)a2 + 40) & 8) != 0)
    goto LABEL_10;
  return result;
}

uint64_t CMMsl::VO2MaxModelInput::operator=(uint64_t a1, const CMMsl::VO2MaxModelInput *a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  int v10;

  if ((const CMMsl::VO2MaxModelInput *)a1 != a2)
  {
    CMMsl::VO2MaxModelInput::VO2MaxModelInput((CMMsl::VO2MaxModelInput *)&v7, a2);
    v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v10;
    v10 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v4;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v9 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::VO2MaxModelInput *a2, CMMsl::VO2MaxModelInput *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  result = *((double *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((double *)a2 + 4) = result;
  return result;
}

double CMMsl::VO2MaxModelInput::VO2MaxModelInput(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_251361810;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_251361810;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  return result;
}

uint64_t CMMsl::VO2MaxModelInput::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  void (**v8)(CMMsl::VO2MaxModelInput *__hidden);
  __int128 v9;
  __int128 v10;
  int v11;

  if (a1 != a2)
  {
    v8 = &off_251361810;
    v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    v11 = *(_DWORD *)(a1 + 40);
    v4 = *(_OWORD *)(a2 + 8);
    v9 = *(_OWORD *)(a1 + 8);
    v5 = *(_OWORD *)(a1 + 24);
    v6 = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 40) = v3;
    *(_OWORD *)(a1 + 8) = v4;
    *(_OWORD *)(a1 + 24) = v6;
    v10 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::VO2MaxModelInput::formatText(CMMsl::VO2MaxModelInput *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "hr", *((double *)this + 1));
    v5 = *((_BYTE *)this + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "time", *((double *)this + 3));
      if ((*((_BYTE *)this + 40) & 8) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "hrTime", *((double *)this + 2));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "vo2", *((double *)this + 4));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::VO2MaxModelInput::readFrom(CMMsl::VO2MaxModelInput *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_37;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 40) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 2u:
        *((_BYTE *)this + 40) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 3u:
        *((_BYTE *)this + 40) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 4u:
        *((_BYTE *)this + 40) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_36:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_34:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_37:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::VO2MaxModelInput::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 40);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24));
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 32));
  }
LABEL_8:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  if ((*(_BYTE *)(v3 + 40) & 8) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 32));
  return this;
}

uint64_t CMMsl::VO2MaxModelInput::hash_value(CMMsl::VO2MaxModelInput *this)
{
  double v1;
  double v2;
  double v3;
  double v4;

  if ((*((_BYTE *)this + 40) & 4) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 40) & 2) != 0)
      goto LABEL_3;
LABEL_15:
    v2 = 0.0;
    if ((*((_BYTE *)this + 40) & 1) != 0)
      goto LABEL_6;
    goto LABEL_16;
  }
  v1 = *((double *)this + 3);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 40) & 2) == 0)
    goto LABEL_15;
LABEL_3:
  v2 = *((double *)this + 2);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 40) & 1) != 0)
  {
LABEL_6:
    v3 = *((double *)this + 1);
    if (v3 == 0.0)
      v3 = 0.0;
    if ((*((_BYTE *)this + 40) & 8) != 0)
      goto LABEL_9;
LABEL_17:
    v4 = 0.0;
    return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4;
  }
LABEL_16:
  v3 = 0.0;
  if ((*((_BYTE *)this + 40) & 8) == 0)
    goto LABEL_17;
LABEL_9:
  v4 = *((double *)this + 4);
  if (v4 == 0.0)
    v4 = 0.0;
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4;
}

void CMMsl::VO2MaxOutput::~VO2MaxOutput(CMMsl::VO2MaxOutput *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::VO2MaxOutput::VO2MaxOutput(uint64_t this, const CMMsl::VO2MaxOutput *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  *(_QWORD *)this = &off_251361848;
  *(_DWORD *)(this + 72) = 0;
  v2 = *((_WORD *)a2 + 36);
  if ((v2 & 0x20) != 0)
  {
    v4 = *((_QWORD *)a2 + 6);
    v3 = 32;
    *(_WORD *)(this + 72) = 32;
    *(_QWORD *)(this + 48) = v4;
    v2 = *((_WORD *)a2 + 36);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 2);
    v3 |= 2u;
    *(_WORD *)(this + 72) = v3;
    *(_QWORD *)(this + 16) = v5;
    v2 = *((_WORD *)a2 + 36);
  }
LABEL_6:
  if ((v2 & 0x100) != 0)
  {
    v6 = *((_DWORD *)a2 + 17);
    v3 |= 0x100u;
    *(_WORD *)(this + 72) = v3;
    *(_DWORD *)(this + 68) = v6;
    v2 = *((_WORD *)a2 + 36);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        goto LABEL_9;
      goto LABEL_16;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 72) = v3;
  *(_QWORD *)(this + 8) = v7;
  v2 = *((_WORD *)a2 + 36);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_17;
  }
LABEL_16:
  v8 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *(_WORD *)(this + 72) = v3;
  *(_QWORD *)(this + 32) = v8;
  v2 = *((_WORD *)a2 + 36);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_18;
  }
LABEL_17:
  v9 = *((_QWORD *)a2 + 5);
  v3 |= 0x10u;
  *(_WORD *)(this + 72) = v3;
  *(_QWORD *)(this + 40) = v9;
  v2 = *((_WORD *)a2 + 36);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0)
      goto LABEL_12;
    goto LABEL_19;
  }
LABEL_18:
  v10 = *((_QWORD *)a2 + 7);
  v3 |= 0x40u;
  *(_WORD *)(this + 72) = v3;
  *(_QWORD *)(this + 56) = v10;
  v2 = *((_WORD *)a2 + 36);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0)
      return this;
LABEL_20:
    v12 = *((_DWORD *)a2 + 16);
    *(_WORD *)(this + 72) = v3 | 0x80;
    *(_DWORD *)(this + 64) = v12;
    return this;
  }
LABEL_19:
  v11 = *((_QWORD *)a2 + 3);
  v3 |= 4u;
  *(_WORD *)(this + 72) = v3;
  *(_QWORD *)(this + 24) = v11;
  if ((*((_WORD *)a2 + 36) & 0x80) != 0)
    goto LABEL_20;
  return this;
}

uint64_t CMMsl::VO2MaxOutput::operator=(uint64_t a1, const CMMsl::VO2MaxOutput *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  if ((const CMMsl::VO2MaxOutput *)a1 != a2)
  {
    CMMsl::VO2MaxOutput::VO2MaxOutput((uint64_t)&v10, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v11;
    v11 = v3;
    v4 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v13;
    v13 = v4;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    v12 = v5;
    *(_QWORD *)&v5 = v15;
    v6 = *(_QWORD *)(a1 + 56);
    v7 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 56) = v14;
    *(_QWORD *)(a1 + 64) = v5;
    v8 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v16;
    v16 = v8;
    v14 = v6;
    v15 = v7;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::VO2MaxOutput *a2, CMMsl::VO2MaxOutput *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  int v12;

  v3 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v3;
  v4 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v6;
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v7;
  v8 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v8;
  v9 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v9;
  v10 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v10;
  result = *((double *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((double *)a2 + 3) = result;
  v12 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v12;
  return result;
}

double CMMsl::VO2MaxOutput::VO2MaxOutput(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_251361848;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_251361848;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  return result;
}

uint64_t CMMsl::VO2MaxOutput::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  void (**v11)(CMMsl::VO2MaxOutput *__hidden);
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  if (a1 != a2)
  {
    v11 = &off_251361848;
    v3 = *(_DWORD *)(a2 + 72);
    *(_DWORD *)(a2 + 72) = 0;
    v4 = *(_QWORD *)(a2 + 56);
    v17 = *(_DWORD *)(a1 + 72);
    v5 = *(_OWORD *)(a2 + 8);
    v12 = *(_OWORD *)(a1 + 8);
    v14 = *(_OWORD *)(a1 + 40);
    v6 = *(_OWORD *)(a1 + 24);
    v7 = *(_OWORD *)(a2 + 24);
    v8 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 8) = v5;
    *(_OWORD *)(a1 + 40) = v8;
    *(_QWORD *)&v5 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)&v8 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 56) = v4;
    *(_OWORD *)(a1 + 24) = v7;
    v13 = v6;
    v9 = *(_QWORD *)(a2 + 64);
    *(_DWORD *)(a1 + 72) = v3;
    *(_QWORD *)(a1 + 64) = v9;
    v15 = v5;
    v16 = v8;
    PB::Base::~Base((PB::Base *)&v11);
  }
  return a1;
}

uint64_t CMMsl::VO2MaxOutput::formatText(CMMsl::VO2MaxOutput *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 36);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "durationInSeconds", *((double *)this + 1));
    v5 = *((_WORD *)this + 36);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "estimatedVo2Max", *((double *)this + 2));
  v5 = *((_WORD *)this + 36);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "filteredVo2Max", *((double *)this + 3));
  v5 = *((_WORD *)this + 36);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "hrMax", *((double *)this + 4));
  v5 = *((_WORD *)this + 36);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "hrMin", *((double *)this + 5));
  v5 = *((_WORD *)this + 36);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "sessionType");
  v5 = *((_WORD *)this + 36);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x40) == 0)
      goto LABEL_9;
LABEL_19:
    PB::TextFormatter::format(a2, "variance", *((double *)this + 7));
    if ((*((_WORD *)this + 36) & 0x100) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_10;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 6));
  v5 = *((_WORD *)this + 36);
  if ((v5 & 0x40) != 0)
    goto LABEL_19;
LABEL_9:
  if ((v5 & 0x100) != 0)
LABEL_10:
    PB::TextFormatter::format(a2, "workoutType");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::VO2MaxOutput::readFrom(CMMsl::VO2MaxOutput *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  unint64_t v38;
  char v39;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_84;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 36) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_50;
        *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_73;
      case 2u:
        *((_WORD *)this + 36) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_50;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_73;
      case 3u:
        *((_WORD *)this + 36) |= 0x100u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v32 = 0;
          v33 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_78;
            }
            v34 = v20++;
            v35 = *(_BYTE *)(v21 + v34);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v35 & 0x7F) << v32;
            if ((v35 & 0x80) == 0)
              break;
            v32 += 7;
            v14 = v33++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_77:
              v2 = v34 + 1;
              goto LABEL_78;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
          goto LABEL_77;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_78;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_78:
        *((_DWORD *)this + 17) = v24;
        break;
      case 4u:
        *((_WORD *)this + 36) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_50;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_73;
      case 5u:
        *((_WORD *)this + 36) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_50;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_73;
      case 6u:
        *((_WORD *)this + 36) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_50;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_73;
      case 7u:
        *((_WORD *)this + 36) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_50;
        *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_73;
      case 8u:
        *((_WORD *)this + 36) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_73:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_50:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 9u:
        *((_WORD *)this + 36) |= 0x80u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v36 = 0;
          v37 = 0;
          v30 = 0;
          if (v2 <= v26)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_83;
            }
            v38 = v26++;
            v39 = *(_BYTE *)(v27 + v38);
            *((_QWORD *)a2 + 1) = v26;
            v30 |= (unint64_t)(v39 & 0x7F) << v36;
            if ((v39 & 0x80) == 0)
              break;
            v36 += 7;
            v14 = v37++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_82:
              v2 = v38 + 1;
              goto LABEL_83;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v30) = 0;
          goto LABEL_82;
        }
        v28 = 0;
        v29 = 0;
        v30 = 0;
        do
        {
          v2 = v26 + 1;
          *((_QWORD *)a2 + 1) = v26 + 1;
          v31 = *(_BYTE *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0)
            goto LABEL_83;
          v28 += 7;
          v26 = v2;
          v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_83:
        *((_DWORD *)this + 16) = v30;
        break;
      default:
        goto LABEL_19;
    }
LABEL_84:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::VO2MaxOutput::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 72);
  if ((v4 & 0x20) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 48));
    v4 = *(_WORD *)(v3 + 72);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 0x100) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x100) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  if ((*(_WORD *)(v3 + 72) & 0x80) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::VO2MaxOutput::hash_value(CMMsl::VO2MaxOutput *this)
{
  __int16 v1;
  double v2;
  double v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;

  v1 = *((_WORD *)this + 36);
  if ((v1 & 0x20) == 0)
  {
    v2 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_3;
LABEL_26:
    v3 = 0.0;
    if ((*((_WORD *)this + 36) & 0x100) != 0)
      goto LABEL_6;
    goto LABEL_27;
  }
  v2 = *((double *)this + 6);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_26;
LABEL_3:
  v3 = *((double *)this + 2);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((*((_WORD *)this + 36) & 0x100) != 0)
  {
LABEL_6:
    v4 = *((int *)this + 17);
    if ((v1 & 1) != 0)
      goto LABEL_7;
LABEL_28:
    v5 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_10;
LABEL_29:
    v6 = 0.0;
    if ((v1 & 0x10) != 0)
      goto LABEL_13;
LABEL_30:
    v7 = 0.0;
    if ((v1 & 0x40) != 0)
      goto LABEL_16;
LABEL_31:
    v8 = 0.0;
    if ((v1 & 4) != 0)
      goto LABEL_19;
    goto LABEL_32;
  }
LABEL_27:
  v4 = 0;
  if ((v1 & 1) == 0)
    goto LABEL_28;
LABEL_7:
  v5 = *((double *)this + 1);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_29;
LABEL_10:
  v6 = *((double *)this + 4);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((v1 & 0x10) == 0)
    goto LABEL_30;
LABEL_13:
  v7 = *((double *)this + 5);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((v1 & 0x40) == 0)
    goto LABEL_31;
LABEL_16:
  v8 = *((double *)this + 7);
  if (v8 == 0.0)
    v8 = 0.0;
  if ((v1 & 4) != 0)
  {
LABEL_19:
    v9 = *((double *)this + 3);
    if (v9 == 0.0)
      v9 = 0.0;
    if ((v1 & 0x80) != 0)
      goto LABEL_22;
LABEL_33:
    v10 = 0;
    return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ v10;
  }
LABEL_32:
  v9 = 0.0;
  if ((v1 & 0x80) == 0)
    goto LABEL_33;
LABEL_22:
  v10 = *((int *)this + 16);
  return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ v10;
}

void CMMsl::VehicularFlagsData::~VehicularFlagsData(CMMsl::VehicularFlagsData *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::VehicularFlagsData::VehicularFlagsData(uint64_t this, const CMMsl::VehicularFlagsData *a2)
{
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  int v9;

  *(_QWORD *)this = &off_251361880;
  *(_DWORD *)(this + 20) = 0;
  v2 = *((_BYTE *)a2 + 20);
  if ((v2 & 0x10) != 0)
  {
    v4 = *((_BYTE *)a2 + 15);
    v3 = 16;
    *(_BYTE *)(this + 20) = 16;
    *(_BYTE *)(this + 15) = v4;
    v2 = *((_BYTE *)a2 + 20);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 20) & 8) != 0)
  {
LABEL_5:
    v5 = *((_BYTE *)a2 + 14);
    v3 |= 8u;
    *(_BYTE *)(this + 20) = v3;
    *(_BYTE *)(this + 14) = v5;
    v2 = *((_BYTE *)a2 + 20);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *((_BYTE *)a2 + 12);
    v3 |= 2u;
    *(_BYTE *)(this + 20) = v3;
    *(_BYTE *)(this + 12) = v6;
    v2 = *((_BYTE *)a2 + 20);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0)
        goto LABEL_9;
      goto LABEL_13;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_BYTE *)a2 + 16);
  v3 |= 0x20u;
  *(_BYTE *)(this + 20) = v3;
  *(_BYTE *)(this + 16) = v7;
  v2 = *((_BYTE *)a2 + 20);
  if ((v2 & 4) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0)
      return this;
LABEL_14:
    v9 = *((_DWORD *)a2 + 2);
    *(_BYTE *)(this + 20) = v3 | 1;
    *(_DWORD *)(this + 8) = v9;
    return this;
  }
LABEL_13:
  v8 = *((_BYTE *)a2 + 13);
  v3 |= 4u;
  *(_BYTE *)(this + 20) = v3;
  *(_BYTE *)(this + 13) = v8;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
    goto LABEL_14;
  return this;
}

uint64_t CMMsl::VehicularFlagsData::operator=(uint64_t a1, const CMMsl::VehicularFlagsData *a2)
{
  int v3;
  int v4;
  int v5;
  int v6;
  _BYTE v8[8];
  int v9;
  int v10;
  char v11;
  int v12;

  if ((const CMMsl::VehicularFlagsData *)a1 != a2)
  {
    CMMsl::VehicularFlagsData::VehicularFlagsData((uint64_t)v8, a2);
    v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v12;
    v12 = v3;
    LOBYTE(v3) = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v11;
    v11 = v3;
    v5 = *(_DWORD *)(a1 + 8);
    v4 = *(_DWORD *)(a1 + 12);
    v6 = v10;
    *(_DWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 12) = v6;
    v9 = v5;
    v10 = v4;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::VehicularFlagsData *a2, CMMsl::VehicularFlagsData *a3)
{
  int v3;
  int v4;

  v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  LOBYTE(v3) = *(_BYTE *)(this + 15);
  *(_BYTE *)(this + 15) = *((_BYTE *)a2 + 15);
  *((_BYTE *)a2 + 15) = v3;
  LOBYTE(v3) = *(_BYTE *)(this + 14);
  *(_BYTE *)(this + 14) = *((_BYTE *)a2 + 14);
  *((_BYTE *)a2 + 14) = v3;
  LOBYTE(v3) = *(_BYTE *)(this + 12);
  *(_BYTE *)(this + 12) = *((_BYTE *)a2 + 12);
  *((_BYTE *)a2 + 12) = v3;
  LOBYTE(v3) = *(_BYTE *)(this + 16);
  *(_BYTE *)(this + 16) = *((_BYTE *)a2 + 16);
  *((_BYTE *)a2 + 16) = v3;
  LOBYTE(v3) = *(_BYTE *)(this + 13);
  *(_BYTE *)(this + 13) = *((_BYTE *)a2 + 13);
  *((_BYTE *)a2 + 13) = v3;
  v4 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  return this;
}

uint64_t CMMsl::VehicularFlagsData::VehicularFlagsData(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = &off_251361880;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_BYTE *)(result + 15) = *(_BYTE *)(a2 + 15);
  *(_BYTE *)(result + 14) = *(_BYTE *)(a2 + 14);
  *(_BYTE *)(result + 12) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(result + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(result + 13) = *(_BYTE *)(a2 + 13);
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

{
  *(_QWORD *)result = &off_251361880;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_BYTE *)(result + 15) = *(_BYTE *)(a2 + 15);
  *(_BYTE *)(result + 14) = *(_BYTE *)(a2 + 14);
  *(_BYTE *)(result + 12) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(result + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(result + 13) = *(_BYTE *)(a2 + 13);
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t CMMsl::VehicularFlagsData::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  int v5;
  int v6;
  int v7;
  int v8;
  void (**v10)(CMMsl::VehicularFlagsData *__hidden);
  int v11;
  int v12;
  char v13;
  int v14;

  if (a1 != a2)
  {
    v10 = &off_251361880;
    v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    v4 = *(_BYTE *)(a2 + 16);
    v14 = *(_DWORD *)(a1 + 20);
    v13 = *(_BYTE *)(a1 + 16);
    v5 = *(_DWORD *)(a2 + 8);
    v6 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a1 + 20) = v3;
    *(_BYTE *)(a1 + 16) = v4;
    v8 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 8) = v5;
    *(_DWORD *)(a1 + 12) = v6;
    v11 = v8;
    v12 = v7;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

uint64_t CMMsl::VehicularFlagsData::formatText(CMMsl::VehicularFlagsData *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "basebandHint");
    v5 = *((_BYTE *)this + 20);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*((_BYTE *)this + 20) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "btHint");
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "gpsHint");
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(a2, "vehicularData");
    if ((*((_BYTE *)this + 20) & 0x20) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "motionHint");
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 1) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 0x20) != 0)
LABEL_7:
    PB::TextFormatter::format(a2, "wifiHint");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::VehicularFlagsData::readFrom(CMMsl::VehicularFlagsData *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v20;
  BOOL v21;
  int v22;
  BOOL v23;
  int v24;
  BOOL v25;
  int v26;
  BOOL v27;
  int v28;
  BOOL v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  unint64_t v38;
  char v39;

  v3 = *((_QWORD *)a2 + 1);
  v2 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 >= v2 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v3 > v2)
        v2 = v3;
      do
      {
        if (v2 == v3)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v3 + 1;
        v18 = *(_BYTE *)(v8 + v3);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_24;
        v15 += 7;
        v3 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v3 = *((_QWORD *)a2 + 1);
      v2 = *((_QWORD *)a2 + 2);
      goto LABEL_21;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v3 + 1;
      *((_QWORD *)a2 + 1) = v3 + 1;
      v13 = *(_BYTE *)(v8 + v3);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v3 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_24:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 20) |= 0x10u;
        v3 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        if (v3 >= v2)
        {
          v21 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)a2 + v3++);
          *((_QWORD *)a2 + 1) = v3;
          v21 = v20 != 0;
        }
        *((_BYTE *)this + 15) = v21;
        break;
      case 2u:
        *((_BYTE *)this + 20) |= 8u;
        v3 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        if (v3 >= v2)
        {
          v23 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v22 = *(unsigned __int8 *)(*(_QWORD *)a2 + v3++);
          *((_QWORD *)a2 + 1) = v3;
          v23 = v22 != 0;
        }
        *((_BYTE *)this + 14) = v23;
        break;
      case 3u:
        *((_BYTE *)this + 20) |= 2u;
        v3 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        if (v3 >= v2)
        {
          v25 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v24 = *(unsigned __int8 *)(*(_QWORD *)a2 + v3++);
          *((_QWORD *)a2 + 1) = v3;
          v25 = v24 != 0;
        }
        *((_BYTE *)this + 12) = v25;
        break;
      case 4u:
        *((_BYTE *)this + 20) |= 0x20u;
        v3 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        if (v3 >= v2)
        {
          v27 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v26 = *(unsigned __int8 *)(*(_QWORD *)a2 + v3++);
          *((_QWORD *)a2 + 1) = v3;
          v27 = v26 != 0;
        }
        *((_BYTE *)this + 16) = v27;
        break;
      case 5u:
        *((_BYTE *)this + 20) |= 4u;
        v3 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        if (v3 >= v2)
        {
          v29 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v28 = *(unsigned __int8 *)(*(_QWORD *)a2 + v3++);
          *((_QWORD *)a2 + 1) = v3;
          v29 = v28 != 0;
        }
        *((_BYTE *)this + 13) = v29;
        break;
      case 6u:
        *((_BYTE *)this + 20) |= 1u;
        v30 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v31 = *(_QWORD *)a2;
        if (v30 > 0xFFFFFFFFFFFFFFF5 || v30 + 10 > v2)
        {
          v36 = 0;
          v37 = 0;
          v34 = 0;
          if (v2 <= v30)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v30)
            {
              LODWORD(v34) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_65;
            }
            v38 = v30++;
            v39 = *(_BYTE *)(v31 + v38);
            *((_QWORD *)a2 + 1) = v30;
            v34 |= (unint64_t)(v39 & 0x7F) << v36;
            if ((v39 & 0x80) == 0)
              break;
            v36 += 7;
            v14 = v37++ > 8;
            if (v14)
            {
              LODWORD(v34) = 0;
LABEL_64:
              v3 = v38 + 1;
              goto LABEL_65;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v34) = 0;
          goto LABEL_64;
        }
        v32 = 0;
        v33 = 0;
        v34 = 0;
        do
        {
          v3 = v30 + 1;
          *((_QWORD *)a2 + 1) = v30 + 1;
          v35 = *(_BYTE *)(v31 + v30);
          v34 |= (unint64_t)(v35 & 0x7F) << v32;
          if ((v35 & 0x80) == 0)
            goto LABEL_65;
          v32 += 7;
          v30 = v3;
          v14 = v33++ > 8;
        }
        while (!v14);
        LODWORD(v34) = 0;
LABEL_65:
        *((_DWORD *)this + 2) = v34;
        break;
      default:
        goto LABEL_19;
    }
LABEL_21:
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v3 >= v2 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::VehicularFlagsData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::write(a2);
    v4 = *(_BYTE *)(v3 + 20);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(this + 20) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2);
  v4 = *(_BYTE *)(v3 + 20);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  this = PB::Writer::write(a2);
  v4 = *(_BYTE *)(v3 + 20);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::write(a2);
  v4 = *(_BYTE *)(v3 + 20);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_12:
  this = PB::Writer::write(a2);
  if ((*(_BYTE *)(v3 + 20) & 1) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::VehicularFlagsData::hash_value(CMMsl::VehicularFlagsData *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*((_BYTE *)this + 20) & 0x10) != 0)
  {
    v1 = *((unsigned __int8 *)this + 15);
    if ((*((_BYTE *)this + 20) & 8) != 0)
    {
LABEL_3:
      v2 = *((unsigned __int8 *)this + 14);
      if ((*((_BYTE *)this + 20) & 2) != 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v1 = 0;
    if ((*((_BYTE *)this + 20) & 8) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 20) & 2) != 0)
  {
LABEL_4:
    v3 = *((unsigned __int8 *)this + 12);
    if ((*((_BYTE *)this + 20) & 0x20) != 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  v3 = 0;
  if ((*((_BYTE *)this + 20) & 0x20) != 0)
  {
LABEL_5:
    v4 = *((unsigned __int8 *)this + 16);
    if ((*((_BYTE *)this + 20) & 4) != 0)
      goto LABEL_6;
LABEL_12:
    v5 = 0;
    if ((*((_BYTE *)this + 20) & 1) != 0)
      goto LABEL_7;
LABEL_13:
    v6 = 0;
    return v2 ^ v1 ^ v3 ^ v4 ^ v5 ^ v6;
  }
LABEL_11:
  v4 = 0;
  if ((*((_BYTE *)this + 20) & 4) == 0)
    goto LABEL_12;
LABEL_6:
  v5 = *((unsigned __int8 *)this + 13);
  if ((*((_BYTE *)this + 20) & 1) == 0)
    goto LABEL_13;
LABEL_7:
  v6 = *((unsigned int *)this + 2);
  return v2 ^ v1 ^ v3 ^ v4 ^ v5 ^ v6;
}

void CMMsl::VelocityEstimatorFusionState::~VelocityEstimatorFusionState(CMMsl::VelocityEstimatorFusionState *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::VelocityEstimatorFusionState::VelocityEstimatorFusionState(CMMsl::VelocityEstimatorFusionState *this, const CMMsl::VelocityEstimatorFusionState *a2)
{
  __int16 v2;
  __int16 v3;
  double result;
  int v5;
  int v6;
  int v7;

  *(_QWORD *)this = &off_2513618B8;
  *((_DWORD *)this + 15) = 0;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 1) != 0)
  {
    result = *((double *)a2 + 1);
    v3 = 1;
    *((_WORD *)this + 30) = 1;
    *((double *)this + 1) = result;
    v2 = *((_WORD *)a2 + 30);
    if ((v2 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_WORD *)a2 + 30) & 0x100) != 0)
  {
LABEL_5:
    LODWORD(result) = *((_DWORD *)a2 + 12);
    v3 |= 0x100u;
    *((_WORD *)this + 30) = v3;
    *((_DWORD *)this + 12) = LODWORD(result);
    v2 = *((_WORD *)a2 + 30);
  }
LABEL_6:
  if ((v2 & 0x200) != 0)
  {
    LODWORD(result) = *((_DWORD *)a2 + 13);
    v3 |= 0x200u;
    *((_WORD *)this + 30) = v3;
    *((_DWORD *)this + 13) = LODWORD(result);
    v2 = *((_WORD *)a2 + 30);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_18;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(result) = *((_DWORD *)a2 + 14);
  v3 |= 0x400u;
  *((_WORD *)this + 30) = v3;
  *((_DWORD *)this + 14) = LODWORD(result);
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  LODWORD(result) = *((_DWORD *)a2 + 9);
  v3 |= 0x20u;
  *((_WORD *)this + 30) = v3;
  *((_DWORD *)this + 9) = LODWORD(result);
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  LODWORD(result) = *((_DWORD *)a2 + 10);
  v3 |= 0x40u;
  *((_WORD *)this + 30) = v3;
  *((_DWORD *)this + 10) = LODWORD(result);
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0)
      goto LABEL_12;
    goto LABEL_21;
  }
LABEL_20:
  LODWORD(result) = *((_DWORD *)a2 + 11);
  v3 |= 0x80u;
  *((_WORD *)this + 30) = v3;
  *((_DWORD *)this + 11) = LODWORD(result);
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  v5 = *((_DWORD *)a2 + 6);
  v3 |= 4u;
  *((_WORD *)this + 30) = v3;
  *((_DWORD *)this + 6) = v5;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_23;
  }
LABEL_22:
  v6 = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *((_WORD *)this + 30) = v3;
  *((_DWORD *)this + 7) = v6;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x10) == 0)
  {
LABEL_14:
    if ((v2 & 2) == 0)
      return result;
LABEL_24:
    result = *((double *)a2 + 2);
    *((_WORD *)this + 30) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
LABEL_23:
  v7 = *((_DWORD *)a2 + 8);
  v3 |= 0x10u;
  *((_WORD *)this + 30) = v3;
  *((_DWORD *)this + 8) = v7;
  if ((*((_WORD *)a2 + 30) & 2) != 0)
    goto LABEL_24;
  return result;
}

CMMsl *CMMsl::VelocityEstimatorFusionState::operator=(CMMsl *a1, const CMMsl::VelocityEstimatorFusionState *a2)
{
  CMMsl::VelocityEstimatorFusionState *v3;
  _BYTE v5[64];

  if (a1 != a2)
  {
    CMMsl::VelocityEstimatorFusionState::VelocityEstimatorFusionState((CMMsl::VelocityEstimatorFusionState *)v5, a2);
    CMMsl::swap(a1, (CMMsl::VelocityEstimatorFusionState *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::VelocityEstimatorFusionState *a2, CMMsl::VelocityEstimatorFusionState *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  double result;

  v3 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  v5 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v5;
  v6 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v6;
  v7 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v7;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::VelocityEstimatorFusionState::VelocityEstimatorFusionState(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_2513618B8;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

CMMsl *CMMsl::VelocityEstimatorFusionState::operator=(CMMsl *this, uint64_t a2, CMMsl::VelocityEstimatorFusionState *a3)
{
  void (**v5)(CMMsl::VelocityEstimatorFusionState *__hidden);
  __int128 v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  uint64_t v10;
  int v11;

  if (this != (CMMsl *)a2)
  {
    v5 = &off_2513618B8;
    v11 = *(_DWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 60) = 0;
    v10 = *(_QWORD *)(a2 + 52);
    v9 = *(_OWORD *)(a2 + 36);
    v7 = *(_QWORD *)(a2 + 24);
    v8 = *(_DWORD *)(a2 + 32);
    v6 = *(_OWORD *)(a2 + 8);
    CMMsl::swap(this, (CMMsl::VelocityEstimatorFusionState *)&v5, a3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return this;
}

uint64_t CMMsl::VelocityEstimatorFusionState::formatText(CMMsl::VelocityEstimatorFusionState *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 30);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "sourceX");
    v5 = *((_WORD *)this + 30);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "sourceY");
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "sourceZ");
  v5 = *((_WORD *)this + 30);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 2) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 2) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 2));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "velocityUncX", *((float *)this + 9));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "velocityUncY", *((float *)this + 10));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "velocityUncZ", *((float *)this + 11));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
LABEL_23:
    PB::TextFormatter::format(a2, "velocityY", *((float *)this + 13));
    if ((*((_WORD *)this + 30) & 0x400) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "velocityX", *((float *)this + 12));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x200) != 0)
    goto LABEL_23;
LABEL_11:
  if ((v5 & 0x400) != 0)
LABEL_12:
    PB::TextFormatter::format(a2, "velocityZ", *((float *)this + 14));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::VelocityEstimatorFusionState::readFrom(CMMsl::VelocityEstimatorFusionState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  unint64_t v40;
  char v41;
  char v42;
  unsigned int v43;
  unint64_t v44;
  char v45;
  char v46;
  unsigned int v47;
  unint64_t v48;
  char v49;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_108;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 30) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_68;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_91;
      case 2u:
        *((_WORD *)this + 30) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_68;
        *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_44;
      case 3u:
        *((_WORD *)this + 30) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_68;
        *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_44;
      case 4u:
        *((_WORD *)this + 30) |= 0x400u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_68;
        *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_44;
      case 5u:
        *((_WORD *)this + 30) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_68;
        *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_44;
      case 6u:
        *((_WORD *)this + 30) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_68;
        *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_44;
      case 7u:
        *((_WORD *)this + 30) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_68;
        *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_44:
        v2 = *((_QWORD *)a2 + 1) + 4;
        goto LABEL_92;
      case 8u:
        *((_WORD *)this + 30) |= 4u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v38 = 0;
          v39 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_97;
            }
            v40 = v20++;
            v41 = *(_BYTE *)(v21 + v40);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0)
              break;
            v38 += 7;
            v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_96:
              v2 = v40 + 1;
              goto LABEL_97;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
          goto LABEL_96;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_97;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_97:
        *((_DWORD *)this + 6) = v24;
        break;
      case 9u:
        *((_WORD *)this + 30) |= 8u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v42 = 0;
          v43 = 0;
          v30 = 0;
          if (v2 <= v26)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_102;
            }
            v44 = v26++;
            v45 = *(_BYTE *)(v27 + v44);
            *((_QWORD *)a2 + 1) = v26;
            v30 |= (unint64_t)(v45 & 0x7F) << v42;
            if ((v45 & 0x80) == 0)
              break;
            v42 += 7;
            v14 = v43++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_101:
              v2 = v44 + 1;
              goto LABEL_102;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v30) = 0;
          goto LABEL_101;
        }
        v28 = 0;
        v29 = 0;
        v30 = 0;
        do
        {
          v2 = v26 + 1;
          *((_QWORD *)a2 + 1) = v26 + 1;
          v31 = *(_BYTE *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0)
            goto LABEL_102;
          v28 += 7;
          v26 = v2;
          v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_102:
        *((_DWORD *)this + 7) = v30;
        break;
      case 0xAu:
        *((_WORD *)this + 30) |= 0x10u;
        v32 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v33 = *(_QWORD *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
        {
          v46 = 0;
          v47 = 0;
          v36 = 0;
          if (v2 <= v32)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v32)
            {
              LODWORD(v36) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_107;
            }
            v48 = v32++;
            v49 = *(_BYTE *)(v33 + v48);
            *((_QWORD *)a2 + 1) = v32;
            v36 |= (unint64_t)(v49 & 0x7F) << v46;
            if ((v49 & 0x80) == 0)
              break;
            v46 += 7;
            v14 = v47++ > 8;
            if (v14)
            {
              LODWORD(v36) = 0;
LABEL_106:
              v2 = v48 + 1;
              goto LABEL_107;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v36) = 0;
          goto LABEL_106;
        }
        v34 = 0;
        v35 = 0;
        v36 = 0;
        do
        {
          v2 = v32 + 1;
          *((_QWORD *)a2 + 1) = v32 + 1;
          v37 = *(_BYTE *)(v33 + v32);
          v36 |= (unint64_t)(v37 & 0x7F) << v34;
          if ((v37 & 0x80) == 0)
            goto LABEL_107;
          v34 += 7;
          v32 = v2;
          v14 = v35++ > 8;
        }
        while (!v14);
        LODWORD(v36) = 0;
LABEL_107:
        *((_DWORD *)this + 8) = v36;
        break;
      case 0xBu:
        *((_WORD *)this + 30) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_91:
          v2 = *((_QWORD *)a2 + 1) + 8;
LABEL_92:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_68:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_108:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::VelocityEstimatorFusionState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 60);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_WORD *)(v3 + 60);
    if ((v4 & 0x100) == 0)
    {
LABEL_3:
      if ((v4 & 0x200) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((*(_WORD *)(this + 60) & 0x100) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x200) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 16));
  }
LABEL_22:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_WORD *)(v3 + 60) & 2) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 16));
  return this;
}

uint64_t CMMsl::VelocityEstimatorFusionState::hash_value(CMMsl::VelocityEstimatorFusionState *this)
{
  __int16 v1;
  double v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;

  v1 = *((_WORD *)this + 30);
  if ((v1 & 1) == 0)
  {
    v2 = 0.0;
    if ((*((_WORD *)this + 30) & 0x100) != 0)
      goto LABEL_3;
LABEL_30:
    v4 = 0;
    if ((*((_WORD *)this + 30) & 0x200) != 0)
      goto LABEL_6;
LABEL_31:
    v6 = 0;
    if ((*((_WORD *)this + 30) & 0x400) != 0)
      goto LABEL_9;
LABEL_32:
    v8 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_12;
LABEL_33:
    v10 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_15;
LABEL_34:
    v12 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_18;
LABEL_35:
    v14 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_21;
    goto LABEL_36;
  }
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_WORD *)this + 30) & 0x100) == 0)
    goto LABEL_30;
LABEL_3:
  v3 = *((float *)this + 12);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  if ((*((_WORD *)this + 30) & 0x200) == 0)
    goto LABEL_31;
LABEL_6:
  v5 = *((float *)this + 13);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((*((_WORD *)this + 30) & 0x400) == 0)
    goto LABEL_32;
LABEL_9:
  v7 = *((float *)this + 14);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_33;
LABEL_12:
  v9 = *((float *)this + 9);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_34;
LABEL_15:
  v11 = *((float *)this + 10);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_35;
LABEL_18:
  v13 = *((float *)this + 11);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_21:
    v15 = *((unsigned int *)this + 6);
    if ((v1 & 8) != 0)
      goto LABEL_22;
    goto LABEL_37;
  }
LABEL_36:
  v15 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_22:
    v16 = *((unsigned int *)this + 7);
    if ((v1 & 0x10) != 0)
      goto LABEL_23;
    goto LABEL_38;
  }
LABEL_37:
  v16 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_23:
    v17 = *((unsigned int *)this + 8);
    if ((v1 & 2) != 0)
      goto LABEL_24;
LABEL_39:
    v18 = 0.0;
    return v4 ^ *(_QWORD *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v15 ^ v16 ^ v17 ^ *(_QWORD *)&v18;
  }
LABEL_38:
  v17 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_39;
LABEL_24:
  v18 = *((double *)this + 2);
  if (v18 == 0.0)
    v18 = 0.0;
  return v4 ^ *(_QWORD *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v15 ^ v16 ^ v17 ^ *(_QWORD *)&v18;
}

void CMMsl::VibrationEvent::~VibrationEvent(CMMsl::VibrationEvent *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::VibrationEvent::VibrationEvent(uint64_t this, const CMMsl::VibrationEvent *a2)
{
  char v2;

  *(_QWORD *)this = &off_2513618F0;
  *(_DWORD *)(this + 12) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v2 = *((_BYTE *)a2 + 8);
    *(_BYTE *)(this + 12) = 1;
    *(_BYTE *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::VibrationEvent::operator=(uint64_t a1, uint64_t a2)
{
  char v3;
  int v4;
  char v5;
  void (**v7)(CMMsl::VibrationEvent *__hidden);
  char v8;
  int v9;

  if (a1 != a2)
  {
    v7 = &off_2513618F0;
    v3 = *(_BYTE *)(a2 + 8);
    v4 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = *(_BYTE *)(a2 + 12) & 1;
    v9 = v4;
    v5 = *(_BYTE *)(a1 + 8);
    *(_BYTE *)(a1 + 8) = v3;
    v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

{
  int v3;
  char v4;
  int v5;
  void (**v7)(CMMsl::VibrationEvent *__hidden);
  char v8;
  int v9;

  if (a1 != a2)
  {
    v7 = &off_2513618F0;
    v3 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    v4 = *(_BYTE *)(a2 + 8);
    v5 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v3;
    v9 = v5;
    LOBYTE(v3) = *(_BYTE *)(a1 + 8);
    *(_BYTE *)(a1 + 8) = v4;
    v8 = v3;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::VibrationEvent *a2, CMMsl::VibrationEvent *a3)
{
  int v3;

  v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  LOBYTE(v3) = *(_BYTE *)(this + 8);
  *(_BYTE *)(this + 8) = *((_BYTE *)a2 + 8);
  *((_BYTE *)a2 + 8) = v3;
  return this;
}

uint64_t CMMsl::VibrationEvent::formatText(CMMsl::VibrationEvent *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 12) & 1) != 0)
    PB::TextFormatter::format(a2, "isDeviceVibrating");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::VibrationEvent::readFrom(CMMsl::VibrationEvent *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v19;
  BOOL v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_24;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 12) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        if (v2 >= v3)
        {
          v20 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v19 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v20 = v19 != 0;
        }
        *((_BYTE *)this + 8) = v20;
      }
      else
      {
LABEL_24:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_24;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::VibrationEvent::writeTo(uint64_t this, PB::Writer *a2)
{
  if ((*(_BYTE *)(this + 12) & 1) != 0)
    return PB::Writer::write(a2);
  return this;
}

uint64_t CMMsl::VibrationEvent::hash_value(CMMsl::VibrationEvent *this)
{
  if ((*((_BYTE *)this + 12) & 1) != 0)
    return *((unsigned __int8 *)this + 8);
  else
    return 0;
}

void CMMsl::ViewObstructedMachineLearningDecision::~ViewObstructedMachineLearningDecision(CMMsl::ViewObstructedMachineLearningDecision *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::ViewObstructedMachineLearningDecision::ViewObstructedMachineLearningDecision(uint64_t this, const CMMsl::ViewObstructedMachineLearningDecision *a2)
{
  char v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)this = &off_251361928;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_BYTE *)a2 + 16);
    *(_BYTE *)(this + 20) = v2;
    *(_BYTE *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::ViewObstructedMachineLearningDecision::operator=(uint64_t a1, uint64_t a2)
{
  char v2;
  void (**v4)(CMMsl::ViewObstructedMachineLearningDecision *__hidden);
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  char v9;
  _QWORD v11[2];
  char v12;
  int v13;

  if (a1 != a2)
  {
    v4 = &off_251361928;
    v11[0] = &off_251361928;
    v13 = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 1) != 0)
    {
      v4 = *(void (***)(CMMsl::ViewObstructedMachineLearningDecision *__hidden))(a2 + 8);
      LOBYTE(v13) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        v2 = *(_BYTE *)(a2 + 16);
        LOBYTE(v13) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_6;
    }
    v7 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v13;
    v13 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v11[1] = v8;
    v9 = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v2;
    v12 = v9;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

{
  int v3;
  uint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  _QWORD v9[2];
  char v10;
  int v11;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_BYTE *)(a2 + 16);
    v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    v11 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v9[0] = &off_251361928;
    v9[1] = v7;
    LOBYTE(v3) = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v5;
    v10 = v3;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::ViewObstructedMachineLearningDecision *a2, CMMsl::ViewObstructedMachineLearningDecision *a3)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LOBYTE(v4) = *(_BYTE *)(this + 16);
  *(_BYTE *)(this + 16) = *((_BYTE *)a2 + 16);
  *((_BYTE *)a2 + 16) = v4;
  return this;
}

uint64_t CMMsl::ViewObstructedMachineLearningDecision::formatText(CMMsl::ViewObstructedMachineLearningDecision *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "shouldSuppress");
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ViewObstructedMachineLearningDecision::readFrom(CMMsl::ViewObstructedMachineLearningDecision *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  char v24;
  uint64_t result;
  int v26;
  BOOL v27;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_30;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        if (v2 >= v3)
        {
          v27 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v26 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v27 = v26 != 0;
        }
        *((_BYTE *)this + 16) = v27;
      }
      else if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v19 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        v20 = *(_QWORD *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v3)
        {
          v28 = 0;
          v29 = 0;
          v23 = 0;
          if (v3 <= v19)
            v2 = *((_QWORD *)a2 + 1);
          else
            v2 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v2 == v19)
            {
              v23 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_48;
            }
            v30 = v19++;
            v31 = *(_BYTE *)(v20 + v30);
            *((_QWORD *)a2 + 1) = v19;
            v23 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v14 = v29++ > 8;
            if (v14)
            {
              v23 = 0;
              goto LABEL_47;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v23 = 0;
LABEL_47:
          v2 = v30 + 1;
        }
        else
        {
          v21 = 0;
          v22 = 0;
          v23 = 0;
          while (1)
          {
            v2 = v19 + 1;
            *((_QWORD *)a2 + 1) = v19 + 1;
            v24 = *(_BYTE *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0)
              break;
            v21 += 7;
            v19 = v2;
            v14 = v22++ > 8;
            if (v14)
            {
              v23 = 0;
              break;
            }
          }
        }
LABEL_48:
        *((_QWORD *)this + 1) = v23;
      }
      else
      {
LABEL_30:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_30;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::ViewObstructedMachineLearningDecision::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(a2);
  return this;
}

uint64_t CMMsl::ViewObstructedMachineLearningDecision::hash_value(CMMsl::ViewObstructedMachineLearningDecision *this)
{
  uint64_t v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((_QWORD *)this + 1);
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_5:
    v2 = 0;
    return v2 ^ v1;
  }
  v1 = 0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_5;
LABEL_3:
  v2 = *((unsigned __int8 *)this + 16);
  return v2 ^ v1;
}

void CMMsl::ViewObstructedMachineLearningFeatures::~ViewObstructedMachineLearningFeatures(CMMsl::ViewObstructedMachineLearningFeatures *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::ViewObstructedMachineLearningFeatures::ViewObstructedMachineLearningFeatures(CMMsl::ViewObstructedMachineLearningFeatures *this, const CMMsl::ViewObstructedMachineLearningFeatures *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  float result;

  *(_QWORD *)this = &off_251361960;
  *((_DWORD *)this + 29) = 0;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_DWORD *)this + 29) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_DWORD *)a2 + 29);
    if ((v2 & 0x4000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x4000) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 17);
    v3 |= 0x4000u;
    *((_DWORD *)this + 29) = v3;
    *((float *)this + 17) = result;
    v2 = *((_DWORD *)a2 + 29);
  }
LABEL_6:
  if ((v2 & 0x8000) != 0)
  {
    result = *((float *)a2 + 18);
    v3 |= 0x8000u;
    *((_DWORD *)this + 29) = v3;
    *((float *)this + 18) = result;
    v2 = *((_DWORD *)a2 + 29);
    if ((v2 & 0x10000) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0)
        goto LABEL_9;
      goto LABEL_33;
    }
  }
  else if ((v2 & 0x10000) == 0)
  {
    goto LABEL_8;
  }
  result = *((float *)a2 + 19);
  v3 |= 0x10000u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 19) = result;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_34;
  }
LABEL_33:
  result = *((float *)a2 + 12);
  v3 |= 0x200u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 12) = result;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x400) == 0)
  {
LABEL_10:
    if ((v2 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_35;
  }
LABEL_34:
  result = *((float *)a2 + 13);
  v3 |= 0x400u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 13) = result;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x800) == 0)
  {
LABEL_11:
    if ((v2 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_36;
  }
LABEL_35:
  result = *((float *)a2 + 14);
  v3 |= 0x800u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 14) = result;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x1000) == 0)
  {
LABEL_12:
    if ((v2 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_37;
  }
LABEL_36:
  result = *((float *)a2 + 15);
  v3 |= 0x1000u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 15) = result;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x2000) == 0)
  {
LABEL_13:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_14;
    goto LABEL_38;
  }
LABEL_37:
  result = *((float *)a2 + 16);
  v3 |= 0x2000u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 16) = result;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_14:
    if ((v2 & 0x40000) == 0)
      goto LABEL_15;
    goto LABEL_39;
  }
LABEL_38:
  result = *((float *)a2 + 28);
  v3 |= 0x2000000u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 28) = result;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x40000) == 0)
  {
LABEL_15:
    if ((v2 & 0x20000) == 0)
      goto LABEL_16;
    goto LABEL_40;
  }
LABEL_39:
  result = *((float *)a2 + 21);
  v3 |= 0x40000u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 21) = result;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x20000) == 0)
  {
LABEL_16:
    if ((v2 & 4) == 0)
      goto LABEL_17;
    goto LABEL_41;
  }
LABEL_40:
  result = *((float *)a2 + 20);
  v3 |= 0x20000u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 20) = result;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 4) == 0)
  {
LABEL_17:
    if ((v2 & 8) == 0)
      goto LABEL_18;
    goto LABEL_42;
  }
LABEL_41:
  result = *((float *)a2 + 5);
  v3 |= 4u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 5) = result;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 8) == 0)
  {
LABEL_18:
    if ((v2 & 0x10) == 0)
      goto LABEL_19;
    goto LABEL_43;
  }
LABEL_42:
  result = *((float *)a2 + 6);
  v3 |= 8u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 6) = result;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x10) == 0)
  {
LABEL_19:
    if ((v2 & 0x20) == 0)
      goto LABEL_20;
    goto LABEL_44;
  }
LABEL_43:
  result = *((float *)a2 + 7);
  v3 |= 0x10u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 7) = result;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x20) == 0)
  {
LABEL_20:
    if ((v2 & 0x40) == 0)
      goto LABEL_21;
    goto LABEL_45;
  }
LABEL_44:
  result = *((float *)a2 + 8);
  v3 |= 0x20u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 8) = result;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x40) == 0)
  {
LABEL_21:
    if ((v2 & 0x80) == 0)
      goto LABEL_22;
    goto LABEL_46;
  }
LABEL_45:
  result = *((float *)a2 + 9);
  v3 |= 0x40u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 9) = result;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x80) == 0)
  {
LABEL_22:
    if ((v2 & 0x80000) == 0)
      goto LABEL_23;
    goto LABEL_47;
  }
LABEL_46:
  result = *((float *)a2 + 10);
  v3 |= 0x80u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 10) = result;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x80000) == 0)
  {
LABEL_23:
    if ((v2 & 0x100000) == 0)
      goto LABEL_24;
    goto LABEL_48;
  }
LABEL_47:
  result = *((float *)a2 + 22);
  v3 |= 0x80000u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 22) = result;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x100000) == 0)
  {
LABEL_24:
    if ((v2 & 0x200000) == 0)
      goto LABEL_25;
    goto LABEL_49;
  }
LABEL_48:
  result = *((float *)a2 + 23);
  v3 |= 0x100000u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 23) = result;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x200000) == 0)
  {
LABEL_25:
    if ((v2 & 0x400000) == 0)
      goto LABEL_26;
    goto LABEL_50;
  }
LABEL_49:
  result = *((float *)a2 + 24);
  v3 |= 0x200000u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 24) = result;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x400000) == 0)
  {
LABEL_26:
    if ((v2 & 0x800000) == 0)
      goto LABEL_27;
    goto LABEL_51;
  }
LABEL_50:
  result = *((float *)a2 + 25);
  v3 |= 0x400000u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 25) = result;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x800000) == 0)
  {
LABEL_27:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_28;
    goto LABEL_52;
  }
LABEL_51:
  result = *((float *)a2 + 26);
  v3 |= 0x800000u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 26) = result;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_28:
    if ((v2 & 0x100) == 0)
      goto LABEL_29;
    goto LABEL_53;
  }
LABEL_52:
  result = *((float *)a2 + 27);
  v3 |= 0x1000000u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 27) = result;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x100) == 0)
  {
LABEL_29:
    if ((v2 & 2) == 0)
      return result;
LABEL_54:
    result = *((float *)a2 + 4);
    *((_DWORD *)this + 29) = v3 | 2;
    *((float *)this + 4) = result;
    return result;
  }
LABEL_53:
  result = *((float *)a2 + 11);
  v3 |= 0x100u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 11) = result;
  if ((*((_DWORD *)a2 + 29) & 2) != 0)
    goto LABEL_54;
  return result;
}

CMMsl *CMMsl::ViewObstructedMachineLearningFeatures::operator=(CMMsl *a1, const CMMsl::ViewObstructedMachineLearningFeatures *a2)
{
  CMMsl::ViewObstructedMachineLearningFeatures *v3;
  _BYTE v5[120];

  if (a1 != a2)
  {
    CMMsl::ViewObstructedMachineLearningFeatures::ViewObstructedMachineLearningFeatures((CMMsl::ViewObstructedMachineLearningFeatures *)v5, a2);
    CMMsl::swap(a1, (CMMsl::ViewObstructedMachineLearningFeatures *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::ViewObstructedMachineLearningFeatures *a2, CMMsl::ViewObstructedMachineLearningFeatures *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  float result;

  v3 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v5;
  v6 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v6;
  v7 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v7;
  v8 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v8;
  v9 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v9;
  v10 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v10;
  v11 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v11;
  v12 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v12;
  v13 = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v13;
  v14 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v14;
  v15 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v15;
  v16 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v16;
  v17 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v17;
  v18 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v18;
  v19 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v19;
  v20 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v20;
  v21 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v21;
  v22 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v22;
  v23 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v23;
  v24 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v24;
  v25 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v25;
  v26 = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v26;
  v27 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v27;
  v28 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v28;
  result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  return result;
}

float CMMsl::ViewObstructedMachineLearningFeatures::ViewObstructedMachineLearningFeatures(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_251361960;
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a2 + 116) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

CMMsl *CMMsl::ViewObstructedMachineLearningFeatures::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::ViewObstructedMachineLearningFeatures *v3;
  _BYTE v5[120];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::ViewObstructedMachineLearningFeatures::ViewObstructedMachineLearningFeatures((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::ViewObstructedMachineLearningFeatures *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::ViewObstructedMachineLearningFeatures::formatText(CMMsl::ViewObstructedMachineLearningFeatures *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "absMeanGravX", *((float *)this + 4));
    v5 = *((_DWORD *)this + 29);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_31;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "accelFFTBin1", *((float *)this + 5));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "accelFFTBin2", *((float *)this + 6));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "accelFFTBin3", *((float *)this + 7));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "accelFFTBin4", *((float *)this + 8));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "accelFFTBin5", *((float *)this + 9));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "accelFFTBin6", *((float *)this + 10));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "accelFFTBinDotPressureFFTBin", *((float *)this + 11));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "fFTBin1", *((float *)this + 12));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "fFTBin2", *((float *)this + 13));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "fFTBin3", *((float *)this + 14));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0)
      goto LABEL_14;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "fFTBin4", *((float *)this + 15));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x2000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000) == 0)
      goto LABEL_15;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "fFTBin5", *((float *)this + 16));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x4000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0)
      goto LABEL_16;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "meanGravX", *((float *)this + 17));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000) == 0)
      goto LABEL_17;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "meanGravY", *((float *)this + 18));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x10000) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "meanGravZ", *((float *)this + 19));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0)
      goto LABEL_19;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "medianLux", *((float *)this + 20));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 0x80000) == 0)
      goto LABEL_20;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "medianPocketProbability", *((float *)this + 21));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x80000) == 0)
  {
LABEL_20:
    if ((v5 & 0x100000) == 0)
      goto LABEL_21;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "pressureFFTBin1", *((float *)this + 22));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x100000) == 0)
  {
LABEL_21:
    if ((v5 & 0x200000) == 0)
      goto LABEL_22;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "pressureFFTBin2", *((float *)this + 23));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x200000) == 0)
  {
LABEL_22:
    if ((v5 & 0x400000) == 0)
      goto LABEL_23;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "pressureFFTBin3", *((float *)this + 24));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x400000) == 0)
  {
LABEL_23:
    if ((v5 & 0x800000) == 0)
      goto LABEL_24;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "pressureFFTBin4", *((float *)this + 25));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x800000) == 0)
  {
LABEL_24:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_25;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "pressureFFTBin5", *((float *)this + 26));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_26;
LABEL_53:
    PB::TextFormatter::format(a2, "stdPressure", *((float *)this + 28));
    if ((*((_DWORD *)this + 29) & 1) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_27;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "pressureFFTBin6", *((float *)this + 27));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x2000000) != 0)
    goto LABEL_53;
LABEL_26:
  if ((v5 & 1) != 0)
LABEL_27:
    PB::TextFormatter::format(a2, "timestamp");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ViewObstructedMachineLearningFeatures::readFrom(CMMsl::ViewObstructedMachineLearningFeatures *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_114;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 29) |= 1u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v26 = 0;
          v27 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              v24 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_123;
            }
            v28 = v20++;
            v29 = *(_BYTE *)(v21 + v28);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0)
              break;
            v26 += 7;
            v14 = v27++ > 8;
            if (v14)
            {
              v24 = 0;
LABEL_122:
              v2 = v28 + 1;
              goto LABEL_123;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v24 = 0;
          goto LABEL_122;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_123;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        v24 = 0;
LABEL_123:
        *((_QWORD *)this + 1) = v24;
        break;
      case 2u:
        *((_DWORD *)this + 29) |= 0x4000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_104;
        *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_113;
      case 3u:
        *((_DWORD *)this + 29) |= 0x8000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_104;
        *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_113;
      case 4u:
        *((_DWORD *)this + 29) |= 0x10000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_104;
        *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_113;
      case 5u:
        *((_DWORD *)this + 29) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_104;
        *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_113;
      case 6u:
        *((_DWORD *)this + 29) |= 0x400u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_104;
        *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_113;
      case 7u:
        *((_DWORD *)this + 29) |= 0x800u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_104;
        *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_113;
      case 8u:
        *((_DWORD *)this + 29) |= 0x1000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_104;
        *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_113;
      case 9u:
        *((_DWORD *)this + 29) |= 0x2000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_104;
        *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_113;
      case 0xAu:
        *((_DWORD *)this + 29) |= 0x2000000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_104;
        *((_DWORD *)this + 28) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_113;
      case 0xBu:
        *((_DWORD *)this + 29) |= 0x40000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_104;
        *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_113;
      case 0xCu:
        *((_DWORD *)this + 29) |= 0x20000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_104;
        *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_113;
      case 0xDu:
        *((_DWORD *)this + 29) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_104;
        *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_113;
      case 0xEu:
        *((_DWORD *)this + 29) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_104;
        *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_113;
      case 0xFu:
        *((_DWORD *)this + 29) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_104;
        *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_113;
      case 0x10u:
        *((_DWORD *)this + 29) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_104;
        *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_113;
      case 0x11u:
        *((_DWORD *)this + 29) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_104;
        *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_113;
      case 0x12u:
        *((_DWORD *)this + 29) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_104;
        *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_113;
      case 0x13u:
        *((_DWORD *)this + 29) |= 0x80000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_104;
        *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_113;
      case 0x14u:
        *((_DWORD *)this + 29) |= 0x100000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_104;
        *((_DWORD *)this + 23) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_113;
      case 0x15u:
        *((_DWORD *)this + 29) |= 0x200000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_104;
        *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_113;
      case 0x16u:
        *((_DWORD *)this + 29) |= 0x400000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_104;
        *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_113;
      case 0x17u:
        *((_DWORD *)this + 29) |= 0x800000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_104;
        *((_DWORD *)this + 26) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_113;
      case 0x18u:
        *((_DWORD *)this + 29) |= 0x1000000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_104;
        *((_DWORD *)this + 27) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_113;
      case 0x19u:
        *((_DWORD *)this + 29) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_104;
        *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_113;
      case 0x1Au:
        *((_DWORD *)this + 29) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_113:
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_104:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_114:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::ViewObstructedMachineLearningFeatures::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 116);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_DWORD *)(v3 + 116);
    if ((v4 & 0x4000) == 0)
    {
LABEL_3:
      if ((v4 & 0x8000) == 0)
        goto LABEL_4;
      goto LABEL_30;
    }
  }
  else if ((v4 & 0x4000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 68));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x8000) == 0)
  {
LABEL_4:
    if ((v4 & 0x10000) == 0)
      goto LABEL_5;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(float *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x10000) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 76));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x400) == 0)
      goto LABEL_7;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x400) == 0)
  {
LABEL_7:
    if ((v4 & 0x800) == 0)
      goto LABEL_8;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x800) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0)
      goto LABEL_9;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 60));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x2000) == 0)
  {
LABEL_10:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_11;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x40000) == 0)
      goto LABEL_12;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 112));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x40000) == 0)
  {
LABEL_12:
    if ((v4 & 0x20000) == 0)
      goto LABEL_13;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 84));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x20000) == 0)
  {
LABEL_13:
    if ((v4 & 4) == 0)
      goto LABEL_14;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 4) == 0)
  {
LABEL_14:
    if ((v4 & 8) == 0)
      goto LABEL_15;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 8) == 0)
  {
LABEL_15:
    if ((v4 & 0x10) == 0)
      goto LABEL_16;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x10) == 0)
  {
LABEL_16:
    if ((v4 & 0x20) == 0)
      goto LABEL_17;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x20) == 0)
  {
LABEL_17:
    if ((v4 & 0x40) == 0)
      goto LABEL_18;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x40) == 0)
  {
LABEL_18:
    if ((v4 & 0x80) == 0)
      goto LABEL_19;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x80) == 0)
  {
LABEL_19:
    if ((v4 & 0x80000) == 0)
      goto LABEL_20;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x80000) == 0)
  {
LABEL_20:
    if ((v4 & 0x100000) == 0)
      goto LABEL_21;
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(float *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x100000) == 0)
  {
LABEL_21:
    if ((v4 & 0x200000) == 0)
      goto LABEL_22;
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(float *)(v3 + 92));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x200000) == 0)
  {
LABEL_22:
    if ((v4 & 0x400000) == 0)
      goto LABEL_23;
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(float *)(v3 + 96));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x400000) == 0)
  {
LABEL_23:
    if ((v4 & 0x800000) == 0)
      goto LABEL_24;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(float *)(v3 + 100));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x800000) == 0)
  {
LABEL_24:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_25;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(float *)(v3 + 104));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x100) == 0)
      goto LABEL_26;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(float *)(v3 + 108));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x100) == 0)
  {
LABEL_26:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 16));
  }
LABEL_52:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  if ((*(_DWORD *)(v3 + 116) & 2) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 16));
  return this;
}

uint64_t CMMsl::ViewObstructedMachineLearningFeatures::hash_value(CMMsl::ViewObstructedMachineLearningFeatures *this)
{
  int v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  float v43;
  uint64_t v44;
  float v45;
  uint64_t v46;
  float v47;
  uint64_t v48;
  float v49;
  uint64_t v50;
  float v51;
  uint64_t v52;

  v1 = *((_DWORD *)this + 29);
  if ((v1 & 1) == 0)
  {
    v2 = 0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_3;
LABEL_79:
    v4 = 0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_6;
LABEL_80:
    v6 = 0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_9;
LABEL_81:
    v8 = 0;
    if ((v1 & 0x200) != 0)
      goto LABEL_12;
LABEL_82:
    v10 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_15;
LABEL_83:
    v12 = 0;
    if ((v1 & 0x800) != 0)
      goto LABEL_18;
LABEL_84:
    v14 = 0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_21;
LABEL_85:
    v16 = 0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_24;
LABEL_86:
    v18 = 0;
    if ((v1 & 0x2000000) != 0)
      goto LABEL_27;
LABEL_87:
    v20 = 0;
    if ((v1 & 0x40000) != 0)
      goto LABEL_30;
LABEL_88:
    v22 = 0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_33;
LABEL_89:
    v24 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_36;
LABEL_90:
    v26 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_39;
LABEL_91:
    v28 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_42;
LABEL_92:
    v30 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_45;
LABEL_93:
    v32 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_48;
LABEL_94:
    v34 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_51;
LABEL_95:
    v36 = 0;
    if ((v1 & 0x80000) != 0)
      goto LABEL_54;
LABEL_96:
    v38 = 0;
    if ((v1 & 0x100000) != 0)
      goto LABEL_57;
LABEL_97:
    v40 = 0;
    if ((v1 & 0x200000) != 0)
      goto LABEL_60;
LABEL_98:
    v42 = 0;
    if ((v1 & 0x400000) != 0)
      goto LABEL_63;
LABEL_99:
    v44 = 0;
    if ((v1 & 0x800000) != 0)
      goto LABEL_66;
LABEL_100:
    v46 = 0;
    if ((v1 & 0x1000000) != 0)
      goto LABEL_69;
LABEL_101:
    v48 = 0;
    if ((v1 & 0x100) != 0)
      goto LABEL_72;
    goto LABEL_102;
  }
  v2 = *((_QWORD *)this + 1);
  if ((v1 & 0x4000) == 0)
    goto LABEL_79;
LABEL_3:
  v3 = *((float *)this + 17);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  if ((v1 & 0x8000) == 0)
    goto LABEL_80;
LABEL_6:
  v5 = *((float *)this + 18);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((v1 & 0x10000) == 0)
    goto LABEL_81;
LABEL_9:
  v7 = *((float *)this + 19);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 0x200) == 0)
    goto LABEL_82;
LABEL_12:
  v9 = *((float *)this + 12);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((v1 & 0x400) == 0)
    goto LABEL_83;
LABEL_15:
  v11 = *((float *)this + 13);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((v1 & 0x800) == 0)
    goto LABEL_84;
LABEL_18:
  v13 = *((float *)this + 14);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((v1 & 0x1000) == 0)
    goto LABEL_85;
LABEL_21:
  v15 = *((float *)this + 15);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_86;
LABEL_24:
  v17 = *((float *)this + 16);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  if ((v1 & 0x2000000) == 0)
    goto LABEL_87;
LABEL_27:
  v19 = *((float *)this + 28);
  v20 = LODWORD(v19);
  if (v19 == 0.0)
    v20 = 0;
  if ((v1 & 0x40000) == 0)
    goto LABEL_88;
LABEL_30:
  v21 = *((float *)this + 21);
  v22 = LODWORD(v21);
  if (v21 == 0.0)
    v22 = 0;
  if ((v1 & 0x20000) == 0)
    goto LABEL_89;
LABEL_33:
  v23 = *((float *)this + 20);
  v24 = LODWORD(v23);
  if (v23 == 0.0)
    v24 = 0;
  if ((v1 & 4) == 0)
    goto LABEL_90;
LABEL_36:
  v25 = *((float *)this + 5);
  v26 = LODWORD(v25);
  if (v25 == 0.0)
    v26 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_91;
LABEL_39:
  v27 = *((float *)this + 6);
  v28 = LODWORD(v27);
  if (v27 == 0.0)
    v28 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_92;
LABEL_42:
  v29 = *((float *)this + 7);
  v30 = LODWORD(v29);
  if (v29 == 0.0)
    v30 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_93;
LABEL_45:
  v31 = *((float *)this + 8);
  v32 = LODWORD(v31);
  if (v31 == 0.0)
    v32 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_94;
LABEL_48:
  v33 = *((float *)this + 9);
  v34 = LODWORD(v33);
  if (v33 == 0.0)
    v34 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_95;
LABEL_51:
  v35 = *((float *)this + 10);
  v36 = LODWORD(v35);
  if (v35 == 0.0)
    v36 = 0;
  if ((v1 & 0x80000) == 0)
    goto LABEL_96;
LABEL_54:
  v37 = *((float *)this + 22);
  v38 = LODWORD(v37);
  if (v37 == 0.0)
    v38 = 0;
  if ((v1 & 0x100000) == 0)
    goto LABEL_97;
LABEL_57:
  v39 = *((float *)this + 23);
  v40 = LODWORD(v39);
  if (v39 == 0.0)
    v40 = 0;
  if ((v1 & 0x200000) == 0)
    goto LABEL_98;
LABEL_60:
  v41 = *((float *)this + 24);
  v42 = LODWORD(v41);
  if (v41 == 0.0)
    v42 = 0;
  if ((v1 & 0x400000) == 0)
    goto LABEL_99;
LABEL_63:
  v43 = *((float *)this + 25);
  v44 = LODWORD(v43);
  if (v43 == 0.0)
    v44 = 0;
  if ((v1 & 0x800000) == 0)
    goto LABEL_100;
LABEL_66:
  v45 = *((float *)this + 26);
  v46 = LODWORD(v45);
  if (v45 == 0.0)
    v46 = 0;
  if ((v1 & 0x1000000) == 0)
    goto LABEL_101;
LABEL_69:
  v47 = *((float *)this + 27);
  v48 = LODWORD(v47);
  if (v47 == 0.0)
    v48 = 0;
  if ((v1 & 0x100) != 0)
  {
LABEL_72:
    v49 = *((float *)this + 11);
    v50 = LODWORD(v49);
    if (v49 == 0.0)
      v50 = 0;
    if ((v1 & 2) != 0)
      goto LABEL_75;
LABEL_103:
    v52 = 0;
    return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v32 ^ v34 ^ v36 ^ v38 ^ v40 ^ v42 ^ v44 ^ v46 ^ v48 ^ v50 ^ v52;
  }
LABEL_102:
  v50 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_103;
LABEL_75:
  v51 = *((float *)this + 4);
  v52 = LODWORD(v51);
  if (v51 == 0.0)
    v52 = 0;
  return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v32 ^ v34 ^ v36 ^ v38 ^ v40 ^ v42 ^ v44 ^ v46 ^ v48 ^ v50 ^ v52;
}

void CMMsl::ViewObstructedMachineLearningProbabilities::~ViewObstructedMachineLearningProbabilities(CMMsl::ViewObstructedMachineLearningProbabilities *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::ViewObstructedMachineLearningProbabilities::ViewObstructedMachineLearningProbabilities(CMMsl::ViewObstructedMachineLearningProbabilities *this, const CMMsl::ViewObstructedMachineLearningProbabilities *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  float result;

  *(_QWORD *)this = &off_251361998;
  *((_DWORD *)this + 16) = 0;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_WORD *)this + 32) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_WORD *)a2 + 32);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 4) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 5);
    v3 |= 4u;
    *((_WORD *)this + 32) = v3;
    *((float *)this + 5) = result;
    v2 = *((_WORD *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    result = *((float *)a2 + 7);
    v3 |= 0x10u;
    *((_WORD *)this + 32) = v3;
    *((float *)this + 7) = result;
    v2 = *((_WORD *)a2 + 32);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_20;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  result = *((float *)a2 + 8);
  v3 |= 0x20u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 8) = result;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  result = *((float *)a2 + 9);
  v3 |= 0x40u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 9) = result;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x400) == 0)
  {
LABEL_10:
    if ((v2 & 0x1000) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  result = *((float *)a2 + 13);
  v3 |= 0x400u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 13) = result;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x1000) == 0)
  {
LABEL_11:
    if ((v2 & 0x200) == 0)
      goto LABEL_12;
    goto LABEL_23;
  }
LABEL_22:
  result = *((float *)a2 + 15);
  v3 |= 0x1000u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 15) = result;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x200) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0)
      goto LABEL_13;
    goto LABEL_24;
  }
LABEL_23:
  result = *((float *)a2 + 12);
  v3 |= 0x200u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 12) = result;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 0x800) == 0)
      goto LABEL_14;
    goto LABEL_25;
  }
LABEL_24:
  result = *((float *)a2 + 4);
  v3 |= 2u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 4) = result;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x800) == 0)
  {
LABEL_14:
    if ((v2 & 0x100) == 0)
      goto LABEL_15;
    goto LABEL_26;
  }
LABEL_25:
  result = *((float *)a2 + 14);
  v3 |= 0x800u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 14) = result;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x100) == 0)
  {
LABEL_15:
    if ((v2 & 8) == 0)
      goto LABEL_16;
    goto LABEL_27;
  }
LABEL_26:
  result = *((float *)a2 + 11);
  v3 |= 0x100u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 11) = result;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 8) == 0)
  {
LABEL_16:
    if ((v2 & 0x80) == 0)
      return result;
LABEL_28:
    result = *((float *)a2 + 10);
    *((_WORD *)this + 32) = v3 | 0x80;
    *((float *)this + 10) = result;
    return result;
  }
LABEL_27:
  result = *((float *)a2 + 6);
  v3 |= 8u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 6) = result;
  if ((*((_WORD *)a2 + 32) & 0x80) != 0)
    goto LABEL_28;
  return result;
}

CMMsl *CMMsl::ViewObstructedMachineLearningProbabilities::operator=(CMMsl *a1, const CMMsl::ViewObstructedMachineLearningProbabilities *a2)
{
  CMMsl::ViewObstructedMachineLearningProbabilities *v3;
  _BYTE v5[72];

  if (a1 != a2)
  {
    CMMsl::ViewObstructedMachineLearningProbabilities::ViewObstructedMachineLearningProbabilities((CMMsl::ViewObstructedMachineLearningProbabilities *)v5, a2);
    CMMsl::swap(a1, (CMMsl::ViewObstructedMachineLearningProbabilities *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::ViewObstructedMachineLearningProbabilities *a2, CMMsl::ViewObstructedMachineLearningProbabilities *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  float result;

  v3 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v5;
  v6 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v6;
  v7 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v7;
  v8 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v8;
  v9 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v9;
  v10 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v10;
  v11 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v11;
  v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  v13 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v13;
  v14 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v14;
  v15 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v15;
  result = *((float *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((float *)a2 + 10) = result;
  return result;
}

float CMMsl::ViewObstructedMachineLearningProbabilities::ViewObstructedMachineLearningProbabilities(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_251361998;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(float *)(a2 + 40);
  *(float *)(a1 + 40) = result;
  return result;
}

CMMsl *CMMsl::ViewObstructedMachineLearningProbabilities::operator=(CMMsl *this, uint64_t a2, CMMsl::ViewObstructedMachineLearningProbabilities *a3)
{
  uint64_t v4;
  __int128 v5;
  _QWORD v7[2];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int v11;

  if (this != (CMMsl *)a2)
  {
    v11 = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(a2 + 64) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v7[0] = &off_251361998;
    v7[1] = v4;
    v5 = *(_OWORD *)(a2 + 32);
    v10 = *(_OWORD *)(a2 + 48);
    v8 = *(_OWORD *)(a2 + 16);
    v9 = v5;
    CMMsl::swap(this, (CMMsl::ViewObstructedMachineLearningProbabilities *)v7, a3);
    PB::Base::~Base((PB::Base *)v7);
  }
  return this;
}

uint64_t CMMsl::ViewObstructedMachineLearningProbabilities::formatText(CMMsl::ViewObstructedMachineLearningProbabilities *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "bagObstructed", *((float *)this + 4));
    v5 = *((_WORD *)this + 32);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "closeCoveredBagObstructed", *((float *)this + 5));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "closeCoveredObstructed", *((float *)this + 6));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "closeCoveredPocketObstructed", *((float *)this + 7));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "inHandObstructed", *((float *)this + 8));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "looseCoveredBagObstructed", *((float *)this + 9));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "looseCoveredObstructed", *((float *)this + 10));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "looseCoveredPocketObstructed", *((float *)this + 11));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "obstructed", *((float *)this + 12));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "otherObstructed", *((float *)this + 13));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 1) == 0)
      goto LABEL_13;
LABEL_27:
    PB::TextFormatter::format(a2, "timestamp");
    if ((*((_WORD *)this + 32) & 0x1000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_14;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "pocketObstructed", *((float *)this + 14));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 1) != 0)
    goto LABEL_27;
LABEL_13:
  if ((v5 & 0x1000) != 0)
LABEL_14:
    PB::TextFormatter::format(a2, "visible", *((float *)this + 15));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ViewObstructedMachineLearningProbabilities::readFrom(CMMsl::ViewObstructedMachineLearningProbabilities *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_80;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 32) |= 1u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v26 = 0;
          v27 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              v24 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_79;
            }
            v28 = v20++;
            v29 = *(_BYTE *)(v21 + v28);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0)
              break;
            v26 += 7;
            v14 = v27++ > 8;
            if (v14)
            {
              v24 = 0;
LABEL_78:
              v2 = v28 + 1;
              goto LABEL_79;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v24 = 0;
          goto LABEL_78;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_79;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        v24 = 0;
LABEL_79:
        *((_QWORD *)this + 1) = v24;
        break;
      case 2u:
        *((_WORD *)this + 32) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_65;
        *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_74;
      case 3u:
        *((_WORD *)this + 32) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_65;
        *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_74;
      case 4u:
        *((_WORD *)this + 32) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_65;
        *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_74;
      case 5u:
        *((_WORD *)this + 32) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_65;
        *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_74;
      case 6u:
        *((_WORD *)this + 32) |= 0x400u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_65;
        *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_74;
      case 7u:
        *((_WORD *)this + 32) |= 0x1000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_65;
        *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_74;
      case 8u:
        *((_WORD *)this + 32) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_65;
        *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_74;
      case 9u:
        *((_WORD *)this + 32) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_65;
        *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_74;
      case 0xAu:
        *((_WORD *)this + 32) |= 0x800u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_65;
        *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_74;
      case 0xBu:
        *((_WORD *)this + 32) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_65;
        *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_74;
      case 0xCu:
        *((_WORD *)this + 32) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_65;
        *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_74;
      case 0xDu:
        *((_WORD *)this + 32) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_74:
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_65:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_80:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::ViewObstructedMachineLearningProbabilities::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 64);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_WORD *)(v3 + 64);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x400) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x400) == 0)
  {
LABEL_7:
    if ((v4 & 0x1000) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x1000) == 0)
  {
LABEL_8:
    if ((v4 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(float *)(v3 + 60));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x200) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x800) == 0)
  {
LABEL_11:
    if ((v4 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x100) == 0)
  {
LABEL_12:
    if ((v4 & 8) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_13:
    if ((v4 & 0x80) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 40));
  }
LABEL_26:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  if ((*(_WORD *)(v3 + 64) & 0x80) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 40));
  return this;
}

uint64_t CMMsl::ViewObstructedMachineLearningProbabilities::hash_value(CMMsl::ViewObstructedMachineLearningProbabilities *this)
{
  __int16 v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  float v25;
  uint64_t v26;

  v1 = *((_WORD *)this + 32);
  if ((v1 & 1) == 0)
  {
    v2 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_3;
LABEL_40:
    v4 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_6;
LABEL_41:
    v6 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_9;
LABEL_42:
    v8 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_12;
LABEL_43:
    v10 = 0;
    if ((*((_WORD *)this + 32) & 0x400) != 0)
      goto LABEL_15;
LABEL_44:
    v12 = 0;
    if ((*((_WORD *)this + 32) & 0x1000) != 0)
      goto LABEL_18;
LABEL_45:
    v14 = 0;
    if ((*((_WORD *)this + 32) & 0x200) != 0)
      goto LABEL_21;
LABEL_46:
    v16 = 0;
    if ((v1 & 2) != 0)
      goto LABEL_24;
LABEL_47:
    v18 = 0;
    if ((*((_WORD *)this + 32) & 0x800) != 0)
      goto LABEL_27;
LABEL_48:
    v20 = 0;
    if ((*((_WORD *)this + 32) & 0x100) != 0)
      goto LABEL_30;
LABEL_49:
    v22 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_33;
    goto LABEL_50;
  }
  v2 = *((_QWORD *)this + 1);
  if ((v1 & 4) == 0)
    goto LABEL_40;
LABEL_3:
  v3 = *((float *)this + 5);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_41;
LABEL_6:
  v5 = *((float *)this + 7);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_42;
LABEL_9:
  v7 = *((float *)this + 8);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_43;
LABEL_12:
  v9 = *((float *)this + 9);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((*((_WORD *)this + 32) & 0x400) == 0)
    goto LABEL_44;
LABEL_15:
  v11 = *((float *)this + 13);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((*((_WORD *)this + 32) & 0x1000) == 0)
    goto LABEL_45;
LABEL_18:
  v13 = *((float *)this + 15);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((*((_WORD *)this + 32) & 0x200) == 0)
    goto LABEL_46;
LABEL_21:
  v15 = *((float *)this + 12);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_47;
LABEL_24:
  v17 = *((float *)this + 4);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  if ((*((_WORD *)this + 32) & 0x800) == 0)
    goto LABEL_48;
LABEL_27:
  v19 = *((float *)this + 14);
  v20 = LODWORD(v19);
  if (v19 == 0.0)
    v20 = 0;
  if ((*((_WORD *)this + 32) & 0x100) == 0)
    goto LABEL_49;
LABEL_30:
  v21 = *((float *)this + 11);
  v22 = LODWORD(v21);
  if (v21 == 0.0)
    v22 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_33:
    v23 = *((float *)this + 6);
    v24 = LODWORD(v23);
    if (v23 == 0.0)
      v24 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_36;
LABEL_51:
    v26 = 0;
    return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26;
  }
LABEL_50:
  v24 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_51;
LABEL_36:
  v25 = *((float *)this + 10);
  v26 = LODWORD(v25);
  if (v25 == 0.0)
    v26 = 0;
  return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26;
}

void CMMsl::ViewObstructedState::~ViewObstructedState(CMMsl::ViewObstructedState *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::ViewObstructedState::ViewObstructedState(uint64_t this, const CMMsl::ViewObstructedState *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  char v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  char v22;

  *(_QWORD *)this = &off_2513619D0;
  *(_DWORD *)(this + 84) = 0;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_DWORD *)(this + 84) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_DWORD *)a2 + 21);
    if ((v2 & 0x20000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x20000) != 0)
  {
LABEL_5:
    v5 = *((_BYTE *)a2 + 80);
    v3 |= 0x20000u;
    *(_DWORD *)(this + 84) = v3;
    *(_BYTE *)(this + 80) = v5;
    v2 = *((_DWORD *)a2 + 21);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *(_DWORD *)(this + 84) = v3;
    *(_DWORD *)(this + 20) = v6;
    v2 = *((_DWORD *)a2 + 21);
    if ((v2 & 0x2000) == 0)
    {
LABEL_8:
      if ((v2 & 0x1000) == 0)
        goto LABEL_9;
      goto LABEL_26;
    }
  }
  else if ((v2 & 0x2000) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 16);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 64) = v7;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x1000) == 0)
  {
LABEL_9:
    if ((v2 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_27;
  }
LABEL_26:
  v8 = *((_DWORD *)a2 + 15);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 60) = v8;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x200) == 0)
  {
LABEL_10:
    if ((v2 & 0x10000) == 0)
      goto LABEL_11;
    goto LABEL_28;
  }
LABEL_27:
  v9 = *((_DWORD *)a2 + 12);
  v3 |= 0x200u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 48) = v9;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x10000) == 0)
  {
LABEL_11:
    if ((v2 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_29;
  }
LABEL_28:
  v10 = *((_DWORD *)a2 + 19);
  v3 |= 0x10000u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 76) = v10;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x400) == 0)
  {
LABEL_12:
    if ((v2 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_30;
  }
LABEL_29:
  v11 = *((_DWORD *)a2 + 13);
  v3 |= 0x400u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 52) = v11;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x800) == 0)
  {
LABEL_13:
    if ((v2 & 0x40) == 0)
      goto LABEL_14;
    goto LABEL_31;
  }
LABEL_30:
  v12 = *((_DWORD *)a2 + 14);
  v3 |= 0x800u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 56) = v12;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x40) == 0)
  {
LABEL_14:
    if ((v2 & 0x80) == 0)
      goto LABEL_15;
    goto LABEL_32;
  }
LABEL_31:
  v13 = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 36) = v13;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x80) == 0)
  {
LABEL_15:
    if ((v2 & 8) == 0)
      goto LABEL_16;
    goto LABEL_33;
  }
LABEL_32:
  v14 = *((_DWORD *)a2 + 10);
  v3 |= 0x80u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 40) = v14;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 8) == 0)
  {
LABEL_16:
    if ((v2 & 0x10) == 0)
      goto LABEL_17;
    goto LABEL_34;
  }
LABEL_33:
  v15 = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 24) = v15;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x10) == 0)
  {
LABEL_17:
    if ((v2 & 0x20) == 0)
      goto LABEL_18;
    goto LABEL_35;
  }
LABEL_34:
  v16 = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 28) = v16;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x20) == 0)
  {
LABEL_18:
    if ((v2 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_36;
  }
LABEL_35:
  v17 = *((_DWORD *)a2 + 8);
  v3 |= 0x20u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 32) = v17;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x4000) == 0)
  {
LABEL_19:
    if ((v2 & 0x8000) == 0)
      goto LABEL_20;
    goto LABEL_37;
  }
LABEL_36:
  v18 = *((_DWORD *)a2 + 17);
  v3 |= 0x4000u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 68) = v18;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x8000) == 0)
  {
LABEL_20:
    if ((v2 & 0x100) == 0)
      goto LABEL_21;
    goto LABEL_38;
  }
LABEL_37:
  v19 = *((_DWORD *)a2 + 18);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 72) = v19;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x100) == 0)
  {
LABEL_21:
    if ((v2 & 2) == 0)
      goto LABEL_22;
    goto LABEL_39;
  }
LABEL_38:
  v20 = *((_DWORD *)a2 + 11);
  v3 |= 0x100u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 44) = v20;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 2) == 0)
  {
LABEL_22:
    if ((v2 & 0x40000) == 0)
      return this;
LABEL_40:
    v22 = *((_BYTE *)a2 + 81);
    *(_DWORD *)(this + 84) = v3 | 0x40000;
    *(_BYTE *)(this + 81) = v22;
    return this;
  }
LABEL_39:
  v21 = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 16) = v21;
  if ((*((_DWORD *)a2 + 21) & 0x40000) != 0)
    goto LABEL_40;
  return this;
}

CMMsl *CMMsl::ViewObstructedState::operator=(CMMsl *a1, const CMMsl::ViewObstructedState *a2)
{
  CMMsl::ViewObstructedState *v3;
  _BYTE v5[88];

  if (a1 != a2)
  {
    CMMsl::ViewObstructedState::ViewObstructedState((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::ViewObstructedState *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::ViewObstructedState *a2, CMMsl::ViewObstructedState *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  float result;

  v3 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LOBYTE(v4) = *((_BYTE *)this + 80);
  *((_BYTE *)this + 80) = *((_BYTE *)a2 + 80);
  *((_BYTE *)a2 + 80) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v4;
  LODWORD(v4) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  v5 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v5;
  v6 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v6;
  v7 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v7;
  v8 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v8;
  v9 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v9;
  v10 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v10;
  v11 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v11;
  v12 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v12;
  v13 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v13;
  v14 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v14;
  v15 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v15;
  result = *((float *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((float *)a2 + 11) = result;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LOBYTE(v4) = *((_BYTE *)this + 81);
  *((_BYTE *)this + 81) = *((_BYTE *)a2 + 81);
  *((_BYTE *)a2 + 81) = v4;
  return result;
}

float CMMsl::ViewObstructedState::ViewObstructedState(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_2513619D0;
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a2 + 84) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  result = *(float *)(a2 + 44);
  *(float *)(a1 + 44) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  return result;
}

CMMsl *CMMsl::ViewObstructedState::operator=(CMMsl *this, uint64_t a2, CMMsl::ViewObstructedState *a3)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  _QWORD v8[3];
  __int128 v9;
  __int128 v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char v15;
  char v16;
  int v17;

  if (this != (CMMsl *)a2)
  {
    v17 = *(_DWORD *)(a2 + 84);
    *(_DWORD *)(a2 + 84) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v8[0] = &off_2513619D0;
    v8[1] = v4;
    v15 = *(_BYTE *)(a2 + 80);
    v12 = *(_QWORD *)(a2 + 60);
    v14 = *(_DWORD *)(a2 + 76);
    v11 = *(_DWORD *)(a2 + 56);
    v5 = *(_OWORD *)(a2 + 24);
    v13 = *(_QWORD *)(a2 + 68);
    v6 = *(_OWORD *)(a2 + 40);
    v9 = v5;
    v10 = v6;
    v8[2] = *(_QWORD *)(a2 + 16);
    v16 = *(_BYTE *)(a2 + 81);
    CMMsl::swap(this, (CMMsl::ViewObstructedState *)v8, a3);
    PB::Base::~Base((PB::Base *)v8);
  }
  return this;
}

uint64_t CMMsl::ViewObstructedState::formatText(CMMsl::ViewObstructedState *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "currentEventTag");
    v5 = *((_DWORD *)this + 21);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_24;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "currentState");
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "filteredGravityX", *((float *)this + 6));
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "filteredGravityY", *((float *)this + 7));
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "filteredGravityZ", *((float *)this + 8));
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "gravityAngle", *((float *)this + 9));
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "gravityShift", *((float *)this + 10));
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "isMovingFiltered", *((float *)this + 11));
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "lux", *((float *)this + 12));
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "luxBaseline", *((float *)this + 13));
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "luxShift", *((float *)this + 14));
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0)
      goto LABEL_14;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "motionType");
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x2000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000) == 0)
      goto LABEL_15;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "orientation");
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x4000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0)
      goto LABEL_16;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "pocketProbEnter", *((float *)this + 17));
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000) == 0)
      goto LABEL_17;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "pocketProbExit", *((float *)this + 18));
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x10000) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "pocketProbability", *((float *)this + 19));
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0)
      goto LABEL_19;
LABEL_39:
    PB::TextFormatter::format(a2, "sufficientMotion");
    if ((*((_DWORD *)this + 21) & 1) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_20;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "shouldSuppress");
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x40000) != 0)
    goto LABEL_39;
LABEL_19:
  if ((v5 & 1) != 0)
LABEL_20:
    PB::TextFormatter::format(a2, "timestamp");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ViewObstructedState::readFrom(CMMsl::ViewObstructedState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  int v26;
  BOOL v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  uint64_t v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  char v51;
  int v52;
  BOOL v53;
  char v54;
  unsigned int v55;
  unint64_t v56;
  char v57;
  char v58;
  unsigned int v59;
  unint64_t v60;
  char v61;
  char v62;
  unsigned int v63;
  unint64_t v64;
  char v65;
  char v66;
  unsigned int v67;
  unint64_t v68;
  char v69;
  char v70;
  unsigned int v71;
  unint64_t v72;
  char v73;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_164;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 21) |= 1u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v54 = 0;
          v55 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              v24 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_143;
            }
            v56 = v20++;
            v57 = *(_BYTE *)(v21 + v56);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v57 & 0x7F) << v54;
            if ((v57 & 0x80) == 0)
              break;
            v54 += 7;
            v14 = v55++ > 8;
            if (v14)
            {
              v24 = 0;
LABEL_142:
              v2 = v56 + 1;
              goto LABEL_143;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v24 = 0;
          goto LABEL_142;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_143;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        v24 = 0;
LABEL_143:
        *((_QWORD *)this + 1) = v24;
        break;
      case 2u:
        *((_DWORD *)this + 21) |= 0x20000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v27 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v26 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v27 = v26 != 0;
        }
        *((_BYTE *)this + 80) = v27;
        break;
      case 3u:
        *((_DWORD *)this + 21) |= 4u;
        v28 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v29 = *(_QWORD *)a2;
        if (v28 > 0xFFFFFFFFFFFFFFF5 || v28 + 10 > v2)
        {
          v58 = 0;
          v59 = 0;
          v32 = 0;
          if (v2 <= v28)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v28)
            {
              LODWORD(v32) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_148;
            }
            v60 = v28++;
            v61 = *(_BYTE *)(v29 + v60);
            *((_QWORD *)a2 + 1) = v28;
            v32 |= (unint64_t)(v61 & 0x7F) << v58;
            if ((v61 & 0x80) == 0)
              break;
            v58 += 7;
            v14 = v59++ > 8;
            if (v14)
            {
              LODWORD(v32) = 0;
LABEL_147:
              v2 = v60 + 1;
              goto LABEL_148;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v32) = 0;
          goto LABEL_147;
        }
        v30 = 0;
        v31 = 0;
        v32 = 0;
        do
        {
          v2 = v28 + 1;
          *((_QWORD *)a2 + 1) = v28 + 1;
          v33 = *(_BYTE *)(v29 + v28);
          v32 |= (unint64_t)(v33 & 0x7F) << v30;
          if ((v33 & 0x80) == 0)
            goto LABEL_148;
          v30 += 7;
          v28 = v2;
          v14 = v31++ > 8;
        }
        while (!v14);
        LODWORD(v32) = 0;
LABEL_148:
        *((_DWORD *)this + 5) = v32;
        break;
      case 4u:
        *((_DWORD *)this + 21) |= 0x2000u;
        v34 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v35 = *(_QWORD *)a2;
        if (v34 > 0xFFFFFFFFFFFFFFF5 || v34 + 10 > v2)
        {
          v62 = 0;
          v63 = 0;
          v38 = 0;
          if (v2 <= v34)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v34)
            {
              LODWORD(v38) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_153;
            }
            v64 = v34++;
            v65 = *(_BYTE *)(v35 + v64);
            *((_QWORD *)a2 + 1) = v34;
            v38 |= (unint64_t)(v65 & 0x7F) << v62;
            if ((v65 & 0x80) == 0)
              break;
            v62 += 7;
            v14 = v63++ > 8;
            if (v14)
            {
              LODWORD(v38) = 0;
LABEL_152:
              v2 = v64 + 1;
              goto LABEL_153;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v38) = 0;
          goto LABEL_152;
        }
        v36 = 0;
        v37 = 0;
        v38 = 0;
        do
        {
          v2 = v34 + 1;
          *((_QWORD *)a2 + 1) = v34 + 1;
          v39 = *(_BYTE *)(v35 + v34);
          v38 |= (unint64_t)(v39 & 0x7F) << v36;
          if ((v39 & 0x80) == 0)
            goto LABEL_153;
          v36 += 7;
          v34 = v2;
          v14 = v37++ > 8;
        }
        while (!v14);
        LODWORD(v38) = 0;
LABEL_153:
        *((_DWORD *)this + 16) = v38;
        break;
      case 5u:
        *((_DWORD *)this + 21) |= 0x1000u;
        v40 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v41 = *(_QWORD *)a2;
        if (v40 > 0xFFFFFFFFFFFFFFF5 || v40 + 10 > v2)
        {
          v66 = 0;
          v67 = 0;
          v44 = 0;
          if (v2 <= v40)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v40)
            {
              LODWORD(v44) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_158;
            }
            v68 = v40++;
            v69 = *(_BYTE *)(v41 + v68);
            *((_QWORD *)a2 + 1) = v40;
            v44 |= (unint64_t)(v69 & 0x7F) << v66;
            if ((v69 & 0x80) == 0)
              break;
            v66 += 7;
            v14 = v67++ > 8;
            if (v14)
            {
              LODWORD(v44) = 0;
LABEL_157:
              v2 = v68 + 1;
              goto LABEL_158;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v44) = 0;
          goto LABEL_157;
        }
        v42 = 0;
        v43 = 0;
        v44 = 0;
        do
        {
          v2 = v40 + 1;
          *((_QWORD *)a2 + 1) = v40 + 1;
          v45 = *(_BYTE *)(v41 + v40);
          v44 |= (unint64_t)(v45 & 0x7F) << v42;
          if ((v45 & 0x80) == 0)
            goto LABEL_158;
          v42 += 7;
          v40 = v2;
          v14 = v43++ > 8;
        }
        while (!v14);
        LODWORD(v44) = 0;
LABEL_158:
        *((_DWORD *)this + 15) = v44;
        break;
      case 6u:
        *((_DWORD *)this + 21) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_88;
        *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_138;
      case 7u:
        *((_DWORD *)this + 21) |= 0x10000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_88;
        *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_138;
      case 8u:
        *((_DWORD *)this + 21) |= 0x400u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_88;
        *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_138;
      case 9u:
        *((_DWORD *)this + 21) |= 0x800u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_88;
        *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_138;
      case 0xAu:
        *((_DWORD *)this + 21) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_88;
        *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_138;
      case 0xBu:
        *((_DWORD *)this + 21) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_88;
        *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_138;
      case 0xCu:
        *((_DWORD *)this + 21) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_88;
        *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_138;
      case 0xDu:
        *((_DWORD *)this + 21) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_88;
        *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_138;
      case 0xEu:
        *((_DWORD *)this + 21) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_88;
        *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_138;
      case 0xFu:
        *((_DWORD *)this + 21) |= 0x4000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_88;
        *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_138;
      case 0x10u:
        *((_DWORD *)this + 21) |= 0x8000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_88;
        *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_138;
      case 0x11u:
        *((_DWORD *)this + 21) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_138:
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_88:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 0x12u:
        *((_DWORD *)this + 21) |= 2u;
        v46 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v47 = *(_QWORD *)a2;
        if (v46 > 0xFFFFFFFFFFFFFFF5 || v46 + 10 > v2)
        {
          v70 = 0;
          v71 = 0;
          v50 = 0;
          if (v2 <= v46)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v46)
            {
              LODWORD(v50) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_163;
            }
            v72 = v46++;
            v73 = *(_BYTE *)(v47 + v72);
            *((_QWORD *)a2 + 1) = v46;
            v50 |= (unint64_t)(v73 & 0x7F) << v70;
            if ((v73 & 0x80) == 0)
              break;
            v70 += 7;
            v14 = v71++ > 8;
            if (v14)
            {
              LODWORD(v50) = 0;
LABEL_162:
              v2 = v72 + 1;
              goto LABEL_163;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v50) = 0;
          goto LABEL_162;
        }
        v48 = 0;
        v49 = 0;
        v50 = 0;
        do
        {
          v2 = v46 + 1;
          *((_QWORD *)a2 + 1) = v46 + 1;
          v51 = *(_BYTE *)(v47 + v46);
          v50 |= (unint64_t)(v51 & 0x7F) << v48;
          if ((v51 & 0x80) == 0)
            goto LABEL_163;
          v48 += 7;
          v46 = v2;
          v14 = v49++ > 8;
        }
        while (!v14);
        LODWORD(v50) = 0;
LABEL_163:
        *((_DWORD *)this + 4) = v50;
        break;
      case 0x13u:
        *((_DWORD *)this + 21) |= 0x40000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v53 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v52 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v53 = v52 != 0;
        }
        *((_BYTE *)this + 81) = v53;
        break;
      default:
        goto LABEL_19;
    }
LABEL_164:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::ViewObstructedState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 84);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_DWORD *)(v3 + 84);
    if ((v4 & 0x20000) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_23;
    }
  }
  else if ((v4 & 0x20000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x2000) == 0)
      goto LABEL_5;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x2000) == 0)
  {
LABEL_5:
    if ((v4 & 0x1000) == 0)
      goto LABEL_6;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x1000) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0)
      goto LABEL_7;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 0x10000) == 0)
      goto LABEL_8;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x10000) == 0)
  {
LABEL_8:
    if ((v4 & 0x400) == 0)
      goto LABEL_9;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(float *)(v3 + 76));
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x400) == 0)
  {
LABEL_9:
    if ((v4 & 0x800) == 0)
      goto LABEL_10;
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x800) == 0)
  {
LABEL_10:
    if ((v4 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x40) == 0)
  {
LABEL_11:
    if ((v4 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x80) == 0)
  {
LABEL_12:
    if ((v4 & 8) == 0)
      goto LABEL_13;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 8) == 0)
  {
LABEL_13:
    if ((v4 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x10) == 0)
  {
LABEL_14:
    if ((v4 & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x20) == 0)
  {
LABEL_15:
    if ((v4 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x4000) == 0)
  {
LABEL_16:
    if ((v4 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 68));
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x8000) == 0)
  {
LABEL_17:
    if ((v4 & 0x100) == 0)
      goto LABEL_18;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x100) == 0)
  {
LABEL_18:
    if ((v4 & 2) == 0)
      goto LABEL_19;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 2) == 0)
  {
LABEL_19:
    if ((v4 & 0x40000) == 0)
      return this;
    return PB::Writer::write(a2);
  }
LABEL_38:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_DWORD *)(v3 + 84) & 0x40000) != 0)
    return PB::Writer::write(a2);
  return this;
}

uint64_t CMMsl::ViewObstructedState::hash_value(CMMsl::ViewObstructedState *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = *((_DWORD *)this + 21);
  if ((v1 & 1) != 0)
  {
    v2 = *((_QWORD *)this + 1);
    if ((v1 & 0x20000) != 0)
    {
LABEL_3:
      v3 = *((unsigned __int8 *)this + 80);
      if ((v1 & 4) != 0)
        goto LABEL_4;
      goto LABEL_47;
    }
  }
  else
  {
    v2 = 0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_4:
    v4 = *((unsigned int *)this + 5);
    if ((v1 & 0x2000) != 0)
      goto LABEL_5;
    goto LABEL_48;
  }
LABEL_47:
  v4 = 0;
  if ((v1 & 0x2000) != 0)
  {
LABEL_5:
    v5 = *((unsigned int *)this + 16);
    if ((v1 & 0x1000) != 0)
      goto LABEL_6;
    goto LABEL_49;
  }
LABEL_48:
  v5 = 0;
  if ((v1 & 0x1000) != 0)
  {
LABEL_6:
    v6 = *((unsigned int *)this + 15);
    if ((v1 & 0x200) != 0)
      goto LABEL_7;
LABEL_50:
    v8 = 0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_10;
LABEL_51:
    v10 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_13;
LABEL_52:
    v12 = 0;
    if ((v1 & 0x800) != 0)
      goto LABEL_16;
LABEL_53:
    v14 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_19;
LABEL_54:
    v16 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_22;
LABEL_55:
    v18 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_25;
LABEL_56:
    v20 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_28;
LABEL_57:
    v22 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_31;
LABEL_58:
    v24 = 0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_34;
LABEL_59:
    v26 = 0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_37;
LABEL_60:
    v28 = 0;
    if ((v1 & 0x100) != 0)
      goto LABEL_40;
LABEL_61:
    v30 = 0;
    if ((v1 & 2) != 0)
      goto LABEL_43;
LABEL_62:
    v31 = 0;
    if ((v1 & 0x40000) != 0)
      goto LABEL_44;
LABEL_63:
    v32 = 0;
    return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v31 ^ v32;
  }
LABEL_49:
  v6 = 0;
  if ((v1 & 0x200) == 0)
    goto LABEL_50;
LABEL_7:
  v7 = *((float *)this + 12);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 0x10000) == 0)
    goto LABEL_51;
LABEL_10:
  v9 = *((float *)this + 19);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((v1 & 0x400) == 0)
    goto LABEL_52;
LABEL_13:
  v11 = *((float *)this + 13);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((v1 & 0x800) == 0)
    goto LABEL_53;
LABEL_16:
  v13 = *((float *)this + 14);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_54;
LABEL_19:
  v15 = *((float *)this + 9);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_55;
LABEL_22:
  v17 = *((float *)this + 10);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_56;
LABEL_25:
  v19 = *((float *)this + 6);
  v20 = LODWORD(v19);
  if (v19 == 0.0)
    v20 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_57;
LABEL_28:
  v21 = *((float *)this + 7);
  v22 = LODWORD(v21);
  if (v21 == 0.0)
    v22 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_58;
LABEL_31:
  v23 = *((float *)this + 8);
  v24 = LODWORD(v23);
  if (v23 == 0.0)
    v24 = 0;
  if ((v1 & 0x4000) == 0)
    goto LABEL_59;
LABEL_34:
  v25 = *((float *)this + 17);
  v26 = LODWORD(v25);
  if (v25 == 0.0)
    v26 = 0;
  if ((v1 & 0x8000) == 0)
    goto LABEL_60;
LABEL_37:
  v27 = *((float *)this + 18);
  v28 = LODWORD(v27);
  if (v27 == 0.0)
    v28 = 0;
  if ((v1 & 0x100) == 0)
    goto LABEL_61;
LABEL_40:
  v29 = *((float *)this + 11);
  v30 = LODWORD(v29);
  if (v29 == 0.0)
    v30 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_62;
LABEL_43:
  v31 = *((unsigned int *)this + 4);
  if ((v1 & 0x40000) == 0)
    goto LABEL_63;
LABEL_44:
  v32 = *((unsigned __int8 *)this + 81);
  return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v31 ^ v32;
}

void CMMsl::VisionCompassBias::~VisionCompassBias(CMMsl::VisionCompassBias *this)
{
  void *v2;

  *(_QWORD *)this = &off_251361A08;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::VisionCompassBias::~VisionCompassBias(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::VisionCompassBias *CMMsl::VisionCompassBias::VisionCompassBias(CMMsl::VisionCompassBias *this, const CMMsl::VisionCompassBias *a2)
{
  _QWORD *v4;
  __int16 v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  __int16 v10;
  int v11;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;

  *(_QWORD *)this = &off_251361A08;
  *((_QWORD *)this + 1) = 0;
  v4 = (_QWORD *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 19) = 0;
  v5 = *((_WORD *)a2 + 38);
  if ((v5 & 1) != 0)
  {
    v7 = *((_QWORD *)a2 + 4);
    v6 = 1;
    *((_WORD *)this + 38) = 1;
    *((_QWORD *)this + 4) = v7;
    v5 = *((_WORD *)a2 + 38);
    if ((v5 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((v5 & 2) != 0)
  {
LABEL_5:
    v8 = *((_QWORD *)a2 + 5);
    v6 |= 2u;
    *((_WORD *)this + 38) = v6;
    *((_QWORD *)this + 5) = v8;
    v5 = *((_WORD *)a2 + 38);
  }
LABEL_6:
  if ((v5 & 4) != 0)
  {
    v13 = *((_DWORD *)a2 + 12);
    v6 |= 4u;
    *((_WORD *)this + 38) = v6;
    *((_DWORD *)this + 12) = v13;
    v5 = *((_WORD *)a2 + 38);
    if ((v5 & 0x10) == 0)
    {
LABEL_8:
      if ((v5 & 8) == 0)
        goto LABEL_10;
      goto LABEL_9;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v14 = *((_DWORD *)a2 + 14);
  v6 |= 0x10u;
  *((_WORD *)this + 38) = v6;
  *((_DWORD *)this + 14) = v14;
  if ((*((_WORD *)a2 + 38) & 8) != 0)
  {
LABEL_9:
    v9 = *((_DWORD *)a2 + 13);
    *((_WORD *)this + 38) = v6 | 8;
    *((_DWORD *)this + 13) = v9;
  }
LABEL_10:
  if (this != a2)
    sub_242911380(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  v10 = *((_WORD *)a2 + 38);
  if ((v10 & 0x40) != 0)
  {
    v15 = *((_DWORD *)a2 + 16);
    *((_WORD *)this + 38) |= 0x40u;
    *((_DWORD *)this + 16) = v15;
    v10 = *((_WORD *)a2 + 38);
    if ((v10 & 0x80) == 0)
    {
LABEL_14:
      if ((v10 & 0x100) == 0)
        goto LABEL_15;
LABEL_23:
      v17 = *((_DWORD *)a2 + 18);
      *((_WORD *)this + 38) |= 0x100u;
      *((_DWORD *)this + 18) = v17;
      if ((*((_WORD *)a2 + 38) & 0x20) == 0)
        return this;
      goto LABEL_16;
    }
  }
  else if ((v10 & 0x80) == 0)
  {
    goto LABEL_14;
  }
  v16 = *((_DWORD *)a2 + 17);
  *((_WORD *)this + 38) |= 0x80u;
  *((_DWORD *)this + 17) = v16;
  v10 = *((_WORD *)a2 + 38);
  if ((v10 & 0x100) != 0)
    goto LABEL_23;
LABEL_15:
  if ((v10 & 0x20) != 0)
  {
LABEL_16:
    v11 = *((_DWORD *)a2 + 15);
    *((_WORD *)this + 38) |= 0x20u;
    *((_DWORD *)this + 15) = v11;
  }
  return this;
}

CMMsl *CMMsl::VisionCompassBias::operator=(CMMsl *a1, const CMMsl::VisionCompassBias *a2)
{
  CMMsl::VisionCompassBias *v3;
  _BYTE v5[80];

  if (a1 != a2)
  {
    CMMsl::VisionCompassBias::VisionCompassBias((CMMsl::VisionCompassBias *)v5, a2);
    CMMsl::swap(a1, (CMMsl::VisionCompassBias *)v5, v3);
    CMMsl::VisionCompassBias::~VisionCompassBias((CMMsl::VisionCompassBias *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::VisionCompassBias *a2, CMMsl::VisionCompassBias *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float result;

  v3 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v3;
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  v5 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v5;
  LODWORD(v5) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v5;
  LODWORD(v5) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v5;
  LODWORD(v5) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v5;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v7;
  v8 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v8;
  LODWORD(v5) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v5;
  result = *((float *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((float *)a2 + 17) = result;
  LODWORD(v8) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v8;
  LODWORD(v8) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v8;
  return result;
}

uint64_t CMMsl::VisionCompassBias::VisionCompassBias(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_251361A08;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a2 + 76) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  return a1;
}

CMMsl *CMMsl::VisionCompassBias::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::VisionCompassBias *v3;
  _BYTE v5[80];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::VisionCompassBias::VisionCompassBias((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::VisionCompassBias *)v5, v3);
    CMMsl::VisionCompassBias::~VisionCompassBias((CMMsl::VisionCompassBias *)v5);
  }
  return a1;
}

uint64_t CMMsl::VisionCompassBias::formatText(CMMsl::VisionCompassBias *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;
  float *v6;
  float *v7;
  float v8;
  __int16 v9;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 38);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "compassBias", *((float *)this + 12));
    v5 = *((_WORD *)this + 38);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "estimatedBiasUncertainty", *((float *)this + 13));
  v5 = *((_WORD *)this + 38);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "estimatedHeading", *((float *)this + 14));
  if ((*((_WORD *)this + 38) & 0x20) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "globalReferenceFrame");
LABEL_6:
  v6 = (float *)*((_QWORD *)this + 1);
  v7 = (float *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(a2, "lslGlobalToDeviceFrameRotationMatrix", v8);
  }
  v9 = *((_WORD *)this + 38);
  if ((v9 & 0x40) != 0)
  {
    PB::TextFormatter::format(a2, "lslHeadingAccuracy", *((float *)this + 16));
    v9 = *((_WORD *)this + 38);
    if ((v9 & 0x80) == 0)
    {
LABEL_10:
      if ((v9 & 1) == 0)
        goto LABEL_11;
      goto LABEL_21;
    }
  }
  else if ((v9 & 0x80) == 0)
  {
    goto LABEL_10;
  }
  PB::TextFormatter::format(a2, "lslHeadingConfidence", *((float *)this + 17));
  v9 = *((_WORD *)this + 38);
  if ((v9 & 1) == 0)
  {
LABEL_11:
    if ((v9 & 0x100) == 0)
      goto LABEL_12;
LABEL_22:
    PB::TextFormatter::format(a2, "roadID");
    if ((*((_WORD *)this + 38) & 2) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_13;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "machContinuousTimestamp", *((double *)this + 4));
  v9 = *((_WORD *)this + 38);
  if ((v9 & 0x100) != 0)
    goto LABEL_22;
LABEL_12:
  if ((v9 & 2) != 0)
LABEL_13:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 5));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::VisionCompassBias::readFrom(CMMsl::VisionCompassBias *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  _DWORD *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  unint64_t v57;
  char *v58;
  _DWORD *v59;
  char v60;
  unsigned int v61;
  unint64_t v62;
  char v63;
  char v64;
  unsigned int v65;
  unint64_t v66;
  char v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  _DWORD *v74;
  int v75;
  unint64_t v76;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      break;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 38) |= 1u;
        v19 = *((_QWORD *)a2 + 1);
        if (v19 > 0xFFFFFFFFFFFFFFF7 || v19 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_125;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v19);
        goto LABEL_29;
      case 2u:
        *((_WORD *)this + 38) |= 2u;
        v20 = *((_QWORD *)a2 + 1);
        if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_125;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v20);
LABEL_29:
        v21 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_128;
      case 3u:
        *((_WORD *)this + 38) |= 4u;
        v22 = *((_QWORD *)a2 + 1);
        if (v22 > 0xFFFFFFFFFFFFFFFBLL || v22 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_125;
        *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v22);
        goto LABEL_127;
      case 4u:
        *((_WORD *)this + 38) |= 0x10u;
        v23 = *((_QWORD *)a2 + 1);
        if (v23 > 0xFFFFFFFFFFFFFFFBLL || v23 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_125;
        *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v23);
        goto LABEL_127;
      case 5u:
        *((_WORD *)this + 38) |= 8u;
        v24 = *((_QWORD *)a2 + 1);
        if (v24 > 0xFFFFFFFFFFFFFFFBLL || v24 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_125;
        *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v24);
        goto LABEL_127;
      case 6u:
        if ((v11 & 7) == 2)
        {
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v25 = *((_QWORD *)a2 + 1);
          v26 = *((_QWORD *)a2 + 2);
          while (v25 < v26 && !*((_BYTE *)a2 + 24))
          {
            v28 = (char *)*((_QWORD *)this + 2);
            v27 = *((_QWORD *)this + 3);
            if ((unint64_t)v28 >= v27)
            {
              v30 = (char *)*((_QWORD *)this + 1);
              v31 = (v28 - v30) >> 2;
              v32 = v31 + 1;
              if ((unint64_t)(v31 + 1) >> 62)
                goto LABEL_138;
              v33 = v27 - (_QWORD)v30;
              if (v33 >> 1 > v32)
                v32 = v33 >> 1;
              if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
                v34 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v34 = v32;
              if (v34)
              {
                v34 = (unint64_t)sub_2429114B8(v34);
                v30 = (char *)*((_QWORD *)this + 1);
                v28 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v35 = 0;
              }
              v36 = (_DWORD *)(v34 + 4 * v31);
              *v36 = 0;
              v29 = v36 + 1;
              while (v28 != v30)
              {
                v37 = *((_DWORD *)v28 - 1);
                v28 -= 4;
                *--v36 = v37;
              }
              *((_QWORD *)this + 1) = v36;
              *((_QWORD *)this + 2) = v29;
              *((_QWORD *)this + 3) = v34 + 4 * v35;
              if (v30)
                operator delete(v30);
            }
            else
            {
              *(_DWORD *)v28 = 0;
              v29 = v28 + 4;
            }
            *((_QWORD *)this + 2) = v29;
            v38 = *((_QWORD *)a2 + 1);
            if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((_QWORD *)a2 + 2))
            {
              *((_BYTE *)a2 + 24) = 1;
              break;
            }
            *(v29 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v38);
            v26 = *((_QWORD *)a2 + 2);
            v25 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v25;
          }
          PB::Reader::recallMark();
        }
        else
        {
          v58 = (char *)*((_QWORD *)this + 2);
          v57 = *((_QWORD *)this + 3);
          if ((unint64_t)v58 >= v57)
          {
            v68 = (char *)*((_QWORD *)this + 1);
            v69 = (v58 - v68) >> 2;
            v70 = v69 + 1;
            if ((unint64_t)(v69 + 1) >> 62)
LABEL_138:
              sub_242729A44();
            v71 = v57 - (_QWORD)v68;
            if (v71 >> 1 > v70)
              v70 = v71 >> 1;
            if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL)
              v72 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v72 = v70;
            if (v72)
            {
              v72 = (unint64_t)sub_2429114B8(v72);
              v68 = (char *)*((_QWORD *)this + 1);
              v58 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v73 = 0;
            }
            v74 = (_DWORD *)(v72 + 4 * v69);
            *v74 = 0;
            v59 = v74 + 1;
            while (v58 != v68)
            {
              v75 = *((_DWORD *)v58 - 1);
              v58 -= 4;
              *--v74 = v75;
            }
            *((_QWORD *)this + 1) = v74;
            *((_QWORD *)this + 2) = v59;
            *((_QWORD *)this + 3) = v72 + 4 * v73;
            if (v68)
              operator delete(v68);
          }
          else
          {
            *(_DWORD *)v58 = 0;
            v59 = v58 + 4;
          }
          *((_QWORD *)this + 2) = v59;
          v76 = *((_QWORD *)a2 + 1);
          if (v76 <= 0xFFFFFFFFFFFFFFFBLL && v76 + 4 <= *((_QWORD *)a2 + 2))
          {
            *(v59 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v76);
LABEL_127:
            v21 = *((_QWORD *)a2 + 1) + 4;
LABEL_128:
            *((_QWORD *)a2 + 1) = v21;
          }
          else
          {
LABEL_125:
            *((_BYTE *)a2 + 24) = 1;
          }
        }
        break;
      case 7u:
        *((_WORD *)this + 38) |= 0x40u;
        v39 = *((_QWORD *)a2 + 1);
        if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_125;
        *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v39);
        goto LABEL_127;
      case 8u:
        *((_WORD *)this + 38) |= 0x80u;
        v40 = *((_QWORD *)a2 + 1);
        if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_125;
        *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v40);
        goto LABEL_127;
      case 9u:
        *((_WORD *)this + 38) |= 0x100u;
        v41 = *((_QWORD *)a2 + 1);
        v42 = *((_QWORD *)a2 + 2);
        v43 = *(_QWORD *)a2;
        if (v41 <= 0xFFFFFFFFFFFFFFF5 && v41 + 10 <= v42)
        {
          v44 = 0;
          v45 = 0;
          v46 = 0;
          do
          {
            v47 = v41 + 1;
            *((_QWORD *)a2 + 1) = v41 + 1;
            v48 = *(_BYTE *)(v43 + v41);
            v46 |= (unint64_t)(v48 & 0x7F) << v44;
            if ((v48 & 0x80) == 0)
              goto LABEL_111;
            v44 += 7;
            v41 = v47;
            v14 = v45++ > 8;
          }
          while (!v14);
LABEL_91:
          LODWORD(v46) = 0;
          goto LABEL_111;
        }
        v60 = 0;
        v61 = 0;
        v46 = 0;
        if (v42 <= v41)
          v42 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v42 == v41)
          {
            LODWORD(v46) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v62 = v41 + 1;
            v63 = *(_BYTE *)(v43 + v41);
            *((_QWORD *)a2 + 1) = v62;
            v46 |= (unint64_t)(v63 & 0x7F) << v60;
            if (v63 < 0)
            {
              v60 += 7;
              v41 = v62;
              v14 = v61++ > 8;
              if (v14)
                goto LABEL_91;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v46) = 0;
          }
          break;
        }
LABEL_111:
        *((_DWORD *)this + 18) = v46;
        break;
      case 0xAu:
        *((_WORD *)this + 38) |= 0x20u;
        v49 = *((_QWORD *)a2 + 1);
        v50 = *((_QWORD *)a2 + 2);
        v51 = *(_QWORD *)a2;
        if (v49 <= 0xFFFFFFFFFFFFFFF5 && v49 + 10 <= v50)
        {
          v52 = 0;
          v53 = 0;
          v54 = 0;
          do
          {
            v55 = v49 + 1;
            *((_QWORD *)a2 + 1) = v49 + 1;
            v56 = *(_BYTE *)(v51 + v49);
            v54 |= (unint64_t)(v56 & 0x7F) << v52;
            if ((v56 & 0x80) == 0)
              goto LABEL_114;
            v52 += 7;
            v49 = v55;
            v14 = v53++ > 8;
          }
          while (!v14);
LABEL_98:
          LODWORD(v54) = 0;
          goto LABEL_114;
        }
        v64 = 0;
        v65 = 0;
        v54 = 0;
        if (v50 <= v49)
          v50 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v50 == v49)
          {
            LODWORD(v54) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v66 = v49 + 1;
            v67 = *(_BYTE *)(v51 + v49);
            *((_QWORD *)a2 + 1) = v66;
            v54 |= (unint64_t)(v67 & 0x7F) << v64;
            if (v67 < 0)
            {
              v64 += 7;
              v49 = v66;
              v14 = v65++ > 8;
              if (v14)
                goto LABEL_98;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v54) = 0;
          }
          break;
        }
LABEL_114:
        *((_DWORD *)this + 15) = v54;
        break;
      default:
        goto LABEL_19;
    }
LABEL_129:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v15 = 0;
  v16 = 0;
  v11 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v17 = v2 + 1;
    v18 = *(_BYTE *)(v8 + v2);
    *((_QWORD *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0)
      goto LABEL_21;
    v15 += 7;
    v2 = v17;
    v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  if ((PB::Reader::skip(a2) & 1) != 0)
    goto LABEL_129;
  return 0;
}

uint64_t CMMsl::VisionCompassBias::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;
  float *v5;
  float *v6;
  float v7;
  __int16 v8;

  v3 = this;
  v4 = *(_WORD *)(this + 76);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32));
    v4 = *(_WORD *)(v3 + 76);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
LABEL_18:
    this = PB::Writer::write(a2, *(float *)(v3 + 56));
    if ((*(_WORD *)(v3 + 76) & 8) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x10) != 0)
    goto LABEL_18;
LABEL_5:
  if ((v4 & 8) != 0)
LABEL_6:
    this = PB::Writer::write(a2, *(float *)(v3 + 52));
LABEL_7:
  v5 = *(float **)(v3 + 8);
  v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7);
  }
  v8 = *(_WORD *)(v3 + 76);
  if ((v8 & 0x40) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 64));
    v8 = *(_WORD *)(v3 + 76);
    if ((v8 & 0x80) == 0)
    {
LABEL_12:
      if ((v8 & 0x100) == 0)
        goto LABEL_13;
      goto LABEL_22;
    }
  }
  else if ((v8 & 0x80) == 0)
  {
    goto LABEL_12;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 68));
  v8 = *(_WORD *)(v3 + 76);
  if ((v8 & 0x100) == 0)
  {
LABEL_13:
    if ((v8 & 0x20) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_22:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_WORD *)(v3 + 76) & 0x20) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::VisionCompassBias::hash_value(CMMsl::VisionCompassBias *this)
{
  __int16 v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;

  v2 = *((_WORD *)this + 38);
  if ((v2 & 1) == 0)
  {
    v3 = 0;
    if ((v2 & 2) != 0)
      goto LABEL_3;
LABEL_22:
    v4 = 0;
    if ((v2 & 4) != 0)
      goto LABEL_7;
LABEL_23:
    v6 = 0;
    if ((v2 & 0x10) != 0)
      goto LABEL_11;
    goto LABEL_24;
  }
  if (*((double *)this + 4) == 0.0)
    v3 = 0;
  else
    v3 = *((_QWORD *)this + 4);
  if ((v2 & 2) == 0)
    goto LABEL_22;
LABEL_3:
  if (*((double *)this + 5) == 0.0)
    v4 = 0;
  else
    v4 = *((_QWORD *)this + 5);
  if ((v2 & 4) == 0)
    goto LABEL_23;
LABEL_7:
  v5 = *((float *)this + 12);
  if (v5 == 0.0)
    v6 = 0;
  else
    v6 = LODWORD(v5);
  if ((v2 & 0x10) != 0)
  {
LABEL_11:
    v7 = *((float *)this + 14);
    if (v7 == 0.0)
      v8 = 0;
    else
      v8 = LODWORD(v7);
    if ((v2 & 8) != 0)
      goto LABEL_15;
LABEL_25:
    v10 = 0;
    goto LABEL_26;
  }
LABEL_24:
  v8 = 0;
  if ((v2 & 8) == 0)
    goto LABEL_25;
LABEL_15:
  v9 = *((float *)this + 13);
  if (v9 == 0.0)
    v10 = 0;
  else
    v10 = LODWORD(v9);
LABEL_26:
  v11 = PBHashBytes();
  v12 = *((_WORD *)this + 38);
  if ((v12 & 0x40) == 0)
  {
    v13 = 0;
    if ((v12 & 0x80) != 0)
      goto LABEL_28;
LABEL_36:
    v15 = 0;
    if ((*((_WORD *)this + 38) & 0x100) != 0)
      goto LABEL_31;
LABEL_37:
    v16 = 0;
    if ((v12 & 0x20) != 0)
      goto LABEL_32;
LABEL_38:
    v17 = 0;
    return v4 ^ v3 ^ v6 ^ v8 ^ v10 ^ v13 ^ v15 ^ v16 ^ v11 ^ v17;
  }
  v18 = *((float *)this + 16);
  v13 = LODWORD(v18);
  if (v18 == 0.0)
    v13 = 0;
  if ((v12 & 0x80) == 0)
    goto LABEL_36;
LABEL_28:
  v14 = *((float *)this + 17);
  v15 = LODWORD(v14);
  if (v14 == 0.0)
    v15 = 0;
  if ((*((_WORD *)this + 38) & 0x100) == 0)
    goto LABEL_37;
LABEL_31:
  v16 = *((unsigned int *)this + 18);
  if ((v12 & 0x20) == 0)
    goto LABEL_38;
LABEL_32:
  v17 = *((unsigned int *)this + 15);
  return v4 ^ v3 ^ v6 ^ v8 ^ v10 ^ v13 ^ v15 ^ v16 ^ v11 ^ v17;
}

void CMMsl::VisualLocalization::~VisualLocalization(CMMsl::VisualLocalization *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_251361A40;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::VisualLocalization::~VisualLocalization(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::VisualLocalization *CMMsl::VisualLocalization::VisualLocalization(CMMsl::VisualLocalization *this, const CMMsl::VisualLocalization *a2)
{
  _QWORD *v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)this = &off_251361A40;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (_QWORD *)((char *)this + 8);
  *((_DWORD *)this + 25) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  v5 = *((_BYTE *)a2 + 100);
  if ((v5 & 0x10) != 0)
  {
    v7 = *((_QWORD *)a2 + 11);
    v6 = 16;
    *((_BYTE *)this + 100) = 16;
    *((_QWORD *)this + 11) = v7;
    v5 = *((_BYTE *)a2 + 100);
    if ((v5 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((*((_BYTE *)a2 + 100) & 4) != 0)
  {
LABEL_5:
    v8 = *((_QWORD *)a2 + 9);
    v6 |= 4u;
    *((_BYTE *)this + 100) = v6;
    *((_QWORD *)this + 9) = v8;
    v5 = *((_BYTE *)a2 + 100);
  }
LABEL_6:
  if ((v5 & 8) != 0)
  {
    v12 = *((_QWORD *)a2 + 10);
    v6 |= 8u;
    *((_BYTE *)this + 100) = v6;
    *((_QWORD *)this + 10) = v12;
    v5 = *((_BYTE *)a2 + 100);
    if ((v5 & 1) == 0)
    {
LABEL_8:
      if ((v5 & 2) == 0)
        goto LABEL_10;
      goto LABEL_9;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_8;
  }
  v13 = *((_QWORD *)a2 + 7);
  v6 |= 1u;
  *((_BYTE *)this + 100) = v6;
  *((_QWORD *)this + 7) = v13;
  if ((*((_BYTE *)a2 + 100) & 2) != 0)
  {
LABEL_9:
    v9 = *((_QWORD *)a2 + 8);
    *((_BYTE *)this + 100) = v6 | 2;
    *((_QWORD *)this + 8) = v9;
  }
LABEL_10:
  if (this != a2)
  {
    sub_2429111C4((_QWORD *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3);
    sub_242911380(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  }
  if ((*((_BYTE *)a2 + 100) & 0x20) != 0)
  {
    v10 = *((_DWORD *)a2 + 24);
    *((_BYTE *)this + 100) |= 0x20u;
    *((_DWORD *)this + 24) = v10;
  }
  return this;
}

CMMsl *CMMsl::VisualLocalization::operator=(CMMsl *a1, const CMMsl::VisualLocalization *a2)
{
  CMMsl::VisualLocalization *v3;
  _BYTE v5[104];

  if (a1 != a2)
  {
    CMMsl::VisualLocalization::VisualLocalization((CMMsl::VisualLocalization *)v5, a2);
    CMMsl::swap(a1, (CMMsl::VisualLocalization *)v5, v3);
    CMMsl::VisualLocalization::~VisualLocalization((CMMsl::VisualLocalization *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::VisualLocalization *a2, CMMsl::VisualLocalization *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float result;

  v3 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v3;
  v4 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v4;
  v5 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v5;
  v6 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v6;
  v7 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v7;
  v8 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v8;
  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v9;
  v10 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v10;
  v11 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v11;
  v12 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v12;
  v13 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v13;
  v14 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v14;
  result = *((float *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((float *)a2 + 24) = result;
  return result;
}

uint64_t CMMsl::VisualLocalization::VisualLocalization(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_251361A40;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a2 + 100) = 0;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  sub_242911330(a1 + 32, (__n128 *)(a2 + 32));
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  return a1;
}

CMMsl *CMMsl::VisualLocalization::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::VisualLocalization *v3;
  _BYTE v5[104];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::VisualLocalization::VisualLocalization((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::VisualLocalization *)v5, v3);
    CMMsl::VisualLocalization::~VisualLocalization((CMMsl::VisualLocalization *)v5);
  }
  return a1;
}

uint64_t CMMsl::VisualLocalization::formatText(CMMsl::VisualLocalization *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;
  float *v6;
  float *v7;
  float v8;
  char v9;
  double *v10;
  double *v11;
  double v12;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 100);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "altitudeOfLocalizedPoseInEcefCoordinate", *((double *)this + 7));
    v5 = *((_BYTE *)this + 100);
  }
  if ((v5 & 0x20) != 0)
    PB::TextFormatter::format(a2, "confidence", *((float *)this + 24));
  v6 = (float *)*((_QWORD *)this + 1);
  v7 = (float *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(a2, "covariance", v8);
  }
  v9 = *((_BYTE *)this + 100);
  if ((v9 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "horizontalAccuracyOfLocalizedPoseInEcefCoordinate", *((double *)this + 8));
    v9 = *((_BYTE *)this + 100);
    if ((v9 & 4) == 0)
    {
LABEL_9:
      if ((v9 & 8) == 0)
        goto LABEL_10;
      goto LABEL_17;
    }
  }
  else if ((*((_BYTE *)this + 100) & 4) == 0)
  {
    goto LABEL_9;
  }
  PB::TextFormatter::format(a2, "latitudeOfLocalizedPoseInEcefCoordinate", *((double *)this + 9));
  v9 = *((_BYTE *)this + 100);
  if ((v9 & 8) == 0)
  {
LABEL_10:
    if ((v9 & 0x10) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "longitudeOfLocalizedPoseInEcefCoordinate", *((double *)this + 10));
  if ((*((_BYTE *)this + 100) & 0x10) != 0)
LABEL_11:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 11));
LABEL_12:
  v10 = (double *)*((_QWORD *)this + 4);
  v11 = (double *)*((_QWORD *)this + 5);
  while (v10 != v11)
  {
    v12 = *v10++;
    PB::TextFormatter::format(a2, "transformMatrixFromCameraToEcefCoordinate", v12);
  }
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::VisualLocalization::readFrom(CMMsl::VisualLocalization *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  _DWORD *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  _QWORD *v56;
  unint64_t v57;
  char *v58;
  _DWORD *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  _DWORD *v76;
  int v77;
  unint64_t v78;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      break;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    v19 = v11 & 7;
    if (v19 == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 100) |= 0x10u;
        v20 = *((_QWORD *)a2 + 1);
        if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_129;
        *((_QWORD *)this + 11) = *(_QWORD *)(*(_QWORD *)a2 + v20);
        goto LABEL_120;
      case 2u:
        *((_BYTE *)this + 100) |= 4u;
        v21 = *((_QWORD *)a2 + 1);
        if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_129;
        *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v21);
        goto LABEL_120;
      case 3u:
        *((_BYTE *)this + 100) |= 8u;
        v22 = *((_QWORD *)a2 + 1);
        if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_129;
        *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v22);
        goto LABEL_120;
      case 4u:
        *((_BYTE *)this + 100) |= 1u;
        v23 = *((_QWORD *)a2 + 1);
        if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_129;
        *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v23);
        goto LABEL_120;
      case 5u:
        *((_BYTE *)this + 100) |= 2u;
        v24 = *((_QWORD *)a2 + 1);
        if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_129;
        *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v24);
        goto LABEL_120;
      case 6u:
        if (v19 == 2)
        {
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v25 = *((_QWORD *)a2 + 1);
          v26 = *((_QWORD *)a2 + 2);
          while (v25 < v26 && !*((_BYTE *)a2 + 24))
          {
            v28 = (char *)*((_QWORD *)this + 5);
            v27 = *((_QWORD *)this + 6);
            if ((unint64_t)v28 >= v27)
            {
              v30 = (char *)*((_QWORD *)this + 4);
              v31 = (v28 - v30) >> 3;
              v32 = v31 + 1;
              if ((unint64_t)(v31 + 1) >> 61)
                goto LABEL_140;
              v33 = v27 - (_QWORD)v30;
              if (v33 >> 2 > v32)
                v32 = v33 >> 2;
              if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
                v34 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v34 = v32;
              if (v34)
              {
                v34 = (unint64_t)sub_2429112FC(v34);
                v30 = (char *)*((_QWORD *)this + 4);
                v28 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v35 = 0;
              }
              v36 = (_QWORD *)(v34 + 8 * v31);
              *v36 = 0;
              v29 = v36 + 1;
              while (v28 != v30)
              {
                v37 = *((_QWORD *)v28 - 1);
                v28 -= 8;
                *--v36 = v37;
              }
              *((_QWORD *)this + 4) = v36;
              *((_QWORD *)this + 5) = v29;
              *((_QWORD *)this + 6) = v34 + 8 * v35;
              if (v30)
                operator delete(v30);
            }
            else
            {
              *(_QWORD *)v28 = 0;
              v29 = v28 + 8;
            }
            *((_QWORD *)this + 5) = v29;
            v38 = *((_QWORD *)a2 + 1);
            if (v38 > 0xFFFFFFFFFFFFFFF7 || v38 + 8 > *((_QWORD *)a2 + 2))
              goto LABEL_93;
            *(v29 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v38);
            v26 = *((_QWORD *)a2 + 2);
            v25 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v25;
          }
          goto LABEL_94;
        }
        v55 = (char *)*((_QWORD *)this + 5);
        v54 = *((_QWORD *)this + 6);
        if ((unint64_t)v55 >= v54)
        {
          v60 = (char *)*((_QWORD *)this + 4);
          v61 = (v55 - v60) >> 3;
          v62 = v61 + 1;
          if ((unint64_t)(v61 + 1) >> 61)
LABEL_140:
            sub_242729A44();
          v63 = v54 - (_QWORD)v60;
          if (v63 >> 2 > v62)
            v62 = v63 >> 2;
          if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8)
            v64 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v64 = v62;
          if (v64)
          {
            v64 = (unint64_t)sub_2429112FC(v64);
            v60 = (char *)*((_QWORD *)this + 4);
            v55 = (char *)*((_QWORD *)this + 5);
          }
          else
          {
            v65 = 0;
          }
          v72 = (_QWORD *)(v64 + 8 * v61);
          *v72 = 0;
          v56 = v72 + 1;
          while (v55 != v60)
          {
            v73 = *((_QWORD *)v55 - 1);
            v55 -= 8;
            *--v72 = v73;
          }
          *((_QWORD *)this + 4) = v72;
          *((_QWORD *)this + 5) = v56;
          *((_QWORD *)this + 6) = v64 + 8 * v65;
          if (v60)
            operator delete(v60);
        }
        else
        {
          *(_QWORD *)v55 = 0;
          v56 = v55 + 8;
        }
        *((_QWORD *)this + 5) = v56;
        v74 = *((_QWORD *)a2 + 1);
        if (v74 <= 0xFFFFFFFFFFFFFFF7 && v74 + 8 <= *((_QWORD *)a2 + 2))
        {
          *(v56 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v74);
LABEL_120:
          v75 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_132;
        }
        goto LABEL_129;
      case 7u:
        if (v19 == 2)
        {
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v39 = *((_QWORD *)a2 + 1);
          v40 = *((_QWORD *)a2 + 2);
          while (v39 < v40 && !*((_BYTE *)a2 + 24))
          {
            v42 = (char *)*((_QWORD *)this + 2);
            v41 = *((_QWORD *)this + 3);
            if ((unint64_t)v42 >= v41)
            {
              v44 = (char *)*((_QWORD *)this + 1);
              v45 = (v42 - v44) >> 2;
              v46 = v45 + 1;
              if ((unint64_t)(v45 + 1) >> 62)
                goto LABEL_141;
              v47 = v41 - (_QWORD)v44;
              if (v47 >> 1 > v46)
                v46 = v47 >> 1;
              if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL)
                v48 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v48 = v46;
              if (v48)
              {
                v48 = (unint64_t)sub_2429114B8(v48);
                v44 = (char *)*((_QWORD *)this + 1);
                v42 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v49 = 0;
              }
              v50 = (_DWORD *)(v48 + 4 * v45);
              *v50 = 0;
              v43 = v50 + 1;
              while (v42 != v44)
              {
                v51 = *((_DWORD *)v42 - 1);
                v42 -= 4;
                *--v50 = v51;
              }
              *((_QWORD *)this + 1) = v50;
              *((_QWORD *)this + 2) = v43;
              *((_QWORD *)this + 3) = v48 + 4 * v49;
              if (v44)
                operator delete(v44);
            }
            else
            {
              *(_DWORD *)v42 = 0;
              v43 = v42 + 4;
            }
            *((_QWORD *)this + 2) = v43;
            v52 = *((_QWORD *)a2 + 1);
            if (v52 > 0xFFFFFFFFFFFFFFFBLL || v52 + 4 > *((_QWORD *)a2 + 2))
            {
LABEL_93:
              *((_BYTE *)a2 + 24) = 1;
              break;
            }
            *(v43 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v52);
            v40 = *((_QWORD *)a2 + 2);
            v39 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v39;
          }
LABEL_94:
          PB::Reader::recallMark();
        }
        else
        {
          v58 = (char *)*((_QWORD *)this + 2);
          v57 = *((_QWORD *)this + 3);
          if ((unint64_t)v58 >= v57)
          {
            v66 = (char *)*((_QWORD *)this + 1);
            v67 = (v58 - v66) >> 2;
            v68 = v67 + 1;
            if ((unint64_t)(v67 + 1) >> 62)
LABEL_141:
              sub_242729A44();
            v69 = v57 - (_QWORD)v66;
            if (v69 >> 1 > v68)
              v68 = v69 >> 1;
            if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFFCLL)
              v70 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v70 = v68;
            if (v70)
            {
              v70 = (unint64_t)sub_2429114B8(v70);
              v66 = (char *)*((_QWORD *)this + 1);
              v58 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v71 = 0;
            }
            v76 = (_DWORD *)(v70 + 4 * v67);
            *v76 = 0;
            v59 = v76 + 1;
            while (v58 != v66)
            {
              v77 = *((_DWORD *)v58 - 1);
              v58 -= 4;
              *--v76 = v77;
            }
            *((_QWORD *)this + 1) = v76;
            *((_QWORD *)this + 2) = v59;
            *((_QWORD *)this + 3) = v70 + 4 * v71;
            if (v66)
              operator delete(v66);
          }
          else
          {
            *(_DWORD *)v58 = 0;
            v59 = v58 + 4;
          }
          *((_QWORD *)this + 2) = v59;
          v78 = *((_QWORD *)a2 + 1);
          if (v78 <= 0xFFFFFFFFFFFFFFFBLL && v78 + 4 <= *((_QWORD *)a2 + 2))
          {
            *(v59 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v78);
LABEL_131:
            v75 = *((_QWORD *)a2 + 1) + 4;
LABEL_132:
            *((_QWORD *)a2 + 1) = v75;
          }
          else
          {
LABEL_129:
            *((_BYTE *)a2 + 24) = 1;
          }
        }
        break;
      case 8u:
        *((_BYTE *)this + 100) |= 0x20u;
        v53 = *((_QWORD *)a2 + 1);
        if (v53 > 0xFFFFFFFFFFFFFFFBLL || v53 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_129;
        *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v53);
        goto LABEL_131;
      default:
        goto LABEL_19;
    }
LABEL_133:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v15 = 0;
  v16 = 0;
  v11 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v17 = v2 + 1;
    v18 = *(_BYTE *)(v8 + v2);
    *((_QWORD *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0)
      goto LABEL_21;
    v15 += 7;
    v2 = v17;
    v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  if ((PB::Reader::skip(a2) & 1) != 0)
    goto LABEL_133;
  return 0;
}

uint64_t CMMsl::VisualLocalization::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  double *v5;
  double *v6;
  double v7;
  float *v8;
  float *v9;
  float v10;

  v3 = this;
  v4 = *(_BYTE *)(this + 100);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 88));
    v4 = *(_BYTE *)(v3 + 100);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((*(_BYTE *)(this + 100) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 72));
  v4 = *(_BYTE *)(v3 + 100);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
LABEL_18:
    this = PB::Writer::write(a2, *(double *)(v3 + 56));
    if ((*(_BYTE *)(v3 + 100) & 2) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 80));
  v4 = *(_BYTE *)(v3 + 100);
  if ((v4 & 1) != 0)
    goto LABEL_18;
LABEL_5:
  if ((v4 & 2) != 0)
LABEL_6:
    this = PB::Writer::write(a2, *(double *)(v3 + 64));
LABEL_7:
  v5 = *(double **)(v3 + 32);
  v6 = *(double **)(v3 + 40);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7);
  }
  v8 = *(float **)(v3 + 8);
  v9 = *(float **)(v3 + 16);
  while (v8 != v9)
  {
    v10 = *v8++;
    this = PB::Writer::write(a2, v10);
  }
  if ((*(_BYTE *)(v3 + 100) & 0x20) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 96));
  return this;
}

uint64_t CMMsl::VisualLocalization::hash_value(CMMsl::VisualLocalization *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;

  if ((*((_BYTE *)this + 100) & 0x10) == 0)
  {
    v2 = 0;
    if ((*((_BYTE *)this + 100) & 4) != 0)
      goto LABEL_3;
LABEL_22:
    v3 = 0;
    if ((*((_BYTE *)this + 100) & 8) != 0)
      goto LABEL_7;
LABEL_23:
    v4 = 0;
    if ((*((_BYTE *)this + 100) & 1) != 0)
      goto LABEL_11;
    goto LABEL_24;
  }
  if (*((double *)this + 11) == 0.0)
    v2 = 0;
  else
    v2 = *((_QWORD *)this + 11);
  if ((*((_BYTE *)this + 100) & 4) == 0)
    goto LABEL_22;
LABEL_3:
  if (*((double *)this + 9) == 0.0)
    v3 = 0;
  else
    v3 = *((_QWORD *)this + 9);
  if ((*((_BYTE *)this + 100) & 8) == 0)
    goto LABEL_23;
LABEL_7:
  if (*((double *)this + 10) == 0.0)
    v4 = 0;
  else
    v4 = *((_QWORD *)this + 10);
  if ((*((_BYTE *)this + 100) & 1) != 0)
  {
LABEL_11:
    if (*((double *)this + 7) == 0.0)
      v5 = 0;
    else
      v5 = *((_QWORD *)this + 7);
    if ((*((_BYTE *)this + 100) & 2) != 0)
      goto LABEL_15;
LABEL_25:
    v6 = 0;
    goto LABEL_26;
  }
LABEL_24:
  v5 = 0;
  if ((*((_BYTE *)this + 100) & 2) == 0)
    goto LABEL_25;
LABEL_15:
  if (*((double *)this + 8) == 0.0)
    v6 = 0;
  else
    v6 = *((_QWORD *)this + 8);
LABEL_26:
  v7 = PBHashBytes();
  v8 = PBHashBytes();
  if ((*((_BYTE *)this + 100) & 0x20) != 0)
  {
    v10 = *((float *)this + 24);
    v9 = LODWORD(v10);
    if (v10 == 0.0)
      v9 = 0;
  }
  else
  {
    v9 = 0;
  }
  return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9;
}

void CMMsl::VisualLocalizationAttitudeConstraints::~VisualLocalizationAttitudeConstraints(CMMsl::VisualLocalizationAttitudeConstraints *this)
{
  void *v2;

  *(_QWORD *)this = &off_251361A78;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::VisualLocalizationAttitudeConstraints::~VisualLocalizationAttitudeConstraints(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::VisualLocalizationAttitudeConstraints *CMMsl::VisualLocalizationAttitudeConstraints::VisualLocalizationAttitudeConstraints(CMMsl::VisualLocalizationAttitudeConstraints *this, const CMMsl::VisualLocalizationAttitudeConstraints *a2)
{
  _QWORD *v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v12;

  *(_QWORD *)this = &off_251361A78;
  *((_QWORD *)this + 1) = 0;
  v4 = (_QWORD *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 15) = 0;
  v5 = *((_BYTE *)a2 + 60);
  if ((v5 & 2) != 0)
  {
    v7 = *((_QWORD *)a2 + 5);
    v6 = 2;
    *((_BYTE *)this + 60) = 2;
    *((_QWORD *)this + 5) = v7;
    v5 = *((_BYTE *)a2 + 60);
    if ((v5 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((*((_BYTE *)a2 + 60) & 1) != 0)
  {
LABEL_5:
    v8 = *((_QWORD *)a2 + 4);
    v6 |= 1u;
    *((_BYTE *)this + 60) = v6;
    *((_QWORD *)this + 4) = v8;
    v5 = *((_BYTE *)a2 + 60);
  }
LABEL_6:
  if ((v5 & 0x10) == 0)
  {
    if ((v5 & 8) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
  v12 = *((_DWORD *)a2 + 14);
  v6 |= 0x10u;
  *((_BYTE *)this + 60) = v6;
  *((_DWORD *)this + 14) = v12;
  if ((*((_BYTE *)a2 + 60) & 8) != 0)
  {
LABEL_8:
    v9 = *((_DWORD *)a2 + 13);
    *((_BYTE *)this + 60) = v6 | 8;
    *((_DWORD *)this + 13) = v9;
  }
LABEL_9:
  if (this != a2)
    sub_242911380(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  if ((*((_BYTE *)a2 + 60) & 4) != 0)
  {
    v10 = *((_DWORD *)a2 + 12);
    *((_BYTE *)this + 60) |= 4u;
    *((_DWORD *)this + 12) = v10;
  }
  return this;
}

uint64_t CMMsl::VisualLocalizationAttitudeConstraints::operator=(uint64_t a1, const CMMsl::VisualLocalizationAttitudeConstraints *a2)
{
  int v3;
  __int128 v4;
  int v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  int v15;

  if ((const CMMsl::VisualLocalizationAttitudeConstraints *)a1 != a2)
  {
    CMMsl::VisualLocalizationAttitudeConstraints::VisualLocalizationAttitudeConstraints((CMMsl::VisualLocalizationAttitudeConstraints *)&v9, a2);
    v3 = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a1 + 60) = v15;
    v15 = v3;
    v4 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v12;
    v12 = v4;
    v5 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v14;
    v14 = v5;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v6;
    v7 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v11;
    v11 = v7;
    *(_QWORD *)&v6 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v13;
    v13 = v6;
    CMMsl::VisualLocalizationAttitudeConstraints::~VisualLocalizationAttitudeConstraints((CMMsl::VisualLocalizationAttitudeConstraints *)&v9);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::VisualLocalizationAttitudeConstraints *a2, CMMsl::VisualLocalizationAttitudeConstraints *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float result;

  v3 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v3;
  v4 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v4;
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v5;
  LODWORD(v5) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v5;
  LODWORD(v5) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v5;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v7;
  v8 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v8;
  result = *((float *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((float *)a2 + 12) = result;
  return result;
}

uint64_t CMMsl::VisualLocalizationAttitudeConstraints::VisualLocalizationAttitudeConstraints(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_251361A78;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  return a1;
}

uint64_t CMMsl::VisualLocalizationAttitudeConstraints::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  int v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  int v15;

  if (a1 != a2)
  {
    CMMsl::VisualLocalizationAttitudeConstraints::VisualLocalizationAttitudeConstraints((uint64_t)&v9, a2);
    v3 = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a1 + 60) = v15;
    v15 = v3;
    v4 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v12;
    v12 = v4;
    v5 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v14;
    v14 = v5;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v6;
    v7 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v11;
    v11 = v7;
    *(_QWORD *)&v6 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v13;
    v13 = v6;
    CMMsl::VisualLocalizationAttitudeConstraints::~VisualLocalizationAttitudeConstraints((CMMsl::VisualLocalizationAttitudeConstraints *)&v9);
  }
  return a1;
}

uint64_t CMMsl::VisualLocalizationAttitudeConstraints::formatText(CMMsl::VisualLocalizationAttitudeConstraints *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;
  float *v6;
  float *v7;
  float v8;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 60);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "deltaHeading", *((float *)this + 12));
    v5 = *((_BYTE *)this + 60);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((*((_BYTE *)this + 60) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "gravityZ", *((float *)this + 13));
  v5 = *((_BYTE *)this + 60);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "lastStateTimestamp", *((double *)this + 4));
  if ((*((_BYTE *)this + 60) & 0x10) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "meanRotRate", *((float *)this + 14));
LABEL_6:
  v6 = (float *)*((_QWORD *)this + 1);
  v7 = (float *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(a2, "quaternion", v8);
  }
  if ((*((_BYTE *)this + 60) & 2) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 5));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::VisualLocalizationAttitudeConstraints::readFrom(CMMsl::VisualLocalizationAttitudeConstraints *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  _DWORD *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  _DWORD *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  int v49;
  unint64_t v50;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      break;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 60) |= 2u;
        v19 = *((_QWORD *)a2 + 1);
        if (v19 > 0xFFFFFFFFFFFFFFF7 || v19 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_83;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v19);
        goto LABEL_29;
      case 2u:
        *((_BYTE *)this + 60) |= 1u;
        v20 = *((_QWORD *)a2 + 1);
        if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_83;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v20);
LABEL_29:
        v21 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_86;
      case 3u:
        *((_BYTE *)this + 60) |= 0x10u;
        v22 = *((_QWORD *)a2 + 1);
        if (v22 > 0xFFFFFFFFFFFFFFFBLL || v22 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_83;
        *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v22);
        goto LABEL_85;
      case 4u:
        *((_BYTE *)this + 60) |= 8u;
        v23 = *((_QWORD *)a2 + 1);
        if (v23 > 0xFFFFFFFFFFFFFFFBLL || v23 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_83;
        *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v23);
        goto LABEL_85;
      case 5u:
        if ((v11 & 7) == 2)
        {
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v24 = *((_QWORD *)a2 + 1);
          v25 = *((_QWORD *)a2 + 2);
          while (v24 < v25 && !*((_BYTE *)a2 + 24))
          {
            v27 = (char *)*((_QWORD *)this + 2);
            v26 = *((_QWORD *)this + 3);
            if ((unint64_t)v27 >= v26)
            {
              v29 = (char *)*((_QWORD *)this + 1);
              v30 = (v27 - v29) >> 2;
              v31 = v30 + 1;
              if ((unint64_t)(v30 + 1) >> 62)
                goto LABEL_94;
              v32 = v26 - (_QWORD)v29;
              if (v32 >> 1 > v31)
                v31 = v32 >> 1;
              if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
                v33 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v33 = v31;
              if (v33)
              {
                v33 = (unint64_t)sub_2429114B8(v33);
                v29 = (char *)*((_QWORD *)this + 1);
                v27 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v34 = 0;
              }
              v35 = (_DWORD *)(v33 + 4 * v30);
              *v35 = 0;
              v28 = v35 + 1;
              while (v27 != v29)
              {
                v36 = *((_DWORD *)v27 - 1);
                v27 -= 4;
                *--v35 = v36;
              }
              *((_QWORD *)this + 1) = v35;
              *((_QWORD *)this + 2) = v28;
              *((_QWORD *)this + 3) = v33 + 4 * v34;
              if (v29)
                operator delete(v29);
            }
            else
            {
              *(_DWORD *)v27 = 0;
              v28 = v27 + 4;
            }
            *((_QWORD *)this + 2) = v28;
            v37 = *((_QWORD *)a2 + 1);
            if (v37 > 0xFFFFFFFFFFFFFFFBLL || v37 + 4 > *((_QWORD *)a2 + 2))
            {
              *((_BYTE *)a2 + 24) = 1;
              break;
            }
            *(v28 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v37);
            v25 = *((_QWORD *)a2 + 2);
            v24 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v24;
          }
          PB::Reader::recallMark();
        }
        else
        {
          v40 = (char *)*((_QWORD *)this + 2);
          v39 = *((_QWORD *)this + 3);
          if ((unint64_t)v40 >= v39)
          {
            v42 = (char *)*((_QWORD *)this + 1);
            v43 = (v40 - v42) >> 2;
            v44 = v43 + 1;
            if ((unint64_t)(v43 + 1) >> 62)
LABEL_94:
              sub_242729A44();
            v45 = v39 - (_QWORD)v42;
            if (v45 >> 1 > v44)
              v44 = v45 >> 1;
            if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL)
              v46 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v46 = v44;
            if (v46)
            {
              v46 = (unint64_t)sub_2429114B8(v46);
              v42 = (char *)*((_QWORD *)this + 1);
              v40 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v47 = 0;
            }
            v48 = (_DWORD *)(v46 + 4 * v43);
            *v48 = 0;
            v41 = v48 + 1;
            while (v40 != v42)
            {
              v49 = *((_DWORD *)v40 - 1);
              v40 -= 4;
              *--v48 = v49;
            }
            *((_QWORD *)this + 1) = v48;
            *((_QWORD *)this + 2) = v41;
            *((_QWORD *)this + 3) = v46 + 4 * v47;
            if (v42)
              operator delete(v42);
          }
          else
          {
            *(_DWORD *)v40 = 0;
            v41 = v40 + 4;
          }
          *((_QWORD *)this + 2) = v41;
          v50 = *((_QWORD *)a2 + 1);
          if (v50 <= 0xFFFFFFFFFFFFFFFBLL && v50 + 4 <= *((_QWORD *)a2 + 2))
          {
            *(v41 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v50);
LABEL_85:
            v21 = *((_QWORD *)a2 + 1) + 4;
LABEL_86:
            *((_QWORD *)a2 + 1) = v21;
          }
          else
          {
LABEL_83:
            *((_BYTE *)a2 + 24) = 1;
          }
        }
        break;
      case 6u:
        *((_BYTE *)this + 60) |= 4u;
        v38 = *((_QWORD *)a2 + 1);
        if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_83;
        *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v38);
        goto LABEL_85;
      default:
        goto LABEL_19;
    }
LABEL_87:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v15 = 0;
  v16 = 0;
  v11 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v17 = v2 + 1;
    v18 = *(_BYTE *)(v8 + v2);
    *((_QWORD *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0)
      goto LABEL_21;
    v15 += 7;
    v2 = v17;
    v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  if ((PB::Reader::skip(a2) & 1) != 0)
    goto LABEL_87;
  return 0;
}

uint64_t CMMsl::VisualLocalizationAttitudeConstraints::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  float *v5;
  float *v6;
  float v7;

  v3 = this;
  v4 = *(_BYTE *)(this + 60);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 40));
    v4 = *(_BYTE *)(v3 + 60);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
LABEL_13:
      this = PB::Writer::write(a2, *(float *)(v3 + 56));
      if ((*(_BYTE *)(v3 + 60) & 8) == 0)
        goto LABEL_6;
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(this + 60) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  v4 = *(_BYTE *)(v3 + 60);
  if ((v4 & 0x10) != 0)
    goto LABEL_13;
LABEL_4:
  if ((v4 & 8) != 0)
LABEL_5:
    this = PB::Writer::write(a2, *(float *)(v3 + 52));
LABEL_6:
  v5 = *(float **)(v3 + 8);
  v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7);
  }
  if ((*(_BYTE *)(v3 + 60) & 4) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 48));
  return this;
}

uint64_t CMMsl::VisualLocalizationAttitudeConstraints::hash_value(CMMsl::VisualLocalizationAttitudeConstraints *this)
{
  uint64_t v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;

  if ((*((_BYTE *)this + 60) & 2) == 0)
  {
    v2 = 0;
    if ((*((_BYTE *)this + 60) & 1) != 0)
      goto LABEL_3;
LABEL_18:
    v3 = 0;
    if ((*((_BYTE *)this + 60) & 0x10) != 0)
      goto LABEL_7;
    goto LABEL_19;
  }
  if (*((double *)this + 5) == 0.0)
    v2 = 0;
  else
    v2 = *((_QWORD *)this + 5);
  if ((*((_BYTE *)this + 60) & 1) == 0)
    goto LABEL_18;
LABEL_3:
  if (*((double *)this + 4) == 0.0)
    v3 = 0;
  else
    v3 = *((_QWORD *)this + 4);
  if ((*((_BYTE *)this + 60) & 0x10) != 0)
  {
LABEL_7:
    v4 = *((float *)this + 14);
    if (v4 == 0.0)
      v5 = 0;
    else
      v5 = LODWORD(v4);
    if ((*((_BYTE *)this + 60) & 8) != 0)
      goto LABEL_11;
LABEL_20:
    v7 = 0;
    goto LABEL_21;
  }
LABEL_19:
  v5 = 0;
  if ((*((_BYTE *)this + 60) & 8) == 0)
    goto LABEL_20;
LABEL_11:
  v6 = *((float *)this + 13);
  if (v6 == 0.0)
    v7 = 0;
  else
    v7 = LODWORD(v6);
LABEL_21:
  v8 = PBHashBytes();
  if ((*((_BYTE *)this + 60) & 4) != 0)
  {
    v10 = *((float *)this + 12);
    v9 = LODWORD(v10);
    if (v10 == 0.0)
      v9 = 0;
  }
  else
  {
    v9 = 0;
  }
  return v3 ^ v2 ^ v5 ^ v7 ^ v9 ^ v8;
}

void CMMsl::VisualLocalizationAttitudeCorrection::~VisualLocalizationAttitudeCorrection(CMMsl::VisualLocalizationAttitudeCorrection *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_251361AB0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_251361AB0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_251361AB0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::VisualLocalizationAttitudeCorrection *CMMsl::VisualLocalizationAttitudeCorrection::VisualLocalizationAttitudeCorrection(CMMsl::VisualLocalizationAttitudeCorrection *this, const CMMsl::DeviceMotionCorrection **a2)
{
  CMMsl::DeviceMotionCorrection *v4;
  CMMsl::DeviceMotionCorrection *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_251361AB0;
  *((_QWORD *)this + 1) = 0;
  if (a2[1])
  {
    v4 = (CMMsl::DeviceMotionCorrection *)operator new();
    v5 = CMMsl::DeviceMotionCorrection::DeviceMotionCorrection(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return this;
}

uint64_t CMMsl::VisualLocalizationAttitudeCorrection::operator=(uint64_t a1, const CMMsl::DeviceMotionCorrection **a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::VisualLocalizationAttitudeCorrection *__hidden);
  uint64_t v6;

  if ((const CMMsl::DeviceMotionCorrection **)a1 != a2)
  {
    CMMsl::VisualLocalizationAttitudeCorrection::VisualLocalizationAttitudeCorrection((CMMsl::VisualLocalizationAttitudeCorrection *)&v5, a2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v6;
    v5 = &off_251361AB0;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::VisualLocalizationAttitudeCorrection *a2, CMMsl::VisualLocalizationAttitudeCorrection *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::VisualLocalizationAttitudeCorrection::VisualLocalizationAttitudeCorrection(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_251361AB0;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_251361AB0;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::VisualLocalizationAttitudeCorrection::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = &off_251361AB0;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::VisualLocalizationAttitudeCorrection::formatText(CMMsl::VisualLocalizationAttitudeCorrection *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "correction");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::VisualLocalizationAttitudeCorrection::readFrom(CMMsl::VisualLocalizationAttitudeCorrection *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v19 = operator new();
        *(_QWORD *)v19 = &off_25135D130;
        *(_DWORD *)(v19 + 160) = 0;
        *(_OWORD *)(v19 + 8) = 0u;
        *(_OWORD *)(v19 + 24) = 0u;
        *(_OWORD *)(v19 + 40) = 0u;
        *(_OWORD *)(v19 + 56) = 0u;
        *(_OWORD *)(v19 + 72) = 0u;
        *(_OWORD *)(v19 + 88) = 0u;
        *(_OWORD *)(v19 + 104) = 0u;
        *(_OWORD *)(v19 + 120) = 0u;
        *(_OWORD *)(v19 + 136) = 0u;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = *((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_27;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::VisualLocalizationAttitudeCorrection::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2);
  return this;
}

CMMsl::DeviceMotionCorrection *CMMsl::VisualLocalizationAttitudeCorrection::hash_value(CMMsl::VisualLocalizationAttitudeCorrection *this)
{
  CMMsl::DeviceMotionCorrection *result;

  result = (CMMsl::DeviceMotionCorrection *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::DeviceMotionCorrection *)CMMsl::DeviceMotionCorrection::hash_value(result);
  return result;
}

_QWORD *CMMsl::VisualLocalizationAttitudeCorrection::makeCorrection(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135D130;
    *(_DWORD *)(v2 + 160) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_OWORD *)(v2 + 120) = 0u;
    *(_OWORD *)(v2 + 136) = 0u;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void CMMsl::VisualStateMeasurement::~VisualStateMeasurement(CMMsl::VisualStateMeasurement *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_251361AE8;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::VisualStateMeasurement::~VisualStateMeasurement(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::VisualStateMeasurement *CMMsl::VisualStateMeasurement::VisualStateMeasurement(CMMsl::VisualStateMeasurement *this, const CMMsl::VisualStateMeasurement *a2)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  char v7;
  int v8;

  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (_QWORD *)((char *)this + 8);
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_QWORD *)this = &off_251361AE8;
  *((_DWORD *)this + 24) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 9) = 0;
  if ((*((_BYTE *)a2 + 96) & 1) != 0)
  {
    v5 = *((_QWORD *)a2 + 10);
    *((_BYTE *)this + 96) = 1;
    *((_QWORD *)this + 10) = v5;
  }
  if (this != a2)
  {
    sub_2429111C4(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
    sub_2429111C4((_QWORD *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3);
    sub_2429111C4((_QWORD *)this + 7, *((char **)a2 + 7), *((char **)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 3);
  }
  v6 = *((_BYTE *)a2 + 96);
  if ((v6 & 4) != 0)
  {
    v7 = *((_BYTE *)a2 + 92);
    *((_BYTE *)this + 96) |= 4u;
    *((_BYTE *)this + 92) = v7;
    v6 = *((_BYTE *)a2 + 96);
  }
  if ((v6 & 2) != 0)
  {
    v8 = *((_DWORD *)a2 + 22);
    *((_BYTE *)this + 96) |= 2u;
    *((_DWORD *)this + 22) = v8;
  }
  return this;
}

CMMsl *CMMsl::VisualStateMeasurement::operator=(CMMsl *a1, const CMMsl::VisualStateMeasurement *a2)
{
  CMMsl::VisualStateMeasurement *v3;
  _BYTE v5[104];

  if (a1 != a2)
  {
    CMMsl::VisualStateMeasurement::VisualStateMeasurement((CMMsl::VisualStateMeasurement *)v5, a2);
    CMMsl::swap(a1, (CMMsl::VisualStateMeasurement *)v5, v3);
    CMMsl::VisualStateMeasurement::~VisualStateMeasurement((CMMsl::VisualStateMeasurement *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::VisualStateMeasurement *a2, CMMsl::VisualStateMeasurement *a3)
{
  int v3;
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v3;
  result = *((double *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((double *)a2 + 10) = result;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  v8 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v8;
  v9 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v9;
  v10 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v10;
  v11 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v11;
  v12 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v12;
  v13 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 92);
  *((_BYTE *)this + 92) = *((_BYTE *)a2 + 92);
  *((_BYTE *)a2 + 92) = v13;
  LODWORD(v13) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v13;
  return result;
}

uint64_t CMMsl::VisualStateMeasurement::VisualStateMeasurement(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_251361AE8;
  v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  v5 = a1 + 56;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  sub_242911330(v4, (__n128 *)(a2 + 32));
  sub_242911330(v5, (__n128 *)(a2 + 56));
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  return a1;
}

CMMsl *CMMsl::VisualStateMeasurement::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::VisualStateMeasurement *v3;
  _BYTE v5[104];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::VisualStateMeasurement::VisualStateMeasurement((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::VisualStateMeasurement *)v5, v3);
    CMMsl::VisualStateMeasurement::~VisualStateMeasurement((CMMsl::VisualStateMeasurement *)v5);
  }
  return a1;
}

uint64_t CMMsl::VisualStateMeasurement::formatText(CMMsl::VisualStateMeasurement *this, PB::TextFormatter *a2, const char *a3)
{
  double *v5;
  double *v6;
  double v7;
  char v8;
  double *v9;
  double *v10;
  double v11;
  double *v12;
  double *v13;
  double v14;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (double *)*((_QWORD *)this + 1);
  v6 = (double *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "attitude", v7);
  }
  v8 = *((_BYTE *)this + 96);
  if ((v8 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "isInitFinished");
    v8 = *((_BYTE *)this + 96);
    if ((v8 & 1) == 0)
    {
LABEL_5:
      if ((v8 & 2) == 0)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  else if ((*((_BYTE *)this + 96) & 1) == 0)
  {
    goto LABEL_5;
  }
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 10));
  if ((*((_BYTE *)this + 96) & 2) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "trackingState");
LABEL_7:
  v9 = (double *)*((_QWORD *)this + 4);
  v10 = (double *)*((_QWORD *)this + 5);
  while (v9 != v10)
  {
    v11 = *v9++;
    PB::TextFormatter::format(a2, "translation", v11);
  }
  v12 = (double *)*((_QWORD *)this + 7);
  v13 = (double *)*((_QWORD *)this + 8);
  while (v12 != v13)
  {
    v14 = *v12++;
    PB::TextFormatter::format(a2, "velocity", v14);
  }
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::VisualStateMeasurement::readFrom(CMMsl::VisualStateMeasurement *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  _QWORD *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  BOOL v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  unint64_t v76;
  char *v77;
  _QWORD *v78;
  unint64_t v79;
  char *v80;
  unint64_t v81;
  char *v82;
  char v83;
  unsigned int v84;
  unint64_t v85;
  char v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  unint64_t v111;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (2)
  {
    v8 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_25:
      v20 = v11 & 7;
      if (v20 != 4)
      {
        switch((v11 >> 3))
        {
          case 1u:
            *((_BYTE *)this + 96) |= 1u;
            v21 = *((_QWORD *)a2 + 1);
            if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((_QWORD *)a2 + 2))
              goto LABEL_179;
            *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v21);
            goto LABEL_181;
          case 2u:
            if (v20 == 2)
            {
              if ((PB::Reader::placeMark() & 1) != 0)
                return 0;
              v22 = *((_QWORD *)a2 + 1);
              v23 = *((_QWORD *)a2 + 2);
              while (v22 < v23 && !*((_BYTE *)a2 + 24))
              {
                v25 = (char *)*((_QWORD *)this + 2);
                v24 = *((_QWORD *)this + 3);
                if ((unint64_t)v25 >= v24)
                {
                  v27 = (char *)*((_QWORD *)this + 1);
                  v28 = (v25 - v27) >> 3;
                  v29 = v28 + 1;
                  if ((unint64_t)(v28 + 1) >> 61)
                    goto LABEL_186;
                  v30 = v24 - (_QWORD)v27;
                  if (v30 >> 2 > v29)
                    v29 = v30 >> 2;
                  if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
                    v31 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v31 = v29;
                  if (v31)
                  {
                    v31 = (unint64_t)sub_2429112FC(v31);
                    v27 = (char *)*((_QWORD *)this + 1);
                    v25 = (char *)*((_QWORD *)this + 2);
                  }
                  else
                  {
                    v32 = 0;
                  }
                  v33 = (_QWORD *)(v31 + 8 * v28);
                  *v33 = 0;
                  v26 = v33 + 1;
                  while (v25 != v27)
                  {
                    v34 = *((_QWORD *)v25 - 1);
                    v25 -= 8;
                    *--v33 = v34;
                  }
                  *((_QWORD *)this + 1) = v33;
                  *((_QWORD *)this + 2) = v26;
                  *((_QWORD *)this + 3) = v31 + 8 * v32;
                  if (v27)
                    operator delete(v27);
                }
                else
                {
                  *(_QWORD *)v25 = 0;
                  v26 = v25 + 8;
                }
                *((_QWORD *)this + 2) = v26;
                v35 = *((_QWORD *)a2 + 1);
                if (v35 > 0xFFFFFFFFFFFFFFF7 || v35 + 8 > *((_QWORD *)a2 + 2))
                  goto LABEL_126;
                *(v26 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v35);
                v23 = *((_QWORD *)a2 + 2);
                v22 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v22;
              }
              goto LABEL_127;
            }
            v77 = (char *)*((_QWORD *)this + 2);
            v76 = *((_QWORD *)this + 3);
            if ((unint64_t)v77 >= v76)
            {
              v87 = (char *)*((_QWORD *)this + 1);
              v88 = (v77 - v87) >> 3;
              v89 = v88 + 1;
              if ((unint64_t)(v88 + 1) >> 61)
                goto LABEL_186;
              v90 = v76 - (_QWORD)v87;
              if (v90 >> 2 > v89)
                v89 = v90 >> 2;
              if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFF8)
                v91 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v91 = v89;
              if (v91)
              {
                v91 = (unint64_t)sub_2429112FC(v91);
                v87 = (char *)*((_QWORD *)this + 1);
                v77 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v92 = 0;
              }
              v105 = (_QWORD *)(v91 + 8 * v88);
              *v105 = 0;
              v78 = v105 + 1;
              while (v77 != v87)
              {
                v106 = *((_QWORD *)v77 - 1);
                v77 -= 8;
                *--v105 = v106;
              }
              *((_QWORD *)this + 1) = v105;
              *((_QWORD *)this + 2) = v78;
              *((_QWORD *)this + 3) = v91 + 8 * v92;
              if (v87)
                operator delete(v87);
            }
            else
            {
              *(_QWORD *)v77 = 0;
              v78 = v77 + 8;
            }
            *((_QWORD *)this + 2) = v78;
            goto LABEL_177;
          case 3u:
            if (v20 == 2)
            {
              if ((PB::Reader::placeMark() & 1) != 0)
                return 0;
              v36 = *((_QWORD *)a2 + 1);
              v37 = *((_QWORD *)a2 + 2);
              while (v36 < v37 && !*((_BYTE *)a2 + 24))
              {
                v39 = (char *)*((_QWORD *)this + 5);
                v38 = *((_QWORD *)this + 6);
                if ((unint64_t)v39 >= v38)
                {
                  v41 = (char *)*((_QWORD *)this + 4);
                  v42 = (v39 - v41) >> 3;
                  v43 = v42 + 1;
                  if ((unint64_t)(v42 + 1) >> 61)
                    goto LABEL_186;
                  v44 = v38 - (_QWORD)v41;
                  if (v44 >> 2 > v43)
                    v43 = v44 >> 2;
                  if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
                    v45 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v45 = v43;
                  if (v45)
                  {
                    v45 = (unint64_t)sub_2429112FC(v45);
                    v41 = (char *)*((_QWORD *)this + 4);
                    v39 = (char *)*((_QWORD *)this + 5);
                  }
                  else
                  {
                    v46 = 0;
                  }
                  v47 = (_QWORD *)(v45 + 8 * v42);
                  *v47 = 0;
                  v40 = v47 + 1;
                  while (v39 != v41)
                  {
                    v48 = *((_QWORD *)v39 - 1);
                    v39 -= 8;
                    *--v47 = v48;
                  }
                  *((_QWORD *)this + 4) = v47;
                  *((_QWORD *)this + 5) = v40;
                  *((_QWORD *)this + 6) = v45 + 8 * v46;
                  if (v41)
                    operator delete(v41);
                }
                else
                {
                  *(_QWORD *)v39 = 0;
                  v40 = v39 + 8;
                }
                *((_QWORD *)this + 5) = v40;
                v49 = *((_QWORD *)a2 + 1);
                if (v49 > 0xFFFFFFFFFFFFFFF7 || v49 + 8 > *((_QWORD *)a2 + 2))
                  goto LABEL_126;
                *(v40 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v49);
                v37 = *((_QWORD *)a2 + 2);
                v36 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v36;
              }
              goto LABEL_127;
            }
            v80 = (char *)*((_QWORD *)this + 5);
            v79 = *((_QWORD *)this + 6);
            if ((unint64_t)v80 >= v79)
            {
              v93 = (char *)*((_QWORD *)this + 4);
              v94 = (v80 - v93) >> 3;
              v95 = v94 + 1;
              if ((unint64_t)(v94 + 1) >> 61)
                goto LABEL_186;
              v96 = v79 - (_QWORD)v93;
              if (v96 >> 2 > v95)
                v95 = v96 >> 2;
              if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFF8)
                v97 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v97 = v95;
              if (v97)
              {
                v97 = (unint64_t)sub_2429112FC(v97);
                v93 = (char *)*((_QWORD *)this + 4);
                v80 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v98 = 0;
              }
              v107 = (_QWORD *)(v97 + 8 * v94);
              *v107 = 0;
              v78 = v107 + 1;
              while (v80 != v93)
              {
                v108 = *((_QWORD *)v80 - 1);
                v80 -= 8;
                *--v107 = v108;
              }
              *((_QWORD *)this + 4) = v107;
              *((_QWORD *)this + 5) = v78;
              *((_QWORD *)this + 6) = v97 + 8 * v98;
              if (v93)
                operator delete(v93);
            }
            else
            {
              *(_QWORD *)v80 = 0;
              v78 = v80 + 8;
            }
            *((_QWORD *)this + 5) = v78;
            goto LABEL_177;
          case 4u:
            if (v20 == 2)
            {
              if ((PB::Reader::placeMark() & 1) != 0)
                return 0;
              v50 = *((_QWORD *)a2 + 1);
              v51 = *((_QWORD *)a2 + 2);
              while (v50 < v51 && !*((_BYTE *)a2 + 24))
              {
                v53 = (char *)*((_QWORD *)this + 8);
                v52 = *((_QWORD *)this + 9);
                if ((unint64_t)v53 >= v52)
                {
                  v55 = (char *)*((_QWORD *)this + 7);
                  v56 = (v53 - v55) >> 3;
                  v57 = v56 + 1;
                  if ((unint64_t)(v56 + 1) >> 61)
                    goto LABEL_186;
                  v58 = v52 - (_QWORD)v55;
                  if (v58 >> 2 > v57)
                    v57 = v58 >> 2;
                  if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8)
                    v59 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v59 = v57;
                  if (v59)
                  {
                    v59 = (unint64_t)sub_2429112FC(v59);
                    v55 = (char *)*((_QWORD *)this + 7);
                    v53 = (char *)*((_QWORD *)this + 8);
                  }
                  else
                  {
                    v60 = 0;
                  }
                  v61 = (_QWORD *)(v59 + 8 * v56);
                  *v61 = 0;
                  v54 = v61 + 1;
                  while (v53 != v55)
                  {
                    v62 = *((_QWORD *)v53 - 1);
                    v53 -= 8;
                    *--v61 = v62;
                  }
                  *((_QWORD *)this + 7) = v61;
                  *((_QWORD *)this + 8) = v54;
                  *((_QWORD *)this + 9) = v59 + 8 * v60;
                  if (v55)
                    operator delete(v55);
                }
                else
                {
                  *(_QWORD *)v53 = 0;
                  v54 = v53 + 8;
                }
                *((_QWORD *)this + 8) = v54;
                v63 = *((_QWORD *)a2 + 1);
                if (v63 > 0xFFFFFFFFFFFFFFF7 || v63 + 8 > *((_QWORD *)a2 + 2))
                {
LABEL_126:
                  *((_BYTE *)a2 + 24) = 1;
                  break;
                }
                *(v54 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v63);
                v51 = *((_QWORD *)a2 + 2);
                v50 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v50;
              }
LABEL_127:
              PB::Reader::recallMark();
            }
            else
            {
              v82 = (char *)*((_QWORD *)this + 8);
              v81 = *((_QWORD *)this + 9);
              if ((unint64_t)v82 >= v81)
              {
                v99 = (char *)*((_QWORD *)this + 7);
                v100 = (v82 - v99) >> 3;
                v101 = v100 + 1;
                if ((unint64_t)(v100 + 1) >> 61)
LABEL_186:
                  sub_242729A44();
                v102 = v81 - (_QWORD)v99;
                if (v102 >> 2 > v101)
                  v101 = v102 >> 2;
                if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFF8)
                  v103 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v103 = v101;
                if (v103)
                {
                  v103 = (unint64_t)sub_2429112FC(v103);
                  v99 = (char *)*((_QWORD *)this + 7);
                  v82 = (char *)*((_QWORD *)this + 8);
                }
                else
                {
                  v104 = 0;
                }
                v109 = (_QWORD *)(v103 + 8 * v100);
                *v109 = 0;
                v78 = v109 + 1;
                while (v82 != v99)
                {
                  v110 = *((_QWORD *)v82 - 1);
                  v82 -= 8;
                  *--v109 = v110;
                }
                *((_QWORD *)this + 7) = v109;
                *((_QWORD *)this + 8) = v78;
                *((_QWORD *)this + 9) = v103 + 8 * v104;
                if (v99)
                  operator delete(v99);
              }
              else
              {
                *(_QWORD *)v82 = 0;
                v78 = v82 + 8;
              }
              *((_QWORD *)this + 8) = v78;
LABEL_177:
              v111 = *((_QWORD *)a2 + 1);
              if (v111 <= 0xFFFFFFFFFFFFFFF7 && v111 + 8 <= *((_QWORD *)a2 + 2))
              {
                *(v78 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v111);
LABEL_181:
                *((_QWORD *)a2 + 1) += 8;
              }
              else
              {
LABEL_179:
                *((_BYTE *)a2 + 24) = 1;
              }
            }
LABEL_20:
            v2 = *((_QWORD *)a2 + 1);
            v3 = *((_QWORD *)a2 + 2);
            v4 = *((unsigned __int8 *)a2 + 24);
            if (v2 >= v3 || v4 != 0)
              return v4 == 0;
            continue;
          case 5u:
            *((_BYTE *)this + 96) |= 4u;
            v64 = *((_QWORD *)a2 + 1);
            if (v64 >= *((_QWORD *)a2 + 2))
            {
              v67 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v65 = v64 + 1;
              v66 = *(unsigned __int8 *)(*(_QWORD *)a2 + v64);
              *((_QWORD *)a2 + 1) = v65;
              v67 = v66 != 0;
            }
            *((_BYTE *)this + 92) = v67;
            goto LABEL_20;
          case 6u:
            *((_BYTE *)this + 96) |= 2u;
            v68 = *((_QWORD *)a2 + 1);
            v69 = *((_QWORD *)a2 + 2);
            v70 = *(_QWORD *)a2;
            if (v68 <= 0xFFFFFFFFFFFFFFF5 && v68 + 10 <= v69)
            {
              v71 = 0;
              v72 = 0;
              v73 = 0;
              do
              {
                v74 = v68 + 1;
                *((_QWORD *)a2 + 1) = v68 + 1;
                v75 = *(_BYTE *)(v70 + v68);
                v73 |= (unint64_t)(v75 & 0x7F) << v71;
                if ((v75 & 0x80) == 0)
                  goto LABEL_155;
                v71 += 7;
                v68 = v74;
                v14 = v72++ > 8;
              }
              while (!v14);
LABEL_125:
              LODWORD(v73) = 0;
              goto LABEL_155;
            }
            v83 = 0;
            v84 = 0;
            v73 = 0;
            if (v69 <= v68)
              v69 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v69 == v68)
              {
                LODWORD(v73) = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v85 = v68 + 1;
                v86 = *(_BYTE *)(v70 + v68);
                *((_QWORD *)a2 + 1) = v85;
                v73 |= (unint64_t)(v86 & 0x7F) << v83;
                if (v86 < 0)
                {
                  v83 += 7;
                  v68 = v85;
                  v14 = v84++ > 8;
                  if (v14)
                    goto LABEL_125;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v73) = 0;
              }
              break;
            }
LABEL_155:
            *((_DWORD *)this + 22) = v73;
            goto LABEL_20;
          default:
            goto LABEL_19;
        }
      }
      v4 = 0;
      return v4 == 0;
    }
    break;
  }
  v15 = 0;
  v16 = 0;
  v11 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v17 = v2 + 1;
    v18 = *(_BYTE *)(v8 + v2);
    *((_QWORD *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0)
      goto LABEL_25;
    v15 += 7;
    v2 = v17;
    v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  if ((PB::Reader::skip(a2) & 1) != 0)
    goto LABEL_20;
  return 0;
}

uint64_t CMMsl::VisualStateMeasurement::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  double *v4;
  double *v5;
  double v6;
  double *v7;
  double *v8;
  double v9;
  double *v10;
  double *v11;
  double v12;
  char v13;

  v3 = this;
  if ((*(_BYTE *)(this + 96) & 1) != 0)
    this = PB::Writer::write(a2, *(double *)(this + 80));
  v4 = *(double **)(v3 + 8);
  v5 = *(double **)(v3 + 16);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6);
  }
  v7 = *(double **)(v3 + 32);
  v8 = *(double **)(v3 + 40);
  while (v7 != v8)
  {
    v9 = *v7++;
    this = PB::Writer::write(a2, v9);
  }
  v10 = *(double **)(v3 + 56);
  v11 = *(double **)(v3 + 64);
  while (v10 != v11)
  {
    v12 = *v10++;
    this = PB::Writer::write(a2, v12);
  }
  v13 = *(_BYTE *)(v3 + 96);
  if ((v13 & 4) != 0)
  {
    this = PB::Writer::write(a2);
    v13 = *(_BYTE *)(v3 + 96);
  }
  if ((v13 & 2) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::VisualStateMeasurement::hash_value(CMMsl::VisualStateMeasurement *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((*((_BYTE *)this + 96) & 1) != 0)
  {
    if (*((double *)this + 10) == 0.0)
      v2 = 0;
    else
      v2 = *((_QWORD *)this + 10);
  }
  else
  {
    v2 = 0;
  }
  v3 = PBHashBytes();
  v4 = PBHashBytes();
  v5 = PBHashBytes();
  if ((*((_BYTE *)this + 96) & 4) != 0)
  {
    v6 = *((unsigned __int8 *)this + 92);
    if ((*((_BYTE *)this + 96) & 2) != 0)
      goto LABEL_8;
LABEL_10:
    v7 = 0;
    return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7;
  }
  v6 = 0;
  if ((*((_BYTE *)this + 96) & 2) == 0)
    goto LABEL_10;
LABEL_8:
  v7 = *((unsigned int *)this + 22);
  return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7;
}

void CMMsl::WakeGestureNotification::~WakeGestureNotification(CMMsl::WakeGestureNotification *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::WakeGestureNotification::WakeGestureNotification(CMMsl::WakeGestureNotification *this, const CMMsl::WakeGestureNotification *a2)
{
  char v2;
  char v3;
  double result;
  uint64_t v5;
  int v6;
  int v7;
  char v8;

  *(_QWORD *)this = &off_251361B20;
  *((_DWORD *)this + 11) = 0;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 2) != 0)
  {
    result = *((double *)a2 + 2);
    v3 = 2;
    *((_BYTE *)this + 44) = 2;
    *((double *)this + 2) = result;
    v2 = *((_BYTE *)a2 + 44);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 44) & 4) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 3);
    v3 |= 4u;
    *((_BYTE *)this + 44) = v3;
    *((_QWORD *)this + 3) = v5;
    v2 = *((_BYTE *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    v6 = *((_DWORD *)a2 + 9);
    v3 |= 0x10u;
    *((_BYTE *)this + 44) = v3;
    *((_DWORD *)this + 9) = v6;
    v2 = *((_BYTE *)a2 + 44);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_13;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 8);
  v3 |= 8u;
  *((_BYTE *)this + 44) = v3;
  *((_DWORD *)this + 8) = v7;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0)
      return result;
LABEL_14:
    result = *((double *)a2 + 1);
    *((_BYTE *)this + 44) = v3 | 1;
    *((double *)this + 1) = result;
    return result;
  }
LABEL_13:
  v8 = *((_BYTE *)a2 + 40);
  v3 |= 0x20u;
  *((_BYTE *)this + 44) = v3;
  *((_BYTE *)this + 40) = v8;
  if ((*((_BYTE *)a2 + 44) & 1) != 0)
    goto LABEL_14;
  return result;
}

uint64_t CMMsl::WakeGestureNotification::operator=(uint64_t a1, const CMMsl::WakeGestureNotification *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int v13;

  if ((const CMMsl::WakeGestureNotification *)a1 != a2)
  {
    CMMsl::WakeGestureNotification::WakeGestureNotification((CMMsl::WakeGestureNotification *)&v8, a2);
    v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v13;
    v13 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v10;
    v10 = v4;
    v5 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v11;
    v11 = v5;
    LOBYTE(v4) = *(_BYTE *)(a1 + 40);
    *(_BYTE *)(a1 + 40) = v12;
    v12 = v4;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v9 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::WakeGestureNotification *a2, CMMsl::WakeGestureNotification *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  LODWORD(v5) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v5;
  LODWORD(v5) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v5;
  LOBYTE(v5) = *((_BYTE *)this + 40);
  *((_BYTE *)this + 40) = *((_BYTE *)a2 + 40);
  *((_BYTE *)a2 + 40) = v5;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::WakeGestureNotification::WakeGestureNotification(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_251361B20;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_251361B20;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::WakeGestureNotification::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  void (**v11)(CMMsl::WakeGestureNotification *__hidden);
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;

  if (a1 != a2)
  {
    v11 = &off_251361B20;
    v3 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a2 + 44) = 0;
    v4 = *(_QWORD *)(a2 + 24);
    v5 = *(_BYTE *)(a2 + 40);
    v16 = *(_DWORD *)(a1 + 44);
    v6 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v4;
    v13 = v6;
    v7 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    v14 = v7;
    LOBYTE(v4) = *(_BYTE *)(a1 + 40);
    *(_BYTE *)(a1 + 40) = v5;
    v15 = v4;
    v8 = *(_OWORD *)(a1 + 8);
    v9 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 44) = v3;
    *(_OWORD *)(a1 + 8) = v9;
    v12 = v8;
    PB::Base::~Base((PB::Base *)&v11);
  }
  return a1;
}

uint64_t CMMsl::WakeGestureNotification::formatText(CMMsl::WakeGestureNotification *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "gestureType");
    v5 = *((_BYTE *)this + 44);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*((_BYTE *)this + 44) & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "hostPowerState");
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "machContinuousTime", *((double *)this + 1));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(a2, "state");
    if ((*((_BYTE *)this + 44) & 4) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "receivedTime", *((double *)this + 2));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 0x10) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 4) != 0)
LABEL_7:
    PB::TextFormatter::format(a2, "timestampPossible");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WakeGestureNotification::readFrom(CMMsl::WakeGestureNotification *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  int v39;
  BOOL v40;
  char v41;
  unsigned int v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_26;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_21;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_26:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 44) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_56;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_81;
      case 2u:
        *((_BYTE *)this + 44) |= 4u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v41 = 0;
          v42 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v21)
            {
              v25 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_86;
            }
            v43 = v21++;
            v44 = *(_BYTE *)(v22 + v43);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v44 & 0x7F) << v41;
            if ((v44 & 0x80) == 0)
              break;
            v41 += 7;
            v14 = v42++ > 8;
            if (v14)
            {
              v25 = 0;
LABEL_85:
              v2 = v43 + 1;
              goto LABEL_86;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v25 = 0;
          goto LABEL_85;
        }
        v23 = 0;
        v24 = 0;
        v25 = 0;
        do
        {
          v2 = v21 + 1;
          *((_QWORD *)a2 + 1) = v21 + 1;
          v26 = *(_BYTE *)(v22 + v21);
          v25 |= (unint64_t)(v26 & 0x7F) << v23;
          if ((v26 & 0x80) == 0)
            goto LABEL_86;
          v23 += 7;
          v21 = v2;
          v14 = v24++ > 8;
        }
        while (!v14);
        v25 = 0;
LABEL_86:
        *((_QWORD *)this + 3) = v25;
        break;
      case 3u:
        *((_BYTE *)this + 44) |= 0x10u;
        v27 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v28 = *(_QWORD *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v45 = 0;
          v46 = 0;
          v31 = 0;
          if (v2 <= v27)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_91;
            }
            v47 = v27++;
            v48 = *(_BYTE *)(v28 + v47);
            *((_QWORD *)a2 + 1) = v27;
            v31 |= (unint64_t)(v48 & 0x7F) << v45;
            if ((v48 & 0x80) == 0)
              break;
            v45 += 7;
            v14 = v46++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
LABEL_90:
              v2 = v47 + 1;
              goto LABEL_91;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v31) = 0;
          goto LABEL_90;
        }
        v29 = 0;
        v30 = 0;
        v31 = 0;
        do
        {
          v2 = v27 + 1;
          *((_QWORD *)a2 + 1) = v27 + 1;
          v32 = *(_BYTE *)(v28 + v27);
          v31 |= (unint64_t)(v32 & 0x7F) << v29;
          if ((v32 & 0x80) == 0)
            goto LABEL_91;
          v29 += 7;
          v27 = v2;
          v14 = v30++ > 8;
        }
        while (!v14);
        LODWORD(v31) = 0;
LABEL_91:
        *((_DWORD *)this + 9) = v31;
        break;
      case 4u:
        *((_BYTE *)this + 44) |= 8u;
        v33 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v34 = *(_QWORD *)a2;
        if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
        {
          v49 = 0;
          v50 = 0;
          v37 = 0;
          if (v2 <= v33)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v33)
            {
              LODWORD(v37) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_96;
            }
            v51 = v33++;
            v52 = *(_BYTE *)(v34 + v51);
            *((_QWORD *)a2 + 1) = v33;
            v37 |= (unint64_t)(v52 & 0x7F) << v49;
            if ((v52 & 0x80) == 0)
              break;
            v49 += 7;
            v14 = v50++ > 8;
            if (v14)
            {
              LODWORD(v37) = 0;
LABEL_95:
              v2 = v51 + 1;
              goto LABEL_96;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v37) = 0;
          goto LABEL_95;
        }
        v35 = 0;
        v36 = 0;
        v37 = 0;
        do
        {
          v2 = v33 + 1;
          *((_QWORD *)a2 + 1) = v33 + 1;
          v38 = *(_BYTE *)(v34 + v33);
          v37 |= (unint64_t)(v38 & 0x7F) << v35;
          if ((v38 & 0x80) == 0)
            goto LABEL_96;
          v35 += 7;
          v33 = v2;
          v14 = v36++ > 8;
        }
        while (!v14);
        LODWORD(v37) = 0;
LABEL_96:
        *((_DWORD *)this + 8) = v37;
        break;
      case 5u:
        *((_BYTE *)this + 44) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v40 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v39 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v40 = v39 != 0;
        }
        *((_BYTE *)this + 40) = v40;
        break;
      case 6u:
        *((_BYTE *)this + 44) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_81:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_56:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_21:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::WakeGestureNotification::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 44);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16));
    v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(this + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 8));
  }
LABEL_12:
  this = PB::Writer::write(a2);
  if ((*(_BYTE *)(v3 + 44) & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 8));
  return this;
}

uint64_t CMMsl::WakeGestureNotification::hash_value(CMMsl::WakeGestureNotification *this)
{
  double v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  if ((*((_BYTE *)this + 44) & 2) != 0)
  {
    v1 = *((double *)this + 2);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 44) & 4) != 0)
    {
LABEL_3:
      v2 = *((_QWORD *)this + 3);
      if ((*((_BYTE *)this + 44) & 0x10) != 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 44) & 4) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 44) & 0x10) != 0)
  {
LABEL_4:
    v3 = *((int *)this + 9);
    if ((*((_BYTE *)this + 44) & 8) != 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  v3 = 0;
  if ((*((_BYTE *)this + 44) & 8) != 0)
  {
LABEL_5:
    v4 = *((int *)this + 8);
    if ((*((_BYTE *)this + 44) & 0x20) != 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  v4 = 0;
  if ((*((_BYTE *)this + 44) & 0x20) != 0)
  {
LABEL_6:
    v5 = *((unsigned __int8 *)this + 40);
    if ((*((_BYTE *)this + 44) & 1) != 0)
      goto LABEL_7;
LABEL_17:
    v6 = 0.0;
    return v2 ^ *(_QWORD *)&v1 ^ v3 ^ v4 ^ v5 ^ *(_QWORD *)&v6;
  }
LABEL_16:
  v5 = 0;
  if ((*((_BYTE *)this + 44) & 1) == 0)
    goto LABEL_17;
LABEL_7:
  v6 = *((double *)this + 1);
  if (v6 == 0.0)
    v6 = 0.0;
  return v2 ^ *(_QWORD *)&v1 ^ v3 ^ v4 ^ v5 ^ *(_QWORD *)&v6;
}

void CMMsl::WakeGestureSample::~WakeGestureSample(CMMsl::WakeGestureSample *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::WakeGestureSample::WakeGestureSample(uint64_t this, const CMMsl::WakeGestureSample *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;

  *(_QWORD *)this = &off_251361B58;
  *(_DWORD *)(this + 84) = 0;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x10) != 0)
  {
    v4 = *((_QWORD *)a2 + 5);
    v3 = 16;
    *(_DWORD *)(this + 84) = 16;
    *(_QWORD *)(this + 40) = v4;
    v2 = *((_DWORD *)a2 + 21);
    if ((v2 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 6);
    v3 |= 0x20u;
    *(_DWORD *)(this + 84) = v3;
    *(_QWORD *)(this + 48) = v5;
    v2 = *((_DWORD *)a2 + 21);
  }
LABEL_6:
  if ((v2 & 0x200) != 0)
  {
    v6 = *((_DWORD *)a2 + 17);
    v3 |= 0x200u;
    *(_DWORD *)(this + 84) = v3;
    *(_DWORD *)(this + 68) = v6;
    v2 = *((_DWORD *)a2 + 21);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x800) == 0)
        goto LABEL_9;
      goto LABEL_25;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 18);
  v3 |= 0x400u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 72) = v7;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x800) == 0)
  {
LABEL_9:
    if ((v2 & 0x10000) == 0)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  v8 = *((_BYTE *)a2 + 76);
  v3 |= 0x800u;
  *(_DWORD *)(this + 84) = v3;
  *(_BYTE *)(this + 76) = v8;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x10000) == 0)
  {
LABEL_10:
    if ((v2 & 0x4000) == 0)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  v9 = *((_BYTE *)a2 + 81);
  v3 |= 0x10000u;
  *(_DWORD *)(this + 84) = v3;
  *(_BYTE *)(this + 81) = v9;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x4000) == 0)
  {
LABEL_11:
    if ((v2 & 0x8000) == 0)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  v10 = *((_BYTE *)a2 + 79);
  v3 |= 0x4000u;
  *(_DWORD *)(this + 84) = v3;
  *(_BYTE *)(this + 79) = v10;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x8000) == 0)
  {
LABEL_12:
    if ((v2 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  v11 = *((_BYTE *)a2 + 80);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 84) = v3;
  *(_BYTE *)(this + 80) = v11;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x2000) == 0)
  {
LABEL_13:
    if ((v2 & 0x20000) == 0)
      goto LABEL_14;
    goto LABEL_30;
  }
LABEL_29:
  v12 = *((_BYTE *)a2 + 78);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 84) = v3;
  *(_BYTE *)(this + 78) = v12;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x20000) == 0)
  {
LABEL_14:
    if ((v2 & 0x1000) == 0)
      goto LABEL_15;
    goto LABEL_31;
  }
LABEL_30:
  v13 = *((_BYTE *)a2 + 82);
  v3 |= 0x20000u;
  *(_DWORD *)(this + 84) = v3;
  *(_BYTE *)(this + 82) = v13;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x1000) == 0)
  {
LABEL_15:
    if ((v2 & 2) == 0)
      goto LABEL_16;
    goto LABEL_32;
  }
LABEL_31:
  v14 = *((_BYTE *)a2 + 77);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 84) = v3;
  *(_BYTE *)(this + 77) = v14;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 2) == 0)
  {
LABEL_16:
    if ((v2 & 1) == 0)
      goto LABEL_17;
    goto LABEL_33;
  }
LABEL_32:
  v15 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_DWORD *)(this + 84) = v3;
  *(_QWORD *)(this + 16) = v15;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 1) == 0)
  {
LABEL_17:
    if ((v2 & 0x80) == 0)
      goto LABEL_18;
    goto LABEL_34;
  }
LABEL_33:
  v16 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_DWORD *)(this + 84) = v3;
  *(_QWORD *)(this + 8) = v16;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x80) == 0)
  {
LABEL_18:
    if ((v2 & 8) == 0)
      goto LABEL_19;
    goto LABEL_35;
  }
LABEL_34:
  v17 = *((_DWORD *)a2 + 15);
  v3 |= 0x80u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 60) = v17;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 8) == 0)
  {
LABEL_19:
    if ((v2 & 0x100) == 0)
      goto LABEL_20;
    goto LABEL_36;
  }
LABEL_35:
  v18 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *(_DWORD *)(this + 84) = v3;
  *(_QWORD *)(this + 32) = v18;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x100) == 0)
  {
LABEL_20:
    if ((v2 & 4) == 0)
      goto LABEL_21;
    goto LABEL_37;
  }
LABEL_36:
  v19 = *((_DWORD *)a2 + 16);
  v3 |= 0x100u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 64) = v19;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 4) == 0)
  {
LABEL_21:
    if ((v2 & 0x40) == 0)
      return this;
LABEL_38:
    v21 = *((_DWORD *)a2 + 14);
    *(_DWORD *)(this + 84) = v3 | 0x40;
    *(_DWORD *)(this + 56) = v21;
    return this;
  }
LABEL_37:
  v20 = *((_QWORD *)a2 + 3);
  v3 |= 4u;
  *(_DWORD *)(this + 84) = v3;
  *(_QWORD *)(this + 24) = v20;
  if ((*((_DWORD *)a2 + 21) & 0x40) != 0)
    goto LABEL_38;
  return this;
}

CMMsl *CMMsl::WakeGestureSample::operator=(CMMsl *a1, const CMMsl::WakeGestureSample *a2)
{
  CMMsl::WakeGestureSample *v3;
  _BYTE v5[88];

  if (a1 != a2)
  {
    CMMsl::WakeGestureSample::WakeGestureSample((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::WakeGestureSample *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::WakeGestureSample *a2, CMMsl::WakeGestureSample *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  double result;
  int v14;

  v3 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v3;
  v4 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v4;
  v5 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v5;
  v6 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v6;
  v7 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 76);
  *((_BYTE *)this + 76) = *((_BYTE *)a2 + 76);
  *((_BYTE *)a2 + 76) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 81);
  *((_BYTE *)this + 81) = *((_BYTE *)a2 + 81);
  *((_BYTE *)a2 + 81) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 79);
  *((_BYTE *)this + 79) = *((_BYTE *)a2 + 79);
  *((_BYTE *)a2 + 79) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 80);
  *((_BYTE *)this + 80) = *((_BYTE *)a2 + 80);
  *((_BYTE *)a2 + 80) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 78);
  *((_BYTE *)this + 78) = *((_BYTE *)a2 + 78);
  *((_BYTE *)a2 + 78) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 82);
  *((_BYTE *)this + 82) = *((_BYTE *)a2 + 82);
  *((_BYTE *)a2 + 82) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 77);
  *((_BYTE *)this + 77) = *((_BYTE *)a2 + 77);
  *((_BYTE *)a2 + 77) = v7;
  v8 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v8;
  v9 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v9;
  v10 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v10;
  v11 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v11;
  v12 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v12;
  result = *((double *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((double *)a2 + 3) = result;
  v14 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v14;
  return result;
}

double CMMsl::WakeGestureSample::WakeGestureSample(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_251361B58;
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a2 + 84) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  *(_BYTE *)(a1 + 79) = *(_BYTE *)(a2 + 79);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_BYTE *)(a1 + 78) = *(_BYTE *)(a2 + 78);
  *(_BYTE *)(a1 + 82) = *(_BYTE *)(a2 + 82);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return result;
}

CMMsl *CMMsl::WakeGestureSample::operator=(CMMsl *this, uint64_t a2, CMMsl::WakeGestureSample *a3)
{
  __int128 v4;
  void (**v6)(CMMsl::WakeGestureSample *__hidden);
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int v11;
  int v12;
  __int16 v13;
  char v14;
  int v15;

  if (this != (CMMsl *)a2)
  {
    v6 = &off_251361B58;
    v15 = *(_DWORD *)(a2 + 84);
    *(_DWORD *)(a2 + 84) = 0;
    v9 = *(_OWORD *)(a2 + 40);
    v11 = *(_DWORD *)(a2 + 72);
    v13 = *(_WORD *)(a2 + 80);
    v14 = *(_BYTE *)(a2 + 82);
    v12 = *(_DWORD *)(a2 + 76);
    v4 = *(_OWORD *)(a2 + 24);
    v7 = *(_OWORD *)(a2 + 8);
    v8 = v4;
    v10 = *(_OWORD *)(a2 + 56);
    CMMsl::swap(this, (CMMsl::WakeGestureSample *)&v6, a3);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return this;
}

uint64_t CMMsl::WakeGestureSample::formatText(CMMsl::WakeGestureSample *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x40) != 0)
  {
    PB::TextFormatter::format(a2, "detectionMode");
    v5 = *((_DWORD *)this + 21);
    if ((v5 & 0x800) == 0)
    {
LABEL_3:
      if ((v5 & 0x1000) == 0)
        goto LABEL_4;
      goto LABEL_23;
    }
  }
  else if ((v5 & 0x800) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "detectorRunning");
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x1000) == 0)
  {
LABEL_4:
    if ((v5 & 0x2000) == 0)
      goto LABEL_5;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "enableStateDetected");
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x2000) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0)
      goto LABEL_6;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "fireAll");
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 0x4000) == 0)
      goto LABEL_7;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "gestureDetectionDelay", *((double *)this + 1));
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x4000) == 0)
  {
LABEL_7:
    if ((v5 & 0x8000) == 0)
      goto LABEL_8;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "gyroInUse");
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x8000) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "hostAwake");
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 2) == 0)
      goto LABEL_10;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "hostWakeCount");
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 2) == 0)
  {
LABEL_10:
    if ((v5 & 0x10000) == 0)
      goto LABEL_11;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "hostWakeDelay", *((double *)this + 2));
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x10000) == 0)
  {
LABEL_11:
    if ((v5 & 4) == 0)
      goto LABEL_12;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "invertSensors");
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 4) == 0)
  {
LABEL_12:
    if ((v5 & 8) == 0)
      goto LABEL_13;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "runningModeDuration", *((double *)this + 3));
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 8) == 0)
  {
LABEL_13:
    if ((v5 & 0x100) == 0)
      goto LABEL_14;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "runningModeStartTime", *((double *)this + 4));
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x100) == 0)
  {
LABEL_14:
    if ((v5 & 0x200) == 0)
      goto LABEL_15;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "runningSwitchCount");
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x200) == 0)
  {
LABEL_15:
    if ((v5 & 0x10) == 0)
      goto LABEL_16;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "state");
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x10) == 0)
  {
LABEL_16:
    if ((v5 & 0x20) == 0)
      goto LABEL_17;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 5));
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x20) == 0)
  {
LABEL_17:
    if ((v5 & 0x400) == 0)
      goto LABEL_18;
LABEL_37:
    PB::TextFormatter::format(a2, "type");
    if ((*((_DWORD *)this + 21) & 0x20000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_19;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "timestampPossible", *((double *)this + 6));
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x400) != 0)
    goto LABEL_37;
LABEL_18:
  if ((v5 & 0x20000) != 0)
LABEL_19:
    PB::TextFormatter::format(a2, "wakePending");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WakeGestureSample::readFrom(CMMsl::WakeGestureSample *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  int v33;
  BOOL v34;
  int v35;
  BOOL v36;
  int v37;
  BOOL v38;
  int v39;
  BOOL v40;
  int v41;
  BOOL v42;
  int v43;
  BOOL v44;
  int v45;
  BOOL v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  char v58;
  unint64_t v59;
  uint64_t v60;
  char v61;
  unsigned int v62;
  uint64_t v63;
  char v64;
  char v65;
  unsigned int v66;
  unint64_t v67;
  char v68;
  char v69;
  unsigned int v70;
  unint64_t v71;
  char v72;
  char v73;
  unsigned int v74;
  unint64_t v75;
  char v76;
  char v77;
  unsigned int v78;
  unint64_t v79;
  char v80;
  char v81;
  unsigned int v82;
  unint64_t v83;
  char v84;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_26;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_21;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_26:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 21) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_87;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_145;
      case 2u:
        *((_DWORD *)this + 21) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_87;
        *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_145;
      case 3u:
        *((_DWORD *)this + 21) |= 0x200u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v65 = 0;
          v66 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_150;
            }
            v67 = v21++;
            v68 = *(_BYTE *)(v22 + v67);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v68 & 0x7F) << v65;
            if ((v68 & 0x80) == 0)
              break;
            v65 += 7;
            v14 = v66++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
LABEL_149:
              v2 = v67 + 1;
              goto LABEL_150;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v25) = 0;
          goto LABEL_149;
        }
        v23 = 0;
        v24 = 0;
        v25 = 0;
        do
        {
          v2 = v21 + 1;
          *((_QWORD *)a2 + 1) = v21 + 1;
          v26 = *(_BYTE *)(v22 + v21);
          v25 |= (unint64_t)(v26 & 0x7F) << v23;
          if ((v26 & 0x80) == 0)
            goto LABEL_150;
          v23 += 7;
          v21 = v2;
          v14 = v24++ > 8;
        }
        while (!v14);
        LODWORD(v25) = 0;
LABEL_150:
        *((_DWORD *)this + 17) = v25;
        break;
      case 4u:
        *((_DWORD *)this + 21) |= 0x400u;
        v27 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v28 = *(_QWORD *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v69 = 0;
          v70 = 0;
          v31 = 0;
          if (v2 <= v27)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_155;
            }
            v71 = v27++;
            v72 = *(_BYTE *)(v28 + v71);
            *((_QWORD *)a2 + 1) = v27;
            v31 |= (unint64_t)(v72 & 0x7F) << v69;
            if ((v72 & 0x80) == 0)
              break;
            v69 += 7;
            v14 = v70++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
LABEL_154:
              v2 = v71 + 1;
              goto LABEL_155;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v31) = 0;
          goto LABEL_154;
        }
        v29 = 0;
        v30 = 0;
        v31 = 0;
        do
        {
          v2 = v27 + 1;
          *((_QWORD *)a2 + 1) = v27 + 1;
          v32 = *(_BYTE *)(v28 + v27);
          v31 |= (unint64_t)(v32 & 0x7F) << v29;
          if ((v32 & 0x80) == 0)
            goto LABEL_155;
          v29 += 7;
          v27 = v2;
          v14 = v30++ > 8;
        }
        while (!v14);
        LODWORD(v31) = 0;
LABEL_155:
        *((_DWORD *)this + 18) = v31;
        break;
      case 5u:
        *((_DWORD *)this + 21) |= 0x800u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v34 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v33 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v34 = v33 != 0;
        }
        *((_BYTE *)this + 76) = v34;
        break;
      case 6u:
        *((_DWORD *)this + 21) |= 0x10000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v36 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v35 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v36 = v35 != 0;
        }
        *((_BYTE *)this + 81) = v36;
        break;
      case 7u:
        *((_DWORD *)this + 21) |= 0x4000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v38 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v37 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v38 = v37 != 0;
        }
        *((_BYTE *)this + 79) = v38;
        break;
      case 8u:
        *((_DWORD *)this + 21) |= 0x8000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v40 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v39 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v40 = v39 != 0;
        }
        *((_BYTE *)this + 80) = v40;
        break;
      case 9u:
        *((_DWORD *)this + 21) |= 0x2000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v42 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v41 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v42 = v41 != 0;
        }
        *((_BYTE *)this + 78) = v42;
        break;
      case 0xAu:
        *((_DWORD *)this + 21) |= 0x20000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v44 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v43 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v44 = v43 != 0;
        }
        *((_BYTE *)this + 82) = v44;
        break;
      case 0xBu:
        *((_DWORD *)this + 21) |= 0x1000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v46 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v45 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v46 = v45 != 0;
        }
        *((_BYTE *)this + 77) = v46;
        break;
      case 0xCu:
        *((_DWORD *)this + 21) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_87;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_145;
      case 0xDu:
        *((_DWORD *)this + 21) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_87;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_145;
      case 0xEu:
        *((_DWORD *)this + 21) |= 0x80u;
        v47 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v48 = *(_QWORD *)a2;
        if (v47 > 0xFFFFFFFFFFFFFFF5 || v47 + 10 > v2)
        {
          v73 = 0;
          v74 = 0;
          v51 = 0;
          if (v2 <= v47)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v47)
            {
              LODWORD(v51) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_160;
            }
            v75 = v47++;
            v76 = *(_BYTE *)(v48 + v75);
            *((_QWORD *)a2 + 1) = v47;
            v51 |= (unint64_t)(v76 & 0x7F) << v73;
            if ((v76 & 0x80) == 0)
              break;
            v73 += 7;
            v14 = v74++ > 8;
            if (v14)
            {
              LODWORD(v51) = 0;
LABEL_159:
              v2 = v75 + 1;
              goto LABEL_160;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v51) = 0;
          goto LABEL_159;
        }
        v49 = 0;
        v50 = 0;
        v51 = 0;
        do
        {
          v2 = v47 + 1;
          *((_QWORD *)a2 + 1) = v47 + 1;
          v52 = *(_BYTE *)(v48 + v47);
          v51 |= (unint64_t)(v52 & 0x7F) << v49;
          if ((v52 & 0x80) == 0)
            goto LABEL_160;
          v49 += 7;
          v47 = v2;
          v14 = v50++ > 8;
        }
        while (!v14);
        LODWORD(v51) = 0;
LABEL_160:
        *((_DWORD *)this + 15) = v51;
        break;
      case 0xFu:
        *((_DWORD *)this + 21) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_87;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_145;
      case 0x10u:
        *((_DWORD *)this + 21) |= 0x100u;
        v53 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v54 = *(_QWORD *)a2;
        if (v53 > 0xFFFFFFFFFFFFFFF5 || v53 + 10 > v2)
        {
          v77 = 0;
          v78 = 0;
          v57 = 0;
          if (v2 <= v53)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v53)
            {
              LODWORD(v57) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_165;
            }
            v79 = v53++;
            v80 = *(_BYTE *)(v54 + v79);
            *((_QWORD *)a2 + 1) = v53;
            v57 |= (unint64_t)(v80 & 0x7F) << v77;
            if ((v80 & 0x80) == 0)
              break;
            v77 += 7;
            v14 = v78++ > 8;
            if (v14)
            {
              LODWORD(v57) = 0;
LABEL_164:
              v2 = v79 + 1;
              goto LABEL_165;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v57) = 0;
          goto LABEL_164;
        }
        v55 = 0;
        v56 = 0;
        v57 = 0;
        do
        {
          v2 = v53 + 1;
          *((_QWORD *)a2 + 1) = v53 + 1;
          v58 = *(_BYTE *)(v54 + v53);
          v57 |= (unint64_t)(v58 & 0x7F) << v55;
          if ((v58 & 0x80) == 0)
            goto LABEL_165;
          v55 += 7;
          v53 = v2;
          v14 = v56++ > 8;
        }
        while (!v14);
        LODWORD(v57) = 0;
LABEL_165:
        *((_DWORD *)this + 16) = v57;
        break;
      case 0x11u:
        *((_DWORD *)this + 21) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_145:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_87:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 0x12u:
        *((_DWORD *)this + 21) |= 0x40u;
        v59 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v60 = *(_QWORD *)a2;
        if (v59 > 0xFFFFFFFFFFFFFFF5 || v59 + 10 > v2)
        {
          v81 = 0;
          v82 = 0;
          v63 = 0;
          if (v2 <= v59)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v59)
            {
              LODWORD(v63) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_170;
            }
            v83 = v59++;
            v84 = *(_BYTE *)(v60 + v83);
            *((_QWORD *)a2 + 1) = v59;
            v63 |= (unint64_t)(v84 & 0x7F) << v81;
            if ((v84 & 0x80) == 0)
              break;
            v81 += 7;
            v14 = v82++ > 8;
            if (v14)
            {
              LODWORD(v63) = 0;
LABEL_169:
              v2 = v83 + 1;
              goto LABEL_170;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v63) = 0;
          goto LABEL_169;
        }
        v61 = 0;
        v62 = 0;
        v63 = 0;
        do
        {
          v2 = v59 + 1;
          *((_QWORD *)a2 + 1) = v59 + 1;
          v64 = *(_BYTE *)(v60 + v59);
          v63 |= (unint64_t)(v64 & 0x7F) << v61;
          if ((v64 & 0x80) == 0)
            goto LABEL_170;
          v61 += 7;
          v59 = v2;
          v14 = v62++ > 8;
        }
        while (!v14);
        LODWORD(v63) = 0;
LABEL_170:
        *((_DWORD *)this + 14) = v63;
        break;
      default:
        goto LABEL_19;
    }
LABEL_21:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::WakeGestureSample::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 84);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 40));
    v4 = *(_DWORD *)(v3 + 84);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x200) == 0)
        goto LABEL_4;
      goto LABEL_22;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x200) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0)
      goto LABEL_5;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0)
      goto LABEL_6;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x10000) == 0)
      goto LABEL_7;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x10000) == 0)
  {
LABEL_7:
    if ((v4 & 0x4000) == 0)
      goto LABEL_8;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x4000) == 0)
  {
LABEL_8:
    if ((v4 & 0x8000) == 0)
      goto LABEL_9;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x8000) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x2000) == 0)
  {
LABEL_10:
    if ((v4 & 0x20000) == 0)
      goto LABEL_11;
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x20000) == 0)
  {
LABEL_11:
    if ((v4 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x1000) == 0)
  {
LABEL_12:
    if ((v4 & 2) == 0)
      goto LABEL_13;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 2) == 0)
  {
LABEL_13:
    if ((v4 & 1) == 0)
      goto LABEL_14;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 1) == 0)
  {
LABEL_14:
    if ((v4 & 0x80) == 0)
      goto LABEL_15;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x80) == 0)
  {
LABEL_15:
    if ((v4 & 8) == 0)
      goto LABEL_16;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 8) == 0)
  {
LABEL_16:
    if ((v4 & 0x100) == 0)
      goto LABEL_17;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x100) == 0)
  {
LABEL_17:
    if ((v4 & 4) == 0)
      goto LABEL_18;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 4) == 0)
  {
LABEL_18:
    if ((v4 & 0x40) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_36:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  if ((*(_DWORD *)(v3 + 84) & 0x40) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::WakeGestureSample::hash_value(CMMsl::WakeGestureSample *this)
{
  int v1;
  double v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  double v18;
  uint64_t v19;

  v1 = *((_DWORD *)this + 21);
  if ((v1 & 0x10) == 0)
  {
    v2 = 0.0;
    if ((v1 & 0x20) != 0)
      goto LABEL_3;
LABEL_33:
    v3 = 0.0;
    if ((v1 & 0x200) != 0)
      goto LABEL_6;
    goto LABEL_34;
  }
  v2 = *((double *)this + 5);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 0x20) == 0)
    goto LABEL_33;
LABEL_3:
  v3 = *((double *)this + 6);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 0x200) != 0)
  {
LABEL_6:
    v4 = *((int *)this + 17);
    if ((v1 & 0x400) != 0)
      goto LABEL_7;
    goto LABEL_35;
  }
LABEL_34:
  v4 = 0;
  if ((v1 & 0x400) != 0)
  {
LABEL_7:
    v5 = *((int *)this + 18);
    if ((v1 & 0x800) != 0)
      goto LABEL_8;
    goto LABEL_36;
  }
LABEL_35:
  v5 = 0;
  if ((v1 & 0x800) != 0)
  {
LABEL_8:
    v6 = *((unsigned __int8 *)this + 76);
    if ((v1 & 0x10000) != 0)
      goto LABEL_9;
    goto LABEL_37;
  }
LABEL_36:
  v6 = 0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_9:
    v7 = *((unsigned __int8 *)this + 81);
    if ((v1 & 0x4000) != 0)
      goto LABEL_10;
    goto LABEL_38;
  }
LABEL_37:
  v7 = 0;
  if ((v1 & 0x4000) != 0)
  {
LABEL_10:
    v8 = *((unsigned __int8 *)this + 79);
    if ((v1 & 0x8000) != 0)
      goto LABEL_11;
    goto LABEL_39;
  }
LABEL_38:
  v8 = 0;
  if ((v1 & 0x8000) != 0)
  {
LABEL_11:
    v9 = *((unsigned __int8 *)this + 80);
    if ((v1 & 0x2000) != 0)
      goto LABEL_12;
    goto LABEL_40;
  }
LABEL_39:
  v9 = 0;
  if ((v1 & 0x2000) != 0)
  {
LABEL_12:
    v10 = *((unsigned __int8 *)this + 78);
    if ((v1 & 0x20000) != 0)
      goto LABEL_13;
    goto LABEL_41;
  }
LABEL_40:
  v10 = 0;
  if ((v1 & 0x20000) != 0)
  {
LABEL_13:
    v11 = *((unsigned __int8 *)this + 82);
    if ((v1 & 0x1000) != 0)
      goto LABEL_14;
    goto LABEL_42;
  }
LABEL_41:
  v11 = 0;
  if ((v1 & 0x1000) != 0)
  {
LABEL_14:
    v12 = *((unsigned __int8 *)this + 77);
    if ((v1 & 2) != 0)
      goto LABEL_15;
LABEL_43:
    v13 = 0.0;
    if ((v1 & 1) != 0)
      goto LABEL_18;
LABEL_44:
    v14 = 0.0;
    if ((v1 & 0x80) != 0)
      goto LABEL_21;
    goto LABEL_45;
  }
LABEL_42:
  v12 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_43;
LABEL_15:
  v13 = *((double *)this + 2);
  if (v13 == 0.0)
    v13 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_44;
LABEL_18:
  v14 = *((double *)this + 1);
  if (v14 == 0.0)
    v14 = 0.0;
  if ((v1 & 0x80) != 0)
  {
LABEL_21:
    v15 = *((int *)this + 15);
    if ((v1 & 8) != 0)
      goto LABEL_22;
LABEL_46:
    v16 = 0.0;
    if ((v1 & 0x100) != 0)
      goto LABEL_25;
    goto LABEL_47;
  }
LABEL_45:
  v15 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_46;
LABEL_22:
  v16 = *((double *)this + 4);
  if (v16 == 0.0)
    v16 = 0.0;
  if ((v1 & 0x100) != 0)
  {
LABEL_25:
    v17 = *((int *)this + 16);
    if ((v1 & 4) != 0)
      goto LABEL_26;
    goto LABEL_48;
  }
LABEL_47:
  v17 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_26:
    v18 = *((double *)this + 3);
    if (v18 == 0.0)
      v18 = 0.0;
    if ((v1 & 0x40) != 0)
      goto LABEL_29;
LABEL_49:
    v19 = 0;
    return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ *(_QWORD *)&v13 ^ *(_QWORD *)&v14 ^ v15 ^ *(_QWORD *)&v16 ^ v17 ^ *(_QWORD *)&v18 ^ v19;
  }
LABEL_48:
  v18 = 0.0;
  if ((v1 & 0x40) == 0)
    goto LABEL_49;
LABEL_29:
  v19 = *((int *)this + 14);
  return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ *(_QWORD *)&v13 ^ *(_QWORD *)&v14 ^ v15 ^ *(_QWORD *)&v16 ^ v17 ^ *(_QWORD *)&v18 ^ v19;
}

void CMMsl::WalkingDetectionResult::~WalkingDetectionResult(CMMsl::WalkingDetectionResult *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::WalkingDetectionResult::WalkingDetectionResult(uint64_t this, const CMMsl::WalkingDetectionResult *a2)
{
  __int16 v2;
  __int16 v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;
  char v15;
  int v16;
  int v17;
  int v18;

  *(_QWORD *)this = &off_251361B90;
  *(_DWORD *)(this + 60) = 0;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 8) != 0)
  {
    v4 = *((_DWORD *)a2 + 6);
    v3 = 8;
    *(_WORD *)(this + 60) = 8;
    *(_DWORD *)(this + 24) = v4;
    v2 = *((_WORD *)a2 + 30);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 7);
    v3 |= 0x10u;
    *(_WORD *)(this + 60) = v3;
    *(_DWORD *)(this + 28) = v5;
    v2 = *((_WORD *)a2 + 30);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    v6 = *((_DWORD *)a2 + 8);
    v3 |= 0x20u;
    *(_WORD *)(this + 60) = v3;
    *(_DWORD *)(this + 32) = v6;
    v2 = *((_WORD *)a2 + 30);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0)
        goto LABEL_9;
      goto LABEL_22;
    }
  }
  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 36) = v7;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  v8 = *((_DWORD *)a2 + 12);
  v3 |= 0x200u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 48) = v8;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  v9 = *((_DWORD *)a2 + 11);
  v3 |= 0x100u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 44) = v9;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x400) == 0)
  {
LABEL_11:
    if ((v2 & 0x4000) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  v10 = *((_DWORD *)a2 + 13);
  v3 |= 0x400u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 52) = v10;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x4000) == 0)
  {
LABEL_12:
    if ((v2 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  v11 = *((_BYTE *)a2 + 59);
  v3 |= 0x4000u;
  *(_WORD *)(this + 60) = v3;
  *(_BYTE *)(this + 59) = v11;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x2000) == 0)
  {
LABEL_13:
    if ((v2 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_27;
  }
LABEL_26:
  v12 = *((_BYTE *)a2 + 58);
  v3 |= 0x2000u;
  *(_WORD *)(this + 60) = v3;
  *(_BYTE *)(this + 58) = v12;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x1000) == 0)
  {
LABEL_14:
    if ((v2 & 1) == 0)
      goto LABEL_15;
    goto LABEL_28;
  }
LABEL_27:
  v13 = *((_BYTE *)a2 + 57);
  v3 |= 0x1000u;
  *(_WORD *)(this + 60) = v3;
  *(_BYTE *)(this + 57) = v13;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 1) == 0)
  {
LABEL_15:
    if ((v2 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_29;
  }
LABEL_28:
  v14 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 60) = v3;
  *(_QWORD *)(this + 8) = v14;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x800) == 0)
  {
LABEL_16:
    if ((v2 & 2) == 0)
      goto LABEL_17;
    goto LABEL_30;
  }
LABEL_29:
  v15 = *((_BYTE *)a2 + 56);
  v3 |= 0x800u;
  *(_WORD *)(this + 60) = v3;
  *(_BYTE *)(this + 56) = v15;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 2) == 0)
  {
LABEL_17:
    if ((v2 & 4) == 0)
      goto LABEL_18;
    goto LABEL_31;
  }
LABEL_30:
  v16 = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 16) = v16;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 4) == 0)
  {
LABEL_18:
    if ((v2 & 0x80) == 0)
      return this;
LABEL_32:
    v18 = *((_DWORD *)a2 + 10);
    *(_WORD *)(this + 60) = v3 | 0x80;
    *(_DWORD *)(this + 40) = v18;
    return this;
  }
LABEL_31:
  v17 = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 20) = v17;
  if ((*((_WORD *)a2 + 30) & 0x80) != 0)
    goto LABEL_32;
  return this;
}

CMMsl *CMMsl::WalkingDetectionResult::operator=(CMMsl *a1, const CMMsl::WalkingDetectionResult *a2)
{
  CMMsl::WalkingDetectionResult *v3;
  _BYTE v5[64];

  if (a1 != a2)
  {
    CMMsl::WalkingDetectionResult::WalkingDetectionResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::WalkingDetectionResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::WalkingDetectionResult *a2, CMMsl::WalkingDetectionResult *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  float result;

  v3 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v3;
  v4 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  v5 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v5;
  v6 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v6;
  v7 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v7;
  v8 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v8;
  v9 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v9;
  v10 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v10;
  LOBYTE(v3) = *((_BYTE *)this + 59);
  *((_BYTE *)this + 59) = *((_BYTE *)a2 + 59);
  *((_BYTE *)a2 + 59) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 58);
  *((_BYTE *)this + 58) = *((_BYTE *)a2 + 58);
  *((_BYTE *)a2 + 58) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 57);
  *((_BYTE *)this + 57) = *((_BYTE *)a2 + 57);
  *((_BYTE *)a2 + 57) = v3;
  v11 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v11;
  LOBYTE(v11) = *((_BYTE *)this + 56);
  *((_BYTE *)this + 56) = *((_BYTE *)a2 + 56);
  *((_BYTE *)a2 + 56) = v11;
  v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  result = *((float *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((float *)a2 + 5) = result;
  LODWORD(v11) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v11;
  return result;
}

float CMMsl::WalkingDetectionResult::WalkingDetectionResult(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_251361B90;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_BYTE *)(a1 + 59) = *(_BYTE *)(a2 + 59);
  *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 58);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return result;
}

CMMsl *CMMsl::WalkingDetectionResult::operator=(CMMsl *this, uint64_t a2, CMMsl::WalkingDetectionResult *a3)
{
  uint64_t v4;
  int v5;
  _QWORD v7[2];
  __int128 v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;

  if (this != (CMMsl *)a2)
  {
    v14 = *(_DWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 60) = 0;
    v9 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 44);
    v12 = *(_DWORD *)(a2 + 52);
    v4 = *(_QWORD *)(a2 + 8);
    v7[0] = &off_251361B90;
    v7[1] = v4;
    v5 = *(_DWORD *)(a2 + 56);
    v8 = *(_OWORD *)(a2 + 16);
    LODWORD(v4) = *(_DWORD *)(a2 + 40);
    v13 = v5;
    v10 = v4;
    CMMsl::swap(this, (CMMsl::WalkingDetectionResult *)v7, a3);
    PB::Base::~Base((PB::Base *)v7);
  }
  return this;
}

uint64_t CMMsl::WalkingDetectionResult::formatText(CMMsl::WalkingDetectionResult *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 30);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "dataRate", *((float *)this + 4));
    v5 = *((_WORD *)this + 30);
    if ((v5 & 0x800) == 0)
    {
LABEL_3:
      if ((v5 & 0x1000) == 0)
        goto LABEL_4;
      goto LABEL_20;
    }
  }
  else if ((*((_WORD *)this + 30) & 0x800) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "isInterpolated");
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x1000) == 0)
  {
LABEL_4:
    if ((v5 & 0x2000) == 0)
      goto LABEL_5;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "isMissingSamples");
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x2000) == 0)
  {
LABEL_5:
    if ((v5 & 0x4000) == 0)
      goto LABEL_6;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "isWalkingFiltered");
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x4000) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0)
      goto LABEL_7;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "isWalkingRaw");
  v5 = *((_WORD *)this + 30);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "maxSampleDeltaInSecond", *((float *)this + 5));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "pedEnergyPlane", *((float *)this + 6));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "pedEnergyZ", *((float *)this + 7));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "pedEnergyZByPlane", *((float *)this + 8));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x40) == 0)
  {
LABEL_11:
    if ((v5 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "pedEnergyZPeak", *((float *)this + 9));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x80) == 0)
  {
LABEL_12:
    if ((v5 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "reversedTimestampCounts");
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x100) == 0)
  {
LABEL_13:
    if ((v5 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "thetaPitchFaceDeg", *((float *)this + 11));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x200) == 0)
  {
LABEL_14:
    if ((v5 & 0x400) == 0)
      goto LABEL_15;
LABEL_31:
    PB::TextFormatter::format(a2, "thetaYawFaceDeg", *((float *)this + 13));
    if ((*((_WORD *)this + 30) & 1) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_16;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "thetaRollFaceDeg", *((float *)this + 12));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x400) != 0)
    goto LABEL_31;
LABEL_15:
  if ((v5 & 1) != 0)
LABEL_16:
    PB::TextFormatter::format(a2, "timestamp");
  return PB::TextFormatter::endObject(a2);
}

