BOOL CMMsl::SwingDoTCandidate::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 32) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 32) & 2) == 0;
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
    return (*(_BYTE *)(a2 + 32) & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  return v2;
}

unint64_t CMMsl::DoTEstimatorHandSwing::hash_value(CMMsl::DoTEstimatorHandSwing *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  CMMsl::SwingDoTCandidate *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;

  if ((*((_WORD *)this + 84) & 2) != 0)
  {
    if (*((double *)this + 16) == 0.0)
      v2 = 0;
    else
      v2 = *((_QWORD *)this + 16);
  }
  else
  {
    v2 = 0;
  }
  v3 = PBHashBytes();
  v4 = PBHashBytes();
  v5 = *((_WORD *)this + 84);
  if ((v5 & 0x20) != 0)
  {
    v9 = *((float *)this + 37);
    if (v9 == 0.0)
      v6 = 0;
    else
      v6 = LODWORD(v9);
    if ((v5 & 1) != 0)
    {
LABEL_8:
      if (*((double *)this + 15) == 0.0)
        v7 = 0;
      else
        v7 = *((_QWORD *)this + 15);
      if ((*((_WORD *)this + 84) & 0x100) != 0)
        goto LABEL_12;
      goto LABEL_18;
    }
  }
  else
  {
    v6 = 0;
    if ((v5 & 1) != 0)
      goto LABEL_8;
  }
  v7 = 0;
  if ((*((_WORD *)this + 84) & 0x100) != 0)
  {
LABEL_12:
    v8 = *((int *)this + 40);
    goto LABEL_19;
  }
LABEL_18:
  v8 = 0;
LABEL_19:
  v10 = (CMMsl::SwingDoTCandidate *)*((_QWORD *)this + 13);
  if (v10)
    v11 = CMMsl::SwingDoTCandidate::hash_value(v10);
  else
    v11 = 0;
  v12 = *((_QWORD *)this + 14);
  if (v12)
    v12 = CMMsl::SwingDoTCandidate::hash_value((CMMsl::SwingDoTCandidate *)v12);
  if ((v5 & 0x10) != 0)
  {
    v13 = *((int *)this + 36);
    if ((v5 & 0x200) != 0)
    {
LABEL_26:
      v14 = *((unsigned __int8 *)this + 164);
      if ((v5 & 4) != 0)
        goto LABEL_27;
LABEL_37:
      v16 = 0;
      if ((v5 & 8) != 0)
        goto LABEL_30;
LABEL_38:
      v18 = 0;
      if ((v5 & 0x40) != 0)
        goto LABEL_33;
LABEL_39:
      v19 = 0;
      if ((v5 & 0x80) != 0)
        goto LABEL_34;
LABEL_40:
      v20 = 0;
      goto LABEL_41;
    }
  }
  else
  {
    v13 = 0;
    if ((v5 & 0x200) != 0)
      goto LABEL_26;
  }
  v14 = 0;
  if ((v5 & 4) == 0)
    goto LABEL_37;
LABEL_27:
  v15 = *((float *)this + 34);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  if ((v5 & 8) == 0)
    goto LABEL_38;
LABEL_30:
  v17 = *((float *)this + 35);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  if ((v5 & 0x40) == 0)
    goto LABEL_39;
LABEL_33:
  v19 = *((int *)this + 38);
  if ((v5 & 0x80) == 0)
    goto LABEL_40;
LABEL_34:
  v20 = *((int *)this + 39);
LABEL_41:
  v21 = v3 ^ v2 ^ v4 ^ v6 ^ v7 ^ v8 ^ v11 ^ v12 ^ v13 ^ v14 ^ v16 ^ v18 ^ v19;
  v22 = v20 ^ PBHashBytes();
  return v21 ^ v22 ^ PBHashBytes();
}

_QWORD *CMMsl::DoTEstimatorHandSwing::makeCandidateA(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[13])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_2513614C8;
    *(_DWORD *)(v2 + 32) = 0;
    this = (_QWORD *)v1[13];
    v1[13] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::DoTEstimatorHandSwing::makeCandidateB(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[14])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_2513614C8;
    *(_DWORD *)(v2 + 32) = 0;
    this = (_QWORD *)v1[14];
    v1[14] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

double CMMsl::DoTEstimatorWithTNB::DoTEstimatorWithTNB(CMMsl::DoTEstimatorWithTNB *this)
{
  double result;

  *(_QWORD *)this = &off_25135D280;
  *((_DWORD *)this + 51) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_25135D280;
  *((_DWORD *)this + 51) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  return result;
}

void CMMsl::DoTEstimatorWithTNB::~DoTEstimatorWithTNB(CMMsl::DoTEstimatorWithTNB *this)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  *(_QWORD *)this = &off_25135D280;
  v2 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)*((_QWORD *)this + 19);
  if (v3)
  {
    *((_QWORD *)this + 20) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 16);
  if (v4)
  {
    *((_QWORD *)this + 17) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 13);
  if (v5)
  {
    *((_QWORD *)this + 14) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 10);
  if (v6)
  {
    *((_QWORD *)this + 11) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 7);
  if (v7)
  {
    *((_QWORD *)this + 8) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 4);
  if (v8)
  {
    *((_QWORD *)this + 5) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 1);
  if (v9)
  {
    *((_QWORD *)this + 2) = v9;
    operator delete(v9);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::DoTEstimatorWithTNB::~DoTEstimatorWithTNB(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::DoTEstimatorWithTNB *CMMsl::DoTEstimatorWithTNB::DoTEstimatorWithTNB(CMMsl::DoTEstimatorWithTNB *this, const CMMsl::DoTEstimatorWithTNB *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  char v9;
  char v10;
  char **v11;
  CMMsl::AccelTNBFrame *v12;
  uint64_t v13;
  int v14;
  int v16;
  char v17;
  char v18;

  *(_QWORD *)this = &off_25135D280;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (_QWORD *)((char *)this + 8);
  *(_OWORD *)((char *)this + 56) = 0u;
  v5 = (_QWORD *)((char *)this + 56);
  *(_OWORD *)((char *)this + 104) = 0u;
  v6 = (_QWORD *)((char *)this + 104);
  *(_OWORD *)((char *)this + 152) = 0u;
  v7 = (_QWORD *)((char *)this + 152);
  *((_DWORD *)this + 51) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  if ((*((_BYTE *)a2 + 204) & 1) != 0)
  {
    v8 = *((_QWORD *)a2 + 23);
    *((_BYTE *)this + 204) = 1;
    *((_QWORD *)this + 23) = v8;
  }
  if (this != a2)
  {
    sub_242911380(v7, *((char **)a2 + 19), *((char **)a2 + 20), (uint64_t)(*((_QWORD *)a2 + 20) - *((_QWORD *)a2 + 19)) >> 2);
    sub_242911380((_QWORD *)this + 10, *((char **)a2 + 10), *((char **)a2 + 11), (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 2);
    sub_242911380(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
    sub_242911380((_QWORD *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
  }
  v9 = *((_BYTE *)a2 + 204);
  if ((v9 & 2) != 0)
  {
    v16 = *((_DWORD *)a2 + 48);
    *((_BYTE *)this + 204) |= 2u;
    *((_DWORD *)this + 48) = v16;
    v9 = *((_BYTE *)a2 + 204);
    if ((v9 & 8) == 0)
    {
LABEL_7:
      if ((v9 & 0x10) == 0)
        goto LABEL_8;
LABEL_22:
      v18 = *((_BYTE *)a2 + 201);
      *((_BYTE *)this + 204) |= 0x10u;
      *((_BYTE *)this + 201) = v18;
      if ((*((_BYTE *)a2 + 204) & 0x20) == 0)
        goto LABEL_10;
      goto LABEL_9;
    }
  }
  else if ((*((_BYTE *)a2 + 204) & 8) == 0)
  {
    goto LABEL_7;
  }
  v17 = *((_BYTE *)a2 + 200);
  *((_BYTE *)this + 204) |= 8u;
  *((_BYTE *)this + 200) = v17;
  v9 = *((_BYTE *)a2 + 204);
  if ((v9 & 0x10) != 0)
    goto LABEL_22;
LABEL_8:
  if ((v9 & 0x20) != 0)
  {
LABEL_9:
    v10 = *((_BYTE *)a2 + 202);
    *((_BYTE *)this + 204) |= 0x20u;
    *((_BYTE *)this + 202) = v10;
  }
LABEL_10:
  if (*((_QWORD *)a2 + 22))
  {
    v11 = (char **)operator new();
    v12 = CMMsl::AccelTNBFrame::AccelTNBFrame(v11, *((char ***)a2 + 22));
    v13 = *((_QWORD *)this + 22);
    *((_QWORD *)this + 22) = v12;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  if (this != a2)
    sub_242911380(v6, *((char **)a2 + 13), *((char **)a2 + 14), (uint64_t)(*((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13)) >> 2);
  if ((*((_BYTE *)a2 + 204) & 4) != 0)
  {
    v14 = *((_DWORD *)a2 + 49);
    *((_BYTE *)this + 204) |= 4u;
    *((_DWORD *)this + 49) = v14;
  }
  if (this != a2)
  {
    sub_242911380((_QWORD *)this + 16, *((char **)a2 + 16), *((char **)a2 + 17), (uint64_t)(*((_QWORD *)a2 + 17) - *((_QWORD *)a2 + 16)) >> 2);
    sub_242911380(v5, *((char **)a2 + 7), *((char **)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 2);
  }
  return this;
}

CMMsl *CMMsl::DoTEstimatorWithTNB::operator=(CMMsl *a1, const CMMsl::DoTEstimatorWithTNB *a2)
{
  CMMsl::DoTEstimatorWithTNB *v3;
  _BYTE v5[208];

  if (a1 != a2)
  {
    CMMsl::DoTEstimatorWithTNB::DoTEstimatorWithTNB((CMMsl::DoTEstimatorWithTNB *)v5, a2);
    CMMsl::swap(a1, (CMMsl::DoTEstimatorWithTNB *)v5, v3);
    CMMsl::DoTEstimatorWithTNB::~DoTEstimatorWithTNB((CMMsl::DoTEstimatorWithTNB *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::DoTEstimatorWithTNB *a2, CMMsl::DoTEstimatorWithTNB *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = *((_DWORD *)this + 51);
  *((_DWORD *)this + 51) = *((_DWORD *)a2 + 51);
  *((_DWORD *)a2 + 51) = v3;
  v4 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = *((_QWORD *)a2 + 23);
  *((_QWORD *)a2 + 23) = v4;
  v5 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 19) = v5;
  v6 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = *((_QWORD *)a2 + 20);
  *((_QWORD *)a2 + 20) = v6;
  v7 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = *((_QWORD *)a2 + 21);
  *((_QWORD *)a2 + 21) = v7;
  v8 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v8;
  v9 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v9;
  v10 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v10;
  v11 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v11;
  v12 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v12;
  v13 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v13;
  v14 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v14;
  v15 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v15;
  v16 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v16;
  LODWORD(v4) = *((_DWORD *)this + 48);
  *((_DWORD *)this + 48) = *((_DWORD *)a2 + 48);
  *((_DWORD *)a2 + 48) = v4;
  LOBYTE(v16) = *((_BYTE *)this + 200);
  *((_BYTE *)this + 200) = *((_BYTE *)a2 + 200);
  *((_BYTE *)a2 + 200) = v16;
  LOBYTE(v16) = *((_BYTE *)this + 201);
  *((_BYTE *)this + 201) = *((_BYTE *)a2 + 201);
  *((_BYTE *)a2 + 201) = v16;
  LOBYTE(v16) = *((_BYTE *)this + 202);
  *((_BYTE *)this + 202) = *((_BYTE *)a2 + 202);
  *((_BYTE *)a2 + 202) = v16;
  v17 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = *((_QWORD *)a2 + 22);
  *((_QWORD *)a2 + 22) = v17;
  v18 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v18;
  v19 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v19;
  v20 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v20;
  result = *((float *)this + 49);
  *((_DWORD *)this + 49) = *((_DWORD *)a2 + 49);
  *((float *)a2 + 49) = result;
  v22 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v22;
  v23 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v23;
  v24 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v24;
  v25 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v25;
  v26 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v26;
  v27 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v27;
  return result;
}

uint64_t CMMsl::DoTEstimatorWithTNB::DoTEstimatorWithTNB(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = &off_25135D280;
  v4 = a1 + 32;
  v5 = a1 + 80;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v6 = a1 + 8;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
  *(_DWORD *)(a2 + 204) = 0;
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  sub_242911330(a1 + 152, (__n128 *)(a2 + 152));
  sub_242911330(v5, (__n128 *)(a2 + 80));
  sub_242911330(v6, (__n128 *)(a2 + 8));
  sub_242911330(v4, (__n128 *)(a2 + 32));
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_BYTE *)(a1 + 201) = *(_BYTE *)(a2 + 201);
  *(_BYTE *)(a1 + 202) = *(_BYTE *)(a2 + 202);
  v7 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a2 + 176) = 0;
  v8 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  sub_242911330(a1 + 104, (__n128 *)(a2 + 104));
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 196);
  sub_242911330(a1 + 128, (__n128 *)(a2 + 128));
  sub_242911330(a1 + 56, (__n128 *)(a2 + 56));
  return a1;
}

CMMsl *CMMsl::DoTEstimatorWithTNB::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::DoTEstimatorWithTNB *v3;
  _BYTE v5[208];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::DoTEstimatorWithTNB::DoTEstimatorWithTNB((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::DoTEstimatorWithTNB *)v5, v3);
    CMMsl::DoTEstimatorWithTNB::~DoTEstimatorWithTNB((CMMsl::DoTEstimatorWithTNB *)v5);
  }
  return a1;
}

uint64_t CMMsl::DoTEstimatorWithTNB::formatText(CMMsl::DoTEstimatorWithTNB *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  float *v6;
  float *v7;
  float v8;
  float *v9;
  float *v10;
  float v11;
  char v12;
  float *v13;
  float *v14;
  float v15;
  float *v16;
  float *v17;
  float v18;
  float *v19;
  float *v20;
  float v21;
  float *v22;
  float *v23;
  float v24;
  float *v25;
  float *v26;
  float v27;
  char v28;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 22);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "TNBFrame");
  if ((*((_BYTE *)this + 204) & 2) != 0)
    PB::TextFormatter::format(a2, "dotQuality", *((float *)this + 48));
  v6 = (float *)*((_QWORD *)this + 1);
  v7 = (float *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(a2, "dotVector", v8);
  }
  if ((*((_BYTE *)this + 204) & 8) != 0)
    PB::TextFormatter::format(a2, "fusingGaze");
  v9 = (float *)*((_QWORD *)this + 4);
  v10 = (float *)*((_QWORD *)this + 5);
  while (v9 != v10)
  {
    v11 = *v9++;
    PB::TextFormatter::format(a2, "gazeVector", v11);
  }
  v12 = *((_BYTE *)this + 204);
  if ((v12 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "hasStep");
    v12 = *((_BYTE *)this + 204);
  }
  if ((v12 & 0x20) != 0)
    PB::TextFormatter::format(a2, "hasValidTNBFrame");
  v13 = (float *)*((_QWORD *)this + 7);
  v14 = (float *)*((_QWORD *)this + 8);
  while (v13 != v14)
  {
    v15 = *v13++;
    PB::TextFormatter::format(a2, "lpfInertialRotationRate", v15);
  }
  v16 = (float *)*((_QWORD *)this + 10);
  v17 = (float *)*((_QWORD *)this + 11);
  while (v16 != v17)
  {
    v18 = *v16++;
    PB::TextFormatter::format(a2, "lpfInertialUserAccel", v18);
  }
  v19 = (float *)*((_QWORD *)this + 13);
  v20 = (float *)*((_QWORD *)this + 14);
  while (v19 != v20)
  {
    v21 = *v19++;
    PB::TextFormatter::format(a2, "rawDoTVector", v21);
  }
  v22 = (float *)*((_QWORD *)this + 16);
  v23 = (float *)*((_QWORD *)this + 17);
  while (v22 != v23)
  {
    v24 = *v22++;
    PB::TextFormatter::format(a2, "rawInertialRotationRate", v24);
  }
  v25 = (float *)*((_QWORD *)this + 19);
  v26 = (float *)*((_QWORD *)this + 20);
  while (v25 != v26)
  {
    v27 = *v25++;
    PB::TextFormatter::format(a2, "rawInertialUserAccel", v27);
  }
  v28 = *((_BYTE *)this + 204);
  if ((v28 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "speed", *((float *)this + 49));
    v28 = *((_BYTE *)this + 204);
  }
  if ((v28 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 23));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::DoTEstimatorWithTNB::readFrom(CMMsl::DoTEstimatorWithTNB *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  _DWORD *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  _DWORD *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  _DWORD *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  int v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  _DWORD *v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  _DWORD *v75;
  int v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  int v81;
  BOOL v82;
  unint64_t v83;
  unint64_t v84;
  int v85;
  BOOL v86;
  unint64_t v87;
  unint64_t v88;
  int v89;
  BOOL v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  char *v96;
  _DWORD *v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  _DWORD *v104;
  int v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  char *v111;
  _DWORD *v112;
  char *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  _DWORD *v119;
  int v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  char *v125;
  _DWORD *v126;
  char *v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  _DWORD *v133;
  int v134;
  unint64_t v135;
  unint64_t v136;
  char *v137;
  _DWORD *v138;
  unint64_t v139;
  char *v140;
  unint64_t v141;
  char *v142;
  unint64_t v143;
  char *v144;
  unint64_t v145;
  char *v146;
  unint64_t v147;
  char *v148;
  unint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  _DWORD *v193;
  int v194;
  _DWORD *v195;
  int v196;
  _DWORD *v197;
  int v198;
  _DWORD *v199;
  int v200;
  _DWORD *v201;
  int v202;
  _DWORD *v203;
  int v204;
  _DWORD *v205;
  int v206;
  unint64_t v207;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_21:
      v19 = v11 & 7;
      if (v19 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 204) |= 1u;
          v20 = *((_QWORD *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_340;
          *((_QWORD *)this + 23) = *(_QWORD *)(*(_QWORD *)a2 + v20);
          v21 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_343;
        case 2u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v22 = *((_QWORD *)a2 + 1);
            v23 = *((_QWORD *)a2 + 2);
            while (v22 < v23 && !*((_BYTE *)a2 + 24))
            {
              v25 = (char *)*((_QWORD *)this + 20);
              v24 = *((_QWORD *)this + 21);
              if ((unint64_t)v25 >= v24)
              {
                v27 = (char *)*((_QWORD *)this + 19);
                v28 = (v25 - v27) >> 2;
                v29 = v28 + 1;
                if ((unint64_t)(v28 + 1) >> 62)
                  goto LABEL_351;
                v30 = v24 - (_QWORD)v27;
                if (v30 >> 1 > v29)
                  v29 = v30 >> 1;
                if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
                  v31 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v31 = v29;
                if (v31)
                {
                  v31 = (unint64_t)sub_2429114B8(v31);
                  v27 = (char *)*((_QWORD *)this + 19);
                  v25 = (char *)*((_QWORD *)this + 20);
                }
                else
                {
                  v32 = 0;
                }
                v33 = (_DWORD *)(v31 + 4 * v28);
                *v33 = 0;
                v26 = v33 + 1;
                while (v25 != v27)
                {
                  v34 = *((_DWORD *)v25 - 1);
                  v25 -= 4;
                  *--v33 = v34;
                }
                *((_QWORD *)this + 19) = v33;
                *((_QWORD *)this + 20) = v26;
                *((_QWORD *)this + 21) = v31 + 4 * v32;
                if (v27)
                  operator delete(v27);
              }
              else
              {
                *(_DWORD *)v25 = 0;
                v26 = v25 + 4;
              }
              *((_QWORD *)this + 20) = v26;
              v35 = *((_QWORD *)a2 + 1);
              if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_211;
              *(v26 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v35);
              v23 = *((_QWORD *)a2 + 2);
              v22 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v22;
            }
            goto LABEL_212;
          }
          v137 = (char *)*((_QWORD *)this + 20);
          v136 = *((_QWORD *)this + 21);
          if ((unint64_t)v137 >= v136)
          {
            v151 = (char *)*((_QWORD *)this + 19);
            v152 = (v137 - v151) >> 2;
            v153 = v152 + 1;
            if ((unint64_t)(v152 + 1) >> 62)
              goto LABEL_351;
            v154 = v136 - (_QWORD)v151;
            if (v154 >> 1 > v153)
              v153 = v154 >> 1;
            if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFFCLL)
              v155 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v155 = v153;
            if (v155)
            {
              v155 = (unint64_t)sub_2429114B8(v155);
              v151 = (char *)*((_QWORD *)this + 19);
              v137 = (char *)*((_QWORD *)this + 20);
            }
            else
            {
              v156 = 0;
            }
            v193 = (_DWORD *)(v155 + 4 * v152);
            *v193 = 0;
            v138 = v193 + 1;
            while (v137 != v151)
            {
              v194 = *((_DWORD *)v137 - 1);
              v137 -= 4;
              *--v193 = v194;
            }
            *((_QWORD *)this + 19) = v193;
            *((_QWORD *)this + 20) = v138;
            *((_QWORD *)this + 21) = v155 + 4 * v156;
            if (v151)
              operator delete(v151);
          }
          else
          {
            *(_DWORD *)v137 = 0;
            v138 = v137 + 4;
          }
          *((_QWORD *)this + 20) = v138;
          goto LABEL_338;
        case 3u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v36 = *((_QWORD *)a2 + 1);
            v37 = *((_QWORD *)a2 + 2);
            while (v36 < v37 && !*((_BYTE *)a2 + 24))
            {
              v39 = (char *)*((_QWORD *)this + 11);
              v38 = *((_QWORD *)this + 12);
              if ((unint64_t)v39 >= v38)
              {
                v41 = (char *)*((_QWORD *)this + 10);
                v42 = (v39 - v41) >> 2;
                v43 = v42 + 1;
                if ((unint64_t)(v42 + 1) >> 62)
                  goto LABEL_351;
                v44 = v38 - (_QWORD)v41;
                if (v44 >> 1 > v43)
                  v43 = v44 >> 1;
                if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL)
                  v45 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v45 = v43;
                if (v45)
                {
                  v45 = (unint64_t)sub_2429114B8(v45);
                  v41 = (char *)*((_QWORD *)this + 10);
                  v39 = (char *)*((_QWORD *)this + 11);
                }
                else
                {
                  v46 = 0;
                }
                v47 = (_DWORD *)(v45 + 4 * v42);
                *v47 = 0;
                v40 = v47 + 1;
                while (v39 != v41)
                {
                  v48 = *((_DWORD *)v39 - 1);
                  v39 -= 4;
                  *--v47 = v48;
                }
                *((_QWORD *)this + 10) = v47;
                *((_QWORD *)this + 11) = v40;
                *((_QWORD *)this + 12) = v45 + 4 * v46;
                if (v41)
                  operator delete(v41);
              }
              else
              {
                *(_DWORD *)v39 = 0;
                v40 = v39 + 4;
              }
              *((_QWORD *)this + 11) = v40;
              v49 = *((_QWORD *)a2 + 1);
              if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_211;
              *(v40 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v49);
              v37 = *((_QWORD *)a2 + 2);
              v36 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v36;
            }
            goto LABEL_212;
          }
          v140 = (char *)*((_QWORD *)this + 11);
          v139 = *((_QWORD *)this + 12);
          if ((unint64_t)v140 >= v139)
          {
            v157 = (char *)*((_QWORD *)this + 10);
            v158 = (v140 - v157) >> 2;
            v159 = v158 + 1;
            if ((unint64_t)(v158 + 1) >> 62)
              goto LABEL_351;
            v160 = v139 - (_QWORD)v157;
            if (v160 >> 1 > v159)
              v159 = v160 >> 1;
            if ((unint64_t)v160 >= 0x7FFFFFFFFFFFFFFCLL)
              v161 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v161 = v159;
            if (v161)
            {
              v161 = (unint64_t)sub_2429114B8(v161);
              v157 = (char *)*((_QWORD *)this + 10);
              v140 = (char *)*((_QWORD *)this + 11);
            }
            else
            {
              v162 = 0;
            }
            v195 = (_DWORD *)(v161 + 4 * v158);
            *v195 = 0;
            v138 = v195 + 1;
            while (v140 != v157)
            {
              v196 = *((_DWORD *)v140 - 1);
              v140 -= 4;
              *--v195 = v196;
            }
            *((_QWORD *)this + 10) = v195;
            *((_QWORD *)this + 11) = v138;
            *((_QWORD *)this + 12) = v161 + 4 * v162;
            if (v157)
              operator delete(v157);
          }
          else
          {
            *(_DWORD *)v140 = 0;
            v138 = v140 + 4;
          }
          *((_QWORD *)this + 11) = v138;
          goto LABEL_338;
        case 4u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v50 = *((_QWORD *)a2 + 1);
            v51 = *((_QWORD *)a2 + 2);
            while (v50 < v51 && !*((_BYTE *)a2 + 24))
            {
              v53 = (char *)*((_QWORD *)this + 2);
              v52 = *((_QWORD *)this + 3);
              if ((unint64_t)v53 >= v52)
              {
                v55 = (char *)*((_QWORD *)this + 1);
                v56 = (v53 - v55) >> 2;
                v57 = v56 + 1;
                if ((unint64_t)(v56 + 1) >> 62)
                  goto LABEL_351;
                v58 = v52 - (_QWORD)v55;
                if (v58 >> 1 > v57)
                  v57 = v58 >> 1;
                if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL)
                  v59 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v59 = v57;
                if (v59)
                {
                  v59 = (unint64_t)sub_2429114B8(v59);
                  v55 = (char *)*((_QWORD *)this + 1);
                  v53 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v60 = 0;
                }
                v61 = (_DWORD *)(v59 + 4 * v56);
                *v61 = 0;
                v54 = v61 + 1;
                while (v53 != v55)
                {
                  v62 = *((_DWORD *)v53 - 1);
                  v53 -= 4;
                  *--v61 = v62;
                }
                *((_QWORD *)this + 1) = v61;
                *((_QWORD *)this + 2) = v54;
                *((_QWORD *)this + 3) = v59 + 4 * v60;
                if (v55)
                  operator delete(v55);
              }
              else
              {
                *(_DWORD *)v53 = 0;
                v54 = v53 + 4;
              }
              *((_QWORD *)this + 2) = v54;
              v63 = *((_QWORD *)a2 + 1);
              if (v63 > 0xFFFFFFFFFFFFFFFBLL || v63 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_211;
              *(v54 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v63);
              v51 = *((_QWORD *)a2 + 2);
              v50 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v50;
            }
            goto LABEL_212;
          }
          v142 = (char *)*((_QWORD *)this + 2);
          v141 = *((_QWORD *)this + 3);
          if ((unint64_t)v142 >= v141)
          {
            v163 = (char *)*((_QWORD *)this + 1);
            v164 = (v142 - v163) >> 2;
            v165 = v164 + 1;
            if ((unint64_t)(v164 + 1) >> 62)
              goto LABEL_351;
            v166 = v141 - (_QWORD)v163;
            if (v166 >> 1 > v165)
              v165 = v166 >> 1;
            if ((unint64_t)v166 >= 0x7FFFFFFFFFFFFFFCLL)
              v167 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v167 = v165;
            if (v167)
            {
              v167 = (unint64_t)sub_2429114B8(v167);
              v163 = (char *)*((_QWORD *)this + 1);
              v142 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v168 = 0;
            }
            v197 = (_DWORD *)(v167 + 4 * v164);
            *v197 = 0;
            v138 = v197 + 1;
            while (v142 != v163)
            {
              v198 = *((_DWORD *)v142 - 1);
              v142 -= 4;
              *--v197 = v198;
            }
            *((_QWORD *)this + 1) = v197;
            *((_QWORD *)this + 2) = v138;
            *((_QWORD *)this + 3) = v167 + 4 * v168;
            if (v163)
              operator delete(v163);
          }
          else
          {
            *(_DWORD *)v142 = 0;
            v138 = v142 + 4;
          }
          *((_QWORD *)this + 2) = v138;
          goto LABEL_338;
        case 5u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v64 = *((_QWORD *)a2 + 1);
            v65 = *((_QWORD *)a2 + 2);
            while (v64 < v65 && !*((_BYTE *)a2 + 24))
            {
              v67 = (char *)*((_QWORD *)this + 5);
              v66 = *((_QWORD *)this + 6);
              if ((unint64_t)v67 >= v66)
              {
                v69 = (char *)*((_QWORD *)this + 4);
                v70 = (v67 - v69) >> 2;
                v71 = v70 + 1;
                if ((unint64_t)(v70 + 1) >> 62)
                  goto LABEL_351;
                v72 = v66 - (_QWORD)v69;
                if (v72 >> 1 > v71)
                  v71 = v72 >> 1;
                if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL)
                  v73 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v73 = v71;
                if (v73)
                {
                  v73 = (unint64_t)sub_2429114B8(v73);
                  v69 = (char *)*((_QWORD *)this + 4);
                  v67 = (char *)*((_QWORD *)this + 5);
                }
                else
                {
                  v74 = 0;
                }
                v75 = (_DWORD *)(v73 + 4 * v70);
                *v75 = 0;
                v68 = v75 + 1;
                while (v67 != v69)
                {
                  v76 = *((_DWORD *)v67 - 1);
                  v67 -= 4;
                  *--v75 = v76;
                }
                *((_QWORD *)this + 4) = v75;
                *((_QWORD *)this + 5) = v68;
                *((_QWORD *)this + 6) = v73 + 4 * v74;
                if (v69)
                  operator delete(v69);
              }
              else
              {
                *(_DWORD *)v67 = 0;
                v68 = v67 + 4;
              }
              *((_QWORD *)this + 5) = v68;
              v77 = *((_QWORD *)a2 + 1);
              if (v77 > 0xFFFFFFFFFFFFFFFBLL || v77 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_211;
              *(v68 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v77);
              v65 = *((_QWORD *)a2 + 2);
              v64 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v64;
            }
            goto LABEL_212;
          }
          v144 = (char *)*((_QWORD *)this + 5);
          v143 = *((_QWORD *)this + 6);
          if ((unint64_t)v144 >= v143)
          {
            v169 = (char *)*((_QWORD *)this + 4);
            v170 = (v144 - v169) >> 2;
            v171 = v170 + 1;
            if ((unint64_t)(v170 + 1) >> 62)
              goto LABEL_351;
            v172 = v143 - (_QWORD)v169;
            if (v172 >> 1 > v171)
              v171 = v172 >> 1;
            if ((unint64_t)v172 >= 0x7FFFFFFFFFFFFFFCLL)
              v173 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v173 = v171;
            if (v173)
            {
              v173 = (unint64_t)sub_2429114B8(v173);
              v169 = (char *)*((_QWORD *)this + 4);
              v144 = (char *)*((_QWORD *)this + 5);
            }
            else
            {
              v174 = 0;
            }
            v199 = (_DWORD *)(v173 + 4 * v170);
            *v199 = 0;
            v138 = v199 + 1;
            while (v144 != v169)
            {
              v200 = *((_DWORD *)v144 - 1);
              v144 -= 4;
              *--v199 = v200;
            }
            *((_QWORD *)this + 4) = v199;
            *((_QWORD *)this + 5) = v138;
            *((_QWORD *)this + 6) = v173 + 4 * v174;
            if (v169)
              operator delete(v169);
          }
          else
          {
            *(_DWORD *)v144 = 0;
            v138 = v144 + 4;
          }
          *((_QWORD *)this + 5) = v138;
          goto LABEL_338;
        case 6u:
          *((_BYTE *)this + 204) |= 2u;
          v78 = *((_QWORD *)a2 + 1);
          if (v78 > 0xFFFFFFFFFFFFFFFBLL || v78 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_340;
          *((_DWORD *)this + 48) = *(_DWORD *)(*(_QWORD *)a2 + v78);
          goto LABEL_342;
        case 7u:
          *((_BYTE *)this + 204) |= 8u;
          v79 = *((_QWORD *)a2 + 1);
          if (v79 >= *((_QWORD *)a2 + 2))
          {
            v82 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v80 = v79 + 1;
            v81 = *(unsigned __int8 *)(*(_QWORD *)a2 + v79);
            *((_QWORD *)a2 + 1) = v80;
            v82 = v81 != 0;
          }
          *((_BYTE *)this + 200) = v82;
          goto LABEL_344;
        case 8u:
          *((_BYTE *)this + 204) |= 0x10u;
          v83 = *((_QWORD *)a2 + 1);
          if (v83 >= *((_QWORD *)a2 + 2))
          {
            v86 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v84 = v83 + 1;
            v85 = *(unsigned __int8 *)(*(_QWORD *)a2 + v83);
            *((_QWORD *)a2 + 1) = v84;
            v86 = v85 != 0;
          }
          *((_BYTE *)this + 201) = v86;
          goto LABEL_344;
        case 9u:
          *((_BYTE *)this + 204) |= 0x20u;
          v87 = *((_QWORD *)a2 + 1);
          if (v87 >= *((_QWORD *)a2 + 2))
          {
            v90 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v88 = v87 + 1;
            v89 = *(unsigned __int8 *)(*(_QWORD *)a2 + v87);
            *((_QWORD *)a2 + 1) = v88;
            v90 = v89 != 0;
          }
          *((_BYTE *)this + 202) = v90;
          goto LABEL_344;
        case 0xAu:
          v91 = operator new();
          *(_QWORD *)v91 = &off_25135BE60;
          *(_DWORD *)(v91 + 116) = 0;
          *(_OWORD *)(v91 + 8) = 0u;
          *(_OWORD *)(v91 + 24) = 0u;
          *(_OWORD *)(v91 + 40) = 0u;
          *(_OWORD *)(v91 + 56) = 0u;
          *(_QWORD *)(v91 + 72) = 0;
          v92 = *((_QWORD *)this + 22);
          *((_QWORD *)this + 22) = v91;
          if (v92)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v92 + 8))(v92);
            v91 = *((_QWORD *)this + 22);
          }
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v91 + 16))(v91, a2) & 1) == 0)
          {
            return 0;
          }
          goto LABEL_212;
        case 0xBu:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v93 = *((_QWORD *)a2 + 1);
            v94 = *((_QWORD *)a2 + 2);
            while (v93 < v94 && !*((_BYTE *)a2 + 24))
            {
              v96 = (char *)*((_QWORD *)this + 14);
              v95 = *((_QWORD *)this + 15);
              if ((unint64_t)v96 >= v95)
              {
                v98 = (char *)*((_QWORD *)this + 13);
                v99 = (v96 - v98) >> 2;
                v100 = v99 + 1;
                if ((unint64_t)(v99 + 1) >> 62)
                  goto LABEL_351;
                v101 = v95 - (_QWORD)v98;
                if (v101 >> 1 > v100)
                  v100 = v101 >> 1;
                if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFFCLL)
                  v102 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v102 = v100;
                if (v102)
                {
                  v102 = (unint64_t)sub_2429114B8(v102);
                  v98 = (char *)*((_QWORD *)this + 13);
                  v96 = (char *)*((_QWORD *)this + 14);
                }
                else
                {
                  v103 = 0;
                }
                v104 = (_DWORD *)(v102 + 4 * v99);
                *v104 = 0;
                v97 = v104 + 1;
                while (v96 != v98)
                {
                  v105 = *((_DWORD *)v96 - 1);
                  v96 -= 4;
                  *--v104 = v105;
                }
                *((_QWORD *)this + 13) = v104;
                *((_QWORD *)this + 14) = v97;
                *((_QWORD *)this + 15) = v102 + 4 * v103;
                if (v98)
                  operator delete(v98);
              }
              else
              {
                *(_DWORD *)v96 = 0;
                v97 = v96 + 4;
              }
              *((_QWORD *)this + 14) = v97;
              v106 = *((_QWORD *)a2 + 1);
              if (v106 > 0xFFFFFFFFFFFFFFFBLL || v106 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_211;
              *(v97 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v106);
              v94 = *((_QWORD *)a2 + 2);
              v93 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v93;
            }
            goto LABEL_212;
          }
          v146 = (char *)*((_QWORD *)this + 14);
          v145 = *((_QWORD *)this + 15);
          if ((unint64_t)v146 >= v145)
          {
            v175 = (char *)*((_QWORD *)this + 13);
            v176 = (v146 - v175) >> 2;
            v177 = v176 + 1;
            if ((unint64_t)(v176 + 1) >> 62)
              goto LABEL_351;
            v178 = v145 - (_QWORD)v175;
            if (v178 >> 1 > v177)
              v177 = v178 >> 1;
            if ((unint64_t)v178 >= 0x7FFFFFFFFFFFFFFCLL)
              v179 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v179 = v177;
            if (v179)
            {
              v179 = (unint64_t)sub_2429114B8(v179);
              v175 = (char *)*((_QWORD *)this + 13);
              v146 = (char *)*((_QWORD *)this + 14);
            }
            else
            {
              v180 = 0;
            }
            v201 = (_DWORD *)(v179 + 4 * v176);
            *v201 = 0;
            v138 = v201 + 1;
            while (v146 != v175)
            {
              v202 = *((_DWORD *)v146 - 1);
              v146 -= 4;
              *--v201 = v202;
            }
            *((_QWORD *)this + 13) = v201;
            *((_QWORD *)this + 14) = v138;
            *((_QWORD *)this + 15) = v179 + 4 * v180;
            if (v175)
              operator delete(v175);
          }
          else
          {
            *(_DWORD *)v146 = 0;
            v138 = v146 + 4;
          }
          *((_QWORD *)this + 14) = v138;
          goto LABEL_338;
        case 0xCu:
          *((_BYTE *)this + 204) |= 4u;
          v107 = *((_QWORD *)a2 + 1);
          if (v107 > 0xFFFFFFFFFFFFFFFBLL || v107 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_340;
          *((_DWORD *)this + 49) = *(_DWORD *)(*(_QWORD *)a2 + v107);
          goto LABEL_342;
        case 0xDu:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v108 = *((_QWORD *)a2 + 1);
            v109 = *((_QWORD *)a2 + 2);
            while (v108 < v109 && !*((_BYTE *)a2 + 24))
            {
              v111 = (char *)*((_QWORD *)this + 17);
              v110 = *((_QWORD *)this + 18);
              if ((unint64_t)v111 >= v110)
              {
                v113 = (char *)*((_QWORD *)this + 16);
                v114 = (v111 - v113) >> 2;
                v115 = v114 + 1;
                if ((unint64_t)(v114 + 1) >> 62)
                  goto LABEL_351;
                v116 = v110 - (_QWORD)v113;
                if (v116 >> 1 > v115)
                  v115 = v116 >> 1;
                if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFFCLL)
                  v117 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v117 = v115;
                if (v117)
                {
                  v117 = (unint64_t)sub_2429114B8(v117);
                  v113 = (char *)*((_QWORD *)this + 16);
                  v111 = (char *)*((_QWORD *)this + 17);
                }
                else
                {
                  v118 = 0;
                }
                v119 = (_DWORD *)(v117 + 4 * v114);
                *v119 = 0;
                v112 = v119 + 1;
                while (v111 != v113)
                {
                  v120 = *((_DWORD *)v111 - 1);
                  v111 -= 4;
                  *--v119 = v120;
                }
                *((_QWORD *)this + 16) = v119;
                *((_QWORD *)this + 17) = v112;
                *((_QWORD *)this + 18) = v117 + 4 * v118;
                if (v113)
                  operator delete(v113);
              }
              else
              {
                *(_DWORD *)v111 = 0;
                v112 = v111 + 4;
              }
              *((_QWORD *)this + 17) = v112;
              v121 = *((_QWORD *)a2 + 1);
              if (v121 > 0xFFFFFFFFFFFFFFFBLL || v121 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_211;
              *(v112 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v121);
              v109 = *((_QWORD *)a2 + 2);
              v108 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v108;
            }
            goto LABEL_212;
          }
          v148 = (char *)*((_QWORD *)this + 17);
          v147 = *((_QWORD *)this + 18);
          if ((unint64_t)v148 >= v147)
          {
            v181 = (char *)*((_QWORD *)this + 16);
            v182 = (v148 - v181) >> 2;
            v183 = v182 + 1;
            if ((unint64_t)(v182 + 1) >> 62)
              goto LABEL_351;
            v184 = v147 - (_QWORD)v181;
            if (v184 >> 1 > v183)
              v183 = v184 >> 1;
            if ((unint64_t)v184 >= 0x7FFFFFFFFFFFFFFCLL)
              v185 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v185 = v183;
            if (v185)
            {
              v185 = (unint64_t)sub_2429114B8(v185);
              v181 = (char *)*((_QWORD *)this + 16);
              v148 = (char *)*((_QWORD *)this + 17);
            }
            else
            {
              v186 = 0;
            }
            v203 = (_DWORD *)(v185 + 4 * v182);
            *v203 = 0;
            v138 = v203 + 1;
            while (v148 != v181)
            {
              v204 = *((_DWORD *)v148 - 1);
              v148 -= 4;
              *--v203 = v204;
            }
            *((_QWORD *)this + 16) = v203;
            *((_QWORD *)this + 17) = v138;
            *((_QWORD *)this + 18) = v185 + 4 * v186;
            if (v181)
              operator delete(v181);
          }
          else
          {
            *(_DWORD *)v148 = 0;
            v138 = v148 + 4;
          }
          *((_QWORD *)this + 17) = v138;
          goto LABEL_338;
        case 0xEu:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v122 = *((_QWORD *)a2 + 1);
            v123 = *((_QWORD *)a2 + 2);
            while (v122 < v123 && !*((_BYTE *)a2 + 24))
            {
              v125 = (char *)*((_QWORD *)this + 8);
              v124 = *((_QWORD *)this + 9);
              if ((unint64_t)v125 >= v124)
              {
                v127 = (char *)*((_QWORD *)this + 7);
                v128 = (v125 - v127) >> 2;
                v129 = v128 + 1;
                if ((unint64_t)(v128 + 1) >> 62)
                  goto LABEL_351;
                v130 = v124 - (_QWORD)v127;
                if (v130 >> 1 > v129)
                  v129 = v130 >> 1;
                if ((unint64_t)v130 >= 0x7FFFFFFFFFFFFFFCLL)
                  v131 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v131 = v129;
                if (v131)
                {
                  v131 = (unint64_t)sub_2429114B8(v131);
                  v127 = (char *)*((_QWORD *)this + 7);
                  v125 = (char *)*((_QWORD *)this + 8);
                }
                else
                {
                  v132 = 0;
                }
                v133 = (_DWORD *)(v131 + 4 * v128);
                *v133 = 0;
                v126 = v133 + 1;
                while (v125 != v127)
                {
                  v134 = *((_DWORD *)v125 - 1);
                  v125 -= 4;
                  *--v133 = v134;
                }
                *((_QWORD *)this + 7) = v133;
                *((_QWORD *)this + 8) = v126;
                *((_QWORD *)this + 9) = v131 + 4 * v132;
                if (v127)
                  operator delete(v127);
              }
              else
              {
                *(_DWORD *)v125 = 0;
                v126 = v125 + 4;
              }
              *((_QWORD *)this + 8) = v126;
              v135 = *((_QWORD *)a2 + 1);
              if (v135 > 0xFFFFFFFFFFFFFFFBLL || v135 + 4 > *((_QWORD *)a2 + 2))
              {
LABEL_211:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v126 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v135);
              v123 = *((_QWORD *)a2 + 2);
              v122 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v122;
            }
LABEL_212:
            PB::Reader::recallMark();
          }
          else
          {
            v150 = (char *)*((_QWORD *)this + 8);
            v149 = *((_QWORD *)this + 9);
            if ((unint64_t)v150 >= v149)
            {
              v187 = (char *)*((_QWORD *)this + 7);
              v188 = (v150 - v187) >> 2;
              v189 = v188 + 1;
              if ((unint64_t)(v188 + 1) >> 62)
LABEL_351:
                sub_242729A44();
              v190 = v149 - (_QWORD)v187;
              if (v190 >> 1 > v189)
                v189 = v190 >> 1;
              if ((unint64_t)v190 >= 0x7FFFFFFFFFFFFFFCLL)
                v191 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v191 = v189;
              if (v191)
              {
                v191 = (unint64_t)sub_2429114B8(v191);
                v187 = (char *)*((_QWORD *)this + 7);
                v150 = (char *)*((_QWORD *)this + 8);
              }
              else
              {
                v192 = 0;
              }
              v205 = (_DWORD *)(v191 + 4 * v188);
              *v205 = 0;
              v138 = v205 + 1;
              while (v150 != v187)
              {
                v206 = *((_DWORD *)v150 - 1);
                v150 -= 4;
                *--v205 = v206;
              }
              *((_QWORD *)this + 7) = v205;
              *((_QWORD *)this + 8) = v138;
              *((_QWORD *)this + 9) = v191 + 4 * v192;
              if (v187)
                operator delete(v187);
            }
            else
            {
              *(_DWORD *)v150 = 0;
              v138 = v150 + 4;
            }
            *((_QWORD *)this + 8) = v138;
LABEL_338:
            v207 = *((_QWORD *)a2 + 1);
            if (v207 <= 0xFFFFFFFFFFFFFFFBLL && v207 + 4 <= *((_QWORD *)a2 + 2))
            {
              *(v138 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v207);
LABEL_342:
              v21 = *((_QWORD *)a2 + 1) + 4;
LABEL_343:
              *((_QWORD *)a2 + 1) = v21;
            }
            else
            {
LABEL_340:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
          break;
        default:
          goto LABEL_19;
      }
      goto LABEL_344;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_21;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    if ((PB::Reader::skip(a2) & 1) == 0)
      return 0;
LABEL_344:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
}

uint64_t CMMsl::DoTEstimatorWithTNB::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;
  float *v10;
  float *v11;
  float v12;
  float *v13;
  float *v14;
  float v15;
  char v16;
  const PB::Base *v17;
  float *v18;
  float *v19;
  float v20;
  float *v21;
  float *v22;
  float v23;
  float *v24;
  float *v25;
  float v26;

  v3 = this;
  if ((*(_BYTE *)(this + 204) & 1) != 0)
    this = PB::Writer::write(a2, *(double *)(this + 184));
  v4 = *(float **)(v3 + 152);
  v5 = *(float **)(v3 + 160);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6);
  }
  v7 = *(float **)(v3 + 80);
  v8 = *(float **)(v3 + 88);
  while (v7 != v8)
  {
    v9 = *v7++;
    this = PB::Writer::write(a2, v9);
  }
  v10 = *(float **)(v3 + 8);
  v11 = *(float **)(v3 + 16);
  while (v10 != v11)
  {
    v12 = *v10++;
    this = PB::Writer::write(a2, v12);
  }
  v13 = *(float **)(v3 + 32);
  v14 = *(float **)(v3 + 40);
  while (v13 != v14)
  {
    v15 = *v13++;
    this = PB::Writer::write(a2, v15);
  }
  v16 = *(_BYTE *)(v3 + 204);
  if ((v16 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 192));
    v16 = *(_BYTE *)(v3 + 204);
    if ((v16 & 8) == 0)
    {
LABEL_17:
      if ((v16 & 0x10) == 0)
        goto LABEL_18;
      goto LABEL_36;
    }
  }
  else if ((*(_BYTE *)(v3 + 204) & 8) == 0)
  {
    goto LABEL_17;
  }
  this = PB::Writer::write(a2);
  v16 = *(_BYTE *)(v3 + 204);
  if ((v16 & 0x10) == 0)
  {
LABEL_18:
    if ((v16 & 0x20) == 0)
      goto LABEL_20;
    goto LABEL_19;
  }
LABEL_36:
  this = PB::Writer::write(a2);
  if ((*(_BYTE *)(v3 + 204) & 0x20) != 0)
LABEL_19:
    this = PB::Writer::write(a2);
LABEL_20:
  v17 = *(const PB::Base **)(v3 + 176);
  if (v17)
    this = PB::Writer::writeSubmessage(a2, v17);
  v18 = *(float **)(v3 + 104);
  v19 = *(float **)(v3 + 112);
  while (v18 != v19)
  {
    v20 = *v18++;
    this = PB::Writer::write(a2, v20);
  }
  if ((*(_BYTE *)(v3 + 204) & 4) != 0)
    this = PB::Writer::write(a2, *(float *)(v3 + 196));
  v21 = *(float **)(v3 + 128);
  v22 = *(float **)(v3 + 136);
  while (v21 != v22)
  {
    v23 = *v21++;
    this = PB::Writer::write(a2, v23);
  }
  v25 = *(float **)(v3 + 56);
  v24 = *(float **)(v3 + 64);
  while (v25 != v24)
  {
    v26 = *v25++;
    this = PB::Writer::write(a2, v26);
  }
  return this;
}

BOOL CMMsl::DoTEstimatorWithTNB::operator==(uint64_t a1, uint64_t a2)
{
  float *v2;
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  float *v17;
  float *v18;
  float *v19;
  float *v20;
  float *v21;
  uint64_t v22;
  uint64_t v23;
  float *v24;
  uint64_t v25;
  float v26;
  _BOOL8 result;
  BOOL v28;
  char v29;
  char v30;

  if ((*(_BYTE *)(a1 + 204) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 204) & 1) == 0 || *(double *)(a1 + 184) != *(double *)(a2 + 184))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 204) & 1) != 0)
  {
    return 0;
  }
  v3 = *(float **)(a1 + 152);
  v2 = *(float **)(a1 + 160);
  v4 = *(float **)(a2 + 152);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 160) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v6 = *(float **)(a1 + 80);
  v5 = *(float **)(a1 + 88);
  v7 = *(float **)(a2 + 80);
  if ((char *)v5 - (char *)v6 != *(_QWORD *)(a2 + 88) - (_QWORD)v7)
    return 0;
  while (v6 != v5)
  {
    if (*v6 != *v7)
      return 0;
    ++v6;
    ++v7;
  }
  v9 = *(float **)(a1 + 8);
  v8 = *(float **)(a1 + 16);
  v10 = *(float **)(a2 + 8);
  if ((char *)v8 - (char *)v9 != *(_QWORD *)(a2 + 16) - (_QWORD)v10)
    return 0;
  while (v9 != v8)
  {
    if (*v9 != *v10)
      return 0;
    ++v9;
    ++v10;
  }
  v12 = *(float **)(a1 + 32);
  v11 = *(float **)(a1 + 40);
  v13 = *(float **)(a2 + 32);
  if ((char *)v11 - (char *)v12 != *(_QWORD *)(a2 + 40) - (_QWORD)v13)
    return 0;
  while (v12 != v11)
  {
    if (*v12 != *v13)
      return 0;
    ++v12;
    ++v13;
  }
  if ((*(_BYTE *)(a1 + 204) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 204) & 2) == 0 || *(float *)(a1 + 192) != *(float *)(a2 + 192))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 204) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 204) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 204) & 8) == 0 || *(unsigned __int8 *)(a1 + 200) != *(unsigned __int8 *)(a2 + 200))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 204) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 204) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 204) & 0x10) == 0 || *(unsigned __int8 *)(a1 + 201) != *(unsigned __int8 *)(a2 + 201))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 204) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 204) & 0x20) != 0)
  {
    if ((*(_BYTE *)(a2 + 204) & 0x20) == 0 || *(unsigned __int8 *)(a1 + 202) != *(unsigned __int8 *)(a2 + 202))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 204) & 0x20) != 0)
  {
    return 0;
  }
  v29 = *(_BYTE *)(a2 + 204);
  v30 = *(_BYTE *)(a1 + 204);
  v14 = *(_QWORD *)(a1 + 176);
  v15 = *(_QWORD *)(a2 + 176);
  if (v14)
  {
    if (!v15 || !CMMsl::AccelTNBFrame::operator==(v14, v15))
      return 0;
  }
  else if (v15)
  {
    return 0;
  }
  v17 = *(float **)(a1 + 104);
  v16 = *(float **)(a1 + 112);
  v18 = *(float **)(a2 + 104);
  if ((char *)v16 - (char *)v17 != *(_QWORD *)(a2 + 112) - (_QWORD)v18)
    return 0;
  while (v17 != v16)
  {
    if (*v17 != *v18)
      return 0;
    ++v17;
    ++v18;
  }
  if ((v30 & 4) != 0)
  {
    if ((v29 & 4) == 0 || *(float *)(a1 + 196) != *(float *)(a2 + 196))
      return 0;
  }
  else if ((v29 & 4) != 0)
  {
    return 0;
  }
  v20 = *(float **)(a1 + 128);
  v19 = *(float **)(a1 + 136);
  v21 = *(float **)(a2 + 128);
  if ((char *)v19 - (char *)v20 != *(_QWORD *)(a2 + 136) - (_QWORD)v21)
    return 0;
  while (v20 != v19)
  {
    if (*v20 != *v21)
      return 0;
    ++v20;
    ++v21;
  }
  v23 = *(_QWORD *)(a1 + 56);
  v22 = *(_QWORD *)(a1 + 64);
  v24 = *(float **)(a2 + 56);
  if (v22 - v23 != *(_QWORD *)(a2 + 64) - (_QWORD)v24)
    return 0;
  if (v23 == v22)
    return 1;
  v25 = v23 + 4;
  do
  {
    v26 = *v24++;
    result = *(float *)(v25 - 4) == v26;
    v28 = *(float *)(v25 - 4) != v26 || v25 == v22;
    v25 += 4;
  }
  while (!v28);
  return result;
}

uint64_t CMMsl::DoTEstimatorWithTNB::hash_value(CMMsl::DoTEstimatorWithTNB *this)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  CMMsl::AccelTNBFrame *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  double v19;

  if ((*((_BYTE *)this + 204) & 1) != 0)
  {
    v2 = *((double *)this + 23);
    if (v2 == 0.0)
      v2 = 0.0;
    v19 = v2;
  }
  else
  {
    v19 = 0.0;
  }
  v3 = PBHashBytes();
  v4 = PBHashBytes();
  v5 = PBHashBytes();
  v6 = PBHashBytes();
  if ((*((_BYTE *)this + 204) & 2) != 0)
  {
    v11 = *((float *)this + 48);
    if (v11 == 0.0)
      v7 = 0;
    else
      v7 = LODWORD(v11);
    if ((*((_BYTE *)this + 204) & 8) != 0)
    {
LABEL_8:
      v8 = *((unsigned __int8 *)this + 200);
      if ((*((_BYTE *)this + 204) & 0x10) != 0)
        goto LABEL_9;
LABEL_16:
      v9 = 0;
      if ((*((_BYTE *)this + 204) & 0x20) != 0)
        goto LABEL_10;
      goto LABEL_17;
    }
  }
  else
  {
    v7 = 0;
    if ((*((_BYTE *)this + 204) & 8) != 0)
      goto LABEL_8;
  }
  v8 = 0;
  if ((*((_BYTE *)this + 204) & 0x10) == 0)
    goto LABEL_16;
LABEL_9:
  v9 = *((unsigned __int8 *)this + 201);
  if ((*((_BYTE *)this + 204) & 0x20) != 0)
  {
LABEL_10:
    v10 = *((unsigned __int8 *)this + 202);
    goto LABEL_18;
  }
LABEL_17:
  v10 = 0;
LABEL_18:
  v12 = (CMMsl::AccelTNBFrame *)*((_QWORD *)this + 22);
  if (v12)
    v13 = CMMsl::AccelTNBFrame::hash_value(v12);
  else
    v13 = 0;
  v14 = PBHashBytes();
  if ((*((_BYTE *)this + 204) & 4) != 0)
  {
    v16 = *((float *)this + 49);
    v15 = LODWORD(v16);
    if (v16 == 0.0)
      v15 = 0;
  }
  else
  {
    v15 = 0;
  }
  v17 = v3 ^ *(_QWORD *)&v19 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v13 ^ v14 ^ v15 ^ PBHashBytes();
  return v17 ^ PBHashBytes();
}

_QWORD *CMMsl::DoTEstimatorWithTNB::makeTNBFrame(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[22])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135BE60;
    *(_DWORD *)(v2 + 116) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_QWORD *)(v2 + 72) = 0;
    this = (_QWORD *)v1[22];
    v1[22] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t CMMsl::DopplerDebugRecord::DopplerDebugRecord(uint64_t this)
{
  *(_QWORD *)this = &off_25135D2B8;
  *(_DWORD *)(this + 120) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135D2B8;
  *(_DWORD *)(this + 120) = 0;
  return this;
}

void CMMsl::DopplerDebugRecord::~DopplerDebugRecord(CMMsl::DopplerDebugRecord *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::DopplerDebugRecord::DopplerDebugRecord(CMMsl::DopplerDebugRecord *this, const CMMsl::DopplerDebugRecord *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;

  *(_QWORD *)this = &off_25135D2B8;
  *((_DWORD *)this + 30) = 0;
  v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_DWORD *)this + 30) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_DWORD *)a2 + 30);
    if ((v2 & 0x1000000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x1000000) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 27);
    v3 |= 0x1000000u;
    *((_DWORD *)this + 30) = v3;
    *((_DWORD *)this + 27) = v4;
    v2 = *((_DWORD *)a2 + 30);
  }
LABEL_6:
  if ((v2 & 0x200000) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 24);
    v3 |= 0x200000u;
    *((_DWORD *)this + 30) = v3;
    *((_DWORD *)this + 24) = v4;
    v2 = *((_DWORD *)a2 + 30);
    if ((v2 & 0x400000) == 0)
    {
LABEL_8:
      if ((v2 & 0x800000) == 0)
        goto LABEL_9;
      goto LABEL_34;
    }
  }
  else if ((v2 & 0x400000) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 25);
  v3 |= 0x400000u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 25) = v4;
  v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x800000) == 0)
  {
LABEL_9:
    if ((v2 & 0x100000) == 0)
      goto LABEL_10;
    goto LABEL_35;
  }
LABEL_34:
  LODWORD(v4) = *((_DWORD *)a2 + 26);
  v3 |= 0x800000u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 26) = v4;
  v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x100000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_11;
    goto LABEL_36;
  }
LABEL_35:
  LODWORD(v4) = *((_DWORD *)a2 + 23);
  v3 |= 0x100000u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 23) = v4;
  v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_11:
    if ((v2 & 8) == 0)
      goto LABEL_12;
    goto LABEL_37;
  }
LABEL_36:
  LODWORD(v4) = *((_DWORD *)a2 + 28);
  v3 |= 0x2000000u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 28) = v4;
  v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 8) == 0)
  {
LABEL_12:
    if ((v2 & 0x20) == 0)
      goto LABEL_13;
    goto LABEL_38;
  }
LABEL_37:
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 6) = v4;
  v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x20) == 0)
  {
LABEL_13:
    if ((v2 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_39;
  }
LABEL_38:
  LODWORD(v4) = *((_DWORD *)a2 + 8);
  v3 |= 0x20u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 8) = v4;
  v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x10) == 0)
  {
LABEL_14:
    if ((v2 & 0x20000) == 0)
      goto LABEL_15;
    goto LABEL_40;
  }
LABEL_39:
  LODWORD(v4) = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 7) = v4;
  v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x20000) == 0)
  {
LABEL_15:
    if ((v2 & 0x10000) == 0)
      goto LABEL_16;
    goto LABEL_41;
  }
LABEL_40:
  LODWORD(v4) = *((_DWORD *)a2 + 20);
  v3 |= 0x20000u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 20) = v4;
  v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x10000) == 0)
  {
LABEL_16:
    if ((v2 & 0x4000) == 0)
      goto LABEL_17;
    goto LABEL_42;
  }
LABEL_41:
  v5 = *((_DWORD *)a2 + 19);
  v3 |= 0x10000u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 19) = v5;
  v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x4000) == 0)
  {
LABEL_17:
    if ((v2 & 0x8000) == 0)
      goto LABEL_18;
    goto LABEL_43;
  }
LABEL_42:
  LODWORD(v4) = *((_DWORD *)a2 + 17);
  v3 |= 0x4000u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 17) = v4;
  v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x8000) == 0)
  {
LABEL_18:
    if ((v2 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_44;
  }
LABEL_43:
  LODWORD(v4) = *((_DWORD *)a2 + 18);
  v3 |= 0x8000u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 18) = v4;
  v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x2000) == 0)
  {
LABEL_19:
    if ((v2 & 0x800) == 0)
      goto LABEL_20;
    goto LABEL_45;
  }
LABEL_44:
  LODWORD(v4) = *((_DWORD *)a2 + 16);
  v3 |= 0x2000u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 16) = v4;
  v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x800) == 0)
  {
LABEL_20:
    if ((v2 & 0x1000) == 0)
      goto LABEL_21;
    goto LABEL_46;
  }
LABEL_45:
  LODWORD(v4) = *((_DWORD *)a2 + 14);
  v3 |= 0x800u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 14) = v4;
  v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x1000) == 0)
  {
LABEL_21:
    if ((v2 & 0x200) == 0)
      goto LABEL_22;
    goto LABEL_47;
  }
LABEL_46:
  v6 = *((_DWORD *)a2 + 15);
  v3 |= 0x1000u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 15) = v6;
  v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x200) == 0)
  {
LABEL_22:
    if ((v2 & 0x400) == 0)
      goto LABEL_23;
    goto LABEL_48;
  }
LABEL_47:
  LODWORD(v4) = *((_DWORD *)a2 + 12);
  v3 |= 0x200u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 12) = v4;
  v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x400) == 0)
  {
LABEL_23:
    if ((v2 & 0x100) == 0)
      goto LABEL_24;
    goto LABEL_49;
  }
LABEL_48:
  LODWORD(v4) = *((_DWORD *)a2 + 13);
  v3 |= 0x400u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 13) = v4;
  v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x100) == 0)
  {
LABEL_24:
    if ((v2 & 0x40) == 0)
      goto LABEL_25;
    goto LABEL_50;
  }
LABEL_49:
  LODWORD(v4) = *((_DWORD *)a2 + 11);
  v3 |= 0x100u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 11) = v4;
  v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x40) == 0)
  {
LABEL_25:
    if ((v2 & 0x80) == 0)
      goto LABEL_26;
    goto LABEL_51;
  }
LABEL_50:
  LODWORD(v4) = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 9) = v4;
  v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x80) == 0)
  {
LABEL_26:
    if ((v2 & 2) == 0)
      goto LABEL_27;
    goto LABEL_52;
  }
LABEL_51:
  v7 = *((_DWORD *)a2 + 10);
  v3 |= 0x80u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 10) = v7;
  v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 2) == 0)
  {
LABEL_27:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_28;
    goto LABEL_53;
  }
LABEL_52:
  LODWORD(v4) = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 4) = v4;
  v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v2 & 0x80000) == 0)
      goto LABEL_29;
    goto LABEL_54;
  }
LABEL_53:
  LODWORD(v4) = *((_DWORD *)a2 + 29);
  v3 |= 0x4000000u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 29) = v4;
  v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x80000) == 0)
  {
LABEL_29:
    if ((v2 & 4) == 0)
      goto LABEL_30;
    goto LABEL_55;
  }
LABEL_54:
  LODWORD(v4) = *((_DWORD *)a2 + 22);
  v3 |= 0x80000u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 22) = v4;
  v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 4) == 0)
  {
LABEL_30:
    if ((v2 & 0x40000) == 0)
      return *(float *)&v4;
    goto LABEL_56;
  }
LABEL_55:
  v8 = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 5) = v8;
  if ((*((_DWORD *)a2 + 30) & 0x40000) == 0)
    return *(float *)&v4;
LABEL_56:
  LODWORD(v4) = *((_DWORD *)a2 + 21);
  *((_DWORD *)this + 30) = v3 | 0x40000;
  *((_DWORD *)this + 21) = v4;
  return *(float *)&v4;
}

CMMsl *CMMsl::DopplerDebugRecord::operator=(CMMsl *a1, const CMMsl::DopplerDebugRecord *a2)
{
  CMMsl::DopplerDebugRecord *v3;
  _BYTE v5[128];

  if (a1 != a2)
  {
    CMMsl::DopplerDebugRecord::DopplerDebugRecord((CMMsl::DopplerDebugRecord *)v5, a2);
    CMMsl::swap(a1, (CMMsl::DopplerDebugRecord *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::DopplerDebugRecord *a2, CMMsl::DopplerDebugRecord *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  float result;

  v3 = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v4;
  LODWORD(v4) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v4;
  LODWORD(v4) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v4;
  LODWORD(v4) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v4;
  LODWORD(v4) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v4;
  LODWORD(v4) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v4;
  v5 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v5;
  LODWORD(v4) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v4;
  LODWORD(v4) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v4;
  LODWORD(v4) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v4;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  v6 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v6;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  v7 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v7;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v4;
  LODWORD(v4) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v4;
  v8 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v8;
  result = *((float *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((float *)a2 + 21) = result;
  return result;
}

float CMMsl::DopplerDebugRecord::DopplerDebugRecord(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135D2B8;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  result = *(float *)(a2 + 84);
  *(float *)(a1 + 84) = result;
  return result;
}

CMMsl *CMMsl::DopplerDebugRecord::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::DopplerDebugRecord *v3;
  _BYTE v5[128];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::DopplerDebugRecord::DopplerDebugRecord((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::DopplerDebugRecord *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::DopplerDebugRecord::formatText(CMMsl::DopplerDebugRecord *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "biasFraction", *((float *)this + 4));
    v5 = *((_DWORD *)this + 30);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_32;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "cookie");
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "currentRange", *((float *)this + 6));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "distanceReleaseThreshold", *((float *)this + 7));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "distanceTriggerThreshold", *((float *)this + 8));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "habcBiasCorrectedDenominator", *((float *)this + 9));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "habcBiasCorrectedNumFramesCaptured");
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "habcBiasCorrectedNumerator", *((float *)this + 11));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "habcBiasCorrectedRateBaseline", *((float *)this + 12));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "habcBiasCorrectedRateBaselineSigma", *((float *)this + 13));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "habcDenominator", *((float *)this + 14));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0)
      goto LABEL_14;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "habcNumFramesCaptured");
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x2000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000) == 0)
      goto LABEL_15;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "habcNumerator", *((float *)this + 16));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x4000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0)
      goto LABEL_16;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "habcRateBaseline", *((float *)this + 17));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000) == 0)
      goto LABEL_17;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "habcRateBaselineSigma", *((float *)this + 18));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x10000) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "numBaselineCaptureFrames");
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0)
      goto LABEL_19;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "numEffSpads", *((float *)this + 20));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 0x80000) == 0)
      goto LABEL_20;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "rateScalingFactor", *((float *)this + 21));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x80000) == 0)
  {
LABEL_20:
    if ((v5 & 0x100000) == 0)
      goto LABEL_21;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "reflectanceEstimate", *((float *)this + 22));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x100000) == 0)
  {
LABEL_21:
    if ((v5 & 0x200000) == 0)
      goto LABEL_22;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "signalDeltaNCounts", *((float *)this + 23));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x200000) == 0)
  {
LABEL_22:
    if ((v5 & 0x400000) == 0)
      goto LABEL_23;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "signalRateBaselineKcpss", *((float *)this + 24));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x400000) == 0)
  {
LABEL_23:
    if ((v5 & 0x800000) == 0)
      goto LABEL_24;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "signalRateBaselineSigmaKcpss", *((float *)this + 25));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x800000) == 0)
  {
LABEL_24:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_25;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "signalRateNoiseMarginKcpss", *((float *)this + 26));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_26;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "signalRateSigmaKcpss", *((float *)this + 27));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_27;
LABEL_55:
    PB::TextFormatter::format(a2, "smudgeTimeoutCountdownMs", *((float *)this + 29));
    if ((*((_DWORD *)this + 30) & 1) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_28;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "signalRateTriggerThresholdNCounts", *((float *)this + 28));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x4000000) != 0)
    goto LABEL_55;
LABEL_27:
  if ((v5 & 1) != 0)
LABEL_28:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::DopplerDebugRecord::readFrom(CMMsl::DopplerDebugRecord *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  char v43;
  char v44;
  unsigned int v45;
  unint64_t v46;
  char v47;
  char v48;
  unsigned int v49;
  unint64_t v50;
  char v51;
  char v52;
  unsigned int v53;
  unint64_t v54;
  char v55;
  char v56;
  unsigned int v57;
  unint64_t v58;
  char v59;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_151;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 30) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_119;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        v2 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_150;
      case 2u:
        *((_DWORD *)this + 30) |= 0x1000000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_119;
        *((_DWORD *)this + 27) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_149;
      case 3u:
        *((_DWORD *)this + 30) |= 0x200000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_119;
        *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_149;
      case 4u:
        *((_DWORD *)this + 30) |= 0x400000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_119;
        *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_149;
      case 5u:
        *((_DWORD *)this + 30) |= 0x800000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_119;
        *((_DWORD *)this + 26) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_149;
      case 6u:
        *((_DWORD *)this + 30) |= 0x100000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_119;
        *((_DWORD *)this + 23) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_149;
      case 7u:
        *((_DWORD *)this + 30) |= 0x2000000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_119;
        *((_DWORD *)this + 28) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_149;
      case 8u:
        *((_DWORD *)this + 30) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_119;
        *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_149;
      case 9u:
        *((_DWORD *)this + 30) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_119;
        *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_149;
      case 0xAu:
        *((_DWORD *)this + 30) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_119;
        *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_149;
      case 0xBu:
        *((_DWORD *)this + 30) |= 0x20000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_119;
        *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_149;
      case 0xCu:
        *((_DWORD *)this + 30) |= 0x10000u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v44 = 0;
          v45 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_160;
            }
            v46 = v20++;
            v47 = *(_BYTE *)(v21 + v46);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v47 & 0x7F) << v44;
            if ((v47 & 0x80) == 0)
              break;
            v44 += 7;
            v14 = v45++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_159:
              v2 = v46 + 1;
              goto LABEL_160;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
          goto LABEL_159;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_160;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_160:
        *((_DWORD *)this + 19) = v24;
        break;
      case 0xDu:
        *((_DWORD *)this + 30) |= 0x4000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_119;
        *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_149;
      case 0xEu:
        *((_DWORD *)this + 30) |= 0x8000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_119;
        *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_149;
      case 0xFu:
        *((_DWORD *)this + 30) |= 0x2000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_119;
        *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_149;
      case 0x10u:
        *((_DWORD *)this + 30) |= 0x800u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_119;
        *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_149;
      case 0x11u:
        *((_DWORD *)this + 30) |= 0x1000u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v48 = 0;
          v49 = 0;
          v30 = 0;
          if (v2 <= v26)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_165;
            }
            v50 = v26++;
            v51 = *(_BYTE *)(v27 + v50);
            *((_QWORD *)a2 + 1) = v26;
            v30 |= (unint64_t)(v51 & 0x7F) << v48;
            if ((v51 & 0x80) == 0)
              break;
            v48 += 7;
            v14 = v49++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_164:
              v2 = v50 + 1;
              goto LABEL_165;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v30) = 0;
          goto LABEL_164;
        }
        v28 = 0;
        v29 = 0;
        v30 = 0;
        do
        {
          v2 = v26 + 1;
          *((_QWORD *)a2 + 1) = v26 + 1;
          v31 = *(_BYTE *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0)
            goto LABEL_165;
          v28 += 7;
          v26 = v2;
          v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_165:
        *((_DWORD *)this + 15) = v30;
        break;
      case 0x12u:
        *((_DWORD *)this + 30) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_119;
        *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_149;
      case 0x13u:
        *((_DWORD *)this + 30) |= 0x400u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_119;
        *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_149;
      case 0x14u:
        *((_DWORD *)this + 30) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_119;
        *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_149;
      case 0x15u:
        *((_DWORD *)this + 30) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_119;
        *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_149;
      case 0x16u:
        *((_DWORD *)this + 30) |= 0x80u;
        v32 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v33 = *(_QWORD *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
        {
          v52 = 0;
          v53 = 0;
          v36 = 0;
          if (v2 <= v32)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v32)
            {
              LODWORD(v36) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_170;
            }
            v54 = v32++;
            v55 = *(_BYTE *)(v33 + v54);
            *((_QWORD *)a2 + 1) = v32;
            v36 |= (unint64_t)(v55 & 0x7F) << v52;
            if ((v55 & 0x80) == 0)
              break;
            v52 += 7;
            v14 = v53++ > 8;
            if (v14)
            {
              LODWORD(v36) = 0;
LABEL_169:
              v2 = v54 + 1;
              goto LABEL_170;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v36) = 0;
          goto LABEL_169;
        }
        v34 = 0;
        v35 = 0;
        v36 = 0;
        do
        {
          v2 = v32 + 1;
          *((_QWORD *)a2 + 1) = v32 + 1;
          v37 = *(_BYTE *)(v33 + v32);
          v36 |= (unint64_t)(v37 & 0x7F) << v34;
          if ((v37 & 0x80) == 0)
            goto LABEL_170;
          v34 += 7;
          v32 = v2;
          v14 = v35++ > 8;
        }
        while (!v14);
        LODWORD(v36) = 0;
LABEL_170:
        *((_DWORD *)this + 10) = v36;
        break;
      case 0x17u:
        *((_DWORD *)this + 30) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_119;
        *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_149;
      case 0x18u:
        *((_DWORD *)this + 30) |= 0x4000000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_119;
        *((_DWORD *)this + 29) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_149;
      case 0x19u:
        *((_DWORD *)this + 30) |= 0x80000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_119;
        *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_149;
      case 0x1Au:
        *((_DWORD *)this + 30) |= 4u;
        v38 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v39 = *(_QWORD *)a2;
        if (v38 > 0xFFFFFFFFFFFFFFF5 || v38 + 10 > v2)
        {
          v56 = 0;
          v57 = 0;
          v42 = 0;
          if (v2 <= v38)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v38)
            {
              LODWORD(v42) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_175;
            }
            v58 = v38++;
            v59 = *(_BYTE *)(v39 + v58);
            *((_QWORD *)a2 + 1) = v38;
            v42 |= (unint64_t)(v59 & 0x7F) << v56;
            if ((v59 & 0x80) == 0)
              break;
            v56 += 7;
            v14 = v57++ > 8;
            if (v14)
            {
              LODWORD(v42) = 0;
LABEL_174:
              v2 = v58 + 1;
              goto LABEL_175;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v42) = 0;
          goto LABEL_174;
        }
        v40 = 0;
        v41 = 0;
        v42 = 0;
        do
        {
          v2 = v38 + 1;
          *((_QWORD *)a2 + 1) = v38 + 1;
          v43 = *(_BYTE *)(v39 + v38);
          v42 |= (unint64_t)(v43 & 0x7F) << v40;
          if ((v43 & 0x80) == 0)
            goto LABEL_175;
          v40 += 7;
          v38 = v2;
          v14 = v41++ > 8;
        }
        while (!v14);
        LODWORD(v42) = 0;
LABEL_175:
        *((_DWORD *)this + 5) = v42;
        break;
      case 0x1Bu:
        *((_DWORD *)this + 30) |= 0x40000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_149:
          v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_150:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_119:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_151:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::DopplerDebugRecord::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 120);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_DWORD *)(v3 + 120);
    if ((v4 & 0x1000000) == 0)
    {
LABEL_3:
      if ((v4 & 0x200000) == 0)
        goto LABEL_4;
      goto LABEL_31;
    }
  }
  else if ((v4 & 0x1000000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 108));
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x200000) == 0)
  {
LABEL_4:
    if ((v4 & 0x400000) == 0)
      goto LABEL_5;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 96));
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x400000) == 0)
  {
LABEL_5:
    if ((v4 & 0x800000) == 0)
      goto LABEL_6;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 100));
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x800000) == 0)
  {
LABEL_6:
    if ((v4 & 0x100000) == 0)
      goto LABEL_7;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 104));
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x100000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_8;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 92));
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0)
      goto LABEL_9;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 112));
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x20000) == 0)
      goto LABEL_12;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x20000) == 0)
  {
LABEL_12:
    if ((v4 & 0x10000) == 0)
      goto LABEL_13;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x10000) == 0)
  {
LABEL_13:
    if ((v4 & 0x4000) == 0)
      goto LABEL_14;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x4000) == 0)
  {
LABEL_14:
    if ((v4 & 0x8000) == 0)
      goto LABEL_15;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(float *)(v3 + 68));
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x8000) == 0)
  {
LABEL_15:
    if ((v4 & 0x2000) == 0)
      goto LABEL_16;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x2000) == 0)
  {
LABEL_16:
    if ((v4 & 0x800) == 0)
      goto LABEL_17;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(float *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x800) == 0)
  {
LABEL_17:
    if ((v4 & 0x1000) == 0)
      goto LABEL_18;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x1000) == 0)
  {
LABEL_18:
    if ((v4 & 0x200) == 0)
      goto LABEL_19;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x200) == 0)
  {
LABEL_19:
    if ((v4 & 0x400) == 0)
      goto LABEL_20;
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x400) == 0)
  {
LABEL_20:
    if ((v4 & 0x100) == 0)
      goto LABEL_21;
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x100) == 0)
  {
LABEL_21:
    if ((v4 & 0x40) == 0)
      goto LABEL_22;
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x40) == 0)
  {
LABEL_22:
    if ((v4 & 0x80) == 0)
      goto LABEL_23;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x80) == 0)
  {
LABEL_23:
    if ((v4 & 2) == 0)
      goto LABEL_24;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 2) == 0)
  {
LABEL_24:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_25;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(float *)(v3 + 116));
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x80000) == 0)
  {
LABEL_26:
    if ((v4 & 4) == 0)
      goto LABEL_27;
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::write(a2, *(float *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 4) == 0)
  {
LABEL_27:
    if ((v4 & 0x40000) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 84));
  }
LABEL_54:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_DWORD *)(v3 + 120) & 0x40000) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 84));
  return this;
}

BOOL CMMsl::DopplerDebugRecord::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 120);
  v3 = *(_DWORD *)(a2 + 120);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116))
      return 0;
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x40000) == 0;
  if ((v2 & 0x40000) != 0)
    return (v3 & 0x40000) != 0 && *(float *)(a1 + 84) == *(float *)(a2 + 84);
  return v4;
}

uint64_t CMMsl::DopplerDebugRecord::hash_value(CMMsl::DopplerDebugRecord *this)
{
  int v1;
  double v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  float v46;
  uint64_t v47;
  uint64_t v48;
  float v49;
  uint64_t v50;

  v1 = *((_DWORD *)this + 30);
  if ((v1 & 1) == 0)
  {
    v2 = 0.0;
    if ((v1 & 0x1000000) != 0)
      goto LABEL_3;
LABEL_76:
    v4 = 0;
    if ((v1 & 0x200000) != 0)
      goto LABEL_6;
LABEL_77:
    v6 = 0;
    if ((v1 & 0x400000) != 0)
      goto LABEL_9;
LABEL_78:
    v8 = 0;
    if ((v1 & 0x800000) != 0)
      goto LABEL_12;
LABEL_79:
    v10 = 0;
    if ((v1 & 0x100000) != 0)
      goto LABEL_15;
LABEL_80:
    v12 = 0;
    if ((v1 & 0x2000000) != 0)
      goto LABEL_18;
LABEL_81:
    v14 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_21;
LABEL_82:
    v16 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_24;
LABEL_83:
    v18 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_27;
LABEL_84:
    v20 = 0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_30;
LABEL_85:
    v22 = 0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_33;
    goto LABEL_86;
  }
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 0x1000000) == 0)
    goto LABEL_76;
LABEL_3:
  v3 = *((float *)this + 27);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  if ((v1 & 0x200000) == 0)
    goto LABEL_77;
LABEL_6:
  v5 = *((float *)this + 24);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((v1 & 0x400000) == 0)
    goto LABEL_78;
LABEL_9:
  v7 = *((float *)this + 25);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 0x800000) == 0)
    goto LABEL_79;
LABEL_12:
  v9 = *((float *)this + 26);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((v1 & 0x100000) == 0)
    goto LABEL_80;
LABEL_15:
  v11 = *((float *)this + 23);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((v1 & 0x2000000) == 0)
    goto LABEL_81;
LABEL_18:
  v13 = *((float *)this + 28);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_82;
LABEL_21:
  v15 = *((float *)this + 6);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_83;
LABEL_24:
  v17 = *((float *)this + 8);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_84;
LABEL_27:
  v19 = *((float *)this + 7);
  v20 = LODWORD(v19);
  if (v19 == 0.0)
    v20 = 0;
  if ((v1 & 0x20000) == 0)
    goto LABEL_85;
LABEL_30:
  v21 = *((float *)this + 20);
  v22 = LODWORD(v21);
  if (v21 == 0.0)
    v22 = 0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_33:
    v23 = *((int *)this + 19);
    if ((v1 & 0x4000) != 0)
      goto LABEL_34;
LABEL_87:
    v25 = 0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_37;
LABEL_88:
    v27 = 0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_40;
LABEL_89:
    v29 = 0;
    if ((v1 & 0x800) != 0)
      goto LABEL_43;
LABEL_90:
    v31 = 0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_46;
    goto LABEL_91;
  }
LABEL_86:
  v23 = 0;
  if ((v1 & 0x4000) == 0)
    goto LABEL_87;
LABEL_34:
  v24 = *((float *)this + 17);
  v25 = LODWORD(v24);
  if (v24 == 0.0)
    v25 = 0;
  if ((v1 & 0x8000) == 0)
    goto LABEL_88;
LABEL_37:
  v26 = *((float *)this + 18);
  v27 = LODWORD(v26);
  if (v26 == 0.0)
    v27 = 0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_89;
LABEL_40:
  v28 = *((float *)this + 16);
  v29 = LODWORD(v28);
  if (v28 == 0.0)
    v29 = 0;
  if ((v1 & 0x800) == 0)
    goto LABEL_90;
LABEL_43:
  v30 = *((float *)this + 14);
  v31 = LODWORD(v30);
  if (v30 == 0.0)
    v31 = 0;
  if ((v1 & 0x1000) != 0)
  {
LABEL_46:
    v32 = *((int *)this + 15);
    if ((v1 & 0x200) != 0)
      goto LABEL_47;
LABEL_92:
    v34 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_50;
LABEL_93:
    v36 = 0;
    if ((v1 & 0x100) != 0)
      goto LABEL_53;
LABEL_94:
    v38 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_56;
LABEL_95:
    v40 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_59;
    goto LABEL_96;
  }
LABEL_91:
  v32 = 0;
  if ((v1 & 0x200) == 0)
    goto LABEL_92;
LABEL_47:
  v33 = *((float *)this + 12);
  v34 = LODWORD(v33);
  if (v33 == 0.0)
    v34 = 0;
  if ((v1 & 0x400) == 0)
    goto LABEL_93;
LABEL_50:
  v35 = *((float *)this + 13);
  v36 = LODWORD(v35);
  if (v35 == 0.0)
    v36 = 0;
  if ((v1 & 0x100) == 0)
    goto LABEL_94;
LABEL_53:
  v37 = *((float *)this + 11);
  v38 = LODWORD(v37);
  if (v37 == 0.0)
    v38 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_95;
LABEL_56:
  v39 = *((float *)this + 9);
  v40 = LODWORD(v39);
  if (v39 == 0.0)
    v40 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_59:
    v41 = *((int *)this + 10);
    if ((v1 & 2) != 0)
      goto LABEL_60;
LABEL_97:
    v43 = 0;
    if ((v1 & 0x4000000) != 0)
      goto LABEL_63;
LABEL_98:
    v45 = 0;
    if ((v1 & 0x80000) != 0)
      goto LABEL_66;
LABEL_99:
    v47 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_69;
    goto LABEL_100;
  }
LABEL_96:
  v41 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_97;
LABEL_60:
  v42 = *((float *)this + 4);
  v43 = LODWORD(v42);
  if (v42 == 0.0)
    v43 = 0;
  if ((v1 & 0x4000000) == 0)
    goto LABEL_98;
LABEL_63:
  v44 = *((float *)this + 29);
  v45 = LODWORD(v44);
  if (v44 == 0.0)
    v45 = 0;
  if ((v1 & 0x80000) == 0)
    goto LABEL_99;
LABEL_66:
  v46 = *((float *)this + 22);
  v47 = LODWORD(v46);
  if (v46 == 0.0)
    v47 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_69:
    v48 = *((unsigned int *)this + 5);
    if ((v1 & 0x40000) != 0)
      goto LABEL_70;
LABEL_101:
    v50 = 0;
    return v4 ^ *(_QWORD *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v23 ^ v25 ^ v27 ^ v29 ^ v31 ^ v32 ^ v34 ^ v36 ^ v38 ^ v40 ^ v41 ^ v43 ^ v45 ^ v47 ^ v48 ^ v50;
  }
LABEL_100:
  v48 = 0;
  if ((v1 & 0x40000) == 0)
    goto LABEL_101;
LABEL_70:
  v49 = *((float *)this + 21);
  v50 = LODWORD(v49);
  if (v49 == 0.0)
    v50 = 0;
  return v4 ^ *(_QWORD *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v23 ^ v25 ^ v27 ^ v29 ^ v31 ^ v32 ^ v34 ^ v36 ^ v38 ^ v40 ^ v41 ^ v43 ^ v45 ^ v47 ^ v48 ^ v50;
}

uint64_t CMMsl::DopplerProximityEvent::DopplerProximityEvent(uint64_t this)
{
  *(_QWORD *)this = &off_25135D2F0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135D2F0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void CMMsl::DopplerProximityEvent::~DopplerProximityEvent(CMMsl::DopplerProximityEvent *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::DopplerProximityEvent::DopplerProximityEvent(uint64_t this, const CMMsl::DopplerProximityEvent *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;

  *(_QWORD *)this = &off_25135D2F0;
  *(_DWORD *)(this + 24) = 0;
  v2 = *((_BYTE *)a2 + 24);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_BYTE *)(this + 24) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 24);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 24) & 4) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *(_BYTE *)(this + 24) = v3;
    *(_DWORD *)(this + 20) = v5;
    v2 = *((_BYTE *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 24) = v3 | 2;
    *(_DWORD *)(this + 16) = v6;
  }
  return this;
}

uint64_t CMMsl::DopplerProximityEvent::operator=(uint64_t a1, uint64_t a2, double a3)
{
  int v3;
  int v4;
  char v6;
  char v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  int v13;

  if (a1 != a2)
  {
    v12[0] = &off_25135D2F0;
    v13 = 0;
    v6 = *(_BYTE *)(a2 + 24);
    if ((v6 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      v7 = 1;
      LOBYTE(v13) = 1;
      if ((v6 & 4) != 0)
      {
LABEL_4:
        v3 = *(_DWORD *)(a2 + 20);
        v7 |= 4u;
        LOBYTE(v13) = v7;
        if ((v6 & 2) != 0)
          goto LABEL_8;
        goto LABEL_9;
      }
    }
    else
    {
      v7 = 0;
      if ((*(_BYTE *)(a2 + 24) & 4) != 0)
        goto LABEL_4;
    }
    if ((v6 & 2) != 0)
    {
LABEL_8:
      v4 = *(_DWORD *)(a2 + 16);
      LOBYTE(v13) = v7 | 2;
    }
LABEL_9:
    v8 = v13;
    v13 = *(_DWORD *)(a1 + 24);
    v9 = *(_QWORD *)(a1 + 8);
    v10 = *(_QWORD *)(a1 + 16);
    *(double *)(a1 + 8) = a3;
    *(_DWORD *)(a1 + 20) = v3;
    *(_DWORD *)(a1 + 24) = v8;
    *(_DWORD *)(a1 + 16) = v4;
    v12[1] = v9;
    v12[2] = v10;
    PB::Base::~Base((PB::Base *)v12);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::DopplerProximityEvent *a2, CMMsl::DopplerProximityEvent *a3)
{
  int v3;
  double result;
  int v5;
  int v6;

  v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  v5 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v5;
  v6 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v6;
  return result;
}

double CMMsl::DopplerProximityEvent::DopplerProximityEvent(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135D2F0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135D2F0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::DopplerProximityEvent::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  int v8;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    v7[0] = &off_25135D2F0;
    v8 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v3;
    v7[1] = v4;
    v7[2] = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

uint64_t CMMsl::DopplerProximityEvent::formatText(CMMsl::DopplerProximityEvent *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 2) == 0)
  {
    if ((*((_BYTE *)this + 24) & 4) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(a2, "proximityState");
    if ((*((_BYTE *)this + 24) & 1) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_4;
  }
  PB::TextFormatter::format(a2, "proximityRawValue");
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 4) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 1) != 0)
LABEL_4:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::DopplerProximityEvent::readFrom(CMMsl::DopplerProximityEvent *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t result;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  char v33;
  char v34;
  unsigned int v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  unint64_t v40;
  char v41;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v19 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((_BYTE *)this + 24) |= 2u;
        v22 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v23 = *(_QWORD *)a2;
        if (v22 > 0xFFFFFFFFFFFFFFF5 || v22 + 10 > v2)
        {
          v34 = 0;
          v35 = 0;
          v26 = 0;
          if (v2 <= v22)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v22)
            {
              LODWORD(v26) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_67;
            }
            v36 = v22++;
            v37 = *(_BYTE *)(v23 + v36);
            *((_QWORD *)a2 + 1) = v22;
            v26 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0)
              break;
            v34 += 7;
            v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v26) = 0;
              goto LABEL_66;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v26) = 0;
LABEL_66:
          v2 = v36 + 1;
        }
        else
        {
          v24 = 0;
          v25 = 0;
          v26 = 0;
          while (1)
          {
            v2 = v22 + 1;
            *((_QWORD *)a2 + 1) = v22 + 1;
            v27 = *(_BYTE *)(v23 + v22);
            v26 |= (unint64_t)(v27 & 0x7F) << v24;
            if ((v27 & 0x80) == 0)
              break;
            v24 += 7;
            v22 = v2;
            v14 = v25++ > 8;
            if (v14)
            {
              LODWORD(v26) = 0;
              break;
            }
          }
        }
LABEL_67:
        *((_DWORD *)this + 4) = v26;
      }
      else if ((_DWORD)v19 == 2)
      {
        *((_BYTE *)this + 24) |= 4u;
        v28 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v29 = *(_QWORD *)a2;
        if (v28 > 0xFFFFFFFFFFFFFFF5 || v28 + 10 > v2)
        {
          v38 = 0;
          v39 = 0;
          v32 = 0;
          if (v2 <= v28)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v28)
            {
              LODWORD(v32) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_72;
            }
            v40 = v28++;
            v41 = *(_BYTE *)(v29 + v40);
            *((_QWORD *)a2 + 1) = v28;
            v32 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0)
              break;
            v38 += 7;
            v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v32) = 0;
              goto LABEL_71;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v32) = 0;
LABEL_71:
          v2 = v40 + 1;
        }
        else
        {
          v30 = 0;
          v31 = 0;
          v32 = 0;
          while (1)
          {
            v2 = v28 + 1;
            *((_QWORD *)a2 + 1) = v28 + 1;
            v33 = *(_BYTE *)(v29 + v28);
            v32 |= (unint64_t)(v33 & 0x7F) << v30;
            if ((v33 & 0x80) == 0)
              break;
            v30 += 7;
            v28 = v2;
            v14 = v31++ > 8;
            if (v14)
            {
              LODWORD(v32) = 0;
              break;
            }
          }
        }
LABEL_72:
        *((_DWORD *)this + 5) = v32;
      }
      else if ((_DWORD)v19 == 1)
      {
        *((_BYTE *)this + 24) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_27;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::DopplerProximityEvent::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 24);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 24);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        return this;
      return PB::Writer::writeVarInt(a2);
    }
  }
  else if ((*(_BYTE *)(this + 24) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  if ((*(_BYTE *)(v3 + 24) & 2) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

BOOL CMMsl::DopplerProximityEvent::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 24) & 2) == 0;
  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
    return (*(_BYTE *)(a2 + 24) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v2;
}

uint64_t CMMsl::DopplerProximityEvent::hash_value(CMMsl::DopplerProximityEvent *this)
{
  double v1;
  uint64_t v2;
  uint64_t v3;

  if ((*((_BYTE *)this + 24) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 24) & 4) != 0)
      goto LABEL_3;
LABEL_8:
    v2 = 0;
    if ((*((_BYTE *)this + 24) & 2) != 0)
      goto LABEL_4;
LABEL_9:
    v3 = 0;
    return v2 ^ *(_QWORD *)&v1 ^ v3;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 24) & 4) == 0)
    goto LABEL_8;
LABEL_3:
  v2 = *((unsigned int *)this + 5);
  if ((*((_BYTE *)this + 24) & 2) == 0)
    goto LABEL_9;
LABEL_4:
  v3 = *((unsigned int *)this + 4);
  return v2 ^ *(_QWORD *)&v1 ^ v3;
}

_QWORD *CMMsl::DopplerRawDataInput::DopplerRawDataInput(_QWORD *this)
{
  *this = &off_25135D328;
  *(_QWORD *)((char *)this + 164) = 0;
  return this;
}

{
  *this = &off_25135D328;
  *(_QWORD *)((char *)this + 164) = 0;
  return this;
}

void CMMsl::DopplerRawDataInput::~DopplerRawDataInput(CMMsl::DopplerRawDataInput *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::DopplerRawDataInput::DopplerRawDataInput(uint64_t this, const CMMsl::DopplerRawDataInput *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;

  *(_QWORD *)this = &off_25135D328;
  *(_QWORD *)(this + 164) = 0;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x10) != 0)
  {
    v4 = *((_QWORD *)a2 + 5);
    v3 = 16;
    *(_QWORD *)(this + 164) = 16;
    *(_QWORD *)(this + 40) = v4;
    v2 = *(_QWORD *)((char *)a2 + 164);
    if ((v2 & 0x80000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x80000) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 26);
    v3 |= 0x80000uLL;
    *(_QWORD *)(this + 164) = v3;
    *(_DWORD *)(this + 104) = v5;
    v2 = *(_QWORD *)((char *)a2 + 164);
  }
LABEL_6:
  if ((v2 & 0x20000000) != 0)
  {
    v6 = *((_DWORD *)a2 + 36);
    v3 |= 0x20000000uLL;
    *(_QWORD *)(this + 164) = v3;
    *(_DWORD *)(this + 144) = v6;
    v2 = *(_QWORD *)((char *)a2 + 164);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 0x40000000) == 0)
        goto LABEL_9;
      goto LABEL_41;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 12);
  v3 |= 0x20uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 48) = v7;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_42;
  }
LABEL_41:
  v8 = *((_DWORD *)a2 + 37);
  v3 |= 0x40000000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 148) = v8;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 0x100000000) == 0)
      goto LABEL_11;
    goto LABEL_43;
  }
LABEL_42:
  v9 = *((_DWORD *)a2 + 13);
  v3 |= 0x40uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 52) = v9;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x100000000) == 0)
  {
LABEL_11:
    if ((v2 & 0x2000) == 0)
      goto LABEL_12;
    goto LABEL_44;
  }
LABEL_43:
  v10 = *((_DWORD *)a2 + 39);
  v3 |= 0x100000000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 156) = v10;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x2000) == 0)
  {
LABEL_12:
    if ((v2 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_45;
  }
LABEL_44:
  v11 = *((_DWORD *)a2 + 20);
  v3 |= 0x2000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 80) = v11;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x1000) == 0)
  {
LABEL_13:
    if ((v2 & 0x80) == 0)
      goto LABEL_14;
    goto LABEL_46;
  }
LABEL_45:
  v12 = *((_DWORD *)a2 + 19);
  v3 |= 0x1000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 76) = v12;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x80) == 0)
  {
LABEL_14:
    if ((v2 & 0x200000000) == 0)
      goto LABEL_15;
    goto LABEL_47;
  }
LABEL_46:
  v13 = *((_DWORD *)a2 + 14);
  v3 |= 0x80uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 56) = v13;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x200000000) == 0)
  {
LABEL_15:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_16;
    goto LABEL_48;
  }
LABEL_47:
  v14 = *((_DWORD *)a2 + 40);
  v3 |= 0x200000000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 160) = v14;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_16:
    if ((v2 & 0x400) == 0)
      goto LABEL_17;
    goto LABEL_49;
  }
LABEL_48:
  v15 = *((_DWORD *)a2 + 35);
  v3 |= 0x10000000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 140) = v15;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x400) == 0)
  {
LABEL_17:
    if ((v2 & 0x4000) == 0)
      goto LABEL_18;
    goto LABEL_50;
  }
LABEL_49:
  v16 = *((_DWORD *)a2 + 17);
  v3 |= 0x400uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 68) = v16;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x4000) == 0)
  {
LABEL_18:
    if ((v2 & 0x800000) == 0)
      goto LABEL_19;
    goto LABEL_51;
  }
LABEL_50:
  v17 = *((_DWORD *)a2 + 21);
  v3 |= 0x4000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 84) = v17;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x800000) == 0)
  {
LABEL_19:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_20;
    goto LABEL_52;
  }
LABEL_51:
  v18 = *((_DWORD *)a2 + 30);
  v3 |= 0x800000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 120) = v18;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_20:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_21;
    goto LABEL_53;
  }
LABEL_52:
  v19 = *((_DWORD *)a2 + 32);
  v3 |= 0x2000000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 128) = v19;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_21:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_22;
    goto LABEL_54;
  }
LABEL_53:
  v20 = *((_DWORD *)a2 + 34);
  v3 |= 0x8000000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 136) = v20;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_22:
    if ((v2 & 0x400000) == 0)
      goto LABEL_23;
    goto LABEL_55;
  }
LABEL_54:
  v21 = *((_DWORD *)a2 + 33);
  v3 |= 0x4000000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 132) = v21;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x400000) == 0)
  {
LABEL_23:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_24;
    goto LABEL_56;
  }
LABEL_55:
  v22 = *((_DWORD *)a2 + 29);
  v3 |= 0x400000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 116) = v22;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_24:
    if ((v2 & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_57;
  }
LABEL_56:
  v23 = *((_DWORD *)a2 + 31);
  v3 |= 0x1000000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 124) = v23;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_25:
    if ((v2 & 0x8000) == 0)
      goto LABEL_26;
    goto LABEL_58;
  }
LABEL_57:
  v24 = *((_DWORD *)a2 + 38);
  v3 |= 0x80000000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 152) = v24;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x8000) == 0)
  {
LABEL_26:
    if ((v2 & 0x100000) == 0)
      goto LABEL_27;
    goto LABEL_59;
  }
LABEL_58:
  v25 = *((_DWORD *)a2 + 22);
  v3 |= 0x8000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 88) = v25;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x100000) == 0)
  {
LABEL_27:
    if ((v2 & 0x100) == 0)
      goto LABEL_28;
    goto LABEL_60;
  }
LABEL_59:
  v26 = *((_DWORD *)a2 + 27);
  v3 |= 0x100000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 108) = v26;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x100) == 0)
  {
LABEL_28:
    if ((v2 & 0x200000) == 0)
      goto LABEL_29;
    goto LABEL_61;
  }
LABEL_60:
  v27 = *((_DWORD *)a2 + 15);
  v3 |= 0x100uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 60) = v27;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x200000) == 0)
  {
LABEL_29:
    if ((v2 & 0x200) == 0)
      goto LABEL_30;
    goto LABEL_62;
  }
LABEL_61:
  v28 = *((_DWORD *)a2 + 28);
  v3 |= 0x200000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 112) = v28;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x200) == 0)
  {
LABEL_30:
    if ((v2 & 0x20000) == 0)
      goto LABEL_31;
    goto LABEL_63;
  }
LABEL_62:
  v29 = *((_DWORD *)a2 + 16);
  v3 |= 0x200uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 64) = v29;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x20000) == 0)
  {
LABEL_31:
    if ((v2 & 0x40000) == 0)
      goto LABEL_32;
    goto LABEL_64;
  }
LABEL_63:
  v30 = *((_DWORD *)a2 + 24);
  v3 |= 0x20000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 96) = v30;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x40000) == 0)
  {
LABEL_32:
    if ((v2 & 0x10000) == 0)
      goto LABEL_33;
    goto LABEL_65;
  }
LABEL_64:
  v31 = *((_DWORD *)a2 + 25);
  v3 |= 0x40000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 100) = v31;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x10000) == 0)
  {
LABEL_33:
    if ((v2 & 8) == 0)
      goto LABEL_34;
    goto LABEL_66;
  }
LABEL_65:
  v32 = *((_DWORD *)a2 + 23);
  v3 |= 0x10000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 92) = v32;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 8) == 0)
  {
LABEL_34:
    if ((v2 & 4) == 0)
      goto LABEL_35;
    goto LABEL_67;
  }
LABEL_66:
  v33 = *((_QWORD *)a2 + 4);
  v3 |= 8uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_QWORD *)(this + 32) = v33;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 4) == 0)
  {
LABEL_35:
    if ((v2 & 1) == 0)
      goto LABEL_36;
    goto LABEL_68;
  }
LABEL_67:
  v34 = *((_QWORD *)a2 + 3);
  v3 |= 4uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_QWORD *)(this + 24) = v34;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 1) == 0)
  {
LABEL_36:
    if ((v2 & 2) == 0)
      goto LABEL_37;
    goto LABEL_69;
  }
LABEL_68:
  v35 = *((_QWORD *)a2 + 1);
  v3 |= 1uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_QWORD *)(this + 8) = v35;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 2) == 0)
  {
LABEL_37:
    if ((v2 & 0x800) == 0)
      return this;
LABEL_70:
    v37 = *((_DWORD *)a2 + 18);
    *(_QWORD *)(this + 164) = v3 | 0x800;
    *(_DWORD *)(this + 72) = v37;
    return this;
  }
LABEL_69:
  v36 = *((_QWORD *)a2 + 2);
  v3 |= 2uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_QWORD *)(this + 16) = v36;
  if ((*(_QWORD *)((_BYTE *)a2 + 164) & 0x800) != 0)
    goto LABEL_70;
  return this;
}

CMMsl *CMMsl::DopplerRawDataInput::operator=(CMMsl *a1, const CMMsl::DopplerRawDataInput *a2)
{
  CMMsl::DopplerRawDataInput *v3;
  _BYTE v5[176];

  if (a1 != a2)
  {
    CMMsl::DopplerRawDataInput::DopplerRawDataInput((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::DopplerRawDataInput *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::DopplerRawDataInput *a2, CMMsl::DopplerRawDataInput *a3)
{
  uint64_t v3;
  uint64_t v4;
  float result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)((char *)this + 164);
  *(_QWORD *)((char *)this + 164) = *(_QWORD *)((char *)a2 + 164);
  *(_QWORD *)((char *)a2 + 164) = v3;
  v4 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v4;
  LODWORD(v4) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v4;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  LODWORD(v4) = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v4;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  LODWORD(v4) = *((_DWORD *)this + 39);
  *((_DWORD *)this + 39) = *((_DWORD *)a2 + 39);
  *((_DWORD *)a2 + 39) = v4;
  LODWORD(v3) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v3;
  LODWORD(v3) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v3;
  LODWORD(v3) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v3;
  LODWORD(v3) = *((_DWORD *)this + 40);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
  *((_DWORD *)a2 + 40) = v3;
  LODWORD(v3) = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v3;
  LODWORD(v3) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v3;
  LODWORD(v3) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v3;
  LODWORD(v3) = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v3;
  LODWORD(v3) = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v3;
  LODWORD(v3) = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v3;
  LODWORD(v3) = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v3;
  LODWORD(v3) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v3;
  LODWORD(v3) = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v3;
  LODWORD(v3) = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v3;
  LODWORD(v3) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v3;
  LODWORD(v3) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v3;
  LODWORD(v4) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  LODWORD(v4) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v4;
  result = *((float *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((float *)a2 + 16) = result;
  LODWORD(v3) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v3;
  LODWORD(v3) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v3;
  LODWORD(v3) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v3;
  v6 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v8;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v9;
  LODWORD(v9) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v9;
  return result;
}

float CMMsl::DopplerRawDataInput::DopplerRawDataInput(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135D328;
  *(_QWORD *)(a1 + 164) = *(_QWORD *)(a2 + 164);
  *(_QWORD *)(a2 + 164) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  result = *(float *)(a2 + 64);
  *(float *)(a1 + 64) = result;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  return result;
}

CMMsl *CMMsl::DopplerRawDataInput::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::DopplerRawDataInput *v3;
  _BYTE v5[176];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::DopplerRawDataInput::DopplerRawDataInput((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::DopplerRawDataInput *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::DopplerRawDataInput::formatText(CMMsl::DopplerRawDataInput *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(a2, "ambientRatePerSPAD", *((float *)this + 12));
    v5 = *(_QWORD *)((char *)this + 164);
    if ((v5 & 0x40) == 0)
    {
LABEL_3:
      if ((v5 & 0x80) == 0)
        goto LABEL_4;
      goto LABEL_39;
    }
  }
  else if ((v5 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "ambientRateTotal", *((float *)this + 13));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x80) == 0)
  {
LABEL_4:
    if ((v5 & 0x100) == 0)
      goto LABEL_5;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "blockSelectByte");
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x100) == 0)
  {
LABEL_5:
    if ((v5 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "correctedSignalRatePerSPAD", *((float *)this + 15));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x200) == 0)
  {
LABEL_6:
    if ((v5 & 0x400) == 0)
      goto LABEL_7;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "estimatedAmbientBias", *((float *)this + 16));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x400) == 0)
  {
LABEL_7:
    if ((v5 & 0x800) == 0)
      goto LABEL_8;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "integrationTime");
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x800) == 0)
  {
LABEL_8:
    if ((v5 & 0x1000) == 0)
      goto LABEL_9;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "numAOPClients");
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x1000) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "numAperturedSPADs");
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x2000) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000) == 0)
      goto LABEL_11;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "numFullSPADs");
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x4000) == 0)
  {
LABEL_11:
    if ((v5 & 0x8000) == 0)
      goto LABEL_12;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "oscFrequencySetting");
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x8000) == 0)
  {
LABEL_12:
    if ((v5 & 1) == 0)
      goto LABEL_13;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "oscTrim");
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 1) == 0)
  {
LABEL_13:
    if ((v5 & 0x10000) == 0)
      goto LABEL_14;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "pearlScanWindowOnTs");
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x10000) == 0)
  {
LABEL_14:
    if ((v5 & 2) == 0)
      goto LABEL_15;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "pearlScanWindowOpen");
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 2) == 0)
  {
LABEL_15:
    if ((v5 & 4) == 0)
      goto LABEL_16;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "pearlScanWindownOffTs");
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 4) == 0)
  {
LABEL_16:
    if ((v5 & 8) == 0)
      goto LABEL_17;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "pearlSessionOffTs");
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 8) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "pearlSessionOnTs");
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0)
      goto LABEL_19;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "pearlSessionRunning");
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 0x80000) == 0)
      goto LABEL_20;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "pearlSessionType");
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x80000) == 0)
  {
LABEL_20:
    if ((v5 & 0x100000) == 0)
      goto LABEL_21;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "rawRange", *((float *)this + 26));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x100000) == 0)
  {
LABEL_21:
    if ((v5 & 0x200000) == 0)
      goto LABEL_22;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "refPhaseOffset");
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x200000) == 0)
  {
LABEL_22:
    if ((v5 & 0x400000) == 0)
      goto LABEL_23;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "refSignalRateTotal", *((float *)this + 28));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x400000) == 0)
  {
LABEL_23:
    if ((v5 & 0x800000) == 0)
      goto LABEL_24;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "regValAmbientWindowEvents");
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x800000) == 0)
  {
LABEL_24:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_25;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "regValRange");
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_26;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "regValRefAmbientWindowEvents");
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_27;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "regValRefRange");
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_28;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "regValRefSignalTotalEvents");
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_29;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "regValSignalTotalEvents");
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_30;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "signalEventLimit");
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_31;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "signalRatePerSPAD", *((float *)this + 36));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "signalRateTotal", *((float *)this + 37));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x10) == 0)
      goto LABEL_33;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "signalToAmbientWindowRatio");
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x10) == 0)
  {
LABEL_33:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_34;
LABEL_69:
    PB::TextFormatter::format(a2, "totalRateTotal", *((float *)this + 39));
    if ((*(_QWORD *)((_BYTE *)this + 164) & 0x200000000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_35;
  }
LABEL_68:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 5));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x100000000) != 0)
    goto LABEL_69;
LABEL_34:
  if ((v5 & 0x200000000) != 0)
LABEL_35:
    PB::TextFormatter::format(a2, "vhvSetting");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::DopplerRawDataInput::readFrom(CMMsl::DopplerRawDataInput *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  char v96;
  unsigned int v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char v104;
  unsigned int v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  char v112;
  unsigned int v113;
  uint64_t v114;
  unint64_t v115;
  char v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  char v120;
  unsigned int v121;
  uint64_t v122;
  unint64_t v123;
  char v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  char v128;
  unsigned int v129;
  uint64_t v130;
  unint64_t v131;
  char v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  char v136;
  unsigned int v137;
  uint64_t v138;
  unint64_t v139;
  char v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  char v144;
  unsigned int v145;
  uint64_t v146;
  unint64_t v147;
  char v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  char v152;
  unsigned int v153;
  uint64_t v154;
  unint64_t v155;
  char v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  char v163;
  unsigned int v164;
  uint64_t v165;
  unint64_t v166;
  char v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  char v171;
  unsigned int v172;
  uint64_t v173;
  unint64_t v174;
  char v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  char v179;
  unsigned int v180;
  uint64_t v181;
  unint64_t v182;
  char v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  char v187;
  unsigned int v188;
  uint64_t v189;
  unint64_t v190;
  char v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  char v195;
  unsigned int v196;
  uint64_t v197;
  unint64_t v198;
  char v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t v202;
  char v203;
  unsigned int v204;
  uint64_t v205;
  unint64_t v206;
  char v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;
  char v211;
  unsigned int v212;
  uint64_t v213;
  unint64_t v214;
  char v215;
  unint64_t v216;
  unint64_t v217;
  uint64_t v218;
  char v219;
  unsigned int v220;
  uint64_t v221;
  unint64_t v222;
  char v223;
  char v224;
  unsigned int v225;
  unint64_t v226;
  char v227;
  char v228;
  unsigned int v229;
  unint64_t v230;
  char v231;
  char v232;
  unsigned int v233;
  unint64_t v234;
  char v235;
  char v236;
  unsigned int v237;
  unint64_t v238;
  char v239;
  char v240;
  unsigned int v241;
  unint64_t v242;
  char v243;
  char v244;
  unsigned int v245;
  unint64_t v246;
  char v247;
  char v248;
  unsigned int v249;
  unint64_t v250;
  char v251;
  char v252;
  unsigned int v253;
  unint64_t v254;
  char v255;
  char v256;
  unsigned int v257;
  unint64_t v258;
  char v259;
  char v260;
  unsigned int v261;
  unint64_t v262;
  char v263;
  char v264;
  unsigned int v265;
  unint64_t v266;
  char v267;
  char v268;
  unsigned int v269;
  unint64_t v270;
  char v271;
  char v272;
  unsigned int v273;
  unint64_t v274;
  char v275;
  char v276;
  unsigned int v277;
  unint64_t v278;
  char v279;
  char v280;
  unsigned int v281;
  unint64_t v282;
  char v283;
  char v284;
  unsigned int v285;
  unint64_t v286;
  char v287;
  char v288;
  unsigned int v289;
  unint64_t v290;
  char v291;
  char v292;
  unsigned int v293;
  unint64_t v294;
  char v295;
  char v296;
  unsigned int v297;
  unint64_t v298;
  char v299;
  char v300;
  unsigned int v301;
  unint64_t v302;
  char v303;
  char v304;
  unsigned int v305;
  unint64_t v306;
  char v307;
  char v308;
  unsigned int v309;
  unint64_t v310;
  char v311;
  char v312;
  unsigned int v313;
  unint64_t v314;
  char v315;
  char v316;
  unsigned int v317;
  unint64_t v318;
  char v319;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_25;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      goto LABEL_20;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_25:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *(_QWORD *)((char *)this + 164) |= 0x10uLL;
        v21 = *((_QWORD *)a2 + 1);
        if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_168;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v21);
        v22 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_395;
      case 2u:
        *(_QWORD *)((char *)this + 164) |= 0x80000uLL;
        v23 = *((_QWORD *)a2 + 1);
        if (v23 > 0xFFFFFFFFFFFFFFFBLL || v23 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_168;
        *((_DWORD *)this + 26) = *(_DWORD *)(*(_QWORD *)a2 + v23);
        goto LABEL_394;
      case 3u:
        *(_QWORD *)((char *)this + 164) |= 0x20000000uLL;
        v24 = *((_QWORD *)a2 + 1);
        if (v24 > 0xFFFFFFFFFFFFFFFBLL || v24 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_168;
        *((_DWORD *)this + 36) = *(_DWORD *)(*(_QWORD *)a2 + v24);
        goto LABEL_394;
      case 4u:
        *(_QWORD *)((char *)this + 164) |= 0x20uLL;
        v25 = *((_QWORD *)a2 + 1);
        if (v25 > 0xFFFFFFFFFFFFFFFBLL || v25 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_168;
        *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v25);
        goto LABEL_394;
      case 5u:
        *(_QWORD *)((char *)this + 164) |= 0x40000000uLL;
        v26 = *((_QWORD *)a2 + 1);
        if (v26 > 0xFFFFFFFFFFFFFFFBLL || v26 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_168;
        *((_DWORD *)this + 37) = *(_DWORD *)(*(_QWORD *)a2 + v26);
        goto LABEL_394;
      case 6u:
        *(_QWORD *)((char *)this + 164) |= 0x40uLL;
        v27 = *((_QWORD *)a2 + 1);
        if (v27 > 0xFFFFFFFFFFFFFFFBLL || v27 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_168;
        *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v27);
        goto LABEL_394;
      case 7u:
        *(_QWORD *)((char *)this + 164) |= 0x100000000uLL;
        v28 = *((_QWORD *)a2 + 1);
        if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_168;
        *((_DWORD *)this + 39) = *(_DWORD *)(*(_QWORD *)a2 + v28);
        goto LABEL_394;
      case 8u:
        *(_QWORD *)((char *)this + 164) |= 0x2000uLL;
        v29 = *((_QWORD *)a2 + 1);
        v30 = *((_QWORD *)a2 + 2);
        v31 = *(_QWORD *)a2;
        if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
        {
          v32 = 0;
          v33 = 0;
          v34 = 0;
          do
          {
            v35 = v29 + 1;
            *((_QWORD *)a2 + 1) = v29 + 1;
            v36 = *(_BYTE *)(v31 + v29);
            v34 |= (unint64_t)(v36 & 0x7F) << v32;
            if ((v36 & 0x80) == 0)
              goto LABEL_399;
            v32 += 7;
            v29 = v35;
            v14 = v33++ > 8;
          }
          while (!v14);
LABEL_231:
          LODWORD(v34) = 0;
          goto LABEL_399;
        }
        v224 = 0;
        v225 = 0;
        v34 = 0;
        if (v30 <= v29)
          v30 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v30 == v29)
          {
            LODWORD(v34) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v226 = v29 + 1;
            v227 = *(_BYTE *)(v31 + v29);
            *((_QWORD *)a2 + 1) = v226;
            v34 |= (unint64_t)(v227 & 0x7F) << v224;
            if (v227 < 0)
            {
              v224 += 7;
              v29 = v226;
              v14 = v225++ > 8;
              if (v14)
                goto LABEL_231;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v34) = 0;
          }
          break;
        }
LABEL_399:
        *((_DWORD *)this + 20) = v34;
        goto LABEL_20;
      case 9u:
        *(_QWORD *)((char *)this + 164) |= 0x1000uLL;
        v37 = *((_QWORD *)a2 + 1);
        v38 = *((_QWORD *)a2 + 2);
        v39 = *(_QWORD *)a2;
        if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
        {
          v40 = 0;
          v41 = 0;
          v42 = 0;
          do
          {
            v43 = v37 + 1;
            *((_QWORD *)a2 + 1) = v37 + 1;
            v44 = *(_BYTE *)(v39 + v37);
            v42 |= (unint64_t)(v44 & 0x7F) << v40;
            if ((v44 & 0x80) == 0)
              goto LABEL_403;
            v40 += 7;
            v37 = v43;
            v14 = v41++ > 8;
          }
          while (!v14);
LABEL_238:
          LODWORD(v42) = 0;
          goto LABEL_403;
        }
        v228 = 0;
        v229 = 0;
        v42 = 0;
        if (v38 <= v37)
          v38 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v38 == v37)
          {
            LODWORD(v42) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v230 = v37 + 1;
            v231 = *(_BYTE *)(v39 + v37);
            *((_QWORD *)a2 + 1) = v230;
            v42 |= (unint64_t)(v231 & 0x7F) << v228;
            if (v231 < 0)
            {
              v228 += 7;
              v37 = v230;
              v14 = v229++ > 8;
              if (v14)
                goto LABEL_238;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v42) = 0;
          }
          break;
        }
LABEL_403:
        *((_DWORD *)this + 19) = v42;
        goto LABEL_20;
      case 0xAu:
        *(_QWORD *)((char *)this + 164) |= 0x80uLL;
        v45 = *((_QWORD *)a2 + 1);
        v46 = *((_QWORD *)a2 + 2);
        v47 = *(_QWORD *)a2;
        if (v45 <= 0xFFFFFFFFFFFFFFF5 && v45 + 10 <= v46)
        {
          v48 = 0;
          v49 = 0;
          v50 = 0;
          do
          {
            v51 = v45 + 1;
            *((_QWORD *)a2 + 1) = v45 + 1;
            v52 = *(_BYTE *)(v47 + v45);
            v50 |= (unint64_t)(v52 & 0x7F) << v48;
            if ((v52 & 0x80) == 0)
              goto LABEL_407;
            v48 += 7;
            v45 = v51;
            v14 = v49++ > 8;
          }
          while (!v14);
LABEL_245:
          LODWORD(v50) = 0;
          goto LABEL_407;
        }
        v232 = 0;
        v233 = 0;
        v50 = 0;
        if (v46 <= v45)
          v46 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v46 == v45)
          {
            LODWORD(v50) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v234 = v45 + 1;
            v235 = *(_BYTE *)(v47 + v45);
            *((_QWORD *)a2 + 1) = v234;
            v50 |= (unint64_t)(v235 & 0x7F) << v232;
            if (v235 < 0)
            {
              v232 += 7;
              v45 = v234;
              v14 = v233++ > 8;
              if (v14)
                goto LABEL_245;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v50) = 0;
          }
          break;
        }
LABEL_407:
        *((_DWORD *)this + 14) = v50;
        goto LABEL_20;
      case 0xBu:
        *(_QWORD *)((char *)this + 164) |= 0x200000000uLL;
        v53 = *((_QWORD *)a2 + 1);
        v54 = *((_QWORD *)a2 + 2);
        v55 = *(_QWORD *)a2;
        if (v53 <= 0xFFFFFFFFFFFFFFF5 && v53 + 10 <= v54)
        {
          v56 = 0;
          v57 = 0;
          v58 = 0;
          do
          {
            v59 = v53 + 1;
            *((_QWORD *)a2 + 1) = v53 + 1;
            v60 = *(_BYTE *)(v55 + v53);
            v58 |= (unint64_t)(v60 & 0x7F) << v56;
            if ((v60 & 0x80) == 0)
              goto LABEL_411;
            v56 += 7;
            v53 = v59;
            v14 = v57++ > 8;
          }
          while (!v14);
LABEL_252:
          LODWORD(v58) = 0;
          goto LABEL_411;
        }
        v236 = 0;
        v237 = 0;
        v58 = 0;
        if (v54 <= v53)
          v54 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v54 == v53)
          {
            LODWORD(v58) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v238 = v53 + 1;
            v239 = *(_BYTE *)(v55 + v53);
            *((_QWORD *)a2 + 1) = v238;
            v58 |= (unint64_t)(v239 & 0x7F) << v236;
            if (v239 < 0)
            {
              v236 += 7;
              v53 = v238;
              v14 = v237++ > 8;
              if (v14)
                goto LABEL_252;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v58) = 0;
          }
          break;
        }
LABEL_411:
        *((_DWORD *)this + 40) = v58;
        goto LABEL_20;
      case 0xCu:
        *(_QWORD *)((char *)this + 164) |= 0x10000000uLL;
        v61 = *((_QWORD *)a2 + 1);
        v62 = *((_QWORD *)a2 + 2);
        v63 = *(_QWORD *)a2;
        if (v61 <= 0xFFFFFFFFFFFFFFF5 && v61 + 10 <= v62)
        {
          v64 = 0;
          v65 = 0;
          v66 = 0;
          do
          {
            v67 = v61 + 1;
            *((_QWORD *)a2 + 1) = v61 + 1;
            v68 = *(_BYTE *)(v63 + v61);
            v66 |= (unint64_t)(v68 & 0x7F) << v64;
            if ((v68 & 0x80) == 0)
              goto LABEL_415;
            v64 += 7;
            v61 = v67;
            v14 = v65++ > 8;
          }
          while (!v14);
LABEL_259:
          LODWORD(v66) = 0;
          goto LABEL_415;
        }
        v240 = 0;
        v241 = 0;
        v66 = 0;
        if (v62 <= v61)
          v62 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v62 == v61)
          {
            LODWORD(v66) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v242 = v61 + 1;
            v243 = *(_BYTE *)(v63 + v61);
            *((_QWORD *)a2 + 1) = v242;
            v66 |= (unint64_t)(v243 & 0x7F) << v240;
            if (v243 < 0)
            {
              v240 += 7;
              v61 = v242;
              v14 = v241++ > 8;
              if (v14)
                goto LABEL_259;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v66) = 0;
          }
          break;
        }
LABEL_415:
        *((_DWORD *)this + 35) = v66;
        goto LABEL_20;
      case 0xDu:
        *(_QWORD *)((char *)this + 164) |= 0x400uLL;
        v69 = *((_QWORD *)a2 + 1);
        v70 = *((_QWORD *)a2 + 2);
        v71 = *(_QWORD *)a2;
        if (v69 <= 0xFFFFFFFFFFFFFFF5 && v69 + 10 <= v70)
        {
          v72 = 0;
          v73 = 0;
          v74 = 0;
          do
          {
            v75 = v69 + 1;
            *((_QWORD *)a2 + 1) = v69 + 1;
            v76 = *(_BYTE *)(v71 + v69);
            v74 |= (unint64_t)(v76 & 0x7F) << v72;
            if ((v76 & 0x80) == 0)
              goto LABEL_419;
            v72 += 7;
            v69 = v75;
            v14 = v73++ > 8;
          }
          while (!v14);
LABEL_266:
          LODWORD(v74) = 0;
          goto LABEL_419;
        }
        v244 = 0;
        v245 = 0;
        v74 = 0;
        if (v70 <= v69)
          v70 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v70 == v69)
          {
            LODWORD(v74) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v246 = v69 + 1;
            v247 = *(_BYTE *)(v71 + v69);
            *((_QWORD *)a2 + 1) = v246;
            v74 |= (unint64_t)(v247 & 0x7F) << v244;
            if (v247 < 0)
            {
              v244 += 7;
              v69 = v246;
              v14 = v245++ > 8;
              if (v14)
                goto LABEL_266;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v74) = 0;
          }
          break;
        }
LABEL_419:
        *((_DWORD *)this + 17) = v74;
        goto LABEL_20;
      case 0xEu:
        *(_QWORD *)((char *)this + 164) |= 0x4000uLL;
        v77 = *((_QWORD *)a2 + 1);
        v78 = *((_QWORD *)a2 + 2);
        v79 = *(_QWORD *)a2;
        if (v77 <= 0xFFFFFFFFFFFFFFF5 && v77 + 10 <= v78)
        {
          v80 = 0;
          v81 = 0;
          v82 = 0;
          do
          {
            v83 = v77 + 1;
            *((_QWORD *)a2 + 1) = v77 + 1;
            v84 = *(_BYTE *)(v79 + v77);
            v82 |= (unint64_t)(v84 & 0x7F) << v80;
            if ((v84 & 0x80) == 0)
              goto LABEL_423;
            v80 += 7;
            v77 = v83;
            v14 = v81++ > 8;
          }
          while (!v14);
LABEL_273:
          LODWORD(v82) = 0;
          goto LABEL_423;
        }
        v248 = 0;
        v249 = 0;
        v82 = 0;
        if (v78 <= v77)
          v78 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v78 == v77)
          {
            LODWORD(v82) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v250 = v77 + 1;
            v251 = *(_BYTE *)(v79 + v77);
            *((_QWORD *)a2 + 1) = v250;
            v82 |= (unint64_t)(v251 & 0x7F) << v248;
            if (v251 < 0)
            {
              v248 += 7;
              v77 = v250;
              v14 = v249++ > 8;
              if (v14)
                goto LABEL_273;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v82) = 0;
          }
          break;
        }
LABEL_423:
        *((_DWORD *)this + 21) = v82;
        goto LABEL_20;
      case 0xFu:
        *(_QWORD *)((char *)this + 164) |= 0x800000uLL;
        v85 = *((_QWORD *)a2 + 1);
        v86 = *((_QWORD *)a2 + 2);
        v87 = *(_QWORD *)a2;
        if (v85 <= 0xFFFFFFFFFFFFFFF5 && v85 + 10 <= v86)
        {
          v88 = 0;
          v89 = 0;
          v90 = 0;
          do
          {
            v91 = v85 + 1;
            *((_QWORD *)a2 + 1) = v85 + 1;
            v92 = *(_BYTE *)(v87 + v85);
            v90 |= (unint64_t)(v92 & 0x7F) << v88;
            if ((v92 & 0x80) == 0)
              goto LABEL_427;
            v88 += 7;
            v85 = v91;
            v14 = v89++ > 8;
          }
          while (!v14);
LABEL_280:
          LODWORD(v90) = 0;
          goto LABEL_427;
        }
        v252 = 0;
        v253 = 0;
        v90 = 0;
        if (v86 <= v85)
          v86 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v86 == v85)
          {
            LODWORD(v90) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v254 = v85 + 1;
            v255 = *(_BYTE *)(v87 + v85);
            *((_QWORD *)a2 + 1) = v254;
            v90 |= (unint64_t)(v255 & 0x7F) << v252;
            if (v255 < 0)
            {
              v252 += 7;
              v85 = v254;
              v14 = v253++ > 8;
              if (v14)
                goto LABEL_280;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v90) = 0;
          }
          break;
        }
LABEL_427:
        *((_DWORD *)this + 30) = v90;
        goto LABEL_20;
      case 0x10u:
        *(_QWORD *)((char *)this + 164) |= 0x2000000uLL;
        v93 = *((_QWORD *)a2 + 1);
        v94 = *((_QWORD *)a2 + 2);
        v95 = *(_QWORD *)a2;
        if (v93 <= 0xFFFFFFFFFFFFFFF5 && v93 + 10 <= v94)
        {
          v96 = 0;
          v97 = 0;
          v98 = 0;
          do
          {
            v99 = v93 + 1;
            *((_QWORD *)a2 + 1) = v93 + 1;
            v100 = *(_BYTE *)(v95 + v93);
            v98 |= (unint64_t)(v100 & 0x7F) << v96;
            if ((v100 & 0x80) == 0)
              goto LABEL_431;
            v96 += 7;
            v93 = v99;
            v14 = v97++ > 8;
          }
          while (!v14);
LABEL_287:
          LODWORD(v98) = 0;
          goto LABEL_431;
        }
        v256 = 0;
        v257 = 0;
        v98 = 0;
        if (v94 <= v93)
          v94 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v94 == v93)
          {
            LODWORD(v98) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v258 = v93 + 1;
            v259 = *(_BYTE *)(v95 + v93);
            *((_QWORD *)a2 + 1) = v258;
            v98 |= (unint64_t)(v259 & 0x7F) << v256;
            if (v259 < 0)
            {
              v256 += 7;
              v93 = v258;
              v14 = v257++ > 8;
              if (v14)
                goto LABEL_287;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v98) = 0;
          }
          break;
        }
LABEL_431:
        *((_DWORD *)this + 32) = v98;
        goto LABEL_20;
      case 0x11u:
        *(_QWORD *)((char *)this + 164) |= 0x8000000uLL;
        v101 = *((_QWORD *)a2 + 1);
        v102 = *((_QWORD *)a2 + 2);
        v103 = *(_QWORD *)a2;
        if (v101 <= 0xFFFFFFFFFFFFFFF5 && v101 + 10 <= v102)
        {
          v104 = 0;
          v105 = 0;
          v106 = 0;
          do
          {
            v107 = v101 + 1;
            *((_QWORD *)a2 + 1) = v101 + 1;
            v108 = *(_BYTE *)(v103 + v101);
            v106 |= (unint64_t)(v108 & 0x7F) << v104;
            if ((v108 & 0x80) == 0)
              goto LABEL_435;
            v104 += 7;
            v101 = v107;
            v14 = v105++ > 8;
          }
          while (!v14);
LABEL_294:
          LODWORD(v106) = 0;
          goto LABEL_435;
        }
        v260 = 0;
        v261 = 0;
        v106 = 0;
        if (v102 <= v101)
          v102 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v102 == v101)
          {
            LODWORD(v106) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v262 = v101 + 1;
            v263 = *(_BYTE *)(v103 + v101);
            *((_QWORD *)a2 + 1) = v262;
            v106 |= (unint64_t)(v263 & 0x7F) << v260;
            if (v263 < 0)
            {
              v260 += 7;
              v101 = v262;
              v14 = v261++ > 8;
              if (v14)
                goto LABEL_294;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v106) = 0;
          }
          break;
        }
LABEL_435:
        *((_DWORD *)this + 34) = v106;
        goto LABEL_20;
      case 0x12u:
        *(_QWORD *)((char *)this + 164) |= 0x4000000uLL;
        v109 = *((_QWORD *)a2 + 1);
        v110 = *((_QWORD *)a2 + 2);
        v111 = *(_QWORD *)a2;
        if (v109 <= 0xFFFFFFFFFFFFFFF5 && v109 + 10 <= v110)
        {
          v112 = 0;
          v113 = 0;
          v114 = 0;
          do
          {
            v115 = v109 + 1;
            *((_QWORD *)a2 + 1) = v109 + 1;
            v116 = *(_BYTE *)(v111 + v109);
            v114 |= (unint64_t)(v116 & 0x7F) << v112;
            if ((v116 & 0x80) == 0)
              goto LABEL_439;
            v112 += 7;
            v109 = v115;
            v14 = v113++ > 8;
          }
          while (!v14);
LABEL_301:
          LODWORD(v114) = 0;
          goto LABEL_439;
        }
        v264 = 0;
        v265 = 0;
        v114 = 0;
        if (v110 <= v109)
          v110 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v110 == v109)
          {
            LODWORD(v114) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v266 = v109 + 1;
            v267 = *(_BYTE *)(v111 + v109);
            *((_QWORD *)a2 + 1) = v266;
            v114 |= (unint64_t)(v267 & 0x7F) << v264;
            if (v267 < 0)
            {
              v264 += 7;
              v109 = v266;
              v14 = v265++ > 8;
              if (v14)
                goto LABEL_301;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v114) = 0;
          }
          break;
        }
LABEL_439:
        *((_DWORD *)this + 33) = v114;
        goto LABEL_20;
      case 0x13u:
        *(_QWORD *)((char *)this + 164) |= 0x400000uLL;
        v117 = *((_QWORD *)a2 + 1);
        v118 = *((_QWORD *)a2 + 2);
        v119 = *(_QWORD *)a2;
        if (v117 <= 0xFFFFFFFFFFFFFFF5 && v117 + 10 <= v118)
        {
          v120 = 0;
          v121 = 0;
          v122 = 0;
          do
          {
            v123 = v117 + 1;
            *((_QWORD *)a2 + 1) = v117 + 1;
            v124 = *(_BYTE *)(v119 + v117);
            v122 |= (unint64_t)(v124 & 0x7F) << v120;
            if ((v124 & 0x80) == 0)
              goto LABEL_443;
            v120 += 7;
            v117 = v123;
            v14 = v121++ > 8;
          }
          while (!v14);
LABEL_308:
          LODWORD(v122) = 0;
          goto LABEL_443;
        }
        v268 = 0;
        v269 = 0;
        v122 = 0;
        if (v118 <= v117)
          v118 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v118 == v117)
          {
            LODWORD(v122) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v270 = v117 + 1;
            v271 = *(_BYTE *)(v119 + v117);
            *((_QWORD *)a2 + 1) = v270;
            v122 |= (unint64_t)(v271 & 0x7F) << v268;
            if (v271 < 0)
            {
              v268 += 7;
              v117 = v270;
              v14 = v269++ > 8;
              if (v14)
                goto LABEL_308;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v122) = 0;
          }
          break;
        }
LABEL_443:
        *((_DWORD *)this + 29) = v122;
        goto LABEL_20;
      case 0x14u:
        *(_QWORD *)((char *)this + 164) |= 0x1000000uLL;
        v125 = *((_QWORD *)a2 + 1);
        v126 = *((_QWORD *)a2 + 2);
        v127 = *(_QWORD *)a2;
        if (v125 <= 0xFFFFFFFFFFFFFFF5 && v125 + 10 <= v126)
        {
          v128 = 0;
          v129 = 0;
          v130 = 0;
          do
          {
            v131 = v125 + 1;
            *((_QWORD *)a2 + 1) = v125 + 1;
            v132 = *(_BYTE *)(v127 + v125);
            v130 |= (unint64_t)(v132 & 0x7F) << v128;
            if ((v132 & 0x80) == 0)
              goto LABEL_447;
            v128 += 7;
            v125 = v131;
            v14 = v129++ > 8;
          }
          while (!v14);
LABEL_315:
          LODWORD(v130) = 0;
          goto LABEL_447;
        }
        v272 = 0;
        v273 = 0;
        v130 = 0;
        if (v126 <= v125)
          v126 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v126 == v125)
          {
            LODWORD(v130) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v274 = v125 + 1;
            v275 = *(_BYTE *)(v127 + v125);
            *((_QWORD *)a2 + 1) = v274;
            v130 |= (unint64_t)(v275 & 0x7F) << v272;
            if (v275 < 0)
            {
              v272 += 7;
              v125 = v274;
              v14 = v273++ > 8;
              if (v14)
                goto LABEL_315;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v130) = 0;
          }
          break;
        }
LABEL_447:
        *((_DWORD *)this + 31) = v130;
        goto LABEL_20;
      case 0x15u:
        *(_QWORD *)((char *)this + 164) |= 0x80000000uLL;
        v133 = *((_QWORD *)a2 + 1);
        v134 = *((_QWORD *)a2 + 2);
        v135 = *(_QWORD *)a2;
        if (v133 <= 0xFFFFFFFFFFFFFFF5 && v133 + 10 <= v134)
        {
          v136 = 0;
          v137 = 0;
          v138 = 0;
          do
          {
            v139 = v133 + 1;
            *((_QWORD *)a2 + 1) = v133 + 1;
            v140 = *(_BYTE *)(v135 + v133);
            v138 |= (unint64_t)(v140 & 0x7F) << v136;
            if ((v140 & 0x80) == 0)
              goto LABEL_451;
            v136 += 7;
            v133 = v139;
            v14 = v137++ > 8;
          }
          while (!v14);
LABEL_322:
          LODWORD(v138) = 0;
          goto LABEL_451;
        }
        v276 = 0;
        v277 = 0;
        v138 = 0;
        if (v134 <= v133)
          v134 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v134 == v133)
          {
            LODWORD(v138) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v278 = v133 + 1;
            v279 = *(_BYTE *)(v135 + v133);
            *((_QWORD *)a2 + 1) = v278;
            v138 |= (unint64_t)(v279 & 0x7F) << v276;
            if (v279 < 0)
            {
              v276 += 7;
              v133 = v278;
              v14 = v277++ > 8;
              if (v14)
                goto LABEL_322;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v138) = 0;
          }
          break;
        }
LABEL_451:
        *((_DWORD *)this + 38) = v138;
        goto LABEL_20;
      case 0x16u:
        *(_QWORD *)((char *)this + 164) |= 0x8000uLL;
        v141 = *((_QWORD *)a2 + 1);
        v142 = *((_QWORD *)a2 + 2);
        v143 = *(_QWORD *)a2;
        if (v141 <= 0xFFFFFFFFFFFFFFF5 && v141 + 10 <= v142)
        {
          v144 = 0;
          v145 = 0;
          v146 = 0;
          do
          {
            v147 = v141 + 1;
            *((_QWORD *)a2 + 1) = v141 + 1;
            v148 = *(_BYTE *)(v143 + v141);
            v146 |= (unint64_t)(v148 & 0x7F) << v144;
            if ((v148 & 0x80) == 0)
              goto LABEL_455;
            v144 += 7;
            v141 = v147;
            v14 = v145++ > 8;
          }
          while (!v14);
LABEL_329:
          LODWORD(v146) = 0;
          goto LABEL_455;
        }
        v280 = 0;
        v281 = 0;
        v146 = 0;
        if (v142 <= v141)
          v142 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v142 == v141)
          {
            LODWORD(v146) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v282 = v141 + 1;
            v283 = *(_BYTE *)(v143 + v141);
            *((_QWORD *)a2 + 1) = v282;
            v146 |= (unint64_t)(v283 & 0x7F) << v280;
            if (v283 < 0)
            {
              v280 += 7;
              v141 = v282;
              v14 = v281++ > 8;
              if (v14)
                goto LABEL_329;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v146) = 0;
          }
          break;
        }
LABEL_455:
        *((_DWORD *)this + 22) = v146;
        goto LABEL_20;
      case 0x17u:
        *(_QWORD *)((char *)this + 164) |= 0x100000uLL;
        v149 = *((_QWORD *)a2 + 1);
        v150 = *((_QWORD *)a2 + 2);
        v151 = *(_QWORD *)a2;
        if (v149 <= 0xFFFFFFFFFFFFFFF5 && v149 + 10 <= v150)
        {
          v152 = 0;
          v153 = 0;
          v154 = 0;
          do
          {
            v155 = v149 + 1;
            *((_QWORD *)a2 + 1) = v149 + 1;
            v156 = *(_BYTE *)(v151 + v149);
            v154 |= (unint64_t)(v156 & 0x7F) << v152;
            if ((v156 & 0x80) == 0)
              goto LABEL_459;
            v152 += 7;
            v149 = v155;
            v14 = v153++ > 8;
          }
          while (!v14);
LABEL_336:
          LODWORD(v154) = 0;
          goto LABEL_459;
        }
        v284 = 0;
        v285 = 0;
        v154 = 0;
        if (v150 <= v149)
          v150 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v150 == v149)
          {
            LODWORD(v154) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v286 = v149 + 1;
            v287 = *(_BYTE *)(v151 + v149);
            *((_QWORD *)a2 + 1) = v286;
            v154 |= (unint64_t)(v287 & 0x7F) << v284;
            if (v287 < 0)
            {
              v284 += 7;
              v149 = v286;
              v14 = v285++ > 8;
              if (v14)
                goto LABEL_336;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v154) = 0;
          }
          break;
        }
LABEL_459:
        *((_DWORD *)this + 27) = v154;
        goto LABEL_20;
      case 0x18u:
        *(_QWORD *)((char *)this + 164) |= 0x100uLL;
        v157 = *((_QWORD *)a2 + 1);
        if (v157 > 0xFFFFFFFFFFFFFFFBLL || v157 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_168;
        *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v157);
        goto LABEL_394;
      case 0x19u:
        *(_QWORD *)((char *)this + 164) |= 0x200000uLL;
        v158 = *((_QWORD *)a2 + 1);
        if (v158 > 0xFFFFFFFFFFFFFFFBLL || v158 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_168;
        *((_DWORD *)this + 28) = *(_DWORD *)(*(_QWORD *)a2 + v158);
        goto LABEL_394;
      case 0x1Au:
        *(_QWORD *)((char *)this + 164) |= 0x200uLL;
        v159 = *((_QWORD *)a2 + 1);
        if (v159 <= 0xFFFFFFFFFFFFFFFBLL && v159 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v159);
LABEL_394:
          v22 = *((_QWORD *)a2 + 1) + 4;
LABEL_395:
          *((_QWORD *)a2 + 1) = v22;
        }
        else
        {
LABEL_168:
          *((_BYTE *)a2 + 24) = 1;
        }
        goto LABEL_20;
      case 0x1Bu:
        *(_QWORD *)((char *)this + 164) |= 0x20000uLL;
        v160 = *((_QWORD *)a2 + 1);
        v161 = *((_QWORD *)a2 + 2);
        v162 = *(_QWORD *)a2;
        if (v160 <= 0xFFFFFFFFFFFFFFF5 && v160 + 10 <= v161)
        {
          v163 = 0;
          v164 = 0;
          v165 = 0;
          do
          {
            v166 = v160 + 1;
            *((_QWORD *)a2 + 1) = v160 + 1;
            v167 = *(_BYTE *)(v162 + v160);
            v165 |= (unint64_t)(v167 & 0x7F) << v163;
            if ((v167 & 0x80) == 0)
              goto LABEL_463;
            v163 += 7;
            v160 = v166;
            v14 = v164++ > 8;
          }
          while (!v14);
LABEL_343:
          LODWORD(v165) = 0;
          goto LABEL_463;
        }
        v288 = 0;
        v289 = 0;
        v165 = 0;
        if (v161 <= v160)
          v161 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v161 == v160)
          {
            LODWORD(v165) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v290 = v160 + 1;
            v291 = *(_BYTE *)(v162 + v160);
            *((_QWORD *)a2 + 1) = v290;
            v165 |= (unint64_t)(v291 & 0x7F) << v288;
            if (v291 < 0)
            {
              v288 += 7;
              v160 = v290;
              v14 = v289++ > 8;
              if (v14)
                goto LABEL_343;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v165) = 0;
          }
          break;
        }
LABEL_463:
        *((_DWORD *)this + 24) = v165;
        goto LABEL_20;
      case 0x1Cu:
        *(_QWORD *)((char *)this + 164) |= 0x40000uLL;
        v168 = *((_QWORD *)a2 + 1);
        v169 = *((_QWORD *)a2 + 2);
        v170 = *(_QWORD *)a2;
        if (v168 <= 0xFFFFFFFFFFFFFFF5 && v168 + 10 <= v169)
        {
          v171 = 0;
          v172 = 0;
          v173 = 0;
          do
          {
            v174 = v168 + 1;
            *((_QWORD *)a2 + 1) = v168 + 1;
            v175 = *(_BYTE *)(v170 + v168);
            v173 |= (unint64_t)(v175 & 0x7F) << v171;
            if ((v175 & 0x80) == 0)
              goto LABEL_467;
            v171 += 7;
            v168 = v174;
            v14 = v172++ > 8;
          }
          while (!v14);
LABEL_350:
          LODWORD(v173) = 0;
          goto LABEL_467;
        }
        v292 = 0;
        v293 = 0;
        v173 = 0;
        if (v169 <= v168)
          v169 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v169 == v168)
          {
            LODWORD(v173) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v294 = v168 + 1;
            v295 = *(_BYTE *)(v170 + v168);
            *((_QWORD *)a2 + 1) = v294;
            v173 |= (unint64_t)(v295 & 0x7F) << v292;
            if (v295 < 0)
            {
              v292 += 7;
              v168 = v294;
              v14 = v293++ > 8;
              if (v14)
                goto LABEL_350;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v173) = 0;
          }
          break;
        }
LABEL_467:
        *((_DWORD *)this + 25) = v173;
        goto LABEL_20;
      case 0x1Du:
        *(_QWORD *)((char *)this + 164) |= 0x10000uLL;
        v176 = *((_QWORD *)a2 + 1);
        v177 = *((_QWORD *)a2 + 2);
        v178 = *(_QWORD *)a2;
        if (v176 <= 0xFFFFFFFFFFFFFFF5 && v176 + 10 <= v177)
        {
          v179 = 0;
          v180 = 0;
          v181 = 0;
          do
          {
            v182 = v176 + 1;
            *((_QWORD *)a2 + 1) = v176 + 1;
            v183 = *(_BYTE *)(v178 + v176);
            v181 |= (unint64_t)(v183 & 0x7F) << v179;
            if ((v183 & 0x80) == 0)
              goto LABEL_471;
            v179 += 7;
            v176 = v182;
            v14 = v180++ > 8;
          }
          while (!v14);
LABEL_357:
          LODWORD(v181) = 0;
          goto LABEL_471;
        }
        v296 = 0;
        v297 = 0;
        v181 = 0;
        if (v177 <= v176)
          v177 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v177 == v176)
          {
            LODWORD(v181) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v298 = v176 + 1;
            v299 = *(_BYTE *)(v178 + v176);
            *((_QWORD *)a2 + 1) = v298;
            v181 |= (unint64_t)(v299 & 0x7F) << v296;
            if (v299 < 0)
            {
              v296 += 7;
              v176 = v298;
              v14 = v297++ > 8;
              if (v14)
                goto LABEL_357;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v181) = 0;
          }
          break;
        }
LABEL_471:
        *((_DWORD *)this + 23) = v181;
        goto LABEL_20;
      case 0x1Eu:
        *(_QWORD *)((char *)this + 164) |= 8uLL;
        v184 = *((_QWORD *)a2 + 1);
        v185 = *((_QWORD *)a2 + 2);
        v186 = *(_QWORD *)a2;
        if (v184 <= 0xFFFFFFFFFFFFFFF5 && v184 + 10 <= v185)
        {
          v187 = 0;
          v188 = 0;
          v189 = 0;
          do
          {
            v190 = v184 + 1;
            *((_QWORD *)a2 + 1) = v184 + 1;
            v191 = *(_BYTE *)(v186 + v184);
            v189 |= (unint64_t)(v191 & 0x7F) << v187;
            if ((v191 & 0x80) == 0)
              goto LABEL_475;
            v187 += 7;
            v184 = v190;
            v14 = v188++ > 8;
          }
          while (!v14);
LABEL_364:
          v189 = 0;
          goto LABEL_475;
        }
        v300 = 0;
        v301 = 0;
        v189 = 0;
        if (v185 <= v184)
          v185 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v185 == v184)
          {
            v189 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v302 = v184 + 1;
            v303 = *(_BYTE *)(v186 + v184);
            *((_QWORD *)a2 + 1) = v302;
            v189 |= (unint64_t)(v303 & 0x7F) << v300;
            if (v303 < 0)
            {
              v300 += 7;
              v184 = v302;
              v14 = v301++ > 8;
              if (v14)
                goto LABEL_364;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v189 = 0;
          }
          break;
        }
LABEL_475:
        *((_QWORD *)this + 4) = v189;
        goto LABEL_20;
      case 0x1Fu:
        *(_QWORD *)((char *)this + 164) |= 4uLL;
        v192 = *((_QWORD *)a2 + 1);
        v193 = *((_QWORD *)a2 + 2);
        v194 = *(_QWORD *)a2;
        if (v192 <= 0xFFFFFFFFFFFFFFF5 && v192 + 10 <= v193)
        {
          v195 = 0;
          v196 = 0;
          v197 = 0;
          do
          {
            v198 = v192 + 1;
            *((_QWORD *)a2 + 1) = v192 + 1;
            v199 = *(_BYTE *)(v194 + v192);
            v197 |= (unint64_t)(v199 & 0x7F) << v195;
            if ((v199 & 0x80) == 0)
              goto LABEL_479;
            v195 += 7;
            v192 = v198;
            v14 = v196++ > 8;
          }
          while (!v14);
LABEL_371:
          v197 = 0;
          goto LABEL_479;
        }
        v304 = 0;
        v305 = 0;
        v197 = 0;
        if (v193 <= v192)
          v193 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v193 == v192)
          {
            v197 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v306 = v192 + 1;
            v307 = *(_BYTE *)(v194 + v192);
            *((_QWORD *)a2 + 1) = v306;
            v197 |= (unint64_t)(v307 & 0x7F) << v304;
            if (v307 < 0)
            {
              v304 += 7;
              v192 = v306;
              v14 = v305++ > 8;
              if (v14)
                goto LABEL_371;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v197 = 0;
          }
          break;
        }
LABEL_479:
        *((_QWORD *)this + 3) = v197;
        goto LABEL_20;
      case 0x20u:
        *(_QWORD *)((char *)this + 164) |= 1uLL;
        v200 = *((_QWORD *)a2 + 1);
        v201 = *((_QWORD *)a2 + 2);
        v202 = *(_QWORD *)a2;
        if (v200 <= 0xFFFFFFFFFFFFFFF5 && v200 + 10 <= v201)
        {
          v203 = 0;
          v204 = 0;
          v205 = 0;
          do
          {
            v206 = v200 + 1;
            *((_QWORD *)a2 + 1) = v200 + 1;
            v207 = *(_BYTE *)(v202 + v200);
            v205 |= (unint64_t)(v207 & 0x7F) << v203;
            if ((v207 & 0x80) == 0)
              goto LABEL_483;
            v203 += 7;
            v200 = v206;
            v14 = v204++ > 8;
          }
          while (!v14);
LABEL_378:
          v205 = 0;
          goto LABEL_483;
        }
        v308 = 0;
        v309 = 0;
        v205 = 0;
        if (v201 <= v200)
          v201 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v201 == v200)
          {
            v205 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v310 = v200 + 1;
            v311 = *(_BYTE *)(v202 + v200);
            *((_QWORD *)a2 + 1) = v310;
            v205 |= (unint64_t)(v311 & 0x7F) << v308;
            if (v311 < 0)
            {
              v308 += 7;
              v200 = v310;
              v14 = v309++ > 8;
              if (v14)
                goto LABEL_378;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v205 = 0;
          }
          break;
        }
LABEL_483:
        *((_QWORD *)this + 1) = v205;
        goto LABEL_20;
      case 0x21u:
        *(_QWORD *)((char *)this + 164) |= 2uLL;
        v208 = *((_QWORD *)a2 + 1);
        v209 = *((_QWORD *)a2 + 2);
        v210 = *(_QWORD *)a2;
        if (v208 <= 0xFFFFFFFFFFFFFFF5 && v208 + 10 <= v209)
        {
          v211 = 0;
          v212 = 0;
          v213 = 0;
          do
          {
            v214 = v208 + 1;
            *((_QWORD *)a2 + 1) = v208 + 1;
            v215 = *(_BYTE *)(v210 + v208);
            v213 |= (unint64_t)(v215 & 0x7F) << v211;
            if ((v215 & 0x80) == 0)
              goto LABEL_487;
            v211 += 7;
            v208 = v214;
            v14 = v212++ > 8;
          }
          while (!v14);
LABEL_385:
          v213 = 0;
          goto LABEL_487;
        }
        v312 = 0;
        v313 = 0;
        v213 = 0;
        if (v209 <= v208)
          v209 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v209 == v208)
          {
            v213 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v314 = v208 + 1;
            v315 = *(_BYTE *)(v210 + v208);
            *((_QWORD *)a2 + 1) = v314;
            v213 |= (unint64_t)(v315 & 0x7F) << v312;
            if (v315 < 0)
            {
              v312 += 7;
              v208 = v314;
              v14 = v313++ > 8;
              if (v14)
                goto LABEL_385;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v213 = 0;
          }
          break;
        }
LABEL_487:
        *((_QWORD *)this + 2) = v213;
        goto LABEL_20;
      case 0x22u:
        *(_QWORD *)((char *)this + 164) |= 0x800uLL;
        v216 = *((_QWORD *)a2 + 1);
        v217 = *((_QWORD *)a2 + 2);
        v218 = *(_QWORD *)a2;
        if (v216 <= 0xFFFFFFFFFFFFFFF5 && v216 + 10 <= v217)
        {
          v219 = 0;
          v220 = 0;
          v221 = 0;
          do
          {
            v222 = v216 + 1;
            *((_QWORD *)a2 + 1) = v216 + 1;
            v223 = *(_BYTE *)(v218 + v216);
            v221 |= (unint64_t)(v223 & 0x7F) << v219;
            if ((v223 & 0x80) == 0)
              goto LABEL_491;
            v219 += 7;
            v216 = v222;
            v14 = v220++ > 8;
          }
          while (!v14);
LABEL_392:
          LODWORD(v221) = 0;
          goto LABEL_491;
        }
        v316 = 0;
        v317 = 0;
        v221 = 0;
        if (v217 <= v216)
          v217 = *((_QWORD *)a2 + 1);
        break;
      default:
        goto LABEL_19;
    }
    while (1)
    {
      if (v217 == v216)
      {
        LODWORD(v221) = 0;
        *((_BYTE *)a2 + 24) = 1;
        goto LABEL_491;
      }
      v318 = v216 + 1;
      v319 = *(_BYTE *)(v218 + v216);
      *((_QWORD *)a2 + 1) = v318;
      v221 |= (unint64_t)(v319 & 0x7F) << v316;
      if ((v319 & 0x80) == 0)
        break;
      v316 += 7;
      v216 = v318;
      v14 = v317++ > 8;
      if (v14)
        goto LABEL_392;
    }
    if (*((_BYTE *)a2 + 24))
      LODWORD(v221) = 0;
LABEL_491:
    *((_DWORD *)this + 18) = v221;
LABEL_20:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::DopplerRawDataInput::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = this;
  v4 = *(_QWORD *)(this + 164);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 40));
    v4 = *(_QWORD *)(v3 + 164);
    if ((v4 & 0x80000) == 0)
    {
LABEL_3:
      if ((v4 & 0x20000000) == 0)
        goto LABEL_4;
      goto LABEL_38;
    }
  }
  else if ((v4 & 0x80000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 104));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 144));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_6;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(float *)(v3 + 148));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x100000000) == 0)
      goto LABEL_8;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_8:
    if ((v4 & 0x2000) == 0)
      goto LABEL_9;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 156));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x2000) == 0)
  {
LABEL_9:
    if ((v4 & 0x1000) == 0)
      goto LABEL_10;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x1000) == 0)
  {
LABEL_10:
    if ((v4 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x80) == 0)
  {
LABEL_11:
    if ((v4 & 0x200000000) == 0)
      goto LABEL_12;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_13;
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_13:
    if ((v4 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x400) == 0)
  {
LABEL_14:
    if ((v4 & 0x4000) == 0)
      goto LABEL_15;
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x4000) == 0)
  {
LABEL_15:
    if ((v4 & 0x800000) == 0)
      goto LABEL_16;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x800000) == 0)
  {
LABEL_16:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_17;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_18;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_19;
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x400000) == 0)
      goto LABEL_20;
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x400000) == 0)
  {
LABEL_20:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_21;
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_21:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000) == 0)
      goto LABEL_23;
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x8000) == 0)
  {
LABEL_23:
    if ((v4 & 0x100000) == 0)
      goto LABEL_24;
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x100000) == 0)
  {
LABEL_24:
    if ((v4 & 0x100) == 0)
      goto LABEL_25;
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x100) == 0)
  {
LABEL_25:
    if ((v4 & 0x200000) == 0)
      goto LABEL_26;
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(float *)(v3 + 60));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x200000) == 0)
  {
LABEL_26:
    if ((v4 & 0x200) == 0)
      goto LABEL_27;
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::write(a2, *(float *)(v3 + 112));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x200) == 0)
  {
LABEL_27:
    if ((v4 & 0x20000) == 0)
      goto LABEL_28;
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::write(a2, *(float *)(v3 + 64));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x20000) == 0)
  {
LABEL_28:
    if ((v4 & 0x40000) == 0)
      goto LABEL_29;
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x40000) == 0)
  {
LABEL_29:
    if ((v4 & 0x10000) == 0)
      goto LABEL_30;
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x10000) == 0)
  {
LABEL_30:
    if ((v4 & 8) == 0)
      goto LABEL_31;
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 8) == 0)
  {
LABEL_31:
    if ((v4 & 4) == 0)
      goto LABEL_32;
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 4) == 0)
  {
LABEL_32:
    if ((v4 & 1) == 0)
      goto LABEL_33;
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 1) == 0)
  {
LABEL_33:
    if ((v4 & 2) == 0)
      goto LABEL_34;
    goto LABEL_68;
  }
LABEL_67:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 2) == 0)
  {
LABEL_34:
    if ((v4 & 0x800) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_68:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_QWORD *)(v3 + 164) & 0x800) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

BOOL CMMsl::DopplerRawDataInput::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 v4;

  v2 = *(_QWORD *)(a1 + 164);
  v3 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(float *)(a1 + 144) != *(float *)(a2 + 144))
      return 0;
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(float *)(a1 + 148) != *(float *)(a2 + 148))
      return 0;
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000) != 0)
  {
    if ((v3 & 0x100000000) == 0 || *(float *)(a1 + 156) != *(float *)(a2 + 156))
      return 0;
  }
  else if ((v3 & 0x100000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000) != 0)
  {
    if ((v3 & 0x200000000) == 0 || *(_DWORD *)(a1 + 160) != *(_DWORD *)(a2 + 160))
      return 0;
  }
  else if ((v3 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(_DWORD *)(a1 + 140) != *(_DWORD *)(a2 + 140))
      return 0;
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(_DWORD *)(a1 + 84) != *(_DWORD *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(_DWORD *)(a1 + 120) != *(_DWORD *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(_DWORD *)(a1 + 128) != *(_DWORD *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(_DWORD *)(a1 + 136) != *(_DWORD *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(_DWORD *)(a1 + 132) != *(_DWORD *)(a2 + 132))
      return 0;
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(_DWORD *)(a1 + 116) != *(_DWORD *)(a2 + 116))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(_DWORD *)(a1 + 124) != *(_DWORD *)(a2 + 124))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000) != 0)
  {
    if ((v3 & 0x80000000) == 0 || *(_DWORD *)(a1 + 152) != *(_DWORD *)(a2 + 152))
      return 0;
  }
  else if ((v3 & 0x80000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(_DWORD *)(a1 + 108) != *(_DWORD *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(_DWORD *)(a1 + 96) != *(_DWORD *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(_DWORD *)(a1 + 100) != *(_DWORD *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(_DWORD *)(a1 + 92) != *(_DWORD *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  v4 = (*(_QWORD *)(a2 + 164) & 0x800) == 0;
  if ((v2 & 0x800) != 0)
    return (v3 & 0x800) != 0 && *(_DWORD *)(a1 + 72) == *(_DWORD *)(a2 + 72);
  return v4;
}

uint64_t CMMsl::DopplerRawDataInput::hash_value(CMMsl::DopplerRawDataInput *this)
{
  uint64_t v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v1 = *(_QWORD *)((char *)this + 164);
  if ((v1 & 0x10) == 0)
  {
    v2 = 0;
    if ((v1 & 0x80000) != 0)
      goto LABEL_3;
LABEL_61:
    v51 = 0;
    if ((v1 & 0x20000000) != 0)
      goto LABEL_6;
LABEL_62:
    v50 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_9;
LABEL_63:
    v49 = 0;
    if ((v1 & 0x40000000) != 0)
      goto LABEL_12;
LABEL_64:
    v48 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_15;
LABEL_65:
    v47 = 0;
    if ((v1 & 0x100000000) != 0)
      goto LABEL_18;
LABEL_66:
    v46 = 0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_21;
    goto LABEL_67;
  }
  if (*((double *)this + 5) == 0.0)
    v2 = 0;
  else
    v2 = *((_QWORD *)this + 5);
  if ((v1 & 0x80000) == 0)
    goto LABEL_61;
LABEL_3:
  v3 = *((float *)this + 26);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  v51 = v4;
  if ((v1 & 0x20000000) == 0)
    goto LABEL_62;
LABEL_6:
  v5 = *((float *)this + 36);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  v50 = v6;
  if ((v1 & 0x20) == 0)
    goto LABEL_63;
LABEL_9:
  v7 = *((float *)this + 12);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  v49 = v8;
  if ((v1 & 0x40000000) == 0)
    goto LABEL_64;
LABEL_12:
  v9 = *((float *)this + 37);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  v48 = v10;
  if ((v1 & 0x40) == 0)
    goto LABEL_65;
LABEL_15:
  v11 = *((float *)this + 13);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  v47 = v12;
  if ((v1 & 0x100000000) == 0)
    goto LABEL_66;
LABEL_18:
  v13 = *((float *)this + 39);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  v46 = v14;
  if ((v1 & 0x2000) != 0)
  {
LABEL_21:
    v45 = *((unsigned int *)this + 20);
    if ((v1 & 0x1000) != 0)
      goto LABEL_22;
    goto LABEL_68;
  }
LABEL_67:
  v45 = 0;
  if ((v1 & 0x1000) != 0)
  {
LABEL_22:
    v15 = *((unsigned int *)this + 19);
    if ((v1 & 0x80) != 0)
      goto LABEL_23;
    goto LABEL_69;
  }
LABEL_68:
  v15 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_23:
    v16 = *((unsigned int *)this + 14);
    if ((v1 & 0x200000000) != 0)
      goto LABEL_24;
    goto LABEL_70;
  }
LABEL_69:
  v16 = 0;
  if ((v1 & 0x200000000) != 0)
  {
LABEL_24:
    v17 = *((unsigned int *)this + 40);
    if ((v1 & 0x10000000) != 0)
      goto LABEL_25;
    goto LABEL_71;
  }
LABEL_70:
  v17 = 0;
  if ((v1 & 0x10000000) != 0)
  {
LABEL_25:
    v18 = *((unsigned int *)this + 35);
    if ((v1 & 0x400) != 0)
      goto LABEL_26;
    goto LABEL_72;
  }
LABEL_71:
  v18 = 0;
  if ((v1 & 0x400) != 0)
  {
LABEL_26:
    v19 = *((unsigned int *)this + 17);
    if ((v1 & 0x4000) != 0)
      goto LABEL_27;
    goto LABEL_73;
  }
LABEL_72:
  v19 = 0;
  if ((v1 & 0x4000) != 0)
  {
LABEL_27:
    v20 = *((unsigned int *)this + 21);
    if ((v1 & 0x800000) != 0)
      goto LABEL_28;
    goto LABEL_74;
  }
LABEL_73:
  v20 = 0;
  if ((v1 & 0x800000) != 0)
  {
LABEL_28:
    v21 = *((unsigned int *)this + 30);
    if ((v1 & 0x2000000) != 0)
      goto LABEL_29;
    goto LABEL_75;
  }
LABEL_74:
  v21 = 0;
  if ((v1 & 0x2000000) != 0)
  {
LABEL_29:
    v22 = *((unsigned int *)this + 32);
    if ((v1 & 0x8000000) != 0)
      goto LABEL_30;
    goto LABEL_76;
  }
LABEL_75:
  v22 = 0;
  if ((v1 & 0x8000000) != 0)
  {
LABEL_30:
    v23 = *((int *)this + 34);
    if ((v1 & 0x4000000) != 0)
      goto LABEL_31;
    goto LABEL_77;
  }
LABEL_76:
  v23 = 0;
  if ((v1 & 0x4000000) != 0)
  {
LABEL_31:
    v24 = *((int *)this + 33);
    if ((v1 & 0x400000) != 0)
      goto LABEL_32;
    goto LABEL_78;
  }
LABEL_77:
  v24 = 0;
  if ((v1 & 0x400000) != 0)
  {
LABEL_32:
    v25 = *((unsigned int *)this + 29);
    if ((v1 & 0x1000000) != 0)
      goto LABEL_33;
    goto LABEL_79;
  }
LABEL_78:
  v25 = 0;
  if ((v1 & 0x1000000) != 0)
  {
LABEL_33:
    v26 = *((unsigned int *)this + 31);
    if ((v1 & 0x80000000) != 0)
      goto LABEL_34;
    goto LABEL_80;
  }
LABEL_79:
  v26 = 0;
  if ((v1 & 0x80000000) != 0)
  {
LABEL_34:
    v27 = *((unsigned int *)this + 38);
    if ((v1 & 0x8000) != 0)
      goto LABEL_35;
    goto LABEL_81;
  }
LABEL_80:
  v27 = 0;
  if ((v1 & 0x8000) != 0)
  {
LABEL_35:
    v28 = *((unsigned int *)this + 22);
    if ((v1 & 0x100000) != 0)
      goto LABEL_36;
    goto LABEL_82;
  }
LABEL_81:
  v28 = 0;
  if ((v1 & 0x100000) != 0)
  {
LABEL_36:
    v29 = *((unsigned int *)this + 27);
    if ((v1 & 0x100) != 0)
      goto LABEL_37;
LABEL_83:
    v31 = 0;
    if ((v1 & 0x200000) != 0)
      goto LABEL_41;
LABEL_84:
    v33 = 0;
    if ((v1 & 0x200) != 0)
      goto LABEL_45;
LABEL_85:
    v35 = 0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_49;
    goto LABEL_86;
  }
LABEL_82:
  v29 = 0;
  if ((v1 & 0x100) == 0)
    goto LABEL_83;
LABEL_37:
  v30 = *((float *)this + 15);
  if (v30 == 0.0)
    v31 = 0;
  else
    v31 = LODWORD(v30);
  if ((v1 & 0x200000) == 0)
    goto LABEL_84;
LABEL_41:
  v32 = *((float *)this + 28);
  if (v32 == 0.0)
    v33 = 0;
  else
    v33 = LODWORD(v32);
  if ((v1 & 0x200) == 0)
    goto LABEL_85;
LABEL_45:
  v34 = *((float *)this + 16);
  if (v34 == 0.0)
    v35 = 0;
  else
    v35 = LODWORD(v34);
  if ((v1 & 0x20000) != 0)
  {
LABEL_49:
    v36 = *((unsigned int *)this + 24);
    if ((v1 & 0x40000) != 0)
      goto LABEL_50;
    goto LABEL_87;
  }
LABEL_86:
  v36 = 0;
  if ((v1 & 0x40000) != 0)
  {
LABEL_50:
    v37 = *((unsigned int *)this + 25);
    if ((v1 & 0x10000) != 0)
      goto LABEL_51;
    goto LABEL_88;
  }
LABEL_87:
  v37 = 0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_51:
    v38 = *((unsigned int *)this + 23);
    if ((v1 & 8) != 0)
      goto LABEL_52;
    goto LABEL_89;
  }
LABEL_88:
  v38 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_52:
    v39 = *((_QWORD *)this + 4);
    if ((v1 & 4) != 0)
      goto LABEL_53;
    goto LABEL_90;
  }
LABEL_89:
  v39 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_53:
    v40 = *((_QWORD *)this + 3);
    if ((v1 & 1) != 0)
      goto LABEL_54;
    goto LABEL_91;
  }
LABEL_90:
  v40 = 0;
  if ((v1 & 1) != 0)
  {
LABEL_54:
    v41 = *((_QWORD *)this + 1);
    if ((v1 & 2) != 0)
      goto LABEL_55;
LABEL_92:
    v42 = 0;
    if ((v1 & 0x800) != 0)
      goto LABEL_56;
LABEL_93:
    v43 = 0;
    return v51 ^ v2 ^ v50 ^ v49 ^ v48 ^ v47 ^ v46 ^ v45 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v31 ^ v33 ^ v35 ^ v36 ^ v37 ^ v38 ^ v39 ^ v40 ^ v41 ^ v42 ^ v43;
  }
LABEL_91:
  v41 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_92;
LABEL_55:
  v42 = *((_QWORD *)this + 2);
  if ((v1 & 0x800) == 0)
    goto LABEL_93;
LABEL_56:
  v43 = *((unsigned int *)this + 18);
  return v51 ^ v2 ^ v50 ^ v49 ^ v48 ^ v47 ^ v46 ^ v45 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v31 ^ v33 ^ v35 ^ v36 ^ v37 ^ v38 ^ v39 ^ v40 ^ v41 ^ v42 ^ v43;
}

uint64_t CMMsl::DopplerSample::DopplerSample(uint64_t this)
{
  *(_QWORD *)this = &off_25135D360;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135D360;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::DopplerSample::~DopplerSample(CMMsl::DopplerSample *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::DopplerSample::DopplerSample(uint64_t this, const CMMsl::DopplerSample *a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)this = &off_25135D360;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)this = &off_25135D360;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::DopplerSample::operator=(uint64_t a1, uint64_t a2, double a3)
{
  int v3;
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  uint64_t v12;

  if (a1 != a2)
  {
    v11[0] = &off_25135D360;
    HIDWORD(v12) = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      BYTE4(v12) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        v3 = *(_DWORD *)(a2 + 16);
        BYTE4(v12) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_6;
    }
    v7 = HIDWORD(v12);
    v8 = *(_QWORD *)(a1 + 8);
    v9 = *(_QWORD *)(a1 + 16);
    *(double *)(a1 + 8) = a3;
    *(_DWORD *)(a1 + 16) = v3;
    *(_DWORD *)(a1 + 20) = v7;
    v11[1] = v8;
    v12 = v9;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::DopplerSample *a2, CMMsl::DopplerSample *a3)
{
  int v3;
  double result;
  int v5;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  return result;
}

double CMMsl::DopplerSample::DopplerSample(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135D360;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135D360;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::DopplerSample::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  if (a1 != a2)
  {
    v8[0] = &off_25135D360;
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    v8[1] = v5;
    v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::DopplerSample::formatText(CMMsl::DopplerSample *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "proximityState");
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::DopplerSample::readFrom(CMMsl::DopplerSample *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_26;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v26 = 0;
          v27 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_47;
            }
            v28 = v20++;
            v29 = *(_BYTE *)(v21 + v28);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0)
              break;
            v26 += 7;
            v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
LABEL_46:
          v2 = v28 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)a2 + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 4) = v24;
      }
      else if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_26:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_26;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::DopplerSample::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

BOOL CMMsl::DopplerSample::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v2;
}

uint64_t CMMsl::DopplerSample::hash_value(CMMsl::DopplerSample *this)
{
  double v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v2 = 0;
    return v2 ^ *(_QWORD *)&v1;
  }
  v1 = 0.0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((unsigned int *)this + 4);
  return v2 ^ *(_QWORD *)&v1;
}

uint64_t CMMsl::DoubleTap::DoubleTap(uint64_t this)
{
  *(_QWORD *)this = &off_25135D398;
  *(_DWORD *)(this + 28) = -1;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135D398;
  *(_DWORD *)(this + 28) = -1;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

void CMMsl::DoubleTap::~DoubleTap(CMMsl::DoubleTap *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::DoubleTap::DoubleTap(uint64_t this, const CMMsl::DoubleTap *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;

  *(_QWORD *)this = &off_25135D398;
  *(_DWORD *)(this + 28) = -1;
  *(_DWORD *)(this + 48) = 0;
  v2 = *((_WORD *)a2 + 24);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_WORD *)(this + 48) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_WORD *)a2 + 24);
    if ((v2 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 10);
    v3 |= 0x80u;
    *(_WORD *)(this + 48) = v3;
    *(_DWORD *)(this + 40) = v5;
    v2 = *((_WORD *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    v6 = *((_DWORD *)a2 + 7);
    v3 |= 0x10u;
    *(_WORD *)(this + 48) = v3;
    *(_DWORD *)(this + 28) = v6;
    v2 = *((_WORD *)a2 + 24);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0)
        goto LABEL_9;
      goto LABEL_16;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *(_WORD *)(this + 48) = v3;
  *(_DWORD *)(this + 16) = v7;
  v2 = *((_WORD *)a2 + 24);
  if ((v2 & 4) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_17;
  }
LABEL_16:
  v8 = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *(_WORD *)(this + 48) = v3;
  *(_DWORD *)(this + 20) = v8;
  v2 = *((_WORD *)a2 + 24);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_18;
  }
LABEL_17:
  v9 = *((_DWORD *)a2 + 8);
  v3 |= 0x20u;
  *(_WORD *)(this + 48) = v3;
  *(_DWORD *)(this + 32) = v9;
  v2 = *((_WORD *)a2 + 24);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_19;
  }
LABEL_18:
  v10 = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *(_WORD *)(this + 48) = v3;
  *(_DWORD *)(this + 36) = v10;
  v2 = *((_WORD *)a2 + 24);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0)
      return this;
LABEL_20:
    v12 = *((_DWORD *)a2 + 6);
    *(_WORD *)(this + 48) = v3 | 8;
    *(_DWORD *)(this + 24) = v12;
    return this;
  }
LABEL_19:
  v11 = *((_DWORD *)a2 + 11);
  v3 |= 0x100u;
  *(_WORD *)(this + 48) = v3;
  *(_DWORD *)(this + 44) = v11;
  if ((*((_WORD *)a2 + 24) & 8) != 0)
    goto LABEL_20;
  return this;
}

uint64_t CMMsl::DoubleTap::operator=(uint64_t a1, const CMMsl::DoubleTap *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;

  if ((const CMMsl::DoubleTap *)a1 != a2)
  {
    CMMsl::DoubleTap::DoubleTap((uint64_t)v13, a2);
    v3 = v15;
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v14;
    *(_QWORD *)(a1 + 16) = v3;
    v14 = v4;
    v15 = v5;
    v6 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v19;
    v19 = v6;
    v7 = v17;
    v9 = *(_QWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 24) = v16;
    *(_QWORD *)(a1 + 32) = v7;
    v10 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v20;
    v20 = v10;
    v11 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v18;
    v18 = v11;
    v16 = v9;
    v17 = v8;
    PB::Base::~Base((PB::Base *)v13);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::DoubleTap *a2, CMMsl::DoubleTap *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  double result;
  uint64_t v7;

  v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v5;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  result = *((double *)a2 + 3);
  v7 = *((_QWORD *)this + 3);
  *((double *)this + 3) = result;
  *((_QWORD *)a2 + 3) = v7;
  return result;
}

double CMMsl::DoubleTap::DoubleTap(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135D398;
  *(_DWORD *)(a1 + 28) = -1;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  return result;
}

uint64_t CMMsl::DoubleTap::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[5];
  int v16;
  int v17;
  int v18;

  if (a1 != a2)
  {
    v15[0] = &off_25135D398;
    v3 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a2 + 48) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_DWORD *)(a2 + 40);
    v6 = *(_DWORD *)(a2 + 44);
    v18 = *(_DWORD *)(a1 + 48);
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v4;
    v16 = *(_DWORD *)(a1 + 40);
    v9 = *(_QWORD *)(a2 + 16);
    v15[1] = v7;
    v15[2] = v8;
    v10 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 16) = v9;
    v12 = *(_QWORD *)(a1 + 24);
    v11 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v10;
    LODWORD(v10) = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v6;
    v17 = v10;
    v13 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 48) = v3;
    *(_DWORD *)(a1 + 40) = v5;
    *(_QWORD *)(a1 + 24) = v13;
    v15[3] = v12;
    v15[4] = v11;
    PB::Base::~Base((PB::Base *)v15);
  }
  return a1;
}

uint64_t CMMsl::DoubleTap::formatText(CMMsl::DoubleTap *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 24);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "currentMeanAngleY", *((float *)this + 4));
    v5 = *((_WORD *)this + 24);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "deltaMeanAngleY", *((float *)this + 5));
  v5 = *((_WORD *)this + 24);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "doubleTapCounter");
  v5 = *((_WORD *)this + 24);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "doubleTapStatus");
  v5 = *((_WORD *)this + 24);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "entropyConcha", *((float *)this + 8));
  v5 = *((_WORD *)this + 24);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "entropyTragus", *((float *)this + 9));
  v5 = *((_WORD *)this + 24);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
LABEL_19:
    PB::TextFormatter::format(a2, "tapInterval", *((float *)this + 11));
    if ((*((_WORD *)this + 24) & 1) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_10;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "location");
  v5 = *((_WORD *)this + 24);
  if ((v5 & 0x100) != 0)
    goto LABEL_19;
LABEL_9:
  if ((v5 & 1) != 0)
LABEL_10:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::DoubleTap::readFrom(CMMsl::DoubleTap *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  unint64_t v40;
  char v41;
  char v42;
  unsigned int v43;
  unint64_t v44;
  char v45;
  char v46;
  unsigned int v47;
  unint64_t v48;
  char v49;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_101;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 24) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_54;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        v2 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_85;
      case 2u:
        *((_WORD *)this + 24) |= 0x80u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v38 = 0;
          v39 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_90;
            }
            v40 = v20++;
            v41 = *(_BYTE *)(v21 + v40);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0)
              break;
            v38 += 7;
            v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_89:
              v2 = v40 + 1;
              goto LABEL_90;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
          goto LABEL_89;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_90;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_90:
        *((_DWORD *)this + 10) = v24;
        break;
      case 3u:
        *((_WORD *)this + 24) |= 0x10u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v42 = 0;
          v43 = 0;
          v30 = 0;
          if (v2 <= v26)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_95;
            }
            v44 = v26++;
            v45 = *(_BYTE *)(v27 + v44);
            *((_QWORD *)a2 + 1) = v26;
            v30 |= (unint64_t)(v45 & 0x7F) << v42;
            if ((v45 & 0x80) == 0)
              break;
            v42 += 7;
            v14 = v43++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_94:
              v2 = v44 + 1;
              goto LABEL_95;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v30) = 0;
          goto LABEL_94;
        }
        v28 = 0;
        v29 = 0;
        v30 = 0;
        do
        {
          v2 = v26 + 1;
          *((_QWORD *)a2 + 1) = v26 + 1;
          v31 = *(_BYTE *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0)
            goto LABEL_95;
          v28 += 7;
          v26 = v2;
          v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_95:
        *((_DWORD *)this + 7) = v30;
        break;
      case 4u:
        *((_WORD *)this + 24) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_54;
        *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_84;
      case 5u:
        *((_WORD *)this + 24) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_54;
        *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_84;
      case 6u:
        *((_WORD *)this + 24) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_54;
        *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_84;
      case 7u:
        *((_WORD *)this + 24) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_54;
        *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_84;
      case 8u:
        *((_WORD *)this + 24) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_84:
          v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_85:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_54:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 9u:
        *((_WORD *)this + 24) |= 8u;
        v32 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v33 = *(_QWORD *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
        {
          v46 = 0;
          v47 = 0;
          v36 = 0;
          if (v2 <= v32)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v32)
            {
              LODWORD(v36) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_100;
            }
            v48 = v32++;
            v49 = *(_BYTE *)(v33 + v48);
            *((_QWORD *)a2 + 1) = v32;
            v36 |= (unint64_t)(v49 & 0x7F) << v46;
            if ((v49 & 0x80) == 0)
              break;
            v46 += 7;
            v14 = v47++ > 8;
            if (v14)
            {
              LODWORD(v36) = 0;
LABEL_99:
              v2 = v48 + 1;
              goto LABEL_100;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v36) = 0;
          goto LABEL_99;
        }
        v34 = 0;
        v35 = 0;
        v36 = 0;
        do
        {
          v2 = v32 + 1;
          *((_QWORD *)a2 + 1) = v32 + 1;
          v37 = *(_BYTE *)(v33 + v32);
          v36 |= (unint64_t)(v37 & 0x7F) << v34;
          if ((v37 & 0x80) == 0)
            goto LABEL_100;
          v34 += 7;
          v32 = v2;
          v14 = v35++ > 8;
        }
        while (!v14);
        LODWORD(v36) = 0;
LABEL_100:
        *((_DWORD *)this + 6) = v36;
        break;
      default:
        goto LABEL_19;
    }
LABEL_101:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::DoubleTap::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 48);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_WORD *)(v3 + 48);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_18:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  if ((*(_WORD *)(v3 + 48) & 8) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

BOOL CMMsl::DoubleTap::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 48);
  v3 = *(_WORD *)(a2 + 48);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 48) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 48) & 0x100) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 48) & 0x100) != 0)
  {
    return 0;
  }
  v4 = (v3 & 8) == 0;
  if ((v2 & 8) != 0)
    return (v3 & 8) != 0 && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24);
  return v4;
}

uint64_t CMMsl::DoubleTap::hash_value(CMMsl::DoubleTap *this)
{
  __int16 v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *((_WORD *)this + 24);
  if ((v1 & 1) != 0)
  {
    v2 = *((double *)this + 1);
    if (v2 == 0.0)
      v2 = 0.0;
    if ((v1 & 0x80) != 0)
    {
LABEL_3:
      v3 = *((unsigned int *)this + 10);
      if ((v1 & 0x10) != 0)
        goto LABEL_4;
      goto LABEL_25;
    }
  }
  else
  {
    v2 = 0.0;
    if ((v1 & 0x80) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_4:
    v4 = *((int *)this + 7);
    if ((v1 & 2) != 0)
      goto LABEL_5;
LABEL_26:
    v6 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_8;
LABEL_27:
    v8 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_11;
LABEL_28:
    v10 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_14;
LABEL_29:
    v12 = 0;
    if ((*((_WORD *)this + 24) & 0x100) != 0)
      goto LABEL_17;
    goto LABEL_30;
  }
LABEL_25:
  v4 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_26;
LABEL_5:
  v5 = *((float *)this + 4);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((v1 & 4) == 0)
    goto LABEL_27;
LABEL_8:
  v7 = *((float *)this + 5);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_28;
LABEL_11:
  v9 = *((float *)this + 8);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_29;
LABEL_14:
  v11 = *((float *)this + 9);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((*((_WORD *)this + 24) & 0x100) != 0)
  {
LABEL_17:
    v13 = *((float *)this + 11);
    v14 = LODWORD(v13);
    if (v13 == 0.0)
      v14 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_20;
LABEL_31:
    v15 = 0;
    return v3 ^ *(_QWORD *)&v2 ^ v4 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v15;
  }
LABEL_30:
  v14 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_31;
LABEL_20:
  v15 = *((unsigned int *)this + 6);
  return v3 ^ *(_QWORD *)&v2 ^ v4 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v15;
}

uint64_t CMMsl::ElevationChange::ElevationChange(uint64_t this)
{
  *(_QWORD *)this = &off_25135D3D0;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135D3D0;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

void CMMsl::ElevationChange::~ElevationChange(CMMsl::ElevationChange *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::ElevationChange::ElevationChange(uint64_t this, const CMMsl::ElevationChange *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  char v14;

  *(_QWORD *)this = &off_25135D3D0;
  *(_DWORD *)(this + 60) = 0;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 2) != 0)
  {
    v4 = *((_QWORD *)a2 + 2);
    v3 = 2;
    *(_WORD *)(this + 60) = 2;
    *(_QWORD *)(this + 16) = v4;
    v2 = *((_WORD *)a2 + 30);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 1) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 1);
    v3 |= 1u;
    *(_WORD *)(this + 60) = v3;
    *(_QWORD *)(this + 8) = v5;
    v2 = *((_WORD *)a2 + 30);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    v6 = *((_DWORD *)a2 + 8);
    v3 |= 0x10u;
    *(_WORD *)(this + 60) = v3;
    *(_DWORD *)(this + 32) = v6;
    v2 = *((_WORD *)a2 + 30);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0)
        goto LABEL_9;
      goto LABEL_18;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 9);
  v3 |= 0x20u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 36) = v7;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  v8 = *((_DWORD *)a2 + 13);
  v3 |= 0x200u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 52) = v8;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 8) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  v9 = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 28) = v9;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_21;
  }
LABEL_20:
  v10 = *((_DWORD *)a2 + 10);
  v3 |= 0x40u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 40) = v10;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  v11 = *((_DWORD *)a2 + 12);
  v3 |= 0x100u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 48) = v11;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 4) == 0)
      goto LABEL_14;
    goto LABEL_23;
  }
LABEL_22:
  v12 = *((_DWORD *)a2 + 11);
  v3 |= 0x80u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 44) = v12;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 4) == 0)
  {
LABEL_14:
    if ((v2 & 0x400) == 0)
      return this;
LABEL_24:
    v14 = *((_BYTE *)a2 + 56);
    *(_WORD *)(this + 60) = v3 | 0x400;
    *(_BYTE *)(this + 56) = v14;
    return this;
  }
LABEL_23:
  v13 = *((_DWORD *)a2 + 6);
  v3 |= 4u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 24) = v13;
  if ((*((_WORD *)a2 + 30) & 0x400) != 0)
    goto LABEL_24;
  return this;
}

CMMsl *CMMsl::ElevationChange::operator=(CMMsl *a1, const CMMsl::ElevationChange *a2)
{
  CMMsl::ElevationChange *v3;
  _BYTE v5[64];

  if (a1 != a2)
  {
    CMMsl::ElevationChange::ElevationChange((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::ElevationChange *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::ElevationChange *a2, CMMsl::ElevationChange *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  float result;

  v3 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v6;
  v7 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v7;
  v8 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v8;
  v9 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v9;
  LODWORD(v5) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v5;
  v10 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v10;
  v11 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v11;
  result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  LOBYTE(v11) = *((_BYTE *)this + 56);
  *((_BYTE *)this + 56) = *((_BYTE *)a2 + 56);
  *((_BYTE *)a2 + 56) = v11;
  return result;
}

float CMMsl::ElevationChange::ElevationChange(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135D3D0;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return result;
}

CMMsl *CMMsl::ElevationChange::operator=(CMMsl *this, uint64_t a2, CMMsl::ElevationChange *a3)
{
  void (**v5)(CMMsl::ElevationChange *__hidden);
  __int128 v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  char v13;
  int v14;

  if (this != (CMMsl *)a2)
  {
    v5 = &off_25135D3D0;
    v14 = *(_DWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 60) = 0;
    v6 = *(_OWORD *)(a2 + 8);
    v9 = *(_DWORD *)(a2 + 36);
    v12 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 28);
    v10 = *(_DWORD *)(a2 + 40);
    v11 = *(_QWORD *)(a2 + 44);
    v7 = *(_DWORD *)(a2 + 24);
    v13 = *(_BYTE *)(a2 + 56);
    CMMsl::swap(this, (CMMsl::ElevationChange *)&v5, a3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return this;
}

uint64_t CMMsl::ElevationChange::formatText(CMMsl::ElevationChange *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 30);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "averageFilteredPressure", *((float *)this + 6));
    v5 = *((_WORD *)this + 30);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "deltaStepCount");
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "elevationAscended");
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x400) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "elevationDescended");
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x400) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "isWorkoutElevationFusion");
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "pressureAmplitude", *((float *)this + 10));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "pressureFailureState");
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "pressureQuality");
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 1) == 0)
      goto LABEL_11;
LABEL_23:
    PB::TextFormatter::format(a2, "startTime", *((double *)this + 1));
    if ((*((_WORD *)this + 30) & 2) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "source");
  v5 = *((_WORD *)this + 30);
  if ((v5 & 1) != 0)
    goto LABEL_23;
LABEL_11:
  if ((v5 & 2) != 0)
LABEL_12:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ElevationChange::readFrom(CMMsl::ElevationChange *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  int v57;
  BOOL v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  unint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  unint64_t v77;
  char v78;
  char v79;
  unsigned int v80;
  unint64_t v81;
  char v82;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_26;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_21;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_26:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 30) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_82;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_34;
      case 2u:
        *((_WORD *)this + 30) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_82;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_34:
        v2 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_131;
      case 3u:
        *((_WORD *)this + 30) |= 0x10u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v59 = 0;
          v60 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_136;
            }
            v61 = v21++;
            v62 = *(_BYTE *)(v22 + v61);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v62 & 0x7F) << v59;
            if ((v62 & 0x80) == 0)
              break;
            v59 += 7;
            v14 = v60++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
LABEL_135:
              v2 = v61 + 1;
              goto LABEL_136;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v25) = 0;
          goto LABEL_135;
        }
        v23 = 0;
        v24 = 0;
        v25 = 0;
        do
        {
          v2 = v21 + 1;
          *((_QWORD *)a2 + 1) = v21 + 1;
          v26 = *(_BYTE *)(v22 + v21);
          v25 |= (unint64_t)(v26 & 0x7F) << v23;
          if ((v26 & 0x80) == 0)
            goto LABEL_136;
          v23 += 7;
          v21 = v2;
          v14 = v24++ > 8;
        }
        while (!v14);
        LODWORD(v25) = 0;
LABEL_136:
        *((_DWORD *)this + 8) = v25;
        break;
      case 4u:
        *((_WORD *)this + 30) |= 0x20u;
        v27 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v28 = *(_QWORD *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v63 = 0;
          v64 = 0;
          v31 = 0;
          if (v2 <= v27)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_141;
            }
            v65 = v27++;
            v66 = *(_BYTE *)(v28 + v65);
            *((_QWORD *)a2 + 1) = v27;
            v31 |= (unint64_t)(v66 & 0x7F) << v63;
            if ((v66 & 0x80) == 0)
              break;
            v63 += 7;
            v14 = v64++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
LABEL_140:
              v2 = v65 + 1;
              goto LABEL_141;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v31) = 0;
          goto LABEL_140;
        }
        v29 = 0;
        v30 = 0;
        v31 = 0;
        do
        {
          v2 = v27 + 1;
          *((_QWORD *)a2 + 1) = v27 + 1;
          v32 = *(_BYTE *)(v28 + v27);
          v31 |= (unint64_t)(v32 & 0x7F) << v29;
          if ((v32 & 0x80) == 0)
            goto LABEL_141;
          v29 += 7;
          v27 = v2;
          v14 = v30++ > 8;
        }
        while (!v14);
        LODWORD(v31) = 0;
LABEL_141:
        *((_DWORD *)this + 9) = v31;
        break;
      case 5u:
        *((_WORD *)this + 30) |= 0x200u;
        v33 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v34 = *(_QWORD *)a2;
        if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
        {
          v67 = 0;
          v68 = 0;
          v37 = 0;
          if (v2 <= v33)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v33)
            {
              LODWORD(v37) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_146;
            }
            v69 = v33++;
            v70 = *(_BYTE *)(v34 + v69);
            *((_QWORD *)a2 + 1) = v33;
            v37 |= (unint64_t)(v70 & 0x7F) << v67;
            if ((v70 & 0x80) == 0)
              break;
            v67 += 7;
            v14 = v68++ > 8;
            if (v14)
            {
              LODWORD(v37) = 0;
LABEL_145:
              v2 = v69 + 1;
              goto LABEL_146;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v37) = 0;
          goto LABEL_145;
        }
        v35 = 0;
        v36 = 0;
        v37 = 0;
        do
        {
          v2 = v33 + 1;
          *((_QWORD *)a2 + 1) = v33 + 1;
          v38 = *(_BYTE *)(v34 + v33);
          v37 |= (unint64_t)(v38 & 0x7F) << v35;
          if ((v38 & 0x80) == 0)
            goto LABEL_146;
          v35 += 7;
          v33 = v2;
          v14 = v36++ > 8;
        }
        while (!v14);
        LODWORD(v37) = 0;
LABEL_146:
        *((_DWORD *)this + 13) = v37;
        break;
      case 6u:
        *((_WORD *)this + 30) |= 8u;
        v39 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v40 = *(_QWORD *)a2;
        if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
        {
          v71 = 0;
          v72 = 0;
          v43 = 0;
          if (v2 <= v39)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v39)
            {
              LODWORD(v43) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_151;
            }
            v73 = v39++;
            v74 = *(_BYTE *)(v40 + v73);
            *((_QWORD *)a2 + 1) = v39;
            v43 |= (unint64_t)(v74 & 0x7F) << v71;
            if ((v74 & 0x80) == 0)
              break;
            v71 += 7;
            v14 = v72++ > 8;
            if (v14)
            {
              LODWORD(v43) = 0;
LABEL_150:
              v2 = v73 + 1;
              goto LABEL_151;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v43) = 0;
          goto LABEL_150;
        }
        v41 = 0;
        v42 = 0;
        v43 = 0;
        do
        {
          v2 = v39 + 1;
          *((_QWORD *)a2 + 1) = v39 + 1;
          v44 = *(_BYTE *)(v40 + v39);
          v43 |= (unint64_t)(v44 & 0x7F) << v41;
          if ((v44 & 0x80) == 0)
            goto LABEL_151;
          v41 += 7;
          v39 = v2;
          v14 = v42++ > 8;
        }
        while (!v14);
        LODWORD(v43) = 0;
LABEL_151:
        *((_DWORD *)this + 7) = v43;
        break;
      case 7u:
        *((_WORD *)this + 30) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_82;
        *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_130;
      case 8u:
        *((_WORD *)this + 30) |= 0x100u;
        v45 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v46 = *(_QWORD *)a2;
        if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
        {
          v75 = 0;
          v76 = 0;
          v49 = 0;
          if (v2 <= v45)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v45)
            {
              LODWORD(v49) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_156;
            }
            v77 = v45++;
            v78 = *(_BYTE *)(v46 + v77);
            *((_QWORD *)a2 + 1) = v45;
            v49 |= (unint64_t)(v78 & 0x7F) << v75;
            if ((v78 & 0x80) == 0)
              break;
            v75 += 7;
            v14 = v76++ > 8;
            if (v14)
            {
              LODWORD(v49) = 0;
LABEL_155:
              v2 = v77 + 1;
              goto LABEL_156;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v49) = 0;
          goto LABEL_155;
        }
        v47 = 0;
        v48 = 0;
        v49 = 0;
        do
        {
          v2 = v45 + 1;
          *((_QWORD *)a2 + 1) = v45 + 1;
          v50 = *(_BYTE *)(v46 + v45);
          v49 |= (unint64_t)(v50 & 0x7F) << v47;
          if ((v50 & 0x80) == 0)
            goto LABEL_156;
          v47 += 7;
          v45 = v2;
          v14 = v48++ > 8;
        }
        while (!v14);
        LODWORD(v49) = 0;
LABEL_156:
        *((_DWORD *)this + 12) = v49;
        break;
      case 9u:
        *((_WORD *)this + 30) |= 0x80u;
        v51 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v52 = *(_QWORD *)a2;
        if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
        {
          v79 = 0;
          v80 = 0;
          v55 = 0;
          if (v2 <= v51)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v51)
            {
              LODWORD(v55) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_161;
            }
            v81 = v51++;
            v82 = *(_BYTE *)(v52 + v81);
            *((_QWORD *)a2 + 1) = v51;
            v55 |= (unint64_t)(v82 & 0x7F) << v79;
            if ((v82 & 0x80) == 0)
              break;
            v79 += 7;
            v14 = v80++ > 8;
            if (v14)
            {
              LODWORD(v55) = 0;
LABEL_160:
              v2 = v81 + 1;
              goto LABEL_161;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v55) = 0;
          goto LABEL_160;
        }
        v53 = 0;
        v54 = 0;
        v55 = 0;
        do
        {
          v2 = v51 + 1;
          *((_QWORD *)a2 + 1) = v51 + 1;
          v56 = *(_BYTE *)(v52 + v51);
          v55 |= (unint64_t)(v56 & 0x7F) << v53;
          if ((v56 & 0x80) == 0)
            goto LABEL_161;
          v53 += 7;
          v51 = v2;
          v14 = v54++ > 8;
        }
        while (!v14);
        LODWORD(v55) = 0;
LABEL_161:
        *((_DWORD *)this + 11) = v55;
        break;
      case 0xAu:
        *((_WORD *)this + 30) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_130:
          v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_131:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_82:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 0xBu:
        *((_WORD *)this + 30) |= 0x400u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v58 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v57 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v58 = v57 != 0;
        }
        *((_BYTE *)this + 56) = v58;
        break;
      default:
        goto LABEL_19;
    }
LABEL_21:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::ElevationChange::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 60);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16));
    v4 = *(_WORD *)(v3 + 60);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v4 & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 4) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 4) == 0)
  {
LABEL_11:
    if ((v4 & 0x400) == 0)
      return this;
    return PB::Writer::write(a2);
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  if ((*(_WORD *)(v3 + 60) & 0x400) != 0)
    return PB::Writer::write(a2);
  return this;
}

BOOL CMMsl::ElevationChange::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 60);
  v3 = *(_WORD *)(a2 + 60);
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x200) == 0 || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 60) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x100) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 60) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x400) == 0;
  if ((*(_WORD *)(a1 + 60) & 0x400) != 0)
    return (*(_WORD *)(a2 + 60) & 0x400) != 0 && *(unsigned __int8 *)(a1 + 56) == *(unsigned __int8 *)(a2 + 56);
  return v4;
}

uint64_t CMMsl::ElevationChange::hash_value(CMMsl::ElevationChange *this)
{
  __int16 v1;
  double v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *((_WORD *)this + 30);
  if ((v1 & 2) == 0)
  {
    v2 = 0.0;
    if ((v1 & 1) != 0)
      goto LABEL_3;
LABEL_22:
    v3 = 0.0;
    if ((v1 & 0x10) != 0)
      goto LABEL_6;
    goto LABEL_23;
  }
  v2 = *((double *)this + 2);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_22;
LABEL_3:
  v3 = *((double *)this + 1);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 0x10) != 0)
  {
LABEL_6:
    v4 = *((unsigned int *)this + 8);
    if ((v1 & 0x20) != 0)
      goto LABEL_7;
    goto LABEL_24;
  }
LABEL_23:
  v4 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_7:
    v5 = *((unsigned int *)this + 9);
    if ((*((_WORD *)this + 30) & 0x200) != 0)
      goto LABEL_8;
    goto LABEL_25;
  }
LABEL_24:
  v5 = 0;
  if ((*((_WORD *)this + 30) & 0x200) != 0)
  {
LABEL_8:
    v6 = *((unsigned int *)this + 13);
    if ((v1 & 8) != 0)
      goto LABEL_9;
    goto LABEL_26;
  }
LABEL_25:
  v6 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_9:
    v7 = *((int *)this + 7);
    if ((v1 & 0x40) != 0)
      goto LABEL_10;
LABEL_27:
    v9 = 0;
    if ((*((_WORD *)this + 30) & 0x100) != 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_26:
  v7 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_27;
LABEL_10:
  v8 = *((float *)this + 10);
  v9 = LODWORD(v8);
  if (v8 == 0.0)
    v9 = 0;
  if ((*((_WORD *)this + 30) & 0x100) != 0)
  {
LABEL_13:
    v10 = *((int *)this + 12);
    if ((v1 & 0x80) != 0)
      goto LABEL_14;
    goto LABEL_29;
  }
LABEL_28:
  v10 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_14:
    v11 = *((int *)this + 11);
    if ((v1 & 4) != 0)
      goto LABEL_15;
    goto LABEL_30;
  }
LABEL_29:
  v11 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_15:
    v12 = *((float *)this + 6);
    v13 = LODWORD(v12);
    if (v12 == 0.0)
      v13 = 0;
    if ((*((_WORD *)this + 30) & 0x400) != 0)
      goto LABEL_18;
LABEL_31:
    v14 = 0;
    return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v9 ^ v10 ^ v11 ^ v13 ^ v14;
  }
LABEL_30:
  v13 = 0;
  if ((*((_WORD *)this + 30) & 0x400) == 0)
    goto LABEL_31;
LABEL_18:
  v14 = *((unsigned __int8 *)this + 56);
  return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v9 ^ v10 ^ v11 ^ v13 ^ v14;
}

uint64_t CMMsl::ElevationGradeEstimator::ElevationGradeEstimator(uint64_t this)
{
  *(_QWORD *)this = &off_25135D408;
  *(_DWORD *)(this + 92) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135D408;
  *(_DWORD *)(this + 92) = 0;
  return this;
}

void CMMsl::ElevationGradeEstimator::~ElevationGradeEstimator(CMMsl::ElevationGradeEstimator *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::ElevationGradeEstimator::ElevationGradeEstimator(uint64_t this, const CMMsl::ElevationGradeEstimator *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  char v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  char v20;

  *(_QWORD *)this = &off_25135D408;
  *(_DWORD *)(this + 92) = 0;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 8) != 0)
  {
    v4 = *((_QWORD *)a2 + 4);
    v3 = 8;
    *(_DWORD *)(this + 92) = 8;
    *(_QWORD *)(this + 32) = v4;
    v2 = *((_DWORD *)a2 + 23);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 2);
    v3 |= 2u;
    *(_DWORD *)(this + 92) = v3;
    *(_QWORD *)(this + 16) = v5;
    v2 = *((_DWORD *)a2 + 23);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *((_QWORD *)a2 + 3);
    v3 |= 4u;
    *(_DWORD *)(this + 92) = v3;
    *(_QWORD *)(this + 24) = v6;
    v2 = *((_DWORD *)a2 + 23);
    if ((v2 & 0x1000) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_24;
    }
  }
  else if ((v2 & 0x1000) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 19);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 76) = v7;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 0x4000) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  v8 = *((_DWORD *)a2 + 12);
  v3 |= 0x20u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 48) = v8;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x4000) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  v9 = *((_DWORD *)a2 + 21);
  v3 |= 0x4000u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 84) = v9;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  v10 = *((_DWORD *)a2 + 15);
  v3 |= 0x100u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 60) = v10;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x80) == 0)
  {
LABEL_12:
    if ((v2 & 0x8000) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  v11 = *((_DWORD *)a2 + 14);
  v3 |= 0x80u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 56) = v11;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x8000) == 0)
  {
LABEL_13:
    if ((v2 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_29;
  }
LABEL_28:
  v12 = *((_BYTE *)a2 + 88);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 92) = v3;
  *(_BYTE *)(this + 88) = v12;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x200) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0)
      goto LABEL_15;
    goto LABEL_30;
  }
LABEL_29:
  v13 = *((_DWORD *)a2 + 16);
  v3 |= 0x200u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 64) = v13;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x10) == 0)
  {
LABEL_15:
    if ((v2 & 0x40) == 0)
      goto LABEL_16;
    goto LABEL_31;
  }
LABEL_30:
  v14 = *((_QWORD *)a2 + 5);
  v3 |= 0x10u;
  *(_DWORD *)(this + 92) = v3;
  *(_QWORD *)(this + 40) = v14;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x40) == 0)
  {
LABEL_16:
    if ((v2 & 0x2000) == 0)
      goto LABEL_17;
    goto LABEL_32;
  }
LABEL_31:
  v15 = *((_DWORD *)a2 + 13);
  v3 |= 0x40u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 52) = v15;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x2000) == 0)
  {
LABEL_17:
    if ((v2 & 1) == 0)
      goto LABEL_18;
    goto LABEL_33;
  }
LABEL_32:
  v16 = *((_DWORD *)a2 + 20);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 80) = v16;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 1) == 0)
  {
LABEL_18:
    if ((v2 & 0x400) == 0)
      goto LABEL_19;
    goto LABEL_34;
  }
LABEL_33:
  v17 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_DWORD *)(this + 92) = v3;
  *(_QWORD *)(this + 8) = v17;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x400) == 0)
  {
LABEL_19:
    if ((v2 & 0x800) == 0)
      goto LABEL_20;
    goto LABEL_35;
  }
LABEL_34:
  v18 = *((_DWORD *)a2 + 17);
  v3 |= 0x400u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 68) = v18;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x800) == 0)
  {
LABEL_20:
    if ((v2 & 0x10000) == 0)
      return this;
LABEL_36:
    v20 = *((_BYTE *)a2 + 89);
    *(_DWORD *)(this + 92) = v3 | 0x10000;
    *(_BYTE *)(this + 89) = v20;
    return this;
  }
LABEL_35:
  v19 = *((_DWORD *)a2 + 18);
  v3 |= 0x800u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 72) = v19;
  if ((*((_DWORD *)a2 + 23) & 0x10000) != 0)
    goto LABEL_36;
  return this;
}

CMMsl *CMMsl::ElevationGradeEstimator::operator=(CMMsl *a1, const CMMsl::ElevationGradeEstimator *a2)
{
  CMMsl::ElevationGradeEstimator *v3;
  _BYTE v5[96];

  if (a1 != a2)
  {
    CMMsl::ElevationGradeEstimator::ElevationGradeEstimator((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::ElevationGradeEstimator *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::ElevationGradeEstimator *a2, CMMsl::ElevationGradeEstimator *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float result;

  v3 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v3;
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  LODWORD(v6) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v6;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  LODWORD(v4) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v4;
  LODWORD(v6) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v6;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  LOBYTE(v6) = *((_BYTE *)this + 88);
  *((_BYTE *)this + 88) = *((_BYTE *)a2 + 88);
  *((_BYTE *)a2 + 88) = v6;
  LODWORD(v4) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v4;
  v7 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v7;
  LODWORD(v7) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v7;
  LODWORD(v7) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v7;
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v8;
  LODWORD(v8) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v8;
  result = *((float *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((float *)a2 + 18) = result;
  LOBYTE(v6) = *((_BYTE *)this + 89);
  *((_BYTE *)this + 89) = *((_BYTE *)a2 + 89);
  *((_BYTE *)a2 + 89) = v6;
  return result;
}

float CMMsl::ElevationGradeEstimator::ElevationGradeEstimator(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135D408;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a2 + 92) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  result = *(float *)(a2 + 72);
  *(float *)(a1 + 72) = result;
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  return result;
}

CMMsl *CMMsl::ElevationGradeEstimator::operator=(CMMsl *this, uint64_t a2, CMMsl::ElevationGradeEstimator *a3)
{
  __int128 v4;
  _QWORD v6[2];
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  char v16;
  char v17;
  int v18;

  if (this != (CMMsl *)a2)
  {
    v6[0] = &off_25135D408;
    v18 = *(_DWORD *)(a2 + 92);
    *(_DWORD *)(a2 + 92) = 0;
    v14 = *(_DWORD *)(a2 + 76);
    v11 = *(_DWORD *)(a2 + 60);
    v10 = *(_DWORD *)(a2 + 56);
    v16 = *(_BYTE *)(a2 + 88);
    v4 = *(_OWORD *)(a2 + 32);
    v7 = *(_OWORD *)(a2 + 16);
    v8 = v4;
    v9 = *(_QWORD *)(a2 + 48);
    v15 = *(_QWORD *)(a2 + 80);
    v6[1] = *(_QWORD *)(a2 + 8);
    v12 = *(_QWORD *)(a2 + 64);
    v13 = *(_DWORD *)(a2 + 72);
    v17 = *(_BYTE *)(a2 + 89);
    CMMsl::swap(this, (CMMsl::ElevationGradeEstimator *)v6, a3);
    PB::Base::~Base((PB::Base *)v6);
  }
  return this;
}

uint64_t CMMsl::ElevationGradeEstimator::formatText(CMMsl::ElevationGradeEstimator *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(a2, "altitudeDelta", *((float *)this + 12));
    v5 = *((_DWORD *)this + 23);
    if ((v5 & 0x40) == 0)
    {
LABEL_3:
      if ((v5 & 0x80) == 0)
        goto LABEL_4;
      goto LABEL_22;
    }
  }
  else if ((v5 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "altitudeDeltaStreaming", *((float *)this + 13));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x80) == 0)
  {
LABEL_4:
    if ((v5 & 0x8000) == 0)
      goto LABEL_5;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "deltaTime", *((float *)this + 14));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x8000) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0)
      goto LABEL_6;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "didEstimate");
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 2) == 0)
      goto LABEL_7;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "downhillStartTime", *((double *)this + 1));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 2) == 0)
  {
LABEL_7:
    if ((v5 & 4) == 0)
      goto LABEL_8;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "elevationAscended");
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 4) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "elevationDescended");
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "gradeType");
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x10000) == 0)
      goto LABEL_11;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "heightRef", *((float *)this + 16));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x10000) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "isWorkoutElevationFusion");
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "predictionError", *((float *)this + 17));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "predictionIntercept", *((float *)this + 18));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 8) == 0)
      goto LABEL_15;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "source");
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 8) == 0)
  {
LABEL_15:
    if ((v5 & 0x2000) == 0)
      goto LABEL_16;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 4));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x2000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10) == 0)
      goto LABEL_17;
LABEL_35:
    PB::TextFormatter::format(a2, "timeRef", *((double *)this + 5));
    if ((*((_DWORD *)this + 23) & 0x4000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_18;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "timeDeltaStreaming", *((float *)this + 20));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x10) != 0)
    goto LABEL_35;
LABEL_17:
  if ((v5 & 0x4000) != 0)
LABEL_18:
    PB::TextFormatter::format(a2, "verticalSpeed", *((float *)this + 21));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ElevationGradeEstimator::readFrom(CMMsl::ElevationGradeEstimator *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  char v43;
  int v44;
  BOOL v45;
  int v46;
  BOOL v47;
  char v48;
  unsigned int v49;
  unint64_t v50;
  char v51;
  char v52;
  unsigned int v53;
  unint64_t v54;
  char v55;
  char v56;
  unsigned int v57;
  unint64_t v58;
  char v59;
  char v60;
  unsigned int v61;
  unint64_t v62;
  char v63;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_144;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 23) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_86;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_80;
      case 2u:
        *((_DWORD *)this + 23) |= 2u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v48 = 0;
          v49 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              v24 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_128;
            }
            v50 = v20++;
            v51 = *(_BYTE *)(v21 + v50);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v51 & 0x7F) << v48;
            if ((v51 & 0x80) == 0)
              break;
            v48 += 7;
            v14 = v49++ > 8;
            if (v14)
            {
              v24 = 0;
LABEL_127:
              v2 = v50 + 1;
              goto LABEL_128;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v24 = 0;
          goto LABEL_127;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_128;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        v24 = 0;
LABEL_128:
        *((_QWORD *)this + 2) = v24;
        break;
      case 3u:
        *((_DWORD *)this + 23) |= 4u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v52 = 0;
          v53 = 0;
          v30 = 0;
          if (v2 <= v26)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v26)
            {
              v30 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_133;
            }
            v54 = v26++;
            v55 = *(_BYTE *)(v27 + v54);
            *((_QWORD *)a2 + 1) = v26;
            v30 |= (unint64_t)(v55 & 0x7F) << v52;
            if ((v55 & 0x80) == 0)
              break;
            v52 += 7;
            v14 = v53++ > 8;
            if (v14)
            {
              v30 = 0;
LABEL_132:
              v2 = v54 + 1;
              goto LABEL_133;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v30 = 0;
          goto LABEL_132;
        }
        v28 = 0;
        v29 = 0;
        v30 = 0;
        do
        {
          v2 = v26 + 1;
          *((_QWORD *)a2 + 1) = v26 + 1;
          v31 = *(_BYTE *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0)
            goto LABEL_133;
          v28 += 7;
          v26 = v2;
          v14 = v29++ > 8;
        }
        while (!v14);
        v30 = 0;
LABEL_133:
        *((_QWORD *)this + 3) = v30;
        break;
      case 4u:
        *((_DWORD *)this + 23) |= 0x1000u;
        v32 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v33 = *(_QWORD *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
        {
          v56 = 0;
          v57 = 0;
          v36 = 0;
          if (v2 <= v32)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v32)
            {
              LODWORD(v36) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_138;
            }
            v58 = v32++;
            v59 = *(_BYTE *)(v33 + v58);
            *((_QWORD *)a2 + 1) = v32;
            v36 |= (unint64_t)(v59 & 0x7F) << v56;
            if ((v59 & 0x80) == 0)
              break;
            v56 += 7;
            v14 = v57++ > 8;
            if (v14)
            {
              LODWORD(v36) = 0;
LABEL_137:
              v2 = v58 + 1;
              goto LABEL_138;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v36) = 0;
          goto LABEL_137;
        }
        v34 = 0;
        v35 = 0;
        v36 = 0;
        do
        {
          v2 = v32 + 1;
          *((_QWORD *)a2 + 1) = v32 + 1;
          v37 = *(_BYTE *)(v33 + v32);
          v36 |= (unint64_t)(v37 & 0x7F) << v34;
          if ((v37 & 0x80) == 0)
            goto LABEL_138;
          v34 += 7;
          v32 = v2;
          v14 = v35++ > 8;
        }
        while (!v14);
        LODWORD(v36) = 0;
LABEL_138:
        *((_DWORD *)this + 19) = v36;
        break;
      case 5u:
        *((_DWORD *)this + 23) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_86;
        *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_122;
      case 6u:
        *((_DWORD *)this + 23) |= 0x4000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_86;
        *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_122;
      case 7u:
        *((_DWORD *)this + 23) |= 0x100u;
        v38 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v39 = *(_QWORD *)a2;
        if (v38 > 0xFFFFFFFFFFFFFFF5 || v38 + 10 > v2)
        {
          v60 = 0;
          v61 = 0;
          v42 = 0;
          if (v2 <= v38)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v38)
            {
              LODWORD(v42) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_143;
            }
            v62 = v38++;
            v63 = *(_BYTE *)(v39 + v62);
            *((_QWORD *)a2 + 1) = v38;
            v42 |= (unint64_t)(v63 & 0x7F) << v60;
            if ((v63 & 0x80) == 0)
              break;
            v60 += 7;
            v14 = v61++ > 8;
            if (v14)
            {
              LODWORD(v42) = 0;
LABEL_142:
              v2 = v62 + 1;
              goto LABEL_143;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v42) = 0;
          goto LABEL_142;
        }
        v40 = 0;
        v41 = 0;
        v42 = 0;
        do
        {
          v2 = v38 + 1;
          *((_QWORD *)a2 + 1) = v38 + 1;
          v43 = *(_BYTE *)(v39 + v38);
          v42 |= (unint64_t)(v43 & 0x7F) << v40;
          if ((v43 & 0x80) == 0)
            goto LABEL_143;
          v40 += 7;
          v38 = v2;
          v14 = v41++ > 8;
        }
        while (!v14);
        LODWORD(v42) = 0;
LABEL_143:
        *((_DWORD *)this + 15) = v42;
        break;
      case 8u:
        *((_DWORD *)this + 23) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_86;
        *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_122;
      case 9u:
        *((_DWORD *)this + 23) |= 0x8000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v45 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v44 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v45 = v44 != 0;
        }
        *((_BYTE *)this + 88) = v45;
        break;
      case 0xAu:
        *((_DWORD *)this + 23) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_86;
        *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_122;
      case 0xBu:
        *((_DWORD *)this + 23) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_86;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_80;
      case 0xCu:
        *((_DWORD *)this + 23) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_86;
        *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_122;
      case 0xDu:
        *((_DWORD *)this + 23) |= 0x2000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_86;
        *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_122;
      case 0xEu:
        *((_DWORD *)this + 23) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_86;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_80:
        v2 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_123;
      case 0xFu:
        *((_DWORD *)this + 23) |= 0x400u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_86;
        *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_122;
      case 0x10u:
        *((_DWORD *)this + 23) |= 0x800u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_122:
          v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_123:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_86:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 0x11u:
        *((_DWORD *)this + 23) |= 0x10000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v47 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v46 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v47 = v46 != 0;
        }
        *((_BYTE *)this + 89) = v47;
        break;
      default:
        goto LABEL_19;
    }
LABEL_144:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::ElevationGradeEstimator::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 92);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32));
    v4 = *(_DWORD *)(v3 + 92);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_21;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x1000) == 0)
      goto LABEL_5;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x1000) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 0x4000) == 0)
      goto LABEL_7;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x4000) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 84));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x8000) == 0)
      goto LABEL_10;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x8000) == 0)
  {
LABEL_10:
    if ((v4 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x200) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0)
      goto LABEL_12;
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(float *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x10) == 0)
  {
LABEL_12:
    if ((v4 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x40) == 0)
  {
LABEL_13:
    if ((v4 & 0x2000) == 0)
      goto LABEL_14;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x2000) == 0)
  {
LABEL_14:
    if ((v4 & 1) == 0)
      goto LABEL_15;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 1) == 0)
  {
LABEL_15:
    if ((v4 & 0x400) == 0)
      goto LABEL_16;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x400) == 0)
  {
LABEL_16:
    if ((v4 & 0x800) == 0)
      goto LABEL_17;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 68));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x800) == 0)
  {
LABEL_17:
    if ((v4 & 0x10000) == 0)
      return this;
    return PB::Writer::write(a2);
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 72));
  if ((*(_DWORD *)(v3 + 92) & 0x10000) != 0)
    return PB::Writer::write(a2);
  return this;
}

BOOL CMMsl::ElevationGradeEstimator::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 92);
  v3 = *(_DWORD *)(a2 + 92);
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(unsigned __int8 *)(a1 + 88) != *(unsigned __int8 *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x10000) == 0;
  if ((v2 & 0x10000) != 0)
    return (v3 & 0x10000) != 0 && *(unsigned __int8 *)(a1 + 89) == *(unsigned __int8 *)(a2 + 89);
  return v4;
}

uint64_t CMMsl::ElevationGradeEstimator::hash_value(CMMsl::ElevationGradeEstimator *this)
{
  int v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  double v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  double v21;
  float v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *((_DWORD *)this + 23);
  if ((v1 & 8) != 0)
  {
    v2 = *((double *)this + 4);
    if (v2 == 0.0)
      v2 = 0.0;
    if ((v1 & 2) != 0)
    {
LABEL_3:
      v3 = *((_QWORD *)this + 2);
      if ((v1 & 4) != 0)
        goto LABEL_4;
      goto LABEL_43;
    }
  }
  else
  {
    v2 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_4:
    v4 = *((_QWORD *)this + 3);
    if ((v1 & 0x1000) != 0)
      goto LABEL_5;
    goto LABEL_44;
  }
LABEL_43:
  v4 = 0;
  if ((v1 & 0x1000) != 0)
  {
LABEL_5:
    v5 = *((int *)this + 19);
    if ((v1 & 0x20) != 0)
      goto LABEL_6;
LABEL_45:
    v7 = 0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_9;
LABEL_46:
    v9 = 0;
    if ((v1 & 0x100) != 0)
      goto LABEL_12;
    goto LABEL_47;
  }
LABEL_44:
  v5 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_45;
LABEL_6:
  v6 = *((float *)this + 12);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  if ((v1 & 0x4000) == 0)
    goto LABEL_46;
LABEL_9:
  v8 = *((float *)this + 21);
  v9 = LODWORD(v8);
  if (v8 == 0.0)
    v9 = 0;
  if ((v1 & 0x100) != 0)
  {
LABEL_12:
    v10 = *((int *)this + 15);
    if ((v1 & 0x80) != 0)
      goto LABEL_13;
LABEL_48:
    v12 = 0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_16;
    goto LABEL_49;
  }
LABEL_47:
  v10 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_48;
LABEL_13:
  v11 = *((float *)this + 14);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((v1 & 0x8000) != 0)
  {
LABEL_16:
    v13 = *((unsigned __int8 *)this + 88);
    if ((v1 & 0x200) != 0)
      goto LABEL_17;
LABEL_50:
    v15 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_20;
LABEL_51:
    v16 = 0.0;
    if ((v1 & 0x40) != 0)
      goto LABEL_23;
LABEL_52:
    v18 = 0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_26;
LABEL_53:
    v20 = 0;
    if ((v1 & 1) != 0)
      goto LABEL_29;
LABEL_54:
    v21 = 0.0;
    if ((v1 & 0x400) != 0)
      goto LABEL_32;
LABEL_55:
    v23 = 0;
    if ((v1 & 0x800) != 0)
      goto LABEL_35;
    goto LABEL_56;
  }
LABEL_49:
  v13 = 0;
  if ((v1 & 0x200) == 0)
    goto LABEL_50;
LABEL_17:
  v14 = *((float *)this + 16);
  v15 = LODWORD(v14);
  if (v14 == 0.0)
    v15 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_51;
LABEL_20:
  v16 = *((double *)this + 5);
  if (v16 == 0.0)
    v16 = 0.0;
  if ((v1 & 0x40) == 0)
    goto LABEL_52;
LABEL_23:
  v17 = *((float *)this + 13);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_53;
LABEL_26:
  v19 = *((float *)this + 20);
  v20 = LODWORD(v19);
  if (v19 == 0.0)
    v20 = 0;
  if ((v1 & 1) == 0)
    goto LABEL_54;
LABEL_29:
  v21 = *((double *)this + 1);
  if (v21 == 0.0)
    v21 = 0.0;
  if ((v1 & 0x400) == 0)
    goto LABEL_55;
LABEL_32:
  v22 = *((float *)this + 17);
  v23 = LODWORD(v22);
  if (v22 == 0.0)
    v23 = 0;
  if ((v1 & 0x800) != 0)
  {
LABEL_35:
    v24 = *((float *)this + 18);
    v25 = LODWORD(v24);
    if (v24 == 0.0)
      v25 = 0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_38;
LABEL_57:
    v26 = 0;
    return v3 ^ *(_QWORD *)&v2 ^ v4 ^ v5 ^ v7 ^ v9 ^ v10 ^ v12 ^ v13 ^ v15 ^ *(_QWORD *)&v16 ^ v18 ^ v20 ^ *(_QWORD *)&v21 ^ v23 ^ v25 ^ v26;
  }
LABEL_56:
  v25 = 0;
  if ((v1 & 0x10000) == 0)
    goto LABEL_57;
LABEL_38:
  v26 = *((unsigned __int8 *)this + 89);
  return v3 ^ *(_QWORD *)&v2 ^ v4 ^ v5 ^ v7 ^ v9 ^ v10 ^ v12 ^ v13 ^ v15 ^ *(_QWORD *)&v16 ^ v18 ^ v20 ^ *(_QWORD *)&v21 ^ v23 ^ v25 ^ v26;
}

uint64_t CMMsl::ElevationThreshold::ElevationThreshold(uint64_t this)
{
  *(_QWORD *)this = &off_25135D440;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135D440;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::ElevationThreshold::~ElevationThreshold(CMMsl::ElevationThreshold *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135D440;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    sub_242910C5C(v2);
  PB::Base::~Base(this);
}

{
  CMMsl::ElevationThreshold::~ElevationThreshold(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::ElevationThreshold *CMMsl::ElevationThreshold::ElevationThreshold(CMMsl::ElevationThreshold *this, const CMMsl::ElevationThreshold *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  __int128 v8;
  uint64_t v9;
  char v10;
  int v11;
  char v12;

  *(_QWORD *)this = &off_25135D440;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 8) = 0;
  if ((*((_BYTE *)a2 + 32) & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 2);
    *((_BYTE *)this + 32) = 1;
    *((_QWORD *)this + 2) = v4;
  }
  if (*((_QWORD *)a2 + 1))
  {
    v5 = operator new();
    v6 = v5;
    v7 = (__int128 *)*((_QWORD *)a2 + 1);
    if (*((char *)v7 + 23) < 0)
    {
      sub_242910CE8((_BYTE *)v5, *(void **)v7, *((_QWORD *)v7 + 1));
    }
    else
    {
      v8 = *v7;
      *(_QWORD *)(v5 + 16) = *((_QWORD *)v7 + 2);
      *(_OWORD *)v5 = v8;
    }
    v9 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v6;
    if (v9)
      sub_242910C5C(v9);
  }
  v10 = *((_BYTE *)a2 + 32);
  if ((v10 & 2) != 0)
  {
    v11 = *((_DWORD *)a2 + 6);
    *((_BYTE *)this + 32) |= 2u;
    *((_DWORD *)this + 6) = v11;
    v10 = *((_BYTE *)a2 + 32);
  }
  if ((v10 & 4) != 0)
  {
    v12 = *((_BYTE *)a2 + 28);
    *((_BYTE *)this + 32) |= 4u;
    *((_BYTE *)this + 28) = v12;
  }
  return this;
}

uint64_t CMMsl::ElevationThreshold::operator=(uint64_t a1, const CMMsl::ElevationThreshold *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[8];
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  int v12;

  if ((const CMMsl::ElevationThreshold *)a1 != a2)
  {
    CMMsl::ElevationThreshold::ElevationThreshold((CMMsl::ElevationThreshold *)v7, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v12;
    v12 = v3;
    v4 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v9;
    v9 = v4;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v8;
    v8 = v5;
    LODWORD(v4) = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    v10 = v4;
    LOBYTE(v5) = *(_BYTE *)(a1 + 28);
    *(_BYTE *)(a1 + 28) = v11;
    v11 = v5;
    CMMsl::ElevationThreshold::~ElevationThreshold((CMMsl::ElevationThreshold *)v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::ElevationThreshold *a2, CMMsl::ElevationThreshold *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  float result;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  LOBYTE(v5) = *((_BYTE *)this + 28);
  *((_BYTE *)this + 28) = *((_BYTE *)a2 + 28);
  *((_BYTE *)a2 + 28) = v5;
  return result;
}

uint64_t CMMsl::ElevationThreshold::ElevationThreshold(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_25135D440;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    sub_242910C5C(v5);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  return a1;
}

uint64_t CMMsl::ElevationThreshold::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  int v13;
  char v14;
  int v15;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    v4 = *(_QWORD *)(a2 + 16);
    v5 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v6 = *(_DWORD *)(a2 + 24);
    v7 = *(_BYTE *)(a2 + 28);
    v8 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v3;
    v15 = v8;
    v9 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v4;
    v12[2] = v9;
    v10 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v5;
    v12[0] = &off_25135D440;
    v12[1] = v10;
    LODWORD(v4) = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v6;
    v13 = v4;
    LOBYTE(v3) = *(_BYTE *)(a1 + 28);
    *(_BYTE *)(a1 + 28) = v7;
    v14 = v3;
    CMMsl::ElevationThreshold::~ElevationThreshold((CMMsl::ElevationThreshold *)v12);
  }
  return a1;
}

uint64_t CMMsl::ElevationThreshold::formatText(CMMsl::ElevationThreshold *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 32) & 4) != 0)
    PB::TextFormatter::format(a2, "active");
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format();
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "threshold", *((float *)this + 6));
    v5 = *((_BYTE *)this + 32);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ElevationThreshold::readFrom(CMMsl::ElevationThreshold *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  BOOL v28;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      break;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 32) |= 1u;
        v20 = *((_QWORD *)a2 + 1);
        if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_31;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v20);
        v21 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_37;
      case 2u:
        v22 = (_QWORD *)operator new();
        v22[1] = 0;
        v22[2] = 0;
        *v22 = 0;
        v23 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v22;
        if (v23)
          sub_242910C5C(v23);
        PB::Reader::read();
        break;
      case 3u:
        *((_BYTE *)this + 32) |= 2u;
        v24 = *((_QWORD *)a2 + 1);
        if (v24 <= 0xFFFFFFFFFFFFFFFBLL && v24 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v24);
          v21 = *((_QWORD *)a2 + 1) + 4;
LABEL_37:
          *((_QWORD *)a2 + 1) = v21;
        }
        else
        {
LABEL_31:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 4u:
        *((_BYTE *)this + 32) |= 4u;
        v25 = *((_QWORD *)a2 + 1);
        if (v25 >= *((_QWORD *)a2 + 2))
        {
          v28 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v26 = v25 + 1;
          v27 = *(unsigned __int8 *)(*(_QWORD *)a2 + v25);
          *((_QWORD *)a2 + 1) = v26;
          v28 = v27 != 0;
        }
        *((_BYTE *)this + 28) = v28;
        break;
      default:
        goto LABEL_19;
    }
LABEL_38:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v15 = 0;
  v16 = 0;
  v11 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v17 = v2 + 1;
    v18 = *(_BYTE *)(v8 + v2);
    *((_QWORD *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0)
      goto LABEL_21;
    v15 += 7;
    v2 = v17;
    v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  result = PB::Reader::skip(a2);
  if ((_DWORD)result)
    goto LABEL_38;
  return result;
}

uint64_t CMMsl::ElevationThreshold::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  if ((*(_BYTE *)(this + 32) & 1) != 0)
    this = PB::Writer::write(a2, *(double *)(this + 16));
  if (*(_QWORD *)(v3 + 8))
    this = PB::Writer::write();
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 24));
    v4 = *(_BYTE *)(v3 + 32);
  }
  if ((v4 & 4) != 0)
    return PB::Writer::write(a2);
  return this;
}

BOOL CMMsl::ElevationThreshold::operator==(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  unsigned __int8 *v6;
  unsigned __int8 **v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v12;
  _BOOL8 result;

  v4 = *(_BYTE *)(a1 + 32);
  v5 = *(_BYTE *)(a2 + 32);
  if ((v4 & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  v6 = *(unsigned __int8 **)(a1 + 8);
  v7 = *(unsigned __int8 ***)(a2 + 8);
  if (v6)
  {
    if (!v7)
      return 0;
    v8 = v6[23];
    if ((v8 & 0x80u) == 0)
      v9 = (unsigned __int8 *)v6[23];
    else
      v9 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
    v10 = (unsigned __int8 *)*((unsigned __int8 *)v7 + 23);
    v11 = (char)v10;
    if ((char)v10 < 0)
      v10 = v7[1];
    if (v9 != v10)
      return 0;
    if (v11 >= 0)
      v12 = *(unsigned __int8 **)(a2 + 8);
    else
      v12 = *v7;
    if ((v8 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v6, v12, *((_QWORD *)v6 + 1)))
        return 0;
    }
    else if (v6[23])
    {
      while (*v6 == *v12)
      {
        ++v6;
        ++v12;
        if (!--v8)
          goto LABEL_23;
      }
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
LABEL_23:
  if ((v4 & 2) != 0)
  {
    if ((v5 & 2) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v5 & 2) != 0)
  {
    return 0;
  }
  result = (v5 & 4) == 0;
  if ((v4 & 4) == 0)
    return result;
  return (v5 & 4) != 0 && *(unsigned __int8 *)(a1 + 28) == *(unsigned __int8 *)(a2 + 28);
}

unint64_t CMMsl::ElevationThreshold::hash_value(CMMsl::ElevationThreshold *this)
{
  char v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;

  v2 = *((_BYTE *)this + 32);
  if ((v2 & 1) != 0)
  {
    if (*((double *)this + 2) == 0.0)
      v3 = 0;
    else
      v3 = *((_QWORD *)this + 2);
  }
  else
  {
    v3 = 0;
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
    v4 = sub_242910D74(v4);
  if ((v2 & 2) != 0)
  {
    v7 = *((float *)this + 6);
    v5 = LODWORD(v7);
    if (v7 == 0.0)
      v5 = 0;
    if ((v2 & 4) != 0)
      goto LABEL_10;
LABEL_14:
    v6 = 0;
    return v4 ^ v3 ^ v5 ^ v6;
  }
  v5 = 0;
  if ((v2 & 4) == 0)
    goto LABEL_14;
LABEL_10:
  v6 = *((unsigned __int8 *)this + 28);
  return v4 ^ v3 ^ v5 ^ v6;
}

uint64_t CMMsl::EmergencyState::EmergencyState(uint64_t this)
{
  *(_QWORD *)this = &off_25135D478;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135D478;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

void CMMsl::EmergencyState::~EmergencyState(CMMsl::EmergencyState *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::EmergencyState::EmergencyState(uint64_t this, const CMMsl::EmergencyState *a2)
{
  int v2;

  *(_QWORD *)this = &off_25135D478;
  *(_DWORD *)(this + 12) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v2 = *((_DWORD *)a2 + 2);
    *(_BYTE *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

{
  int v2;

  *(_QWORD *)this = &off_25135D478;
  *(_DWORD *)(this + 12) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v2 = *((_DWORD *)a2 + 2);
    *(_BYTE *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::EmergencyState::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v6[0] = &off_25135D478;
    v3 = *(_BYTE *)(a2 + 12) & 1;
    v4 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 12) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v6[0] = &off_25135D478;
    v3 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 12) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::EmergencyState *a2, CMMsl::EmergencyState *a3)
{
  int v3;
  int v4;

  v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  v4 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  return this;
}

uint64_t CMMsl::EmergencyState::EmergencyState(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = &off_25135D478;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

{
  *(_QWORD *)result = &off_25135D478;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t CMMsl::EmergencyState::formatText(CMMsl::EmergencyState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 12) & 1) != 0)
    PB::TextFormatter::format(a2, "state");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::EmergencyState::readFrom(CMMsl::EmergencyState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  char v24;
  uint64_t result;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_29;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 12) |= 1u;
        v19 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        v20 = *(_QWORD *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v3)
        {
          v26 = 0;
          v27 = 0;
          v23 = 0;
          if (v3 <= v19)
            v2 = *((_QWORD *)a2 + 1);
          else
            v2 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v2 == v19)
            {
              LODWORD(v23) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_43;
            }
            v28 = v19++;
            v29 = *(_BYTE *)(v20 + v28);
            *((_QWORD *)a2 + 1) = v19;
            v23 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0)
              break;
            v26 += 7;
            v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              goto LABEL_42;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v23) = 0;
LABEL_42:
          v2 = v28 + 1;
        }
        else
        {
          v21 = 0;
          v22 = 0;
          v23 = 0;
          while (1)
          {
            v2 = v19 + 1;
            *((_QWORD *)a2 + 1) = v19 + 1;
            v24 = *(_BYTE *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0)
              break;
            v21 += 7;
            v19 = v2;
            v14 = v22++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              break;
            }
          }
        }
LABEL_43:
        *((_DWORD *)this + 2) = v23;
      }
      else
      {
LABEL_29:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_29;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::EmergencyState::writeTo(uint64_t this, PB::Writer *a2)
{
  if ((*(_BYTE *)(this + 12) & 1) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

BOOL CMMsl::EmergencyState::operator==(uint64_t a1, uint64_t a2)
{
  char v3;
  _BOOL8 result;

  v3 = *(_BYTE *)(a1 + 12);
  result = (*(_BYTE *)(a2 + 12) & 1) == 0;
  if ((v3 & 1) != 0)
    return (*(_BYTE *)(a2 + 12) & 1) != 0 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t CMMsl::EmergencyState::hash_value(CMMsl::EmergencyState *this)
{
  if ((*((_BYTE *)this + 12) & 1) != 0)
    return *((unsigned int *)this + 2);
  else
    return 0;
}

uint64_t CMMsl::EnhancedDeviceMotion::EnhancedDeviceMotion(uint64_t this)
{
  *(_QWORD *)this = &off_25135D4B0;
  *(_DWORD *)(this + 96) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135D4B0;
  *(_DWORD *)(this + 96) = 0;
  return this;
}

void CMMsl::EnhancedDeviceMotion::~EnhancedDeviceMotion(CMMsl::EnhancedDeviceMotion *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::EnhancedDeviceMotion::EnhancedDeviceMotion(uint64_t this, const CMMsl::EnhancedDeviceMotion *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  char v19;
  char v20;
  int v21;

  *(_QWORD *)this = &off_25135D4B0;
  *(_DWORD *)(this + 96) = 0;
  v2 = *((_DWORD *)a2 + 24);
  if ((v2 & 0x10) != 0)
  {
    v4 = *((_QWORD *)a2 + 5);
    v3 = 16;
    *(_DWORD *)(this + 96) = 16;
    *(_QWORD *)(this + 40) = v4;
    v2 = *((_DWORD *)a2 + 24);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 2);
    v3 |= 2u;
    *(_DWORD *)(this + 96) = v3;
    *(_QWORD *)(this + 16) = v5;
    v2 = *((_DWORD *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *((_QWORD *)a2 + 3);
    v3 |= 4u;
    *(_DWORD *)(this + 96) = v3;
    *(_QWORD *)(this + 24) = v6;
    v2 = *((_DWORD *)a2 + 24);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0)
        goto LABEL_9;
      goto LABEL_25;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *(_DWORD *)(this + 96) = v3;
  *(_QWORD *)(this + 32) = v7;
  v2 = *((_DWORD *)a2 + 24);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 0x1000) == 0)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  v8 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_DWORD *)(this + 96) = v3;
  *(_QWORD *)(this + 8) = v8;
  v2 = *((_DWORD *)a2 + 24);
  if ((v2 & 0x1000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  v9 = *((_DWORD *)a2 + 19);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 96) = v3;
  *(_DWORD *)(this + 76) = v9;
  v2 = *((_DWORD *)a2 + 24);
  if ((v2 & 0x2000) == 0)
  {
LABEL_11:
    if ((v2 & 0x4000) == 0)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  v10 = *((_DWORD *)a2 + 20);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 96) = v3;
  *(_DWORD *)(this + 80) = v10;
  v2 = *((_DWORD *)a2 + 24);
  if ((v2 & 0x4000) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  v11 = *((_DWORD *)a2 + 21);
  v3 |= 0x4000u;
  *(_DWORD *)(this + 96) = v3;
  *(_DWORD *)(this + 84) = v11;
  v2 = *((_DWORD *)a2 + 24);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_30;
  }
LABEL_29:
  v12 = *((_DWORD *)a2 + 16);
  v3 |= 0x200u;
  *(_DWORD *)(this + 96) = v3;
  *(_DWORD *)(this + 64) = v12;
  v2 = *((_DWORD *)a2 + 24);
  if ((v2 & 0x400) == 0)
  {
LABEL_14:
    if ((v2 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_31;
  }
LABEL_30:
  v13 = *((_DWORD *)a2 + 17);
  v3 |= 0x400u;
  *(_DWORD *)(this + 96) = v3;
  *(_DWORD *)(this + 68) = v13;
  v2 = *((_DWORD *)a2 + 24);
  if ((v2 & 0x800) == 0)
  {
LABEL_15:
    if ((v2 & 0x40) == 0)
      goto LABEL_16;
    goto LABEL_32;
  }
LABEL_31:
  v14 = *((_DWORD *)a2 + 18);
  v3 |= 0x800u;
  *(_DWORD *)(this + 96) = v3;
  *(_DWORD *)(this + 72) = v14;
  v2 = *((_DWORD *)a2 + 24);
  if ((v2 & 0x40) == 0)
  {
LABEL_16:
    if ((v2 & 0x80) == 0)
      goto LABEL_17;
    goto LABEL_33;
  }
LABEL_32:
  v15 = *((_DWORD *)a2 + 13);
  v3 |= 0x40u;
  *(_DWORD *)(this + 96) = v3;
  *(_DWORD *)(this + 52) = v15;
  v2 = *((_DWORD *)a2 + 24);
  if ((v2 & 0x80) == 0)
  {
LABEL_17:
    if ((v2 & 0x100) == 0)
      goto LABEL_18;
    goto LABEL_34;
  }
LABEL_33:
  v16 = *((_DWORD *)a2 + 14);
  v3 |= 0x80u;
  *(_DWORD *)(this + 96) = v3;
  *(_DWORD *)(this + 56) = v16;
  v2 = *((_DWORD *)a2 + 24);
  if ((v2 & 0x100) == 0)
  {
LABEL_18:
    if ((v2 & 0x20) == 0)
      goto LABEL_19;
    goto LABEL_35;
  }
LABEL_34:
  v17 = *((_DWORD *)a2 + 15);
  v3 |= 0x100u;
  *(_DWORD *)(this + 96) = v3;
  *(_DWORD *)(this + 60) = v17;
  v2 = *((_DWORD *)a2 + 24);
  if ((v2 & 0x20) == 0)
  {
LABEL_19:
    if ((v2 & 0x10000) == 0)
      goto LABEL_20;
    goto LABEL_36;
  }
LABEL_35:
  v18 = *((_DWORD *)a2 + 12);
  v3 |= 0x20u;
  *(_DWORD *)(this + 96) = v3;
  *(_DWORD *)(this + 48) = v18;
  v2 = *((_DWORD *)a2 + 24);
  if ((v2 & 0x10000) == 0)
  {
LABEL_20:
    if ((v2 & 0x20000) == 0)
      goto LABEL_21;
    goto LABEL_37;
  }
LABEL_36:
  v19 = *((_BYTE *)a2 + 92);
  v3 |= 0x10000u;
  *(_DWORD *)(this + 96) = v3;
  *(_BYTE *)(this + 92) = v19;
  v2 = *((_DWORD *)a2 + 24);
  if ((v2 & 0x20000) == 0)
  {
LABEL_21:
    if ((v2 & 0x8000) == 0)
      return this;
LABEL_38:
    v21 = *((_DWORD *)a2 + 22);
    *(_DWORD *)(this + 96) = v3 | 0x8000;
    *(_DWORD *)(this + 88) = v21;
    return this;
  }
LABEL_37:
  v20 = *((_BYTE *)a2 + 93);
  v3 |= 0x20000u;
  *(_DWORD *)(this + 96) = v3;
  *(_BYTE *)(this + 93) = v20;
  if ((*((_DWORD *)a2 + 24) & 0x8000) != 0)
    goto LABEL_38;
  return this;
}

CMMsl *CMMsl::EnhancedDeviceMotion::operator=(CMMsl *a1, const CMMsl::EnhancedDeviceMotion *a2)
{
  CMMsl::EnhancedDeviceMotion *v3;
  _BYTE v5[104];

  if (a1 != a2)
  {
    CMMsl::EnhancedDeviceMotion::EnhancedDeviceMotion((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::EnhancedDeviceMotion *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::EnhancedDeviceMotion *a2, CMMsl::EnhancedDeviceMotion *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float result;
  int v10;
  int v11;

  v3 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v3;
  v4 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  v7 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v7;
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v8;
  LODWORD(v8) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v8;
  LODWORD(v8) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v8;
  LODWORD(v8) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v8;
  LODWORD(v8) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v8;
  LODWORD(v8) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v8;
  LODWORD(v8) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v8;
  LODWORD(v8) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v8;
  LODWORD(v8) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v8;
  result = *((float *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((float *)a2 + 15) = result;
  v10 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v10;
  LOBYTE(v10) = *((_BYTE *)this + 92);
  *((_BYTE *)this + 92) = *((_BYTE *)a2 + 92);
  *((_BYTE *)a2 + 92) = v10;
  LOBYTE(v10) = *((_BYTE *)this + 93);
  *((_BYTE *)this + 93) = *((_BYTE *)a2 + 93);
  *((_BYTE *)a2 + 93) = v10;
  v11 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v11;
  return result;
}

float CMMsl::EnhancedDeviceMotion::EnhancedDeviceMotion(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135D4B0;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  result = *(float *)(a2 + 60);
  *(float *)(a1 + 60) = result;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  *(_BYTE *)(a1 + 93) = *(_BYTE *)(a2 + 93);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  return result;
}

CMMsl *CMMsl::EnhancedDeviceMotion::operator=(CMMsl *this, uint64_t a2, CMMsl::EnhancedDeviceMotion *a3)
{
  __int128 v4;
  void (**v6)(CMMsl::EnhancedDeviceMotion *__hidden);
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  __int128 v12;
  int v13;
  int v14;
  char v15;
  char v16;
  int v17;

  if (this != (CMMsl *)a2)
  {
    v6 = &off_25135D4B0;
    v17 = *(_DWORD *)(a2 + 96);
    *(_DWORD *)(a2 + 96) = 0;
    v9 = *(_QWORD *)(a2 + 40);
    v4 = *(_OWORD *)(a2 + 24);
    v7 = *(_OWORD *)(a2 + 8);
    v8 = v4;
    v13 = *(_DWORD *)(a2 + 84);
    v12 = *(_OWORD *)(a2 + 68);
    v11 = *(_OWORD *)(a2 + 52);
    v10 = *(_DWORD *)(a2 + 48);
    v15 = *(_BYTE *)(a2 + 92);
    v16 = *(_BYTE *)(a2 + 93);
    v14 = *(_DWORD *)(a2 + 88);
    CMMsl::swap(this, (CMMsl::EnhancedDeviceMotion *)&v6, a3);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return this;
}

uint64_t CMMsl::EnhancedDeviceMotion::formatText(CMMsl::EnhancedDeviceMotion *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 24);
  if ((v5 & 0x10000) != 0)
  {
    PB::TextFormatter::format(a2, "doingBiasEstimation");
    v5 = *((_DWORD *)this + 24);
    if ((v5 & 0x20000) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_23;
    }
  }
  else if ((v5 & 0x20000) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "doingYawCorrection");
  v5 = *((_DWORD *)this + 24);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "magneticFieldCalibrationLevel");
  v5 = *((_DWORD *)this + 24);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "magneticFieldX", *((float *)this + 13));
  v5 = *((_DWORD *)this + 24);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "magneticFieldY", *((float *)this + 14));
  v5 = *((_DWORD *)this + 24);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0)
      goto LABEL_8;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "magneticFieldZ", *((float *)this + 15));
  v5 = *((_DWORD *)this + 24);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 2) == 0)
      goto LABEL_9;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "quaternionW", *((double *)this + 1));
  v5 = *((_DWORD *)this + 24);
  if ((v5 & 2) == 0)
  {
LABEL_9:
    if ((v5 & 4) == 0)
      goto LABEL_10;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "quaternionX", *((double *)this + 2));
  v5 = *((_DWORD *)this + 24);
  if ((v5 & 4) == 0)
  {
LABEL_10:
    if ((v5 & 8) == 0)
      goto LABEL_11;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "quaternionY", *((double *)this + 3));
  v5 = *((_DWORD *)this + 24);
  if ((v5 & 8) == 0)
  {
LABEL_11:
    if ((v5 & 0x200) == 0)
      goto LABEL_12;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "quaternionZ", *((double *)this + 4));
  v5 = *((_DWORD *)this + 24);
  if ((v5 & 0x200) == 0)
  {
LABEL_12:
    if ((v5 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "rotationRateX", *((float *)this + 16));
  v5 = *((_DWORD *)this + 24);
  if ((v5 & 0x400) == 0)
  {
LABEL_13:
    if ((v5 & 0x800) == 0)
      goto LABEL_14;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "rotationRateY", *((float *)this + 17));
  v5 = *((_DWORD *)this + 24);
  if ((v5 & 0x800) == 0)
  {
LABEL_14:
    if ((v5 & 0x10) == 0)
      goto LABEL_15;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "rotationRateZ", *((float *)this + 18));
  v5 = *((_DWORD *)this + 24);
  if ((v5 & 0x10) == 0)
  {
LABEL_15:
    if ((v5 & 0x1000) == 0)
      goto LABEL_16;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 5));
  v5 = *((_DWORD *)this + 24);
  if ((v5 & 0x1000) == 0)
  {
LABEL_16:
    if ((v5 & 0x2000) == 0)
      goto LABEL_17;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "userAccelerationX", *((float *)this + 19));
  v5 = *((_DWORD *)this + 24);
  if ((v5 & 0x2000) == 0)
  {
LABEL_17:
    if ((v5 & 0x4000) == 0)
      goto LABEL_18;
LABEL_37:
    PB::TextFormatter::format(a2, "userAccelerationZ", *((float *)this + 21));
    if ((*((_DWORD *)this + 24) & 0x8000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_19;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "userAccelerationY", *((float *)this + 20));
  v5 = *((_DWORD *)this + 24);
  if ((v5 & 0x4000) != 0)
    goto LABEL_37;
LABEL_18:
  if ((v5 & 0x8000) != 0)
LABEL_19:
    PB::TextFormatter::format(a2, "variant");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::EnhancedDeviceMotion::readFrom(CMMsl::EnhancedDeviceMotion *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  int v26;
  BOOL v27;
  int v28;
  BOOL v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  unint64_t v42;
  char v43;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_115;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 24) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_65;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_38;
      case 2u:
        *((_DWORD *)this + 24) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_65;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_38;
      case 3u:
        *((_DWORD *)this + 24) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_65;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_38;
      case 4u:
        *((_DWORD *)this + 24) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_65;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_38;
      case 5u:
        *((_DWORD *)this + 24) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_65;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_38:
        v2 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_104;
      case 6u:
        *((_DWORD *)this + 24) |= 0x1000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_65;
        *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_103;
      case 7u:
        *((_DWORD *)this + 24) |= 0x2000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_65;
        *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_103;
      case 8u:
        *((_DWORD *)this + 24) |= 0x4000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_65;
        *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_103;
      case 9u:
        *((_DWORD *)this + 24) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_65;
        *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_103;
      case 0xAu:
        *((_DWORD *)this + 24) |= 0x400u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_65;
        *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_103;
      case 0xBu:
        *((_DWORD *)this + 24) |= 0x800u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_65;
        *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_103;
      case 0xCu:
        *((_DWORD *)this + 24) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_65;
        *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_103;
      case 0xDu:
        *((_DWORD *)this + 24) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_65;
        *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_103;
      case 0xEu:
        *((_DWORD *)this + 24) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_103:
          v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_104:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_65:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 0xFu:
        *((_DWORD *)this + 24) |= 0x20u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v36 = 0;
          v37 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_109;
            }
            v38 = v20++;
            v39 = *(_BYTE *)(v21 + v38);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v39 & 0x7F) << v36;
            if ((v39 & 0x80) == 0)
              break;
            v36 += 7;
            v14 = v37++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_108:
              v2 = v38 + 1;
              goto LABEL_109;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
          goto LABEL_108;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_109;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_109:
        *((_DWORD *)this + 12) = v24;
        break;
      case 0x10u:
        *((_DWORD *)this + 24) |= 0x10000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v27 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v26 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v27 = v26 != 0;
        }
        *((_BYTE *)this + 92) = v27;
        break;
      case 0x11u:
        *((_DWORD *)this + 24) |= 0x20000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v29 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v28 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v29 = v28 != 0;
        }
        *((_BYTE *)this + 93) = v29;
        break;
      case 0x12u:
        *((_DWORD *)this + 24) |= 0x8000u;
        v30 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v31 = *(_QWORD *)a2;
        if (v30 > 0xFFFFFFFFFFFFFFF5 || v30 + 10 > v2)
        {
          v40 = 0;
          v41 = 0;
          v34 = 0;
          if (v2 <= v30)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v30)
            {
              LODWORD(v34) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_114;
            }
            v42 = v30++;
            v43 = *(_BYTE *)(v31 + v42);
            *((_QWORD *)a2 + 1) = v30;
            v34 |= (unint64_t)(v43 & 0x7F) << v40;
            if ((v43 & 0x80) == 0)
              break;
            v40 += 7;
            v14 = v41++ > 8;
            if (v14)
            {
              LODWORD(v34) = 0;
LABEL_113:
              v2 = v42 + 1;
              goto LABEL_114;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v34) = 0;
          goto LABEL_113;
        }
        v32 = 0;
        v33 = 0;
        v34 = 0;
        do
        {
          v2 = v30 + 1;
          *((_QWORD *)a2 + 1) = v30 + 1;
          v35 = *(_BYTE *)(v31 + v30);
          v34 |= (unint64_t)(v35 & 0x7F) << v32;
          if ((v35 & 0x80) == 0)
            goto LABEL_114;
          v32 += 7;
          v30 = v2;
          v14 = v33++ > 8;
        }
        while (!v14);
        LODWORD(v34) = 0;
LABEL_114:
        *((_DWORD *)this + 22) = v34;
        break;
      default:
        goto LABEL_19;
    }
LABEL_115:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::EnhancedDeviceMotion::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 96);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 40));
    v4 = *(_DWORD *)(v3 + 96);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_22;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 0x1000) == 0)
      goto LABEL_7;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x1000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0)
      goto LABEL_8;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 76));
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x4000) == 0)
      goto LABEL_9;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(float *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x4000) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(float *)(v3 + 84));
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(float *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x400) == 0)
  {
LABEL_11:
    if ((v4 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(float *)(v3 + 68));
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x800) == 0)
  {
LABEL_12:
    if ((v4 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(float *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x40) == 0)
  {
LABEL_13:
    if ((v4 & 0x80) == 0)
      goto LABEL_14;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x80) == 0)
  {
LABEL_14:
    if ((v4 & 0x100) == 0)
      goto LABEL_15;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x100) == 0)
  {
LABEL_15:
    if ((v4 & 0x20) == 0)
      goto LABEL_16;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 60));
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x20) == 0)
  {
LABEL_16:
    if ((v4 & 0x10000) == 0)
      goto LABEL_17;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x10000) == 0)
  {
LABEL_17:
    if ((v4 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x20000) == 0)
  {
LABEL_18:
    if ((v4 & 0x8000) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_36:
  this = PB::Writer::write(a2);
  if ((*(_DWORD *)(v3 + 96) & 0x8000) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

BOOL CMMsl::EnhancedDeviceMotion::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 96);
  v3 = *(_DWORD *)(a2 + 96);
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(unsigned __int8 *)(a1 + 92) != *(unsigned __int8 *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(unsigned __int8 *)(a1 + 93) != *(unsigned __int8 *)(a2 + 93))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  v4 = (*(_DWORD *)(a2 + 96) & 0x8000) == 0;
  if ((v2 & 0x8000) != 0)
    return (v3 & 0x8000) != 0 && *(_DWORD *)(a1 + 88) == *(_DWORD *)(a2 + 88);
  return v4;
}

uint64_t CMMsl::EnhancedDeviceMotion::hash_value(CMMsl::EnhancedDeviceMotion *this)
{
  int v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = *((_DWORD *)this + 24);
  if ((v1 & 0x10) == 0)
  {
    v2 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_3;
LABEL_49:
    v3 = 0.0;
    if ((v1 & 4) != 0)
      goto LABEL_6;
LABEL_50:
    v4 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_9;
LABEL_51:
    v5 = 0.0;
    if ((v1 & 1) != 0)
      goto LABEL_12;
LABEL_52:
    v6 = 0.0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_15;
LABEL_53:
    v8 = 0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_18;
LABEL_54:
    v10 = 0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_21;
LABEL_55:
    v12 = 0;
    if ((v1 & 0x200) != 0)
      goto LABEL_24;
LABEL_56:
    v14 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_27;
LABEL_57:
    v16 = 0;
    if ((v1 & 0x800) != 0)
      goto LABEL_30;
LABEL_58:
    v18 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_33;
LABEL_59:
    v20 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_36;
LABEL_60:
    v22 = 0;
    if ((v1 & 0x100) != 0)
      goto LABEL_39;
LABEL_61:
    v24 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_42;
    goto LABEL_62;
  }
  v2 = *((double *)this + 5);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_49;
LABEL_3:
  v3 = *((double *)this + 2);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 4) == 0)
    goto LABEL_50;
LABEL_6:
  v4 = *((double *)this + 3);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_51;
LABEL_9:
  v5 = *((double *)this + 4);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_52;
LABEL_12:
  v6 = *((double *)this + 1);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((v1 & 0x1000) == 0)
    goto LABEL_53;
LABEL_15:
  v7 = *((float *)this + 19);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_54;
LABEL_18:
  v9 = *((float *)this + 20);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((v1 & 0x4000) == 0)
    goto LABEL_55;
LABEL_21:
  v11 = *((float *)this + 21);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((v1 & 0x200) == 0)
    goto LABEL_56;
LABEL_24:
  v13 = *((float *)this + 16);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((v1 & 0x400) == 0)
    goto LABEL_57;
LABEL_27:
  v15 = *((float *)this + 17);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  if ((v1 & 0x800) == 0)
    goto LABEL_58;
LABEL_30:
  v17 = *((float *)this + 18);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_59;
LABEL_33:
  v19 = *((float *)this + 13);
  v20 = LODWORD(v19);
  if (v19 == 0.0)
    v20 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_60;
LABEL_36:
  v21 = *((float *)this + 14);
  v22 = LODWORD(v21);
  if (v21 == 0.0)
    v22 = 0;
  if ((v1 & 0x100) == 0)
    goto LABEL_61;
LABEL_39:
  v23 = *((float *)this + 15);
  v24 = LODWORD(v23);
  if (v23 == 0.0)
    v24 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_42:
    v25 = *((int *)this + 12);
    if ((v1 & 0x10000) != 0)
      goto LABEL_43;
    goto LABEL_63;
  }
LABEL_62:
  v25 = 0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_43:
    v26 = *((unsigned __int8 *)this + 92);
    if ((v1 & 0x20000) != 0)
      goto LABEL_44;
LABEL_64:
    v27 = 0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_45;
LABEL_65:
    v28 = 0;
    return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28;
  }
LABEL_63:
  v26 = 0;
  if ((v1 & 0x20000) == 0)
    goto LABEL_64;
LABEL_44:
  v27 = *((unsigned __int8 *)this + 93);
  if ((v1 & 0x8000) == 0)
    goto LABEL_65;
LABEL_45:
  v28 = *((unsigned int *)this + 22);
  return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28;
}

uint64_t CMMsl::FaceBlendShapeCoefficients::FaceBlendShapeCoefficients(uint64_t this)
{
  *(_QWORD *)this = &off_25135D4E8;
  *(_DWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135D4E8;
  *(_DWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

void CMMsl::FaceBlendShapeCoefficients::~FaceBlendShapeCoefficients(CMMsl::FaceBlendShapeCoefficients *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::FaceBlendShapeCoefficients::FaceBlendShapeCoefficients(CMMsl::FaceBlendShapeCoefficients *this, const CMMsl::FaceBlendShapeCoefficients *a2)
{
  char v2;
  int v3;
  float result;

  *(_QWORD *)this = &off_25135D4E8;
  *((_DWORD *)this + 2) = 0;
  *((_DWORD *)this + 4) = 0;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v3 = *((_DWORD *)a2 + 2);
    *((_BYTE *)this + 16) = 1;
    *((_DWORD *)this + 2) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 16) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 16) & 2) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 3);
    *((_BYTE *)this + 16) = v2;
    *((float *)this + 3) = result;
  }
  return result;
}

{
  char v2;
  int v3;
  float result;

  *(_QWORD *)this = &off_25135D4E8;
  *((_DWORD *)this + 2) = 0;
  *((_DWORD *)this + 4) = 0;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v3 = *((_DWORD *)a2 + 2);
    *((_BYTE *)this + 16) = 1;
    *((_DWORD *)this + 2) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 16) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 16) & 2) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 3);
    *((_BYTE *)this + 16) = v2;
    *((float *)this + 3) = result;
  }
  return result;
}

float *CMMsl::FaceBlendShapeCoefficients::operator=(float *a1, uint64_t a2, float a3)
{
  char v4;
  int v5;
  char v6;
  int v7;
  int v8;
  int v9;
  void (**v11)(CMMsl::FaceBlendShapeCoefficients *__hidden);
  int v12;
  int v13;
  int v14;

  if (a1 != (float *)a2)
  {
    v11 = &off_25135D4E8;
    v14 = 0;
    v4 = *(_BYTE *)(a2 + 16);
    if ((v4 & 1) != 0)
    {
      v5 = *(_DWORD *)(a2 + 8);
      LOBYTE(v14) = 1;
      v6 = 3;
      if ((v4 & 2) != 0)
      {
LABEL_6:
        a3 = *(float *)(a2 + 12);
        LOBYTE(v14) = v6;
      }
    }
    else
    {
      v5 = 0;
      v6 = 2;
      if ((*(_BYTE *)(a2 + 16) & 2) != 0)
        goto LABEL_6;
    }
    v7 = *((_DWORD *)a1 + 4);
    *((_DWORD *)a1 + 4) = v14;
    v14 = v7;
    v8 = *((_DWORD *)a1 + 2);
    *((_DWORD *)a1 + 2) = v5;
    v12 = v8;
    v9 = *((_DWORD *)a1 + 3);
    a1[3] = a3;
    v13 = v9;
    PB::Base::~Base((PB::Base *)&v11);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::FaceBlendShapeCoefficients *a2, CMMsl::FaceBlendShapeCoefficients *a3)
{
  int v3;
  int v4;
  float result;

  v3 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3;
  v4 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  result = *((float *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((float *)a2 + 3) = result;
  return result;
}

float CMMsl::FaceBlendShapeCoefficients::FaceBlendShapeCoefficients(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135D4E8;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_25135D4E8;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  return result;
}

_DWORD *CMMsl::FaceBlendShapeCoefficients::operator=(_DWORD *a1, _DWORD *a2)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  void (**v10)(CMMsl::FaceBlendShapeCoefficients *__hidden);
  int v11;
  int v12;
  int v13;

  if (a1 != a2)
  {
    v10 = &off_25135D4E8;
    v3 = a2[4];
    a2[4] = 0;
    v4 = a2[2];
    v5 = a2[3];
    v6 = a1[4];
    a1[4] = v3;
    v13 = v6;
    v7 = a1[2];
    a1[2] = v4;
    v11 = v7;
    v8 = a1[3];
    a1[3] = v5;
    v12 = v8;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

uint64_t CMMsl::FaceBlendShapeCoefficients::formatText(CMMsl::FaceBlendShapeCoefficients *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 16);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "name");
    v5 = *((_BYTE *)this + 16);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "value", *((float *)this + 3));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FaceBlendShapeCoefficients::readFrom(CMMsl::FaceBlendShapeCoefficients *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  char v24;
  uint64_t result;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_30;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 16) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 3) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 16) |= 1u;
        v19 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v20 = *(_QWORD *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v2)
        {
          v26 = 0;
          v27 = 0;
          v23 = 0;
          if (v2 <= v19)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v19)
            {
              LODWORD(v23) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_47;
            }
            v28 = v19++;
            v29 = *(_BYTE *)(v20 + v28);
            *((_QWORD *)a2 + 1) = v19;
            v23 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0)
              break;
            v26 += 7;
            v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v23) = 0;
LABEL_46:
          v2 = v28 + 1;
        }
        else
        {
          v21 = 0;
          v22 = 0;
          v23 = 0;
          while (1)
          {
            v2 = v19 + 1;
            *((_QWORD *)a2 + 1) = v19 + 1;
            v24 = *(_BYTE *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0)
              break;
            v21 += 7;
            v19 = v2;
            v14 = v22++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 2) = v23;
      }
      else
      {
LABEL_30:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_30;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::FaceBlendShapeCoefficients::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 16);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 16);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 12));
  return this;
}

BOOL CMMsl::FaceBlendShapeCoefficients::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 16) & 1) == 0 || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 16) & 2) == 0;
  if ((*(_BYTE *)(a1 + 16) & 2) != 0)
    return (*(_BYTE *)(a2 + 16) & 2) != 0 && *(float *)(a1 + 12) == *(float *)(a2 + 12);
  return v2;
}

uint64_t CMMsl::FaceBlendShapeCoefficients::hash_value(CMMsl::FaceBlendShapeCoefficients *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;

  if ((*((_BYTE *)this + 16) & 1) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 16) & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v3 = 0;
    return v3 ^ v1;
  }
  v1 = *((int *)this + 2);
  if ((*((_BYTE *)this + 16) & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((float *)this + 3);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  return v3 ^ v1;
}

uint64_t CMMsl::FaceBlendShapeCoefficientsSample::FaceBlendShapeCoefficientsSample(uint64_t this)
{
  *(_QWORD *)this = &off_25135D520;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135D520;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

void CMMsl::FaceBlendShapeCoefficientsSample::~FaceBlendShapeCoefficientsSample(CMMsl::FaceBlendShapeCoefficientsSample *this)
{
  void **v2;

  *(_QWORD *)this = &off_25135D520;
  v2 = (void **)((char *)this + 8);
  sub_242910B70(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_25135D520;
  v2 = (void **)((char *)this + 8);
  sub_242910B70(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_25135D520;
  v2 = (void **)((char *)this + 8);
  sub_242910B70(&v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::FaceBlendShapeCoefficientsSample *CMMsl::FaceBlendShapeCoefficientsSample::FaceBlendShapeCoefficientsSample(CMMsl::FaceBlendShapeCoefficientsSample *this, const CMMsl::FaceBlendShapeCoefficientsSample *a2)
{
  int64x2_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  int v11;
  int v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  int64x2_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v33;
  int64x2_t v34;
  unint64_t v35;
  char *v36;

  *(_QWORD *)this = &off_25135D520;
  *((_QWORD *)this + 1) = 0;
  v3 = (int64x2_t *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 12) = 0;
  v4 = (uint64_t *)*((_QWORD *)a2 + 1);
  v5 = (uint64_t *)*((_QWORD *)a2 + 2);
  if (v4 != v5)
  {
    while (1)
    {
      v6 = *v4;
      v7 = operator new();
      v8 = v7;
      *(_QWORD *)v7 = &off_25135D4E8;
      *(_DWORD *)(v7 + 8) = 0;
      *(_DWORD *)(v7 + 16) = 0;
      v9 = *(_BYTE *)(v6 + 16);
      if ((v9 & 1) == 0)
        break;
      v11 = *(_DWORD *)(v6 + 8);
      *(_BYTE *)(v7 + 16) = 1;
      *(_DWORD *)(v7 + 8) = v11;
      v10 = 3;
      if ((v9 & 2) != 0)
        goto LABEL_6;
LABEL_7:
      v14 = (uint64_t *)*((_QWORD *)this + 2);
      v13 = *((_QWORD *)this + 3);
      if ((unint64_t)v14 >= v13)
      {
        v16 = ((uint64_t)v14 - v3->i64[0]) >> 3;
        if ((unint64_t)(v16 + 1) >> 61)
          sub_242729A44();
        v17 = v13 - v3->i64[0];
        v18 = v17 >> 2;
        if (v17 >> 2 <= (unint64_t)(v16 + 1))
          v18 = v16 + 1;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v18;
        v36 = (char *)this + 24;
        if (v19)
          v19 = (unint64_t)sub_2429112FC(v19);
        else
          v20 = 0;
        v21 = (uint64_t *)(v19 + 8 * v16);
        v22 = v19 + 8 * v20;
        v35 = v22;
        *v21 = v8;
        v15 = v21 + 1;
        v34.i64[1] = (uint64_t)(v21 + 1);
        v24 = (_QWORD *)*((_QWORD *)this + 1);
        v23 = (_QWORD *)*((_QWORD *)this + 2);
        if (v23 == v24)
        {
          v26 = vdupq_n_s64((unint64_t)v23);
        }
        else
        {
          do
          {
            v25 = *--v23;
            *v23 = 0;
            *--v21 = v25;
          }
          while (v23 != v24);
          v26 = *v3;
          v15 = (_QWORD *)v34.i64[1];
          v22 = v35;
        }
        *((_QWORD *)this + 1) = v21;
        *((_QWORD *)this + 2) = v15;
        v34 = v26;
        v27 = *((_QWORD *)this + 3);
        *((_QWORD *)this + 3) = v22;
        v35 = v27;
        v33 = v26.i64[0];
        sub_2429114EC((uint64_t)&v33);
      }
      else
      {
        *v14 = v7;
        v15 = v14 + 1;
      }
      *((_QWORD *)this + 2) = v15;
      if (++v4 == v5)
        goto LABEL_24;
    }
    v10 = 2;
    if ((*(_BYTE *)(v6 + 16) & 2) == 0)
      goto LABEL_7;
LABEL_6:
    v12 = *(_DWORD *)(v6 + 12);
    *(_BYTE *)(v7 + 16) = v10;
    *(_DWORD *)(v7 + 12) = v12;
    goto LABEL_7;
  }
LABEL_24:
  v28 = *((_BYTE *)a2 + 48);
  if ((v28 & 2) != 0)
  {
    v29 = *((_QWORD *)a2 + 5);
    *((_BYTE *)this + 48) |= 2u;
    *((_QWORD *)this + 5) = v29;
    v28 = *((_BYTE *)a2 + 48);
  }
  if ((v28 & 1) != 0)
  {
    v30 = *((_QWORD *)a2 + 4);
    *((_BYTE *)this + 48) |= 1u;
    *((_QWORD *)this + 4) = v30;
  }
  return this;
}

void sub_2427860E8(void *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  sub_2427297D4(a1);
}

uint64_t CMMsl::FaceBlendShapeCoefficientsSample::operator=(uint64_t a1, const CMMsl::FaceBlendShapeCoefficientsSample *a2)
{
  int v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  void (**v8)(CMMsl::FaceBlendShapeCoefficientsSample *__hidden);
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  int v12;
  void **v13;

  if ((const CMMsl::FaceBlendShapeCoefficientsSample *)a1 != a2)
  {
    CMMsl::FaceBlendShapeCoefficientsSample::FaceBlendShapeCoefficientsSample((CMMsl::FaceBlendShapeCoefficientsSample *)&v8, a2);
    v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v12;
    v12 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v9 = v4;
    v5 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v10;
    v10 = v5;
    v6 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v11;
    v11 = v6;
    v8 = &off_25135D520;
    v13 = (void **)&v9;
    sub_242910B70(&v13);
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::FaceBlendShapeCoefficientsSample *a2, CMMsl::FaceBlendShapeCoefficientsSample *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  v7 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v7;
  result = *((double *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((double *)a2 + 4) = result;
  return result;
}

uint64_t CMMsl::FaceBlendShapeCoefficientsSample::FaceBlendShapeCoefficientsSample(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = &off_25135D520;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  v5 = *(_QWORD **)(a1 + 8);
  if (v5)
  {
    v6 = *(_QWORD **)(a1 + 16);
    v7 = *(void **)(a1 + 8);
    if (v6 != v5)
    {
      do
      {
        v9 = *--v6;
        v8 = v9;
        *v6 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
      while (v6 != v5);
      v7 = *(void **)v4;
    }
    *(_QWORD *)(a1 + 16) = v5;
    operator delete(v7);
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = 0;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t CMMsl::FaceBlendShapeCoefficientsSample::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  void (**v8)(CMMsl::FaceBlendShapeCoefficientsSample *__hidden);
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  int v12;
  void **v13;

  if (a1 != a2)
  {
    CMMsl::FaceBlendShapeCoefficientsSample::FaceBlendShapeCoefficientsSample((uint64_t)&v8, a2);
    v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v12;
    v12 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v9 = v4;
    v5 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v10;
    v10 = v5;
    v6 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v11;
    v11 = v6;
    v8 = &off_25135D520;
    v13 = (void **)&v9;
    sub_242910B70(&v13);
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::FaceBlendShapeCoefficientsSample::formatText(CMMsl::FaceBlendShapeCoefficientsSample *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "blendShapeCoefficients");
  }
  v8 = *((_BYTE *)this + 48);
  if ((v8 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "globalMachtime", *((double *)this + 4));
    v8 = *((_BYTE *)this + 48);
  }
  if ((v8 & 2) != 0)
    PB::TextFormatter::format(a2, "localMachtime", *((double *)this + 5));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FaceBlendShapeCoefficientsSample::readFrom(CMMsl::FaceBlendShapeCoefficientsSample *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  char *v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  int64x2_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int64x2_t v44;
  unint64_t v45;
  char *v46;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (char *)this + 24;
    while (1)
    {
      v9 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v16 = 0;
        v17 = 0;
        v12 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v18 = v2 + 1;
          v19 = *(_BYTE *)(v9 + v2);
          *((_QWORD *)a2 + 1) = v18;
          v12 |= (unint64_t)(v19 & 0x7F) << v16;
          if ((v19 & 0x80) == 0)
            goto LABEL_22;
          v16 += 7;
          v2 = v18;
          v15 = v17++ > 8;
          if (v15)
            goto LABEL_20;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_20;
      }
LABEL_22:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v21 = v12 >> 3;
      if ((v12 >> 3) == 3)
        break;
      if ((_DWORD)v21 == 2)
      {
        *((_BYTE *)this + 48) |= 2u;
        v27 = *((_QWORD *)a2 + 1);
        if (v27 > 0xFFFFFFFFFFFFFFF7 || v27 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_33;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v27);
LABEL_43:
        *((_QWORD *)a2 + 1) += 8;
        goto LABEL_53;
      }
      if ((_DWORD)v21 == 1)
      {
        v22 = operator new();
        v23 = v22;
        *(_QWORD *)v22 = &off_25135D4E8;
        *(_DWORD *)(v22 + 8) = 0;
        *(_DWORD *)(v22 + 16) = 0;
        v25 = (uint64_t *)*((_QWORD *)this + 2);
        v24 = *((_QWORD *)this + 3);
        if ((unint64_t)v25 >= v24)
        {
          v29 = *((_QWORD *)this + 1);
          v30 = ((uint64_t)v25 - v29) >> 3;
          if ((unint64_t)(v30 + 1) >> 61)
            sub_242729A44();
          v31 = v24 - v29;
          v32 = v31 >> 2;
          if (v31 >> 2 <= (unint64_t)(v30 + 1))
            v32 = v30 + 1;
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
            v33 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v33 = v32;
          v46 = v8;
          if (v33)
            v33 = (unint64_t)sub_2429112FC(v33);
          else
            v34 = 0;
          v35 = (uint64_t *)(v33 + 8 * v30);
          v36 = v33 + 8 * v34;
          v45 = v36;
          *v35 = v23;
          v26 = v35 + 1;
          v44.i64[1] = (uint64_t)(v35 + 1);
          v38 = (_QWORD *)*((_QWORD *)this + 1);
          v37 = (_QWORD *)*((_QWORD *)this + 2);
          if (v37 == v38)
          {
            v40 = vdupq_n_s64((unint64_t)v37);
          }
          else
          {
            do
            {
              v39 = *--v37;
              *v37 = 0;
              *--v35 = v39;
            }
            while (v37 != v38);
            v40 = *(int64x2_t *)((char *)this + 8);
            v26 = (_QWORD *)v44.i64[1];
            v36 = v45;
          }
          *((_QWORD *)this + 1) = v35;
          *((_QWORD *)this + 2) = v26;
          v44 = v40;
          v41 = *((_QWORD *)this + 3);
          *((_QWORD *)this + 3) = v36;
          v45 = v41;
          v43 = v40.i64[0];
          sub_2429114EC((uint64_t)&v43);
        }
        else
        {
          *v25 = v22;
          v26 = v25 + 1;
        }
        *((_QWORD *)this + 2) = v26;
        v42 = *(v26 - 1);
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v42 + 16))(v42, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_20:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
LABEL_53:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    *((_BYTE *)this + 48) |= 1u;
    v28 = *((_QWORD *)a2 + 1);
    if (v28 > 0xFFFFFFFFFFFFFFF7 || v28 + 8 > *((_QWORD *)a2 + 2))
    {
LABEL_33:
      *((_BYTE *)a2 + 24) = 1;
      goto LABEL_53;
    }
    *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v28);
    goto LABEL_43;
  }
  return v4 == 0;
}

void sub_242786780(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::FaceBlendShapeCoefficientsSample::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base **v4;
  const PB::Base **v5;
  const PB::Base *v6;
  char v7;

  v3 = this;
  v4 = *(const PB::Base ***)(this + 8);
  v5 = *(const PB::Base ***)(this + 16);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::writeSubmessage(a2, v6);
  }
  v7 = *(_BYTE *)(v3 + 48);
  if ((v7 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 40));
    v7 = *(_BYTE *)(v3 + 48);
  }
  if ((v7 & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 32));
  return this;
}

BOOL CMMsl::FaceBlendShapeCoefficientsSample::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BOOL8 result;

  v2 = *(uint64_t **)(a1 + 8);
  v3 = *(uint64_t **)(a1 + 16);
  v4 = *(uint64_t **)(a2 + 8);
  if ((char *)v3 - (char *)v2 != *(_QWORD *)(a2 + 16) - (_QWORD)v4)
    return 0;
  while (v2 != v3)
  {
    result = CMMsl::FaceBlendShapeCoefficients::operator==(*v2, *v4);
    if (!result)
      return result;
    ++v2;
    ++v4;
  }
  if ((*(_BYTE *)(a1 + 48) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 48) & 2) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 48) & 2) != 0)
  {
    return 0;
  }
  result = (*(_BYTE *)(a2 + 48) & 1) == 0;
  if ((*(_BYTE *)(a1 + 48) & 1) == 0)
    return result;
  return (*(_BYTE *)(a2 + 48) & 1) != 0 && *(double *)(a1 + 32) == *(double *)(a2 + 32);
}

uint64_t CMMsl::FaceBlendShapeCoefficientsSample::hash_value(CMMsl::FaceBlendShapeCoefficientsSample *this)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  int v8;
  float v9;
  BOOL v10;
  uint64_t v11;
  double v12;
  double v13;

  v1 = (uint64_t *)*((_QWORD *)this + 1);
  v2 = (uint64_t *)*((_QWORD *)this + 2);
  if (v1 == v2)
  {
    v3 = 0;
  }
  else
  {
    v3 = 0;
    do
    {
      v5 = *v1++;
      v4 = v5;
      v6 = *(_BYTE *)(v5 + 16);
      v7 = *(int *)(v5 + 8);
      if ((v6 & 1) == 0)
        v7 = 0;
      v8 = v6 & 2;
      v9 = *(float *)(v4 + 12);
      v10 = v9 == 0.0 || v8 == 0;
      v11 = LODWORD(v9);
      if (v10)
        v11 = 0;
      v3 ^= v7 ^ v11;
    }
    while (v1 != v2);
  }
  if ((*((_BYTE *)this + 48) & 2) != 0)
  {
    v12 = *((double *)this + 5);
    if (v12 == 0.0)
      v12 = 0.0;
    if ((*((_BYTE *)this + 48) & 1) != 0)
      goto LABEL_15;
LABEL_21:
    v13 = 0.0;
    return *(_QWORD *)&v12 ^ v3 ^ *(_QWORD *)&v13;
  }
  v12 = 0.0;
  if ((*((_BYTE *)this + 48) & 1) == 0)
    goto LABEL_21;
LABEL_15:
  v13 = *((double *)this + 4);
  if (v13 == 0.0)
    v13 = 0.0;
  return *(_QWORD *)&v12 ^ v3 ^ *(_QWORD *)&v13;
}

uint64_t CMMsl::FaceCovered::FaceCovered(uint64_t this)
{
  *(_QWORD *)this = &off_25135D558;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135D558;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::FaceCovered::~FaceCovered(CMMsl::FaceCovered *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::FaceCovered::FaceCovered(uint64_t this, const CMMsl::FaceCovered *a2)
{
  char v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)this = &off_25135D558;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_BYTE *)a2 + 16);
    *(_BYTE *)(this + 20) = v2;
    *(_BYTE *)(this + 16) = v4;
  }
  return this;
}

{
  char v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)this = &off_25135D558;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_BYTE *)a2 + 16);
    *(_BYTE *)(this + 20) = v2;
    *(_BYTE *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::FaceCovered::operator=(uint64_t a1, uint64_t a2, double a3)
{
  char v3;
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  _QWORD v10[2];
  char v11;
  int v12;

  if (a1 != a2)
  {
    v10[0] = &off_25135D558;
    v12 = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      LOBYTE(v12) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        v3 = *(_BYTE *)(a2 + 16);
        LOBYTE(v12) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_6;
    }
    v7 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v12;
    v12 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    *(double *)(a1 + 8) = a3;
    v10[1] = v8;
    LOBYTE(v7) = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v3;
    v11 = v7;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::FaceCovered *a2, CMMsl::FaceCovered *a3)
{
  int v3;
  double result;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  LOBYTE(v3) = *((_BYTE *)this + 16);
  *((_BYTE *)this + 16) = *((_BYTE *)a2 + 16);
  *((_BYTE *)a2 + 16) = v3;
  return result;
}

double CMMsl::FaceCovered::FaceCovered(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135D558;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135D558;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return result;
}

uint64_t CMMsl::FaceCovered::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  _QWORD v9[2];
  char v10;
  int v11;

  if (a1 != a2)
  {
    v9[0] = &off_25135D558;
    v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_BYTE *)(a2 + 16);
    v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    v11 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v9[1] = v7;
    LOBYTE(v3) = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v5;
    v10 = v3;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::FaceCovered::formatText(CMMsl::FaceCovered *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "isCovered");
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FaceCovered::readFrom(CMMsl::FaceCovered *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v20;
  BOOL v21;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_26;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v21 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v21 = v20 != 0;
        }
        *((_BYTE *)this + 16) = v21;
      }
      else if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_26:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_26;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::FaceCovered::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(a2);
  return this;
}

BOOL CMMsl::FaceCovered::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
  return v2;
}

uint64_t CMMsl::FaceCovered::hash_value(CMMsl::FaceCovered *this)
{
  double v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v2 = 0;
    return v2 ^ *(_QWORD *)&v1;
  }
  v1 = 0.0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((unsigned __int8 *)this + 16);
  return v2 ^ *(_QWORD *)&v1;
}

double CMMsl::FaceDownDetection::FaceDownDetection(CMMsl::FaceDownDetection *this)
{
  double result;

  *(_QWORD *)this = &off_25135D590;
  *((_DWORD *)this + 22) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_25135D590;
  *((_DWORD *)this + 22) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

void CMMsl::FaceDownDetection::~FaceDownDetection(CMMsl::FaceDownDetection *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_25135D590;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::FaceDownDetection::~FaceDownDetection(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::FaceDownDetection *CMMsl::FaceDownDetection::FaceDownDetection(CMMsl::FaceDownDetection *this, const CMMsl::FaceDownDetection *a2)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  int v7;
  int v9;
  int v10;
  char v11;
  char v12;
  int v13;
  int v14;

  *(_QWORD *)this = &off_25135D590;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (_QWORD *)((char *)this + 8);
  *((_DWORD *)this + 22) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if ((*((_BYTE *)a2 + 88) & 1) != 0)
  {
    v5 = *((_QWORD *)a2 + 7);
    *((_BYTE *)this + 88) = 1;
    *((_QWORD *)this + 7) = v5;
  }
  if (this != a2)
  {
    sub_242911380((_QWORD *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
    sub_242911380(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  }
  v6 = *((_BYTE *)a2 + 88);
  if ((v6 & 4) != 0)
  {
    v9 = *((_DWORD *)a2 + 17);
    *((_BYTE *)this + 88) |= 4u;
    *((_DWORD *)this + 17) = v9;
    v6 = *((_BYTE *)a2 + 88);
    if ((v6 & 8) == 0)
    {
LABEL_7:
      if ((v6 & 0x40) == 0)
        goto LABEL_8;
      goto LABEL_16;
    }
  }
  else if ((*((_BYTE *)a2 + 88) & 8) == 0)
  {
    goto LABEL_7;
  }
  v10 = *((_DWORD *)a2 + 18);
  *((_BYTE *)this + 88) |= 8u;
  *((_DWORD *)this + 18) = v10;
  v6 = *((_BYTE *)a2 + 88);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_17;
  }
LABEL_16:
  v11 = *((_BYTE *)a2 + 84);
  *((_BYTE *)this + 88) |= 0x40u;
  *((_BYTE *)this + 84) = v11;
  v6 = *((_BYTE *)a2 + 88);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 2) == 0)
      goto LABEL_10;
    goto LABEL_18;
  }
LABEL_17:
  v12 = *((_BYTE *)a2 + 85);
  *((_BYTE *)this + 88) |= 0x80u;
  *((_BYTE *)this + 85) = v12;
  v6 = *((_BYTE *)a2 + 88);
  if ((v6 & 2) == 0)
  {
LABEL_10:
    if ((v6 & 0x10) == 0)
      goto LABEL_11;
LABEL_19:
    v14 = *((_DWORD *)a2 + 19);
    *((_BYTE *)this + 88) |= 0x10u;
    *((_DWORD *)this + 19) = v14;
    if ((*((_BYTE *)a2 + 88) & 0x20) == 0)
      return this;
    goto LABEL_12;
  }
LABEL_18:
  v13 = *((_DWORD *)a2 + 16);
  *((_BYTE *)this + 88) |= 2u;
  *((_DWORD *)this + 16) = v13;
  v6 = *((_BYTE *)a2 + 88);
  if ((v6 & 0x10) != 0)
    goto LABEL_19;
LABEL_11:
  if ((v6 & 0x20) != 0)
  {
LABEL_12:
    v7 = *((_DWORD *)a2 + 20);
    *((_BYTE *)this + 88) |= 0x20u;
    *((_DWORD *)this + 20) = v7;
  }
  return this;
}

CMMsl *CMMsl::FaceDownDetection::operator=(CMMsl *a1, const CMMsl::FaceDownDetection *a2)
{
  CMMsl::FaceDownDetection *v3;
  _BYTE v5[96];

  if (a1 != a2)
  {
    CMMsl::FaceDownDetection::FaceDownDetection((CMMsl::FaceDownDetection *)v5, a2);
    CMMsl::swap(a1, (CMMsl::FaceDownDetection *)v5, v3);
    CMMsl::FaceDownDetection::~FaceDownDetection((CMMsl::FaceDownDetection *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::FaceDownDetection *a2, CMMsl::FaceDownDetection *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float result;

  v3 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v3;
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v4;
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v5;
  v6 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v6;
  v7 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v7;
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v8;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v9;
  v10 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v10;
  LODWORD(v4) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v4;
  LODWORD(v4) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v4;
  LOBYTE(v10) = *((_BYTE *)this + 84);
  *((_BYTE *)this + 84) = *((_BYTE *)a2 + 84);
  *((_BYTE *)a2 + 84) = v10;
  LOBYTE(v10) = *((_BYTE *)this + 85);
  *((_BYTE *)this + 85) = *((_BYTE *)a2 + 85);
  *((_BYTE *)a2 + 85) = v10;
  LODWORD(v10) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v10;
  LODWORD(v4) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v4;
  result = *((float *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((float *)a2 + 20) = result;
  return result;
}

uint64_t CMMsl::FaceDownDetection::FaceDownDetection(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_25135D590;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  sub_242911330(a1 + 32, (__n128 *)(a2 + 32));
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
  *(_BYTE *)(a1 + 85) = *(_BYTE *)(a2 + 85);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  return a1;
}

CMMsl *CMMsl::FaceDownDetection::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::FaceDownDetection *v3;
  _BYTE v5[96];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::FaceDownDetection::FaceDownDetection((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FaceDownDetection *)v5, v3);
    CMMsl::FaceDownDetection::~FaceDownDetection((CMMsl::FaceDownDetection *)v5);
  }
  return a1;
}

uint64_t CMMsl::FaceDownDetection::formatText(CMMsl::FaceDownDetection *this, PB::TextFormatter *a2, const char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;
  char v11;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (float *)*((_QWORD *)this + 4);
  v6 = (float *)*((_QWORD *)this + 5);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "accel", v7);
  }
  v8 = (float *)*((_QWORD *)this + 1);
  v9 = (float *)*((_QWORD *)this + 2);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(a2, "accelFiltered", v10);
  }
  v11 = *((_BYTE *)this + 88);
  if ((v11 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "faceDownState");
    v11 = *((_BYTE *)this + 88);
    if ((v11 & 4) == 0)
    {
LABEL_7:
      if ((v11 & 8) == 0)
        goto LABEL_8;
      goto LABEL_17;
    }
  }
  else if ((*((_BYTE *)this + 88) & 4) == 0)
  {
    goto LABEL_7;
  }
  PB::TextFormatter::format(a2, "gravityAngle", *((float *)this + 17));
  v11 = *((_BYTE *)this + 88);
  if ((v11 & 8) == 0)
  {
LABEL_8:
    if ((v11 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "gravityAngleVar", *((float *)this + 18));
  v11 = *((_BYTE *)this + 88);
  if ((v11 & 0x40) == 0)
  {
LABEL_9:
    if ((v11 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "isFaceDown");
  v11 = *((_BYTE *)this + 88);
  if ((v11 & 0x10) == 0)
  {
LABEL_10:
    if ((v11 & 0x20) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "pocketProbability", *((float *)this + 19));
  v11 = *((_BYTE *)this + 88);
  if ((v11 & 0x20) == 0)
  {
LABEL_11:
    if ((v11 & 0x80) == 0)
      goto LABEL_12;
LABEL_21:
    PB::TextFormatter::format(a2, "shouldSuppress");
    if ((*((_BYTE *)this + 88) & 1) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_13;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "pocketProbabilityVar", *((float *)this + 20));
  v11 = *((_BYTE *)this + 88);
  if (v11 < 0)
    goto LABEL_21;
LABEL_12:
  if ((v11 & 1) != 0)
LABEL_13:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 7));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::FaceDownDetection::readFrom(CMMsl::FaceDownDetection *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  _DWORD *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  _DWORD *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  int v54;
  BOOL v55;
  unint64_t v56;
  unint64_t v57;
  int v58;
  BOOL v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char v63;
  unsigned int v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  _DWORD *v72;
  unint64_t v73;
  char *v74;
  char v75;
  unsigned int v76;
  unint64_t v77;
  char v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  _DWORD *v91;
  int v92;
  _DWORD *v93;
  int v94;
  unint64_t v95;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_21:
      v19 = v11 & 7;
      if (v19 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 88) |= 1u;
          v20 = *((_QWORD *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_150;
          *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v20);
          v21 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_153;
        case 2u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v22 = *((_QWORD *)a2 + 1);
            v23 = *((_QWORD *)a2 + 2);
            while (v22 < v23 && !*((_BYTE *)a2 + 24))
            {
              v25 = (char *)*((_QWORD *)this + 5);
              v24 = *((_QWORD *)this + 6);
              if ((unint64_t)v25 >= v24)
              {
                v27 = (char *)*((_QWORD *)this + 4);
                v28 = (v25 - v27) >> 2;
                v29 = v28 + 1;
                if ((unint64_t)(v28 + 1) >> 62)
                  goto LABEL_163;
                v30 = v24 - (_QWORD)v27;
                if (v30 >> 1 > v29)
                  v29 = v30 >> 1;
                if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
                  v31 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v31 = v29;
                if (v31)
                {
                  v31 = (unint64_t)sub_2429114B8(v31);
                  v27 = (char *)*((_QWORD *)this + 4);
                  v25 = (char *)*((_QWORD *)this + 5);
                }
                else
                {
                  v32 = 0;
                }
                v33 = (_DWORD *)(v31 + 4 * v28);
                *v33 = 0;
                v26 = v33 + 1;
                while (v25 != v27)
                {
                  v34 = *((_DWORD *)v25 - 1);
                  v25 -= 4;
                  *--v33 = v34;
                }
                *((_QWORD *)this + 4) = v33;
                *((_QWORD *)this + 5) = v26;
                *((_QWORD *)this + 6) = v31 + 4 * v32;
                if (v27)
                  operator delete(v27);
              }
              else
              {
                *(_DWORD *)v25 = 0;
                v26 = v25 + 4;
              }
              *((_QWORD *)this + 5) = v26;
              v35 = *((_QWORD *)a2 + 1);
              if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_112;
              *(v26 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v35);
              v23 = *((_QWORD *)a2 + 2);
              v22 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v22;
            }
            goto LABEL_113;
          }
          v71 = (char *)*((_QWORD *)this + 5);
          v70 = *((_QWORD *)this + 6);
          if ((unint64_t)v71 >= v70)
          {
            v79 = (char *)*((_QWORD *)this + 4);
            v80 = (v71 - v79) >> 2;
            v81 = v80 + 1;
            if ((unint64_t)(v80 + 1) >> 62)
              goto LABEL_163;
            v82 = v70 - (_QWORD)v79;
            if (v82 >> 1 > v81)
              v81 = v82 >> 1;
            if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFFCLL)
              v83 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v83 = v81;
            if (v83)
            {
              v83 = (unint64_t)sub_2429114B8(v83);
              v79 = (char *)*((_QWORD *)this + 4);
              v71 = (char *)*((_QWORD *)this + 5);
            }
            else
            {
              v84 = 0;
            }
            v91 = (_DWORD *)(v83 + 4 * v80);
            *v91 = 0;
            v72 = v91 + 1;
            while (v71 != v79)
            {
              v92 = *((_DWORD *)v71 - 1);
              v71 -= 4;
              *--v91 = v92;
            }
            *((_QWORD *)this + 4) = v91;
            *((_QWORD *)this + 5) = v72;
            *((_QWORD *)this + 6) = v83 + 4 * v84;
            if (v79)
              operator delete(v79);
          }
          else
          {
            *(_DWORD *)v71 = 0;
            v72 = v71 + 4;
          }
          *((_QWORD *)this + 5) = v72;
          goto LABEL_148;
        case 3u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v36 = *((_QWORD *)a2 + 1);
            v37 = *((_QWORD *)a2 + 2);
            while (v36 < v37 && !*((_BYTE *)a2 + 24))
            {
              v39 = (char *)*((_QWORD *)this + 2);
              v38 = *((_QWORD *)this + 3);
              if ((unint64_t)v39 >= v38)
              {
                v41 = (char *)*((_QWORD *)this + 1);
                v42 = (v39 - v41) >> 2;
                v43 = v42 + 1;
                if ((unint64_t)(v42 + 1) >> 62)
                  goto LABEL_163;
                v44 = v38 - (_QWORD)v41;
                if (v44 >> 1 > v43)
                  v43 = v44 >> 1;
                if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL)
                  v45 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v45 = v43;
                if (v45)
                {
                  v45 = (unint64_t)sub_2429114B8(v45);
                  v41 = (char *)*((_QWORD *)this + 1);
                  v39 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v46 = 0;
                }
                v47 = (_DWORD *)(v45 + 4 * v42);
                *v47 = 0;
                v40 = v47 + 1;
                while (v39 != v41)
                {
                  v48 = *((_DWORD *)v39 - 1);
                  v39 -= 4;
                  *--v47 = v48;
                }
                *((_QWORD *)this + 1) = v47;
                *((_QWORD *)this + 2) = v40;
                *((_QWORD *)this + 3) = v45 + 4 * v46;
                if (v41)
                  operator delete(v41);
              }
              else
              {
                *(_DWORD *)v39 = 0;
                v40 = v39 + 4;
              }
              *((_QWORD *)this + 2) = v40;
              v49 = *((_QWORD *)a2 + 1);
              if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((_QWORD *)a2 + 2))
              {
LABEL_112:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v40 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v49);
              v37 = *((_QWORD *)a2 + 2);
              v36 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v36;
            }
LABEL_113:
            PB::Reader::recallMark();
          }
          else
          {
            v74 = (char *)*((_QWORD *)this + 2);
            v73 = *((_QWORD *)this + 3);
            if ((unint64_t)v74 >= v73)
            {
              v85 = (char *)*((_QWORD *)this + 1);
              v86 = (v74 - v85) >> 2;
              v87 = v86 + 1;
              if ((unint64_t)(v86 + 1) >> 62)
LABEL_163:
                sub_242729A44();
              v88 = v73 - (_QWORD)v85;
              if (v88 >> 1 > v87)
                v87 = v88 >> 1;
              if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFFCLL)
                v89 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v89 = v87;
              if (v89)
              {
                v89 = (unint64_t)sub_2429114B8(v89);
                v85 = (char *)*((_QWORD *)this + 1);
                v74 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v90 = 0;
              }
              v93 = (_DWORD *)(v89 + 4 * v86);
              *v93 = 0;
              v72 = v93 + 1;
              while (v74 != v85)
              {
                v94 = *((_DWORD *)v74 - 1);
                v74 -= 4;
                *--v93 = v94;
              }
              *((_QWORD *)this + 1) = v93;
              *((_QWORD *)this + 2) = v72;
              *((_QWORD *)this + 3) = v89 + 4 * v90;
              if (v85)
                operator delete(v85);
            }
            else
            {
              *(_DWORD *)v74 = 0;
              v72 = v74 + 4;
            }
            *((_QWORD *)this + 2) = v72;
LABEL_148:
            v95 = *((_QWORD *)a2 + 1);
            if (v95 <= 0xFFFFFFFFFFFFFFFBLL && v95 + 4 <= *((_QWORD *)a2 + 2))
            {
              *(v72 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v95);
LABEL_152:
              v21 = *((_QWORD *)a2 + 1) + 4;
LABEL_153:
              *((_QWORD *)a2 + 1) = v21;
            }
            else
            {
LABEL_150:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
          break;
        case 4u:
          *((_BYTE *)this + 88) |= 4u;
          v50 = *((_QWORD *)a2 + 1);
          if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_150;
          *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v50);
          goto LABEL_152;
        case 5u:
          *((_BYTE *)this + 88) |= 8u;
          v51 = *((_QWORD *)a2 + 1);
          if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_150;
          *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v51);
          goto LABEL_152;
        case 6u:
          *((_BYTE *)this + 88) |= 0x40u;
          v52 = *((_QWORD *)a2 + 1);
          if (v52 >= *((_QWORD *)a2 + 2))
          {
            v55 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v53 = v52 + 1;
            v54 = *(unsigned __int8 *)(*(_QWORD *)a2 + v52);
            *((_QWORD *)a2 + 1) = v53;
            v55 = v54 != 0;
          }
          *((_BYTE *)this + 84) = v55;
          goto LABEL_154;
        case 7u:
          *((_BYTE *)this + 88) |= 0x80u;
          v56 = *((_QWORD *)a2 + 1);
          if (v56 >= *((_QWORD *)a2 + 2))
          {
            v59 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v57 = v56 + 1;
            v58 = *(unsigned __int8 *)(*(_QWORD *)a2 + v56);
            *((_QWORD *)a2 + 1) = v57;
            v59 = v58 != 0;
          }
          *((_BYTE *)this + 85) = v59;
          goto LABEL_154;
        case 8u:
          *((_BYTE *)this + 88) |= 2u;
          v60 = *((_QWORD *)a2 + 1);
          v61 = *((_QWORD *)a2 + 2);
          v62 = *(_QWORD *)a2;
          if (v60 <= 0xFFFFFFFFFFFFFFF5 && v60 + 10 <= v61)
          {
            v63 = 0;
            v64 = 0;
            v65 = 0;
            do
            {
              v66 = v60 + 1;
              *((_QWORD *)a2 + 1) = v60 + 1;
              v67 = *(_BYTE *)(v62 + v60);
              v65 |= (unint64_t)(v67 & 0x7F) << v63;
              if ((v67 & 0x80) == 0)
                goto LABEL_133;
              v63 += 7;
              v60 = v66;
              v14 = v64++ > 8;
            }
            while (!v14);
LABEL_111:
            LODWORD(v65) = 0;
            goto LABEL_133;
          }
          v75 = 0;
          v76 = 0;
          v65 = 0;
          if (v61 <= v60)
            v61 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v61 == v60)
            {
              LODWORD(v65) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v77 = v60 + 1;
              v78 = *(_BYTE *)(v62 + v60);
              *((_QWORD *)a2 + 1) = v77;
              v65 |= (unint64_t)(v78 & 0x7F) << v75;
              if (v78 < 0)
              {
                v75 += 7;
                v60 = v77;
                v14 = v76++ > 8;
                if (v14)
                  goto LABEL_111;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v65) = 0;
            }
            break;
          }
LABEL_133:
          *((_DWORD *)this + 16) = v65;
          goto LABEL_154;
        case 9u:
          *((_BYTE *)this + 88) |= 0x10u;
          v68 = *((_QWORD *)a2 + 1);
          if (v68 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_150;
          *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v68);
          goto LABEL_152;
        case 0xAu:
          *((_BYTE *)this + 88) |= 0x20u;
          v69 = *((_QWORD *)a2 + 1);
          if (v69 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_150;
          *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v69);
          goto LABEL_152;
        default:
          goto LABEL_19;
      }
      goto LABEL_154;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_21;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    if ((PB::Reader::skip(a2) & 1) == 0)
      return 0;
LABEL_154:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
}

uint64_t CMMsl::FaceDownDetection::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;
  char v10;

  v3 = this;
  if ((*(_BYTE *)(this + 88) & 1) != 0)
    this = PB::Writer::write(a2, *(double *)(this + 56));
  v4 = *(float **)(v3 + 32);
  v5 = *(float **)(v3 + 40);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6);
  }
  v7 = *(float **)(v3 + 8);
  v8 = *(float **)(v3 + 16);
  while (v7 != v8)
  {
    v9 = *v7++;
    this = PB::Writer::write(a2, v9);
  }
  v10 = *(_BYTE *)(v3 + 88);
  if ((v10 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 68));
    v10 = *(_BYTE *)(v3 + 88);
    if ((v10 & 8) == 0)
    {
LABEL_11:
      if ((v10 & 0x40) == 0)
        goto LABEL_12;
      goto LABEL_19;
    }
  }
  else if ((*(_BYTE *)(v3 + 88) & 8) == 0)
  {
    goto LABEL_11;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 72));
  v10 = *(_BYTE *)(v3 + 88);
  if ((v10 & 0x40) == 0)
  {
LABEL_12:
    if ((v10 & 0x80) == 0)
      goto LABEL_13;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2);
  v10 = *(_BYTE *)(v3 + 88);
  if ((v10 & 0x80) == 0)
  {
LABEL_13:
    if ((v10 & 2) == 0)
      goto LABEL_14;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2);
  v10 = *(_BYTE *)(v3 + 88);
  if ((v10 & 2) == 0)
  {
LABEL_14:
    if ((v10 & 0x10) == 0)
      goto LABEL_15;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::writeVarInt(a2);
  v10 = *(_BYTE *)(v3 + 88);
  if ((v10 & 0x10) == 0)
  {
LABEL_15:
    if ((v10 & 0x20) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 80));
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 76));
  if ((*(_BYTE *)(v3 + 88) & 0x20) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 80));
  return this;
}

BOOL CMMsl::FaceDownDetection::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  _BOOL8 v10;

  v2 = *(unsigned __int8 *)(a1 + 88);
  v3 = *(unsigned __int8 *)(a2 + 88);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  v5 = *(float **)(a1 + 32);
  v4 = *(float **)(a1 + 40);
  v6 = *(float **)(a2 + 32);
  if ((char *)v4 - (char *)v5 != *(_QWORD *)(a2 + 40) - (_QWORD)v6)
    return 0;
  while (v5 != v4)
  {
    if (*v5 != *v6)
      return 0;
    ++v5;
    ++v6;
  }
  v8 = *(float **)(a1 + 8);
  v7 = *(float **)(a1 + 16);
  v9 = *(float **)(a2 + 8);
  if ((char *)v7 - (char *)v8 != *(_QWORD *)(a2 + 16) - (_QWORD)v9)
    return 0;
  while (v8 != v7)
  {
    if (*v8 != *v9)
      return 0;
    ++v8;
    ++v9;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(unsigned __int8 *)(a1 + 84) != *(unsigned __int8 *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v3 & v2 & 0x80) != 0)
  {
    if (*(unsigned __int8 *)(a1 + 85) != *(unsigned __int8 *)(a2 + 85))
      return 0;
  }
  else if (((v3 | v2) & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  v10 = (v3 & 0x20) == 0;
  if ((v2 & 0x20) != 0)
    return (v3 & 0x20) != 0 && *(float *)(a1 + 80) == *(float *)(a2 + 80);
  return v10;
}

uint64_t CMMsl::FaceDownDetection::hash_value(CMMsl::FaceDownDetection *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;

  if ((*((_BYTE *)this + 88) & 1) != 0)
  {
    if (*((double *)this + 7) == 0.0)
      v2 = 0;
    else
      v2 = *((_QWORD *)this + 7);
  }
  else
  {
    v2 = 0;
  }
  v3 = PBHashBytes();
  v4 = PBHashBytes();
  if ((*((_BYTE *)this + 88) & 4) == 0)
  {
    v5 = 0;
    if ((*((_BYTE *)this + 88) & 8) != 0)
      goto LABEL_8;
LABEL_23:
    v7 = 0;
    if ((*((_BYTE *)this + 88) & 0x40) != 0)
      goto LABEL_11;
    goto LABEL_24;
  }
  v15 = *((float *)this + 17);
  v5 = LODWORD(v15);
  if (v15 == 0.0)
    v5 = 0;
  if ((*((_BYTE *)this + 88) & 8) == 0)
    goto LABEL_23;
LABEL_8:
  v6 = *((float *)this + 18);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  if ((*((_BYTE *)this + 88) & 0x40) != 0)
  {
LABEL_11:
    v8 = *((unsigned __int8 *)this + 84);
    if ((*((_BYTE *)this + 88) & 0x80) != 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  v8 = 0;
  if ((*((_BYTE *)this + 88) & 0x80) != 0)
  {
LABEL_12:
    v9 = *((unsigned __int8 *)this + 85);
    if ((*((_BYTE *)this + 88) & 2) != 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  v9 = 0;
  if ((*((_BYTE *)this + 88) & 2) != 0)
  {
LABEL_13:
    v10 = *((unsigned int *)this + 16);
    if ((*((_BYTE *)this + 88) & 0x10) != 0)
      goto LABEL_14;
    goto LABEL_27;
  }
LABEL_26:
  v10 = 0;
  if ((*((_BYTE *)this + 88) & 0x10) != 0)
  {
LABEL_14:
    v11 = *((float *)this + 19);
    v12 = LODWORD(v11);
    if (v11 == 0.0)
      v12 = 0;
    if ((*((_BYTE *)this + 88) & 0x20) != 0)
      goto LABEL_17;
LABEL_28:
    v14 = 0;
    return v3 ^ v2 ^ v4 ^ v5 ^ v7 ^ v8 ^ v9 ^ v10 ^ v12 ^ v14;
  }
LABEL_27:
  v12 = 0;
  if ((*((_BYTE *)this + 88) & 0x20) == 0)
    goto LABEL_28;
LABEL_17:
  v13 = *((float *)this + 20);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  return v3 ^ v2 ^ v4 ^ v5 ^ v7 ^ v8 ^ v9 ^ v10 ^ v12 ^ v14;
}

uint64_t CMMsl::FacePose::FacePose(uint64_t this)
{
  *(_QWORD *)this = &off_25135D5C8;
  *(_DWORD *)(this + 136) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135D5C8;
  *(_DWORD *)(this + 136) = 0;
  return this;
}

void CMMsl::FacePose::~FacePose(CMMsl::FacePose *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::FacePose::FacePose(CMMsl::FacePose *this, const CMMsl::FacePose *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  char v9;
  char v10;

  *(_QWORD *)this = &off_25135D5C8;
  *((_DWORD *)this + 34) = 0;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 2) != 0)
  {
    v4 = *((_QWORD *)a2 + 2);
    v3 = 2;
    *((_DWORD *)this + 34) = 2;
    *((_QWORD *)this + 2) = v4;
    v2 = *((_DWORD *)a2 + 34);
    if ((v2 & 0x2000000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x2000000) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 29);
    v3 |= 0x2000000u;
    *((_DWORD *)this + 34) = v3;
    *((_DWORD *)this + 29) = v5;
    v2 = *((_DWORD *)a2 + 34);
  }
LABEL_6:
  if ((v2 & 0x10000) != 0)
  {
    v6 = *((_DWORD *)a2 + 20);
    v3 |= 0x10000u;
    *((_DWORD *)this + 34) = v3;
    *((_DWORD *)this + 20) = v6;
    v2 = *((_DWORD *)a2 + 34);
    if ((v2 & 0x80000) == 0)
    {
LABEL_8:
      if ((v2 & 0x100000) == 0)
        goto LABEL_9;
      goto LABEL_38;
    }
  }
  else if ((v2 & 0x80000) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 23);
  v3 |= 0x80000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 23) = v4;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x100000) == 0)
  {
LABEL_9:
    if ((v2 & 0x200000) == 0)
      goto LABEL_10;
    goto LABEL_39;
  }
LABEL_38:
  LODWORD(v4) = *((_DWORD *)a2 + 24);
  v3 |= 0x100000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 24) = v4;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x200000) == 0)
  {
LABEL_10:
    if ((v2 & 0x40000) == 0)
      goto LABEL_11;
    goto LABEL_40;
  }
LABEL_39:
  LODWORD(v4) = *((_DWORD *)a2 + 25);
  v3 |= 0x200000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 25) = v4;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x40000) == 0)
  {
LABEL_11:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_12;
    goto LABEL_41;
  }
LABEL_40:
  LODWORD(v4) = *((_DWORD *)a2 + 22);
  v3 |= 0x40000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 22) = v4;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_12:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_13;
    goto LABEL_42;
  }
LABEL_41:
  LODWORD(v4) = *((_DWORD *)a2 + 30);
  v3 |= 0x4000000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 30) = v4;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_13:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_14;
    goto LABEL_43;
  }
LABEL_42:
  LODWORD(v4) = *((_DWORD *)a2 + 31);
  v3 |= 0x8000000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 31) = v4;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_14:
    if ((v2 & 0x8000) == 0)
      goto LABEL_15;
    goto LABEL_44;
  }
LABEL_43:
  LODWORD(v4) = *((_DWORD *)a2 + 32);
  v3 |= 0x10000000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 32) = v4;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x8000) == 0)
  {
LABEL_15:
    if ((v2 & 0x20) == 0)
      goto LABEL_16;
    goto LABEL_45;
  }
LABEL_44:
  LODWORD(v4) = *((_DWORD *)a2 + 19);
  v3 |= 0x8000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 19) = v4;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x20) == 0)
  {
LABEL_16:
    if ((v2 & 0x400) == 0)
      goto LABEL_17;
    goto LABEL_46;
  }
LABEL_45:
  LODWORD(v4) = *((_DWORD *)a2 + 9);
  v3 |= 0x20u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 9) = v4;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x400) == 0)
  {
LABEL_17:
    if ((v2 & 4) == 0)
      goto LABEL_18;
    goto LABEL_47;
  }
LABEL_46:
  LODWORD(v4) = *((_DWORD *)a2 + 14);
  v3 |= 0x400u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 14) = v4;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 4) == 0)
  {
LABEL_18:
    if ((v2 & 0x10) == 0)
      goto LABEL_19;
    goto LABEL_48;
  }
LABEL_47:
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  v3 |= 4u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 6) = v4;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x10) == 0)
  {
LABEL_19:
    if ((v2 & 0x20000) == 0)
      goto LABEL_20;
    goto LABEL_49;
  }
LABEL_48:
  LODWORD(v4) = *((_DWORD *)a2 + 8);
  v3 |= 0x10u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 8) = v4;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x20000) == 0)
  {
LABEL_20:
    if ((v2 & 0x40) == 0)
      goto LABEL_21;
    goto LABEL_50;
  }
LABEL_49:
  v7 = *((_DWORD *)a2 + 21);
  v3 |= 0x20000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 21) = v7;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x40) == 0)
  {
LABEL_21:
    if ((v2 & 1) == 0)
      goto LABEL_22;
    goto LABEL_51;
  }
LABEL_50:
  v8 = *((_DWORD *)a2 + 10);
  v3 |= 0x40u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 10) = v8;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 1) == 0)
  {
LABEL_22:
    if ((v2 & 0x40000000) == 0)
      goto LABEL_23;
    goto LABEL_52;
  }
LABEL_51:
  v4 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *((_DWORD *)this + 34) = v3;
  *((_QWORD *)this + 1) = v4;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_23:
    if ((v2 & 0x20000000) == 0)
      goto LABEL_24;
    goto LABEL_53;
  }
LABEL_52:
  v9 = *((_BYTE *)a2 + 133);
  v3 |= 0x40000000u;
  *((_DWORD *)this + 34) = v3;
  *((_BYTE *)this + 133) = v9;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_24:
    if ((v2 & 8) == 0)
      goto LABEL_25;
    goto LABEL_54;
  }
LABEL_53:
  v10 = *((_BYTE *)a2 + 132);
  v3 |= 0x20000000u;
  *((_DWORD *)this + 34) = v3;
  *((_BYTE *)this + 132) = v10;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 8) == 0)
  {
LABEL_25:
    if ((v2 & 0x4000) == 0)
      goto LABEL_26;
    goto LABEL_55;
  }
LABEL_54:
  LODWORD(v4) = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 7) = v4;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x4000) == 0)
  {
LABEL_26:
    if ((v2 & 0x80) == 0)
      goto LABEL_27;
    goto LABEL_56;
  }
LABEL_55:
  LODWORD(v4) = *((_DWORD *)a2 + 18);
  v3 |= 0x4000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 18) = v4;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x80) == 0)
  {
LABEL_27:
    if ((v2 & 0x100) == 0)
      goto LABEL_28;
    goto LABEL_57;
  }
LABEL_56:
  LODWORD(v4) = *((_DWORD *)a2 + 11);
  v3 |= 0x80u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 11) = v4;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x100) == 0)
  {
LABEL_28:
    if ((v2 & 0x200) == 0)
      goto LABEL_29;
    goto LABEL_58;
  }
LABEL_57:
  LODWORD(v4) = *((_DWORD *)a2 + 12);
  v3 |= 0x100u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 12) = v4;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x200) == 0)
  {
LABEL_29:
    if ((v2 & 0x800) == 0)
      goto LABEL_30;
    goto LABEL_59;
  }
LABEL_58:
  LODWORD(v4) = *((_DWORD *)a2 + 13);
  v3 |= 0x200u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 13) = v4;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x800) == 0)
  {
LABEL_30:
    if ((v2 & 0x1000) == 0)
      goto LABEL_31;
    goto LABEL_60;
  }
LABEL_59:
  LODWORD(v4) = *((_DWORD *)a2 + 15);
  v3 |= 0x800u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 15) = v4;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x1000) == 0)
  {
LABEL_31:
    if ((v2 & 0x2000) == 0)
      goto LABEL_32;
    goto LABEL_61;
  }
LABEL_60:
  LODWORD(v4) = *((_DWORD *)a2 + 16);
  v3 |= 0x1000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 16) = v4;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x2000) == 0)
  {
LABEL_32:
    if ((v2 & 0x400000) == 0)
      goto LABEL_33;
    goto LABEL_62;
  }
LABEL_61:
  LODWORD(v4) = *((_DWORD *)a2 + 17);
  v3 |= 0x2000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 17) = v4;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x400000) == 0)
  {
LABEL_33:
    if ((v2 & 0x800000) == 0)
      goto LABEL_34;
    goto LABEL_63;
  }
LABEL_62:
  LODWORD(v4) = *((_DWORD *)a2 + 26);
  v3 |= 0x400000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 26) = v4;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x800000) == 0)
  {
LABEL_34:
    if ((v2 & 0x1000000) == 0)
      return *(float *)&v4;
    goto LABEL_64;
  }
LABEL_63:
  LODWORD(v4) = *((_DWORD *)a2 + 27);
  v3 |= 0x800000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 27) = v4;
  if ((*((_DWORD *)a2 + 34) & 0x1000000) == 0)
    return *(float *)&v4;
LABEL_64:
  LODWORD(v4) = *((_DWORD *)a2 + 28);
  *((_DWORD *)this + 34) = v3 | 0x1000000;
  *((_DWORD *)this + 28) = v4;
  return *(float *)&v4;
}

CMMsl *CMMsl::FacePose::operator=(CMMsl *a1, const CMMsl::FacePose *a2)
{
  CMMsl::FacePose *v3;
  _BYTE v5[144];

  if (a1 != a2)
  {
    CMMsl::FacePose::FacePose((CMMsl::FacePose *)v5, a2);
    CMMsl::swap(a1, (CMMsl::FacePose *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::FacePose *a2, CMMsl::FacePose *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  float result;

  v3 = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v5;
  v6 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v6;
  LODWORD(v4) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v4;
  LODWORD(v4) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v4;
  LODWORD(v4) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v4;
  LODWORD(v4) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v4;
  LODWORD(v4) = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v4;
  LODWORD(v4) = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v4;
  LODWORD(v4) = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v4;
  LODWORD(v4) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  v7 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v7;
  v8 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v8;
  v9 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v9;
  LOBYTE(v8) = *((_BYTE *)this + 133);
  *((_BYTE *)this + 133) = *((_BYTE *)a2 + 133);
  *((_BYTE *)a2 + 133) = v8;
  LOBYTE(v8) = *((_BYTE *)this + 132);
  *((_BYTE *)this + 132) = *((_BYTE *)a2 + 132);
  *((_BYTE *)a2 + 132) = v8;
  LODWORD(v9) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v9;
  LODWORD(v9) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v9;
  LODWORD(v9) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v9;
  LODWORD(v9) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v9;
  LODWORD(v9) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v9;
  LODWORD(v9) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v9;
  LODWORD(v9) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v9;
  LODWORD(v9) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v9;
  LODWORD(v9) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v9;
  LODWORD(v9) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v9;
  result = *((float *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((float *)a2 + 28) = result;
  return result;
}

float CMMsl::FacePose::FacePose(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135D5C8;
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 133) = *(_BYTE *)(a2 + 133);
  *(_BYTE *)(a1 + 132) = *(_BYTE *)(a2 + 132);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  result = *(float *)(a2 + 112);
  *(float *)(a1 + 112) = result;
  return result;
}

CMMsl *CMMsl::FacePose::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::FacePose *v3;
  _BYTE v5[144];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::FacePose::FacePose((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FacePose *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::FacePose::formatText(CMMsl::FacePose *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "aperture", *((float *)this + 6));
    v5 = *((_DWORD *)this + 34);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_36;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "confidence", *((float *)this + 7));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "ev", *((float *)this + 8));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "exposureDuration", *((float *)this + 9));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "failureCode");
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "gaze_x", *((float *)this + 11));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "gaze_y", *((float *)this + 12));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "gaze_z", *((float *)this + 13));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "iso", *((float *)this + 14));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "left_eye_x", *((float *)this + 15));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x1000) == 0)
  {
LABEL_12:
    if ((v5 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "left_eye_y", *((float *)this + 16));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x2000) == 0)
  {
LABEL_13:
    if ((v5 & 0x4000) == 0)
      goto LABEL_14;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "left_eye_z", *((float *)this + 17));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x4000) == 0)
  {
LABEL_14:
    if ((v5 & 0x8000) == 0)
      goto LABEL_15;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "lidAngle", *((float *)this + 18));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x8000) == 0)
  {
LABEL_15:
    if ((v5 & 0x10000) == 0)
      goto LABEL_16;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "lux", *((float *)this + 19));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x10000) == 0)
  {
LABEL_16:
    if ((v5 & 0x20000) == 0)
      goto LABEL_17;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "orientation");
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x20000) == 0)
  {
LABEL_17:
    if ((v5 & 0x40000) == 0)
      goto LABEL_18;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "poseLibrary");
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x40000) == 0)
  {
LABEL_18:
    if ((v5 & 0x80000) == 0)
      goto LABEL_19;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "qw", *((float *)this + 22));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x80000) == 0)
  {
LABEL_19:
    if ((v5 & 0x100000) == 0)
      goto LABEL_20;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "qx", *((float *)this + 23));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x100000) == 0)
  {
LABEL_20:
    if ((v5 & 0x200000) == 0)
      goto LABEL_21;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "qy", *((float *)this + 24));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x200000) == 0)
  {
LABEL_21:
    if ((v5 & 0x400000) == 0)
      goto LABEL_22;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "qz", *((float *)this + 25));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x400000) == 0)
  {
LABEL_22:
    if ((v5 & 0x800000) == 0)
      goto LABEL_23;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "right_eye_x", *((float *)this + 26));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x800000) == 0)
  {
LABEL_23:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_24;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "right_eye_y", *((float *)this + 27));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_24:
    if ((v5 & 1) == 0)
      goto LABEL_25;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "right_eye_z", *((float *)this + 28));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 1) == 0)
  {
LABEL_25:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_26;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "rollValue", *((double *)this + 1));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_26:
    if ((v5 & 2) == 0)
      goto LABEL_27;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "sensorCovered");
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 2) == 0)
  {
LABEL_27:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_28;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_29;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "tooDark");
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_30;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "type");
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_31;
LABEL_63:
    PB::TextFormatter::format(a2, "y", *((float *)this + 31));
    if ((*((_DWORD *)this + 34) & 0x10000000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_32;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "x", *((float *)this + 30));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x8000000) != 0)
    goto LABEL_63;
LABEL_31:
  if ((v5 & 0x10000000) != 0)
LABEL_32:
    PB::TextFormatter::format(a2, "z", *((float *)this + 32));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FacePose::readFrom(CMMsl::FacePose *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  char v43;
  int v44;
  BOOL v45;
  int v46;
  BOOL v47;
  char v48;
  unsigned int v49;
  unint64_t v50;
  char v51;
  char v52;
  unsigned int v53;
  unint64_t v54;
  char v55;
  char v56;
  unsigned int v57;
  unint64_t v58;
  char v59;
  char v60;
  unsigned int v61;
  unint64_t v62;
  char v63;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_166;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 34) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_130;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_93;
      case 2u:
        *((_DWORD *)this + 34) |= 0x2000000u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v48 = 0;
          v49 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_175;
            }
            v50 = v20++;
            v51 = *(_BYTE *)(v21 + v50);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v51 & 0x7F) << v48;
            if ((v51 & 0x80) == 0)
              break;
            v48 += 7;
            v14 = v49++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_174:
              v2 = v50 + 1;
              goto LABEL_175;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
          goto LABEL_174;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_175;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_175:
        *((_DWORD *)this + 29) = v24;
        break;
      case 3u:
        *((_DWORD *)this + 34) |= 0x10000u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v52 = 0;
          v53 = 0;
          v30 = 0;
          if (v2 <= v26)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_180;
            }
            v54 = v26++;
            v55 = *(_BYTE *)(v27 + v54);
            *((_QWORD *)a2 + 1) = v26;
            v30 |= (unint64_t)(v55 & 0x7F) << v52;
            if ((v55 & 0x80) == 0)
              break;
            v52 += 7;
            v14 = v53++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_179:
              v2 = v54 + 1;
              goto LABEL_180;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v30) = 0;
          goto LABEL_179;
        }
        v28 = 0;
        v29 = 0;
        v30 = 0;
        do
        {
          v2 = v26 + 1;
          *((_QWORD *)a2 + 1) = v26 + 1;
          v31 = *(_BYTE *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0)
            goto LABEL_180;
          v28 += 7;
          v26 = v2;
          v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_180:
        *((_DWORD *)this + 20) = v30;
        break;
      case 4u:
        *((_DWORD *)this + 34) |= 0x80000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_130;
        *((_DWORD *)this + 23) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_164;
      case 5u:
        *((_DWORD *)this + 34) |= 0x100000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_130;
        *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_164;
      case 6u:
        *((_DWORD *)this + 34) |= 0x200000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_130;
        *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_164;
      case 7u:
        *((_DWORD *)this + 34) |= 0x40000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_130;
        *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_164;
      case 8u:
        *((_DWORD *)this + 34) |= 0x4000000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_130;
        *((_DWORD *)this + 30) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_164;
      case 9u:
        *((_DWORD *)this + 34) |= 0x8000000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_130;
        *((_DWORD *)this + 31) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_164;
      case 0xAu:
        *((_DWORD *)this + 34) |= 0x10000000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_130;
        *((_DWORD *)this + 32) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_164;
      case 0xBu:
        *((_DWORD *)this + 34) |= 0x8000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_130;
        *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_164;
      case 0xCu:
        *((_DWORD *)this + 34) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_130;
        *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_164;
      case 0xDu:
        *((_DWORD *)this + 34) |= 0x400u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_130;
        *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_164;
      case 0xEu:
        *((_DWORD *)this + 34) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_130;
        *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_164;
      case 0xFu:
        *((_DWORD *)this + 34) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_130;
        *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_164;
      case 0x10u:
        *((_DWORD *)this + 34) |= 0x20000u;
        v32 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v33 = *(_QWORD *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
        {
          v56 = 0;
          v57 = 0;
          v36 = 0;
          if (v2 <= v32)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v32)
            {
              LODWORD(v36) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_185;
            }
            v58 = v32++;
            v59 = *(_BYTE *)(v33 + v58);
            *((_QWORD *)a2 + 1) = v32;
            v36 |= (unint64_t)(v59 & 0x7F) << v56;
            if ((v59 & 0x80) == 0)
              break;
            v56 += 7;
            v14 = v57++ > 8;
            if (v14)
            {
              LODWORD(v36) = 0;
LABEL_184:
              v2 = v58 + 1;
              goto LABEL_185;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v36) = 0;
          goto LABEL_184;
        }
        v34 = 0;
        v35 = 0;
        v36 = 0;
        do
        {
          v2 = v32 + 1;
          *((_QWORD *)a2 + 1) = v32 + 1;
          v37 = *(_BYTE *)(v33 + v32);
          v36 |= (unint64_t)(v37 & 0x7F) << v34;
          if ((v37 & 0x80) == 0)
            goto LABEL_185;
          v34 += 7;
          v32 = v2;
          v14 = v35++ > 8;
        }
        while (!v14);
        LODWORD(v36) = 0;
LABEL_185:
        *((_DWORD *)this + 21) = v36;
        break;
      case 0x11u:
        *((_DWORD *)this + 34) |= 0x40u;
        v38 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v39 = *(_QWORD *)a2;
        if (v38 > 0xFFFFFFFFFFFFFFF5 || v38 + 10 > v2)
        {
          v60 = 0;
          v61 = 0;
          v42 = 0;
          if (v2 <= v38)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v38)
            {
              LODWORD(v42) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_190;
            }
            v62 = v38++;
            v63 = *(_BYTE *)(v39 + v62);
            *((_QWORD *)a2 + 1) = v38;
            v42 |= (unint64_t)(v63 & 0x7F) << v60;
            if ((v63 & 0x80) == 0)
              break;
            v60 += 7;
            v14 = v61++ > 8;
            if (v14)
            {
              LODWORD(v42) = 0;
LABEL_189:
              v2 = v62 + 1;
              goto LABEL_190;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v42) = 0;
          goto LABEL_189;
        }
        v40 = 0;
        v41 = 0;
        v42 = 0;
        do
        {
          v2 = v38 + 1;
          *((_QWORD *)a2 + 1) = v38 + 1;
          v43 = *(_BYTE *)(v39 + v38);
          v42 |= (unint64_t)(v43 & 0x7F) << v40;
          if ((v43 & 0x80) == 0)
            goto LABEL_190;
          v40 += 7;
          v38 = v2;
          v14 = v41++ > 8;
        }
        while (!v14);
        LODWORD(v42) = 0;
LABEL_190:
        *((_DWORD *)this + 10) = v42;
        break;
      case 0x12u:
        *((_DWORD *)this + 34) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_130;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_93:
        v2 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_165;
      case 0x13u:
        *((_DWORD *)this + 34) |= 0x40000000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v45 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v44 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v45 = v44 != 0;
        }
        *((_BYTE *)this + 133) = v45;
        break;
      case 0x14u:
        *((_DWORD *)this + 34) |= 0x20000000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v47 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v46 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v47 = v46 != 0;
        }
        *((_BYTE *)this + 132) = v47;
        break;
      case 0x15u:
        *((_DWORD *)this + 34) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_130;
        *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_164;
      case 0x16u:
        *((_DWORD *)this + 34) |= 0x4000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_130;
        *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_164;
      case 0x17u:
        *((_DWORD *)this + 34) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_130;
        *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_164;
      case 0x18u:
        *((_DWORD *)this + 34) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_130;
        *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_164;
      case 0x19u:
        *((_DWORD *)this + 34) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_130;
        *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_164;
      case 0x1Au:
        *((_DWORD *)this + 34) |= 0x800u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_130;
        *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_164;
      case 0x1Bu:
        *((_DWORD *)this + 34) |= 0x1000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_130;
        *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_164;
      case 0x1Cu:
        *((_DWORD *)this + 34) |= 0x2000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_130;
        *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_164;
      case 0x1Du:
        *((_DWORD *)this + 34) |= 0x400000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_130;
        *((_DWORD *)this + 26) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_164;
      case 0x1Eu:
        *((_DWORD *)this + 34) |= 0x800000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_130;
        *((_DWORD *)this + 27) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_164;
      case 0x1Fu:
        *((_DWORD *)this + 34) |= 0x1000000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 28) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_164:
          v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_165:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_130:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_166:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::FacePose::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 136);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16));
    v4 = *(_DWORD *)(v3 + 136);
    if ((v4 & 0x2000000) == 0)
    {
LABEL_3:
      if ((v4 & 0x10000) == 0)
        goto LABEL_4;
      goto LABEL_35;
    }
  }
  else if ((v4 & 0x2000000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x10000) == 0)
  {
LABEL_4:
    if ((v4 & 0x80000) == 0)
      goto LABEL_5;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x80000) == 0)
  {
LABEL_5:
    if ((v4 & 0x100000) == 0)
      goto LABEL_6;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 92));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x100000) == 0)
  {
LABEL_6:
    if ((v4 & 0x200000) == 0)
      goto LABEL_7;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 96));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x200000) == 0)
  {
LABEL_7:
    if ((v4 & 0x40000) == 0)
      goto LABEL_8;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 100));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x40000) == 0)
  {
LABEL_8:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_9;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_10;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(float *)(v3 + 120));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_11;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(float *)(v3 + 124));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x8000) == 0)
      goto LABEL_12;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 128));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x8000) == 0)
  {
LABEL_12:
    if ((v4 & 0x20) == 0)
      goto LABEL_13;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(float *)(v3 + 76));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x20) == 0)
  {
LABEL_13:
    if ((v4 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x400) == 0)
  {
LABEL_14:
    if ((v4 & 4) == 0)
      goto LABEL_15;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 4) == 0)
  {
LABEL_15:
    if ((v4 & 0x10) == 0)
      goto LABEL_16;
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x10) == 0)
  {
LABEL_16:
    if ((v4 & 0x20000) == 0)
      goto LABEL_17;
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x20000) == 0)
  {
LABEL_17:
    if ((v4 & 0x40) == 0)
      goto LABEL_18;
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x40) == 0)
  {
LABEL_18:
    if ((v4 & 1) == 0)
      goto LABEL_19;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 1) == 0)
  {
LABEL_19:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_20;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_20:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_21;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_21:
    if ((v4 & 8) == 0)
      goto LABEL_22;
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 8) == 0)
  {
LABEL_22:
    if ((v4 & 0x4000) == 0)
      goto LABEL_23;
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x4000) == 0)
  {
LABEL_23:
    if ((v4 & 0x80) == 0)
      goto LABEL_24;
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::write(a2, *(float *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x80) == 0)
  {
LABEL_24:
    if ((v4 & 0x100) == 0)
      goto LABEL_25;
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x100) == 0)
  {
LABEL_25:
    if ((v4 & 0x200) == 0)
      goto LABEL_26;
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x200) == 0)
  {
LABEL_26:
    if ((v4 & 0x800) == 0)
      goto LABEL_27;
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x800) == 0)
  {
LABEL_27:
    if ((v4 & 0x1000) == 0)
      goto LABEL_28;
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::write(a2, *(float *)(v3 + 60));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x1000) == 0)
  {
LABEL_28:
    if ((v4 & 0x2000) == 0)
      goto LABEL_29;
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(float *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x2000) == 0)
  {
LABEL_29:
    if ((v4 & 0x400000) == 0)
      goto LABEL_30;
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::write(a2, *(float *)(v3 + 68));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x400000) == 0)
  {
LABEL_30:
    if ((v4 & 0x800000) == 0)
      goto LABEL_31;
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::write(a2, *(float *)(v3 + 104));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x800000) == 0)
  {
LABEL_31:
    if ((v4 & 0x1000000) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 112));
  }
LABEL_62:
  this = PB::Writer::write(a2, *(float *)(v3 + 108));
  if ((*(_DWORD *)(v3 + 136) & 0x1000000) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 112));
  return this;
}

BOOL CMMsl::FacePose::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 136);
  v3 = *(_DWORD *)(a2 + 136);
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(_DWORD *)(a1 + 116) != *(_DWORD *)(a2 + 116))
      return 0;
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124))
      return 0;
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(_DWORD *)(a1 + 84) != *(_DWORD *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(unsigned __int8 *)(a1 + 133) != *(unsigned __int8 *)(a2 + 133))
      return 0;
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(unsigned __int8 *)(a1 + 132) != *(unsigned __int8 *)(a2 + 132))
      return 0;
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x1000000) == 0;
  if ((v2 & 0x1000000) != 0)
    return (v3 & 0x1000000) != 0 && *(float *)(a1 + 112) == *(float *)(a2 + 112);
  return v4;
}

uint64_t CMMsl::FacePose::hash_value(CMMsl::FacePose *this)
{
  int v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  float v43;
  uint64_t v44;
  float v45;
  uint64_t v46;
  float v47;
  uint64_t v48;
  float v49;
  uint64_t v50;
  float v51;
  uint64_t v52;
  double v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;

  v1 = *((_DWORD *)this + 34);
  if ((v1 & 2) != 0)
  {
    v53 = *((double *)this + 2);
    if (v53 == 0.0)
      v53 = 0.0;
    v59 = v53;
    if ((v1 & 0x2000000) != 0)
    {
LABEL_3:
      v58 = *((unsigned int *)this + 29);
      if ((v1 & 0x10000) != 0)
        goto LABEL_4;
      goto LABEL_103;
    }
  }
  else
  {
    v59 = 0.0;
    if ((v1 & 0x2000000) != 0)
      goto LABEL_3;
  }
  v58 = 0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_4:
    v57 = *((unsigned int *)this + 20);
    if ((v1 & 0x80000) != 0)
      goto LABEL_5;
LABEL_104:
    v56 = 0;
    if ((v1 & 0x100000) != 0)
      goto LABEL_8;
LABEL_105:
    v55 = 0;
    if ((v1 & 0x200000) != 0)
      goto LABEL_11;
LABEL_106:
    v7 = 0;
    if ((v1 & 0x40000) != 0)
      goto LABEL_15;
LABEL_107:
    v9 = 0;
    if ((v1 & 0x4000000) != 0)
      goto LABEL_19;
LABEL_108:
    v11 = 0;
    if ((v1 & 0x8000000) != 0)
      goto LABEL_23;
LABEL_109:
    v13 = 0;
    if ((v1 & 0x10000000) != 0)
      goto LABEL_27;
LABEL_110:
    v15 = 0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_31;
LABEL_111:
    v17 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_35;
LABEL_112:
    v19 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_39;
LABEL_113:
    v21 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_43;
LABEL_114:
    v23 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_47;
LABEL_115:
    v25 = 0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_51;
    goto LABEL_116;
  }
LABEL_103:
  v57 = 0;
  if ((v1 & 0x80000) == 0)
    goto LABEL_104;
LABEL_5:
  v2 = *((float *)this + 23);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  v56 = v3;
  if ((v1 & 0x100000) == 0)
    goto LABEL_105;
LABEL_8:
  v4 = *((float *)this + 24);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  v55 = v5;
  if ((v1 & 0x200000) == 0)
    goto LABEL_106;
LABEL_11:
  v6 = *((float *)this + 25);
  if (v6 == 0.0)
    v7 = 0;
  else
    v7 = LODWORD(v6);
  if ((v1 & 0x40000) == 0)
    goto LABEL_107;
LABEL_15:
  v8 = *((float *)this + 22);
  if (v8 == 0.0)
    v9 = 0;
  else
    v9 = LODWORD(v8);
  if ((v1 & 0x4000000) == 0)
    goto LABEL_108;
LABEL_19:
  v10 = *((float *)this + 30);
  if (v10 == 0.0)
    v11 = 0;
  else
    v11 = LODWORD(v10);
  if ((v1 & 0x8000000) == 0)
    goto LABEL_109;
LABEL_23:
  v12 = *((float *)this + 31);
  if (v12 == 0.0)
    v13 = 0;
  else
    v13 = LODWORD(v12);
  if ((v1 & 0x10000000) == 0)
    goto LABEL_110;
LABEL_27:
  v14 = *((float *)this + 32);
  if (v14 == 0.0)
    v15 = 0;
  else
    v15 = LODWORD(v14);
  if ((v1 & 0x8000) == 0)
    goto LABEL_111;
LABEL_31:
  v16 = *((float *)this + 19);
  if (v16 == 0.0)
    v17 = 0;
  else
    v17 = LODWORD(v16);
  if ((v1 & 0x20) == 0)
    goto LABEL_112;
LABEL_35:
  v18 = *((float *)this + 9);
  if (v18 == 0.0)
    v19 = 0;
  else
    v19 = LODWORD(v18);
  if ((v1 & 0x400) == 0)
    goto LABEL_113;
LABEL_39:
  v20 = *((float *)this + 14);
  if (v20 == 0.0)
    v21 = 0;
  else
    v21 = LODWORD(v20);
  if ((v1 & 4) == 0)
    goto LABEL_114;
LABEL_43:
  v22 = *((float *)this + 6);
  if (v22 == 0.0)
    v23 = 0;
  else
    v23 = LODWORD(v22);
  if ((v1 & 0x10) == 0)
    goto LABEL_115;
LABEL_47:
  v24 = *((float *)this + 8);
  if (v24 == 0.0)
    v25 = 0;
  else
    v25 = LODWORD(v24);
  if ((v1 & 0x20000) != 0)
  {
LABEL_51:
    v26 = *((unsigned int *)this + 21);
    if ((v1 & 0x40) != 0)
      goto LABEL_52;
    goto LABEL_117;
  }
LABEL_116:
  v26 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_52:
    v27 = *((int *)this + 10);
    if ((v1 & 1) != 0)
      goto LABEL_53;
LABEL_118:
    v28 = 0;
    if ((v1 & 0x40000000) != 0)
      goto LABEL_57;
    goto LABEL_119;
  }
LABEL_117:
  v27 = 0;
  if ((v1 & 1) == 0)
    goto LABEL_118;
LABEL_53:
  if (*((double *)this + 1) == 0.0)
    v28 = 0;
  else
    v28 = *((_QWORD *)this + 1);
  if ((v1 & 0x40000000) != 0)
  {
LABEL_57:
    v29 = *((unsigned __int8 *)this + 133);
    if ((v1 & 0x20000000) != 0)
      goto LABEL_58;
    goto LABEL_120;
  }
LABEL_119:
  v29 = 0;
  if ((v1 & 0x20000000) != 0)
  {
LABEL_58:
    v30 = *((unsigned __int8 *)this + 132);
    if ((v1 & 8) != 0)
      goto LABEL_59;
LABEL_121:
    v32 = 0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_63;
LABEL_122:
    v34 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_67;
LABEL_123:
    v36 = 0;
    if ((v1 & 0x100) != 0)
      goto LABEL_71;
LABEL_124:
    v38 = 0;
    if ((v1 & 0x200) != 0)
      goto LABEL_75;
LABEL_125:
    v40 = 0;
    if ((v1 & 0x800) != 0)
      goto LABEL_79;
LABEL_126:
    v42 = 0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_83;
LABEL_127:
    v44 = 0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_87;
LABEL_128:
    v46 = 0;
    if ((v1 & 0x400000) != 0)
      goto LABEL_90;
LABEL_129:
    v48 = 0;
    if ((v1 & 0x800000) != 0)
      goto LABEL_93;
    goto LABEL_130;
  }
LABEL_120:
  v30 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_121;
LABEL_59:
  v31 = *((float *)this + 7);
  if (v31 == 0.0)
    v32 = 0;
  else
    v32 = LODWORD(v31);
  if ((v1 & 0x4000) == 0)
    goto LABEL_122;
LABEL_63:
  v33 = *((float *)this + 18);
  if (v33 == 0.0)
    v34 = 0;
  else
    v34 = LODWORD(v33);
  if ((v1 & 0x80) == 0)
    goto LABEL_123;
LABEL_67:
  v35 = *((float *)this + 11);
  if (v35 == 0.0)
    v36 = 0;
  else
    v36 = LODWORD(v35);
  if ((v1 & 0x100) == 0)
    goto LABEL_124;
LABEL_71:
  v37 = *((float *)this + 12);
  if (v37 == 0.0)
    v38 = 0;
  else
    v38 = LODWORD(v37);
  if ((v1 & 0x200) == 0)
    goto LABEL_125;
LABEL_75:
  v39 = *((float *)this + 13);
  if (v39 == 0.0)
    v40 = 0;
  else
    v40 = LODWORD(v39);
  if ((v1 & 0x800) == 0)
    goto LABEL_126;
LABEL_79:
  v41 = *((float *)this + 15);
  if (v41 == 0.0)
    v42 = 0;
  else
    v42 = LODWORD(v41);
  if ((v1 & 0x1000) == 0)
    goto LABEL_127;
LABEL_83:
  v43 = *((float *)this + 16);
  if (v43 == 0.0)
    v44 = 0;
  else
    v44 = LODWORD(v43);
  if ((v1 & 0x2000) == 0)
    goto LABEL_128;
LABEL_87:
  v45 = *((float *)this + 17);
  v46 = LODWORD(v45);
  if (v45 == 0.0)
    v46 = 0;
  if ((v1 & 0x400000) == 0)
    goto LABEL_129;
LABEL_90:
  v47 = *((float *)this + 26);
  v48 = LODWORD(v47);
  if (v47 == 0.0)
    v48 = 0;
  if ((v1 & 0x800000) != 0)
  {
LABEL_93:
    v49 = *((float *)this + 27);
    v50 = LODWORD(v49);
    if (v49 == 0.0)
      v50 = 0;
    if ((v1 & 0x1000000) != 0)
      goto LABEL_96;
LABEL_131:
    v52 = 0;
    return v58 ^ *(_QWORD *)&v59 ^ v57 ^ v56 ^ v55 ^ v7 ^ v9 ^ v11 ^ v13 ^ v15 ^ v17 ^ v19 ^ v21 ^ v23 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v30 ^ v32 ^ v34 ^ v36 ^ v38 ^ v40 ^ v42 ^ v44 ^ v46 ^ v48 ^ v50 ^ v52;
  }
LABEL_130:
  v50 = 0;
  if ((v1 & 0x1000000) == 0)
    goto LABEL_131;
LABEL_96:
  v51 = *((float *)this + 28);
  v52 = LODWORD(v51);
  if (v51 == 0.0)
    v52 = 0;
  return v58 ^ *(_QWORD *)&v59 ^ v57 ^ v56 ^ v55 ^ v7 ^ v9 ^ v11 ^ v13 ^ v15 ^ v17 ^ v19 ^ v21 ^ v23 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v30 ^ v32 ^ v34 ^ v36 ^ v38 ^ v40 ^ v42 ^ v44 ^ v46 ^ v48 ^ v50 ^ v52;
}

uint64_t CMMsl::FacePoseSynchronized::FacePoseSynchronized(uint64_t this)
{
  *(_QWORD *)this = &off_25135D600;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135D600;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::FacePoseSynchronized::~FacePoseSynchronized(CMMsl::FacePoseSynchronized *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_25135D600;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_25135D600;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_25135D600;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::FacePoseSynchronized *CMMsl::FacePoseSynchronized::FacePoseSynchronized(CMMsl::FacePoseSynchronized *this, const CMMsl::FacePoseSynchronized *a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  CMMsl::FacePose *v7;
  float v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)this = &off_25135D600;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  if ((*((_BYTE *)a2 + 32) & 2) == 0)
  {
    v4 = 1;
    if ((*((_BYTE *)a2 + 32) & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = *((_QWORD *)a2 + 2);
  *((_BYTE *)this + 32) = 2;
  *((_QWORD *)this + 2) = v5;
  v4 = 3;
  if ((*((_BYTE *)a2 + 32) & 1) != 0)
  {
LABEL_5:
    v6 = *((_QWORD *)a2 + 1);
    *((_BYTE *)this + 32) = v4;
    *((_QWORD *)this + 1) = v6;
  }
LABEL_6:
  if (*((_QWORD *)a2 + 3))
  {
    v7 = (CMMsl::FacePose *)operator new();
    v8 = CMMsl::FacePose::FacePose(v7, *((const CMMsl::FacePose **)a2 + 3));
    v9 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v10;
    if (v9)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v9 + 8))(v9, v8);
  }
  return this;
}

uint64_t CMMsl::FacePoseSynchronized::operator=(uint64_t a1, const CMMsl::FacePoseSynchronized *a2)
{
  int v3;
  __int128 v4;
  uint64_t v5;
  void (**v7)(CMMsl::FacePoseSynchronized *__hidden);
  __int128 v8;
  uint64_t v9;
  int v10;

  if ((const CMMsl::FacePoseSynchronized *)a1 != a2)
  {
    CMMsl::FacePoseSynchronized::FacePoseSynchronized((CMMsl::FacePoseSynchronized *)&v7, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    v10 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v4;
    v5 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v9;
    v7 = &off_25135D600;
    v9 = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::FacePoseSynchronized *a2, CMMsl::FacePoseSynchronized *a3)
{
  int v3;
  uint64_t v4;
  double result;
  uint64_t v6;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  return result;
}

uint64_t CMMsl::FacePoseSynchronized::FacePoseSynchronized(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_25135D600;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::FacePoseSynchronized::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  void (**v9)(CMMsl::FacePoseSynchronized *__hidden);
  __int128 v10;
  uint64_t v11;
  int v12;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    v4 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 24) = 0;
    v12 = *(_DWORD *)(a1 + 32);
    v5 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 32) = v3;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    v10 = v6;
    v7 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v4;
    v9 = &off_25135D600;
    v11 = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::FacePoseSynchronized::formatText(CMMsl::FacePoseSynchronized *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;
  uint64_t v6;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "globalMachtime", *((double *)this + 1));
    v5 = *((_BYTE *)this + 32);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "localMachtime", *((double *)this + 2));
  v6 = *((_QWORD *)this + 3);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FacePoseSynchronized::readFrom(CMMsl::FacePoseSynchronized *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  unint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  unint64_t v24;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_21;
          v15 += 7;
          v2 = v17;
          v14 = v16++ > 8;
          if (v14)
            goto LABEL_19;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_21:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        v22 = (_DWORD *)operator new();
        *(_QWORD *)v22 = &off_25135D5C8;
        v22[34] = 0;
        v23 = *((_QWORD *)this + 3);
        *((_QWORD *)this + 3) = v22;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
          v22 = (_DWORD *)*((_QWORD *)this + 3);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v22 + 16))(v22, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        if ((_DWORD)v20 == 2)
        {
          *((_BYTE *)this + 32) |= 1u;
          v24 = *((_QWORD *)a2 + 1);
          if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_35;
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v24);
        }
        else
        {
          if ((_DWORD)v20 != 1)
          {
LABEL_19:
            result = PB::Reader::skip(a2);
            if (!(_DWORD)result)
              return result;
            goto LABEL_38;
          }
          *((_BYTE *)this + 32) |= 2u;
          v21 = *((_QWORD *)a2 + 1);
          if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((_QWORD *)a2 + 2))
          {
LABEL_35:
            *((_BYTE *)a2 + 24) = 1;
            goto LABEL_38;
          }
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v21);
        }
        *((_QWORD *)a2 + 1) += 8;
      }
LABEL_38:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::FacePoseSynchronized::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  const PB::Base *v5;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16));
    v4 = *(_BYTE *)(v3 + 32);
  }
  if ((v4 & 1) != 0)
    this = PB::Writer::write(a2, *(double *)(v3 + 8));
  v5 = *(const PB::Base **)(v3 + 24);
  if (v5)
    return PB::Writer::writeSubmessage(a2, v5);
  return this;
}

BOOL CMMsl::FacePoseSynchronized::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a2 + 24);
  result = v3 == 0;
  if (!v2)
    return result;
  return v3 && CMMsl::FacePose::operator==(v2, v3);
}

unint64_t CMMsl::FacePoseSynchronized::hash_value(CMMsl::FacePoseSynchronized *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  if ((*((_BYTE *)this + 32) & 2) != 0)
  {
    if (*((double *)this + 2) == 0.0)
      v1 = 0;
    else
      v1 = *((_QWORD *)this + 2);
    if ((*((_BYTE *)this + 32) & 1) != 0)
      goto LABEL_3;
LABEL_10:
    v2 = 0;
    goto LABEL_11;
  }
  v1 = 0;
  if ((*((_BYTE *)this + 32) & 1) == 0)
    goto LABEL_10;
LABEL_3:
  if (*((double *)this + 1) == 0.0)
    v2 = 0;
  else
    v2 = *((_QWORD *)this + 1);
LABEL_11:
  v3 = *((_QWORD *)this + 3);
  if (v3)
    v3 = CMMsl::FacePose::hash_value((CMMsl::FacePose *)v3);
  return v2 ^ v1 ^ v3;
}

_QWORD *CMMsl::FacePoseSynchronized::makeSuper(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[3])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135D5C8;
    *(_DWORD *)(v2 + 136) = 0;
    this = (_QWORD *)v1[3];
    v1[3] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t CMMsl::FallDetectionActivityClassifierReplay::FallDetectionActivityClassifierReplay(uint64_t this)
{
  *(_QWORD *)this = &off_25135D638;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135D638;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::FallDetectionActivityClassifierReplay::~FallDetectionActivityClassifierReplay(CMMsl::FallDetectionActivityClassifierReplay *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::FallDetectionActivityClassifierReplay::FallDetectionActivityClassifierReplay(CMMsl::FallDetectionActivityClassifierReplay *this, const CMMsl::FallDetectionActivityClassifierReplay *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  float result;

  *(_QWORD *)this = &off_25135D638;
  *((_DWORD *)this + 8) = 0;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 32) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 32) & 0x10) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 7);
    v3 |= 0x10u;
    *((_BYTE *)this + 32) = v3;
    *((_DWORD *)this + 7) = v5;
    v2 = *((_BYTE *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((_BYTE *)this + 32) = v3;
    *((_DWORD *)this + 4) = v6;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        return result;
LABEL_12:
      result = *((float *)a2 + 6);
      *((_BYTE *)this + 32) = v3 | 8;
      *((float *)this + 6) = result;
      return result;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *((_BYTE *)this + 32) = v3;
  *((_DWORD *)this + 5) = v7;
  if ((*((_BYTE *)a2 + 32) & 8) != 0)
    goto LABEL_12;
  return result;
}

uint64_t CMMsl::FallDetectionActivityClassifierReplay::operator=(uint64_t a1, const CMMsl::FallDetectionActivityClassifierReplay *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  if ((const CMMsl::FallDetectionActivityClassifierReplay *)a1 != a2)
  {
    CMMsl::FallDetectionActivityClassifierReplay::FallDetectionActivityClassifierReplay((CMMsl::FallDetectionActivityClassifierReplay *)v8, a2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    v9 = v3;
    v4 = *(_QWORD *)(a1 + 28);
    *(_QWORD *)(a1 + 28) = v12;
    v12 = v4;
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v10;
    v10 = v5;
    v6 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v11;
    v11 = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::FallDetectionActivityClassifierReplay *a2, CMMsl::FallDetectionActivityClassifierReplay *a3)
{
  int v3;
  uint64_t v4;
  float result;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  return result;
}

float CMMsl::FallDetectionActivityClassifierReplay::FallDetectionActivityClassifierReplay(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135D638;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_25135D638;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

uint64_t CMMsl::FallDetectionActivityClassifierReplay::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  int v11;
  uint64_t v12;

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(_DWORD *)(a2 + 24);
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 32) = 0;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v10[0] = &off_25135D638;
    v10[1] = v7;
    v12 = *(_QWORD *)(a1 + 28);
    v8 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 28) = v6;
    *(_QWORD *)(a1 + 16) = v5;
    v10[2] = v8;
    LODWORD(v5) = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v4;
    v11 = v5;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::FallDetectionActivityClassifierReplay::formatText(CMMsl::FallDetectionActivityClassifierReplay *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "cyclingState");
    v5 = *((_BYTE *)this + 32);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*((_BYTE *)this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "cyclingStateSummary");
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(a2, "motionType");
    if ((*((_BYTE *)this + 32) & 1) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(a2, "distanceTraveledOverTimeWindow", *((float *)this + 6));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 0x10) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 1) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "timestamp");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FallDetectionActivityClassifierReplay::readFrom(CMMsl::FallDetectionActivityClassifierReplay *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_26;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_21;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_26:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 32) |= 1u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v45 = 0;
          v46 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v21)
            {
              v25 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_92;
            }
            v47 = v21++;
            v48 = *(_BYTE *)(v22 + v47);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v48 & 0x7F) << v45;
            if ((v48 & 0x80) == 0)
              break;
            v45 += 7;
            v14 = v46++ > 8;
            if (v14)
            {
              v25 = 0;
LABEL_91:
              v2 = v47 + 1;
              goto LABEL_92;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v25 = 0;
          goto LABEL_91;
        }
        v23 = 0;
        v24 = 0;
        v25 = 0;
        do
        {
          v2 = v21 + 1;
          *((_QWORD *)a2 + 1) = v21 + 1;
          v26 = *(_BYTE *)(v22 + v21);
          v25 |= (unint64_t)(v26 & 0x7F) << v23;
          if ((v26 & 0x80) == 0)
            goto LABEL_92;
          v23 += 7;
          v21 = v2;
          v14 = v24++ > 8;
        }
        while (!v14);
        v25 = 0;
LABEL_92:
        *((_QWORD *)this + 1) = v25;
        break;
      case 2u:
        *((_BYTE *)this + 32) |= 0x10u;
        v27 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v28 = *(_QWORD *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v49 = 0;
          v50 = 0;
          v31 = 0;
          if (v2 <= v27)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_97;
            }
            v51 = v27++;
            v52 = *(_BYTE *)(v28 + v51);
            *((_QWORD *)a2 + 1) = v27;
            v31 |= (unint64_t)(v52 & 0x7F) << v49;
            if ((v52 & 0x80) == 0)
              break;
            v49 += 7;
            v14 = v50++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
LABEL_96:
              v2 = v51 + 1;
              goto LABEL_97;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v31) = 0;
          goto LABEL_96;
        }
        v29 = 0;
        v30 = 0;
        v31 = 0;
        do
        {
          v2 = v27 + 1;
          *((_QWORD *)a2 + 1) = v27 + 1;
          v32 = *(_BYTE *)(v28 + v27);
          v31 |= (unint64_t)(v32 & 0x7F) << v29;
          if ((v32 & 0x80) == 0)
            goto LABEL_97;
          v29 += 7;
          v27 = v2;
          v14 = v30++ > 8;
        }
        while (!v14);
        LODWORD(v31) = 0;
LABEL_97:
        *((_DWORD *)this + 7) = v31;
        break;
      case 3u:
        *((_BYTE *)this + 32) |= 2u;
        v33 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v34 = *(_QWORD *)a2;
        if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
        {
          v53 = 0;
          v54 = 0;
          v37 = 0;
          if (v2 <= v33)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v33)
            {
              LODWORD(v37) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_102;
            }
            v55 = v33++;
            v56 = *(_BYTE *)(v34 + v55);
            *((_QWORD *)a2 + 1) = v33;
            v37 |= (unint64_t)(v56 & 0x7F) << v53;
            if ((v56 & 0x80) == 0)
              break;
            v53 += 7;
            v14 = v54++ > 8;
            if (v14)
            {
              LODWORD(v37) = 0;
LABEL_101:
              v2 = v55 + 1;
              goto LABEL_102;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v37) = 0;
          goto LABEL_101;
        }
        v35 = 0;
        v36 = 0;
        v37 = 0;
        do
        {
          v2 = v33 + 1;
          *((_QWORD *)a2 + 1) = v33 + 1;
          v38 = *(_BYTE *)(v34 + v33);
          v37 |= (unint64_t)(v38 & 0x7F) << v35;
          if ((v38 & 0x80) == 0)
            goto LABEL_102;
          v35 += 7;
          v33 = v2;
          v14 = v36++ > 8;
        }
        while (!v14);
        LODWORD(v37) = 0;
LABEL_102:
        *((_DWORD *)this + 4) = v37;
        break;
      case 4u:
        *((_BYTE *)this + 32) |= 4u;
        v39 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v40 = *(_QWORD *)a2;
        if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
        {
          v57 = 0;
          v58 = 0;
          v43 = 0;
          if (v2 <= v39)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v39)
            {
              LODWORD(v43) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_107;
            }
            v59 = v39++;
            v60 = *(_BYTE *)(v40 + v59);
            *((_QWORD *)a2 + 1) = v39;
            v43 |= (unint64_t)(v60 & 0x7F) << v57;
            if ((v60 & 0x80) == 0)
              break;
            v57 += 7;
            v14 = v58++ > 8;
            if (v14)
            {
              LODWORD(v43) = 0;
LABEL_106:
              v2 = v59 + 1;
              goto LABEL_107;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v43) = 0;
          goto LABEL_106;
        }
        v41 = 0;
        v42 = 0;
        v43 = 0;
        do
        {
          v2 = v39 + 1;
          *((_QWORD *)a2 + 1) = v39 + 1;
          v44 = *(_BYTE *)(v40 + v39);
          v43 |= (unint64_t)(v44 & 0x7F) << v41;
          if ((v44 & 0x80) == 0)
            goto LABEL_107;
          v41 += 7;
          v39 = v2;
          v14 = v42++ > 8;
        }
        while (!v14);
        LODWORD(v43) = 0;
LABEL_107:
        *((_DWORD *)this + 5) = v43;
        break;
      case 5u:
        *((_BYTE *)this + 32) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_21:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::FallDetectionActivityClassifierReplay::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(this + 32) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 24));
  }
LABEL_10:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_BYTE *)(v3 + 32) & 8) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 24));
  return this;
}

BOOL CMMsl::FallDetectionActivityClassifierReplay::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 0x10) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 32) & 8) == 0;
  if ((*(_BYTE *)(a1 + 32) & 8) != 0)
    return (*(_BYTE *)(a2 + 32) & 8) != 0 && *(float *)(a1 + 24) == *(float *)(a2 + 24);
  return v2;
}

uint64_t CMMsl::FallDetectionActivityClassifierReplay::hash_value(CMMsl::FallDetectionActivityClassifierReplay *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  uint64_t v6;

  if ((*((_BYTE *)this + 32) & 1) != 0)
  {
    v1 = *((_QWORD *)this + 1);
    if ((*((_BYTE *)this + 32) & 0x10) != 0)
    {
LABEL_3:
      v2 = *((int *)this + 7);
      if ((*((_BYTE *)this + 32) & 2) != 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else
  {
    v1 = 0;
    if ((*((_BYTE *)this + 32) & 0x10) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 32) & 2) != 0)
  {
LABEL_4:
    v3 = *((int *)this + 4);
    if ((*((_BYTE *)this + 32) & 4) != 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  v3 = 0;
  if ((*((_BYTE *)this + 32) & 4) != 0)
  {
LABEL_5:
    v4 = *((int *)this + 5);
    if ((*((_BYTE *)this + 32) & 8) != 0)
      goto LABEL_6;
LABEL_13:
    v6 = 0;
    return v2 ^ v1 ^ v3 ^ v4 ^ v6;
  }
LABEL_12:
  v4 = 0;
  if ((*((_BYTE *)this + 32) & 8) == 0)
    goto LABEL_13;
LABEL_6:
  v5 = *((float *)this + 6);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  return v2 ^ v1 ^ v3 ^ v4 ^ v6;
}

_QWORD *CMMsl::FallDetectionDetector::FallDetectionDetector(_QWORD *this)
{
  *this = &off_25135D670;
  *(_QWORD *)((char *)this + 156) = 0;
  return this;
}

{
  *this = &off_25135D670;
  *(_QWORD *)((char *)this + 156) = 0;
  return this;
}

void CMMsl::FallDetectionDetector::~FallDetectionDetector(CMMsl::FallDetectionDetector *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::FallDetectionDetector::FallDetectionDetector(CMMsl::FallDetectionDetector *this, const CMMsl::FallDetectionDetector *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v8;
  int v9;
  char v10;
  char v11;
  int v12;
  char v13;

  *(_QWORD *)this = &off_25135D670;
  *(_QWORD *)((char *)this + 156) = 0;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_QWORD *)((char *)this + 156) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *(_QWORD *)((char *)a2 + 156);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 4) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 3);
    v3 |= 4uLL;
    *(_QWORD *)((char *)this + 156) = v3;
    *((_QWORD *)this + 3) = v5;
    v2 = *(_QWORD *)((char *)a2 + 156);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *((_QWORD *)a2 + 2);
    v3 |= 2uLL;
    *(_QWORD *)((char *)this + 156) = v3;
    *((_QWORD *)this + 2) = v6;
    v2 = *(_QWORD *)((char *)a2 + 156);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_44;
    }
  }
  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 11);
  v3 |= 0x40uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 11) = v4;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 0x20000) == 0)
      goto LABEL_10;
    goto LABEL_45;
  }
LABEL_44:
  LODWORD(v4) = *((_DWORD *)a2 + 10);
  v3 |= 0x20uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 10) = v4;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x20000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_46;
  }
LABEL_45:
  LODWORD(v4) = *((_DWORD *)a2 + 22);
  v3 |= 0x20000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 22) = v4;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x2000) == 0)
  {
LABEL_11:
    if ((v2 & 0x10000) == 0)
      goto LABEL_12;
    goto LABEL_47;
  }
LABEL_46:
  LODWORD(v4) = *((_DWORD *)a2 + 18);
  v3 |= 0x2000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 18) = v4;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x10000) == 0)
  {
LABEL_12:
    if ((v2 & 0x80000) == 0)
      goto LABEL_13;
    goto LABEL_48;
  }
LABEL_47:
  LODWORD(v4) = *((_DWORD *)a2 + 21);
  v3 |= 0x10000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 21) = v4;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x80000) == 0)
  {
LABEL_13:
    if ((v2 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_49;
  }
LABEL_48:
  LODWORD(v4) = *((_DWORD *)a2 + 24);
  v3 |= 0x80000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 24) = v4;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x10) == 0)
  {
LABEL_14:
    if ((v2 & 0x8000) == 0)
      goto LABEL_15;
    goto LABEL_50;
  }
LABEL_49:
  LODWORD(v4) = *((_DWORD *)a2 + 9);
  v3 |= 0x10uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 9) = v4;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x8000) == 0)
  {
LABEL_15:
    if ((v2 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_51;
  }
LABEL_50:
  LODWORD(v4) = *((_DWORD *)a2 + 20);
  v3 |= 0x8000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 20) = v4;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x4000) == 0)
  {
LABEL_16:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_17;
    goto LABEL_52;
  }
LABEL_51:
  LODWORD(v4) = *((_DWORD *)a2 + 19);
  v3 |= 0x4000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 19) = v4;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_18;
    goto LABEL_53;
  }
LABEL_52:
  LODWORD(v4) = *((_DWORD *)a2 + 31);
  v3 |= 0x4000000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 31) = v4;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x40000000) == 0)
      goto LABEL_19;
    goto LABEL_54;
  }
LABEL_53:
  LODWORD(v4) = *((_DWORD *)a2 + 33);
  v3 |= 0x10000000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 33) = v4;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_19:
    if ((v2 & 0x20000000) == 0)
      goto LABEL_20;
    goto LABEL_55;
  }
LABEL_54:
  LODWORD(v4) = *((_DWORD *)a2 + 35);
  v3 |= 0x40000000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 35) = v4;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_20:
    if ((v2 & 0x80) == 0)
      goto LABEL_21;
    goto LABEL_56;
  }
LABEL_55:
  LODWORD(v4) = *((_DWORD *)a2 + 34);
  v3 |= 0x20000000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 34) = v4;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x80) == 0)
  {
LABEL_21:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_22;
    goto LABEL_57;
  }
LABEL_56:
  v7 = *((_DWORD *)a2 + 12);
  v3 |= 0x80uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 12) = v7;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_22:
    if ((v2 & 0x200000000) == 0)
      goto LABEL_23;
    goto LABEL_58;
  }
LABEL_57:
  LODWORD(v4) = *((_DWORD *)a2 + 32);
  v3 |= 0x8000000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 32) = v4;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x200000000) == 0)
  {
LABEL_23:
    if ((v2 & 0x100000000) == 0)
      goto LABEL_24;
    goto LABEL_59;
  }
LABEL_58:
  v8 = *((_BYTE *)a2 + 152);
  v3 |= 0x200000000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_BYTE *)this + 152) = v8;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x100000000) == 0)
  {
LABEL_24:
    if ((v2 & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_60;
  }
LABEL_59:
  v9 = *((_DWORD *)a2 + 37);
  v3 |= 0x100000000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 37) = v9;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_25:
    if ((v2 & 0x400) == 0)
      goto LABEL_26;
    goto LABEL_61;
  }
LABEL_60:
  LODWORD(v4) = *((_DWORD *)a2 + 36);
  v3 |= 0x80000000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 36) = v4;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x400) == 0)
  {
LABEL_26:
    if ((v2 & 0x800) == 0)
      goto LABEL_27;
    goto LABEL_62;
  }
LABEL_61:
  LODWORD(v4) = *((_DWORD *)a2 + 15);
  v3 |= 0x400uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 15) = v4;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x800) == 0)
  {
LABEL_27:
    if ((v2 & 0x1000) == 0)
      goto LABEL_28;
    goto LABEL_63;
  }
LABEL_62:
  LODWORD(v4) = *((_DWORD *)a2 + 16);
  v3 |= 0x800uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 16) = v4;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x1000) == 0)
  {
LABEL_28:
    if ((v2 & 0x400000000) == 0)
      goto LABEL_29;
    goto LABEL_64;
  }
LABEL_63:
  LODWORD(v4) = *((_DWORD *)a2 + 17);
  v3 |= 0x1000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 17) = v4;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x400000000) == 0)
  {
LABEL_29:
    if ((v2 & 0x800000) == 0)
      goto LABEL_30;
    goto LABEL_65;
  }
LABEL_64:
  v10 = *((_BYTE *)a2 + 153);
  v3 |= 0x400000000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_BYTE *)this + 153) = v10;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x800000) == 0)
  {
LABEL_30:
    if ((v2 & 0x400000) == 0)
      goto LABEL_31;
    goto LABEL_66;
  }
LABEL_65:
  LODWORD(v4) = *((_DWORD *)a2 + 28);
  v3 |= 0x800000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 28) = v4;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x400000) == 0)
  {
LABEL_31:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_32;
    goto LABEL_67;
  }
LABEL_66:
  LODWORD(v4) = *((_DWORD *)a2 + 27);
  v3 |= 0x400000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 27) = v4;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_32:
    if ((v2 & 0x200000) == 0)
      goto LABEL_33;
    goto LABEL_68;
  }
LABEL_67:
  LODWORD(v4) = *((_DWORD *)a2 + 29);
  v3 |= 0x1000000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 29) = v4;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x200000) == 0)
  {
LABEL_33:
    if ((v2 & 0x1000000000) == 0)
      goto LABEL_34;
    goto LABEL_69;
  }
LABEL_68:
  LODWORD(v4) = *((_DWORD *)a2 + 26);
  v3 |= 0x200000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 26) = v4;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x1000000000) == 0)
  {
LABEL_34:
    if ((v2 & 0x100000) == 0)
      goto LABEL_35;
    goto LABEL_70;
  }
LABEL_69:
  v11 = *((_BYTE *)a2 + 155);
  v3 |= 0x1000000000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_BYTE *)this + 155) = v11;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x100000) == 0)
  {
LABEL_35:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_36;
    goto LABEL_71;
  }
LABEL_70:
  LODWORD(v4) = *((_DWORD *)a2 + 25);
  v3 |= 0x100000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 25) = v4;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_36:
    if ((v2 & 0x200) == 0)
      goto LABEL_37;
    goto LABEL_72;
  }
LABEL_71:
  v12 = *((_DWORD *)a2 + 30);
  v3 |= 0x2000000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 30) = v12;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x200) == 0)
  {
LABEL_37:
    if ((v2 & 0x100) == 0)
      goto LABEL_38;
    goto LABEL_73;
  }
LABEL_72:
  LODWORD(v4) = *((_DWORD *)a2 + 14);
  v3 |= 0x200uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 14) = v4;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x100) == 0)
  {
LABEL_38:
    if ((v2 & 0x800000000) == 0)
      goto LABEL_39;
    goto LABEL_74;
  }
LABEL_73:
  LODWORD(v4) = *((_DWORD *)a2 + 13);
  v3 |= 0x100uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 13) = v4;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x800000000) == 0)
  {
LABEL_39:
    if ((v2 & 0x40000) == 0)
      goto LABEL_40;
    goto LABEL_75;
  }
LABEL_74:
  v13 = *((_BYTE *)a2 + 154);
  v3 |= 0x800000000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_BYTE *)this + 154) = v13;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x40000) == 0)
  {
LABEL_40:
    if ((v2 & 8) == 0)
      return *(float *)&v4;
    goto LABEL_76;
  }
LABEL_75:
  LODWORD(v4) = *((_DWORD *)a2 + 23);
  v3 |= 0x40000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 23) = v4;
  if ((*(_QWORD *)((_BYTE *)a2 + 156) & 8) == 0)
    return *(float *)&v4;
LABEL_76:
  LODWORD(v4) = *((_DWORD *)a2 + 8);
  *(_QWORD *)((char *)this + 156) = v3 | 8;
  *((_DWORD *)this + 8) = v4;
  return *(float *)&v4;
}

CMMsl *CMMsl::FallDetectionDetector::operator=(CMMsl *a1, const CMMsl::FallDetectionDetector *a2)
{
  CMMsl::FallDetectionDetector *v3;
  _BYTE v5[168];

  if (a1 != a2)
  {
    CMMsl::FallDetectionDetector::FallDetectionDetector((CMMsl::FallDetectionDetector *)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallDetectionDetector *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::FallDetectionDetector *a2, CMMsl::FallDetectionDetector *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float result;

  v3 = *(_QWORD *)((char *)this + 156);
  *(_QWORD *)((char *)this + 156) = *(_QWORD *)((char *)a2 + 156);
  *(_QWORD *)((char *)a2 + 156) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v4;
  LODWORD(v4) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v4;
  LODWORD(v4) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v4;
  LODWORD(v4) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v4;
  LODWORD(v4) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v4;
  LODWORD(v4) = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v4;
  LODWORD(v4) = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v4;
  LODWORD(v4) = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v4;
  LODWORD(v4) = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v4;
  LODWORD(v6) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v6;
  LODWORD(v4) = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v4;
  LOBYTE(v6) = *((_BYTE *)this + 152);
  *((_BYTE *)this + 152) = *((_BYTE *)a2 + 152);
  *((_BYTE *)a2 + 152) = v6;
  LODWORD(v6) = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v6;
  LODWORD(v4) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v4;
  LODWORD(v4) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  LODWORD(v4) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v4;
  LODWORD(v4) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v4;
  LOBYTE(v6) = *((_BYTE *)this + 153);
  *((_BYTE *)this + 153) = *((_BYTE *)a2 + 153);
  *((_BYTE *)a2 + 153) = v6;
  LODWORD(v4) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v4;
  LODWORD(v4) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v4;
  LODWORD(v4) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v4;
  LODWORD(v4) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v4;
  LOBYTE(v6) = *((_BYTE *)this + 155);
  *((_BYTE *)this + 155) = *((_BYTE *)a2 + 155);
  *((_BYTE *)a2 + 155) = v6;
  LODWORD(v4) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v4;
  LODWORD(v6) = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v6;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  LOBYTE(v6) = *((_BYTE *)this + 154);
  *((_BYTE *)this + 154) = *((_BYTE *)a2 + 154);
  *((_BYTE *)a2 + 154) = v6;
  LODWORD(v4) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v4;
  result = *((float *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((float *)a2 + 8) = result;
  return result;
}

float CMMsl::FallDetectionDetector::FallDetectionDetector(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135D670;
  *(_QWORD *)(a1 + 156) = *(_QWORD *)(a2 + 156);
  *(_QWORD *)(a2 + 156) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 155) = *(_BYTE *)(a2 + 155);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_BYTE *)(a1 + 154) = *(_BYTE *)(a2 + 154);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  result = *(float *)(a2 + 32);
  *(float *)(a1 + 32) = result;
  return result;
}

CMMsl *CMMsl::FallDetectionDetector::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::FallDetectionDetector *v3;
  _BYTE v5[168];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::FallDetectionDetector::FallDetectionDetector((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallDetectionDetector *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::FallDetectionDetector::formatText(CMMsl::FallDetectionDetector *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "abruptGravityChangeAngle", *((float *)this + 8));
    v5 = *(_QWORD *)((char *)this + 156);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_42;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "accelPathLength", *((float *)this + 9));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "angleChangePostImpact", *((float *)this + 10));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "angleChangePreImpact", *((float *)this + 11));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "crown");
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 0x200) == 0)
      goto LABEL_8;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "crownVariance", *((float *)this + 13));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x200) == 0)
  {
LABEL_8:
    if ((v5 & 1) == 0)
      goto LABEL_9;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "gravityVariance", *((float *)this + 14));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 1) == 0)
  {
LABEL_9:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_10;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "iostime", *((double *)this + 1));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x400000000) == 0)
      goto LABEL_11;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "isFall");
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "isNearFall");
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "maxAbsX", *((float *)this + 15));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "maxAbsY", *((float *)this + 16));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "maxAbsZ", *((float *)this + 17));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "maxAccelNorm", *((float *)this + 18));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "maxAngleChangePostImpact", *((float *)this + 19));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "maxAngleChangePreImpact", *((float *)this + 20));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "maxJerkVM", *((float *)this + 21));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "maxMinusMin", *((float *)this + 22));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "medianAbsGravityY", *((float *)this + 23));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0)
      goto LABEL_22;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "minInertialZ", *((float *)this + 24));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0)
      goto LABEL_23;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "minInertialZHighFreq", *((float *)this + 25));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x200000) == 0)
  {
LABEL_23:
    if ((v5 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "multiPeakAccelPathLengthWithPeak", *((float *)this + 26));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x400000) == 0)
  {
LABEL_24:
    if ((v5 & 0x800000) == 0)
      goto LABEL_25;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "multiPeakPathLengthDecorrelation", *((float *)this + 27));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x800000) == 0)
  {
LABEL_25:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_26;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "multiPeakPathLengthDelaySpread", *((float *)this + 28));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_27;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "multiPeakPathLengthHarmonicMean", *((float *)this + 29));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v5 & 2) == 0)
      goto LABEL_28;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "operatingMode");
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 2) == 0)
  {
LABEL_28:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_29;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "peakTimestamp");
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_30;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "poseAtImpact", *((float *)this + 31));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_30:
    if ((v5 & 4) == 0)
      goto LABEL_31;
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(a2, "posteriorRatio", *((float *)this + 32));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 4) == 0)
  {
LABEL_31:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_32;
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(a2, "sensorTime");
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_33;
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(a2, "sumDeltaAngles", *((float *)this + 33));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_34;
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(a2, "swingAngle", *((float *)this + 34));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_35;
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(a2, "tiltAngle", *((float *)this + 35));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_36;
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(a2, "timeto3rdZC", *((float *)this + 36));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x800000000) == 0)
      goto LABEL_37;
LABEL_75:
    PB::TextFormatter::format(a2, "withinCyclingImpactThresholds");
    if ((*(_QWORD *)((_BYTE *)this + 156) & 0x1000000000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_38;
  }
LABEL_74:
  PB::TextFormatter::format(a2, "type");
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x800000000) != 0)
    goto LABEL_75;
LABEL_37:
  if ((v5 & 0x1000000000) != 0)
LABEL_38:
    PB::TextFormatter::format(a2, "withinHardThresholds");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FallDetectionDetector::readFrom(CMMsl::FallDetectionDetector *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  char v37;
  int v38;
  BOOL v39;
  unint64_t v40;
  uint64_t v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  char v45;
  int v46;
  BOOL v47;
  int v48;
  BOOL v49;
  unint64_t v50;
  uint64_t v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  char v55;
  int v56;
  BOOL v57;
  char v58;
  unsigned int v59;
  unint64_t v60;
  char v61;
  char v62;
  unsigned int v63;
  unint64_t v64;
  char v65;
  char v66;
  unsigned int v67;
  unint64_t v68;
  char v69;
  char v70;
  unsigned int v71;
  unint64_t v72;
  char v73;
  char v74;
  unsigned int v75;
  unint64_t v76;
  char v77;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_196;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *(_QWORD *)((char *)this + 156) |= 1uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_149;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        v2 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_195;
      case 2u:
        *(_QWORD *)((char *)this + 156) |= 4uLL;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v58 = 0;
          v59 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              v24 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_205;
            }
            v60 = v20++;
            v61 = *(_BYTE *)(v21 + v60);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v61 & 0x7F) << v58;
            if ((v61 & 0x80) == 0)
              break;
            v58 += 7;
            v14 = v59++ > 8;
            if (v14)
            {
              v24 = 0;
LABEL_204:
              v2 = v60 + 1;
              goto LABEL_205;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v24 = 0;
          goto LABEL_204;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_205;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        v24 = 0;
LABEL_205:
        *((_QWORD *)this + 3) = v24;
        break;
      case 3u:
        *(_QWORD *)((char *)this + 156) |= 2uLL;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v62 = 0;
          v63 = 0;
          v30 = 0;
          if (v2 <= v26)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v26)
            {
              v30 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_210;
            }
            v64 = v26++;
            v65 = *(_BYTE *)(v27 + v64);
            *((_QWORD *)a2 + 1) = v26;
            v30 |= (unint64_t)(v65 & 0x7F) << v62;
            if ((v65 & 0x80) == 0)
              break;
            v62 += 7;
            v14 = v63++ > 8;
            if (v14)
            {
              v30 = 0;
LABEL_209:
              v2 = v64 + 1;
              goto LABEL_210;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v30 = 0;
          goto LABEL_209;
        }
        v28 = 0;
        v29 = 0;
        v30 = 0;
        do
        {
          v2 = v26 + 1;
          *((_QWORD *)a2 + 1) = v26 + 1;
          v31 = *(_BYTE *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0)
            goto LABEL_210;
          v28 += 7;
          v26 = v2;
          v14 = v29++ > 8;
        }
        while (!v14);
        v30 = 0;
LABEL_210:
        *((_QWORD *)this + 2) = v30;
        break;
      case 4u:
        *(_QWORD *)((char *)this + 156) |= 0x40uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_149;
        *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_194;
      case 5u:
        *(_QWORD *)((char *)this + 156) |= 0x20uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_149;
        *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_194;
      case 6u:
        *(_QWORD *)((char *)this + 156) |= 0x20000uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_149;
        *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_194;
      case 7u:
        *(_QWORD *)((char *)this + 156) |= 0x2000uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_149;
        *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_194;
      case 8u:
        *(_QWORD *)((char *)this + 156) |= 0x10000uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_149;
        *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_194;
      case 9u:
        *(_QWORD *)((char *)this + 156) |= 0x80000uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_149;
        *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_194;
      case 0xAu:
        *(_QWORD *)((char *)this + 156) |= 0x10uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_149;
        *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_194;
      case 0xBu:
        *(_QWORD *)((char *)this + 156) |= 0x8000uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_149;
        *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_194;
      case 0xCu:
        *(_QWORD *)((char *)this + 156) |= 0x4000uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_149;
        *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_194;
      case 0xDu:
        *(_QWORD *)((char *)this + 156) |= 0x4000000uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_149;
        *((_DWORD *)this + 31) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_194;
      case 0xEu:
        *(_QWORD *)((char *)this + 156) |= 0x10000000uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_149;
        *((_DWORD *)this + 33) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_194;
      case 0xFu:
        *(_QWORD *)((char *)this + 156) |= 0x40000000uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_149;
        *((_DWORD *)this + 35) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_194;
      case 0x10u:
        *(_QWORD *)((char *)this + 156) |= 0x20000000uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_149;
        *((_DWORD *)this + 34) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_194;
      case 0x11u:
        *(_QWORD *)((char *)this + 156) |= 0x80uLL;
        v32 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v33 = *(_QWORD *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
        {
          v66 = 0;
          v67 = 0;
          v36 = 0;
          if (v2 <= v32)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v32)
            {
              LODWORD(v36) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_215;
            }
            v68 = v32++;
            v69 = *(_BYTE *)(v33 + v68);
            *((_QWORD *)a2 + 1) = v32;
            v36 |= (unint64_t)(v69 & 0x7F) << v66;
            if ((v69 & 0x80) == 0)
              break;
            v66 += 7;
            v14 = v67++ > 8;
            if (v14)
            {
              LODWORD(v36) = 0;
LABEL_214:
              v2 = v68 + 1;
              goto LABEL_215;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v36) = 0;
          goto LABEL_214;
        }
        v34 = 0;
        v35 = 0;
        v36 = 0;
        do
        {
          v2 = v32 + 1;
          *((_QWORD *)a2 + 1) = v32 + 1;
          v37 = *(_BYTE *)(v33 + v32);
          v36 |= (unint64_t)(v37 & 0x7F) << v34;
          if ((v37 & 0x80) == 0)
            goto LABEL_215;
          v34 += 7;
          v32 = v2;
          v14 = v35++ > 8;
        }
        while (!v14);
        LODWORD(v36) = 0;
LABEL_215:
        *((_DWORD *)this + 12) = v36;
        break;
      case 0x12u:
        *(_QWORD *)((char *)this + 156) |= 0x8000000uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_149;
        *((_DWORD *)this + 32) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_194;
      case 0x13u:
        *(_QWORD *)((char *)this + 156) |= 0x200000000uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v39 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v38 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v39 = v38 != 0;
        }
        *((_BYTE *)this + 152) = v39;
        break;
      case 0x14u:
        *(_QWORD *)((char *)this + 156) |= 0x100000000uLL;
        v40 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v41 = *(_QWORD *)a2;
        if (v40 > 0xFFFFFFFFFFFFFFF5 || v40 + 10 > v2)
        {
          v70 = 0;
          v71 = 0;
          v44 = 0;
          if (v2 <= v40)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v40)
            {
              LODWORD(v44) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_220;
            }
            v72 = v40++;
            v73 = *(_BYTE *)(v41 + v72);
            *((_QWORD *)a2 + 1) = v40;
            v44 |= (unint64_t)(v73 & 0x7F) << v70;
            if ((v73 & 0x80) == 0)
              break;
            v70 += 7;
            v14 = v71++ > 8;
            if (v14)
            {
              LODWORD(v44) = 0;
LABEL_219:
              v2 = v72 + 1;
              goto LABEL_220;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v44) = 0;
          goto LABEL_219;
        }
        v42 = 0;
        v43 = 0;
        v44 = 0;
        do
        {
          v2 = v40 + 1;
          *((_QWORD *)a2 + 1) = v40 + 1;
          v45 = *(_BYTE *)(v41 + v40);
          v44 |= (unint64_t)(v45 & 0x7F) << v42;
          if ((v45 & 0x80) == 0)
            goto LABEL_220;
          v42 += 7;
          v40 = v2;
          v14 = v43++ > 8;
        }
        while (!v14);
        LODWORD(v44) = 0;
LABEL_220:
        *((_DWORD *)this + 37) = v44;
        break;
      case 0x15u:
        *(_QWORD *)((char *)this + 156) |= 0x80000000uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_149;
        *((_DWORD *)this + 36) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_194;
      case 0x16u:
        *(_QWORD *)((char *)this + 156) |= 0x400uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_149;
        *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_194;
      case 0x17u:
        *(_QWORD *)((char *)this + 156) |= 0x800uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_149;
        *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_194;
      case 0x18u:
        *(_QWORD *)((char *)this + 156) |= 0x1000uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_149;
        *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_194;
      case 0x19u:
        *(_QWORD *)((char *)this + 156) |= 0x400000000uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v47 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v46 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v47 = v46 != 0;
        }
        *((_BYTE *)this + 153) = v47;
        break;
      case 0x1Au:
        *(_QWORD *)((char *)this + 156) |= 0x800000uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_149;
        *((_DWORD *)this + 28) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_194;
      case 0x1Bu:
        *(_QWORD *)((char *)this + 156) |= 0x400000uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_149;
        *((_DWORD *)this + 27) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_194;
      case 0x1Cu:
        *(_QWORD *)((char *)this + 156) |= 0x1000000uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_149;
        *((_DWORD *)this + 29) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_194;
      case 0x1Du:
        *(_QWORD *)((char *)this + 156) |= 0x200000uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_149;
        *((_DWORD *)this + 26) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_194;
      case 0x1Eu:
        *(_QWORD *)((char *)this + 156) |= 0x1000000000uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v49 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v48 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v49 = v48 != 0;
        }
        *((_BYTE *)this + 155) = v49;
        break;
      case 0x1Fu:
        *(_QWORD *)((char *)this + 156) |= 0x100000uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_149;
        *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_194;
      case 0x20u:
        *(_QWORD *)((char *)this + 156) |= 0x2000000uLL;
        v50 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v51 = *(_QWORD *)a2;
        if (v50 > 0xFFFFFFFFFFFFFFF5 || v50 + 10 > v2)
        {
          v74 = 0;
          v75 = 0;
          v54 = 0;
          if (v2 <= v50)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v50)
            {
              LODWORD(v54) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_225;
            }
            v76 = v50++;
            v77 = *(_BYTE *)(v51 + v76);
            *((_QWORD *)a2 + 1) = v50;
            v54 |= (unint64_t)(v77 & 0x7F) << v74;
            if ((v77 & 0x80) == 0)
              break;
            v74 += 7;
            v14 = v75++ > 8;
            if (v14)
            {
              LODWORD(v54) = 0;
LABEL_224:
              v2 = v76 + 1;
              goto LABEL_225;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v54) = 0;
          goto LABEL_224;
        }
        v52 = 0;
        v53 = 0;
        v54 = 0;
        do
        {
          v2 = v50 + 1;
          *((_QWORD *)a2 + 1) = v50 + 1;
          v55 = *(_BYTE *)(v51 + v50);
          v54 |= (unint64_t)(v55 & 0x7F) << v52;
          if ((v55 & 0x80) == 0)
            goto LABEL_225;
          v52 += 7;
          v50 = v2;
          v14 = v53++ > 8;
        }
        while (!v14);
        LODWORD(v54) = 0;
LABEL_225:
        *((_DWORD *)this + 30) = v54;
        break;
      case 0x21u:
        *(_QWORD *)((char *)this + 156) |= 0x200uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_149;
        *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_194;
      case 0x22u:
        *(_QWORD *)((char *)this + 156) |= 0x100uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_149;
        *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_194;
      case 0x23u:
        *(_QWORD *)((char *)this + 156) |= 0x800000000uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v57 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v56 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v57 = v56 != 0;
        }
        *((_BYTE *)this + 154) = v57;
        break;
      case 0x24u:
        *(_QWORD *)((char *)this + 156) |= 0x40000uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_149;
        *((_DWORD *)this + 23) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_194;
      case 0x25u:
        *(_QWORD *)((char *)this + 156) |= 8uLL;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_194:
          v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_195:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_149:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_196:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::FallDetectionDetector::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = this;
  v4 = *(_QWORD *)(this + 156);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_QWORD *)(v3 + 156);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_41;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 0x20000) == 0)
      goto LABEL_7;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x20000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0)
      goto LABEL_8;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(float *)(v3 + 88));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x10000) == 0)
      goto LABEL_9;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(float *)(v3 + 72));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x10000) == 0)
  {
LABEL_9:
    if ((v4 & 0x80000) == 0)
      goto LABEL_10;
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(float *)(v3 + 84));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x80000) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(float *)(v3 + 96));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x8000) == 0)
      goto LABEL_12;
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x8000) == 0)
  {
LABEL_12:
    if ((v4 & 0x4000) == 0)
      goto LABEL_13;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(float *)(v3 + 80));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x4000) == 0)
  {
LABEL_13:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_14;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(float *)(v3 + 76));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_15;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(float *)(v3 + 124));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_16;
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(float *)(v3 + 132));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_17;
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::write(a2, *(float *)(v3 + 140));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x80) == 0)
      goto LABEL_18;
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::write(a2, *(float *)(v3 + 136));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x80) == 0)
  {
LABEL_18:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_19;
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x200000000) == 0)
      goto LABEL_20;
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::write(a2, *(float *)(v3 + 128));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_20:
    if ((v4 & 0x100000000) == 0)
      goto LABEL_21;
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_21:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x400) == 0)
      goto LABEL_23;
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(float *)(v3 + 144));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x400) == 0)
  {
LABEL_23:
    if ((v4 & 0x800) == 0)
      goto LABEL_24;
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::write(a2, *(float *)(v3 + 60));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x800) == 0)
  {
LABEL_24:
    if ((v4 & 0x1000) == 0)
      goto LABEL_25;
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::write(a2, *(float *)(v3 + 64));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x1000) == 0)
  {
LABEL_25:
    if ((v4 & 0x400000000) == 0)
      goto LABEL_26;
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::write(a2, *(float *)(v3 + 68));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_26:
    if ((v4 & 0x800000) == 0)
      goto LABEL_27;
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::write(a2);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x800000) == 0)
  {
LABEL_27:
    if ((v4 & 0x400000) == 0)
      goto LABEL_28;
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::write(a2, *(float *)(v3 + 112));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x400000) == 0)
  {
LABEL_28:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_29;
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::write(a2, *(float *)(v3 + 108));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x200000) == 0)
      goto LABEL_30;
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::write(a2, *(float *)(v3 + 116));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x200000) == 0)
  {
LABEL_30:
    if ((v4 & 0x1000000000) == 0)
      goto LABEL_31;
    goto LABEL_68;
  }
LABEL_67:
  this = PB::Writer::write(a2, *(float *)(v3 + 104));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x1000000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x100000) == 0)
      goto LABEL_32;
    goto LABEL_69;
  }
LABEL_68:
  this = PB::Writer::write(a2);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x100000) == 0)
  {
LABEL_32:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_33;
    goto LABEL_70;
  }
LABEL_69:
  this = PB::Writer::write(a2, *(float *)(v3 + 100));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_33:
    if ((v4 & 0x200) == 0)
      goto LABEL_34;
    goto LABEL_71;
  }
LABEL_70:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x200) == 0)
  {
LABEL_34:
    if ((v4 & 0x100) == 0)
      goto LABEL_35;
    goto LABEL_72;
  }
LABEL_71:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x100) == 0)
  {
LABEL_35:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_36;
    goto LABEL_73;
  }
LABEL_72:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_36:
    if ((v4 & 0x40000) == 0)
      goto LABEL_37;
    goto LABEL_74;
  }
LABEL_73:
  this = PB::Writer::write(a2);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x40000) == 0)
  {
LABEL_37:
    if ((v4 & 8) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 32));
  }
LABEL_74:
  this = PB::Writer::write(a2, *(float *)(v3 + 92));
  if ((*(_QWORD *)(v3 + 156) & 8) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 32));
  return this;
}

BOOL CMMsl::FallDetectionDetector::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 v4;

  v2 = *(_QWORD *)(a1 + 156);
  v3 = *(_QWORD *)(a2 + 156);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124))
      return 0;
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132))
      return 0;
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140))
      return 0;
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(float *)(a1 + 136) != *(float *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000) != 0)
  {
    if ((v3 & 0x200000000) == 0 || *(unsigned __int8 *)(a1 + 152) != *(unsigned __int8 *)(a2 + 152))
      return 0;
  }
  else if ((v3 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000) != 0)
  {
    if ((v3 & 0x100000000) == 0 || *(_DWORD *)(a1 + 148) != *(_DWORD *)(a2 + 148))
      return 0;
  }
  else if ((v3 & 0x100000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000) != 0)
  {
    if ((v3 & 0x80000000) == 0 || *(float *)(a1 + 144) != *(float *)(a2 + 144))
      return 0;
  }
  else if ((v3 & 0x80000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000) != 0)
  {
    if ((v3 & 0x400000000) == 0 || *(unsigned __int8 *)(a1 + 153) != *(unsigned __int8 *)(a2 + 153))
      return 0;
  }
  else if ((v3 & 0x400000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000) != 0)
  {
    if ((v3 & 0x1000000000) == 0 || *(unsigned __int8 *)(a1 + 155) != *(unsigned __int8 *)(a2 + 155))
      return 0;
  }
  else if ((v3 & 0x1000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(_DWORD *)(a1 + 120) != *(_DWORD *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000) != 0)
  {
    if ((v3 & 0x800000000) == 0 || *(unsigned __int8 *)(a1 + 154) != *(unsigned __int8 *)(a2 + 154))
      return 0;
  }
  else if ((v3 & 0x800000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  v4 = (*(_QWORD *)(a2 + 156) & 8) == 0;
  if ((v2 & 8) != 0)
    return (v3 & 8) != 0 && *(float *)(a1 + 32) == *(float *)(a2 + 32);
  return v4;
}

uint64_t CMMsl::FallDetectionDetector::hash_value(CMMsl::FallDetectionDetector *this)
{
  uint64_t v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  float v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  uint64_t v44;
  float v45;
  uint64_t v46;
  float v47;
  uint64_t v48;
  float v49;
  uint64_t v50;
  uint64_t v51;
  float v52;
  uint64_t v53;
  uint64_t v54;
  float v55;
  uint64_t v56;
  float v57;
  uint64_t v58;
  uint64_t v59;
  float v60;
  uint64_t v61;
  float v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v1 = *(_QWORD *)((char *)this + 156);
  if ((v1 & 1) != 0)
  {
    if (*((double *)this + 1) == 0.0)
      v2 = 0;
    else
      v2 = *((_QWORD *)this + 1);
    if ((v1 & 4) != 0)
    {
LABEL_3:
      v74 = *((_QWORD *)this + 3);
      if ((v1 & 2) != 0)
        goto LABEL_4;
      goto LABEL_110;
    }
  }
  else
  {
    v2 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_3;
  }
  v74 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_4:
    v73 = *((_QWORD *)this + 2);
    if ((v1 & 0x40) != 0)
      goto LABEL_5;
LABEL_111:
    v72 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_8;
LABEL_112:
    v71 = 0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_11;
LABEL_113:
    v70 = 0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_14;
LABEL_114:
    v69 = 0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_17;
LABEL_115:
    v68 = 0;
    if ((v1 & 0x80000) != 0)
      goto LABEL_20;
LABEL_116:
    v67 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_23;
LABEL_117:
    v66 = 0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_26;
LABEL_118:
    v65 = 0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_29;
LABEL_119:
    v20 = 0;
    if ((v1 & 0x4000000) != 0)
      goto LABEL_33;
LABEL_120:
    v22 = 0;
    if ((v1 & 0x10000000) != 0)
      goto LABEL_37;
LABEL_121:
    v24 = 0;
    if ((v1 & 0x40000000) != 0)
      goto LABEL_41;
LABEL_122:
    v26 = 0;
    if ((v1 & 0x20000000) != 0)
      goto LABEL_45;
LABEL_123:
    v28 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_49;
    goto LABEL_124;
  }
LABEL_110:
  v73 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_111;
LABEL_5:
  v3 = *((float *)this + 11);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  v72 = v4;
  if ((v1 & 0x20) == 0)
    goto LABEL_112;
LABEL_8:
  v5 = *((float *)this + 10);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  v71 = v6;
  if ((v1 & 0x20000) == 0)
    goto LABEL_113;
LABEL_11:
  v7 = *((float *)this + 22);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  v70 = v8;
  if ((v1 & 0x2000) == 0)
    goto LABEL_114;
LABEL_14:
  v9 = *((float *)this + 18);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  v69 = v10;
  if ((v1 & 0x10000) == 0)
    goto LABEL_115;
LABEL_17:
  v11 = *((float *)this + 21);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  v68 = v12;
  if ((v1 & 0x80000) == 0)
    goto LABEL_116;
LABEL_20:
  v13 = *((float *)this + 24);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  v67 = v14;
  if ((v1 & 0x10) == 0)
    goto LABEL_117;
LABEL_23:
  v15 = *((float *)this + 9);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  v66 = v16;
  if ((v1 & 0x8000) == 0)
    goto LABEL_118;
LABEL_26:
  v17 = *((float *)this + 20);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  v65 = v18;
  if ((v1 & 0x4000) == 0)
    goto LABEL_119;
LABEL_29:
  v19 = *((float *)this + 19);
  if (v19 == 0.0)
    v20 = 0;
  else
    v20 = LODWORD(v19);
  if ((v1 & 0x4000000) == 0)
    goto LABEL_120;
LABEL_33:
  v21 = *((float *)this + 31);
  if (v21 == 0.0)
    v22 = 0;
  else
    v22 = LODWORD(v21);
  if ((v1 & 0x10000000) == 0)
    goto LABEL_121;
LABEL_37:
  v23 = *((float *)this + 33);
  if (v23 == 0.0)
    v24 = 0;
  else
    v24 = LODWORD(v23);
  if ((v1 & 0x40000000) == 0)
    goto LABEL_122;
LABEL_41:
  v25 = *((float *)this + 35);
  if (v25 == 0.0)
    v26 = 0;
  else
    v26 = LODWORD(v25);
  if ((v1 & 0x20000000) == 0)
    goto LABEL_123;
LABEL_45:
  v27 = *((float *)this + 34);
  if (v27 == 0.0)
    v28 = 0;
  else
    v28 = LODWORD(v27);
  if ((v1 & 0x80) != 0)
  {
LABEL_49:
    v29 = *((int *)this + 12);
    if ((v1 & 0x8000000) != 0)
      goto LABEL_50;
LABEL_125:
    v31 = 0;
    if ((v1 & 0x200000000) != 0)
      goto LABEL_54;
    goto LABEL_126;
  }
LABEL_124:
  v29 = 0;
  if ((v1 & 0x8000000) == 0)
    goto LABEL_125;
LABEL_50:
  v30 = *((float *)this + 32);
  if (v30 == 0.0)
    v31 = 0;
  else
    v31 = LODWORD(v30);
  if ((v1 & 0x200000000) != 0)
  {
LABEL_54:
    v32 = *((unsigned __int8 *)this + 152);
    if ((v1 & 0x100000000) != 0)
      goto LABEL_55;
    goto LABEL_127;
  }
LABEL_126:
  v32 = 0;
  if ((v1 & 0x100000000) != 0)
  {
LABEL_55:
    v33 = *((int *)this + 37);
    if ((v1 & 0x80000000) != 0)
      goto LABEL_56;
LABEL_128:
    v35 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_60;
LABEL_129:
    v37 = 0;
    if ((v1 & 0x800) != 0)
      goto LABEL_64;
LABEL_130:
    v39 = 0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_68;
LABEL_131:
    v41 = 0;
    if ((v1 & 0x400000000) != 0)
      goto LABEL_72;
    goto LABEL_132;
  }
LABEL_127:
  v33 = 0;
  if ((v1 & 0x80000000) == 0)
    goto LABEL_128;
LABEL_56:
  v34 = *((float *)this + 36);
  if (v34 == 0.0)
    v35 = 0;
  else
    v35 = LODWORD(v34);
  if ((v1 & 0x400) == 0)
    goto LABEL_129;
LABEL_60:
  v36 = *((float *)this + 15);
  if (v36 == 0.0)
    v37 = 0;
  else
    v37 = LODWORD(v36);
  if ((v1 & 0x800) == 0)
    goto LABEL_130;
LABEL_64:
  v38 = *((float *)this + 16);
  if (v38 == 0.0)
    v39 = 0;
  else
    v39 = LODWORD(v38);
  if ((v1 & 0x1000) == 0)
    goto LABEL_131;
LABEL_68:
  v40 = *((float *)this + 17);
  if (v40 == 0.0)
    v41 = 0;
  else
    v41 = LODWORD(v40);
  if ((v1 & 0x400000000) != 0)
  {
LABEL_72:
    v42 = *((unsigned __int8 *)this + 153);
    if ((v1 & 0x800000) != 0)
      goto LABEL_73;
LABEL_133:
    v44 = 0;
    if ((v1 & 0x400000) != 0)
      goto LABEL_77;
LABEL_134:
    v46 = 0;
    if ((v1 & 0x1000000) != 0)
      goto LABEL_81;
LABEL_135:
    v48 = 0;
    if ((v1 & 0x200000) != 0)
      goto LABEL_84;
LABEL_136:
    v50 = 0;
    if ((v1 & 0x1000000000) != 0)
      goto LABEL_87;
    goto LABEL_137;
  }
LABEL_132:
  v42 = 0;
  if ((v1 & 0x800000) == 0)
    goto LABEL_133;
LABEL_73:
  v43 = *((float *)this + 28);
  if (v43 == 0.0)
    v44 = 0;
  else
    v44 = LODWORD(v43);
  if ((v1 & 0x400000) == 0)
    goto LABEL_134;
LABEL_77:
  v45 = *((float *)this + 27);
  if (v45 == 0.0)
    v46 = 0;
  else
    v46 = LODWORD(v45);
  if ((v1 & 0x1000000) == 0)
    goto LABEL_135;
LABEL_81:
  v47 = *((float *)this + 29);
  v48 = LODWORD(v47);
  if (v47 == 0.0)
    v48 = 0;
  if ((v1 & 0x200000) == 0)
    goto LABEL_136;
LABEL_84:
  v49 = *((float *)this + 26);
  v50 = LODWORD(v49);
  if (v49 == 0.0)
    v50 = 0;
  if ((v1 & 0x1000000000) != 0)
  {
LABEL_87:
    v51 = *((unsigned __int8 *)this + 155);
    if ((v1 & 0x100000) != 0)
      goto LABEL_88;
LABEL_138:
    v53 = 0;
    if ((v1 & 0x2000000) != 0)
      goto LABEL_91;
    goto LABEL_139;
  }
LABEL_137:
  v51 = 0;
  if ((v1 & 0x100000) == 0)
    goto LABEL_138;
LABEL_88:
  v52 = *((float *)this + 25);
  v53 = LODWORD(v52);
  if (v52 == 0.0)
    v53 = 0;
  if ((v1 & 0x2000000) != 0)
  {
LABEL_91:
    v54 = *((unsigned int *)this + 30);
    if ((v1 & 0x200) != 0)
      goto LABEL_92;
LABEL_140:
    v56 = 0;
    if ((v1 & 0x100) != 0)
      goto LABEL_95;
LABEL_141:
    v58 = 0;
    if ((v1 & 0x800000000) != 0)
      goto LABEL_98;
    goto LABEL_142;
  }
LABEL_139:
  v54 = 0;
  if ((v1 & 0x200) == 0)
    goto LABEL_140;
LABEL_92:
  v55 = *((float *)this + 14);
  v56 = LODWORD(v55);
  if (v55 == 0.0)
    v56 = 0;
  if ((v1 & 0x100) == 0)
    goto LABEL_141;
LABEL_95:
  v57 = *((float *)this + 13);
  v58 = LODWORD(v57);
  if (v57 == 0.0)
    v58 = 0;
  if ((v1 & 0x800000000) != 0)
  {
LABEL_98:
    v59 = *((unsigned __int8 *)this + 154);
    if ((v1 & 0x40000) != 0)
      goto LABEL_99;
    goto LABEL_143;
  }
LABEL_142:
  v59 = 0;
  if ((v1 & 0x40000) != 0)
  {
LABEL_99:
    v60 = *((float *)this + 23);
    v61 = LODWORD(v60);
    if (v60 == 0.0)
      v61 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_102;
LABEL_144:
    v63 = 0;
    return v74 ^ v2 ^ v73 ^ v72 ^ v71 ^ v70 ^ v69 ^ v68 ^ v67 ^ v66 ^ v65 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v29 ^ v31 ^ v32 ^ v33 ^ v35 ^ v37 ^ v39 ^ v41 ^ v42 ^ v44 ^ v46 ^ v48 ^ v50 ^ v51 ^ v53 ^ v54 ^ v56 ^ v58 ^ v59 ^ v61 ^ v63;
  }
LABEL_143:
  v61 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_144;
LABEL_102:
  v62 = *((float *)this + 8);
  v63 = LODWORD(v62);
  if (v62 == 0.0)
    v63 = 0;
  return v74 ^ v2 ^ v73 ^ v72 ^ v71 ^ v70 ^ v69 ^ v68 ^ v67 ^ v66 ^ v65 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v29 ^ v31 ^ v32 ^ v33 ^ v35 ^ v37 ^ v39 ^ v41 ^ v42 ^ v44 ^ v46 ^ v48 ^ v50 ^ v51 ^ v53 ^ v54 ^ v56 ^ v58 ^ v59 ^ v61 ^ v63;
}

uint64_t CMMsl::FallDetectionGyroControllerReplay::FallDetectionGyroControllerReplay(uint64_t this)
{
  *(_QWORD *)this = &off_25135D6A8;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135D6A8;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::FallDetectionGyroControllerReplay::~FallDetectionGyroControllerReplay(CMMsl::FallDetectionGyroControllerReplay *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::FallDetectionGyroControllerReplay::FallDetectionGyroControllerReplay(uint64_t this, const CMMsl::FallDetectionGyroControllerReplay *a2)
{
  char v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)this = &off_25135D6A8;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_BYTE *)a2 + 16);
    *(_BYTE *)(this + 20) = v2;
    *(_BYTE *)(this + 16) = v4;
  }
  return this;
}

{
  char v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)this = &off_25135D6A8;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_BYTE *)a2 + 16);
    *(_BYTE *)(this + 20) = v2;
    *(_BYTE *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::FallDetectionGyroControllerReplay::operator=(uint64_t a1, uint64_t a2)
{
  char v2;
  void (**v4)(CMMsl::FallDetectionGyroControllerReplay *__hidden);
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  char v9;
  _QWORD v11[2];
  char v12;
  int v13;

  if (a1 != a2)
  {
    v4 = &off_25135D6A8;
    v11[0] = &off_25135D6A8;
    v13 = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 1) != 0)
    {
      v4 = *(void (***)(CMMsl::FallDetectionGyroControllerReplay *__hidden))(a2 + 8);
      LOBYTE(v13) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        v2 = *(_BYTE *)(a2 + 16);
        LOBYTE(v13) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_6;
    }
    v7 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v13;
    v13 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v11[1] = v8;
    v9 = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v2;
    v12 = v9;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

{
  int v3;
  uint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  _QWORD v9[2];
  char v10;
  int v11;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_BYTE *)(a2 + 16);
    v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    v11 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v9[0] = &off_25135D6A8;
    v9[1] = v7;
    LOBYTE(v3) = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v5;
    v10 = v3;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::FallDetectionGyroControllerReplay *a2, CMMsl::FallDetectionGyroControllerReplay *a3)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LOBYTE(v4) = *(_BYTE *)(this + 16);
  *(_BYTE *)(this + 16) = *((_BYTE *)a2 + 16);
  *((_BYTE *)a2 + 16) = v4;
  return this;
}

uint64_t CMMsl::FallDetectionGyroControllerReplay::FallDetectionGyroControllerReplay(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = &off_25135D6A8;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(result + 16) = *(_BYTE *)(a2 + 16);
  return result;
}

{
  *(_QWORD *)result = &off_25135D6A8;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(result + 16) = *(_BYTE *)(a2 + 16);
  return result;
}

uint64_t CMMsl::FallDetectionGyroControllerReplay::formatText(CMMsl::FallDetectionGyroControllerReplay *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "gyroOn");
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FallDetectionGyroControllerReplay::readFrom(CMMsl::FallDetectionGyroControllerReplay *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  char v24;
  uint64_t result;
  int v26;
  BOOL v27;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_30;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        if (v2 >= v3)
        {
          v27 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v26 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v27 = v26 != 0;
        }
        *((_BYTE *)this + 16) = v27;
      }
      else if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v19 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        v20 = *(_QWORD *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v3)
        {
          v28 = 0;
          v29 = 0;
          v23 = 0;
          if (v3 <= v19)
            v2 = *((_QWORD *)a2 + 1);
          else
            v2 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v2 == v19)
            {
              v23 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_48;
            }
            v30 = v19++;
            v31 = *(_BYTE *)(v20 + v30);
            *((_QWORD *)a2 + 1) = v19;
            v23 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v14 = v29++ > 8;
            if (v14)
            {
              v23 = 0;
              goto LABEL_47;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v23 = 0;
LABEL_47:
          v2 = v30 + 1;
        }
        else
        {
          v21 = 0;
          v22 = 0;
          v23 = 0;
          while (1)
          {
            v2 = v19 + 1;
            *((_QWORD *)a2 + 1) = v19 + 1;
            v24 = *(_BYTE *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0)
              break;
            v21 += 7;
            v19 = v2;
            v14 = v22++ > 8;
            if (v14)
            {
              v23 = 0;
              break;
            }
          }
        }
LABEL_48:
        *((_QWORD *)this + 1) = v23;
      }
      else
      {
LABEL_30:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_30;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::FallDetectionGyroControllerReplay::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(a2);
  return this;
}

BOOL CMMsl::FallDetectionGyroControllerReplay::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
  return v2;
}

uint64_t CMMsl::FallDetectionGyroControllerReplay::hash_value(CMMsl::FallDetectionGyroControllerReplay *this)
{
  uint64_t v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((_QWORD *)this + 1);
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_5:
    v2 = 0;
    return v2 ^ v1;
  }
  v1 = 0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_5;
LABEL_3:
  v2 = *((unsigned __int8 *)this + 16);
  return v2 ^ v1;
}

uint64_t CMMsl::FallDetectionReferee::FallDetectionReferee(uint64_t this)
{
  *(_QWORD *)this = &off_25135D6E0;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135D6E0;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

void CMMsl::FallDetectionReferee::~FallDetectionReferee(CMMsl::FallDetectionReferee *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::FallDetectionReferee::FallDetectionReferee(uint64_t this, const CMMsl::FallDetectionReferee *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;

  *(_QWORD *)this = &off_25135D6E0;
  *(_DWORD *)(this + 52) = 0;
  v2 = *((_WORD *)a2 + 26);
  if ((v2 & 2) != 0)
  {
    v4 = *((_QWORD *)a2 + 2);
    v3 = 2;
    *(_WORD *)(this + 52) = 2;
    *(_QWORD *)(this + 16) = v4;
    v2 = *((_WORD *)a2 + 26);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 4) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 3);
    v3 |= 4u;
    *(_WORD *)(this + 52) = v3;
    *(_QWORD *)(this + 24) = v5;
    v2 = *((_WORD *)a2 + 26);
  }
LABEL_6:
  if ((v2 & 1) != 0)
  {
    v6 = *((_QWORD *)a2 + 1);
    v3 |= 1u;
    *(_WORD *)(this + 52) = v3;
    *(_QWORD *)(this + 8) = v6;
    v2 = *((_WORD *)a2 + 26);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_20;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 8);
  v3 |= 8u;
  *(_WORD *)(this + 52) = v3;
  *(_DWORD *)(this + 32) = v7;
  v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  v8 = *((_DWORD *)a2 + 10);
  v3 |= 0x20u;
  *(_WORD *)(this + 52) = v3;
  *(_DWORD *)(this + 40) = v8;
  v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x1000) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  v9 = *((_DWORD *)a2 + 9);
  v3 |= 0x10u;
  *(_WORD *)(this + 52) = v3;
  *(_DWORD *)(this + 36) = v9;
  v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x1000) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_23;
  }
LABEL_22:
  v10 = *((_BYTE *)a2 + 50);
  v3 |= 0x1000u;
  *(_WORD *)(this + 52) = v3;
  *(_BYTE *)(this + 50) = v10;
  v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x40) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0)
      goto LABEL_13;
    goto LABEL_24;
  }
LABEL_23:
  v11 = *((_BYTE *)a2 + 44);
  v3 |= 0x40u;
  *(_WORD *)(this + 52) = v3;
  *(_BYTE *)(this + 44) = v11;
  v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 0x100) == 0)
      goto LABEL_14;
    goto LABEL_25;
  }
LABEL_24:
  v12 = *((_BYTE *)a2 + 45);
  v3 |= 0x80u;
  *(_WORD *)(this + 52) = v3;
  *(_BYTE *)(this + 45) = v12;
  v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x100) == 0)
  {
LABEL_14:
    if ((v2 & 0x200) == 0)
      goto LABEL_15;
    goto LABEL_26;
  }
LABEL_25:
  v13 = *((_BYTE *)a2 + 46);
  v3 |= 0x100u;
  *(_WORD *)(this + 52) = v3;
  *(_BYTE *)(this + 46) = v13;
  v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x200) == 0)
  {
LABEL_15:
    if ((v2 & 0x400) == 0)
      goto LABEL_16;
    goto LABEL_27;
  }
LABEL_26:
  v14 = *((_BYTE *)a2 + 47);
  v3 |= 0x200u;
  *(_WORD *)(this + 52) = v3;
  *(_BYTE *)(this + 47) = v14;
  v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x400) == 0)
  {
LABEL_16:
    if ((v2 & 0x800) == 0)
      return this;
LABEL_28:
    v16 = *((_BYTE *)a2 + 49);
    *(_WORD *)(this + 52) = v3 | 0x800;
    *(_BYTE *)(this + 49) = v16;
    return this;
  }
LABEL_27:
  v15 = *((_BYTE *)a2 + 48);
  v3 |= 0x400u;
  *(_WORD *)(this + 52) = v3;
  *(_BYTE *)(this + 48) = v15;
  if ((*((_WORD *)a2 + 26) & 0x800) != 0)
    goto LABEL_28;
  return this;
}

CMMsl *CMMsl::FallDetectionReferee::operator=(CMMsl *a1, const CMMsl::FallDetectionReferee *a2)
{
  CMMsl::FallDetectionReferee *v3;
  _BYTE v5[56];

  if (a1 != a2)
  {
    CMMsl::FallDetectionReferee::FallDetectionReferee((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallDetectionReferee *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::FallDetectionReferee *a2, CMMsl::FallDetectionReferee *a3)
{
  int v3;
  double result;
  uint64_t v5;
  uint64_t v6;

  v3 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v3;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  LODWORD(v6) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v6;
  LODWORD(v6) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v6;
  LODWORD(v6) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 50);
  *((_BYTE *)this + 50) = *((_BYTE *)a2 + 50);
  *((_BYTE *)a2 + 50) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 44);
  *((_BYTE *)this + 44) = *((_BYTE *)a2 + 44);
  *((_BYTE *)a2 + 44) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 45);
  *((_BYTE *)this + 45) = *((_BYTE *)a2 + 45);
  *((_BYTE *)a2 + 45) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 46);
  *((_BYTE *)this + 46) = *((_BYTE *)a2 + 46);
  *((_BYTE *)a2 + 46) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 47);
  *((_BYTE *)this + 47) = *((_BYTE *)a2 + 47);
  *((_BYTE *)a2 + 47) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 48);
  *((_BYTE *)this + 48) = *((_BYTE *)a2 + 48);
  *((_BYTE *)a2 + 48) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 49);
  *((_BYTE *)this + 49) = *((_BYTE *)a2 + 49);
  *((_BYTE *)a2 + 49) = v6;
  return result;
}

double CMMsl::FallDetectionReferee::FallDetectionReferee(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135D6E0;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_BYTE *)(a1 + 50) = *(_BYTE *)(a2 + 50);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  *(_BYTE *)(a1 + 45) = *(_BYTE *)(a2 + 45);
  *(_BYTE *)(a1 + 46) = *(_BYTE *)(a2 + 46);
  *(_BYTE *)(a1 + 47) = *(_BYTE *)(a2 + 47);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  return result;
}

CMMsl *CMMsl::FallDetectionReferee::operator=(CMMsl *this, uint64_t a2, CMMsl::FallDetectionReferee *a3)
{
  uint64_t v4;
  _QWORD v6[5];
  int v7;
  int v8;
  char v9;
  char v10;
  char v11;
  int v12;

  if (this != (CMMsl *)a2)
  {
    v12 = *(_DWORD *)(a2 + 52);
    *(_DWORD *)(a2 + 52) = 0;
    v6[2] = *(_QWORD *)(a2 + 16);
    v6[3] = *(_QWORD *)(a2 + 24);
    v4 = *(_QWORD *)(a2 + 8);
    v6[0] = &off_25135D6E0;
    v6[1] = v4;
    v7 = *(_DWORD *)(a2 + 40);
    v6[4] = *(_QWORD *)(a2 + 32);
    v11 = *(_BYTE *)(a2 + 50);
    v8 = *(_DWORD *)(a2 + 44);
    v9 = *(_BYTE *)(a2 + 48);
    v10 = *(_BYTE *)(a2 + 49);
    CMMsl::swap(this, (CMMsl::FallDetectionReferee *)v6, a3);
    PB::Base::~Base((PB::Base *)v6);
  }
  return this;
}

uint64_t CMMsl::FallDetectionReferee::formatText(CMMsl::FallDetectionReferee *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 26);
  if ((v5 & 0x40) != 0)
  {
    PB::TextFormatter::format(a2, "consideredAlert");
    v5 = *((_WORD *)this + 26);
    if ((v5 & 0x80) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "consideredRecovery");
  v5 = *((_WORD *)this + 26);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "consideredSOS");
  v5 = *((_WORD *)this + 26);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 0x400) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "droppedAlert");
  v5 = *((_WORD *)this + 26);
  if ((v5 & 0x400) == 0)
  {
LABEL_6:
    if ((v5 & 0x800) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "droppedRecovery");
  v5 = *((_WORD *)this + 26);
  if ((v5 & 0x800) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "droppedSOS");
  v5 = *((_WORD *)this + 26);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 8) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "fallTime");
  v5 = *((_WORD *)this + 26);
  if ((v5 & 8) == 0)
  {
LABEL_9:
    if ((v5 & 2) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "impactOperatingMode");
  v5 = *((_WORD *)this + 26);
  if ((v5 & 2) == 0)
  {
LABEL_10:
    if ((v5 & 0x1000) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "iostime", *((double *)this + 2));
  v5 = *((_WORD *)this + 26);
  if ((v5 & 0x1000) == 0)
  {
LABEL_11:
    if ((v5 & 0x10) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "isOtherStateMachineProcessingNearbyImpact");
  v5 = *((_WORD *)this + 26);
  if ((v5 & 0x10) == 0)
  {
LABEL_12:
    if ((v5 & 0x20) == 0)
      goto LABEL_13;
LABEL_27:
    PB::TextFormatter::format(a2, "refereeOperatingMode");
    if ((*((_WORD *)this + 26) & 4) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_14;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "refereeCyclingStateDecision");
  v5 = *((_WORD *)this + 26);
  if ((v5 & 0x20) != 0)
    goto LABEL_27;
LABEL_13:
  if ((v5 & 4) != 0)
LABEL_14:
    PB::TextFormatter::format(a2, "sensorTime");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FallDetectionReferee::readFrom(CMMsl::FallDetectionReferee *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  int v51;
  BOOL v52;
  int v53;
  BOOL v54;
  int v55;
  BOOL v56;
  int v57;
  BOOL v58;
  int v59;
  BOOL v60;
  int v61;
  BOOL v62;
  int v63;
  BOOL v64;
  char v65;
  unsigned int v66;
  unint64_t v67;
  char v68;
  char v69;
  unsigned int v70;
  unint64_t v71;
  char v72;
  char v73;
  unsigned int v74;
  unint64_t v75;
  char v76;
  char v77;
  unsigned int v78;
  unint64_t v79;
  char v80;
  char v81;
  unsigned int v82;
  unint64_t v83;
  char v84;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_26;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_21;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_26:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 26) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 2u:
        *((_WORD *)this + 26) |= 4u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v65 = 0;
          v66 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v21)
            {
              v25 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_134;
            }
            v67 = v21++;
            v68 = *(_BYTE *)(v22 + v67);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v68 & 0x7F) << v65;
            if ((v68 & 0x80) == 0)
              break;
            v65 += 7;
            v14 = v66++ > 8;
            if (v14)
            {
              v25 = 0;
LABEL_133:
              v2 = v67 + 1;
              goto LABEL_134;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v25 = 0;
          goto LABEL_133;
        }
        v23 = 0;
        v24 = 0;
        v25 = 0;
        do
        {
          v2 = v21 + 1;
          *((_QWORD *)a2 + 1) = v21 + 1;
          v26 = *(_BYTE *)(v22 + v21);
          v25 |= (unint64_t)(v26 & 0x7F) << v23;
          if ((v26 & 0x80) == 0)
            goto LABEL_134;
          v23 += 7;
          v21 = v2;
          v14 = v24++ > 8;
        }
        while (!v14);
        v25 = 0;
LABEL_134:
        *((_QWORD *)this + 3) = v25;
        break;
      case 3u:
        *((_WORD *)this + 26) |= 1u;
        v27 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v28 = *(_QWORD *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v69 = 0;
          v70 = 0;
          v31 = 0;
          if (v2 <= v27)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v27)
            {
              v31 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_139;
            }
            v71 = v27++;
            v72 = *(_BYTE *)(v28 + v71);
            *((_QWORD *)a2 + 1) = v27;
            v31 |= (unint64_t)(v72 & 0x7F) << v69;
            if ((v72 & 0x80) == 0)
              break;
            v69 += 7;
            v14 = v70++ > 8;
            if (v14)
            {
              v31 = 0;
LABEL_138:
              v2 = v71 + 1;
              goto LABEL_139;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v31 = 0;
          goto LABEL_138;
        }
        v29 = 0;
        v30 = 0;
        v31 = 0;
        do
        {
          v2 = v27 + 1;
          *((_QWORD *)a2 + 1) = v27 + 1;
          v32 = *(_BYTE *)(v28 + v27);
          v31 |= (unint64_t)(v32 & 0x7F) << v29;
          if ((v32 & 0x80) == 0)
            goto LABEL_139;
          v29 += 7;
          v27 = v2;
          v14 = v30++ > 8;
        }
        while (!v14);
        v31 = 0;
LABEL_139:
        *((_QWORD *)this + 1) = v31;
        break;
      case 4u:
        *((_WORD *)this + 26) |= 8u;
        v33 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v34 = *(_QWORD *)a2;
        if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
        {
          v73 = 0;
          v74 = 0;
          v37 = 0;
          if (v2 <= v33)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v33)
            {
              LODWORD(v37) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_144;
            }
            v75 = v33++;
            v76 = *(_BYTE *)(v34 + v75);
            *((_QWORD *)a2 + 1) = v33;
            v37 |= (unint64_t)(v76 & 0x7F) << v73;
            if ((v76 & 0x80) == 0)
              break;
            v73 += 7;
            v14 = v74++ > 8;
            if (v14)
            {
              LODWORD(v37) = 0;
LABEL_143:
              v2 = v75 + 1;
              goto LABEL_144;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v37) = 0;
          goto LABEL_143;
        }
        v35 = 0;
        v36 = 0;
        v37 = 0;
        do
        {
          v2 = v33 + 1;
          *((_QWORD *)a2 + 1) = v33 + 1;
          v38 = *(_BYTE *)(v34 + v33);
          v37 |= (unint64_t)(v38 & 0x7F) << v35;
          if ((v38 & 0x80) == 0)
            goto LABEL_144;
          v35 += 7;
          v33 = v2;
          v14 = v36++ > 8;
        }
        while (!v14);
        LODWORD(v37) = 0;
LABEL_144:
        *((_DWORD *)this + 8) = v37;
        break;
      case 5u:
        *((_WORD *)this + 26) |= 0x20u;
        v39 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v40 = *(_QWORD *)a2;
        if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
        {
          v77 = 0;
          v78 = 0;
          v43 = 0;
          if (v2 <= v39)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v39)
            {
              LODWORD(v43) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_149;
            }
            v79 = v39++;
            v80 = *(_BYTE *)(v40 + v79);
            *((_QWORD *)a2 + 1) = v39;
            v43 |= (unint64_t)(v80 & 0x7F) << v77;
            if ((v80 & 0x80) == 0)
              break;
            v77 += 7;
            v14 = v78++ > 8;
            if (v14)
            {
              LODWORD(v43) = 0;
LABEL_148:
              v2 = v79 + 1;
              goto LABEL_149;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v43) = 0;
          goto LABEL_148;
        }
        v41 = 0;
        v42 = 0;
        v43 = 0;
        do
        {
          v2 = v39 + 1;
          *((_QWORD *)a2 + 1) = v39 + 1;
          v44 = *(_BYTE *)(v40 + v39);
          v43 |= (unint64_t)(v44 & 0x7F) << v41;
          if ((v44 & 0x80) == 0)
            goto LABEL_149;
          v41 += 7;
          v39 = v2;
          v14 = v42++ > 8;
        }
        while (!v14);
        LODWORD(v43) = 0;
LABEL_149:
        *((_DWORD *)this + 10) = v43;
        break;
      case 6u:
        *((_WORD *)this + 26) |= 0x10u;
        v45 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v46 = *(_QWORD *)a2;
        if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
        {
          v81 = 0;
          v82 = 0;
          v49 = 0;
          if (v2 <= v45)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v45)
            {
              LODWORD(v49) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_154;
            }
            v83 = v45++;
            v84 = *(_BYTE *)(v46 + v83);
            *((_QWORD *)a2 + 1) = v45;
            v49 |= (unint64_t)(v84 & 0x7F) << v81;
            if ((v84 & 0x80) == 0)
              break;
            v81 += 7;
            v14 = v82++ > 8;
            if (v14)
            {
              LODWORD(v49) = 0;
LABEL_153:
              v2 = v83 + 1;
              goto LABEL_154;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v49) = 0;
          goto LABEL_153;
        }
        v47 = 0;
        v48 = 0;
        v49 = 0;
        do
        {
          v2 = v45 + 1;
          *((_QWORD *)a2 + 1) = v45 + 1;
          v50 = *(_BYTE *)(v46 + v45);
          v49 |= (unint64_t)(v50 & 0x7F) << v47;
          if ((v50 & 0x80) == 0)
            goto LABEL_154;
          v47 += 7;
          v45 = v2;
          v14 = v48++ > 8;
        }
        while (!v14);
        LODWORD(v49) = 0;
LABEL_154:
        *((_DWORD *)this + 9) = v49;
        break;
      case 7u:
        *((_WORD *)this + 26) |= 0x1000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v52 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v51 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v52 = v51 != 0;
        }
        *((_BYTE *)this + 50) = v52;
        break;
      case 0xBu:
        *((_WORD *)this + 26) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v54 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v53 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v54 = v53 != 0;
        }
        *((_BYTE *)this + 44) = v54;
        break;
      case 0xCu:
        *((_WORD *)this + 26) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v56 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v55 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v56 = v55 != 0;
        }
        *((_BYTE *)this + 45) = v56;
        break;
      case 0xDu:
        *((_WORD *)this + 26) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v58 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v57 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v58 = v57 != 0;
        }
        *((_BYTE *)this + 46) = v58;
        break;
      case 0x15u:
        *((_WORD *)this + 26) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v60 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v59 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v60 = v59 != 0;
        }
        *((_BYTE *)this + 47) = v60;
        break;
      case 0x16u:
        *((_WORD *)this + 26) |= 0x400u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v62 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v61 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v62 = v61 != 0;
        }
        *((_BYTE *)this + 48) = v62;
        break;
      case 0x17u:
        *((_WORD *)this + 26) |= 0x800u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v64 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v63 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v64 = v63 != 0;
        }
        *((_BYTE *)this + 49) = v64;
        break;
      default:
        goto LABEL_19;
    }
LABEL_21:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::FallDetectionReferee::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 52);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16));
    v4 = *(_WORD *)(v3 + 52);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x1000) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x1000) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x100) == 0)
  {
LABEL_11:
    if ((v4 & 0x200) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x200) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x400) == 0)
  {
LABEL_13:
    if ((v4 & 0x800) == 0)
      return this;
    return PB::Writer::write(a2);
  }
LABEL_26:
  this = PB::Writer::write(a2);
  if ((*(_WORD *)(v3 + 52) & 0x800) != 0)
    return PB::Writer::write(a2);
  return this;
}

BOOL CMMsl::FallDetectionReferee::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 52);
  v3 = *(_WORD *)(a2 + 52);
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 52) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 52) & 0x1000) == 0 || *(unsigned __int8 *)(a1 + 50) != *(unsigned __int8 *)(a2 + 50))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 52) & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(unsigned __int8 *)(a1 + 44) != *(unsigned __int8 *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(unsigned __int8 *)(a1 + 45) != *(unsigned __int8 *)(a2 + 45))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 52) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 52) & 0x100) == 0 || *(unsigned __int8 *)(a1 + 46) != *(unsigned __int8 *)(a2 + 46))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 52) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 52) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 52) & 0x200) == 0 || *(unsigned __int8 *)(a1 + 47) != *(unsigned __int8 *)(a2 + 47))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 52) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 52) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 52) & 0x400) == 0 || *(unsigned __int8 *)(a1 + 48) != *(unsigned __int8 *)(a2 + 48))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 52) & 0x400) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x800) == 0;
  if ((*(_WORD *)(a1 + 52) & 0x800) != 0)
    return (*(_WORD *)(a2 + 52) & 0x800) != 0 && *(unsigned __int8 *)(a1 + 49) == *(unsigned __int8 *)(a2 + 49);
  return v4;
}

uint64_t CMMsl::FallDetectionReferee::hash_value(CMMsl::FallDetectionReferee *this)
{
  __int16 v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *((_WORD *)this + 26);
  if ((v1 & 2) != 0)
  {
    v2 = *((double *)this + 2);
    if (v2 == 0.0)
      v2 = 0.0;
    if ((v1 & 4) != 0)
    {
LABEL_3:
      v3 = *((_QWORD *)this + 3);
      if ((v1 & 1) != 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else
  {
    v2 = 0.0;
    if ((v1 & 4) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((v1 & 1) != 0)
  {
LABEL_4:
    v4 = *((_QWORD *)this + 1);
    if ((v1 & 8) != 0)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_19:
  v4 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_5:
    v5 = *((int *)this + 8);
    if ((v1 & 0x20) != 0)
      goto LABEL_6;
    goto LABEL_21;
  }
LABEL_20:
  v5 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_6:
    v6 = *((int *)this + 10);
    if ((v1 & 0x10) != 0)
      goto LABEL_7;
    goto LABEL_22;
  }
LABEL_21:
  v6 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_7:
    v7 = *((int *)this + 9);
    if ((*((_WORD *)this + 26) & 0x1000) != 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  v7 = 0;
  if ((*((_WORD *)this + 26) & 0x1000) != 0)
  {
LABEL_8:
    v8 = *((unsigned __int8 *)this + 50);
    if ((v1 & 0x40) != 0)
      goto LABEL_9;
    goto LABEL_24;
  }
LABEL_23:
  v8 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_9:
    v9 = *((unsigned __int8 *)this + 44);
    if ((v1 & 0x80) != 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  v9 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_10:
    v10 = *((unsigned __int8 *)this + 45);
    if ((*((_WORD *)this + 26) & 0x100) != 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  v10 = 0;
  if ((*((_WORD *)this + 26) & 0x100) != 0)
  {
LABEL_11:
    v11 = *((unsigned __int8 *)this + 46);
    if ((*((_WORD *)this + 26) & 0x200) != 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  v11 = 0;
  if ((*((_WORD *)this + 26) & 0x200) != 0)
  {
LABEL_12:
    v12 = *((unsigned __int8 *)this + 47);
    if ((*((_WORD *)this + 26) & 0x400) != 0)
      goto LABEL_13;
LABEL_28:
    v13 = 0;
    if ((*((_WORD *)this + 26) & 0x800) != 0)
      goto LABEL_14;
LABEL_29:
    v14 = 0;
    return v3 ^ *(_QWORD *)&v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14;
  }
LABEL_27:
  v12 = 0;
  if ((*((_WORD *)this + 26) & 0x400) == 0)
    goto LABEL_28;
LABEL_13:
  v13 = *((unsigned __int8 *)this + 48);
  if ((*((_WORD *)this + 26) & 0x800) == 0)
    goto LABEL_29;
LABEL_14:
  v14 = *((unsigned __int8 *)this + 49);
  return v3 ^ *(_QWORD *)&v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14;
}

_QWORD *CMMsl::FallDetectionReplay::FallDetectionReplay(_QWORD *this)
{
  *this = &off_25135D718;
  *(_QWORD *)((char *)this + 364) = 0;
  return this;
}

{
  *this = &off_25135D718;
  *(_QWORD *)((char *)this + 364) = 0;
  return this;
}

void CMMsl::FallDetectionReplay::~FallDetectionReplay(CMMsl::FallDetectionReplay *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::FallDetectionReplay::FallDetectionReplay(CMMsl::FallDetectionReplay *this, const CMMsl::FallDetectionReplay *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double result;

  *(_QWORD *)this = &off_25135D718;
  v2 = (uint64_t *)((char *)this + 364);
  *(_QWORD *)((char *)this + 364) = 0;
  v3 = (uint64_t *)((char *)a2 + 364);
  v4 = *(_QWORD *)((char *)a2 + 364);
  if ((v4 & 0x40000000) != 0)
  {
    v6 = *((_QWORD *)a2 + 31);
    v5 = 0x40000000;
    *v2 = 0x40000000;
    *((_QWORD *)this + 31) = v6;
    v4 = *v3;
    if ((*v3 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = 0;
  if ((v4 & 0x80000000) != 0)
  {
LABEL_5:
    v7 = *((_QWORD *)a2 + 32);
    v5 |= 0x80000000uLL;
    *v2 = v5;
    *((_QWORD *)this + 32) = v7;
    v4 = *v3;
  }
LABEL_6:
  if ((v4 & 0x80000) != 0)
  {
    v8 = *((_QWORD *)a2 + 20);
    v5 |= 0x80000uLL;
    *v2 = v5;
    *((_QWORD *)this + 20) = v8;
    v4 = *v3;
    if ((*v3 & 0x100000) == 0)
    {
LABEL_8:
      if ((v4 & 0x200000) == 0)
        goto LABEL_9;
      goto LABEL_52;
    }
  }
  else if ((v4 & 0x100000) == 0)
  {
    goto LABEL_8;
  }
  v9 = *((_QWORD *)a2 + 21);
  v5 |= 0x100000uLL;
  *v2 = v5;
  *((_QWORD *)this + 21) = v9;
  v4 = *v3;
  if ((*v3 & 0x200000) == 0)
  {
LABEL_9:
    if ((v4 & 0x8000000000) == 0)
      goto LABEL_10;
    goto LABEL_53;
  }
LABEL_52:
  v10 = *((_QWORD *)a2 + 22);
  v5 |= 0x200000uLL;
  *v2 = v5;
  *((_QWORD *)this + 22) = v10;
  v4 = *v3;
  if ((*v3 & 0x8000000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x40000000000) == 0)
      goto LABEL_11;
    goto LABEL_54;
  }
LABEL_53:
  v11 = *((_QWORD *)a2 + 40);
  v5 |= 0x8000000000uLL;
  *v2 = v5;
  *((_QWORD *)this + 40) = v11;
  v4 = *v3;
  if ((*v3 & 0x40000000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x10000000000) == 0)
      goto LABEL_12;
    goto LABEL_55;
  }
LABEL_54:
  v12 = *((_QWORD *)a2 + 43);
  v5 |= 0x40000000000uLL;
  *v2 = v5;
  *((_QWORD *)this + 43) = v12;
  v4 = *v3;
  if ((*v3 & 0x10000000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x20000000000) == 0)
      goto LABEL_13;
    goto LABEL_56;
  }
LABEL_55:
  v13 = *((_QWORD *)a2 + 41);
  v5 |= 0x10000000000uLL;
  *v2 = v5;
  *((_QWORD *)this + 41) = v13;
  v4 = *v3;
  if ((*v3 & 0x20000000000) == 0)
  {
LABEL_13:
    if ((v4 & 0x80000000000) == 0)
      goto LABEL_14;
    goto LABEL_57;
  }
LABEL_56:
  v14 = *((_QWORD *)a2 + 42);
  v5 |= 0x20000000000uLL;
  *v2 = v5;
  *((_QWORD *)this + 42) = v14;
  v4 = *v3;
  if ((*v3 & 0x80000000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x100000000000) == 0)
      goto LABEL_15;
    goto LABEL_58;
  }
LABEL_57:
  v15 = *((_QWORD *)a2 + 44);
  v5 |= 0x80000000000uLL;
  *v2 = v5;
  *((_QWORD *)this + 44) = v15;
  v4 = *v3;
  if ((*v3 & 0x100000000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_16;
    goto LABEL_59;
  }
LABEL_58:
  v16 = *((_DWORD *)a2 + 90);
  v5 |= 0x100000000000uLL;
  *v2 = v5;
  *((_DWORD *)this + 90) = v16;
  v4 = *v3;
  if ((*v3 & 0x1000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_17;
    goto LABEL_60;
  }
LABEL_59:
  v17 = *((_QWORD *)a2 + 25);
  v5 |= 0x1000000uLL;
  *v2 = v5;
  *((_QWORD *)this + 25) = v17;
  v4 = *v3;
  if ((*v3 & 0x8000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_18;
    goto LABEL_61;
  }
LABEL_60:
  v18 = *((_QWORD *)a2 + 28);
  v5 |= 0x8000000uLL;
  *v2 = v5;
  *((_QWORD *)this + 28) = v18;
  v4 = *v3;
  if ((*v3 & 0x2000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_19;
    goto LABEL_62;
  }
LABEL_61:
  v19 = *((_QWORD *)a2 + 26);
  v5 |= 0x2000000uLL;
  *v2 = v5;
  *((_QWORD *)this + 26) = v19;
  v4 = *v3;
  if ((*v3 & 0x4000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x400000) == 0)
      goto LABEL_20;
    goto LABEL_63;
  }
LABEL_62:
  v20 = *((_QWORD *)a2 + 27);
  v5 |= 0x4000000uLL;
  *v2 = v5;
  *((_QWORD *)this + 27) = v20;
  v4 = *v3;
  if ((*v3 & 0x400000) == 0)
  {
LABEL_20:
    if ((v4 & 0x800000) == 0)
      goto LABEL_21;
    goto LABEL_64;
  }
LABEL_63:
  v21 = *((_QWORD *)a2 + 23);
  v5 |= 0x400000uLL;
  *v2 = v5;
  *((_QWORD *)this + 23) = v21;
  v4 = *v3;
  if ((*v3 & 0x800000) == 0)
  {
LABEL_21:
    if ((v4 & 0x20) == 0)
      goto LABEL_22;
    goto LABEL_65;
  }
LABEL_64:
  v22 = *((_QWORD *)a2 + 24);
  v5 |= 0x800000uLL;
  *v2 = v5;
  *((_QWORD *)this + 24) = v22;
  v4 = *v3;
  if ((*v3 & 0x20) == 0)
  {
LABEL_22:
    if ((v4 & 8) == 0)
      goto LABEL_23;
    goto LABEL_66;
  }
LABEL_65:
  v23 = *((_QWORD *)a2 + 6);
  v5 |= 0x20uLL;
  *v2 = v5;
  *((_QWORD *)this + 6) = v23;
  v4 = *v3;
  if ((*v3 & 8) == 0)
  {
LABEL_23:
    if ((v4 & 1) == 0)
      goto LABEL_24;
    goto LABEL_67;
  }
LABEL_66:
  v24 = *((_QWORD *)a2 + 4);
  v5 |= 8uLL;
  *v2 = v5;
  *((_QWORD *)this + 4) = v24;
  v4 = *v3;
  if ((*v3 & 1) == 0)
  {
LABEL_24:
    if ((v4 & 0x40) == 0)
      goto LABEL_25;
    goto LABEL_68;
  }
LABEL_67:
  v25 = *((_QWORD *)a2 + 1);
  v5 |= 1uLL;
  *v2 = v5;
  *((_QWORD *)this + 1) = v25;
  v4 = *v3;
  if ((*v3 & 0x40) == 0)
  {
LABEL_25:
    if ((v4 & 0x100) == 0)
      goto LABEL_26;
    goto LABEL_69;
  }
LABEL_68:
  v26 = *((_QWORD *)a2 + 7);
  v5 |= 0x40uLL;
  *v2 = v5;
  *((_QWORD *)this + 7) = v26;
  v4 = *v3;
  if ((*v3 & 0x100) == 0)
  {
LABEL_26:
    if ((v4 & 0x10) == 0)
      goto LABEL_27;
    goto LABEL_70;
  }
LABEL_69:
  v27 = *((_QWORD *)a2 + 9);
  v5 |= 0x100uLL;
  *v2 = v5;
  *((_QWORD *)this + 9) = v27;
  v4 = *v3;
  if ((*v3 & 0x10) == 0)
  {
LABEL_27:
    if ((v4 & 0x200) == 0)
      goto LABEL_28;
    goto LABEL_71;
  }
LABEL_70:
  v28 = *((_QWORD *)a2 + 5);
  v5 |= 0x10uLL;
  *v2 = v5;
  *((_QWORD *)this + 5) = v28;
  v4 = *v3;
  if ((*v3 & 0x200) == 0)
  {
LABEL_28:
    if ((v4 & 0x400) == 0)
      goto LABEL_29;
    goto LABEL_72;
  }
LABEL_71:
  v29 = *((_QWORD *)a2 + 10);
  v5 |= 0x200uLL;
  *v2 = v5;
  *((_QWORD *)this + 10) = v29;
  v4 = *v3;
  if ((*v3 & 0x400) == 0)
  {
LABEL_29:
    if ((v4 & 0x800) == 0)
      goto LABEL_30;
    goto LABEL_73;
  }
LABEL_72:
  v30 = *((_QWORD *)a2 + 11);
  v5 |= 0x400uLL;
  *v2 = v5;
  *((_QWORD *)this + 11) = v30;
  v4 = *v3;
  if ((*v3 & 0x800) == 0)
  {
LABEL_30:
    if ((v4 & 0x4000) == 0)
      goto LABEL_31;
    goto LABEL_74;
  }
LABEL_73:
  v31 = *((_QWORD *)a2 + 12);
  v5 |= 0x800uLL;
  *v2 = v5;
  *((_QWORD *)this + 12) = v31;
  v4 = *v3;
  if ((*v3 & 0x4000) == 0)
  {
LABEL_31:
    if ((v4 & 2) == 0)
      goto LABEL_32;
    goto LABEL_75;
  }
LABEL_74:
  v32 = *((_QWORD *)a2 + 15);
  v5 |= 0x4000uLL;
  *v2 = v5;
  *((_QWORD *)this + 15) = v32;
  v4 = *v3;
  if ((*v3 & 2) == 0)
  {
LABEL_32:
    if ((v4 & 0x8000) == 0)
      goto LABEL_33;
    goto LABEL_76;
  }
LABEL_75:
  v33 = *((_QWORD *)a2 + 2);
  v5 |= 2uLL;
  *v2 = v5;
  *((_QWORD *)this + 2) = v33;
  v4 = *v3;
  if ((*v3 & 0x8000) == 0)
  {
LABEL_33:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_34;
    goto LABEL_77;
  }
LABEL_76:
  v34 = *((_QWORD *)a2 + 16);
  v5 |= 0x8000uLL;
  *v2 = v5;
  *((_QWORD *)this + 16) = v34;
  v4 = *v3;
  if ((*v3 & 0x800000000) == 0)
  {
LABEL_34:
    if ((v4 & 0x400000000) == 0)
      goto LABEL_35;
    goto LABEL_78;
  }
LABEL_77:
  v35 = *((_QWORD *)a2 + 36);
  v5 |= 0x800000000uLL;
  *v2 = v5;
  *((_QWORD *)this + 36) = v35;
  v4 = *v3;
  if ((*v3 & 0x400000000) == 0)
  {
LABEL_35:
    if ((v4 & 0x200000000) == 0)
      goto LABEL_36;
    goto LABEL_79;
  }
LABEL_78:
  v36 = *((_QWORD *)a2 + 35);
  v5 |= 0x400000000uLL;
  *v2 = v5;
  *((_QWORD *)this + 35) = v36;
  v4 = *v3;
  if ((*v3 & 0x200000000) == 0)
  {
LABEL_36:
    if ((v4 & 0x100000000) == 0)
      goto LABEL_37;
    goto LABEL_80;
  }
LABEL_79:
  v37 = *((_QWORD *)a2 + 34);
  v5 |= 0x200000000uLL;
  *v2 = v5;
  *((_QWORD *)this + 34) = v37;
  v4 = *v3;
  if ((*v3 & 0x100000000) == 0)
  {
LABEL_37:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_38;
    goto LABEL_81;
  }
LABEL_80:
  v38 = *((_QWORD *)a2 + 33);
  v5 |= 0x100000000uLL;
  *v2 = v5;
  *((_QWORD *)this + 33) = v38;
  v4 = *v3;
  if ((*v3 & 0x20000000) == 0)
  {
LABEL_38:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_39;
    goto LABEL_82;
  }
LABEL_81:
  v39 = *((_QWORD *)a2 + 30);
  v5 |= 0x20000000uLL;
  *v2 = v5;
  *((_QWORD *)this + 30) = v39;
  v4 = *v3;
  if ((*v3 & 0x10000000) == 0)
  {
LABEL_39:
    if ((v4 & 0x2000) == 0)
      goto LABEL_40;
    goto LABEL_83;
  }
LABEL_82:
  v40 = *((_QWORD *)a2 + 29);
  v5 |= 0x10000000uLL;
  *v2 = v5;
  *((_QWORD *)this + 29) = v40;
  v4 = *v3;
  if ((*v3 & 0x2000) == 0)
  {
LABEL_40:
    if ((v4 & 0x10000) == 0)
      goto LABEL_41;
    goto LABEL_84;
  }
LABEL_83:
  v41 = *((_QWORD *)a2 + 14);
  v5 |= 0x2000uLL;
  *v2 = v5;
  *((_QWORD *)this + 14) = v41;
  v4 = *v3;
  if ((*v3 & 0x10000) == 0)
  {
LABEL_41:
    if ((v4 & 4) == 0)
      goto LABEL_42;
    goto LABEL_85;
  }
LABEL_84:
  v42 = *((_QWORD *)a2 + 17);
  v5 |= 0x10000uLL;
  *v2 = v5;
  *((_QWORD *)this + 17) = v42;
  v4 = *v3;
  if ((*v3 & 4) == 0)
  {
LABEL_42:
    if ((v4 & 0x40000) == 0)
      goto LABEL_43;
    goto LABEL_86;
  }
LABEL_85:
  v43 = *((_QWORD *)a2 + 3);
  v5 |= 4uLL;
  *v2 = v5;
  *((_QWORD *)this + 3) = v43;
  v4 = *v3;
  if ((*v3 & 0x40000) == 0)
  {
LABEL_43:
    if ((v4 & 0x20000) == 0)
      goto LABEL_44;
    goto LABEL_87;
  }
LABEL_86:
  v44 = *((_QWORD *)a2 + 19);
  v5 |= 0x40000uLL;
  *v2 = v5;
  *((_QWORD *)this + 19) = v44;
  v4 = *v3;
  if ((*v3 & 0x20000) == 0)
  {
LABEL_44:
    if ((v4 & 0x80) == 0)
      goto LABEL_45;
    goto LABEL_88;
  }
LABEL_87:
  v45 = *((_QWORD *)a2 + 18);
  v5 |= 0x20000uLL;
  *v2 = v5;
  *((_QWORD *)this + 18) = v45;
  v4 = *v3;
  if ((*v3 & 0x80) == 0)
  {
LABEL_45:
    if ((v4 & 0x1000) == 0)
      goto LABEL_46;
    goto LABEL_89;
  }
LABEL_88:
  v46 = *((_QWORD *)a2 + 8);
  v5 |= 0x80uLL;
  *v2 = v5;
  *((_QWORD *)this + 8) = v46;
  v4 = *v3;
  if ((*v3 & 0x1000) == 0)
  {
LABEL_46:
    if ((v4 & 0x4000000000) == 0)
      goto LABEL_47;
    goto LABEL_90;
  }
LABEL_89:
  v47 = *((_QWORD *)a2 + 13);
  v5 |= 0x1000uLL;
  *v2 = v5;
  *((_QWORD *)this + 13) = v47;
  v4 = *v3;
  if ((*v3 & 0x4000000000) == 0)
  {
LABEL_47:
    if ((v4 & 0x1000000000) == 0)
      goto LABEL_48;
    goto LABEL_91;
  }
LABEL_90:
  v48 = *((_QWORD *)a2 + 39);
  v5 |= 0x4000000000uLL;
  *v2 = v5;
  *((_QWORD *)this + 39) = v48;
  v4 = *v3;
  if ((*v3 & 0x1000000000) == 0)
  {
LABEL_48:
    if ((v4 & 0x2000000000) == 0)
      return result;
LABEL_92:
    result = *((double *)a2 + 38);
    *v2 = v5 | 0x2000000000;
    *((double *)this + 38) = result;
    return result;
  }
LABEL_91:
  v49 = *((_QWORD *)a2 + 37);
  v5 |= 0x1000000000uLL;
  *v2 = v5;
  *((_QWORD *)this + 37) = v49;
  if ((*v3 & 0x2000000000) != 0)
    goto LABEL_92;
  return result;
}

CMMsl *CMMsl::FallDetectionReplay::operator=(CMMsl *a1, const CMMsl::FallDetectionReplay *a2)
{
  CMMsl::FallDetectionReplay *v3;
  _BYTE v5[376];

  if (a1 != a2)
  {
    CMMsl::FallDetectionReplay::FallDetectionReplay((CMMsl::FallDetectionReplay *)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallDetectionReplay *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::FallDetectionReplay *a2, CMMsl::FallDetectionReplay *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double result;

  v3 = *(_QWORD *)((char *)this + 364);
  *(_QWORD *)((char *)this + 364) = *(_QWORD *)((char *)a2 + 364);
  *(_QWORD *)((char *)a2 + 364) = v3;
  v4 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = *((_QWORD *)a2 + 31);
  *((_QWORD *)a2 + 31) = v4;
  v5 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = *((_QWORD *)a2 + 32);
  *((_QWORD *)a2 + 32) = v5;
  v6 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = *((_QWORD *)a2 + 20);
  *((_QWORD *)a2 + 20) = v6;
  v7 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = *((_QWORD *)a2 + 21);
  *((_QWORD *)a2 + 21) = v7;
  v8 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = *((_QWORD *)a2 + 22);
  *((_QWORD *)a2 + 22) = v8;
  v9 = *((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = *((_QWORD *)a2 + 40);
  *((_QWORD *)a2 + 40) = v9;
  v10 = *((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = *((_QWORD *)a2 + 43);
  *((_QWORD *)a2 + 43) = v10;
  v11 = *((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = *((_QWORD *)a2 + 41);
  *((_QWORD *)a2 + 41) = v11;
  v12 = *((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = *((_QWORD *)a2 + 42);
  *((_QWORD *)a2 + 42) = v12;
  v13 = *((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = *((_QWORD *)a2 + 44);
  *((_QWORD *)a2 + 44) = v13;
  LODWORD(v13) = *((_DWORD *)this + 90);
  *((_DWORD *)this + 90) = *((_DWORD *)a2 + 90);
  *((_DWORD *)a2 + 90) = v13;
  v14 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = *((_QWORD *)a2 + 25);
  *((_QWORD *)a2 + 25) = v14;
  v15 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = *((_QWORD *)a2 + 28);
  *((_QWORD *)a2 + 28) = v15;
  v16 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = *((_QWORD *)a2 + 26);
  *((_QWORD *)a2 + 26) = v16;
  v17 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = *((_QWORD *)a2 + 27);
  *((_QWORD *)a2 + 27) = v17;
  v18 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = *((_QWORD *)a2 + 23);
  *((_QWORD *)a2 + 23) = v18;
  v19 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = *((_QWORD *)a2 + 24);
  *((_QWORD *)a2 + 24) = v19;
  v20 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v20;
  v21 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v21;
  v22 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v22;
  v23 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v23;
  v24 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v24;
  v25 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v25;
  v26 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v26;
  v27 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v27;
  v28 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v28;
  v29 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v29;
  v30 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v30;
  v31 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v31;
  v32 = *((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = *((_QWORD *)a2 + 36);
  *((_QWORD *)a2 + 36) = v32;
  v33 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = *((_QWORD *)a2 + 35);
  *((_QWORD *)a2 + 35) = v33;
  v34 = *((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = *((_QWORD *)a2 + 34);
  *((_QWORD *)a2 + 34) = v34;
  v35 = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = *((_QWORD *)a2 + 33);
  *((_QWORD *)a2 + 33) = v35;
  v36 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = *((_QWORD *)a2 + 30);
  *((_QWORD *)a2 + 30) = v36;
  v37 = *((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = *((_QWORD *)a2 + 29);
  *((_QWORD *)a2 + 29) = v37;
  v38 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v38;
  v39 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v39;
  v40 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v40;
  v41 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 19) = v41;
  v42 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v42;
  v43 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v43;
  v44 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v44;
  v45 = *((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = *((_QWORD *)a2 + 39);
  *((_QWORD *)a2 + 39) = v45;
  v46 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = *((_QWORD *)a2 + 37);
  *((_QWORD *)a2 + 37) = v46;
  result = *((double *)this + 38);
  *((_QWORD *)this + 38) = *((_QWORD *)a2 + 38);
  *((double *)a2 + 38) = result;
  return result;
}

double CMMsl::FallDetectionReplay::FallDetectionReplay(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135D718;
  *(_QWORD *)(a1 + 364) = *(_QWORD *)(a2 + 364);
  *(_QWORD *)(a2 + 364) = 0;
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  *(_DWORD *)(a1 + 360) = *(_DWORD *)(a2 + 360);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  result = *(double *)(a2 + 304);
  *(double *)(a1 + 304) = result;
  return result;
}

CMMsl *CMMsl::FallDetectionReplay::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::FallDetectionReplay *v3;
  _BYTE v5[376];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::FallDetectionReplay::FallDetectionReplay((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallDetectionReplay *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::FallDetectionReplay::formatText(CMMsl::FallDetectionReplay *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t v6;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)((char *)this + 364);
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "alertCanceledBecauseOfAbsenceOfQuiessence");
    v6 = *v5;
    if ((*v5 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_50;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfActive");
  v6 = *v5;
  if ((*v5 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfChargerState");
  v6 = *v5;
  if ((*v5 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfCyclingPostImpact");
  v6 = *v5;
  if ((*v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfDecimatedLowFrequencyFFT");
  v6 = *v5;
  if ((*v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfDistanceTraveledPostImpact");
  v6 = *v5;
  if ((*v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfHighFrequencyFFT");
  v6 = *v5;
  if ((*v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfLockedNoMotionPre");
  v6 = *v5;
  if ((*v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfLowFrequencyFFT");
  v6 = *v5;
  if ((*v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfNumberOfPeaksFFT");
  v6 = *v5;
  if ((*v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfOffBody");
  v6 = *v5;
  if ((*v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfRepetitiveMotion");
  v6 = *v5;
  if ((*v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfRetraction");
  v6 = *v5;
  if ((*v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfSimilarPeaks");
  v6 = *v5;
  if ((*v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfStand");
  v6 = *v5;
  if ((*v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v6 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfSteps");
  v6 = *v5;
  if ((*v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v6 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfWristState");
  v6 = *v5;
  if ((*v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v6 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfWristStatePost");
  v6 = *v5;
  if ((*v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v6 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfWristStatePre");
  v6 = *v5;
  if ((*v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v6 & 0x100000) == 0)
      goto LABEL_22;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "fallStatsDispatchResetOnAccelSensorTime");
  v6 = *v5;
  if ((*v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v6 & 0x200000) == 0)
      goto LABEL_23;
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(a2, "fallStatsDispatchRestoredOnAccelSensorTime");
  v6 = *v5;
  if ((*v5 & 0x200000) == 0)
  {
LABEL_23:
    if ((v6 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(a2, "hkWorkoutId");
  v6 = *v5;
  if ((*v5 & 0x400000) == 0)
  {
LABEL_24:
    if ((v6 & 0x800000) == 0)
      goto LABEL_25;
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(a2, "impactCanceledBecauseOfExistingAlert");
  v6 = *v5;
  if ((*v5 & 0x800000) == 0)
  {
LABEL_25:
    if ((v6 & 0x1000000) == 0)
      goto LABEL_26;
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(a2, "impactNotConsideredBecauseOfCyclingImpactThresholds");
  v6 = *v5;
  if ((*v5 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v6 & 0x2000000) == 0)
      goto LABEL_27;
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(a2, "impactNotConsideredBecauseOfMaxAccelNormThreshold");
  v6 = *v5;
  if ((*v5 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v6 & 0x4000000) == 0)
      goto LABEL_28;
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(a2, "impactNotConsideredBecauseOfMultiPeaks");
  v6 = *v5;
  if ((*v5 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v6 & 0x8000000) == 0)
      goto LABEL_29;
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(a2, "impactNotConsideredBecauseOfNaiveBayesClassifier");
  v6 = *v5;
  if ((*v5 & 0x8000000) == 0)
  {
LABEL_29:
    if ((v6 & 0x10000000) == 0)
      goto LABEL_30;
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(a2, "impactNotConsideredBecauseOfOtherHardThresholds");
  v6 = *v5;
  if ((*v5 & 0x10000000) == 0)
  {
LABEL_30:
    if ((v6 & 0x20000000) == 0)
      goto LABEL_31;
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(a2, "leavingImpactBecauseOfNewImpactNewImpact");
  v6 = *v5;
  if ((*v5 & 0x20000000) == 0)
  {
LABEL_31:
    if ((v6 & 0x100000000000) == 0)
      goto LABEL_32;
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(a2, "leavingImpactBecauseOfNewImpactOldImpact");
  v6 = *v5;
  if ((*v5 & 0x100000000000) == 0)
  {
LABEL_32:
    if ((v6 & 0x40000000) == 0)
      goto LABEL_33;
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(a2, "operatingMode");
  v6 = *v5;
  if ((*v5 & 0x40000000) == 0)
  {
LABEL_33:
    if ((v6 & 0x80000000) == 0)
      goto LABEL_34;
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(a2, "skippedFallStatsSensorTime");
  v6 = *v5;
  if ((*v5 & 0x80000000) == 0)
  {
LABEL_34:
    if ((v6 & 0x100000000) == 0)
      goto LABEL_35;
    goto LABEL_81;
  }
LABEL_80:
  PB::TextFormatter::format(a2, "skippedGyroSensorTime");
  v6 = *v5;
  if ((*v5 & 0x100000000) == 0)
  {
LABEL_35:
    if ((v6 & 0x200000000) == 0)
      goto LABEL_36;
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(a2, "sosCanceledBecauseOfAbsenceOfLongLie");
  v6 = *v5;
  if ((*v5 & 0x200000000) == 0)
  {
LABEL_36:
    if ((v6 & 0x400000000) == 0)
      goto LABEL_37;
    goto LABEL_83;
  }
LABEL_82:
  PB::TextFormatter::format(a2, "sosCanceledBecauseOfActive");
  v6 = *v5;
  if ((*v5 & 0x400000000) == 0)
  {
LABEL_37:
    if ((v6 & 0x800000000) == 0)
      goto LABEL_38;
    goto LABEL_84;
  }
LABEL_83:
  PB::TextFormatter::format(a2, "sosCanceledBecauseOfStand");
  v6 = *v5;
  if ((*v5 & 0x800000000) == 0)
  {
LABEL_38:
    if ((v6 & 0x1000000000) == 0)
      goto LABEL_39;
    goto LABEL_85;
  }
LABEL_84:
  PB::TextFormatter::format(a2, "sosCanceledBecauseOfSteps");
  v6 = *v5;
  if ((*v5 & 0x1000000000) == 0)
  {
LABEL_39:
    if ((v6 & 0x2000000000) == 0)
      goto LABEL_40;
    goto LABEL_86;
  }
LABEL_85:
  PB::TextFormatter::format(a2, "sosConsideredFallTimestamp");
  v6 = *v5;
  if ((*v5 & 0x2000000000) == 0)
  {
LABEL_40:
    if ((v6 & 0x4000000000) == 0)
      goto LABEL_41;
    goto LABEL_87;
  }
LABEL_86:
  PB::TextFormatter::format(a2, "sosConsideredIOSTime", *((double *)this + 38));
  v6 = *v5;
  if ((*v5 & 0x4000000000) == 0)
  {
LABEL_41:
    if ((v6 & 0x8000000000) == 0)
      goto LABEL_42;
    goto LABEL_88;
  }
LABEL_87:
  PB::TextFormatter::format(a2, "sosConsideredSensorTime");
  v6 = *v5;
  if ((*v5 & 0x8000000000) == 0)
  {
LABEL_42:
    if ((v6 & 0x10000000000) == 0)
      goto LABEL_43;
    goto LABEL_89;
  }
LABEL_88:
  PB::TextFormatter::format(a2, "workoutId");
  v6 = *v5;
  if ((*v5 & 0x10000000000) == 0)
  {
LABEL_43:
    if ((v6 & 0x20000000000) == 0)
      goto LABEL_44;
    goto LABEL_90;
  }
LABEL_89:
  PB::TextFormatter::format(a2, "workoutTransitionPause");
  v6 = *v5;
  if ((*v5 & 0x20000000000) == 0)
  {
LABEL_44:
    if ((v6 & 0x40000000000) == 0)
      goto LABEL_45;
LABEL_91:
    PB::TextFormatter::format(a2, "workoutTransitionStart");
    if ((*v5 & 0x80000000000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_46;
  }
LABEL_90:
  PB::TextFormatter::format(a2, "workoutTransitionResume");
  v6 = *v5;
  if ((*v5 & 0x40000000000) != 0)
    goto LABEL_91;
LABEL_45:
  if ((v6 & 0x80000000000) != 0)
LABEL_46:
    PB::TextFormatter::format(a2, "workoutTransitionStop");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FallDetectionReplay::readFrom(CMMsl::FallDetectionReplay *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t result;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char v73;
  unsigned int v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  char v81;
  unsigned int v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  char v89;
  unsigned int v90;
  uint64_t v91;
  unint64_t v92;
  char v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  char v97;
  unsigned int v98;
  uint64_t v99;
  unint64_t v100;
  char v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  char v105;
  unsigned int v106;
  uint64_t v107;
  unint64_t v108;
  char v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  char v113;
  unsigned int v114;
  uint64_t v115;
  unint64_t v116;
  char v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  char v121;
  unsigned int v122;
  uint64_t v123;
  unint64_t v124;
  char v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  char v129;
  unsigned int v130;
  uint64_t v131;
  unint64_t v132;
  char v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  char v137;
  unsigned int v138;
  uint64_t v139;
  unint64_t v140;
  char v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  char v145;
  unsigned int v146;
  uint64_t v147;
  unint64_t v148;
  char v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  char v153;
  unsigned int v154;
  uint64_t v155;
  unint64_t v156;
  char v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  char v161;
  unsigned int v162;
  uint64_t v163;
  unint64_t v164;
  char v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  char v169;
  unsigned int v170;
  uint64_t v171;
  unint64_t v172;
  char v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  char v177;
  unsigned int v178;
  uint64_t v179;
  unint64_t v180;
  char v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  char v185;
  unsigned int v186;
  uint64_t v187;
  unint64_t v188;
  char v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  char v193;
  unsigned int v194;
  uint64_t v195;
  unint64_t v196;
  char v197;
  unint64_t v198;
  unint64_t v199;
  uint64_t v200;
  char v201;
  unsigned int v202;
  uint64_t v203;
  unint64_t v204;
  char v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  char v209;
  unsigned int v210;
  uint64_t v211;
  unint64_t v212;
  char v213;
  unint64_t v214;
  unint64_t v215;
  uint64_t v216;
  char v217;
  unsigned int v218;
  uint64_t v219;
  unint64_t v220;
  char v221;
  unint64_t v222;
  unint64_t v223;
  uint64_t v224;
  char v225;
  unsigned int v226;
  uint64_t v227;
  unint64_t v228;
  char v229;
  unint64_t v230;
  unint64_t v231;
  uint64_t v232;
  char v233;
  unsigned int v234;
  uint64_t v235;
  unint64_t v236;
  char v237;
  unint64_t v238;
  unint64_t v239;
  uint64_t v240;
  char v241;
  unsigned int v242;
  uint64_t v243;
  unint64_t v244;
  char v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  char v249;
  unsigned int v250;
  uint64_t v251;
  unint64_t v252;
  char v253;
  unint64_t v254;
  unint64_t v255;
  uint64_t v256;
  char v257;
  unsigned int v258;
  uint64_t v259;
  unint64_t v260;
  char v261;
  unint64_t v262;
  unint64_t v263;
  uint64_t v264;
  char v265;
  unsigned int v266;
  uint64_t v267;
  unint64_t v268;
  char v269;
  unint64_t v270;
  unint64_t v271;
  uint64_t v272;
  char v273;
  unsigned int v274;
  uint64_t v275;
  unint64_t v276;
  char v277;
  unint64_t v278;
  unint64_t v279;
  uint64_t v280;
  char v281;
  unsigned int v282;
  uint64_t v283;
  unint64_t v284;
  char v285;
  unint64_t v286;
  unint64_t v287;
  uint64_t v288;
  char v289;
  unsigned int v290;
  uint64_t v291;
  unint64_t v292;
  char v293;
  unint64_t v294;
  unint64_t v295;
  uint64_t v296;
  char v297;
  unsigned int v298;
  uint64_t v299;
  unint64_t v300;
  char v301;
  unint64_t v302;
  unint64_t v303;
  uint64_t v304;
  char v305;
  unsigned int v306;
  uint64_t v307;
  unint64_t v308;
  char v309;
  unint64_t v310;
  unint64_t v311;
  uint64_t v312;
  char v313;
  unsigned int v314;
  uint64_t v315;
  unint64_t v316;
  char v317;
  unint64_t v318;
  unint64_t v319;
  uint64_t v320;
  char v321;
  unsigned int v322;
  uint64_t v323;
  unint64_t v324;
  char v325;
  unint64_t v326;
  unint64_t v327;
  uint64_t v328;
  char v329;
  unsigned int v330;
  uint64_t v331;
  unint64_t v332;
  char v333;
  unint64_t v334;
  unint64_t v335;
  uint64_t v336;
  char v337;
  unsigned int v338;
  uint64_t v339;
  unint64_t v340;
  char v341;
  unint64_t v342;
  unint64_t v343;
  uint64_t v344;
  char v345;
  unsigned int v346;
  uint64_t v347;
  unint64_t v348;
  char v349;
  unint64_t v350;
  unint64_t v351;
  uint64_t v352;
  char v353;
  unsigned int v354;
  uint64_t v355;
  unint64_t v356;
  char v357;
  unint64_t v358;
  unint64_t v359;
  uint64_t v360;
  char v361;
  unsigned int v362;
  uint64_t v363;
  unint64_t v364;
  char v365;
  unint64_t v366;
  unint64_t v367;
  uint64_t v368;
  char v369;
  unsigned int v370;
  uint64_t v371;
  unint64_t v372;
  char v373;
  unint64_t v374;
  char v375;
  unsigned int v376;
  unint64_t v377;
  char v378;
  char v379;
  unsigned int v380;
  unint64_t v381;
  char v382;
  char v383;
  unsigned int v384;
  unint64_t v385;
  char v386;
  char v387;
  unsigned int v388;
  unint64_t v389;
  char v390;
  char v391;
  unsigned int v392;
  unint64_t v393;
  char v394;
  char v395;
  unsigned int v396;
  unint64_t v397;
  char v398;
  char v399;
  unsigned int v400;
  unint64_t v401;
  char v402;
  char v403;
  unsigned int v404;
  unint64_t v405;
  char v406;
  char v407;
  unsigned int v408;
  unint64_t v409;
  char v410;
  char v411;
  unsigned int v412;
  unint64_t v413;
  char v414;
  char v415;
  unsigned int v416;
  unint64_t v417;
  char v418;
  char v419;
  unsigned int v420;
  unint64_t v421;
  char v422;
  char v423;
  unsigned int v424;
  unint64_t v425;
  char v426;
  char v427;
  unsigned int v428;
  unint64_t v429;
  char v430;
  char v431;
  unsigned int v432;
  unint64_t v433;
  char v434;
  char v435;
  unsigned int v436;
  unint64_t v437;
  char v438;
  char v439;
  unsigned int v440;
  unint64_t v441;
  char v442;
  char v443;
  unsigned int v444;
  unint64_t v445;
  char v446;
  char v447;
  unsigned int v448;
  unint64_t v449;
  char v450;
  char v451;
  unsigned int v452;
  unint64_t v453;
  char v454;
  char v455;
  unsigned int v456;
  unint64_t v457;
  char v458;
  char v459;
  unsigned int v460;
  unint64_t v461;
  char v462;
  char v463;
  unsigned int v464;
  unint64_t v465;
  char v466;
  char v467;
  unsigned int v468;
  unint64_t v469;
  char v470;
  char v471;
  unsigned int v472;
  unint64_t v473;
  char v474;
  char v475;
  unsigned int v476;
  unint64_t v477;
  char v478;
  char v479;
  unsigned int v480;
  unint64_t v481;
  char v482;
  char v483;
  unsigned int v484;
  unint64_t v485;
  char v486;
  char v487;
  unsigned int v488;
  unint64_t v489;
  char v490;
  char v491;
  unsigned int v492;
  unint64_t v493;
  char v494;
  char v495;
  unsigned int v496;
  unint64_t v497;
  char v498;
  char v499;
  unsigned int v500;
  unint64_t v501;
  char v502;
  char v503;
  unsigned int v504;
  unint64_t v505;
  char v506;
  char v507;
  unsigned int v508;
  unint64_t v509;
  char v510;
  char v511;
  unsigned int v512;
  unint64_t v513;
  char v514;
  char v515;
  unsigned int v516;
  unint64_t v517;
  char v518;
  char v519;
  unsigned int v520;
  unint64_t v521;
  char v522;
  char v523;
  unsigned int v524;
  unint64_t v525;
  char v526;
  char v527;
  unsigned int v528;
  unint64_t v529;
  char v530;
  char v531;
  unsigned int v532;
  unint64_t v533;
  char v534;
  char v535;
  unsigned int v536;
  unint64_t v537;
  char v538;
  char v539;
  unsigned int v540;
  unint64_t v541;
  char v542;
  char v543;
  unsigned int v544;
  unint64_t v545;
  char v546;
  char v547;
  unsigned int v548;
  unint64_t v549;
  char v550;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  v8 = (_QWORD *)((char *)this + 364);
  while (1)
  {
    v9 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v16 = 0;
      v17 = 0;
      v12 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v18 = v2 + 1;
        v19 = *(_BYTE *)(v9 + v2);
        *((_QWORD *)a2 + 1) = v18;
        v12 |= (unint64_t)(v19 & 0x7F) << v16;
        if ((v19 & 0x80) == 0)
          goto LABEL_26;
        v16 += 7;
        v2 = v18;
        v15 = v17++ > 8;
      }
      while (!v15);
LABEL_20:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      goto LABEL_21;
    }
    v10 = 0;
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v14 = *(_BYTE *)(v9 + v2);
      v12 |= (unint64_t)(v14 & 0x7F) << v10;
      if ((v14 & 0x80) == 0)
        break;
      v10 += 7;
      v2 = v13;
      v15 = v11++ > 8;
      if (v15)
        goto LABEL_20;
    }
LABEL_26:
    if ((v12 & 7) == 4)
      break;
    switch((v12 >> 3))
    {
      case 1u:
        *v8 |= 0x40000000uLL;
        v22 = *((_QWORD *)a2 + 1);
        v23 = *((_QWORD *)a2 + 2);
        v24 = *(_QWORD *)a2;
        if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
        {
          v25 = 0;
          v26 = 0;
          v27 = 0;
          do
          {
            v28 = v22 + 1;
            *((_QWORD *)a2 + 1) = v22 + 1;
            v29 = *(_BYTE *)(v24 + v22);
            v27 |= (unint64_t)(v29 & 0x7F) << v25;
            if ((v29 & 0x80) == 0)
              goto LABEL_651;
            v25 += 7;
            v22 = v28;
            v15 = v26++ > 8;
          }
          while (!v15);
LABEL_345:
          v27 = 0;
          goto LABEL_651;
        }
        v375 = 0;
        v376 = 0;
        v27 = 0;
        if (v23 <= v22)
          v23 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v23 == v22)
          {
            v27 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v377 = v22 + 1;
            v378 = *(_BYTE *)(v24 + v22);
            *((_QWORD *)a2 + 1) = v377;
            v27 |= (unint64_t)(v378 & 0x7F) << v375;
            if (v378 < 0)
            {
              v375 += 7;
              v22 = v377;
              v15 = v376++ > 8;
              if (v15)
                goto LABEL_345;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v27 = 0;
          }
          break;
        }
LABEL_651:
        *((_QWORD *)this + 31) = v27;
        goto LABEL_21;
      case 2u:
        *v8 |= 0x80000000uLL;
        v30 = *((_QWORD *)a2 + 1);
        v31 = *((_QWORD *)a2 + 2);
        v32 = *(_QWORD *)a2;
        if (v30 <= 0xFFFFFFFFFFFFFFF5 && v30 + 10 <= v31)
        {
          v33 = 0;
          v34 = 0;
          v35 = 0;
          do
          {
            v36 = v30 + 1;
            *((_QWORD *)a2 + 1) = v30 + 1;
            v37 = *(_BYTE *)(v32 + v30);
            v35 |= (unint64_t)(v37 & 0x7F) << v33;
            if ((v37 & 0x80) == 0)
              goto LABEL_655;
            v33 += 7;
            v30 = v36;
            v15 = v34++ > 8;
          }
          while (!v15);
LABEL_352:
          v35 = 0;
          goto LABEL_655;
        }
        v379 = 0;
        v380 = 0;
        v35 = 0;
        if (v31 <= v30)
          v31 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v31 == v30)
          {
            v35 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v381 = v30 + 1;
            v382 = *(_BYTE *)(v32 + v30);
            *((_QWORD *)a2 + 1) = v381;
            v35 |= (unint64_t)(v382 & 0x7F) << v379;
            if (v382 < 0)
            {
              v379 += 7;
              v30 = v381;
              v15 = v380++ > 8;
              if (v15)
                goto LABEL_352;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v35 = 0;
          }
          break;
        }
LABEL_655:
        *((_QWORD *)this + 32) = v35;
        goto LABEL_21;
      case 0x15u:
        *v8 |= 0x80000uLL;
        v38 = *((_QWORD *)a2 + 1);
        v39 = *((_QWORD *)a2 + 2);
        v40 = *(_QWORD *)a2;
        if (v38 <= 0xFFFFFFFFFFFFFFF5 && v38 + 10 <= v39)
        {
          v41 = 0;
          v42 = 0;
          v43 = 0;
          do
          {
            v44 = v38 + 1;
            *((_QWORD *)a2 + 1) = v38 + 1;
            v45 = *(_BYTE *)(v40 + v38);
            v43 |= (unint64_t)(v45 & 0x7F) << v41;
            if ((v45 & 0x80) == 0)
              goto LABEL_659;
            v41 += 7;
            v38 = v44;
            v15 = v42++ > 8;
          }
          while (!v15);
LABEL_359:
          v43 = 0;
          goto LABEL_659;
        }
        v383 = 0;
        v384 = 0;
        v43 = 0;
        if (v39 <= v38)
          v39 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v39 == v38)
          {
            v43 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v385 = v38 + 1;
            v386 = *(_BYTE *)(v40 + v38);
            *((_QWORD *)a2 + 1) = v385;
            v43 |= (unint64_t)(v386 & 0x7F) << v383;
            if (v386 < 0)
            {
              v383 += 7;
              v38 = v385;
              v15 = v384++ > 8;
              if (v15)
                goto LABEL_359;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v43 = 0;
          }
          break;
        }
LABEL_659:
        *((_QWORD *)this + 20) = v43;
        goto LABEL_21;
      case 0x16u:
        *v8 |= 0x100000uLL;
        v46 = *((_QWORD *)a2 + 1);
        v47 = *((_QWORD *)a2 + 2);
        v48 = *(_QWORD *)a2;
        if (v46 <= 0xFFFFFFFFFFFFFFF5 && v46 + 10 <= v47)
        {
          v49 = 0;
          v50 = 0;
          v51 = 0;
          do
          {
            v52 = v46 + 1;
            *((_QWORD *)a2 + 1) = v46 + 1;
            v53 = *(_BYTE *)(v48 + v46);
            v51 |= (unint64_t)(v53 & 0x7F) << v49;
            if ((v53 & 0x80) == 0)
              goto LABEL_663;
            v49 += 7;
            v46 = v52;
            v15 = v50++ > 8;
          }
          while (!v15);
LABEL_366:
          v51 = 0;
          goto LABEL_663;
        }
        v387 = 0;
        v388 = 0;
        v51 = 0;
        if (v47 <= v46)
          v47 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v47 == v46)
          {
            v51 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v389 = v46 + 1;
            v390 = *(_BYTE *)(v48 + v46);
            *((_QWORD *)a2 + 1) = v389;
            v51 |= (unint64_t)(v390 & 0x7F) << v387;
            if (v390 < 0)
            {
              v387 += 7;
              v46 = v389;
              v15 = v388++ > 8;
              if (v15)
                goto LABEL_366;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v51 = 0;
          }
          break;
        }
LABEL_663:
        *((_QWORD *)this + 21) = v51;
        goto LABEL_21;
      case 0x2Cu:
        *v8 |= 0x200000uLL;
        v54 = *((_QWORD *)a2 + 1);
        v55 = *((_QWORD *)a2 + 2);
        v56 = *(_QWORD *)a2;
        if (v54 <= 0xFFFFFFFFFFFFFFF5 && v54 + 10 <= v55)
        {
          v57 = 0;
          v58 = 0;
          v59 = 0;
          do
          {
            v60 = v54 + 1;
            *((_QWORD *)a2 + 1) = v54 + 1;
            v61 = *(_BYTE *)(v56 + v54);
            v59 |= (unint64_t)(v61 & 0x7F) << v57;
            if ((v61 & 0x80) == 0)
              goto LABEL_667;
            v57 += 7;
            v54 = v60;
            v15 = v58++ > 8;
          }
          while (!v15);
LABEL_373:
          v59 = 0;
          goto LABEL_667;
        }
        v391 = 0;
        v392 = 0;
        v59 = 0;
        if (v55 <= v54)
          v55 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v55 == v54)
          {
            v59 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v393 = v54 + 1;
            v394 = *(_BYTE *)(v56 + v54);
            *((_QWORD *)a2 + 1) = v393;
            v59 |= (unint64_t)(v394 & 0x7F) << v391;
            if (v394 < 0)
            {
              v391 += 7;
              v54 = v393;
              v15 = v392++ > 8;
              if (v15)
                goto LABEL_373;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v59 = 0;
          }
          break;
        }
LABEL_667:
        *((_QWORD *)this + 22) = v59;
        goto LABEL_21;
      case 0x2Du:
        *v8 |= 0x8000000000uLL;
        v62 = *((_QWORD *)a2 + 1);
        v63 = *((_QWORD *)a2 + 2);
        v64 = *(_QWORD *)a2;
        if (v62 <= 0xFFFFFFFFFFFFFFF5 && v62 + 10 <= v63)
        {
          v65 = 0;
          v66 = 0;
          v67 = 0;
          do
          {
            v68 = v62 + 1;
            *((_QWORD *)a2 + 1) = v62 + 1;
            v69 = *(_BYTE *)(v64 + v62);
            v67 |= (unint64_t)(v69 & 0x7F) << v65;
            if ((v69 & 0x80) == 0)
              goto LABEL_671;
            v65 += 7;
            v62 = v68;
            v15 = v66++ > 8;
          }
          while (!v15);
LABEL_380:
          v67 = 0;
          goto LABEL_671;
        }
        v395 = 0;
        v396 = 0;
        v67 = 0;
        if (v63 <= v62)
          v63 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v63 == v62)
          {
            v67 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v397 = v62 + 1;
            v398 = *(_BYTE *)(v64 + v62);
            *((_QWORD *)a2 + 1) = v397;
            v67 |= (unint64_t)(v398 & 0x7F) << v395;
            if (v398 < 0)
            {
              v395 += 7;
              v62 = v397;
              v15 = v396++ > 8;
              if (v15)
                goto LABEL_380;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v67 = 0;
          }
          break;
        }
LABEL_671:
        *((_QWORD *)this + 40) = v67;
        goto LABEL_21;
      case 0x2Eu:
        *v8 |= 0x40000000000uLL;
        v70 = *((_QWORD *)a2 + 1);
        v71 = *((_QWORD *)a2 + 2);
        v72 = *(_QWORD *)a2;
        if (v70 <= 0xFFFFFFFFFFFFFFF5 && v70 + 10 <= v71)
        {
          v73 = 0;
          v74 = 0;
          v75 = 0;
          do
          {
            v76 = v70 + 1;
            *((_QWORD *)a2 + 1) = v70 + 1;
            v77 = *(_BYTE *)(v72 + v70);
            v75 |= (unint64_t)(v77 & 0x7F) << v73;
            if ((v77 & 0x80) == 0)
              goto LABEL_675;
            v73 += 7;
            v70 = v76;
            v15 = v74++ > 8;
          }
          while (!v15);
LABEL_387:
          v75 = 0;
          goto LABEL_675;
        }
        v399 = 0;
        v400 = 0;
        v75 = 0;
        if (v71 <= v70)
          v71 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v71 == v70)
          {
            v75 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v401 = v70 + 1;
            v402 = *(_BYTE *)(v72 + v70);
            *((_QWORD *)a2 + 1) = v401;
            v75 |= (unint64_t)(v402 & 0x7F) << v399;
            if (v402 < 0)
            {
              v399 += 7;
              v70 = v401;
              v15 = v400++ > 8;
              if (v15)
                goto LABEL_387;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v75 = 0;
          }
          break;
        }
LABEL_675:
        *((_QWORD *)this + 43) = v75;
        goto LABEL_21;
      case 0x2Fu:
        *v8 |= 0x10000000000uLL;
        v78 = *((_QWORD *)a2 + 1);
        v79 = *((_QWORD *)a2 + 2);
        v80 = *(_QWORD *)a2;
        if (v78 <= 0xFFFFFFFFFFFFFFF5 && v78 + 10 <= v79)
        {
          v81 = 0;
          v82 = 0;
          v83 = 0;
          do
          {
            v84 = v78 + 1;
            *((_QWORD *)a2 + 1) = v78 + 1;
            v85 = *(_BYTE *)(v80 + v78);
            v83 |= (unint64_t)(v85 & 0x7F) << v81;
            if ((v85 & 0x80) == 0)
              goto LABEL_679;
            v81 += 7;
            v78 = v84;
            v15 = v82++ > 8;
          }
          while (!v15);
LABEL_394:
          v83 = 0;
          goto LABEL_679;
        }
        v403 = 0;
        v404 = 0;
        v83 = 0;
        if (v79 <= v78)
          v79 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v79 == v78)
          {
            v83 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v405 = v78 + 1;
            v406 = *(_BYTE *)(v80 + v78);
            *((_QWORD *)a2 + 1) = v405;
            v83 |= (unint64_t)(v406 & 0x7F) << v403;
            if (v406 < 0)
            {
              v403 += 7;
              v78 = v405;
              v15 = v404++ > 8;
              if (v15)
                goto LABEL_394;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v83 = 0;
          }
          break;
        }
LABEL_679:
        *((_QWORD *)this + 41) = v83;
        goto LABEL_21;
      case 0x30u:
        *v8 |= 0x20000000000uLL;
        v86 = *((_QWORD *)a2 + 1);
        v87 = *((_QWORD *)a2 + 2);
        v88 = *(_QWORD *)a2;
        if (v86 <= 0xFFFFFFFFFFFFFFF5 && v86 + 10 <= v87)
        {
          v89 = 0;
          v90 = 0;
          v91 = 0;
          do
          {
            v92 = v86 + 1;
            *((_QWORD *)a2 + 1) = v86 + 1;
            v93 = *(_BYTE *)(v88 + v86);
            v91 |= (unint64_t)(v93 & 0x7F) << v89;
            if ((v93 & 0x80) == 0)
              goto LABEL_683;
            v89 += 7;
            v86 = v92;
            v15 = v90++ > 8;
          }
          while (!v15);
LABEL_401:
          v91 = 0;
          goto LABEL_683;
        }
        v407 = 0;
        v408 = 0;
        v91 = 0;
        if (v87 <= v86)
          v87 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v87 == v86)
          {
            v91 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v409 = v86 + 1;
            v410 = *(_BYTE *)(v88 + v86);
            *((_QWORD *)a2 + 1) = v409;
            v91 |= (unint64_t)(v410 & 0x7F) << v407;
            if (v410 < 0)
            {
              v407 += 7;
              v86 = v409;
              v15 = v408++ > 8;
              if (v15)
                goto LABEL_401;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v91 = 0;
          }
          break;
        }
LABEL_683:
        *((_QWORD *)this + 42) = v91;
        goto LABEL_21;
      case 0x31u:
        *v8 |= 0x80000000000uLL;
        v94 = *((_QWORD *)a2 + 1);
        v95 = *((_QWORD *)a2 + 2);
        v96 = *(_QWORD *)a2;
        if (v94 <= 0xFFFFFFFFFFFFFFF5 && v94 + 10 <= v95)
        {
          v97 = 0;
          v98 = 0;
          v99 = 0;
          do
          {
            v100 = v94 + 1;
            *((_QWORD *)a2 + 1) = v94 + 1;
            v101 = *(_BYTE *)(v96 + v94);
            v99 |= (unint64_t)(v101 & 0x7F) << v97;
            if ((v101 & 0x80) == 0)
              goto LABEL_687;
            v97 += 7;
            v94 = v100;
            v15 = v98++ > 8;
          }
          while (!v15);
LABEL_408:
          v99 = 0;
          goto LABEL_687;
        }
        v411 = 0;
        v412 = 0;
        v99 = 0;
        if (v95 <= v94)
          v95 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v95 == v94)
          {
            v99 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v413 = v94 + 1;
            v414 = *(_BYTE *)(v96 + v94);
            *((_QWORD *)a2 + 1) = v413;
            v99 |= (unint64_t)(v414 & 0x7F) << v411;
            if (v414 < 0)
            {
              v411 += 7;
              v94 = v413;
              v15 = v412++ > 8;
              if (v15)
                goto LABEL_408;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v99 = 0;
          }
          break;
        }
LABEL_687:
        *((_QWORD *)this + 44) = v99;
        goto LABEL_21;
      case 0x32u:
        *v8 |= 0x100000000000uLL;
        v102 = *((_QWORD *)a2 + 1);
        v103 = *((_QWORD *)a2 + 2);
        v104 = *(_QWORD *)a2;
        if (v102 <= 0xFFFFFFFFFFFFFFF5 && v102 + 10 <= v103)
        {
          v105 = 0;
          v106 = 0;
          v107 = 0;
          do
          {
            v108 = v102 + 1;
            *((_QWORD *)a2 + 1) = v102 + 1;
            v109 = *(_BYTE *)(v104 + v102);
            v107 |= (unint64_t)(v109 & 0x7F) << v105;
            if ((v109 & 0x80) == 0)
              goto LABEL_691;
            v105 += 7;
            v102 = v108;
            v15 = v106++ > 8;
          }
          while (!v15);
LABEL_415:
          LODWORD(v107) = 0;
          goto LABEL_691;
        }
        v415 = 0;
        v416 = 0;
        v107 = 0;
        if (v103 <= v102)
          v103 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v103 == v102)
          {
            LODWORD(v107) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v417 = v102 + 1;
            v418 = *(_BYTE *)(v104 + v102);
            *((_QWORD *)a2 + 1) = v417;
            v107 |= (unint64_t)(v418 & 0x7F) << v415;
            if (v418 < 0)
            {
              v415 += 7;
              v102 = v417;
              v15 = v416++ > 8;
              if (v15)
                goto LABEL_415;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v107) = 0;
          }
          break;
        }
LABEL_691:
        *((_DWORD *)this + 90) = v107;
        goto LABEL_21;
      case 0x33u:
        *v8 |= 0x1000000uLL;
        v110 = *((_QWORD *)a2 + 1);
        v111 = *((_QWORD *)a2 + 2);
        v112 = *(_QWORD *)a2;
        if (v110 <= 0xFFFFFFFFFFFFFFF5 && v110 + 10 <= v111)
        {
          v113 = 0;
          v114 = 0;
          v115 = 0;
          do
          {
            v116 = v110 + 1;
            *((_QWORD *)a2 + 1) = v110 + 1;
            v117 = *(_BYTE *)(v112 + v110);
            v115 |= (unint64_t)(v117 & 0x7F) << v113;
            if ((v117 & 0x80) == 0)
              goto LABEL_695;
            v113 += 7;
            v110 = v116;
            v15 = v114++ > 8;
          }
          while (!v15);
LABEL_422:
          v115 = 0;
          goto LABEL_695;
        }
        v419 = 0;
        v420 = 0;
        v115 = 0;
        if (v111 <= v110)
          v111 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v111 == v110)
          {
            v115 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v421 = v110 + 1;
            v422 = *(_BYTE *)(v112 + v110);
            *((_QWORD *)a2 + 1) = v421;
            v115 |= (unint64_t)(v422 & 0x7F) << v419;
            if (v422 < 0)
            {
              v419 += 7;
              v110 = v421;
              v15 = v420++ > 8;
              if (v15)
                goto LABEL_422;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v115 = 0;
          }
          break;
        }
LABEL_695:
        *((_QWORD *)this + 25) = v115;
        goto LABEL_21;
      case 0x34u:
        *v8 |= 0x8000000uLL;
        v118 = *((_QWORD *)a2 + 1);
        v119 = *((_QWORD *)a2 + 2);
        v120 = *(_QWORD *)a2;
        if (v118 <= 0xFFFFFFFFFFFFFFF5 && v118 + 10 <= v119)
        {
          v121 = 0;
          v122 = 0;
          v123 = 0;
          do
          {
            v124 = v118 + 1;
            *((_QWORD *)a2 + 1) = v118 + 1;
            v125 = *(_BYTE *)(v120 + v118);
            v123 |= (unint64_t)(v125 & 0x7F) << v121;
            if ((v125 & 0x80) == 0)
              goto LABEL_699;
            v121 += 7;
            v118 = v124;
            v15 = v122++ > 8;
          }
          while (!v15);
LABEL_429:
          v123 = 0;
          goto LABEL_699;
        }
        v423 = 0;
        v424 = 0;
        v123 = 0;
        if (v119 <= v118)
          v119 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v119 == v118)
          {
            v123 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v425 = v118 + 1;
            v426 = *(_BYTE *)(v120 + v118);
            *((_QWORD *)a2 + 1) = v425;
            v123 |= (unint64_t)(v426 & 0x7F) << v423;
            if (v426 < 0)
            {
              v423 += 7;
              v118 = v425;
              v15 = v424++ > 8;
              if (v15)
                goto LABEL_429;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v123 = 0;
          }
          break;
        }
LABEL_699:
        *((_QWORD *)this + 28) = v123;
        goto LABEL_21;
      case 0x35u:
        *v8 |= 0x2000000uLL;
        v126 = *((_QWORD *)a2 + 1);
        v127 = *((_QWORD *)a2 + 2);
        v128 = *(_QWORD *)a2;
        if (v126 <= 0xFFFFFFFFFFFFFFF5 && v126 + 10 <= v127)
        {
          v129 = 0;
          v130 = 0;
          v131 = 0;
          do
          {
            v132 = v126 + 1;
            *((_QWORD *)a2 + 1) = v126 + 1;
            v133 = *(_BYTE *)(v128 + v126);
            v131 |= (unint64_t)(v133 & 0x7F) << v129;
            if ((v133 & 0x80) == 0)
              goto LABEL_703;
            v129 += 7;
            v126 = v132;
            v15 = v130++ > 8;
          }
          while (!v15);
LABEL_436:
          v131 = 0;
          goto LABEL_703;
        }
        v427 = 0;
        v428 = 0;
        v131 = 0;
        if (v127 <= v126)
          v127 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v127 == v126)
          {
            v131 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v429 = v126 + 1;
            v430 = *(_BYTE *)(v128 + v126);
            *((_QWORD *)a2 + 1) = v429;
            v131 |= (unint64_t)(v430 & 0x7F) << v427;
            if (v430 < 0)
            {
              v427 += 7;
              v126 = v429;
              v15 = v428++ > 8;
              if (v15)
                goto LABEL_436;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v131 = 0;
          }
          break;
        }
LABEL_703:
        *((_QWORD *)this + 26) = v131;
        goto LABEL_21;
      case 0x36u:
        *v8 |= 0x4000000uLL;
        v134 = *((_QWORD *)a2 + 1);
        v135 = *((_QWORD *)a2 + 2);
        v136 = *(_QWORD *)a2;
        if (v134 <= 0xFFFFFFFFFFFFFFF5 && v134 + 10 <= v135)
        {
          v137 = 0;
          v138 = 0;
          v139 = 0;
          do
          {
            v140 = v134 + 1;
            *((_QWORD *)a2 + 1) = v134 + 1;
            v141 = *(_BYTE *)(v136 + v134);
            v139 |= (unint64_t)(v141 & 0x7F) << v137;
            if ((v141 & 0x80) == 0)
              goto LABEL_707;
            v137 += 7;
            v134 = v140;
            v15 = v138++ > 8;
          }
          while (!v15);
LABEL_443:
          v139 = 0;
          goto LABEL_707;
        }
        v431 = 0;
        v432 = 0;
        v139 = 0;
        if (v135 <= v134)
          v135 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v135 == v134)
          {
            v139 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v433 = v134 + 1;
            v434 = *(_BYTE *)(v136 + v134);
            *((_QWORD *)a2 + 1) = v433;
            v139 |= (unint64_t)(v434 & 0x7F) << v431;
            if (v434 < 0)
            {
              v431 += 7;
              v134 = v433;
              v15 = v432++ > 8;
              if (v15)
                goto LABEL_443;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v139 = 0;
          }
          break;
        }
LABEL_707:
        *((_QWORD *)this + 27) = v139;
        goto LABEL_21;
      case 0x37u:
        *v8 |= 0x400000uLL;
        v142 = *((_QWORD *)a2 + 1);
        v143 = *((_QWORD *)a2 + 2);
        v144 = *(_QWORD *)a2;
        if (v142 <= 0xFFFFFFFFFFFFFFF5 && v142 + 10 <= v143)
        {
          v145 = 0;
          v146 = 0;
          v147 = 0;
          do
          {
            v148 = v142 + 1;
            *((_QWORD *)a2 + 1) = v142 + 1;
            v149 = *(_BYTE *)(v144 + v142);
            v147 |= (unint64_t)(v149 & 0x7F) << v145;
            if ((v149 & 0x80) == 0)
              goto LABEL_711;
            v145 += 7;
            v142 = v148;
            v15 = v146++ > 8;
          }
          while (!v15);
LABEL_450:
          v147 = 0;
          goto LABEL_711;
        }
        v435 = 0;
        v436 = 0;
        v147 = 0;
        if (v143 <= v142)
          v143 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v143 == v142)
          {
            v147 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v437 = v142 + 1;
            v438 = *(_BYTE *)(v144 + v142);
            *((_QWORD *)a2 + 1) = v437;
            v147 |= (unint64_t)(v438 & 0x7F) << v435;
            if (v438 < 0)
            {
              v435 += 7;
              v142 = v437;
              v15 = v436++ > 8;
              if (v15)
                goto LABEL_450;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v147 = 0;
          }
          break;
        }
LABEL_711:
        *((_QWORD *)this + 23) = v147;
        goto LABEL_21;
      case 0x38u:
        *v8 |= 0x800000uLL;
        v150 = *((_QWORD *)a2 + 1);
        v151 = *((_QWORD *)a2 + 2);
        v152 = *(_QWORD *)a2;
        if (v150 <= 0xFFFFFFFFFFFFFFF5 && v150 + 10 <= v151)
        {
          v153 = 0;
          v154 = 0;
          v155 = 0;
          do
          {
            v156 = v150 + 1;
            *((_QWORD *)a2 + 1) = v150 + 1;
            v157 = *(_BYTE *)(v152 + v150);
            v155 |= (unint64_t)(v157 & 0x7F) << v153;
            if ((v157 & 0x80) == 0)
              goto LABEL_715;
            v153 += 7;
            v150 = v156;
            v15 = v154++ > 8;
          }
          while (!v15);
LABEL_457:
          v155 = 0;
          goto LABEL_715;
        }
        v439 = 0;
        v440 = 0;
        v155 = 0;
        if (v151 <= v150)
          v151 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v151 == v150)
          {
            v155 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v441 = v150 + 1;
            v442 = *(_BYTE *)(v152 + v150);
            *((_QWORD *)a2 + 1) = v441;
            v155 |= (unint64_t)(v442 & 0x7F) << v439;
            if (v442 < 0)
            {
              v439 += 7;
              v150 = v441;
              v15 = v440++ > 8;
              if (v15)
                goto LABEL_457;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v155 = 0;
          }
          break;
        }
LABEL_715:
        *((_QWORD *)this + 24) = v155;
        goto LABEL_21;
      case 0x3Bu:
        *v8 |= 0x20uLL;
        v158 = *((_QWORD *)a2 + 1);
        v159 = *((_QWORD *)a2 + 2);
        v160 = *(_QWORD *)a2;
        if (v158 <= 0xFFFFFFFFFFFFFFF5 && v158 + 10 <= v159)
        {
          v161 = 0;
          v162 = 0;
          v163 = 0;
          do
          {
            v164 = v158 + 1;
            *((_QWORD *)a2 + 1) = v158 + 1;
            v165 = *(_BYTE *)(v160 + v158);
            v163 |= (unint64_t)(v165 & 0x7F) << v161;
            if ((v165 & 0x80) == 0)
              goto LABEL_719;
            v161 += 7;
            v158 = v164;
            v15 = v162++ > 8;
          }
          while (!v15);
LABEL_464:
          v163 = 0;
          goto LABEL_719;
        }
        v443 = 0;
        v444 = 0;
        v163 = 0;
        if (v159 <= v158)
          v159 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v159 == v158)
          {
            v163 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v445 = v158 + 1;
            v446 = *(_BYTE *)(v160 + v158);
            *((_QWORD *)a2 + 1) = v445;
            v163 |= (unint64_t)(v446 & 0x7F) << v443;
            if (v446 < 0)
            {
              v443 += 7;
              v158 = v445;
              v15 = v444++ > 8;
              if (v15)
                goto LABEL_464;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v163 = 0;
          }
          break;
        }
LABEL_719:
        *((_QWORD *)this + 6) = v163;
        goto LABEL_21;
      case 0x3Cu:
        *v8 |= 8uLL;
        v166 = *((_QWORD *)a2 + 1);
        v167 = *((_QWORD *)a2 + 2);
        v168 = *(_QWORD *)a2;
        if (v166 <= 0xFFFFFFFFFFFFFFF5 && v166 + 10 <= v167)
        {
          v169 = 0;
          v170 = 0;
          v171 = 0;
          do
          {
            v172 = v166 + 1;
            *((_QWORD *)a2 + 1) = v166 + 1;
            v173 = *(_BYTE *)(v168 + v166);
            v171 |= (unint64_t)(v173 & 0x7F) << v169;
            if ((v173 & 0x80) == 0)
              goto LABEL_723;
            v169 += 7;
            v166 = v172;
            v15 = v170++ > 8;
          }
          while (!v15);
LABEL_471:
          v171 = 0;
          goto LABEL_723;
        }
        v447 = 0;
        v448 = 0;
        v171 = 0;
        if (v167 <= v166)
          v167 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v167 == v166)
          {
            v171 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v449 = v166 + 1;
            v450 = *(_BYTE *)(v168 + v166);
            *((_QWORD *)a2 + 1) = v449;
            v171 |= (unint64_t)(v450 & 0x7F) << v447;
            if (v450 < 0)
            {
              v447 += 7;
              v166 = v449;
              v15 = v448++ > 8;
              if (v15)
                goto LABEL_471;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v171 = 0;
          }
          break;
        }
LABEL_723:
        *((_QWORD *)this + 4) = v171;
        goto LABEL_21;
      case 0x3Du:
        *v8 |= 1uLL;
        v174 = *((_QWORD *)a2 + 1);
        v175 = *((_QWORD *)a2 + 2);
        v176 = *(_QWORD *)a2;
        if (v174 <= 0xFFFFFFFFFFFFFFF5 && v174 + 10 <= v175)
        {
          v177 = 0;
          v178 = 0;
          v179 = 0;
          do
          {
            v180 = v174 + 1;
            *((_QWORD *)a2 + 1) = v174 + 1;
            v181 = *(_BYTE *)(v176 + v174);
            v179 |= (unint64_t)(v181 & 0x7F) << v177;
            if ((v181 & 0x80) == 0)
              goto LABEL_727;
            v177 += 7;
            v174 = v180;
            v15 = v178++ > 8;
          }
          while (!v15);
LABEL_478:
          v179 = 0;
          goto LABEL_727;
        }
        v451 = 0;
        v452 = 0;
        v179 = 0;
        if (v175 <= v174)
          v175 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v175 == v174)
          {
            v179 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v453 = v174 + 1;
            v454 = *(_BYTE *)(v176 + v174);
            *((_QWORD *)a2 + 1) = v453;
            v179 |= (unint64_t)(v454 & 0x7F) << v451;
            if (v454 < 0)
            {
              v451 += 7;
              v174 = v453;
              v15 = v452++ > 8;
              if (v15)
                goto LABEL_478;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v179 = 0;
          }
          break;
        }
LABEL_727:
        *((_QWORD *)this + 1) = v179;
        goto LABEL_21;
      case 0x3Eu:
        *v8 |= 0x40uLL;
        v182 = *((_QWORD *)a2 + 1);
        v183 = *((_QWORD *)a2 + 2);
        v184 = *(_QWORD *)a2;
        if (v182 <= 0xFFFFFFFFFFFFFFF5 && v182 + 10 <= v183)
        {
          v185 = 0;
          v186 = 0;
          v187 = 0;
          do
          {
            v188 = v182 + 1;
            *((_QWORD *)a2 + 1) = v182 + 1;
            v189 = *(_BYTE *)(v184 + v182);
            v187 |= (unint64_t)(v189 & 0x7F) << v185;
            if ((v189 & 0x80) == 0)
              goto LABEL_731;
            v185 += 7;
            v182 = v188;
            v15 = v186++ > 8;
          }
          while (!v15);
LABEL_485:
          v187 = 0;
          goto LABEL_731;
        }
        v455 = 0;
        v456 = 0;
        v187 = 0;
        if (v183 <= v182)
          v183 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v183 == v182)
          {
            v187 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v457 = v182 + 1;
            v458 = *(_BYTE *)(v184 + v182);
            *((_QWORD *)a2 + 1) = v457;
            v187 |= (unint64_t)(v458 & 0x7F) << v455;
            if (v458 < 0)
            {
              v455 += 7;
              v182 = v457;
              v15 = v456++ > 8;
              if (v15)
                goto LABEL_485;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v187 = 0;
          }
          break;
        }
LABEL_731:
        *((_QWORD *)this + 7) = v187;
        goto LABEL_21;
      case 0x3Fu:
        *v8 |= 0x100uLL;
        v190 = *((_QWORD *)a2 + 1);
        v191 = *((_QWORD *)a2 + 2);
        v192 = *(_QWORD *)a2;
        if (v190 <= 0xFFFFFFFFFFFFFFF5 && v190 + 10 <= v191)
        {
          v193 = 0;
          v194 = 0;
          v195 = 0;
          do
          {
            v196 = v190 + 1;
            *((_QWORD *)a2 + 1) = v190 + 1;
            v197 = *(_BYTE *)(v192 + v190);
            v195 |= (unint64_t)(v197 & 0x7F) << v193;
            if ((v197 & 0x80) == 0)
              goto LABEL_735;
            v193 += 7;
            v190 = v196;
            v15 = v194++ > 8;
          }
          while (!v15);
LABEL_492:
          v195 = 0;
          goto LABEL_735;
        }
        v459 = 0;
        v460 = 0;
        v195 = 0;
        if (v191 <= v190)
          v191 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v191 == v190)
          {
            v195 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v461 = v190 + 1;
            v462 = *(_BYTE *)(v192 + v190);
            *((_QWORD *)a2 + 1) = v461;
            v195 |= (unint64_t)(v462 & 0x7F) << v459;
            if (v462 < 0)
            {
              v459 += 7;
              v190 = v461;
              v15 = v460++ > 8;
              if (v15)
                goto LABEL_492;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v195 = 0;
          }
          break;
        }
LABEL_735:
        *((_QWORD *)this + 9) = v195;
        goto LABEL_21;
      case 0x40u:
        *v8 |= 0x10uLL;
        v198 = *((_QWORD *)a2 + 1);
        v199 = *((_QWORD *)a2 + 2);
        v200 = *(_QWORD *)a2;
        if (v198 <= 0xFFFFFFFFFFFFFFF5 && v198 + 10 <= v199)
        {
          v201 = 0;
          v202 = 0;
          v203 = 0;
          do
          {
            v204 = v198 + 1;
            *((_QWORD *)a2 + 1) = v198 + 1;
            v205 = *(_BYTE *)(v200 + v198);
            v203 |= (unint64_t)(v205 & 0x7F) << v201;
            if ((v205 & 0x80) == 0)
              goto LABEL_739;
            v201 += 7;
            v198 = v204;
            v15 = v202++ > 8;
          }
          while (!v15);
LABEL_499:
          v203 = 0;
          goto LABEL_739;
        }
        v463 = 0;
        v464 = 0;
        v203 = 0;
        if (v199 <= v198)
          v199 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v199 == v198)
          {
            v203 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v465 = v198 + 1;
            v466 = *(_BYTE *)(v200 + v198);
            *((_QWORD *)a2 + 1) = v465;
            v203 |= (unint64_t)(v466 & 0x7F) << v463;
            if (v466 < 0)
            {
              v463 += 7;
              v198 = v465;
              v15 = v464++ > 8;
              if (v15)
                goto LABEL_499;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v203 = 0;
          }
          break;
        }
LABEL_739:
        *((_QWORD *)this + 5) = v203;
        goto LABEL_21;
      case 0x41u:
        *v8 |= 0x200uLL;
        v206 = *((_QWORD *)a2 + 1);
        v207 = *((_QWORD *)a2 + 2);
        v208 = *(_QWORD *)a2;
        if (v206 <= 0xFFFFFFFFFFFFFFF5 && v206 + 10 <= v207)
        {
          v209 = 0;
          v210 = 0;
          v211 = 0;
          do
          {
            v212 = v206 + 1;
            *((_QWORD *)a2 + 1) = v206 + 1;
            v213 = *(_BYTE *)(v208 + v206);
            v211 |= (unint64_t)(v213 & 0x7F) << v209;
            if ((v213 & 0x80) == 0)
              goto LABEL_743;
            v209 += 7;
            v206 = v212;
            v15 = v210++ > 8;
          }
          while (!v15);
LABEL_506:
          v211 = 0;
          goto LABEL_743;
        }
        v467 = 0;
        v468 = 0;
        v211 = 0;
        if (v207 <= v206)
          v207 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v207 == v206)
          {
            v211 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v469 = v206 + 1;
            v470 = *(_BYTE *)(v208 + v206);
            *((_QWORD *)a2 + 1) = v469;
            v211 |= (unint64_t)(v470 & 0x7F) << v467;
            if (v470 < 0)
            {
              v467 += 7;
              v206 = v469;
              v15 = v468++ > 8;
              if (v15)
                goto LABEL_506;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v211 = 0;
          }
          break;
        }
LABEL_743:
        *((_QWORD *)this + 10) = v211;
        goto LABEL_21;
      case 0x42u:
        *v8 |= 0x400uLL;
        v214 = *((_QWORD *)a2 + 1);
        v215 = *((_QWORD *)a2 + 2);
        v216 = *(_QWORD *)a2;
        if (v214 <= 0xFFFFFFFFFFFFFFF5 && v214 + 10 <= v215)
        {
          v217 = 0;
          v218 = 0;
          v219 = 0;
          do
          {
            v220 = v214 + 1;
            *((_QWORD *)a2 + 1) = v214 + 1;
            v221 = *(_BYTE *)(v216 + v214);
            v219 |= (unint64_t)(v221 & 0x7F) << v217;
            if ((v221 & 0x80) == 0)
              goto LABEL_747;
            v217 += 7;
            v214 = v220;
            v15 = v218++ > 8;
          }
          while (!v15);
LABEL_513:
          v219 = 0;
          goto LABEL_747;
        }
        v471 = 0;
        v472 = 0;
        v219 = 0;
        if (v215 <= v214)
          v215 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v215 == v214)
          {
            v219 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v473 = v214 + 1;
            v474 = *(_BYTE *)(v216 + v214);
            *((_QWORD *)a2 + 1) = v473;
            v219 |= (unint64_t)(v474 & 0x7F) << v471;
            if (v474 < 0)
            {
              v471 += 7;
              v214 = v473;
              v15 = v472++ > 8;
              if (v15)
                goto LABEL_513;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v219 = 0;
          }
          break;
        }
LABEL_747:
        *((_QWORD *)this + 11) = v219;
        goto LABEL_21;
      case 0x43u:
        *v8 |= 0x800uLL;
        v222 = *((_QWORD *)a2 + 1);
        v223 = *((_QWORD *)a2 + 2);
        v224 = *(_QWORD *)a2;
        if (v222 <= 0xFFFFFFFFFFFFFFF5 && v222 + 10 <= v223)
        {
          v225 = 0;
          v226 = 0;
          v227 = 0;
          do
          {
            v228 = v222 + 1;
            *((_QWORD *)a2 + 1) = v222 + 1;
            v229 = *(_BYTE *)(v224 + v222);
            v227 |= (unint64_t)(v229 & 0x7F) << v225;
            if ((v229 & 0x80) == 0)
              goto LABEL_751;
            v225 += 7;
            v222 = v228;
            v15 = v226++ > 8;
          }
          while (!v15);
LABEL_520:
          v227 = 0;
          goto LABEL_751;
        }
        v475 = 0;
        v476 = 0;
        v227 = 0;
        if (v223 <= v222)
          v223 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v223 == v222)
          {
            v227 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v477 = v222 + 1;
            v478 = *(_BYTE *)(v224 + v222);
            *((_QWORD *)a2 + 1) = v477;
            v227 |= (unint64_t)(v478 & 0x7F) << v475;
            if (v478 < 0)
            {
              v475 += 7;
              v222 = v477;
              v15 = v476++ > 8;
              if (v15)
                goto LABEL_520;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v227 = 0;
          }
          break;
        }
LABEL_751:
        *((_QWORD *)this + 12) = v227;
        goto LABEL_21;
      case 0x44u:
        *v8 |= 0x4000uLL;
        v230 = *((_QWORD *)a2 + 1);
        v231 = *((_QWORD *)a2 + 2);
        v232 = *(_QWORD *)a2;
        if (v230 <= 0xFFFFFFFFFFFFFFF5 && v230 + 10 <= v231)
        {
          v233 = 0;
          v234 = 0;
          v235 = 0;
          do
          {
            v236 = v230 + 1;
            *((_QWORD *)a2 + 1) = v230 + 1;
            v237 = *(_BYTE *)(v232 + v230);
            v235 |= (unint64_t)(v237 & 0x7F) << v233;
            if ((v237 & 0x80) == 0)
              goto LABEL_755;
            v233 += 7;
            v230 = v236;
            v15 = v234++ > 8;
          }
          while (!v15);
LABEL_527:
          v235 = 0;
          goto LABEL_755;
        }
        v479 = 0;
        v480 = 0;
        v235 = 0;
        if (v231 <= v230)
          v231 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v231 == v230)
          {
            v235 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v481 = v230 + 1;
            v482 = *(_BYTE *)(v232 + v230);
            *((_QWORD *)a2 + 1) = v481;
            v235 |= (unint64_t)(v482 & 0x7F) << v479;
            if (v482 < 0)
            {
              v479 += 7;
              v230 = v481;
              v15 = v480++ > 8;
              if (v15)
                goto LABEL_527;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v235 = 0;
          }
          break;
        }
LABEL_755:
        *((_QWORD *)this + 15) = v235;
        goto LABEL_21;
      case 0x45u:
        *v8 |= 2uLL;
        v238 = *((_QWORD *)a2 + 1);
        v239 = *((_QWORD *)a2 + 2);
        v240 = *(_QWORD *)a2;
        if (v238 <= 0xFFFFFFFFFFFFFFF5 && v238 + 10 <= v239)
        {
          v241 = 0;
          v242 = 0;
          v243 = 0;
          do
          {
            v244 = v238 + 1;
            *((_QWORD *)a2 + 1) = v238 + 1;
            v245 = *(_BYTE *)(v240 + v238);
            v243 |= (unint64_t)(v245 & 0x7F) << v241;
            if ((v245 & 0x80) == 0)
              goto LABEL_759;
            v241 += 7;
            v238 = v244;
            v15 = v242++ > 8;
          }
          while (!v15);
LABEL_534:
          v243 = 0;
          goto LABEL_759;
        }
        v483 = 0;
        v484 = 0;
        v243 = 0;
        if (v239 <= v238)
          v239 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v239 == v238)
          {
            v243 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v485 = v238 + 1;
            v486 = *(_BYTE *)(v240 + v238);
            *((_QWORD *)a2 + 1) = v485;
            v243 |= (unint64_t)(v486 & 0x7F) << v483;
            if (v486 < 0)
            {
              v483 += 7;
              v238 = v485;
              v15 = v484++ > 8;
              if (v15)
                goto LABEL_534;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v243 = 0;
          }
          break;
        }
LABEL_759:
        *((_QWORD *)this + 2) = v243;
        goto LABEL_21;
      case 0x46u:
        *v8 |= 0x8000uLL;
        v246 = *((_QWORD *)a2 + 1);
        v247 = *((_QWORD *)a2 + 2);
        v248 = *(_QWORD *)a2;
        if (v246 <= 0xFFFFFFFFFFFFFFF5 && v246 + 10 <= v247)
        {
          v249 = 0;
          v250 = 0;
          v251 = 0;
          do
          {
            v252 = v246 + 1;
            *((_QWORD *)a2 + 1) = v246 + 1;
            v253 = *(_BYTE *)(v248 + v246);
            v251 |= (unint64_t)(v253 & 0x7F) << v249;
            if ((v253 & 0x80) == 0)
              goto LABEL_763;
            v249 += 7;
            v246 = v252;
            v15 = v250++ > 8;
          }
          while (!v15);
LABEL_541:
          v251 = 0;
          goto LABEL_763;
        }
        v487 = 0;
        v488 = 0;
        v251 = 0;
        if (v247 <= v246)
          v247 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v247 == v246)
          {
            v251 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v489 = v246 + 1;
            v490 = *(_BYTE *)(v248 + v246);
            *((_QWORD *)a2 + 1) = v489;
            v251 |= (unint64_t)(v490 & 0x7F) << v487;
            if (v490 < 0)
            {
              v487 += 7;
              v246 = v489;
              v15 = v488++ > 8;
              if (v15)
                goto LABEL_541;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v251 = 0;
          }
          break;
        }
LABEL_763:
        *((_QWORD *)this + 16) = v251;
        goto LABEL_21;
      case 0x47u:
        *v8 |= 0x800000000uLL;
        v254 = *((_QWORD *)a2 + 1);
        v255 = *((_QWORD *)a2 + 2);
        v256 = *(_QWORD *)a2;
        if (v254 <= 0xFFFFFFFFFFFFFFF5 && v254 + 10 <= v255)
        {
          v257 = 0;
          v258 = 0;
          v259 = 0;
          do
          {
            v260 = v254 + 1;
            *((_QWORD *)a2 + 1) = v254 + 1;
            v261 = *(_BYTE *)(v256 + v254);
            v259 |= (unint64_t)(v261 & 0x7F) << v257;
            if ((v261 & 0x80) == 0)
              goto LABEL_767;
            v257 += 7;
            v254 = v260;
            v15 = v258++ > 8;
          }
          while (!v15);
LABEL_548:
          v259 = 0;
          goto LABEL_767;
        }
        v491 = 0;
        v492 = 0;
        v259 = 0;
        if (v255 <= v254)
          v255 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v255 == v254)
          {
            v259 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v493 = v254 + 1;
            v494 = *(_BYTE *)(v256 + v254);
            *((_QWORD *)a2 + 1) = v493;
            v259 |= (unint64_t)(v494 & 0x7F) << v491;
            if (v494 < 0)
            {
              v491 += 7;
              v254 = v493;
              v15 = v492++ > 8;
              if (v15)
                goto LABEL_548;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v259 = 0;
          }
          break;
        }
LABEL_767:
        *((_QWORD *)this + 36) = v259;
        goto LABEL_21;
      case 0x48u:
        *v8 |= 0x400000000uLL;
        v262 = *((_QWORD *)a2 + 1);
        v263 = *((_QWORD *)a2 + 2);
        v264 = *(_QWORD *)a2;
        if (v262 <= 0xFFFFFFFFFFFFFFF5 && v262 + 10 <= v263)
        {
          v265 = 0;
          v266 = 0;
          v267 = 0;
          do
          {
            v268 = v262 + 1;
            *((_QWORD *)a2 + 1) = v262 + 1;
            v269 = *(_BYTE *)(v264 + v262);
            v267 |= (unint64_t)(v269 & 0x7F) << v265;
            if ((v269 & 0x80) == 0)
              goto LABEL_771;
            v265 += 7;
            v262 = v268;
            v15 = v266++ > 8;
          }
          while (!v15);
LABEL_555:
          v267 = 0;
          goto LABEL_771;
        }
        v495 = 0;
        v496 = 0;
        v267 = 0;
        if (v263 <= v262)
          v263 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v263 == v262)
          {
            v267 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v497 = v262 + 1;
            v498 = *(_BYTE *)(v264 + v262);
            *((_QWORD *)a2 + 1) = v497;
            v267 |= (unint64_t)(v498 & 0x7F) << v495;
            if (v498 < 0)
            {
              v495 += 7;
              v262 = v497;
              v15 = v496++ > 8;
              if (v15)
                goto LABEL_555;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v267 = 0;
          }
          break;
        }
LABEL_771:
        *((_QWORD *)this + 35) = v267;
        goto LABEL_21;
      case 0x49u:
        *v8 |= 0x200000000uLL;
        v270 = *((_QWORD *)a2 + 1);
        v271 = *((_QWORD *)a2 + 2);
        v272 = *(_QWORD *)a2;
        if (v270 <= 0xFFFFFFFFFFFFFFF5 && v270 + 10 <= v271)
        {
          v273 = 0;
          v274 = 0;
          v275 = 0;
          do
          {
            v276 = v270 + 1;
            *((_QWORD *)a2 + 1) = v270 + 1;
            v277 = *(_BYTE *)(v272 + v270);
            v275 |= (unint64_t)(v277 & 0x7F) << v273;
            if ((v277 & 0x80) == 0)
              goto LABEL_775;
            v273 += 7;
            v270 = v276;
            v15 = v274++ > 8;
          }
          while (!v15);
LABEL_562:
          v275 = 0;
          goto LABEL_775;
        }
        v499 = 0;
        v500 = 0;
        v275 = 0;
        if (v271 <= v270)
          v271 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v271 == v270)
          {
            v275 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v501 = v270 + 1;
            v502 = *(_BYTE *)(v272 + v270);
            *((_QWORD *)a2 + 1) = v501;
            v275 |= (unint64_t)(v502 & 0x7F) << v499;
            if (v502 < 0)
            {
              v499 += 7;
              v270 = v501;
              v15 = v500++ > 8;
              if (v15)
                goto LABEL_562;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v275 = 0;
          }
          break;
        }
LABEL_775:
        *((_QWORD *)this + 34) = v275;
        goto LABEL_21;
      case 0x4Au:
        *v8 |= 0x100000000uLL;
        v278 = *((_QWORD *)a2 + 1);
        v279 = *((_QWORD *)a2 + 2);
        v280 = *(_QWORD *)a2;
        if (v278 <= 0xFFFFFFFFFFFFFFF5 && v278 + 10 <= v279)
        {
          v281 = 0;
          v282 = 0;
          v283 = 0;
          do
          {
            v284 = v278 + 1;
            *((_QWORD *)a2 + 1) = v278 + 1;
            v285 = *(_BYTE *)(v280 + v278);
            v283 |= (unint64_t)(v285 & 0x7F) << v281;
            if ((v285 & 0x80) == 0)
              goto LABEL_779;
            v281 += 7;
            v278 = v284;
            v15 = v282++ > 8;
          }
          while (!v15);
LABEL_569:
          v283 = 0;
          goto LABEL_779;
        }
        v503 = 0;
        v504 = 0;
        v283 = 0;
        if (v279 <= v278)
          v279 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v279 == v278)
          {
            v283 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v505 = v278 + 1;
            v506 = *(_BYTE *)(v280 + v278);
            *((_QWORD *)a2 + 1) = v505;
            v283 |= (unint64_t)(v506 & 0x7F) << v503;
            if (v506 < 0)
            {
              v503 += 7;
              v278 = v505;
              v15 = v504++ > 8;
              if (v15)
                goto LABEL_569;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v283 = 0;
          }
          break;
        }
LABEL_779:
        *((_QWORD *)this + 33) = v283;
        goto LABEL_21;
      case 0x51u:
        *v8 |= 0x20000000uLL;
        v286 = *((_QWORD *)a2 + 1);
        v287 = *((_QWORD *)a2 + 2);
        v288 = *(_QWORD *)a2;
        if (v286 <= 0xFFFFFFFFFFFFFFF5 && v286 + 10 <= v287)
        {
          v289 = 0;
          v290 = 0;
          v291 = 0;
          do
          {
            v292 = v286 + 1;
            *((_QWORD *)a2 + 1) = v286 + 1;
            v293 = *(_BYTE *)(v288 + v286);
            v291 |= (unint64_t)(v293 & 0x7F) << v289;
            if ((v293 & 0x80) == 0)
              goto LABEL_783;
            v289 += 7;
            v286 = v292;
            v15 = v290++ > 8;
          }
          while (!v15);
LABEL_576:
          v291 = 0;
          goto LABEL_783;
        }
        v507 = 0;
        v508 = 0;
        v291 = 0;
        if (v287 <= v286)
          v287 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v287 == v286)
          {
            v291 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v509 = v286 + 1;
            v510 = *(_BYTE *)(v288 + v286);
            *((_QWORD *)a2 + 1) = v509;
            v291 |= (unint64_t)(v510 & 0x7F) << v507;
            if (v510 < 0)
            {
              v507 += 7;
              v286 = v509;
              v15 = v508++ > 8;
              if (v15)
                goto LABEL_576;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v291 = 0;
          }
          break;
        }
LABEL_783:
        *((_QWORD *)this + 30) = v291;
        goto LABEL_21;
      case 0x52u:
        *v8 |= 0x10000000uLL;
        v294 = *((_QWORD *)a2 + 1);
        v295 = *((_QWORD *)a2 + 2);
        v296 = *(_QWORD *)a2;
        if (v294 <= 0xFFFFFFFFFFFFFFF5 && v294 + 10 <= v295)
        {
          v297 = 0;
          v298 = 0;
          v299 = 0;
          do
          {
            v300 = v294 + 1;
            *((_QWORD *)a2 + 1) = v294 + 1;
            v301 = *(_BYTE *)(v296 + v294);
            v299 |= (unint64_t)(v301 & 0x7F) << v297;
            if ((v301 & 0x80) == 0)
              goto LABEL_787;
            v297 += 7;
            v294 = v300;
            v15 = v298++ > 8;
          }
          while (!v15);
LABEL_583:
          v299 = 0;
          goto LABEL_787;
        }
        v511 = 0;
        v512 = 0;
        v299 = 0;
        if (v295 <= v294)
          v295 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v295 == v294)
          {
            v299 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v513 = v294 + 1;
            v514 = *(_BYTE *)(v296 + v294);
            *((_QWORD *)a2 + 1) = v513;
            v299 |= (unint64_t)(v514 & 0x7F) << v511;
            if (v514 < 0)
            {
              v511 += 7;
              v294 = v513;
              v15 = v512++ > 8;
              if (v15)
                goto LABEL_583;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v299 = 0;
          }
          break;
        }
LABEL_787:
        *((_QWORD *)this + 29) = v299;
        goto LABEL_21;
      case 0x53u:
        *v8 |= 0x2000uLL;
        v302 = *((_QWORD *)a2 + 1);
        v303 = *((_QWORD *)a2 + 2);
        v304 = *(_QWORD *)a2;
        if (v302 <= 0xFFFFFFFFFFFFFFF5 && v302 + 10 <= v303)
        {
          v305 = 0;
          v306 = 0;
          v307 = 0;
          do
          {
            v308 = v302 + 1;
            *((_QWORD *)a2 + 1) = v302 + 1;
            v309 = *(_BYTE *)(v304 + v302);
            v307 |= (unint64_t)(v309 & 0x7F) << v305;
            if ((v309 & 0x80) == 0)
              goto LABEL_791;
            v305 += 7;
            v302 = v308;
            v15 = v306++ > 8;
          }
          while (!v15);
LABEL_590:
          v307 = 0;
          goto LABEL_791;
        }
        v515 = 0;
        v516 = 0;
        v307 = 0;
        if (v303 <= v302)
          v303 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v303 == v302)
          {
            v307 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v517 = v302 + 1;
            v518 = *(_BYTE *)(v304 + v302);
            *((_QWORD *)a2 + 1) = v517;
            v307 |= (unint64_t)(v518 & 0x7F) << v515;
            if (v518 < 0)
            {
              v515 += 7;
              v302 = v517;
              v15 = v516++ > 8;
              if (v15)
                goto LABEL_590;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v307 = 0;
          }
          break;
        }
LABEL_791:
        *((_QWORD *)this + 14) = v307;
        goto LABEL_21;
      case 0x54u:
        *v8 |= 0x10000uLL;
        v310 = *((_QWORD *)a2 + 1);
        v311 = *((_QWORD *)a2 + 2);
        v312 = *(_QWORD *)a2;
        if (v310 <= 0xFFFFFFFFFFFFFFF5 && v310 + 10 <= v311)
        {
          v313 = 0;
          v314 = 0;
          v315 = 0;
          do
          {
            v316 = v310 + 1;
            *((_QWORD *)a2 + 1) = v310 + 1;
            v317 = *(_BYTE *)(v312 + v310);
            v315 |= (unint64_t)(v317 & 0x7F) << v313;
            if ((v317 & 0x80) == 0)
              goto LABEL_795;
            v313 += 7;
            v310 = v316;
            v15 = v314++ > 8;
          }
          while (!v15);
LABEL_597:
          v315 = 0;
          goto LABEL_795;
        }
        v519 = 0;
        v520 = 0;
        v315 = 0;
        if (v311 <= v310)
          v311 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v311 == v310)
          {
            v315 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v521 = v310 + 1;
            v522 = *(_BYTE *)(v312 + v310);
            *((_QWORD *)a2 + 1) = v521;
            v315 |= (unint64_t)(v522 & 0x7F) << v519;
            if (v522 < 0)
            {
              v519 += 7;
              v310 = v521;
              v15 = v520++ > 8;
              if (v15)
                goto LABEL_597;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v315 = 0;
          }
          break;
        }
LABEL_795:
        *((_QWORD *)this + 17) = v315;
        goto LABEL_21;
      case 0x55u:
        *v8 |= 4uLL;
        v318 = *((_QWORD *)a2 + 1);
        v319 = *((_QWORD *)a2 + 2);
        v320 = *(_QWORD *)a2;
        if (v318 <= 0xFFFFFFFFFFFFFFF5 && v318 + 10 <= v319)
        {
          v321 = 0;
          v322 = 0;
          v323 = 0;
          do
          {
            v324 = v318 + 1;
            *((_QWORD *)a2 + 1) = v318 + 1;
            v325 = *(_BYTE *)(v320 + v318);
            v323 |= (unint64_t)(v325 & 0x7F) << v321;
            if ((v325 & 0x80) == 0)
              goto LABEL_799;
            v321 += 7;
            v318 = v324;
            v15 = v322++ > 8;
          }
          while (!v15);
LABEL_604:
          v323 = 0;
          goto LABEL_799;
        }
        v523 = 0;
        v524 = 0;
        v323 = 0;
        if (v319 <= v318)
          v319 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v319 == v318)
          {
            v323 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v525 = v318 + 1;
            v526 = *(_BYTE *)(v320 + v318);
            *((_QWORD *)a2 + 1) = v525;
            v323 |= (unint64_t)(v526 & 0x7F) << v523;
            if (v526 < 0)
            {
              v523 += 7;
              v318 = v525;
              v15 = v524++ > 8;
              if (v15)
                goto LABEL_604;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v323 = 0;
          }
          break;
        }
LABEL_799:
        *((_QWORD *)this + 3) = v323;
        goto LABEL_21;
      case 0x56u:
        *v8 |= 0x40000uLL;
        v326 = *((_QWORD *)a2 + 1);
        v327 = *((_QWORD *)a2 + 2);
        v328 = *(_QWORD *)a2;
        if (v326 <= 0xFFFFFFFFFFFFFFF5 && v326 + 10 <= v327)
        {
          v329 = 0;
          v330 = 0;
          v331 = 0;
          do
          {
            v332 = v326 + 1;
            *((_QWORD *)a2 + 1) = v326 + 1;
            v333 = *(_BYTE *)(v328 + v326);
            v331 |= (unint64_t)(v333 & 0x7F) << v329;
            if ((v333 & 0x80) == 0)
              goto LABEL_803;
            v329 += 7;
            v326 = v332;
            v15 = v330++ > 8;
          }
          while (!v15);
LABEL_611:
          v331 = 0;
          goto LABEL_803;
        }
        v527 = 0;
        v528 = 0;
        v331 = 0;
        if (v327 <= v326)
          v327 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v327 == v326)
          {
            v331 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v529 = v326 + 1;
            v530 = *(_BYTE *)(v328 + v326);
            *((_QWORD *)a2 + 1) = v529;
            v331 |= (unint64_t)(v530 & 0x7F) << v527;
            if (v530 < 0)
            {
              v527 += 7;
              v326 = v529;
              v15 = v528++ > 8;
              if (v15)
                goto LABEL_611;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v331 = 0;
          }
          break;
        }
LABEL_803:
        *((_QWORD *)this + 19) = v331;
        goto LABEL_21;
      case 0x57u:
        *v8 |= 0x20000uLL;
        v334 = *((_QWORD *)a2 + 1);
        v335 = *((_QWORD *)a2 + 2);
        v336 = *(_QWORD *)a2;
        if (v334 <= 0xFFFFFFFFFFFFFFF5 && v334 + 10 <= v335)
        {
          v337 = 0;
          v338 = 0;
          v339 = 0;
          do
          {
            v340 = v334 + 1;
            *((_QWORD *)a2 + 1) = v334 + 1;
            v341 = *(_BYTE *)(v336 + v334);
            v339 |= (unint64_t)(v341 & 0x7F) << v337;
            if ((v341 & 0x80) == 0)
              goto LABEL_807;
            v337 += 7;
            v334 = v340;
            v15 = v338++ > 8;
          }
          while (!v15);
LABEL_618:
          v339 = 0;
          goto LABEL_807;
        }
        v531 = 0;
        v532 = 0;
        v339 = 0;
        if (v335 <= v334)
          v335 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v335 == v334)
          {
            v339 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v533 = v334 + 1;
            v534 = *(_BYTE *)(v336 + v334);
            *((_QWORD *)a2 + 1) = v533;
            v339 |= (unint64_t)(v534 & 0x7F) << v531;
            if (v534 < 0)
            {
              v531 += 7;
              v334 = v533;
              v15 = v532++ > 8;
              if (v15)
                goto LABEL_618;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v339 = 0;
          }
          break;
        }
LABEL_807:
        *((_QWORD *)this + 18) = v339;
        goto LABEL_21;
      case 0x58u:
        *v8 |= 0x80uLL;
        v342 = *((_QWORD *)a2 + 1);
        v343 = *((_QWORD *)a2 + 2);
        v344 = *(_QWORD *)a2;
        if (v342 <= 0xFFFFFFFFFFFFFFF5 && v342 + 10 <= v343)
        {
          v345 = 0;
          v346 = 0;
          v347 = 0;
          do
          {
            v348 = v342 + 1;
            *((_QWORD *)a2 + 1) = v342 + 1;
            v349 = *(_BYTE *)(v344 + v342);
            v347 |= (unint64_t)(v349 & 0x7F) << v345;
            if ((v349 & 0x80) == 0)
              goto LABEL_811;
            v345 += 7;
            v342 = v348;
            v15 = v346++ > 8;
          }
          while (!v15);
LABEL_625:
          v347 = 0;
          goto LABEL_811;
        }
        v535 = 0;
        v536 = 0;
        v347 = 0;
        if (v343 <= v342)
          v343 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v343 == v342)
          {
            v347 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v537 = v342 + 1;
            v538 = *(_BYTE *)(v344 + v342);
            *((_QWORD *)a2 + 1) = v537;
            v347 |= (unint64_t)(v538 & 0x7F) << v535;
            if (v538 < 0)
            {
              v535 += 7;
              v342 = v537;
              v15 = v536++ > 8;
              if (v15)
                goto LABEL_625;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v347 = 0;
          }
          break;
        }
LABEL_811:
        *((_QWORD *)this + 8) = v347;
        goto LABEL_21;
      case 0x59u:
        *v8 |= 0x1000uLL;
        v350 = *((_QWORD *)a2 + 1);
        v351 = *((_QWORD *)a2 + 2);
        v352 = *(_QWORD *)a2;
        if (v350 <= 0xFFFFFFFFFFFFFFF5 && v350 + 10 <= v351)
        {
          v353 = 0;
          v354 = 0;
          v355 = 0;
          do
          {
            v356 = v350 + 1;
            *((_QWORD *)a2 + 1) = v350 + 1;
            v357 = *(_BYTE *)(v352 + v350);
            v355 |= (unint64_t)(v357 & 0x7F) << v353;
            if ((v357 & 0x80) == 0)
              goto LABEL_815;
            v353 += 7;
            v350 = v356;
            v15 = v354++ > 8;
          }
          while (!v15);
LABEL_632:
          v355 = 0;
          goto LABEL_815;
        }
        v539 = 0;
        v540 = 0;
        v355 = 0;
        if (v351 <= v350)
          v351 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v351 == v350)
          {
            v355 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v541 = v350 + 1;
            v542 = *(_BYTE *)(v352 + v350);
            *((_QWORD *)a2 + 1) = v541;
            v355 |= (unint64_t)(v542 & 0x7F) << v539;
            if (v542 < 0)
            {
              v539 += 7;
              v350 = v541;
              v15 = v540++ > 8;
              if (v15)
                goto LABEL_632;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v355 = 0;
          }
          break;
        }
LABEL_815:
        *((_QWORD *)this + 13) = v355;
        goto LABEL_21;
      case 0x64u:
        *v8 |= 0x4000000000uLL;
        v358 = *((_QWORD *)a2 + 1);
        v359 = *((_QWORD *)a2 + 2);
        v360 = *(_QWORD *)a2;
        if (v358 <= 0xFFFFFFFFFFFFFFF5 && v358 + 10 <= v359)
        {
          v361 = 0;
          v362 = 0;
          v363 = 0;
          do
          {
            v364 = v358 + 1;
            *((_QWORD *)a2 + 1) = v358 + 1;
            v365 = *(_BYTE *)(v360 + v358);
            v363 |= (unint64_t)(v365 & 0x7F) << v361;
            if ((v365 & 0x80) == 0)
              goto LABEL_819;
            v361 += 7;
            v358 = v364;
            v15 = v362++ > 8;
          }
          while (!v15);
LABEL_639:
          v363 = 0;
          goto LABEL_819;
        }
        v543 = 0;
        v544 = 0;
        v363 = 0;
        if (v359 <= v358)
          v359 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v359 == v358)
          {
            v363 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v545 = v358 + 1;
            v546 = *(_BYTE *)(v360 + v358);
            *((_QWORD *)a2 + 1) = v545;
            v363 |= (unint64_t)(v546 & 0x7F) << v543;
            if (v546 < 0)
            {
              v543 += 7;
              v358 = v545;
              v15 = v544++ > 8;
              if (v15)
                goto LABEL_639;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v363 = 0;
          }
          break;
        }
LABEL_819:
        *((_QWORD *)this + 39) = v363;
        goto LABEL_21;
      case 0x65u:
        *v8 |= 0x1000000000uLL;
        v366 = *((_QWORD *)a2 + 1);
        v367 = *((_QWORD *)a2 + 2);
        v368 = *(_QWORD *)a2;
        if (v366 <= 0xFFFFFFFFFFFFFFF5 && v366 + 10 <= v367)
        {
          v369 = 0;
          v370 = 0;
          v371 = 0;
          do
          {
            v372 = v366 + 1;
            *((_QWORD *)a2 + 1) = v366 + 1;
            v373 = *(_BYTE *)(v368 + v366);
            v371 |= (unint64_t)(v373 & 0x7F) << v369;
            if ((v373 & 0x80) == 0)
              goto LABEL_823;
            v369 += 7;
            v366 = v372;
            v15 = v370++ > 8;
          }
          while (!v15);
LABEL_646:
          v371 = 0;
          goto LABEL_823;
        }
        v547 = 0;
        v548 = 0;
        v371 = 0;
        if (v367 <= v366)
          v367 = *((_QWORD *)a2 + 1);
        break;
      case 0x66u:
        *v8 |= 0x2000000000uLL;
        v374 = *((_QWORD *)a2 + 1);
        if (v374 <= 0xFFFFFFFFFFFFFFF7 && v374 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 38) = *(_QWORD *)(*(_QWORD *)a2 + v374);
          *((_QWORD *)a2 + 1) += 8;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
        goto LABEL_21;
      default:
        goto LABEL_20;
    }
    while (1)
    {
      if (v367 == v366)
      {
        v371 = 0;
        *((_BYTE *)a2 + 24) = 1;
        goto LABEL_823;
      }
      v549 = v366 + 1;
      v550 = *(_BYTE *)(v368 + v366);
      *((_QWORD *)a2 + 1) = v549;
      v371 |= (unint64_t)(v550 & 0x7F) << v547;
      if ((v550 & 0x80) == 0)
        break;
      v547 += 7;
      v366 = v549;
      v15 = v548++ > 8;
      if (v15)
        goto LABEL_646;
    }
    if (*((_BYTE *)a2 + 24))
      v371 = 0;
LABEL_823:
    *((_QWORD *)this + 37) = v371;
LABEL_21:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::FallDetectionReplay::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = this;
  v4 = (uint64_t *)(this + 364);
  v5 = *(_QWORD *)(this + 364);
  if ((v5 & 0x40000000) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v5 = *v4;
    if ((*v4 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v5 & 0x80000) == 0)
        goto LABEL_4;
      goto LABEL_49;
    }
  }
  else if ((v5 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  if ((*v4 & 0x80000) == 0)
  {
LABEL_4:
    if ((v5 & 0x100000) == 0)
      goto LABEL_5;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  if ((*v4 & 0x100000) == 0)
  {
LABEL_5:
    if ((v5 & 0x200000) == 0)
      goto LABEL_6;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  if ((*v4 & 0x200000) == 0)
  {
LABEL_6:
    if ((v5 & 0x8000000000) == 0)
      goto LABEL_7;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  if ((*v4 & 0x8000000000) == 0)
  {
LABEL_7:
    if ((v5 & 0x40000000000) == 0)
      goto LABEL_8;
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  if ((*v4 & 0x40000000000) == 0)
  {
LABEL_8:
    if ((v5 & 0x10000000000) == 0)
      goto LABEL_9;
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  if ((*v4 & 0x10000000000) == 0)
  {
LABEL_9:
    if ((v5 & 0x20000000000) == 0)
      goto LABEL_10;
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  if ((*v4 & 0x20000000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x80000000000) == 0)
      goto LABEL_11;
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  if ((*v4 & 0x80000000000) == 0)
  {
LABEL_11:
    if ((v5 & 0x100000000000) == 0)
      goto LABEL_12;
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  if ((*v4 & 0x100000000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_13;
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  if ((*v4 & 0x1000000) == 0)
  {
LABEL_13:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_14;
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  if ((*v4 & 0x8000000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_15;
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  if ((*v4 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_16;
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  if ((*v4 & 0x4000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x400000) == 0)
      goto LABEL_17;
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  if ((*v4 & 0x400000) == 0)
  {
LABEL_17:
    if ((v5 & 0x800000) == 0)
      goto LABEL_18;
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  if ((*v4 & 0x800000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20) == 0)
      goto LABEL_19;
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  if ((*v4 & 0x20) == 0)
  {
LABEL_19:
    if ((v5 & 8) == 0)
      goto LABEL_20;
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  if ((*v4 & 8) == 0)
  {
LABEL_20:
    if ((v5 & 1) == 0)
      goto LABEL_21;
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  if ((*v4 & 1) == 0)
  {
LABEL_21:
    if ((v5 & 0x40) == 0)
      goto LABEL_22;
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  if ((*v4 & 0x40) == 0)
  {
LABEL_22:
    if ((v5 & 0x100) == 0)
      goto LABEL_23;
    goto LABEL_68;
  }
LABEL_67:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  if ((*v4 & 0x100) == 0)
  {
LABEL_23:
    if ((v5 & 0x10) == 0)
      goto LABEL_24;
    goto LABEL_69;
  }
LABEL_68:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  if ((*v4 & 0x10) == 0)
  {
LABEL_24:
    if ((v5 & 0x200) == 0)
      goto LABEL_25;
    goto LABEL_70;
  }
LABEL_69:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  if ((*v4 & 0x200) == 0)
  {
LABEL_25:
    if ((v5 & 0x400) == 0)
      goto LABEL_26;
    goto LABEL_71;
  }
LABEL_70:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  if ((*v4 & 0x400) == 0)
  {
LABEL_26:
    if ((v5 & 0x800) == 0)
      goto LABEL_27;
    goto LABEL_72;
  }
LABEL_71:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  if ((*v4 & 0x800) == 0)
  {
LABEL_27:
    if ((v5 & 0x4000) == 0)
      goto LABEL_28;
    goto LABEL_73;
  }
LABEL_72:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  if ((*v4 & 0x4000) == 0)
  {
LABEL_28:
    if ((v5 & 2) == 0)
      goto LABEL_29;
    goto LABEL_74;
  }
LABEL_73:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  if ((*v4 & 2) == 0)
  {
LABEL_29:
    if ((v5 & 0x8000) == 0)
      goto LABEL_30;
    goto LABEL_75;
  }
LABEL_74:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  if ((*v4 & 0x8000) == 0)
  {
LABEL_30:
    if ((v5 & 0x800000000) == 0)
      goto LABEL_31;
    goto LABEL_76;
  }
LABEL_75:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  if ((*v4 & 0x800000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x400000000) == 0)
      goto LABEL_32;
    goto LABEL_77;
  }
LABEL_76:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  if ((*v4 & 0x400000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_33;
    goto LABEL_78;
  }
LABEL_77:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  if ((*v4 & 0x200000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_34;
    goto LABEL_79;
  }
LABEL_78:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  if ((*v4 & 0x100000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_35;
    goto LABEL_80;
  }
LABEL_79:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  if ((*v4 & 0x20000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_36;
    goto LABEL_81;
  }
LABEL_80:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  if ((*v4 & 0x10000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x2000) == 0)
      goto LABEL_37;
    goto LABEL_82;
  }
LABEL_81:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  if ((*v4 & 0x2000) == 0)
  {
LABEL_37:
    if ((v5 & 0x10000) == 0)
      goto LABEL_38;
    goto LABEL_83;
  }
LABEL_82:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  if ((*v4 & 0x10000) == 0)
  {
LABEL_38:
    if ((v5 & 4) == 0)
      goto LABEL_39;
    goto LABEL_84;
  }
LABEL_83:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  if ((*v4 & 4) == 0)
  {
LABEL_39:
    if ((v5 & 0x40000) == 0)
      goto LABEL_40;
    goto LABEL_85;
  }
LABEL_84:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  if ((*v4 & 0x40000) == 0)
  {
LABEL_40:
    if ((v5 & 0x20000) == 0)
      goto LABEL_41;
    goto LABEL_86;
  }
LABEL_85:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  if ((*v4 & 0x20000) == 0)
  {
LABEL_41:
    if ((v5 & 0x80) == 0)
      goto LABEL_42;
    goto LABEL_87;
  }
LABEL_86:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  if ((*v4 & 0x80) == 0)
  {
LABEL_42:
    if ((v5 & 0x1000) == 0)
      goto LABEL_43;
    goto LABEL_88;
  }
LABEL_87:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  if ((*v4 & 0x1000) == 0)
  {
LABEL_43:
    if ((v5 & 0x4000000000) == 0)
      goto LABEL_44;
    goto LABEL_89;
  }
LABEL_88:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  if ((*v4 & 0x4000000000) == 0)
  {
LABEL_44:
    if ((v5 & 0x1000000000) == 0)
      goto LABEL_45;
    goto LABEL_90;
  }
LABEL_89:
  this = PB::Writer::writeVarInt(a2);
  v5 = *v4;
  if ((*v4 & 0x1000000000) == 0)
  {
LABEL_45:
    if ((v5 & 0x2000000000) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 304));
  }
LABEL_90:
  this = PB::Writer::writeVarInt(a2);
  if ((*v4 & 0x2000000000) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 304));
  return this;
}

BOOL CMMsl::FallDetectionReplay::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 v4;

  v2 = *(_QWORD *)(a1 + 364);
  v3 = *(_QWORD *)(a2 + 364);
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(_QWORD *)(a1 + 248) != *(_QWORD *)(a2 + 248))
      return 0;
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000) != 0)
  {
    if ((v3 & 0x80000000) == 0 || *(_QWORD *)(a1 + 256) != *(_QWORD *)(a2 + 256))
      return 0;
  }
  else if ((v3 & 0x80000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(_QWORD *)(a1 + 160) != *(_QWORD *)(a2 + 160))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(_QWORD *)(a1 + 168) != *(_QWORD *)(a2 + 168))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(_QWORD *)(a1 + 176) != *(_QWORD *)(a2 + 176))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000000) != 0)
  {
    if ((v3 & 0x8000000000) == 0 || *(_QWORD *)(a1 + 320) != *(_QWORD *)(a2 + 320))
      return 0;
  }
  else if ((v3 & 0x8000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000000) != 0)
  {
    if ((v3 & 0x40000000000) == 0 || *(_QWORD *)(a1 + 344) != *(_QWORD *)(a2 + 344))
      return 0;
  }
  else if ((v3 & 0x40000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000000) != 0)
  {
    if ((v3 & 0x10000000000) == 0 || *(_QWORD *)(a1 + 328) != *(_QWORD *)(a2 + 328))
      return 0;
  }
  else if ((v3 & 0x10000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000000) != 0)
  {
    if ((v3 & 0x20000000000) == 0 || *(_QWORD *)(a1 + 336) != *(_QWORD *)(a2 + 336))
      return 0;
  }
  else if ((v3 & 0x20000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000000) != 0)
  {
    if ((v3 & 0x80000000000) == 0 || *(_QWORD *)(a1 + 352) != *(_QWORD *)(a2 + 352))
      return 0;
  }
  else if ((v3 & 0x80000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000000) != 0)
  {
    if ((v3 & 0x100000000000) == 0 || *(_DWORD *)(a1 + 360) != *(_DWORD *)(a2 + 360))
      return 0;
  }
  else if ((v3 & 0x100000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(_QWORD *)(a1 + 200) != *(_QWORD *)(a2 + 200))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(_QWORD *)(a1 + 224) != *(_QWORD *)(a2 + 224))
      return 0;
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(_QWORD *)(a1 + 208) != *(_QWORD *)(a2 + 208))
      return 0;
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(_QWORD *)(a1 + 216) != *(_QWORD *)(a2 + 216))
      return 0;
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(_QWORD *)(a1 + 184) != *(_QWORD *)(a2 + 184))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(_QWORD *)(a1 + 192) != *(_QWORD *)(a2 + 192))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_QWORD *)(a1 + 48) != *(_QWORD *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_QWORD *)(a1 + 56) != *(_QWORD *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(_QWORD *)(a1 + 72) != *(_QWORD *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_QWORD *)(a1 + 40) != *(_QWORD *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(_QWORD *)(a1 + 80) != *(_QWORD *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(_QWORD *)(a1 + 88) != *(_QWORD *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(_QWORD *)(a1 + 96) != *(_QWORD *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(_QWORD *)(a1 + 120) != *(_QWORD *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(_QWORD *)(a1 + 128) != *(_QWORD *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000) != 0)
  {
    if ((v3 & 0x800000000) == 0 || *(_QWORD *)(a1 + 288) != *(_QWORD *)(a2 + 288))
      return 0;
  }
  else if ((v3 & 0x800000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000) != 0)
  {
    if ((v3 & 0x400000000) == 0 || *(_QWORD *)(a1 + 280) != *(_QWORD *)(a2 + 280))
      return 0;
  }
  else if ((v3 & 0x400000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000) != 0)
  {
    if ((v3 & 0x200000000) == 0 || *(_QWORD *)(a1 + 272) != *(_QWORD *)(a2 + 272))
      return 0;
  }
  else if ((v3 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000) != 0)
  {
    if ((v3 & 0x100000000) == 0 || *(_QWORD *)(a1 + 264) != *(_QWORD *)(a2 + 264))
      return 0;
  }
  else if ((v3 & 0x100000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(_QWORD *)(a1 + 240) != *(_QWORD *)(a2 + 240))
      return 0;
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(_QWORD *)(a1 + 232) != *(_QWORD *)(a2 + 232))
      return 0;
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(_QWORD *)(a1 + 112) != *(_QWORD *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(_QWORD *)(a1 + 136) != *(_QWORD *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(_QWORD *)(a1 + 152) != *(_QWORD *)(a2 + 152))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(_QWORD *)(a1 + 144) != *(_QWORD *)(a2 + 144))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_QWORD *)(a1 + 64) != *(_QWORD *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_QWORD *)(a1 + 104) != *(_QWORD *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000000) != 0)
  {
    if ((v3 & 0x4000000000) == 0 || *(_QWORD *)(a1 + 312) != *(_QWORD *)(a2 + 312))
      return 0;
  }
  else if ((v3 & 0x4000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000) != 0)
  {
    if ((v3 & 0x1000000000) == 0 || *(_QWORD *)(a1 + 296) != *(_QWORD *)(a2 + 296))
      return 0;
  }
  else if ((v3 & 0x1000000000) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x2000000000) == 0;
  if ((v2 & 0x2000000000) != 0)
    return (v3 & 0x2000000000) != 0 && *(double *)(a1 + 304) == *(double *)(a2 + 304);
  return v4;
}

uint64_t CMMsl::FallDetectionReplay::hash_value(CMMsl::FallDetectionReplay *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v1 = *(_QWORD *)((char *)this + 364);
  if ((v1 & 0x40000000) != 0)
  {
    v2 = *((_QWORD *)this + 31);
    if ((v1 & 0x80000000) != 0)
    {
LABEL_3:
      v47 = *((_QWORD *)this + 32);
      if ((v1 & 0x80000) != 0)
        goto LABEL_4;
      goto LABEL_51;
    }
  }
  else
  {
    v2 = 0;
    if ((v1 & 0x80000000) != 0)
      goto LABEL_3;
  }
  v47 = 0;
  if ((v1 & 0x80000) != 0)
  {
LABEL_4:
    v46 = *((_QWORD *)this + 20);
    if ((v1 & 0x100000) != 0)
      goto LABEL_5;
    goto LABEL_52;
  }
LABEL_51:
  v46 = 0;
  if ((v1 & 0x100000) != 0)
  {
LABEL_5:
    v45 = *((_QWORD *)this + 21);
    if ((v1 & 0x200000) != 0)
      goto LABEL_6;
    goto LABEL_53;
  }
LABEL_52:
  v45 = 0;
  if ((v1 & 0x200000) != 0)
  {
LABEL_6:
    v44 = *((_QWORD *)this + 22);
    if ((v1 & 0x8000000000) != 0)
      goto LABEL_7;
    goto LABEL_54;
  }
LABEL_53:
  v44 = 0;
  if ((v1 & 0x8000000000) != 0)
  {
LABEL_7:
    v43 = *((_QWORD *)this + 40);
    if ((v1 & 0x40000000000) != 0)
      goto LABEL_8;
    goto LABEL_55;
  }
LABEL_54:
  v43 = 0;
  if ((v1 & 0x40000000000) != 0)
  {
LABEL_8:
    v42 = *((_QWORD *)this + 43);
    if ((v1 & 0x10000000000) != 0)
      goto LABEL_9;
    goto LABEL_56;
  }
LABEL_55:
  v42 = 0;
  if ((v1 & 0x10000000000) != 0)
  {
LABEL_9:
    v41 = *((_QWORD *)this + 41);
    if ((v1 & 0x20000000000) != 0)
      goto LABEL_10;
    goto LABEL_57;
  }
LABEL_56:
  v41 = 0;
  if ((v1 & 0x20000000000) != 0)
  {
LABEL_10:
    v40 = *((_QWORD *)this + 42);
    if ((v1 & 0x80000000000) != 0)
      goto LABEL_11;
    goto LABEL_58;
  }
LABEL_57:
  v40 = 0;
  if ((v1 & 0x80000000000) != 0)
  {
LABEL_11:
    v39 = *((_QWORD *)this + 44);
    if ((v1 & 0x100000000000) != 0)
      goto LABEL_12;
    goto LABEL_59;
  }
LABEL_58:
  v39 = 0;
  if ((v1 & 0x100000000000) != 0)
  {
LABEL_12:
    v38 = *((unsigned int *)this + 90);
    if ((v1 & 0x1000000) != 0)
      goto LABEL_13;
    goto LABEL_60;
  }
LABEL_59:
  v38 = 0;
  if ((v1 & 0x1000000) != 0)
  {
LABEL_13:
    v37 = *((_QWORD *)this + 25);
    if ((v1 & 0x8000000) != 0)
      goto LABEL_14;
    goto LABEL_61;
  }
LABEL_60:
  v37 = 0;
  if ((v1 & 0x8000000) != 0)
  {
LABEL_14:
    v36 = *((_QWORD *)this + 28);
    if ((v1 & 0x2000000) != 0)
      goto LABEL_15;
    goto LABEL_62;
  }
LABEL_61:
  v36 = 0;
  if ((v1 & 0x2000000) != 0)
  {
LABEL_15:
    v35 = *((_QWORD *)this + 26);
    if ((v1 & 0x4000000) != 0)
      goto LABEL_16;
    goto LABEL_63;
  }
LABEL_62:
  v35 = 0;
  if ((v1 & 0x4000000) != 0)
  {
LABEL_16:
    v34 = *((_QWORD *)this + 27);
    if ((v1 & 0x400000) != 0)
      goto LABEL_17;
    goto LABEL_64;
  }
LABEL_63:
  v34 = 0;
  if ((v1 & 0x400000) != 0)
  {
LABEL_17:
    v33 = *((_QWORD *)this + 23);
    if ((v1 & 0x800000) != 0)
      goto LABEL_18;
    goto LABEL_65;
  }
LABEL_64:
  v33 = 0;
  if ((v1 & 0x800000) != 0)
  {
LABEL_18:
    v32 = *((_QWORD *)this + 24);
    if ((v1 & 0x20) != 0)
      goto LABEL_19;
    goto LABEL_66;
  }
LABEL_65:
  v32 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_19:
    v31 = *((_QWORD *)this + 6);
    if ((v1 & 8) != 0)
      goto LABEL_20;
    goto LABEL_67;
  }
LABEL_66:
  v31 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_20:
    v30 = *((_QWORD *)this + 4);
    if ((v1 & 1) != 0)
      goto LABEL_21;
    goto LABEL_68;
  }
LABEL_67:
  v30 = 0;
  if ((v1 & 1) != 0)
  {
LABEL_21:
    v3 = *((_QWORD *)this + 1);
    if ((v1 & 0x40) != 0)
      goto LABEL_22;
    goto LABEL_69;
  }
LABEL_68:
  v3 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_22:
    v4 = *((_QWORD *)this + 7);
    if ((v1 & 0x100) != 0)
      goto LABEL_23;
    goto LABEL_70;
  }
LABEL_69:
  v4 = 0;
  if ((v1 & 0x100) != 0)
  {
LABEL_23:
    v5 = *((_QWORD *)this + 9);
    if ((v1 & 0x10) != 0)
      goto LABEL_24;
    goto LABEL_71;
  }
LABEL_70:
  v5 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_24:
    v6 = *((_QWORD *)this + 5);
    if ((v1 & 0x200) != 0)
      goto LABEL_25;
    goto LABEL_72;
  }
LABEL_71:
  v6 = 0;
  if ((v1 & 0x200) != 0)
  {
LABEL_25:
    v7 = *((_QWORD *)this + 10);
    if ((v1 & 0x400) != 0)
      goto LABEL_26;
    goto LABEL_73;
  }
LABEL_72:
  v7 = 0;
  if ((v1 & 0x400) != 0)
  {
LABEL_26:
    v8 = *((_QWORD *)this + 11);
    if ((v1 & 0x800) != 0)
      goto LABEL_27;
    goto LABEL_74;
  }
LABEL_73:
  v8 = 0;
  if ((v1 & 0x800) != 0)
  {
LABEL_27:
    v9 = *((_QWORD *)this + 12);
    if ((v1 & 0x4000) != 0)
      goto LABEL_28;
    goto LABEL_75;
  }
LABEL_74:
  v9 = 0;
  if ((v1 & 0x4000) != 0)
  {
LABEL_28:
    v10 = *((_QWORD *)this + 15);
    if ((v1 & 2) != 0)
      goto LABEL_29;
    goto LABEL_76;
  }
LABEL_75:
  v10 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_29:
    v11 = *((_QWORD *)this + 2);
    if ((v1 & 0x8000) != 0)
      goto LABEL_30;
    goto LABEL_77;
  }
LABEL_76:
  v11 = 0;
  if ((v1 & 0x8000) != 0)
  {
LABEL_30:
    v12 = *((_QWORD *)this + 16);
    if ((v1 & 0x800000000) != 0)
      goto LABEL_31;
    goto LABEL_78;
  }
LABEL_77:
  v12 = 0;
  if ((v1 & 0x800000000) != 0)
  {
LABEL_31:
    v13 = *((_QWORD *)this + 36);
    if ((v1 & 0x400000000) != 0)
      goto LABEL_32;
    goto LABEL_79;
  }
LABEL_78:
  v13 = 0;
  if ((v1 & 0x400000000) != 0)
  {
LABEL_32:
    v14 = *((_QWORD *)this + 35);
    if ((v1 & 0x200000000) != 0)
      goto LABEL_33;
    goto LABEL_80;
  }
LABEL_79:
  v14 = 0;
  if ((v1 & 0x200000000) != 0)
  {
LABEL_33:
    v15 = *((_QWORD *)this + 34);
    if ((v1 & 0x100000000) != 0)
      goto LABEL_34;
    goto LABEL_81;
  }
LABEL_80:
  v15 = 0;
  if ((v1 & 0x100000000) != 0)
  {
LABEL_34:
    v16 = *((_QWORD *)this + 33);
    if ((v1 & 0x20000000) != 0)
      goto LABEL_35;
    goto LABEL_82;
  }
LABEL_81:
  v16 = 0;
  if ((v1 & 0x20000000) != 0)
  {
LABEL_35:
    v17 = *((_QWORD *)this + 30);
    if ((v1 & 0x10000000) != 0)
      goto LABEL_36;
    goto LABEL_83;
  }
LABEL_82:
  v17 = 0;
  if ((v1 & 0x10000000) != 0)
  {
LABEL_36:
    v18 = *((_QWORD *)this + 29);
    if ((v1 & 0x2000) != 0)
      goto LABEL_37;
    goto LABEL_84;
  }
LABEL_83:
  v18 = 0;
  if ((v1 & 0x2000) != 0)
  {
LABEL_37:
    v19 = *((_QWORD *)this + 14);
    if ((v1 & 0x10000) != 0)
      goto LABEL_38;
    goto LABEL_85;
  }
LABEL_84:
  v19 = 0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_38:
    v20 = *((_QWORD *)this + 17);
    if ((v1 & 4) != 0)
      goto LABEL_39;
    goto LABEL_86;
  }
LABEL_85:
  v20 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_39:
    v21 = *((_QWORD *)this + 3);
    if ((v1 & 0x40000) != 0)
      goto LABEL_40;
    goto LABEL_87;
  }
LABEL_86:
  v21 = 0;
  if ((v1 & 0x40000) != 0)
  {
LABEL_40:
    v22 = *((_QWORD *)this + 19);
    if ((v1 & 0x20000) != 0)
      goto LABEL_41;
    goto LABEL_88;
  }
LABEL_87:
  v22 = 0;
  if ((v1 & 0x20000) != 0)
  {
LABEL_41:
    v23 = *((_QWORD *)this + 18);
    if ((v1 & 0x80) != 0)
      goto LABEL_42;
    goto LABEL_89;
  }
LABEL_88:
  v23 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_42:
    v24 = *((_QWORD *)this + 8);
    if ((v1 & 0x1000) != 0)
      goto LABEL_43;
    goto LABEL_90;
  }
LABEL_89:
  v24 = 0;
  if ((v1 & 0x1000) != 0)
  {
LABEL_43:
    v25 = *((_QWORD *)this + 13);
    if ((v1 & 0x4000000000) != 0)
      goto LABEL_44;
    goto LABEL_91;
  }
LABEL_90:
  v25 = 0;
  if ((v1 & 0x4000000000) != 0)
  {
LABEL_44:
    v26 = *((_QWORD *)this + 39);
    if ((v1 & 0x1000000000) != 0)
      goto LABEL_45;
    goto LABEL_92;
  }
LABEL_91:
  v26 = 0;
  if ((v1 & 0x1000000000) != 0)
  {
LABEL_45:
    v27 = *((_QWORD *)this + 37);
    if ((v1 & 0x2000000000) != 0)
      goto LABEL_46;
LABEL_93:
    v28 = 0.0;
    return v47 ^ v2 ^ v46 ^ v45 ^ v44 ^ v43 ^ v42 ^ v41 ^ v40 ^ v39 ^ v38 ^ v37 ^ v36 ^ v35 ^ v34 ^ v33 ^ v32 ^ v31 ^ v30 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ *(_QWORD *)&v28;
  }
LABEL_92:
  v27 = 0;
  if ((v1 & 0x2000000000) == 0)
    goto LABEL_93;
LABEL_46:
  v28 = *((double *)this + 38);
  if (v28 == 0.0)
    v28 = 0.0;
  return v47 ^ v2 ^ v46 ^ v45 ^ v44 ^ v43 ^ v42 ^ v41 ^ v40 ^ v39 ^ v38 ^ v37 ^ v36 ^ v35 ^ v34 ^ v33 ^ v32 ^ v31 ^ v30 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ *(_QWORD *)&v28;
}

_QWORD *CMMsl::FallDetectionStateMachine::FallDetectionStateMachine(_QWORD *this)
{
  *this = &off_25135D750;
  *(_QWORD *)((char *)this + 156) = 0;
  return this;
}

{
  *this = &off_25135D750;
  *(_QWORD *)((char *)this + 156) = 0;
  return this;
}

void CMMsl::FallDetectionStateMachine::~FallDetectionStateMachine(CMMsl::FallDetectionStateMachine *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::FallDetectionStateMachine::FallDetectionStateMachine(CMMsl::FallDetectionStateMachine *this, const CMMsl::FallDetectionStateMachine *a2)
{
  uint64_t v2;
  uint64_t v3;
  double result;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  char v12;
  char v13;
  int v14;
  int v15;
  int v16;
  char v17;
  char v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;

  *(_QWORD *)this = &off_25135D750;
  *(_QWORD *)((char *)this + 156) = 0;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 4) != 0)
  {
    result = *((double *)a2 + 3);
    v3 = 4;
    *(_QWORD *)((char *)this + 156) = 4;
    *((double *)this + 3) = result;
    v2 = *(_QWORD *)((char *)a2 + 156);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 8) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 4);
    v3 |= 8uLL;
    *(_QWORD *)((char *)this + 156) = v3;
    *((_QWORD *)this + 4) = v5;
    v2 = *(_QWORD *)((char *)a2 + 156);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *((_QWORD *)a2 + 2);
    v3 |= 2uLL;
    *(_QWORD *)((char *)this + 156) = v3;
    *((_QWORD *)this + 2) = v6;
    v2 = *(_QWORD *)((char *)a2 + 156);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0)
        goto LABEL_9;
      goto LABEL_43;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(result) = *((_DWORD *)a2 + 16);
  v3 |= 0x400uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 16) = LODWORD(result);
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_44;
  }
LABEL_43:
  LODWORD(result) = *((_DWORD *)a2 + 15);
  v3 |= 0x200uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 15) = LODWORD(result);
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_45;
  }
LABEL_44:
  LODWORD(result) = *((_DWORD *)a2 + 14);
  v3 |= 0x100uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 14) = LODWORD(result);
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x800) == 0)
  {
LABEL_11:
    if ((v2 & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_46;
  }
LABEL_45:
  v7 = *((_DWORD *)a2 + 17);
  v3 |= 0x800uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 17) = v7;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_12:
    if ((v2 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_47;
  }
LABEL_46:
  v8 = *((_DWORD *)a2 + 37);
  v3 |= 0x80000000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 37) = v8;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x1000) == 0)
  {
LABEL_13:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_14;
    goto LABEL_48;
  }
LABEL_47:
  v9 = *((_DWORD *)a2 + 18);
  v3 |= 0x1000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 18) = v9;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_14:
    if ((v2 & 0x20000000) == 0)
      goto LABEL_15;
    goto LABEL_49;
  }
LABEL_48:
  LODWORD(result) = *((_DWORD *)a2 + 34);
  v3 |= 0x10000000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 34) = LODWORD(result);
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_15:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_16;
    goto LABEL_50;
  }
LABEL_49:
  LODWORD(result) = *((_DWORD *)a2 + 35);
  v3 |= 0x20000000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 35) = LODWORD(result);
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_16:
    if ((v2 & 0x40000) == 0)
      goto LABEL_17;
    goto LABEL_51;
  }
LABEL_50:
  LODWORD(result) = *((_DWORD *)a2 + 33);
  v3 |= 0x8000000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 33) = LODWORD(result);
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x40000) == 0)
  {
LABEL_17:
    if ((v2 & 0x4000) == 0)
      goto LABEL_18;
    goto LABEL_52;
  }
LABEL_51:
  v10 = *((_DWORD *)a2 + 24);
  v3 |= 0x40000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 24) = v10;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x4000) == 0)
  {
LABEL_18:
    if ((v2 & 0x20) == 0)
      goto LABEL_19;
    goto LABEL_53;
  }
LABEL_52:
  LODWORD(result) = *((_DWORD *)a2 + 20);
  v3 |= 0x4000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 20) = LODWORD(result);
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x20) == 0)
  {
LABEL_19:
    if ((v2 & 0x400000000) == 0)
      goto LABEL_20;
    goto LABEL_54;
  }
LABEL_53:
  v11 = *((_DWORD *)a2 + 11);
  v3 |= 0x20uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 11) = v11;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x400000000) == 0)
  {
LABEL_20:
    if ((v2 & 0x200000000) == 0)
      goto LABEL_21;
    goto LABEL_55;
  }
LABEL_54:
  v12 = *((_BYTE *)a2 + 154);
  v3 |= 0x400000000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_BYTE *)this + 154) = v12;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x200000000) == 0)
  {
LABEL_21:
    if ((v2 & 0x80) == 0)
      goto LABEL_22;
    goto LABEL_56;
  }
LABEL_55:
  v13 = *((_BYTE *)a2 + 153);
  v3 |= 0x200000000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_BYTE *)this + 153) = v13;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x80) == 0)
  {
LABEL_22:
    if ((v2 & 0x40000000) == 0)
      goto LABEL_23;
    goto LABEL_57;
  }
LABEL_56:
  v14 = *((_DWORD *)a2 + 13);
  v3 |= 0x80uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 13) = v14;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_23:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_24;
    goto LABEL_58;
  }
LABEL_57:
  v15 = *((_DWORD *)a2 + 36);
  v3 |= 0x40000000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 36) = v15;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_24:
    if ((v2 & 0x800000000) == 0)
      goto LABEL_25;
    goto LABEL_59;
  }
LABEL_58:
  v16 = *((_DWORD *)a2 + 31);
  v3 |= 0x2000000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 31) = v16;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x800000000) == 0)
  {
LABEL_25:
    if ((v2 & 0x100000000) == 0)
      goto LABEL_26;
    goto LABEL_60;
  }
LABEL_59:
  v17 = *((_BYTE *)a2 + 155);
  v3 |= 0x800000000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_BYTE *)this + 155) = v17;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x100000000) == 0)
  {
LABEL_26:
    if ((v2 & 0x20000) == 0)
      goto LABEL_27;
    goto LABEL_61;
  }
LABEL_60:
  v18 = *((_BYTE *)a2 + 152);
  v3 |= 0x100000000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_BYTE *)this + 152) = v18;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x20000) == 0)
  {
LABEL_27:
    if ((v2 & 0x200000) == 0)
      goto LABEL_28;
    goto LABEL_62;
  }
LABEL_61:
  v19 = *((_DWORD *)a2 + 23);
  v3 |= 0x20000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 23) = v19;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x200000) == 0)
  {
LABEL_28:
    if ((v2 & 0x400000) == 0)
      goto LABEL_29;
    goto LABEL_63;
  }
LABEL_62:
  v20 = *((_DWORD *)a2 + 27);
  v3 |= 0x200000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 27) = v20;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x400000) == 0)
  {
LABEL_29:
    if ((v2 & 0x80000) == 0)
      goto LABEL_30;
    goto LABEL_64;
  }
LABEL_63:
  v21 = *((_DWORD *)a2 + 28);
  v3 |= 0x400000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 28) = v21;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x80000) == 0)
  {
LABEL_30:
    if ((v2 & 0x8000) == 0)
      goto LABEL_31;
    goto LABEL_65;
  }
LABEL_64:
  v22 = *((_DWORD *)a2 + 25);
  v3 |= 0x80000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 25) = v22;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x8000) == 0)
  {
LABEL_31:
    if ((v2 & 0x800000) == 0)
      goto LABEL_32;
    goto LABEL_66;
  }
LABEL_65:
  v23 = *((_DWORD *)a2 + 21);
  v3 |= 0x8000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 21) = v23;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x800000) == 0)
  {
LABEL_32:
    if ((v2 & 0x100000) == 0)
      goto LABEL_33;
    goto LABEL_67;
  }
LABEL_66:
  LODWORD(result) = *((_DWORD *)a2 + 29);
  v3 |= 0x800000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 29) = LODWORD(result);
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x100000) == 0)
  {
LABEL_33:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_34;
    goto LABEL_68;
  }
LABEL_67:
  v24 = *((_DWORD *)a2 + 26);
  v3 |= 0x100000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 26) = v24;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_34:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_35;
    goto LABEL_69;
  }
LABEL_68:
  LODWORD(result) = *((_DWORD *)a2 + 32);
  v3 |= 0x4000000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 32) = LODWORD(result);
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_35:
    if ((v2 & 0x10) == 0)
      goto LABEL_36;
    goto LABEL_70;
  }
LABEL_69:
  v25 = *((_DWORD *)a2 + 30);
  v3 |= 0x1000000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 30) = v25;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x10) == 0)
  {
LABEL_36:
    if ((v2 & 0x40) == 0)
      goto LABEL_37;
    goto LABEL_71;
  }
LABEL_70:
  v26 = *((_DWORD *)a2 + 10);
  v3 |= 0x10uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 10) = v26;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x40) == 0)
  {
LABEL_37:
    if ((v2 & 0x10000) == 0)
      goto LABEL_38;
    goto LABEL_72;
  }
LABEL_71:
  LODWORD(result) = *((_DWORD *)a2 + 12);
  v3 |= 0x40uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 12) = LODWORD(result);
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x10000) == 0)
  {
LABEL_38:
    if ((v2 & 0x2000) == 0)
      goto LABEL_39;
    goto LABEL_73;
  }
LABEL_72:
  v27 = *((_DWORD *)a2 + 22);
  v3 |= 0x10000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 22) = v27;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x2000) == 0)
  {
LABEL_39:
    if ((v2 & 1) == 0)
      return result;
LABEL_74:
    result = *((double *)a2 + 1);
    *(_QWORD *)((char *)this + 156) = v3 | 1;
    *((double *)this + 1) = result;
    return result;
  }
LABEL_73:
  v28 = *((_DWORD *)a2 + 19);
  v3 |= 0x2000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 19) = v28;
  if ((*(_QWORD *)((_BYTE *)a2 + 156) & 1) != 0)
    goto LABEL_74;
  return result;
}

CMMsl *CMMsl::FallDetectionStateMachine::operator=(CMMsl *a1, const CMMsl::FallDetectionStateMachine *a2)
{
  CMMsl::FallDetectionStateMachine *v3;
  _BYTE v5[168];

  if (a1 != a2)
  {
    CMMsl::FallDetectionStateMachine::FallDetectionStateMachine((CMMsl::FallDetectionStateMachine *)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallDetectionStateMachine *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::FallDetectionStateMachine *a2, CMMsl::FallDetectionStateMachine *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  v3 = *(_QWORD *)((char *)this + 156);
  *(_QWORD *)((char *)this + 156) = *(_QWORD *)((char *)a2 + 156);
  *(_QWORD *)((char *)a2 + 156) = v3;
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v4;
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  LODWORD(v4) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v4;
  LODWORD(v4) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  LODWORD(v6) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v6;
  LODWORD(v6) = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v6;
  LODWORD(v6) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v6;
  LODWORD(v4) = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v4;
  LODWORD(v4) = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v4;
  LODWORD(v4) = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v4;
  LODWORD(v6) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v6;
  LODWORD(v4) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v4;
  LODWORD(v6) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 154);
  *((_BYTE *)this + 154) = *((_BYTE *)a2 + 154);
  *((_BYTE *)a2 + 154) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 153);
  *((_BYTE *)this + 153) = *((_BYTE *)a2 + 153);
  *((_BYTE *)a2 + 153) = v6;
  LODWORD(v6) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v6;
  LODWORD(v6) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v6;
  LODWORD(v6) = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 155);
  *((_BYTE *)this + 155) = *((_BYTE *)a2 + 155);
  *((_BYTE *)a2 + 155) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 152);
  *((_BYTE *)this + 152) = *((_BYTE *)a2 + 152);
  *((_BYTE *)a2 + 152) = v6;
  LODWORD(v6) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v6;
  LODWORD(v6) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v6;
  LODWORD(v6) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v6;
  LODWORD(v6) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v6;
  LODWORD(v6) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v6;
  LODWORD(v4) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v4;
  LODWORD(v6) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v6;
  LODWORD(v4) = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v4;
  LODWORD(v6) = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v6;
  LODWORD(v6) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v6;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  LODWORD(v6) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v6;
  LODWORD(v6) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v6;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::FallDetectionStateMachine::FallDetectionStateMachine(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135D750;
  *(_QWORD *)(a1 + 156) = *(_QWORD *)(a2 + 156);
  *(_QWORD *)(a2 + 156) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_BYTE *)(a1 + 154) = *(_BYTE *)(a2 + 154);
  *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_BYTE *)(a1 + 155) = *(_BYTE *)(a2 + 155);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

CMMsl *CMMsl::FallDetectionStateMachine::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::FallDetectionStateMachine *v3;
  _BYTE v5[168];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::FallDetectionStateMachine::FallDetectionStateMachine((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallDetectionStateMachine *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::FallDetectionStateMachine::formatText(CMMsl::FallDetectionStateMachine *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "conisderedSOS");
    v5 = *(_QWORD *)((char *)this + 156);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x100000000) == 0)
        goto LABEL_4;
      goto LABEL_41;
    }
  }
  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "deltaSteps");
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "didCancelSOS");
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0)
      goto LABEL_6;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "distanceTraveled", *((float *)this + 12));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 2) == 0)
      goto LABEL_7;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "fallAlertUndelayedTimestamp", *((double *)this + 1));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 2) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "fallTime");
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "fromState");
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 4) == 0)
      goto LABEL_10;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "gyroMaxMean", *((float *)this + 14));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 4) == 0)
  {
LABEL_10:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_11;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "iostime", *((double *)this + 3));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_11:
    if ((v5 & 0x400000000) == 0)
      goto LABEL_12;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "isActive");
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "isStand");
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x200) == 0)
  {
LABEL_13:
    if ((v5 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "magnitudeDiffUnity", *((float *)this + 15));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x400) == 0)
  {
LABEL_14:
    if ((v5 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "maxAccelStdAxis", *((float *)this + 16));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x800) == 0)
  {
LABEL_15:
    if ((v5 & 0x1000) == 0)
      goto LABEL_16;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "maxNumQuiescentBins");
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x1000) == 0)
  {
LABEL_16:
    if ((v5 & 0x2000) == 0)
      goto LABEL_17;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "maxNumStaticBins");
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x2000) == 0)
  {
LABEL_17:
    if ((v5 & 0x4000) == 0)
      goto LABEL_18;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "nominalQuiescentThreshold");
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x4000) == 0)
  {
LABEL_18:
    if ((v5 & 0x8000) == 0)
      goto LABEL_19;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "normalizedIQR", *((float *)this + 20));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x8000) == 0)
  {
LABEL_19:
    if ((v5 & 0x10000) == 0)
      goto LABEL_20;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "numActiveBins");
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x10000) == 0)
  {
LABEL_20:
    if ((v5 & 0x20000) == 0)
      goto LABEL_21;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "numCyclingEpochs");
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x20000) == 0)
  {
LABEL_21:
    if ((v5 & 0x40000) == 0)
      goto LABEL_22;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "numNonzeroStepEpochs");
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x40000) == 0)
  {
LABEL_22:
    if ((v5 & 0x80000) == 0)
      goto LABEL_23;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "numPeaks");
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x80000) == 0)
  {
LABEL_23:
    if ((v5 & 0x100000) == 0)
      goto LABEL_24;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "numQuiescentBins");
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x100000) == 0)
  {
LABEL_24:
    if ((v5 & 0x200000) == 0)
      goto LABEL_25;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "numSharpPeaks");
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x200000) == 0)
  {
LABEL_25:
    if ((v5 & 0x400000) == 0)
      goto LABEL_26;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "numStandBins");
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x400000) == 0)
  {
LABEL_26:
    if ((v5 & 0x800000) == 0)
      goto LABEL_27;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "numStaticBins");
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x800000) == 0)
  {
LABEL_27:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_28;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "onBodyFeature", *((float *)this + 29));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_29;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "operatingMode");
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_29:
    if ((v5 & 8) == 0)
      goto LABEL_30;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "quiescentThreshold");
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 8) == 0)
  {
LABEL_30:
    if ((v5 & 0x800000000) == 0)
      goto LABEL_31;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "sensorTime");
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x800000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_32;
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(a2, "sentFallAlert");
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_33;
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(a2, "sharpPeaksDelaySpread", *((float *)this + 32));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_34;
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(a2, "sumHighQPeaksInDecLowFreqFFT", *((float *)this + 33));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_35;
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(a2, "sumHighQPeaksInHighFreqFFT", *((float *)this + 34));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_36;
LABEL_73:
    PB::TextFormatter::format(a2, "toState");
    if ((*(_QWORD *)((_BYTE *)this + 156) & 0x80000000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_37;
  }
LABEL_72:
  PB::TextFormatter::format(a2, "sumHighQPeaksInLowFreqFFT", *((float *)this + 35));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x40000000) != 0)
    goto LABEL_73;
LABEL_36:
  if ((v5 & 0x80000000) != 0)
LABEL_37:
    PB::TextFormatter::format(a2, "totalNumStaticBins");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FallDetectionStateMachine::readFrom(CMMsl::FallDetectionStateMachine *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char v60;
  unsigned int v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  unint64_t v85;
  unint64_t v86;
  int v87;
  BOOL v88;
  unint64_t v89;
  unint64_t v90;
  int v91;
  BOOL v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  char v96;
  unsigned int v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char v104;
  unsigned int v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  char v112;
  unsigned int v113;
  uint64_t v114;
  unint64_t v115;
  char v116;
  unint64_t v117;
  unint64_t v118;
  int v119;
  BOOL v120;
  unint64_t v121;
  unint64_t v122;
  int v123;
  BOOL v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  char v128;
  unsigned int v129;
  uint64_t v130;
  unint64_t v131;
  char v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  char v136;
  unsigned int v137;
  uint64_t v138;
  unint64_t v139;
  char v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  char v144;
  unsigned int v145;
  uint64_t v146;
  unint64_t v147;
  char v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  char v152;
  unsigned int v153;
  uint64_t v154;
  unint64_t v155;
  char v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  char v160;
  unsigned int v161;
  uint64_t v162;
  unint64_t v163;
  char v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  char v169;
  unsigned int v170;
  uint64_t v171;
  unint64_t v172;
  char v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  char v178;
  unsigned int v179;
  uint64_t v180;
  unint64_t v181;
  char v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  char v186;
  unsigned int v187;
  uint64_t v188;
  unint64_t v189;
  char v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  char v196;
  unsigned int v197;
  uint64_t v198;
  unint64_t v199;
  char v200;
  unint64_t v201;
  unint64_t v202;
  uint64_t v203;
  char v204;
  unsigned int v205;
  uint64_t v206;
  unint64_t v207;
  char v208;
  unint64_t v209;
  char v210;
  unsigned int v211;
  unint64_t v212;
  char v213;
  char v214;
  unsigned int v215;
  unint64_t v216;
  char v217;
  char v218;
  unsigned int v219;
  unint64_t v220;
  char v221;
  char v222;
  unsigned int v223;
  unint64_t v224;
  char v225;
  char v226;
  unsigned int v227;
  unint64_t v228;
  char v229;
  char v230;
  unsigned int v231;
  unint64_t v232;
  char v233;
  char v234;
  unsigned int v235;
  unint64_t v236;
  char v237;
  char v238;
  unsigned int v239;
  unint64_t v240;
  char v241;
  char v242;
  unsigned int v243;
  unint64_t v244;
  char v245;
  char v246;
  unsigned int v247;
  unint64_t v248;
  char v249;
  char v250;
  unsigned int v251;
  unint64_t v252;
  char v253;
  char v254;
  unsigned int v255;
  unint64_t v256;
  char v257;
  char v258;
  unsigned int v259;
  unint64_t v260;
  char v261;
  char v262;
  unsigned int v263;
  unint64_t v264;
  char v265;
  char v266;
  unsigned int v267;
  unint64_t v268;
  char v269;
  char v270;
  unsigned int v271;
  unint64_t v272;
  char v273;
  char v274;
  unsigned int v275;
  unint64_t v276;
  char v277;
  char v278;
  unsigned int v279;
  unint64_t v280;
  char v281;
  char v282;
  unsigned int v283;
  unint64_t v284;
  char v285;
  char v286;
  unsigned int v287;
  unint64_t v288;
  char v289;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_25;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      goto LABEL_20;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_25:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *(_QWORD *)((char *)this + 156) |= 4uLL;
        v21 = *((_QWORD *)a2 + 1);
        if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_212;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v21);
        goto LABEL_362;
      case 2u:
        *(_QWORD *)((char *)this + 156) |= 8uLL;
        v22 = *((_QWORD *)a2 + 1);
        v23 = *((_QWORD *)a2 + 2);
        v24 = *(_QWORD *)a2;
        if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
        {
          v25 = 0;
          v26 = 0;
          v27 = 0;
          do
          {
            v28 = v22 + 1;
            *((_QWORD *)a2 + 1) = v22 + 1;
            v29 = *(_BYTE *)(v24 + v22);
            v27 |= (unint64_t)(v29 & 0x7F) << v25;
            if ((v29 & 0x80) == 0)
              goto LABEL_366;
            v25 += 7;
            v22 = v28;
            v14 = v26++ > 8;
          }
          while (!v14);
LABEL_219:
          v27 = 0;
          goto LABEL_366;
        }
        v210 = 0;
        v211 = 0;
        v27 = 0;
        if (v23 <= v22)
          v23 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v23 == v22)
          {
            v27 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v212 = v22 + 1;
            v213 = *(_BYTE *)(v24 + v22);
            *((_QWORD *)a2 + 1) = v212;
            v27 |= (unint64_t)(v213 & 0x7F) << v210;
            if (v213 < 0)
            {
              v210 += 7;
              v22 = v212;
              v14 = v211++ > 8;
              if (v14)
                goto LABEL_219;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v27 = 0;
          }
          break;
        }
LABEL_366:
        *((_QWORD *)this + 4) = v27;
        goto LABEL_20;
      case 3u:
        *(_QWORD *)((char *)this + 156) |= 2uLL;
        v30 = *((_QWORD *)a2 + 1);
        v31 = *((_QWORD *)a2 + 2);
        v32 = *(_QWORD *)a2;
        if (v30 <= 0xFFFFFFFFFFFFFFF5 && v30 + 10 <= v31)
        {
          v33 = 0;
          v34 = 0;
          v35 = 0;
          do
          {
            v36 = v30 + 1;
            *((_QWORD *)a2 + 1) = v30 + 1;
            v37 = *(_BYTE *)(v32 + v30);
            v35 |= (unint64_t)(v37 & 0x7F) << v33;
            if ((v37 & 0x80) == 0)
              goto LABEL_370;
            v33 += 7;
            v30 = v36;
            v14 = v34++ > 8;
          }
          while (!v14);
LABEL_226:
          v35 = 0;
          goto LABEL_370;
        }
        v214 = 0;
        v215 = 0;
        v35 = 0;
        if (v31 <= v30)
          v31 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v31 == v30)
          {
            v35 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v216 = v30 + 1;
            v217 = *(_BYTE *)(v32 + v30);
            *((_QWORD *)a2 + 1) = v216;
            v35 |= (unint64_t)(v217 & 0x7F) << v214;
            if (v217 < 0)
            {
              v214 += 7;
              v30 = v216;
              v14 = v215++ > 8;
              if (v14)
                goto LABEL_226;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v35 = 0;
          }
          break;
        }
LABEL_370:
        *((_QWORD *)this + 2) = v35;
        goto LABEL_20;
      case 4u:
        *(_QWORD *)((char *)this + 156) |= 0x400uLL;
        v38 = *((_QWORD *)a2 + 1);
        if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_212;
        *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v38);
        goto LABEL_194;
      case 5u:
        *(_QWORD *)((char *)this + 156) |= 0x200uLL;
        v39 = *((_QWORD *)a2 + 1);
        if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_212;
        *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v39);
        goto LABEL_194;
      case 6u:
        *(_QWORD *)((char *)this + 156) |= 0x100uLL;
        v40 = *((_QWORD *)a2 + 1);
        if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_212;
        *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v40);
        goto LABEL_194;
      case 7u:
        *(_QWORD *)((char *)this + 156) |= 0x800uLL;
        v41 = *((_QWORD *)a2 + 1);
        v42 = *((_QWORD *)a2 + 2);
        v43 = *(_QWORD *)a2;
        if (v41 <= 0xFFFFFFFFFFFFFFF5 && v41 + 10 <= v42)
        {
          v44 = 0;
          v45 = 0;
          v46 = 0;
          do
          {
            v47 = v41 + 1;
            *((_QWORD *)a2 + 1) = v41 + 1;
            v48 = *(_BYTE *)(v43 + v41);
            v46 |= (unint64_t)(v48 & 0x7F) << v44;
            if ((v48 & 0x80) == 0)
              goto LABEL_374;
            v44 += 7;
            v41 = v47;
            v14 = v45++ > 8;
          }
          while (!v14);
LABEL_233:
          LODWORD(v46) = 0;
          goto LABEL_374;
        }
        v218 = 0;
        v219 = 0;
        v46 = 0;
        if (v42 <= v41)
          v42 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v42 == v41)
          {
            LODWORD(v46) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v220 = v41 + 1;
            v221 = *(_BYTE *)(v43 + v41);
            *((_QWORD *)a2 + 1) = v220;
            v46 |= (unint64_t)(v221 & 0x7F) << v218;
            if (v221 < 0)
            {
              v218 += 7;
              v41 = v220;
              v14 = v219++ > 8;
              if (v14)
                goto LABEL_233;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v46) = 0;
          }
          break;
        }
LABEL_374:
        *((_DWORD *)this + 17) = v46;
        goto LABEL_20;
      case 8u:
        *(_QWORD *)((char *)this + 156) |= 0x80000000uLL;
        v49 = *((_QWORD *)a2 + 1);
        v50 = *((_QWORD *)a2 + 2);
        v51 = *(_QWORD *)a2;
        if (v49 <= 0xFFFFFFFFFFFFFFF5 && v49 + 10 <= v50)
        {
          v52 = 0;
          v53 = 0;
          v54 = 0;
          do
          {
            v55 = v49 + 1;
            *((_QWORD *)a2 + 1) = v49 + 1;
            v56 = *(_BYTE *)(v51 + v49);
            v54 |= (unint64_t)(v56 & 0x7F) << v52;
            if ((v56 & 0x80) == 0)
              goto LABEL_378;
            v52 += 7;
            v49 = v55;
            v14 = v53++ > 8;
          }
          while (!v14);
LABEL_240:
          LODWORD(v54) = 0;
          goto LABEL_378;
        }
        v222 = 0;
        v223 = 0;
        v54 = 0;
        if (v50 <= v49)
          v50 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v50 == v49)
          {
            LODWORD(v54) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v224 = v49 + 1;
            v225 = *(_BYTE *)(v51 + v49);
            *((_QWORD *)a2 + 1) = v224;
            v54 |= (unint64_t)(v225 & 0x7F) << v222;
            if (v225 < 0)
            {
              v222 += 7;
              v49 = v224;
              v14 = v223++ > 8;
              if (v14)
                goto LABEL_240;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v54) = 0;
          }
          break;
        }
LABEL_378:
        *((_DWORD *)this + 37) = v54;
        goto LABEL_20;
      case 9u:
        *(_QWORD *)((char *)this + 156) |= 0x1000uLL;
        v57 = *((_QWORD *)a2 + 1);
        v58 = *((_QWORD *)a2 + 2);
        v59 = *(_QWORD *)a2;
        if (v57 <= 0xFFFFFFFFFFFFFFF5 && v57 + 10 <= v58)
        {
          v60 = 0;
          v61 = 0;
          v62 = 0;
          do
          {
            v63 = v57 + 1;
            *((_QWORD *)a2 + 1) = v57 + 1;
            v64 = *(_BYTE *)(v59 + v57);
            v62 |= (unint64_t)(v64 & 0x7F) << v60;
            if ((v64 & 0x80) == 0)
              goto LABEL_382;
            v60 += 7;
            v57 = v63;
            v14 = v61++ > 8;
          }
          while (!v14);
LABEL_247:
          LODWORD(v62) = 0;
          goto LABEL_382;
        }
        v226 = 0;
        v227 = 0;
        v62 = 0;
        if (v58 <= v57)
          v58 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v58 == v57)
          {
            LODWORD(v62) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v228 = v57 + 1;
            v229 = *(_BYTE *)(v59 + v57);
            *((_QWORD *)a2 + 1) = v228;
            v62 |= (unint64_t)(v229 & 0x7F) << v226;
            if (v229 < 0)
            {
              v226 += 7;
              v57 = v228;
              v14 = v227++ > 8;
              if (v14)
                goto LABEL_247;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v62) = 0;
          }
          break;
        }
LABEL_382:
        *((_DWORD *)this + 18) = v62;
        goto LABEL_20;
      case 0xAu:
        *(_QWORD *)((char *)this + 156) |= 0x10000000uLL;
        v65 = *((_QWORD *)a2 + 1);
        if (v65 > 0xFFFFFFFFFFFFFFFBLL || v65 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_212;
        *((_DWORD *)this + 34) = *(_DWORD *)(*(_QWORD *)a2 + v65);
        goto LABEL_194;
      case 0xBu:
        *(_QWORD *)((char *)this + 156) |= 0x20000000uLL;
        v66 = *((_QWORD *)a2 + 1);
        if (v66 > 0xFFFFFFFFFFFFFFFBLL || v66 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_212;
        *((_DWORD *)this + 35) = *(_DWORD *)(*(_QWORD *)a2 + v66);
        goto LABEL_194;
      case 0xCu:
        *(_QWORD *)((char *)this + 156) |= 0x8000000uLL;
        v67 = *((_QWORD *)a2 + 1);
        if (v67 > 0xFFFFFFFFFFFFFFFBLL || v67 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_212;
        *((_DWORD *)this + 33) = *(_DWORD *)(*(_QWORD *)a2 + v67);
        goto LABEL_194;
      case 0xDu:
        *(_QWORD *)((char *)this + 156) |= 0x40000uLL;
        v68 = *((_QWORD *)a2 + 1);
        v69 = *((_QWORD *)a2 + 2);
        v70 = *(_QWORD *)a2;
        if (v68 <= 0xFFFFFFFFFFFFFFF5 && v68 + 10 <= v69)
        {
          v71 = 0;
          v72 = 0;
          v73 = 0;
          do
          {
            v74 = v68 + 1;
            *((_QWORD *)a2 + 1) = v68 + 1;
            v75 = *(_BYTE *)(v70 + v68);
            v73 |= (unint64_t)(v75 & 0x7F) << v71;
            if ((v75 & 0x80) == 0)
              goto LABEL_386;
            v71 += 7;
            v68 = v74;
            v14 = v72++ > 8;
          }
          while (!v14);
LABEL_254:
          LODWORD(v73) = 0;
          goto LABEL_386;
        }
        v230 = 0;
        v231 = 0;
        v73 = 0;
        if (v69 <= v68)
          v69 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v69 == v68)
          {
            LODWORD(v73) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v232 = v68 + 1;
            v233 = *(_BYTE *)(v70 + v68);
            *((_QWORD *)a2 + 1) = v232;
            v73 |= (unint64_t)(v233 & 0x7F) << v230;
            if (v233 < 0)
            {
              v230 += 7;
              v68 = v232;
              v14 = v231++ > 8;
              if (v14)
                goto LABEL_254;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v73) = 0;
          }
          break;
        }
LABEL_386:
        *((_DWORD *)this + 24) = v73;
        goto LABEL_20;
      case 0xEu:
        *(_QWORD *)((char *)this + 156) |= 0x4000uLL;
        v76 = *((_QWORD *)a2 + 1);
        if (v76 > 0xFFFFFFFFFFFFFFFBLL || v76 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_212;
        *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v76);
        goto LABEL_194;
      case 0xFu:
        *(_QWORD *)((char *)this + 156) |= 0x20uLL;
        v77 = *((_QWORD *)a2 + 1);
        v78 = *((_QWORD *)a2 + 2);
        v79 = *(_QWORD *)a2;
        if (v77 <= 0xFFFFFFFFFFFFFFF5 && v77 + 10 <= v78)
        {
          v80 = 0;
          v81 = 0;
          v82 = 0;
          do
          {
            v83 = v77 + 1;
            *((_QWORD *)a2 + 1) = v77 + 1;
            v84 = *(_BYTE *)(v79 + v77);
            v82 |= (unint64_t)(v84 & 0x7F) << v80;
            if ((v84 & 0x80) == 0)
              goto LABEL_390;
            v80 += 7;
            v77 = v83;
            v14 = v81++ > 8;
          }
          while (!v14);
LABEL_261:
          LODWORD(v82) = 0;
          goto LABEL_390;
        }
        v234 = 0;
        v235 = 0;
        v82 = 0;
        if (v78 <= v77)
          v78 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v78 == v77)
          {
            LODWORD(v82) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v236 = v77 + 1;
            v237 = *(_BYTE *)(v79 + v77);
            *((_QWORD *)a2 + 1) = v236;
            v82 |= (unint64_t)(v237 & 0x7F) << v234;
            if (v237 < 0)
            {
              v234 += 7;
              v77 = v236;
              v14 = v235++ > 8;
              if (v14)
                goto LABEL_261;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v82) = 0;
          }
          break;
        }
LABEL_390:
        *((_DWORD *)this + 11) = v82;
        goto LABEL_20;
      case 0x10u:
        *(_QWORD *)((char *)this + 156) |= 0x400000000uLL;
        v85 = *((_QWORD *)a2 + 1);
        if (v85 >= *((_QWORD *)a2 + 2))
        {
          v88 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v86 = v85 + 1;
          v87 = *(unsigned __int8 *)(*(_QWORD *)a2 + v85);
          *((_QWORD *)a2 + 1) = v86;
          v88 = v87 != 0;
        }
        *((_BYTE *)this + 154) = v88;
        goto LABEL_20;
      case 0x11u:
        *(_QWORD *)((char *)this + 156) |= 0x200000000uLL;
        v89 = *((_QWORD *)a2 + 1);
        if (v89 >= *((_QWORD *)a2 + 2))
        {
          v92 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v90 = v89 + 1;
          v91 = *(unsigned __int8 *)(*(_QWORD *)a2 + v89);
          *((_QWORD *)a2 + 1) = v90;
          v92 = v91 != 0;
        }
        *((_BYTE *)this + 153) = v92;
        goto LABEL_20;
      case 0x12u:
        *(_QWORD *)((char *)this + 156) |= 0x80uLL;
        v93 = *((_QWORD *)a2 + 1);
        v94 = *((_QWORD *)a2 + 2);
        v95 = *(_QWORD *)a2;
        if (v93 <= 0xFFFFFFFFFFFFFFF5 && v93 + 10 <= v94)
        {
          v96 = 0;
          v97 = 0;
          v98 = 0;
          do
          {
            v99 = v93 + 1;
            *((_QWORD *)a2 + 1) = v93 + 1;
            v100 = *(_BYTE *)(v95 + v93);
            v98 |= (unint64_t)(v100 & 0x7F) << v96;
            if ((v100 & 0x80) == 0)
              goto LABEL_394;
            v96 += 7;
            v93 = v99;
            v14 = v97++ > 8;
          }
          while (!v14);
LABEL_272:
          LODWORD(v98) = 0;
          goto LABEL_394;
        }
        v238 = 0;
        v239 = 0;
        v98 = 0;
        if (v94 <= v93)
          v94 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v94 == v93)
          {
            LODWORD(v98) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v240 = v93 + 1;
            v241 = *(_BYTE *)(v95 + v93);
            *((_QWORD *)a2 + 1) = v240;
            v98 |= (unint64_t)(v241 & 0x7F) << v238;
            if (v241 < 0)
            {
              v238 += 7;
              v93 = v240;
              v14 = v239++ > 8;
              if (v14)
                goto LABEL_272;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v98) = 0;
          }
          break;
        }
LABEL_394:
        *((_DWORD *)this + 13) = v98;
        goto LABEL_20;
      case 0x13u:
        *(_QWORD *)((char *)this + 156) |= 0x40000000uLL;
        v101 = *((_QWORD *)a2 + 1);
        v102 = *((_QWORD *)a2 + 2);
        v103 = *(_QWORD *)a2;
        if (v101 <= 0xFFFFFFFFFFFFFFF5 && v101 + 10 <= v102)
        {
          v104 = 0;
          v105 = 0;
          v106 = 0;
          do
          {
            v107 = v101 + 1;
            *((_QWORD *)a2 + 1) = v101 + 1;
            v108 = *(_BYTE *)(v103 + v101);
            v106 |= (unint64_t)(v108 & 0x7F) << v104;
            if ((v108 & 0x80) == 0)
              goto LABEL_398;
            v104 += 7;
            v101 = v107;
            v14 = v105++ > 8;
          }
          while (!v14);
LABEL_279:
          LODWORD(v106) = 0;
          goto LABEL_398;
        }
        v242 = 0;
        v243 = 0;
        v106 = 0;
        if (v102 <= v101)
          v102 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v102 == v101)
          {
            LODWORD(v106) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v244 = v101 + 1;
            v245 = *(_BYTE *)(v103 + v101);
            *((_QWORD *)a2 + 1) = v244;
            v106 |= (unint64_t)(v245 & 0x7F) << v242;
            if (v245 < 0)
            {
              v242 += 7;
              v101 = v244;
              v14 = v243++ > 8;
              if (v14)
                goto LABEL_279;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v106) = 0;
          }
          break;
        }
LABEL_398:
        *((_DWORD *)this + 36) = v106;
        goto LABEL_20;
      case 0x14u:
        *(_QWORD *)((char *)this + 156) |= 0x2000000uLL;
        v109 = *((_QWORD *)a2 + 1);
        v110 = *((_QWORD *)a2 + 2);
        v111 = *(_QWORD *)a2;
        if (v109 <= 0xFFFFFFFFFFFFFFF5 && v109 + 10 <= v110)
        {
          v112 = 0;
          v113 = 0;
          v114 = 0;
          do
          {
            v115 = v109 + 1;
            *((_QWORD *)a2 + 1) = v109 + 1;
            v116 = *(_BYTE *)(v111 + v109);
            v114 |= (unint64_t)(v116 & 0x7F) << v112;
            if ((v116 & 0x80) == 0)
              goto LABEL_402;
            v112 += 7;
            v109 = v115;
            v14 = v113++ > 8;
          }
          while (!v14);
LABEL_286:
          LODWORD(v114) = 0;
          goto LABEL_402;
        }
        v246 = 0;
        v247 = 0;
        v114 = 0;
        if (v110 <= v109)
          v110 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v110 == v109)
          {
            LODWORD(v114) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v248 = v109 + 1;
            v249 = *(_BYTE *)(v111 + v109);
            *((_QWORD *)a2 + 1) = v248;
            v114 |= (unint64_t)(v249 & 0x7F) << v246;
            if (v249 < 0)
            {
              v246 += 7;
              v109 = v248;
              v14 = v247++ > 8;
              if (v14)
                goto LABEL_286;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v114) = 0;
          }
          break;
        }
LABEL_402:
        *((_DWORD *)this + 31) = v114;
        goto LABEL_20;
      case 0x15u:
        *(_QWORD *)((char *)this + 156) |= 0x800000000uLL;
        v117 = *((_QWORD *)a2 + 1);
        if (v117 >= *((_QWORD *)a2 + 2))
        {
          v120 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v118 = v117 + 1;
          v119 = *(unsigned __int8 *)(*(_QWORD *)a2 + v117);
          *((_QWORD *)a2 + 1) = v118;
          v120 = v119 != 0;
        }
        *((_BYTE *)this + 155) = v120;
        goto LABEL_20;
      case 0x16u:
        *(_QWORD *)((char *)this + 156) |= 0x100000000uLL;
        v121 = *((_QWORD *)a2 + 1);
        if (v121 >= *((_QWORD *)a2 + 2))
        {
          v124 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v122 = v121 + 1;
          v123 = *(unsigned __int8 *)(*(_QWORD *)a2 + v121);
          *((_QWORD *)a2 + 1) = v122;
          v124 = v123 != 0;
        }
        *((_BYTE *)this + 152) = v124;
        goto LABEL_20;
      case 0x17u:
        *(_QWORD *)((char *)this + 156) |= 0x20000uLL;
        v125 = *((_QWORD *)a2 + 1);
        v126 = *((_QWORD *)a2 + 2);
        v127 = *(_QWORD *)a2;
        if (v125 <= 0xFFFFFFFFFFFFFFF5 && v125 + 10 <= v126)
        {
          v128 = 0;
          v129 = 0;
          v130 = 0;
          do
          {
            v131 = v125 + 1;
            *((_QWORD *)a2 + 1) = v125 + 1;
            v132 = *(_BYTE *)(v127 + v125);
            v130 |= (unint64_t)(v132 & 0x7F) << v128;
            if ((v132 & 0x80) == 0)
              goto LABEL_406;
            v128 += 7;
            v125 = v131;
            v14 = v129++ > 8;
          }
          while (!v14);
LABEL_297:
          LODWORD(v130) = 0;
          goto LABEL_406;
        }
        v250 = 0;
        v251 = 0;
        v130 = 0;
        if (v126 <= v125)
          v126 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v126 == v125)
          {
            LODWORD(v130) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v252 = v125 + 1;
            v253 = *(_BYTE *)(v127 + v125);
            *((_QWORD *)a2 + 1) = v252;
            v130 |= (unint64_t)(v253 & 0x7F) << v250;
            if (v253 < 0)
            {
              v250 += 7;
              v125 = v252;
              v14 = v251++ > 8;
              if (v14)
                goto LABEL_297;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v130) = 0;
          }
          break;
        }
LABEL_406:
        *((_DWORD *)this + 23) = v130;
        goto LABEL_20;
      case 0x18u:
        *(_QWORD *)((char *)this + 156) |= 0x200000uLL;
        v133 = *((_QWORD *)a2 + 1);
        v134 = *((_QWORD *)a2 + 2);
        v135 = *(_QWORD *)a2;
        if (v133 <= 0xFFFFFFFFFFFFFFF5 && v133 + 10 <= v134)
        {
          v136 = 0;
          v137 = 0;
          v138 = 0;
          do
          {
            v139 = v133 + 1;
            *((_QWORD *)a2 + 1) = v133 + 1;
            v140 = *(_BYTE *)(v135 + v133);
            v138 |= (unint64_t)(v140 & 0x7F) << v136;
            if ((v140 & 0x80) == 0)
              goto LABEL_410;
            v136 += 7;
            v133 = v139;
            v14 = v137++ > 8;
          }
          while (!v14);
LABEL_304:
          LODWORD(v138) = 0;
          goto LABEL_410;
        }
        v254 = 0;
        v255 = 0;
        v138 = 0;
        if (v134 <= v133)
          v134 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v134 == v133)
          {
            LODWORD(v138) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v256 = v133 + 1;
            v257 = *(_BYTE *)(v135 + v133);
            *((_QWORD *)a2 + 1) = v256;
            v138 |= (unint64_t)(v257 & 0x7F) << v254;
            if (v257 < 0)
            {
              v254 += 7;
              v133 = v256;
              v14 = v255++ > 8;
              if (v14)
                goto LABEL_304;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v138) = 0;
          }
          break;
        }
LABEL_410:
        *((_DWORD *)this + 27) = v138;
        goto LABEL_20;
      case 0x19u:
        *(_QWORD *)((char *)this + 156) |= 0x400000uLL;
        v141 = *((_QWORD *)a2 + 1);
        v142 = *((_QWORD *)a2 + 2);
        v143 = *(_QWORD *)a2;
        if (v141 <= 0xFFFFFFFFFFFFFFF5 && v141 + 10 <= v142)
        {
          v144 = 0;
          v145 = 0;
          v146 = 0;
          do
          {
            v147 = v141 + 1;
            *((_QWORD *)a2 + 1) = v141 + 1;
            v148 = *(_BYTE *)(v143 + v141);
            v146 |= (unint64_t)(v148 & 0x7F) << v144;
            if ((v148 & 0x80) == 0)
              goto LABEL_414;
            v144 += 7;
            v141 = v147;
            v14 = v145++ > 8;
          }
          while (!v14);
LABEL_311:
          LODWORD(v146) = 0;
          goto LABEL_414;
        }
        v258 = 0;
        v259 = 0;
        v146 = 0;
        if (v142 <= v141)
          v142 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v142 == v141)
          {
            LODWORD(v146) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v260 = v141 + 1;
            v261 = *(_BYTE *)(v143 + v141);
            *((_QWORD *)a2 + 1) = v260;
            v146 |= (unint64_t)(v261 & 0x7F) << v258;
            if (v261 < 0)
            {
              v258 += 7;
              v141 = v260;
              v14 = v259++ > 8;
              if (v14)
                goto LABEL_311;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v146) = 0;
          }
          break;
        }
LABEL_414:
        *((_DWORD *)this + 28) = v146;
        goto LABEL_20;
      case 0x1Au:
        *(_QWORD *)((char *)this + 156) |= 0x80000uLL;
        v149 = *((_QWORD *)a2 + 1);
        v150 = *((_QWORD *)a2 + 2);
        v151 = *(_QWORD *)a2;
        if (v149 <= 0xFFFFFFFFFFFFFFF5 && v149 + 10 <= v150)
        {
          v152 = 0;
          v153 = 0;
          v154 = 0;
          do
          {
            v155 = v149 + 1;
            *((_QWORD *)a2 + 1) = v149 + 1;
            v156 = *(_BYTE *)(v151 + v149);
            v154 |= (unint64_t)(v156 & 0x7F) << v152;
            if ((v156 & 0x80) == 0)
              goto LABEL_418;
            v152 += 7;
            v149 = v155;
            v14 = v153++ > 8;
          }
          while (!v14);
LABEL_318:
          LODWORD(v154) = 0;
          goto LABEL_418;
        }
        v262 = 0;
        v263 = 0;
        v154 = 0;
        if (v150 <= v149)
          v150 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v150 == v149)
          {
            LODWORD(v154) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v264 = v149 + 1;
            v265 = *(_BYTE *)(v151 + v149);
            *((_QWORD *)a2 + 1) = v264;
            v154 |= (unint64_t)(v265 & 0x7F) << v262;
            if (v265 < 0)
            {
              v262 += 7;
              v149 = v264;
              v14 = v263++ > 8;
              if (v14)
                goto LABEL_318;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v154) = 0;
          }
          break;
        }
LABEL_418:
        *((_DWORD *)this + 25) = v154;
        goto LABEL_20;
      case 0x1Bu:
        *(_QWORD *)((char *)this + 156) |= 0x8000uLL;
        v157 = *((_QWORD *)a2 + 1);
        v158 = *((_QWORD *)a2 + 2);
        v159 = *(_QWORD *)a2;
        if (v157 <= 0xFFFFFFFFFFFFFFF5 && v157 + 10 <= v158)
        {
          v160 = 0;
          v161 = 0;
          v162 = 0;
          do
          {
            v163 = v157 + 1;
            *((_QWORD *)a2 + 1) = v157 + 1;
            v164 = *(_BYTE *)(v159 + v157);
            v162 |= (unint64_t)(v164 & 0x7F) << v160;
            if ((v164 & 0x80) == 0)
              goto LABEL_422;
            v160 += 7;
            v157 = v163;
            v14 = v161++ > 8;
          }
          while (!v14);
LABEL_325:
          LODWORD(v162) = 0;
          goto LABEL_422;
        }
        v266 = 0;
        v267 = 0;
        v162 = 0;
        if (v158 <= v157)
          v158 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v158 == v157)
          {
            LODWORD(v162) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v268 = v157 + 1;
            v269 = *(_BYTE *)(v159 + v157);
            *((_QWORD *)a2 + 1) = v268;
            v162 |= (unint64_t)(v269 & 0x7F) << v266;
            if (v269 < 0)
            {
              v266 += 7;
              v157 = v268;
              v14 = v267++ > 8;
              if (v14)
                goto LABEL_325;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v162) = 0;
          }
          break;
        }
LABEL_422:
        *((_DWORD *)this + 21) = v162;
        goto LABEL_20;
      case 0x1Cu:
        *(_QWORD *)((char *)this + 156) |= 0x800000uLL;
        v165 = *((_QWORD *)a2 + 1);
        if (v165 > 0xFFFFFFFFFFFFFFFBLL || v165 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_212;
        *((_DWORD *)this + 29) = *(_DWORD *)(*(_QWORD *)a2 + v165);
        goto LABEL_194;
      case 0x1Du:
        *(_QWORD *)((char *)this + 156) |= 0x100000uLL;
        v166 = *((_QWORD *)a2 + 1);
        v167 = *((_QWORD *)a2 + 2);
        v168 = *(_QWORD *)a2;
        if (v166 <= 0xFFFFFFFFFFFFFFF5 && v166 + 10 <= v167)
        {
          v169 = 0;
          v170 = 0;
          v171 = 0;
          do
          {
            v172 = v166 + 1;
            *((_QWORD *)a2 + 1) = v166 + 1;
            v173 = *(_BYTE *)(v168 + v166);
            v171 |= (unint64_t)(v173 & 0x7F) << v169;
            if ((v173 & 0x80) == 0)
              goto LABEL_426;
            v169 += 7;
            v166 = v172;
            v14 = v170++ > 8;
          }
          while (!v14);
LABEL_332:
          LODWORD(v171) = 0;
          goto LABEL_426;
        }
        v270 = 0;
        v271 = 0;
        v171 = 0;
        if (v167 <= v166)
          v167 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v167 == v166)
          {
            LODWORD(v171) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v272 = v166 + 1;
            v273 = *(_BYTE *)(v168 + v166);
            *((_QWORD *)a2 + 1) = v272;
            v171 |= (unint64_t)(v273 & 0x7F) << v270;
            if (v273 < 0)
            {
              v270 += 7;
              v166 = v272;
              v14 = v271++ > 8;
              if (v14)
                goto LABEL_332;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v171) = 0;
          }
          break;
        }
LABEL_426:
        *((_DWORD *)this + 26) = v171;
        goto LABEL_20;
      case 0x1Eu:
        *(_QWORD *)((char *)this + 156) |= 0x4000000uLL;
        v174 = *((_QWORD *)a2 + 1);
        if (v174 > 0xFFFFFFFFFFFFFFFBLL || v174 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_212;
        *((_DWORD *)this + 32) = *(_DWORD *)(*(_QWORD *)a2 + v174);
        goto LABEL_194;
      case 0x1Fu:
        *(_QWORD *)((char *)this + 156) |= 0x1000000uLL;
        v175 = *((_QWORD *)a2 + 1);
        v176 = *((_QWORD *)a2 + 2);
        v177 = *(_QWORD *)a2;
        if (v175 <= 0xFFFFFFFFFFFFFFF5 && v175 + 10 <= v176)
        {
          v178 = 0;
          v179 = 0;
          v180 = 0;
          do
          {
            v181 = v175 + 1;
            *((_QWORD *)a2 + 1) = v175 + 1;
            v182 = *(_BYTE *)(v177 + v175);
            v180 |= (unint64_t)(v182 & 0x7F) << v178;
            if ((v182 & 0x80) == 0)
              goto LABEL_430;
            v178 += 7;
            v175 = v181;
            v14 = v179++ > 8;
          }
          while (!v14);
LABEL_339:
          LODWORD(v180) = 0;
          goto LABEL_430;
        }
        v274 = 0;
        v275 = 0;
        v180 = 0;
        if (v176 <= v175)
          v176 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v176 == v175)
          {
            LODWORD(v180) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v276 = v175 + 1;
            v277 = *(_BYTE *)(v177 + v175);
            *((_QWORD *)a2 + 1) = v276;
            v180 |= (unint64_t)(v277 & 0x7F) << v274;
            if (v277 < 0)
            {
              v274 += 7;
              v175 = v276;
              v14 = v275++ > 8;
              if (v14)
                goto LABEL_339;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v180) = 0;
          }
          break;
        }
LABEL_430:
        *((_DWORD *)this + 30) = v180;
        goto LABEL_20;
      case 0x20u:
        *(_QWORD *)((char *)this + 156) |= 0x10uLL;
        v183 = *((_QWORD *)a2 + 1);
        v184 = *((_QWORD *)a2 + 2);
        v185 = *(_QWORD *)a2;
        if (v183 <= 0xFFFFFFFFFFFFFFF5 && v183 + 10 <= v184)
        {
          v186 = 0;
          v187 = 0;
          v188 = 0;
          do
          {
            v189 = v183 + 1;
            *((_QWORD *)a2 + 1) = v183 + 1;
            v190 = *(_BYTE *)(v185 + v183);
            v188 |= (unint64_t)(v190 & 0x7F) << v186;
            if ((v190 & 0x80) == 0)
              goto LABEL_434;
            v186 += 7;
            v183 = v189;
            v14 = v187++ > 8;
          }
          while (!v14);
LABEL_346:
          LODWORD(v188) = 0;
          goto LABEL_434;
        }
        v278 = 0;
        v279 = 0;
        v188 = 0;
        if (v184 <= v183)
          v184 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v184 == v183)
          {
            LODWORD(v188) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v280 = v183 + 1;
            v281 = *(_BYTE *)(v185 + v183);
            *((_QWORD *)a2 + 1) = v280;
            v188 |= (unint64_t)(v281 & 0x7F) << v278;
            if (v281 < 0)
            {
              v278 += 7;
              v183 = v280;
              v14 = v279++ > 8;
              if (v14)
                goto LABEL_346;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v188) = 0;
          }
          break;
        }
LABEL_434:
        *((_DWORD *)this + 10) = v188;
        goto LABEL_20;
      case 0x21u:
        *(_QWORD *)((char *)this + 156) |= 0x40uLL;
        v191 = *((_QWORD *)a2 + 1);
        if (v191 > 0xFFFFFFFFFFFFFFFBLL || v191 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_212;
        *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v191);
LABEL_194:
        v192 = *((_QWORD *)a2 + 1) + 4;
        goto LABEL_195;
      case 0x22u:
        *(_QWORD *)((char *)this + 156) |= 0x10000uLL;
        v193 = *((_QWORD *)a2 + 1);
        v194 = *((_QWORD *)a2 + 2);
        v195 = *(_QWORD *)a2;
        if (v193 <= 0xFFFFFFFFFFFFFFF5 && v193 + 10 <= v194)
        {
          v196 = 0;
          v197 = 0;
          v198 = 0;
          do
          {
            v199 = v193 + 1;
            *((_QWORD *)a2 + 1) = v193 + 1;
            v200 = *(_BYTE *)(v195 + v193);
            v198 |= (unint64_t)(v200 & 0x7F) << v196;
            if ((v200 & 0x80) == 0)
              goto LABEL_438;
            v196 += 7;
            v193 = v199;
            v14 = v197++ > 8;
          }
          while (!v14);
LABEL_353:
          LODWORD(v198) = 0;
          goto LABEL_438;
        }
        v282 = 0;
        v283 = 0;
        v198 = 0;
        if (v194 <= v193)
          v194 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v194 == v193)
          {
            LODWORD(v198) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v284 = v193 + 1;
            v285 = *(_BYTE *)(v195 + v193);
            *((_QWORD *)a2 + 1) = v284;
            v198 |= (unint64_t)(v285 & 0x7F) << v282;
            if (v285 < 0)
            {
              v282 += 7;
              v193 = v284;
              v14 = v283++ > 8;
              if (v14)
                goto LABEL_353;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v198) = 0;
          }
          break;
        }
LABEL_438:
        *((_DWORD *)this + 22) = v198;
        goto LABEL_20;
      case 0x23u:
        *(_QWORD *)((char *)this + 156) |= 0x2000uLL;
        v201 = *((_QWORD *)a2 + 1);
        v202 = *((_QWORD *)a2 + 2);
        v203 = *(_QWORD *)a2;
        if (v201 <= 0xFFFFFFFFFFFFFFF5 && v201 + 10 <= v202)
        {
          v204 = 0;
          v205 = 0;
          v206 = 0;
          do
          {
            v207 = v201 + 1;
            *((_QWORD *)a2 + 1) = v201 + 1;
            v208 = *(_BYTE *)(v203 + v201);
            v206 |= (unint64_t)(v208 & 0x7F) << v204;
            if ((v208 & 0x80) == 0)
              goto LABEL_442;
            v204 += 7;
            v201 = v207;
            v14 = v205++ > 8;
          }
          while (!v14);
LABEL_360:
          LODWORD(v206) = 0;
          goto LABEL_442;
        }
        v286 = 0;
        v287 = 0;
        v206 = 0;
        if (v202 <= v201)
          v202 = *((_QWORD *)a2 + 1);
        break;
      case 0x24u:
        *(_QWORD *)((char *)this + 156) |= 1uLL;
        v209 = *((_QWORD *)a2 + 1);
        if (v209 <= 0xFFFFFFFFFFFFFFF7 && v209 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v209);
LABEL_362:
          v192 = *((_QWORD *)a2 + 1) + 8;
LABEL_195:
          *((_QWORD *)a2 + 1) = v192;
        }
        else
        {
LABEL_212:
          *((_BYTE *)a2 + 24) = 1;
        }
        goto LABEL_20;
      default:
        goto LABEL_19;
    }
    while (1)
    {
      if (v202 == v201)
      {
        LODWORD(v206) = 0;
        *((_BYTE *)a2 + 24) = 1;
        goto LABEL_442;
      }
      v288 = v201 + 1;
      v289 = *(_BYTE *)(v203 + v201);
      *((_QWORD *)a2 + 1) = v288;
      v206 |= (unint64_t)(v289 & 0x7F) << v286;
      if ((v289 & 0x80) == 0)
        break;
      v286 += 7;
      v201 = v288;
      v14 = v287++ > 8;
      if (v14)
        goto LABEL_360;
    }
    if (*((_BYTE *)a2 + 24))
      LODWORD(v206) = 0;
LABEL_442:
    *((_DWORD *)this + 19) = v206;
LABEL_20:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::FallDetectionStateMachine::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = this;
  v4 = *(_QWORD *)(this + 156);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24));
    v4 = *(_QWORD *)(v3 + 156);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_40;
    }
  }
  else if ((v4 & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0)
      goto LABEL_5;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(float *)(v3 + 64));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 60));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 0x800) == 0)
      goto LABEL_8;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x800) == 0)
  {
LABEL_8:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x1000) == 0)
      goto LABEL_10;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x1000) == 0)
  {
LABEL_10:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_11;
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_12;
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(float *)(v3 + 136));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_13;
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(float *)(v3 + 140));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_13:
    if ((v4 & 0x40000) == 0)
      goto LABEL_14;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(float *)(v3 + 132));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x40000) == 0)
  {
LABEL_14:
    if ((v4 & 0x4000) == 0)
      goto LABEL_15;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x4000) == 0)
  {
LABEL_15:
    if ((v4 & 0x20) == 0)
      goto LABEL_16;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(float *)(v3 + 80));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x20) == 0)
  {
LABEL_16:
    if ((v4 & 0x400000000) == 0)
      goto LABEL_17;
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x200000000) == 0)
      goto LABEL_18;
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::write(a2);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x80) == 0)
      goto LABEL_19;
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::write(a2);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x80) == 0)
  {
LABEL_19:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_20;
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_20:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_21;
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_21:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_22;
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x100000000) == 0)
      goto LABEL_23;
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::write(a2);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x20000) == 0)
      goto LABEL_24;
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x20000) == 0)
  {
LABEL_24:
    if ((v4 & 0x200000) == 0)
      goto LABEL_25;
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x200000) == 0)
  {
LABEL_25:
    if ((v4 & 0x400000) == 0)
      goto LABEL_26;
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x400000) == 0)
  {
LABEL_26:
    if ((v4 & 0x80000) == 0)
      goto LABEL_27;
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x80000) == 0)
  {
LABEL_27:
    if ((v4 & 0x8000) == 0)
      goto LABEL_28;
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x8000) == 0)
  {
LABEL_28:
    if ((v4 & 0x800000) == 0)
      goto LABEL_29;
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x800000) == 0)
  {
LABEL_29:
    if ((v4 & 0x100000) == 0)
      goto LABEL_30;
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::write(a2, *(float *)(v3 + 116));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x100000) == 0)
  {
LABEL_30:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_31;
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_32;
    goto LABEL_68;
  }
LABEL_67:
  this = PB::Writer::write(a2, *(float *)(v3 + 128));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_32:
    if ((v4 & 0x10) == 0)
      goto LABEL_33;
    goto LABEL_69;
  }
LABEL_68:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x10) == 0)
  {
LABEL_33:
    if ((v4 & 0x40) == 0)
      goto LABEL_34;
    goto LABEL_70;
  }
LABEL_69:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x40) == 0)
  {
LABEL_34:
    if ((v4 & 0x10000) == 0)
      goto LABEL_35;
    goto LABEL_71;
  }
LABEL_70:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x10000) == 0)
  {
LABEL_35:
    if ((v4 & 0x2000) == 0)
      goto LABEL_36;
    goto LABEL_72;
  }
LABEL_71:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x2000) == 0)
  {
LABEL_36:
    if ((v4 & 1) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 8));
  }
LABEL_72:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_QWORD *)(v3 + 156) & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 8));
  return this;
}

BOOL CMMsl::FallDetectionStateMachine::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 v4;

  v2 = *(_QWORD *)(a1 + 156);
  v3 = *(_QWORD *)(a2 + 156);
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000) != 0)
  {
    if ((v3 & 0x80000000) == 0 || *(_DWORD *)(a1 + 148) != *(_DWORD *)(a2 + 148))
      return 0;
  }
  else if ((v3 & 0x80000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(float *)(a1 + 136) != *(float *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140))
      return 0;
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132))
      return 0;
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(_DWORD *)(a1 + 96) != *(_DWORD *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000) != 0)
  {
    if ((v3 & 0x400000000) == 0 || *(unsigned __int8 *)(a1 + 154) != *(unsigned __int8 *)(a2 + 154))
      return 0;
  }
  else if ((v3 & 0x400000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000) != 0)
  {
    if ((v3 & 0x200000000) == 0 || *(unsigned __int8 *)(a1 + 153) != *(unsigned __int8 *)(a2 + 153))
      return 0;
  }
  else if ((v3 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(_DWORD *)(a1 + 144) != *(_DWORD *)(a2 + 144))
      return 0;
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(_DWORD *)(a1 + 124) != *(_DWORD *)(a2 + 124))
      return 0;
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000) != 0)
  {
    if ((v3 & 0x800000000) == 0 || *(unsigned __int8 *)(a1 + 155) != *(unsigned __int8 *)(a2 + 155))
      return 0;
  }
  else if ((v3 & 0x800000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000) != 0)
  {
    if ((v3 & 0x100000000) == 0 || *(unsigned __int8 *)(a1 + 152) != *(unsigned __int8 *)(a2 + 152))
      return 0;
  }
  else if ((v3 & 0x100000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(_DWORD *)(a1 + 92) != *(_DWORD *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(_DWORD *)(a1 + 108) != *(_DWORD *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(_DWORD *)(a1 + 112) != *(_DWORD *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(_DWORD *)(a1 + 100) != *(_DWORD *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(_DWORD *)(a1 + 84) != *(_DWORD *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(_DWORD *)(a1 + 104) != *(_DWORD *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(_DWORD *)(a1 + 120) != *(_DWORD *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  v4 = (*(_QWORD *)(a2 + 156) & 1) == 0;
  if ((v2 & 1) != 0)
    return (v3 & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  return v4;
}

uint64_t CMMsl::FallDetectionStateMachine::hash_value(CMMsl::FallDetectionStateMachine *this)
{
  uint64_t v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v1 = *(_QWORD *)((char *)this + 156);
  if ((v1 & 4) != 0)
  {
    if (*((double *)this + 3) == 0.0)
      v2 = 0;
    else
      v2 = *((_QWORD *)this + 3);
    if ((v1 & 8) != 0)
    {
LABEL_3:
      v52 = *((_QWORD *)this + 4);
      if ((v1 & 2) != 0)
        goto LABEL_4;
      goto LABEL_68;
    }
  }
  else
  {
    v2 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_3;
  }
  v52 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_4:
    v51 = *((_QWORD *)this + 2);
    if ((v1 & 0x400) != 0)
      goto LABEL_5;
LABEL_69:
    v50 = 0;
    if ((v1 & 0x200) != 0)
      goto LABEL_8;
LABEL_70:
    v49 = 0;
    if ((v1 & 0x100) != 0)
      goto LABEL_11;
LABEL_71:
    v48 = 0;
    if ((v1 & 0x800) != 0)
      goto LABEL_14;
    goto LABEL_72;
  }
LABEL_68:
  v51 = 0;
  if ((v1 & 0x400) == 0)
    goto LABEL_69;
LABEL_5:
  v3 = *((float *)this + 16);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  v50 = v4;
  if ((v1 & 0x200) == 0)
    goto LABEL_70;
LABEL_8:
  v5 = *((float *)this + 15);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  v49 = v6;
  if ((v1 & 0x100) == 0)
    goto LABEL_71;
LABEL_11:
  v7 = *((float *)this + 14);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  v48 = v8;
  if ((v1 & 0x800) != 0)
  {
LABEL_14:
    v47 = *((int *)this + 17);
    if ((v1 & 0x80000000) != 0)
      goto LABEL_15;
    goto LABEL_73;
  }
LABEL_72:
  v47 = 0;
  if ((v1 & 0x80000000) != 0)
  {
LABEL_15:
    v46 = *((int *)this + 37);
    if ((v1 & 0x1000) != 0)
      goto LABEL_16;
    goto LABEL_74;
  }
LABEL_73:
  v46 = 0;
  if ((v1 & 0x1000) != 0)
  {
LABEL_16:
    v45 = *((int *)this + 18);
    if ((v1 & 0x10000000) != 0)
      goto LABEL_17;
LABEL_75:
    v44 = 0;
    if ((v1 & 0x20000000) != 0)
      goto LABEL_20;
LABEL_76:
    v12 = 0;
    if ((v1 & 0x8000000) != 0)
      goto LABEL_24;
LABEL_77:
    v14 = 0;
    if ((v1 & 0x40000) != 0)
      goto LABEL_28;
    goto LABEL_78;
  }
LABEL_74:
  v45 = 0;
  if ((v1 & 0x10000000) == 0)
    goto LABEL_75;
LABEL_17:
  v9 = *((float *)this + 34);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  v44 = v10;
  if ((v1 & 0x20000000) == 0)
    goto LABEL_76;
LABEL_20:
  v11 = *((float *)this + 35);
  if (v11 == 0.0)
    v12 = 0;
  else
    v12 = LODWORD(v11);
  if ((v1 & 0x8000000) == 0)
    goto LABEL_77;
LABEL_24:
  v13 = *((float *)this + 33);
  if (v13 == 0.0)
    v14 = 0;
  else
    v14 = LODWORD(v13);
  if ((v1 & 0x40000) != 0)
  {
LABEL_28:
    v15 = *((int *)this + 24);
    if ((v1 & 0x4000) != 0)
      goto LABEL_29;
LABEL_79:
    v17 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_33;
    goto LABEL_80;
  }
LABEL_78:
  v15 = 0;
  if ((v1 & 0x4000) == 0)
    goto LABEL_79;
LABEL_29:
  v16 = *((float *)this + 20);
  if (v16 == 0.0)
    v17 = 0;
  else
    v17 = LODWORD(v16);
  if ((v1 & 0x20) != 0)
  {
LABEL_33:
    v18 = *((int *)this + 11);
    if ((v1 & 0x400000000) != 0)
      goto LABEL_34;
    goto LABEL_81;
  }
LABEL_80:
  v18 = 0;
  if ((v1 & 0x400000000) != 0)
  {
LABEL_34:
    v19 = *((unsigned __int8 *)this + 154);
    if ((v1 & 0x200000000) != 0)
      goto LABEL_35;
    goto LABEL_82;
  }
LABEL_81:
  v19 = 0;
  if ((v1 & 0x200000000) != 0)
  {
LABEL_35:
    v20 = *((unsigned __int8 *)this + 153);
    if ((v1 & 0x80) != 0)
      goto LABEL_36;
    goto LABEL_83;
  }
LABEL_82:
  v20 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_36:
    v21 = *((int *)this + 13);
    if ((v1 & 0x40000000) != 0)
      goto LABEL_37;
    goto LABEL_84;
  }
LABEL_83:
  v21 = 0;
  if ((v1 & 0x40000000) != 0)
  {
LABEL_37:
    v22 = *((int *)this + 36);
    if ((v1 & 0x2000000) != 0)
      goto LABEL_38;
    goto LABEL_85;
  }
LABEL_84:
  v22 = 0;
  if ((v1 & 0x2000000) != 0)
  {
LABEL_38:
    v23 = *((int *)this + 31);
    if ((v1 & 0x800000000) != 0)
      goto LABEL_39;
    goto LABEL_86;
  }
LABEL_85:
  v23 = 0;
  if ((v1 & 0x800000000) != 0)
  {
LABEL_39:
    v24 = *((unsigned __int8 *)this + 155);
    if ((v1 & 0x100000000) != 0)
      goto LABEL_40;
    goto LABEL_87;
  }
LABEL_86:
  v24 = 0;
  if ((v1 & 0x100000000) != 0)
  {
LABEL_40:
    v25 = *((unsigned __int8 *)this + 152);
    if ((v1 & 0x20000) != 0)
      goto LABEL_41;
    goto LABEL_88;
  }
LABEL_87:
  v25 = 0;
  if ((v1 & 0x20000) != 0)
  {
LABEL_41:
    v26 = *((int *)this + 23);
    if ((v1 & 0x200000) != 0)
      goto LABEL_42;
    goto LABEL_89;
  }
LABEL_88:
  v26 = 0;
  if ((v1 & 0x200000) != 0)
  {
LABEL_42:
    v27 = *((int *)this + 27);
    if ((v1 & 0x400000) != 0)
      goto LABEL_43;
    goto LABEL_90;
  }
LABEL_89:
  v27 = 0;
  if ((v1 & 0x400000) != 0)
  {
LABEL_43:
    v28 = *((int *)this + 28);
    if ((v1 & 0x80000) != 0)
      goto LABEL_44;
    goto LABEL_91;
  }
LABEL_90:
  v28 = 0;
  if ((v1 & 0x80000) != 0)
  {
LABEL_44:
    v29 = *((int *)this + 25);
    if ((v1 & 0x8000) != 0)
      goto LABEL_45;
    goto LABEL_92;
  }
LABEL_91:
  v29 = 0;
  if ((v1 & 0x8000) != 0)
  {
LABEL_45:
    v30 = *((int *)this + 21);
    if ((v1 & 0x800000) != 0)
      goto LABEL_46;
LABEL_93:
    v32 = 0;
    if ((v1 & 0x100000) != 0)
      goto LABEL_49;
    goto LABEL_94;
  }
LABEL_92:
  v30 = 0;
  if ((v1 & 0x800000) == 0)
    goto LABEL_93;
LABEL_46:
  v31 = *((float *)this + 29);
  v32 = LODWORD(v31);
  if (v31 == 0.0)
    v32 = 0;
  if ((v1 & 0x100000) != 0)
  {
LABEL_49:
    v33 = *((int *)this + 26);
    if ((v1 & 0x4000000) != 0)
      goto LABEL_50;
LABEL_95:
    v35 = 0;
    if ((v1 & 0x1000000) != 0)
      goto LABEL_53;
    goto LABEL_96;
  }
LABEL_94:
  v33 = 0;
  if ((v1 & 0x4000000) == 0)
    goto LABEL_95;
LABEL_50:
  v34 = *((float *)this + 32);
  v35 = LODWORD(v34);
  if (v34 == 0.0)
    v35 = 0;
  if ((v1 & 0x1000000) != 0)
  {
LABEL_53:
    v36 = *((unsigned int *)this + 30);
    if ((v1 & 0x10) != 0)
      goto LABEL_54;
    goto LABEL_97;
  }
LABEL_96:
  v36 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_54:
    v37 = *((unsigned int *)this + 10);
    if ((v1 & 0x40) != 0)
      goto LABEL_55;
LABEL_98:
    v39 = 0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_58;
    goto LABEL_99;
  }
LABEL_97:
  v37 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_98;
LABEL_55:
  v38 = *((float *)this + 12);
  v39 = LODWORD(v38);
  if (v38 == 0.0)
    v39 = 0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_58:
    v40 = *((int *)this + 22);
    if ((v1 & 0x2000) != 0)
      goto LABEL_59;
    goto LABEL_100;
  }
LABEL_99:
  v40 = 0;
  if ((v1 & 0x2000) != 0)
  {
LABEL_59:
    v41 = *((int *)this + 19);
    if ((v1 & 1) != 0)
      goto LABEL_60;
LABEL_101:
    v42 = 0.0;
    return v52 ^ v2 ^ v51 ^ v50 ^ v49 ^ v48 ^ v47 ^ v46 ^ v45 ^ v44 ^ v12 ^ v14 ^ v15 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v30 ^ v32 ^ v33 ^ v35 ^ v36 ^ v37 ^ v39 ^ v40 ^ v41 ^ *(_QWORD *)&v42;
  }
LABEL_100:
  v41 = 0;
  if ((v1 & 1) == 0)
    goto LABEL_101;
LABEL_60:
  v42 = *((double *)this + 1);
  if (v42 == 0.0)
    v42 = 0.0;
  return v52 ^ v2 ^ v51 ^ v50 ^ v49 ^ v48 ^ v47 ^ v46 ^ v45 ^ v44 ^ v12 ^ v14 ^ v15 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v30 ^ v32 ^ v33 ^ v35 ^ v36 ^ v37 ^ v39 ^ v40 ^ v41 ^ *(_QWORD *)&v42;
}

double CMMsl::FallDetectionWristStateReplay::FallDetectionWristStateReplay(CMMsl::FallDetectionWristStateReplay *this)
{
  double result;

  *(_QWORD *)this = &off_25135D788;
  *((_DWORD *)this + 99) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((_QWORD *)this + 27) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_25135D788;
  *((_DWORD *)this + 99) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((_QWORD *)this + 27) = 0;
  return result;
}

void CMMsl::FallDetectionWristStateReplay::~FallDetectionWristStateReplay(CMMsl::FallDetectionWristStateReplay *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  *(_QWORD *)this = &off_25135D788;
  v2 = (void *)*((_QWORD *)this + 25);
  if (v2)
  {
    *((_QWORD *)this + 26) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 22);
  if (v3)
  {
    *((_QWORD *)this + 23) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 19);
  if (v4)
  {
    *((_QWORD *)this + 20) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 16);
  if (v5)
  {
    *((_QWORD *)this + 17) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 13);
  if (v6)
  {
    *((_QWORD *)this + 14) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 10);
  if (v7)
  {
    *((_QWORD *)this + 11) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 7);
  if (v8)
  {
    *((_QWORD *)this + 8) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 4);
  if (v9)
  {
    *((_QWORD *)this + 5) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 1);
  if (v10)
  {
    *((_QWORD *)this + 2) = v10;
    operator delete(v10);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::FallDetectionWristStateReplay::~FallDetectionWristStateReplay(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::FallDetectionWristStateReplay *CMMsl::FallDetectionWristStateReplay::FallDetectionWristStateReplay(CMMsl::FallDetectionWristStateReplay *this, const CMMsl::FallDetectionWristStateReplay *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  int v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;

  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (_QWORD *)((char *)this + 8);
  *(_OWORD *)((char *)this + 56) = 0u;
  v5 = (_QWORD *)((char *)this + 56);
  *(_OWORD *)((char *)this + 104) = 0u;
  v6 = (_QWORD *)((char *)this + 104);
  *(_OWORD *)((char *)this + 152) = 0u;
  v7 = (_QWORD *)((char *)this + 152);
  *(_OWORD *)((char *)this + 200) = 0u;
  v8 = (_QWORD *)((char *)this + 200);
  *(_QWORD *)this = &off_25135D788;
  *((_DWORD *)this + 99) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_QWORD *)this + 27) = 0;
  v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x80000) != 0)
  {
    v11 = *((_QWORD *)a2 + 47);
    v10 = 0x80000;
    *((_DWORD *)this + 99) = 0x80000;
    *((_QWORD *)this + 47) = v11;
    v9 = *((_DWORD *)a2 + 99);
    if ((v9 & 0x1000000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v10 = 0;
  if ((v9 & 0x1000000) != 0)
  {
LABEL_5:
    v12 = *((_BYTE *)a2 + 388);
    v10 |= 0x1000000u;
    *((_DWORD *)this + 99) = v10;
    *((_BYTE *)this + 388) = v12;
    v9 = *((_DWORD *)a2 + 99);
  }
LABEL_6:
  if ((v9 & 1) != 0)
  {
    v15 = *((_QWORD *)a2 + 28);
    v10 |= 1u;
    *((_DWORD *)this + 99) = v10;
    *((_QWORD *)this + 28) = v15;
    v9 = *((_DWORD *)a2 + 99);
    if ((v9 & 0x40000) == 0)
    {
LABEL_8:
      if ((v9 & 2) == 0)
        goto LABEL_9;
      goto LABEL_42;
    }
  }
  else if ((v9 & 0x40000) == 0)
  {
    goto LABEL_8;
  }
  v16 = *((_QWORD *)a2 + 46);
  v10 |= 0x40000u;
  *((_DWORD *)this + 99) = v10;
  *((_QWORD *)this + 46) = v16;
  v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 2) == 0)
  {
LABEL_9:
    if ((v9 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_43;
  }
LABEL_42:
  v17 = *((_QWORD *)a2 + 29);
  v10 |= 2u;
  *((_DWORD *)this + 99) = v10;
  *((_QWORD *)this + 29) = v17;
  v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x10) == 0)
  {
LABEL_10:
    if ((v9 & 0x20) == 0)
      goto LABEL_11;
    goto LABEL_44;
  }
LABEL_43:
  v18 = *((_QWORD *)a2 + 32);
  v10 |= 0x10u;
  *((_DWORD *)this + 99) = v10;
  *((_QWORD *)this + 32) = v18;
  v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x20) == 0)
  {
LABEL_11:
    if ((v9 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_45;
  }
LABEL_44:
  v19 = *((_QWORD *)a2 + 33);
  v10 |= 0x20u;
  *((_DWORD *)this + 99) = v10;
  *((_QWORD *)this + 33) = v19;
  v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x100) == 0)
  {
LABEL_12:
    if ((v9 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_46;
  }
LABEL_45:
  v20 = *((_QWORD *)a2 + 36);
  v10 |= 0x100u;
  *((_DWORD *)this + 99) = v10;
  *((_QWORD *)this + 36) = v20;
  v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x400) == 0)
  {
LABEL_13:
    if ((v9 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_47;
  }
LABEL_46:
  v21 = *((_QWORD *)a2 + 38);
  v10 |= 0x400u;
  *((_DWORD *)this + 99) = v10;
  *((_QWORD *)this + 38) = v21;
  v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x200) == 0)
  {
LABEL_14:
    if ((v9 & 0x80) == 0)
      goto LABEL_15;
    goto LABEL_48;
  }
LABEL_47:
  v22 = *((_QWORD *)a2 + 37);
  v10 |= 0x200u;
  *((_DWORD *)this + 99) = v10;
  *((_QWORD *)this + 37) = v22;
  v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x80) == 0)
  {
LABEL_15:
    if ((v9 & 0x40) == 0)
      goto LABEL_16;
    goto LABEL_49;
  }
LABEL_48:
  v23 = *((_QWORD *)a2 + 35);
  v10 |= 0x80u;
  *((_DWORD *)this + 99) = v10;
  *((_QWORD *)this + 35) = v23;
  v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x40) == 0)
  {
LABEL_16:
    if ((v9 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_50;
  }
LABEL_49:
  v24 = *((_QWORD *)a2 + 34);
  v10 |= 0x40u;
  *((_DWORD *)this + 99) = v10;
  *((_QWORD *)this + 34) = v24;
  v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x1000) == 0)
  {
LABEL_17:
    if ((v9 & 0x800) == 0)
      goto LABEL_18;
    goto LABEL_51;
  }
LABEL_50:
  v25 = *((_QWORD *)a2 + 40);
  v10 |= 0x1000u;
  *((_DWORD *)this + 99) = v10;
  *((_QWORD *)this + 40) = v25;
  v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x800) == 0)
  {
LABEL_18:
    if ((v9 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_52;
  }
LABEL_51:
  v26 = *((_QWORD *)a2 + 39);
  v10 |= 0x800u;
  *((_DWORD *)this + 99) = v10;
  *((_QWORD *)this + 39) = v26;
  v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x20000) == 0)
  {
LABEL_19:
    if ((v9 & 0x10000) == 0)
      goto LABEL_20;
    goto LABEL_53;
  }
LABEL_52:
  v27 = *((_QWORD *)a2 + 45);
  v10 |= 0x20000u;
  *((_DWORD *)this + 99) = v10;
  *((_QWORD *)this + 45) = v27;
  v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x10000) == 0)
  {
LABEL_20:
    if ((v9 & 0x8000) == 0)
      goto LABEL_21;
    goto LABEL_54;
  }
LABEL_53:
  v28 = *((_QWORD *)a2 + 44);
  v10 |= 0x10000u;
  *((_DWORD *)this + 99) = v10;
  *((_QWORD *)this + 44) = v28;
  v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x8000) == 0)
  {
LABEL_21:
    if ((v9 & 0x4000) == 0)
      goto LABEL_22;
    goto LABEL_55;
  }
LABEL_54:
  v29 = *((_QWORD *)a2 + 43);
  v10 |= 0x8000u;
  *((_DWORD *)this + 99) = v10;
  *((_QWORD *)this + 43) = v29;
  v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x4000) == 0)
  {
LABEL_22:
    if ((v9 & 0x2000) == 0)
      goto LABEL_23;
    goto LABEL_56;
  }
LABEL_55:
  v30 = *((_QWORD *)a2 + 42);
  v10 |= 0x4000u;
  *((_DWORD *)this + 99) = v10;
  *((_QWORD *)this + 42) = v30;
  v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x2000) == 0)
  {
LABEL_23:
    if ((v9 & 0x80000000) == 0)
      goto LABEL_24;
    goto LABEL_57;
  }
LABEL_56:
  v31 = *((_QWORD *)a2 + 41);
  v10 |= 0x2000u;
  *((_DWORD *)this + 99) = v10;
  *((_QWORD *)this + 41) = v31;
  v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x80000000) == 0)
  {
LABEL_24:
    if ((v9 & 4) == 0)
      goto LABEL_25;
    goto LABEL_58;
  }
LABEL_57:
  v32 = *((_BYTE *)a2 + 395);
  v10 |= 0x80000000;
  *((_DWORD *)this + 99) = v10;
  *((_BYTE *)this + 395) = v32;
  v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 4) == 0)
  {
LABEL_25:
    if ((v9 & 8) == 0)
      goto LABEL_26;
    goto LABEL_59;
  }
LABEL_58:
  v33 = *((_QWORD *)a2 + 30);
  v10 |= 4u;
  *((_DWORD *)this + 99) = v10;
  *((_QWORD *)this + 30) = v33;
  v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 8) == 0)
  {
LABEL_26:
    if ((v9 & 0x100000) == 0)
      goto LABEL_27;
    goto LABEL_60;
  }
LABEL_59:
  v34 = *((_QWORD *)a2 + 31);
  v10 |= 8u;
  *((_DWORD *)this + 99) = v10;
  *((_QWORD *)this + 31) = v34;
  v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x100000) == 0)
  {
LABEL_27:
    if ((v9 & 0x400000) == 0)
      goto LABEL_28;
    goto LABEL_61;
  }
LABEL_60:
  v35 = *((_BYTE *)a2 + 384);
  v10 |= 0x100000u;
  *((_DWORD *)this + 99) = v10;
  *((_BYTE *)this + 384) = v35;
  v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x400000) == 0)
  {
LABEL_28:
    if ((v9 & 0x40000000) == 0)
      goto LABEL_29;
    goto LABEL_62;
  }
LABEL_61:
  v36 = *((_BYTE *)a2 + 386);
  v10 |= 0x400000u;
  *((_DWORD *)this + 99) = v10;
  *((_BYTE *)this + 386) = v36;
  v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x40000000) == 0)
  {
LABEL_29:
    if ((v9 & 0x200000) == 0)
      goto LABEL_30;
    goto LABEL_63;
  }
LABEL_62:
  v37 = *((_BYTE *)a2 + 394);
  v10 |= 0x40000000u;
  *((_DWORD *)this + 99) = v10;
  *((_BYTE *)this + 394) = v37;
  v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x200000) == 0)
  {
LABEL_30:
    if ((v9 & 0x800000) == 0)
      goto LABEL_31;
    goto LABEL_64;
  }
LABEL_63:
  v38 = *((_BYTE *)a2 + 385);
  v10 |= 0x200000u;
  *((_DWORD *)this + 99) = v10;
  *((_BYTE *)this + 385) = v38;
  v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x800000) == 0)
  {
LABEL_31:
    if ((v9 & 0x10000000) == 0)
      goto LABEL_32;
    goto LABEL_65;
  }
LABEL_64:
  v39 = *((_BYTE *)a2 + 387);
  v10 |= 0x800000u;
  *((_DWORD *)this + 99) = v10;
  *((_BYTE *)this + 387) = v39;
  v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x10000000) == 0)
  {
LABEL_32:
    if ((v9 & 0x8000000) == 0)
      goto LABEL_33;
    goto LABEL_66;
  }
LABEL_65:
  v40 = *((_BYTE *)a2 + 392);
  v10 |= 0x10000000u;
  *((_DWORD *)this + 99) = v10;
  *((_BYTE *)this + 392) = v40;
  v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x8000000) == 0)
  {
LABEL_33:
    if ((v9 & 0x20000000) == 0)
      goto LABEL_34;
    goto LABEL_67;
  }
LABEL_66:
  v41 = *((_BYTE *)a2 + 391);
  v10 |= 0x8000000u;
  *((_DWORD *)this + 99) = v10;
  *((_BYTE *)this + 391) = v41;
  v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x20000000) == 0)
  {
LABEL_34:
    if ((v9 & 0x2000000) == 0)
      goto LABEL_35;
    goto LABEL_68;
  }
LABEL_67:
  v42 = *((_BYTE *)a2 + 393);
  v10 |= 0x20000000u;
  *((_DWORD *)this + 99) = v10;
  *((_BYTE *)this + 393) = v42;
  v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x2000000) == 0)
  {
LABEL_35:
    if ((v9 & 0x4000000) == 0)
      goto LABEL_37;
    goto LABEL_36;
  }
LABEL_68:
  v43 = *((_BYTE *)a2 + 389);
  v10 |= 0x2000000u;
  *((_DWORD *)this + 99) = v10;
  *((_BYTE *)this + 389) = v43;
  if ((*((_DWORD *)a2 + 99) & 0x4000000) != 0)
  {
LABEL_36:
    v13 = *((_BYTE *)a2 + 390);
    *((_DWORD *)this + 99) = v10 | 0x4000000;
    *((_BYTE *)this + 390) = v13;
  }
LABEL_37:
  if (this != a2)
  {
    sub_2429111C4((_QWORD *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3);
    sub_2429111C4(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
    sub_2429111C4(v5, *((char **)a2 + 7), *((char **)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 3);
    sub_2429111C4(v6, *((char **)a2 + 13), *((char **)a2 + 14), (uint64_t)(*((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13)) >> 3);
    sub_2429111C4((_QWORD *)this + 10, *((char **)a2 + 10), *((char **)a2 + 11), (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 3);
    sub_2429111C4((_QWORD *)this + 16, *((char **)a2 + 16), *((char **)a2 + 17), (uint64_t)(*((_QWORD *)a2 + 17) - *((_QWORD *)a2 + 16)) >> 3);
    sub_2429111C4((_QWORD *)this + 22, *((char **)a2 + 22), *((char **)a2 + 23), (uint64_t)(*((_QWORD *)a2 + 23) - *((_QWORD *)a2 + 22)) >> 3);
    sub_2429111C4(v7, *((char **)a2 + 19), *((char **)a2 + 20), (uint64_t)(*((_QWORD *)a2 + 20) - *((_QWORD *)a2 + 19)) >> 3);
    sub_2429111C4(v8, *((char **)a2 + 25), *((char **)a2 + 26), (uint64_t)(*((_QWORD *)a2 + 26) - *((_QWORD *)a2 + 25)) >> 3);
  }
  return this;
}

CMMsl *CMMsl::FallDetectionWristStateReplay::operator=(CMMsl *a1, const CMMsl::FallDetectionWristStateReplay *a2)
{
  CMMsl::FallDetectionWristStateReplay *v3;
  _BYTE v5[400];

  if (a1 != a2)
  {
    CMMsl::FallDetectionWristStateReplay::FallDetectionWristStateReplay((CMMsl::FallDetectionWristStateReplay *)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallDetectionWristStateReplay *)v5, v3);
    CMMsl::FallDetectionWristStateReplay::~FallDetectionWristStateReplay((CMMsl::FallDetectionWristStateReplay *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::FallDetectionWristStateReplay *a2, CMMsl::FallDetectionWristStateReplay *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v3 = *((_DWORD *)this + 99);
  *((_DWORD *)this + 99) = *((_DWORD *)a2 + 99);
  *((_DWORD *)a2 + 99) = v3;
  v4 = *((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = *((_QWORD *)a2 + 47);
  *((_QWORD *)a2 + 47) = v4;
  LOBYTE(v4) = *((_BYTE *)this + 388);
  *((_BYTE *)this + 388) = *((_BYTE *)a2 + 388);
  *((_BYTE *)a2 + 388) = v4;
  v5 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = *((_QWORD *)a2 + 28);
  *((_QWORD *)a2 + 28) = v5;
  v6 = *((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = *((_QWORD *)a2 + 46);
  *((_QWORD *)a2 + 46) = v6;
  v7 = *((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = *((_QWORD *)a2 + 29);
  *((_QWORD *)a2 + 29) = v7;
  v8 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = *((_QWORD *)a2 + 32);
  *((_QWORD *)a2 + 32) = v8;
  v9 = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = *((_QWORD *)a2 + 33);
  *((_QWORD *)a2 + 33) = v9;
  v10 = *((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = *((_QWORD *)a2 + 36);
  *((_QWORD *)a2 + 36) = v10;
  v11 = *((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = *((_QWORD *)a2 + 38);
  *((_QWORD *)a2 + 38) = v11;
  v12 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = *((_QWORD *)a2 + 37);
  *((_QWORD *)a2 + 37) = v12;
  v13 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = *((_QWORD *)a2 + 35);
  *((_QWORD *)a2 + 35) = v13;
  v14 = *((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = *((_QWORD *)a2 + 34);
  *((_QWORD *)a2 + 34) = v14;
  v15 = *((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = *((_QWORD *)a2 + 40);
  *((_QWORD *)a2 + 40) = v15;
  v16 = *((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = *((_QWORD *)a2 + 39);
  *((_QWORD *)a2 + 39) = v16;
  v17 = *((_QWORD *)this + 45);
  *((_QWORD *)this + 45) = *((_QWORD *)a2 + 45);
  *((_QWORD *)a2 + 45) = v17;
  v18 = *((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = *((_QWORD *)a2 + 44);
  *((_QWORD *)a2 + 44) = v18;
  v19 = *((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = *((_QWORD *)a2 + 43);
  *((_QWORD *)a2 + 43) = v19;
  v20 = *((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = *((_QWORD *)a2 + 42);
  *((_QWORD *)a2 + 42) = v20;
  v21 = *((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = *((_QWORD *)a2 + 41);
  *((_QWORD *)a2 + 41) = v21;
  LOBYTE(v21) = *((_BYTE *)this + 395);
  *((_BYTE *)this + 395) = *((_BYTE *)a2 + 395);
  *((_BYTE *)a2 + 395) = v21;
  v22 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = *((_QWORD *)a2 + 30);
  *((_QWORD *)a2 + 30) = v22;
  result = *((double *)this + 31);
  *((_QWORD *)this + 31) = *((_QWORD *)a2 + 31);
  *((double *)a2 + 31) = result;
  LOBYTE(v21) = *((_BYTE *)this + 384);
  *((_BYTE *)this + 384) = *((_BYTE *)a2 + 384);
  *((_BYTE *)a2 + 384) = v21;
  LOBYTE(v21) = *((_BYTE *)this + 386);
  *((_BYTE *)this + 386) = *((_BYTE *)a2 + 386);
  *((_BYTE *)a2 + 386) = v21;
  LOBYTE(v21) = *((_BYTE *)this + 394);
  *((_BYTE *)this + 394) = *((_BYTE *)a2 + 394);
  *((_BYTE *)a2 + 394) = v21;
  LOBYTE(v21) = *((_BYTE *)this + 385);
  *((_BYTE *)this + 385) = *((_BYTE *)a2 + 385);
  *((_BYTE *)a2 + 385) = v21;
  LOBYTE(v21) = *((_BYTE *)this + 387);
  *((_BYTE *)this + 387) = *((_BYTE *)a2 + 387);
  *((_BYTE *)a2 + 387) = v21;
  LOBYTE(v21) = *((_BYTE *)this + 392);
  *((_BYTE *)this + 392) = *((_BYTE *)a2 + 392);
  *((_BYTE *)a2 + 392) = v21;
  LOBYTE(v21) = *((_BYTE *)this + 391);
  *((_BYTE *)this + 391) = *((_BYTE *)a2 + 391);
  *((_BYTE *)a2 + 391) = v21;
  LOBYTE(v21) = *((_BYTE *)this + 393);
  *((_BYTE *)this + 393) = *((_BYTE *)a2 + 393);
  *((_BYTE *)a2 + 393) = v21;
  LOBYTE(v21) = *((_BYTE *)this + 389);
  *((_BYTE *)this + 389) = *((_BYTE *)a2 + 389);
  *((_BYTE *)a2 + 389) = v21;
  LOBYTE(v21) = *((_BYTE *)this + 390);
  *((_BYTE *)this + 390) = *((_BYTE *)a2 + 390);
  *((_BYTE *)a2 + 390) = v21;
  v24 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v24;
  v25 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v25;
  v26 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v26;
  v27 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v27;
  v28 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v28;
  v29 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v29;
  v30 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v30;
  v31 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v31;
  v32 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v32;
  v33 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v33;
  v34 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v34;
  v35 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v35;
  v36 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v36;
  v37 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v37;
  v38 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v38;
  v39 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v39;
  v40 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v40;
  v41 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v41;
  v42 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = *((_QWORD *)a2 + 22);
  *((_QWORD *)a2 + 22) = v42;
  v43 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = *((_QWORD *)a2 + 23);
  *((_QWORD *)a2 + 23) = v43;
  v44 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = *((_QWORD *)a2 + 24);
  *((_QWORD *)a2 + 24) = v44;
  v45 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 19) = v45;
  v46 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = *((_QWORD *)a2 + 20);
  *((_QWORD *)a2 + 20) = v46;
  v47 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = *((_QWORD *)a2 + 21);
  *((_QWORD *)a2 + 21) = v47;
  v48 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = *((_QWORD *)a2 + 25);
  *((_QWORD *)a2 + 25) = v48;
  v49 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = *((_QWORD *)a2 + 26);
  *((_QWORD *)a2 + 26) = v49;
  v50 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = *((_QWORD *)a2 + 27);
  *((_QWORD *)a2 + 27) = v50;
  return result;
}

uint64_t CMMsl::FallDetectionWristStateReplay::FallDetectionWristStateReplay(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_25135D788;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 396) = *(_DWORD *)(a2 + 396);
  *(_DWORD *)(a2 + 396) = 0;
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  *(_BYTE *)(a1 + 388) = *(_BYTE *)(a2 + 388);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_BYTE *)(a1 + 395) = *(_BYTE *)(a2 + 395);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_BYTE *)(a1 + 384) = *(_BYTE *)(a2 + 384);
  *(_BYTE *)(a1 + 386) = *(_BYTE *)(a2 + 386);
  *(_BYTE *)(a1 + 394) = *(_BYTE *)(a2 + 394);
  *(_BYTE *)(a1 + 385) = *(_BYTE *)(a2 + 385);
  *(_BYTE *)(a1 + 387) = *(_BYTE *)(a2 + 387);
  *(_BYTE *)(a1 + 392) = *(_BYTE *)(a2 + 392);
  *(_BYTE *)(a1 + 391) = *(_BYTE *)(a2 + 391);
  *(_BYTE *)(a1 + 393) = *(_BYTE *)(a2 + 393);
  *(_BYTE *)(a1 + 389) = *(_BYTE *)(a2 + 389);
  *(_BYTE *)(a1 + 390) = *(_BYTE *)(a2 + 390);
  sub_242911330(a1 + 32, (__n128 *)(a2 + 32));
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  sub_242911330(a1 + 56, (__n128 *)(a2 + 56));
  sub_242911330(a1 + 104, (__n128 *)(a2 + 104));
  sub_242911330(a1 + 80, (__n128 *)(a2 + 80));
  sub_242911330(a1 + 128, (__n128 *)(a2 + 128));
  sub_242911330(a1 + 176, (__n128 *)(a2 + 176));
  sub_242911330(a1 + 152, (__n128 *)(a2 + 152));
  sub_242911330(a1 + 200, (__n128 *)(a2 + 200));
  return a1;
}

CMMsl *CMMsl::FallDetectionWristStateReplay::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::FallDetectionWristStateReplay *v3;
  _BYTE v5[400];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::FallDetectionWristStateReplay::FallDetectionWristStateReplay((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallDetectionWristStateReplay *)v5, v3);
    CMMsl::FallDetectionWristStateReplay::~FallDetectionWristStateReplay((CMMsl::FallDetectionWristStateReplay *)v5);
  }
  return a1;
}

uint64_t CMMsl::FallDetectionWristStateReplay::formatText(CMMsl::FallDetectionWristStateReplay *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;
  double *v6;
  double *v7;
  double v8;
  double *v9;
  double *v10;
  double v11;
  double *v12;
  double *v13;
  double v14;
  int v15;
  double *v16;
  double *v17;
  double v18;
  double *v19;
  double *v20;
  double v21;
  double *v22;
  double *v23;
  double v24;
  int v25;
  double *v26;
  double *v27;
  double v28;
  double *v29;
  double *v30;
  double v31;
  double *v32;
  double *v33;
  double v34;
  int v35;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 99);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "absoluteTimestampOfImpact", *((double *)this + 28));
    v5 = *((_DWORD *)this + 99);
    if ((v5 & 0x100000) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_60;
    }
  }
  else if ((v5 & 0x100000) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "anyOffWristAfterImpact");
  v5 = *((_DWORD *)this + 99);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x200000) == 0)
      goto LABEL_5;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "aopTimestampOfImpact");
  v5 = *((_DWORD *)this + 99);
  if ((v5 & 0x200000) == 0)
  {
LABEL_5:
    if ((v5 & 0x400000) == 0)
      goto LABEL_6;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "continuousLockedBeforeImpact");
  v5 = *((_DWORD *)this + 99);
  if ((v5 & 0x400000) == 0)
  {
LABEL_6:
    if ((v5 & 0x800000) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "continuousOffWristBeforeImpact");
  if ((*((_DWORD *)this + 99) & 0x800000) != 0)
LABEL_7:
    PB::TextFormatter::format(a2, "continuousStaticAndVerticalBeforeImpact");
LABEL_8:
  v6 = (double *)*((_QWORD *)this + 1);
  v7 = (double *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(a2, "coreMotionWristStateHistoryEndimestamp", v8);
  }
  v9 = (double *)*((_QWORD *)this + 4);
  v10 = (double *)*((_QWORD *)this + 5);
  while (v9 != v10)
  {
    v11 = *v9++;
    PB::TextFormatter::format(a2, "coreMotionWristStateHistoryStartTimestamp", v11);
  }
  v12 = (double *)*((_QWORD *)this + 7);
  v13 = (double *)*((_QWORD *)this + 8);
  while (v12 != v13)
  {
    v14 = *v12++;
    PB::TextFormatter::format(a2, "coreMotionWristStateHistoryState", v14);
  }
  v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x1000000) != 0)
  {
    PB::TextFormatter::format(a2, "gatingEnabled");
    v15 = *((_DWORD *)this + 99);
    if ((v15 & 0x2000000) == 0)
    {
LABEL_16:
      if ((v15 & 0x4000000) == 0)
        goto LABEL_17;
      goto LABEL_66;
    }
  }
  else if ((v15 & 0x2000000) == 0)
  {
    goto LABEL_16;
  }
  PB::TextFormatter::format(a2, "gatingLockedNoMotionPreImpact");
  v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x4000000) == 0)
  {
LABEL_17:
    if ((v15 & 0x8000000) == 0)
      goto LABEL_18;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "gatingMotionPreImpact");
  v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x8000000) == 0)
  {
LABEL_18:
    if ((v15 & 0x10000000) == 0)
      goto LABEL_19;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "gatingOffWristPostImpact");
  v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x10000000) == 0)
  {
LABEL_19:
    if ((v15 & 0x20000000) == 0)
      goto LABEL_20;
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(a2, "gatingOffWristPreImpact");
  v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x20000000) == 0)
  {
LABEL_20:
    if ((v15 & 0x40000000) == 0)
      goto LABEL_21;
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(a2, "gatingOnCharger");
  v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x40000000) == 0)
  {
LABEL_21:
    if ((v15 & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(a2, "hasMotionBeforeImpact");
  v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x80000000) == 0)
  {
LABEL_22:
    if ((v15 & 4) == 0)
      goto LABEL_23;
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(a2, "lastChargerState");
  v15 = *((_DWORD *)this + 99);
  if ((v15 & 4) == 0)
  {
LABEL_23:
    if ((v15 & 8) == 0)
      goto LABEL_24;
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(a2, "lastChargerStateDuration", *((double *)this + 30));
  v15 = *((_DWORD *)this + 99);
  if ((v15 & 8) == 0)
  {
LABEL_24:
    if ((v15 & 0x10) == 0)
      goto LABEL_25;
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(a2, "lastChargerStateDurationThreshold", *((double *)this + 31));
  v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x10) == 0)
  {
LABEL_25:
    if ((v15 & 0x20) == 0)
      goto LABEL_26;
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(a2, "lastCoreMotionWristState");
  v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x20) == 0)
  {
LABEL_26:
    if ((v15 & 0x40) == 0)
      goto LABEL_27;
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(a2, "lastCoreMotionWristStateDuration", *((double *)this + 33));
  v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x40) == 0)
  {
LABEL_27:
    if ((v15 & 0x80) == 0)
      goto LABEL_28;
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(a2, "lastCoreMotionWristStateDurationPostEnd", *((double *)this + 34));
  v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x80) == 0)
  {
LABEL_28:
    if ((v15 & 0x100) == 0)
      goto LABEL_29;
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(a2, "lastCoreMotionWristStateDurationPostStart", *((double *)this + 35));
  v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x100) == 0)
  {
LABEL_29:
    if ((v15 & 0x200) == 0)
      goto LABEL_30;
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(a2, "lastCoreMotionWristStateDurationPostThreshold", *((double *)this + 36));
  v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x200) == 0)
  {
LABEL_30:
    if ((v15 & 0x400) == 0)
      goto LABEL_31;
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(a2, "lastCoreMotionWristStateDurationPreEnd", *((double *)this + 37));
  v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x400) == 0)
  {
LABEL_31:
    if ((v15 & 0x800) == 0)
      goto LABEL_32;
    goto LABEL_81;
  }
LABEL_80:
  PB::TextFormatter::format(a2, "lastCoreMotionWristStateDurationPreStart", *((double *)this + 38));
  v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x800) == 0)
  {
LABEL_32:
    if ((v15 & 0x1000) == 0)
      goto LABEL_33;
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(a2, "lastLockedStateDurationPreEnd", *((double *)this + 39));
  v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x1000) == 0)
  {
LABEL_33:
    if ((v15 & 0x2000) == 0)
      goto LABEL_34;
    goto LABEL_83;
  }
LABEL_82:
  PB::TextFormatter::format(a2, "lastLockedStateDurationPreStart", *((double *)this + 40));
  v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x2000) == 0)
  {
LABEL_34:
    if ((v15 & 0x4000) == 0)
      goto LABEL_35;
    goto LABEL_84;
  }
LABEL_83:
  PB::TextFormatter::format(a2, "lastMotionState");
  v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x4000) == 0)
  {
LABEL_35:
    if ((v15 & 0x8000) == 0)
      goto LABEL_37;
    goto LABEL_36;
  }
LABEL_84:
  PB::TextFormatter::format(a2, "lastMotionStateEndTime");
  if ((*((_DWORD *)this + 99) & 0x8000) != 0)
LABEL_36:
    PB::TextFormatter::format(a2, "lastMotionStateStartTime");
LABEL_37:
  v16 = (double *)*((_QWORD *)this + 10);
  v17 = (double *)*((_QWORD *)this + 11);
  while (v16 != v17)
  {
    v18 = *v16++;
    PB::TextFormatter::format(a2, "lockStateHistoryEndTimestamp", v18);
  }
  v19 = (double *)*((_QWORD *)this + 13);
  v20 = (double *)*((_QWORD *)this + 14);
  while (v19 != v20)
  {
    v21 = *v19++;
    PB::TextFormatter::format(a2, "lockStateHistoryStartTimestamp", v21);
  }
  v22 = (double *)*((_QWORD *)this + 16);
  v23 = (double *)*((_QWORD *)this + 17);
  while (v22 != v23)
  {
    v24 = *v22++;
    PB::TextFormatter::format(a2, "lockStateHistoryState", v24);
  }
  v25 = *((_DWORD *)this + 99);
  if ((v25 & 0x10000) != 0)
  {
    PB::TextFormatter::format(a2, "motionLookbackBeforeImpactEndOfInterval");
    v25 = *((_DWORD *)this + 99);
  }
  if ((v25 & 0x20000) != 0)
    PB::TextFormatter::format(a2, "motionLookbackBeforeImpactStartOfInterval");
  v26 = (double *)*((_QWORD *)this + 19);
  v27 = (double *)*((_QWORD *)this + 20);
  while (v26 != v27)
  {
    v28 = *v26++;
    PB::TextFormatter::format(a2, "motionStateHistoryEndTimestamp", v28);
  }
  v29 = (double *)*((_QWORD *)this + 22);
  v30 = (double *)*((_QWORD *)this + 23);
  while (v29 != v30)
  {
    v31 = *v29++;
    PB::TextFormatter::format(a2, "motionStateHistoryStartTimestamp", v31);
  }
  v32 = (double *)*((_QWORD *)this + 25);
  v33 = (double *)*((_QWORD *)this + 26);
  while (v32 != v33)
  {
    v34 = *v32++;
    PB::TextFormatter::format(a2, "motionStateHistoryState", v34);
  }
  v35 = *((_DWORD *)this + 99);
  if ((v35 & 0x40000) != 0)
  {
    PB::TextFormatter::format(a2, "relativeTimestampToImpact", *((double *)this + 46));
    v35 = *((_DWORD *)this + 99);
  }
  if ((v35 & 0x80000) != 0)
    PB::TextFormatter::format(a2, "timestamp");
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::FallDetectionWristStateReplay::readFrom(CMMsl::FallDetectionWristStateReplay *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  BOOL v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  _QWORD *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  _QWORD *v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  _QWORD *v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  char *v93;
  _QWORD *v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  char *v107;
  _QWORD *v108;
  char *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  char *v121;
  _QWORD *v122;
  char *v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  char *v135;
  _QWORD *v136;
  char *v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  char *v149;
  _QWORD *v150;
  char *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  int v162;
  BOOL v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  char v169;
  unsigned int v170;
  uint64_t v171;
  unint64_t v172;
  char v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  char v177;
  unsigned int v178;
  uint64_t v179;
  unint64_t v180;
  char v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  char v193;
  unsigned int v194;
  uint64_t v195;
  unint64_t v196;
  char v197;
  unint64_t v198;
  unint64_t v199;
  uint64_t v200;
  char v201;
  unsigned int v202;
  uint64_t v203;
  unint64_t v204;
  char v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  char v209;
  unsigned int v210;
  uint64_t v211;
  unint64_t v212;
  char v213;
  unint64_t v214;
  unint64_t v215;
  uint64_t v216;
  char v217;
  unsigned int v218;
  uint64_t v219;
  unint64_t v220;
  char v221;
  unint64_t v222;
  unint64_t v223;
  uint64_t v224;
  char v225;
  unsigned int v226;
  uint64_t v227;
  unint64_t v228;
  char v229;
  unint64_t v230;
  unint64_t v231;
  int v232;
  BOOL v233;
  unint64_t v234;
  unint64_t v235;
  unint64_t v236;
  unint64_t v237;
  int v238;
  BOOL v239;
  unint64_t v240;
  unint64_t v241;
  int v242;
  BOOL v243;
  unint64_t v244;
  unint64_t v245;
  int v246;
  BOOL v247;
  unint64_t v248;
  unint64_t v249;
  int v250;
  BOOL v251;
  unint64_t v252;
  unint64_t v253;
  int v254;
  BOOL v255;
  unint64_t v256;
  unint64_t v257;
  int v258;
  BOOL v259;
  unint64_t v260;
  unint64_t v261;
  int v262;
  BOOL v263;
  unint64_t v264;
  unint64_t v265;
  int v266;
  BOOL v267;
  unint64_t v268;
  unint64_t v269;
  int v270;
  BOOL v271;
  unint64_t v272;
  char *v273;
  _QWORD *v274;
  unint64_t v275;
  char *v276;
  unint64_t v277;
  char *v278;
  unint64_t v279;
  char *v280;
  unint64_t v281;
  char *v282;
  unint64_t v283;
  char *v284;
  unint64_t v285;
  char *v286;
  unint64_t v287;
  char *v288;
  unint64_t v289;
  char *v290;
  char v291;
  unsigned int v292;
  unint64_t v293;
  char v294;
  char v295;
  unsigned int v296;
  unint64_t v297;
  char v298;
  char v299;
  unsigned int v300;
  unint64_t v301;
  char v302;
  char v303;
  unsigned int v304;
  unint64_t v305;
  char v306;
  char v307;
  unsigned int v308;
  unint64_t v309;
  char v310;
  char v311;
  unsigned int v312;
  unint64_t v313;
  char v314;
  char v315;
  unsigned int v316;
  unint64_t v317;
  char v318;
  char v319;
  unsigned int v320;
  unint64_t v321;
  char v322;
  char *v323;
  uint64_t v324;
  unint64_t v325;
  uint64_t v326;
  unint64_t v327;
  uint64_t v328;
  char *v329;
  uint64_t v330;
  unint64_t v331;
  uint64_t v332;
  unint64_t v333;
  uint64_t v334;
  char *v335;
  uint64_t v336;
  unint64_t v337;
  uint64_t v338;
  unint64_t v339;
  uint64_t v340;
  char *v341;
  uint64_t v342;
  unint64_t v343;
  uint64_t v344;
  unint64_t v345;
  uint64_t v346;
  char *v347;
  uint64_t v348;
  unint64_t v349;
  uint64_t v350;
  unint64_t v351;
  uint64_t v352;
  char *v353;
  uint64_t v354;
  unint64_t v355;
  uint64_t v356;
  unint64_t v357;
  uint64_t v358;
  char *v359;
  uint64_t v360;
  unint64_t v361;
  uint64_t v362;
  unint64_t v363;
  uint64_t v364;
  char *v365;
  uint64_t v366;
  unint64_t v367;
  uint64_t v368;
  unint64_t v369;
  uint64_t v370;
  char *v371;
  uint64_t v372;
  unint64_t v373;
  uint64_t v374;
  unint64_t v375;
  uint64_t v376;
  _QWORD *v377;
  uint64_t v378;
  _QWORD *v379;
  uint64_t v380;
  _QWORD *v381;
  uint64_t v382;
  _QWORD *v383;
  uint64_t v384;
  _QWORD *v385;
  uint64_t v386;
  _QWORD *v387;
  uint64_t v388;
  _QWORD *v389;
  uint64_t v390;
  _QWORD *v391;
  uint64_t v392;
  _QWORD *v393;
  uint64_t v394;
  unint64_t v395;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (2)
  {
    v8 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_25:
      v20 = v11 & 7;
      if (v20 != 4)
      {
        v21 = v11 >> 3;
        switch((v11 >> 3))
        {
          case 1u:
            *((_DWORD *)this + 99) |= 0x80000u;
            v22 = *((_QWORD *)a2 + 1);
            v23 = *((_QWORD *)a2 + 2);
            v24 = *(_QWORD *)a2;
            if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
            {
              v25 = 0;
              v26 = 0;
              v27 = 0;
              do
              {
                v28 = v22 + 1;
                *((_QWORD *)a2 + 1) = v22 + 1;
                v29 = *(_BYTE *)(v24 + v22);
                v27 |= (unint64_t)(v29 & 0x7F) << v25;
                if ((v29 & 0x80) == 0)
                  goto LABEL_544;
                v25 += 7;
                v22 = v28;
                v14 = v26++ > 8;
              }
              while (!v14);
LABEL_387:
              v27 = 0;
              goto LABEL_544;
            }
            v291 = 0;
            v292 = 0;
            v27 = 0;
            if (v23 <= v22)
              v23 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v23 == v22)
              {
                v27 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v293 = v22 + 1;
                v294 = *(_BYTE *)(v24 + v22);
                *((_QWORD *)a2 + 1) = v293;
                v27 |= (unint64_t)(v294 & 0x7F) << v291;
                if (v294 < 0)
                {
                  v291 += 7;
                  v22 = v293;
                  v14 = v292++ > 8;
                  if (v14)
                    goto LABEL_387;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  v27 = 0;
              }
              break;
            }
LABEL_544:
            *((_QWORD *)this + 47) = v27;
            goto LABEL_20;
          case 2u:
            *((_DWORD *)this + 99) |= 0x1000000u;
            v160 = *((_QWORD *)a2 + 1);
            if (v160 >= *((_QWORD *)a2 + 2))
            {
              v163 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v161 = v160 + 1;
              v162 = *(unsigned __int8 *)(*(_QWORD *)a2 + v160);
              *((_QWORD *)a2 + 1) = v161;
              v163 = v162 != 0;
            }
            *((_BYTE *)this + 388) = v163;
            goto LABEL_20;
          case 3u:
            *((_DWORD *)this + 99) |= 1u;
            v164 = *((_QWORD *)a2 + 1);
            if (v164 > 0xFFFFFFFFFFFFFFF7 || v164 + 8 > *((_QWORD *)a2 + 2))
              goto LABEL_344;
            *((_QWORD *)this + 28) = *(_QWORD *)(*(_QWORD *)a2 + v164);
            goto LABEL_633;
          case 4u:
            *((_DWORD *)this + 99) |= 0x40000u;
            v165 = *((_QWORD *)a2 + 1);
            if (v165 > 0xFFFFFFFFFFFFFFF7 || v165 + 8 > *((_QWORD *)a2 + 2))
              goto LABEL_344;
            *((_QWORD *)this + 46) = *(_QWORD *)(*(_QWORD *)a2 + v165);
            goto LABEL_633;
          case 5u:
            *((_DWORD *)this + 99) |= 2u;
            v166 = *((_QWORD *)a2 + 1);
            v167 = *((_QWORD *)a2 + 2);
            v168 = *(_QWORD *)a2;
            if (v166 <= 0xFFFFFFFFFFFFFFF5 && v166 + 10 <= v167)
            {
              v169 = 0;
              v170 = 0;
              v171 = 0;
              do
              {
                v172 = v166 + 1;
                *((_QWORD *)a2 + 1) = v166 + 1;
                v173 = *(_BYTE *)(v168 + v166);
                v171 |= (unint64_t)(v173 & 0x7F) << v169;
                if ((v173 & 0x80) == 0)
                  goto LABEL_547;
                v169 += 7;
                v166 = v172;
                v14 = v170++ > 8;
              }
              while (!v14);
LABEL_396:
              v171 = 0;
              goto LABEL_547;
            }
            v295 = 0;
            v296 = 0;
            v171 = 0;
            if (v167 <= v166)
              v167 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v167 == v166)
              {
                v171 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v297 = v166 + 1;
                v298 = *(_BYTE *)(v168 + v166);
                *((_QWORD *)a2 + 1) = v297;
                v171 |= (unint64_t)(v298 & 0x7F) << v295;
                if (v298 < 0)
                {
                  v295 += 7;
                  v166 = v297;
                  v14 = v296++ > 8;
                  if (v14)
                    goto LABEL_396;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  v171 = 0;
              }
              break;
            }
LABEL_547:
            *((_QWORD *)this + 29) = v171;
            goto LABEL_20;
          case 6u:
          case 7u:
          case 8u:
          case 9u:
          case 0xAu:
          case 0xBu:
          case 0xCu:
          case 0xDu:
          case 0xEu:
          case 0xFu:
          case 0x10u:
          case 0x11u:
          case 0x12u:
          case 0x13u:
          case 0x14u:
          case 0x23u:
          case 0x24u:
          case 0x25u:
          case 0x26u:
          case 0x27u:
          case 0x28u:
          case 0x2Cu:
          case 0x2Du:
          case 0x2Eu:
          case 0x2Fu:
          case 0x30u:
          case 0x31u:
          case 0x32u:
            goto LABEL_19;
          case 0x15u:
            *((_DWORD *)this + 99) |= 0x10u;
            v174 = *((_QWORD *)a2 + 1);
            v175 = *((_QWORD *)a2 + 2);
            v176 = *(_QWORD *)a2;
            if (v174 <= 0xFFFFFFFFFFFFFFF5 && v174 + 10 <= v175)
            {
              v177 = 0;
              v178 = 0;
              v179 = 0;
              do
              {
                v180 = v174 + 1;
                *((_QWORD *)a2 + 1) = v174 + 1;
                v181 = *(_BYTE *)(v176 + v174);
                v179 |= (unint64_t)(v181 & 0x7F) << v177;
                if ((v181 & 0x80) == 0)
                  goto LABEL_550;
                v177 += 7;
                v174 = v180;
                v14 = v178++ > 8;
              }
              while (!v14);
LABEL_403:
              v179 = 0;
              goto LABEL_550;
            }
            v299 = 0;
            v300 = 0;
            v179 = 0;
            if (v175 <= v174)
              v175 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v175 == v174)
              {
                v179 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v301 = v174 + 1;
                v302 = *(_BYTE *)(v176 + v174);
                *((_QWORD *)a2 + 1) = v301;
                v179 |= (unint64_t)(v302 & 0x7F) << v299;
                if (v302 < 0)
                {
                  v299 += 7;
                  v174 = v301;
                  v14 = v300++ > 8;
                  if (v14)
                    goto LABEL_403;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  v179 = 0;
              }
              break;
            }
LABEL_550:
            *((_QWORD *)this + 32) = v179;
            goto LABEL_20;
          case 0x16u:
            *((_DWORD *)this + 99) |= 0x20u;
            v182 = *((_QWORD *)a2 + 1);
            if (v182 > 0xFFFFFFFFFFFFFFF7 || v182 + 8 > *((_QWORD *)a2 + 2))
              goto LABEL_344;
            *((_QWORD *)this + 33) = *(_QWORD *)(*(_QWORD *)a2 + v182);
            goto LABEL_633;
          case 0x17u:
            *((_DWORD *)this + 99) |= 0x100u;
            v183 = *((_QWORD *)a2 + 1);
            if (v183 > 0xFFFFFFFFFFFFFFF7 || v183 + 8 > *((_QWORD *)a2 + 2))
              goto LABEL_344;
            *((_QWORD *)this + 36) = *(_QWORD *)(*(_QWORD *)a2 + v183);
            goto LABEL_633;
          case 0x18u:
            *((_DWORD *)this + 99) |= 0x400u;
            v184 = *((_QWORD *)a2 + 1);
            if (v184 > 0xFFFFFFFFFFFFFFF7 || v184 + 8 > *((_QWORD *)a2 + 2))
              goto LABEL_344;
            *((_QWORD *)this + 38) = *(_QWORD *)(*(_QWORD *)a2 + v184);
            goto LABEL_633;
          case 0x19u:
            *((_DWORD *)this + 99) |= 0x200u;
            v185 = *((_QWORD *)a2 + 1);
            if (v185 > 0xFFFFFFFFFFFFFFF7 || v185 + 8 > *((_QWORD *)a2 + 2))
              goto LABEL_344;
            *((_QWORD *)this + 37) = *(_QWORD *)(*(_QWORD *)a2 + v185);
            goto LABEL_633;
          case 0x1Au:
            *((_DWORD *)this + 99) |= 0x80u;
            v186 = *((_QWORD *)a2 + 1);
            if (v186 > 0xFFFFFFFFFFFFFFF7 || v186 + 8 > *((_QWORD *)a2 + 2))
              goto LABEL_344;
            *((_QWORD *)this + 35) = *(_QWORD *)(*(_QWORD *)a2 + v186);
            goto LABEL_633;
          case 0x1Bu:
            *((_DWORD *)this + 99) |= 0x40u;
            v187 = *((_QWORD *)a2 + 1);
            if (v187 > 0xFFFFFFFFFFFFFFF7 || v187 + 8 > *((_QWORD *)a2 + 2))
              goto LABEL_344;
            *((_QWORD *)this + 34) = *(_QWORD *)(*(_QWORD *)a2 + v187);
            goto LABEL_633;
          case 0x1Cu:
            *((_DWORD *)this + 99) |= 0x1000u;
            v188 = *((_QWORD *)a2 + 1);
            if (v188 > 0xFFFFFFFFFFFFFFF7 || v188 + 8 > *((_QWORD *)a2 + 2))
              goto LABEL_344;
            *((_QWORD *)this + 40) = *(_QWORD *)(*(_QWORD *)a2 + v188);
            goto LABEL_633;
          case 0x1Du:
            *((_DWORD *)this + 99) |= 0x800u;
            v189 = *((_QWORD *)a2 + 1);
            if (v189 > 0xFFFFFFFFFFFFFFF7 || v189 + 8 > *((_QWORD *)a2 + 2))
              goto LABEL_344;
            *((_QWORD *)this + 39) = *(_QWORD *)(*(_QWORD *)a2 + v189);
            goto LABEL_633;
          case 0x1Eu:
            *((_DWORD *)this + 99) |= 0x20000u;
            v190 = *((_QWORD *)a2 + 1);
            v191 = *((_QWORD *)a2 + 2);
            v192 = *(_QWORD *)a2;
            if (v190 <= 0xFFFFFFFFFFFFFFF5 && v190 + 10 <= v191)
            {
              v193 = 0;
              v194 = 0;
              v195 = 0;
              do
              {
                v196 = v190 + 1;
                *((_QWORD *)a2 + 1) = v190 + 1;
                v197 = *(_BYTE *)(v192 + v190);
                v195 |= (unint64_t)(v197 & 0x7F) << v193;
                if ((v197 & 0x80) == 0)
                  goto LABEL_553;
                v193 += 7;
                v190 = v196;
                v14 = v194++ > 8;
              }
              while (!v14);
LABEL_410:
              v195 = 0;
              goto LABEL_553;
            }
            v303 = 0;
            v304 = 0;
            v195 = 0;
            if (v191 <= v190)
              v191 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v191 == v190)
              {
                v195 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v305 = v190 + 1;
                v306 = *(_BYTE *)(v192 + v190);
                *((_QWORD *)a2 + 1) = v305;
                v195 |= (unint64_t)(v306 & 0x7F) << v303;
                if (v306 < 0)
                {
                  v303 += 7;
                  v190 = v305;
                  v14 = v304++ > 8;
                  if (v14)
                    goto LABEL_410;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  v195 = 0;
              }
              break;
            }
LABEL_553:
            *((_QWORD *)this + 45) = v195;
            goto LABEL_20;
          case 0x1Fu:
            *((_DWORD *)this + 99) |= 0x10000u;
            v198 = *((_QWORD *)a2 + 1);
            v199 = *((_QWORD *)a2 + 2);
            v200 = *(_QWORD *)a2;
            if (v198 <= 0xFFFFFFFFFFFFFFF5 && v198 + 10 <= v199)
            {
              v201 = 0;
              v202 = 0;
              v203 = 0;
              do
              {
                v204 = v198 + 1;
                *((_QWORD *)a2 + 1) = v198 + 1;
                v205 = *(_BYTE *)(v200 + v198);
                v203 |= (unint64_t)(v205 & 0x7F) << v201;
                if ((v205 & 0x80) == 0)
                  goto LABEL_556;
                v201 += 7;
                v198 = v204;
                v14 = v202++ > 8;
              }
              while (!v14);
LABEL_417:
              v203 = 0;
              goto LABEL_556;
            }
            v307 = 0;
            v308 = 0;
            v203 = 0;
            if (v199 <= v198)
              v199 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v199 == v198)
              {
                v203 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v309 = v198 + 1;
                v310 = *(_BYTE *)(v200 + v198);
                *((_QWORD *)a2 + 1) = v309;
                v203 |= (unint64_t)(v310 & 0x7F) << v307;
                if (v310 < 0)
                {
                  v307 += 7;
                  v198 = v309;
                  v14 = v308++ > 8;
                  if (v14)
                    goto LABEL_417;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  v203 = 0;
              }
              break;
            }
LABEL_556:
            *((_QWORD *)this + 44) = v203;
            goto LABEL_20;
          case 0x20u:
            *((_DWORD *)this + 99) |= 0x8000u;
            v206 = *((_QWORD *)a2 + 1);
            v207 = *((_QWORD *)a2 + 2);
            v208 = *(_QWORD *)a2;
            if (v206 <= 0xFFFFFFFFFFFFFFF5 && v206 + 10 <= v207)
            {
              v209 = 0;
              v210 = 0;
              v211 = 0;
              do
              {
                v212 = v206 + 1;
                *((_QWORD *)a2 + 1) = v206 + 1;
                v213 = *(_BYTE *)(v208 + v206);
                v211 |= (unint64_t)(v213 & 0x7F) << v209;
                if ((v213 & 0x80) == 0)
                  goto LABEL_559;
                v209 += 7;
                v206 = v212;
                v14 = v210++ > 8;
              }
              while (!v14);
LABEL_424:
              v211 = 0;
              goto LABEL_559;
            }
            v311 = 0;
            v312 = 0;
            v211 = 0;
            if (v207 <= v206)
              v207 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v207 == v206)
              {
                v211 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v313 = v206 + 1;
                v314 = *(_BYTE *)(v208 + v206);
                *((_QWORD *)a2 + 1) = v313;
                v211 |= (unint64_t)(v314 & 0x7F) << v311;
                if (v314 < 0)
                {
                  v311 += 7;
                  v206 = v313;
                  v14 = v312++ > 8;
                  if (v14)
                    goto LABEL_424;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  v211 = 0;
              }
              break;
            }
LABEL_559:
            *((_QWORD *)this + 43) = v211;
            goto LABEL_20;
          case 0x21u:
            *((_DWORD *)this + 99) |= 0x4000u;
            v214 = *((_QWORD *)a2 + 1);
            v215 = *((_QWORD *)a2 + 2);
            v216 = *(_QWORD *)a2;
            if (v214 <= 0xFFFFFFFFFFFFFFF5 && v214 + 10 <= v215)
            {
              v217 = 0;
              v218 = 0;
              v219 = 0;
              do
              {
                v220 = v214 + 1;
                *((_QWORD *)a2 + 1) = v214 + 1;
                v221 = *(_BYTE *)(v216 + v214);
                v219 |= (unint64_t)(v221 & 0x7F) << v217;
                if ((v221 & 0x80) == 0)
                  goto LABEL_562;
                v217 += 7;
                v214 = v220;
                v14 = v218++ > 8;
              }
              while (!v14);
LABEL_431:
              v219 = 0;
              goto LABEL_562;
            }
            v315 = 0;
            v316 = 0;
            v219 = 0;
            if (v215 <= v214)
              v215 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v215 == v214)
              {
                v219 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v317 = v214 + 1;
                v318 = *(_BYTE *)(v216 + v214);
                *((_QWORD *)a2 + 1) = v317;
                v219 |= (unint64_t)(v318 & 0x7F) << v315;
                if (v318 < 0)
                {
                  v315 += 7;
                  v214 = v317;
                  v14 = v316++ > 8;
                  if (v14)
                    goto LABEL_431;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  v219 = 0;
              }
              break;
            }
LABEL_562:
            *((_QWORD *)this + 42) = v219;
            goto LABEL_20;
          case 0x22u:
            *((_DWORD *)this + 99) |= 0x2000u;
            v222 = *((_QWORD *)a2 + 1);
            v223 = *((_QWORD *)a2 + 2);
            v224 = *(_QWORD *)a2;
            if (v222 <= 0xFFFFFFFFFFFFFFF5 && v222 + 10 <= v223)
            {
              v225 = 0;
              v226 = 0;
              v227 = 0;
              do
              {
                v228 = v222 + 1;
                *((_QWORD *)a2 + 1) = v222 + 1;
                v229 = *(_BYTE *)(v224 + v222);
                v227 |= (unint64_t)(v229 & 0x7F) << v225;
                if ((v229 & 0x80) == 0)
                  goto LABEL_565;
                v225 += 7;
                v222 = v228;
                v14 = v226++ > 8;
              }
              while (!v14);
LABEL_438:
              v227 = 0;
              goto LABEL_565;
            }
            v319 = 0;
            v320 = 0;
            v227 = 0;
            if (v223 <= v222)
              v223 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v223 == v222)
              {
                v227 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v321 = v222 + 1;
                v322 = *(_BYTE *)(v224 + v222);
                *((_QWORD *)a2 + 1) = v321;
                v227 |= (unint64_t)(v322 & 0x7F) << v319;
                if (v322 < 0)
                {
                  v319 += 7;
                  v222 = v321;
                  v14 = v320++ > 8;
                  if (v14)
                    goto LABEL_438;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  v227 = 0;
              }
              break;
            }
LABEL_565:
            *((_QWORD *)this + 41) = v227;
            goto LABEL_20;
          case 0x29u:
            *((_DWORD *)this + 99) |= 0x80000000;
            v230 = *((_QWORD *)a2 + 1);
            if (v230 >= *((_QWORD *)a2 + 2))
            {
              v233 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v231 = v230 + 1;
              v232 = *(unsigned __int8 *)(*(_QWORD *)a2 + v230);
              *((_QWORD *)a2 + 1) = v231;
              v233 = v232 != 0;
            }
            *((_BYTE *)this + 395) = v233;
            goto LABEL_20;
          case 0x2Au:
            *((_DWORD *)this + 99) |= 4u;
            v234 = *((_QWORD *)a2 + 1);
            if (v234 > 0xFFFFFFFFFFFFFFF7 || v234 + 8 > *((_QWORD *)a2 + 2))
              goto LABEL_344;
            *((_QWORD *)this + 30) = *(_QWORD *)(*(_QWORD *)a2 + v234);
            goto LABEL_633;
          case 0x2Bu:
            *((_DWORD *)this + 99) |= 8u;
            v235 = *((_QWORD *)a2 + 1);
            if (v235 > 0xFFFFFFFFFFFFFFF7 || v235 + 8 > *((_QWORD *)a2 + 2))
            {
LABEL_344:
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_20;
            }
            *((_QWORD *)this + 31) = *(_QWORD *)(*(_QWORD *)a2 + v235);
            goto LABEL_633;
          case 0x33u:
            *((_DWORD *)this + 99) |= 0x100000u;
            v236 = *((_QWORD *)a2 + 1);
            if (v236 >= *((_QWORD *)a2 + 2))
            {
              v239 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v237 = v236 + 1;
              v238 = *(unsigned __int8 *)(*(_QWORD *)a2 + v236);
              *((_QWORD *)a2 + 1) = v237;
              v239 = v238 != 0;
            }
            *((_BYTE *)this + 384) = v239;
            goto LABEL_20;
          case 0x34u:
            *((_DWORD *)this + 99) |= 0x400000u;
            v240 = *((_QWORD *)a2 + 1);
            if (v240 >= *((_QWORD *)a2 + 2))
            {
              v243 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v241 = v240 + 1;
              v242 = *(unsigned __int8 *)(*(_QWORD *)a2 + v240);
              *((_QWORD *)a2 + 1) = v241;
              v243 = v242 != 0;
            }
            *((_BYTE *)this + 386) = v243;
            goto LABEL_20;
          case 0x35u:
            *((_DWORD *)this + 99) |= 0x40000000u;
            v244 = *((_QWORD *)a2 + 1);
            if (v244 >= *((_QWORD *)a2 + 2))
            {
              v247 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v245 = v244 + 1;
              v246 = *(unsigned __int8 *)(*(_QWORD *)a2 + v244);
              *((_QWORD *)a2 + 1) = v245;
              v247 = v246 != 0;
            }
            *((_BYTE *)this + 394) = v247;
            goto LABEL_20;
          case 0x36u:
            *((_DWORD *)this + 99) |= 0x200000u;
            v248 = *((_QWORD *)a2 + 1);
            if (v248 >= *((_QWORD *)a2 + 2))
            {
              v251 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v249 = v248 + 1;
              v250 = *(unsigned __int8 *)(*(_QWORD *)a2 + v248);
              *((_QWORD *)a2 + 1) = v249;
              v251 = v250 != 0;
            }
            *((_BYTE *)this + 385) = v251;
            goto LABEL_20;
          case 0x37u:
            *((_DWORD *)this + 99) |= 0x800000u;
            v252 = *((_QWORD *)a2 + 1);
            if (v252 >= *((_QWORD *)a2 + 2))
            {
              v255 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v253 = v252 + 1;
              v254 = *(unsigned __int8 *)(*(_QWORD *)a2 + v252);
              *((_QWORD *)a2 + 1) = v253;
              v255 = v254 != 0;
            }
            *((_BYTE *)this + 387) = v255;
            goto LABEL_20;
          default:
            switch((int)v21)
            {
              case 151:
                if (v20 == 2)
                {
                  if ((PB::Reader::placeMark() & 1) != 0)
                    return 0;
                  v30 = *((_QWORD *)a2 + 1);
                  v31 = *((_QWORD *)a2 + 2);
                  while (v30 < v31 && !*((_BYTE *)a2 + 24))
                  {
                    v33 = (char *)*((_QWORD *)this + 5);
                    v32 = *((_QWORD *)this + 6);
                    if ((unint64_t)v33 >= v32)
                    {
                      v35 = (char *)*((_QWORD *)this + 4);
                      v36 = (v33 - v35) >> 3;
                      v37 = v36 + 1;
                      if ((unint64_t)(v36 + 1) >> 61)
                        goto LABEL_638;
                      v38 = v32 - (_QWORD)v35;
                      if (v38 >> 2 > v37)
                        v37 = v38 >> 2;
                      if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
                        v39 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v39 = v37;
                      if (v39)
                      {
                        v39 = (unint64_t)sub_2429112FC(v39);
                        v35 = (char *)*((_QWORD *)this + 4);
                        v33 = (char *)*((_QWORD *)this + 5);
                      }
                      else
                      {
                        v40 = 0;
                      }
                      v41 = (_QWORD *)(v39 + 8 * v36);
                      *v41 = 0;
                      v34 = v41 + 1;
                      while (v33 != v35)
                      {
                        v42 = *((_QWORD *)v33 - 1);
                        v33 -= 8;
                        *--v41 = v42;
                      }
                      *((_QWORD *)this + 4) = v41;
                      *((_QWORD *)this + 5) = v34;
                      *((_QWORD *)this + 6) = v39 + 8 * v40;
                      if (v35)
                        operator delete(v35);
                    }
                    else
                    {
                      *(_QWORD *)v33 = 0;
                      v34 = v33 + 8;
                    }
                    *((_QWORD *)this + 5) = v34;
                    v43 = *((_QWORD *)a2 + 1);
                    if (v43 > 0xFFFFFFFFFFFFFFF7 || v43 + 8 > *((_QWORD *)a2 + 2))
                      goto LABEL_254;
                    *(v34 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v43);
                    v31 = *((_QWORD *)a2 + 2);
                    v30 = *((_QWORD *)a2 + 1) + 8;
                    *((_QWORD *)a2 + 1) = v30;
                  }
                  goto LABEL_255;
                }
                v273 = (char *)*((_QWORD *)this + 5);
                v272 = *((_QWORD *)this + 6);
                if ((unint64_t)v273 >= v272)
                {
                  v323 = (char *)*((_QWORD *)this + 4);
                  v324 = (v273 - v323) >> 3;
                  v325 = v324 + 1;
                  if ((unint64_t)(v324 + 1) >> 61)
                    goto LABEL_638;
                  v326 = v272 - (_QWORD)v323;
                  if (v326 >> 2 > v325)
                    v325 = v326 >> 2;
                  if ((unint64_t)v326 >= 0x7FFFFFFFFFFFFFF8)
                    v327 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v327 = v325;
                  if (v327)
                  {
                    v327 = (unint64_t)sub_2429112FC(v327);
                    v323 = (char *)*((_QWORD *)this + 4);
                    v273 = (char *)*((_QWORD *)this + 5);
                  }
                  else
                  {
                    v328 = 0;
                  }
                  v377 = (_QWORD *)(v327 + 8 * v324);
                  *v377 = 0;
                  v274 = v377 + 1;
                  while (v273 != v323)
                  {
                    v378 = *((_QWORD *)v273 - 1);
                    v273 -= 8;
                    *--v377 = v378;
                  }
                  *((_QWORD *)this + 4) = v377;
                  *((_QWORD *)this + 5) = v274;
                  *((_QWORD *)this + 6) = v327 + 8 * v328;
                  if (v323)
                    operator delete(v323);
                }
                else
                {
                  *(_QWORD *)v273 = 0;
                  v274 = v273 + 8;
                }
                *((_QWORD *)this + 5) = v274;
                goto LABEL_629;
              case 152:
                if (v20 == 2)
                {
                  if ((PB::Reader::placeMark() & 1) != 0)
                    return 0;
                  v48 = *((_QWORD *)a2 + 1);
                  v49 = *((_QWORD *)a2 + 2);
                  while (v48 < v49 && !*((_BYTE *)a2 + 24))
                  {
                    v51 = (char *)*((_QWORD *)this + 2);
                    v50 = *((_QWORD *)this + 3);
                    if ((unint64_t)v51 >= v50)
                    {
                      v53 = (char *)*((_QWORD *)this + 1);
                      v54 = (v51 - v53) >> 3;
                      v55 = v54 + 1;
                      if ((unint64_t)(v54 + 1) >> 61)
                        goto LABEL_638;
                      v56 = v50 - (_QWORD)v53;
                      if (v56 >> 2 > v55)
                        v55 = v56 >> 2;
                      if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
                        v57 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v57 = v55;
                      if (v57)
                      {
                        v57 = (unint64_t)sub_2429112FC(v57);
                        v53 = (char *)*((_QWORD *)this + 1);
                        v51 = (char *)*((_QWORD *)this + 2);
                      }
                      else
                      {
                        v58 = 0;
                      }
                      v59 = (_QWORD *)(v57 + 8 * v54);
                      *v59 = 0;
                      v52 = v59 + 1;
                      while (v51 != v53)
                      {
                        v60 = *((_QWORD *)v51 - 1);
                        v51 -= 8;
                        *--v59 = v60;
                      }
                      *((_QWORD *)this + 1) = v59;
                      *((_QWORD *)this + 2) = v52;
                      *((_QWORD *)this + 3) = v57 + 8 * v58;
                      if (v53)
                        operator delete(v53);
                    }
                    else
                    {
                      *(_QWORD *)v51 = 0;
                      v52 = v51 + 8;
                    }
                    *((_QWORD *)this + 2) = v52;
                    v61 = *((_QWORD *)a2 + 1);
                    if (v61 > 0xFFFFFFFFFFFFFFF7 || v61 + 8 > *((_QWORD *)a2 + 2))
                      goto LABEL_254;
                    *(v52 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v61);
                    v49 = *((_QWORD *)a2 + 2);
                    v48 = *((_QWORD *)a2 + 1) + 8;
                    *((_QWORD *)a2 + 1) = v48;
                  }
                  goto LABEL_255;
                }
                v276 = (char *)*((_QWORD *)this + 2);
                v275 = *((_QWORD *)this + 3);
                if ((unint64_t)v276 >= v275)
                {
                  v329 = (char *)*((_QWORD *)this + 1);
                  v330 = (v276 - v329) >> 3;
                  v331 = v330 + 1;
                  if ((unint64_t)(v330 + 1) >> 61)
                    goto LABEL_638;
                  v332 = v275 - (_QWORD)v329;
                  if (v332 >> 2 > v331)
                    v331 = v332 >> 2;
                  if ((unint64_t)v332 >= 0x7FFFFFFFFFFFFFF8)
                    v333 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v333 = v331;
                  if (v333)
                  {
                    v333 = (unint64_t)sub_2429112FC(v333);
                    v329 = (char *)*((_QWORD *)this + 1);
                    v276 = (char *)*((_QWORD *)this + 2);
                  }
                  else
                  {
                    v334 = 0;
                  }
                  v379 = (_QWORD *)(v333 + 8 * v330);
                  *v379 = 0;
                  v274 = v379 + 1;
                  while (v276 != v329)
                  {
                    v380 = *((_QWORD *)v276 - 1);
                    v276 -= 8;
                    *--v379 = v380;
                  }
                  *((_QWORD *)this + 1) = v379;
                  *((_QWORD *)this + 2) = v274;
                  *((_QWORD *)this + 3) = v333 + 8 * v334;
                  if (v329)
                    operator delete(v329);
                }
                else
                {
                  *(_QWORD *)v276 = 0;
                  v274 = v276 + 8;
                }
                *((_QWORD *)this + 2) = v274;
                goto LABEL_629;
              case 153:
                if (v20 == 2)
                {
                  if ((PB::Reader::placeMark() & 1) != 0)
                    return 0;
                  v62 = *((_QWORD *)a2 + 1);
                  v63 = *((_QWORD *)a2 + 2);
                  while (v62 < v63 && !*((_BYTE *)a2 + 24))
                  {
                    v65 = (char *)*((_QWORD *)this + 8);
                    v64 = *((_QWORD *)this + 9);
                    if ((unint64_t)v65 >= v64)
                    {
                      v67 = (char *)*((_QWORD *)this + 7);
                      v68 = (v65 - v67) >> 3;
                      v69 = v68 + 1;
                      if ((unint64_t)(v68 + 1) >> 61)
                        goto LABEL_638;
                      v70 = v64 - (_QWORD)v67;
                      if (v70 >> 2 > v69)
                        v69 = v70 >> 2;
                      if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8)
                        v71 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v71 = v69;
                      if (v71)
                      {
                        v71 = (unint64_t)sub_2429112FC(v71);
                        v67 = (char *)*((_QWORD *)this + 7);
                        v65 = (char *)*((_QWORD *)this + 8);
                      }
                      else
                      {
                        v72 = 0;
                      }
                      v73 = (_QWORD *)(v71 + 8 * v68);
                      *v73 = 0;
                      v66 = v73 + 1;
                      while (v65 != v67)
                      {
                        v74 = *((_QWORD *)v65 - 1);
                        v65 -= 8;
                        *--v73 = v74;
                      }
                      *((_QWORD *)this + 7) = v73;
                      *((_QWORD *)this + 8) = v66;
                      *((_QWORD *)this + 9) = v71 + 8 * v72;
                      if (v67)
                        operator delete(v67);
                    }
                    else
                    {
                      *(_QWORD *)v65 = 0;
                      v66 = v65 + 8;
                    }
                    *((_QWORD *)this + 8) = v66;
                    v75 = *((_QWORD *)a2 + 1);
                    if (v75 > 0xFFFFFFFFFFFFFFF7 || v75 + 8 > *((_QWORD *)a2 + 2))
                      goto LABEL_254;
                    *(v66 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v75);
                    v63 = *((_QWORD *)a2 + 2);
                    v62 = *((_QWORD *)a2 + 1) + 8;
                    *((_QWORD *)a2 + 1) = v62;
                  }
                  goto LABEL_255;
                }
                v278 = (char *)*((_QWORD *)this + 8);
                v277 = *((_QWORD *)this + 9);
                if ((unint64_t)v278 >= v277)
                {
                  v335 = (char *)*((_QWORD *)this + 7);
                  v336 = (v278 - v335) >> 3;
                  v337 = v336 + 1;
                  if ((unint64_t)(v336 + 1) >> 61)
                    goto LABEL_638;
                  v338 = v277 - (_QWORD)v335;
                  if (v338 >> 2 > v337)
                    v337 = v338 >> 2;
                  if ((unint64_t)v338 >= 0x7FFFFFFFFFFFFFF8)
                    v339 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v339 = v337;
                  if (v339)
                  {
                    v339 = (unint64_t)sub_2429112FC(v339);
                    v335 = (char *)*((_QWORD *)this + 7);
                    v278 = (char *)*((_QWORD *)this + 8);
                  }
                  else
                  {
                    v340 = 0;
                  }
                  v381 = (_QWORD *)(v339 + 8 * v336);
                  *v381 = 0;
                  v274 = v381 + 1;
                  while (v278 != v335)
                  {
                    v382 = *((_QWORD *)v278 - 1);
                    v278 -= 8;
                    *--v381 = v382;
                  }
                  *((_QWORD *)this + 7) = v381;
                  *((_QWORD *)this + 8) = v274;
                  *((_QWORD *)this + 9) = v339 + 8 * v340;
                  if (v335)
                    operator delete(v335);
                }
                else
                {
                  *(_QWORD *)v278 = 0;
                  v274 = v278 + 8;
                }
                *((_QWORD *)this + 8) = v274;
                goto LABEL_629;
              case 154:
              case 155:
              case 156:
              case 157:
              case 158:
              case 159:
              case 160:
                goto LABEL_19;
              case 161:
                if (v20 == 2)
                {
                  if ((PB::Reader::placeMark() & 1) != 0)
                    return 0;
                  v76 = *((_QWORD *)a2 + 1);
                  v77 = *((_QWORD *)a2 + 2);
                  while (v76 < v77 && !*((_BYTE *)a2 + 24))
                  {
                    v79 = (char *)*((_QWORD *)this + 14);
                    v78 = *((_QWORD *)this + 15);
                    if ((unint64_t)v79 >= v78)
                    {
                      v81 = (char *)*((_QWORD *)this + 13);
                      v82 = (v79 - v81) >> 3;
                      v83 = v82 + 1;
                      if ((unint64_t)(v82 + 1) >> 61)
                        goto LABEL_638;
                      v84 = v78 - (_QWORD)v81;
                      if (v84 >> 2 > v83)
                        v83 = v84 >> 2;
                      if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFF8)
                        v85 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v85 = v83;
                      if (v85)
                      {
                        v85 = (unint64_t)sub_2429112FC(v85);
                        v81 = (char *)*((_QWORD *)this + 13);
                        v79 = (char *)*((_QWORD *)this + 14);
                      }
                      else
                      {
                        v86 = 0;
                      }
                      v87 = (_QWORD *)(v85 + 8 * v82);
                      *v87 = 0;
                      v80 = v87 + 1;
                      while (v79 != v81)
                      {
                        v88 = *((_QWORD *)v79 - 1);
                        v79 -= 8;
                        *--v87 = v88;
                      }
                      *((_QWORD *)this + 13) = v87;
                      *((_QWORD *)this + 14) = v80;
                      *((_QWORD *)this + 15) = v85 + 8 * v86;
                      if (v81)
                        operator delete(v81);
                    }
                    else
                    {
                      *(_QWORD *)v79 = 0;
                      v80 = v79 + 8;
                    }
                    *((_QWORD *)this + 14) = v80;
                    v89 = *((_QWORD *)a2 + 1);
                    if (v89 > 0xFFFFFFFFFFFFFFF7 || v89 + 8 > *((_QWORD *)a2 + 2))
                      goto LABEL_254;
                    *(v80 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v89);
                    v77 = *((_QWORD *)a2 + 2);
                    v76 = *((_QWORD *)a2 + 1) + 8;
                    *((_QWORD *)a2 + 1) = v76;
                  }
                  goto LABEL_255;
                }
                v280 = (char *)*((_QWORD *)this + 14);
                v279 = *((_QWORD *)this + 15);
                if ((unint64_t)v280 >= v279)
                {
                  v341 = (char *)*((_QWORD *)this + 13);
                  v342 = (v280 - v341) >> 3;
                  v343 = v342 + 1;
                  if ((unint64_t)(v342 + 1) >> 61)
                    goto LABEL_638;
                  v344 = v279 - (_QWORD)v341;
                  if (v344 >> 2 > v343)
                    v343 = v344 >> 2;
                  if ((unint64_t)v344 >= 0x7FFFFFFFFFFFFFF8)
                    v345 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v345 = v343;
                  if (v345)
                  {
                    v345 = (unint64_t)sub_2429112FC(v345);
                    v341 = (char *)*((_QWORD *)this + 13);
                    v280 = (char *)*((_QWORD *)this + 14);
                  }
                  else
                  {
                    v346 = 0;
                  }
                  v383 = (_QWORD *)(v345 + 8 * v342);
                  *v383 = 0;
                  v274 = v383 + 1;
                  while (v280 != v341)
                  {
                    v384 = *((_QWORD *)v280 - 1);
                    v280 -= 8;
                    *--v383 = v384;
                  }
                  *((_QWORD *)this + 13) = v383;
                  *((_QWORD *)this + 14) = v274;
                  *((_QWORD *)this + 15) = v345 + 8 * v346;
                  if (v341)
                    operator delete(v341);
                }
                else
                {
                  *(_QWORD *)v280 = 0;
                  v274 = v280 + 8;
                }
                *((_QWORD *)this + 14) = v274;
                goto LABEL_629;
              case 162:
                if (v20 == 2)
                {
                  if ((PB::Reader::placeMark() & 1) != 0)
                    return 0;
                  v90 = *((_QWORD *)a2 + 1);
                  v91 = *((_QWORD *)a2 + 2);
                  while (v90 < v91 && !*((_BYTE *)a2 + 24))
                  {
                    v93 = (char *)*((_QWORD *)this + 11);
                    v92 = *((_QWORD *)this + 12);
                    if ((unint64_t)v93 >= v92)
                    {
                      v95 = (char *)*((_QWORD *)this + 10);
                      v96 = (v93 - v95) >> 3;
                      v97 = v96 + 1;
                      if ((unint64_t)(v96 + 1) >> 61)
                        goto LABEL_638;
                      v98 = v92 - (_QWORD)v95;
                      if (v98 >> 2 > v97)
                        v97 = v98 >> 2;
                      if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFF8)
                        v99 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v99 = v97;
                      if (v99)
                      {
                        v99 = (unint64_t)sub_2429112FC(v99);
                        v95 = (char *)*((_QWORD *)this + 10);
                        v93 = (char *)*((_QWORD *)this + 11);
                      }
                      else
                      {
                        v100 = 0;
                      }
                      v101 = (_QWORD *)(v99 + 8 * v96);
                      *v101 = 0;
                      v94 = v101 + 1;
                      while (v93 != v95)
                      {
                        v102 = *((_QWORD *)v93 - 1);
                        v93 -= 8;
                        *--v101 = v102;
                      }
                      *((_QWORD *)this + 10) = v101;
                      *((_QWORD *)this + 11) = v94;
                      *((_QWORD *)this + 12) = v99 + 8 * v100;
                      if (v95)
                        operator delete(v95);
                    }
                    else
                    {
                      *(_QWORD *)v93 = 0;
                      v94 = v93 + 8;
                    }
                    *((_QWORD *)this + 11) = v94;
                    v103 = *((_QWORD *)a2 + 1);
                    if (v103 > 0xFFFFFFFFFFFFFFF7 || v103 + 8 > *((_QWORD *)a2 + 2))
                      goto LABEL_254;
                    *(v94 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v103);
                    v91 = *((_QWORD *)a2 + 2);
                    v90 = *((_QWORD *)a2 + 1) + 8;
                    *((_QWORD *)a2 + 1) = v90;
                  }
                  goto LABEL_255;
                }
                v282 = (char *)*((_QWORD *)this + 11);
                v281 = *((_QWORD *)this + 12);
                if ((unint64_t)v282 >= v281)
                {
                  v347 = (char *)*((_QWORD *)this + 10);
                  v348 = (v282 - v347) >> 3;
                  v349 = v348 + 1;
                  if ((unint64_t)(v348 + 1) >> 61)
                    goto LABEL_638;
                  v350 = v281 - (_QWORD)v347;
                  if (v350 >> 2 > v349)
                    v349 = v350 >> 2;
                  if ((unint64_t)v350 >= 0x7FFFFFFFFFFFFFF8)
                    v351 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v351 = v349;
                  if (v351)
                  {
                    v351 = (unint64_t)sub_2429112FC(v351);
                    v347 = (char *)*((_QWORD *)this + 10);
                    v282 = (char *)*((_QWORD *)this + 11);
                  }
                  else
                  {
                    v352 = 0;
                  }
                  v385 = (_QWORD *)(v351 + 8 * v348);
                  *v385 = 0;
                  v274 = v385 + 1;
                  while (v282 != v347)
                  {
                    v386 = *((_QWORD *)v282 - 1);
                    v282 -= 8;
                    *--v385 = v386;
                  }
                  *((_QWORD *)this + 10) = v385;
                  *((_QWORD *)this + 11) = v274;
                  *((_QWORD *)this + 12) = v351 + 8 * v352;
                  if (v347)
                    operator delete(v347);
                }
                else
                {
                  *(_QWORD *)v282 = 0;
                  v274 = v282 + 8;
                }
                *((_QWORD *)this + 11) = v274;
                goto LABEL_629;
              case 163:
                if (v20 == 2)
                {
                  if ((PB::Reader::placeMark() & 1) != 0)
                    return 0;
                  v104 = *((_QWORD *)a2 + 1);
                  v105 = *((_QWORD *)a2 + 2);
                  while (v104 < v105 && !*((_BYTE *)a2 + 24))
                  {
                    v107 = (char *)*((_QWORD *)this + 17);
                    v106 = *((_QWORD *)this + 18);
                    if ((unint64_t)v107 >= v106)
                    {
                      v109 = (char *)*((_QWORD *)this + 16);
                      v110 = (v107 - v109) >> 3;
                      v111 = v110 + 1;
                      if ((unint64_t)(v110 + 1) >> 61)
                        goto LABEL_638;
                      v112 = v106 - (_QWORD)v109;
                      if (v112 >> 2 > v111)
                        v111 = v112 >> 2;
                      if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFF8)
                        v113 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v113 = v111;
                      if (v113)
                      {
                        v113 = (unint64_t)sub_2429112FC(v113);
                        v109 = (char *)*((_QWORD *)this + 16);
                        v107 = (char *)*((_QWORD *)this + 17);
                      }
                      else
                      {
                        v114 = 0;
                      }
                      v115 = (_QWORD *)(v113 + 8 * v110);
                      *v115 = 0;
                      v108 = v115 + 1;
                      while (v107 != v109)
                      {
                        v116 = *((_QWORD *)v107 - 1);
                        v107 -= 8;
                        *--v115 = v116;
                      }
                      *((_QWORD *)this + 16) = v115;
                      *((_QWORD *)this + 17) = v108;
                      *((_QWORD *)this + 18) = v113 + 8 * v114;
                      if (v109)
                        operator delete(v109);
                    }
                    else
                    {
                      *(_QWORD *)v107 = 0;
                      v108 = v107 + 8;
                    }
                    *((_QWORD *)this + 17) = v108;
                    v117 = *((_QWORD *)a2 + 1);
                    if (v117 > 0xFFFFFFFFFFFFFFF7 || v117 + 8 > *((_QWORD *)a2 + 2))
                      goto LABEL_254;
                    *(v108 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v117);
                    v105 = *((_QWORD *)a2 + 2);
                    v104 = *((_QWORD *)a2 + 1) + 8;
                    *((_QWORD *)a2 + 1) = v104;
                  }
                  goto LABEL_255;
                }
                v284 = (char *)*((_QWORD *)this + 17);
                v283 = *((_QWORD *)this + 18);
                if ((unint64_t)v284 >= v283)
                {
                  v353 = (char *)*((_QWORD *)this + 16);
                  v354 = (v284 - v353) >> 3;
                  v355 = v354 + 1;
                  if ((unint64_t)(v354 + 1) >> 61)
                    goto LABEL_638;
                  v356 = v283 - (_QWORD)v353;
                  if (v356 >> 2 > v355)
                    v355 = v356 >> 2;
                  if ((unint64_t)v356 >= 0x7FFFFFFFFFFFFFF8)
                    v357 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v357 = v355;
                  if (v357)
                  {
                    v357 = (unint64_t)sub_2429112FC(v357);
                    v353 = (char *)*((_QWORD *)this + 16);
                    v284 = (char *)*((_QWORD *)this + 17);
                  }
                  else
                  {
                    v358 = 0;
                  }
                  v387 = (_QWORD *)(v357 + 8 * v354);
                  *v387 = 0;
                  v274 = v387 + 1;
                  while (v284 != v353)
                  {
                    v388 = *((_QWORD *)v284 - 1);
                    v284 -= 8;
                    *--v387 = v388;
                  }
                  *((_QWORD *)this + 16) = v387;
                  *((_QWORD *)this + 17) = v274;
                  *((_QWORD *)this + 18) = v357 + 8 * v358;
                  if (v353)
                    operator delete(v353);
                }
                else
                {
                  *(_QWORD *)v284 = 0;
                  v274 = v284 + 8;
                }
                *((_QWORD *)this + 17) = v274;
                goto LABEL_629;
              case 164:
                if (v20 == 2)
                {
                  if ((PB::Reader::placeMark() & 1) != 0)
                    return 0;
                  v118 = *((_QWORD *)a2 + 1);
                  v119 = *((_QWORD *)a2 + 2);
                  while (v118 < v119 && !*((_BYTE *)a2 + 24))
                  {
                    v121 = (char *)*((_QWORD *)this + 23);
                    v120 = *((_QWORD *)this + 24);
                    if ((unint64_t)v121 >= v120)
                    {
                      v123 = (char *)*((_QWORD *)this + 22);
                      v124 = (v121 - v123) >> 3;
                      v125 = v124 + 1;
                      if ((unint64_t)(v124 + 1) >> 61)
                        goto LABEL_638;
                      v126 = v120 - (_QWORD)v123;
                      if (v126 >> 2 > v125)
                        v125 = v126 >> 2;
                      if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFF8)
                        v127 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v127 = v125;
                      if (v127)
                      {
                        v127 = (unint64_t)sub_2429112FC(v127);
                        v123 = (char *)*((_QWORD *)this + 22);
                        v121 = (char *)*((_QWORD *)this + 23);
                      }
                      else
                      {
                        v128 = 0;
                      }
                      v129 = (_QWORD *)(v127 + 8 * v124);
                      *v129 = 0;
                      v122 = v129 + 1;
                      while (v121 != v123)
                      {
                        v130 = *((_QWORD *)v121 - 1);
                        v121 -= 8;
                        *--v129 = v130;
                      }
                      *((_QWORD *)this + 22) = v129;
                      *((_QWORD *)this + 23) = v122;
                      *((_QWORD *)this + 24) = v127 + 8 * v128;
                      if (v123)
                        operator delete(v123);
                    }
                    else
                    {
                      *(_QWORD *)v121 = 0;
                      v122 = v121 + 8;
                    }
                    *((_QWORD *)this + 23) = v122;
                    v131 = *((_QWORD *)a2 + 1);
                    if (v131 > 0xFFFFFFFFFFFFFFF7 || v131 + 8 > *((_QWORD *)a2 + 2))
                      goto LABEL_254;
                    *(v122 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v131);
                    v119 = *((_QWORD *)a2 + 2);
                    v118 = *((_QWORD *)a2 + 1) + 8;
                    *((_QWORD *)a2 + 1) = v118;
                  }
                  goto LABEL_255;
                }
                v286 = (char *)*((_QWORD *)this + 23);
                v285 = *((_QWORD *)this + 24);
                if ((unint64_t)v286 >= v285)
                {
                  v359 = (char *)*((_QWORD *)this + 22);
                  v360 = (v286 - v359) >> 3;
                  v361 = v360 + 1;
                  if ((unint64_t)(v360 + 1) >> 61)
                    goto LABEL_638;
                  v362 = v285 - (_QWORD)v359;
                  if (v362 >> 2 > v361)
                    v361 = v362 >> 2;
                  if ((unint64_t)v362 >= 0x7FFFFFFFFFFFFFF8)
                    v363 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v363 = v361;
                  if (v363)
                  {
                    v363 = (unint64_t)sub_2429112FC(v363);
                    v359 = (char *)*((_QWORD *)this + 22);
                    v286 = (char *)*((_QWORD *)this + 23);
                  }
                  else
                  {
                    v364 = 0;
                  }
                  v389 = (_QWORD *)(v363 + 8 * v360);
                  *v389 = 0;
                  v274 = v389 + 1;
                  while (v286 != v359)
                  {
                    v390 = *((_QWORD *)v286 - 1);
                    v286 -= 8;
                    *--v389 = v390;
                  }
                  *((_QWORD *)this + 22) = v389;
                  *((_QWORD *)this + 23) = v274;
                  *((_QWORD *)this + 24) = v363 + 8 * v364;
                  if (v359)
                    operator delete(v359);
                }
                else
                {
                  *(_QWORD *)v286 = 0;
                  v274 = v286 + 8;
                }
                *((_QWORD *)this + 23) = v274;
                goto LABEL_629;
              case 165:
                if (v20 == 2)
                {
                  if ((PB::Reader::placeMark() & 1) != 0)
                    return 0;
                  v132 = *((_QWORD *)a2 + 1);
                  v133 = *((_QWORD *)a2 + 2);
                  while (v132 < v133 && !*((_BYTE *)a2 + 24))
                  {
                    v135 = (char *)*((_QWORD *)this + 20);
                    v134 = *((_QWORD *)this + 21);
                    if ((unint64_t)v135 >= v134)
                    {
                      v137 = (char *)*((_QWORD *)this + 19);
                      v138 = (v135 - v137) >> 3;
                      v139 = v138 + 1;
                      if ((unint64_t)(v138 + 1) >> 61)
                        goto LABEL_638;
                      v140 = v134 - (_QWORD)v137;
                      if (v140 >> 2 > v139)
                        v139 = v140 >> 2;
                      if ((unint64_t)v140 >= 0x7FFFFFFFFFFFFFF8)
                        v141 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v141 = v139;
                      if (v141)
                      {
                        v141 = (unint64_t)sub_2429112FC(v141);
                        v137 = (char *)*((_QWORD *)this + 19);
                        v135 = (char *)*((_QWORD *)this + 20);
                      }
                      else
                      {
                        v142 = 0;
                      }
                      v143 = (_QWORD *)(v141 + 8 * v138);
                      *v143 = 0;
                      v136 = v143 + 1;
                      while (v135 != v137)
                      {
                        v144 = *((_QWORD *)v135 - 1);
                        v135 -= 8;
                        *--v143 = v144;
                      }
                      *((_QWORD *)this + 19) = v143;
                      *((_QWORD *)this + 20) = v136;
                      *((_QWORD *)this + 21) = v141 + 8 * v142;
                      if (v137)
                        operator delete(v137);
                    }
                    else
                    {
                      *(_QWORD *)v135 = 0;
                      v136 = v135 + 8;
                    }
                    *((_QWORD *)this + 20) = v136;
                    v145 = *((_QWORD *)a2 + 1);
                    if (v145 > 0xFFFFFFFFFFFFFFF7 || v145 + 8 > *((_QWORD *)a2 + 2))
                      goto LABEL_254;
                    *(v136 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v145);
                    v133 = *((_QWORD *)a2 + 2);
                    v132 = *((_QWORD *)a2 + 1) + 8;
                    *((_QWORD *)a2 + 1) = v132;
                  }
                  goto LABEL_255;
                }
                v288 = (char *)*((_QWORD *)this + 20);
                v287 = *((_QWORD *)this + 21);
                if ((unint64_t)v288 >= v287)
                {
                  v365 = (char *)*((_QWORD *)this + 19);
                  v366 = (v288 - v365) >> 3;
                  v367 = v366 + 1;
                  if ((unint64_t)(v366 + 1) >> 61)
                    goto LABEL_638;
                  v368 = v287 - (_QWORD)v365;
                  if (v368 >> 2 > v367)
                    v367 = v368 >> 2;
                  if ((unint64_t)v368 >= 0x7FFFFFFFFFFFFFF8)
                    v369 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v369 = v367;
                  if (v369)
                  {
                    v369 = (unint64_t)sub_2429112FC(v369);
                    v365 = (char *)*((_QWORD *)this + 19);
                    v288 = (char *)*((_QWORD *)this + 20);
                  }
                  else
                  {
                    v370 = 0;
                  }
                  v391 = (_QWORD *)(v369 + 8 * v366);
                  *v391 = 0;
                  v274 = v391 + 1;
                  while (v288 != v365)
                  {
                    v392 = *((_QWORD *)v288 - 1);
                    v288 -= 8;
                    *--v391 = v392;
                  }
                  *((_QWORD *)this + 19) = v391;
                  *((_QWORD *)this + 20) = v274;
                  *((_QWORD *)this + 21) = v369 + 8 * v370;
                  if (v365)
                    operator delete(v365);
                }
                else
                {
                  *(_QWORD *)v288 = 0;
                  v274 = v288 + 8;
                }
                *((_QWORD *)this + 20) = v274;
                goto LABEL_629;
              case 166:
                if (v20 == 2)
                {
                  if ((PB::Reader::placeMark() & 1) != 0)
                    return 0;
                  v146 = *((_QWORD *)a2 + 1);
                  v147 = *((_QWORD *)a2 + 2);
                  while (v146 < v147 && !*((_BYTE *)a2 + 24))
                  {
                    v149 = (char *)*((_QWORD *)this + 26);
                    v148 = *((_QWORD *)this + 27);
                    if ((unint64_t)v149 >= v148)
                    {
                      v151 = (char *)*((_QWORD *)this + 25);
                      v152 = (v149 - v151) >> 3;
                      v153 = v152 + 1;
                      if ((unint64_t)(v152 + 1) >> 61)
                        goto LABEL_638;
                      v154 = v148 - (_QWORD)v151;
                      if (v154 >> 2 > v153)
                        v153 = v154 >> 2;
                      if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFF8)
                        v155 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v155 = v153;
                      if (v155)
                      {
                        v155 = (unint64_t)sub_2429112FC(v155);
                        v151 = (char *)*((_QWORD *)this + 25);
                        v149 = (char *)*((_QWORD *)this + 26);
                      }
                      else
                      {
                        v156 = 0;
                      }
                      v157 = (_QWORD *)(v155 + 8 * v152);
                      *v157 = 0;
                      v150 = v157 + 1;
                      while (v149 != v151)
                      {
                        v158 = *((_QWORD *)v149 - 1);
                        v149 -= 8;
                        *--v157 = v158;
                      }
                      *((_QWORD *)this + 25) = v157;
                      *((_QWORD *)this + 26) = v150;
                      *((_QWORD *)this + 27) = v155 + 8 * v156;
                      if (v151)
                        operator delete(v151);
                    }
                    else
                    {
                      *(_QWORD *)v149 = 0;
                      v150 = v149 + 8;
                    }
                    *((_QWORD *)this + 26) = v150;
                    v159 = *((_QWORD *)a2 + 1);
                    if (v159 > 0xFFFFFFFFFFFFFFF7 || v159 + 8 > *((_QWORD *)a2 + 2))
                    {
LABEL_254:
                      *((_BYTE *)a2 + 24) = 1;
                      break;
                    }
                    *(v150 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v159);
                    v147 = *((_QWORD *)a2 + 2);
                    v146 = *((_QWORD *)a2 + 1) + 8;
                    *((_QWORD *)a2 + 1) = v146;
                  }
LABEL_255:
                  PB::Reader::recallMark();
                }
                else
                {
                  v290 = (char *)*((_QWORD *)this + 26);
                  v289 = *((_QWORD *)this + 27);
                  if ((unint64_t)v290 >= v289)
                  {
                    v371 = (char *)*((_QWORD *)this + 25);
                    v372 = (v290 - v371) >> 3;
                    v373 = v372 + 1;
                    if ((unint64_t)(v372 + 1) >> 61)
LABEL_638:
                      sub_242729A44();
                    v374 = v289 - (_QWORD)v371;
                    if (v374 >> 2 > v373)
                      v373 = v374 >> 2;
                    if ((unint64_t)v374 >= 0x7FFFFFFFFFFFFFF8)
                      v375 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v375 = v373;
                    if (v375)
                    {
                      v375 = (unint64_t)sub_2429112FC(v375);
                      v371 = (char *)*((_QWORD *)this + 25);
                      v290 = (char *)*((_QWORD *)this + 26);
                    }
                    else
                    {
                      v376 = 0;
                    }
                    v393 = (_QWORD *)(v375 + 8 * v372);
                    *v393 = 0;
                    v274 = v393 + 1;
                    while (v290 != v371)
                    {
                      v394 = *((_QWORD *)v290 - 1);
                      v290 -= 8;
                      *--v393 = v394;
                    }
                    *((_QWORD *)this + 25) = v393;
                    *((_QWORD *)this + 26) = v274;
                    *((_QWORD *)this + 27) = v375 + 8 * v376;
                    if (v371)
                      operator delete(v371);
                  }
                  else
                  {
                    *(_QWORD *)v290 = 0;
                    v274 = v290 + 8;
                  }
                  *((_QWORD *)this + 26) = v274;
LABEL_629:
                  v395 = *((_QWORD *)a2 + 1);
                  if (v395 <= 0xFFFFFFFFFFFFFFF7 && v395 + 8 <= *((_QWORD *)a2 + 2))
                  {
                    *(v274 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v395);
LABEL_633:
                    *((_QWORD *)a2 + 1) += 8;
                  }
                  else
                  {
                    *((_BYTE *)a2 + 24) = 1;
                  }
                }
LABEL_20:
                v2 = *((_QWORD *)a2 + 1);
                v3 = *((_QWORD *)a2 + 2);
                v4 = *((unsigned __int8 *)a2 + 24);
                if (v2 >= v3 || v4 != 0)
                  return v4 == 0;
                continue;
              default:
                switch((int)v21)
                {
                  case 'e':
                    *((_DWORD *)this + 99) |= 0x10000000u;
                    v44 = *((_QWORD *)a2 + 1);
                    if (v44 >= *((_QWORD *)a2 + 2))
                    {
                      v47 = 0;
                      *((_BYTE *)a2 + 24) = 1;
                    }
                    else
                    {
                      v45 = v44 + 1;
                      v46 = *(unsigned __int8 *)(*(_QWORD *)a2 + v44);
                      *((_QWORD *)a2 + 1) = v45;
                      v47 = v46 != 0;
                    }
                    *((_BYTE *)this + 392) = v47;
                    goto LABEL_20;
                  case 'f':
                    *((_DWORD *)this + 99) |= 0x8000000u;
                    v256 = *((_QWORD *)a2 + 1);
                    if (v256 >= *((_QWORD *)a2 + 2))
                    {
                      v259 = 0;
                      *((_BYTE *)a2 + 24) = 1;
                    }
                    else
                    {
                      v257 = v256 + 1;
                      v258 = *(unsigned __int8 *)(*(_QWORD *)a2 + v256);
                      *((_QWORD *)a2 + 1) = v257;
                      v259 = v258 != 0;
                    }
                    *((_BYTE *)this + 391) = v259;
                    goto LABEL_20;
                  case 'g':
                    *((_DWORD *)this + 99) |= 0x20000000u;
                    v260 = *((_QWORD *)a2 + 1);
                    if (v260 >= *((_QWORD *)a2 + 2))
                    {
                      v263 = 0;
                      *((_BYTE *)a2 + 24) = 1;
                    }
                    else
                    {
                      v261 = v260 + 1;
                      v262 = *(unsigned __int8 *)(*(_QWORD *)a2 + v260);
                      *((_QWORD *)a2 + 1) = v261;
                      v263 = v262 != 0;
                    }
                    *((_BYTE *)this + 393) = v263;
                    goto LABEL_20;
                  case 'h':
                    *((_DWORD *)this + 99) |= 0x2000000u;
                    v264 = *((_QWORD *)a2 + 1);
                    if (v264 >= *((_QWORD *)a2 + 2))
                    {
                      v267 = 0;
                      *((_BYTE *)a2 + 24) = 1;
                    }
                    else
                    {
                      v265 = v264 + 1;
                      v266 = *(unsigned __int8 *)(*(_QWORD *)a2 + v264);
                      *((_QWORD *)a2 + 1) = v265;
                      v267 = v266 != 0;
                    }
                    *((_BYTE *)this + 389) = v267;
                    goto LABEL_20;
                  case 'i':
                    *((_DWORD *)this + 99) |= 0x4000000u;
                    v268 = *((_QWORD *)a2 + 1);
                    if (v268 >= *((_QWORD *)a2 + 2))
                    {
                      v271 = 0;
                      *((_BYTE *)a2 + 24) = 1;
                    }
                    else
                    {
                      v269 = v268 + 1;
                      v270 = *(unsigned __int8 *)(*(_QWORD *)a2 + v268);
                      *((_QWORD *)a2 + 1) = v269;
                      v271 = v270 != 0;
                    }
                    *((_BYTE *)this + 390) = v271;
                    goto LABEL_20;
                  default:
                    goto LABEL_19;
                }
            }
        }
      }
      v4 = 0;
      return v4 == 0;
    }
    break;
  }
  v15 = 0;
  v16 = 0;
  v11 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v17 = v2 + 1;
    v18 = *(_BYTE *)(v8 + v2);
    *((_QWORD *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0)
      goto LABEL_25;
    v15 += 7;
    v2 = v17;
    v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  if ((PB::Reader::skip(a2) & 1) != 0)
    goto LABEL_20;
  return 0;
}

uint64_t CMMsl::FallDetectionWristStateReplay::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;
  double *v11;
  double *v12;
  double v13;
  double *v14;
  double *v15;
  double v16;
  double *v17;
  double *v18;
  double v19;
  double *v20;
  double *v21;
  double v22;
  double *v23;
  double *v24;
  double v25;
  double *v26;
  double *v27;
  double v28;
  double *v29;
  double *v30;
  double v31;

  v3 = this;
  v4 = *(_DWORD *)(this + 396);
  if ((v4 & 0x80000) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_DWORD *)(v3 + 396);
    if ((v4 & 0x1000000) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_64;
    }
  }
  else if ((v4 & 0x1000000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 0x40000) == 0)
      goto LABEL_5;
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::write(a2, *(double *)(v3 + 224));
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x40000) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      goto LABEL_6;
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::write(a2, *(double *)(v3 + 368));
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 2) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_68;
  }
LABEL_67:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x20) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_69;
  }
LABEL_68:
  this = PB::Writer::write(a2, *(double *)(v3 + 264));
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_70;
  }
LABEL_69:
  this = PB::Writer::write(a2, *(double *)(v3 + 288));
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x400) == 0)
  {
LABEL_10:
    if ((v4 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_71;
  }
LABEL_70:
  this = PB::Writer::write(a2, *(double *)(v3 + 304));
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x200) == 0)
  {
LABEL_11:
    if ((v4 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_72;
  }
LABEL_71:
  this = PB::Writer::write(a2, *(double *)(v3 + 296));
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x80) == 0)
  {
LABEL_12:
    if ((v4 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_73;
  }
LABEL_72:
  this = PB::Writer::write(a2, *(double *)(v3 + 280));
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x40) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_74;
  }
LABEL_73:
  this = PB::Writer::write(a2, *(double *)(v3 + 272));
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x1000) == 0)
  {
LABEL_14:
    if ((v4 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_75;
  }
LABEL_74:
  this = PB::Writer::write(a2, *(double *)(v3 + 320));
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x800) == 0)
  {
LABEL_15:
    if ((v4 & 0x20000) == 0)
      goto LABEL_16;
    goto LABEL_76;
  }
LABEL_75:
  this = PB::Writer::write(a2, *(double *)(v3 + 312));
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x20000) == 0)
  {
LABEL_16:
    if ((v4 & 0x10000) == 0)
      goto LABEL_17;
    goto LABEL_77;
  }
LABEL_76:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x10000) == 0)
  {
LABEL_17:
    if ((v4 & 0x8000) == 0)
      goto LABEL_18;
    goto LABEL_78;
  }
LABEL_77:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x8000) == 0)
  {
LABEL_18:
    if ((v4 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_79;
  }
LABEL_78:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x4000) == 0)
  {
LABEL_19:
    if ((v4 & 0x2000) == 0)
      goto LABEL_20;
    goto LABEL_80;
  }
LABEL_79:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x2000) == 0)
  {
LABEL_20:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_21;
    goto LABEL_81;
  }
LABEL_80:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_21:
    if ((v4 & 4) == 0)
      goto LABEL_22;
    goto LABEL_82;
  }
LABEL_81:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 4) == 0)
  {
LABEL_22:
    if ((v4 & 8) == 0)
      goto LABEL_23;
    goto LABEL_83;
  }
LABEL_82:
  this = PB::Writer::write(a2, *(double *)(v3 + 240));
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 8) == 0)
  {
LABEL_23:
    if ((v4 & 0x100000) == 0)
      goto LABEL_24;
    goto LABEL_84;
  }
LABEL_83:
  this = PB::Writer::write(a2, *(double *)(v3 + 248));
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x100000) == 0)
  {
LABEL_24:
    if ((v4 & 0x400000) == 0)
      goto LABEL_25;
    goto LABEL_85;
  }
LABEL_84:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x400000) == 0)
  {
LABEL_25:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_26;
    goto LABEL_86;
  }
LABEL_85:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_26:
    if ((v4 & 0x200000) == 0)
      goto LABEL_27;
    goto LABEL_87;
  }
LABEL_86:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x200000) == 0)
  {
LABEL_27:
    if ((v4 & 0x800000) == 0)
      goto LABEL_28;
    goto LABEL_88;
  }
LABEL_87:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x800000) == 0)
  {
LABEL_28:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_29;
    goto LABEL_89;
  }
LABEL_88:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_30;
    goto LABEL_90;
  }
LABEL_89:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_30:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_31;
    goto LABEL_91;
  }
LABEL_90:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_32;
LABEL_92:
    this = PB::Writer::write(a2);
    if ((*(_DWORD *)(v3 + 396) & 0x4000000) == 0)
      goto LABEL_34;
    goto LABEL_33;
  }
LABEL_91:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x2000000) != 0)
    goto LABEL_92;
LABEL_32:
  if ((v4 & 0x4000000) != 0)
LABEL_33:
    this = PB::Writer::write(a2);
LABEL_34:
  v5 = *(double **)(v3 + 32);
  v6 = *(double **)(v3 + 40);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7);
  }
  v8 = *(double **)(v3 + 8);
  v9 = *(double **)(v3 + 16);
  while (v8 != v9)
  {
    v10 = *v8++;
    this = PB::Writer::write(a2, v10);
  }
  v11 = *(double **)(v3 + 56);
  v12 = *(double **)(v3 + 64);
  while (v11 != v12)
  {
    v13 = *v11++;
    this = PB::Writer::write(a2, v13);
  }
  v14 = *(double **)(v3 + 104);
  v15 = *(double **)(v3 + 112);
  while (v14 != v15)
  {
    v16 = *v14++;
    this = PB::Writer::write(a2, v16);
  }
  v17 = *(double **)(v3 + 80);
  v18 = *(double **)(v3 + 88);
  while (v17 != v18)
  {
    v19 = *v17++;
    this = PB::Writer::write(a2, v19);
  }
  v20 = *(double **)(v3 + 128);
  v21 = *(double **)(v3 + 136);
  while (v20 != v21)
  {
    v22 = *v20++;
    this = PB::Writer::write(a2, v22);
  }
  v23 = *(double **)(v3 + 176);
  v24 = *(double **)(v3 + 184);
  while (v23 != v24)
  {
    v25 = *v23++;
    this = PB::Writer::write(a2, v25);
  }
  v26 = *(double **)(v3 + 152);
  v27 = *(double **)(v3 + 160);
  while (v26 != v27)
  {
    v28 = *v26++;
    this = PB::Writer::write(a2, v28);
  }
  v30 = *(double **)(v3 + 200);
  v29 = *(double **)(v3 + 208);
  while (v30 != v29)
  {
    v31 = *v30++;
    this = PB::Writer::write(a2, v31);
  }
  return this;
}

BOOL CMMsl::FallDetectionWristStateReplay::operator==(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double *v23;
  double *v24;
  double *v25;
  double *v26;
  double *v27;
  double *v28;
  double *v29;
  double *v30;
  double *v31;
  double *v32;
  double *v33;
  double *v34;
  double *v35;
  double *v36;
  double *v37;
  double *v38;
  double *v39;
  double *v40;
  double *v41;
  double *v42;
  double *v43;
  double *v44;
  double *v45;
  double *v46;
  uint64_t v47;
  uint64_t v48;
  double *v49;
  uint64_t v50;
  double v51;
  _BOOL8 result;
  BOOL v53;

  v3 = *(_DWORD *)(a1 + 396);
  v4 = *(_DWORD *)(a2 + 396);
  if ((v3 & 0x80000) != 0)
  {
    if ((v4 & 0x80000) == 0)
      return 0;
    v5 = *(_QWORD *)(a1 + 376);
    v6 = *(_QWORD *)(a2 + 376);
    v2 = __OFSUB__(v5, v6);
    if (v5 != v6)
      return 0;
  }
  else if ((v4 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x1000000) != 0)
  {
    if ((v4 & 0x1000000) == 0)
      return 0;
    v7 = *(unsigned __int8 *)(a1 + 388);
    v8 = *(unsigned __int8 *)(a2 + 388);
    v2 = __OFSUB__(v7, v8);
    if (v7 != v8)
      return 0;
  }
  else if ((v4 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v3 & 1) != 0)
  {
    if ((v4 & 1) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 224) != *(double *)(a2 + 224))
      return 0;
  }
  else if ((v4 & 1) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40000) != 0)
  {
    if ((v4 & 0x40000) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 368) != *(double *)(a2 + 368))
      return 0;
  }
  else if ((v4 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v3 & 2) != 0)
  {
    if ((v4 & 2) == 0)
      return 0;
    v9 = *(_QWORD *)(a1 + 232);
    v10 = *(_QWORD *)(a2 + 232);
    v2 = __OFSUB__(v9, v10);
    if (v9 != v10)
      return 0;
  }
  else if ((v4 & 2) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10) != 0)
  {
    if ((v4 & 0x10) == 0)
      return 0;
    v11 = *(_QWORD *)(a1 + 256);
    v12 = *(_QWORD *)(a2 + 256);
    v2 = __OFSUB__(v11, v12);
    if (v11 != v12)
      return 0;
  }
  else if ((v4 & 0x10) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20) != 0)
  {
    if ((v4 & 0x20) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 264) != *(double *)(a2 + 264))
      return 0;
  }
  else if ((v4 & 0x20) != 0)
  {
    return 0;
  }
  if ((v3 & 0x100) != 0)
  {
    if ((v4 & 0x100) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 288) != *(double *)(a2 + 288))
      return 0;
  }
  else if ((v4 & 0x100) != 0)
  {
    return 0;
  }
  if ((v3 & 0x400) != 0)
  {
    if ((v4 & 0x400) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 304) != *(double *)(a2 + 304))
      return 0;
  }
  else if ((v4 & 0x400) != 0)
  {
    return 0;
  }
  if ((v3 & 0x200) != 0)
  {
    if ((v4 & 0x200) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 296) != *(double *)(a2 + 296))
      return 0;
  }
  else if ((v4 & 0x200) != 0)
  {
    return 0;
  }
  if ((v3 & 0x80) != 0)
  {
    if ((v4 & 0x80) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 280) != *(double *)(a2 + 280))
      return 0;
  }
  else if ((v4 & 0x80) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40) != 0)
  {
    if ((v4 & 0x40) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 272) != *(double *)(a2 + 272))
      return 0;
  }
  else if ((v4 & 0x40) != 0)
  {
    return 0;
  }
  if ((v3 & 0x1000) != 0)
  {
    if ((v4 & 0x1000) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 320) != *(double *)(a2 + 320))
      return 0;
  }
  else if ((v4 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x800) != 0)
  {
    if ((v4 & 0x800) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 312) != *(double *)(a2 + 312))
      return 0;
  }
  else if ((v4 & 0x800) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20000) != 0)
  {
    if ((v4 & 0x20000) == 0)
      return 0;
    v13 = *(_QWORD *)(a1 + 360);
    v14 = *(_QWORD *)(a2 + 360);
    v2 = __OFSUB__(v13, v14);
    if (v13 != v14)
      return 0;
  }
  else if ((v4 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10000) != 0)
  {
    if ((v4 & 0x10000) == 0)
      return 0;
    v15 = *(_QWORD *)(a1 + 352);
    v16 = *(_QWORD *)(a2 + 352);
    v2 = __OFSUB__(v15, v16);
    if (v15 != v16)
      return 0;
  }
  else if ((v4 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x8000) != 0)
  {
    if ((v4 & 0x8000) == 0)
      return 0;
    v17 = *(_QWORD *)(a1 + 344);
    v18 = *(_QWORD *)(a2 + 344);
    v2 = __OFSUB__(v17, v18);
    if (v17 != v18)
      return 0;
  }
  else if ((v4 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x4000) != 0)
  {
    if ((v4 & 0x4000) == 0)
      return 0;
    v19 = *(_QWORD *)(a1 + 336);
    v20 = *(_QWORD *)(a2 + 336);
    v2 = __OFSUB__(v19, v20);
    if (v19 != v20)
      return 0;
  }
  else if ((v4 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x2000) != 0)
  {
    if ((v4 & 0x2000) == 0)
      return 0;
    v21 = *(_QWORD *)(a1 + 328);
    v22 = *(_QWORD *)(a2 + 328);
    v2 = __OFSUB__(v21, v22);
    if (v21 != v22)
      return 0;
  }
  else if ((v4 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v4 & v3) < 0 != v2)
  {
    if (*(unsigned __int8 *)(a1 + 395) != *(unsigned __int8 *)(a2 + 395))
      return 0;
  }
  else if ((v4 | v3) < 0)
  {
    return 0;
  }
  if ((v3 & 4) != 0)
  {
    if ((v4 & 4) == 0 || *(double *)(a1 + 240) != *(double *)(a2 + 240))
      return 0;
  }
  else if ((v4 & 4) != 0)
  {
    return 0;
  }
  if ((v3 & 8) != 0)
  {
    if ((v4 & 8) == 0 || *(double *)(a1 + 248) != *(double *)(a2 + 248))
      return 0;
  }
  else if ((v4 & 8) != 0)
  {
    return 0;
  }
  if ((v3 & 0x100000) != 0)
  {
    if ((v4 & 0x100000) == 0 || *(unsigned __int8 *)(a1 + 384) != *(unsigned __int8 *)(a2 + 384))
      return 0;
  }
  else if ((v4 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x400000) != 0)
  {
    if ((v4 & 0x400000) == 0 || *(unsigned __int8 *)(a1 + 386) != *(unsigned __int8 *)(a2 + 386))
      return 0;
  }
  else if ((v4 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40000000) != 0)
  {
    if ((v4 & 0x40000000) == 0 || *(unsigned __int8 *)(a1 + 394) != *(unsigned __int8 *)(a2 + 394))
      return 0;
  }
  else if ((v4 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x200000) != 0)
  {
    if ((v4 & 0x200000) == 0 || *(unsigned __int8 *)(a1 + 385) != *(unsigned __int8 *)(a2 + 385))
      return 0;
  }
  else if ((v4 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x800000) != 0)
  {
    if ((v4 & 0x800000) == 0 || *(unsigned __int8 *)(a1 + 387) != *(unsigned __int8 *)(a2 + 387))
      return 0;
  }
  else if ((v4 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10000000) != 0)
  {
    if ((v4 & 0x10000000) == 0 || *(unsigned __int8 *)(a1 + 392) != *(unsigned __int8 *)(a2 + 392))
      return 0;
  }
  else if ((v4 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x8000000) != 0)
  {
    if ((v4 & 0x8000000) == 0 || *(unsigned __int8 *)(a1 + 391) != *(unsigned __int8 *)(a2 + 391))
      return 0;
  }
  else if ((v4 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20000000) != 0)
  {
    if ((v4 & 0x20000000) == 0 || *(unsigned __int8 *)(a1 + 393) != *(unsigned __int8 *)(a2 + 393))
      return 0;
  }
  else if ((v4 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x2000000) != 0)
  {
    if ((v4 & 0x2000000) == 0 || *(unsigned __int8 *)(a1 + 389) != *(unsigned __int8 *)(a2 + 389))
      return 0;
  }
  else if ((v4 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x4000000) != 0)
  {
    if ((v4 & 0x4000000) == 0 || *(unsigned __int8 *)(a1 + 390) != *(unsigned __int8 *)(a2 + 390))
      return 0;
  }
  else if ((v4 & 0x4000000) != 0)
  {
    return 0;
  }
  v24 = *(double **)(a1 + 32);
  v23 = *(double **)(a1 + 40);
  v25 = *(double **)(a2 + 32);
  if ((char *)v23 - (char *)v24 != *(_QWORD *)(a2 + 40) - (_QWORD)v25)
    return 0;
  while (v24 != v23)
  {
    if (*v24 != *v25)
      return 0;
    ++v24;
    ++v25;
  }
  v27 = *(double **)(a1 + 8);
  v26 = *(double **)(a1 + 16);
  v28 = *(double **)(a2 + 8);
  if ((char *)v26 - (char *)v27 != *(_QWORD *)(a2 + 16) - (_QWORD)v28)
    return 0;
  while (v27 != v26)
  {
    if (*v27 != *v28)
      return 0;
    ++v27;
    ++v28;
  }
  v30 = *(double **)(a1 + 56);
  v29 = *(double **)(a1 + 64);
  v31 = *(double **)(a2 + 56);
  if ((char *)v29 - (char *)v30 != *(_QWORD *)(a2 + 64) - (_QWORD)v31)
    return 0;
  while (v30 != v29)
  {
    if (*v30 != *v31)
      return 0;
    ++v30;
    ++v31;
  }
  v33 = *(double **)(a1 + 104);
  v32 = *(double **)(a1 + 112);
  v34 = *(double **)(a2 + 104);
  if ((char *)v32 - (char *)v33 != *(_QWORD *)(a2 + 112) - (_QWORD)v34)
    return 0;
  while (v33 != v32)
  {
    if (*v33 != *v34)
      return 0;
    ++v33;
    ++v34;
  }
  v36 = *(double **)(a1 + 80);
  v35 = *(double **)(a1 + 88);
  v37 = *(double **)(a2 + 80);
  if ((char *)v35 - (char *)v36 != *(_QWORD *)(a2 + 88) - (_QWORD)v37)
    return 0;
  while (v36 != v35)
  {
    if (*v36 != *v37)
      return 0;
    ++v36;
    ++v37;
  }
  v39 = *(double **)(a1 + 128);
  v38 = *(double **)(a1 + 136);
  v40 = *(double **)(a2 + 128);
  if ((char *)v38 - (char *)v39 != *(_QWORD *)(a2 + 136) - (_QWORD)v40)
    return 0;
  while (v39 != v38)
  {
    if (*v39 != *v40)
      return 0;
    ++v39;
    ++v40;
  }
  v42 = *(double **)(a1 + 176);
  v41 = *(double **)(a1 + 184);
  v43 = *(double **)(a2 + 176);
  if ((char *)v41 - (char *)v42 != *(_QWORD *)(a2 + 184) - (_QWORD)v43)
    return 0;
  while (v42 != v41)
  {
    if (*v42 != *v43)
      return 0;
    ++v42;
    ++v43;
  }
  v45 = *(double **)(a1 + 152);
  v44 = *(double **)(a1 + 160);
  v46 = *(double **)(a2 + 152);
  if ((char *)v44 - (char *)v45 != *(_QWORD *)(a2 + 160) - (_QWORD)v46)
    return 0;
  while (v45 != v44)
  {
    if (*v45 != *v46)
      return 0;
    ++v45;
    ++v46;
  }
  v48 = *(_QWORD *)(a1 + 200);
  v47 = *(_QWORD *)(a1 + 208);
  v49 = *(double **)(a2 + 200);
  if (v47 - v48 != *(_QWORD *)(a2 + 208) - (_QWORD)v49)
    return 0;
  if (v48 == v47)
    return 1;
  v50 = v48 + 8;
  do
  {
    v51 = *v49++;
    result = *(double *)(v50 - 8) == v51;
    v53 = *(double *)(v50 - 8) != v51 || v50 == v47;
    v50 += 8;
  }
  while (!v53);
  return result;
}

uint64_t CMMsl::FallDetectionWristStateReplay::hash_value(CMMsl::FallDetectionWristStateReplay *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  double v46;

  v2 = *((_DWORD *)this + 99);
  if ((v2 & 0x80000) != 0)
  {
    v3 = *((_QWORD *)this + 47);
    if ((v2 & 0x1000000) != 0)
    {
LABEL_3:
      v4 = *((unsigned __int8 *)this + 388);
      if ((v2 & 1) != 0)
        goto LABEL_4;
LABEL_69:
      v46 = 0.0;
      if ((v2 & 0x40000) != 0)
        goto LABEL_7;
LABEL_70:
      v45 = 0.0;
      if ((v2 & 2) != 0)
        goto LABEL_10;
      goto LABEL_71;
    }
  }
  else
  {
    v3 = 0;
    if ((v2 & 0x1000000) != 0)
      goto LABEL_3;
  }
  v4 = 0;
  if ((v2 & 1) == 0)
    goto LABEL_69;
LABEL_4:
  v5 = *((double *)this + 28);
  if (v5 == 0.0)
    v5 = 0.0;
  v46 = v5;
  if ((v2 & 0x40000) == 0)
    goto LABEL_70;
LABEL_7:
  v6 = *((double *)this + 46);
  if (v6 == 0.0)
    v6 = 0.0;
  v45 = v6;
  if ((v2 & 2) != 0)
  {
LABEL_10:
    v44 = *((_QWORD *)this + 29);
    if ((v2 & 0x10) != 0)
      goto LABEL_11;
    goto LABEL_72;
  }
LABEL_71:
  v44 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_11:
    v43 = *((_QWORD *)this + 32);
    if ((v2 & 0x20) != 0)
      goto LABEL_12;
LABEL_73:
    v42 = 0.0;
    if ((v2 & 0x100) != 0)
      goto LABEL_15;
LABEL_74:
    v8 = 0;
    if ((v2 & 0x400) != 0)
      goto LABEL_19;
LABEL_75:
    v9 = 0;
    if ((v2 & 0x200) != 0)
      goto LABEL_23;
LABEL_76:
    v10 = 0;
    if ((v2 & 0x80) != 0)
      goto LABEL_27;
LABEL_77:
    v11 = 0;
    if ((v2 & 0x40) != 0)
      goto LABEL_31;
LABEL_78:
    v12 = 0;
    if ((v2 & 0x1000) != 0)
      goto LABEL_35;
LABEL_79:
    v13 = 0;
    if ((v2 & 0x800) != 0)
      goto LABEL_39;
LABEL_80:
    v14 = 0;
    if ((v2 & 0x20000) != 0)
      goto LABEL_43;
    goto LABEL_81;
  }
LABEL_72:
  v43 = 0;
  if ((v2 & 0x20) == 0)
    goto LABEL_73;
LABEL_12:
  v7 = *((double *)this + 33);
  if (v7 == 0.0)
    v7 = 0.0;
  v42 = v7;
  if ((v2 & 0x100) == 0)
    goto LABEL_74;
LABEL_15:
  if (*((double *)this + 36) == 0.0)
    v8 = 0;
  else
    v8 = *((_QWORD *)this + 36);
  if ((v2 & 0x400) == 0)
    goto LABEL_75;
LABEL_19:
  if (*((double *)this + 38) == 0.0)
    v9 = 0;
  else
    v9 = *((_QWORD *)this + 38);
  if ((v2 & 0x200) == 0)
    goto LABEL_76;
LABEL_23:
  if (*((double *)this + 37) == 0.0)
    v10 = 0;
  else
    v10 = *((_QWORD *)this + 37);
  if ((v2 & 0x80) == 0)
    goto LABEL_77;
LABEL_27:
  if (*((double *)this + 35) == 0.0)
    v11 = 0;
  else
    v11 = *((_QWORD *)this + 35);
  if ((v2 & 0x40) == 0)
    goto LABEL_78;
LABEL_31:
  if (*((double *)this + 34) == 0.0)
    v12 = 0;
  else
    v12 = *((_QWORD *)this + 34);
  if ((v2 & 0x1000) == 0)
    goto LABEL_79;
LABEL_35:
  if (*((double *)this + 40) == 0.0)
    v13 = 0;
  else
    v13 = *((_QWORD *)this + 40);
  if ((v2 & 0x800) == 0)
    goto LABEL_80;
LABEL_39:
  if (*((double *)this + 39) == 0.0)
    v14 = 0;
  else
    v14 = *((_QWORD *)this + 39);
  if ((v2 & 0x20000) != 0)
  {
LABEL_43:
    v15 = *((_QWORD *)this + 45);
    if ((v2 & 0x10000) != 0)
      goto LABEL_44;
    goto LABEL_82;
  }
LABEL_81:
  v15 = 0;
  if ((v2 & 0x10000) != 0)
  {
LABEL_44:
    v16 = *((_QWORD *)this + 44);
    if ((v2 & 0x8000) != 0)
      goto LABEL_45;
    goto LABEL_83;
  }
LABEL_82:
  v16 = 0;
  if ((v2 & 0x8000) != 0)
  {
LABEL_45:
    v17 = *((_QWORD *)this + 43);
    if ((v2 & 0x4000) != 0)
      goto LABEL_46;
    goto LABEL_84;
  }
LABEL_83:
  v17 = 0;
  if ((v2 & 0x4000) != 0)
  {
LABEL_46:
    v18 = *((_QWORD *)this + 42);
    if ((v2 & 0x2000) != 0)
      goto LABEL_47;
    goto LABEL_85;
  }
LABEL_84:
  v18 = 0;
  if ((v2 & 0x2000) != 0)
  {
LABEL_47:
    v19 = *((_QWORD *)this + 41);
    if (v2 < 0)
      goto LABEL_48;
    goto LABEL_86;
  }
LABEL_85:
  v19 = 0;
  if (v2 < 0)
  {
LABEL_48:
    v20 = *((unsigned __int8 *)this + 395);
    if ((v2 & 4) != 0)
      goto LABEL_49;
LABEL_87:
    v21 = 0;
    if ((v2 & 8) != 0)
      goto LABEL_53;
LABEL_88:
    v22 = 0;
    if ((v2 & 0x100000) != 0)
      goto LABEL_57;
    goto LABEL_89;
  }
LABEL_86:
  v20 = 0;
  if ((v2 & 4) == 0)
    goto LABEL_87;
LABEL_49:
  if (*((double *)this + 30) == 0.0)
    v21 = 0;
  else
    v21 = *((_QWORD *)this + 30);
  if ((v2 & 8) == 0)
    goto LABEL_88;
LABEL_53:
  if (*((double *)this + 31) == 0.0)
    v22 = 0;
  else
    v22 = *((_QWORD *)this + 31);
  if ((v2 & 0x100000) != 0)
  {
LABEL_57:
    v23 = *((unsigned __int8 *)this + 384);
    if ((v2 & 0x400000) != 0)
      goto LABEL_58;
    goto LABEL_90;
  }
LABEL_89:
  v23 = 0;
  if ((v2 & 0x400000) != 0)
  {
LABEL_58:
    v24 = *((unsigned __int8 *)this + 386);
    if ((v2 & 0x40000000) != 0)
      goto LABEL_59;
    goto LABEL_91;
  }
LABEL_90:
  v24 = 0;
  if ((v2 & 0x40000000) != 0)
  {
LABEL_59:
    v25 = *((unsigned __int8 *)this + 394);
    if ((v2 & 0x200000) != 0)
      goto LABEL_60;
    goto LABEL_92;
  }
LABEL_91:
  v25 = 0;
  if ((v2 & 0x200000) != 0)
  {
LABEL_60:
    v26 = *((unsigned __int8 *)this + 385);
    if ((v2 & 0x800000) != 0)
      goto LABEL_61;
    goto LABEL_93;
  }
LABEL_92:
  v26 = 0;
  if ((v2 & 0x800000) != 0)
  {
LABEL_61:
    v27 = *((unsigned __int8 *)this + 387);
    if ((v2 & 0x10000000) != 0)
      goto LABEL_62;
    goto LABEL_94;
  }
LABEL_93:
  v27 = 0;
  if ((v2 & 0x10000000) != 0)
  {
LABEL_62:
    v28 = *((unsigned __int8 *)this + 392);
    if ((v2 & 0x8000000) != 0)
      goto LABEL_63;
    goto LABEL_95;
  }
LABEL_94:
  v28 = 0;
  if ((v2 & 0x8000000) != 0)
  {
LABEL_63:
    v29 = *((unsigned __int8 *)this + 391);
    if ((v2 & 0x20000000) != 0)
      goto LABEL_64;
    goto LABEL_96;
  }
LABEL_95:
  v29 = 0;
  if ((v2 & 0x20000000) != 0)
  {
LABEL_64:
    v30 = *((unsigned __int8 *)this + 393);
    if ((v2 & 0x2000000) != 0)
      goto LABEL_65;
LABEL_97:
    v31 = 0;
    if ((v2 & 0x4000000) != 0)
      goto LABEL_66;
LABEL_98:
    v32 = 0;
    goto LABEL_99;
  }
LABEL_96:
  v30 = 0;
  if ((v2 & 0x2000000) == 0)
    goto LABEL_97;
LABEL_65:
  v31 = *((unsigned __int8 *)this + 389);
  if ((v2 & 0x4000000) == 0)
    goto LABEL_98;
LABEL_66:
  v32 = *((unsigned __int8 *)this + 390);
LABEL_99:
  v33 = v4 ^ v3 ^ *(_QWORD *)&v46 ^ *(_QWORD *)&v45 ^ v44 ^ v43 ^ *(_QWORD *)&v42 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v30 ^ v31 ^ v32 ^ PBHashBytes();
  v34 = PBHashBytes();
  v35 = v34 ^ PBHashBytes();
  v36 = v33 ^ v35 ^ PBHashBytes();
  v37 = PBHashBytes();
  v38 = v37 ^ PBHashBytes();
  v39 = v38 ^ PBHashBytes();
  v40 = v36 ^ v39 ^ PBHashBytes();
  return v40 ^ PBHashBytes();
}

uint64_t CMMsl::FallDistanceReplay::FallDistanceReplay(uint64_t this)
{
  *(_QWORD *)this = &off_25135D7C0;
  *(_DWORD *)(this + 72) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135D7C0;
  *(_DWORD *)(this + 72) = 0;
  return this;
}

void CMMsl::FallDistanceReplay::~FallDistanceReplay(CMMsl::FallDistanceReplay *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::FallDistanceReplay::FallDistanceReplay(CMMsl::FallDistanceReplay *this, const CMMsl::FallDistanceReplay *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)this = &off_25135D7C0;
  *((_DWORD *)this + 18) = 0;
  v2 = *((_WORD *)a2 + 36);
  if ((v2 & 4) != 0)
  {
    v4 = *((_QWORD *)a2 + 3);
    v3 = 4;
    *((_WORD *)this + 36) = 4;
    *((_QWORD *)this + 3) = v4;
    v2 = *((_WORD *)a2 + 36);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 8) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 4);
    v3 |= 8u;
    *((_WORD *)this + 36) = v3;
    *((_QWORD *)this + 4) = v5;
    v2 = *((_WORD *)a2 + 36);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *((_QWORD *)a2 + 2);
    v3 |= 2u;
    *((_WORD *)this + 36) = v3;
    *((_QWORD *)this + 2) = v6;
    v2 = *((_WORD *)a2 + 36);
    if ((v2 & 0x200) == 0)
    {
LABEL_8:
      if ((v2 & 0x100) == 0)
        goto LABEL_9;
      goto LABEL_17;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 17);
  v3 |= 0x200u;
  *((_WORD *)this + 36) = v3;
  *((_DWORD *)this + 17) = v7;
  v2 = *((_WORD *)a2 + 36);
  if ((v2 & 0x100) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_18;
  }
LABEL_17:
  LODWORD(v4) = *((_DWORD *)a2 + 16);
  v3 |= 0x100u;
  *((_WORD *)this + 36) = v3;
  *((_DWORD *)this + 16) = v4;
  v2 = *((_WORD *)a2 + 36);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x20) == 0)
      goto LABEL_11;
    goto LABEL_19;
  }
LABEL_18:
  v8 = *((_QWORD *)a2 + 5);
  v3 |= 0x10u;
  *((_WORD *)this + 36) = v3;
  *((_QWORD *)this + 5) = v8;
  v2 = *((_WORD *)a2 + 36);
  if ((v2 & 0x20) == 0)
  {
LABEL_11:
    if ((v2 & 1) == 0)
      goto LABEL_12;
    goto LABEL_20;
  }
LABEL_19:
  v9 = *((_QWORD *)a2 + 6);
  v3 |= 0x20u;
  *((_WORD *)this + 36) = v3;
  *((_QWORD *)this + 6) = v9;
  v2 = *((_WORD *)a2 + 36);
  if ((v2 & 1) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0)
      goto LABEL_13;
    goto LABEL_21;
  }
LABEL_20:
  v10 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *((_WORD *)this + 36) = v3;
  *((_QWORD *)this + 1) = v10;
  v2 = *((_WORD *)a2 + 36);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 0x40) == 0)
      return *(float *)&v4;
    goto LABEL_22;
  }
LABEL_21:
  LODWORD(v4) = *((_DWORD *)a2 + 15);
  v3 |= 0x80u;
  *((_WORD *)this + 36) = v3;
  *((_DWORD *)this + 15) = v4;
  if ((*((_WORD *)a2 + 36) & 0x40) == 0)
    return *(float *)&v4;
LABEL_22:
  LODWORD(v4) = *((_DWORD *)a2 + 14);
  *((_WORD *)this + 36) = v3 | 0x40;
  *((_DWORD *)this + 14) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::FallDistanceReplay::operator=(uint64_t a1, const CMMsl::FallDistanceReplay *a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  if ((const CMMsl::FallDistanceReplay *)a1 != a2)
  {
    CMMsl::FallDistanceReplay::FallDistanceReplay((CMMsl::FallDistanceReplay *)&v9, a2);
    v3 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v11;
    v11 = v3;
    v4 = *(_QWORD *)(a1 + 68);
    *(_QWORD *)(a1 + 68) = v16;
    v16 = v4;
    LODWORD(v3) = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v15;
    v15 = v3;
    v5 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v12;
    v12 = v5;
    v6 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v13;
    v13 = v6;
    v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v7;
    *(_QWORD *)&v7 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v14;
    v14 = v7;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::FallDistanceReplay *a2, CMMsl::FallDistanceReplay *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float result;

  v3 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v3;
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v4;
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  LODWORD(v6) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v6;
  LODWORD(v4) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v4;
  v7 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v7;
  v8 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v8;
  v9 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v9;
  LODWORD(v4) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  result = *((float *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((float *)a2 + 14) = result;
  return result;
}

float CMMsl::FallDistanceReplay::FallDistanceReplay(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135D7C0;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  result = *(float *)(a2 + 56);
  *(float *)(a1 + 56) = result;
  return result;
}

uint64_t CMMsl::FallDistanceReplay::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  void (**v11)(CMMsl::FallDistanceReplay *__hidden);
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;

  if (a1 != a2)
  {
    v11 = &off_25135D7C0;
    v3 = *(_QWORD *)(a2 + 24);
    v4 = *(_DWORD *)(a2 + 64);
    v5 = *(_QWORD *)(a2 + 48);
    v6 = *(_QWORD *)(a2 + 68);
    *(_DWORD *)(a2 + 72) = 0;
    v7 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v3;
    v13 = v7;
    v18 = *(_QWORD *)(a1 + 68);
    v17 = *(_DWORD *)(a1 + 64);
    v14 = *(_OWORD *)(a1 + 32);
    v15 = *(_QWORD *)(a1 + 48);
    v8 = *(_OWORD *)(a1 + 8);
    v9 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = v5;
    *(_OWORD *)(a1 + 8) = v9;
    v12 = v8;
    *(_QWORD *)&v8 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)&v9 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 68) = v6;
    *(_DWORD *)(a1 + 64) = v4;
    *(_QWORD *)(a1 + 56) = v9;
    v16 = v8;
    PB::Base::~Base((PB::Base *)&v11);
  }
  return a1;
}

uint64_t CMMsl::FallDistanceReplay::formatText(CMMsl::FallDistanceReplay *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 36);
  if ((v5 & 0x40) != 0)
  {
    PB::TextFormatter::format(a2, "afterElevationMedian", *((float *)this + 14));
    v5 = *((_WORD *)this + 36);
    if ((v5 & 0x80) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "beforeElevationMedian", *((float *)this + 15));
  v5 = *((_WORD *)this + 36);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "endTimestampOfWindow");
  v5 = *((_WORD *)this + 36);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "impactTimestamp");
  v5 = *((_WORD *)this + 36);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "iostime", *((double *)this + 3));
  v5 = *((_WORD *)this + 36);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "pressureTimestamp");
  v5 = *((_WORD *)this + 36);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "rangeOfElevationInWindow", *((float *)this + 16));
  v5 = *((_WORD *)this + 36);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
LABEL_21:
    PB::TextFormatter::format(a2, "startTimestampOfWindow");
    if ((*((_WORD *)this + 36) & 0x200) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_11;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "startTimestampOfLastInspectedWindow");
  v5 = *((_WORD *)this + 36);
  if ((v5 & 0x20) != 0)
    goto LABEL_21;
LABEL_10:
  if ((v5 & 0x200) != 0)
LABEL_11:
    PB::TextFormatter::format(a2, "state");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FallDistanceReplay::readFrom(CMMsl::FallDistanceReplay *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  uint64_t v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  char v55;
  char v56;
  unsigned int v57;
  unint64_t v58;
  char v59;
  char v60;
  unsigned int v61;
  unint64_t v62;
  char v63;
  char v64;
  unsigned int v65;
  unint64_t v66;
  char v67;
  char v68;
  unsigned int v69;
  unint64_t v70;
  char v71;
  char v72;
  unsigned int v73;
  unint64_t v74;
  char v75;
  char v76;
  unsigned int v77;
  unint64_t v78;
  char v79;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_152;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 36) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_76;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        v2 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_121;
      case 2u:
        *((_WORD *)this + 36) |= 8u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v56 = 0;
          v57 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              v24 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_126;
            }
            v58 = v20++;
            v59 = *(_BYTE *)(v21 + v58);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v59 & 0x7F) << v56;
            if ((v59 & 0x80) == 0)
              break;
            v56 += 7;
            v14 = v57++ > 8;
            if (v14)
            {
              v24 = 0;
LABEL_125:
              v2 = v58 + 1;
              goto LABEL_126;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v24 = 0;
          goto LABEL_125;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_126;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        v24 = 0;
LABEL_126:
        *((_QWORD *)this + 4) = v24;
        break;
      case 3u:
        *((_WORD *)this + 36) |= 2u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v60 = 0;
          v61 = 0;
          v30 = 0;
          if (v2 <= v26)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v26)
            {
              v30 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_131;
            }
            v62 = v26++;
            v63 = *(_BYTE *)(v27 + v62);
            *((_QWORD *)a2 + 1) = v26;
            v30 |= (unint64_t)(v63 & 0x7F) << v60;
            if ((v63 & 0x80) == 0)
              break;
            v60 += 7;
            v14 = v61++ > 8;
            if (v14)
            {
              v30 = 0;
LABEL_130:
              v2 = v62 + 1;
              goto LABEL_131;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v30 = 0;
          goto LABEL_130;
        }
        v28 = 0;
        v29 = 0;
        v30 = 0;
        do
        {
          v2 = v26 + 1;
          *((_QWORD *)a2 + 1) = v26 + 1;
          v31 = *(_BYTE *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0)
            goto LABEL_131;
          v28 += 7;
          v26 = v2;
          v14 = v29++ > 8;
        }
        while (!v14);
        v30 = 0;
LABEL_131:
        *((_QWORD *)this + 2) = v30;
        break;
      case 4u:
        *((_WORD *)this + 36) |= 0x200u;
        v32 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v33 = *(_QWORD *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
        {
          v64 = 0;
          v65 = 0;
          v36 = 0;
          if (v2 <= v32)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v32)
            {
              LODWORD(v36) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_136;
            }
            v66 = v32++;
            v67 = *(_BYTE *)(v33 + v66);
            *((_QWORD *)a2 + 1) = v32;
            v36 |= (unint64_t)(v67 & 0x7F) << v64;
            if ((v67 & 0x80) == 0)
              break;
            v64 += 7;
            v14 = v65++ > 8;
            if (v14)
            {
              LODWORD(v36) = 0;
LABEL_135:
              v2 = v66 + 1;
              goto LABEL_136;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v36) = 0;
          goto LABEL_135;
        }
        v34 = 0;
        v35 = 0;
        v36 = 0;
        do
        {
          v2 = v32 + 1;
          *((_QWORD *)a2 + 1) = v32 + 1;
          v37 = *(_BYTE *)(v33 + v32);
          v36 |= (unint64_t)(v37 & 0x7F) << v34;
          if ((v37 & 0x80) == 0)
            goto LABEL_136;
          v34 += 7;
          v32 = v2;
          v14 = v35++ > 8;
        }
        while (!v14);
        LODWORD(v36) = 0;
LABEL_136:
        *((_DWORD *)this + 17) = v36;
        break;
      case 0xAu:
        *((_WORD *)this + 36) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_76;
        *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_120;
      case 0xBu:
        *((_WORD *)this + 36) |= 0x10u;
        v38 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v39 = *(_QWORD *)a2;
        if (v38 > 0xFFFFFFFFFFFFFFF5 || v38 + 10 > v2)
        {
          v68 = 0;
          v69 = 0;
          v42 = 0;
          if (v2 <= v38)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v38)
            {
              v42 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_141;
            }
            v70 = v38++;
            v71 = *(_BYTE *)(v39 + v70);
            *((_QWORD *)a2 + 1) = v38;
            v42 |= (unint64_t)(v71 & 0x7F) << v68;
            if ((v71 & 0x80) == 0)
              break;
            v68 += 7;
            v14 = v69++ > 8;
            if (v14)
            {
              v42 = 0;
LABEL_140:
              v2 = v70 + 1;
              goto LABEL_141;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v42 = 0;
          goto LABEL_140;
        }
        v40 = 0;
        v41 = 0;
        v42 = 0;
        do
        {
          v2 = v38 + 1;
          *((_QWORD *)a2 + 1) = v38 + 1;
          v43 = *(_BYTE *)(v39 + v38);
          v42 |= (unint64_t)(v43 & 0x7F) << v40;
          if ((v43 & 0x80) == 0)
            goto LABEL_141;
          v40 += 7;
          v38 = v2;
          v14 = v41++ > 8;
        }
        while (!v14);
        v42 = 0;
LABEL_141:
        *((_QWORD *)this + 5) = v42;
        break;
      case 0xCu:
        *((_WORD *)this + 36) |= 0x20u;
        v44 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v45 = *(_QWORD *)a2;
        if (v44 > 0xFFFFFFFFFFFFFFF5 || v44 + 10 > v2)
        {
          v72 = 0;
          v73 = 0;
          v48 = 0;
          if (v2 <= v44)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v44)
            {
              v48 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_146;
            }
            v74 = v44++;
            v75 = *(_BYTE *)(v45 + v74);
            *((_QWORD *)a2 + 1) = v44;
            v48 |= (unint64_t)(v75 & 0x7F) << v72;
            if ((v75 & 0x80) == 0)
              break;
            v72 += 7;
            v14 = v73++ > 8;
            if (v14)
            {
              v48 = 0;
LABEL_145:
              v2 = v74 + 1;
              goto LABEL_146;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v48 = 0;
          goto LABEL_145;
        }
        v46 = 0;
        v47 = 0;
        v48 = 0;
        do
        {
          v2 = v44 + 1;
          *((_QWORD *)a2 + 1) = v44 + 1;
          v49 = *(_BYTE *)(v45 + v44);
          v48 |= (unint64_t)(v49 & 0x7F) << v46;
          if ((v49 & 0x80) == 0)
            goto LABEL_146;
          v46 += 7;
          v44 = v2;
          v14 = v47++ > 8;
        }
        while (!v14);
        v48 = 0;
LABEL_146:
        *((_QWORD *)this + 6) = v48;
        break;
      case 0xDu:
        *((_WORD *)this + 36) |= 1u;
        v50 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v51 = *(_QWORD *)a2;
        if (v50 > 0xFFFFFFFFFFFFFFF5 || v50 + 10 > v2)
        {
          v76 = 0;
          v77 = 0;
          v54 = 0;
          if (v2 <= v50)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v50)
            {
              v54 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_151;
            }
            v78 = v50++;
            v79 = *(_BYTE *)(v51 + v78);
            *((_QWORD *)a2 + 1) = v50;
            v54 |= (unint64_t)(v79 & 0x7F) << v76;
            if ((v79 & 0x80) == 0)
              break;
            v76 += 7;
            v14 = v77++ > 8;
            if (v14)
            {
              v54 = 0;
LABEL_150:
              v2 = v78 + 1;
              goto LABEL_151;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v54 = 0;
          goto LABEL_150;
        }
        v52 = 0;
        v53 = 0;
        v54 = 0;
        do
        {
          v2 = v50 + 1;
          *((_QWORD *)a2 + 1) = v50 + 1;
          v55 = *(_BYTE *)(v51 + v50);
          v54 |= (unint64_t)(v55 & 0x7F) << v52;
          if ((v55 & 0x80) == 0)
            goto LABEL_151;
          v52 += 7;
          v50 = v2;
          v14 = v53++ > 8;
        }
        while (!v14);
        v54 = 0;
LABEL_151:
        *((_QWORD *)this + 1) = v54;
        break;
      case 0x14u:
        *((_WORD *)this + 36) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_76;
        *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_120;
      case 0x15u:
        *((_WORD *)this + 36) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_120:
          v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_121:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_76:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_152:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::FallDistanceReplay::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 72);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24));
    v4 = *(_WORD *)(v3 + 72);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v4 & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x200) == 0)
  {
LABEL_5:
    if ((v4 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x100) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(float *)(v3 + 64));
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x20) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 0x40) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 56));
  }
LABEL_20:
  this = PB::Writer::write(a2, *(float *)(v3 + 60));
  if ((*(_WORD *)(v3 + 72) & 0x40) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 56));
  return this;
}

BOOL CMMsl::FallDistanceReplay::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 72);
  v3 = *(_WORD *)(a2 + 72);
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 72) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 72) & 0x200) == 0 || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 68))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 72) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 72) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 72) & 0x100) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 72) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_QWORD *)(a1 + 40) != *(_QWORD *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_QWORD *)(a1 + 48) != *(_QWORD *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x40) == 0;
  if ((v2 & 0x40) != 0)
    return (v3 & 0x40) != 0 && *(float *)(a1 + 56) == *(float *)(a2 + 56);
  return v4;
}

uint64_t CMMsl::FallDistanceReplay::hash_value(CMMsl::FallDistanceReplay *this)
{
  __int16 v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;

  v1 = *((_WORD *)this + 36);
  if ((v1 & 4) != 0)
  {
    v2 = *((double *)this + 3);
    if (v2 == 0.0)
      v2 = 0.0;
    if ((v1 & 8) != 0)
    {
LABEL_3:
      v3 = *((_QWORD *)this + 4);
      if ((v1 & 2) != 0)
        goto LABEL_4;
      goto LABEL_22;
    }
  }
  else
  {
    v2 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_4:
    v4 = *((_QWORD *)this + 2);
    if ((*((_WORD *)this + 36) & 0x200) != 0)
      goto LABEL_5;
    goto LABEL_23;
  }
LABEL_22:
  v4 = 0;
  if ((*((_WORD *)this + 36) & 0x200) != 0)
  {
LABEL_5:
    v5 = *((int *)this + 17);
    if ((*((_WORD *)this + 36) & 0x100) != 0)
      goto LABEL_6;
LABEL_24:
    v7 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_9;
    goto LABEL_25;
  }
LABEL_23:
  v5 = 0;
  if ((*((_WORD *)this + 36) & 0x100) == 0)
    goto LABEL_24;
LABEL_6:
  v6 = *((float *)this + 16);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_9:
    v8 = *((_QWORD *)this + 5);
    if ((v1 & 0x20) != 0)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  v8 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_10:
    v9 = *((_QWORD *)this + 6);
    if ((v1 & 1) != 0)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  v9 = 0;
  if ((v1 & 1) != 0)
  {
LABEL_11:
    v10 = *((_QWORD *)this + 1);
    if ((v1 & 0x80) != 0)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  v10 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_12:
    v11 = *((float *)this + 15);
    v12 = LODWORD(v11);
    if (v11 == 0.0)
      v12 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_15;
LABEL_29:
    v14 = 0;
    return v3 ^ *(_QWORD *)&v2 ^ v4 ^ v5 ^ v7 ^ v8 ^ v9 ^ v10 ^ v12 ^ v14;
  }
LABEL_28:
  v12 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_29;
LABEL_15:
  v13 = *((float *)this + 14);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  return v3 ^ *(_QWORD *)&v2 ^ v4 ^ v5 ^ v7 ^ v8 ^ v9 ^ v10 ^ v12 ^ v14;
}

uint64_t CMMsl::FallFalsePositiveSuppressionFeatures::FallFalsePositiveSuppressionFeatures(uint64_t this)
{
  *(_QWORD *)this = &off_25135D7F8;
  *(_DWORD *)(this + 80) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135D7F8;
  *(_DWORD *)(this + 80) = 0;
  return this;
}

void CMMsl::FallFalsePositiveSuppressionFeatures::~FallFalsePositiveSuppressionFeatures(CMMsl::FallFalsePositiveSuppressionFeatures *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::FallFalsePositiveSuppressionFeatures::FallFalsePositiveSuppressionFeatures(uint64_t this, const CMMsl::FallFalsePositiveSuppressionFeatures *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  *(_QWORD *)this = &off_25135D7F8;
  *(_DWORD *)(this + 80) = 0;
  v2 = *((_WORD *)a2 + 40);
  if ((v2 & 4) != 0)
  {
    v4 = *((_QWORD *)a2 + 3);
    v3 = 4;
    *(_WORD *)(this + 80) = 4;
    *(_QWORD *)(this + 24) = v4;
    v2 = *((_WORD *)a2 + 40);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 2);
    v3 |= 2u;
    *(_WORD *)(this + 80) = v3;
    *(_QWORD *)(this + 16) = v5;
    v2 = *((_WORD *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 1) != 0)
  {
    v6 = *((_QWORD *)a2 + 1);
    v3 |= 1u;
    *(_WORD *)(this + 80) = v3;
    *(_QWORD *)(this + 8) = v6;
    v2 = *((_WORD *)a2 + 40);
    if ((v2 & 0x200) == 0)
    {
LABEL_8:
      if ((v2 & 0x800) == 0)
        goto LABEL_9;
      goto LABEL_20;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 16);
  v3 |= 0x200u;
  *(_WORD *)(this + 80) = v3;
  *(_DWORD *)(this + 64) = v7;
  v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x800) == 0)
  {
LABEL_9:
    if ((v2 & 0x1000) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  v8 = *((_DWORD *)a2 + 18);
  v3 |= 0x800u;
  *(_WORD *)(this + 80) = v3;
  *(_DWORD *)(this + 72) = v8;
  v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x1000) == 0)
  {
LABEL_10:
    if ((v2 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  v9 = *((_DWORD *)a2 + 19);
  v3 |= 0x1000u;
  *(_WORD *)(this + 80) = v3;
  *(_DWORD *)(this + 76) = v9;
  v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x400) == 0)
  {
LABEL_11:
    if ((v2 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_23;
  }
LABEL_22:
  v10 = *((_DWORD *)a2 + 17);
  v3 |= 0x400u;
  *(_WORD *)(this + 80) = v3;
  *(_DWORD *)(this + 68) = v10;
  v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x20) == 0)
  {
LABEL_12:
    if ((v2 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_24;
  }
LABEL_23:
  v11 = *((_DWORD *)a2 + 12);
  v3 |= 0x20u;
  *(_WORD *)(this + 80) = v3;
  *(_DWORD *)(this + 48) = v11;
  v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x40) == 0)
  {
LABEL_13:
    if ((v2 & 0x100) == 0)
      goto LABEL_14;
    goto LABEL_25;
  }
LABEL_24:
  v12 = *((_DWORD *)a2 + 13);
  v3 |= 0x40u;
  *(_WORD *)(this + 80) = v3;
  *(_DWORD *)(this + 52) = v12;
  v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x100) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0)
      goto LABEL_15;
    goto LABEL_26;
  }
LABEL_25:
  v13 = *((_DWORD *)a2 + 15);
  v3 |= 0x100u;
  *(_WORD *)(this + 80) = v3;
  *(_DWORD *)(this + 60) = v13;
  v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x10) == 0)
  {
LABEL_15:
    if ((v2 & 8) == 0)
      goto LABEL_16;
    goto LABEL_27;
  }
LABEL_26:
  v14 = *((_QWORD *)a2 + 5);
  v3 |= 0x10u;
  *(_WORD *)(this + 80) = v3;
  *(_QWORD *)(this + 40) = v14;
  v2 = *((_WORD *)a2 + 40);
  if ((v2 & 8) == 0)
  {
LABEL_16:
    if ((v2 & 0x80) == 0)
      return this;
LABEL_28:
    v16 = *((_DWORD *)a2 + 14);
    *(_WORD *)(this + 80) = v3 | 0x80;
    *(_DWORD *)(this + 56) = v16;
    return this;
  }
LABEL_27:
  v15 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *(_WORD *)(this + 80) = v3;
  *(_QWORD *)(this + 32) = v15;
  if ((*((_WORD *)a2 + 40) & 0x80) != 0)
    goto LABEL_28;
  return this;
}

CMMsl *CMMsl::FallFalsePositiveSuppressionFeatures::operator=(CMMsl *a1, const CMMsl::FallFalsePositiveSuppressionFeatures *a2)
{
  CMMsl::FallFalsePositiveSuppressionFeatures *v3;
  _BYTE v5[88];

  if (a1 != a2)
  {
    CMMsl::FallFalsePositiveSuppressionFeatures::FallFalsePositiveSuppressionFeatures((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallFalsePositiveSuppressionFeatures *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::FallFalsePositiveSuppressionFeatures *a2, CMMsl::FallFalsePositiveSuppressionFeatures *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  float result;
  uint64_t v11;
  uint64_t v12;

  v3 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v3;
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  LODWORD(v6) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v6;
  v7 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v7;
  v8 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v8;
  v9 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v9;
  LODWORD(v6) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v6;
  result = *((float *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((float *)a2 + 13) = result;
  LODWORD(v6) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v6;
  v11 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v11;
  v12 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v12;
  LODWORD(v12) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v12;
  return result;
}

float CMMsl::FallFalsePositiveSuppressionFeatures::FallFalsePositiveSuppressionFeatures(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135D7F8;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  result = *(float *)(a2 + 52);
  *(float *)(a1 + 52) = result;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return result;
}

CMMsl *CMMsl::FallFalsePositiveSuppressionFeatures::operator=(CMMsl *this, uint64_t a2, CMMsl::FallFalsePositiveSuppressionFeatures *a3)
{
  __int128 v4;
  __int128 v5;
  void (**v7)(CMMsl::FallFalsePositiveSuppressionFeatures *__hidden);
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;

  if (this != (CMMsl *)a2)
  {
    v7 = &off_25135D7F8;
    v17 = *(_DWORD *)(a2 + 80);
    *(_DWORD *)(a2 + 80) = 0;
    v4 = *(_OWORD *)(a2 + 8);
    v14 = *(_DWORD *)(a2 + 64);
    v16 = *(_DWORD *)(a2 + 76);
    v15 = *(_QWORD *)(a2 + 68);
    v11 = *(_DWORD *)(a2 + 48);
    v12 = *(_DWORD *)(a2 + 52);
    v10 = *(_QWORD *)(a2 + 40);
    v5 = *(_OWORD *)(a2 + 24);
    v8 = v4;
    v9 = v5;
    v13 = *(_QWORD *)(a2 + 56);
    CMMsl::swap(this, (CMMsl::FallFalsePositiveSuppressionFeatures *)&v7, a3);
    PB::Base::~Base((PB::Base *)&v7);
  }
  return this;
}

uint64_t CMMsl::FallFalsePositiveSuppressionFeatures::formatText(CMMsl::FallFalsePositiveSuppressionFeatures *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 40);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "aopTsImpact");
    v5 = *((_WORD *)this + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "aopTsNow");
  v5 = *((_WORD *)this + 40);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "aopTsSensor");
  v5 = *((_WORD *)this + 40);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "nPeaks");
  v5 = *((_WORD *)this + 40);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "normalizedIQR", *((float *)this + 13));
  v5 = *((_WORD *)this + 40);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "operatingMode");
  v5 = *((_WORD *)this + 40);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 8) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "repetitiveMotion");
  v5 = *((_WORD *)this + 40);
  if ((v5 & 8) == 0)
  {
LABEL_9:
    if ((v5 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "repetitiveMotionEndTs");
  v5 = *((_WORD *)this + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "repetitiveMotionStartTs");
  v5 = *((_WORD *)this + 40);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "seq");
  v5 = *((_WORD *)this + 40);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
LABEL_27:
    PB::TextFormatter::format(a2, "sumHighQPeaksInHighFreqFFT", *((float *)this + 18));
    if ((*((_WORD *)this + 40) & 0x1000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_14;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "sumHighQPeaksInDecLowFreqFFT", *((float *)this + 17));
  v5 = *((_WORD *)this + 40);
  if ((v5 & 0x800) != 0)
    goto LABEL_27;
LABEL_13:
  if ((v5 & 0x1000) != 0)
LABEL_14:
    PB::TextFormatter::format(a2, "sumHighQPeaksInLowFreqFFT", *((float *)this + 19));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FallFalsePositiveSuppressionFeatures::readFrom(CMMsl::FallFalsePositiveSuppressionFeatures *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  char v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  char v68;
  unint64_t v69;
  uint64_t v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  unint64_t v77;
  char v78;
  char v79;
  unsigned int v80;
  unint64_t v81;
  char v82;
  char v83;
  unsigned int v84;
  unint64_t v85;
  char v86;
  char v87;
  unsigned int v88;
  unint64_t v89;
  char v90;
  char v91;
  unsigned int v92;
  unint64_t v93;
  char v94;
  char v95;
  unsigned int v96;
  unint64_t v97;
  char v98;
  char v99;
  unsigned int v100;
  unint64_t v101;
  char v102;
  char v103;
  unsigned int v104;
  unint64_t v105;
  char v106;
  char v107;
  unsigned int v108;
  unint64_t v109;
  char v110;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_26;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_21;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_26:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 40) |= 4u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v75 = 0;
          v76 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v21)
            {
              v25 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_172;
            }
            v77 = v21++;
            v78 = *(_BYTE *)(v22 + v77);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v78 & 0x7F) << v75;
            if ((v78 & 0x80) == 0)
              break;
            v75 += 7;
            v14 = v76++ > 8;
            if (v14)
            {
              v25 = 0;
LABEL_171:
              v2 = v77 + 1;
              goto LABEL_172;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v25 = 0;
          goto LABEL_171;
        }
        v23 = 0;
        v24 = 0;
        v25 = 0;
        do
        {
          v2 = v21 + 1;
          *((_QWORD *)a2 + 1) = v21 + 1;
          v26 = *(_BYTE *)(v22 + v21);
          v25 |= (unint64_t)(v26 & 0x7F) << v23;
          if ((v26 & 0x80) == 0)
            goto LABEL_172;
          v23 += 7;
          v21 = v2;
          v14 = v24++ > 8;
        }
        while (!v14);
        v25 = 0;
LABEL_172:
        *((_QWORD *)this + 3) = v25;
        break;
      case 2u:
        *((_WORD *)this + 40) |= 2u;
        v27 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v28 = *(_QWORD *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v79 = 0;
          v80 = 0;
          v31 = 0;
          if (v2 <= v27)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v27)
            {
              v31 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_177;
            }
            v81 = v27++;
            v82 = *(_BYTE *)(v28 + v81);
            *((_QWORD *)a2 + 1) = v27;
            v31 |= (unint64_t)(v82 & 0x7F) << v79;
            if ((v82 & 0x80) == 0)
              break;
            v79 += 7;
            v14 = v80++ > 8;
            if (v14)
            {
              v31 = 0;
LABEL_176:
              v2 = v81 + 1;
              goto LABEL_177;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v31 = 0;
          goto LABEL_176;
        }
        v29 = 0;
        v30 = 0;
        v31 = 0;
        do
        {
          v2 = v27 + 1;
          *((_QWORD *)a2 + 1) = v27 + 1;
          v32 = *(_BYTE *)(v28 + v27);
          v31 |= (unint64_t)(v32 & 0x7F) << v29;
          if ((v32 & 0x80) == 0)
            goto LABEL_177;
          v29 += 7;
          v27 = v2;
          v14 = v30++ > 8;
        }
        while (!v14);
        v31 = 0;
LABEL_177:
        *((_QWORD *)this + 2) = v31;
        break;
      case 3u:
        *((_WORD *)this + 40) |= 1u;
        v33 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v34 = *(_QWORD *)a2;
        if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
        {
          v83 = 0;
          v84 = 0;
          v37 = 0;
          if (v2 <= v33)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v33)
            {
              v37 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_182;
            }
            v85 = v33++;
            v86 = *(_BYTE *)(v34 + v85);
            *((_QWORD *)a2 + 1) = v33;
            v37 |= (unint64_t)(v86 & 0x7F) << v83;
            if ((v86 & 0x80) == 0)
              break;
            v83 += 7;
            v14 = v84++ > 8;
            if (v14)
            {
              v37 = 0;
LABEL_181:
              v2 = v85 + 1;
              goto LABEL_182;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v37 = 0;
          goto LABEL_181;
        }
        v35 = 0;
        v36 = 0;
        v37 = 0;
        do
        {
          v2 = v33 + 1;
          *((_QWORD *)a2 + 1) = v33 + 1;
          v38 = *(_BYTE *)(v34 + v33);
          v37 |= (unint64_t)(v38 & 0x7F) << v35;
          if ((v38 & 0x80) == 0)
            goto LABEL_182;
          v35 += 7;
          v33 = v2;
          v14 = v36++ > 8;
        }
        while (!v14);
        v37 = 0;
LABEL_182:
        *((_QWORD *)this + 1) = v37;
        break;
      case 4u:
        *((_WORD *)this + 40) |= 0x200u;
        v39 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v40 = *(_QWORD *)a2;
        if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
        {
          v87 = 0;
          v88 = 0;
          v43 = 0;
          if (v2 <= v39)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v39)
            {
              LODWORD(v43) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_187;
            }
            v89 = v39++;
            v90 = *(_BYTE *)(v40 + v89);
            *((_QWORD *)a2 + 1) = v39;
            v43 |= (unint64_t)(v90 & 0x7F) << v87;
            if ((v90 & 0x80) == 0)
              break;
            v87 += 7;
            v14 = v88++ > 8;
            if (v14)
            {
              LODWORD(v43) = 0;
LABEL_186:
              v2 = v89 + 1;
              goto LABEL_187;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v43) = 0;
          goto LABEL_186;
        }
        v41 = 0;
        v42 = 0;
        v43 = 0;
        do
        {
          v2 = v39 + 1;
          *((_QWORD *)a2 + 1) = v39 + 1;
          v44 = *(_BYTE *)(v40 + v39);
          v43 |= (unint64_t)(v44 & 0x7F) << v41;
          if ((v44 & 0x80) == 0)
            goto LABEL_187;
          v41 += 7;
          v39 = v2;
          v14 = v42++ > 8;
        }
        while (!v14);
        LODWORD(v43) = 0;
LABEL_187:
        *((_DWORD *)this + 16) = v43;
        break;
      case 5u:
        *((_WORD *)this + 40) |= 0x800u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_74;
        *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_167;
      case 6u:
        *((_WORD *)this + 40) |= 0x1000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_74;
        *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_167;
      case 7u:
        *((_WORD *)this + 40) |= 0x400u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_74;
        *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_167;
      case 8u:
        *((_WORD *)this + 40) |= 0x20u;
        v45 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v46 = *(_QWORD *)a2;
        if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
        {
          v91 = 0;
          v92 = 0;
          v49 = 0;
          if (v2 <= v45)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v45)
            {
              LODWORD(v49) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_192;
            }
            v93 = v45++;
            v94 = *(_BYTE *)(v46 + v93);
            *((_QWORD *)a2 + 1) = v45;
            v49 |= (unint64_t)(v94 & 0x7F) << v91;
            if ((v94 & 0x80) == 0)
              break;
            v91 += 7;
            v14 = v92++ > 8;
            if (v14)
            {
              LODWORD(v49) = 0;
LABEL_191:
              v2 = v93 + 1;
              goto LABEL_192;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v49) = 0;
          goto LABEL_191;
        }
        v47 = 0;
        v48 = 0;
        v49 = 0;
        do
        {
          v2 = v45 + 1;
          *((_QWORD *)a2 + 1) = v45 + 1;
          v50 = *(_BYTE *)(v46 + v45);
          v49 |= (unint64_t)(v50 & 0x7F) << v47;
          if ((v50 & 0x80) == 0)
            goto LABEL_192;
          v47 += 7;
          v45 = v2;
          v14 = v48++ > 8;
        }
        while (!v14);
        LODWORD(v49) = 0;
LABEL_192:
        *((_DWORD *)this + 12) = v49;
        break;
      case 9u:
        *((_WORD *)this + 40) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_167:
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_74:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 0xAu:
        *((_WORD *)this + 40) |= 0x100u;
        v51 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v52 = *(_QWORD *)a2;
        if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
        {
          v95 = 0;
          v96 = 0;
          v55 = 0;
          if (v2 <= v51)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v51)
            {
              LODWORD(v55) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_197;
            }
            v97 = v51++;
            v98 = *(_BYTE *)(v52 + v97);
            *((_QWORD *)a2 + 1) = v51;
            v55 |= (unint64_t)(v98 & 0x7F) << v95;
            if ((v98 & 0x80) == 0)
              break;
            v95 += 7;
            v14 = v96++ > 8;
            if (v14)
            {
              LODWORD(v55) = 0;
LABEL_196:
              v2 = v97 + 1;
              goto LABEL_197;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v55) = 0;
          goto LABEL_196;
        }
        v53 = 0;
        v54 = 0;
        v55 = 0;
        do
        {
          v2 = v51 + 1;
          *((_QWORD *)a2 + 1) = v51 + 1;
          v56 = *(_BYTE *)(v52 + v51);
          v55 |= (unint64_t)(v56 & 0x7F) << v53;
          if ((v56 & 0x80) == 0)
            goto LABEL_197;
          v53 += 7;
          v51 = v2;
          v14 = v54++ > 8;
        }
        while (!v14);
        LODWORD(v55) = 0;
LABEL_197:
        *((_DWORD *)this + 15) = v55;
        break;
      case 0xBu:
        *((_WORD *)this + 40) |= 0x10u;
        v57 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v58 = *(_QWORD *)a2;
        if (v57 > 0xFFFFFFFFFFFFFFF5 || v57 + 10 > v2)
        {
          v99 = 0;
          v100 = 0;
          v61 = 0;
          if (v2 <= v57)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v57)
            {
              v61 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_202;
            }
            v101 = v57++;
            v102 = *(_BYTE *)(v58 + v101);
            *((_QWORD *)a2 + 1) = v57;
            v61 |= (unint64_t)(v102 & 0x7F) << v99;
            if ((v102 & 0x80) == 0)
              break;
            v99 += 7;
            v14 = v100++ > 8;
            if (v14)
            {
              v61 = 0;
LABEL_201:
              v2 = v101 + 1;
              goto LABEL_202;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v61 = 0;
          goto LABEL_201;
        }
        v59 = 0;
        v60 = 0;
        v61 = 0;
        do
        {
          v2 = v57 + 1;
          *((_QWORD *)a2 + 1) = v57 + 1;
          v62 = *(_BYTE *)(v58 + v57);
          v61 |= (unint64_t)(v62 & 0x7F) << v59;
          if ((v62 & 0x80) == 0)
            goto LABEL_202;
          v59 += 7;
          v57 = v2;
          v14 = v60++ > 8;
        }
        while (!v14);
        v61 = 0;
LABEL_202:
        *((_QWORD *)this + 5) = v61;
        break;
      case 0xCu:
        *((_WORD *)this + 40) |= 8u;
        v63 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v64 = *(_QWORD *)a2;
        if (v63 > 0xFFFFFFFFFFFFFFF5 || v63 + 10 > v2)
        {
          v103 = 0;
          v104 = 0;
          v67 = 0;
          if (v2 <= v63)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v63)
            {
              v67 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_207;
            }
            v105 = v63++;
            v106 = *(_BYTE *)(v64 + v105);
            *((_QWORD *)a2 + 1) = v63;
            v67 |= (unint64_t)(v106 & 0x7F) << v103;
            if ((v106 & 0x80) == 0)
              break;
            v103 += 7;
            v14 = v104++ > 8;
            if (v14)
            {
              v67 = 0;
LABEL_206:
              v2 = v105 + 1;
              goto LABEL_207;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v67 = 0;
          goto LABEL_206;
        }
        v65 = 0;
        v66 = 0;
        v67 = 0;
        do
        {
          v2 = v63 + 1;
          *((_QWORD *)a2 + 1) = v63 + 1;
          v68 = *(_BYTE *)(v64 + v63);
          v67 |= (unint64_t)(v68 & 0x7F) << v65;
          if ((v68 & 0x80) == 0)
            goto LABEL_207;
          v65 += 7;
          v63 = v2;
          v14 = v66++ > 8;
        }
        while (!v14);
        v67 = 0;
LABEL_207:
        *((_QWORD *)this + 4) = v67;
        break;
      case 0xDu:
        *((_WORD *)this + 40) |= 0x80u;
        v69 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v70 = *(_QWORD *)a2;
        if (v69 > 0xFFFFFFFFFFFFFFF5 || v69 + 10 > v2)
        {
          v107 = 0;
          v108 = 0;
          v73 = 0;
          if (v2 <= v69)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v69)
            {
              LODWORD(v73) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_212;
            }
            v109 = v69++;
            v110 = *(_BYTE *)(v70 + v109);
            *((_QWORD *)a2 + 1) = v69;
            v73 |= (unint64_t)(v110 & 0x7F) << v107;
            if ((v110 & 0x80) == 0)
              break;
            v107 += 7;
            v14 = v108++ > 8;
            if (v14)
            {
              LODWORD(v73) = 0;
LABEL_211:
              v2 = v109 + 1;
              goto LABEL_212;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v73) = 0;
          goto LABEL_211;
        }
        v71 = 0;
        v72 = 0;
        v73 = 0;
        do
        {
          v2 = v69 + 1;
          *((_QWORD *)a2 + 1) = v69 + 1;
          v74 = *(_BYTE *)(v70 + v69);
          v73 |= (unint64_t)(v74 & 0x7F) << v71;
          if ((v74 & 0x80) == 0)
            goto LABEL_212;
          v71 += 7;
          v69 = v2;
          v14 = v72++ > 8;
        }
        while (!v14);
        LODWORD(v73) = 0;
LABEL_212:
        *((_DWORD *)this + 14) = v73;
        break;
      default:
        goto LABEL_19;
    }
LABEL_21:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::FallFalsePositiveSuppressionFeatures::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 80);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_WORD *)(v3 + 80);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x200) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x1000) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 72));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x1000) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(float *)(v3 + 76));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(float *)(v3 + 68));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x20) == 0)
  {
LABEL_9:
    if ((v4 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x40) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x100) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x10) == 0)
  {
LABEL_12:
    if ((v4 & 8) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 8) == 0)
  {
LABEL_13:
    if ((v4 & 0x80) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_26:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_WORD *)(v3 + 80) & 0x80) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

BOOL CMMsl::FallFalsePositiveSuppressionFeatures::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 80);
  v3 = *(_WORD *)(a2 + 80);
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 80) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 80) & 0x200) == 0 || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 80) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 80) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 80) & 0x800) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 80) & 0x800) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 80) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 80) & 0x1000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 80) & 0x1000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 80) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 80) & 0x400) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 80) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 80) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 80) & 0x100) == 0 || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 80) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_QWORD *)(a1 + 40) != *(_QWORD *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x80) == 0;
  if ((v2 & 0x80) != 0)
    return (v3 & 0x80) != 0 && *(_DWORD *)(a1 + 56) == *(_DWORD *)(a2 + 56);
  return v4;
}

uint64_t CMMsl::FallFalsePositiveSuppressionFeatures::hash_value(CMMsl::FallFalsePositiveSuppressionFeatures *this)
{
  __int16 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *((_WORD *)this + 40);
  if ((v1 & 4) != 0)
  {
    v2 = *((_QWORD *)this + 3);
    if ((v1 & 2) != 0)
    {
LABEL_3:
      v3 = *((_QWORD *)this + 2);
      if ((v1 & 1) != 0)
        goto LABEL_4;
      goto LABEL_25;
    }
  }
  else
  {
    v2 = 0;
    if ((v1 & 2) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((v1 & 1) != 0)
  {
LABEL_4:
    v4 = *((_QWORD *)this + 1);
    if ((*((_WORD *)this + 40) & 0x200) != 0)
      goto LABEL_5;
    goto LABEL_26;
  }
LABEL_25:
  v4 = 0;
  if ((*((_WORD *)this + 40) & 0x200) != 0)
  {
LABEL_5:
    v5 = *((unsigned int *)this + 16);
    if ((*((_WORD *)this + 40) & 0x800) != 0)
      goto LABEL_6;
LABEL_27:
    v7 = 0;
    if ((*((_WORD *)this + 40) & 0x1000) != 0)
      goto LABEL_9;
LABEL_28:
    v9 = 0;
    if ((*((_WORD *)this + 40) & 0x400) != 0)
      goto LABEL_12;
LABEL_29:
    v11 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_15;
    goto LABEL_30;
  }
LABEL_26:
  v5 = 0;
  if ((*((_WORD *)this + 40) & 0x800) == 0)
    goto LABEL_27;
LABEL_6:
  v6 = *((float *)this + 18);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  if ((*((_WORD *)this + 40) & 0x1000) == 0)
    goto LABEL_28;
LABEL_9:
  v8 = *((float *)this + 19);
  v9 = LODWORD(v8);
  if (v8 == 0.0)
    v9 = 0;
  if ((*((_WORD *)this + 40) & 0x400) == 0)
    goto LABEL_29;
LABEL_12:
  v10 = *((float *)this + 17);
  v11 = LODWORD(v10);
  if (v10 == 0.0)
    v11 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_15:
    v12 = *((int *)this + 12);
    if ((v1 & 0x40) != 0)
      goto LABEL_16;
LABEL_31:
    v14 = 0;
    if ((*((_WORD *)this + 40) & 0x100) != 0)
      goto LABEL_19;
    goto LABEL_32;
  }
LABEL_30:
  v12 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_31;
LABEL_16:
  v13 = *((float *)this + 13);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((*((_WORD *)this + 40) & 0x100) != 0)
  {
LABEL_19:
    v15 = *((int *)this + 15);
    if ((v1 & 0x10) != 0)
      goto LABEL_20;
    goto LABEL_33;
  }
LABEL_32:
  v15 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_20:
    v16 = *((_QWORD *)this + 5);
    if ((v1 & 8) != 0)
      goto LABEL_21;
LABEL_34:
    v17 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_22;
LABEL_35:
    v18 = 0;
    return v3 ^ v2 ^ v4 ^ v5 ^ v7 ^ v9 ^ v11 ^ v12 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18;
  }
LABEL_33:
  v16 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_34;
LABEL_21:
  v17 = *((_QWORD *)this + 4);
  if ((v1 & 0x80) == 0)
    goto LABEL_35;
LABEL_22:
  v18 = *((unsigned int *)this + 14);
  return v3 ^ v2 ^ v4 ^ v5 ^ v7 ^ v9 ^ v11 ^ v12 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18;
}

uint64_t CMMsl::FallMetaData::FallMetaData(uint64_t this)
{
  *(_QWORD *)this = &off_25135D830;
  *(_DWORD *)(this + 72) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135D830;
  *(_DWORD *)(this + 72) = 0;
  return this;
}

void CMMsl::FallMetaData::~FallMetaData(CMMsl::FallMetaData *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::FallMetaData::FallMetaData(uint64_t this, const CMMsl::FallMetaData *a2)
{
  int v2;
  int v3;
  int v4;
  char v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  char v20;
  char v21;

  *(_QWORD *)this = &off_25135D830;
  *(_DWORD *)(this + 72) = 0;
  v2 = *((_DWORD *)a2 + 18);
  if ((v2 & 1) != 0)
  {
    v4 = *((_DWORD *)a2 + 2);
    v3 = 1;
    *(_DWORD *)(this + 72) = 1;
    *(_DWORD *)(this + 8) = v4;
    v2 = *((_DWORD *)a2 + 18);
    if ((v2 & 0x20000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x20000) != 0)
  {
LABEL_5:
    v5 = *((_BYTE *)a2 + 70);
    v3 |= 0x20000u;
    *(_DWORD *)(this + 72) = v3;
    *(_BYTE *)(this + 70) = v5;
    v2 = *((_DWORD *)a2 + 18);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *((_DWORD *)a2 + 3);
    v3 |= 2u;
    *(_DWORD *)(this + 72) = v3;
    *(_DWORD *)(this + 12) = v6;
    v2 = *((_DWORD *)a2 + 18);
    if ((v2 & 0x2000) == 0)
    {
LABEL_8:
      if ((v2 & 0x4000) == 0)
        goto LABEL_9;
      goto LABEL_25;
    }
  }
  else if ((v2 & 0x2000) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 15);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 72) = v3;
  *(_DWORD *)(this + 60) = v7;
  v2 = *((_DWORD *)a2 + 18);
  if ((v2 & 0x4000) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  v8 = *((_DWORD *)a2 + 16);
  v3 |= 0x4000u;
  *(_DWORD *)(this + 72) = v3;
  *(_DWORD *)(this + 64) = v8;
  v2 = *((_DWORD *)a2 + 18);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 0x20) == 0)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  v9 = *((_DWORD *)a2 + 4);
  v3 |= 4u;
  *(_DWORD *)(this + 72) = v3;
  *(_DWORD *)(this + 16) = v9;
  v2 = *((_DWORD *)a2 + 18);
  if ((v2 & 0x20) == 0)
  {
LABEL_11:
    if ((v2 & 8) == 0)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  v10 = *((_DWORD *)a2 + 7);
  v3 |= 0x20u;
  *(_DWORD *)(this + 72) = v3;
  *(_DWORD *)(this + 28) = v10;
  v2 = *((_DWORD *)a2 + 18);
  if ((v2 & 8) == 0)
  {
LABEL_12:
    if ((v2 & 0x10) == 0)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  v11 = *((_DWORD *)a2 + 5);
  v3 |= 8u;
  *(_DWORD *)(this + 72) = v3;
  *(_DWORD *)(this + 20) = v11;
  v2 = *((_DWORD *)a2 + 18);
  if ((v2 & 0x10) == 0)
  {
LABEL_13:
    if ((v2 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_30;
  }
LABEL_29:
  v12 = *((_DWORD *)a2 + 6);
  v3 |= 0x10u;
  *(_DWORD *)(this + 72) = v3;
  *(_DWORD *)(this + 24) = v12;
  v2 = *((_DWORD *)a2 + 18);
  if ((v2 & 0x1000) == 0)
  {
LABEL_14:
    if ((v2 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_31;
  }
LABEL_30:
  v13 = *((_DWORD *)a2 + 14);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 72) = v3;
  *(_DWORD *)(this + 56) = v13;
  v2 = *((_DWORD *)a2 + 18);
  if ((v2 & 0x800) == 0)
  {
LABEL_15:
    if ((v2 & 0x400) == 0)
      goto LABEL_16;
    goto LABEL_32;
  }
LABEL_31:
  v14 = *((_DWORD *)a2 + 13);
  v3 |= 0x800u;
  *(_DWORD *)(this + 72) = v3;
  *(_DWORD *)(this + 52) = v14;
  v2 = *((_DWORD *)a2 + 18);
  if ((v2 & 0x400) == 0)
  {
LABEL_16:
    if ((v2 & 0x200) == 0)
      goto LABEL_17;
    goto LABEL_33;
  }
LABEL_32:
  v15 = *((_DWORD *)a2 + 12);
  v3 |= 0x400u;
  *(_DWORD *)(this + 72) = v3;
  *(_DWORD *)(this + 48) = v15;
  v2 = *((_DWORD *)a2 + 18);
  if ((v2 & 0x200) == 0)
  {
LABEL_17:
    if ((v2 & 0x40) == 0)
      goto LABEL_18;
    goto LABEL_34;
  }
LABEL_33:
  v16 = *((_DWORD *)a2 + 11);
  v3 |= 0x200u;
  *(_DWORD *)(this + 72) = v3;
  *(_DWORD *)(this + 44) = v16;
  v2 = *((_DWORD *)a2 + 18);
  if ((v2 & 0x40) == 0)
  {
LABEL_18:
    if ((v2 & 0x80) == 0)
      goto LABEL_19;
    goto LABEL_35;
  }
LABEL_34:
  v17 = *((_DWORD *)a2 + 8);
  v3 |= 0x40u;
  *(_DWORD *)(this + 72) = v3;
  *(_DWORD *)(this + 32) = v17;
  v2 = *((_DWORD *)a2 + 18);
  if ((v2 & 0x80) == 0)
  {
LABEL_19:
    if ((v2 & 0x100) == 0)
      goto LABEL_20;
    goto LABEL_36;
  }
LABEL_35:
  v18 = *((_DWORD *)a2 + 9);
  v3 |= 0x80u;
  *(_DWORD *)(this + 72) = v3;
  *(_DWORD *)(this + 36) = v18;
  v2 = *((_DWORD *)a2 + 18);
  if ((v2 & 0x100) == 0)
  {
LABEL_20:
    if ((v2 & 0x10000) == 0)
      goto LABEL_21;
    goto LABEL_37;
  }
LABEL_36:
  v19 = *((_DWORD *)a2 + 10);
  v3 |= 0x100u;
  *(_DWORD *)(this + 72) = v3;
  *(_DWORD *)(this + 40) = v19;
  v2 = *((_DWORD *)a2 + 18);
  if ((v2 & 0x10000) == 0)
  {
LABEL_21:
    if ((v2 & 0x8000) == 0)
      return this;
LABEL_38:
    v21 = *((_BYTE *)a2 + 68);
    *(_DWORD *)(this + 72) = v3 | 0x8000;
    *(_BYTE *)(this + 68) = v21;
    return this;
  }
LABEL_37:
  v20 = *((_BYTE *)a2 + 69);
  v3 |= 0x10000u;
  *(_DWORD *)(this + 72) = v3;
  *(_BYTE *)(this + 69) = v20;
  if ((*((_DWORD *)a2 + 18) & 0x8000) != 0)
    goto LABEL_38;
  return this;
}

CMMsl *CMMsl::FallMetaData::operator=(CMMsl *a1, const CMMsl::FallMetaData *a2)
{
  CMMsl::FallMetaData *v3;
  _BYTE v5[80];

  if (a1 != a2)
  {
    CMMsl::FallMetaData::FallMetaData((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallMetaData *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::FallMetaData *a2, CMMsl::FallMetaData *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  float result;

  v3 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v3;
  v4 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  LOBYTE(v4) = *((_BYTE *)this + 70);
  *((_BYTE *)this + 70) = *((_BYTE *)a2 + 70);
  *((_BYTE *)a2 + 70) = v4;
  v5 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v5;
  v6 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v6;
  v7 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v7;
  v8 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v8;
  v9 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v9;
  v10 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v10;
  v11 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v11;
  v12 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v12;
  v13 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v13;
  v14 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v14;
  v15 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v15;
  v16 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v16;
  v17 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v17;
  result = *((float *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((float *)a2 + 10) = result;
  LOBYTE(v7) = *((_BYTE *)this + 69);
  *((_BYTE *)this + 69) = *((_BYTE *)a2 + 69);
  *((_BYTE *)a2 + 69) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 68);
  *((_BYTE *)this + 68) = *((_BYTE *)a2 + 68);
  *((_BYTE *)a2 + 68) = v7;
  return result;
}

float CMMsl::FallMetaData::FallMetaData(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135D830;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 70) = *(_BYTE *)(a2 + 70);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  result = *(float *)(a2 + 40);
  *(float *)(a1 + 40) = result;
  *(_BYTE *)(a1 + 69) = *(_BYTE *)(a2 + 69);
  *(_BYTE *)(a1 + 68) = *(_BYTE *)(a2 + 68);
  return result;
}

CMMsl *CMMsl::FallMetaData::operator=(CMMsl *this, uint64_t a2, CMMsl::FallMetaData *a3)
{
  __int128 v4;
  _QWORD v6[2];
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  char v13;
  char v14;
  int v15;

  if (this != (CMMsl *)a2)
  {
    v6[0] = &off_25135D830;
    v15 = *(_DWORD *)(a2 + 72);
    *(_DWORD *)(a2 + 72) = 0;
    v14 = *(_BYTE *)(a2 + 70);
    v6[1] = *(_QWORD *)(a2 + 8);
    v11 = *(_QWORD *)(a2 + 60);
    v10 = *(_DWORD *)(a2 + 56);
    v9 = *(_QWORD *)(a2 + 48);
    v4 = *(_OWORD *)(a2 + 32);
    v7 = *(_OWORD *)(a2 + 16);
    v8 = v4;
    v13 = *(_BYTE *)(a2 + 69);
    v12 = *(_BYTE *)(a2 + 68);
    CMMsl::swap(this, (CMMsl::FallMetaData *)v6, a3);
    PB::Base::~Base((PB::Base *)v6);
  }
  return this;
}

uint64_t CMMsl::FallMetaData::formatText(CMMsl::FallMetaData *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 18);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "crownUpDown");
    v5 = *((_DWORD *)this + 18);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_23;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "fallType");
  v5 = *((_DWORD *)this + 18);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "impactMaxAccelNormAlertThreshold", *((float *)this + 4));
  v5 = *((_DWORD *)this + 18);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "impactMaxAccelNormLoggingHeartRateThreshold", *((float *)this + 5));
  v5 = *((_DWORD *)this + 18);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "impactMaxAccelNormLoggingHighResolutionSensorDataThreshold", *((float *)this + 6));
  v5 = *((_DWORD *)this + 18);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x8000) == 0)
      goto LABEL_8;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "impactMaxAccelNormLoggingStatsThreshold", *((float *)this + 7));
  v5 = *((_DWORD *)this + 18);
  if ((v5 & 0x8000) == 0)
  {
LABEL_8:
    if ((v5 & 0x10000) == 0)
      goto LABEL_9;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "isADLImpact");
  v5 = *((_DWORD *)this + 18);
  if ((v5 & 0x10000) == 0)
  {
LABEL_9:
    if ((v5 & 0x20000) == 0)
      goto LABEL_10;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "isFallDetectionFeatureEnabled");
  v5 = *((_DWORD *)this + 18);
  if ((v5 & 0x20000) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "isNearFall");
  v5 = *((_DWORD *)this + 18);
  if ((v5 & 0x40) == 0)
  {
LABEL_11:
    if ((v5 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "metMinutePercentile90", *((float *)this + 8));
  v5 = *((_DWORD *)this + 18);
  if ((v5 & 0x80) == 0)
  {
LABEL_12:
    if ((v5 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "metMinutePercentile95", *((float *)this + 9));
  v5 = *((_DWORD *)this + 18);
  if ((v5 & 0x100) == 0)
  {
LABEL_13:
    if ((v5 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "metMinutePercentile98", *((float *)this + 10));
  v5 = *((_DWORD *)this + 18);
  if ((v5 & 0x200) == 0)
  {
LABEL_14:
    if ((v5 & 0x400) == 0)
      goto LABEL_15;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "metMinutePercentileActual", *((float *)this + 11));
  v5 = *((_DWORD *)this + 18);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "otherFallPosteriorRatioDetectionThreshold", *((float *)this + 12));
  v5 = *((_DWORD *)this + 18);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "slipFallPosteriorRatioDetectionThreshold", *((float *)this + 13));
  v5 = *((_DWORD *)this + 18);
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_18;
LABEL_37:
    PB::TextFormatter::format(a2, "userAgeBucket");
    if ((*((_DWORD *)this + 18) & 0x4000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_19;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "tripFallPosteriorRatioDetectionThreshold", *((float *)this + 14));
  v5 = *((_DWORD *)this + 18);
  if ((v5 & 0x2000) != 0)
    goto LABEL_37;
LABEL_18:
  if ((v5 & 0x4000) != 0)
LABEL_19:
    PB::TextFormatter::format(a2, "workoutType");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FallMetaData::readFrom(CMMsl::FallMetaData *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  int v26;
  BOOL v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  uint64_t v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  char v45;
  int v46;
  BOOL v47;
  int v48;
  BOOL v49;
  char v50;
  unsigned int v51;
  unint64_t v52;
  char v53;
  char v54;
  unsigned int v55;
  unint64_t v56;
  char v57;
  char v58;
  unsigned int v59;
  unint64_t v60;
  char v61;
  char v62;
  unsigned int v63;
  unint64_t v64;
  char v65;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_146;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 18) |= 1u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v50 = 0;
          v51 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_130;
            }
            v52 = v20++;
            v53 = *(_BYTE *)(v21 + v52);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v53 & 0x7F) << v50;
            if ((v53 & 0x80) == 0)
              break;
            v50 += 7;
            v14 = v51++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_129:
              v2 = v52 + 1;
              goto LABEL_130;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
          goto LABEL_129;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_130;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_130:
        *((_DWORD *)this + 2) = v24;
        break;
      case 2u:
        *((_DWORD *)this + 18) |= 0x20000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v27 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v26 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v27 = v26 != 0;
        }
        *((_BYTE *)this + 70) = v27;
        break;
      case 3u:
        *((_DWORD *)this + 18) |= 2u;
        v28 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v29 = *(_QWORD *)a2;
        if (v28 > 0xFFFFFFFFFFFFFFF5 || v28 + 10 > v2)
        {
          v54 = 0;
          v55 = 0;
          v32 = 0;
          if (v2 <= v28)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v28)
            {
              LODWORD(v32) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_135;
            }
            v56 = v28++;
            v57 = *(_BYTE *)(v29 + v56);
            *((_QWORD *)a2 + 1) = v28;
            v32 |= (unint64_t)(v57 & 0x7F) << v54;
            if ((v57 & 0x80) == 0)
              break;
            v54 += 7;
            v14 = v55++ > 8;
            if (v14)
            {
              LODWORD(v32) = 0;
LABEL_134:
              v2 = v56 + 1;
              goto LABEL_135;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v32) = 0;
          goto LABEL_134;
        }
        v30 = 0;
        v31 = 0;
        v32 = 0;
        do
        {
          v2 = v28 + 1;
          *((_QWORD *)a2 + 1) = v28 + 1;
          v33 = *(_BYTE *)(v29 + v28);
          v32 |= (unint64_t)(v33 & 0x7F) << v30;
          if ((v33 & 0x80) == 0)
            goto LABEL_135;
          v30 += 7;
          v28 = v2;
          v14 = v31++ > 8;
        }
        while (!v14);
        LODWORD(v32) = 0;
LABEL_135:
        *((_DWORD *)this + 3) = v32;
        break;
      case 4u:
        *((_DWORD *)this + 18) |= 0x2000u;
        v34 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v35 = *(_QWORD *)a2;
        if (v34 > 0xFFFFFFFFFFFFFFF5 || v34 + 10 > v2)
        {
          v58 = 0;
          v59 = 0;
          v38 = 0;
          if (v2 <= v34)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v34)
            {
              LODWORD(v38) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_140;
            }
            v60 = v34++;
            v61 = *(_BYTE *)(v35 + v60);
            *((_QWORD *)a2 + 1) = v34;
            v38 |= (unint64_t)(v61 & 0x7F) << v58;
            if ((v61 & 0x80) == 0)
              break;
            v58 += 7;
            v14 = v59++ > 8;
            if (v14)
            {
              LODWORD(v38) = 0;
LABEL_139:
              v2 = v60 + 1;
              goto LABEL_140;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v38) = 0;
          goto LABEL_139;
        }
        v36 = 0;
        v37 = 0;
        v38 = 0;
        do
        {
          v2 = v34 + 1;
          *((_QWORD *)a2 + 1) = v34 + 1;
          v39 = *(_BYTE *)(v35 + v34);
          v38 |= (unint64_t)(v39 & 0x7F) << v36;
          if ((v39 & 0x80) == 0)
            goto LABEL_140;
          v36 += 7;
          v34 = v2;
          v14 = v37++ > 8;
        }
        while (!v14);
        LODWORD(v38) = 0;
LABEL_140:
        *((_DWORD *)this + 15) = v38;
        break;
      case 5u:
        *((_DWORD *)this + 18) |= 0x4000u;
        v40 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v41 = *(_QWORD *)a2;
        if (v40 > 0xFFFFFFFFFFFFFFF5 || v40 + 10 > v2)
        {
          v62 = 0;
          v63 = 0;
          v44 = 0;
          if (v2 <= v40)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v40)
            {
              LODWORD(v44) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_145;
            }
            v64 = v40++;
            v65 = *(_BYTE *)(v41 + v64);
            *((_QWORD *)a2 + 1) = v40;
            v44 |= (unint64_t)(v65 & 0x7F) << v62;
            if ((v65 & 0x80) == 0)
              break;
            v62 += 7;
            v14 = v63++ > 8;
            if (v14)
            {
              LODWORD(v44) = 0;
LABEL_144:
              v2 = v64 + 1;
              goto LABEL_145;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v44) = 0;
          goto LABEL_144;
        }
        v42 = 0;
        v43 = 0;
        v44 = 0;
        do
        {
          v2 = v40 + 1;
          *((_QWORD *)a2 + 1) = v40 + 1;
          v45 = *(_BYTE *)(v41 + v40);
          v44 |= (unint64_t)(v45 & 0x7F) << v42;
          if ((v45 & 0x80) == 0)
            goto LABEL_145;
          v42 += 7;
          v40 = v2;
          v14 = v43++ > 8;
        }
        while (!v14);
        LODWORD(v44) = 0;
LABEL_145:
        *((_DWORD *)this + 16) = v44;
        break;
      case 6u:
        *((_DWORD *)this + 18) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_85;
        *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_125;
      case 7u:
        *((_DWORD *)this + 18) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_85;
        *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_125;
      case 8u:
        *((_DWORD *)this + 18) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_85;
        *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_125;
      case 9u:
        *((_DWORD *)this + 18) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_85;
        *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_125;
      case 0xAu:
        *((_DWORD *)this + 18) |= 0x1000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_85;
        *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_125;
      case 0xBu:
        *((_DWORD *)this + 18) |= 0x800u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_85;
        *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_125;
      case 0xCu:
        *((_DWORD *)this + 18) |= 0x400u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_85;
        *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_125;
      case 0xDu:
        *((_DWORD *)this + 18) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_85;
        *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_125;
      case 0xEu:
        *((_DWORD *)this + 18) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_85;
        *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_125;
      case 0xFu:
        *((_DWORD *)this + 18) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_85;
        *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_125;
      case 0x10u:
        *((_DWORD *)this + 18) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_125:
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_85:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 0x11u:
        *((_DWORD *)this + 18) |= 0x10000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v47 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v46 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v47 = v46 != 0;
        }
        *((_BYTE *)this + 69) = v47;
        break;
      case 0x12u:
        *((_DWORD *)this + 18) |= 0x8000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v49 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v48 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v49 = v48 != 0;
        }
        *((_BYTE *)this + 68) = v49;
        break;
      default:
        goto LABEL_19;
    }
LABEL_146:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::FallMetaData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 72);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_DWORD *)(v3 + 72);
    if ((v4 & 0x20000) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_22;
    }
  }
  else if ((v4 & 0x20000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x2000) == 0)
      goto LABEL_5;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x2000) == 0)
  {
LABEL_5:
    if ((v4 & 0x4000) == 0)
      goto LABEL_6;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x4000) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0)
      goto LABEL_7;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x20) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0)
      goto LABEL_9;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 0x1000) == 0)
      goto LABEL_11;
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x1000) == 0)
  {
LABEL_11:
    if ((v4 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x800) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x400) == 0)
  {
LABEL_13:
    if ((v4 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x200) == 0)
  {
LABEL_14:
    if ((v4 & 0x40) == 0)
      goto LABEL_15;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x40) == 0)
  {
LABEL_15:
    if ((v4 & 0x80) == 0)
      goto LABEL_16;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x80) == 0)
  {
LABEL_16:
    if ((v4 & 0x100) == 0)
      goto LABEL_17;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x100) == 0)
  {
LABEL_17:
    if ((v4 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x10000) == 0)
  {
LABEL_18:
    if ((v4 & 0x8000) == 0)
      return this;
    return PB::Writer::write(a2);
  }
LABEL_36:
  this = PB::Writer::write(a2);
  if ((*(_DWORD *)(v3 + 72) & 0x8000) != 0)
    return PB::Writer::write(a2);
  return this;
}

BOOL CMMsl::FallMetaData::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 72);
  v3 = *(_DWORD *)(a2 + 72);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(unsigned __int8 *)(a1 + 70) != *(unsigned __int8 *)(a2 + 70))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(unsigned __int8 *)(a1 + 69) != *(unsigned __int8 *)(a2 + 69))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  v4 = (*(_DWORD *)(a2 + 72) & 0x8000) == 0;
  if ((v2 & 0x8000) != 0)
    return (v3 & 0x8000) != 0 && *(unsigned __int8 *)(a1 + 68) == *(unsigned __int8 *)(a2 + 68);
  return v4;
}

uint64_t CMMsl::FallMetaData::hash_value(CMMsl::FallMetaData *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *((_DWORD *)this + 18);
  if ((v1 & 1) != 0)
  {
    v2 = *((int *)this + 2);
    if ((v1 & 0x20000) != 0)
    {
LABEL_3:
      v3 = *((unsigned __int8 *)this + 70);
      if ((v1 & 2) != 0)
        goto LABEL_4;
      goto LABEL_44;
    }
  }
  else
  {
    v2 = 0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_4:
    v4 = *((int *)this + 3);
    if ((v1 & 0x2000) != 0)
      goto LABEL_5;
    goto LABEL_45;
  }
LABEL_44:
  v4 = 0;
  if ((v1 & 0x2000) != 0)
  {
LABEL_5:
    v5 = *((int *)this + 15);
    if ((v1 & 0x4000) != 0)
      goto LABEL_6;
    goto LABEL_46;
  }
LABEL_45:
  v5 = 0;
  if ((v1 & 0x4000) != 0)
  {
LABEL_6:
    v6 = *((int *)this + 16);
    if ((v1 & 4) != 0)
      goto LABEL_7;
LABEL_47:
    v8 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_10;
LABEL_48:
    v10 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_13;
LABEL_49:
    v12 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_16;
LABEL_50:
    v14 = 0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_19;
LABEL_51:
    v16 = 0;
    if ((v1 & 0x800) != 0)
      goto LABEL_22;
LABEL_52:
    v18 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_25;
LABEL_53:
    v20 = 0;
    if ((v1 & 0x200) != 0)
      goto LABEL_28;
LABEL_54:
    v22 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_31;
LABEL_55:
    v24 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_34;
LABEL_56:
    v26 = 0;
    if ((v1 & 0x100) != 0)
      goto LABEL_37;
LABEL_57:
    v28 = 0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_40;
LABEL_58:
    v29 = 0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_41;
LABEL_59:
    v30 = 0;
    return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v29 ^ v30;
  }
LABEL_46:
  v6 = 0;
  if ((v1 & 4) == 0)
    goto LABEL_47;
LABEL_7:
  v7 = *((float *)this + 4);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_48;
LABEL_10:
  v9 = *((float *)this + 7);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_49;
LABEL_13:
  v11 = *((float *)this + 5);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_50;
LABEL_16:
  v13 = *((float *)this + 6);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((v1 & 0x1000) == 0)
    goto LABEL_51;
LABEL_19:
  v15 = *((float *)this + 14);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  if ((v1 & 0x800) == 0)
    goto LABEL_52;
LABEL_22:
  v17 = *((float *)this + 13);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  if ((v1 & 0x400) == 0)
    goto LABEL_53;
LABEL_25:
  v19 = *((float *)this + 12);
  v20 = LODWORD(v19);
  if (v19 == 0.0)
    v20 = 0;
  if ((v1 & 0x200) == 0)
    goto LABEL_54;
LABEL_28:
  v21 = *((float *)this + 11);
  v22 = LODWORD(v21);
  if (v21 == 0.0)
    v22 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_55;
LABEL_31:
  v23 = *((float *)this + 8);
  v24 = LODWORD(v23);
  if (v23 == 0.0)
    v24 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_56;
LABEL_34:
  v25 = *((float *)this + 9);
  v26 = LODWORD(v25);
  if (v25 == 0.0)
    v26 = 0;
  if ((v1 & 0x100) == 0)
    goto LABEL_57;
LABEL_37:
  v27 = *((float *)this + 10);
  v28 = LODWORD(v27);
  if (v27 == 0.0)
    v28 = 0;
  if ((v1 & 0x10000) == 0)
    goto LABEL_58;
LABEL_40:
  v29 = *((unsigned __int8 *)this + 69);
  if ((v1 & 0x8000) == 0)
    goto LABEL_59;
LABEL_41:
  v30 = *((unsigned __int8 *)this + 68);
  return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v29 ^ v30;
}

double CMMsl::FallSnippet::FallSnippet(CMMsl::FallSnippet *this)
{
  double result;

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_25135D868;
  result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 0;
  return result;
}

{
  double result;

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_25135D868;
  result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 0;
  return result;
}

void CMMsl::FallSnippet::~FallSnippet(CMMsl::FallSnippet *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)this = &off_25135D868;
  v2 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  PB::Base::~Base(this);
}

{
  CMMsl::FallSnippet::~FallSnippet(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::FallSnippet *CMMsl::FallSnippet::FallSnippet(CMMsl::FallSnippet *this, const CMMsl::FallSnippet *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CMMsl::DeviceMotion *v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  CMMsl::Pressure *v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  CMMsl::StreamingHeartRateData *v30;
  CMMsl::StreamingHeartRateData *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  CMMsl::FallStats *v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  CMMsl::DeviceMotion *v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  CMMsl::OdometerWithAltitude *v50;
  CMMsl::OdometerWithAltitude *v51;
  uint64_t v52;

  *(_QWORD *)this = &off_25135D868;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_OWORD *)this + 2) = 0u;
  v5 = (uint64_t *)((char *)this + 32);
  *((_QWORD *)this + 2) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 0;
  if ((*((_BYTE *)a2 + 128) & 1) != 0)
  {
    v6 = *((_QWORD *)a2 + 3);
    *((_BYTE *)this + 128) = 1;
    *((_QWORD *)this + 3) = v6;
  }
  if (*((_QWORD *)a2 + 11))
  {
    v7 = operator new();
    v8 = CMMsl::FallMetaData::FallMetaData(v7, *((const CMMsl::FallMetaData **)a2 + 11));
    v9 = *((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = v8;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  if (*((_QWORD *)a2 + 1))
  {
    v10 = operator new();
    v11 = CMMsl::Accel::Accel(v10, *((const CMMsl::Accel **)a2 + 1));
    v12 = *v4;
    *v4 = v11;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  if (*((_QWORD *)a2 + 2))
  {
    v13 = operator new();
    v14 = CMMsl::Accel::Accel(v13, *((const CMMsl::Accel **)a2 + 2));
    v15 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v14;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  if (*((_QWORD *)a2 + 8))
  {
    v16 = operator new();
    v17 = CMMsl::Gyro::Gyro(v16, *((const CMMsl::Gyro **)a2 + 8));
    v18 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v17;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  if (*((_QWORD *)a2 + 9))
  {
    v19 = operator new();
    v20 = CMMsl::Gyro::Gyro(v19, *((const CMMsl::Gyro **)a2 + 9));
    v21 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v20;
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  }
  if (*((_QWORD *)a2 + 4))
  {
    v22 = (CMMsl::DeviceMotion *)operator new();
    v23 = CMMsl::DeviceMotion::DeviceMotion(v22, *((const CMMsl::DeviceMotion **)a2 + 4));
    v24 = *v5;
    *v5 = v25;
    if (v24)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v24 + 8))(v24, v23);
  }
  if (*((_QWORD *)a2 + 13))
  {
    v26 = (CMMsl::Pressure *)operator new();
    v27 = CMMsl::Pressure::Pressure(v26, *((const CMMsl::Pressure **)a2 + 13));
    v28 = *((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = v29;
    if (v28)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v28 + 8))(v28, v27);
  }
  if (*((_QWORD *)a2 + 10))
  {
    v30 = (CMMsl::StreamingHeartRateData *)operator new();
    v31 = CMMsl::StreamingHeartRateData::StreamingHeartRateData(v30, *((const CMMsl::OnsetHeartRateData ***)a2 + 10));
    v32 = *((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = v31;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  }
  if (*((_QWORD *)a2 + 15))
  {
    v33 = operator new();
    v34 = CMMsl::WatchOnWristState::WatchOnWristState(v33, *((const CMMsl::WatchOnWristState **)a2 + 15));
    v35 = *((_QWORD *)this + 15);
    *((_QWORD *)this + 15) = v34;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  }
  if (*((_QWORD *)a2 + 6))
  {
    v36 = operator new();
    v37 = CMMsl::FallState::FallState(v36, *((const CMMsl::FallState **)a2 + 6));
    v38 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = v37;
    if (v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  }
  if (*((_QWORD *)a2 + 7))
  {
    v39 = (CMMsl::FallStats *)operator new();
    v40 = CMMsl::FallStats::FallStats(v39, *((const CMMsl::FallStats **)a2 + 7));
    v41 = *((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v42;
    if (v41)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v41 + 8))(v41, v40);
  }
  if (*((_QWORD *)a2 + 14))
  {
    v43 = operator new();
    v44 = CMMsl::FallFalsePositiveSuppressionFeatures::FallFalsePositiveSuppressionFeatures(v43, *((const CMMsl::FallFalsePositiveSuppressionFeatures **)a2 + 14));
    v45 = *((_QWORD *)this + 14);
    *((_QWORD *)this + 14) = v44;
    if (v45)
      (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  }
  if (*((_QWORD *)a2 + 5))
  {
    v46 = (CMMsl::DeviceMotion *)operator new();
    v47 = CMMsl::DeviceMotion::DeviceMotion(v46, *((const CMMsl::DeviceMotion **)a2 + 5));
    v48 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v49;
    if (v48)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v48 + 8))(v48, v47);
  }
  if (*((_QWORD *)a2 + 12))
  {
    v50 = (CMMsl::OdometerWithAltitude *)operator new();
    v51 = CMMsl::OdometerWithAltitude::OdometerWithAltitude(v50, *((const CMMsl::Odometer ***)a2 + 12));
    v52 = *((_QWORD *)this + 12);
    *((_QWORD *)this + 12) = v51;
    if (v52)
      (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  }
  return this;
}

uint64_t CMMsl::FallSnippet::operator=(uint64_t a1, const CMMsl::FallSnippet *a2)
{
  CMMsl::FallSnippet *v3;
  _BYTE v5[136];

  if ((const CMMsl::FallSnippet *)a1 != a2)
  {
    CMMsl::FallSnippet::FallSnippet((CMMsl::FallSnippet *)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallSnippet *)v5, v3);
    CMMsl::FallSnippet::~FallSnippet((CMMsl::FallSnippet *)v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::FallSnippet *a2, CMMsl::FallSnippet *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *(_DWORD *)(this + 128);
  *(_DWORD *)(this + 128) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v3;
  v4 = *(_QWORD *)(this + 88);
  *(_QWORD *)(this + 88) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v4;
  v5 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v7 = *(_QWORD *)(this + 16);
  v6 = *(_QWORD *)(this + 24);
  v8 = *((_QWORD *)a2 + 3);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *(_QWORD *)(this + 24) = v8;
  *((_QWORD *)a2 + 2) = v7;
  *((_QWORD *)a2 + 3) = v6;
  v9 = *(_QWORD *)(this + 64);
  *(_QWORD *)(this + 64) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v9;
  v10 = *(_QWORD *)(this + 72);
  *(_QWORD *)(this + 72) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v10;
  v11 = *(_QWORD *)(this + 32);
  *(_QWORD *)(this + 32) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v11;
  v12 = *(_QWORD *)(this + 104);
  *(_QWORD *)(this + 104) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v12;
  v13 = *(_QWORD *)(this + 80);
  *(_QWORD *)(this + 80) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v13;
  v14 = *(_QWORD *)(this + 120);
  *(_QWORD *)(this + 120) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v14;
  v15 = *(_QWORD *)(this + 48);
  *(_QWORD *)(this + 48) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v15;
  v16 = *(_QWORD *)(this + 56);
  *(_QWORD *)(this + 56) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v16;
  v17 = *(_QWORD *)(this + 112);
  *(_QWORD *)(this + 112) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v17;
  v18 = *(_QWORD *)(this + 40);
  *(_QWORD *)(this + 40) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v18;
  v19 = *(_QWORD *)(this + 96);
  *(_QWORD *)(this + 96) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v19;
  return this;
}

uint64_t CMMsl::FallSnippet::FallSnippet(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  *(_QWORD *)a1 = &off_25135D868;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_OWORD *)(a1 + 32) = 0u;
  v5 = (uint64_t *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = 0;
  v7 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v9 = *v4;
  *v4 = v8;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  v13 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v12;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  v15 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v14;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v17 = *v5;
  *v5 = v16;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = 0;
  v19 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v18;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = 0;
  v21 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v20;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 120) = 0;
  v23 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v22;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  v25 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v24;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  v27 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v26;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v28 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  v29 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v28;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  v30 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  v31 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v30;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v32 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = 0;
  v33 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v32;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  return a1;
}

uint64_t CMMsl::FallSnippet::operator=(uint64_t a1, uint64_t a2)
{
  CMMsl::FallSnippet *v3;
  _BYTE v5[136];

  if (a1 != a2)
  {
    CMMsl::FallSnippet::FallSnippet((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallSnippet *)v5, v3);
    CMMsl::FallSnippet::~FallSnippet((CMMsl::FallSnippet *)v5);
  }
  return a1;
}

uint64_t CMMsl::FallSnippet::formatText(CMMsl::FallSnippet *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "accel100");
  v6 = *((_QWORD *)this + 2);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "accel800");
  if ((*((_BYTE *)this + 128) & 1) != 0)
    PB::TextFormatter::format(a2, "aopTimestamp");
  v7 = *((_QWORD *)this + 4);
  if (v7)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "dm");
  v8 = *((_QWORD *)this + 5);
  if (v8)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "dmAlwaysOn");
  v9 = *((_QWORD *)this + 6);
  if (v9)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, a2, "fallState");
  v10 = *((_QWORD *)this + 7);
  if (v10)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v10 + 32))(v10, a2, "fallStats");
  v11 = *((_QWORD *)this + 8);
  if (v11)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v11 + 32))(v11, a2, "gyro100");
  v12 = *((_QWORD *)this + 9);
  if (v12)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v12 + 32))(v12, a2, "gyro200");
  v13 = *((_QWORD *)this + 10);
  if (v13)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v13 + 32))(v13, a2, "heartRate");
  v14 = *((_QWORD *)this + 11);
  if (v14)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v14 + 32))(v14, a2, "meta");
  v15 = *((_QWORD *)this + 12);
  if (v15)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v15 + 32))(v15, a2, "odometerEntry");
  v16 = *((_QWORD *)this + 13);
  if (v16)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v16 + 32))(v16, a2, "pressure");
  v17 = *((_QWORD *)this + 14);
  if (v17)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v17 + 32))(v17, a2, "suppressionFeatures");
  v18 = *((_QWORD *)this + 15);
  if (v18)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v18 + 32))(v18, a2, "wristState");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FallSnippet::readFrom(CMMsl::FallSnippet *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v44;
  unsigned int v45;
  unint64_t v46;
  char v47;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_21:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 2u:
          *((_BYTE *)this + 128) |= 1u;
          v20 = *((_QWORD *)a2 + 1);
          v21 = *((_QWORD *)a2 + 2);
          v22 = *(_QWORD *)a2;
          if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
          {
            v23 = 0;
            v24 = 0;
            v25 = 0;
            do
            {
              v26 = v20 + 1;
              *((_QWORD *)a2 + 1) = v20 + 1;
              v27 = *(_BYTE *)(v22 + v20);
              v25 |= (unint64_t)(v27 & 0x7F) << v23;
              if ((v27 & 0x80) == 0)
                goto LABEL_76;
              v23 += 7;
              v20 = v26;
              v14 = v24++ > 8;
            }
            while (!v14);
LABEL_72:
            v25 = 0;
            goto LABEL_76;
          }
          v44 = 0;
          v45 = 0;
          v25 = 0;
          if (v21 <= v20)
            v21 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v21 == v20)
            {
              v25 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v46 = v20 + 1;
              v47 = *(_BYTE *)(v22 + v20);
              *((_QWORD *)a2 + 1) = v46;
              v25 |= (unint64_t)(v47 & 0x7F) << v44;
              if (v47 < 0)
              {
                v44 += 7;
                v20 = v46;
                v14 = v45++ > 8;
                if (v14)
                  goto LABEL_72;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v25 = 0;
            }
            break;
          }
LABEL_76:
          *((_QWORD *)this + 3) = v25;
          goto LABEL_61;
        case 3u:
          v28 = operator new();
          *(_QWORD *)v28 = &off_25135D830;
          *(_DWORD *)(v28 + 72) = 0;
          v29 = *((_QWORD *)this + 11);
          *((_QWORD *)this + 11) = v28;
          if (v29)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
            v28 = *((_QWORD *)this + 11);
          }
          goto LABEL_58;
        case 4u:
          v28 = operator new();
          *(_QWORD *)v28 = &off_25135BD10;
          *(_DWORD *)(v28 + 32) = 0;
          v30 = *((_QWORD *)this + 1);
          *((_QWORD *)this + 1) = v28;
          if (v30)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
            v28 = *((_QWORD *)this + 1);
          }
          goto LABEL_58;
        case 5u:
          v28 = operator new();
          *(_QWORD *)v28 = &off_25135BD10;
          *(_DWORD *)(v28 + 32) = 0;
          v31 = *((_QWORD *)this + 2);
          *((_QWORD *)this + 2) = v28;
          if (v31)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
            v28 = *((_QWORD *)this + 2);
          }
          goto LABEL_58;
        case 6u:
          v28 = operator new();
          *(_QWORD *)v28 = &off_25135DC90;
          *(_DWORD *)(v28 + 44) = 0;
          v32 = *((_QWORD *)this + 8);
          *((_QWORD *)this + 8) = v28;
          if (v32)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
            v28 = *((_QWORD *)this + 8);
          }
          goto LABEL_58;
        case 7u:
          v28 = operator new();
          *(_QWORD *)v28 = &off_25135DC90;
          *(_DWORD *)(v28 + 44) = 0;
          v33 = *((_QWORD *)this + 9);
          *((_QWORD *)this + 9) = v28;
          if (v33)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
            v28 = *((_QWORD *)this + 9);
          }
          goto LABEL_58;
        case 8u:
          v28 = operator new();
          *(_QWORD *)v28 = &off_25135D0C0;
          *(_DWORD *)(v28 + 124) = 0;
          v34 = *((_QWORD *)this + 4);
          *((_QWORD *)this + 4) = v28;
          if (v34)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
            v28 = *((_QWORD *)this + 4);
          }
          goto LABEL_58;
        case 9u:
          v28 = operator new();
          *(_QWORD *)v28 = &off_251360380;
          *(_DWORD *)(v28 + 24) = 0;
          v35 = *((_QWORD *)this + 13);
          *((_QWORD *)this + 13) = v28;
          if (v35)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
            v28 = *((_QWORD *)this + 13);
          }
          goto LABEL_58;
        case 0xAu:
          v28 = operator new();
          *(_QWORD *)v28 = &off_2513613B0;
          *(_QWORD *)(v28 + 8) = 0;
          v36 = *((_QWORD *)this + 10);
          *((_QWORD *)this + 10) = v28;
          if (v36)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
            v28 = *((_QWORD *)this + 10);
          }
          goto LABEL_58;
        case 0xBu:
          v28 = operator new();
          *(_QWORD *)v28 = &off_251361CE0;
          *(_DWORD *)(v28 + 40) = 0;
          v37 = *((_QWORD *)this + 15);
          *((_QWORD *)this + 15) = v28;
          if (v37)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
            v28 = *((_QWORD *)this + 15);
          }
          goto LABEL_58;
        case 0xCu:
          v28 = operator new();
          *(_QWORD *)v28 = &off_25135D8A0;
          *(_DWORD *)(v28 + 48) = 0;
          v38 = *((_QWORD *)this + 6);
          *((_QWORD *)this + 6) = v28;
          if (v38)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
            v28 = *((_QWORD *)this + 6);
          }
          goto LABEL_58;
        case 0xDu:
          v28 = operator new();
          *(_QWORD *)v28 = &off_25135D8D8;
          *(_QWORD *)(v28 + 216) = 0;
          v39 = *((_QWORD *)this + 7);
          *((_QWORD *)this + 7) = v28;
          if (v39)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
            v28 = *((_QWORD *)this + 7);
          }
          goto LABEL_58;
        case 0xEu:
          v28 = operator new();
          *(_QWORD *)v28 = &off_25135D7F8;
          *(_DWORD *)(v28 + 80) = 0;
          v40 = *((_QWORD *)this + 14);
          *((_QWORD *)this + 14) = v28;
          if (v40)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
            v28 = *((_QWORD *)this + 14);
          }
          goto LABEL_58;
        case 0xFu:
          v28 = operator new();
          *(_QWORD *)v28 = &off_25135D0C0;
          *(_DWORD *)(v28 + 124) = 0;
          v41 = *((_QWORD *)this + 5);
          *((_QWORD *)this + 5) = v28;
          if (v41)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
            v28 = *((_QWORD *)this + 5);
          }
          goto LABEL_58;
        case 0x10u:
          v28 = operator new();
          *(_QWORD *)v28 = &off_25135F7B0;
          *(_QWORD *)(v28 + 72) = 0;
          *(_DWORD *)(v28 + 80) = 0;
          v42 = *((_QWORD *)this + 12);
          *((_QWORD *)this + 12) = v28;
          if (v42)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
            v28 = *((_QWORD *)this + 12);
          }
LABEL_58:
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v28 + 16))(v28, a2) & 1) == 0)
          {
            return 0;
          }
          PB::Reader::recallMark();
          break;
        default:
          goto LABEL_19;
      }
      goto LABEL_61;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_21;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    result = PB::Reader::skip(a2);
    if (!(_DWORD)result)
      return result;
LABEL_61:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
}

uint64_t CMMsl::Pressure::Pressure(uint64_t this)
{
  *(_QWORD *)this = &off_251360380;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251360380;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

_QWORD *CMMsl::StreamingHeartRateData::StreamingHeartRateData(_QWORD *this)
{
  *this = &off_2513613B0;
  this[1] = 0;
  return this;
}

{
  *this = &off_2513613B0;
  this[1] = 0;
  return this;
}

uint64_t CMMsl::WatchOnWristState::WatchOnWristState(uint64_t this)
{
  *(_QWORD *)this = &off_251361CE0;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251361CE0;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t CMMsl::FallState::FallState(uint64_t this)
{
  *(_QWORD *)this = &off_25135D8A0;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135D8A0;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

_QWORD *CMMsl::FallStats::FallStats(_QWORD *this)
{
  *this = &off_25135D8D8;
  this[27] = 0;
  return this;
}

{
  *this = &off_25135D8D8;
  this[27] = 0;
  return this;
}

uint64_t CMMsl::OdometerWithAltitude::OdometerWithAltitude(uint64_t this)
{
  *(_QWORD *)this = &off_25135F7B0;
  *(_QWORD *)(this + 72) = 0;
  *(_DWORD *)(this + 80) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135F7B0;
  *(_QWORD *)(this + 72) = 0;
  *(_DWORD *)(this + 80) = 0;
  return this;
}

uint64_t CMMsl::FallSnippet::writeTo(uint64_t this, PB::Writer *a2)
{
  _QWORD *v3;
  const PB::Base *v4;
  const PB::Base *v5;
  const PB::Base *v6;
  const PB::Base *v7;
  const PB::Base *v8;
  const PB::Base *v9;
  const PB::Base *v10;
  const PB::Base *v11;
  const PB::Base *v12;
  const PB::Base *v13;
  const PB::Base *v14;
  const PB::Base *v15;
  const PB::Base *v16;
  const PB::Base *v17;

  v3 = (_QWORD *)this;
  if ((*(_BYTE *)(this + 128) & 1) != 0)
    this = PB::Writer::writeVarInt(a2);
  v4 = (const PB::Base *)v3[11];
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = (const PB::Base *)v3[1];
  if (v5)
    this = PB::Writer::writeSubmessage(a2, v5);
  v6 = (const PB::Base *)v3[2];
  if (v6)
    this = PB::Writer::writeSubmessage(a2, v6);
  v7 = (const PB::Base *)v3[8];
  if (v7)
    this = PB::Writer::writeSubmessage(a2, v7);
  v8 = (const PB::Base *)v3[9];
  if (v8)
    this = PB::Writer::writeSubmessage(a2, v8);
  v9 = (const PB::Base *)v3[4];
  if (v9)
    this = PB::Writer::writeSubmessage(a2, v9);
  v10 = (const PB::Base *)v3[13];
  if (v10)
    this = PB::Writer::writeSubmessage(a2, v10);
  v11 = (const PB::Base *)v3[10];
  if (v11)
    this = PB::Writer::writeSubmessage(a2, v11);
  v12 = (const PB::Base *)v3[15];
  if (v12)
    this = PB::Writer::writeSubmessage(a2, v12);
  v13 = (const PB::Base *)v3[6];
  if (v13)
    this = PB::Writer::writeSubmessage(a2, v13);
  v14 = (const PB::Base *)v3[7];
  if (v14)
    this = PB::Writer::writeSubmessage(a2, v14);
  v15 = (const PB::Base *)v3[14];
  if (v15)
    this = PB::Writer::writeSubmessage(a2, v15);
  v16 = (const PB::Base *)v3[5];
  if (v16)
    this = PB::Writer::writeSubmessage(a2, v16);
  v17 = (const PB::Base *)v3[12];
  if (v17)
    return PB::Writer::writeSubmessage(a2, v17);
  return this;
}

BOOL CMMsl::FallSnippet::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BOOL8 result;

  if ((*(_BYTE *)(a1 + 128) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 128) & 1) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 128) & 1) != 0)
  {
    return 0;
  }
  v4 = *(_QWORD *)(a1 + 88);
  v5 = *(_QWORD *)(a2 + 88);
  if (v4)
  {
    if (!v5 || !CMMsl::FallMetaData::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    if (!v7 || !CMMsl::Accel::operator==(v6, v7))
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a2 + 16);
  if (v8)
  {
    if (!v9 || !CMMsl::Accel::operator==(v8, v9))
      return 0;
  }
  else if (v9)
  {
    return 0;
  }
  v10 = *(_QWORD *)(a1 + 64);
  v11 = *(_QWORD *)(a2 + 64);
  if (v10)
  {
    if (!v11 || !CMMsl::Gyro::operator==(v10, v11))
      return 0;
  }
  else if (v11)
  {
    return 0;
  }
  v12 = *(_QWORD *)(a1 + 72);
  v13 = *(_QWORD *)(a2 + 72);
  if (v12)
  {
    if (!v13 || !CMMsl::Gyro::operator==(v12, v13))
      return 0;
  }
  else if (v13)
  {
    return 0;
  }
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a2 + 32);
  if (v14)
  {
    if (!v15 || !CMMsl::DeviceMotion::operator==(v14, v15))
      return 0;
  }
  else if (v15)
  {
    return 0;
  }
  v16 = *(_QWORD *)(a1 + 104);
  v17 = *(_QWORD *)(a2 + 104);
  if (v16)
  {
    if (!v17 || !CMMsl::Pressure::operator==(v16, v17))
      return 0;
  }
  else if (v17)
  {
    return 0;
  }
  v18 = *(_QWORD *)(a1 + 80);
  v19 = *(_QWORD *)(a2 + 80);
  if (v18)
  {
    if (!v19)
      return 0;
    v20 = *(_QWORD *)(v18 + 8);
    v21 = *(_QWORD *)(v19 + 8);
    if (v20)
    {
      if (!v21 || !CMMsl::OnsetHeartRateData::operator==(v20, v21))
        return 0;
    }
    else if (v21)
    {
      return 0;
    }
  }
  else if (v19)
  {
    return 0;
  }
  v22 = *(_QWORD *)(a1 + 120);
  v23 = *(_QWORD *)(a2 + 120);
  if (v22)
  {
    if (!v23 || !CMMsl::WatchOnWristState::operator==(v22, v23))
      return 0;
  }
  else if (v23)
  {
    return 0;
  }
  v24 = *(_QWORD *)(a1 + 48);
  v25 = *(_QWORD *)(a2 + 48);
  if (v24)
  {
    if (!v25 || !CMMsl::FallState::operator==(v24, v25))
      return 0;
  }
  else if (v25)
  {
    return 0;
  }
  v26 = *(_QWORD *)(a1 + 56);
  v27 = *(_QWORD *)(a2 + 56);
  if (v26)
  {
    if (!v27 || !CMMsl::FallStats::operator==(v26, v27))
      return 0;
  }
  else if (v27)
  {
    return 0;
  }
  v28 = *(_QWORD *)(a1 + 112);
  v29 = *(_QWORD *)(a2 + 112);
  if (v28)
  {
    if (!v29 || !CMMsl::FallFalsePositiveSuppressionFeatures::operator==(v28, v29))
      return 0;
  }
  else if (v29)
  {
    return 0;
  }
  v30 = *(_QWORD *)(a1 + 40);
  v31 = *(_QWORD *)(a2 + 40);
  if (v30)
  {
    if (!v31 || !CMMsl::DeviceMotion::operator==(v30, v31))
      return 0;
  }
  else if (v31)
  {
    return 0;
  }
  v32 = *(_QWORD *)(a2 + 96);
  result = v32 == 0;
  if (!*(_QWORD *)(a1 + 96))
    return result;
  return v32 && CMMsl::OdometerWithAltitude::operator==(*(_QWORD *)(a1 + 96), v32);
}

BOOL CMMsl::Pressure::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 24) & 4) == 0;
  if ((*(_BYTE *)(a1 + 24) & 4) != 0)
    return (*(_BYTE *)(a2 + 24) & 4) != 0 && *(float *)(a1 + 20) == *(float *)(a2 + 20);
  return v2;
}

BOOL CMMsl::StreamingHeartRateData::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::OnsetHeartRateData::operator==(v2, v3);
  return result;
}

BOOL CMMsl::WatchOnWristState::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(unsigned __int8 *)(a1 + 40);
  v3 = *(unsigned __int8 *)(a2 + 40);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(unsigned __int8 *)(a1 + 37) != *(unsigned __int8 *)(a2 + 37))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(unsigned __int8 *)(a1 + 36) != *(unsigned __int8 *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v3 & v2 & 0x80) != 0)
  {
    if (*(unsigned __int8 *)(a1 + 38) != *(unsigned __int8 *)(a2 + 38))
      return 0;
  }
  else if (((v3 | v2) & 0x80) != 0)
  {
    return 0;
  }
  v4 = (v3 & 2) == 0;
  if ((v2 & 2) != 0)
    return (v3 & 2) != 0 && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
  return v4;
}

BOOL CMMsl::FallState::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  v2 = *(unsigned __int8 *)(a1 + 48);
  v3 = *(unsigned __int8 *)(a2 + 48);
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v3 & v2 & 0x80) != 0)
    return *(unsigned __int8 *)(a1 + 44) == *(unsigned __int8 *)(a2 + 44);
  else
    return ((v3 | v2) & 0x80u) == 0;
}

BOOL CMMsl::FallStats::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 v4;

  v2 = *(_QWORD *)(a1 + 216);
  v3 = *(_QWORD *)(a2 + 216);
  if ((v2 & 0x80000000) != 0)
  {
    if ((v3 & 0x80000000) == 0 || *(_DWORD *)(a1 + 144) != *(_DWORD *)(a2 + 144))
      return 0;
  }
  else if ((v3 & 0x80000000) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000000) != 0)
  {
    if ((v3 & 0x8000000000) == 0 || *(float *)(a1 + 176) != *(float *)(a2 + 176))
      return 0;
  }
  else if ((v3 & 0x8000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000000) != 0)
  {
    if ((v3 & 0x4000000000) == 0 || *(float *)(a1 + 172) != *(float *)(a2 + 172))
      return 0;
  }
  else if ((v3 & 0x4000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000000) != 0)
  {
    if ((v3 & 0x80000000000) == 0 || *(float *)(a1 + 192) != *(float *)(a2 + 192))
      return 0;
  }
  else if ((v3 & 0x80000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000000) != 0)
  {
    if ((v3 & 0x40000000000) == 0 || *(float *)(a1 + 188) != *(float *)(a2 + 188))
      return 0;
  }
  else if ((v3 & 0x40000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000000) != 0)
  {
    if ((v3 & 0x800000000000) == 0 || *(float *)(a1 + 208) != *(float *)(a2 + 208))
      return 0;
  }
  else if ((v3 & 0x800000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000000) != 0)
  {
    if ((v3 & 0x400000000000) == 0 || *(float *)(a1 + 204) != *(float *)(a2 + 204))
      return 0;
  }
  else if ((v3 & 0x400000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000000) != 0)
  {
    if ((v3 & 0x10000000000) == 0 || *(float *)(a1 + 180) != *(float *)(a2 + 180))
      return 0;
  }
  else if ((v3 & 0x10000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000000) != 0)
  {
    if ((v3 & 0x100000000000) == 0 || *(float *)(a1 + 196) != *(float *)(a2 + 196))
      return 0;
  }
  else if ((v3 & 0x100000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000000) != 0)
  {
    if ((v3 & 0x1000000000000) == 0 || *(float *)(a1 + 212) != *(float *)(a2 + 212))
      return 0;
  }
  else if ((v3 & 0x1000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000000) != 0)
  {
    if ((v3 & 0x2000000000) == 0 || *(float *)(a1 + 168) != *(float *)(a2 + 168))
      return 0;
  }
  else if ((v3 & 0x2000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000000) != 0)
  {
    if ((v3 & 0x20000000000) == 0 || *(float *)(a1 + 184) != *(float *)(a2 + 184))
      return 0;
  }
  else if ((v3 & 0x20000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000000) != 0)
  {
    if ((v3 & 0x200000000000) == 0 || *(float *)(a1 + 200) != *(float *)(a2 + 200))
      return 0;
  }
  else if ((v3 & 0x200000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140))
      return 0;
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000) != 0)
  {
    if ((v3 & 0x100000000) == 0 || *(_DWORD *)(a1 + 148) != *(_DWORD *)(a2 + 148))
      return 0;
  }
  else if ((v3 & 0x100000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000) != 0)
  {
    if ((v3 & 0x1000000000) == 0 || *(_DWORD *)(a1 + 164) != *(_DWORD *)(a2 + 164))
      return 0;
  }
  else if ((v3 & 0x1000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000) != 0)
  {
    if ((v3 & 0x200000000) == 0 || *(float *)(a1 + 152) != *(float *)(a2 + 152))
      return 0;
  }
  else if ((v3 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(float *)(a1 + 136) != *(float *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000) != 0)
  {
    if ((v3 & 0x800000000) == 0 || *(float *)(a1 + 160) != *(float *)(a2 + 160))
      return 0;
  }
  else if ((v3 & 0x800000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000) != 0)
  {
    if ((v3 & 0x400000000) == 0 || *(float *)(a1 + 156) != *(float *)(a2 + 156))
      return 0;
  }
  else if ((v3 & 0x400000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132))
      return 0;
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124))
      return 0;
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(_DWORD *)(a1 + 120) != *(_DWORD *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  v4 = (*(_QWORD *)(a2 + 216) & 8) == 0;
  if ((v2 & 8) != 0)
    return (v3 & 8) != 0 && *(float *)(a1 + 32) == *(float *)(a2 + 32);
  return v4;
}

BOOL CMMsl::OdometerWithAltitude::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 72);
  v5 = *(_QWORD *)(a2 + 72);
  if (v4)
  {
    if (!v5 || !CMMsl::Odometer::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = *(unsigned __int8 *)(a1 + 80);
  v7 = *(unsigned __int8 *)(a2 + 80);
  if ((v6 & 4) != 0)
  {
    if ((v7 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v7 & 4) != 0)
  {
    return 0;
  }
  if ((v6 & 8) != 0)
  {
    if ((v7 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v7 & 8) != 0)
  {
    return 0;
  }
  if ((v6 & 0x40) != 0)
  {
    if ((v7 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v7 & 0x40) != 0)
  {
    return 0;
  }
  if ((v7 & v6 & 0x80) != 0)
  {
    if (*(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if (((v7 | v6) & 0x80) != 0)
  {
    return 0;
  }
  if ((v6 & 2) != 0)
  {
    if ((v7 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v7 & 2) != 0)
  {
    return 0;
  }
  if ((v6 & 1) != 0)
  {
    if ((v7 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v7 & 1) != 0)
  {
    return 0;
  }
  if ((v6 & 0x20) != 0)
  {
    if ((v7 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v7 & 0x20) != 0)
  {
    return 0;
  }
  result = (v7 & 0x10) == 0;
  if ((v6 & 0x10) == 0)
    return result;
  return (v7 & 0x10) != 0 && *(double *)(a1 + 40) == *(double *)(a2 + 40);
}

unint64_t CMMsl::FallSnippet::hash_value(CMMsl::FallSnippet *this)
{
  uint64_t v2;
  CMMsl::FallMetaData *v3;
  uint64_t v4;
  CMMsl::Accel *v5;
  uint64_t v6;
  CMMsl::Accel *v7;
  uint64_t v8;
  CMMsl::Gyro *v9;
  uint64_t v10;
  CMMsl::Gyro *v11;
  uint64_t v12;
  CMMsl::DeviceMotion *v13;
  uint64_t v14;
  CMMsl::Pressure *v15;
  uint64_t v16;
  uint64_t v17;
  CMMsl::OnsetHeartRateData *v18;
  uint64_t v19;
  CMMsl::WatchOnWristState *v20;
  uint64_t v21;
  CMMsl::FallState *v22;
  uint64_t v23;
  CMMsl::FallStats *v24;
  uint64_t v25;
  CMMsl::FallFalsePositiveSuppressionFeatures *v26;
  uint64_t v27;
  CMMsl::DeviceMotion *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  if ((*((_BYTE *)this + 128) & 1) != 0)
    v2 = *((_QWORD *)this + 3);
  else
    v2 = 0;
  v3 = (CMMsl::FallMetaData *)*((_QWORD *)this + 11);
  v36 = v2;
  if (v3)
    v4 = CMMsl::FallMetaData::hash_value(v3);
  else
    v4 = 0;
  v5 = (CMMsl::Accel *)*((_QWORD *)this + 1);
  v35 = v4;
  if (v5)
    v6 = CMMsl::Accel::hash_value(v5);
  else
    v6 = 0;
  v7 = (CMMsl::Accel *)*((_QWORD *)this + 2);
  v34 = v6;
  if (v7)
    v8 = CMMsl::Accel::hash_value(v7);
  else
    v8 = 0;
  v9 = (CMMsl::Gyro *)*((_QWORD *)this + 8);
  v33 = v8;
  if (v9)
    v10 = CMMsl::Gyro::hash_value(v9);
  else
    v10 = 0;
  v11 = (CMMsl::Gyro *)*((_QWORD *)this + 9);
  v32 = v10;
  if (v11)
    v12 = CMMsl::Gyro::hash_value(v11);
  else
    v12 = 0;
  v13 = (CMMsl::DeviceMotion *)*((_QWORD *)this + 4);
  if (v13)
    v14 = CMMsl::DeviceMotion::hash_value(v13);
  else
    v14 = 0;
  v15 = (CMMsl::Pressure *)*((_QWORD *)this + 13);
  if (v15)
    v16 = CMMsl::Pressure::hash_value(v15);
  else
    v16 = 0;
  v17 = *((_QWORD *)this + 10);
  if (v17 && (v18 = *(CMMsl::OnsetHeartRateData **)(v17 + 8)) != 0)
    v19 = CMMsl::OnsetHeartRateData::hash_value(v18);
  else
    v19 = 0;
  v20 = (CMMsl::WatchOnWristState *)*((_QWORD *)this + 15);
  if (v20)
    v21 = CMMsl::WatchOnWristState::hash_value(v20);
  else
    v21 = 0;
  v22 = (CMMsl::FallState *)*((_QWORD *)this + 6);
  if (v22)
    v23 = CMMsl::FallState::hash_value(v22);
  else
    v23 = 0;
  v24 = (CMMsl::FallStats *)*((_QWORD *)this + 7);
  if (v24)
    v25 = CMMsl::FallStats::hash_value(v24);
  else
    v25 = 0;
  v26 = (CMMsl::FallFalsePositiveSuppressionFeatures *)*((_QWORD *)this + 14);
  if (v26)
    v27 = CMMsl::FallFalsePositiveSuppressionFeatures::hash_value(v26);
  else
    v27 = 0;
  v28 = (CMMsl::DeviceMotion *)*((_QWORD *)this + 5);
  if (v28)
    v29 = CMMsl::DeviceMotion::hash_value(v28);
  else
    v29 = 0;
  v30 = *((_QWORD *)this + 12);
  if (v30)
    v30 = CMMsl::OdometerWithAltitude::hash_value((CMMsl::OdometerWithAltitude *)v30);
  return v35 ^ v36 ^ v34 ^ v33 ^ v32 ^ v12 ^ v14 ^ v16 ^ v19 ^ v21 ^ v23 ^ v25 ^ v27 ^ v29 ^ v30;
}

_QWORD *CMMsl::FallSnippet::makeMeta(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[11])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135D830;
    *(_DWORD *)(v2 + 72) = 0;
    this = (_QWORD *)v1[11];
    v1[11] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::FallSnippet::makeAccel100(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135BD10;
    *(_DWORD *)(v2 + 32) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::FallSnippet::makeAccel800(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[2])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135BD10;
    *(_DWORD *)(v2 + 32) = 0;
    this = (_QWORD *)v1[2];
    v1[2] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::FallSnippet::makeGyro100(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[8])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135DC90;
    *(_DWORD *)(v2 + 44) = 0;
    this = (_QWORD *)v1[8];
    v1[8] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::FallSnippet::makeGyro200(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[9])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135DC90;
    *(_DWORD *)(v2 + 44) = 0;
    this = (_QWORD *)v1[9];
    v1[9] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::FallSnippet::makeDm(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[4])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135D0C0;
    *(_DWORD *)(v2 + 124) = 0;
    this = (_QWORD *)v1[4];
    v1[4] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::FallSnippet::makePressure(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[13])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251360380;
    *(_DWORD *)(v2 + 24) = 0;
    this = (_QWORD *)v1[13];
    v1[13] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::FallSnippet::makeHeartRate(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[10])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_2513613B0;
    v2[1] = 0;
    this = (_QWORD *)v1[10];
    v1[10] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::FallSnippet::makeWristState(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[15])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251361CE0;
    *(_DWORD *)(v2 + 40) = 0;
    this = (_QWORD *)v1[15];
    v1[15] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::FallSnippet::makeFallState(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[6])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135D8A0;
    *(_DWORD *)(v2 + 48) = 0;
    this = (_QWORD *)v1[6];
    v1[6] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::FallSnippet::makeFallStats(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[7])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_25135D8D8;
    v2[27] = 0;
    this = (_QWORD *)v1[7];
    v1[7] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::FallSnippet::makeSuppressionFeatures(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[14])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135D7F8;
    *(_DWORD *)(v2 + 80) = 0;
    this = (_QWORD *)v1[14];
    v1[14] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::FallSnippet::makeDmAlwaysOn(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[5])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135D0C0;
    *(_DWORD *)(v2 + 124) = 0;
    this = (_QWORD *)v1[5];
    v1[5] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::FallSnippet::makeOdometerEntry(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[12])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135F7B0;
    *(_QWORD *)(v2 + 72) = 0;
    *(_DWORD *)(v2 + 80) = 0;
    this = (_QWORD *)v1[12];
    v1[12] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void CMMsl::FallState::~FallState(CMMsl::FallState *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::FallState::FallState(uint64_t this, const CMMsl::FallState *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  char v11;

  *(_QWORD *)this = &off_25135D8A0;
  *(_DWORD *)(this + 48) = 0;
  v2 = *((_BYTE *)a2 + 48);
  if ((v2 & 2) != 0)
  {
    v4 = *((_QWORD *)a2 + 2);
    v3 = 2;
    *(_BYTE *)(this + 48) = 2;
    *(_QWORD *)(this + 16) = v4;
    v2 = *((_BYTE *)a2 + 48);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 48) & 1) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 1);
    v3 |= 1u;
    *(_BYTE *)(this + 48) = v3;
    *(_QWORD *)(this + 8) = v5;
    v2 = *((_BYTE *)a2 + 48);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *(_BYTE *)(this + 48) = v3;
    *(_DWORD *)(this + 24) = v6;
    v2 = *((_BYTE *)a2 + 48);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_15;
    }
  }
  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 10);
  v3 |= 0x40u;
  *(_BYTE *)(this + 48) = v3;
  *(_DWORD *)(this + 40) = v7;
  v2 = *((_BYTE *)a2 + 48);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_16;
  }
LABEL_15:
  v8 = *((_DWORD *)a2 + 9);
  v3 |= 0x20u;
  *(_BYTE *)(this + 48) = v3;
  *(_DWORD *)(this + 36) = v8;
  v2 = *((_BYTE *)a2 + 48);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0)
      goto LABEL_11;
    goto LABEL_17;
  }
LABEL_16:
  v9 = *((_DWORD *)a2 + 8);
  v3 |= 0x10u;
  *(_BYTE *)(this + 48) = v3;
  *(_DWORD *)(this + 32) = v9;
  v2 = *((_BYTE *)a2 + 48);
  if ((v2 & 8) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0)
      return this;
LABEL_18:
    v11 = *((_BYTE *)a2 + 44);
    *(_BYTE *)(this + 48) = v3 | 0x80;
    *(_BYTE *)(this + 44) = v11;
    return this;
  }
LABEL_17:
  v10 = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *(_BYTE *)(this + 48) = v3;
  *(_DWORD *)(this + 28) = v10;
  if ((*((_BYTE *)a2 + 48) & 0x80) != 0)
    goto LABEL_18;
  return this;
}

uint64_t CMMsl::FallState::operator=(uint64_t a1, const CMMsl::FallState *a2)
{
  int v3;
  __int128 v4;
  int v5;
  __int128 v6;
  _BYTE v8[8];
  __int128 v9;
  __int128 v10;
  int v11;
  char v12;
  int v13;

  if ((const CMMsl::FallState *)a1 != a2)
  {
    CMMsl::FallState::FallState((uint64_t)v8, a2);
    v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v13;
    v13 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v5 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v11;
    v11 = v5;
    v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    v9 = v4;
    v10 = v6;
    LOBYTE(v5) = *(_BYTE *)(a1 + 44);
    *(_BYTE *)(a1 + 44) = v12;
    v12 = v5;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::FallState *a2, CMMsl::FallState *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_DWORD *)(this + 48);
  *(_DWORD *)(this + 48) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  v4 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  LODWORD(v5) = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v5;
  LODWORD(v5) = *(_DWORD *)(this + 40);
  *(_DWORD *)(this + 40) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v5;
  LODWORD(v5) = *(_DWORD *)(this + 36);
  *(_DWORD *)(this + 36) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v5;
  LODWORD(v5) = *(_DWORD *)(this + 32);
  *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v5;
  LODWORD(v5) = *(_DWORD *)(this + 28);
  *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v5;
  LOBYTE(v5) = *(_BYTE *)(this + 44);
  *(_BYTE *)(this + 44) = *((_BYTE *)a2 + 44);
  *((_BYTE *)a2 + 44) = v5;
  return this;
}

uint64_t CMMsl::FallState::FallState(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = &off_25135D8A0;
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(result + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(result + 28) = *(_DWORD *)(a2 + 28);
  *(_BYTE *)(result + 44) = *(_BYTE *)(a2 + 44);
  return result;
}

{
  *(_QWORD *)result = &off_25135D8A0;
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(result + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(result + 28) = *(_DWORD *)(a2 + 28);
  *(_BYTE *)(result + 44) = *(_BYTE *)(a2 + 44);
  return result;
}

uint64_t CMMsl::FallState::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  char v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  void (**v10)(CMMsl::FallState *__hidden);
  __int128 v11;
  __int128 v12;
  int v13;
  char v14;
  int v15;

  if (a1 != a2)
  {
    v10 = &off_25135D8A0;
    v3 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a2 + 48) = 0;
    v4 = *(_DWORD *)(a2 + 40);
    v5 = *(_BYTE *)(a2 + 44);
    v15 = *(_DWORD *)(a1 + 48);
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    v13 = *(_DWORD *)(a1 + 40);
    v7 = *(_OWORD *)(a1 + 24);
    v8 = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 48) = v3;
    *(_DWORD *)(a1 + 40) = v4;
    *(_OWORD *)(a1 + 24) = v8;
    v11 = v6;
    v12 = v7;
    LOBYTE(v3) = *(_BYTE *)(a1 + 44);
    *(_BYTE *)(a1 + 44) = v5;
    v14 = v3;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

uint64_t CMMsl::FallState::formatText(CMMsl::FallState *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 48);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "aopTsNow");
    v5 = *((_BYTE *)this + 48);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x80) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((*((_BYTE *)this + 48) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "aopTsSensor");
  v5 = *((_BYTE *)this + 48);
  if ((v5 & 0x80) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "fallAlertSentFromReferee");
  v5 = *((_BYTE *)this + 48);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "isFall");
  v5 = *((_BYTE *)this + 48);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "operatingMode");
  v5 = *((_BYTE *)this + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0)
      goto LABEL_8;
LABEL_17:
    PB::TextFormatter::format(a2, "response");
    if ((*((_BYTE *)this + 48) & 0x40) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_9;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "resolution");
  v5 = *((_BYTE *)this + 48);
  if ((v5 & 0x20) != 0)
    goto LABEL_17;
LABEL_8:
  if ((v5 & 0x40) != 0)
LABEL_9:
    PB::TextFormatter::format(a2, "state");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FallState::readFrom(CMMsl::FallState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  uint64_t v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  char v55;
  unint64_t v56;
  uint64_t v57;
  char v58;
  unsigned int v59;
  uint64_t v60;
  char v61;
  int v62;
  BOOL v63;
  char v64;
  unsigned int v65;
  unint64_t v66;
  char v67;
  char v68;
  unsigned int v69;
  unint64_t v70;
  char v71;
  char v72;
  unsigned int v73;
  unint64_t v74;
  char v75;
  char v76;
  unsigned int v77;
  unint64_t v78;
  char v79;
  char v80;
  unsigned int v81;
  unint64_t v82;
  char v83;
  char v84;
  unsigned int v85;
  unint64_t v86;
  char v87;
  char v88;
  unsigned int v89;
  unint64_t v90;
  char v91;

  v3 = *((_QWORD *)a2 + 1);
  v2 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 >= v2 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v3 > v2)
        v2 = v3;
      do
      {
        if (v2 == v3)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v3 + 1;
        v18 = *(_BYTE *)(v8 + v3);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_24;
        v15 += 7;
        v3 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v3 = *((_QWORD *)a2 + 1);
      v2 = *((_QWORD *)a2 + 2);
      goto LABEL_21;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v3 + 1;
      *((_QWORD *)a2 + 1) = v3 + 1;
      v13 = *(_BYTE *)(v8 + v3);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v3 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_24:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 48) |= 2u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v64 = 0;
          v65 = 0;
          v24 = 0;
          if (v2 <= v20)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v20)
            {
              v24 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_139;
            }
            v66 = v20++;
            v67 = *(_BYTE *)(v21 + v66);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v67 & 0x7F) << v64;
            if ((v67 & 0x80) == 0)
              break;
            v64 += 7;
            v14 = v65++ > 8;
            if (v14)
            {
              v24 = 0;
LABEL_138:
              v3 = v66 + 1;
              goto LABEL_139;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v24 = 0;
          goto LABEL_138;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v3 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_139;
          v22 += 7;
          v20 = v3;
          v14 = v23++ > 8;
        }
        while (!v14);
        v24 = 0;
LABEL_139:
        *((_QWORD *)this + 2) = v24;
        break;
      case 2u:
        *((_BYTE *)this + 48) |= 1u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v68 = 0;
          v69 = 0;
          v30 = 0;
          if (v2 <= v26)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v26)
            {
              v30 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_144;
            }
            v70 = v26++;
            v71 = *(_BYTE *)(v27 + v70);
            *((_QWORD *)a2 + 1) = v26;
            v30 |= (unint64_t)(v71 & 0x7F) << v68;
            if ((v71 & 0x80) == 0)
              break;
            v68 += 7;
            v14 = v69++ > 8;
            if (v14)
            {
              v30 = 0;
LABEL_143:
              v3 = v70 + 1;
              goto LABEL_144;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v30 = 0;
          goto LABEL_143;
        }
        v28 = 0;
        v29 = 0;
        v30 = 0;
        do
        {
          v3 = v26 + 1;
          *((_QWORD *)a2 + 1) = v26 + 1;
          v31 = *(_BYTE *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0)
            goto LABEL_144;
          v28 += 7;
          v26 = v3;
          v14 = v29++ > 8;
        }
        while (!v14);
        v30 = 0;
LABEL_144:
        *((_QWORD *)this + 1) = v30;
        break;
      case 3u:
        *((_BYTE *)this + 48) |= 4u;
        v32 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v33 = *(_QWORD *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
        {
          v72 = 0;
          v73 = 0;
          v36 = 0;
          if (v2 <= v32)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v32)
            {
              LODWORD(v36) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_149;
            }
            v74 = v32++;
            v75 = *(_BYTE *)(v33 + v74);
            *((_QWORD *)a2 + 1) = v32;
            v36 |= (unint64_t)(v75 & 0x7F) << v72;
            if ((v75 & 0x80) == 0)
              break;
            v72 += 7;
            v14 = v73++ > 8;
            if (v14)
            {
              LODWORD(v36) = 0;
LABEL_148:
              v3 = v74 + 1;
              goto LABEL_149;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v36) = 0;
          goto LABEL_148;
        }
        v34 = 0;
        v35 = 0;
        v36 = 0;
        do
        {
          v3 = v32 + 1;
          *((_QWORD *)a2 + 1) = v32 + 1;
          v37 = *(_BYTE *)(v33 + v32);
          v36 |= (unint64_t)(v37 & 0x7F) << v34;
          if ((v37 & 0x80) == 0)
            goto LABEL_149;
          v34 += 7;
          v32 = v3;
          v14 = v35++ > 8;
        }
        while (!v14);
        LODWORD(v36) = 0;
LABEL_149:
        *((_DWORD *)this + 6) = v36;
        break;
      case 4u:
        *((_BYTE *)this + 48) |= 0x40u;
        v38 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v39 = *(_QWORD *)a2;
        if (v38 > 0xFFFFFFFFFFFFFFF5 || v38 + 10 > v2)
        {
          v76 = 0;
          v77 = 0;
          v42 = 0;
          if (v2 <= v38)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v38)
            {
              LODWORD(v42) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_154;
            }
            v78 = v38++;
            v79 = *(_BYTE *)(v39 + v78);
            *((_QWORD *)a2 + 1) = v38;
            v42 |= (unint64_t)(v79 & 0x7F) << v76;
            if ((v79 & 0x80) == 0)
              break;
            v76 += 7;
            v14 = v77++ > 8;
            if (v14)
            {
              LODWORD(v42) = 0;
LABEL_153:
              v3 = v78 + 1;
              goto LABEL_154;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v42) = 0;
          goto LABEL_153;
        }
        v40 = 0;
        v41 = 0;
        v42 = 0;
        do
        {
          v3 = v38 + 1;
          *((_QWORD *)a2 + 1) = v38 + 1;
          v43 = *(_BYTE *)(v39 + v38);
          v42 |= (unint64_t)(v43 & 0x7F) << v40;
          if ((v43 & 0x80) == 0)
            goto LABEL_154;
          v40 += 7;
          v38 = v3;
          v14 = v41++ > 8;
        }
        while (!v14);
        LODWORD(v42) = 0;
LABEL_154:
        *((_DWORD *)this + 10) = v42;
        break;
      case 5u:
        *((_BYTE *)this + 48) |= 0x20u;
        v44 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v45 = *(_QWORD *)a2;
        if (v44 > 0xFFFFFFFFFFFFFFF5 || v44 + 10 > v2)
        {
          v80 = 0;
          v81 = 0;
          v48 = 0;
          if (v2 <= v44)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v44)
            {
              LODWORD(v48) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_159;
            }
            v82 = v44++;
            v83 = *(_BYTE *)(v45 + v82);
            *((_QWORD *)a2 + 1) = v44;
            v48 |= (unint64_t)(v83 & 0x7F) << v80;
            if ((v83 & 0x80) == 0)
              break;
            v80 += 7;
            v14 = v81++ > 8;
            if (v14)
            {
              LODWORD(v48) = 0;
LABEL_158:
              v3 = v82 + 1;
              goto LABEL_159;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v48) = 0;
          goto LABEL_158;
        }
        v46 = 0;
        v47 = 0;
        v48 = 0;
        do
        {
          v3 = v44 + 1;
          *((_QWORD *)a2 + 1) = v44 + 1;
          v49 = *(_BYTE *)(v45 + v44);
          v48 |= (unint64_t)(v49 & 0x7F) << v46;
          if ((v49 & 0x80) == 0)
            goto LABEL_159;
          v46 += 7;
          v44 = v3;
          v14 = v47++ > 8;
        }
        while (!v14);
        LODWORD(v48) = 0;
LABEL_159:
        *((_DWORD *)this + 9) = v48;
        break;
      case 6u:
        *((_BYTE *)this + 48) |= 0x10u;
        v50 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v51 = *(_QWORD *)a2;
        if (v50 > 0xFFFFFFFFFFFFFFF5 || v50 + 10 > v2)
        {
          v84 = 0;
          v85 = 0;
          v54 = 0;
          if (v2 <= v50)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v50)
            {
              LODWORD(v54) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_164;
            }
            v86 = v50++;
            v87 = *(_BYTE *)(v51 + v86);
            *((_QWORD *)a2 + 1) = v50;
            v54 |= (unint64_t)(v87 & 0x7F) << v84;
            if ((v87 & 0x80) == 0)
              break;
            v84 += 7;
            v14 = v85++ > 8;
            if (v14)
            {
              LODWORD(v54) = 0;
LABEL_163:
              v3 = v86 + 1;
              goto LABEL_164;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v54) = 0;
          goto LABEL_163;
        }
        v52 = 0;
        v53 = 0;
        v54 = 0;
        do
        {
          v3 = v50 + 1;
          *((_QWORD *)a2 + 1) = v50 + 1;
          v55 = *(_BYTE *)(v51 + v50);
          v54 |= (unint64_t)(v55 & 0x7F) << v52;
          if ((v55 & 0x80) == 0)
            goto LABEL_164;
          v52 += 7;
          v50 = v3;
          v14 = v53++ > 8;
        }
        while (!v14);
        LODWORD(v54) = 0;
LABEL_164:
        *((_DWORD *)this + 8) = v54;
        break;
      case 7u:
        *((_BYTE *)this + 48) |= 8u;
        v56 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v57 = *(_QWORD *)a2;
        if (v56 > 0xFFFFFFFFFFFFFFF5 || v56 + 10 > v2)
        {
          v88 = 0;
          v89 = 0;
          v60 = 0;
          if (v2 <= v56)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v56)
            {
              LODWORD(v60) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_169;
            }
            v90 = v56++;
            v91 = *(_BYTE *)(v57 + v90);
            *((_QWORD *)a2 + 1) = v56;
            v60 |= (unint64_t)(v91 & 0x7F) << v88;
            if ((v91 & 0x80) == 0)
              break;
            v88 += 7;
            v14 = v89++ > 8;
            if (v14)
            {
              LODWORD(v60) = 0;
LABEL_168:
              v3 = v90 + 1;
              goto LABEL_169;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v60) = 0;
          goto LABEL_168;
        }
        v58 = 0;
        v59 = 0;
        v60 = 0;
        do
        {
          v3 = v56 + 1;
          *((_QWORD *)a2 + 1) = v56 + 1;
          v61 = *(_BYTE *)(v57 + v56);
          v60 |= (unint64_t)(v61 & 0x7F) << v58;
          if ((v61 & 0x80) == 0)
            goto LABEL_169;
          v58 += 7;
          v56 = v3;
          v14 = v59++ > 8;
        }
        while (!v14);
        LODWORD(v60) = 0;
LABEL_169:
        *((_DWORD *)this + 7) = v60;
        break;
      case 8u:
        *((_BYTE *)this + 48) |= 0x80u;
        v3 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        if (v3 >= v2)
        {
          v63 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v62 = *(unsigned __int8 *)(*(_QWORD *)a2 + v3++);
          *((_QWORD *)a2 + 1) = v3;
          v63 = v62 != 0;
        }
        *((_BYTE *)this + 44) = v63;
        break;
      default:
        goto LABEL_19;
    }
LABEL_21:
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v3 >= v2 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::FallState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 48);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 48);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(this + 48) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0)
      return this;
    return PB::Writer::write(a2);
  }
LABEL_16:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_BYTE *)(v3 + 48) & 0x80) != 0)
    return PB::Writer::write(a2);
  return this;
}

uint64_t CMMsl::FallState::hash_value(CMMsl::FallState *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((*((_BYTE *)this + 48) & 2) != 0)
  {
    v1 = *((_QWORD *)this + 2);
    if ((*((_BYTE *)this + 48) & 1) != 0)
    {
LABEL_3:
      v2 = *((_QWORD *)this + 1);
      if ((*((_BYTE *)this + 48) & 4) != 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else
  {
    v1 = 0;
    if ((*((_BYTE *)this + 48) & 1) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 48) & 4) != 0)
  {
LABEL_4:
    v3 = *((unsigned int *)this + 6);
    if ((*((_BYTE *)this + 48) & 0x40) != 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  v3 = 0;
  if ((*((_BYTE *)this + 48) & 0x40) != 0)
  {
LABEL_5:
    v4 = *((unsigned int *)this + 10);
    if ((*((_BYTE *)this + 48) & 0x20) != 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  v4 = 0;
  if ((*((_BYTE *)this + 48) & 0x20) != 0)
  {
LABEL_6:
    v5 = *((unsigned int *)this + 9);
    if ((*((_BYTE *)this + 48) & 0x10) != 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  v5 = 0;
  if ((*((_BYTE *)this + 48) & 0x10) != 0)
  {
LABEL_7:
    v6 = *((unsigned int *)this + 8);
    if ((*((_BYTE *)this + 48) & 8) != 0)
      goto LABEL_8;
LABEL_16:
    v7 = 0;
    if ((*((_BYTE *)this + 48) & 0x80) != 0)
      goto LABEL_9;
LABEL_17:
    v8 = 0;
    return v2 ^ v1 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8;
  }
LABEL_15:
  v6 = 0;
  if ((*((_BYTE *)this + 48) & 8) == 0)
    goto LABEL_16;
LABEL_8:
  v7 = *((unsigned int *)this + 7);
  if ((*((_BYTE *)this + 48) & 0x80) == 0)
    goto LABEL_17;
LABEL_9:
  v8 = *((unsigned __int8 *)this + 44);
  return v2 ^ v1 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8;
}

void CMMsl::FallStats::~FallStats(CMMsl::FallStats *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::FallStats::FallStats(CMMsl::FallStats *this, const CMMsl::FallStats *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  float result;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;

  *(_QWORD *)this = &off_25135D8D8;
  *((_QWORD *)this + 27) = 0;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x80000000) != 0)
  {
    v4 = *((_DWORD *)a2 + 36);
    v3 = 0x80000000;
    *((_QWORD *)this + 27) = 0x80000000;
    *((_DWORD *)this + 36) = v4;
    v2 = *((_QWORD *)a2 + 27);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 1) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 1);
    v3 |= 1uLL;
    *((_QWORD *)this + 27) = v3;
    *((_QWORD *)this + 1) = v5;
    v2 = *((_QWORD *)a2 + 27);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *((_QWORD *)a2 + 2);
    v3 |= 2uLL;
    *((_QWORD *)this + 27) = v3;
    *((_QWORD *)this + 2) = v6;
    v2 = *((_QWORD *)a2 + 27);
    if ((v2 & 0x20000) == 0)
    {
LABEL_8:
      if ((v2 & 0x8000000000) == 0)
        goto LABEL_9;
      goto LABEL_56;
    }
  }
  else if ((v2 & 0x20000) == 0)
  {
    goto LABEL_8;
  }
  result = *((float *)a2 + 22);
  v3 |= 0x20000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 22) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x8000000000) == 0)
  {
LABEL_9:
    if ((v2 & 0x4000000000) == 0)
      goto LABEL_10;
    goto LABEL_57;
  }
LABEL_56:
  result = *((float *)a2 + 44);
  v3 |= 0x8000000000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 44) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x4000000000) == 0)
  {
LABEL_10:
    if ((v2 & 0x80000000000) == 0)
      goto LABEL_11;
    goto LABEL_58;
  }
LABEL_57:
  result = *((float *)a2 + 43);
  v3 |= 0x4000000000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 43) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x80000000000) == 0)
  {
LABEL_11:
    if ((v2 & 0x40000000000) == 0)
      goto LABEL_12;
    goto LABEL_59;
  }
LABEL_58:
  result = *((float *)a2 + 48);
  v3 |= 0x80000000000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 48) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x40000000000) == 0)
  {
LABEL_12:
    if ((v2 & 0x800000000000) == 0)
      goto LABEL_13;
    goto LABEL_60;
  }
LABEL_59:
  result = *((float *)a2 + 47);
  v3 |= 0x40000000000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 47) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x800000000000) == 0)
  {
LABEL_13:
    if ((v2 & 0x400000000000) == 0)
      goto LABEL_14;
    goto LABEL_61;
  }
LABEL_60:
  result = *((float *)a2 + 52);
  v3 |= 0x800000000000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 52) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x400000000000) == 0)
  {
LABEL_14:
    if ((v2 & 0x10000000000) == 0)
      goto LABEL_15;
    goto LABEL_62;
  }
LABEL_61:
  result = *((float *)a2 + 51);
  v3 |= 0x400000000000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 51) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x10000000000) == 0)
  {
LABEL_15:
    if ((v2 & 0x100000000000) == 0)
      goto LABEL_16;
    goto LABEL_63;
  }
LABEL_62:
  result = *((float *)a2 + 45);
  v3 |= 0x10000000000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 45) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x100000000000) == 0)
  {
LABEL_16:
    if ((v2 & 0x1000000000000) == 0)
      goto LABEL_17;
    goto LABEL_64;
  }
LABEL_63:
  result = *((float *)a2 + 49);
  v3 |= 0x100000000000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 49) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x1000000000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_65;
  }
LABEL_64:
  result = *((float *)a2 + 53);
  v3 |= 0x1000000000000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 53) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x10000) == 0)
  {
LABEL_18:
    if ((v2 & 0x2000000000) == 0)
      goto LABEL_19;
    goto LABEL_66;
  }
LABEL_65:
  result = *((float *)a2 + 21);
  v3 |= 0x10000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 21) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x2000000000) == 0)
  {
LABEL_19:
    if ((v2 & 0x20000000000) == 0)
      goto LABEL_20;
    goto LABEL_67;
  }
LABEL_66:
  result = *((float *)a2 + 42);
  v3 |= 0x2000000000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 42) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x20000000000) == 0)
  {
LABEL_20:
    if ((v2 & 0x200000000000) == 0)
      goto LABEL_21;
    goto LABEL_68;
  }
LABEL_67:
  result = *((float *)a2 + 46);
  v3 |= 0x20000000000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 46) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x200000000000) == 0)
  {
LABEL_21:
    if ((v2 & 4) == 0)
      goto LABEL_22;
    goto LABEL_69;
  }
LABEL_68:
  result = *((float *)a2 + 50);
  v3 |= 0x200000000000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 50) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 4) == 0)
  {
LABEL_22:
    if ((v2 & 0x10) == 0)
      goto LABEL_23;
    goto LABEL_70;
  }
LABEL_69:
  v8 = *((_QWORD *)a2 + 3);
  v3 |= 4uLL;
  *((_QWORD *)this + 27) = v3;
  *((_QWORD *)this + 3) = v8;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x10) == 0)
  {
LABEL_23:
    if ((v2 & 0x800000) == 0)
      goto LABEL_24;
    goto LABEL_71;
  }
LABEL_70:
  result = *((float *)a2 + 9);
  v3 |= 0x10uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 9) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x800000) == 0)
  {
LABEL_24:
    if ((v2 & 0x80) == 0)
      goto LABEL_25;
    goto LABEL_72;
  }
LABEL_71:
  result = *((float *)a2 + 28);
  v3 |= 0x800000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 28) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x80) == 0)
  {
LABEL_25:
    if ((v2 & 0x40) == 0)
      goto LABEL_26;
    goto LABEL_73;
  }
LABEL_72:
  result = *((float *)a2 + 12);
  v3 |= 0x80uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 12) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x40) == 0)
  {
LABEL_26:
    if ((v2 & 0x100000) == 0)
      goto LABEL_27;
    goto LABEL_74;
  }
LABEL_73:
  result = *((float *)a2 + 11);
  v3 |= 0x40uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 11) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x100000) == 0)
  {
LABEL_27:
    if ((v2 & 0x80000) == 0)
      goto LABEL_28;
    goto LABEL_75;
  }
LABEL_74:
  result = *((float *)a2 + 25);
  v3 |= 0x100000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 25) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x80000) == 0)
  {
LABEL_28:
    if ((v2 & 0x40000000) == 0)
      goto LABEL_29;
    goto LABEL_76;
  }
LABEL_75:
  result = *((float *)a2 + 24);
  v3 |= 0x80000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 24) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_29:
    if ((v2 & 0x1000) == 0)
      goto LABEL_30;
    goto LABEL_77;
  }
LABEL_76:
  result = *((float *)a2 + 35);
  v3 |= 0x40000000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 35) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x1000) == 0)
  {
LABEL_30:
    if ((v2 & 0x4000) == 0)
      goto LABEL_31;
    goto LABEL_78;
  }
LABEL_77:
  v9 = *((_DWORD *)a2 + 17);
  v3 |= 0x1000uLL;
  *((_QWORD *)this + 27) = v3;
  *((_DWORD *)this + 17) = v9;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x4000) == 0)
  {
LABEL_31:
    if ((v2 & 0x100000000) == 0)
      goto LABEL_32;
    goto LABEL_79;
  }
LABEL_78:
  v10 = *((_DWORD *)a2 + 19);
  v3 |= 0x4000uLL;
  *((_QWORD *)this + 27) = v3;
  *((_DWORD *)this + 19) = v10;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x100000000) == 0)
  {
LABEL_32:
    if ((v2 & 0x1000000000) == 0)
      goto LABEL_33;
    goto LABEL_80;
  }
LABEL_79:
  v11 = *((_DWORD *)a2 + 37);
  v3 |= 0x100000000uLL;
  *((_QWORD *)this + 27) = v3;
  *((_DWORD *)this + 37) = v11;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x1000000000) == 0)
  {
LABEL_33:
    if ((v2 & 0x100) == 0)
      goto LABEL_34;
    goto LABEL_81;
  }
LABEL_80:
  v12 = *((_DWORD *)a2 + 41);
  v3 |= 0x1000000000uLL;
  *((_QWORD *)this + 27) = v3;
  *((_DWORD *)this + 41) = v12;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x100) == 0)
  {
LABEL_34:
    if ((v2 & 0x200000000) == 0)
      goto LABEL_35;
    goto LABEL_82;
  }
LABEL_81:
  v13 = *((_DWORD *)a2 + 13);
  v3 |= 0x100uLL;
  *((_QWORD *)this + 27) = v3;
  *((_DWORD *)this + 13) = v13;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x200000000) == 0)
  {
LABEL_35:
    if ((v2 & 0x800) == 0)
      goto LABEL_36;
    goto LABEL_83;
  }
LABEL_82:
  result = *((float *)a2 + 38);
  v3 |= 0x200000000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 38) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x800) == 0)
  {
LABEL_36:
    if ((v2 & 0x400) == 0)
      goto LABEL_37;
    goto LABEL_84;
  }
LABEL_83:
  result = *((float *)a2 + 16);
  v3 |= 0x800uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 16) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x400) == 0)
  {
LABEL_37:
    if ((v2 & 0x200000) == 0)
      goto LABEL_38;
    goto LABEL_85;
  }
LABEL_84:
  result = *((float *)a2 + 15);
  v3 |= 0x400uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 15) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x200000) == 0)
  {
LABEL_38:
    if ((v2 & 0x40000) == 0)
      goto LABEL_39;
    goto LABEL_86;
  }
LABEL_85:
  result = *((float *)a2 + 26);
  v3 |= 0x200000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 26) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x40000) == 0)
  {
LABEL_39:
    if ((v2 & 0x20000000) == 0)
      goto LABEL_40;
    goto LABEL_87;
  }
LABEL_86:
  result = *((float *)a2 + 23);
  v3 |= 0x40000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 23) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_40:
    if ((v2 & 0x800000000) == 0)
      goto LABEL_41;
    goto LABEL_88;
  }
LABEL_87:
  result = *((float *)a2 + 34);
  v3 |= 0x20000000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 34) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x800000000) == 0)
  {
LABEL_41:
    if ((v2 & 0x400000000) == 0)
      goto LABEL_42;
    goto LABEL_89;
  }
LABEL_88:
  result = *((float *)a2 + 40);
  v3 |= 0x800000000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 40) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x400000000) == 0)
  {
LABEL_42:
    if ((v2 & 0x8000) == 0)
      goto LABEL_43;
    goto LABEL_90;
  }
LABEL_89:
  result = *((float *)a2 + 39);
  v3 |= 0x400000000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 39) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x8000) == 0)
  {
LABEL_43:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_44;
    goto LABEL_91;
  }
LABEL_90:
  v14 = *((_DWORD *)a2 + 20);
  v3 |= 0x8000uLL;
  *((_QWORD *)this + 27) = v3;
  *((_DWORD *)this + 20) = v14;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_44:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_45;
    goto LABEL_92;
  }
LABEL_91:
  result = *((float *)a2 + 33);
  v3 |= 0x10000000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 33) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_45:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_46;
    goto LABEL_93;
  }
LABEL_92:
  result = *((float *)a2 + 31);
  v3 |= 0x4000000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 31) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_46:
    if ((v2 & 0x20) == 0)
      goto LABEL_47;
    goto LABEL_94;
  }
LABEL_93:
  result = *((float *)a2 + 32);
  v3 |= 0x8000000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 32) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x20) == 0)
  {
LABEL_47:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_48;
    goto LABEL_95;
  }
LABEL_94:
  result = *((float *)a2 + 10);
  v3 |= 0x20uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 10) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_48:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_49;
    goto LABEL_96;
  }
LABEL_95:
  result = *((float *)a2 + 29);
  v3 |= 0x1000000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 29) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_49:
    if ((v2 & 0x2000) == 0)
      goto LABEL_50;
    goto LABEL_97;
  }
LABEL_96:
  v15 = *((_DWORD *)a2 + 30);
  v3 |= 0x2000000uLL;
  *((_QWORD *)this + 27) = v3;
  *((_DWORD *)this + 30) = v15;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x2000) == 0)
  {
LABEL_50:
    if ((v2 & 0x200) == 0)
      goto LABEL_51;
    goto LABEL_98;
  }
LABEL_97:
  result = *((float *)a2 + 18);
  v3 |= 0x2000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 18) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x200) == 0)
  {
LABEL_51:
    if ((v2 & 0x400000) == 0)
      goto LABEL_52;
    goto LABEL_99;
  }
LABEL_98:
  result = *((float *)a2 + 14);
  v3 |= 0x200uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 14) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x400000) == 0)
  {
LABEL_52:
    if ((v2 & 8) == 0)
      return result;
LABEL_100:
    result = *((float *)a2 + 8);
    *((_QWORD *)this + 27) = v3 | 8;
    *((float *)this + 8) = result;
    return result;
  }
LABEL_99:
  result = *((float *)a2 + 27);
  v3 |= 0x400000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 27) = result;
  if ((*((_QWORD *)a2 + 27) & 8) != 0)
    goto LABEL_100;
  return result;
}

CMMsl *CMMsl::FallStats::operator=(CMMsl *a1, const CMMsl::FallStats *a2)
{
  CMMsl::FallStats *v3;
  _BYTE v5[224];

  if (a1 != a2)
  {
    CMMsl::FallStats::FallStats((CMMsl::FallStats *)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallStats *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::FallStats *a2, CMMsl::FallStats *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  float result;

  v3 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = *((_QWORD *)a2 + 27);
  *((_QWORD *)a2 + 27) = v3;
  LODWORD(v3) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v6;
  v7 = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v7;
  v8 = *((_DWORD *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((_DWORD *)a2 + 43) = v8;
  v9 = *((_DWORD *)this + 48);
  *((_DWORD *)this + 48) = *((_DWORD *)a2 + 48);
  *((_DWORD *)a2 + 48) = v9;
  v10 = *((_DWORD *)this + 47);
  *((_DWORD *)this + 47) = *((_DWORD *)a2 + 47);
  *((_DWORD *)a2 + 47) = v10;
  v11 = *((_DWORD *)this + 52);
  *((_DWORD *)this + 52) = *((_DWORD *)a2 + 52);
  *((_DWORD *)a2 + 52) = v11;
  v12 = *((_DWORD *)this + 51);
  *((_DWORD *)this + 51) = *((_DWORD *)a2 + 51);
  *((_DWORD *)a2 + 51) = v12;
  v13 = *((_DWORD *)this + 45);
  *((_DWORD *)this + 45) = *((_DWORD *)a2 + 45);
  *((_DWORD *)a2 + 45) = v13;
  v14 = *((_DWORD *)this + 49);
  *((_DWORD *)this + 49) = *((_DWORD *)a2 + 49);
  *((_DWORD *)a2 + 49) = v14;
  v15 = *((_DWORD *)this + 53);
  *((_DWORD *)this + 53) = *((_DWORD *)a2 + 53);
  *((_DWORD *)a2 + 53) = v15;
  v16 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v16;
  v17 = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v17;
  v18 = *((_DWORD *)this + 46);
  *((_DWORD *)this + 46) = *((_DWORD *)a2 + 46);
  *((_DWORD *)a2 + 46) = v18;
  v19 = *((_DWORD *)this + 50);
  *((_DWORD *)this + 50) = *((_DWORD *)a2 + 50);
  *((_DWORD *)a2 + 50) = v19;
  v20 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v20;
  v21 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v21;
  v22 = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v22;
  v23 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v23;
  v24 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v24;
  v25 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v25;
  v26 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v26;
  v27 = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v27;
  LODWORD(v20) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v20;
  LODWORD(v20) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v20;
  LODWORD(v20) = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v20;
  LODWORD(v20) = *((_DWORD *)this + 41);
  *((_DWORD *)this + 41) = *((_DWORD *)a2 + 41);
  *((_DWORD *)a2 + 41) = v20;
  LODWORD(v20) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v20;
  v28 = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v28;
  v29 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v29;
  v30 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v30;
  v31 = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v31;
  v32 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v32;
  v33 = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v33;
  v34 = *((_DWORD *)this + 40);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
  *((_DWORD *)a2 + 40) = v34;
  v35 = *((_DWORD *)this + 39);
  *((_DWORD *)this + 39) = *((_DWORD *)a2 + 39);
  *((_DWORD *)a2 + 39) = v35;
  LODWORD(v20) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v20;
  v36 = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v36;
  v37 = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v37;
  v38 = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v38;
  v39 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v39;
  v40 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v40;
  LODWORD(v20) = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v20;
  v41 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v41;
  v42 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v42;
  v43 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v43;
  result = *((float *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((float *)a2 + 8) = result;
  return result;
}

float CMMsl::FallStats::FallStats(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135D8D8;
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a2 + 216) = 0;
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 196);
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  result = *(float *)(a2 + 32);
  *(float *)(a1 + 32) = result;
  return result;
}

CMMsl *CMMsl::FallStats::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::FallStats *v3;
  _BYTE v5[224];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::FallStats::FallStats((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallStats *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::FallStats::formatText(CMMsl::FallStats *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "abruptGravityChangeAngle", *((float *)this + 8));
    v5 = *((_QWORD *)this + 27);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_54;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "accelPathLength", *((float *)this + 9));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "accelPathLengthWithPeak", *((float *)this + 10));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "angleChangePostImpact", *((float *)this + 11));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 1) == 0)
      goto LABEL_7;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "angleChangePreImpact", *((float *)this + 12));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 1) == 0)
  {
LABEL_7:
    if ((v5 & 2) == 0)
      goto LABEL_8;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "aopTsNow");
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 2) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "aopTsSensor");
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "crown");
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "crownVariance", *((float *)this + 14));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "extrapolatedMaxAccelNorm", *((float *)this + 15));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "extrapolatedMaxMinusMin", *((float *)this + 16));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0)
      goto LABEL_14;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "fallType");
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x2000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000) == 0)
      goto LABEL_15;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "gravityVariance", *((float *)this + 18));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x4000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0)
      goto LABEL_16;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "isFall");
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000) == 0)
      goto LABEL_17;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "isNearFall");
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x10000) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "jerkVectorMagMax", *((float *)this + 21));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0)
      goto LABEL_19;
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(a2, "magMax", *((float *)this + 22));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 0x80000) == 0)
      goto LABEL_20;
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(a2, "maxAccelNorm", *((float *)this + 23));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x80000) == 0)
  {
LABEL_20:
    if ((v5 & 0x100000) == 0)
      goto LABEL_21;
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(a2, "maxAngleChangePostImpact", *((float *)this + 24));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x100000) == 0)
  {
LABEL_21:
    if ((v5 & 0x200000) == 0)
      goto LABEL_22;
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(a2, "maxAngleChangePreImpact", *((float *)this + 25));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x200000) == 0)
  {
LABEL_22:
    if ((v5 & 0x400000) == 0)
      goto LABEL_23;
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(a2, "maxMinusMin", *((float *)this + 26));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x400000) == 0)
  {
LABEL_23:
    if ((v5 & 0x800000) == 0)
      goto LABEL_24;
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(a2, "medianAbsGravityY", *((float *)this + 27));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x800000) == 0)
  {
LABEL_24:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_25;
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(a2, "minInertialZ", *((float *)this + 28));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_26;
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(a2, "minInertialZHighFreq", *((float *)this + 29));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_27;
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(a2, "operatingMode");
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_28;
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(a2, "pathLengthDecorrelation", *((float *)this + 31));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_29;
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(a2, "pathLengthDelaySpread", *((float *)this + 32));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_29:
    if ((v5 & 4) == 0)
      goto LABEL_30;
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(a2, "pathLengthHarmonicMean", *((float *)this + 33));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 4) == 0)
  {
LABEL_30:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_31;
    goto LABEL_81;
  }
LABEL_80:
  PB::TextFormatter::format(a2, "peakTimestamp");
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_32;
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(a2, "poseAtImpact", *((float *)this + 34));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_33;
    goto LABEL_83;
  }
LABEL_82:
  PB::TextFormatter::format(a2, "posteriorRatio", *((float *)this + 35));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_34;
    goto LABEL_84;
  }
LABEL_83:
  PB::TextFormatter::format(a2, "seq");
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_35;
    goto LABEL_85;
  }
LABEL_84:
  PB::TextFormatter::format(a2, "simulated");
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x400000000) == 0)
      goto LABEL_36;
    goto LABEL_86;
  }
LABEL_85:
  PB::TextFormatter::format(a2, "sumDeltaAngles", *((float *)this + 38));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x800000000) == 0)
      goto LABEL_37;
    goto LABEL_87;
  }
LABEL_86:
  PB::TextFormatter::format(a2, "swingAngle", *((float *)this + 39));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x800000000) == 0)
  {
LABEL_37:
    if ((v5 & 0x1000000000) == 0)
      goto LABEL_38;
    goto LABEL_88;
  }
LABEL_87:
  PB::TextFormatter::format(a2, "tiltAngle", *((float *)this + 40));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x1000000000) == 0)
  {
LABEL_38:
    if ((v5 & 0x2000000000) == 0)
      goto LABEL_39;
    goto LABEL_89;
  }
LABEL_88:
  PB::TextFormatter::format(a2, "trialCount");
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x2000000000) == 0)
  {
LABEL_39:
    if ((v5 & 0x4000000000) == 0)
      goto LABEL_40;
    goto LABEL_90;
  }
LABEL_89:
  PB::TextFormatter::format(a2, "xJerkScalarMagMax", *((float *)this + 42));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x4000000000) == 0)
  {
LABEL_40:
    if ((v5 & 0x8000000000) == 0)
      goto LABEL_41;
    goto LABEL_91;
  }
LABEL_90:
  PB::TextFormatter::format(a2, "xMax", *((float *)this + 43));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x8000000000) == 0)
  {
LABEL_41:
    if ((v5 & 0x10000000000) == 0)
      goto LABEL_42;
    goto LABEL_92;
  }
LABEL_91:
  PB::TextFormatter::format(a2, "xMin", *((float *)this + 44));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x10000000000) == 0)
  {
LABEL_42:
    if ((v5 & 0x20000000000) == 0)
      goto LABEL_43;
    goto LABEL_93;
  }
LABEL_92:
  PB::TextFormatter::format(a2, "xZCTime", *((float *)this + 45));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x20000000000) == 0)
  {
LABEL_43:
    if ((v5 & 0x40000000000) == 0)
      goto LABEL_44;
    goto LABEL_94;
  }
LABEL_93:
  PB::TextFormatter::format(a2, "yJerkScalarMagMax", *((float *)this + 46));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x40000000000) == 0)
  {
LABEL_44:
    if ((v5 & 0x80000000000) == 0)
      goto LABEL_45;
    goto LABEL_95;
  }
LABEL_94:
  PB::TextFormatter::format(a2, "yMax", *((float *)this + 47));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x80000000000) == 0)
  {
LABEL_45:
    if ((v5 & 0x100000000000) == 0)
      goto LABEL_46;
    goto LABEL_96;
  }
LABEL_95:
  PB::TextFormatter::format(a2, "yMin", *((float *)this + 48));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x100000000000) == 0)
  {
LABEL_46:
    if ((v5 & 0x200000000000) == 0)
      goto LABEL_47;
    goto LABEL_97;
  }
LABEL_96:
  PB::TextFormatter::format(a2, "yZCTime", *((float *)this + 49));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x200000000000) == 0)
  {
LABEL_47:
    if ((v5 & 0x400000000000) == 0)
      goto LABEL_48;
    goto LABEL_98;
  }
LABEL_97:
  PB::TextFormatter::format(a2, "zJerkScalarMagMax", *((float *)this + 50));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x400000000000) == 0)
  {
LABEL_48:
    if ((v5 & 0x800000000000) == 0)
      goto LABEL_49;
LABEL_99:
    PB::TextFormatter::format(a2, "zMin", *((float *)this + 52));
    if ((*((_QWORD *)this + 27) & 0x1000000000000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_50;
  }
LABEL_98:
  PB::TextFormatter::format(a2, "zMax", *((float *)this + 51));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x800000000000) != 0)
    goto LABEL_99;
LABEL_49:
  if ((v5 & 0x1000000000000) != 0)
LABEL_50:
    PB::TextFormatter::format(a2, "zZCTime", *((float *)this + 53));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FallStats::readFrom(CMMsl::FallStats *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char v61;
  unsigned int v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char v76;
  unsigned int v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  char v84;
  unsigned int v85;
  uint64_t v86;
  unint64_t v87;
  char v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  char v92;
  unsigned int v93;
  uint64_t v94;
  unint64_t v95;
  char v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  char v100;
  unsigned int v101;
  uint64_t v102;
  unint64_t v103;
  char v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  char v108;
  unsigned int v109;
  uint64_t v110;
  unint64_t v111;
  char v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  char v124;
  unsigned int v125;
  uint64_t v126;
  unint64_t v127;
  char v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  char v137;
  unsigned int v138;
  uint64_t v139;
  unint64_t v140;
  char v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  char v146;
  unsigned int v147;
  unint64_t v148;
  char v149;
  char v150;
  unsigned int v151;
  unint64_t v152;
  char v153;
  char v154;
  unsigned int v155;
  unint64_t v156;
  char v157;
  char v158;
  unsigned int v159;
  unint64_t v160;
  char v161;
  char v162;
  unsigned int v163;
  unint64_t v164;
  char v165;
  char v166;
  unsigned int v167;
  unint64_t v168;
  char v169;
  char v170;
  unsigned int v171;
  unint64_t v172;
  char v173;
  char v174;
  unsigned int v175;
  unint64_t v176;
  char v177;
  char v178;
  unsigned int v179;
  unint64_t v180;
  char v181;
  char v182;
  unsigned int v183;
  unint64_t v184;
  char v185;
  char v186;
  unsigned int v187;
  unint64_t v188;
  char v189;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      break;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_QWORD *)this + 27) |= 0x80000000uLL;
        v20 = *((_QWORD *)a2 + 1);
        v21 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          do
          {
            v26 = v20 + 1;
            *((_QWORD *)a2 + 1) = v20 + 1;
            v27 = *(_BYTE *)(v22 + v20);
            v25 |= (unint64_t)(v27 & 0x7F) << v23;
            if ((v27 & 0x80) == 0)
              goto LABEL_301;
            v23 += 7;
            v20 = v26;
            v14 = v24++ > 8;
          }
          while (!v14);
LABEL_220:
          LODWORD(v25) = 0;
          goto LABEL_301;
        }
        v146 = 0;
        v147 = 0;
        v25 = 0;
        if (v21 <= v20)
          v21 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v21 == v20)
          {
            LODWORD(v25) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v148 = v20 + 1;
            v149 = *(_BYTE *)(v22 + v20);
            *((_QWORD *)a2 + 1) = v148;
            v25 |= (unint64_t)(v149 & 0x7F) << v146;
            if (v149 < 0)
            {
              v146 += 7;
              v20 = v148;
              v14 = v147++ > 8;
              if (v14)
                goto LABEL_220;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v25) = 0;
          }
          break;
        }
LABEL_301:
        *((_DWORD *)this + 36) = v25;
        goto LABEL_293;
      case 2u:
        *((_QWORD *)this + 27) |= 1uLL;
        v28 = *((_QWORD *)a2 + 1);
        v29 = *((_QWORD *)a2 + 2);
        v30 = *(_QWORD *)a2;
        if (v28 <= 0xFFFFFFFFFFFFFFF5 && v28 + 10 <= v29)
        {
          v31 = 0;
          v32 = 0;
          v33 = 0;
          do
          {
            v34 = v28 + 1;
            *((_QWORD *)a2 + 1) = v28 + 1;
            v35 = *(_BYTE *)(v30 + v28);
            v33 |= (unint64_t)(v35 & 0x7F) << v31;
            if ((v35 & 0x80) == 0)
              goto LABEL_305;
            v31 += 7;
            v28 = v34;
            v14 = v32++ > 8;
          }
          while (!v14);
LABEL_227:
          v33 = 0;
          goto LABEL_305;
        }
        v150 = 0;
        v151 = 0;
        v33 = 0;
        if (v29 <= v28)
          v29 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v29 == v28)
          {
            v33 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v152 = v28 + 1;
            v153 = *(_BYTE *)(v30 + v28);
            *((_QWORD *)a2 + 1) = v152;
            v33 |= (unint64_t)(v153 & 0x7F) << v150;
            if (v153 < 0)
            {
              v150 += 7;
              v28 = v152;
              v14 = v151++ > 8;
              if (v14)
                goto LABEL_227;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v33 = 0;
          }
          break;
        }
LABEL_305:
        *((_QWORD *)this + 1) = v33;
        goto LABEL_293;
      case 3u:
        *((_QWORD *)this + 27) |= 2uLL;
        v36 = *((_QWORD *)a2 + 1);
        v37 = *((_QWORD *)a2 + 2);
        v38 = *(_QWORD *)a2;
        if (v36 <= 0xFFFFFFFFFFFFFFF5 && v36 + 10 <= v37)
        {
          v39 = 0;
          v40 = 0;
          v41 = 0;
          do
          {
            v42 = v36 + 1;
            *((_QWORD *)a2 + 1) = v36 + 1;
            v43 = *(_BYTE *)(v38 + v36);
            v41 |= (unint64_t)(v43 & 0x7F) << v39;
            if ((v43 & 0x80) == 0)
              goto LABEL_309;
            v39 += 7;
            v36 = v42;
            v14 = v40++ > 8;
          }
          while (!v14);
LABEL_234:
          v41 = 0;
          goto LABEL_309;
        }
        v154 = 0;
        v155 = 0;
        v41 = 0;
        if (v37 <= v36)
          v37 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v37 == v36)
          {
            v41 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v156 = v36 + 1;
            v157 = *(_BYTE *)(v38 + v36);
            *((_QWORD *)a2 + 1) = v156;
            v41 |= (unint64_t)(v157 & 0x7F) << v154;
            if (v157 < 0)
            {
              v154 += 7;
              v36 = v156;
              v14 = v155++ > 8;
              if (v14)
                goto LABEL_234;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v41 = 0;
          }
          break;
        }
LABEL_309:
        *((_QWORD *)this + 2) = v41;
        goto LABEL_293;
      case 4u:
        *((_QWORD *)this + 27) |= 0x20000uLL;
        v44 = *((_QWORD *)a2 + 1);
        if (v44 > 0xFFFFFFFFFFFFFFFBLL || v44 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_213;
        *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v44);
        goto LABEL_292;
      case 5u:
        *((_QWORD *)this + 27) |= 0x8000000000uLL;
        v45 = *((_QWORD *)a2 + 1);
        if (v45 > 0xFFFFFFFFFFFFFFFBLL || v45 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_213;
        *((_DWORD *)this + 44) = *(_DWORD *)(*(_QWORD *)a2 + v45);
        goto LABEL_292;
      case 6u:
        *((_QWORD *)this + 27) |= 0x4000000000uLL;
        v46 = *((_QWORD *)a2 + 1);
        if (v46 > 0xFFFFFFFFFFFFFFFBLL || v46 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_213;
        *((_DWORD *)this + 43) = *(_DWORD *)(*(_QWORD *)a2 + v46);
        goto LABEL_292;
      case 7u:
        *((_QWORD *)this + 27) |= 0x80000000000uLL;
        v47 = *((_QWORD *)a2 + 1);
        if (v47 > 0xFFFFFFFFFFFFFFFBLL || v47 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_213;
        *((_DWORD *)this + 48) = *(_DWORD *)(*(_QWORD *)a2 + v47);
        goto LABEL_292;
      case 8u:
        *((_QWORD *)this + 27) |= 0x40000000000uLL;
        v48 = *((_QWORD *)a2 + 1);
        if (v48 > 0xFFFFFFFFFFFFFFFBLL || v48 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_213;
        *((_DWORD *)this + 47) = *(_DWORD *)(*(_QWORD *)a2 + v48);
        goto LABEL_292;
      case 9u:
        *((_QWORD *)this + 27) |= 0x800000000000uLL;
        v49 = *((_QWORD *)a2 + 1);
        if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_213;
        *((_DWORD *)this + 52) = *(_DWORD *)(*(_QWORD *)a2 + v49);
        goto LABEL_292;
      case 0xAu:
        *((_QWORD *)this + 27) |= 0x400000000000uLL;
        v50 = *((_QWORD *)a2 + 1);
        if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_213;
        *((_DWORD *)this + 51) = *(_DWORD *)(*(_QWORD *)a2 + v50);
        goto LABEL_292;
      case 0xBu:
        *((_QWORD *)this + 27) |= 0x10000000000uLL;
        v51 = *((_QWORD *)a2 + 1);
        if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_213;
        *((_DWORD *)this + 45) = *(_DWORD *)(*(_QWORD *)a2 + v51);
        goto LABEL_292;
      case 0xCu:
        *((_QWORD *)this + 27) |= 0x100000000000uLL;
        v52 = *((_QWORD *)a2 + 1);
        if (v52 > 0xFFFFFFFFFFFFFFFBLL || v52 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_213;
        *((_DWORD *)this + 49) = *(_DWORD *)(*(_QWORD *)a2 + v52);
        goto LABEL_292;
      case 0xDu:
        *((_QWORD *)this + 27) |= 0x1000000000000uLL;
        v53 = *((_QWORD *)a2 + 1);
        if (v53 > 0xFFFFFFFFFFFFFFFBLL || v53 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_213;
        *((_DWORD *)this + 53) = *(_DWORD *)(*(_QWORD *)a2 + v53);
        goto LABEL_292;
      case 0xEu:
        *((_QWORD *)this + 27) |= 0x10000uLL;
        v54 = *((_QWORD *)a2 + 1);
        if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_213;
        *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v54);
        goto LABEL_292;
      case 0xFu:
        *((_QWORD *)this + 27) |= 0x2000000000uLL;
        v55 = *((_QWORD *)a2 + 1);
        if (v55 > 0xFFFFFFFFFFFFFFFBLL || v55 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_213;
        *((_DWORD *)this + 42) = *(_DWORD *)(*(_QWORD *)a2 + v55);
        goto LABEL_292;
      case 0x10u:
        *((_QWORD *)this + 27) |= 0x20000000000uLL;
        v56 = *((_QWORD *)a2 + 1);
        if (v56 > 0xFFFFFFFFFFFFFFFBLL || v56 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_213;
        *((_DWORD *)this + 46) = *(_DWORD *)(*(_QWORD *)a2 + v56);
        goto LABEL_292;
      case 0x11u:
        *((_QWORD *)this + 27) |= 0x200000000000uLL;
        v57 = *((_QWORD *)a2 + 1);
        if (v57 > 0xFFFFFFFFFFFFFFFBLL || v57 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_213;
        *((_DWORD *)this + 50) = *(_DWORD *)(*(_QWORD *)a2 + v57);
        goto LABEL_292;
      case 0x12u:
        *((_QWORD *)this + 27) |= 4uLL;
        v58 = *((_QWORD *)a2 + 1);
        v59 = *((_QWORD *)a2 + 2);
        v60 = *(_QWORD *)a2;
        if (v58 <= 0xFFFFFFFFFFFFFFF5 && v58 + 10 <= v59)
        {
          v61 = 0;
          v62 = 0;
          v63 = 0;
          do
          {
            v64 = v58 + 1;
            *((_QWORD *)a2 + 1) = v58 + 1;
            v65 = *(_BYTE *)(v60 + v58);
            v63 |= (unint64_t)(v65 & 0x7F) << v61;
            if ((v65 & 0x80) == 0)
              goto LABEL_313;
            v61 += 7;
            v58 = v64;
            v14 = v62++ > 8;
          }
          while (!v14);
LABEL_241:
          v63 = 0;
          goto LABEL_313;
        }
        v158 = 0;
        v159 = 0;
        v63 = 0;
        if (v59 <= v58)
          v59 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v59 == v58)
          {
            v63 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v160 = v58 + 1;
            v161 = *(_BYTE *)(v60 + v58);
            *((_QWORD *)a2 + 1) = v160;
            v63 |= (unint64_t)(v161 & 0x7F) << v158;
            if (v161 < 0)
            {
              v158 += 7;
              v58 = v160;
              v14 = v159++ > 8;
              if (v14)
                goto LABEL_241;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v63 = 0;
          }
          break;
        }
LABEL_313:
        *((_QWORD *)this + 3) = v63;
        goto LABEL_293;
      case 0x13u:
        *((_QWORD *)this + 27) |= 0x10uLL;
        v66 = *((_QWORD *)a2 + 1);
        if (v66 > 0xFFFFFFFFFFFFFFFBLL || v66 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_213;
        *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v66);
        goto LABEL_292;
      case 0x14u:
        *((_QWORD *)this + 27) |= 0x800000uLL;
        v67 = *((_QWORD *)a2 + 1);
        if (v67 > 0xFFFFFFFFFFFFFFFBLL || v67 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_213;
        *((_DWORD *)this + 28) = *(_DWORD *)(*(_QWORD *)a2 + v67);
        goto LABEL_292;
      case 0x15u:
        *((_QWORD *)this + 27) |= 0x80uLL;
        v68 = *((_QWORD *)a2 + 1);
        if (v68 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_213;
        *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v68);
        goto LABEL_292;
      case 0x16u:
        *((_QWORD *)this + 27) |= 0x40uLL;
        v69 = *((_QWORD *)a2 + 1);
        if (v69 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_213;
        *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v69);
        goto LABEL_292;
      case 0x17u:
        *((_QWORD *)this + 27) |= 0x100000uLL;
        v70 = *((_QWORD *)a2 + 1);
        if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_213;
        *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v70);
        goto LABEL_292;
      case 0x18u:
        *((_QWORD *)this + 27) |= 0x80000uLL;
        v71 = *((_QWORD *)a2 + 1);
        if (v71 > 0xFFFFFFFFFFFFFFFBLL || v71 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_213;
        *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v71);
        goto LABEL_292;
      case 0x19u:
        *((_QWORD *)this + 27) |= 0x40000000uLL;
        v72 = *((_QWORD *)a2 + 1);
        if (v72 > 0xFFFFFFFFFFFFFFFBLL || v72 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_213;
        *((_DWORD *)this + 35) = *(_DWORD *)(*(_QWORD *)a2 + v72);
        goto LABEL_292;
      case 0x1Au:
        *((_QWORD *)this + 27) |= 0x1000uLL;
        v73 = *((_QWORD *)a2 + 1);
        v74 = *((_QWORD *)a2 + 2);
        v75 = *(_QWORD *)a2;
        if (v73 <= 0xFFFFFFFFFFFFFFF5 && v73 + 10 <= v74)
        {
          v76 = 0;
          v77 = 0;
          v78 = 0;
          do
          {
            v79 = v73 + 1;
            *((_QWORD *)a2 + 1) = v73 + 1;
            v80 = *(_BYTE *)(v75 + v73);
            v78 |= (unint64_t)(v80 & 0x7F) << v76;
            if ((v80 & 0x80) == 0)
              goto LABEL_317;
            v76 += 7;
            v73 = v79;
            v14 = v77++ > 8;
          }
          while (!v14);
LABEL_248:
          LODWORD(v78) = 0;
          goto LABEL_317;
        }
        v162 = 0;
        v163 = 0;
        v78 = 0;
        if (v74 <= v73)
          v74 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v74 == v73)
          {
            LODWORD(v78) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v164 = v73 + 1;
            v165 = *(_BYTE *)(v75 + v73);
            *((_QWORD *)a2 + 1) = v164;
            v78 |= (unint64_t)(v165 & 0x7F) << v162;
            if (v165 < 0)
            {
              v162 += 7;
              v73 = v164;
              v14 = v163++ > 8;
              if (v14)
                goto LABEL_248;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v78) = 0;
          }
          break;
        }
LABEL_317:
        *((_DWORD *)this + 17) = v78;
        goto LABEL_293;
      case 0x1Bu:
        *((_QWORD *)this + 27) |= 0x4000uLL;
        v81 = *((_QWORD *)a2 + 1);
        v82 = *((_QWORD *)a2 + 2);
        v83 = *(_QWORD *)a2;
        if (v81 <= 0xFFFFFFFFFFFFFFF5 && v81 + 10 <= v82)
        {
          v84 = 0;
          v85 = 0;
          v86 = 0;
          do
          {
            v87 = v81 + 1;
            *((_QWORD *)a2 + 1) = v81 + 1;
            v88 = *(_BYTE *)(v83 + v81);
            v86 |= (unint64_t)(v88 & 0x7F) << v84;
            if ((v88 & 0x80) == 0)
              goto LABEL_321;
            v84 += 7;
            v81 = v87;
            v14 = v85++ > 8;
          }
          while (!v14);
LABEL_255:
          LODWORD(v86) = 0;
          goto LABEL_321;
        }
        v166 = 0;
        v167 = 0;
        v86 = 0;
        if (v82 <= v81)
          v82 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v82 == v81)
          {
            LODWORD(v86) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v168 = v81 + 1;
            v169 = *(_BYTE *)(v83 + v81);
            *((_QWORD *)a2 + 1) = v168;
            v86 |= (unint64_t)(v169 & 0x7F) << v166;
            if (v169 < 0)
            {
              v166 += 7;
              v81 = v168;
              v14 = v167++ > 8;
              if (v14)
                goto LABEL_255;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v86) = 0;
          }
          break;
        }
LABEL_321:
        *((_DWORD *)this + 19) = v86;
        goto LABEL_293;
      case 0x1Cu:
        *((_QWORD *)this + 27) |= 0x100000000uLL;
        v89 = *((_QWORD *)a2 + 1);
        v90 = *((_QWORD *)a2 + 2);
        v91 = *(_QWORD *)a2;
        if (v89 <= 0xFFFFFFFFFFFFFFF5 && v89 + 10 <= v90)
        {
          v92 = 0;
          v93 = 0;
          v94 = 0;
          do
          {
            v95 = v89 + 1;
            *((_QWORD *)a2 + 1) = v89 + 1;
            v96 = *(_BYTE *)(v91 + v89);
            v94 |= (unint64_t)(v96 & 0x7F) << v92;
            if ((v96 & 0x80) == 0)
              goto LABEL_325;
            v92 += 7;
            v89 = v95;
            v14 = v93++ > 8;
          }
          while (!v14);
LABEL_262:
          LODWORD(v94) = 0;
          goto LABEL_325;
        }
        v170 = 0;
        v171 = 0;
        v94 = 0;
        if (v90 <= v89)
          v90 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v90 == v89)
          {
            LODWORD(v94) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v172 = v89 + 1;
            v173 = *(_BYTE *)(v91 + v89);
            *((_QWORD *)a2 + 1) = v172;
            v94 |= (unint64_t)(v173 & 0x7F) << v170;
            if (v173 < 0)
            {
              v170 += 7;
              v89 = v172;
              v14 = v171++ > 8;
              if (v14)
                goto LABEL_262;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v94) = 0;
          }
          break;
        }
LABEL_325:
        *((_DWORD *)this + 37) = v94;
        goto LABEL_293;
      case 0x1Du:
        *((_QWORD *)this + 27) |= 0x1000000000uLL;
        v97 = *((_QWORD *)a2 + 1);
        v98 = *((_QWORD *)a2 + 2);
        v99 = *(_QWORD *)a2;
        if (v97 <= 0xFFFFFFFFFFFFFFF5 && v97 + 10 <= v98)
        {
          v100 = 0;
          v101 = 0;
          v102 = 0;
          do
          {
            v103 = v97 + 1;
            *((_QWORD *)a2 + 1) = v97 + 1;
            v104 = *(_BYTE *)(v99 + v97);
            v102 |= (unint64_t)(v104 & 0x7F) << v100;
            if ((v104 & 0x80) == 0)
              goto LABEL_329;
            v100 += 7;
            v97 = v103;
            v14 = v101++ > 8;
          }
          while (!v14);
LABEL_269:
          LODWORD(v102) = 0;
          goto LABEL_329;
        }
        v174 = 0;
        v175 = 0;
        v102 = 0;
        if (v98 <= v97)
          v98 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v98 == v97)
          {
            LODWORD(v102) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v176 = v97 + 1;
            v177 = *(_BYTE *)(v99 + v97);
            *((_QWORD *)a2 + 1) = v176;
            v102 |= (unint64_t)(v177 & 0x7F) << v174;
            if (v177 < 0)
            {
              v174 += 7;
              v97 = v176;
              v14 = v175++ > 8;
              if (v14)
                goto LABEL_269;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v102) = 0;
          }
          break;
        }
LABEL_329:
        *((_DWORD *)this + 41) = v102;
        goto LABEL_293;
      case 0x1Eu:
        *((_QWORD *)this + 27) |= 0x100uLL;
        v105 = *((_QWORD *)a2 + 1);
        v106 = *((_QWORD *)a2 + 2);
        v107 = *(_QWORD *)a2;
        if (v105 <= 0xFFFFFFFFFFFFFFF5 && v105 + 10 <= v106)
        {
          v108 = 0;
          v109 = 0;
          v110 = 0;
          do
          {
            v111 = v105 + 1;
            *((_QWORD *)a2 + 1) = v105 + 1;
            v112 = *(_BYTE *)(v107 + v105);
            v110 |= (unint64_t)(v112 & 0x7F) << v108;
            if ((v112 & 0x80) == 0)
              goto LABEL_333;
            v108 += 7;
            v105 = v111;
            v14 = v109++ > 8;
          }
          while (!v14);
LABEL_276:
          LODWORD(v110) = 0;
          goto LABEL_333;
        }
        v178 = 0;
        v179 = 0;
        v110 = 0;
        if (v106 <= v105)
          v106 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v106 == v105)
          {
            LODWORD(v110) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v180 = v105 + 1;
            v181 = *(_BYTE *)(v107 + v105);
            *((_QWORD *)a2 + 1) = v180;
            v110 |= (unint64_t)(v181 & 0x7F) << v178;
            if (v181 < 0)
            {
              v178 += 7;
              v105 = v180;
              v14 = v179++ > 8;
              if (v14)
                goto LABEL_276;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v110) = 0;
          }
          break;
        }
LABEL_333:
        *((_DWORD *)this + 13) = v110;
        goto LABEL_293;
      case 0x1Fu:
        *((_QWORD *)this + 27) |= 0x200000000uLL;
        v113 = *((_QWORD *)a2 + 1);
        if (v113 > 0xFFFFFFFFFFFFFFFBLL || v113 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_213;
        *((_DWORD *)this + 38) = *(_DWORD *)(*(_QWORD *)a2 + v113);
        goto LABEL_292;
      case 0x20u:
        *((_QWORD *)this + 27) |= 0x800uLL;
        v114 = *((_QWORD *)a2 + 1);
        if (v114 > 0xFFFFFFFFFFFFFFFBLL || v114 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_213;
        *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v114);
        goto LABEL_292;
      case 0x21u:
        *((_QWORD *)this + 27) |= 0x400uLL;
        v115 = *((_QWORD *)a2 + 1);
        if (v115 > 0xFFFFFFFFFFFFFFFBLL || v115 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_213;
        *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v115);
        goto LABEL_292;
      case 0x22u:
        *((_QWORD *)this + 27) |= 0x200000uLL;
        v116 = *((_QWORD *)a2 + 1);
        if (v116 > 0xFFFFFFFFFFFFFFFBLL || v116 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_213;
        *((_DWORD *)this + 26) = *(_DWORD *)(*(_QWORD *)a2 + v116);
        goto LABEL_292;
      case 0x23u:
        *((_QWORD *)this + 27) |= 0x40000uLL;
        v117 = *((_QWORD *)a2 + 1);
        if (v117 > 0xFFFFFFFFFFFFFFFBLL || v117 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_213;
        *((_DWORD *)this + 23) = *(_DWORD *)(*(_QWORD *)a2 + v117);
        goto LABEL_292;
      case 0x24u:
        *((_QWORD *)this + 27) |= 0x20000000uLL;
        v118 = *((_QWORD *)a2 + 1);
        if (v118 > 0xFFFFFFFFFFFFFFFBLL || v118 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_213;
        *((_DWORD *)this + 34) = *(_DWORD *)(*(_QWORD *)a2 + v118);
        goto LABEL_292;
      case 0x25u:
        *((_QWORD *)this + 27) |= 0x800000000uLL;
        v119 = *((_QWORD *)a2 + 1);
        if (v119 > 0xFFFFFFFFFFFFFFFBLL || v119 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_213;
        *((_DWORD *)this + 40) = *(_DWORD *)(*(_QWORD *)a2 + v119);
        goto LABEL_292;
      case 0x26u:
        *((_QWORD *)this + 27) |= 0x400000000uLL;
        v120 = *((_QWORD *)a2 + 1);
        if (v120 > 0xFFFFFFFFFFFFFFFBLL || v120 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_213;
        *((_DWORD *)this + 39) = *(_DWORD *)(*(_QWORD *)a2 + v120);
        goto LABEL_292;
      case 0x27u:
        *((_QWORD *)this + 27) |= 0x8000uLL;
        v121 = *((_QWORD *)a2 + 1);
        v122 = *((_QWORD *)a2 + 2);
        v123 = *(_QWORD *)a2;
        if (v121 <= 0xFFFFFFFFFFFFFFF5 && v121 + 10 <= v122)
        {
          v124 = 0;
          v125 = 0;
          v126 = 0;
          do
          {
            v127 = v121 + 1;
            *((_QWORD *)a2 + 1) = v121 + 1;
            v128 = *(_BYTE *)(v123 + v121);
            v126 |= (unint64_t)(v128 & 0x7F) << v124;
            if ((v128 & 0x80) == 0)
              goto LABEL_337;
            v124 += 7;
            v121 = v127;
            v14 = v125++ > 8;
          }
          while (!v14);
LABEL_283:
          LODWORD(v126) = 0;
          goto LABEL_337;
        }
        v182 = 0;
        v183 = 0;
        v126 = 0;
        if (v122 <= v121)
          v122 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v122 == v121)
          {
            LODWORD(v126) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v184 = v121 + 1;
            v185 = *(_BYTE *)(v123 + v121);
            *((_QWORD *)a2 + 1) = v184;
            v126 |= (unint64_t)(v185 & 0x7F) << v182;
            if (v185 < 0)
            {
              v182 += 7;
              v121 = v184;
              v14 = v183++ > 8;
              if (v14)
                goto LABEL_283;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v126) = 0;
          }
          break;
        }
LABEL_337:
        *((_DWORD *)this + 20) = v126;
        goto LABEL_293;
      case 0x28u:
        *((_QWORD *)this + 27) |= 0x10000000uLL;
        v129 = *((_QWORD *)a2 + 1);
        if (v129 > 0xFFFFFFFFFFFFFFFBLL || v129 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_213;
        *((_DWORD *)this + 33) = *(_DWORD *)(*(_QWORD *)a2 + v129);
        goto LABEL_292;
      case 0x29u:
        *((_QWORD *)this + 27) |= 0x4000000uLL;
        v130 = *((_QWORD *)a2 + 1);
        if (v130 > 0xFFFFFFFFFFFFFFFBLL || v130 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_213;
        *((_DWORD *)this + 31) = *(_DWORD *)(*(_QWORD *)a2 + v130);
        goto LABEL_292;
      case 0x2Au:
        *((_QWORD *)this + 27) |= 0x8000000uLL;
        v131 = *((_QWORD *)a2 + 1);
        if (v131 > 0xFFFFFFFFFFFFFFFBLL || v131 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_213;
        *((_DWORD *)this + 32) = *(_DWORD *)(*(_QWORD *)a2 + v131);
        goto LABEL_292;
      case 0x2Bu:
        *((_QWORD *)this + 27) |= 0x20uLL;
        v132 = *((_QWORD *)a2 + 1);
        if (v132 > 0xFFFFFFFFFFFFFFFBLL || v132 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_213;
        *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v132);
        goto LABEL_292;
      case 0x2Cu:
        *((_QWORD *)this + 27) |= 0x1000000uLL;
        v133 = *((_QWORD *)a2 + 1);
        if (v133 > 0xFFFFFFFFFFFFFFFBLL || v133 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_213;
        *((_DWORD *)this + 29) = *(_DWORD *)(*(_QWORD *)a2 + v133);
        goto LABEL_292;
      case 0x2Du:
        *((_QWORD *)this + 27) |= 0x2000000uLL;
        v134 = *((_QWORD *)a2 + 1);
        v135 = *((_QWORD *)a2 + 2);
        v136 = *(_QWORD *)a2;
        if (v134 <= 0xFFFFFFFFFFFFFFF5 && v134 + 10 <= v135)
        {
          v137 = 0;
          v138 = 0;
          v139 = 0;
          do
          {
            v140 = v134 + 1;
            *((_QWORD *)a2 + 1) = v134 + 1;
            v141 = *(_BYTE *)(v136 + v134);
            v139 |= (unint64_t)(v141 & 0x7F) << v137;
            if ((v141 & 0x80) == 0)
              goto LABEL_341;
            v137 += 7;
            v134 = v140;
            v14 = v138++ > 8;
          }
          while (!v14);
LABEL_290:
          LODWORD(v139) = 0;
          goto LABEL_341;
        }
        v186 = 0;
        v187 = 0;
        v139 = 0;
        if (v135 <= v134)
          v135 = *((_QWORD *)a2 + 1);
        break;
      case 0x2Eu:
        *((_QWORD *)this + 27) |= 0x2000uLL;
        v142 = *((_QWORD *)a2 + 1);
        if (v142 > 0xFFFFFFFFFFFFFFFBLL || v142 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_213;
        *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v142);
        goto LABEL_292;
      case 0x2Fu:
        *((_QWORD *)this + 27) |= 0x200uLL;
        v143 = *((_QWORD *)a2 + 1);
        if (v143 > 0xFFFFFFFFFFFFFFFBLL || v143 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_213;
        *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v143);
        goto LABEL_292;
      case 0x30u:
        *((_QWORD *)this + 27) |= 0x400000uLL;
        v144 = *((_QWORD *)a2 + 1);
        if (v144 > 0xFFFFFFFFFFFFFFFBLL || v144 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_213;
        *((_DWORD *)this + 27) = *(_DWORD *)(*(_QWORD *)a2 + v144);
        goto LABEL_292;
      case 0x31u:
        *((_QWORD *)this + 27) |= 8uLL;
        v145 = *((_QWORD *)a2 + 1);
        if (v145 <= 0xFFFFFFFFFFFFFFFBLL && v145 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v145);
LABEL_292:
          *((_QWORD *)a2 + 1) += 4;
        }
        else
        {
LABEL_213:
          *((_BYTE *)a2 + 24) = 1;
        }
        goto LABEL_293;
      default:
        goto LABEL_19;
    }
    while (1)
    {
      if (v135 == v134)
      {
        LODWORD(v139) = 0;
        *((_BYTE *)a2 + 24) = 1;
        goto LABEL_341;
      }
      v188 = v134 + 1;
      v189 = *(_BYTE *)(v136 + v134);
      *((_QWORD *)a2 + 1) = v188;
      v139 |= (unint64_t)(v189 & 0x7F) << v186;
      if ((v189 & 0x80) == 0)
        break;
      v186 += 7;
      v134 = v188;
      v14 = v187++ > 8;
      if (v14)
        goto LABEL_290;
    }
    if (*((_BYTE *)a2 + 24))
      LODWORD(v139) = 0;
LABEL_341:
    *((_DWORD *)this + 30) = v139;
LABEL_293:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v15 = 0;
  v16 = 0;
  v11 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v17 = v2 + 1;
    v18 = *(_BYTE *)(v8 + v2);
    *((_QWORD *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0)
      goto LABEL_21;
    v15 += 7;
    v2 = v17;
    v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  result = PB::Reader::skip(a2);
  if ((_DWORD)result)
    goto LABEL_293;
  return result;
}

uint64_t CMMsl::FallStats::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = this;
  v4 = *(_QWORD *)(this + 216);
  if ((v4 & 0x80000000) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_QWORD *)(v3 + 216);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_53;
    }
  }
  else if ((v4 & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x20000) == 0)
      goto LABEL_5;
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x20000) == 0)
  {
LABEL_5:
    if ((v4 & 0x8000000000) == 0)
      goto LABEL_6;
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::write(a2, *(float *)(v3 + 88));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x8000000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x4000000000) == 0)
      goto LABEL_7;
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::write(a2, *(float *)(v3 + 176));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x4000000000) == 0)
  {
LABEL_7:
    if ((v4 & 0x80000000000) == 0)
      goto LABEL_8;
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::write(a2, *(float *)(v3 + 172));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x80000000000) == 0)
  {
LABEL_8:
    if ((v4 & 0x40000000000) == 0)
      goto LABEL_9;
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(float *)(v3 + 192));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x40000000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x800000000000) == 0)
      goto LABEL_10;
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::write(a2, *(float *)(v3 + 188));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x800000000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x400000000000) == 0)
      goto LABEL_11;
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(float *)(v3 + 208));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x400000000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x10000000000) == 0)
      goto LABEL_12;
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::write(a2, *(float *)(v3 + 204));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x10000000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x100000000000) == 0)
      goto LABEL_13;
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::write(a2, *(float *)(v3 + 180));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x100000000000) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000000000000) == 0)
      goto LABEL_14;
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::write(a2, *(float *)(v3 + 196));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x1000000000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x10000) == 0)
      goto LABEL_15;
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::write(a2, *(float *)(v3 + 212));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x10000) == 0)
  {
LABEL_15:
    if ((v4 & 0x2000000000) == 0)
      goto LABEL_16;
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::write(a2, *(float *)(v3 + 84));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x2000000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x20000000000) == 0)
      goto LABEL_17;
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::write(a2, *(float *)(v3 + 168));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x20000000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x200000000000) == 0)
      goto LABEL_18;
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::write(a2, *(float *)(v3 + 184));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x200000000000) == 0)
  {
LABEL_18:
    if ((v4 & 4) == 0)
      goto LABEL_19;
    goto LABEL_68;
  }
LABEL_67:
  this = PB::Writer::write(a2, *(float *)(v3 + 200));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 4) == 0)
  {
LABEL_19:
    if ((v4 & 0x10) == 0)
      goto LABEL_20;
    goto LABEL_69;
  }
LABEL_68:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x10) == 0)
  {
LABEL_20:
    if ((v4 & 0x800000) == 0)
      goto LABEL_21;
    goto LABEL_70;
  }
LABEL_69:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x800000) == 0)
  {
LABEL_21:
    if ((v4 & 0x80) == 0)
      goto LABEL_22;
    goto LABEL_71;
  }
LABEL_70:
  this = PB::Writer::write(a2, *(float *)(v3 + 112));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x80) == 0)
  {
LABEL_22:
    if ((v4 & 0x40) == 0)
      goto LABEL_23;
    goto LABEL_72;
  }
LABEL_71:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x40) == 0)
  {
LABEL_23:
    if ((v4 & 0x100000) == 0)
      goto LABEL_24;
    goto LABEL_73;
  }
LABEL_72:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x100000) == 0)
  {
LABEL_24:
    if ((v4 & 0x80000) == 0)
      goto LABEL_25;
    goto LABEL_74;
  }
LABEL_73:
  this = PB::Writer::write(a2, *(float *)(v3 + 100));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x80000) == 0)
  {
LABEL_25:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_26;
    goto LABEL_75;
  }
LABEL_74:
  this = PB::Writer::write(a2, *(float *)(v3 + 96));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_26:
    if ((v4 & 0x1000) == 0)
      goto LABEL_27;
    goto LABEL_76;
  }
LABEL_75:
  this = PB::Writer::write(a2, *(float *)(v3 + 140));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x1000) == 0)
  {
LABEL_27:
    if ((v4 & 0x4000) == 0)
      goto LABEL_28;
    goto LABEL_77;
  }
LABEL_76:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x4000) == 0)
  {
LABEL_28:
    if ((v4 & 0x100000000) == 0)
      goto LABEL_29;
    goto LABEL_78;
  }
LABEL_77:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x1000000000) == 0)
      goto LABEL_30;
    goto LABEL_79;
  }
LABEL_78:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x1000000000) == 0)
  {
LABEL_30:
    if ((v4 & 0x100) == 0)
      goto LABEL_31;
    goto LABEL_80;
  }
LABEL_79:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x100) == 0)
  {
LABEL_31:
    if ((v4 & 0x200000000) == 0)
      goto LABEL_32;
    goto LABEL_81;
  }
LABEL_80:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_32:
    if ((v4 & 0x800) == 0)
      goto LABEL_33;
    goto LABEL_82;
  }
LABEL_81:
  this = PB::Writer::write(a2, *(float *)(v3 + 152));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x800) == 0)
  {
LABEL_33:
    if ((v4 & 0x400) == 0)
      goto LABEL_34;
    goto LABEL_83;
  }
LABEL_82:
  this = PB::Writer::write(a2, *(float *)(v3 + 64));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x400) == 0)
  {
LABEL_34:
    if ((v4 & 0x200000) == 0)
      goto LABEL_35;
    goto LABEL_84;
  }
LABEL_83:
  this = PB::Writer::write(a2, *(float *)(v3 + 60));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x200000) == 0)
  {
LABEL_35:
    if ((v4 & 0x40000) == 0)
      goto LABEL_36;
    goto LABEL_85;
  }
LABEL_84:
  this = PB::Writer::write(a2, *(float *)(v3 + 104));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x40000) == 0)
  {
LABEL_36:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_37;
    goto LABEL_86;
  }
LABEL_85:
  this = PB::Writer::write(a2, *(float *)(v3 + 92));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_37:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_38;
    goto LABEL_87;
  }
LABEL_86:
  this = PB::Writer::write(a2, *(float *)(v3 + 136));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_38:
    if ((v4 & 0x400000000) == 0)
      goto LABEL_39;
    goto LABEL_88;
  }
LABEL_87:
  this = PB::Writer::write(a2, *(float *)(v3 + 160));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_39:
    if ((v4 & 0x8000) == 0)
      goto LABEL_40;
    goto LABEL_89;
  }
LABEL_88:
  this = PB::Writer::write(a2, *(float *)(v3 + 156));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x8000) == 0)
  {
LABEL_40:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_41;
    goto LABEL_90;
  }
LABEL_89:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_41:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_42;
    goto LABEL_91;
  }
LABEL_90:
  this = PB::Writer::write(a2, *(float *)(v3 + 132));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_42:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_43;
    goto LABEL_92;
  }
LABEL_91:
  this = PB::Writer::write(a2, *(float *)(v3 + 124));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_43:
    if ((v4 & 0x20) == 0)
      goto LABEL_44;
    goto LABEL_93;
  }
LABEL_92:
  this = PB::Writer::write(a2, *(float *)(v3 + 128));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x20) == 0)
  {
LABEL_44:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_45;
    goto LABEL_94;
  }
LABEL_93:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_45:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_46;
    goto LABEL_95;
  }
LABEL_94:
  this = PB::Writer::write(a2, *(float *)(v3 + 116));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_46:
    if ((v4 & 0x2000) == 0)
      goto LABEL_47;
    goto LABEL_96;
  }
LABEL_95:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x2000) == 0)
  {
LABEL_47:
    if ((v4 & 0x200) == 0)
      goto LABEL_48;
    goto LABEL_97;
  }
LABEL_96:
  this = PB::Writer::write(a2, *(float *)(v3 + 72));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x200) == 0)
  {
LABEL_48:
    if ((v4 & 0x400000) == 0)
      goto LABEL_49;
    goto LABEL_98;
  }
LABEL_97:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x400000) == 0)
  {
LABEL_49:
    if ((v4 & 8) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 32));
  }
LABEL_98:
  this = PB::Writer::write(a2, *(float *)(v3 + 108));
  if ((*(_QWORD *)(v3 + 216) & 8) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 32));
  return this;
}

uint64_t CMMsl::FallStats::hash_value(CMMsl::FallStats *this)
{
  uint64_t v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  float v50;
  uint64_t v51;
  float v52;
  uint64_t v53;
  float v54;
  uint64_t v55;
  float v56;
  uint64_t v57;
  float v58;
  uint64_t v59;
  float v60;
  uint64_t v61;
  float v62;
  uint64_t v63;
  float v64;
  uint64_t v65;
  uint64_t v66;
  float v67;
  uint64_t v68;
  float v69;
  uint64_t v70;
  float v71;
  uint64_t v72;
  float v73;
  uint64_t v74;
  float v75;
  uint64_t v76;
  uint64_t v77;
  float v78;
  uint64_t v79;
  float v80;
  uint64_t v81;
  float v82;
  uint64_t v83;
  float v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;

  v1 = *((_QWORD *)this + 27);
  if ((v1 & 0x80000000) != 0)
  {
    v2 = *((unsigned int *)this + 36);
    if ((v1 & 1) != 0)
    {
LABEL_3:
      v108 = *((_QWORD *)this + 1);
      if ((v1 & 2) != 0)
        goto LABEL_4;
      goto LABEL_131;
    }
  }
  else
  {
    v2 = 0;
    if ((v1 & 1) != 0)
      goto LABEL_3;
  }
  v108 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_4:
    v107 = *((_QWORD *)this + 2);
    if ((v1 & 0x20000) != 0)
      goto LABEL_5;
LABEL_132:
    v106 = 0;
    if ((v1 & 0x8000000000) != 0)
      goto LABEL_8;
LABEL_133:
    v105 = 0;
    if ((v1 & 0x4000000000) != 0)
      goto LABEL_11;
LABEL_134:
    v104 = 0;
    if ((v1 & 0x80000000000) != 0)
      goto LABEL_14;
LABEL_135:
    v103 = 0;
    if ((v1 & 0x40000000000) != 0)
      goto LABEL_17;
LABEL_136:
    v102 = 0;
    if ((v1 & 0x800000000000) != 0)
      goto LABEL_20;
LABEL_137:
    v101 = 0;
    if ((v1 & 0x400000000000) != 0)
      goto LABEL_23;
LABEL_138:
    v100 = 0;
    if ((v1 & 0x10000000000) != 0)
      goto LABEL_26;
LABEL_139:
    v99 = 0;
    if ((v1 & 0x100000000000) != 0)
      goto LABEL_29;
LABEL_140:
    v98 = 0;
    if ((v1 & 0x1000000000000) != 0)
      goto LABEL_32;
LABEL_141:
    v97 = 0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_35;
LABEL_142:
    v96 = 0;
    if ((v1 & 0x2000000000) != 0)
      goto LABEL_38;
LABEL_143:
    v95 = 0;
    if ((v1 & 0x20000000000) != 0)
      goto LABEL_41;
LABEL_144:
    v94 = 0;
    if ((v1 & 0x200000000000) != 0)
      goto LABEL_44;
LABEL_145:
    v93 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_47;
    goto LABEL_146;
  }
LABEL_131:
  v107 = 0;
  if ((v1 & 0x20000) == 0)
    goto LABEL_132;
LABEL_5:
  v3 = *((float *)this + 22);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  v106 = v4;
  if ((v1 & 0x8000000000) == 0)
    goto LABEL_133;
LABEL_8:
  v5 = *((float *)this + 44);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  v105 = v6;
  if ((v1 & 0x4000000000) == 0)
    goto LABEL_134;
LABEL_11:
  v7 = *((float *)this + 43);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  v104 = v8;
  if ((v1 & 0x80000000000) == 0)
    goto LABEL_135;
LABEL_14:
  v9 = *((float *)this + 48);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  v103 = v10;
  if ((v1 & 0x40000000000) == 0)
    goto LABEL_136;
LABEL_17:
  v11 = *((float *)this + 47);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  v102 = v12;
  if ((v1 & 0x800000000000) == 0)
    goto LABEL_137;
LABEL_20:
  v13 = *((float *)this + 52);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  v101 = v14;
  if ((v1 & 0x400000000000) == 0)
    goto LABEL_138;
LABEL_23:
  v15 = *((float *)this + 51);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  v100 = v16;
  if ((v1 & 0x10000000000) == 0)
    goto LABEL_139;
LABEL_26:
  v17 = *((float *)this + 45);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  v99 = v18;
  if ((v1 & 0x100000000000) == 0)
    goto LABEL_140;
LABEL_29:
  v19 = *((float *)this + 49);
  v20 = LODWORD(v19);
  if (v19 == 0.0)
    v20 = 0;
  v98 = v20;
  if ((v1 & 0x1000000000000) == 0)
    goto LABEL_141;
LABEL_32:
  v21 = *((float *)this + 53);
  v22 = LODWORD(v21);
  if (v21 == 0.0)
    v22 = 0;
  v97 = v22;
  if ((v1 & 0x10000) == 0)
    goto LABEL_142;
LABEL_35:
  v23 = *((float *)this + 21);
  v24 = LODWORD(v23);
  if (v23 == 0.0)
    v24 = 0;
  v96 = v24;
  if ((v1 & 0x2000000000) == 0)
    goto LABEL_143;
LABEL_38:
  v25 = *((float *)this + 42);
  v26 = LODWORD(v25);
  if (v25 == 0.0)
    v26 = 0;
  v95 = v26;
  if ((v1 & 0x20000000000) == 0)
    goto LABEL_144;
LABEL_41:
  v27 = *((float *)this + 46);
  v28 = LODWORD(v27);
  if (v27 == 0.0)
    v28 = 0;
  v94 = v28;
  if ((v1 & 0x200000000000) == 0)
    goto LABEL_145;
LABEL_44:
  v29 = *((float *)this + 50);
  v30 = LODWORD(v29);
  if (v29 == 0.0)
    v30 = 0;
  v93 = v30;
  if ((v1 & 4) != 0)
  {
LABEL_47:
    v92 = *((_QWORD *)this + 3);
    if ((v1 & 0x10) != 0)
      goto LABEL_48;
LABEL_147:
    v91 = 0;
    if ((v1 & 0x800000) != 0)
      goto LABEL_51;
LABEL_148:
    v90 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_54;
LABEL_149:
    v89 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_57;
LABEL_150:
    v88 = 0;
    if ((v1 & 0x100000) != 0)
      goto LABEL_60;
LABEL_151:
    v87 = 0;
    if ((v1 & 0x80000) != 0)
      goto LABEL_63;
LABEL_152:
    v42 = 0;
    if ((v1 & 0x40000000) != 0)
      goto LABEL_67;
LABEL_153:
    v44 = 0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_71;
    goto LABEL_154;
  }
LABEL_146:
  v92 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_147;
LABEL_48:
  v31 = *((float *)this + 9);
  v32 = LODWORD(v31);
  if (v31 == 0.0)
    v32 = 0;
  v91 = v32;
  if ((v1 & 0x800000) == 0)
    goto LABEL_148;
LABEL_51:
  v33 = *((float *)this + 28);
  v34 = LODWORD(v33);
  if (v33 == 0.0)
    v34 = 0;
  v90 = v34;
  if ((v1 & 0x80) == 0)
    goto LABEL_149;
LABEL_54:
  v35 = *((float *)this + 12);
  v36 = LODWORD(v35);
  if (v35 == 0.0)
    v36 = 0;
  v89 = v36;
  if ((v1 & 0x40) == 0)
    goto LABEL_150;
LABEL_57:
  v37 = *((float *)this + 11);
  v38 = LODWORD(v37);
  if (v37 == 0.0)
    v38 = 0;
  v88 = v38;
  if ((v1 & 0x100000) == 0)
    goto LABEL_151;
LABEL_60:
  v39 = *((float *)this + 25);
  v40 = LODWORD(v39);
  if (v39 == 0.0)
    v40 = 0;
  v87 = v40;
  if ((v1 & 0x80000) == 0)
    goto LABEL_152;
LABEL_63:
  v41 = *((float *)this + 24);
  if (v41 == 0.0)
    v42 = 0;
  else
    v42 = LODWORD(v41);
  if ((v1 & 0x40000000) == 0)
    goto LABEL_153;
LABEL_67:
  v43 = *((float *)this + 35);
  if (v43 == 0.0)
    v44 = 0;
  else
    v44 = LODWORD(v43);
  if ((v1 & 0x1000) != 0)
  {
LABEL_71:
    v45 = *((int *)this + 17);
    if ((v1 & 0x4000) != 0)
      goto LABEL_72;
    goto LABEL_155;
  }
LABEL_154:
  v45 = 0;
  if ((v1 & 0x4000) != 0)
  {
LABEL_72:
    v46 = *((unsigned int *)this + 19);
    if ((v1 & 0x100000000) != 0)
      goto LABEL_73;
    goto LABEL_156;
  }
LABEL_155:
  v46 = 0;
  if ((v1 & 0x100000000) != 0)
  {
LABEL_73:
    v47 = *((unsigned int *)this + 37);
    if ((v1 & 0x1000000000) != 0)
      goto LABEL_74;
    goto LABEL_157;
  }
LABEL_156:
  v47 = 0;
  if ((v1 & 0x1000000000) != 0)
  {
LABEL_74:
    v48 = *((unsigned int *)this + 41);
    if ((v1 & 0x100) != 0)
      goto LABEL_75;
    goto LABEL_158;
  }
LABEL_157:
  v48 = 0;
  if ((v1 & 0x100) != 0)
  {
LABEL_75:
    v49 = *((int *)this + 13);
    if ((v1 & 0x200000000) != 0)
      goto LABEL_76;
LABEL_159:
    v51 = 0;
    if ((v1 & 0x800) != 0)
      goto LABEL_79;
LABEL_160:
    v53 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_82;
LABEL_161:
    v55 = 0;
    if ((v1 & 0x200000) != 0)
      goto LABEL_85;
LABEL_162:
    v57 = 0;
    if ((v1 & 0x40000) != 0)
      goto LABEL_88;
LABEL_163:
    v59 = 0;
    if ((v1 & 0x20000000) != 0)
      goto LABEL_91;
LABEL_164:
    v61 = 0;
    if ((v1 & 0x800000000) != 0)
      goto LABEL_94;
LABEL_165:
    v63 = 0;
    if ((v1 & 0x400000000) != 0)
      goto LABEL_97;
LABEL_166:
    v65 = 0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_100;
    goto LABEL_167;
  }
LABEL_158:
  v49 = 0;
  if ((v1 & 0x200000000) == 0)
    goto LABEL_159;
LABEL_76:
  v50 = *((float *)this + 38);
  v51 = LODWORD(v50);
  if (v50 == 0.0)
    v51 = 0;
  if ((v1 & 0x800) == 0)
    goto LABEL_160;
LABEL_79:
  v52 = *((float *)this + 16);
  v53 = LODWORD(v52);
  if (v52 == 0.0)
    v53 = 0;
  if ((v1 & 0x400) == 0)
    goto LABEL_161;
LABEL_82:
  v54 = *((float *)this + 15);
  v55 = LODWORD(v54);
  if (v54 == 0.0)
    v55 = 0;
  if ((v1 & 0x200000) == 0)
    goto LABEL_162;
LABEL_85:
  v56 = *((float *)this + 26);
  v57 = LODWORD(v56);
  if (v56 == 0.0)
    v57 = 0;
  if ((v1 & 0x40000) == 0)
    goto LABEL_163;
LABEL_88:
  v58 = *((float *)this + 23);
  v59 = LODWORD(v58);
  if (v58 == 0.0)
    v59 = 0;
  if ((v1 & 0x20000000) == 0)
    goto LABEL_164;
LABEL_91:
  v60 = *((float *)this + 34);
  v61 = LODWORD(v60);
  if (v60 == 0.0)
    v61 = 0;
  if ((v1 & 0x800000000) == 0)
    goto LABEL_165;
LABEL_94:
  v62 = *((float *)this + 40);
  v63 = LODWORD(v62);
  if (v62 == 0.0)
    v63 = 0;
  if ((v1 & 0x400000000) == 0)
    goto LABEL_166;
LABEL_97:
  v64 = *((float *)this + 39);
  v65 = LODWORD(v64);
  if (v64 == 0.0)
    v65 = 0;
  if ((v1 & 0x8000) != 0)
  {
LABEL_100:
    v66 = *((unsigned int *)this + 20);
    if ((v1 & 0x10000000) != 0)
      goto LABEL_101;
LABEL_168:
    v68 = 0;
    if ((v1 & 0x4000000) != 0)
      goto LABEL_104;
LABEL_169:
    v70 = 0;
    if ((v1 & 0x8000000) != 0)
      goto LABEL_107;
LABEL_170:
    v72 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_110;
LABEL_171:
    v74 = 0;
    if ((v1 & 0x1000000) != 0)
      goto LABEL_113;
LABEL_172:
    v76 = 0;
    if ((v1 & 0x2000000) != 0)
      goto LABEL_116;
    goto LABEL_173;
  }
LABEL_167:
  v66 = 0;
  if ((v1 & 0x10000000) == 0)
    goto LABEL_168;
LABEL_101:
  v67 = *((float *)this + 33);
  v68 = LODWORD(v67);
  if (v67 == 0.0)
    v68 = 0;
  if ((v1 & 0x4000000) == 0)
    goto LABEL_169;
LABEL_104:
  v69 = *((float *)this + 31);
  v70 = LODWORD(v69);
  if (v69 == 0.0)
    v70 = 0;
  if ((v1 & 0x8000000) == 0)
    goto LABEL_170;
LABEL_107:
  v71 = *((float *)this + 32);
  v72 = LODWORD(v71);
  if (v71 == 0.0)
    v72 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_171;
LABEL_110:
  v73 = *((float *)this + 10);
  v74 = LODWORD(v73);
  if (v73 == 0.0)
    v74 = 0;
  if ((v1 & 0x1000000) == 0)
    goto LABEL_172;
LABEL_113:
  v75 = *((float *)this + 29);
  v76 = LODWORD(v75);
  if (v75 == 0.0)
    v76 = 0;
  if ((v1 & 0x2000000) != 0)
  {
LABEL_116:
    v77 = *((int *)this + 30);
    if ((v1 & 0x2000) != 0)
      goto LABEL_117;
LABEL_174:
    v79 = 0;
    if ((v1 & 0x200) != 0)
      goto LABEL_120;
LABEL_175:
    v81 = 0;
    if ((v1 & 0x400000) != 0)
      goto LABEL_123;
    goto LABEL_176;
  }
LABEL_173:
  v77 = 0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_174;
LABEL_117:
  v78 = *((float *)this + 18);
  v79 = LODWORD(v78);
  if (v78 == 0.0)
    v79 = 0;
  if ((v1 & 0x200) == 0)
    goto LABEL_175;
LABEL_120:
  v80 = *((float *)this + 14);
  v81 = LODWORD(v80);
  if (v80 == 0.0)
    v81 = 0;
  if ((v1 & 0x400000) != 0)
  {
LABEL_123:
    v82 = *((float *)this + 27);
    v83 = LODWORD(v82);
    if (v82 == 0.0)
      v83 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_126;
LABEL_177:
    v85 = 0;
    return v108 ^ v2 ^ v107 ^ v106 ^ v105 ^ v104 ^ v103 ^ v102 ^ v101 ^ v100 ^ v99 ^ v98 ^ v97 ^ v96 ^ v95 ^ v94 ^ v93 ^ v92 ^ v91 ^ v90 ^ v89 ^ v88 ^ v87 ^ v42 ^ v44 ^ v45 ^ v46 ^ v47 ^ v48 ^ v49 ^ v51 ^ v53 ^ v55 ^ v57 ^ v59 ^ v61 ^ v63 ^ v65 ^ v66 ^ v68 ^ v70 ^ v72 ^ v74 ^ v76 ^ v77 ^ v79 ^ v81 ^ v83 ^ v85;
  }
LABEL_176:
  v83 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_177;
LABEL_126:
  v84 = *((float *)this + 8);
  v85 = LODWORD(v84);
  if (v84 == 0.0)
    v85 = 0;
  return v108 ^ v2 ^ v107 ^ v106 ^ v105 ^ v104 ^ v103 ^ v102 ^ v101 ^ v100 ^ v99 ^ v98 ^ v97 ^ v96 ^ v95 ^ v94 ^ v93 ^ v92 ^ v91 ^ v90 ^ v89 ^ v88 ^ v87 ^ v42 ^ v44 ^ v45 ^ v46 ^ v47 ^ v48 ^ v49 ^ v51 ^ v53 ^ v55 ^ v57 ^ v59 ^ v61 ^ v63 ^ v65 ^ v66 ^ v68 ^ v70 ^ v72 ^ v74 ^ v76 ^ v77 ^ v79 ^ v81 ^ v83 ^ v85;
}

void CMMsl::FirstStepFeatures::~FirstStepFeatures(CMMsl::FirstStepFeatures *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::FirstStepFeatures::FirstStepFeatures(uint64_t this, const CMMsl::FirstStepFeatures *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  *(_QWORD *)this = &off_25135D910;
  *(_DWORD *)(this + 44) = 0;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 2) != 0)
  {
    v4 = *((_QWORD *)a2 + 2);
    v3 = 2;
    *(_BYTE *)(this + 44) = 2;
    *(_QWORD *)(this + 16) = v4;
    v2 = *((_BYTE *)a2 + 44);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 44) & 4) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 3);
    v3 |= 4u;
    *(_BYTE *)(this + 44) = v3;
    *(_QWORD *)(this + 24) = v5;
    v2 = *((_BYTE *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    v6 = *((_QWORD *)a2 + 4);
    v3 |= 8u;
    *(_BYTE *)(this + 44) = v3;
    *(_QWORD *)(this + 32) = v6;
    v2 = *((_BYTE *)a2 + 44);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        return this;
LABEL_12:
      v8 = *((_DWORD *)a2 + 10);
      *(_BYTE *)(this + 44) = v3 | 0x10;
      *(_DWORD *)(this + 40) = v8;
      return this;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_BYTE *)(this + 44) = v3;
  *(_QWORD *)(this + 8) = v7;
  if ((*((_BYTE *)a2 + 44) & 0x10) != 0)
    goto LABEL_12;
  return this;
}

uint64_t CMMsl::FirstStepFeatures::operator=(uint64_t a1, const CMMsl::FirstStepFeatures *a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  if ((const CMMsl::FirstStepFeatures *)a1 != a2)
  {
    CMMsl::FirstStepFeatures::FirstStepFeatures((uint64_t)&v6, a2);
    v3 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    v8 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v4;
    *(_QWORD *)&v4 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v9;
    v9 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::FirstStepFeatures *a2, CMMsl::FirstStepFeatures *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;
  int v8;

  v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  v6 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v6;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  v8 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v8;
  return result;
}

double CMMsl::FirstStepFeatures::FirstStepFeatures(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135D910;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135D910;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return result;
}

uint64_t CMMsl::FirstStepFeatures::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  void (**v7)(CMMsl::FirstStepFeatures *__hidden);
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  if (a1 != a2)
  {
    v7 = &off_25135D910;
    v3 = *(_QWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 44) = 0;
    v9 = *(_OWORD *)(a1 + 24);
    v4 = *(_OWORD *)(a1 + 8);
    v5 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v5;
    v8 = v4;
    *(_QWORD *)&v4 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v3;
    v10 = v4;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::FirstStepFeatures::formatText(CMMsl::FirstStepFeatures *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "aggAccelZDelta", *((double *)this + 1));
    v5 = *((_BYTE *)this + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*((_BYTE *)this + 44) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "arcLength", *((double *)this + 2));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(a2, "firstLoftAngleDeg", *((double *)this + 4));
    if ((*((_BYTE *)this + 44) & 0x10) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(a2, "curveDistance", *((double *)this + 3));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 8) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 0x10) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "stepResult");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FirstStepFeatures::readFrom(CMMsl::FirstStepFeatures *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_56;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 44) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_50;
      case 2u:
        *((_BYTE *)this + 44) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_50;
      case 3u:
        *((_BYTE *)this + 44) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_50;
      case 4u:
        *((_BYTE *)this + 44) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_50:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_34:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 5u:
        *((_BYTE *)this + 44) |= 0x10u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v26 = 0;
          v27 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_55;
            }
            v28 = v20++;
            v29 = *(_BYTE *)(v21 + v28);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0)
              break;
            v26 += 7;
            v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_54:
              v2 = v28 + 1;
              goto LABEL_55;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
          goto LABEL_54;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_55;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_55:
        *((_DWORD *)this + 10) = v24;
        break;
      default:
        goto LABEL_19;
    }
LABEL_56:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::FirstStepFeatures::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 44);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16));
    v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(this + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_10:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  if ((*(_BYTE *)(v3 + 44) & 0x10) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::FirstStepFeatures::hash_value(CMMsl::FirstStepFeatures *this)
{
  double v1;
  double v2;
  double v3;
  double v4;
  uint64_t v5;

  if ((*((_BYTE *)this + 44) & 2) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 44) & 4) != 0)
      goto LABEL_3;
LABEL_16:
    v2 = 0.0;
    if ((*((_BYTE *)this + 44) & 8) != 0)
      goto LABEL_6;
LABEL_17:
    v3 = 0.0;
    if ((*((_BYTE *)this + 44) & 1) != 0)
      goto LABEL_9;
    goto LABEL_18;
  }
  v1 = *((double *)this + 2);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 44) & 4) == 0)
    goto LABEL_16;
LABEL_3:
  v2 = *((double *)this + 3);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 44) & 8) == 0)
    goto LABEL_17;
LABEL_6:
  v3 = *((double *)this + 4);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((*((_BYTE *)this + 44) & 1) != 0)
  {
LABEL_9:
    v4 = *((double *)this + 1);
    if (v4 == 0.0)
      v4 = 0.0;
    if ((*((_BYTE *)this + 44) & 0x10) != 0)
      goto LABEL_12;
LABEL_19:
    v5 = 0;
    return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4 ^ v5;
  }
LABEL_18:
  v4 = 0.0;
  if ((*((_BYTE *)this + 44) & 0x10) == 0)
    goto LABEL_19;
LABEL_12:
  v5 = *((int *)this + 10);
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4 ^ v5;
}

uint64_t CMMsl::FitnessMachineData::FitnessMachineData(uint64_t this)
{
  *(_QWORD *)this = &off_25135D948;
  *(_DWORD *)(this + 176) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135D948;
  *(_DWORD *)(this + 176) = 0;
  return this;
}

void CMMsl::FitnessMachineData::~FitnessMachineData(CMMsl::FitnessMachineData *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::FitnessMachineData::FitnessMachineData(CMMsl::FitnessMachineData *this, const CMMsl::FitnessMachineData *a2)
{
  int v2;
  int v3;
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  *(_QWORD *)this = &off_25135D948;
  *((_DWORD *)this + 44) = 0;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 8) != 0)
  {
    result = *((double *)a2 + 4);
    v3 = 8;
    *((_DWORD *)this + 44) = 8;
    *((double *)this + 4) = result;
    v2 = *((_DWORD *)a2 + 44);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 5);
    v3 |= 0x10u;
    *((_DWORD *)this + 44) = v3;
    *((double *)this + 5) = result;
    v2 = *((_DWORD *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    result = *((double *)a2 + 6);
    v3 |= 0x20u;
    *((_DWORD *)this + 44) = v3;
    *((double *)this + 6) = result;
    v2 = *((_DWORD *)a2 + 44);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 0x100) == 0)
        goto LABEL_9;
      goto LABEL_29;
    }
  }
  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  result = *((double *)a2 + 7);
  v3 |= 0x40u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 7) = result;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x100) == 0)
  {
LABEL_9:
    if ((v2 & 0x1000) == 0)
      goto LABEL_10;
    goto LABEL_30;
  }
LABEL_29:
  result = *((double *)a2 + 9);
  v3 |= 0x100u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 9) = result;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x1000) == 0)
  {
LABEL_10:
    if ((v2 & 0x4000) == 0)
      goto LABEL_11;
    goto LABEL_31;
  }
LABEL_30:
  result = *((double *)a2 + 13);
  v3 |= 0x1000u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 13) = result;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x4000) == 0)
  {
LABEL_11:
    if ((v2 & 0x8000) == 0)
      goto LABEL_12;
    goto LABEL_32;
  }
LABEL_31:
  result = *((double *)a2 + 15);
  v3 |= 0x4000u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 15) = result;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x8000) == 0)
  {
LABEL_12:
    if ((v2 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_33;
  }
LABEL_32:
  result = *((double *)a2 + 16);
  v3 |= 0x8000u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 16) = result;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x2000) == 0)
  {
LABEL_13:
    if ((v2 & 0x10000) == 0)
      goto LABEL_14;
    goto LABEL_34;
  }
LABEL_33:
  result = *((double *)a2 + 14);
  v3 |= 0x2000u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 14) = result;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x10000) == 0)
  {
LABEL_14:
    if ((v2 & 0x20000) == 0)
      goto LABEL_15;
    goto LABEL_35;
  }
LABEL_34:
  v5 = *((_QWORD *)a2 + 17);
  v3 |= 0x10000u;
  *((_DWORD *)this + 44) = v3;
  *((_QWORD *)this + 17) = v5;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x20000) == 0)
  {
LABEL_15:
    if ((v2 & 0x40000) == 0)
      goto LABEL_16;
    goto LABEL_36;
  }
LABEL_35:
  v6 = *((_QWORD *)a2 + 18);
  v3 |= 0x20000u;
  *((_DWORD *)this + 44) = v3;
  *((_QWORD *)this + 18) = v6;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x40000) == 0)
  {
LABEL_16:
    if ((v2 & 0x80000) == 0)
      goto LABEL_17;
    goto LABEL_37;
  }
LABEL_36:
  v7 = *((_QWORD *)a2 + 19);
  v3 |= 0x40000u;
  *((_DWORD *)this + 44) = v3;
  *((_QWORD *)this + 19) = v7;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x80000) == 0)
  {
LABEL_17:
    if ((v2 & 0x100000) == 0)
      goto LABEL_18;
    goto LABEL_38;
  }
LABEL_37:
  result = *((double *)a2 + 20);
  v3 |= 0x80000u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 20) = result;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x100000) == 0)
  {
LABEL_18:
    if ((v2 & 0x400) == 0)
      goto LABEL_19;
    goto LABEL_39;
  }
LABEL_38:
  v8 = *((_DWORD *)a2 + 42);
  v3 |= 0x100000u;
  *((_DWORD *)this + 44) = v3;
  *((_DWORD *)this + 42) = v8;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x400) == 0)
  {
LABEL_19:
    if ((v2 & 2) == 0)
      goto LABEL_20;
    goto LABEL_40;
  }
LABEL_39:
  result = *((double *)a2 + 11);
  v3 |= 0x400u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 11) = result;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 2) == 0)
  {
LABEL_20:
    if ((v2 & 4) == 0)
      goto LABEL_21;
    goto LABEL_41;
  }
LABEL_40:
  result = *((double *)a2 + 2);
  v3 |= 2u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 2) = result;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 4) == 0)
  {
LABEL_21:
    if ((v2 & 0x200000) == 0)
      goto LABEL_22;
    goto LABEL_42;
  }
LABEL_41:
  result = *((double *)a2 + 3);
  v3 |= 4u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 3) = result;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x200000) == 0)
  {
LABEL_22:
    if ((v2 & 0x80) == 0)
      goto LABEL_23;
    goto LABEL_43;
  }
LABEL_42:
  v3 |= 0x200000u;
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((_DWORD *)this + 44) = v3;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x80) == 0)
  {
LABEL_23:
    if ((v2 & 0x200) == 0)
      goto LABEL_24;
    goto LABEL_44;
  }
LABEL_43:
  result = *((double *)a2 + 8);
  v3 |= 0x80u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 8) = result;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x200) == 0)
  {
LABEL_24:
    if ((v2 & 1) == 0)
      goto LABEL_25;
    goto LABEL_45;
  }
LABEL_44:
  result = *((double *)a2 + 10);
  v3 |= 0x200u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 10) = result;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 1) == 0)
  {
LABEL_25:
    if ((v2 & 0x800) == 0)
      return result;
LABEL_46:
    result = *((double *)a2 + 12);
    *((_DWORD *)this + 44) = v3 | 0x800;
    *((double *)this + 12) = result;
    return result;
  }
LABEL_45:
  result = *((double *)a2 + 1);
  v3 |= 1u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 1) = result;
  if ((*((_DWORD *)a2 + 44) & 0x800) != 0)
    goto LABEL_46;
  return result;
}

CMMsl *CMMsl::FitnessMachineData::operator=(CMMsl *a1, const CMMsl::FitnessMachineData *a2)
{
  CMMsl::FitnessMachineData *v3;
  _BYTE v5[184];

  if (a1 != a2)
  {
    CMMsl::FitnessMachineData::FitnessMachineData((CMMsl::FitnessMachineData *)v5, a2);
    CMMsl::swap(a1, (CMMsl::FitnessMachineData *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::FitnessMachineData *a2, CMMsl::FitnessMachineData *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double result;

  v3 = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v3;
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  v5 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v5;
  v6 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v6;
  v7 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v7;
  v8 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v8;
  v9 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v9;
  v10 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v10;
  v11 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v11;
  v12 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v12;
  v13 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v13;
  v14 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v14;
  v15 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 19) = v15;
  v16 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = *((_QWORD *)a2 + 20);
  *((_QWORD *)a2 + 20) = v16;
  LODWORD(v15) = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v15;
  v17 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v17;
  v18 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v18;
  v19 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v19;
  LODWORD(v15) = *((_DWORD *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((_DWORD *)a2 + 43) = v15;
  v20 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v20;
  v21 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v21;
  v22 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v22;
  result = *((double *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((double *)a2 + 12) = result;
  return result;
}

double CMMsl::FitnessMachineData::FitnessMachineData(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135D948;
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 96);
  *(double *)(a1 + 96) = result;
  return result;
}

CMMsl *CMMsl::FitnessMachineData::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::FitnessMachineData *v3;
  _BYTE v5[184];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::FitnessMachineData::FitnessMachineData((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FitnessMachineData *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::FitnessMachineData::formatText(CMMsl::FitnessMachineData *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "cadenceDeviceIdentification", *((double *)this + 1));
    v5 = *((_DWORD *)this + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_27;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "cadenceUpdateTime", *((double *)this + 2));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x100000) == 0)
      goto LABEL_5;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "elapsedTime", *((double *)this + 3));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x100000) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "externalMachineType");
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "inclination", *((double *)this + 4));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "instantaneousCadence", *((double *)this + 5));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "instantaneousPower", *((double *)this + 6));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x40) == 0)
  {
LABEL_9:
    if ((v5 & 0x200000) == 0)
      goto LABEL_10;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "instantaneousSpeed", *((double *)this + 7));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x200000) == 0)
  {
LABEL_10:
    if ((v5 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "powerMeterIdentification");
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x80) == 0)
  {
LABEL_11:
    if ((v5 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "powerUpdateTime", *((double *)this + 8));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x100) == 0)
  {
LABEL_12:
    if ((v5 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "resistanceLevel", *((double *)this + 9));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x200) == 0)
  {
LABEL_13:
    if ((v5 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "speedDeviceIdentification", *((double *)this + 10));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x400) == 0)
  {
LABEL_14:
    if ((v5 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "speedUpdateTime", *((double *)this + 11));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x800) == 0)
  {
LABEL_15:
    if ((v5 & 0x1000) == 0)
      goto LABEL_16;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 12));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x1000) == 0)
  {
LABEL_16:
    if ((v5 & 0x2000) == 0)
      goto LABEL_17;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 13));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x2000) == 0)
  {
LABEL_17:
    if ((v5 & 0x4000) == 0)
      goto LABEL_18;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "totalDistance", *((double *)this + 14));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x4000) == 0)
  {
LABEL_18:
    if ((v5 & 0x8000) == 0)
      goto LABEL_19;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "totalElevationAscended", *((double *)this + 15));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x8000) == 0)
  {
LABEL_19:
    if ((v5 & 0x10000) == 0)
      goto LABEL_20;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "totalEnergy", *((double *)this + 16));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x10000) == 0)
  {
LABEL_20:
    if ((v5 & 0x20000) == 0)
      goto LABEL_21;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "totalFloorsClimbed");
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x20000) == 0)
  {
LABEL_21:
    if ((v5 & 0x40000) == 0)
      goto LABEL_22;
LABEL_45:
    PB::TextFormatter::format(a2, "totalStrokeCount");
    if ((*((_DWORD *)this + 44) & 0x80000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_23;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "totalStrideCount");
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x40000) != 0)
    goto LABEL_45;
LABEL_22:
  if ((v5 & 0x80000) != 0)
LABEL_23:
    PB::TextFormatter::format(a2, "verticalSpeed", *((double *)this + 20));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FitnessMachineData::readFrom(CMMsl::FitnessMachineData *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  char v49;
  char v50;
  unsigned int v51;
  unint64_t v52;
  char v53;
  char v54;
  unsigned int v55;
  unint64_t v56;
  char v57;
  char v58;
  unsigned int v59;
  unint64_t v60;
  char v61;
  char v62;
  unsigned int v63;
  unint64_t v64;
  char v65;
  char v66;
  unsigned int v67;
  unint64_t v68;
  char v69;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_146;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 44) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_108;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_145;
      case 2u:
        *((_DWORD *)this + 44) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_108;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_145;
      case 3u:
        *((_DWORD *)this + 44) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_108;
        *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_145;
      case 4u:
        *((_DWORD *)this + 44) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_108;
        *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_145;
      case 5u:
        *((_DWORD *)this + 44) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_108;
        *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_145;
      case 6u:
        *((_DWORD *)this + 44) |= 0x1000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_108;
        *((_QWORD *)this + 13) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_145;
      case 7u:
        *((_DWORD *)this + 44) |= 0x4000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_108;
        *((_QWORD *)this + 15) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_145;
      case 8u:
        *((_DWORD *)this + 44) |= 0x8000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_108;
        *((_QWORD *)this + 16) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_145;
      case 9u:
        *((_DWORD *)this + 44) |= 0x2000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_108;
        *((_QWORD *)this + 14) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_145;
      case 0xAu:
        *((_DWORD *)this + 44) |= 0x10000u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v50 = 0;
          v51 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              v24 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_155;
            }
            v52 = v20++;
            v53 = *(_BYTE *)(v21 + v52);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v53 & 0x7F) << v50;
            if ((v53 & 0x80) == 0)
              break;
            v50 += 7;
            v14 = v51++ > 8;
            if (v14)
            {
              v24 = 0;
LABEL_154:
              v2 = v52 + 1;
              goto LABEL_155;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v24 = 0;
          goto LABEL_154;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_155;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        v24 = 0;
LABEL_155:
        *((_QWORD *)this + 17) = v24;
        break;
      case 0xBu:
        *((_DWORD *)this + 44) |= 0x20000u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v54 = 0;
          v55 = 0;
          v30 = 0;
          if (v2 <= v26)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v26)
            {
              v30 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_160;
            }
            v56 = v26++;
            v57 = *(_BYTE *)(v27 + v56);
            *((_QWORD *)a2 + 1) = v26;
            v30 |= (unint64_t)(v57 & 0x7F) << v54;
            if ((v57 & 0x80) == 0)
              break;
            v54 += 7;
            v14 = v55++ > 8;
            if (v14)
            {
              v30 = 0;
LABEL_159:
              v2 = v56 + 1;
              goto LABEL_160;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v30 = 0;
          goto LABEL_159;
        }
        v28 = 0;
        v29 = 0;
        v30 = 0;
        do
        {
          v2 = v26 + 1;
          *((_QWORD *)a2 + 1) = v26 + 1;
          v31 = *(_BYTE *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0)
            goto LABEL_160;
          v28 += 7;
          v26 = v2;
          v14 = v29++ > 8;
        }
        while (!v14);
        v30 = 0;
LABEL_160:
        *((_QWORD *)this + 18) = v30;
        break;
      case 0xCu:
        *((_DWORD *)this + 44) |= 0x40000u;
        v32 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v33 = *(_QWORD *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
        {
          v58 = 0;
          v59 = 0;
          v36 = 0;
          if (v2 <= v32)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v32)
            {
              v36 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_165;
            }
            v60 = v32++;
            v61 = *(_BYTE *)(v33 + v60);
            *((_QWORD *)a2 + 1) = v32;
            v36 |= (unint64_t)(v61 & 0x7F) << v58;
            if ((v61 & 0x80) == 0)
              break;
            v58 += 7;
            v14 = v59++ > 8;
            if (v14)
            {
              v36 = 0;
LABEL_164:
              v2 = v60 + 1;
              goto LABEL_165;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v36 = 0;
          goto LABEL_164;
        }
        v34 = 0;
        v35 = 0;
        v36 = 0;
        do
        {
          v2 = v32 + 1;
          *((_QWORD *)a2 + 1) = v32 + 1;
          v37 = *(_BYTE *)(v33 + v32);
          v36 |= (unint64_t)(v37 & 0x7F) << v34;
          if ((v37 & 0x80) == 0)
            goto LABEL_165;
          v34 += 7;
          v32 = v2;
          v14 = v35++ > 8;
        }
        while (!v14);
        v36 = 0;
LABEL_165:
        *((_QWORD *)this + 19) = v36;
        break;
      case 0xDu:
        *((_DWORD *)this + 44) |= 0x80000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_108;
        *((_QWORD *)this + 20) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_145;
      case 0xEu:
        *((_DWORD *)this + 44) |= 0x100000u;
        v38 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v39 = *(_QWORD *)a2;
        if (v38 > 0xFFFFFFFFFFFFFFF5 || v38 + 10 > v2)
        {
          v62 = 0;
          v63 = 0;
          v42 = 0;
          if (v2 <= v38)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v38)
            {
              LODWORD(v42) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_170;
            }
            v64 = v38++;
            v65 = *(_BYTE *)(v39 + v64);
            *((_QWORD *)a2 + 1) = v38;
            v42 |= (unint64_t)(v65 & 0x7F) << v62;
            if ((v65 & 0x80) == 0)
              break;
            v62 += 7;
            v14 = v63++ > 8;
            if (v14)
            {
              LODWORD(v42) = 0;
LABEL_169:
              v2 = v64 + 1;
              goto LABEL_170;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v42) = 0;
          goto LABEL_169;
        }
        v40 = 0;
        v41 = 0;
        v42 = 0;
        do
        {
          v2 = v38 + 1;
          *((_QWORD *)a2 + 1) = v38 + 1;
          v43 = *(_BYTE *)(v39 + v38);
          v42 |= (unint64_t)(v43 & 0x7F) << v40;
          if ((v43 & 0x80) == 0)
            goto LABEL_170;
          v40 += 7;
          v38 = v2;
          v14 = v41++ > 8;
        }
        while (!v14);
        LODWORD(v42) = 0;
LABEL_170:
        *((_DWORD *)this + 42) = v42;
        break;
      case 0xFu:
        *((_DWORD *)this + 44) |= 0x400u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_108;
        *((_QWORD *)this + 11) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_145;
      case 0x10u:
        *((_DWORD *)this + 44) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_108;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_145;
      case 0x11u:
        *((_DWORD *)this + 44) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_108;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_145;
      case 0x12u:
        *((_DWORD *)this + 44) |= 0x200000u;
        v44 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v45 = *(_QWORD *)a2;
        if (v44 > 0xFFFFFFFFFFFFFFF5 || v44 + 10 > v2)
        {
          v66 = 0;
          v67 = 0;
          v48 = 0;
          if (v2 <= v44)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v44)
            {
              LODWORD(v48) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_175;
            }
            v68 = v44++;
            v69 = *(_BYTE *)(v45 + v68);
            *((_QWORD *)a2 + 1) = v44;
            v48 |= (unint64_t)(v69 & 0x7F) << v66;
            if ((v69 & 0x80) == 0)
              break;
            v66 += 7;
            v14 = v67++ > 8;
            if (v14)
            {
              LODWORD(v48) = 0;
LABEL_174:
              v2 = v68 + 1;
              goto LABEL_175;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v48) = 0;
          goto LABEL_174;
        }
        v46 = 0;
        v47 = 0;
        v48 = 0;
        do
        {
          v2 = v44 + 1;
          *((_QWORD *)a2 + 1) = v44 + 1;
          v49 = *(_BYTE *)(v45 + v44);
          v48 |= (unint64_t)(v49 & 0x7F) << v46;
          if ((v49 & 0x80) == 0)
            goto LABEL_175;
          v46 += 7;
          v44 = v2;
          v14 = v47++ > 8;
        }
        while (!v14);
        LODWORD(v48) = 0;
LABEL_175:
        *((_DWORD *)this + 43) = v48;
        break;
      case 0x13u:
        *((_DWORD *)this + 44) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_108;
        *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_145;
      case 0x14u:
        *((_DWORD *)this + 44) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_108;
        *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_145;
      case 0x15u:
        *((_DWORD *)this + 44) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_108;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_145;
      case 0x16u:
        *((_DWORD *)this + 44) |= 0x800u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 12) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_145:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_108:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_146:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::FitnessMachineData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 176);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32));
    v4 = *(_DWORD *)(v3 + 176);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_26;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x100) == 0)
  {
LABEL_6:
    if ((v4 & 0x1000) == 0)
      goto LABEL_7;
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(double *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x1000) == 0)
  {
LABEL_7:
    if ((v4 & 0x4000) == 0)
      goto LABEL_8;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(double *)(v3 + 104));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x4000) == 0)
  {
LABEL_8:
    if ((v4 & 0x8000) == 0)
      goto LABEL_9;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(double *)(v3 + 120));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x8000) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(double *)(v3 + 128));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x2000) == 0)
  {
LABEL_10:
    if ((v4 & 0x10000) == 0)
      goto LABEL_11;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(double *)(v3 + 112));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x10000) == 0)
  {
LABEL_11:
    if ((v4 & 0x20000) == 0)
      goto LABEL_12;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x20000) == 0)
  {
LABEL_12:
    if ((v4 & 0x40000) == 0)
      goto LABEL_13;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x40000) == 0)
  {
LABEL_13:
    if ((v4 & 0x80000) == 0)
      goto LABEL_14;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x80000) == 0)
  {
LABEL_14:
    if ((v4 & 0x100000) == 0)
      goto LABEL_15;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(double *)(v3 + 160));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x100000) == 0)
  {
LABEL_15:
    if ((v4 & 0x400) == 0)
      goto LABEL_16;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x400) == 0)
  {
LABEL_16:
    if ((v4 & 2) == 0)
      goto LABEL_17;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(double *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 2) == 0)
  {
LABEL_17:
    if ((v4 & 4) == 0)
      goto LABEL_18;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 4) == 0)
  {
LABEL_18:
    if ((v4 & 0x200000) == 0)
      goto LABEL_19;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x200000) == 0)
  {
LABEL_19:
    if ((v4 & 0x80) == 0)
      goto LABEL_20;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x80) == 0)
  {
LABEL_20:
    if ((v4 & 0x200) == 0)
      goto LABEL_21;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x200) == 0)
  {
LABEL_21:
    if ((v4 & 1) == 0)
      goto LABEL_22;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(double *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 1) == 0)
  {
LABEL_22:
    if ((v4 & 0x800) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 96));
  }
LABEL_44:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  if ((*(_DWORD *)(v3 + 176) & 0x800) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 96));
  return this;
}

BOOL CMMsl::FitnessMachineData::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 176);
  v3 = *(_DWORD *)(a2 + 176);
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(double *)(a1 + 120) != *(double *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(double *)(a1 + 128) != *(double *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(double *)(a1 + 112) != *(double *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(_QWORD *)(a1 + 136) != *(_QWORD *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(_QWORD *)(a1 + 144) != *(_QWORD *)(a2 + 144))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(_QWORD *)(a1 + 152) != *(_QWORD *)(a2 + 152))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(double *)(a1 + 160) != *(double *)(a2 + 160))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(_DWORD *)(a1 + 168) != *(_DWORD *)(a2 + 168))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(_DWORD *)(a1 + 172) != *(_DWORD *)(a2 + 172))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  v4 = (*(_DWORD *)(a2 + 176) & 0x800) == 0;
  if ((v2 & 0x800) != 0)
    return (v3 & 0x800) != 0 && *(double *)(a1 + 96) == *(double *)(a2 + 96);
  return v4;
}

uint64_t CMMsl::FitnessMachineData::hash_value(CMMsl::FitnessMachineData *this)
{
  int v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;

  v1 = *((_DWORD *)this + 44);
  if ((v1 & 8) == 0)
  {
    v2 = 0.0;
    if ((v1 & 0x10) != 0)
      goto LABEL_3;
LABEL_59:
    v3 = 0.0;
    if ((v1 & 0x20) != 0)
      goto LABEL_6;
LABEL_60:
    v4 = 0.0;
    if ((v1 & 0x40) != 0)
      goto LABEL_9;
LABEL_61:
    v5 = 0.0;
    if ((v1 & 0x100) != 0)
      goto LABEL_12;
LABEL_62:
    v6 = 0.0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_15;
LABEL_63:
    v7 = 0.0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_18;
LABEL_64:
    v8 = 0.0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_21;
LABEL_65:
    v9 = 0.0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_24;
LABEL_66:
    v10 = 0.0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_27;
    goto LABEL_67;
  }
  v2 = *((double *)this + 4);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 0x10) == 0)
    goto LABEL_59;
LABEL_3:
  v3 = *((double *)this + 5);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 0x20) == 0)
    goto LABEL_60;
LABEL_6:
  v4 = *((double *)this + 6);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 0x40) == 0)
    goto LABEL_61;
LABEL_9:
  v5 = *((double *)this + 7);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((v1 & 0x100) == 0)
    goto LABEL_62;
LABEL_12:
  v6 = *((double *)this + 9);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((v1 & 0x1000) == 0)
    goto LABEL_63;
LABEL_15:
  v7 = *((double *)this + 13);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((v1 & 0x4000) == 0)
    goto LABEL_64;
LABEL_18:
  v8 = *((double *)this + 15);
  if (v8 == 0.0)
    v8 = 0.0;
  if ((v1 & 0x8000) == 0)
    goto LABEL_65;
LABEL_21:
  v9 = *((double *)this + 16);
  if (v9 == 0.0)
    v9 = 0.0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_66;
LABEL_24:
  v10 = *((double *)this + 14);
  if (v10 == 0.0)
    v10 = 0.0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_27:
    v11 = *((_QWORD *)this + 17);
    if ((v1 & 0x20000) != 0)
      goto LABEL_28;
    goto LABEL_68;
  }
LABEL_67:
  v11 = 0;
  if ((v1 & 0x20000) != 0)
  {
LABEL_28:
    v12 = *((_QWORD *)this + 18);
    if ((v1 & 0x40000) != 0)
      goto LABEL_29;
    goto LABEL_69;
  }
LABEL_68:
  v12 = 0;
  if ((v1 & 0x40000) != 0)
  {
LABEL_29:
    v13 = *((_QWORD *)this + 19);
    if ((v1 & 0x80000) != 0)
      goto LABEL_30;
LABEL_70:
    v14 = 0.0;
    if ((v1 & 0x100000) != 0)
      goto LABEL_33;
    goto LABEL_71;
  }
LABEL_69:
  v13 = 0;
  if ((v1 & 0x80000) == 0)
    goto LABEL_70;
LABEL_30:
  v14 = *((double *)this + 20);
  if (v14 == 0.0)
    v14 = 0.0;
  if ((v1 & 0x100000) != 0)
  {
LABEL_33:
    v15 = *((unsigned int *)this + 42);
    if ((v1 & 0x400) != 0)
      goto LABEL_34;
LABEL_72:
    v16 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_37;
LABEL_73:
    v17 = 0.0;
    if ((v1 & 4) != 0)
      goto LABEL_40;
LABEL_74:
    v18 = 0.0;
    if ((v1 & 0x200000) != 0)
      goto LABEL_43;
    goto LABEL_75;
  }
LABEL_71:
  v15 = 0;
  if ((v1 & 0x400) == 0)
    goto LABEL_72;
LABEL_34:
  v16 = *((double *)this + 11);
  if (v16 == 0.0)
    v16 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_73;
LABEL_37:
  v17 = *((double *)this + 2);
  if (v17 == 0.0)
    v17 = 0.0;
  if ((v1 & 4) == 0)
    goto LABEL_74;
LABEL_40:
  v18 = *((double *)this + 3);
  if (v18 == 0.0)
    v18 = 0.0;
  if ((v1 & 0x200000) != 0)
  {
LABEL_43:
    v19 = *((int *)this + 43);
    if ((v1 & 0x80) != 0)
      goto LABEL_44;
LABEL_76:
    v20 = 0.0;
    if ((v1 & 0x200) != 0)
      goto LABEL_47;
LABEL_77:
    v21 = 0.0;
    if ((v1 & 1) != 0)
      goto LABEL_50;
    goto LABEL_78;
  }
LABEL_75:
  v19 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_76;
LABEL_44:
  v20 = *((double *)this + 8);
  if (v20 == 0.0)
    v20 = 0.0;
  if ((v1 & 0x200) == 0)
    goto LABEL_77;
LABEL_47:
  v21 = *((double *)this + 10);
  if (v21 == 0.0)
    v21 = 0.0;
  if ((v1 & 1) != 0)
  {
LABEL_50:
    v22 = *((double *)this + 1);
    if (v22 == 0.0)
      v22 = 0.0;
    if ((v1 & 0x800) != 0)
      goto LABEL_53;
LABEL_79:
    v23 = 0.0;
    return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ v11 ^ v12 ^ v13 ^ *(_QWORD *)&v14 ^ v15 ^ *(_QWORD *)&v16 ^ *(_QWORD *)&v17 ^ *(_QWORD *)&v18 ^ v19 ^ *(_QWORD *)&v20 ^ *(_QWORD *)&v21 ^ *(_QWORD *)&v22 ^ *(_QWORD *)&v23;
  }
LABEL_78:
  v22 = 0.0;
  if ((v1 & 0x800) == 0)
    goto LABEL_79;
LABEL_53:
  v23 = *((double *)this + 12);
  if (v23 == 0.0)
    v23 = 0.0;
  return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ v11 ^ v12 ^ v13 ^ *(_QWORD *)&v14 ^ v15 ^ *(_QWORD *)&v16 ^ *(_QWORD *)&v17 ^ *(_QWORD *)&v18 ^ v19 ^ *(_QWORD *)&v20 ^ *(_QWORD *)&v21 ^ *(_QWORD *)&v22 ^ *(_QWORD *)&v23;
}

uint64_t CMMsl::FitnessMachineSample::FitnessMachineSample(uint64_t this)
{
  *(_QWORD *)this = &off_25135D980;
  *(_DWORD *)(this + 112) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135D980;
  *(_DWORD *)(this + 112) = 0;
  return this;
}

void CMMsl::FitnessMachineSample::~FitnessMachineSample(CMMsl::FitnessMachineSample *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::FitnessMachineSample::FitnessMachineSample(CMMsl::FitnessMachineSample *this, const CMMsl::FitnessMachineSample *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;

  *(_QWORD *)this = &off_25135D980;
  *((_DWORD *)this + 28) = 0;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 4) != 0)
  {
    v4 = *((_QWORD *)a2 + 3);
    v3 = 4;
    *((_DWORD *)this + 28) = 4;
    *((_QWORD *)this + 3) = v4;
    v2 = *((_DWORD *)a2 + 28);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    v4 = *((_QWORD *)a2 + 2);
    v3 |= 2u;
    *((_DWORD *)this + 28) = v3;
    *((_QWORD *)this + 2) = v4;
    v2 = *((_DWORD *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 |= 1u;
    *((_DWORD *)this + 28) = v3;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_DWORD *)a2 + 28);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x400000) == 0)
        goto LABEL_9;
      goto LABEL_30;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 15);
  v3 |= 0x400u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 15) = v4;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x400000) == 0)
  {
LABEL_9:
    if ((v2 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_31;
  }
LABEL_30:
  LODWORD(v4) = *((_DWORD *)a2 + 27);
  v3 |= 0x400000u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 27) = v4;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x2000) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_32;
  }
LABEL_31:
  LODWORD(v4) = *((_DWORD *)a2 + 18);
  v3 |= 0x2000u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 18) = v4;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_33;
  }
LABEL_32:
  LODWORD(v4) = *((_DWORD *)a2 + 13);
  v3 |= 0x100u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 13) = v4;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x800) == 0)
  {
LABEL_12:
    if ((v2 & 0x100000) == 0)
      goto LABEL_13;
    goto LABEL_34;
  }
LABEL_33:
  v5 = *((_DWORD *)a2 + 16);
  v3 |= 0x800u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 16) = v5;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x100000) == 0)
  {
LABEL_13:
    if ((v2 & 0x200000) == 0)
      goto LABEL_14;
    goto LABEL_35;
  }
LABEL_34:
  v6 = *((_DWORD *)a2 + 25);
  v3 |= 0x100000u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 25) = v6;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x200000) == 0)
  {
LABEL_14:
    if ((v2 & 0x40000) == 0)
      goto LABEL_15;
    goto LABEL_36;
  }
LABEL_35:
  LODWORD(v4) = *((_DWORD *)a2 + 26);
  v3 |= 0x200000u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 26) = v4;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x40000) == 0)
  {
LABEL_15:
    if ((v2 & 0x80) == 0)
      goto LABEL_16;
    goto LABEL_37;
  }
LABEL_36:
  LODWORD(v4) = *((_DWORD *)a2 + 23);
  v3 |= 0x40000u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 23) = v4;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x80) == 0)
  {
LABEL_16:
    if ((v2 & 0x10000) == 0)
      goto LABEL_17;
    goto LABEL_38;
  }
LABEL_37:
  LODWORD(v4) = *((_DWORD *)a2 + 12);
  v3 |= 0x80u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 12) = v4;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x10000) == 0)
  {
LABEL_17:
    if ((v2 & 0x20) == 0)
      goto LABEL_18;
    goto LABEL_39;
  }
LABEL_38:
  LODWORD(v4) = *((_DWORD *)a2 + 21);
  v3 |= 0x10000u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 21) = v4;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x20) == 0)
  {
LABEL_18:
    if ((v2 & 0x200) == 0)
      goto LABEL_19;
    goto LABEL_40;
  }
LABEL_39:
  LODWORD(v4) = *((_DWORD *)a2 + 10);
  v3 |= 0x20u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 10) = v4;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x200) == 0)
  {
LABEL_19:
    if ((v2 & 0x1000) == 0)
      goto LABEL_20;
    goto LABEL_41;
  }
LABEL_40:
  LODWORD(v4) = *((_DWORD *)a2 + 14);
  v3 |= 0x200u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 14) = v4;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x1000) == 0)
  {
LABEL_20:
    if ((v2 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_42;
  }
LABEL_41:
  LODWORD(v4) = *((_DWORD *)a2 + 17);
  v3 |= 0x1000u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 17) = v4;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x80000) == 0)
  {
LABEL_21:
    if ((v2 & 0x20000) == 0)
      goto LABEL_22;
    goto LABEL_43;
  }
LABEL_42:
  LODWORD(v4) = *((_DWORD *)a2 + 24);
  v3 |= 0x80000u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 24) = v4;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x20000) == 0)
  {
LABEL_22:
    if ((v2 & 0x40) == 0)
      goto LABEL_23;
    goto LABEL_44;
  }
LABEL_43:
  LODWORD(v4) = *((_DWORD *)a2 + 22);
  v3 |= 0x20000u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 22) = v4;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x40) == 0)
  {
LABEL_23:
    if ((v2 & 0x4000) == 0)
      goto LABEL_24;
    goto LABEL_45;
  }
LABEL_44:
  LODWORD(v4) = *((_DWORD *)a2 + 11);
  v3 |= 0x40u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 11) = v4;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x4000) == 0)
  {
LABEL_24:
    if ((v2 & 8) == 0)
      goto LABEL_25;
    goto LABEL_46;
  }
LABEL_45:
  LODWORD(v4) = *((_DWORD *)a2 + 19);
  v3 |= 0x4000u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 19) = v4;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 8) == 0)
  {
LABEL_25:
    if ((v2 & 0x8000) == 0)
      goto LABEL_26;
    goto LABEL_47;
  }
LABEL_46:
  LODWORD(v4) = *((_DWORD *)a2 + 8);
  v3 |= 8u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 8) = v4;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x8000) == 0)
  {
LABEL_26:
    if ((v2 & 0x10) == 0)
      return *(float *)&v4;
    goto LABEL_48;
  }
LABEL_47:
  LODWORD(v4) = *((_DWORD *)a2 + 20);
  v3 |= 0x8000u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 20) = v4;
  if ((*((_DWORD *)a2 + 28) & 0x10) == 0)
    return *(float *)&v4;
LABEL_48:
  LODWORD(v4) = *((_DWORD *)a2 + 9);
  *((_DWORD *)this + 28) = v3 | 0x10;
  *((_DWORD *)this + 9) = v4;
  return *(float *)&v4;
}

CMMsl *CMMsl::FitnessMachineSample::operator=(CMMsl *a1, const CMMsl::FitnessMachineSample *a2)
{
  CMMsl::FitnessMachineSample *v3;
  _BYTE v5[120];

  if (a1 != a2)
  {
    CMMsl::FitnessMachineSample::FitnessMachineSample((CMMsl::FitnessMachineSample *)v5, a2);
    CMMsl::swap(a1, (CMMsl::FitnessMachineSample *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::FitnessMachineSample *a2, CMMsl::FitnessMachineSample *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  float result;

  v3 = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v3;
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  LODWORD(v6) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v6;
  LODWORD(v6) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v6;
  LODWORD(v6) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v6;
  LODWORD(v6) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v6;
  v7 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v7;
  v8 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v8;
  LODWORD(v6) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v6;
  LODWORD(v6) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v6;
  LODWORD(v6) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v6;
  LODWORD(v6) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v6;
  LODWORD(v6) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v6;
  LODWORD(v6) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v6;
  LODWORD(v6) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v6;
  LODWORD(v6) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v6;
  LODWORD(v6) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v6;
  LODWORD(v6) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v6;
  LODWORD(v6) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v6;
  LODWORD(v6) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v6;
  LODWORD(v6) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v6;
  result = *((float *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((float *)a2 + 9) = result;
  return result;
}

float CMMsl::FitnessMachineSample::FitnessMachineSample(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135D980;
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  result = *(float *)(a2 + 36);
  *(float *)(a1 + 36) = result;
  return result;
}

CMMsl *CMMsl::FitnessMachineSample::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::FitnessMachineSample *v3;
  _BYTE v5[120];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::FitnessMachineSample::FitnessMachineSample((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FitnessMachineSample *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::FitnessMachineSample::formatText(CMMsl::FitnessMachineSample *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "averageCadence", *((float *)this + 8));
    v5 = *((_DWORD *)this + 28);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_28;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "averageHeartRate", *((float *)this + 9));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "averagePace", *((float *)this + 10));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "averagePower", *((float *)this + 11));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "averageSpeed", *((float *)this + 12));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0)
      goto LABEL_8;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "crossTrainerDistance", *((float *)this + 13));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "elapsedTime", *((double *)this + 1));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "elevationGain", *((float *)this + 14));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "energy", *((float *)this + 15));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 2) == 0)
      goto LABEL_12;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "floors");
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 2) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "globalMachtime", *((double *)this + 2));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0)
      goto LABEL_14;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "inclination", *((float *)this + 17));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x2000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000) == 0)
      goto LABEL_15;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "indoorBikeDistance", *((float *)this + 18));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x4000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0)
      goto LABEL_16;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "instantaneousCadence", *((float *)this + 19));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000) == 0)
      goto LABEL_17;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "instantaneousHeartRate", *((float *)this + 20));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x10000) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "instantaneousPace", *((float *)this + 21));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0)
      goto LABEL_19;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "instantaneousPower", *((float *)this + 22));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 4) == 0)
      goto LABEL_20;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "instantaneousSpeed", *((float *)this + 23));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 4) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "localMachtime", *((double *)this + 3));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0)
      goto LABEL_22;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "resistanceLevel", *((float *)this + 24));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0)
      goto LABEL_23;
LABEL_47:
    PB::TextFormatter::format(a2, "strideCount", *((float *)this + 26));
    if ((*((_DWORD *)this + 28) & 0x400000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_24;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "stepCount");
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x200000) != 0)
    goto LABEL_47;
LABEL_23:
  if ((v5 & 0x400000) != 0)
LABEL_24:
    PB::TextFormatter::format(a2, "treadmillDistance", *((float *)this + 27));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FitnessMachineSample::readFrom(CMMsl::FitnessMachineSample *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  unint64_t v38;
  char v39;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_118;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 28) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_100;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_32;
      case 2u:
        *((_DWORD *)this + 28) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_100;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_32;
      case 3u:
        *((_DWORD *)this + 28) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_100;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_32:
        v2 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_117;
      case 4u:
        *((_DWORD *)this + 28) |= 0x400u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_100;
        *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_116;
      case 5u:
        *((_DWORD *)this + 28) |= 0x400000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_100;
        *((_DWORD *)this + 27) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_116;
      case 6u:
        *((_DWORD *)this + 28) |= 0x2000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_100;
        *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_116;
      case 7u:
        *((_DWORD *)this + 28) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_100;
        *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_116;
      case 8u:
        *((_DWORD *)this + 28) |= 0x800u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v32 = 0;
          v33 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_127;
            }
            v34 = v20++;
            v35 = *(_BYTE *)(v21 + v34);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v35 & 0x7F) << v32;
            if ((v35 & 0x80) == 0)
              break;
            v32 += 7;
            v14 = v33++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_126:
              v2 = v34 + 1;
              goto LABEL_127;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
          goto LABEL_126;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_127;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_127:
        *((_DWORD *)this + 16) = v24;
        break;
      case 9u:
        *((_DWORD *)this + 28) |= 0x100000u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v36 = 0;
          v37 = 0;
          v30 = 0;
          if (v2 <= v26)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_132;
            }
            v38 = v26++;
            v39 = *(_BYTE *)(v27 + v38);
            *((_QWORD *)a2 + 1) = v26;
            v30 |= (unint64_t)(v39 & 0x7F) << v36;
            if ((v39 & 0x80) == 0)
              break;
            v36 += 7;
            v14 = v37++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_131:
              v2 = v38 + 1;
              goto LABEL_132;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v30) = 0;
          goto LABEL_131;
        }
        v28 = 0;
        v29 = 0;
        v30 = 0;
        do
        {
          v2 = v26 + 1;
          *((_QWORD *)a2 + 1) = v26 + 1;
          v31 = *(_BYTE *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0)
            goto LABEL_132;
          v28 += 7;
          v26 = v2;
          v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_132:
        *((_DWORD *)this + 25) = v30;
        break;
      case 0xAu:
        *((_DWORD *)this + 28) |= 0x200000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_100;
        *((_DWORD *)this + 26) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_116;
      case 0xBu:
        *((_DWORD *)this + 28) |= 0x40000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_100;
        *((_DWORD *)this + 23) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_116;
      case 0xCu:
        *((_DWORD *)this + 28) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_100;
        *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_116;
      case 0xDu:
        *((_DWORD *)this + 28) |= 0x10000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_100;
        *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_116;
      case 0xEu:
        *((_DWORD *)this + 28) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_100;
        *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_116;
      case 0xFu:
        *((_DWORD *)this + 28) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_100;
        *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_116;
      case 0x10u:
        *((_DWORD *)this + 28) |= 0x1000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_100;
        *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_116;
      case 0x11u:
        *((_DWORD *)this + 28) |= 0x80000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_100;
        *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_116;
      case 0x12u:
        *((_DWORD *)this + 28) |= 0x20000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_100;
        *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_116;
      case 0x13u:
        *((_DWORD *)this + 28) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_100;
        *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_116;
      case 0x14u:
        *((_DWORD *)this + 28) |= 0x4000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_100;
        *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_116;
      case 0x15u:
        *((_DWORD *)this + 28) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_100;
        *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_116;
      case 0x16u:
        *((_DWORD *)this + 28) |= 0x8000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_100;
        *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_116;
      case 0x17u:
        *((_DWORD *)this + 28) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_116:
          v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_117:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_100:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_118:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::FitnessMachineSample::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 112);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24));
    v4 = *(_DWORD *)(v3 + 112);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_27;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0)
      goto LABEL_5;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x400000) == 0)
      goto LABEL_6;
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(float *)(v3 + 60));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x400000) == 0)
  {
LABEL_6:
    if ((v4 & 0x2000) == 0)
      goto LABEL_7;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(float *)(v3 + 108));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x2000) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(float *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x800) == 0)
      goto LABEL_9;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x800) == 0)
  {
LABEL_9:
    if ((v4 & 0x100000) == 0)
      goto LABEL_10;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x100000) == 0)
  {
LABEL_10:
    if ((v4 & 0x200000) == 0)
      goto LABEL_11;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x200000) == 0)
  {
LABEL_11:
    if ((v4 & 0x40000) == 0)
      goto LABEL_12;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 104));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x40000) == 0)
  {
LABEL_12:
    if ((v4 & 0x80) == 0)
      goto LABEL_13;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 92));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x80) == 0)
  {
LABEL_13:
    if ((v4 & 0x10000) == 0)
      goto LABEL_14;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x10000) == 0)
  {
LABEL_14:
    if ((v4 & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 84));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x20) == 0)
  {
LABEL_15:
    if ((v4 & 0x200) == 0)
      goto LABEL_16;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x200) == 0)
  {
LABEL_16:
    if ((v4 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x1000) == 0)
  {
LABEL_17:
    if ((v4 & 0x80000) == 0)
      goto LABEL_18;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(float *)(v3 + 68));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x80000) == 0)
  {
LABEL_18:
    if ((v4 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(float *)(v3 + 96));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x20000) == 0)
  {
LABEL_19:
    if ((v4 & 0x40) == 0)
      goto LABEL_20;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x40) == 0)
  {
LABEL_20:
    if ((v4 & 0x4000) == 0)
      goto LABEL_21;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x4000) == 0)
  {
LABEL_21:
    if ((v4 & 8) == 0)
      goto LABEL_22;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(float *)(v3 + 76));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 8) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000) == 0)
      goto LABEL_23;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x8000) == 0)
  {
LABEL_23:
    if ((v4 & 0x10) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 36));
  }
LABEL_46:
  this = PB::Writer::write(a2, *(float *)(v3 + 80));
  if ((*(_DWORD *)(v3 + 112) & 0x10) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 36));
  return this;
}

BOOL CMMsl::FitnessMachineSample::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 112);
  v3 = *(_DWORD *)(a2 + 112);
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(_DWORD *)(a1 + 100) != *(_DWORD *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  v4 = (*(_DWORD *)(a2 + 112) & 0x10) == 0;
  if ((v2 & 0x10) != 0)
    return (v3 & 0x10) != 0 && *(float *)(a1 + 36) == *(float *)(a2 + 36);
  return v4;
}

uint64_t CMMsl::FitnessMachineSample::hash_value(CMMsl::FitnessMachineSample *this)
{
  int v1;
  double v2;
  double v3;
  double v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  float v41;
  uint64_t v42;

  v1 = *((_DWORD *)this + 28);
  if ((v1 & 4) == 0)
  {
    v2 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_3;
LABEL_68:
    v3 = 0.0;
    if ((v1 & 1) != 0)
      goto LABEL_6;
LABEL_69:
    v4 = 0.0;
    if ((v1 & 0x400) != 0)
      goto LABEL_9;
LABEL_70:
    v6 = 0;
    if ((v1 & 0x400000) != 0)
      goto LABEL_12;
LABEL_71:
    v8 = 0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_15;
LABEL_72:
    v10 = 0;
    if ((v1 & 0x100) != 0)
      goto LABEL_18;
LABEL_73:
    v12 = 0;
    if ((v1 & 0x800) != 0)
      goto LABEL_21;
    goto LABEL_74;
  }
  v2 = *((double *)this + 3);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_68;
LABEL_3:
  v3 = *((double *)this + 2);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_69;
LABEL_6:
  v4 = *((double *)this + 1);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 0x400) == 0)
    goto LABEL_70;
LABEL_9:
  v5 = *((float *)this + 15);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((v1 & 0x400000) == 0)
    goto LABEL_71;
LABEL_12:
  v7 = *((float *)this + 27);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_72;
LABEL_15:
  v9 = *((float *)this + 18);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((v1 & 0x100) == 0)
    goto LABEL_73;
LABEL_18:
  v11 = *((float *)this + 13);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((v1 & 0x800) != 0)
  {
LABEL_21:
    v13 = *((int *)this + 16);
    if ((v1 & 0x100000) != 0)
      goto LABEL_22;
    goto LABEL_75;
  }
LABEL_74:
  v13 = 0;
  if ((v1 & 0x100000) != 0)
  {
LABEL_22:
    v14 = *((int *)this + 25);
    if ((v1 & 0x200000) != 0)
      goto LABEL_23;
LABEL_76:
    v16 = 0;
    if ((v1 & 0x40000) != 0)
      goto LABEL_26;
LABEL_77:
    v18 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_29;
LABEL_78:
    v20 = 0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_32;
LABEL_79:
    v22 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_35;
LABEL_80:
    v24 = 0;
    if ((v1 & 0x200) != 0)
      goto LABEL_38;
LABEL_81:
    v26 = 0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_41;
LABEL_82:
    v28 = 0;
    if ((v1 & 0x80000) != 0)
      goto LABEL_44;
LABEL_83:
    v30 = 0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_47;
LABEL_84:
    v32 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_50;
LABEL_85:
    v34 = 0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_53;
LABEL_86:
    v36 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_56;
LABEL_87:
    v38 = 0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_59;
    goto LABEL_88;
  }
LABEL_75:
  v14 = 0;
  if ((v1 & 0x200000) == 0)
    goto LABEL_76;
LABEL_23:
  v15 = *((float *)this + 26);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  if ((v1 & 0x40000) == 0)
    goto LABEL_77;
LABEL_26:
  v17 = *((float *)this + 23);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_78;
LABEL_29:
  v19 = *((float *)this + 12);
  v20 = LODWORD(v19);
  if (v19 == 0.0)
    v20 = 0;
  if ((v1 & 0x10000) == 0)
    goto LABEL_79;
LABEL_32:
  v21 = *((float *)this + 21);
  v22 = LODWORD(v21);
  if (v21 == 0.0)
    v22 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_80;
LABEL_35:
  v23 = *((float *)this + 10);
  v24 = LODWORD(v23);
  if (v23 == 0.0)
    v24 = 0;
  if ((v1 & 0x200) == 0)
    goto LABEL_81;
LABEL_38:
  v25 = *((float *)this + 14);
  v26 = LODWORD(v25);
  if (v25 == 0.0)
    v26 = 0;
  if ((v1 & 0x1000) == 0)
    goto LABEL_82;
LABEL_41:
  v27 = *((float *)this + 17);
  v28 = LODWORD(v27);
  if (v27 == 0.0)
    v28 = 0;
  if ((v1 & 0x80000) == 0)
    goto LABEL_83;
LABEL_44:
  v29 = *((float *)this + 24);
  v30 = LODWORD(v29);
  if (v29 == 0.0)
    v30 = 0;
  if ((v1 & 0x20000) == 0)
    goto LABEL_84;
LABEL_47:
  v31 = *((float *)this + 22);
  v32 = LODWORD(v31);
  if (v31 == 0.0)
    v32 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_85;
LABEL_50:
  v33 = *((float *)this + 11);
  v34 = LODWORD(v33);
  if (v33 == 0.0)
    v34 = 0;
  if ((v1 & 0x4000) == 0)
    goto LABEL_86;
LABEL_53:
  v35 = *((float *)this + 19);
  v36 = LODWORD(v35);
  if (v35 == 0.0)
    v36 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_87;
LABEL_56:
  v37 = *((float *)this + 8);
  v38 = LODWORD(v37);
  if (v37 == 0.0)
    v38 = 0;
  if ((v1 & 0x8000) != 0)
  {
LABEL_59:
    v39 = *((float *)this + 20);
    v40 = LODWORD(v39);
    if (v39 == 0.0)
      v40 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_62;
LABEL_89:
    v42 = 0;
    return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ v6 ^ v8 ^ v10 ^ v12 ^ v13 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v32 ^ v34 ^ v36 ^ v38 ^ v40 ^ v42;
  }
LABEL_88:
  v40 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_89;
LABEL_62:
  v41 = *((float *)this + 9);
  v42 = LODWORD(v41);
  if (v41 == 0.0)
    v42 = 0;
  return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ v6 ^ v8 ^ v10 ^ v12 ^ v13 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v32 ^ v34 ^ v36 ^ v38 ^ v40 ^ v42;
}

uint64_t CMMsl::FocusModes::FocusModes(uint64_t this)
{
  *(_DWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = &off_25135D9B8;
  return this;
}

{
  *(_DWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = &off_25135D9B8;
  return this;
}

void CMMsl::FocusModes::~FocusModes(CMMsl::FocusModes *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_25135D9B8;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    sub_242910C5C(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    sub_242910C5C(v3);
  PB::Base::~Base(this);
}

{
  CMMsl::FocusModes::~FocusModes(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::FocusModes *CMMsl::FocusModes::FocusModes(CMMsl::FocusModes *this, const CMMsl::FocusModes *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  __int128 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  int v18;
  int v19;
  int v20;
  char v21;

  *(_QWORD *)this = &off_25135D9B8;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_DWORD *)this + 12) = 0;
  *((_QWORD *)this + 2) = 0;
  if (*((_QWORD *)a2 + 1))
  {
    v5 = operator new();
    v6 = v5;
    v7 = (__int128 *)*((_QWORD *)a2 + 1);
    if (*((char *)v7 + 23) < 0)
    {
      sub_242910CE8((_BYTE *)v5, *(void **)v7, *((_QWORD *)v7 + 1));
    }
    else
    {
      v8 = *v7;
      *(_QWORD *)(v5 + 16) = *((_QWORD *)v7 + 2);
      *(_OWORD *)v5 = v8;
    }
    v9 = *v4;
    *v4 = v6;
    if (v9)
      sub_242910C5C(v9);
  }
  if (*((_QWORD *)a2 + 2))
  {
    v10 = operator new();
    v11 = v10;
    v12 = (__int128 *)*((_QWORD *)a2 + 2);
    if (*((char *)v12 + 23) < 0)
    {
      sub_242910CE8((_BYTE *)v10, *(void **)v12, *((_QWORD *)v12 + 1));
    }
    else
    {
      v13 = *v12;
      *(_QWORD *)(v10 + 16) = *((_QWORD *)v12 + 2);
      *(_OWORD *)v10 = v13;
    }
    v14 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v11;
    if (v14)
      sub_242910C5C(v14);
  }
  v15 = *((_BYTE *)a2 + 48);
  if ((v15 & 4) != 0)
  {
    v18 = *((_DWORD *)a2 + 9);
    *((_BYTE *)this + 48) |= 4u;
    *((_DWORD *)this + 9) = v18;
    v15 = *((_BYTE *)a2 + 48);
    if ((v15 & 2) == 0)
    {
LABEL_15:
      if ((v15 & 8) == 0)
        goto LABEL_16;
      goto LABEL_22;
    }
  }
  else if ((*((_BYTE *)a2 + 48) & 2) == 0)
  {
    goto LABEL_15;
  }
  v19 = *((_DWORD *)a2 + 8);
  *((_BYTE *)this + 48) |= 2u;
  *((_DWORD *)this + 8) = v19;
  v15 = *((_BYTE *)a2 + 48);
  if ((v15 & 8) == 0)
  {
LABEL_16:
    if ((v15 & 0x10) == 0)
      goto LABEL_17;
LABEL_23:
    v21 = *((_BYTE *)a2 + 44);
    *((_BYTE *)this + 48) |= 0x10u;
    *((_BYTE *)this + 44) = v21;
    if ((*((_BYTE *)a2 + 48) & 1) == 0)
      return this;
    goto LABEL_18;
  }
LABEL_22:
  v20 = *((_DWORD *)a2 + 10);
  *((_BYTE *)this + 48) |= 8u;
  *((_DWORD *)this + 10) = v20;
  v15 = *((_BYTE *)a2 + 48);
  if ((v15 & 0x10) != 0)
    goto LABEL_23;
LABEL_17:
  if ((v15 & 1) != 0)
  {
LABEL_18:
    v16 = *((_QWORD *)a2 + 3);
    *((_BYTE *)this + 48) |= 1u;
    *((_QWORD *)this + 3) = v16;
  }
  return this;
}

uint64_t CMMsl::FocusModes::operator=(uint64_t a1, const CMMsl::FocusModes *a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  _BYTE v9[8];
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char v14;
  int v15;

  if ((const CMMsl::FocusModes *)a1 != a2)
  {
    CMMsl::FocusModes::FocusModes((CMMsl::FocusModes *)v9, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v3;
    *(_QWORD *)&v3 = *(_QWORD *)(a1 + 24);
    v4 = *(_QWORD *)(a1 + 32);
    v5 = v12;
    *(_QWORD *)(a1 + 24) = v11;
    *(_QWORD *)(a1 + 32) = v5;
    v6 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v15;
    v15 = v6;
    v7 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v13;
    v13 = v7;
    LOBYTE(v7) = *(_BYTE *)(a1 + 44);
    *(_BYTE *)(a1 + 44) = v14;
    v14 = v7;
    v11 = v3;
    v12 = v4;
    CMMsl::FocusModes::~FocusModes((CMMsl::FocusModes *)v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::FocusModes *a2, CMMsl::FocusModes *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  LODWORD(v5) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v5;
  LODWORD(v5) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v5;
  LODWORD(v5) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v5;
  LOBYTE(v5) = *((_BYTE *)this + 44);
  *((_BYTE *)this + 44) = *((_BYTE *)a2 + 44);
  *((_BYTE *)a2 + 44) = v5;
  result = *((double *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((double *)a2 + 3) = result;
  return result;
}

uint64_t CMMsl::FocusModes::FocusModes(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_25135D9B8;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    sub_242910C5C(v5);
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  if (v7)
    sub_242910C5C(v7);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t CMMsl::FocusModes::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  _BYTE v9[8];
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char v14;
  int v15;

  if (a1 != a2)
  {
    CMMsl::FocusModes::FocusModes((uint64_t)v9, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v3;
    *(_QWORD *)&v3 = *(_QWORD *)(a1 + 24);
    v4 = *(_QWORD *)(a1 + 32);
    v5 = v12;
    *(_QWORD *)(a1 + 24) = v11;
    *(_QWORD *)(a1 + 32) = v5;
    v6 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v15;
    v15 = v6;
    v7 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v13;
    v13 = v7;
    LOBYTE(v7) = *(_BYTE *)(a1 + 44);
    *(_BYTE *)(a1 + 44) = v14;
    v14 = v7;
    v11 = v3;
    v12 = v4;
    CMMsl::FocusModes::~FocusModes((CMMsl::FocusModes *)v9);
  }
  return a1;
}

uint64_t CMMsl::FocusModes::formatText(CMMsl::FocusModes *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;
  char v6;

  PB::TextFormatter::beginObject(a2, a3);
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format();
  v5 = *((_BYTE *)this + 48);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "modeSemanticType");
    v5 = *((_BYTE *)this + 48);
    if ((v5 & 4) == 0)
    {
LABEL_5:
      if ((v5 & 8) == 0)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  else if ((*((_BYTE *)this + 48) & 4) == 0)
  {
    goto LABEL_5;
  }
  PB::TextFormatter::format(a2, "modeUpdateReason");
  if ((*((_BYTE *)this + 48) & 8) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "modeUpdateSource");
LABEL_7:
  if (*((_QWORD *)this + 2))
    PB::TextFormatter::format();
  v6 = *((_BYTE *)this + 48);
  if ((v6 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "starting");
    v6 = *((_BYTE *)this + 48);
  }
  if ((v6 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 3));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FocusModes::readFrom(CMMsl::FocusModes *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  unint64_t v48;
  unint64_t v49;
  int v50;
  BOOL v51;
  unint64_t v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;
  char v61;
  unsigned int v62;
  unint64_t v63;
  char v64;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_25;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      goto LABEL_20;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_25:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        v21 = (_QWORD *)operator new();
        v21[1] = 0;
        v21[2] = 0;
        *v21 = 0;
        v22 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v21;
        if (v22)
          goto LABEL_30;
        goto LABEL_31;
      case 2u:
        v23 = (_QWORD *)operator new();
        v23[1] = 0;
        v23[2] = 0;
        *v23 = 0;
        v22 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v23;
        if (v22)
LABEL_30:
          sub_242910C5C(v22);
LABEL_31:
        PB::Reader::read();
        goto LABEL_20;
      case 3u:
        *((_BYTE *)this + 48) |= 4u;
        v24 = *((_QWORD *)a2 + 1);
        v25 = *((_QWORD *)a2 + 2);
        v26 = *(_QWORD *)a2;
        if (v24 <= 0xFFFFFFFFFFFFFFF5 && v24 + 10 <= v25)
        {
          v27 = 0;
          v28 = 0;
          v29 = 0;
          do
          {
            v30 = v24 + 1;
            *((_QWORD *)a2 + 1) = v24 + 1;
            v31 = *(_BYTE *)(v26 + v24);
            v29 |= (unint64_t)(v31 & 0x7F) << v27;
            if ((v31 & 0x80) == 0)
              goto LABEL_85;
            v27 += 7;
            v24 = v30;
            v14 = v28++ > 8;
          }
          while (!v14);
LABEL_64:
          LODWORD(v29) = 0;
          goto LABEL_85;
        }
        v53 = 0;
        v54 = 0;
        v29 = 0;
        if (v25 <= v24)
          v25 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v25 == v24)
          {
            LODWORD(v29) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v55 = v24 + 1;
            v56 = *(_BYTE *)(v26 + v24);
            *((_QWORD *)a2 + 1) = v55;
            v29 |= (unint64_t)(v56 & 0x7F) << v53;
            if (v56 < 0)
            {
              v53 += 7;
              v24 = v55;
              v14 = v54++ > 8;
              if (v14)
                goto LABEL_64;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v29) = 0;
          }
          break;
        }
LABEL_85:
        *((_DWORD *)this + 9) = v29;
        goto LABEL_20;
      case 4u:
        *((_BYTE *)this + 48) |= 2u;
        v32 = *((_QWORD *)a2 + 1);
        v33 = *((_QWORD *)a2 + 2);
        v34 = *(_QWORD *)a2;
        if (v32 <= 0xFFFFFFFFFFFFFFF5 && v32 + 10 <= v33)
        {
          v35 = 0;
          v36 = 0;
          v37 = 0;
          do
          {
            v38 = v32 + 1;
            *((_QWORD *)a2 + 1) = v32 + 1;
            v39 = *(_BYTE *)(v34 + v32);
            v37 |= (unint64_t)(v39 & 0x7F) << v35;
            if ((v39 & 0x80) == 0)
              goto LABEL_89;
            v35 += 7;
            v32 = v38;
            v14 = v36++ > 8;
          }
          while (!v14);
LABEL_71:
          LODWORD(v37) = 0;
          goto LABEL_89;
        }
        v57 = 0;
        v58 = 0;
        v37 = 0;
        if (v33 <= v32)
          v33 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v33 == v32)
          {
            LODWORD(v37) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v59 = v32 + 1;
            v60 = *(_BYTE *)(v34 + v32);
            *((_QWORD *)a2 + 1) = v59;
            v37 |= (unint64_t)(v60 & 0x7F) << v57;
            if (v60 < 0)
            {
              v57 += 7;
              v32 = v59;
              v14 = v58++ > 8;
              if (v14)
                goto LABEL_71;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v37) = 0;
          }
          break;
        }
LABEL_89:
        *((_DWORD *)this + 8) = v37;
        goto LABEL_20;
      case 5u:
        *((_BYTE *)this + 48) |= 8u;
        v40 = *((_QWORD *)a2 + 1);
        v41 = *((_QWORD *)a2 + 2);
        v42 = *(_QWORD *)a2;
        if (v40 <= 0xFFFFFFFFFFFFFFF5 && v40 + 10 <= v41)
        {
          v43 = 0;
          v44 = 0;
          v45 = 0;
          do
          {
            v46 = v40 + 1;
            *((_QWORD *)a2 + 1) = v40 + 1;
            v47 = *(_BYTE *)(v42 + v40);
            v45 |= (unint64_t)(v47 & 0x7F) << v43;
            if ((v47 & 0x80) == 0)
              goto LABEL_93;
            v43 += 7;
            v40 = v46;
            v14 = v44++ > 8;
          }
          while (!v14);
LABEL_78:
          LODWORD(v45) = 0;
          goto LABEL_93;
        }
        v61 = 0;
        v62 = 0;
        v45 = 0;
        if (v41 <= v40)
          v41 = *((_QWORD *)a2 + 1);
        break;
      case 6u:
        *((_BYTE *)this + 48) |= 0x10u;
        v48 = *((_QWORD *)a2 + 1);
        if (v48 >= *((_QWORD *)a2 + 2))
        {
          v51 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v49 = v48 + 1;
          v50 = *(unsigned __int8 *)(*(_QWORD *)a2 + v48);
          *((_QWORD *)a2 + 1) = v49;
          v51 = v50 != 0;
        }
        *((_BYTE *)this + 44) = v51;
        goto LABEL_20;
      case 7u:
        *((_BYTE *)this + 48) |= 1u;
        v52 = *((_QWORD *)a2 + 1);
        if (v52 <= 0xFFFFFFFFFFFFFFF7 && v52 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v52);
          *((_QWORD *)a2 + 1) += 8;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
        goto LABEL_20;
      default:
        goto LABEL_19;
    }
    while (1)
    {
      if (v41 == v40)
      {
        LODWORD(v45) = 0;
        *((_BYTE *)a2 + 24) = 1;
        goto LABEL_93;
      }
      v63 = v40 + 1;
      v64 = *(_BYTE *)(v42 + v40);
      *((_QWORD *)a2 + 1) = v63;
      v45 |= (unint64_t)(v64 & 0x7F) << v61;
      if ((v64 & 0x80) == 0)
        break;
      v61 += 7;
      v40 = v63;
      v14 = v62++ > 8;
      if (v14)
        goto LABEL_78;
    }
    if (*((_BYTE *)a2 + 24))
      LODWORD(v45) = 0;
LABEL_93:
    *((_DWORD *)this + 10) = v45;
LABEL_20:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::FocusModes::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  if (*(_QWORD *)(this + 8))
    this = PB::Writer::write();
  if (*(_QWORD *)(v3 + 16))
    this = PB::Writer::write();
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 48);
    if ((v4 & 2) == 0)
    {
LABEL_7:
      if ((v4 & 8) == 0)
        goto LABEL_8;
      goto LABEL_13;
    }
  }
  else if ((*(_BYTE *)(v3 + 48) & 2) == 0)
  {
    goto LABEL_7;
  }
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_9:
    if ((v4 & 1) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 24));
  }
LABEL_14:
  this = PB::Writer::write(a2);
  if ((*(_BYTE *)(v3 + 48) & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 24));
  return this;
}

BOOL CMMsl::FocusModes::operator==(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 **v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 **v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  _BOOL8 result;

  v4 = *(unsigned __int8 **)(a1 + 8);
  v5 = *(unsigned __int8 ***)(a2 + 8);
  if (v4)
  {
    if (!v5)
      return 0;
    v6 = v4[23];
    if ((v6 & 0x80u) == 0)
      v7 = (unsigned __int8 *)v4[23];
    else
      v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
    v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    v9 = (char)v8;
    if ((char)v8 < 0)
      v8 = v5[1];
    if (v7 != v8)
      return 0;
    if (v9 >= 0)
      v10 = *(unsigned __int8 **)(a2 + 8);
    else
      v10 = *v5;
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((_QWORD *)v4 + 1)))
        return 0;
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6)
          goto LABEL_18;
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_18:
  v11 = *(unsigned __int8 **)(a1 + 16);
  v12 = *(unsigned __int8 ***)(a2 + 16);
  if (v11)
  {
    if (!v12)
      return 0;
    v13 = v11[23];
    if ((v13 & 0x80u) == 0)
      v14 = (unsigned __int8 *)v11[23];
    else
      v14 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
    v15 = (unsigned __int8 *)*((unsigned __int8 *)v12 + 23);
    v16 = (char)v15;
    if ((char)v15 < 0)
      v15 = v12[1];
    if (v14 != v15)
      return 0;
    if (v16 >= 0)
      v17 = *(unsigned __int8 **)(a2 + 16);
    else
      v17 = *v12;
    if ((v13 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v11, v17, *((_QWORD *)v11 + 1)))
        return 0;
    }
    else if (v11[23])
    {
      while (*v11 == *v17)
      {
        ++v11;
        ++v17;
        if (!--v13)
          goto LABEL_35;
      }
      return 0;
    }
  }
  else if (v12)
  {
    return 0;
  }
LABEL_35:
  if ((*(_BYTE *)(a1 + 48) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 48) & 4) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 48) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 48) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 48) & 2) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 48) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 48) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 48) & 8) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 48) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 48) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 48) & 0x10) == 0 || *(unsigned __int8 *)(a1 + 44) != *(unsigned __int8 *)(a2 + 44))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 48) & 0x10) != 0)
  {
    return 0;
  }
  result = (*(_BYTE *)(a2 + 48) & 1) == 0;
  if ((*(_BYTE *)(a1 + 48) & 1) == 0)
    return result;
  return (*(_BYTE *)(a2 + 48) & 1) != 0 && *(double *)(a1 + 24) == *(double *)(a2 + 24);
}

unint64_t CMMsl::FocusModes::hash_value(CMMsl::FocusModes *this)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    v3 = sub_242910D74(v2);
  else
    v3 = 0;
  v4 = *((_QWORD *)this + 2);
  if (v4)
    v4 = sub_242910D74(v4);
  if ((*((_BYTE *)this + 48) & 4) != 0)
  {
    v5 = *((unsigned int *)this + 9);
    if ((*((_BYTE *)this + 48) & 2) != 0)
    {
LABEL_8:
      v6 = *((int *)this + 8);
      if ((*((_BYTE *)this + 48) & 8) != 0)
        goto LABEL_9;
      goto LABEL_16;
    }
  }
  else
  {
    v5 = 0;
    if ((*((_BYTE *)this + 48) & 2) != 0)
      goto LABEL_8;
  }
  v6 = 0;
  if ((*((_BYTE *)this + 48) & 8) != 0)
  {
LABEL_9:
    v7 = *((int *)this + 10);
    if ((*((_BYTE *)this + 48) & 0x10) != 0)
      goto LABEL_10;
    goto LABEL_17;
  }
LABEL_16:
  v7 = 0;
  if ((*((_BYTE *)this + 48) & 0x10) != 0)
  {
LABEL_10:
    v8 = *((unsigned __int8 *)this + 44);
    if ((*((_BYTE *)this + 48) & 1) != 0)
      goto LABEL_11;
LABEL_18:
    v9 = 0.0;
    return v4 ^ v3 ^ v5 ^ v6 ^ v7 ^ v8 ^ *(_QWORD *)&v9;
  }
LABEL_17:
  v8 = 0;
  if ((*((_BYTE *)this + 48) & 1) == 0)
    goto LABEL_18;
LABEL_11:
  v9 = *((double *)this + 3);
  if (v9 == 0.0)
    v9 = 0.0;
  return v4 ^ v3 ^ v5 ^ v6 ^ v7 ^ v8 ^ *(_QWORD *)&v9;
}

double CMMsl::FrequencyResponse::FrequencyResponse(CMMsl::FrequencyResponse *this)
{
  double result;

  *(_QWORD *)this = &off_25135D9F0;
  *((_DWORD *)this + 16) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_25135D9F0;
  *((_DWORD *)this + 16) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

void CMMsl::FrequencyResponse::~FrequencyResponse(CMMsl::FrequencyResponse *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_25135D9F0;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::FrequencyResponse::~FrequencyResponse(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::FrequencyResponse *CMMsl::FrequencyResponse::FrequencyResponse(CMMsl::FrequencyResponse *this, const CMMsl::FrequencyResponse *a2)
{
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_25135D9F0;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (_QWORD *)((char *)this + 8);
  *((_DWORD *)this + 16) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if ((*((_BYTE *)a2 + 64) & 1) != 0)
  {
    v5 = *((_QWORD *)a2 + 7);
    *((_BYTE *)this + 64) = 1;
    *((_QWORD *)this + 7) = v5;
  }
  if (this != a2)
  {
    sub_242911380(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
    sub_242911380((_QWORD *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
  }
  return this;
}

uint64_t CMMsl::FrequencyResponse::operator=(uint64_t a1, const CMMsl::FrequencyResponse *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _BYTE v9[8];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;

  if ((const CMMsl::FrequencyResponse *)a1 != a2)
  {
    CMMsl::FrequencyResponse::FrequencyResponse((CMMsl::FrequencyResponse *)v9, a2);
    v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v14;
    v14 = v3;
    v4 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v13;
    v13 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v10 = v5;
    v11 = v6;
    v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v12 = v7;
    CMMsl::FrequencyResponse::~FrequencyResponse((CMMsl::FrequencyResponse *)v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::FrequencyResponse *a2, CMMsl::FrequencyResponse *a3)
{
  int v3;
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  result = *((double *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((double *)a2 + 7) = result;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  v8 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v8;
  v9 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v9;
  v10 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v10;
  return result;
}

uint64_t CMMsl::FrequencyResponse::FrequencyResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = &off_25135D9F0;
  v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  sub_242911330(v4, (__n128 *)(a2 + 32));
  return a1;
}

uint64_t CMMsl::FrequencyResponse::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _BYTE v9[8];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;

  if (a1 != a2)
  {
    CMMsl::FrequencyResponse::FrequencyResponse((uint64_t)v9, a2);
    v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v14;
    v14 = v3;
    v4 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v13;
    v13 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v10 = v5;
    v11 = v6;
    v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v12 = v7;
    CMMsl::FrequencyResponse::~FrequencyResponse((CMMsl::FrequencyResponse *)v9);
  }
  return a1;
}

uint64_t CMMsl::FrequencyResponse::formatText(CMMsl::FrequencyResponse *this, PB::TextFormatter *a2, const char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (float *)*((_QWORD *)this + 1);
  v6 = (float *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "freq", v7);
  }
  v8 = (float *)*((_QWORD *)this + 4);
  v9 = (float *)*((_QWORD *)this + 5);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(a2, "mag", v10);
  }
  if ((*((_BYTE *)this + 64) & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 7));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::FrequencyResponse::readFrom(CMMsl::FrequencyResponse *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  _DWORD *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  _DWORD *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  _DWORD *v53;
  unint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  _DWORD *v68;
  int v69;
  _DWORD *v70;
  int v71;
  unint64_t v72;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          v14 = v16++ > 8;
          if (v14)
            goto LABEL_27;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      v19 = v11 & 7;
      if (v19 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
        break;
      if ((_DWORD)v20 == 2)
      {
        if (v19 == 2)
        {
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v37 = *((_QWORD *)a2 + 1);
          v38 = *((_QWORD *)a2 + 2);
          while (v37 < v38 && !*((_BYTE *)a2 + 24))
          {
            v40 = (char *)*((_QWORD *)this + 2);
            v39 = *((_QWORD *)this + 3);
            if ((unint64_t)v40 >= v39)
            {
              v42 = (char *)*((_QWORD *)this + 1);
              v43 = (v40 - v42) >> 2;
              v44 = v43 + 1;
              if ((unint64_t)(v43 + 1) >> 62)
                goto LABEL_125;
              v45 = v39 - (_QWORD)v42;
              if (v45 >> 1 > v44)
                v44 = v45 >> 1;
              if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL)
                v46 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v46 = v44;
              if (v46)
              {
                v46 = (unint64_t)sub_2429114B8(v46);
                v42 = (char *)*((_QWORD *)this + 1);
                v40 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v47 = 0;
              }
              v48 = (_DWORD *)(v46 + 4 * v43);
              *v48 = 0;
              v41 = v48 + 1;
              while (v40 != v42)
              {
                v49 = *((_DWORD *)v40 - 1);
                v40 -= 4;
                *--v48 = v49;
              }
              *((_QWORD *)this + 1) = v48;
              *((_QWORD *)this + 2) = v41;
              *((_QWORD *)this + 3) = v46 + 4 * v47;
              if (v42)
                operator delete(v42);
            }
            else
            {
              *(_DWORD *)v40 = 0;
              v41 = v40 + 4;
            }
            *((_QWORD *)this + 2) = v41;
            v50 = *((_QWORD *)a2 + 1);
            if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_81;
            *(v41 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v50);
            v38 = *((_QWORD *)a2 + 2);
            v37 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v37;
          }
          goto LABEL_82;
        }
        v55 = (char *)*((_QWORD *)this + 2);
        v54 = *((_QWORD *)this + 3);
        if ((unint64_t)v55 >= v54)
        {
          v62 = (char *)*((_QWORD *)this + 1);
          v63 = (v55 - v62) >> 2;
          v64 = v63 + 1;
          if ((unint64_t)(v63 + 1) >> 62)
LABEL_125:
            sub_242729A44();
          v65 = v54 - (_QWORD)v62;
          if (v65 >> 1 > v64)
            v64 = v65 >> 1;
          if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL)
            v66 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v66 = v64;
          if (v66)
          {
            v66 = (unint64_t)sub_2429114B8(v66);
            v62 = (char *)*((_QWORD *)this + 1);
            v55 = (char *)*((_QWORD *)this + 2);
          }
          else
          {
            v67 = 0;
          }
          v70 = (_DWORD *)(v66 + 4 * v63);
          *v70 = 0;
          v53 = v70 + 1;
          while (v55 != v62)
          {
            v71 = *((_DWORD *)v55 - 1);
            v55 -= 4;
            *--v70 = v71;
          }
          *((_QWORD *)this + 1) = v70;
          *((_QWORD *)this + 2) = v53;
          *((_QWORD *)this + 3) = v66 + 4 * v67;
          if (v62)
            operator delete(v62);
        }
        else
        {
          *(_DWORD *)v55 = 0;
          v53 = v55 + 4;
        }
        *((_QWORD *)this + 2) = v53;
LABEL_113:
        v72 = *((_QWORD *)a2 + 1);
        if (v72 > 0xFFFFFFFFFFFFFFFBLL || v72 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_115;
        *(v53 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v72);
        v22 = *((_QWORD *)a2 + 1) + 4;
        goto LABEL_117;
      }
      if ((_DWORD)v20 != 1)
      {
LABEL_27:
        if ((PB::Reader::skip(a2) & 1) == 0)
          return 0;
        goto LABEL_118;
      }
      *((_BYTE *)this + 64) |= 1u;
      v21 = *((_QWORD *)a2 + 1);
      if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((_QWORD *)a2 + 2))
      {
LABEL_115:
        *((_BYTE *)a2 + 24) = 1;
        goto LABEL_118;
      }
      *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v21);
      v22 = *((_QWORD *)a2 + 1) + 8;
LABEL_117:
      *((_QWORD *)a2 + 1) = v22;
LABEL_118:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    if (v19 == 2)
    {
      if ((PB::Reader::placeMark() & 1) != 0)
        return 0;
      v23 = *((_QWORD *)a2 + 1);
      v24 = *((_QWORD *)a2 + 2);
      while (v23 < v24 && !*((_BYTE *)a2 + 24))
      {
        v26 = (char *)*((_QWORD *)this + 5);
        v25 = *((_QWORD *)this + 6);
        if ((unint64_t)v26 >= v25)
        {
          v28 = (char *)*((_QWORD *)this + 4);
          v29 = (v26 - v28) >> 2;
          v30 = v29 + 1;
          if ((unint64_t)(v29 + 1) >> 62)
            goto LABEL_125;
          v31 = v25 - (_QWORD)v28;
          if (v31 >> 1 > v30)
            v30 = v31 >> 1;
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
            v32 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v32 = v30;
          if (v32)
          {
            v32 = (unint64_t)sub_2429114B8(v32);
            v28 = (char *)*((_QWORD *)this + 4);
            v26 = (char *)*((_QWORD *)this + 5);
          }
          else
          {
            v33 = 0;
          }
          v34 = (_DWORD *)(v32 + 4 * v29);
          *v34 = 0;
          v27 = v34 + 1;
          while (v26 != v28)
          {
            v35 = *((_DWORD *)v26 - 1);
            v26 -= 4;
            *--v34 = v35;
          }
          *((_QWORD *)this + 4) = v34;
          *((_QWORD *)this + 5) = v27;
          *((_QWORD *)this + 6) = v32 + 4 * v33;
          if (v28)
            operator delete(v28);
        }
        else
        {
          *(_DWORD *)v26 = 0;
          v27 = v26 + 4;
        }
        *((_QWORD *)this + 5) = v27;
        v36 = *((_QWORD *)a2 + 1);
        if (v36 > 0xFFFFFFFFFFFFFFFBLL || v36 + 4 > *((_QWORD *)a2 + 2))
        {
LABEL_81:
          *((_BYTE *)a2 + 24) = 1;
          break;
        }
        *(v27 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v36);
        v24 = *((_QWORD *)a2 + 2);
        v23 = *((_QWORD *)a2 + 1) + 4;
        *((_QWORD *)a2 + 1) = v23;
      }
LABEL_82:
      PB::Reader::recallMark();
      goto LABEL_118;
    }
    v52 = (char *)*((_QWORD *)this + 5);
    v51 = *((_QWORD *)this + 6);
    if ((unint64_t)v52 >= v51)
    {
      v56 = (char *)*((_QWORD *)this + 4);
      v57 = (v52 - v56) >> 2;
      v58 = v57 + 1;
      if ((unint64_t)(v57 + 1) >> 62)
        goto LABEL_125;
      v59 = v51 - (_QWORD)v56;
      if (v59 >> 1 > v58)
        v58 = v59 >> 1;
      if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFFCLL)
        v60 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v60 = v58;
      if (v60)
      {
        v60 = (unint64_t)sub_2429114B8(v60);
        v56 = (char *)*((_QWORD *)this + 4);
        v52 = (char *)*((_QWORD *)this + 5);
      }
      else
      {
        v61 = 0;
      }
      v68 = (_DWORD *)(v60 + 4 * v57);
      *v68 = 0;
      v53 = v68 + 1;
      while (v52 != v56)
      {
        v69 = *((_DWORD *)v52 - 1);
        v52 -= 4;
        *--v68 = v69;
      }
      *((_QWORD *)this + 4) = v68;
      *((_QWORD *)this + 5) = v53;
      *((_QWORD *)this + 6) = v60 + 4 * v61;
      if (v56)
        operator delete(v56);
    }
    else
    {
      *(_DWORD *)v52 = 0;
      v53 = v52 + 4;
    }
    *((_QWORD *)this + 5) = v53;
    goto LABEL_113;
  }
  return v4 == 0;
}

uint64_t CMMsl::FrequencyResponse::writeTo(uint64_t this, PB::Writer *a2)
{
  _QWORD *v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;

  v3 = (_QWORD *)this;
  if ((*(_BYTE *)(this + 64) & 1) != 0)
    this = PB::Writer::write(a2, *(double *)(this + 56));
  v4 = (float *)v3[1];
  v5 = (float *)v3[2];
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6);
  }
  v8 = (float *)v3[4];
  v7 = (float *)v3[5];
  while (v8 != v7)
  {
    v9 = *v8++;
    this = PB::Writer::write(a2, v9);
  }
  return this;
}

BOOL CMMsl::FrequencyResponse::operator==(uint64_t a1, uint64_t a2)
{
  float *v2;
  float *v3;
  float *v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  float v9;
  _BOOL8 result;
  BOOL v11;

  if ((*(_BYTE *)(a1 + 64) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 64) & 1) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 64) & 1) != 0)
  {
    return 0;
  }
  v3 = *(float **)(a1 + 8);
  v2 = *(float **)(a1 + 16);
  v4 = *(float **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 16) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v6 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v7 = *(float **)(a2 + 32);
  if (v5 - v6 != *(_QWORD *)(a2 + 40) - (_QWORD)v7)
    return 0;
  if (v6 == v5)
    return 1;
  v8 = v6 + 4;
  do
  {
    v9 = *v7++;
    result = *(float *)(v8 - 4) == v9;
    v11 = *(float *)(v8 - 4) != v9 || v8 == v5;
    v8 += 4;
  }
  while (!v11);
  return result;
}

uint64_t CMMsl::FrequencyResponse::hash_value(CMMsl::FrequencyResponse *this)
{
  uint64_t v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 64) & 1) != 0)
  {
    if (*((double *)this + 7) == 0.0)
      v1 = 0;
    else
      v1 = *((_QWORD *)this + 7);
  }
  else
  {
    v1 = 0;
  }
  v2 = PBHashBytes() ^ v1;
  return v2 ^ PBHashBytes();
}

_QWORD *CMMsl::FusedBioMotionClassification::FusedBioMotionClassification(_QWORD *this)
{
  *this = &off_25135DA28;
  this[1] = 0;
  return this;
}

{
  *this = &off_25135DA28;
  this[1] = 0;
  return this;
}

void CMMsl::FusedBioMotionClassification::~FusedBioMotionClassification(CMMsl::FusedBioMotionClassification *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135DA28;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135DA28;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135DA28;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::FusedBioMotionClassification *CMMsl::FusedBioMotionClassification::FusedBioMotionClassification(CMMsl::FusedBioMotionClassification *this, const CMMsl::BioMotionClassification **a2)
{
  CMMsl::BioMotionClassification *v4;
  double v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_25135DA28;
  *((_QWORD *)this + 1) = 0;
  if (a2[1])
  {
    v4 = (CMMsl::BioMotionClassification *)operator new();
    v5 = CMMsl::BioMotionClassification::BioMotionClassification(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v7;
    if (v6)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v6 + 8))(v6, v5);
  }
  return this;
}

uint64_t CMMsl::FusedBioMotionClassification::operator=(uint64_t a1, const CMMsl::BioMotionClassification **a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::FusedBioMotionClassification *__hidden);
  uint64_t v6;

  if ((const CMMsl::BioMotionClassification **)a1 != a2)
  {
    CMMsl::FusedBioMotionClassification::FusedBioMotionClassification((CMMsl::FusedBioMotionClassification *)&v5, a2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v6;
    v5 = &off_25135DA28;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::FusedBioMotionClassification *a2, CMMsl::FusedBioMotionClassification *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::FusedBioMotionClassification::FusedBioMotionClassification(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_25135DA28;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_25135DA28;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::FusedBioMotionClassification::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = &off_25135DA28;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::FusedBioMotionClassification::formatText(CMMsl::FusedBioMotionClassification *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FusedBioMotionClassification::readFrom(CMMsl::FusedBioMotionClassification *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v19 = (_DWORD *)operator new();
        *(_QWORD *)v19 = &off_25135C8A8;
        v19[12] = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = (_DWORD *)*((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_27;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::FusedBioMotionClassification::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2);
  return this;
}

BOOL CMMsl::FusedBioMotionClassification::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::BioMotionClassification::operator==(v2, v3);
  return result;
}

CMMsl::BioMotionClassification *CMMsl::FusedBioMotionClassification::hash_value(CMMsl::FusedBioMotionClassification *this)
{
  CMMsl::BioMotionClassification *result;

  result = (CMMsl::BioMotionClassification *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::BioMotionClassification *)CMMsl::BioMotionClassification::hash_value(result);
  return result;
}

_QWORD *CMMsl::FusedBioMotionClassification::makeSuper(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135C8A8;
    *(_DWORD *)(v2 + 48) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t CMMsl::GaitCycleSegment::GaitCycleSegment(uint64_t this)
{
  *(_QWORD *)this = &off_25135DA60;
  *(_DWORD *)(this + 100) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135DA60;
  *(_DWORD *)(this + 100) = 0;
  return this;
}

void CMMsl::GaitCycleSegment::~GaitCycleSegment(CMMsl::GaitCycleSegment *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::GaitCycleSegment::GaitCycleSegment(CMMsl::GaitCycleSegment *this, const CMMsl::GaitCycleSegment *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float result;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;

  *(_QWORD *)this = &off_25135DA60;
  *((_DWORD *)this + 25) = 0;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_DWORD *)this + 25) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_DWORD *)a2 + 25);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 4) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 3);
    v3 |= 4u;
    *((_DWORD *)this + 25) = v3;
    *((_QWORD *)this + 3) = v5;
    v2 = *((_DWORD *)a2 + 25);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *((_QWORD *)a2 + 2);
    v3 |= 2u;
    *((_DWORD *)this + 25) = v3;
    *((_QWORD *)this + 2) = v6;
    v2 = *((_DWORD *)a2 + 25);
    if ((v2 & 0x200) == 0)
    {
LABEL_8:
      if ((v2 & 0x10000) == 0)
        goto LABEL_9;
      goto LABEL_31;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_8;
  }
  result = *((float *)a2 + 15);
  v3 |= 0x200u;
  *((_DWORD *)this + 25) = v3;
  *((float *)this + 15) = result;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x10000) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_32;
  }
LABEL_31:
  result = *((float *)a2 + 22);
  v3 |= 0x10000u;
  *((_DWORD *)this + 25) = v3;
  *((float *)this + 22) = result;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 0x4000) == 0)
      goto LABEL_11;
    goto LABEL_33;
  }
LABEL_32:
  result = *((float *)a2 + 12);
  v3 |= 0x40u;
  *((_DWORD *)this + 25) = v3;
  *((float *)this + 12) = result;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x4000) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_34;
  }
LABEL_33:
  result = *((float *)a2 + 20);
  v3 |= 0x4000u;
  *((_DWORD *)this + 25) = v3;
  *((float *)this + 20) = result;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0)
      goto LABEL_13;
    goto LABEL_35;
  }
LABEL_34:
  result = *((float *)a2 + 14);
  v3 |= 0x100u;
  *((_DWORD *)this + 25) = v3;
  *((float *)this + 14) = result;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 0x2000) == 0)
      goto LABEL_14;
    goto LABEL_36;
  }
LABEL_35:
  result = *((float *)a2 + 13);
  v3 |= 0x80u;
  *((_DWORD *)this + 25) = v3;
  *((float *)this + 13) = result;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x2000) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_37;
  }
LABEL_36:
  result = *((float *)a2 + 19);
  v3 |= 0x2000u;
  *((_DWORD *)this + 25) = v3;
  *((float *)this + 19) = result;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 0x8000) == 0)
      goto LABEL_16;
    goto LABEL_38;
  }
LABEL_37:
  result = *((float *)a2 + 11);
  v3 |= 0x20u;
  *((_DWORD *)this + 25) = v3;
  *((float *)this + 11) = result;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x8000) == 0)
  {
LABEL_16:
    if ((v2 & 0x400) == 0)
      goto LABEL_17;
    goto LABEL_39;
  }
LABEL_38:
  result = *((float *)a2 + 21);
  v3 |= 0x8000u;
  *((_DWORD *)this + 25) = v3;
  *((float *)this + 21) = result;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x400) == 0)
  {
LABEL_17:
    if ((v2 & 0x800000) == 0)
      goto LABEL_18;
    goto LABEL_40;
  }
LABEL_39:
  result = *((float *)a2 + 16);
  v3 |= 0x400u;
  *((_DWORD *)this + 25) = v3;
  *((float *)this + 16) = result;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x800000) == 0)
  {
LABEL_18:
    if ((v2 & 0x800) == 0)
      goto LABEL_19;
    goto LABEL_41;
  }
LABEL_40:
  v8 = *((_BYTE *)a2 + 98);
  v3 |= 0x800000u;
  *((_DWORD *)this + 25) = v3;
  *((_BYTE *)this + 98) = v8;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x800) == 0)
  {
LABEL_19:
    if ((v2 & 0x400000) == 0)
      goto LABEL_20;
    goto LABEL_42;
  }
LABEL_41:
  result = *((float *)a2 + 17);
  v3 |= 0x800u;
  *((_DWORD *)this + 25) = v3;
  *((float *)this + 17) = result;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x400000) == 0)
  {
LABEL_20:
    if ((v2 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_43;
  }
LABEL_42:
  v9 = *((_BYTE *)a2 + 97);
  v3 |= 0x400000u;
  *((_DWORD *)this + 25) = v3;
  *((_BYTE *)this + 97) = v9;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x80000) == 0)
  {
LABEL_21:
    if ((v2 & 0x40000) == 0)
      goto LABEL_22;
    goto LABEL_44;
  }
LABEL_43:
  v10 = *((_BYTE *)a2 + 94);
  v3 |= 0x80000u;
  *((_DWORD *)this + 25) = v3;
  *((_BYTE *)this + 94) = v10;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x40000) == 0)
  {
LABEL_22:
    if ((v2 & 0x100000) == 0)
      goto LABEL_23;
    goto LABEL_45;
  }
LABEL_44:
  v11 = *((_BYTE *)a2 + 93);
  v3 |= 0x40000u;
  *((_DWORD *)this + 25) = v3;
  *((_BYTE *)this + 93) = v11;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x100000) == 0)
  {
LABEL_23:
    if ((v2 & 0x10) == 0)
      goto LABEL_24;
    goto LABEL_46;
  }
LABEL_45:
  v12 = *((_BYTE *)a2 + 95);
  v3 |= 0x100000u;
  *((_DWORD *)this + 25) = v3;
  *((_BYTE *)this + 95) = v12;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x10) == 0)
  {
LABEL_24:
    if ((v2 & 0x200000) == 0)
      goto LABEL_25;
    goto LABEL_47;
  }
LABEL_46:
  result = *((float *)a2 + 10);
  v3 |= 0x10u;
  *((_DWORD *)this + 25) = v3;
  *((float *)this + 10) = result;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x200000) == 0)
  {
LABEL_25:
    if ((v2 & 0x20000) == 0)
      goto LABEL_26;
    goto LABEL_48;
  }
LABEL_47:
  v13 = *((_BYTE *)a2 + 96);
  v3 |= 0x200000u;
  *((_DWORD *)this + 25) = v3;
  *((_BYTE *)this + 96) = v13;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x20000) == 0)
  {
LABEL_26:
    if ((v2 & 8) == 0)
      goto LABEL_27;
    goto LABEL_49;
  }
LABEL_48:
  v14 = *((_BYTE *)a2 + 92);
  v3 |= 0x20000u;
  *((_DWORD *)this + 25) = v3;
  *((_BYTE *)this + 92) = v14;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 8) == 0)
  {
LABEL_27:
    if ((v2 & 0x1000) == 0)
      return result;
LABEL_50:
    result = *((float *)a2 + 18);
    *((_DWORD *)this + 25) = v3 | 0x1000;
    *((float *)this + 18) = result;
    return result;
  }
LABEL_49:
  v15 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *((_DWORD *)this + 25) = v3;
  *((_QWORD *)this + 4) = v15;
  if ((*((_DWORD *)a2 + 25) & 0x1000) != 0)
    goto LABEL_50;
  return result;
}

CMMsl *CMMsl::GaitCycleSegment::operator=(CMMsl *a1, const CMMsl::GaitCycleSegment *a2)
{
  CMMsl::GaitCycleSegment *v3;
  _BYTE v5[104];

  if (a1 != a2)
  {
    CMMsl::GaitCycleSegment::GaitCycleSegment((CMMsl::GaitCycleSegment *)v5, a2);
    CMMsl::swap(a1, (CMMsl::GaitCycleSegment *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::GaitCycleSegment *a2, CMMsl::GaitCycleSegment *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  float result;

  v3 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v7;
  v8 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v8;
  v9 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v9;
  v10 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v10;
  v11 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v11;
  v12 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v12;
  v13 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v13;
  v14 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v14;
  v15 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v15;
  v16 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v16;
  LOBYTE(v6) = *((_BYTE *)this + 98);
  *((_BYTE *)this + 98) = *((_BYTE *)a2 + 98);
  *((_BYTE *)a2 + 98) = v6;
  v17 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v17;
  LOBYTE(v6) = *((_BYTE *)this + 97);
  *((_BYTE *)this + 97) = *((_BYTE *)a2 + 97);
  *((_BYTE *)a2 + 97) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 94);
  *((_BYTE *)this + 94) = *((_BYTE *)a2 + 94);
  *((_BYTE *)a2 + 94) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 93);
  *((_BYTE *)this + 93) = *((_BYTE *)a2 + 93);
  *((_BYTE *)a2 + 93) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 95);
  *((_BYTE *)this + 95) = *((_BYTE *)a2 + 95);
  *((_BYTE *)a2 + 95) = v6;
  v18 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v18;
  LOBYTE(v6) = *((_BYTE *)this + 96);
  *((_BYTE *)this + 96) = *((_BYTE *)a2 + 96);
  *((_BYTE *)a2 + 96) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 92);
  *((_BYTE *)this + 92) = *((_BYTE *)a2 + 92);
  *((_BYTE *)a2 + 92) = v6;
  v19 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v19;
  result = *((float *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((float *)a2 + 18) = result;
  return result;
}

float CMMsl::GaitCycleSegment::GaitCycleSegment(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135DA60;
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a2 + 100) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 98) = *(_BYTE *)(a2 + 98);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
  *(_BYTE *)(a1 + 94) = *(_BYTE *)(a2 + 94);
  *(_BYTE *)(a1 + 93) = *(_BYTE *)(a2 + 93);
  *(_BYTE *)(a1 + 95) = *(_BYTE *)(a2 + 95);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  result = *(float *)(a2 + 72);
  *(float *)(a1 + 72) = result;
  return result;
}

CMMsl *CMMsl::GaitCycleSegment::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::GaitCycleSegment *v3;
  _BYTE v5[104];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::GaitCycleSegment::GaitCycleSegment((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::GaitCycleSegment *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::GaitCycleSegment::formatText(CMMsl::GaitCycleSegment *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "asymmetryProbabilityEstimate", *((float *)this + 10));
    v5 = *((_DWORD *)this + 25);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_29;
    }
  }
  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "cadence", *((float *)this + 11));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "doubleSupportEstimate", *((float *)this + 12));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x80) == 0)
  {
LABEL_5:
    if ((v5 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "horizontalRotationRateMax", *((float *)this + 13));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x100) == 0)
  {
LABEL_6:
    if ((v5 & 1) == 0)
      goto LABEL_7;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "impulseMagnitude", *((float *)this + 14));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 1) == 0)
  {
LABEL_7:
    if ((v5 & 0x20000) == 0)
      goto LABEL_8;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "impulseStartTime");
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x20000) == 0)
  {
LABEL_8:
    if ((v5 & 0x40000) == 0)
      goto LABEL_9;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "isCadenceConcordant");
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x40000) == 0)
  {
LABEL_9:
    if ((v5 & 0x80000) == 0)
      goto LABEL_10;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "isFeasibleWalkingSpeed");
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x80000) == 0)
  {
LABEL_10:
    if ((v5 & 0x100000) == 0)
      goto LABEL_11;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "isNotRunning");
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x100000) == 0)
  {
LABEL_11:
    if ((v5 & 0x200000) == 0)
      goto LABEL_12;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "isPendular");
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x200000) == 0)
  {
LABEL_12:
    if ((v5 & 0x400000) == 0)
      goto LABEL_13;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "isSufficientVerticalTwist");
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x400000) == 0)
  {
LABEL_13:
    if ((v5 & 0x800000) == 0)
      goto LABEL_14;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "isSwingStanceCycle");
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x800000) == 0)
  {
LABEL_14:
    if ((v5 & 2) == 0)
      goto LABEL_15;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "isValid");
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 2) == 0)
  {
LABEL_15:
    if ((v5 & 0x200) == 0)
      goto LABEL_16;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "loftEndTime");
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x200) == 0)
  {
LABEL_16:
    if ((v5 & 4) == 0)
      goto LABEL_17;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "loftMagnitude", *((float *)this + 15));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 4) == 0)
  {
LABEL_17:
    if ((v5 & 0x400) == 0)
      goto LABEL_18;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "loftStartTime");
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x400) == 0)
  {
LABEL_18:
    if ((v5 & 8) == 0)
      goto LABEL_19;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "pendulumResidual", *((float *)this + 16));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 8) == 0)
  {
LABEL_19:
    if ((v5 & 0x800) == 0)
      goto LABEL_20;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "previousImpulseStartTime");
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x800) == 0)
  {
LABEL_20:
    if ((v5 & 0x1000) == 0)
      goto LABEL_21;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "rawLoftSpeed", *((float *)this + 17));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x1000) == 0)
  {
LABEL_21:
    if ((v5 & 0x2000) == 0)
      goto LABEL_22;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "sqrtMaxAbsLoftAccel", *((float *)this + 18));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x2000) == 0)
  {
LABEL_22:
    if ((v5 & 0x4000) == 0)
      goto LABEL_23;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "stanceProbability", *((float *)this + 19));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x4000) == 0)
  {
LABEL_23:
    if ((v5 & 0x8000) == 0)
      goto LABEL_24;
LABEL_49:
    PB::TextFormatter::format(a2, "verticalRotationRateMean", *((float *)this + 21));
    if ((*((_DWORD *)this + 25) & 0x10000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_25;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "stepLengthEstimate", *((float *)this + 20));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x8000) != 0)
    goto LABEL_49;
LABEL_24:
  if ((v5 & 0x10000) != 0)
LABEL_25:
    PB::TextFormatter::format(a2, "walkSpeedEstimate", *((float *)this + 22));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GaitCycleSegment::readFrom(CMMsl::GaitCycleSegment *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  char v37;
  int v38;
  BOOL v39;
  int v40;
  BOOL v41;
  int v42;
  BOOL v43;
  int v44;
  BOOL v45;
  int v46;
  BOOL v47;
  int v48;
  BOOL v49;
  int v50;
  BOOL v51;
  unint64_t v52;
  uint64_t v53;
  char v54;
  unsigned int v55;
  uint64_t v56;
  char v57;
  char v58;
  unsigned int v59;
  unint64_t v60;
  char v61;
  char v62;
  unsigned int v63;
  unint64_t v64;
  char v65;
  char v66;
  unsigned int v67;
  unint64_t v68;
  char v69;
  char v70;
  unsigned int v71;
  unint64_t v72;
  char v73;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_168;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 25) |= 1u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v58 = 0;
          v59 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              v24 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_152;
            }
            v60 = v20++;
            v61 = *(_BYTE *)(v21 + v60);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v61 & 0x7F) << v58;
            if ((v61 & 0x80) == 0)
              break;
            v58 += 7;
            v14 = v59++ > 8;
            if (v14)
            {
              v24 = 0;
LABEL_151:
              v2 = v60 + 1;
              goto LABEL_152;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v24 = 0;
          goto LABEL_151;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_152;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        v24 = 0;
LABEL_152:
        *((_QWORD *)this + 1) = v24;
        break;
      case 2u:
        *((_DWORD *)this + 25) |= 4u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v62 = 0;
          v63 = 0;
          v30 = 0;
          if (v2 <= v26)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v26)
            {
              v30 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_157;
            }
            v64 = v26++;
            v65 = *(_BYTE *)(v27 + v64);
            *((_QWORD *)a2 + 1) = v26;
            v30 |= (unint64_t)(v65 & 0x7F) << v62;
            if ((v65 & 0x80) == 0)
              break;
            v62 += 7;
            v14 = v63++ > 8;
            if (v14)
            {
              v30 = 0;
LABEL_156:
              v2 = v64 + 1;
              goto LABEL_157;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v30 = 0;
          goto LABEL_156;
        }
        v28 = 0;
        v29 = 0;
        v30 = 0;
        do
        {
          v2 = v26 + 1;
          *((_QWORD *)a2 + 1) = v26 + 1;
          v31 = *(_BYTE *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0)
            goto LABEL_157;
          v28 += 7;
          v26 = v2;
          v14 = v29++ > 8;
        }
        while (!v14);
        v30 = 0;
LABEL_157:
        *((_QWORD *)this + 3) = v30;
        break;
      case 3u:
        *((_DWORD *)this + 25) |= 2u;
        v32 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v33 = *(_QWORD *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
        {
          v66 = 0;
          v67 = 0;
          v36 = 0;
          if (v2 <= v32)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v32)
            {
              v36 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_162;
            }
            v68 = v32++;
            v69 = *(_BYTE *)(v33 + v68);
            *((_QWORD *)a2 + 1) = v32;
            v36 |= (unint64_t)(v69 & 0x7F) << v66;
            if ((v69 & 0x80) == 0)
              break;
            v66 += 7;
            v14 = v67++ > 8;
            if (v14)
            {
              v36 = 0;
LABEL_161:
              v2 = v68 + 1;
              goto LABEL_162;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v36 = 0;
          goto LABEL_161;
        }
        v34 = 0;
        v35 = 0;
        v36 = 0;
        do
        {
          v2 = v32 + 1;
          *((_QWORD *)a2 + 1) = v32 + 1;
          v37 = *(_BYTE *)(v33 + v32);
          v36 |= (unint64_t)(v37 & 0x7F) << v34;
          if ((v37 & 0x80) == 0)
            goto LABEL_162;
          v34 += 7;
          v32 = v2;
          v14 = v35++ > 8;
        }
        while (!v14);
        v36 = 0;
LABEL_162:
        *((_QWORD *)this + 2) = v36;
        break;
      case 4u:
        *((_DWORD *)this + 25) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_103;
        *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_147;
      case 5u:
        *((_DWORD *)this + 25) |= 0x10000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_103;
        *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_147;
      case 6u:
        *((_DWORD *)this + 25) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_103;
        *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_147;
      case 7u:
        *((_DWORD *)this + 25) |= 0x4000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_103;
        *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_147;
      case 8u:
        *((_DWORD *)this + 25) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_103;
        *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_147;
      case 9u:
        *((_DWORD *)this + 25) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_103;
        *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_147;
      case 0xAu:
        *((_DWORD *)this + 25) |= 0x2000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_103;
        *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_147;
      case 0xBu:
        *((_DWORD *)this + 25) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_103;
        *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_147;
      case 0xCu:
        *((_DWORD *)this + 25) |= 0x8000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_103;
        *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_147;
      case 0xDu:
        *((_DWORD *)this + 25) |= 0x400u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_103;
        *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_147;
      case 0xEu:
        *((_DWORD *)this + 25) |= 0x800000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v39 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v38 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v39 = v38 != 0;
        }
        *((_BYTE *)this + 98) = v39;
        break;
      case 0xFu:
        *((_DWORD *)this + 25) |= 0x800u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_103;
        *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_147;
      case 0x10u:
        *((_DWORD *)this + 25) |= 0x400000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v41 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v40 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v41 = v40 != 0;
        }
        *((_BYTE *)this + 97) = v41;
        break;
      case 0x11u:
        *((_DWORD *)this + 25) |= 0x80000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v43 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v42 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v43 = v42 != 0;
        }
        *((_BYTE *)this + 94) = v43;
        break;
      case 0x12u:
        *((_DWORD *)this + 25) |= 0x40000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v45 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v44 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v45 = v44 != 0;
        }
        *((_BYTE *)this + 93) = v45;
        break;
      case 0x13u:
        *((_DWORD *)this + 25) |= 0x100000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v47 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v46 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v47 = v46 != 0;
        }
        *((_BYTE *)this + 95) = v47;
        break;
      case 0x14u:
        *((_DWORD *)this + 25) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_103;
        *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_147;
      case 0x15u:
        *((_DWORD *)this + 25) |= 0x200000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v49 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v48 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v49 = v48 != 0;
        }
        *((_BYTE *)this + 96) = v49;
        break;
      case 0x16u:
        *((_DWORD *)this + 25) |= 0x20000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v51 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v50 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v51 = v50 != 0;
        }
        *((_BYTE *)this + 92) = v51;
        break;
      case 0x17u:
        *((_DWORD *)this + 25) |= 8u;
        v52 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v53 = *(_QWORD *)a2;
        if (v52 > 0xFFFFFFFFFFFFFFF5 || v52 + 10 > v2)
        {
          v70 = 0;
          v71 = 0;
          v56 = 0;
          if (v2 <= v52)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v52)
            {
              v56 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_167;
            }
            v72 = v52++;
            v73 = *(_BYTE *)(v53 + v72);
            *((_QWORD *)a2 + 1) = v52;
            v56 |= (unint64_t)(v73 & 0x7F) << v70;
            if ((v73 & 0x80) == 0)
              break;
            v70 += 7;
            v14 = v71++ > 8;
            if (v14)
            {
              v56 = 0;
LABEL_166:
              v2 = v72 + 1;
              goto LABEL_167;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v56 = 0;
          goto LABEL_166;
        }
        v54 = 0;
        v55 = 0;
        v56 = 0;
        do
        {
          v2 = v52 + 1;
          *((_QWORD *)a2 + 1) = v52 + 1;
          v57 = *(_BYTE *)(v53 + v52);
          v56 |= (unint64_t)(v57 & 0x7F) << v54;
          if ((v57 & 0x80) == 0)
            goto LABEL_167;
          v54 += 7;
          v52 = v2;
          v14 = v55++ > 8;
        }
        while (!v14);
        v56 = 0;
LABEL_167:
        *((_QWORD *)this + 4) = v56;
        break;
      case 0x18u:
        *((_DWORD *)this + 25) |= 0x1000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_147:
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_103:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_168:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::GaitCycleSegment::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 100);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_DWORD *)(v3 + 100);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_28;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x200) == 0)
  {
LABEL_5:
    if ((v4 & 0x10000) == 0)
      goto LABEL_6;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(float *)(v3 + 60));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x10000) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(float *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x4000) == 0)
      goto LABEL_8;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x4000) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x2000) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 76));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 0x8000) == 0)
      goto LABEL_13;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x8000) == 0)
  {
LABEL_13:
    if ((v4 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 84));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x400) == 0)
  {
LABEL_14:
    if ((v4 & 0x800000) == 0)
      goto LABEL_15;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x800000) == 0)
  {
LABEL_15:
    if ((v4 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x800) == 0)
  {
LABEL_16:
    if ((v4 & 0x400000) == 0)
      goto LABEL_17;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(float *)(v3 + 68));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x400000) == 0)
  {
LABEL_17:
    if ((v4 & 0x80000) == 0)
      goto LABEL_18;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x80000) == 0)
  {
LABEL_18:
    if ((v4 & 0x40000) == 0)
      goto LABEL_19;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x40000) == 0)
  {
LABEL_19:
    if ((v4 & 0x100000) == 0)
      goto LABEL_20;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x100000) == 0)
  {
LABEL_20:
    if ((v4 & 0x10) == 0)
      goto LABEL_21;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x10) == 0)
  {
LABEL_21:
    if ((v4 & 0x200000) == 0)
      goto LABEL_22;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x200000) == 0)
  {
LABEL_22:
    if ((v4 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x20000) == 0)
  {
LABEL_23:
    if ((v4 & 8) == 0)
      goto LABEL_24;
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 8) == 0)
  {
LABEL_24:
    if ((v4 & 0x1000) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 72));
  }
LABEL_48:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_DWORD *)(v3 + 100) & 0x1000) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 72));
  return this;
}

BOOL CMMsl::GaitCycleSegment::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 100);
  v3 = *(_DWORD *)(a2 + 100);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(unsigned __int8 *)(a1 + 98) != *(unsigned __int8 *)(a2 + 98))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(unsigned __int8 *)(a1 + 97) != *(unsigned __int8 *)(a2 + 97))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(unsigned __int8 *)(a1 + 94) != *(unsigned __int8 *)(a2 + 94))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(unsigned __int8 *)(a1 + 93) != *(unsigned __int8 *)(a2 + 93))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(unsigned __int8 *)(a1 + 95) != *(unsigned __int8 *)(a2 + 95))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(unsigned __int8 *)(a1 + 96) != *(unsigned __int8 *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(unsigned __int8 *)(a1 + 92) != *(unsigned __int8 *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  v4 = (*(_DWORD *)(a2 + 100) & 0x1000) == 0;
  if ((v2 & 0x1000) != 0)
    return (v3 & 0x1000) != 0 && *(float *)(a1 + 72) == *(float *)(a2 + 72);
  return v4;
}

uint64_t CMMsl::GaitCycleSegment::hash_value(CMMsl::GaitCycleSegment *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  uint64_t v38;

  v1 = *((_DWORD *)this + 25);
  if ((v1 & 1) != 0)
  {
    v2 = *((_QWORD *)this + 1);
    if ((v1 & 4) != 0)
    {
LABEL_3:
      v3 = *((_QWORD *)this + 3);
      if ((v1 & 2) != 0)
        goto LABEL_4;
      goto LABEL_54;
    }
  }
  else
  {
    v2 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_4:
    v4 = *((_QWORD *)this + 2);
    if ((v1 & 0x200) != 0)
      goto LABEL_5;
LABEL_55:
    v6 = 0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_8;
LABEL_56:
    v8 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_11;
LABEL_57:
    v10 = 0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_14;
LABEL_58:
    v12 = 0;
    if ((v1 & 0x100) != 0)
      goto LABEL_17;
LABEL_59:
    v14 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_20;
LABEL_60:
    v16 = 0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_23;
LABEL_61:
    v18 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_26;
LABEL_62:
    v20 = 0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_29;
LABEL_63:
    v22 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_32;
LABEL_64:
    v24 = 0;
    if ((v1 & 0x800000) != 0)
      goto LABEL_35;
    goto LABEL_65;
  }
LABEL_54:
  v4 = 0;
  if ((v1 & 0x200) == 0)
    goto LABEL_55;
LABEL_5:
  v5 = *((float *)this + 15);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((v1 & 0x10000) == 0)
    goto LABEL_56;
LABEL_8:
  v7 = *((float *)this + 22);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_57;
LABEL_11:
  v9 = *((float *)this + 12);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((v1 & 0x4000) == 0)
    goto LABEL_58;
LABEL_14:
  v11 = *((float *)this + 20);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((v1 & 0x100) == 0)
    goto LABEL_59;
LABEL_17:
  v13 = *((float *)this + 14);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_60;
LABEL_20:
  v15 = *((float *)this + 13);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_61;
LABEL_23:
  v17 = *((float *)this + 19);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_62;
LABEL_26:
  v19 = *((float *)this + 11);
  v20 = LODWORD(v19);
  if (v19 == 0.0)
    v20 = 0;
  if ((v1 & 0x8000) == 0)
    goto LABEL_63;
LABEL_29:
  v21 = *((float *)this + 21);
  v22 = LODWORD(v21);
  if (v21 == 0.0)
    v22 = 0;
  if ((v1 & 0x400) == 0)
    goto LABEL_64;
LABEL_32:
  v23 = *((float *)this + 16);
  v24 = LODWORD(v23);
  if (v23 == 0.0)
    v24 = 0;
  if ((v1 & 0x800000) != 0)
  {
LABEL_35:
    v25 = *((unsigned __int8 *)this + 98);
    if ((v1 & 0x800) != 0)
      goto LABEL_36;
LABEL_66:
    v27 = 0;
    if ((v1 & 0x400000) != 0)
      goto LABEL_39;
    goto LABEL_67;
  }
LABEL_65:
  v25 = 0;
  if ((v1 & 0x800) == 0)
    goto LABEL_66;
LABEL_36:
  v26 = *((float *)this + 17);
  v27 = LODWORD(v26);
  if (v26 == 0.0)
    v27 = 0;
  if ((v1 & 0x400000) != 0)
  {
LABEL_39:
    v28 = *((unsigned __int8 *)this + 97);
    if ((v1 & 0x80000) != 0)
      goto LABEL_40;
    goto LABEL_68;
  }
LABEL_67:
  v28 = 0;
  if ((v1 & 0x80000) != 0)
  {
LABEL_40:
    v29 = *((unsigned __int8 *)this + 94);
    if ((v1 & 0x40000) != 0)
      goto LABEL_41;
    goto LABEL_69;
  }
LABEL_68:
  v29 = 0;
  if ((v1 & 0x40000) != 0)
  {
LABEL_41:
    v30 = *((unsigned __int8 *)this + 93);
    if ((v1 & 0x100000) != 0)
      goto LABEL_42;
    goto LABEL_70;
  }
LABEL_69:
  v30 = 0;
  if ((v1 & 0x100000) != 0)
  {
LABEL_42:
    v31 = *((unsigned __int8 *)this + 95);
    if ((v1 & 0x10) != 0)
      goto LABEL_43;
LABEL_71:
    v33 = 0;
    if ((v1 & 0x200000) != 0)
      goto LABEL_46;
    goto LABEL_72;
  }
LABEL_70:
  v31 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_71;
LABEL_43:
  v32 = *((float *)this + 10);
  v33 = LODWORD(v32);
  if (v32 == 0.0)
    v33 = 0;
  if ((v1 & 0x200000) != 0)
  {
LABEL_46:
    v34 = *((unsigned __int8 *)this + 96);
    if ((v1 & 0x20000) != 0)
      goto LABEL_47;
    goto LABEL_73;
  }
LABEL_72:
  v34 = 0;
  if ((v1 & 0x20000) != 0)
  {
LABEL_47:
    v35 = *((unsigned __int8 *)this + 92);
    if ((v1 & 8) != 0)
      goto LABEL_48;
    goto LABEL_74;
  }
LABEL_73:
  v35 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_48:
    v36 = *((_QWORD *)this + 4);
    if ((v1 & 0x1000) != 0)
      goto LABEL_49;
LABEL_75:
    v38 = 0;
    return v3 ^ v2 ^ v4 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v25 ^ v27 ^ v28 ^ v29 ^ v30 ^ v31 ^ v33 ^ v34 ^ v35 ^ v36 ^ v38;
  }
LABEL_74:
  v36 = 0;
  if ((v1 & 0x1000) == 0)
    goto LABEL_75;
LABEL_49:
  v37 = *((float *)this + 18);
  v38 = LODWORD(v37);
  if (v37 == 0.0)
    v38 = 0;
  return v3 ^ v2 ^ v4 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v25 ^ v27 ^ v28 ^ v29 ^ v30 ^ v31 ^ v33 ^ v34 ^ v35 ^ v36 ^ v38;
}

uint64_t CMMsl::GaitCycleSegmentationState::GaitCycleSegmentationState(uint64_t this)
{
  *(_QWORD *)this = &off_25135DA98;
  *(_DWORD *)(this + 116) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135DA98;
  *(_DWORD *)(this + 116) = 0;
  return this;
}

void CMMsl::GaitCycleSegmentationState::~GaitCycleSegmentationState(CMMsl::GaitCycleSegmentationState *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::GaitCycleSegmentationState::GaitCycleSegmentationState(uint64_t this, const CMMsl::GaitCycleSegmentationState *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;

  *(_QWORD *)this = &off_25135DA98;
  *(_DWORD *)(this + 116) = 0;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x80) != 0)
  {
    v4 = *((_QWORD *)a2 + 8);
    v3 = 128;
    *(_DWORD *)(this + 116) = 128;
    *(_QWORD *)(this + 64) = v4;
    v2 = *((_DWORD *)a2 + 29);
    if ((v2 & 0x100000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x100000) != 0)
  {
LABEL_5:
    v5 = *((_BYTE *)a2 + 114);
    v3 |= 0x100000u;
    *(_DWORD *)(this + 116) = v3;
    *(_BYTE *)(this + 114) = v5;
    v2 = *((_DWORD *)a2 + 29);
  }
LABEL_6:
  if ((v2 & 0x80000) != 0)
  {
    v6 = *((_BYTE *)a2 + 113);
    v3 |= 0x80000u;
    *(_DWORD *)(this + 116) = v3;
    *(_BYTE *)(this + 113) = v6;
    v2 = *((_DWORD *)a2 + 29);
    if ((v2 & 0x200000) == 0)
    {
LABEL_8:
      if ((v2 & 0x40000) == 0)
        goto LABEL_9;
      goto LABEL_29;
    }
  }
  else if ((v2 & 0x200000) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_BYTE *)a2 + 115);
  v3 |= 0x200000u;
  *(_DWORD *)(this + 116) = v3;
  *(_BYTE *)(this + 115) = v7;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x40000) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0)
      goto LABEL_10;
    goto LABEL_30;
  }
LABEL_29:
  v8 = *((_BYTE *)a2 + 112);
  v3 |= 0x40000u;
  *(_DWORD *)(this + 116) = v3;
  *(_BYTE *)(this + 112) = v8;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0)
      goto LABEL_11;
    goto LABEL_31;
  }
LABEL_30:
  v9 = *((_QWORD *)a2 + 3);
  v3 |= 4u;
  *(_DWORD *)(this + 116) = v3;
  *(_QWORD *)(this + 24) = v9;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 2) == 0)
  {
LABEL_11:
    if ((v2 & 1) == 0)
      goto LABEL_12;
    goto LABEL_32;
  }
LABEL_31:
  v10 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_DWORD *)(this + 116) = v3;
  *(_QWORD *)(this + 16) = v10;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 1) == 0)
  {
LABEL_12:
    if ((v2 & 0x20) == 0)
      goto LABEL_13;
    goto LABEL_33;
  }
LABEL_32:
  v11 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_DWORD *)(this + 116) = v3;
  *(_QWORD *)(this + 8) = v11;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x20) == 0)
  {
LABEL_13:
    if ((v2 & 0x40) == 0)
      goto LABEL_14;
    goto LABEL_34;
  }
LABEL_33:
  v12 = *((_QWORD *)a2 + 6);
  v3 |= 0x20u;
  *(_DWORD *)(this + 116) = v3;
  *(_QWORD *)(this + 48) = v12;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x40) == 0)
  {
LABEL_14:
    if ((v2 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_35;
  }
LABEL_34:
  v13 = *((_QWORD *)a2 + 7);
  v3 |= 0x40u;
  *(_DWORD *)(this + 116) = v3;
  *(_QWORD *)(this + 56) = v13;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x2000) == 0)
  {
LABEL_15:
    if ((v2 & 0x10000) == 0)
      goto LABEL_16;
    goto LABEL_36;
  }
LABEL_35:
  v14 = *((_DWORD *)a2 + 23);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 92) = v14;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x10000) == 0)
  {
LABEL_16:
    if ((v2 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_37;
  }
LABEL_36:
  v15 = *((_DWORD *)a2 + 26);
  v3 |= 0x10000u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 104) = v15;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x1000) == 0)
  {
LABEL_17:
    if ((v2 & 0x800) == 0)
      goto LABEL_18;
    goto LABEL_38;
  }
LABEL_37:
  v16 = *((_DWORD *)a2 + 22);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 88) = v16;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x800) == 0)
  {
LABEL_18:
    if ((v2 & 0x8000) == 0)
      goto LABEL_19;
    goto LABEL_39;
  }
LABEL_38:
  v17 = *((_DWORD *)a2 + 21);
  v3 |= 0x800u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 84) = v17;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x8000) == 0)
  {
LABEL_19:
    if ((v2 & 0x200) == 0)
      goto LABEL_20;
    goto LABEL_40;
  }
LABEL_39:
  v18 = *((_DWORD *)a2 + 25);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 100) = v18;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x200) == 0)
  {
LABEL_20:
    if ((v2 & 0x400) == 0)
      goto LABEL_21;
    goto LABEL_41;
  }
LABEL_40:
  v19 = *((_DWORD *)a2 + 19);
  v3 |= 0x200u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 76) = v19;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x400) == 0)
  {
LABEL_21:
    if ((v2 & 0x4000) == 0)
      goto LABEL_22;
    goto LABEL_42;
  }
LABEL_41:
  v20 = *((_DWORD *)a2 + 20);
  v3 |= 0x400u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 80) = v20;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x4000) == 0)
  {
LABEL_22:
    if ((v2 & 0x100) == 0)
      goto LABEL_23;
    goto LABEL_43;
  }
LABEL_42:
  v21 = *((_DWORD *)a2 + 24);
  v3 |= 0x4000u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 96) = v21;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x100) == 0)
  {
LABEL_23:
    if ((v2 & 0x20000) == 0)
      goto LABEL_24;
    goto LABEL_44;
  }
LABEL_43:
  v22 = *((_DWORD *)a2 + 18);
  v3 |= 0x100u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 72) = v22;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x20000) == 0)
  {
LABEL_24:
    if ((v2 & 8) == 0)
      goto LABEL_25;
    goto LABEL_45;
  }
LABEL_44:
  v23 = *((_DWORD *)a2 + 27);
  v3 |= 0x20000u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 108) = v23;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 8) == 0)
  {
LABEL_25:
    if ((v2 & 0x10) == 0)
      return this;
LABEL_46:
    v25 = *((_QWORD *)a2 + 5);
    *(_DWORD *)(this + 116) = v3 | 0x10;
    *(_QWORD *)(this + 40) = v25;
    return this;
  }
LABEL_45:
  v24 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *(_DWORD *)(this + 116) = v3;
  *(_QWORD *)(this + 32) = v24;
  if ((*((_DWORD *)a2 + 29) & 0x10) != 0)
    goto LABEL_46;
  return this;
}

CMMsl *CMMsl::GaitCycleSegmentationState::operator=(CMMsl *a1, const CMMsl::GaitCycleSegmentationState *a2)
{
  CMMsl::GaitCycleSegmentationState *v3;
  _BYTE v5[120];

  if (a1 != a2)
  {
    CMMsl::GaitCycleSegmentationState::GaitCycleSegmentationState((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::GaitCycleSegmentationState *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::GaitCycleSegmentationState *a2, CMMsl::GaitCycleSegmentationState *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float result;
  uint64_t v11;
  uint64_t v12;

  v3 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v3;
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v4;
  LOBYTE(v3) = *((_BYTE *)this + 114);
  *((_BYTE *)this + 114) = *((_BYTE *)a2 + 114);
  *((_BYTE *)a2 + 114) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 113);
  *((_BYTE *)this + 113) = *((_BYTE *)a2 + 113);
  *((_BYTE *)a2 + 113) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 115);
  *((_BYTE *)this + 115) = *((_BYTE *)a2 + 115);
  *((_BYTE *)a2 + 115) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 112);
  *((_BYTE *)this + 112) = *((_BYTE *)a2 + 112);
  *((_BYTE *)a2 + 112) = v3;
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v7;
  v8 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v8;
  v9 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v9;
  LODWORD(v4) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v4;
  LODWORD(v4) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v4;
  LODWORD(v4) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v4;
  LODWORD(v4) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v4;
  LODWORD(v4) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v4;
  LODWORD(v4) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v4;
  LODWORD(v4) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v4;
  LODWORD(v4) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v4;
  LODWORD(v4) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v4;
  result = *((float *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((float *)a2 + 27) = result;
  v11 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v11;
  v12 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v12;
  return result;
}

float CMMsl::GaitCycleSegmentationState::GaitCycleSegmentationState(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135DA98;
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a2 + 116) = 0;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 114) = *(_BYTE *)(a2 + 114);
  *(_BYTE *)(a1 + 113) = *(_BYTE *)(a2 + 113);
  *(_BYTE *)(a1 + 115) = *(_BYTE *)(a2 + 115);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  result = *(float *)(a2 + 108);
  *(float *)(a1 + 108) = result;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return result;
}

CMMsl *CMMsl::GaitCycleSegmentationState::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::GaitCycleSegmentationState *v3;
  _BYTE v5[120];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::GaitCycleSegmentationState::GaitCycleSegmentationState((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::GaitCycleSegmentationState *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::GaitCycleSegmentationState::formatText(CMMsl::GaitCycleSegmentationState *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "curImpulseStartTime");
    v5 = *((_DWORD *)this + 29);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_27;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "curLoftEndTime");
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x100) == 0)
      goto LABEL_5;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "curLoftStartTime");
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x100) == 0)
  {
LABEL_5:
    if ((v5 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "currentCadence", *((float *)this + 18));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x200) == 0)
  {
LABEL_6:
    if ((v5 & 0x400) == 0)
      goto LABEL_7;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "currentHorzRotRateMax", *((float *)this + 19));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x400) == 0)
  {
LABEL_7:
    if ((v5 & 0x800) == 0)
      goto LABEL_8;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "currentImpulseMagnitude", *((float *)this + 20));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x800) == 0)
  {
LABEL_8:
    if ((v5 & 0x1000) == 0)
      goto LABEL_9;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "currentLoftMagnitude", *((float *)this + 21));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x1000) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "currentMax", *((float *)this + 22));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x2000) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000) == 0)
      goto LABEL_11;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "currentMin", *((float *)this + 23));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x4000) == 0)
  {
LABEL_11:
    if ((v5 & 0x40000) == 0)
      goto LABEL_12;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "currentWalkSpeedEstimate", *((float *)this + 24));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x40000) == 0)
  {
LABEL_12:
    if ((v5 & 8) == 0)
      goto LABEL_13;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "firstLoft");
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 8) == 0)
  {
LABEL_13:
    if ((v5 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "impulseStartTimeWalkingSpeed");
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x10) == 0)
  {
LABEL_14:
    if ((v5 & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "impulseStopTimeWalkingSpeed");
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x20) == 0)
  {
LABEL_15:
    if ((v5 & 0x80000) == 0)
      goto LABEL_16;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "lastZeroTime");
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x80000) == 0)
  {
LABEL_16:
    if ((v5 & 0x100000) == 0)
      goto LABEL_17;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "loftEndDetected");
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x100000) == 0)
  {
LABEL_17:
    if ((v5 & 0x40) == 0)
      goto LABEL_18;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "loftStartDetected");
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x40) == 0)
  {
LABEL_18:
    if ((v5 & 0x8000) == 0)
      goto LABEL_19;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "prevLoftStartTime");
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x8000) == 0)
  {
LABEL_19:
    if ((v5 & 0x10000) == 0)
      goto LABEL_20;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "previousHorzRotRateMax", *((float *)this + 25));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x10000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80) == 0)
      goto LABEL_21;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "previousMax", *((float *)this + 26));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x80) == 0)
  {
LABEL_21:
    if ((v5 & 0x20000) == 0)
      goto LABEL_22;
LABEL_45:
    PB::TextFormatter::format(a2, "vertRotationRateMean", *((float *)this + 27));
    if ((*((_DWORD *)this + 29) & 0x200000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_23;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 8));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x20000) != 0)
    goto LABEL_45;
LABEL_22:
  if ((v5 & 0x200000) != 0)
LABEL_23:
    PB::TextFormatter::format(a2, "waitingToConfirmLoft");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GaitCycleSegmentationState::readFrom(CMMsl::GaitCycleSegmentationState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v20;
  BOOL v21;
  int v22;
  BOOL v23;
  int v24;
  BOOL v25;
  int v26;
  BOOL v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  uint64_t v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  char v51;
  unint64_t v52;
  uint64_t v53;
  char v54;
  unsigned int v55;
  uint64_t v56;
  char v57;
  unint64_t v58;
  uint64_t v59;
  char v60;
  unsigned int v61;
  uint64_t v62;
  char v63;
  unint64_t v64;
  uint64_t v65;
  char v66;
  unsigned int v67;
  uint64_t v68;
  char v69;
  char v70;
  unsigned int v71;
  unint64_t v72;
  char v73;
  char v74;
  unsigned int v75;
  unint64_t v76;
  char v77;
  char v78;
  unsigned int v79;
  unint64_t v80;
  char v81;
  char v82;
  unsigned int v83;
  unint64_t v84;
  char v85;
  char v86;
  unsigned int v87;
  unint64_t v88;
  char v89;
  char v90;
  unsigned int v91;
  unint64_t v92;
  char v93;
  char v94;
  unsigned int v95;
  unint64_t v96;
  char v97;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_208;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 29) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_98;
        *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        v2 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_172;
      case 2u:
        *((_DWORD *)this + 29) |= 0x100000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v21 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v21 = v20 != 0;
        }
        *((_BYTE *)this + 114) = v21;
        break;
      case 3u:
        *((_DWORD *)this + 29) |= 0x80000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v23 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v22 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v23 = v22 != 0;
        }
        *((_BYTE *)this + 113) = v23;
        break;
      case 4u:
        *((_DWORD *)this + 29) |= 0x200000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v25 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v24 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v25 = v24 != 0;
        }
        *((_BYTE *)this + 115) = v25;
        break;
      case 5u:
        *((_DWORD *)this + 29) |= 0x40000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v27 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v26 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v27 = v26 != 0;
        }
        *((_BYTE *)this + 112) = v27;
        break;
      case 6u:
        *((_DWORD *)this + 29) |= 4u;
        v28 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v29 = *(_QWORD *)a2;
        if (v28 > 0xFFFFFFFFFFFFFFF5 || v28 + 10 > v2)
        {
          v70 = 0;
          v71 = 0;
          v32 = 0;
          if (v2 <= v28)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v28)
            {
              v32 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_177;
            }
            v72 = v28++;
            v73 = *(_BYTE *)(v29 + v72);
            *((_QWORD *)a2 + 1) = v28;
            v32 |= (unint64_t)(v73 & 0x7F) << v70;
            if ((v73 & 0x80) == 0)
              break;
            v70 += 7;
            v14 = v71++ > 8;
            if (v14)
            {
              v32 = 0;
LABEL_176:
              v2 = v72 + 1;
              goto LABEL_177;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v32 = 0;
          goto LABEL_176;
        }
        v30 = 0;
        v31 = 0;
        v32 = 0;
        do
        {
          v2 = v28 + 1;
          *((_QWORD *)a2 + 1) = v28 + 1;
          v33 = *(_BYTE *)(v29 + v28);
          v32 |= (unint64_t)(v33 & 0x7F) << v30;
          if ((v33 & 0x80) == 0)
            goto LABEL_177;
          v30 += 7;
          v28 = v2;
          v14 = v31++ > 8;
        }
        while (!v14);
        v32 = 0;
LABEL_177:
        *((_QWORD *)this + 3) = v32;
        break;
      case 7u:
        *((_DWORD *)this + 29) |= 2u;
        v34 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v35 = *(_QWORD *)a2;
        if (v34 > 0xFFFFFFFFFFFFFFF5 || v34 + 10 > v2)
        {
          v74 = 0;
          v75 = 0;
          v38 = 0;
          if (v2 <= v34)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v34)
            {
              v38 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_182;
            }
            v76 = v34++;
            v77 = *(_BYTE *)(v35 + v76);
            *((_QWORD *)a2 + 1) = v34;
            v38 |= (unint64_t)(v77 & 0x7F) << v74;
            if ((v77 & 0x80) == 0)
              break;
            v74 += 7;
            v14 = v75++ > 8;
            if (v14)
            {
              v38 = 0;
LABEL_181:
              v2 = v76 + 1;
              goto LABEL_182;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v38 = 0;
          goto LABEL_181;
        }
        v36 = 0;
        v37 = 0;
        v38 = 0;
        do
        {
          v2 = v34 + 1;
          *((_QWORD *)a2 + 1) = v34 + 1;
          v39 = *(_BYTE *)(v35 + v34);
          v38 |= (unint64_t)(v39 & 0x7F) << v36;
          if ((v39 & 0x80) == 0)
            goto LABEL_182;
          v36 += 7;
          v34 = v2;
          v14 = v37++ > 8;
        }
        while (!v14);
        v38 = 0;
LABEL_182:
        *((_QWORD *)this + 2) = v38;
        break;
      case 8u:
        *((_DWORD *)this + 29) |= 1u;
        v40 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v41 = *(_QWORD *)a2;
        if (v40 > 0xFFFFFFFFFFFFFFF5 || v40 + 10 > v2)
        {
          v78 = 0;
          v79 = 0;
          v44 = 0;
          if (v2 <= v40)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v40)
            {
              v44 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_187;
            }
            v80 = v40++;
            v81 = *(_BYTE *)(v41 + v80);
            *((_QWORD *)a2 + 1) = v40;
            v44 |= (unint64_t)(v81 & 0x7F) << v78;
            if ((v81 & 0x80) == 0)
              break;
            v78 += 7;
            v14 = v79++ > 8;
            if (v14)
            {
              v44 = 0;
LABEL_186:
              v2 = v80 + 1;
              goto LABEL_187;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v44 = 0;
          goto LABEL_186;
        }
        v42 = 0;
        v43 = 0;
        v44 = 0;
        do
        {
          v2 = v40 + 1;
          *((_QWORD *)a2 + 1) = v40 + 1;
          v45 = *(_BYTE *)(v41 + v40);
          v44 |= (unint64_t)(v45 & 0x7F) << v42;
          if ((v45 & 0x80) == 0)
            goto LABEL_187;
          v42 += 7;
          v40 = v2;
          v14 = v43++ > 8;
        }
        while (!v14);
        v44 = 0;
LABEL_187:
        *((_QWORD *)this + 1) = v44;
        break;
      case 9u:
        *((_DWORD *)this + 29) |= 0x20u;
        v46 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v47 = *(_QWORD *)a2;
        if (v46 > 0xFFFFFFFFFFFFFFF5 || v46 + 10 > v2)
        {
          v82 = 0;
          v83 = 0;
          v50 = 0;
          if (v2 <= v46)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v46)
            {
              v50 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_192;
            }
            v84 = v46++;
            v85 = *(_BYTE *)(v47 + v84);
            *((_QWORD *)a2 + 1) = v46;
            v50 |= (unint64_t)(v85 & 0x7F) << v82;
            if ((v85 & 0x80) == 0)
              break;
            v82 += 7;
            v14 = v83++ > 8;
            if (v14)
            {
              v50 = 0;
LABEL_191:
              v2 = v84 + 1;
              goto LABEL_192;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v50 = 0;
          goto LABEL_191;
        }
        v48 = 0;
        v49 = 0;
        v50 = 0;
        do
        {
          v2 = v46 + 1;
          *((_QWORD *)a2 + 1) = v46 + 1;
          v51 = *(_BYTE *)(v47 + v46);
          v50 |= (unint64_t)(v51 & 0x7F) << v48;
          if ((v51 & 0x80) == 0)
            goto LABEL_192;
          v48 += 7;
          v46 = v2;
          v14 = v49++ > 8;
        }
        while (!v14);
        v50 = 0;
LABEL_192:
        *((_QWORD *)this + 6) = v50;
        break;
      case 0xAu:
        *((_DWORD *)this + 29) |= 0x40u;
        v52 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v53 = *(_QWORD *)a2;
        if (v52 > 0xFFFFFFFFFFFFFFF5 || v52 + 10 > v2)
        {
          v86 = 0;
          v87 = 0;
          v56 = 0;
          if (v2 <= v52)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v52)
            {
              v56 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_197;
            }
            v88 = v52++;
            v89 = *(_BYTE *)(v53 + v88);
            *((_QWORD *)a2 + 1) = v52;
            v56 |= (unint64_t)(v89 & 0x7F) << v86;
            if ((v89 & 0x80) == 0)
              break;
            v86 += 7;
            v14 = v87++ > 8;
            if (v14)
            {
              v56 = 0;
LABEL_196:
              v2 = v88 + 1;
              goto LABEL_197;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v56 = 0;
          goto LABEL_196;
        }
        v54 = 0;
        v55 = 0;
        v56 = 0;
        do
        {
          v2 = v52 + 1;
          *((_QWORD *)a2 + 1) = v52 + 1;
          v57 = *(_BYTE *)(v53 + v52);
          v56 |= (unint64_t)(v57 & 0x7F) << v54;
          if ((v57 & 0x80) == 0)
            goto LABEL_197;
          v54 += 7;
          v52 = v2;
          v14 = v55++ > 8;
        }
        while (!v14);
        v56 = 0;
LABEL_197:
        *((_QWORD *)this + 7) = v56;
        break;
      case 0xBu:
        *((_DWORD *)this + 29) |= 0x2000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_98;
        *((_DWORD *)this + 23) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_171;
      case 0xCu:
        *((_DWORD *)this + 29) |= 0x10000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_98;
        *((_DWORD *)this + 26) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_171;
      case 0xDu:
        *((_DWORD *)this + 29) |= 0x1000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_98;
        *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_171;
      case 0xEu:
        *((_DWORD *)this + 29) |= 0x800u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_98;
        *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_171;
      case 0xFu:
        *((_DWORD *)this + 29) |= 0x8000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_98;
        *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_171;
      case 0x10u:
        *((_DWORD *)this + 29) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_98;
        *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_171;
      case 0x11u:
        *((_DWORD *)this + 29) |= 0x400u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_98;
        *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_171;
      case 0x12u:
        *((_DWORD *)this + 29) |= 0x4000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_98;
        *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_171;
      case 0x13u:
        *((_DWORD *)this + 29) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_98;
        *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_171;
      case 0x14u:
        *((_DWORD *)this + 29) |= 0x20000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 27) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_171:
          v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_172:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_98:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 0x15u:
        *((_DWORD *)this + 29) |= 8u;
        v58 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v59 = *(_QWORD *)a2;
        if (v58 > 0xFFFFFFFFFFFFFFF5 || v58 + 10 > v2)
        {
          v90 = 0;
          v91 = 0;
          v62 = 0;
          if (v2 <= v58)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v58)
            {
              v62 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_202;
            }
            v92 = v58++;
            v93 = *(_BYTE *)(v59 + v92);
            *((_QWORD *)a2 + 1) = v58;
            v62 |= (unint64_t)(v93 & 0x7F) << v90;
            if ((v93 & 0x80) == 0)
              break;
            v90 += 7;
            v14 = v91++ > 8;
            if (v14)
            {
              v62 = 0;
LABEL_201:
              v2 = v92 + 1;
              goto LABEL_202;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v62 = 0;
          goto LABEL_201;
        }
        v60 = 0;
        v61 = 0;
        v62 = 0;
        do
        {
          v2 = v58 + 1;
          *((_QWORD *)a2 + 1) = v58 + 1;
          v63 = *(_BYTE *)(v59 + v58);
          v62 |= (unint64_t)(v63 & 0x7F) << v60;
          if ((v63 & 0x80) == 0)
            goto LABEL_202;
          v60 += 7;
          v58 = v2;
          v14 = v61++ > 8;
        }
        while (!v14);
        v62 = 0;
LABEL_202:
        *((_QWORD *)this + 4) = v62;
        break;
      case 0x16u:
        *((_DWORD *)this + 29) |= 0x10u;
        v64 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v65 = *(_QWORD *)a2;
        if (v64 > 0xFFFFFFFFFFFFFFF5 || v64 + 10 > v2)
        {
          v94 = 0;
          v95 = 0;
          v68 = 0;
          if (v2 <= v64)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v64)
            {
              v68 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_207;
            }
            v96 = v64++;
            v97 = *(_BYTE *)(v65 + v96);
            *((_QWORD *)a2 + 1) = v64;
            v68 |= (unint64_t)(v97 & 0x7F) << v94;
            if ((v97 & 0x80) == 0)
              break;
            v94 += 7;
            v14 = v95++ > 8;
            if (v14)
            {
              v68 = 0;
LABEL_206:
              v2 = v96 + 1;
              goto LABEL_207;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v68 = 0;
          goto LABEL_206;
        }
        v66 = 0;
        v67 = 0;
        v68 = 0;
        do
        {
          v2 = v64 + 1;
          *((_QWORD *)a2 + 1) = v64 + 1;
          v69 = *(_BYTE *)(v65 + v64);
          v68 |= (unint64_t)(v69 & 0x7F) << v66;
          if ((v69 & 0x80) == 0)
            goto LABEL_207;
          v66 += 7;
          v64 = v2;
          v14 = v67++ > 8;
        }
        while (!v14);
        v68 = 0;
LABEL_207:
        *((_QWORD *)this + 5) = v68;
        break;
      default:
        goto LABEL_19;
    }
LABEL_208:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::GaitCycleSegmentationState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 116);
  if ((v4 & 0x80) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 64));
    v4 = *(_DWORD *)(v3 + 116);
    if ((v4 & 0x100000) == 0)
    {
LABEL_3:
      if ((v4 & 0x80000) == 0)
        goto LABEL_4;
      goto LABEL_26;
    }
  }
  else if ((v4 & 0x100000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x80000) == 0)
  {
LABEL_4:
    if ((v4 & 0x200000) == 0)
      goto LABEL_5;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x200000) == 0)
  {
LABEL_5:
    if ((v4 & 0x40000) == 0)
      goto LABEL_6;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x40000) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0)
      goto LABEL_7;
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0)
      goto LABEL_8;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 2) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0)
      goto LABEL_9;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x40) == 0)
  {
LABEL_11:
    if ((v4 & 0x2000) == 0)
      goto LABEL_12;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x2000) == 0)
  {
LABEL_12:
    if ((v4 & 0x10000) == 0)
      goto LABEL_13;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 92));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x10000) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 104));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x1000) == 0)
  {
LABEL_14:
    if ((v4 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x800) == 0)
  {
LABEL_15:
    if ((v4 & 0x8000) == 0)
      goto LABEL_16;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 84));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x8000) == 0)
  {
LABEL_16:
    if ((v4 & 0x200) == 0)
      goto LABEL_17;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 100));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x200) == 0)
  {
LABEL_17:
    if ((v4 & 0x400) == 0)
      goto LABEL_18;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 76));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x400) == 0)
  {
LABEL_18:
    if ((v4 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(float *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x4000) == 0)
  {
LABEL_19:
    if ((v4 & 0x100) == 0)
      goto LABEL_20;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(float *)(v3 + 96));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x100) == 0)
  {
LABEL_20:
    if ((v4 & 0x20000) == 0)
      goto LABEL_21;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x20000) == 0)
  {
LABEL_21:
    if ((v4 & 8) == 0)
      goto LABEL_22;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(float *)(v3 + 108));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 8) == 0)
  {
LABEL_22:
    if ((v4 & 0x10) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_44:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_DWORD *)(v3 + 116) & 0x10) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

BOOL CMMsl::GaitCycleSegmentationState::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 116);
  v3 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(unsigned __int8 *)(a1 + 114) != *(unsigned __int8 *)(a2 + 114))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(unsigned __int8 *)(a1 + 113) != *(unsigned __int8 *)(a2 + 113))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(unsigned __int8 *)(a1 + 115) != *(unsigned __int8 *)(a2 + 115))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(unsigned __int8 *)(a1 + 112) != *(unsigned __int8 *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_QWORD *)(a1 + 48) != *(_QWORD *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_QWORD *)(a1 + 56) != *(_QWORD *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  v4 = (*(_DWORD *)(a2 + 116) & 0x10) == 0;
  if ((v2 & 0x10) != 0)
    return (v3 & 0x10) != 0 && *(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40);
  return v4;
}

uint64_t CMMsl::GaitCycleSegmentationState::hash_value(CMMsl::GaitCycleSegmentationState *this)
{
  int v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = *((_DWORD *)this + 29);
  if ((v1 & 0x80) != 0)
  {
    v2 = *((double *)this + 8);
    if (v2 == 0.0)
      v2 = 0.0;
    if ((v1 & 0x100000) != 0)
    {
LABEL_3:
      v3 = *((unsigned __int8 *)this + 114);
      if ((v1 & 0x80000) != 0)
        goto LABEL_4;
      goto LABEL_48;
    }
  }
  else
  {
    v2 = 0.0;
    if ((v1 & 0x100000) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((v1 & 0x80000) != 0)
  {
LABEL_4:
    v4 = *((unsigned __int8 *)this + 113);
    if ((v1 & 0x200000) != 0)
      goto LABEL_5;
    goto LABEL_49;
  }
LABEL_48:
  v4 = 0;
  if ((v1 & 0x200000) != 0)
  {
LABEL_5:
    v5 = *((unsigned __int8 *)this + 115);
    if ((v1 & 0x40000) != 0)
      goto LABEL_6;
    goto LABEL_50;
  }
LABEL_49:
  v5 = 0;
  if ((v1 & 0x40000) != 0)
  {
LABEL_6:
    v6 = *((unsigned __int8 *)this + 112);
    if ((v1 & 4) != 0)
      goto LABEL_7;
    goto LABEL_51;
  }
LABEL_50:
  v6 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_7:
    v7 = *((_QWORD *)this + 3);
    if ((v1 & 2) != 0)
      goto LABEL_8;
    goto LABEL_52;
  }
LABEL_51:
  v7 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_8:
    v8 = *((_QWORD *)this + 2);
    if ((v1 & 1) != 0)
      goto LABEL_9;
    goto LABEL_53;
  }
LABEL_52:
  v8 = 0;
  if ((v1 & 1) != 0)
  {
LABEL_9:
    v9 = *((_QWORD *)this + 1);
    if ((v1 & 0x20) != 0)
      goto LABEL_10;
    goto LABEL_54;
  }
LABEL_53:
  v9 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_10:
    v10 = *((_QWORD *)this + 6);
    if ((v1 & 0x40) != 0)
      goto LABEL_11;
    goto LABEL_55;
  }
LABEL_54:
  v10 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_11:
    v11 = *((_QWORD *)this + 7);
    if ((v1 & 0x2000) != 0)
      goto LABEL_12;
LABEL_56:
    v13 = 0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_15;
LABEL_57:
    v15 = 0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_18;
LABEL_58:
    v17 = 0;
    if ((v1 & 0x800) != 0)
      goto LABEL_21;
LABEL_59:
    v19 = 0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_24;
LABEL_60:
    v21 = 0;
    if ((v1 & 0x200) != 0)
      goto LABEL_27;
LABEL_61:
    v23 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_30;
LABEL_62:
    v25 = 0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_33;
LABEL_63:
    v27 = 0;
    if ((v1 & 0x100) != 0)
      goto LABEL_36;
LABEL_64:
    v29 = 0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_39;
LABEL_65:
    v31 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_42;
LABEL_66:
    v32 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_43;
LABEL_67:
    v33 = 0;
    return v3 ^ *(_QWORD *)&v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v13 ^ v15 ^ v17 ^ v19 ^ v21 ^ v23 ^ v25 ^ v27 ^ v29 ^ v31 ^ v32 ^ v33;
  }
LABEL_55:
  v11 = 0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_56;
LABEL_12:
  v12 = *((float *)this + 23);
  v13 = LODWORD(v12);
  if (v12 == 0.0)
    v13 = 0;
  if ((v1 & 0x10000) == 0)
    goto LABEL_57;
LABEL_15:
  v14 = *((float *)this + 26);
  v15 = LODWORD(v14);
  if (v14 == 0.0)
    v15 = 0;
  if ((v1 & 0x1000) == 0)
    goto LABEL_58;
LABEL_18:
  v16 = *((float *)this + 22);
  v17 = LODWORD(v16);
  if (v16 == 0.0)
    v17 = 0;
  if ((v1 & 0x800) == 0)
    goto LABEL_59;
LABEL_21:
  v18 = *((float *)this + 21);
  v19 = LODWORD(v18);
  if (v18 == 0.0)
    v19 = 0;
  if ((v1 & 0x8000) == 0)
    goto LABEL_60;
LABEL_24:
  v20 = *((float *)this + 25);
  v21 = LODWORD(v20);
  if (v20 == 0.0)
    v21 = 0;
  if ((v1 & 0x200) == 0)
    goto LABEL_61;
LABEL_27:
  v22 = *((float *)this + 19);
  v23 = LODWORD(v22);
  if (v22 == 0.0)
    v23 = 0;
  if ((v1 & 0x400) == 0)
    goto LABEL_62;
LABEL_30:
  v24 = *((float *)this + 20);
  v25 = LODWORD(v24);
  if (v24 == 0.0)
    v25 = 0;
  if ((v1 & 0x4000) == 0)
    goto LABEL_63;
LABEL_33:
  v26 = *((float *)this + 24);
  v27 = LODWORD(v26);
  if (v26 == 0.0)
    v27 = 0;
  if ((v1 & 0x100) == 0)
    goto LABEL_64;
LABEL_36:
  v28 = *((float *)this + 18);
  v29 = LODWORD(v28);
  if (v28 == 0.0)
    v29 = 0;
  if ((v1 & 0x20000) == 0)
    goto LABEL_65;
LABEL_39:
  v30 = *((float *)this + 27);
  v31 = LODWORD(v30);
  if (v30 == 0.0)
    v31 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_66;
LABEL_42:
  v32 = *((_QWORD *)this + 4);
  if ((v1 & 0x10) == 0)
    goto LABEL_67;
LABEL_43:
  v33 = *((_QWORD *)this + 5);
  return v3 ^ *(_QWORD *)&v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v13 ^ v15 ^ v17 ^ v19 ^ v21 ^ v23 ^ v25 ^ v27 ^ v29 ^ v31 ^ v32 ^ v33;
}

uint64_t CMMsl::GaitEventsHKResult::GaitEventsHKResult(uint64_t this)
{
  *(_QWORD *)this = &off_25135DAD0;
  *(_DWORD *)(this + 76) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135DAD0;
  *(_DWORD *)(this + 76) = 0;
  return this;
}

void CMMsl::GaitEventsHKResult::~GaitEventsHKResult(CMMsl::GaitEventsHKResult *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::GaitEventsHKResult::GaitEventsHKResult(CMMsl::GaitEventsHKResult *this, const CMMsl::GaitEventsHKResult *a2)
{
  __int16 v2;
  __int16 v3;
  double result;
  char v5;
  char v6;

  *(_QWORD *)this = &off_25135DAD0;
  *((_DWORD *)this + 19) = 0;
  v2 = *((_WORD *)a2 + 38);
  if ((v2 & 4) != 0)
  {
    result = *((double *)a2 + 3);
    v3 = 4;
    *((_WORD *)this + 38) = 4;
    *((double *)this + 3) = result;
    v2 = *((_WORD *)a2 + 38);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 5);
    v3 |= 0x10u;
    *((_WORD *)this + 38) = v3;
    *((double *)this + 5) = result;
    v2 = *((_WORD *)a2 + 38);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    result = *((double *)a2 + 4);
    v3 |= 8u;
    *((_WORD *)this + 38) = v3;
    *((double *)this + 4) = result;
    v2 = *((_WORD *)a2 + 38);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0)
        goto LABEL_9;
      goto LABEL_17;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  result = *((double *)a2 + 6);
  v3 |= 0x20u;
  *((_WORD *)this + 38) = v3;
  *((double *)this + 6) = result;
  v2 = *((_WORD *)a2 + 38);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_18;
  }
LABEL_17:
  result = *((double *)a2 + 1);
  v3 |= 1u;
  *((_WORD *)this + 38) = v3;
  *((double *)this + 1) = result;
  v2 = *((_WORD *)a2 + 38);
  if ((v2 & 0x80) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_19;
  }
LABEL_18:
  result = *((double *)a2 + 8);
  v3 |= 0x80u;
  *((_WORD *)this + 38) = v3;
  *((double *)this + 8) = result;
  v2 = *((_WORD *)a2 + 38);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x200) == 0)
      goto LABEL_12;
    goto LABEL_20;
  }
LABEL_19:
  result = *((double *)a2 + 7);
  v3 |= 0x40u;
  *((_WORD *)this + 38) = v3;
  *((double *)this + 7) = result;
  v2 = *((_WORD *)a2 + 38);
  if ((v2 & 0x200) == 0)
  {
LABEL_12:
    if ((v2 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_21;
  }
LABEL_20:
  v5 = *((_BYTE *)a2 + 73);
  v3 |= 0x200u;
  *((_WORD *)this + 38) = v3;
  *((_BYTE *)this + 73) = v5;
  v2 = *((_WORD *)a2 + 38);
  if ((v2 & 0x100) == 0)
  {
LABEL_13:
    if ((v2 & 2) == 0)
      return result;
LABEL_22:
    result = *((double *)a2 + 2);
    *((_WORD *)this + 38) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
LABEL_21:
  v6 = *((_BYTE *)a2 + 72);
  v3 |= 0x100u;
  *((_WORD *)this + 38) = v3;
  *((_BYTE *)this + 72) = v6;
  if ((*((_WORD *)a2 + 38) & 2) != 0)
    goto LABEL_22;
  return result;
}

uint64_t CMMsl::GaitEventsHKResult::operator=(uint64_t a1, const CMMsl::GaitEventsHKResult *a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char v14;
  char v15;
  int v16;

  if ((const CMMsl::GaitEventsHKResult *)a1 != a2)
  {
    CMMsl::GaitEventsHKResult::GaitEventsHKResult((CMMsl::GaitEventsHKResult *)&v9, a2);
    v3 = *(_DWORD *)(a1 + 76);
    *(_DWORD *)(a1 + 76) = v16;
    v16 = v3;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v11 = v4;
    v5 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v12 = v5;
    v6 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v13;
    v13 = v6;
    LOBYTE(v3) = *(_BYTE *)(a1 + 73);
    *(_BYTE *)(a1 + 73) = v15;
    v15 = v3;
    LOBYTE(v3) = *(_BYTE *)(a1 + 72);
    *(_BYTE *)(a1 + 72) = v14;
    v14 = v3;
    v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v7;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::GaitEventsHKResult *a2, CMMsl::GaitEventsHKResult *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;

  v3 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v3;
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v4;
  v5 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v5;
  v6 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v6;
  v7 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v7;
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v8;
  v9 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v9;
  v10 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v10;
  LOBYTE(v3) = *((_BYTE *)this + 73);
  *((_BYTE *)this + 73) = *((_BYTE *)a2 + 73);
  *((_BYTE *)a2 + 73) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 72);
  *((_BYTE *)this + 72) = *((_BYTE *)a2 + 72);
  *((_BYTE *)a2 + 72) = v3;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::GaitEventsHKResult::GaitEventsHKResult(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135DAD0;
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a2 + 76) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::GaitEventsHKResult::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int16 v4;
  __int16 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  void (**v12)(CMMsl::GaitEventsHKResult *__hidden);
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int16 v17;
  int v18;

  if (a1 != a2)
  {
    v12 = &off_25135DAD0;
    v3 = *(_DWORD *)(a2 + 76);
    *(_DWORD *)(a2 + 76) = 0;
    v4 = *(_WORD *)(a2 + 72);
    v18 = *(_DWORD *)(a1 + 76);
    v14 = *(_OWORD *)(a1 + 24);
    v15 = *(_OWORD *)(a1 + 40);
    v16 = *(_OWORD *)(a1 + 56);
    v5 = *(_WORD *)(a1 + 72);
    *(_WORD *)(a1 + 72) = v4;
    v17 = v5;
    v6 = *(_OWORD *)(a1 + 8);
    v7 = *(_OWORD *)(a2 + 8);
    v8 = *(_OWORD *)(a2 + 24);
    v9 = *(_OWORD *)(a2 + 40);
    v10 = *(_OWORD *)(a2 + 56);
    *(_DWORD *)(a1 + 76) = v3;
    *(_OWORD *)(a1 + 24) = v8;
    *(_OWORD *)(a1 + 40) = v9;
    *(_OWORD *)(a1 + 56) = v10;
    *(_OWORD *)(a1 + 8) = v7;
    v13 = v6;
    PB::Base::~Base((PB::Base *)&v12);
  }
  return a1;
}

uint64_t CMMsl::GaitEventsHKResult::formatText(CMMsl::GaitEventsHKResult *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 38);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "emptyField2", *((double *)this + 1));
    v5 = *((_WORD *)this + 38);
    if ((v5 & 0x100) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((*((_WORD *)this + 38) & 0x100) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "emptyField3");
  v5 = *((_WORD *)this + 38);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "groundContactTime", *((double *)this + 2));
  v5 = *((_WORD *)this + 38);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "hasValidGroundContactTime");
  v5 = *((_WORD *)this + 38);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "leftGroundContactTime", *((double *)this + 3));
  v5 = *((_WORD *)this + 38);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "leftGroundContactTimePercentage", *((double *)this + 4));
  v5 = *((_WORD *)this + 38);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "rightGroundContactTime", *((double *)this + 5));
  v5 = *((_WORD *)this + 38);
  if ((v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0)
      goto LABEL_10;
LABEL_21:
    PB::TextFormatter::format(a2, "windowEndTime", *((double *)this + 7));
    if ((*((_WORD *)this + 38) & 0x80) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_11;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "rightGroundContactTimePercentage", *((double *)this + 6));
  v5 = *((_WORD *)this + 38);
  if ((v5 & 0x40) != 0)
    goto LABEL_21;
LABEL_10:
  if ((v5 & 0x80) != 0)
LABEL_11:
    PB::TextFormatter::format(a2, "windowStartTime", *((double *)this + 8));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GaitEventsHKResult::readFrom(CMMsl::GaitEventsHKResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v20;
  BOOL v21;
  int v22;
  BOOL v23;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_57;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 38) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_48;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_56;
      case 2u:
        *((_WORD *)this + 38) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_48;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_56;
      case 3u:
        *((_WORD *)this + 38) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_48;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_56;
      case 4u:
        *((_WORD *)this + 38) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_48;
        *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_56;
      case 5u:
        *((_WORD *)this + 38) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_48;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_56;
      case 6u:
        *((_WORD *)this + 38) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_48;
        *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_56;
      case 7u:
        *((_WORD *)this + 38) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_48;
        *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_56;
      case 8u:
        *((_WORD *)this + 38) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v21 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v21 = v20 != 0;
        }
        *((_BYTE *)this + 73) = v21;
        break;
      case 9u:
        *((_WORD *)this + 38) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v23 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v22 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v23 = v22 != 0;
        }
        *((_BYTE *)this + 72) = v23;
        break;
      case 0xAu:
        *((_WORD *)this + 38) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
        {
LABEL_48:
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_56:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_57:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::GaitEventsHKResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 76);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24));
    v4 = *(_WORD *)(v3 + 76);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x200) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2);
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 16));
  }
LABEL_20:
  this = PB::Writer::write(a2);
  if ((*(_WORD *)(v3 + 76) & 2) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 16));
  return this;
}

BOOL CMMsl::GaitEventsHKResult::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 76);
  v3 = *(_WORD *)(a2 + 76);
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 76) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 76) & 0x200) == 0 || *(unsigned __int8 *)(a1 + 73) != *(unsigned __int8 *)(a2 + 73))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 76) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 76) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 76) & 0x100) == 0 || *(unsigned __int8 *)(a1 + 72) != *(unsigned __int8 *)(a2 + 72))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 76) & 0x100) != 0)
  {
    return 0;
  }
  v4 = (v3 & 2) == 0;
  if ((v2 & 2) != 0)
    return (v3 & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  return v4;
}

uint64_t CMMsl::GaitEventsHKResult::hash_value(CMMsl::GaitEventsHKResult *this)
{
  __int16 v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  double v11;

  v1 = *((_WORD *)this + 38);
  if ((v1 & 4) == 0)
  {
    v2 = 0.0;
    if ((v1 & 0x10) != 0)
      goto LABEL_3;
LABEL_29:
    v3 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_6;
LABEL_30:
    v4 = 0.0;
    if ((v1 & 0x20) != 0)
      goto LABEL_9;
LABEL_31:
    v5 = 0.0;
    if ((v1 & 1) != 0)
      goto LABEL_12;
LABEL_32:
    v6 = 0.0;
    if ((v1 & 0x80) != 0)
      goto LABEL_15;
LABEL_33:
    v7 = 0.0;
    if ((v1 & 0x40) != 0)
      goto LABEL_18;
LABEL_34:
    v8 = 0.0;
    if ((*((_WORD *)this + 38) & 0x200) != 0)
      goto LABEL_21;
    goto LABEL_35;
  }
  v2 = *((double *)this + 3);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 0x10) == 0)
    goto LABEL_29;
LABEL_3:
  v3 = *((double *)this + 5);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_30;
LABEL_6:
  v4 = *((double *)this + 4);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 0x20) == 0)
    goto LABEL_31;
LABEL_9:
  v5 = *((double *)this + 6);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_32;
LABEL_12:
  v6 = *((double *)this + 1);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((v1 & 0x80) == 0)
    goto LABEL_33;
LABEL_15:
  v7 = *((double *)this + 8);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((v1 & 0x40) == 0)
    goto LABEL_34;
LABEL_18:
  v8 = *((double *)this + 7);
  if (v8 == 0.0)
    v8 = 0.0;
  if ((*((_WORD *)this + 38) & 0x200) != 0)
  {
LABEL_21:
    v9 = *((unsigned __int8 *)this + 73);
    if ((*((_WORD *)this + 38) & 0x100) != 0)
      goto LABEL_22;
    goto LABEL_36;
  }
LABEL_35:
  v9 = 0;
  if ((*((_WORD *)this + 38) & 0x100) != 0)
  {
LABEL_22:
    v10 = *((unsigned __int8 *)this + 72);
    if ((v1 & 2) != 0)
      goto LABEL_23;
LABEL_37:
    v11 = 0.0;
    return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ v9 ^ v10 ^ *(_QWORD *)&v11;
  }
LABEL_36:
  v10 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_37;
LABEL_23:
  v11 = *((double *)this + 2);
  if (v11 == 0.0)
    v11 = 0.0;
  return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ v9 ^ v10 ^ *(_QWORD *)&v11;
}

uint64_t CMMsl::GaitEventsModelOutput::GaitEventsModelOutput(uint64_t this)
{
  *(_QWORD *)this = &off_25135DB08;
  *(_DWORD *)(this + 88) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135DB08;
  *(_DWORD *)(this + 88) = 0;
  return this;
}

void CMMsl::GaitEventsModelOutput::~GaitEventsModelOutput(CMMsl::GaitEventsModelOutput *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::GaitEventsModelOutput::GaitEventsModelOutput(CMMsl::GaitEventsModelOutput *this, const CMMsl::GaitEventsModelOutput *a2)
{
  __int16 v2;
  __int16 v3;
  char v4;
  double result;
  int v6;
  char v7;
  char v8;
  int v9;
  int v10;

  *(_QWORD *)this = &off_25135DB08;
  *((_DWORD *)this + 22) = 0;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x800) != 0)
  {
    v4 = *((_BYTE *)a2 + 84);
    v3 = 2048;
    *((_WORD *)this + 44) = 2048;
    *((_BYTE *)this + 84) = v4;
    v2 = *((_WORD *)a2 + 44);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 1) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 1);
    v3 |= 1u;
    *((_WORD *)this + 44) = v3;
    *((double *)this + 1) = result;
    v2 = *((_WORD *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    result = *((double *)a2 + 2);
    v3 |= 2u;
    *((_WORD *)this + 44) = v3;
    *((double *)this + 2) = result;
    v2 = *((_WORD *)a2 + 44);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        goto LABEL_9;
      goto LABEL_21;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  result = *((double *)a2 + 6);
  v3 |= 0x20u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 6) = result;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  result = *((double *)a2 + 4);
  v3 |= 8u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 4) = result;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  result = *((double *)a2 + 5);
  v3 |= 0x10u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 5) = result;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  result = *((double *)a2 + 8);
  v3 |= 0x80u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 8) = result;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x40) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_25;
  }
LABEL_24:
  result = *((double *)a2 + 7);
  v3 |= 0x40u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 7) = result;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_26;
  }
LABEL_25:
  v6 = *((_DWORD *)a2 + 19);
  v3 |= 0x200u;
  *((_WORD *)this + 44) = v3;
  *((_DWORD *)this + 19) = v6;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x1000) == 0)
  {
LABEL_14:
    if ((v2 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_27;
  }
LABEL_26:
  v7 = *((_BYTE *)a2 + 85);
  v3 |= 0x1000u;
  *((_WORD *)this + 44) = v3;
  *((_BYTE *)this + 85) = v7;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x2000) == 0)
  {
LABEL_15:
    if ((v2 & 0x400) == 0)
      goto LABEL_16;
    goto LABEL_28;
  }
LABEL_27:
  v8 = *((_BYTE *)a2 + 86);
  v3 |= 0x2000u;
  *((_WORD *)this + 44) = v3;
  *((_BYTE *)this + 86) = v8;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x400) == 0)
  {
LABEL_16:
    if ((v2 & 0x100) == 0)
      goto LABEL_17;
    goto LABEL_29;
  }
LABEL_28:
  v9 = *((_DWORD *)a2 + 20);
  v3 |= 0x400u;
  *((_WORD *)this + 44) = v3;
  *((_DWORD *)this + 20) = v9;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x100) == 0)
  {
LABEL_17:
    if ((v2 & 4) == 0)
      return result;
LABEL_30:
    result = *((double *)a2 + 3);
    *((_WORD *)this + 44) = v3 | 4;
    *((double *)this + 3) = result;
    return result;
  }
LABEL_29:
  v10 = *((_DWORD *)a2 + 18);
  v3 |= 0x100u;
  *((_WORD *)this + 44) = v3;
  *((_DWORD *)this + 18) = v10;
  if ((*((_WORD *)a2 + 44) & 4) != 0)
    goto LABEL_30;
  return result;
}

CMMsl *CMMsl::GaitEventsModelOutput::operator=(CMMsl *a1, const CMMsl::GaitEventsModelOutput *a2)
{
  CMMsl::GaitEventsModelOutput *v3;
  _BYTE v5[96];

  if (a1 != a2)
  {
    CMMsl::GaitEventsModelOutput::GaitEventsModelOutput((CMMsl::GaitEventsModelOutput *)v5, a2);
    CMMsl::swap(a1, (CMMsl::GaitEventsModelOutput *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::GaitEventsModelOutput *a2, CMMsl::GaitEventsModelOutput *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  double result;

  v3 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 84);
  *((_BYTE *)this + 84) = *((_BYTE *)a2 + 84);
  *((_BYTE *)a2 + 84) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v6;
  v7 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v7;
  v8 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v8;
  v9 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v9;
  v10 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v10;
  v11 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v11;
  LOBYTE(v11) = *((_BYTE *)this + 85);
  *((_BYTE *)this + 85) = *((_BYTE *)a2 + 85);
  *((_BYTE *)a2 + 85) = v11;
  LOBYTE(v11) = *((_BYTE *)this + 86);
  *((_BYTE *)this + 86) = *((_BYTE *)a2 + 86);
  *((_BYTE *)a2 + 86) = v11;
  v12 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v12;
  v13 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v13;
  result = *((double *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((double *)a2 + 3) = result;
  return result;
}

double CMMsl::GaitEventsModelOutput::GaitEventsModelOutput(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135DB08;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a2 + 88) = 0;
  *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_BYTE *)(a1 + 85) = *(_BYTE *)(a2 + 85);
  *(_BYTE *)(a1 + 86) = *(_BYTE *)(a2 + 86);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  return result;
}

CMMsl *CMMsl::GaitEventsModelOutput::operator=(CMMsl *this, uint64_t a2, CMMsl::GaitEventsModelOutput *a3)
{
  void (**v5)(CMMsl::GaitEventsModelOutput *__hidden);
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  char v12;
  __int16 v13;
  int v14;

  if (this != (CMMsl *)a2)
  {
    v5 = &off_25135DB08;
    v14 = *(_DWORD *)(a2 + 88);
    *(_DWORD *)(a2 + 88) = 0;
    v12 = *(_BYTE *)(a2 + 84);
    v6 = *(_OWORD *)(a2 + 8);
    v8 = *(_OWORD *)(a2 + 40);
    v9 = *(_OWORD *)(a2 + 56);
    v13 = *(_WORD *)(a2 + 85);
    v11 = *(_DWORD *)(a2 + 80);
    v10 = *(_QWORD *)(a2 + 72);
    v7 = *(_OWORD *)(a2 + 24);
    CMMsl::swap(this, (CMMsl::GaitEventsModelOutput *)&v5, a3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return this;
}

uint64_t CMMsl::GaitEventsModelOutput::formatText(CMMsl::GaitEventsModelOutput *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x100) != 0)
  {
    PB::TextFormatter::format(a2, "crownOrientation");
    v5 = *((_WORD *)this + 44);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "groundContactTime", *((double *)this + 1));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x800) == 0)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "initialContactTime", *((double *)this + 2));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x800) == 0)
  {
LABEL_5:
    if ((v5 & 0x1000) == 0)
      goto LABEL_6;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "isSuccessful");
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x1000) == 0)
  {
LABEL_6:
    if ((v5 & 0x2000) == 0)
      goto LABEL_7;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "isValidSide");
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x2000) == 0)
  {
LABEL_7:
    if ((v5 & 4) == 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "isValidToeOff");
  v5 = *((_WORD *)this + 44);
  if ((v5 & 4) == 0)
  {
LABEL_8:
    if ((v5 & 8) == 0)
      goto LABEL_9;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "meanRotationZ", *((double *)this + 3));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 8) == 0)
  {
LABEL_9:
    if ((v5 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "relativeInitialContactTime", *((double *)this + 4));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "relativeToeOffTime", *((double *)this + 5));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "stepSide");
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_12:
    if ((v5 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "toeOffTime", *((double *)this + 6));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x40) == 0)
  {
LABEL_13:
    if ((v5 & 0x80) == 0)
      goto LABEL_14;
LABEL_29:
    PB::TextFormatter::format(a2, "windowStartTime", *((double *)this + 8));
    if ((*((_WORD *)this + 44) & 0x400) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_15;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "windowEndTime", *((double *)this + 7));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x80) != 0)
    goto LABEL_29;
LABEL_14:
  if ((v5 & 0x400) != 0)
LABEL_15:
    PB::TextFormatter::format(a2, "wristOrientation");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GaitEventsModelOutput::readFrom(CMMsl::GaitEventsModelOutput *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  char v27;
  int v28;
  BOOL v29;
  int v30;
  BOOL v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  char v43;
  char v44;
  unsigned int v45;
  unint64_t v46;
  char v47;
  char v48;
  unsigned int v49;
  unint64_t v50;
  char v51;
  char v52;
  unsigned int v53;
  unint64_t v54;
  char v55;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_118;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 44) |= 0x800u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v21 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v21 = v20 != 0;
        }
        *((_BYTE *)this + 84) = v21;
        break;
      case 2u:
        *((_WORD *)this + 44) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_73;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_102;
      case 3u:
        *((_WORD *)this + 44) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_73;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_102;
      case 4u:
        *((_WORD *)this + 44) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_73;
        *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_102;
      case 5u:
        *((_WORD *)this + 44) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_73;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_102;
      case 6u:
        *((_WORD *)this + 44) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_73;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_102;
      case 7u:
        *((_WORD *)this + 44) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_73;
        *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_102;
      case 8u:
        *((_WORD *)this + 44) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_73;
        *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_102;
      case 9u:
        *((_WORD *)this + 44) |= 0x200u;
        v22 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v23 = *(_QWORD *)a2;
        if (v22 > 0xFFFFFFFFFFFFFFF5 || v22 + 10 > v2)
        {
          v44 = 0;
          v45 = 0;
          v26 = 0;
          if (v2 <= v22)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v22)
            {
              LODWORD(v26) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_107;
            }
            v46 = v22++;
            v47 = *(_BYTE *)(v23 + v46);
            *((_QWORD *)a2 + 1) = v22;
            v26 |= (unint64_t)(v47 & 0x7F) << v44;
            if ((v47 & 0x80) == 0)
              break;
            v44 += 7;
            v14 = v45++ > 8;
            if (v14)
            {
              LODWORD(v26) = 0;
LABEL_106:
              v2 = v46 + 1;
              goto LABEL_107;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v26) = 0;
          goto LABEL_106;
        }
        v24 = 0;
        v25 = 0;
        v26 = 0;
        do
        {
          v2 = v22 + 1;
          *((_QWORD *)a2 + 1) = v22 + 1;
          v27 = *(_BYTE *)(v23 + v22);
          v26 |= (unint64_t)(v27 & 0x7F) << v24;
          if ((v27 & 0x80) == 0)
            goto LABEL_107;
          v24 += 7;
          v22 = v2;
          v14 = v25++ > 8;
        }
        while (!v14);
        LODWORD(v26) = 0;
LABEL_107:
        *((_DWORD *)this + 19) = v26;
        break;
      case 0xAu:
        *((_WORD *)this + 44) |= 0x1000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v29 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v28 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v29 = v28 != 0;
        }
        *((_BYTE *)this + 85) = v29;
        break;
      case 0xBu:
        *((_WORD *)this + 44) |= 0x2000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v31 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v30 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v31 = v30 != 0;
        }
        *((_BYTE *)this + 86) = v31;
        break;
      case 0xCu:
        *((_WORD *)this + 44) |= 0x400u;
        v32 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v33 = *(_QWORD *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
        {
          v48 = 0;
          v49 = 0;
          v36 = 0;
          if (v2 <= v32)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v32)
            {
              LODWORD(v36) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_112;
            }
            v50 = v32++;
            v51 = *(_BYTE *)(v33 + v50);
            *((_QWORD *)a2 + 1) = v32;
            v36 |= (unint64_t)(v51 & 0x7F) << v48;
            if ((v51 & 0x80) == 0)
              break;
            v48 += 7;
            v14 = v49++ > 8;
            if (v14)
            {
              LODWORD(v36) = 0;
LABEL_111:
              v2 = v50 + 1;
              goto LABEL_112;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v36) = 0;
          goto LABEL_111;
        }
        v34 = 0;
        v35 = 0;
        v36 = 0;
        do
        {
          v2 = v32 + 1;
          *((_QWORD *)a2 + 1) = v32 + 1;
          v37 = *(_BYTE *)(v33 + v32);
          v36 |= (unint64_t)(v37 & 0x7F) << v34;
          if ((v37 & 0x80) == 0)
            goto LABEL_112;
          v34 += 7;
          v32 = v2;
          v14 = v35++ > 8;
        }
        while (!v14);
        LODWORD(v36) = 0;
LABEL_112:
        *((_DWORD *)this + 20) = v36;
        break;
      case 0xDu:
        *((_WORD *)this + 44) |= 0x100u;
        v38 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v39 = *(_QWORD *)a2;
        if (v38 > 0xFFFFFFFFFFFFFFF5 || v38 + 10 > v2)
        {
          v52 = 0;
          v53 = 0;
          v42 = 0;
          if (v2 <= v38)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v38)
            {
              LODWORD(v42) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_117;
            }
            v54 = v38++;
            v55 = *(_BYTE *)(v39 + v54);
            *((_QWORD *)a2 + 1) = v38;
            v42 |= (unint64_t)(v55 & 0x7F) << v52;
            if ((v55 & 0x80) == 0)
              break;
            v52 += 7;
            v14 = v53++ > 8;
            if (v14)
            {
              LODWORD(v42) = 0;
LABEL_116:
              v2 = v54 + 1;
              goto LABEL_117;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v42) = 0;
          goto LABEL_116;
        }
        v40 = 0;
        v41 = 0;
        v42 = 0;
        do
        {
          v2 = v38 + 1;
          *((_QWORD *)a2 + 1) = v38 + 1;
          v43 = *(_BYTE *)(v39 + v38);
          v42 |= (unint64_t)(v43 & 0x7F) << v40;
          if ((v43 & 0x80) == 0)
            goto LABEL_117;
          v40 += 7;
          v38 = v2;
          v14 = v41++ > 8;
        }
        while (!v14);
        LODWORD(v42) = 0;
LABEL_117:
        *((_DWORD *)this + 18) = v42;
        break;
      case 0xEu:
        *((_WORD *)this + 44) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_102:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_73:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_118:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::GaitEventsModelOutput::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 88);
  if ((v4 & 0x800) != 0)
  {
    this = PB::Writer::write(a2);
    v4 = *(_WORD *)(v3 + 88);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v4 & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x1000) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x1000) == 0)
  {
LABEL_11:
    if ((v4 & 0x2000) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x2000) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x400) == 0)
  {
LABEL_13:
    if ((v4 & 0x100) == 0)
      goto LABEL_14;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x100) == 0)
  {
LABEL_14:
    if ((v4 & 4) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 24));
  }
LABEL_28:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_WORD *)(v3 + 88) & 4) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 24));
  return this;
}

BOOL CMMsl::GaitEventsModelOutput::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 88);
  v3 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x800) == 0 || *(unsigned __int8 *)(a1 + 84) != *(unsigned __int8 *)(a2 + 84))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 88) & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 88) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x200) == 0 || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 88) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 88) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x1000) == 0 || *(unsigned __int8 *)(a1 + 85) != *(unsigned __int8 *)(a2 + 85))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 88) & 0x1000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 88) & 0x2000) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x2000) == 0 || *(unsigned __int8 *)(a1 + 86) != *(unsigned __int8 *)(a2 + 86))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 88) & 0x2000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 88) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x400) == 0 || *(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 88) & 0x400) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 88) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x100) == 0 || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 72))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 88) & 0x100) != 0)
  {
    return 0;
  }
  v4 = (v3 & 4) == 0;
  if ((v2 & 4) != 0)
    return (v3 & 4) != 0 && *(double *)(a1 + 24) == *(double *)(a2 + 24);
  return v4;
}

uint64_t CMMsl::GaitEventsModelOutput::hash_value(CMMsl::GaitEventsModelOutput *this)
{
  __int16 v1;
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;

  v1 = *((_WORD *)this + 44);
  if ((v1 & 0x800) == 0)
  {
    v2 = 0;
    if ((v1 & 1) != 0)
      goto LABEL_3;
LABEL_33:
    v3 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_6;
LABEL_34:
    v4 = 0.0;
    if ((v1 & 0x20) != 0)
      goto LABEL_9;
LABEL_35:
    v5 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_12;
LABEL_36:
    v6 = 0.0;
    if ((v1 & 0x10) != 0)
      goto LABEL_15;
LABEL_37:
    v7 = 0.0;
    if ((v1 & 0x80) != 0)
      goto LABEL_18;
LABEL_38:
    v8 = 0.0;
    if ((v1 & 0x40) != 0)
      goto LABEL_21;
LABEL_39:
    v9 = 0.0;
    if ((*((_WORD *)this + 44) & 0x200) != 0)
      goto LABEL_24;
    goto LABEL_40;
  }
  v2 = *((unsigned __int8 *)this + 84);
  if ((v1 & 1) == 0)
    goto LABEL_33;
LABEL_3:
  v3 = *((double *)this + 1);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_34;
LABEL_6:
  v4 = *((double *)this + 2);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 0x20) == 0)
    goto LABEL_35;
LABEL_9:
  v5 = *((double *)this + 6);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_36;
LABEL_12:
  v6 = *((double *)this + 4);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((v1 & 0x10) == 0)
    goto LABEL_37;
LABEL_15:
  v7 = *((double *)this + 5);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((v1 & 0x80) == 0)
    goto LABEL_38;
LABEL_18:
  v8 = *((double *)this + 8);
  if (v8 == 0.0)
    v8 = 0.0;
  if ((v1 & 0x40) == 0)
    goto LABEL_39;
LABEL_21:
  v9 = *((double *)this + 7);
  if (v9 == 0.0)
    v9 = 0.0;
  if ((*((_WORD *)this + 44) & 0x200) != 0)
  {
LABEL_24:
    v10 = *((unsigned int *)this + 19);
    if ((*((_WORD *)this + 44) & 0x1000) != 0)
      goto LABEL_25;
    goto LABEL_41;
  }
LABEL_40:
  v10 = 0;
  if ((*((_WORD *)this + 44) & 0x1000) != 0)
  {
LABEL_25:
    v11 = *((unsigned __int8 *)this + 85);
    if ((*((_WORD *)this + 44) & 0x2000) != 0)
      goto LABEL_26;
    goto LABEL_42;
  }
LABEL_41:
  v11 = 0;
  if ((*((_WORD *)this + 44) & 0x2000) != 0)
  {
LABEL_26:
    v12 = *((unsigned __int8 *)this + 86);
    if ((*((_WORD *)this + 44) & 0x400) != 0)
      goto LABEL_27;
    goto LABEL_43;
  }
LABEL_42:
  v12 = 0;
  if ((*((_WORD *)this + 44) & 0x400) != 0)
  {
LABEL_27:
    v13 = *((int *)this + 20);
    if ((*((_WORD *)this + 44) & 0x100) != 0)
      goto LABEL_28;
    goto LABEL_44;
  }
LABEL_43:
  v13 = 0;
  if ((*((_WORD *)this + 44) & 0x100) != 0)
  {
LABEL_28:
    v14 = *((int *)this + 18);
    if ((v1 & 4) != 0)
      goto LABEL_29;
LABEL_45:
    v15 = 0.0;
    return *(_QWORD *)&v3 ^ v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ *(_QWORD *)&v15;
  }
LABEL_44:
  v14 = 0;
  if ((v1 & 4) == 0)
    goto LABEL_45;
LABEL_29:
  v15 = *((double *)this + 3);
  if (v15 == 0.0)
    v15 = 0.0;
  return *(_QWORD *)&v3 ^ v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ *(_QWORD *)&v15;
}

uint64_t CMMsl::GaitEventsStrideAggregation::GaitEventsStrideAggregation(uint64_t this)
{
  *(_QWORD *)this = &off_25135DB40;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135DB40;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

void CMMsl::GaitEventsStrideAggregation::~GaitEventsStrideAggregation(CMMsl::GaitEventsStrideAggregation *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::GaitEventsStrideAggregation::GaitEventsStrideAggregation(CMMsl::GaitEventsStrideAggregation *this, const CMMsl::GaitEventsStrideAggregation *a2)
{
  char v2;
  char v3;
  char v4;
  double result;
  int v6;

  *(_QWORD *)this = &off_25135DB40;
  *((_DWORD *)this + 12) = 0;
  v2 = *((_BYTE *)a2 + 48);
  if ((v2 & 0x20) != 0)
  {
    v4 = *((_BYTE *)a2 + 44);
    v3 = 32;
    *((_BYTE *)this + 48) = 32;
    *((_BYTE *)this + 44) = v4;
    v2 = *((_BYTE *)a2 + 48);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 48) & 1) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 1);
    v3 |= 1u;
    *((_BYTE *)this + 48) = v3;
    *((double *)this + 1) = result;
    v2 = *((_BYTE *)a2 + 48);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    result = *((double *)a2 + 2);
    v3 |= 2u;
    *((_BYTE *)this + 48) = v3;
    *((double *)this + 2) = result;
    v2 = *((_BYTE *)a2 + 48);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_13;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  result = *((double *)a2 + 3);
  v3 |= 4u;
  *((_BYTE *)this + 48) = v3;
  *((double *)this + 3) = result;
  v2 = *((_BYTE *)a2 + 48);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0)
      return result;
LABEL_14:
    result = *((double *)a2 + 4);
    *((_BYTE *)this + 48) = v3 | 8;
    *((double *)this + 4) = result;
    return result;
  }
LABEL_13:
  v6 = *((_DWORD *)a2 + 10);
  v3 |= 0x10u;
  *((_BYTE *)this + 48) = v3;
  *((_DWORD *)this + 10) = v6;
  if ((*((_BYTE *)a2 + 48) & 8) != 0)
    goto LABEL_14;
  return result;
}

uint64_t CMMsl::GaitEventsStrideAggregation::operator=(uint64_t a1, const CMMsl::GaitEventsStrideAggregation *a2)
{
  int v3;
  __int128 v4;
  int v5;
  __int128 v6;
  _BYTE v8[8];
  __int128 v9;
  __int128 v10;
  int v11;
  char v12;
  int v13;

  if ((const CMMsl::GaitEventsStrideAggregation *)a1 != a2)
  {
    CMMsl::GaitEventsStrideAggregation::GaitEventsStrideAggregation((CMMsl::GaitEventsStrideAggregation *)v8, a2);
    v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v13;
    v13 = v3;
    LOBYTE(v3) = *(_BYTE *)(a1 + 44);
    *(_BYTE *)(a1 + 44) = v12;
    v12 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v5 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v11;
    v11 = v5;
    v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    v9 = v4;
    v10 = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::GaitEventsStrideAggregation *a2, CMMsl::GaitEventsStrideAggregation *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  double result;

  v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 44);
  *((_BYTE *)this + 44) = *((_BYTE *)a2 + 44);
  *((_BYTE *)a2 + 44) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  v7 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v7;
  result = *((double *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((double *)a2 + 4) = result;
  return result;
}

double CMMsl::GaitEventsStrideAggregation::GaitEventsStrideAggregation(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135DB40;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135DB40;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  return result;
}

uint64_t CMMsl::GaitEventsStrideAggregation::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  int v5;
  char v6;
  __int128 v7;
  __int128 v8;
  int v9;
  __int128 v10;
  __int128 v11;
  void (**v13)(CMMsl::GaitEventsStrideAggregation *__hidden);
  __int128 v14;
  __int128 v15;
  int v16;
  char v17;
  int v18;

  if (a1 != a2)
  {
    v13 = &off_25135DB40;
    v3 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a2 + 48) = 0;
    v4 = *(_BYTE *)(a2 + 44);
    v5 = *(_DWORD *)(a2 + 40);
    v18 = *(_DWORD *)(a1 + 48);
    v6 = *(_BYTE *)(a1 + 44);
    *(_BYTE *)(a1 + 44) = v4;
    v17 = v6;
    v7 = *(_OWORD *)(a1 + 8);
    v8 = *(_OWORD *)(a2 + 8);
    v9 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v5;
    v16 = v9;
    v10 = *(_OWORD *)(a1 + 24);
    v11 = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 48) = v3;
    *(_OWORD *)(a1 + 8) = v8;
    *(_OWORD *)(a1 + 24) = v11;
    v14 = v7;
    v15 = v10;
    PB::Base::~Base((PB::Base *)&v13);
  }
  return a1;
}

uint64_t CMMsl::GaitEventsStrideAggregation::formatText(CMMsl::GaitEventsStrideAggregation *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 48);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "groundContactTime", *((double *)this + 1));
    v5 = *((_BYTE *)this + 48);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*((_BYTE *)this + 48) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "initialContactTime", *((double *)this + 2));
  v5 = *((_BYTE *)this + 48);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "isSuccessful");
  v5 = *((_BYTE *)this + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(a2, "toeOffTime", *((double *)this + 3));
    if ((*((_BYTE *)this + 48) & 8) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "stepSide");
  v5 = *((_BYTE *)this + 48);
  if ((v5 & 4) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 8) != 0)
LABEL_7:
    PB::TextFormatter::format(a2, "windowStartTime", *((double *)this + 4));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GaitEventsStrideAggregation::readFrom(CMMsl::GaitEventsStrideAggregation *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  char v27;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_60;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 48) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v21 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v21 = v20 != 0;
        }
        *((_BYTE *)this + 44) = v21;
        break;
      case 2u:
        *((_BYTE *)this + 48) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_43;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_54;
      case 3u:
        *((_BYTE *)this + 48) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_43;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_54;
      case 4u:
        *((_BYTE *)this + 48) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_43;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_54;
      case 5u:
        *((_BYTE *)this + 48) |= 0x10u;
        v22 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v23 = *(_QWORD *)a2;
        if (v22 > 0xFFFFFFFFFFFFFFF5 || v22 + 10 > v2)
        {
          v28 = 0;
          v29 = 0;
          v26 = 0;
          if (v2 <= v22)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v22)
            {
              LODWORD(v26) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_59;
            }
            v30 = v22++;
            v31 = *(_BYTE *)(v23 + v30);
            *((_QWORD *)a2 + 1) = v22;
            v26 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v26) = 0;
LABEL_58:
              v2 = v30 + 1;
              goto LABEL_59;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v26) = 0;
          goto LABEL_58;
        }
        v24 = 0;
        v25 = 0;
        v26 = 0;
        do
        {
          v2 = v22 + 1;
          *((_QWORD *)a2 + 1) = v22 + 1;
          v27 = *(_BYTE *)(v23 + v22);
          v26 |= (unint64_t)(v27 & 0x7F) << v24;
          if ((v27 & 0x80) == 0)
            goto LABEL_59;
          v24 += 7;
          v22 = v2;
          v14 = v25++ > 8;
        }
        while (!v14);
        LODWORD(v26) = 0;
LABEL_59:
        *((_DWORD *)this + 10) = v26;
        break;
      case 6u:
        *((_BYTE *)this + 48) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_54:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_43:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_60:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::GaitEventsStrideAggregation::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 48);
  if ((v4 & 0x20) != 0)
  {
    this = PB::Writer::write(a2);
    v4 = *(_BYTE *)(v3 + 48);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(this + 48) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 32));
  }
LABEL_12:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_BYTE *)(v3 + 48) & 8) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 32));
  return this;
}

BOOL CMMsl::GaitEventsStrideAggregation::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 48) & 0x20) != 0)
  {
    if ((*(_BYTE *)(a2 + 48) & 0x20) == 0 || *(unsigned __int8 *)(a1 + 44) != *(unsigned __int8 *)(a2 + 44))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 48) & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 48) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 48) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 48) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 48) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 48) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 48) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 48) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 48) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 48) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 48) & 0x10) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 48) & 0x10) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 48) & 8) == 0;
  if ((*(_BYTE *)(a1 + 48) & 8) != 0)
    return (*(_BYTE *)(a2 + 48) & 8) != 0 && *(double *)(a1 + 32) == *(double *)(a2 + 32);
  return v2;
}

uint64_t CMMsl::GaitEventsStrideAggregation::hash_value(CMMsl::GaitEventsStrideAggregation *this)
{
  uint64_t v1;
  double v2;
  double v3;
  double v4;
  uint64_t v5;
  double v6;

  if ((*((_BYTE *)this + 48) & 0x20) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 48) & 1) != 0)
      goto LABEL_3;
LABEL_17:
    v2 = 0.0;
    if ((*((_BYTE *)this + 48) & 2) != 0)
      goto LABEL_6;
LABEL_18:
    v3 = 0.0;
    if ((*((_BYTE *)this + 48) & 4) != 0)
      goto LABEL_9;
LABEL_19:
    v4 = 0.0;
    if ((*((_BYTE *)this + 48) & 0x10) != 0)
      goto LABEL_12;
    goto LABEL_20;
  }
  v1 = *((unsigned __int8 *)this + 44);
  if ((*((_BYTE *)this + 48) & 1) == 0)
    goto LABEL_17;
LABEL_3:
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 48) & 2) == 0)
    goto LABEL_18;
LABEL_6:
  v3 = *((double *)this + 2);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((*((_BYTE *)this + 48) & 4) == 0)
    goto LABEL_19;
LABEL_9:
  v4 = *((double *)this + 3);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((*((_BYTE *)this + 48) & 0x10) != 0)
  {
LABEL_12:
    v5 = *((unsigned int *)this + 10);
    if ((*((_BYTE *)this + 48) & 8) != 0)
      goto LABEL_13;
LABEL_21:
    v6 = 0.0;
    return *(_QWORD *)&v2 ^ v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4 ^ v5 ^ *(_QWORD *)&v6;
  }
LABEL_20:
  v5 = 0;
  if ((*((_BYTE *)this + 48) & 8) == 0)
    goto LABEL_21;
LABEL_13:
  v6 = *((double *)this + 4);
  if (v6 == 0.0)
    v6 = 0.0;
  return *(_QWORD *)&v2 ^ v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4 ^ v5 ^ *(_QWORD *)&v6;
}

uint64_t CMMsl::GeomagneticData::GeomagneticData(uint64_t this)
{
  *(_QWORD *)this = &off_25135DB78;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135DB78;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

void CMMsl::GeomagneticData::~GeomagneticData(CMMsl::GeomagneticData *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::GeomagneticData::GeomagneticData(CMMsl::GeomagneticData *this, const CMMsl::GeomagneticData *a2)
{
  __int16 v2;
  __int16 v3;
  float result;

  *(_QWORD *)this = &off_25135DB78;
  *((_DWORD *)this + 13) = 0;
  v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x20) != 0)
  {
    result = *((float *)a2 + 7);
    v3 = 32;
    *((_WORD *)this + 26) = 32;
    *((float *)this + 7) = result;
    v2 = *((_WORD *)a2 + 26);
    if ((v2 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x40) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 8);
    v3 |= 0x40u;
    *((_WORD *)this + 26) = v3;
    *((float *)this + 8) = result;
    v2 = *((_WORD *)a2 + 26);
  }
LABEL_6:
  if ((v2 & 1) != 0)
  {
    result = *((float *)a2 + 2);
    v3 |= 1u;
    *((_WORD *)this + 26) = v3;
    *((float *)this + 2) = result;
    v2 = *((_WORD *)a2 + 26);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x100) == 0)
        goto LABEL_9;
      goto LABEL_18;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  result = *((float *)a2 + 3);
  v3 |= 2u;
  *((_WORD *)this + 26) = v3;
  *((float *)this + 3) = result;
  v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x100) == 0)
  {
LABEL_9:
    if ((v2 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  result = *((float *)a2 + 10);
  v3 |= 0x100u;
  *((_WORD *)this + 26) = v3;
  *((float *)this + 10) = result;
  v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x200) == 0)
  {
LABEL_10:
    if ((v2 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  result = *((float *)a2 + 11);
  v3 |= 0x200u;
  *((_WORD *)this + 26) = v3;
  *((float *)this + 11) = result;
  v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x400) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_21;
  }
LABEL_20:
  result = *((float *)a2 + 12);
  v3 |= 0x400u;
  *((_WORD *)this + 26) = v3;
  *((float *)this + 12) = result;
  v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x80) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  result = *((float *)a2 + 9);
  v3 |= 0x80u;
  *((_WORD *)this + 26) = v3;
  *((float *)this + 9) = result;
  v2 = *((_WORD *)a2 + 26);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 4) == 0)
      goto LABEL_14;
    goto LABEL_23;
  }
LABEL_22:
  result = *((float *)a2 + 5);
  v3 |= 8u;
  *((_WORD *)this + 26) = v3;
  *((float *)this + 5) = result;
  v2 = *((_WORD *)a2 + 26);
  if ((v2 & 4) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0)
      return result;
LABEL_24:
    result = *((float *)a2 + 6);
    *((_WORD *)this + 26) = v3 | 0x10;
    *((float *)this + 6) = result;
    return result;
  }
LABEL_23:
  result = *((float *)a2 + 4);
  v3 |= 4u;
  *((_WORD *)this + 26) = v3;
  *((float *)this + 4) = result;
  if ((*((_WORD *)a2 + 26) & 0x10) != 0)
    goto LABEL_24;
  return result;
}

CMMsl *CMMsl::GeomagneticData::operator=(CMMsl *a1, const CMMsl::GeomagneticData *a2)
{
  CMMsl::GeomagneticData *v3;
  _BYTE v5[56];

  if (a1 != a2)
  {
    CMMsl::GeomagneticData::GeomagneticData((CMMsl::GeomagneticData *)v5, a2);
    CMMsl::swap(a1, (CMMsl::GeomagneticData *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::GeomagneticData *a2, CMMsl::GeomagneticData *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  float result;

  v3 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v3;
  v4 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  v5 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v5;
  v6 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v6;
  v7 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v7;
  v8 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v8;
  v9 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v9;
  v10 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v10;
  v11 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v11;
  v12 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v12;
  v13 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v13;
  result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  return result;
}

float CMMsl::GeomagneticData::GeomagneticData(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135DB78;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

CMMsl *CMMsl::GeomagneticData::operator=(CMMsl *this, uint64_t a2, CMMsl::GeomagneticData *a3)
{
  __int128 v4;
  void (**v6)(CMMsl::GeomagneticData *__hidden);
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  int v11;

  if (this != (CMMsl *)a2)
  {
    v6 = &off_25135DB78;
    v11 = *(_DWORD *)(a2 + 52);
    *(_DWORD *)(a2 + 52) = 0;
    v9 = *(_QWORD *)(a2 + 40);
    v10 = *(_DWORD *)(a2 + 48);
    v4 = *(_OWORD *)(a2 + 24);
    v7 = *(_OWORD *)(a2 + 8);
    v8 = v4;
    CMMsl::swap(this, (CMMsl::GeomagneticData *)&v6, a3);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return this;
}

uint64_t CMMsl::GeomagneticData::formatText(CMMsl::GeomagneticData *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 26);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "altitude", *((float *)this + 2));
    v5 = *((_WORD *)this + 26);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "decimalYear", *((float *)this + 3));
  v5 = *((_WORD *)this + 26);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "declination", *((float *)this + 4));
  v5 = *((_WORD *)this + 26);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "horizontal", *((float *)this + 5));
  v5 = *((_WORD *)this + 26);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "inclination", *((float *)this + 6));
  v5 = *((_WORD *)this + 26);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "latitude", *((float *)this + 7));
  v5 = *((_WORD *)this + 26);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "longitude", *((float *)this + 8));
  v5 = *((_WORD *)this + 26);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "magnitude", *((float *)this + 9));
  v5 = *((_WORD *)this + 26);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
LABEL_23:
    PB::TextFormatter::format(a2, "y", *((float *)this + 11));
    if ((*((_WORD *)this + 26) & 0x400) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "x", *((float *)this + 10));
  v5 = *((_WORD *)this + 26);
  if ((v5 & 0x200) != 0)
    goto LABEL_23;
LABEL_11:
  if ((v5 & 0x400) != 0)
LABEL_12:
    PB::TextFormatter::format(a2, "z", *((float *)this + 12));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GeomagneticData::readFrom(CMMsl::GeomagneticData *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_58;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 26) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_55;
        *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_57;
      case 2u:
        *((_WORD *)this + 26) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_55;
        *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_57;
      case 3u:
        *((_WORD *)this + 26) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_55;
        *((_DWORD *)this + 2) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_57;
      case 4u:
        *((_WORD *)this + 26) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_55;
        *((_DWORD *)this + 3) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_57;
      case 5u:
        *((_WORD *)this + 26) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_55;
        *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_57;
      case 6u:
        *((_WORD *)this + 26) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_55;
        *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_57;
      case 7u:
        *((_WORD *)this + 26) |= 0x400u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_55;
        *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_57;
      case 8u:
        *((_WORD *)this + 26) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_55;
        *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_57;
      case 9u:
        *((_WORD *)this + 26) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_55;
        *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_57;
      case 0xAu:
        *((_WORD *)this + 26) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_55;
        *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_57;
      case 0xBu:
        *((_WORD *)this + 26) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_57:
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_55:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_58:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::GeomagneticData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 52);
  if ((v4 & 0x20) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 28));
    v4 = *(_WORD *)(v3 + 52);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(float *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(float *)(v3 + 12));
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x100) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 4) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 4) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 24));
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  if ((*(_WORD *)(v3 + 52) & 0x10) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 24));
  return this;
}

BOOL CMMsl::GeomagneticData::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 52);
  v3 = *(_WORD *)(a2 + 52);
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(float *)(a1 + 8) != *(float *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 12) != *(float *)(a2 + 12))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 52) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 52) & 0x100) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 52) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 52) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 52) & 0x200) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 52) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 52) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 52) & 0x400) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 52) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x10) == 0;
  if ((v2 & 0x10) != 0)
    return (v3 & 0x10) != 0 && *(float *)(a1 + 24) == *(float *)(a2 + 24);
  return v4;
}

uint64_t CMMsl::GeomagneticData::hash_value(CMMsl::GeomagneticData *this)
{
  __int16 v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;

  v1 = *((_WORD *)this + 26);
  if ((v1 & 0x20) == 0)
  {
    v2 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_3;
LABEL_36:
    v4 = 0;
    if ((v1 & 1) != 0)
      goto LABEL_6;
LABEL_37:
    v6 = 0;
    if ((v1 & 2) != 0)
      goto LABEL_9;
LABEL_38:
    v8 = 0;
    if ((*((_WORD *)this + 26) & 0x100) != 0)
      goto LABEL_12;
LABEL_39:
    v10 = 0;
    if ((*((_WORD *)this + 26) & 0x200) != 0)
      goto LABEL_15;
LABEL_40:
    v12 = 0;
    if ((*((_WORD *)this + 26) & 0x400) != 0)
      goto LABEL_18;
LABEL_41:
    v14 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_21;
LABEL_42:
    v16 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_24;
LABEL_43:
    v18 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_27;
    goto LABEL_44;
  }
  v23 = *((float *)this + 7);
  v2 = LODWORD(v23);
  if (v23 == 0.0)
    v2 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_36;
LABEL_3:
  v3 = *((float *)this + 8);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  if ((v1 & 1) == 0)
    goto LABEL_37;
LABEL_6:
  v5 = *((float *)this + 2);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_38;
LABEL_9:
  v7 = *((float *)this + 3);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((*((_WORD *)this + 26) & 0x100) == 0)
    goto LABEL_39;
LABEL_12:
  v9 = *((float *)this + 10);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((*((_WORD *)this + 26) & 0x200) == 0)
    goto LABEL_40;
LABEL_15:
  v11 = *((float *)this + 11);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((*((_WORD *)this + 26) & 0x400) == 0)
    goto LABEL_41;
LABEL_18:
  v13 = *((float *)this + 12);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_42;
LABEL_21:
  v15 = *((float *)this + 9);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_43;
LABEL_24:
  v17 = *((float *)this + 5);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_27:
    v19 = *((float *)this + 4);
    v20 = LODWORD(v19);
    if (v19 == 0.0)
      v20 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_30;
LABEL_45:
    v22 = 0;
    return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22;
  }
LABEL_44:
  v20 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_45;
LABEL_30:
  v21 = *((float *)this + 6);
  v22 = LODWORD(v21);
  if (v21 == 0.0)
    v22 = 0;
  return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22;
}

uint64_t CMMsl::GnssAvailabilityPredictorData::GnssAvailabilityPredictorData(uint64_t this)
{
  *(_QWORD *)this = &off_25135DBB0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135DBB0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::GnssAvailabilityPredictorData::~GnssAvailabilityPredictorData(CMMsl::GnssAvailabilityPredictorData *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::GnssAvailabilityPredictorData::GnssAvailabilityPredictorData(CMMsl::GnssAvailabilityPredictorData *this, const CMMsl::GnssAvailabilityPredictorData *a2)
{
  char v2;
  char v3;
  double result;
  int v5;
  int v6;

  *(_QWORD *)this = &off_25135DBB0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 2) != 0)
  {
    result = *((double *)a2 + 2);
    v3 = 2;
    *((_BYTE *)this + 32) = 2;
    *((double *)this + 2) = result;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 32) & 8) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 7);
    v3 |= 8u;
    *((_BYTE *)this + 32) = v3;
    *((_DWORD *)this + 7) = v5;
    v2 = *((_BYTE *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 1) == 0)
      return result;
LABEL_10:
    result = *((double *)a2 + 1);
    *((_BYTE *)this + 32) = v3 | 1;
    *((double *)this + 1) = result;
    return result;
  }
  v6 = *((_DWORD *)a2 + 6);
  v3 |= 4u;
  *((_BYTE *)this + 32) = v3;
  *((_DWORD *)this + 6) = v6;
  if ((*((_BYTE *)a2 + 32) & 1) != 0)
    goto LABEL_10;
  return result;
}

uint64_t CMMsl::GnssAvailabilityPredictorData::operator=(uint64_t a1, const CMMsl::GnssAvailabilityPredictorData *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  _BYTE v7[8];
  __int128 v8;
  uint64_t v9;
  int v10;

  if ((const CMMsl::GnssAvailabilityPredictorData *)a1 != a2)
  {
    CMMsl::GnssAvailabilityPredictorData::GnssAvailabilityPredictorData((CMMsl::GnssAvailabilityPredictorData *)v7, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v9;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::GnssAvailabilityPredictorData *a2, CMMsl::GnssAvailabilityPredictorData *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::GnssAvailabilityPredictorData::GnssAvailabilityPredictorData(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135DBB0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135DBB0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::GnssAvailabilityPredictorData::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  void (**v8)(CMMsl::GnssAvailabilityPredictorData *__hidden);
  __int128 v9;
  uint64_t v10;
  int v11;

  if (a1 != a2)
  {
    v8 = &off_25135DBB0;
    v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    v11 = *(_DWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    v6 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    v9 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::GnssAvailabilityPredictorData::formatText(CMMsl::GnssAvailabilityPredictorData *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "measSource");
    v5 = *((_BYTE *)this + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "stateProbability", *((double *)this + 1));
      if ((*((_BYTE *)this + 32) & 2) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "state");
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 2) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GnssAvailabilityPredictorData::readFrom(CMMsl::GnssAvailabilityPredictorData *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  unint64_t v38;
  char v39;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_69;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 32) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_42;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_58;
      case 2u:
        *((_BYTE *)this + 32) |= 8u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v32 = 0;
          v33 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_63;
            }
            v34 = v20++;
            v35 = *(_BYTE *)(v21 + v34);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v35 & 0x7F) << v32;
            if ((v35 & 0x80) == 0)
              break;
            v32 += 7;
            v14 = v33++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_62:
              v2 = v34 + 1;
              goto LABEL_63;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
          goto LABEL_62;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_63;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_63:
        *((_DWORD *)this + 7) = v24;
        break;
      case 3u:
        *((_BYTE *)this + 32) |= 4u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v36 = 0;
          v37 = 0;
          v30 = 0;
          if (v2 <= v26)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_68;
            }
            v38 = v26++;
            v39 = *(_BYTE *)(v27 + v38);
            *((_QWORD *)a2 + 1) = v26;
            v30 |= (unint64_t)(v39 & 0x7F) << v36;
            if ((v39 & 0x80) == 0)
              break;
            v36 += 7;
            v14 = v37++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_67:
              v2 = v38 + 1;
              goto LABEL_68;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v30) = 0;
          goto LABEL_67;
        }
        v28 = 0;
        v29 = 0;
        v30 = 0;
        do
        {
          v2 = v26 + 1;
          *((_QWORD *)a2 + 1) = v26 + 1;
          v31 = *(_BYTE *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0)
            goto LABEL_68;
          v28 += 7;
          v26 = v2;
          v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_68:
        *((_DWORD *)this + 6) = v30;
        break;
      case 4u:
        *((_BYTE *)this + 32) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_58:
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_42:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_69:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::GnssAvailabilityPredictorData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16));
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 8));
  }
LABEL_8:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_BYTE *)(v3 + 32) & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 8));
  return this;
}

BOOL CMMsl::GnssAvailabilityPredictorData::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 8) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 4) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 32) & 1) == 0;
  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
    return (*(_BYTE *)(a2 + 32) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  return v2;
}

uint64_t CMMsl::GnssAvailabilityPredictorData::hash_value(CMMsl::GnssAvailabilityPredictorData *this)
{
  double v1;
  uint64_t v2;
  uint64_t v3;
  double v4;

  if ((*((_BYTE *)this + 32) & 2) != 0)
  {
    v1 = *((double *)this + 2);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 32) & 8) != 0)
    {
LABEL_3:
      v2 = *((int *)this + 7);
      if ((*((_BYTE *)this + 32) & 4) != 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 32) & 8) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 32) & 4) != 0)
  {
LABEL_4:
    v3 = *((int *)this + 6);
    if ((*((_BYTE *)this + 32) & 1) != 0)
      goto LABEL_5;
LABEL_13:
    v4 = 0.0;
    return v2 ^ *(_QWORD *)&v1 ^ v3 ^ *(_QWORD *)&v4;
  }
LABEL_12:
  v3 = 0;
  if ((*((_BYTE *)this + 32) & 1) == 0)
    goto LABEL_13;
LABEL_5:
  v4 = *((double *)this + 1);
  if (v4 == 0.0)
    v4 = 0.0;
  return v2 ^ *(_QWORD *)&v1 ^ v3 ^ *(_QWORD *)&v4;
}

double CMMsl::GnssLeechLocationData::GnssLeechLocationData(CMMsl::GnssLeechLocationData *this)
{
  double result;

  *(_QWORD *)this = &off_25135DBE8;
  *((_DWORD *)this + 38) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_QWORD *)this + 17) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_25135DBE8;
  *((_DWORD *)this + 38) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_QWORD *)this + 17) = 0;
  return result;
}

void CMMsl::GnssLeechLocationData::~GnssLeechLocationData(CMMsl::GnssLeechLocationData *this)
{
  void **v2;
  void **v3;

  *(_QWORD *)this = &off_25135DBE8;
  v2 = (void **)((char *)this + 24);
  v3 = (void **)((char *)this + 120);
  sub_242910B70(&v3);
  v3 = (void **)((char *)this + 96);
  sub_242910B70(&v3);
  v3 = (void **)((char *)this + 72);
  sub_242910B70(&v3);
  v3 = (void **)((char *)this + 48);
  sub_242910B70(&v3);
  v3 = v2;
  sub_242910B70(&v3);
  PB::Base::~Base(this);
}

{
  CMMsl::GnssLeechLocationData::~GnssLeechLocationData(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::GnssLeechLocationData *CMMsl::GnssLeechLocationData::GnssLeechLocationData(CMMsl::GnssLeechLocationData *this, const CMMsl::GnssLeechLocationData *a2)
{
  CMMsl::SatelliteInfo ***v4;
  CMMsl::SatelliteInfo ***v5;
  CMMsl::SatelliteInfo ***v6;
  uint64_t v7;
  const CMMsl::SatelliteInfo **v8;
  const CMMsl::SatelliteInfo **i;
  const CMMsl::SatelliteInfo **v10;
  const CMMsl::SatelliteInfo **v11;
  const CMMsl::SatelliteInfo **v12;
  const CMMsl::SatelliteInfo **v13;
  const CMMsl::SatelliteInfo **v14;
  const CMMsl::SatelliteInfo **j;
  const CMMsl::SatelliteInfo **v16;
  const CMMsl::SatelliteInfo **v17;
  char v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)this = &off_25135DBE8;
  *(_OWORD *)((char *)this + 24) = 0u;
  v4 = (CMMsl::SatelliteInfo ***)((char *)this + 24);
  *(_OWORD *)((char *)this + 72) = 0u;
  v5 = (CMMsl::SatelliteInfo ***)((char *)this + 72);
  *(_OWORD *)((char *)this + 120) = 0u;
  v6 = (CMMsl::SatelliteInfo ***)((char *)this + 120);
  *((_DWORD *)this + 38) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_QWORD *)this + 17) = 0;
  if ((*((_BYTE *)a2 + 152) & 4) != 0)
  {
    v7 = *((_QWORD *)a2 + 18);
    *((_BYTE *)this + 152) = 4;
    *((_QWORD *)this + 18) = v7;
  }
  v8 = (const CMMsl::SatelliteInfo **)*((_QWORD *)a2 + 12);
  for (i = (const CMMsl::SatelliteInfo **)*((_QWORD *)a2 + 13); v8 != i; ++v8)
    sub_2427B2D10((CMMsl::SatelliteInfo ***)this + 12, *v8);
  v10 = (const CMMsl::SatelliteInfo **)*((_QWORD *)a2 + 9);
  v11 = (const CMMsl::SatelliteInfo **)*((_QWORD *)a2 + 10);
  while (v10 != v11)
    sub_2427B2D10(v5, *v10++);
  v12 = (const CMMsl::SatelliteInfo **)*((_QWORD *)a2 + 15);
  v13 = (const CMMsl::SatelliteInfo **)*((_QWORD *)a2 + 16);
  while (v12 != v13)
    sub_2427B2D10(v6, *v12++);
  v14 = (const CMMsl::SatelliteInfo **)*((_QWORD *)a2 + 6);
  for (j = (const CMMsl::SatelliteInfo **)*((_QWORD *)a2 + 7); v14 != j; ++v14)
    sub_2427B2D10((CMMsl::SatelliteInfo ***)this + 6, *v14);
  v16 = (const CMMsl::SatelliteInfo **)*((_QWORD *)a2 + 3);
  v17 = (const CMMsl::SatelliteInfo **)*((_QWORD *)a2 + 4);
  while (v16 != v17)
    sub_2427B2D10(v4, *v16++);
  v18 = *((_BYTE *)a2 + 152);
  if ((v18 & 2) != 0)
  {
    v19 = *((_QWORD *)a2 + 2);
    *((_BYTE *)this + 152) |= 2u;
    *((_QWORD *)this + 2) = v19;
    v18 = *((_BYTE *)a2 + 152);
  }
  if ((v18 & 1) != 0)
  {
    v20 = *((_QWORD *)a2 + 1);
    *((_BYTE *)this + 152) |= 1u;
    *((_QWORD *)this + 1) = v20;
  }
  return this;
}

void sub_2427B2D10(CMMsl::SatelliteInfo ***a1, const CMMsl::SatelliteInfo *a2)
{
  CMMsl::SatelliteInfo *v4;
  unint64_t v5;
  CMMsl::SatelliteInfo **v6;
  CMMsl::SatelliteInfo **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  CMMsl::SatelliteInfo **v13;
  unint64_t v14;
  CMMsl::SatelliteInfo **v15;
  CMMsl::SatelliteInfo **v16;
  CMMsl::SatelliteInfo *v17;
  int64x2_t v18;
  CMMsl::SatelliteInfo **v19;
  uint64_t v20;
  int64x2_t v21;
  unint64_t v22;
  _QWORD *v23;

  v4 = (CMMsl::SatelliteInfo *)operator new();
  CMMsl::SatelliteInfo::SatelliteInfo(v4, a2);
  v5 = (unint64_t)a1[2];
  v6 = a1[1];
  if ((unint64_t)v6 >= v5)
  {
    v8 = v6 - *a1;
    if ((unint64_t)(v8 + 1) >> 61)
      sub_242729A44();
    v9 = v5 - (_QWORD)*a1;
    v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    v23 = a1 + 2;
    if (v11)
      v11 = (unint64_t)sub_2429112FC(v11);
    else
      v12 = 0;
    v13 = (CMMsl::SatelliteInfo **)(v11 + 8 * v8);
    v14 = v11 + 8 * v12;
    v22 = v14;
    *v13 = v4;
    v7 = v13 + 1;
    v21.i64[1] = (uint64_t)(v13 + 1);
    v16 = *a1;
    v15 = a1[1];
    if (v15 == *a1)
    {
      v18 = vdupq_n_s64((unint64_t)v15);
    }
    else
    {
      do
      {
        v17 = *--v15;
        *v15 = 0;
        *--v13 = v17;
      }
      while (v15 != v16);
      v18 = *(int64x2_t *)a1;
      v7 = (CMMsl::SatelliteInfo **)v21.i64[1];
      v14 = v22;
    }
    *a1 = v13;
    a1[1] = v7;
    v21 = v18;
    v19 = a1[2];
    a1[2] = (CMMsl::SatelliteInfo **)v14;
    v22 = (unint64_t)v19;
    v20 = v18.i64[0];
    sub_2429114EC((uint64_t)&v20);
  }
  else
  {
    *v6 = v4;
    v7 = v6 + 1;
  }
  a1[1] = v7;
}

void sub_2427B2E40(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

CMMsl *CMMsl::GnssLeechLocationData::operator=(CMMsl *a1, const CMMsl::GnssLeechLocationData *a2)
{
  CMMsl::GnssLeechLocationData *v3;
  _BYTE v5[160];

  if (a1 != a2)
  {
    CMMsl::GnssLeechLocationData::GnssLeechLocationData((CMMsl::GnssLeechLocationData *)v5, a2);
    CMMsl::swap(a1, (CMMsl::GnssLeechLocationData *)v5, v3);
    CMMsl::GnssLeechLocationData::~GnssLeechLocationData((CMMsl::GnssLeechLocationData *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::GnssLeechLocationData *a2, CMMsl::GnssLeechLocationData *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double result;

  v3 = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v3;
  v4 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v4;
  v5 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v5;
  v6 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v6;
  v7 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v7;
  v8 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v8;
  v9 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v9;
  v10 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v10;
  v11 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v11;
  v12 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v12;
  v13 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v13;
  v14 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v14;
  v15 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v15;
  v16 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v16;
  v17 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v17;
  v18 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v18;
  v19 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v19;
  v20 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v20;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

uint64_t CMMsl::GnssLeechLocationData::GnssLeechLocationData(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _OWORD *v5;
  _OWORD *v6;
  _OWORD *v7;

  *(_QWORD *)a1 = &off_25135DBE8;
  v4 = (_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  v5 = (_OWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 120) = 0u;
  v6 = (_OWORD *)(a1 + 120);
  *(_OWORD *)(a1 + 72) = 0u;
  v7 = (_OWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  sub_242910BEC((_QWORD *)(a1 + 96));
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  sub_242910BEC((_QWORD *)(a1 + 72));
  *v7 = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  sub_242910BEC((_QWORD *)(a1 + 120));
  *v6 = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  sub_242910BEC(v4);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  sub_242910BEC((_QWORD *)(a1 + 24));
  *v5 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  return a1;
}

CMMsl *CMMsl::GnssLeechLocationData::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::GnssLeechLocationData *v3;
  _BYTE v5[160];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::GnssLeechLocationData::GnssLeechLocationData((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::GnssLeechLocationData *)v5, v3);
    CMMsl::GnssLeechLocationData::~GnssLeechLocationData((CMMsl::GnssLeechLocationData *)v5);
  }
  return a1;
}

uint64_t CMMsl::GnssLeechLocationData::formatText(CMMsl::GnssLeechLocationData *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 152);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "lifespan", *((double *)this + 1));
    v5 = *((_BYTE *)this + 152);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "machTime", *((double *)this + 2));
  v6 = (uint64_t *)*((_QWORD *)this + 3);
  v7 = (uint64_t *)*((_QWORD *)this + 4);
  while (v6 != v7)
  {
    v8 = *v6++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "satInfoBeidou");
  }
  v9 = (uint64_t *)*((_QWORD *)this + 6);
  v10 = (uint64_t *)*((_QWORD *)this + 7);
  while (v9 != v10)
  {
    v11 = *v9++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v11 + 32))(v11, a2, "satInfoGalileo");
  }
  v12 = (uint64_t *)*((_QWORD *)this + 9);
  v13 = (uint64_t *)*((_QWORD *)this + 10);
  while (v12 != v13)
  {
    v14 = *v12++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v14 + 32))(v14, a2, "satInfoGlonass");
  }
  v15 = (uint64_t *)*((_QWORD *)this + 12);
  v16 = (uint64_t *)*((_QWORD *)this + 13);
  while (v15 != v16)
  {
    v17 = *v15++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v17 + 32))(v17, a2, "satInfoGps");
  }
  v18 = (uint64_t *)*((_QWORD *)this + 15);
  v19 = (uint64_t *)*((_QWORD *)this + 16);
  while (v18 != v19)
  {
    v20 = *v18++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v20 + 32))(v20, a2, "satInfoQzss");
  }
  if ((*((_BYTE *)this + 152) & 4) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 18));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GnssLeechLocationData::readFrom(CMMsl::GnssLeechLocationData *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t **v9;
  uint64_t **v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  BOOL v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  char v23;
  uint64_t result;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  v8 = (uint64_t **)((char *)this + 24);
  v9 = (uint64_t **)((char *)this + 48);
  v10 = (uint64_t **)((char *)this + 120);
  v11 = (uint64_t **)((char *)this + 72);
  v12 = (uint64_t **)((char *)this + 96);
  while (1)
  {
    v13 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v14 = 0;
      v15 = 0;
      v16 = 0;
      while (1)
      {
        v17 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v18 = *(_BYTE *)(v13 + v2);
        v16 |= (unint64_t)(v18 & 0x7F) << v14;
        if ((v18 & 0x80) == 0)
          break;
        v14 += 7;
        v2 = v17;
        v19 = v15++ > 8;
        if (v19)
          goto LABEL_20;
      }
LABEL_22:
      if ((v16 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v16 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 152) |= 4u;
          v25 = *((_QWORD *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_40;
          *((_QWORD *)this + 18) = *(_QWORD *)(*(_QWORD *)a2 + v25);
          goto LABEL_42;
        case 2u:
          sub_2427B35E8(v12);
          v26 = *((_QWORD *)this + 13);
          goto LABEL_32;
        case 3u:
          sub_2427B35E8(v11);
          v26 = *((_QWORD *)this + 10);
          goto LABEL_32;
        case 4u:
          sub_2427B35E8(v10);
          v26 = *((_QWORD *)this + 16);
          goto LABEL_32;
        case 5u:
          sub_2427B35E8(v9);
          v26 = *((_QWORD *)this + 7);
          goto LABEL_32;
        case 6u:
          sub_2427B35E8(v8);
          v26 = *((_QWORD *)this + 4);
LABEL_32:
          v27 = *(_QWORD *)(v26 - 8);
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v27 + 16))(v27, a2) & 1) == 0)
          {
            return 0;
          }
          PB::Reader::recallMark();
          break;
        case 7u:
          *((_BYTE *)this + 152) |= 2u;
          v29 = *((_QWORD *)a2 + 1);
          if (v29 > 0xFFFFFFFFFFFFFFF7 || v29 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_40;
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v29);
          goto LABEL_42;
        case 8u:
          *((_BYTE *)this + 152) |= 1u;
          v28 = *((_QWORD *)a2 + 1);
          if (v28 > 0xFFFFFFFFFFFFFFF7 || v28 + 8 > *((_QWORD *)a2 + 2))
          {
LABEL_40:
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v28);
LABEL_42:
            *((_QWORD *)a2 + 1) += 8;
          }
          goto LABEL_43;
        default:
          goto LABEL_20;
      }
      goto LABEL_43;
    }
    v20 = 0;
    v21 = 0;
    v16 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v22 = v2 + 1;
      v23 = *(_BYTE *)(v13 + v2);
      *((_QWORD *)a2 + 1) = v22;
      v16 |= (unint64_t)(v23 & 0x7F) << v20;
      if ((v23 & 0x80) == 0)
        goto LABEL_22;
      v20 += 7;
      v2 = v22;
      v19 = v21++ > 8;
    }
    while (!v19);
LABEL_20:
    result = PB::Reader::skip(a2);
    if (!(_DWORD)result)
      return result;
LABEL_43:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
}

uint64_t sub_2427B35E8(uint64_t **a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int64x2_t v17;
  unint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  unint64_t v21;
  _QWORD *v22;

  result = operator new();
  v3 = result;
  *(_QWORD *)result = &off_251360CB0;
  *(_DWORD *)(result + 20) = 0;
  v4 = (unint64_t)a1[2];
  v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = v5 - *a1;
    if ((unint64_t)(v7 + 1) >> 61)
      sub_242729A44();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v22 = a1 + 2;
    if (v10)
      v10 = (unint64_t)sub_2429112FC(v10);
    else
      v11 = 0;
    v12 = (uint64_t *)(v10 + 8 * v7);
    v13 = v10 + 8 * v11;
    v21 = v13;
    *v12 = v3;
    v6 = v12 + 1;
    v20.i64[1] = (uint64_t)(v12 + 1);
    v15 = *a1;
    v14 = a1[1];
    if (v14 == *a1)
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *--v14;
        *v14 = 0;
        *--v12 = v16;
      }
      while (v14 != v15);
      v17 = *(int64x2_t *)a1;
      v6 = (uint64_t *)v20.i64[1];
      v13 = v21;
    }
    *a1 = v12;
    a1[1] = v6;
    v20 = v17;
    v18 = (unint64_t)a1[2];
    a1[2] = (uint64_t *)v13;
    v21 = v18;
    v19 = v17.i64[0];
    result = sub_2429114EC((uint64_t)&v19);
  }
  else
  {
    *v5 = result;
    v6 = v5 + 1;
  }
  a1[1] = v6;
  return result;
}

void sub_2427B371C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::GnssLeechLocationData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base **v4;
  const PB::Base **v5;
  const PB::Base *v6;
  const PB::Base **v7;
  const PB::Base **v8;
  const PB::Base *v9;
  const PB::Base **v10;
  const PB::Base **v11;
  const PB::Base *v12;
  const PB::Base **v13;
  const PB::Base **v14;
  const PB::Base *v15;
  const PB::Base **v16;
  const PB::Base **v17;
  const PB::Base *v18;
  char v19;

  v3 = this;
  if ((*(_BYTE *)(this + 152) & 4) != 0)
    this = PB::Writer::write(a2, *(double *)(this + 144));
  v4 = *(const PB::Base ***)(v3 + 96);
  v5 = *(const PB::Base ***)(v3 + 104);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::writeSubmessage(a2, v6);
  }
  v7 = *(const PB::Base ***)(v3 + 72);
  v8 = *(const PB::Base ***)(v3 + 80);
  while (v7 != v8)
  {
    v9 = *v7++;
    this = PB::Writer::writeSubmessage(a2, v9);
  }
  v10 = *(const PB::Base ***)(v3 + 120);
  v11 = *(const PB::Base ***)(v3 + 128);
  while (v10 != v11)
  {
    v12 = *v10++;
    this = PB::Writer::writeSubmessage(a2, v12);
  }
  v13 = *(const PB::Base ***)(v3 + 48);
  v14 = *(const PB::Base ***)(v3 + 56);
  while (v13 != v14)
  {
    v15 = *v13++;
    this = PB::Writer::writeSubmessage(a2, v15);
  }
  v16 = *(const PB::Base ***)(v3 + 24);
  v17 = *(const PB::Base ***)(v3 + 32);
  while (v16 != v17)
  {
    v18 = *v16++;
    this = PB::Writer::writeSubmessage(a2, v18);
  }
  v19 = *(_BYTE *)(v3 + 152);
  if ((v19 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 16));
    v19 = *(_BYTE *)(v3 + 152);
  }
  if ((v19 & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 8));
  return this;
}

BOOL CMMsl::GnssLeechLocationData::operator==(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _BOOL8 result;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;

  v4 = *(_BYTE *)(a1 + 152);
  v5 = *(_BYTE *)(a2 + 152);
  if ((v4 & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 152) & 4) == 0 || *(double *)(a1 + 144) != *(double *)(a2 + 144))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 152) & 4) != 0)
  {
    return 0;
  }
  v6 = *(uint64_t **)(a1 + 96);
  v7 = *(uint64_t **)(a1 + 104);
  v8 = *(uint64_t **)(a2 + 96);
  if ((char *)v7 - (char *)v6 != *(_QWORD *)(a2 + 104) - (_QWORD)v8)
    return 0;
  while (v6 != v7)
  {
    result = CMMsl::SatelliteInfo::operator==(*v6, *v8);
    if (!result)
      return result;
    ++v6;
    ++v8;
  }
  v10 = *(uint64_t **)(a1 + 72);
  v11 = *(uint64_t **)(a1 + 80);
  v12 = *(uint64_t **)(a2 + 72);
  if ((char *)v11 - (char *)v10 != *(_QWORD *)(a2 + 80) - (_QWORD)v12)
    return 0;
  while (v10 != v11)
  {
    result = CMMsl::SatelliteInfo::operator==(*v10, *v12);
    if (!result)
      return result;
    ++v10;
    ++v12;
  }
  v13 = *(uint64_t **)(a1 + 120);
  v14 = *(uint64_t **)(a1 + 128);
  v15 = *(uint64_t **)(a2 + 120);
  if ((char *)v14 - (char *)v13 != *(_QWORD *)(a2 + 128) - (_QWORD)v15)
    return 0;
  while (v13 != v14)
  {
    result = CMMsl::SatelliteInfo::operator==(*v13, *v15);
    if (!result)
      return result;
    ++v13;
    ++v15;
  }
  v16 = *(uint64_t **)(a1 + 48);
  v17 = *(uint64_t **)(a1 + 56);
  v18 = *(uint64_t **)(a2 + 48);
  if ((char *)v17 - (char *)v16 != *(_QWORD *)(a2 + 56) - (_QWORD)v18)
    return 0;
  while (v16 != v17)
  {
    result = CMMsl::SatelliteInfo::operator==(*v16, *v18);
    if (!result)
      return result;
    ++v16;
    ++v18;
  }
  v19 = *(uint64_t **)(a1 + 24);
  v20 = *(uint64_t **)(a1 + 32);
  v21 = *(uint64_t **)(a2 + 24);
  if ((char *)v20 - (char *)v19 != *(_QWORD *)(a2 + 32) - (_QWORD)v21)
    return 0;
  while (v19 != v20)
  {
    result = CMMsl::SatelliteInfo::operator==(*v19, *v21);
    if (!result)
      return result;
    ++v19;
    ++v21;
  }
  if ((v4 & 2) != 0)
  {
    if ((v5 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v5 & 2) != 0)
  {
    return 0;
  }
  result = (v5 & 1) == 0;
  if ((v4 & 1) == 0)
    return result;
  return (v5 & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
}

uint64_t CMMsl::GnssLeechLocationData::hash_value(CMMsl::GnssLeechLocationData *this)
{
  char v2;
  uint64_t v3;
  CMMsl::SatelliteInfo **v4;
  CMMsl::SatelliteInfo **v5;
  uint64_t v6;
  CMMsl::SatelliteInfo *v7;
  CMMsl::SatelliteInfo **v8;
  CMMsl::SatelliteInfo **v9;
  uint64_t v10;
  CMMsl::SatelliteInfo *v11;
  CMMsl::SatelliteInfo **v12;
  CMMsl::SatelliteInfo **v13;
  uint64_t v14;
  CMMsl::SatelliteInfo *v15;
  CMMsl::SatelliteInfo **v16;
  CMMsl::SatelliteInfo **v17;
  uint64_t v18;
  CMMsl::SatelliteInfo *v19;
  CMMsl::SatelliteInfo **v20;
  CMMsl::SatelliteInfo **v21;
  uint64_t v22;
  CMMsl::SatelliteInfo *v23;
  double v24;
  double v25;

  v2 = *((_BYTE *)this + 152);
  if ((v2 & 4) != 0)
  {
    if (*((double *)this + 18) == 0.0)
      v3 = 0;
    else
      v3 = *((_QWORD *)this + 18);
  }
  else
  {
    v3 = 0;
  }
  v4 = (CMMsl::SatelliteInfo **)*((_QWORD *)this + 12);
  v5 = (CMMsl::SatelliteInfo **)*((_QWORD *)this + 13);
  if (v4 == v5)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    do
    {
      v7 = *v4++;
      v6 ^= CMMsl::SatelliteInfo::hash_value(v7);
    }
    while (v4 != v5);
  }
  v8 = (CMMsl::SatelliteInfo **)*((_QWORD *)this + 9);
  v9 = (CMMsl::SatelliteInfo **)*((_QWORD *)this + 10);
  if (v8 == v9)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    do
    {
      v11 = *v8++;
      v10 ^= CMMsl::SatelliteInfo::hash_value(v11);
    }
    while (v8 != v9);
  }
  v12 = (CMMsl::SatelliteInfo **)*((_QWORD *)this + 15);
  v13 = (CMMsl::SatelliteInfo **)*((_QWORD *)this + 16);
  if (v12 == v13)
  {
    v14 = 0;
  }
  else
  {
    v14 = 0;
    do
    {
      v15 = *v12++;
      v14 ^= CMMsl::SatelliteInfo::hash_value(v15);
    }
    while (v12 != v13);
  }
  v16 = (CMMsl::SatelliteInfo **)*((_QWORD *)this + 6);
  v17 = (CMMsl::SatelliteInfo **)*((_QWORD *)this + 7);
  if (v16 == v17)
  {
    v18 = 0;
  }
  else
  {
    v18 = 0;
    do
    {
      v19 = *v16++;
      v18 ^= CMMsl::SatelliteInfo::hash_value(v19);
    }
    while (v16 != v17);
  }
  v20 = (CMMsl::SatelliteInfo **)*((_QWORD *)this + 3);
  v21 = (CMMsl::SatelliteInfo **)*((_QWORD *)this + 4);
  if (v20 == v21)
  {
    v22 = 0;
    if ((v2 & 2) == 0)
      goto LABEL_30;
LABEL_35:
    v24 = *((double *)this + 2);
    if (v24 == 0.0)
      v24 = 0.0;
    if ((v2 & 1) != 0)
      goto LABEL_31;
LABEL_38:
    v25 = 0.0;
    return v6 ^ v3 ^ v10 ^ v14 ^ *(_QWORD *)&v24 ^ *(_QWORD *)&v25 ^ v18 ^ v22;
  }
  v22 = 0;
  do
  {
    v23 = *v20++;
    v22 ^= CMMsl::SatelliteInfo::hash_value(v23);
  }
  while (v20 != v21);
  if ((v2 & 2) != 0)
    goto LABEL_35;
LABEL_30:
  v24 = 0.0;
  if ((v2 & 1) == 0)
    goto LABEL_38;
LABEL_31:
  v25 = *((double *)this + 1);
  if (v25 == 0.0)
    v25 = 0.0;
  return v6 ^ v3 ^ v10 ^ v14 ^ *(_QWORD *)&v24 ^ *(_QWORD *)&v25 ^ v18 ^ v22;
}

uint64_t CMMsl::GravityConstraints::GravityConstraints(uint64_t this)
{
  *(_QWORD *)this = &off_25135DC20;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135DC20;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::GravityConstraints::~GravityConstraints(CMMsl::GravityConstraints *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::GravityConstraints::GravityConstraints(CMMsl::GravityConstraints *this, const CMMsl::GravityConstraints *a2)
{
  char v2;
  char v3;
  uint64_t v4;

  *(_QWORD *)this = &off_25135DC20;
  *((_DWORD *)this + 8) = 0;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 32) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 32) & 0x10) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 7);
    v3 |= 0x10u;
    *((_BYTE *)this + 32) = v3;
    *((_DWORD *)this + 7) = v4;
    v2 = *((_BYTE *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *((_BYTE *)this + 32) = v3;
    *((_DWORD *)this + 5) = v4;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        return *(float *)&v4;
      goto LABEL_12;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *((_BYTE *)this + 32) = v3;
  *((_DWORD *)this + 4) = v4;
  if ((*((_BYTE *)a2 + 32) & 8) == 0)
    return *(float *)&v4;
LABEL_12:
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  *((_BYTE *)this + 32) = v3 | 8;
  *((_DWORD *)this + 6) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::GravityConstraints::operator=(uint64_t a1, const CMMsl::GravityConstraints *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  _BYTE v7[8];
  uint64_t v8;
  __int128 v9;
  int v10;

  if ((const CMMsl::GravityConstraints *)a1 != a2)
  {
    CMMsl::GravityConstraints::GravityConstraints((CMMsl::GravityConstraints *)v7, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v8;
    v8 = v4;
    v5 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v9;
    v9 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::GravityConstraints *a2, CMMsl::GravityConstraints *a3)
{
  int v3;
  uint64_t v4;
  float result;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  return result;
}

float CMMsl::GravityConstraints::GravityConstraints(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135DC20;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_25135DC20;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

uint64_t CMMsl::GravityConstraints::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  _QWORD v9[2];
  __int128 v10;
  int v11;

  if (a1 != a2)
  {
    v9[0] = &off_25135DC20;
    v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v11 = *(_DWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v9[1] = v5;
    v6 = *(_OWORD *)(a1 + 16);
    v7 = *(_OWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 16) = v7;
    v10 = v6;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::GravityConstraints::formatText(CMMsl::GravityConstraints *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "gyroMaxMean", *((float *)this + 4));
    v5 = *((_BYTE *)this + 32);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*((_BYTE *)this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "magnitudeDiffUnity", *((float *)this + 5));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(a2, "maxAccelStdAxis", *((float *)this + 7));
    if ((*((_BYTE *)this + 32) & 1) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(a2, "magnitudeVar", *((float *)this + 6));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 0x10) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 1) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GravityConstraints::readFrom(CMMsl::GravityConstraints *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_41;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 32) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_37;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        v2 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_40;
      case 2u:
        *((_BYTE *)this + 32) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_37;
        *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_39;
      case 3u:
        *((_BYTE *)this + 32) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_37;
        *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_39;
      case 4u:
        *((_BYTE *)this + 32) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_37;
        *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_39;
      case 5u:
        *((_BYTE *)this + 32) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_39:
          v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_40:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_37:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_41:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::GravityConstraints::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(this + 32) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 24));
  }
LABEL_10:
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  if ((*(_BYTE *)(v3 + 32) & 8) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 24));
  return this;
}

BOOL CMMsl::GravityConstraints::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 32) & 8) == 0;
  if ((*(_BYTE *)(a1 + 32) & 8) != 0)
    return (*(_BYTE *)(a2 + 32) & 8) != 0 && *(float *)(a1 + 24) == *(float *)(a2 + 24);
  return v2;
}

uint64_t CMMsl::GravityConstraints::hash_value(CMMsl::GravityConstraints *this)
{
  double v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;

  if ((*((_BYTE *)this + 32) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 32) & 0x10) != 0)
      goto LABEL_3;
LABEL_18:
    v3 = 0;
    if ((*((_BYTE *)this + 32) & 4) != 0)
      goto LABEL_6;
LABEL_19:
    v5 = 0;
    if ((*((_BYTE *)this + 32) & 2) != 0)
      goto LABEL_9;
    goto LABEL_20;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 32) & 0x10) == 0)
    goto LABEL_18;
LABEL_3:
  v2 = *((float *)this + 7);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 32) & 4) == 0)
    goto LABEL_19;
LABEL_6:
  v4 = *((float *)this + 5);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((*((_BYTE *)this + 32) & 2) != 0)
  {
LABEL_9:
    v6 = *((float *)this + 4);
    v7 = LODWORD(v6);
    if (v6 == 0.0)
      v7 = 0;
    if ((*((_BYTE *)this + 32) & 8) != 0)
      goto LABEL_12;
LABEL_21:
    v9 = 0;
    return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7 ^ v9;
  }
LABEL_20:
  v7 = 0;
  if ((*((_BYTE *)this + 32) & 8) == 0)
    goto LABEL_21;
LABEL_12:
  v8 = *((float *)this + 6);
  v9 = LODWORD(v8);
  if (v8 == 0.0)
    v9 = 0;
  return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7 ^ v9;
}

uint64_t CMMsl::GravityCorrection::GravityCorrection(uint64_t this)
{
  *(_QWORD *)this = &off_25135DC58;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135DC58;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::GravityCorrection::~GravityCorrection(CMMsl::GravityCorrection *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135DC58;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135DC58;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135DC58;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::GravityCorrection *CMMsl::GravityCorrection::GravityCorrection(CMMsl::GravityCorrection *this, const CMMsl::DeviceMotionCorrection **a2)
{
  CMMsl::DeviceMotionCorrection *v4;
  CMMsl::DeviceMotionCorrection *v5;
  uint64_t v6;
  char v7;

  *(_QWORD *)this = &off_25135DC58;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 5) = 0;
  if (a2[1])
  {
    v4 = (CMMsl::DeviceMotionCorrection *)operator new();
    v5 = CMMsl::DeviceMotionCorrection::DeviceMotionCorrection(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v7 = *((_BYTE *)a2 + 16);
    *((_BYTE *)this + 20) |= 1u;
    *((_BYTE *)this + 16) = v7;
  }
  return this;
}

uint64_t CMMsl::GravityCorrection::operator=(uint64_t a1, const CMMsl::DeviceMotionCorrection **a2)
{
  int v3;
  uint64_t v4;
  void (**v6)(CMMsl::GravityCorrection *__hidden);
  uint64_t v7;
  char v8;
  int v9;

  if ((const CMMsl::DeviceMotionCorrection **)a1 != a2)
  {
    CMMsl::GravityCorrection::GravityCorrection((CMMsl::GravityCorrection *)&v6, a2);
    v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v9;
    v9 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v7;
    LOBYTE(v3) = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v8;
    v8 = v3;
    v6 = &off_25135DC58;
    v7 = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::GravityCorrection *a2, CMMsl::GravityCorrection *a3)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LOBYTE(v4) = *(_BYTE *)(this + 16);
  *(_BYTE *)(this + 16) = *((_BYTE *)a2 + 16);
  *((_BYTE *)a2 + 16) = v4;
  return this;
}

uint64_t CMMsl::GravityCorrection::GravityCorrection(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_25135DC58;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_25135DC58;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t CMMsl::GravityCorrection::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  _QWORD v9[2];
  char v10;
  int v11;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v5 = *(_BYTE *)(a2 + 16);
    v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    v11 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    LOBYTE(v3) = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v5;
    v10 = v3;
    v9[0] = &off_25135DC58;
    v9[1] = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::GravityCorrection::formatText(CMMsl::GravityCorrection *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "correction");
  if ((*((_BYTE *)this + 20) & 1) != 0)
    PB::TextFormatter::format(a2, "isAvgGrav");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GravityCorrection::readFrom(CMMsl::GravityCorrection *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  unint64_t v23;
  int v24;
  BOOL v25;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_28;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 1u;
        v22 = *((_QWORD *)a2 + 1);
        if (v22 >= *((_QWORD *)a2 + 2))
        {
          v25 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v23 = v22 + 1;
          v24 = *(unsigned __int8 *)(*(_QWORD *)a2 + v22);
          *((_QWORD *)a2 + 1) = v23;
          v25 = v24 != 0;
        }
        *((_BYTE *)this + 16) = v25;
      }
      else if ((v11 >> 3) == 1)
      {
        v19 = operator new();
        *(_QWORD *)v19 = &off_25135D130;
        *(_DWORD *)(v19 + 160) = 0;
        *(_OWORD *)(v19 + 8) = 0u;
        *(_OWORD *)(v19 + 24) = 0u;
        *(_OWORD *)(v19 + 40) = 0u;
        *(_OWORD *)(v19 + 56) = 0u;
        *(_OWORD *)(v19 + 72) = 0u;
        *(_OWORD *)(v19 + 88) = 0u;
        *(_OWORD *)(v19 + 104) = 0u;
        *(_OWORD *)(v19 + 120) = 0u;
        *(_OWORD *)(v19 + 136) = 0u;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = *((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_28:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_28;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::GravityCorrection::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = this;
  v4 = *(const PB::Base **)(this + 8);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  if ((*(_BYTE *)(v3 + 20) & 1) != 0)
    return PB::Writer::write(a2);
  return this;
}

BOOL CMMsl::GravityCorrection::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !CMMsl::DeviceMotionCorrection::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  result = (*(_BYTE *)(a2 + 20) & 1) == 0;
  if ((*(_BYTE *)(a1 + 20) & 1) == 0)
    return result;
  return (*(_BYTE *)(a2 + 20) & 1) != 0 && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
}

unint64_t CMMsl::GravityCorrection::hash_value(CMMsl::GravityCorrection *this)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    v2 = CMMsl::DeviceMotionCorrection::hash_value((CMMsl::DeviceMotionCorrection *)v2);
  if ((*((_BYTE *)this + 20) & 1) != 0)
    v3 = *((unsigned __int8 *)this + 16);
  else
    v3 = 0;
  return v3 ^ v2;
}

_QWORD *CMMsl::GravityCorrection::makeCorrection(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135D130;
    *(_DWORD *)(v2 + 160) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_OWORD *)(v2 + 120) = 0u;
    *(_OWORD *)(v2 + 136) = 0u;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void CMMsl::Gyro::~Gyro(CMMsl::Gyro *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::Gyro::Gyro(uint64_t this, const CMMsl::Gyro *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  char v10;
  char v11;
  int v12;

  *(_QWORD *)this = &off_25135DC90;
  *(_DWORD *)(this + 44) = 0;
  v2 = *((_WORD *)a2 + 22);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_WORD *)(this + 44) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_WORD *)a2 + 22);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 7);
    v3 |= 0x10u;
    *(_WORD *)(this + 44) = v3;
    *(_DWORD *)(this + 28) = v5;
    v2 = *((_WORD *)a2 + 22);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    v6 = *((_DWORD *)a2 + 8);
    v3 |= 0x20u;
    *(_WORD *)(this + 44) = v3;
    *(_DWORD *)(this + 32) = v6;
    v2 = *((_WORD *)a2 + 22);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        goto LABEL_9;
      goto LABEL_16;
    }
  }
  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *(_WORD *)(this + 44) = v3;
  *(_DWORD *)(this + 36) = v7;
  v2 = *((_WORD *)a2 + 22);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0)
      goto LABEL_10;
    goto LABEL_17;
  }
LABEL_16:
  v8 = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *(_WORD *)(this + 44) = v3;
  *(_DWORD *)(this + 24) = v8;
  v2 = *((_WORD *)a2 + 22);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_18;
  }
LABEL_17:
  v9 = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *(_WORD *)(this + 44) = v3;
  *(_DWORD *)(this + 20) = v9;
  v2 = *((_WORD *)a2 + 22);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_19;
  }
LABEL_18:
  v10 = *((_BYTE *)a2 + 40);
  v3 |= 0x80u;
  *(_WORD *)(this + 44) = v3;
  *(_BYTE *)(this + 40) = v10;
  v2 = *((_WORD *)a2 + 22);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0)
      return this;
LABEL_20:
    v12 = *((_DWORD *)a2 + 4);
    *(_WORD *)(this + 44) = v3 | 2;
    *(_DWORD *)(this + 16) = v12;
    return this;
  }
LABEL_19:
  v11 = *((_BYTE *)a2 + 41);
  v3 |= 0x100u;
  *(_WORD *)(this + 44) = v3;
  *(_BYTE *)(this + 41) = v11;
  if ((*((_WORD *)a2 + 22) & 2) != 0)
    goto LABEL_20;
  return this;
}

uint64_t CMMsl::Gyro::operator=(uint64_t a1, const CMMsl::Gyro *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  char v17;
  char v18;
  int v19;

  if ((const CMMsl::Gyro *)a1 != a2)
  {
    CMMsl::Gyro::Gyro((uint64_t)&v11, a2);
    v3 = *(_QWORD *)(a1 + 28);
    *(_QWORD *)(a1 + 28) = v15;
    v15 = v3;
    v4 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v16;
    v16 = v4;
    v5 = v13;
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v12;
    *(_QWORD *)(a1 + 16) = v5;
    v8 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v19;
    v19 = v8;
    v9 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v14;
    v14 = v9;
    LOBYTE(v9) = *(_BYTE *)(a1 + 40);
    *(_BYTE *)(a1 + 40) = v17;
    v17 = v9;
    LOBYTE(v9) = *(_BYTE *)(a1 + 41);
    *(_BYTE *)(a1 + 41) = v18;
    v18 = v9;
    v12 = v6;
    v13 = v7;
    PB::Base::~Base((PB::Base *)&v11);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::Gyro *a2, CMMsl::Gyro *a3)
{
  int v3;
  uint64_t v4;
  float result;
  int v6;
  int v7;
  int v8;

  v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  result = *((float *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((float *)a2 + 9) = result;
  v6 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v6;
  v7 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 40);
  *((_BYTE *)this + 40) = *((_BYTE *)a2 + 40);
  *((_BYTE *)a2 + 40) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 41);
  *((_BYTE *)this + 41) = *((_BYTE *)a2 + 41);
  *((_BYTE *)a2 + 41) = v7;
  v8 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v8;
  return result;
}

float CMMsl::Gyro::Gyro(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135DC90;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  result = *(float *)(a2 + 36);
  *(float *)(a1 + 36) = result;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_25135DC90;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  result = *(float *)(a2 + 36);
  *(float *)(a1 + 36) = result;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::Gyro::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  int v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  _QWORD v15[3];
  int v16;
  uint64_t v17;
  int v18;
  char v19;
  char v20;
  int v21;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a2 + 44) = 0;
    v4 = *(_DWORD *)(a2 + 36);
    v5 = *(_DWORD *)(a2 + 24);
    v6 = *(_BYTE *)(a2 + 40);
    v7 = *(_BYTE *)(a2 + 41);
    v8 = *(_QWORD *)(a1 + 8);
    v9 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    v10 = *(_QWORD *)(a1 + 28);
    *(_QWORD *)(a1 + 28) = *(_QWORD *)(a2 + 28);
    v17 = v10;
    LODWORD(v10) = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v4;
    v15[0] = &off_25135DC90;
    v21 = *(_DWORD *)(a1 + 44);
    v18 = v10;
    v16 = *(_DWORD *)(a1 + 24);
    v11 = *(_BYTE *)(a1 + 40);
    *(_BYTE *)(a1 + 40) = v6;
    v19 = v11;
    v12 = *(_BYTE *)(a1 + 41);
    *(_BYTE *)(a1 + 41) = v7;
    v20 = v12;
    v13 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 44) = v3;
    *(_DWORD *)(a1 + 24) = v5;
    *(_QWORD *)(a1 + 16) = v13;
    v15[1] = v8;
    v15[2] = v9;
    PB::Base::~Base((PB::Base *)v15);
  }
  return a1;
}

uint64_t CMMsl::Gyro::formatText(CMMsl::Gyro *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 22);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "location");
    v5 = *((_WORD *)this + 22);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "sampleNumMod3");
  v5 = *((_WORD *)this + 22);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "subType");
  v5 = *((_WORD *)this + 22);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  v5 = *((_WORD *)this + 22);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "triggerEnabled");
  v5 = *((_WORD *)this + 22);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "triggerOn");
  v5 = *((_WORD *)this + 22);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0)
      goto LABEL_9;
LABEL_19:
    PB::TextFormatter::format(a2, "y", *((float *)this + 8));
    if ((*((_WORD *)this + 22) & 0x40) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_10;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "x", *((float *)this + 7));
  v5 = *((_WORD *)this + 22);
  if ((v5 & 0x20) != 0)
    goto LABEL_19;
LABEL_9:
  if ((v5 & 0x40) != 0)
LABEL_10:
    PB::TextFormatter::format(a2, "z", *((float *)this + 9));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::Gyro::readFrom(CMMsl::Gyro *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  int v32;
  BOOL v33;
  int v34;
  BOOL v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  char v41;
  char v42;
  unsigned int v43;
  unint64_t v44;
  char v45;
  char v46;
  unsigned int v47;
  unint64_t v48;
  char v49;
  char v50;
  unsigned int v51;
  unint64_t v52;
  char v53;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_103;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 22) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        v2 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_87;
      case 2u:
        *((_WORD *)this + 22) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_86;
      case 3u:
        *((_WORD *)this + 22) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_86;
      case 4u:
        *((_WORD *)this + 22) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_86:
          v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_87:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_34:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 5u:
        *((_WORD *)this + 22) |= 8u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v42 = 0;
          v43 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_92;
            }
            v44 = v20++;
            v45 = *(_BYTE *)(v21 + v44);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v45 & 0x7F) << v42;
            if ((v45 & 0x80) == 0)
              break;
            v42 += 7;
            v14 = v43++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_91:
              v2 = v44 + 1;
              goto LABEL_92;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
          goto LABEL_91;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_92;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_92:
        *((_DWORD *)this + 6) = v24;
        break;
      case 6u:
        *((_WORD *)this + 22) |= 4u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v46 = 0;
          v47 = 0;
          v30 = 0;
          if (v2 <= v26)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_97;
            }
            v48 = v26++;
            v49 = *(_BYTE *)(v27 + v48);
            *((_QWORD *)a2 + 1) = v26;
            v30 |= (unint64_t)(v49 & 0x7F) << v46;
            if ((v49 & 0x80) == 0)
              break;
            v46 += 7;
            v14 = v47++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_96:
              v2 = v48 + 1;
              goto LABEL_97;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v30) = 0;
          goto LABEL_96;
        }
        v28 = 0;
        v29 = 0;
        v30 = 0;
        do
        {
          v2 = v26 + 1;
          *((_QWORD *)a2 + 1) = v26 + 1;
          v31 = *(_BYTE *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0)
            goto LABEL_97;
          v28 += 7;
          v26 = v2;
          v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_97:
        *((_DWORD *)this + 5) = v30;
        break;
      case 7u:
        *((_WORD *)this + 22) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v33 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v32 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v33 = v32 != 0;
        }
        *((_BYTE *)this + 40) = v33;
        break;
      case 8u:
        *((_WORD *)this + 22) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v35 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v34 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v35 = v34 != 0;
        }
        *((_BYTE *)this + 41) = v35;
        break;
      case 9u:
        *((_WORD *)this + 22) |= 2u;
        v36 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v37 = *(_QWORD *)a2;
        if (v36 > 0xFFFFFFFFFFFFFFF5 || v36 + 10 > v2)
        {
          v50 = 0;
          v51 = 0;
          v40 = 0;
          if (v2 <= v36)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v36)
            {
              LODWORD(v40) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_102;
            }
            v52 = v36++;
            v53 = *(_BYTE *)(v37 + v52);
            *((_QWORD *)a2 + 1) = v36;
            v40 |= (unint64_t)(v53 & 0x7F) << v50;
            if ((v53 & 0x80) == 0)
              break;
            v50 += 7;
            v14 = v51++ > 8;
            if (v14)
            {
              LODWORD(v40) = 0;
LABEL_101:
              v2 = v52 + 1;
              goto LABEL_102;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v40) = 0;
          goto LABEL_101;
        }
        v38 = 0;
        v39 = 0;
        v40 = 0;
        do
        {
          v2 = v36 + 1;
          *((_QWORD *)a2 + 1) = v36 + 1;
          v41 = *(_BYTE *)(v37 + v36);
          v40 |= (unint64_t)(v41 & 0x7F) << v38;
          if ((v41 & 0x80) == 0)
            goto LABEL_102;
          v38 += 7;
          v36 = v2;
          v14 = v39++ > 8;
        }
        while (!v14);
        LODWORD(v40) = 0;
LABEL_102:
        *((_DWORD *)this + 4) = v40;
        break;
      default:
        goto LABEL_19;
    }
LABEL_103:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::Gyro::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 44);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_WORD *)(v3 + 44);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  v4 = *(_WORD *)(v3 + 44);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 44);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  v4 = *(_WORD *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 44);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 44);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2);
  v4 = *(_WORD *)(v3 + 44);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_18:
  this = PB::Writer::write(a2);
  if ((*(_WORD *)(v3 + 44) & 2) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t CMMsl::Gyro::hash_value(CMMsl::Gyro *this)
{
  __int16 v1;
  double v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *((_WORD *)this + 22);
  if ((v1 & 1) == 0)
  {
    v2 = 0.0;
    if ((v1 & 0x10) != 0)
      goto LABEL_3;
LABEL_20:
    v4 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_6;
LABEL_21:
    v6 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_9;
LABEL_22:
    v8 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_12;
    goto LABEL_23;
  }
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 0x10) == 0)
    goto LABEL_20;
LABEL_3:
  v3 = *((float *)this + 7);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_21;
LABEL_6:
  v5 = *((float *)this + 8);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_22;
LABEL_9:
  v7 = *((float *)this + 9);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_12:
    v9 = *((unsigned int *)this + 6);
    if ((v1 & 4) != 0)
      goto LABEL_13;
    goto LABEL_24;
  }
LABEL_23:
  v9 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_13:
    v10 = *((unsigned int *)this + 5);
    if ((v1 & 0x80) != 0)
      goto LABEL_14;
    goto LABEL_25;
  }
LABEL_24:
  v10 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_14:
    v11 = *((unsigned __int8 *)this + 40);
    if ((*((_WORD *)this + 22) & 0x100) != 0)
      goto LABEL_15;
LABEL_26:
    v12 = 0;
    if ((v1 & 2) != 0)
      goto LABEL_16;
LABEL_27:
    v13 = 0;
    return v4 ^ *(_QWORD *)&v2 ^ v6 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13;
  }
LABEL_25:
  v11 = 0;
  if ((*((_WORD *)this + 22) & 0x100) == 0)
    goto LABEL_26;
LABEL_15:
  v12 = *((unsigned __int8 *)this + 41);
  if ((v1 & 2) == 0)
    goto LABEL_27;
LABEL_16:
  v13 = *((int *)this + 4);
  return v4 ^ *(_QWORD *)&v2 ^ v6 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13;
}

uint64_t CMMsl::GyroBiasAndVariance::GyroBiasAndVariance(uint64_t this)
{
  *(_QWORD *)this = &off_25135DCC8;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135DCC8;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

void CMMsl::GyroBiasAndVariance::~GyroBiasAndVariance(CMMsl::GyroBiasAndVariance *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::GyroBiasAndVariance::GyroBiasAndVariance(uint64_t this, const CMMsl::GyroBiasAndVariance *a2)
{
  char v2;
  char v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;

  *(_QWORD *)this = &off_25135DCC8;
  *(_DWORD *)(this + 36) = 0;
  v2 = *((_BYTE *)a2 + 36);
  if ((v2 & 1) != 0)
  {
    v4 = *((_DWORD *)a2 + 2);
    v3 = 1;
    *(_BYTE *)(this + 36) = 1;
    *(_DWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 36);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 36) & 2) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 3);
    v3 |= 2u;
    *(_BYTE *)(this + 36) = v3;
    *(_DWORD *)(this + 12) = v5;
    v2 = *((_BYTE *)a2 + 36);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *((_DWORD *)a2 + 4);
    v3 |= 4u;
    *(_BYTE *)(this + 36) = v3;
    *(_DWORD *)(this + 16) = v6;
    v2 = *((_BYTE *)a2 + 36);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 6);
  v3 |= 0x10u;
  *(_BYTE *)(this + 36) = v3;
  *(_DWORD *)(this + 24) = v7;
  v2 = *((_BYTE *)a2 + 36);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_15;
  }
LABEL_14:
  v8 = *((_DWORD *)a2 + 7);
  v3 |= 0x20u;
  *(_BYTE *)(this + 36) = v3;
  *(_DWORD *)(this + 28) = v8;
  v2 = *((_BYTE *)a2 + 36);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0)
      return this;
LABEL_16:
    v10 = *((_DWORD *)a2 + 5);
    *(_BYTE *)(this + 36) = v3 | 8;
    *(_DWORD *)(this + 20) = v10;
    return this;
  }
LABEL_15:
  v9 = *((_DWORD *)a2 + 8);
  v3 |= 0x40u;
  *(_BYTE *)(this + 36) = v3;
  *(_DWORD *)(this + 32) = v9;
  if ((*((_BYTE *)a2 + 36) & 8) != 0)
    goto LABEL_16;
  return this;
}

uint64_t CMMsl::GyroBiasAndVariance::operator=(uint64_t a1, const CMMsl::GyroBiasAndVariance *a2)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  _BYTE v10[8];
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;

  if ((const CMMsl::GyroBiasAndVariance *)a1 != a2)
  {
    CMMsl::GyroBiasAndVariance::GyroBiasAndVariance((uint64_t)v10, a2);
    v3 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v16;
    v16 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v11;
    v11 = v4;
    v5 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v12;
    v12 = v5;
    v6 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v14;
    v14 = v6;
    v7 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v15;
    v15 = v7;
    v8 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v13;
    v13 = v8;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::GyroBiasAndVariance *a2, CMMsl::GyroBiasAndVariance *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  float result;
  int v10;

  v3 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v3;
  v4 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  v5 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v5;
  v6 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v6;
  v7 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v7;
  v8 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v8;
  result = *((float *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((float *)a2 + 8) = result;
  v10 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v10;
  return result;
}

float CMMsl::GyroBiasAndVariance::GyroBiasAndVariance(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135DCC8;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  result = *(float *)(a2 + 32);
  *(float *)(a1 + 32) = result;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_25135DCC8;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  result = *(float *)(a2 + 32);
  *(float *)(a1 + 32) = result;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return result;
}

uint64_t CMMsl::GyroBiasAndVariance::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  _QWORD v13[2];
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;

  if (a1 != a2)
  {
    v13[0] = &off_25135DCC8;
    v3 = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a2 + 36) = 0;
    v4 = *(_DWORD *)(a2 + 16);
    v5 = *(_DWORD *)(a2 + 32);
    v6 = *(_DWORD *)(a2 + 20);
    v18 = *(_DWORD *)(a1 + 36);
    v7 = *(_QWORD *)(a2 + 8);
    v13[1] = *(_QWORD *)(a1 + 8);
    v14 = *(_DWORD *)(a1 + 16);
    v8 = *(_QWORD *)(a1 + 24);
    v9 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 36) = v3;
    *(_QWORD *)(a1 + 8) = v7;
    *(_DWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v9;
    v16 = v8;
    v10 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v5;
    v17 = v10;
    v11 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v6;
    v15 = v11;
    PB::Base::~Base((PB::Base *)v13);
  }
  return a1;
}

uint64_t CMMsl::GyroBiasAndVariance::formatText(CMMsl::GyroBiasAndVariance *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 36);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "biasX", *((float *)this + 2));
    v5 = *((_BYTE *)this + 36);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*((_BYTE *)this + 36) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "biasY", *((float *)this + 3));
  v5 = *((_BYTE *)this + 36);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "biasZ", *((float *)this + 4));
  v5 = *((_BYTE *)this + 36);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "doingBiasEstimation");
  v5 = *((_BYTE *)this + 36);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
LABEL_15:
    PB::TextFormatter::format(a2, "varianceY", *((float *)this + 7));
    if ((*((_BYTE *)this + 36) & 0x40) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_8;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "varianceX", *((float *)this + 6));
  v5 = *((_BYTE *)this + 36);
  if ((v5 & 0x20) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v5 & 0x40) != 0)
LABEL_8:
    PB::TextFormatter::format(a2, "varianceZ", *((float *)this + 8));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GyroBiasAndVariance::readFrom(CMMsl::GyroBiasAndVariance *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_62;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 36) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_40;
        *((_DWORD *)this + 2) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_56;
      case 2u:
        *((_BYTE *)this + 36) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_40;
        *((_DWORD *)this + 3) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_56;
      case 3u:
        *((_BYTE *)this + 36) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_40;
        *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_56;
      case 4u:
        *((_BYTE *)this + 36) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_40;
        *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_56;
      case 5u:
        *((_BYTE *)this + 36) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_40;
        *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_56;
      case 6u:
        *((_BYTE *)this + 36) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_56:
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_40:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 7u:
        *((_BYTE *)this + 36) |= 8u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v26 = 0;
          v27 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_61;
            }
            v28 = v20++;
            v29 = *(_BYTE *)(v21 + v28);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0)
              break;
            v26 += 7;
            v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_60:
              v2 = v28 + 1;
              goto LABEL_61;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
          goto LABEL_60;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_61;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_61:
        *((_DWORD *)this + 5) = v24;
        break;
      default:
        goto LABEL_19;
    }
LABEL_62:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::GyroBiasAndVariance::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 36);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 8));
    v4 = *(_BYTE *)(v3 + 36);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(this + 36) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 12));
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_14:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  if ((*(_BYTE *)(v3 + 36) & 8) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

BOOL CMMsl::GyroBiasAndVariance::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 36) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) == 0 || *(float *)(a1 + 8) != *(float *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 36) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 2) == 0 || *(float *)(a1 + 12) != *(float *)(a2 + 12))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 36) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 4) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 36) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 0x10) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 36) & 0x20) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 0x20) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 36) & 0x40) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 0x40) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 0x40) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 36) & 8) == 0;
  if ((*(_BYTE *)(a1 + 36) & 8) != 0)
    return (*(_BYTE *)(a2 + 36) & 8) != 0 && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
  return v2;
}

uint64_t CMMsl::GyroBiasAndVariance::hash_value(CMMsl::GyroBiasAndVariance *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  float v13;

  if ((*((_BYTE *)this + 36) & 1) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 36) & 2) != 0)
      goto LABEL_3;
LABEL_22:
    v3 = 0;
    if ((*((_BYTE *)this + 36) & 4) != 0)
      goto LABEL_6;
LABEL_23:
    v5 = 0;
    if ((*((_BYTE *)this + 36) & 0x10) != 0)
      goto LABEL_9;
LABEL_24:
    v7 = 0;
    if ((*((_BYTE *)this + 36) & 0x20) != 0)
      goto LABEL_12;
LABEL_25:
    v9 = 0;
    if ((*((_BYTE *)this + 36) & 0x40) != 0)
      goto LABEL_15;
    goto LABEL_26;
  }
  v13 = *((float *)this + 2);
  v1 = LODWORD(v13);
  if (v13 == 0.0)
    v1 = 0;
  if ((*((_BYTE *)this + 36) & 2) == 0)
    goto LABEL_22;
LABEL_3:
  v2 = *((float *)this + 3);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 36) & 4) == 0)
    goto LABEL_23;
LABEL_6:
  v4 = *((float *)this + 4);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((*((_BYTE *)this + 36) & 0x10) == 0)
    goto LABEL_24;
LABEL_9:
  v6 = *((float *)this + 6);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  if ((*((_BYTE *)this + 36) & 0x20) == 0)
    goto LABEL_25;
LABEL_12:
  v8 = *((float *)this + 7);
  v9 = LODWORD(v8);
  if (v8 == 0.0)
    v9 = 0;
  if ((*((_BYTE *)this + 36) & 0x40) != 0)
  {
LABEL_15:
    v10 = *((float *)this + 8);
    v11 = LODWORD(v10);
    if (v10 == 0.0)
      v11 = 0;
    if ((*((_BYTE *)this + 36) & 8) != 0)
      goto LABEL_18;
LABEL_27:
    v12 = 0;
    return v3 ^ v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v12;
  }
LABEL_26:
  v11 = 0;
  if ((*((_BYTE *)this + 36) & 8) == 0)
    goto LABEL_27;
LABEL_18:
  v12 = *((int *)this + 5);
  return v3 ^ v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v12;
}

double CMMsl::GyroBiasConstraints::GyroBiasConstraints(CMMsl::GyroBiasConstraints *this)
{
  double result;

  *(_QWORD *)this = &off_25135DD00;
  *((_DWORD *)this + 29) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_25135DD00;
  *((_DWORD *)this + 29) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  return result;
}

void CMMsl::GyroBiasConstraints::~GyroBiasConstraints(CMMsl::GyroBiasConstraints *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = &off_25135DD00;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 7);
  if (v3)
  {
    *((_QWORD *)this + 8) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 5) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 1);
  if (v5)
  {
    *((_QWORD *)this + 2) = v5;
    operator delete(v5);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::GyroBiasConstraints::~GyroBiasConstraints(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::GyroBiasConstraints *CMMsl::GyroBiasConstraints::GyroBiasConstraints(CMMsl::GyroBiasConstraints *this, const CMMsl::GyroBiasConstraints *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;

  *(_QWORD *)this = &off_25135DD00;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (_QWORD *)((char *)this + 8);
  *(_OWORD *)((char *)this + 56) = 0u;
  v5 = (_QWORD *)((char *)this + 56);
  *((_DWORD *)this + 29) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  v6 = *((_BYTE *)a2 + 116);
  if ((v6 & 1) != 0)
  {
    v8 = *((_QWORD *)a2 + 13);
    v7 = 1;
    *((_BYTE *)this + 116) = 1;
    *((_QWORD *)this + 13) = v8;
    v6 = *((_BYTE *)a2 + 116);
    if ((v6 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v7 = 0;
  if ((*((_BYTE *)a2 + 116) & 4) != 0)
  {
LABEL_5:
    v9 = *((_BYTE *)a2 + 113);
    v7 |= 4u;
    *((_BYTE *)this + 116) = v7;
    *((_BYTE *)this + 113) = v9;
    v6 = *((_BYTE *)a2 + 116);
  }
LABEL_6:
  if ((v6 & 2) != 0)
  {
    v10 = *((_BYTE *)a2 + 112);
    *((_BYTE *)this + 116) = v7 | 2;
    *((_BYTE *)this + 112) = v10;
  }
  if (this != a2)
  {
    sub_242911380((_QWORD *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
    sub_242911380(v5, *((char **)a2 + 7), *((char **)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 2);
    sub_242911380((_QWORD *)this + 10, *((char **)a2 + 10), *((char **)a2 + 11), (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 2);
    sub_242911380(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  }
  return this;
}

CMMsl *CMMsl::GyroBiasConstraints::operator=(CMMsl *a1, const CMMsl::GyroBiasConstraints *a2)
{
  CMMsl::GyroBiasConstraints *v3;
  _BYTE v5[120];

  if (a1 != a2)
  {
    CMMsl::GyroBiasConstraints::GyroBiasConstraints((CMMsl::GyroBiasConstraints *)v5, a2);
    CMMsl::swap(a1, (CMMsl::GyroBiasConstraints *)v5, v3);
    CMMsl::GyroBiasConstraints::~GyroBiasConstraints((CMMsl::GyroBiasConstraints *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::GyroBiasConstraints *a2, CMMsl::GyroBiasConstraints *a3)
{
  int v3;
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v3;
  result = *((double *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((double *)a2 + 13) = result;
  LOBYTE(v3) = *((_BYTE *)this + 113);
  *((_BYTE *)this + 113) = *((_BYTE *)a2 + 113);
  *((_BYTE *)a2 + 113) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 112);
  *((_BYTE *)this + 112) = *((_BYTE *)a2 + 112);
  *((_BYTE *)a2 + 112) = v3;
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v5;
  v6 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v6;
  v7 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v7;
  v8 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v8;
  v9 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v9;
  v10 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v10;
  v11 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v11;
  v12 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v12;
  v13 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v13;
  v14 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v14;
  v15 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v15;
  v16 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v16;
  return result;
}

uint64_t CMMsl::GyroBiasConstraints::GyroBiasConstraints(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_25135DD00;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a2 + 116) = 0;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 113) = *(_BYTE *)(a2 + 113);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  sub_242911330(a1 + 32, (__n128 *)(a2 + 32));
  sub_242911330(a1 + 56, (__n128 *)(a2 + 56));
  sub_242911330(a1 + 80, (__n128 *)(a2 + 80));
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  return a1;
}

CMMsl *CMMsl::GyroBiasConstraints::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::GyroBiasConstraints *v3;
  _BYTE v5[120];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::GyroBiasConstraints::GyroBiasConstraints((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::GyroBiasConstraints *)v5, v3);
    CMMsl::GyroBiasConstraints::~GyroBiasConstraints((CMMsl::GyroBiasConstraints *)v5);
  }
  return a1;
}

uint64_t CMMsl::GyroBiasConstraints::formatText(CMMsl::GyroBiasConstraints *this, PB::TextFormatter *a2, const char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;
  float *v11;
  float *v12;
  float v13;
  float *v14;
  float *v15;
  float v16;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (float *)*((_QWORD *)this + 1);
  v6 = (float *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "accelVariance", v7);
  }
  if ((*((_BYTE *)this + 116) & 2) != 0)
    PB::TextFormatter::format(a2, "allowRelaxedGyroMean");
  v8 = (float *)*((_QWORD *)this + 4);
  v9 = (float *)*((_QWORD *)this + 5);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(a2, "gyroMean", v10);
  }
  v11 = (float *)*((_QWORD *)this + 7);
  v12 = (float *)*((_QWORD *)this + 8);
  while (v11 != v12)
  {
    v13 = *v11++;
    PB::TextFormatter::format(a2, "gyroVariance", v13);
  }
  if ((*((_BYTE *)this + 116) & 4) != 0)
    PB::TextFormatter::format(a2, "stillOnAll");
  v14 = (float *)*((_QWORD *)this + 10);
  v15 = (float *)*((_QWORD *)this + 11);
  while (v14 != v15)
  {
    v16 = *v14++;
    PB::TextFormatter::format(a2, "temperatureBias", v16);
  }
  if ((*((_BYTE *)this + 116) & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 13));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::GyroBiasConstraints::readFrom(CMMsl::GyroBiasConstraints *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  BOOL v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  _DWORD *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  _DWORD *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  _DWORD *v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  _DWORD *v69;
  int v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  _DWORD *v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  _DWORD *v83;
  int v84;
  unint64_t v85;
  unint64_t v86;
  char *v87;
  _DWORD *v88;
  unint64_t v89;
  char *v90;
  unint64_t v91;
  char *v92;
  unint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  _DWORD *v119;
  int v120;
  _DWORD *v121;
  int v122;
  _DWORD *v123;
  int v124;
  _DWORD *v125;
  int v126;
  unint64_t v127;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_21:
      v19 = v11 & 7;
      if (v19 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 116) |= 1u;
          v20 = *((_QWORD *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_202;
          *((_QWORD *)this + 13) = *(_QWORD *)(*(_QWORD *)a2 + v20);
          v21 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_204;
        case 2u:
          *((_BYTE *)this + 116) |= 4u;
          v22 = *((_QWORD *)a2 + 1);
          if (v22 >= *((_QWORD *)a2 + 2))
          {
            v25 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v23 = v22 + 1;
            v24 = *(unsigned __int8 *)(*(_QWORD *)a2 + v22);
            *((_QWORD *)a2 + 1) = v23;
            v25 = v24 != 0;
          }
          *((_BYTE *)this + 113) = v25;
          goto LABEL_205;
        case 3u:
          *((_BYTE *)this + 116) |= 2u;
          v26 = *((_QWORD *)a2 + 1);
          if (v26 >= *((_QWORD *)a2 + 2))
          {
            v29 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v27 = v26 + 1;
            v28 = *(unsigned __int8 *)(*(_QWORD *)a2 + v26);
            *((_QWORD *)a2 + 1) = v27;
            v29 = v28 != 0;
          }
          *((_BYTE *)this + 112) = v29;
          goto LABEL_205;
        case 4u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v30 = *((_QWORD *)a2 + 1);
            v31 = *((_QWORD *)a2 + 2);
            while (v30 < v31 && !*((_BYTE *)a2 + 24))
            {
              v33 = (char *)*((_QWORD *)this + 5);
              v32 = *((_QWORD *)this + 6);
              if ((unint64_t)v33 >= v32)
              {
                v35 = (char *)*((_QWORD *)this + 4);
                v36 = (v33 - v35) >> 2;
                v37 = v36 + 1;
                if ((unint64_t)(v36 + 1) >> 62)
                  goto LABEL_212;
                v38 = v32 - (_QWORD)v35;
                if (v38 >> 1 > v37)
                  v37 = v38 >> 1;
                if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
                  v39 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v39 = v37;
                if (v39)
                {
                  v39 = (unint64_t)sub_2429114B8(v39);
                  v35 = (char *)*((_QWORD *)this + 4);
                  v33 = (char *)*((_QWORD *)this + 5);
                }
                else
                {
                  v40 = 0;
                }
                v41 = (_DWORD *)(v39 + 4 * v36);
                *v41 = 0;
                v34 = v41 + 1;
                while (v33 != v35)
                {
                  v42 = *((_DWORD *)v33 - 1);
                  v33 -= 4;
                  *--v41 = v42;
                }
                *((_QWORD *)this + 4) = v41;
                *((_QWORD *)this + 5) = v34;
                *((_QWORD *)this + 6) = v39 + 4 * v40;
                if (v35)
                  operator delete(v35);
              }
              else
              {
                *(_DWORD *)v33 = 0;
                v34 = v33 + 4;
              }
              *((_QWORD *)this + 5) = v34;
              v43 = *((_QWORD *)a2 + 1);
              if (v43 > 0xFFFFFFFFFFFFFFFBLL || v43 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_126;
              *(v34 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v43);
              v31 = *((_QWORD *)a2 + 2);
              v30 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v30;
            }
            goto LABEL_127;
          }
          v87 = (char *)*((_QWORD *)this + 5);
          v86 = *((_QWORD *)this + 6);
          if ((unint64_t)v87 >= v86)
          {
            v95 = (char *)*((_QWORD *)this + 4);
            v96 = (v87 - v95) >> 2;
            v97 = v96 + 1;
            if ((unint64_t)(v96 + 1) >> 62)
              goto LABEL_212;
            v98 = v86 - (_QWORD)v95;
            if (v98 >> 1 > v97)
              v97 = v98 >> 1;
            if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFFCLL)
              v99 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v99 = v97;
            if (v99)
            {
              v99 = (unint64_t)sub_2429114B8(v99);
              v95 = (char *)*((_QWORD *)this + 4);
              v87 = (char *)*((_QWORD *)this + 5);
            }
            else
            {
              v100 = 0;
            }
            v119 = (_DWORD *)(v99 + 4 * v96);
            *v119 = 0;
            v88 = v119 + 1;
            while (v87 != v95)
            {
              v120 = *((_DWORD *)v87 - 1);
              v87 -= 4;
              *--v119 = v120;
            }
            *((_QWORD *)this + 4) = v119;
            *((_QWORD *)this + 5) = v88;
            *((_QWORD *)this + 6) = v99 + 4 * v100;
            if (v95)
              operator delete(v95);
          }
          else
          {
            *(_DWORD *)v87 = 0;
            v88 = v87 + 4;
          }
          *((_QWORD *)this + 5) = v88;
          goto LABEL_200;
        case 5u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v44 = *((_QWORD *)a2 + 1);
            v45 = *((_QWORD *)a2 + 2);
            while (v44 < v45 && !*((_BYTE *)a2 + 24))
            {
              v47 = (char *)*((_QWORD *)this + 8);
              v46 = *((_QWORD *)this + 9);
              if ((unint64_t)v47 >= v46)
              {
                v49 = (char *)*((_QWORD *)this + 7);
                v50 = (v47 - v49) >> 2;
                v51 = v50 + 1;
                if ((unint64_t)(v50 + 1) >> 62)
                  goto LABEL_212;
                v52 = v46 - (_QWORD)v49;
                if (v52 >> 1 > v51)
                  v51 = v52 >> 1;
                if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL)
                  v53 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v53 = v51;
                if (v53)
                {
                  v53 = (unint64_t)sub_2429114B8(v53);
                  v49 = (char *)*((_QWORD *)this + 7);
                  v47 = (char *)*((_QWORD *)this + 8);
                }
                else
                {
                  v54 = 0;
                }
                v55 = (_DWORD *)(v53 + 4 * v50);
                *v55 = 0;
                v48 = v55 + 1;
                while (v47 != v49)
                {
                  v56 = *((_DWORD *)v47 - 1);
                  v47 -= 4;
                  *--v55 = v56;
                }
                *((_QWORD *)this + 7) = v55;
                *((_QWORD *)this + 8) = v48;
                *((_QWORD *)this + 9) = v53 + 4 * v54;
                if (v49)
                  operator delete(v49);
              }
              else
              {
                *(_DWORD *)v47 = 0;
                v48 = v47 + 4;
              }
              *((_QWORD *)this + 8) = v48;
              v57 = *((_QWORD *)a2 + 1);
              if (v57 > 0xFFFFFFFFFFFFFFFBLL || v57 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_126;
              *(v48 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v57);
              v45 = *((_QWORD *)a2 + 2);
              v44 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v44;
            }
            goto LABEL_127;
          }
          v90 = (char *)*((_QWORD *)this + 8);
          v89 = *((_QWORD *)this + 9);
          if ((unint64_t)v90 >= v89)
          {
            v101 = (char *)*((_QWORD *)this + 7);
            v102 = (v90 - v101) >> 2;
            v103 = v102 + 1;
            if ((unint64_t)(v102 + 1) >> 62)
              goto LABEL_212;
            v104 = v89 - (_QWORD)v101;
            if (v104 >> 1 > v103)
              v103 = v104 >> 1;
            if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFFCLL)
              v105 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v105 = v103;
            if (v105)
            {
              v105 = (unint64_t)sub_2429114B8(v105);
              v101 = (char *)*((_QWORD *)this + 7);
              v90 = (char *)*((_QWORD *)this + 8);
            }
            else
            {
              v106 = 0;
            }
            v121 = (_DWORD *)(v105 + 4 * v102);
            *v121 = 0;
            v88 = v121 + 1;
            while (v90 != v101)
            {
              v122 = *((_DWORD *)v90 - 1);
              v90 -= 4;
              *--v121 = v122;
            }
            *((_QWORD *)this + 7) = v121;
            *((_QWORD *)this + 8) = v88;
            *((_QWORD *)this + 9) = v105 + 4 * v106;
            if (v101)
              operator delete(v101);
          }
          else
          {
            *(_DWORD *)v90 = 0;
            v88 = v90 + 4;
          }
          *((_QWORD *)this + 8) = v88;
          goto LABEL_200;
        case 6u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v58 = *((_QWORD *)a2 + 1);
            v59 = *((_QWORD *)a2 + 2);
            while (v58 < v59 && !*((_BYTE *)a2 + 24))
            {
              v61 = (char *)*((_QWORD *)this + 11);
              v60 = *((_QWORD *)this + 12);
              if ((unint64_t)v61 >= v60)
              {
                v63 = (char *)*((_QWORD *)this + 10);
                v64 = (v61 - v63) >> 2;
                v65 = v64 + 1;
                if ((unint64_t)(v64 + 1) >> 62)
                  goto LABEL_212;
                v66 = v60 - (_QWORD)v63;
                if (v66 >> 1 > v65)
                  v65 = v66 >> 1;
                if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL)
                  v67 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v67 = v65;
                if (v67)
                {
                  v67 = (unint64_t)sub_2429114B8(v67);
                  v63 = (char *)*((_QWORD *)this + 10);
                  v61 = (char *)*((_QWORD *)this + 11);
                }
                else
                {
                  v68 = 0;
                }
                v69 = (_DWORD *)(v67 + 4 * v64);
                *v69 = 0;
                v62 = v69 + 1;
                while (v61 != v63)
                {
                  v70 = *((_DWORD *)v61 - 1);
                  v61 -= 4;
                  *--v69 = v70;
                }
                *((_QWORD *)this + 10) = v69;
                *((_QWORD *)this + 11) = v62;
                *((_QWORD *)this + 12) = v67 + 4 * v68;
                if (v63)
                  operator delete(v63);
              }
              else
              {
                *(_DWORD *)v61 = 0;
                v62 = v61 + 4;
              }
              *((_QWORD *)this + 11) = v62;
              v71 = *((_QWORD *)a2 + 1);
              if (v71 > 0xFFFFFFFFFFFFFFFBLL || v71 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_126;
              *(v62 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v71);
              v59 = *((_QWORD *)a2 + 2);
              v58 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v58;
            }
            goto LABEL_127;
          }
          v92 = (char *)*((_QWORD *)this + 11);
          v91 = *((_QWORD *)this + 12);
          if ((unint64_t)v92 >= v91)
          {
            v107 = (char *)*((_QWORD *)this + 10);
            v108 = (v92 - v107) >> 2;
            v109 = v108 + 1;
            if ((unint64_t)(v108 + 1) >> 62)
              goto LABEL_212;
            v110 = v91 - (_QWORD)v107;
            if (v110 >> 1 > v109)
              v109 = v110 >> 1;
            if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFFCLL)
              v111 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v111 = v109;
            if (v111)
            {
              v111 = (unint64_t)sub_2429114B8(v111);
              v107 = (char *)*((_QWORD *)this + 10);
              v92 = (char *)*((_QWORD *)this + 11);
            }
            else
            {
              v112 = 0;
            }
            v123 = (_DWORD *)(v111 + 4 * v108);
            *v123 = 0;
            v88 = v123 + 1;
            while (v92 != v107)
            {
              v124 = *((_DWORD *)v92 - 1);
              v92 -= 4;
              *--v123 = v124;
            }
            *((_QWORD *)this + 10) = v123;
            *((_QWORD *)this + 11) = v88;
            *((_QWORD *)this + 12) = v111 + 4 * v112;
            if (v107)
              operator delete(v107);
          }
          else
          {
            *(_DWORD *)v92 = 0;
            v88 = v92 + 4;
          }
          *((_QWORD *)this + 11) = v88;
          goto LABEL_200;
        case 7u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v72 = *((_QWORD *)a2 + 1);
            v73 = *((_QWORD *)a2 + 2);
            while (v72 < v73 && !*((_BYTE *)a2 + 24))
            {
              v75 = (char *)*((_QWORD *)this + 2);
              v74 = *((_QWORD *)this + 3);
              if ((unint64_t)v75 >= v74)
              {
                v77 = (char *)*((_QWORD *)this + 1);
                v78 = (v75 - v77) >> 2;
                v79 = v78 + 1;
                if ((unint64_t)(v78 + 1) >> 62)
                  goto LABEL_212;
                v80 = v74 - (_QWORD)v77;
                if (v80 >> 1 > v79)
                  v79 = v80 >> 1;
                if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFFCLL)
                  v81 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v81 = v79;
                if (v81)
                {
                  v81 = (unint64_t)sub_2429114B8(v81);
                  v77 = (char *)*((_QWORD *)this + 1);
                  v75 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v82 = 0;
                }
                v83 = (_DWORD *)(v81 + 4 * v78);
                *v83 = 0;
                v76 = v83 + 1;
                while (v75 != v77)
                {
                  v84 = *((_DWORD *)v75 - 1);
                  v75 -= 4;
                  *--v83 = v84;
                }
                *((_QWORD *)this + 1) = v83;
                *((_QWORD *)this + 2) = v76;
                *((_QWORD *)this + 3) = v81 + 4 * v82;
                if (v77)
                  operator delete(v77);
              }
              else
              {
                *(_DWORD *)v75 = 0;
                v76 = v75 + 4;
              }
              *((_QWORD *)this + 2) = v76;
              v85 = *((_QWORD *)a2 + 1);
              if (v85 > 0xFFFFFFFFFFFFFFFBLL || v85 + 4 > *((_QWORD *)a2 + 2))
              {
LABEL_126:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v76 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v85);
              v73 = *((_QWORD *)a2 + 2);
              v72 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v72;
            }
LABEL_127:
            PB::Reader::recallMark();
          }
          else
          {
            v94 = (char *)*((_QWORD *)this + 2);
            v93 = *((_QWORD *)this + 3);
            if ((unint64_t)v94 >= v93)
            {
              v113 = (char *)*((_QWORD *)this + 1);
              v114 = (v94 - v113) >> 2;
              v115 = v114 + 1;
              if ((unint64_t)(v114 + 1) >> 62)
LABEL_212:
                sub_242729A44();
              v116 = v93 - (_QWORD)v113;
              if (v116 >> 1 > v115)
                v115 = v116 >> 1;
              if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFFCLL)
                v117 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v117 = v115;
              if (v117)
              {
                v117 = (unint64_t)sub_2429114B8(v117);
                v113 = (char *)*((_QWORD *)this + 1);
                v94 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v118 = 0;
              }
              v125 = (_DWORD *)(v117 + 4 * v114);
              *v125 = 0;
              v88 = v125 + 1;
              while (v94 != v113)
              {
                v126 = *((_DWORD *)v94 - 1);
                v94 -= 4;
                *--v125 = v126;
              }
              *((_QWORD *)this + 1) = v125;
              *((_QWORD *)this + 2) = v88;
              *((_QWORD *)this + 3) = v117 + 4 * v118;
              if (v113)
                operator delete(v113);
            }
            else
            {
              *(_DWORD *)v94 = 0;
              v88 = v94 + 4;
            }
            *((_QWORD *)this + 2) = v88;
LABEL_200:
            v127 = *((_QWORD *)a2 + 1);
            if (v127 <= 0xFFFFFFFFFFFFFFFBLL && v127 + 4 <= *((_QWORD *)a2 + 2))
            {
              *(v88 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v127);
              v21 = *((_QWORD *)a2 + 1) + 4;
LABEL_204:
              *((_QWORD *)a2 + 1) = v21;
            }
            else
            {
LABEL_202:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
          break;
        default:
          goto LABEL_19;
      }
      goto LABEL_205;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_21;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    if ((PB::Reader::skip(a2) & 1) == 0)
      return 0;
LABEL_205:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
}

uint64_t CMMsl::GyroBiasConstraints::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;
  float *v11;
  float *v12;
  float v13;
  float *v14;
  float *v15;
  float v16;

  v3 = this;
  v4 = *(_BYTE *)(this + 116);
  if ((v4 & 1) == 0)
  {
    if ((*(_BYTE *)(this + 116) & 4) == 0)
      goto LABEL_3;
LABEL_19:
    this = PB::Writer::write(a2);
    if ((*(_BYTE *)(v3 + 116) & 2) == 0)
      goto LABEL_5;
    goto LABEL_4;
  }
  this = PB::Writer::write(a2, *(double *)(this + 104));
  v4 = *(_BYTE *)(v3 + 116);
  if ((v4 & 4) != 0)
    goto LABEL_19;
LABEL_3:
  if ((v4 & 2) != 0)
LABEL_4:
    this = PB::Writer::write(a2);
LABEL_5:
  v5 = *(float **)(v3 + 32);
  v6 = *(float **)(v3 + 40);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7);
  }
  v8 = *(float **)(v3 + 56);
  v9 = *(float **)(v3 + 64);
  while (v8 != v9)
  {
    v10 = *v8++;
    this = PB::Writer::write(a2, v10);
  }
  v11 = *(float **)(v3 + 80);
  v12 = *(float **)(v3 + 88);
  while (v11 != v12)
  {
    v13 = *v11++;
    this = PB::Writer::write(a2, v13);
  }
  v15 = *(float **)(v3 + 8);
  v14 = *(float **)(v3 + 16);
  while (v15 != v14)
  {
    v16 = *v15++;
    this = PB::Writer::write(a2, v16);
  }
  return this;
}

BOOL CMMsl::GyroBiasConstraints::operator==(uint64_t a1, uint64_t a2)
{
  float *v2;
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  uint64_t v11;
  uint64_t v12;
  float *v13;
  uint64_t v14;
  float v15;
  _BOOL8 result;
  BOOL v17;

  if ((*(_BYTE *)(a1 + 116) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 116) & 1) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 116) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 116) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 116) & 4) == 0 || *(unsigned __int8 *)(a1 + 113) != *(unsigned __int8 *)(a2 + 113))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 116) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 116) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 116) & 2) == 0 || *(unsigned __int8 *)(a1 + 112) != *(unsigned __int8 *)(a2 + 112))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 116) & 2) != 0)
  {
    return 0;
  }
  v3 = *(float **)(a1 + 32);
  v2 = *(float **)(a1 + 40);
  v4 = *(float **)(a2 + 32);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 40) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v6 = *(float **)(a1 + 56);
  v5 = *(float **)(a1 + 64);
  v7 = *(float **)(a2 + 56);
  if ((char *)v5 - (char *)v6 != *(_QWORD *)(a2 + 64) - (_QWORD)v7)
    return 0;
  while (v6 != v5)
  {
    if (*v6 != *v7)
      return 0;
    ++v6;
    ++v7;
  }
  v9 = *(float **)(a1 + 80);
  v8 = *(float **)(a1 + 88);
  v10 = *(float **)(a2 + 80);
  if ((char *)v8 - (char *)v9 != *(_QWORD *)(a2 + 88) - (_QWORD)v10)
    return 0;
  while (v9 != v8)
  {
    if (*v9 != *v10)
      return 0;
    ++v9;
    ++v10;
  }
  v12 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v13 = *(float **)(a2 + 8);
  if (v11 - v12 != *(_QWORD *)(a2 + 16) - (_QWORD)v13)
    return 0;
  if (v12 == v11)
    return 1;
  v14 = v12 + 4;
  do
  {
    v15 = *v13++;
    result = *(float *)(v14 - 4) == v15;
    v17 = *(float *)(v14 - 4) != v15 || v14 == v11;
    v14 += 4;
  }
  while (!v17);
  return result;
}

uint64_t CMMsl::GyroBiasConstraints::hash_value(CMMsl::GyroBiasConstraints *this)
{
  double v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*((_BYTE *)this + 116) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 116) & 4) != 0)
      goto LABEL_3;
LABEL_8:
    v2 = 0;
    if ((*((_BYTE *)this + 116) & 2) != 0)
      goto LABEL_4;
LABEL_9:
    v3 = 0;
    goto LABEL_10;
  }
  v1 = *((double *)this + 13);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 116) & 4) == 0)
    goto LABEL_8;
LABEL_3:
  v2 = *((unsigned __int8 *)this + 113);
  if ((*((_BYTE *)this + 116) & 2) == 0)
    goto LABEL_9;
LABEL_4:
  v3 = *((unsigned __int8 *)this + 112);
LABEL_10:
  v4 = v2 ^ *(_QWORD *)&v1 ^ v3 ^ PBHashBytes();
  v5 = PBHashBytes();
  v6 = v4 ^ v5 ^ PBHashBytes();
  return v6 ^ PBHashBytes();
}

uint64_t CMMsl::GyroBiasCorrection::GyroBiasCorrection(uint64_t this)
{
  *(_QWORD *)this = &off_25135DD38;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135DD38;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::GyroBiasCorrection::~GyroBiasCorrection(CMMsl::GyroBiasCorrection *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135DD38;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135DD38;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135DD38;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::GyroBiasCorrection *CMMsl::GyroBiasCorrection::GyroBiasCorrection(CMMsl::GyroBiasCorrection *this, const CMMsl::DeviceMotionCorrection **a2)
{
  CMMsl::DeviceMotionCorrection *v4;
  CMMsl::DeviceMotionCorrection *v5;
  uint64_t v6;
  int v7;

  *(_QWORD *)this = &off_25135DD38;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 5) = 0;
  if (a2[1])
  {
    v4 = (CMMsl::DeviceMotionCorrection *)operator new();
    v5 = CMMsl::DeviceMotionCorrection::DeviceMotionCorrection(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v7 = *((_DWORD *)a2 + 4);
    *((_BYTE *)this + 20) |= 1u;
    *((_DWORD *)this + 4) = v7;
  }
  return this;
}

uint64_t CMMsl::GyroBiasCorrection::operator=(uint64_t a1, const CMMsl::DeviceMotionCorrection **a2)
{
  uint64_t v3;
  uint64_t v4;
  void (**v6)(CMMsl::GyroBiasCorrection *__hidden);
  uint64_t v7;
  uint64_t v8;

  if ((const CMMsl::DeviceMotionCorrection **)a1 != a2)
  {
    CMMsl::GyroBiasCorrection::GyroBiasCorrection((CMMsl::GyroBiasCorrection *)&v6, a2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v7;
    v4 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v8;
    v8 = v4;
    v6 = &off_25135DD38;
    v7 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::GyroBiasCorrection *a2, CMMsl::GyroBiasCorrection *a3)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  return this;
}

uint64_t CMMsl::GyroBiasCorrection::GyroBiasCorrection(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_25135DD38;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_25135DD38;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t CMMsl::GyroBiasCorrection::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v4;
    v8[2] = v6;
    v8[0] = &off_25135DD38;
    v8[1] = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::GyroBiasCorrection::formatText(CMMsl::GyroBiasCorrection *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 20) & 1) != 0)
    PB::TextFormatter::format(a2, "axis");
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "correction");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GyroBiasCorrection::readFrom(CMMsl::GyroBiasCorrection *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  unint64_t v32;
  char v33;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_28;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 1u;
        v22 = *((_QWORD *)a2 + 1);
        v23 = *((_QWORD *)a2 + 2);
        v24 = *(_QWORD *)a2;
        if (v22 > 0xFFFFFFFFFFFFFFF5 || v22 + 10 > v23)
        {
          v30 = 0;
          v31 = 0;
          v27 = 0;
          if (v23 <= v22)
            v23 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v23 == v22)
            {
              LODWORD(v27) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_47;
            }
            v32 = v22 + 1;
            v33 = *(_BYTE *)(v24 + v22);
            *((_QWORD *)a2 + 1) = v32;
            v27 |= (unint64_t)(v33 & 0x7F) << v30;
            if ((v33 & 0x80) == 0)
              break;
            v30 += 7;
            v22 = v32;
            v14 = v31++ > 8;
            if (v14)
            {
LABEL_43:
              LODWORD(v27) = 0;
              goto LABEL_47;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v27) = 0;
        }
        else
        {
          v25 = 0;
          v26 = 0;
          v27 = 0;
          while (1)
          {
            v28 = v22 + 1;
            *((_QWORD *)a2 + 1) = v22 + 1;
            v29 = *(_BYTE *)(v24 + v22);
            v27 |= (unint64_t)(v29 & 0x7F) << v25;
            if ((v29 & 0x80) == 0)
              break;
            v25 += 7;
            v22 = v28;
            v14 = v26++ > 8;
            if (v14)
              goto LABEL_43;
          }
        }
LABEL_47:
        *((_DWORD *)this + 4) = v27;
      }
      else if ((v11 >> 3) == 1)
      {
        v19 = operator new();
        *(_QWORD *)v19 = &off_25135D130;
        *(_DWORD *)(v19 + 160) = 0;
        *(_OWORD *)(v19 + 8) = 0u;
        *(_OWORD *)(v19 + 24) = 0u;
        *(_OWORD *)(v19 + 40) = 0u;
        *(_OWORD *)(v19 + 56) = 0u;
        *(_OWORD *)(v19 + 72) = 0u;
        *(_OWORD *)(v19 + 88) = 0u;
        *(_OWORD *)(v19 + 104) = 0u;
        *(_OWORD *)(v19 + 120) = 0u;
        *(_OWORD *)(v19 + 136) = 0u;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = *((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_28:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_28;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::GyroBiasCorrection::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = this;
  v4 = *(const PB::Base **)(this + 8);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  if ((*(_BYTE *)(v3 + 20) & 1) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

BOOL CMMsl::GyroBiasCorrection::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !CMMsl::DeviceMotionCorrection::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  result = (*(_BYTE *)(a2 + 20) & 1) == 0;
  if ((*(_BYTE *)(a1 + 20) & 1) == 0)
    return result;
  return (*(_BYTE *)(a2 + 20) & 1) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
}

unint64_t CMMsl::GyroBiasCorrection::hash_value(CMMsl::GyroBiasCorrection *this)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    v2 = CMMsl::DeviceMotionCorrection::hash_value((CMMsl::DeviceMotionCorrection *)v2);
  if ((*((_BYTE *)this + 20) & 1) != 0)
    v3 = *((int *)this + 4);
  else
    v3 = 0;
  return v3 ^ v2;
}

_QWORD *CMMsl::GyroBiasCorrection::makeCorrection(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135D130;
    *(_DWORD *)(v2 + 160) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_OWORD *)(v2 + 120) = 0u;
    *(_OWORD *)(v2 + 136) = 0u;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

double CMMsl::GyroBiasEstimateError::GyroBiasEstimateError(CMMsl::GyroBiasEstimateError *this)
{
  double result;

  *(_QWORD *)this = &off_25135DD70;
  *((_DWORD *)this + 23) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_25135DD70;
  *((_DWORD *)this + 23) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  return result;
}

void CMMsl::GyroBiasEstimateError::~GyroBiasEstimateError(CMMsl::GyroBiasEstimateError *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_25135DD70;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::GyroBiasEstimateError::~GyroBiasEstimateError(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::GyroBiasEstimateError *CMMsl::GyroBiasEstimateError::GyroBiasEstimateError(CMMsl::GyroBiasEstimateError *this, const CMMsl::GyroBiasEstimateError *a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;

  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (_QWORD *)((char *)this + 8);
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_QWORD *)this = &off_25135DD70;
  *((_DWORD *)this + 23) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 9) = 0;
  if ((*((_BYTE *)a2 + 92) & 1) != 0)
  {
    v5 = *((_QWORD *)a2 + 10);
    *((_BYTE *)this + 92) = 1;
    *((_QWORD *)this + 10) = v5;
  }
  if (this != a2)
  {
    sub_242911380(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
    sub_242911380((_QWORD *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
    sub_242911380((_QWORD *)this + 7, *((char **)a2 + 7), *((char **)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 2);
  }
  if ((*((_BYTE *)a2 + 92) & 2) != 0)
  {
    v6 = *((_DWORD *)a2 + 22);
    *((_BYTE *)this + 92) |= 2u;
    *((_DWORD *)this + 22) = v6;
  }
  return this;
}

CMMsl *CMMsl::GyroBiasEstimateError::operator=(CMMsl *a1, const CMMsl::GyroBiasEstimateError *a2)
{
  CMMsl::GyroBiasEstimateError *v3;
  _BYTE v5[96];

  if (a1 != a2)
  {
    CMMsl::GyroBiasEstimateError::GyroBiasEstimateError((CMMsl::GyroBiasEstimateError *)v5, a2);
    CMMsl::swap(a1, (CMMsl::GyroBiasEstimateError *)v5, v3);
    CMMsl::GyroBiasEstimateError::~GyroBiasEstimateError((CMMsl::GyroBiasEstimateError *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::GyroBiasEstimateError *a2, CMMsl::GyroBiasEstimateError *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float result;

  v3 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v3;
  v4 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  v8 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v8;
  v9 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v9;
  v10 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v10;
  v11 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v11;
  v12 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v12;
  v13 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v13;
  result = *((float *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((float *)a2 + 22) = result;
  return result;
}

uint64_t CMMsl::GyroBiasEstimateError::GyroBiasEstimateError(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_25135DD70;
  v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  v5 = a1 + 56;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a2 + 92) = 0;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  sub_242911330(v4, (__n128 *)(a2 + 32));
  sub_242911330(v5, (__n128 *)(a2 + 56));
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  return a1;
}

CMMsl *CMMsl::GyroBiasEstimateError::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::GyroBiasEstimateError *v3;
  _BYTE v5[96];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::GyroBiasEstimateError::GyroBiasEstimateError((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::GyroBiasEstimateError *)v5, v3);
    CMMsl::GyroBiasEstimateError::~GyroBiasEstimateError((CMMsl::GyroBiasEstimateError *)v5);
  }
  return a1;
}

uint64_t CMMsl::GyroBiasEstimateError::formatText(CMMsl::GyroBiasEstimateError *this, PB::TextFormatter *a2, const char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;
  float *v11;
  float *v12;
  float v13;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (float *)*((_QWORD *)this + 1);
  v6 = (float *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "dynamicBiasEstimate", v7);
  }
  v8 = (float *)*((_QWORD *)this + 4);
  v9 = (float *)*((_QWORD *)this + 5);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(a2, "estimateErrorMetric", v10);
  }
  if ((*((_BYTE *)this + 92) & 2) != 0)
    PB::TextFormatter::format(a2, "rawGyroTemperature", *((float *)this + 22));
  v11 = (float *)*((_QWORD *)this + 7);
  v12 = (float *)*((_QWORD *)this + 8);
  while (v11 != v12)
  {
    v13 = *v11++;
    PB::TextFormatter::format(a2, "subFitError", v13);
  }
  if ((*((_BYTE *)this + 92) & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 10));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::GyroBiasEstimateError::readFrom(CMMsl::GyroBiasEstimateError *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  _DWORD *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  _DWORD *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  _DWORD *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  int v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  _DWORD *v67;
  unint64_t v68;
  char *v69;
  unint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  _DWORD *v90;
  int v91;
  _DWORD *v92;
  int v93;
  _DWORD *v94;
  int v95;
  unint64_t v96;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_21:
      v19 = v11 & 7;
      if (v19 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 92) |= 1u;
          v20 = *((_QWORD *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_156;
          *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v20);
          v21 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_159;
        case 2u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v22 = *((_QWORD *)a2 + 1);
            v23 = *((_QWORD *)a2 + 2);
            while (v22 < v23 && !*((_BYTE *)a2 + 24))
            {
              v25 = (char *)*((_QWORD *)this + 2);
              v24 = *((_QWORD *)this + 3);
              if ((unint64_t)v25 >= v24)
              {
                v27 = (char *)*((_QWORD *)this + 1);
                v28 = (v25 - v27) >> 2;
                v29 = v28 + 1;
                if ((unint64_t)(v28 + 1) >> 62)
                  goto LABEL_167;
                v30 = v24 - (_QWORD)v27;
                if (v30 >> 1 > v29)
                  v29 = v30 >> 1;
                if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
                  v31 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v31 = v29;
                if (v31)
                {
                  v31 = (unint64_t)sub_2429114B8(v31);
                  v27 = (char *)*((_QWORD *)this + 1);
                  v25 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v32 = 0;
                }
                v33 = (_DWORD *)(v31 + 4 * v28);
                *v33 = 0;
                v26 = v33 + 1;
                while (v25 != v27)
                {
                  v34 = *((_DWORD *)v25 - 1);
                  v25 -= 4;
                  *--v33 = v34;
                }
                *((_QWORD *)this + 1) = v33;
                *((_QWORD *)this + 2) = v26;
                *((_QWORD *)this + 3) = v31 + 4 * v32;
                if (v27)
                  operator delete(v27);
              }
              else
              {
                *(_DWORD *)v25 = 0;
                v26 = v25 + 4;
              }
              *((_QWORD *)this + 2) = v26;
              v35 = *((_QWORD *)a2 + 1);
              if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_107;
              *(v26 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v35);
              v23 = *((_QWORD *)a2 + 2);
              v22 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v22;
            }
            goto LABEL_108;
          }
          v66 = (char *)*((_QWORD *)this + 2);
          v65 = *((_QWORD *)this + 3);
          if ((unint64_t)v66 >= v65)
          {
            v72 = (char *)*((_QWORD *)this + 1);
            v73 = (v66 - v72) >> 2;
            v74 = v73 + 1;
            if ((unint64_t)(v73 + 1) >> 62)
              goto LABEL_167;
            v75 = v65 - (_QWORD)v72;
            if (v75 >> 1 > v74)
              v74 = v75 >> 1;
            if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFFCLL)
              v76 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v76 = v74;
            if (v76)
            {
              v76 = (unint64_t)sub_2429114B8(v76);
              v72 = (char *)*((_QWORD *)this + 1);
              v66 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v77 = 0;
            }
            v90 = (_DWORD *)(v76 + 4 * v73);
            *v90 = 0;
            v67 = v90 + 1;
            while (v66 != v72)
            {
              v91 = *((_DWORD *)v66 - 1);
              v66 -= 4;
              *--v90 = v91;
            }
            *((_QWORD *)this + 1) = v90;
            *((_QWORD *)this + 2) = v67;
            *((_QWORD *)this + 3) = v76 + 4 * v77;
            if (v72)
              operator delete(v72);
          }
          else
          {
            *(_DWORD *)v66 = 0;
            v67 = v66 + 4;
          }
          *((_QWORD *)this + 2) = v67;
          goto LABEL_154;
        case 3u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v36 = *((_QWORD *)a2 + 1);
            v37 = *((_QWORD *)a2 + 2);
            while (v36 < v37 && !*((_BYTE *)a2 + 24))
            {
              v39 = (char *)*((_QWORD *)this + 5);
              v38 = *((_QWORD *)this + 6);
              if ((unint64_t)v39 >= v38)
              {
                v41 = (char *)*((_QWORD *)this + 4);
                v42 = (v39 - v41) >> 2;
                v43 = v42 + 1;
                if ((unint64_t)(v42 + 1) >> 62)
                  goto LABEL_167;
                v44 = v38 - (_QWORD)v41;
                if (v44 >> 1 > v43)
                  v43 = v44 >> 1;
                if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL)
                  v45 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v45 = v43;
                if (v45)
                {
                  v45 = (unint64_t)sub_2429114B8(v45);
                  v41 = (char *)*((_QWORD *)this + 4);
                  v39 = (char *)*((_QWORD *)this + 5);
                }
                else
                {
                  v46 = 0;
                }
                v47 = (_DWORD *)(v45 + 4 * v42);
                *v47 = 0;
                v40 = v47 + 1;
                while (v39 != v41)
                {
                  v48 = *((_DWORD *)v39 - 1);
                  v39 -= 4;
                  *--v47 = v48;
                }
                *((_QWORD *)this + 4) = v47;
                *((_QWORD *)this + 5) = v40;
                *((_QWORD *)this + 6) = v45 + 4 * v46;
                if (v41)
                  operator delete(v41);
              }
              else
              {
                *(_DWORD *)v39 = 0;
                v40 = v39 + 4;
              }
              *((_QWORD *)this + 5) = v40;
              v49 = *((_QWORD *)a2 + 1);
              if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_107;
              *(v40 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v49);
              v37 = *((_QWORD *)a2 + 2);
              v36 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v36;
            }
            goto LABEL_108;
          }
          v69 = (char *)*((_QWORD *)this + 5);
          v68 = *((_QWORD *)this + 6);
          if ((unint64_t)v69 >= v68)
          {
            v78 = (char *)*((_QWORD *)this + 4);
            v79 = (v69 - v78) >> 2;
            v80 = v79 + 1;
            if ((unint64_t)(v79 + 1) >> 62)
              goto LABEL_167;
            v81 = v68 - (_QWORD)v78;
            if (v81 >> 1 > v80)
              v80 = v81 >> 1;
            if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFFCLL)
              v82 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v82 = v80;
            if (v82)
            {
              v82 = (unint64_t)sub_2429114B8(v82);
              v78 = (char *)*((_QWORD *)this + 4);
              v69 = (char *)*((_QWORD *)this + 5);
            }
            else
            {
              v83 = 0;
            }
            v92 = (_DWORD *)(v82 + 4 * v79);
            *v92 = 0;
            v67 = v92 + 1;
            while (v69 != v78)
            {
              v93 = *((_DWORD *)v69 - 1);
              v69 -= 4;
              *--v92 = v93;
            }
            *((_QWORD *)this + 4) = v92;
            *((_QWORD *)this + 5) = v67;
            *((_QWORD *)this + 6) = v82 + 4 * v83;
            if (v78)
              operator delete(v78);
          }
          else
          {
            *(_DWORD *)v69 = 0;
            v67 = v69 + 4;
          }
          *((_QWORD *)this + 5) = v67;
          goto LABEL_154;
        case 4u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v50 = *((_QWORD *)a2 + 1);
            v51 = *((_QWORD *)a2 + 2);
            while (v50 < v51 && !*((_BYTE *)a2 + 24))
            {
              v53 = (char *)*((_QWORD *)this + 8);
              v52 = *((_QWORD *)this + 9);
              if ((unint64_t)v53 >= v52)
              {
                v55 = (char *)*((_QWORD *)this + 7);
                v56 = (v53 - v55) >> 2;
                v57 = v56 + 1;
                if ((unint64_t)(v56 + 1) >> 62)
                  goto LABEL_167;
                v58 = v52 - (_QWORD)v55;
                if (v58 >> 1 > v57)
                  v57 = v58 >> 1;
                if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL)
                  v59 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v59 = v57;
                if (v59)
                {
                  v59 = (unint64_t)sub_2429114B8(v59);
                  v55 = (char *)*((_QWORD *)this + 7);
                  v53 = (char *)*((_QWORD *)this + 8);
                }
                else
                {
                  v60 = 0;
                }
                v61 = (_DWORD *)(v59 + 4 * v56);
                *v61 = 0;
                v54 = v61 + 1;
                while (v53 != v55)
                {
                  v62 = *((_DWORD *)v53 - 1);
                  v53 -= 4;
                  *--v61 = v62;
                }
                *((_QWORD *)this + 7) = v61;
                *((_QWORD *)this + 8) = v54;
                *((_QWORD *)this + 9) = v59 + 4 * v60;
                if (v55)
                  operator delete(v55);
              }
              else
              {
                *(_DWORD *)v53 = 0;
                v54 = v53 + 4;
              }
              *((_QWORD *)this + 8) = v54;
              v63 = *((_QWORD *)a2 + 1);
              if (v63 > 0xFFFFFFFFFFFFFFFBLL || v63 + 4 > *((_QWORD *)a2 + 2))
              {
LABEL_107:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v54 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v63);
              v51 = *((_QWORD *)a2 + 2);
              v50 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v50;
            }
LABEL_108:
            PB::Reader::recallMark();
          }
          else
          {
            v71 = (char *)*((_QWORD *)this + 8);
            v70 = *((_QWORD *)this + 9);
            if ((unint64_t)v71 >= v70)
            {
              v84 = (char *)*((_QWORD *)this + 7);
              v85 = (v71 - v84) >> 2;
              v86 = v85 + 1;
              if ((unint64_t)(v85 + 1) >> 62)
LABEL_167:
                sub_242729A44();
              v87 = v70 - (_QWORD)v84;
              if (v87 >> 1 > v86)
                v86 = v87 >> 1;
              if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFFCLL)
                v88 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v88 = v86;
              if (v88)
              {
                v88 = (unint64_t)sub_2429114B8(v88);
                v84 = (char *)*((_QWORD *)this + 7);
                v71 = (char *)*((_QWORD *)this + 8);
              }
              else
              {
                v89 = 0;
              }
              v94 = (_DWORD *)(v88 + 4 * v85);
              *v94 = 0;
              v67 = v94 + 1;
              while (v71 != v84)
              {
                v95 = *((_DWORD *)v71 - 1);
                v71 -= 4;
                *--v94 = v95;
              }
              *((_QWORD *)this + 7) = v94;
              *((_QWORD *)this + 8) = v67;
              *((_QWORD *)this + 9) = v88 + 4 * v89;
              if (v84)
                operator delete(v84);
            }
            else
            {
              *(_DWORD *)v71 = 0;
              v67 = v71 + 4;
            }
            *((_QWORD *)this + 8) = v67;
LABEL_154:
            v96 = *((_QWORD *)a2 + 1);
            if (v96 <= 0xFFFFFFFFFFFFFFFBLL && v96 + 4 <= *((_QWORD *)a2 + 2))
            {
              *(v67 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v96);
LABEL_158:
              v21 = *((_QWORD *)a2 + 1) + 4;
LABEL_159:
              *((_QWORD *)a2 + 1) = v21;
            }
            else
            {
LABEL_156:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
          break;
        case 5u:
          *((_BYTE *)this + 92) |= 2u;
          v64 = *((_QWORD *)a2 + 1);
          if (v64 > 0xFFFFFFFFFFFFFFFBLL || v64 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_156;
          *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v64);
          goto LABEL_158;
        default:
          goto LABEL_19;
      }
      goto LABEL_160;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_21;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    if ((PB::Reader::skip(a2) & 1) == 0)
      return 0;
LABEL_160:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
}

uint64_t CMMsl::GyroBiasEstimateError::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;
  float *v10;
  float *v11;
  float v12;

  v3 = this;
  if ((*(_BYTE *)(this + 92) & 1) != 0)
    this = PB::Writer::write(a2, *(double *)(this + 80));
  v4 = *(float **)(v3 + 8);
  v5 = *(float **)(v3 + 16);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6);
  }
  v7 = *(float **)(v3 + 32);
  v8 = *(float **)(v3 + 40);
  while (v7 != v8)
  {
    v9 = *v7++;
    this = PB::Writer::write(a2, v9);
  }
  v10 = *(float **)(v3 + 56);
  v11 = *(float **)(v3 + 64);
  while (v10 != v11)
  {
    v12 = *v10++;
    this = PB::Writer::write(a2, v12);
  }
  if ((*(_BYTE *)(v3 + 92) & 2) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 88));
  return this;
}

BOOL CMMsl::GyroBiasEstimateError::operator==(uint64_t a1, uint64_t a2)
{
  float *v2;
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  _BOOL8 v11;

  if ((*(_BYTE *)(a1 + 92) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 92) & 1) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 92) & 1) != 0)
  {
    return 0;
  }
  v3 = *(float **)(a1 + 8);
  v2 = *(float **)(a1 + 16);
  v4 = *(float **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 16) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v6 = *(float **)(a1 + 32);
  v5 = *(float **)(a1 + 40);
  v7 = *(float **)(a2 + 32);
  if ((char *)v5 - (char *)v6 != *(_QWORD *)(a2 + 40) - (_QWORD)v7)
    return 0;
  while (v6 != v5)
  {
    if (*v6 != *v7)
      return 0;
    ++v6;
    ++v7;
  }
  v9 = *(float **)(a1 + 56);
  v8 = *(float **)(a1 + 64);
  v10 = *(float **)(a2 + 56);
  if ((char *)v8 - (char *)v9 != *(_QWORD *)(a2 + 64) - (_QWORD)v10)
    return 0;
  while (v9 != v8)
  {
    if (*v9 != *v10)
      return 0;
    ++v9;
    ++v10;
  }
  v11 = (*(_BYTE *)(a2 + 92) & 2) == 0;
  if ((*(_BYTE *)(a1 + 92) & 2) != 0)
    return (*(_BYTE *)(a2 + 92) & 2) != 0 && *(float *)(a1 + 88) == *(float *)(a2 + 88);
  return v11;
}

uint64_t CMMsl::GyroBiasEstimateError::hash_value(CMMsl::GyroBiasEstimateError *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;

  if ((*((_BYTE *)this + 92) & 1) != 0)
  {
    if (*((double *)this + 10) == 0.0)
      v2 = 0;
    else
      v2 = *((_QWORD *)this + 10);
  }
  else
  {
    v2 = 0;
  }
  v3 = PBHashBytes();
  v4 = PBHashBytes();
  v5 = PBHashBytes();
  if ((*((_BYTE *)this + 92) & 2) != 0)
  {
    v7 = *((float *)this + 22);
    v6 = LODWORD(v7);
    if (v7 == 0.0)
      v6 = 0;
  }
  else
  {
    v6 = 0;
  }
  return v3 ^ v2 ^ v4 ^ v5 ^ v6;
}

double CMMsl::GyroBiasFit::GyroBiasFit(CMMsl::GyroBiasFit *this)
{
  double result;

  *(_QWORD *)this = &off_25135DDA8;
  *((_DWORD *)this + 15) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_25135DDA8;
  *((_DWORD *)this + 15) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

void CMMsl::GyroBiasFit::~GyroBiasFit(CMMsl::GyroBiasFit *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_25135DDA8;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::GyroBiasFit::~GyroBiasFit(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::GyroBiasFit *CMMsl::GyroBiasFit::GyroBiasFit(char **this, char **a2)
{
  _QWORD *v4;
  int v5;

  *this = (char *)&off_25135DDA8;
  *(_OWORD *)(this + 1) = 0u;
  v4 = this + 1;
  *((_DWORD *)this + 15) = 0;
  *(_OWORD *)(this + 3) = 0u;
  *(_OWORD *)(this + 5) = 0u;
  if (this != a2)
  {
    sub_242911380(this + 4, a2[4], a2[5], (a2[5] - a2[4]) >> 2);
    sub_242911380(v4, a2[1], a2[2], (a2[2] - a2[1]) >> 2);
  }
  if ((*((_BYTE *)a2 + 60) & 1) != 0)
  {
    v5 = *((_DWORD *)a2 + 14);
    *((_BYTE *)this + 60) |= 1u;
    *((_DWORD *)this + 14) = v5;
  }
  return (CMMsl::GyroBiasFit *)this;
}

uint64_t CMMsl::GyroBiasFit::operator=(uint64_t a1, char **a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  int v7;
  char *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  int v14;

  if ((char **)a1 != a2)
  {
    CMMsl::GyroBiasFit::GyroBiasFit(&v9, a2);
    v3 = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a1 + 60) = v14;
    v14 = v3;
    v4 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v12 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v5;
    v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v11 = v6;
    v7 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v13;
    v13 = v7;
    CMMsl::GyroBiasFit::~GyroBiasFit((CMMsl::GyroBiasFit *)&v9);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::GyroBiasFit *a2, CMMsl::GyroBiasFit *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float result;

  v3 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v3;
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  v5 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v5;
  v6 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v6;
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v7;
  v8 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v8;
  v9 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v9;
  result = *((float *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((float *)a2 + 14) = result;
  return result;
}

uint64_t CMMsl::GyroBiasFit::GyroBiasFit(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_25135DDA8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  sub_242911330(a1 + 32, (__n128 *)(a2 + 32));
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return a1;
}

uint64_t CMMsl::GyroBiasFit::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  int v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  int v14;

  if (a1 != a2)
  {
    CMMsl::GyroBiasFit::GyroBiasFit((uint64_t)&v9, a2);
    v3 = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a1 + 60) = v14;
    v14 = v3;
    v4 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v12 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v5;
    v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v11 = v6;
    v7 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v13;
    v13 = v7;
    CMMsl::GyroBiasFit::~GyroBiasFit((CMMsl::GyroBiasFit *)&v9);
  }
  return a1;
}

uint64_t CMMsl::GyroBiasFit::formatText(CMMsl::GyroBiasFit *this, PB::TextFormatter *a2, const char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (float *)*((_QWORD *)this + 1);
  v6 = (float *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "intercept", v7);
  }
  if ((*((_BYTE *)this + 60) & 1) != 0)
    PB::TextFormatter::format(a2, "lastMiniCal", *((float *)this + 14));
  v8 = (float *)*((_QWORD *)this + 4);
  v9 = (float *)*((_QWORD *)this + 5);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(a2, "slope", v10);
  }
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::GyroBiasFit::readFrom(CMMsl::GyroBiasFit *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  _DWORD *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  _DWORD *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  _DWORD *v52;
  unint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  _DWORD *v67;
  int v68;
  _DWORD *v69;
  int v70;
  unint64_t v71;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          v14 = v16++ > 8;
          if (v14)
            goto LABEL_48;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_48;
      }
LABEL_20:
      v19 = v11 & 7;
      if (v19 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((_BYTE *)this + 60) |= 1u;
        v35 = *((_QWORD *)a2 + 1);
        if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_115;
        *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v35);
      }
      else
      {
        if ((_DWORD)v20 == 2)
        {
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v36 = *((_QWORD *)a2 + 1);
            v37 = *((_QWORD *)a2 + 2);
            while (v36 < v37 && !*((_BYTE *)a2 + 24))
            {
              v39 = (char *)*((_QWORD *)this + 2);
              v38 = *((_QWORD *)this + 3);
              if ((unint64_t)v39 >= v38)
              {
                v41 = (char *)*((_QWORD *)this + 1);
                v42 = (v39 - v41) >> 2;
                v43 = v42 + 1;
                if ((unint64_t)(v42 + 1) >> 62)
                  goto LABEL_125;
                v44 = v38 - (_QWORD)v41;
                if (v44 >> 1 > v43)
                  v43 = v44 >> 1;
                if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL)
                  v45 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v45 = v43;
                if (v45)
                {
                  v45 = (unint64_t)sub_2429114B8(v45);
                  v41 = (char *)*((_QWORD *)this + 1);
                  v39 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v46 = 0;
                }
                v47 = (_DWORD *)(v45 + 4 * v42);
                *v47 = 0;
                v40 = v47 + 1;
                while (v39 != v41)
                {
                  v48 = *((_DWORD *)v39 - 1);
                  v39 -= 4;
                  *--v47 = v48;
                }
                *((_QWORD *)this + 1) = v47;
                *((_QWORD *)this + 2) = v40;
                *((_QWORD *)this + 3) = v45 + 4 * v46;
                if (v41)
                  operator delete(v41);
              }
              else
              {
                *(_DWORD *)v39 = 0;
                v40 = v39 + 4;
              }
              *((_QWORD *)this + 2) = v40;
              v49 = *((_QWORD *)a2 + 1);
              if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((_QWORD *)a2 + 2))
              {
LABEL_81:
                *((_BYTE *)a2 + 24) = 1;
                goto LABEL_82;
              }
              *(v40 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v49);
              v37 = *((_QWORD *)a2 + 2);
              v36 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v36;
            }
            goto LABEL_82;
          }
          v54 = (char *)*((_QWORD *)this + 2);
          v53 = *((_QWORD *)this + 3);
          if ((unint64_t)v54 >= v53)
          {
            v61 = (char *)*((_QWORD *)this + 1);
            v62 = (v54 - v61) >> 2;
            v63 = v62 + 1;
            if ((unint64_t)(v62 + 1) >> 62)
LABEL_125:
              sub_242729A44();
            v64 = v53 - (_QWORD)v61;
            if (v64 >> 1 > v63)
              v63 = v64 >> 1;
            if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL)
              v65 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v65 = v63;
            if (v65)
            {
              v65 = (unint64_t)sub_2429114B8(v65);
              v61 = (char *)*((_QWORD *)this + 1);
              v54 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v66 = 0;
            }
            v69 = (_DWORD *)(v65 + 4 * v62);
            *v69 = 0;
            v52 = v69 + 1;
            while (v54 != v61)
            {
              v70 = *((_DWORD *)v54 - 1);
              v54 -= 4;
              *--v69 = v70;
            }
            *((_QWORD *)this + 1) = v69;
            *((_QWORD *)this + 2) = v52;
            *((_QWORD *)this + 3) = v65 + 4 * v66;
            if (v61)
              operator delete(v61);
          }
          else
          {
            *(_DWORD *)v54 = 0;
            v52 = v54 + 4;
          }
          *((_QWORD *)this + 2) = v52;
        }
        else
        {
          if ((_DWORD)v20 != 1)
          {
LABEL_48:
            if ((PB::Reader::skip(a2) & 1) == 0)
              return 0;
            goto LABEL_118;
          }
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v21 = *((_QWORD *)a2 + 1);
            v22 = *((_QWORD *)a2 + 2);
            while (v21 < v22 && !*((_BYTE *)a2 + 24))
            {
              v24 = (char *)*((_QWORD *)this + 5);
              v23 = *((_QWORD *)this + 6);
              if ((unint64_t)v24 >= v23)
              {
                v26 = (char *)*((_QWORD *)this + 4);
                v27 = (v24 - v26) >> 2;
                v28 = v27 + 1;
                if ((unint64_t)(v27 + 1) >> 62)
                  goto LABEL_125;
                v29 = v23 - (_QWORD)v26;
                if (v29 >> 1 > v28)
                  v28 = v29 >> 1;
                if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL)
                  v30 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v30 = v28;
                if (v30)
                {
                  v30 = (unint64_t)sub_2429114B8(v30);
                  v26 = (char *)*((_QWORD *)this + 4);
                  v24 = (char *)*((_QWORD *)this + 5);
                }
                else
                {
                  v31 = 0;
                }
                v32 = (_DWORD *)(v30 + 4 * v27);
                *v32 = 0;
                v25 = v32 + 1;
                while (v24 != v26)
                {
                  v33 = *((_DWORD *)v24 - 1);
                  v24 -= 4;
                  *--v32 = v33;
                }
                *((_QWORD *)this + 4) = v32;
                *((_QWORD *)this + 5) = v25;
                *((_QWORD *)this + 6) = v30 + 4 * v31;
                if (v26)
                  operator delete(v26);
              }
              else
              {
                *(_DWORD *)v24 = 0;
                v25 = v24 + 4;
              }
              *((_QWORD *)this + 5) = v25;
              v34 = *((_QWORD *)a2 + 1);
              if (v34 > 0xFFFFFFFFFFFFFFFBLL || v34 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_81;
              *(v25 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v34);
              v22 = *((_QWORD *)a2 + 2);
              v21 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v21;
            }
LABEL_82:
            PB::Reader::recallMark();
            goto LABEL_118;
          }
          v51 = (char *)*((_QWORD *)this + 5);
          v50 = *((_QWORD *)this + 6);
          if ((unint64_t)v51 >= v50)
          {
            v55 = (char *)*((_QWORD *)this + 4);
            v56 = (v51 - v55) >> 2;
            v57 = v56 + 1;
            if ((unint64_t)(v56 + 1) >> 62)
              goto LABEL_125;
            v58 = v50 - (_QWORD)v55;
            if (v58 >> 1 > v57)
              v57 = v58 >> 1;
            if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL)
              v59 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v59 = v57;
            if (v59)
            {
              v59 = (unint64_t)sub_2429114B8(v59);
              v55 = (char *)*((_QWORD *)this + 4);
              v51 = (char *)*((_QWORD *)this + 5);
            }
            else
            {
              v60 = 0;
            }
            v67 = (_DWORD *)(v59 + 4 * v56);
            *v67 = 0;
            v52 = v67 + 1;
            while (v51 != v55)
            {
              v68 = *((_DWORD *)v51 - 1);
              v51 -= 4;
              *--v67 = v68;
            }
            *((_QWORD *)this + 4) = v67;
            *((_QWORD *)this + 5) = v52;
            *((_QWORD *)this + 6) = v59 + 4 * v60;
            if (v55)
              operator delete(v55);
          }
          else
          {
            *(_DWORD *)v51 = 0;
            v52 = v51 + 4;
          }
          *((_QWORD *)this + 5) = v52;
        }
        v71 = *((_QWORD *)a2 + 1);
        if (v71 > 0xFFFFFFFFFFFFFFFBLL || v71 + 4 > *((_QWORD *)a2 + 2))
        {
LABEL_115:
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_118;
        }
        *(v52 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v71);
      }
      *((_QWORD *)a2 + 1) += 4;
LABEL_118:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::GyroBiasFit::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;

  v3 = this;
  v4 = *(float **)(this + 32);
  v5 = *(float **)(this + 40);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6);
  }
  v7 = *(float **)(v3 + 8);
  v8 = *(float **)(v3 + 16);
  while (v7 != v8)
  {
    v9 = *v7++;
    this = PB::Writer::write(a2, v9);
  }
  if ((*(_BYTE *)(v3 + 60) & 1) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 56));
  return this;
}

BOOL CMMsl::GyroBiasFit::operator==(uint64_t a1, uint64_t a2)
{
  float *v2;
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  _BOOL8 v8;

  v3 = *(float **)(a1 + 32);
  v2 = *(float **)(a1 + 40);
  v4 = *(float **)(a2 + 32);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 40) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v6 = *(float **)(a1 + 8);
  v5 = *(float **)(a1 + 16);
  v7 = *(float **)(a2 + 8);
  if ((char *)v5 - (char *)v6 != *(_QWORD *)(a2 + 16) - (_QWORD)v7)
    return 0;
  while (v6 != v5)
  {
    if (*v6 != *v7)
      return 0;
    ++v6;
    ++v7;
  }
  v8 = (*(_BYTE *)(a2 + 60) & 1) == 0;
  if ((*(_BYTE *)(a1 + 60) & 1) != 0)
    return (*(_BYTE *)(a2 + 60) & 1) != 0 && *(float *)(a1 + 56) == *(float *)(a2 + 56);
  return v8;
}

uint64_t CMMsl::GyroBiasFit::hash_value(CMMsl::GyroBiasFit *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  float v5;

  v2 = PBHashBytes();
  v3 = PBHashBytes();
  if ((*((_BYTE *)this + 60) & 1) != 0)
  {
    v5 = *((float *)this + 14);
    v4 = LODWORD(v5);
    if (v5 == 0.0)
      v4 = 0;
  }
  else
  {
    v4 = 0;
  }
  return v3 ^ v2 ^ v4;
}

_QWORD *CMMsl::GyroCalibrationDataFactory::GyroCalibrationDataFactory(_QWORD *this)
{
  *this = &off_25135DDE0;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &off_25135DDE0;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

void CMMsl::GyroCalibrationDataFactory::~GyroCalibrationDataFactory(CMMsl::GyroCalibrationDataFactory *this)
{
  void **v2;

  *(_QWORD *)this = &off_25135DDE0;
  v2 = (void **)((char *)this + 8);
  sub_242910B70(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_25135DDE0;
  v2 = (void **)((char *)this + 8);
  sub_242910B70(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_25135DDE0;
  v2 = (void **)((char *)this + 8);
  sub_242910B70(&v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::GyroCalibrationDataFactory *CMMsl::GyroCalibrationDataFactory::GyroCalibrationDataFactory(CMMsl::GyroCalibrationDataFactory *this, const CMMsl::GyroCalibrationDataFactory *a2)
{
  int64x2_t *v3;
  const CMMsl::GyroCalibrationSample **v4;
  const CMMsl::GyroCalibrationSample **i;
  const CMMsl::GyroCalibrationSample *v6;
  CMMsl::GyroCalibrationSample *v7;
  unint64_t v8;
  CMMsl::GyroCalibrationSample **v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  CMMsl::GyroCalibrationSample **v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  CMMsl::GyroCalibrationSample *v20;
  int64x2_t v21;
  unint64_t v22;
  uint64_t v24;
  int64x2_t v25;
  unint64_t v26;
  char *v27;

  *((_QWORD *)this + 1) = 0;
  v3 = (int64x2_t *)((char *)this + 8);
  *(_QWORD *)this = &off_25135DDE0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  v4 = (const CMMsl::GyroCalibrationSample **)*((_QWORD *)a2 + 1);
  for (i = (const CMMsl::GyroCalibrationSample **)*((_QWORD *)a2 + 2); v4 != i; ++v4)
  {
    v6 = *v4;
    v7 = (CMMsl::GyroCalibrationSample *)operator new();
    CMMsl::GyroCalibrationSample::GyroCalibrationSample(v7, v6);
    v9 = (CMMsl::GyroCalibrationSample **)*((_QWORD *)this + 2);
    v8 = *((_QWORD *)this + 3);
    if ((unint64_t)v9 >= v8)
    {
      v11 = ((uint64_t)v9 - v3->i64[0]) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        sub_242729A44();
      v12 = v8 - v3->i64[0];
      v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1))
        v13 = v11 + 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      v27 = (char *)this + 24;
      if (v14)
        v14 = (unint64_t)sub_2429112FC(v14);
      else
        v15 = 0;
      v16 = (CMMsl::GyroCalibrationSample **)(v14 + 8 * v11);
      v17 = v14 + 8 * v15;
      v26 = v17;
      *v16 = v7;
      v10 = v16 + 1;
      v25.i64[1] = (uint64_t)(v16 + 1);
      v19 = (_QWORD *)*((_QWORD *)this + 1);
      v18 = (_QWORD *)*((_QWORD *)this + 2);
      if (v18 == v19)
      {
        v21 = vdupq_n_s64((unint64_t)v18);
      }
      else
      {
        do
        {
          v20 = (CMMsl::GyroCalibrationSample *)*--v18;
          *v18 = 0;
          *--v16 = v20;
        }
        while (v18 != v19);
        v21 = *v3;
        v10 = (_QWORD *)v25.i64[1];
        v17 = v26;
      }
      *((_QWORD *)this + 1) = v16;
      *((_QWORD *)this + 2) = v10;
      v25 = v21;
      v22 = *((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = v17;
      v26 = v22;
      v24 = v21.i64[0];
      sub_2429114EC((uint64_t)&v24);
    }
    else
    {
      *v9 = v7;
      v10 = v9 + 1;
    }
    *((_QWORD *)this + 2) = v10;
  }
  return this;
}

void sub_2427B9AE8(void *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  sub_2427297D4(a1);
}

uint64_t CMMsl::GyroCalibrationDataFactory::operator=(uint64_t a1, const CMMsl::GyroCalibrationDataFactory *a2)
{
  __int128 v3;
  uint64_t v4;
  void (**v6)(CMMsl::GyroCalibrationDataFactory *__hidden);
  __int128 v7;
  uint64_t v8;
  void **v9;

  if ((const CMMsl::GyroCalibrationDataFactory *)a1 != a2)
  {
    CMMsl::GyroCalibrationDataFactory::GyroCalibrationDataFactory((CMMsl::GyroCalibrationDataFactory *)&v6, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v4;
    v6 = &off_25135DDE0;
    v9 = (void **)&v7;
    sub_242910B70(&v9);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

_QWORD *CMMsl::swap(_QWORD *this, CMMsl::GyroCalibrationDataFactory *a2, CMMsl::GyroCalibrationDataFactory *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  return this;
}

_QWORD *CMMsl::GyroCalibrationDataFactory::GyroCalibrationDataFactory(_QWORD *a1, uint64_t a2)
{
  _OWORD *v4;

  *a1 = &off_25135DDE0;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v4 = a1 + 1;
  sub_242910BEC(a1 + 1);
  *v4 = *(_OWORD *)(a2 + 8);
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

{
  _OWORD *v4;

  *a1 = &off_25135DDE0;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v4 = a1 + 1;
  sub_242910BEC(a1 + 1);
  *v4 = *(_OWORD *)(a2 + 8);
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

uint64_t CMMsl::GyroCalibrationDataFactory::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  void (**v9)(CMMsl::GyroCalibrationDataFactory *__hidden);
  __int128 v10;
  uint64_t v11;
  void **v12;

  if (a1 != a2)
  {
    v9 = &off_25135DDE0;
    v10 = 0uLL;
    v11 = 0;
    sub_242910BEC(&v10);
    v4 = *(_QWORD *)(a2 + 24);
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    v10 = v6;
    v7 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v4;
    v11 = v7;
    v12 = (void **)&v10;
    v9 = &off_25135DDE0;
    sub_242910B70(&v12);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::GyroCalibrationDataFactory::formatText(CMMsl::GyroCalibrationDataFactory *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "sample");
  }
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GyroCalibrationDataFactory::readFrom(CMMsl::GyroCalibrationDataFactory *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  char *v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  int64x2_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64x2_t v41;
  unint64_t v42;
  char *v43;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (char *)this + 24;
    while (1)
    {
      v9 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_25;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v12 >> 3) == 1)
      {
        v20 = operator new();
        v21 = v20;
        *(_QWORD *)v20 = &off_25135DE50;
        *(_DWORD *)(v20 + 24) = 0;
        v23 = (uint64_t *)*((_QWORD *)this + 2);
        v22 = *((_QWORD *)this + 3);
        if ((unint64_t)v23 >= v22)
        {
          v26 = *((_QWORD *)this + 1);
          v27 = ((uint64_t)v23 - v26) >> 3;
          if ((unint64_t)(v27 + 1) >> 61)
            sub_242729A44();
          v28 = v22 - v26;
          v29 = v28 >> 2;
          if (v28 >> 2 <= (unint64_t)(v27 + 1))
            v29 = v27 + 1;
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
            v30 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v30 = v29;
          v43 = v8;
          if (v30)
            v30 = (unint64_t)sub_2429112FC(v30);
          else
            v31 = 0;
          v32 = (uint64_t *)(v30 + 8 * v27);
          v33 = v30 + 8 * v31;
          v42 = v33;
          *v32 = v21;
          v24 = v32 + 1;
          v41.i64[1] = (uint64_t)(v32 + 1);
          v35 = (_QWORD *)*((_QWORD *)this + 1);
          v34 = (_QWORD *)*((_QWORD *)this + 2);
          if (v34 == v35)
          {
            v37 = vdupq_n_s64((unint64_t)v34);
          }
          else
          {
            do
            {
              v36 = *--v34;
              *v34 = 0;
              *--v32 = v36;
            }
            while (v34 != v35);
            v37 = *(int64x2_t *)((char *)this + 8);
            v24 = (_QWORD *)v41.i64[1];
            v33 = v42;
          }
          *((_QWORD *)this + 1) = v32;
          *((_QWORD *)this + 2) = v24;
          v41 = v37;
          v38 = *((_QWORD *)this + 3);
          *((_QWORD *)this + 3) = v33;
          v42 = v38;
          v40 = v37.i64[0];
          sub_2429114EC((uint64_t)&v40);
        }
        else
        {
          *v23 = v20;
          v24 = v23 + 1;
        }
        *((_QWORD *)this + 2) = v24;
        v39 = *(v24 - 1);
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v39 + 16))(v39, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_25:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)a2 + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      v15 = v17++ > 8;
      if (v15)
        goto LABEL_25;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sub_2427BA040(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::GyroCalibrationDataFactory::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base **v2;
  const PB::Base **i;
  const PB::Base *v5;

  v2 = *(const PB::Base ***)(this + 8);
  for (i = *(const PB::Base ***)(this + 16); v2 != i; this = PB::Writer::writeSubmessage(a2, v5))
    v5 = *v2++;
  return this;
}

BOOL CMMsl::GyroCalibrationDataFactory::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;
  BOOL v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(uint64_t **)(a2 + 8);
  if (v3 - v2 != *(_QWORD *)(a2 + 16) - (_QWORD)v4)
    return 0;
  if (v2 == v3)
    return 1;
  v5 = v2 + 8;
  do
  {
    v6 = *v4++;
    result = CMMsl::GyroCalibrationSample::operator==(*(_QWORD *)(v5 - 8), v6);
    v8 = !result || v5 == v3;
    v5 += 8;
  }
  while (!v8);
  return result;
}

BOOL sub_2427BA118(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 result;
  BOOL v9;

  if (a2 - a1 != a4 - (_QWORD)a3)
    return 0;
  if (a1 == a2)
    return 1;
  v5 = a3;
  v6 = a1 + 8;
  do
  {
    v7 = *v5++;
    result = CMMsl::GyroCalibrationSample::operator==(*(_QWORD *)(v6 - 8), v7);
    v9 = !result || v6 == a2;
    v6 += 8;
  }
  while (!v9);
  return result;
}

uint64_t CMMsl::GyroCalibrationDataFactory::hash_value(CMMsl::GyroCalibrationDataFactory *this)
{
  CMMsl::GyroCalibrationSample **v1;
  CMMsl::GyroCalibrationSample **v2;
  uint64_t v3;
  CMMsl::GyroCalibrationSample *v4;

  v1 = (CMMsl::GyroCalibrationSample **)*((_QWORD *)this + 1);
  v2 = (CMMsl::GyroCalibrationSample **)*((_QWORD *)this + 2);
  if (v1 == v2)
    return 0;
  v3 = 0;
  do
  {
    v4 = *v1++;
    v3 ^= CMMsl::GyroCalibrationSample::hash_value(v4);
  }
  while (v1 != v2);
  return v3;
}

_QWORD *CMMsl::GyroCalibrationDataNonlinearNonFactory::GyroCalibrationDataNonlinearNonFactory(_QWORD *this)
{
  *this = &off_25135DE18;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &off_25135DE18;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

void CMMsl::GyroCalibrationDataNonlinearNonFactory::~GyroCalibrationDataNonlinearNonFactory(CMMsl::GyroCalibrationDataNonlinearNonFactory *this)
{
  void **v2;

  *(_QWORD *)this = &off_25135DE18;
  v2 = (void **)((char *)this + 8);
  sub_242910B70(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_25135DE18;
  v2 = (void **)((char *)this + 8);
  sub_242910B70(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_25135DE18;
  v2 = (void **)((char *)this + 8);
  sub_242910B70(&v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::GyroCalibrationDataNonlinearNonFactory *CMMsl::GyroCalibrationDataNonlinearNonFactory::GyroCalibrationDataNonlinearNonFactory(CMMsl::GyroCalibrationDataNonlinearNonFactory *this, const CMMsl::GyroCalibrationDataNonlinearNonFactory *a2)
{
  int64x2_t *v3;
  const CMMsl::GyroCalibrationSample ***v4;
  const CMMsl::GyroCalibrationSample ***i;
  const CMMsl::GyroCalibrationSample **v6;
  CMMsl::GyroCalibrationSampleNonlinear *v7;
  unint64_t v8;
  CMMsl::GyroCalibrationSampleNonlinear **v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  CMMsl::GyroCalibrationSampleNonlinear **v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  CMMsl::GyroCalibrationSampleNonlinear *v20;
  int64x2_t v21;
  unint64_t v22;
  uint64_t v24;
  int64x2_t v25;
  unint64_t v26;
  char *v27;

  *((_QWORD *)this + 1) = 0;
  v3 = (int64x2_t *)((char *)this + 8);
  *(_QWORD *)this = &off_25135DE18;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  v4 = (const CMMsl::GyroCalibrationSample ***)*((_QWORD *)a2 + 1);
  for (i = (const CMMsl::GyroCalibrationSample ***)*((_QWORD *)a2 + 2); v4 != i; ++v4)
  {
    v6 = *v4;
    v7 = (CMMsl::GyroCalibrationSampleNonlinear *)operator new();
    CMMsl::GyroCalibrationSampleNonlinear::GyroCalibrationSampleNonlinear(v7, v6);
    v9 = (CMMsl::GyroCalibrationSampleNonlinear **)*((_QWORD *)this + 2);
    v8 = *((_QWORD *)this + 3);
    if ((unint64_t)v9 >= v8)
    {
      v11 = ((uint64_t)v9 - v3->i64[0]) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        sub_242729A44();
      v12 = v8 - v3->i64[0];
      v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1))
        v13 = v11 + 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      v27 = (char *)this + 24;
      if (v14)
        v14 = (unint64_t)sub_2429112FC(v14);
      else
        v15 = 0;
      v16 = (CMMsl::GyroCalibrationSampleNonlinear **)(v14 + 8 * v11);
      v17 = v14 + 8 * v15;
      v26 = v17;
      *v16 = v7;
      v10 = v16 + 1;
      v25.i64[1] = (uint64_t)(v16 + 1);
      v19 = (_QWORD *)*((_QWORD *)this + 1);
      v18 = (_QWORD *)*((_QWORD *)this + 2);
      if (v18 == v19)
      {
        v21 = vdupq_n_s64((unint64_t)v18);
      }
      else
      {
        do
        {
          v20 = (CMMsl::GyroCalibrationSampleNonlinear *)*--v18;
          *v18 = 0;
          *--v16 = v20;
        }
        while (v18 != v19);
        v21 = *v3;
        v10 = (_QWORD *)v25.i64[1];
        v17 = v26;
      }
      *((_QWORD *)this + 1) = v16;
      *((_QWORD *)this + 2) = v10;
      v25 = v21;
      v22 = *((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = v17;
      v26 = v22;
      v24 = v21.i64[0];
      sub_2429114EC((uint64_t)&v24);
    }
    else
    {
      *v9 = v7;
      v10 = v9 + 1;
    }
    *((_QWORD *)this + 2) = v10;
  }
  return this;
}

void sub_2427BA458(void *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  sub_2427297D4(a1);
}

uint64_t CMMsl::GyroCalibrationDataNonlinearNonFactory::operator=(uint64_t a1, const CMMsl::GyroCalibrationDataNonlinearNonFactory *a2)
{
  __int128 v3;
  uint64_t v4;
  void (**v6)(CMMsl::GyroCalibrationDataNonlinearNonFactory *__hidden);
  __int128 v7;
  uint64_t v8;
  void **v9;

  if ((const CMMsl::GyroCalibrationDataNonlinearNonFactory *)a1 != a2)
  {
    CMMsl::GyroCalibrationDataNonlinearNonFactory::GyroCalibrationDataNonlinearNonFactory((CMMsl::GyroCalibrationDataNonlinearNonFactory *)&v6, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v4;
    v6 = &off_25135DE18;
    v9 = (void **)&v7;
    sub_242910B70(&v9);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

_QWORD *CMMsl::swap(_QWORD *this, CMMsl::GyroCalibrationDataNonlinearNonFactory *a2, CMMsl::GyroCalibrationDataNonlinearNonFactory *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  return this;
}

_QWORD *CMMsl::GyroCalibrationDataNonlinearNonFactory::GyroCalibrationDataNonlinearNonFactory(_QWORD *a1, uint64_t a2)
{
  _OWORD *v4;

  *a1 = &off_25135DE18;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v4 = a1 + 1;
  sub_242910BEC(a1 + 1);
  *v4 = *(_OWORD *)(a2 + 8);
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

{
  _OWORD *v4;

  *a1 = &off_25135DE18;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v4 = a1 + 1;
  sub_242910BEC(a1 + 1);
  *v4 = *(_OWORD *)(a2 + 8);
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

uint64_t CMMsl::GyroCalibrationDataNonlinearNonFactory::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  void (**v9)(CMMsl::GyroCalibrationDataNonlinearNonFactory *__hidden);
  __int128 v10;
  uint64_t v11;
  void **v12;

  if (a1 != a2)
  {
    v9 = &off_25135DE18;
    v10 = 0uLL;
    v11 = 0;
    sub_242910BEC(&v10);
    v4 = *(_QWORD *)(a2 + 24);
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    v10 = v6;
    v7 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v4;
    v11 = v7;
    v12 = (void **)&v10;
    v9 = &off_25135DE18;
    sub_242910B70(&v12);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::GyroCalibrationDataNonlinearNonFactory::formatText(CMMsl::GyroCalibrationDataNonlinearNonFactory *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "sample");
  }
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GyroCalibrationDataNonlinearNonFactory::readFrom(CMMsl::GyroCalibrationDataNonlinearNonFactory *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  char *v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  int64x2_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64x2_t v41;
  unint64_t v42;
  char *v43;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (char *)this + 24;
    while (1)
    {
      v9 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_25;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v12 >> 3) == 1)
      {
        v20 = operator new();
        v21 = v20;
        *(_QWORD *)v20 = &off_25135DE88;
        *(_QWORD *)(v20 + 8) = 0;
        *(_DWORD *)(v20 + 24) = 0;
        v23 = (uint64_t *)*((_QWORD *)this + 2);
        v22 = *((_QWORD *)this + 3);
        if ((unint64_t)v23 >= v22)
        {
          v26 = *((_QWORD *)this + 1);
          v27 = ((uint64_t)v23 - v26) >> 3;
          if ((unint64_t)(v27 + 1) >> 61)
            sub_242729A44();
          v28 = v22 - v26;
          v29 = v28 >> 2;
          if (v28 >> 2 <= (unint64_t)(v27 + 1))
            v29 = v27 + 1;
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
            v30 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v30 = v29;
          v43 = v8;
          if (v30)
            v30 = (unint64_t)sub_2429112FC(v30);
          else
            v31 = 0;
          v32 = (uint64_t *)(v30 + 8 * v27);
          v33 = v30 + 8 * v31;
          v42 = v33;
          *v32 = v21;
          v24 = v32 + 1;
          v41.i64[1] = (uint64_t)(v32 + 1);
          v35 = (_QWORD *)*((_QWORD *)this + 1);
          v34 = (_QWORD *)*((_QWORD *)this + 2);
          if (v34 == v35)
          {
            v37 = vdupq_n_s64((unint64_t)v34);
          }
          else
          {
            do
            {
              v36 = *--v34;
              *v34 = 0;
              *--v32 = v36;
            }
            while (v34 != v35);
            v37 = *(int64x2_t *)((char *)this + 8);
            v24 = (_QWORD *)v41.i64[1];
            v33 = v42;
          }
          *((_QWORD *)this + 1) = v32;
          *((_QWORD *)this + 2) = v24;
          v41 = v37;
          v38 = *((_QWORD *)this + 3);
          *((_QWORD *)this + 3) = v33;
          v42 = v38;
          v40 = v37.i64[0];
          sub_2429114EC((uint64_t)&v40);
        }
        else
        {
          *v23 = v20;
          v24 = v23 + 1;
        }
        *((_QWORD *)this + 2) = v24;
        v39 = *(v24 - 1);
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v39 + 16))(v39, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_25:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)a2 + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      v15 = v17++ > 8;
      if (v15)
        goto LABEL_25;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sub_2427BA9B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::GyroCalibrationDataNonlinearNonFactory::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base **v2;
  const PB::Base **i;
  const PB::Base *v5;

  v2 = *(const PB::Base ***)(this + 8);
  for (i = *(const PB::Base ***)(this + 16); v2 != i; this = PB::Writer::writeSubmessage(a2, v5))
    v5 = *v2++;
  return this;
}

BOOL CMMsl::GyroCalibrationDataNonlinearNonFactory::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;
  BOOL v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(uint64_t **)(a2 + 8);
  if (v3 - v2 != *(_QWORD *)(a2 + 16) - (_QWORD)v4)
    return 0;
  if (v2 == v3)
    return 1;
  v5 = v2 + 8;
  do
  {
    v6 = *v4++;
    result = CMMsl::GyroCalibrationSampleNonlinear::operator==(*(_QWORD *)(v5 - 8), v6);
    v8 = !result || v5 == v3;
    v5 += 8;
  }
  while (!v8);
  return result;
}

BOOL sub_2427BAA88(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 result;
  BOOL v9;

  if (a2 - a1 != a4 - (_QWORD)a3)
    return 0;
  if (a1 == a2)
    return 1;
  v5 = a3;
  v6 = a1 + 8;
  do
  {
    v7 = *v5++;
    result = CMMsl::GyroCalibrationSampleNonlinear::operator==(*(_QWORD *)(v6 - 8), v7);
    v9 = !result || v6 == a2;
    v6 += 8;
  }
  while (!v9);
  return result;
}

uint64_t CMMsl::GyroCalibrationDataNonlinearNonFactory::hash_value(CMMsl::GyroCalibrationDataNonlinearNonFactory *this)
{
  CMMsl::GyroCalibrationSampleNonlinear **v1;
  CMMsl::GyroCalibrationSampleNonlinear **v2;
  uint64_t v3;
  CMMsl::GyroCalibrationSampleNonlinear *v4;

  v1 = (CMMsl::GyroCalibrationSampleNonlinear **)*((_QWORD *)this + 1);
  v2 = (CMMsl::GyroCalibrationSampleNonlinear **)*((_QWORD *)this + 2);
  if (v1 == v2)
    return 0;
  v3 = 0;
  do
  {
    v4 = *v1++;
    v3 ^= CMMsl::GyroCalibrationSampleNonlinear::hash_value(v4);
  }
  while (v1 != v2);
  return v3;
}

uint64_t CMMsl::GyroCalibrationSample::GyroCalibrationSample(uint64_t this)
{
  *(_QWORD *)this = &off_25135DE50;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135DE50;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void CMMsl::GyroCalibrationSample::~GyroCalibrationSample(CMMsl::GyroCalibrationSample *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::GyroCalibrationSample::GyroCalibrationSample(CMMsl::GyroCalibrationSample *this, const CMMsl::GyroCalibrationSample *a2)
{
  char v2;
  char v3;
  float result;

  *(_QWORD *)this = &off_25135DE50;
  *((_DWORD *)this + 6) = 0;
  v2 = *((_BYTE *)a2 + 24);
  if ((v2 & 1) != 0)
  {
    result = *((float *)a2 + 2);
    v3 = 1;
    *((_BYTE *)this + 24) = 1;
    *((float *)this + 2) = result;
    v2 = *((_BYTE *)a2 + 24);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 24) & 2) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 3);
    v3 |= 2u;
    *((_BYTE *)this + 24) = v3;
    *((float *)this + 3) = result;
    v2 = *((_BYTE *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0)
      return result;
LABEL_10:
    result = *((float *)a2 + 5);
    *((_BYTE *)this + 24) = v3 | 8;
    *((float *)this + 5) = result;
    return result;
  }
  result = *((float *)a2 + 4);
  v3 |= 4u;
  *((_BYTE *)this + 24) = v3;
  *((float *)this + 4) = result;
  if ((*((_BYTE *)a2 + 24) & 8) != 0)
    goto LABEL_10;
  return result;
}

uint64_t CMMsl::GyroCalibrationSample::operator=(uint64_t a1, const CMMsl::GyroCalibrationSample *a2)
{
  int v3;
  __int128 v4;
  uint64_t v6;
  __int128 v7;
  int v8;

  if ((const CMMsl::GyroCalibrationSample *)a1 != a2)
  {
    CMMsl::GyroCalibrationSample::GyroCalibrationSample((CMMsl::GyroCalibrationSample *)&v6, a2);
    v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v8;
    v8 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::GyroCalibrationSample *a2, CMMsl::GyroCalibrationSample *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  float result;

  v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  v4 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  v5 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v5;
  v6 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v6;
  result = *((float *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((float *)a2 + 5) = result;
  return result;
}

float CMMsl::GyroCalibrationSample::GyroCalibrationSample(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135DE50;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_25135DE50;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  return result;
}

uint64_t CMMsl::GyroCalibrationSample::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  void (**v7)(CMMsl::GyroCalibrationSample *__hidden);
  __int128 v8;
  int v9;

  if (a1 != a2)
  {
    v7 = &off_25135DE50;
    v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    v9 = *(_DWORD *)(a1 + 24);
    v4 = *(_OWORD *)(a1 + 8);
    v5 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 24) = v3;
    *(_OWORD *)(a1 + 8) = v5;
    v8 = v4;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::GyroCalibrationSample::formatText(CMMsl::GyroCalibrationSample *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "temperature", *((float *)this + 2));
    v5 = *((_BYTE *)this + 24);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "y", *((float *)this + 4));
      if ((*((_BYTE *)this + 24) & 8) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 24) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "x", *((float *)this + 3));
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "z", *((float *)this + 5));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GyroCalibrationSample::readFrom(CMMsl::GyroCalibrationSample *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_37;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 24) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_DWORD *)this + 2) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 2u:
        *((_BYTE *)this + 24) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_DWORD *)this + 3) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 3u:
        *((_BYTE *)this + 24) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 4u:
        *((_BYTE *)this + 24) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_36:
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_34:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_37:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::GyroCalibrationSample::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 24);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 8));
    v4 = *(_BYTE *)(v3 + 24);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 24) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 12));
  v4 = *(_BYTE *)(v3 + 24);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 20));
  }
LABEL_8:
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  if ((*(_BYTE *)(v3 + 24) & 8) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 20));
  return this;
}

BOOL CMMsl::GyroCalibrationSample::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) == 0 || *(float *)(a1 + 8) != *(float *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 2) == 0 || *(float *)(a1 + 12) != *(float *)(a2 + 12))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 4) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 24) & 8) == 0;
  if ((*(_BYTE *)(a1 + 24) & 8) != 0)
    return (*(_BYTE *)(a2 + 24) & 8) != 0 && *(float *)(a1 + 20) == *(float *)(a2 + 20);
  return v2;
}

uint64_t CMMsl::GyroCalibrationSample::hash_value(CMMsl::GyroCalibrationSample *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;

  if ((*((_BYTE *)this + 24) & 1) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 24) & 2) != 0)
      goto LABEL_3;
LABEL_15:
    v3 = 0;
    if ((*((_BYTE *)this + 24) & 4) != 0)
      goto LABEL_6;
    goto LABEL_16;
  }
  v8 = *((float *)this + 2);
  v1 = LODWORD(v8);
  if (v8 == 0.0)
    v1 = 0;
  if ((*((_BYTE *)this + 24) & 2) == 0)
    goto LABEL_15;
LABEL_3:
  v2 = *((float *)this + 3);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 24) & 4) != 0)
  {
LABEL_6:
    v4 = *((float *)this + 4);
    v5 = LODWORD(v4);
    if (v4 == 0.0)
      v5 = 0;
    if ((*((_BYTE *)this + 24) & 8) != 0)
      goto LABEL_9;
LABEL_17:
    v7 = 0;
    return v3 ^ v1 ^ v5 ^ v7;
  }
LABEL_16:
  v5 = 0;
  if ((*((_BYTE *)this + 24) & 8) == 0)
    goto LABEL_17;
LABEL_9:
  v6 = *((float *)this + 5);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  return v3 ^ v1 ^ v5 ^ v7;
}

uint64_t CMMsl::GyroCalibrationSampleNonlinear::GyroCalibrationSampleNonlinear(uint64_t this)
{
  *(_QWORD *)this = &off_25135DE88;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135DE88;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void CMMsl::GyroCalibrationSampleNonlinear::~GyroCalibrationSampleNonlinear(CMMsl::GyroCalibrationSampleNonlinear *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135DE88;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135DE88;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135DE88;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::GyroCalibrationSampleNonlinear *CMMsl::GyroCalibrationSampleNonlinear::GyroCalibrationSampleNonlinear(CMMsl::GyroCalibrationSampleNonlinear *this, const CMMsl::GyroCalibrationSample **a2)
{
  CMMsl::GyroCalibrationSample *v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  const CMMsl::GyroCalibrationSample *v8;

  *(_QWORD *)this = &off_25135DE88;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  if (a2[1])
  {
    v4 = (CMMsl::GyroCalibrationSample *)operator new();
    v5 = CMMsl::GyroCalibrationSample::GyroCalibrationSample(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v7;
    if (v6)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v6 + 8))(v6, v5);
  }
  if (((_BYTE)a2[3] & 1) != 0)
  {
    v8 = a2[2];
    *((_BYTE *)this + 24) |= 1u;
    *((_QWORD *)this + 2) = v8;
  }
  return this;
}

uint64_t CMMsl::GyroCalibrationSampleNonlinear::operator=(uint64_t a1, const CMMsl::GyroCalibrationSample **a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  void (**v7)(CMMsl::GyroCalibrationSampleNonlinear *__hidden);
  uint64_t v8;
  uint64_t v9;
  int v10;

  if ((const CMMsl::GyroCalibrationSample **)a1 != a2)
  {
    CMMsl::GyroCalibrationSampleNonlinear::GyroCalibrationSampleNonlinear((CMMsl::GyroCalibrationSampleNonlinear *)&v7, a2);
    v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v8;
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v9;
    v9 = v5;
    v7 = &off_25135DE88;
    v8 = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::GyroCalibrationSampleNonlinear *a2, CMMsl::GyroCalibrationSampleNonlinear *a3)
{
  int v3;
  uint64_t v4;
  double result;

  v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

uint64_t CMMsl::GyroCalibrationSampleNonlinear::GyroCalibrationSampleNonlinear(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_25135DE88;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_25135DE88;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t CMMsl::GyroCalibrationSampleNonlinear::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  int v11;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v3;
    v11 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v8 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v5;
    v10[2] = v8;
    v10[0] = &off_25135DE88;
    v10[1] = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::GyroCalibrationSampleNonlinear::formatText(CMMsl::GyroCalibrationSampleNonlinear *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  if ((*((_BYTE *)this + 24) & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GyroCalibrationSampleNonlinear::readFrom(CMMsl::GyroCalibrationSampleNonlinear *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_28;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 24) |= 1u;
        v22 = *((_QWORD *)a2 + 1);
        if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v22);
          *((_QWORD *)a2 + 1) += 8;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else if ((v11 >> 3) == 1)
      {
        v19 = (_DWORD *)operator new();
        *(_QWORD *)v19 = &off_25135DE50;
        v19[6] = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = (_DWORD *)*((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_28:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_28;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::GyroCalibrationSampleNonlinear::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = this;
  v4 = *(const PB::Base **)(this + 8);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  if ((*(_BYTE *)(v3 + 24) & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 16));
  return this;
}

BOOL CMMsl::GyroCalibrationSampleNonlinear::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !CMMsl::GyroCalibrationSample::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  result = (*(_BYTE *)(a2 + 24) & 1) == 0;
  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
    return result;
  return (*(_BYTE *)(a2 + 24) & 1) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
}

unint64_t CMMsl::GyroCalibrationSampleNonlinear::hash_value(CMMsl::GyroCalibrationSampleNonlinear *this)
{
  unint64_t v2;
  double v3;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    v2 = CMMsl::GyroCalibrationSample::hash_value((CMMsl::GyroCalibrationSample *)v2);
  if ((*((_BYTE *)this + 24) & 1) != 0)
  {
    v3 = *((double *)this + 2);
    if (v3 == 0.0)
      v3 = 0.0;
  }
  else
  {
    v3 = 0.0;
  }
  return *(_QWORD *)&v3 ^ v2;
}

_QWORD *CMMsl::GyroCalibrationSampleNonlinear::makeSuper(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135DE50;
    *(_DWORD *)(v2 + 24) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t CMMsl::GyroCompass::GyroCompass(uint64_t this)
{
  *(_QWORD *)this = &off_25135DEC0;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135DEC0;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

void CMMsl::GyroCompass::~GyroCompass(CMMsl::GyroCompass *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::GyroCompass::GyroCompass(uint64_t this, const CMMsl::GyroCompass *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;

  *(_QWORD *)this = &off_25135DEC0;
  *(_DWORD *)(this + 60) = 0;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_WORD *)(this + 60) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_WORD *)a2 + 30);
    if ((v2 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_WORD *)a2 + 30) & 0x100) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 11);
    v3 |= 0x100u;
    *(_WORD *)(this + 60) = v3;
    *(_DWORD *)(this + 44) = v5;
    v2 = *((_WORD *)a2 + 30);
  }
LABEL_6:
  if ((v2 & 0x200) != 0)
  {
    v6 = *((_DWORD *)a2 + 12);
    v3 |= 0x200u;
    *(_WORD *)(this + 60) = v3;
    *(_DWORD *)(this + 48) = v6;
    v2 = *((_WORD *)a2 + 30);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x80) == 0)
        goto LABEL_9;
      goto LABEL_19;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 13);
  v3 |= 0x400u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 52) = v7;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x80) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  v8 = *((_DWORD *)a2 + 10);
  v3 |= 0x80u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 40) = v8;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_20:
  v9 = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 36) = v9;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x800) == 0)
  {
LABEL_11:
    if ((v2 & 2) == 0)
      goto LABEL_12;
    goto LABEL_22;
  }
LABEL_21:
  v10 = *((_DWORD *)a2 + 14);
  v3 |= 0x800u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 56) = v10;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 2) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0)
      goto LABEL_13;
    goto LABEL_23;
  }
LABEL_22:
  v11 = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 16) = v11;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_24;
  }
LABEL_23:
  v12 = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 24) = v12;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x10) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_25;
  }
LABEL_24:
  v13 = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 28) = v13;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 4) == 0)
      return this;
LABEL_26:
    v15 = *((_DWORD *)a2 + 5);
    *(_WORD *)(this + 60) = v3 | 4;
    *(_DWORD *)(this + 20) = v15;
    return this;
  }
LABEL_25:
  v14 = *((_DWORD *)a2 + 8);
  v3 |= 0x20u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 32) = v14;
  if ((*((_WORD *)a2 + 30) & 4) != 0)
    goto LABEL_26;
  return this;
}

CMMsl *CMMsl::GyroCompass::operator=(CMMsl *a1, const CMMsl::GyroCompass *a2)
{
  CMMsl::GyroCompass *v3;
  _BYTE v5[64];

  if (a1 != a2)
  {
    CMMsl::GyroCompass::GyroCompass((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::GyroCompass *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::GyroCompass *a2, CMMsl::GyroCompass *a3)
{
  int v3;
  uint64_t v4;
  float result;
  int v6;

  v3 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  result = *((float *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((float *)a2 + 8) = result;
  v6 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v6;
  return result;
}

float CMMsl::GyroCompass::GyroCompass(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135DEC0;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  result = *(float *)(a2 + 32);
  *(float *)(a1 + 32) = result;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return result;
}

CMMsl *CMMsl::GyroCompass::operator=(CMMsl *this, uint64_t a2, CMMsl::GyroCompass *a3)
{
  _QWORD v5[2];
  int v6;
  int v7;
  __int128 v8;
  __int128 v9;
  int v10;
  int v11;

  if (this != (CMMsl *)a2)
  {
    v5[0] = &off_25135DEC0;
    v11 = *(_DWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 60) = 0;
    v5[1] = *(_QWORD *)(a2 + 8);
    v9 = *(_OWORD *)(a2 + 40);
    v10 = *(_DWORD *)(a2 + 56);
    v6 = *(_DWORD *)(a2 + 16);
    v8 = *(_OWORD *)(a2 + 24);
    v7 = *(_DWORD *)(a2 + 20);
    CMMsl::swap(this, (CMMsl::GyroCompass *)v5, a3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return this;
}

uint64_t CMMsl::GyroCompass::formatText(CMMsl::GyroCompass *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 30);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "accuracy", *((float *)this + 4));
    v5 = *((_WORD *)this + 30);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "calibrationLevel");
  v5 = *((_WORD *)this + 30);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "magneticFieldX", *((float *)this + 6));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "magneticFieldY", *((float *)this + 7));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "magneticFieldZ", *((float *)this + 8));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "magneticHeading", *((float *)this + 9));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "quaternionW", *((float *)this + 10));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "quaternionX", *((float *)this + 11));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "quaternionY", *((float *)this + 12));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 1) == 0)
      goto LABEL_12;
LABEL_25:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    if ((*((_WORD *)this + 30) & 0x800) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_13;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "quaternionZ", *((float *)this + 13));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 1) != 0)
    goto LABEL_25;
LABEL_12:
  if ((v5 & 0x800) != 0)
LABEL_13:
    PB::TextFormatter::format(a2, "trueHeading", *((float *)this + 14));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GyroCompass::readFrom(CMMsl::GyroCompass *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_78;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 30) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_55;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        v2 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_72;
      case 2u:
        *((_WORD *)this + 30) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_55;
        *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_71;
      case 3u:
        *((_WORD *)this + 30) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_55;
        *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_71;
      case 4u:
        *((_WORD *)this + 30) |= 0x400u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_55;
        *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_71;
      case 5u:
        *((_WORD *)this + 30) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_55;
        *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_71;
      case 6u:
        *((_WORD *)this + 30) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_55;
        *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_71;
      case 7u:
        *((_WORD *)this + 30) |= 0x800u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_55;
        *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_71;
      case 8u:
        *((_WORD *)this + 30) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_55;
        *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_71;
      case 9u:
        *((_WORD *)this + 30) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_55;
        *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_71;
      case 0xAu:
        *((_WORD *)this + 30) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_55;
        *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_71;
      case 0xBu:
        *((_WORD *)this + 30) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_71:
          v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_72:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_55:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 0xCu:
        *((_WORD *)this + 30) |= 4u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v26 = 0;
          v27 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_77;
            }
            v28 = v20++;
            v29 = *(_BYTE *)(v21 + v28);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0)
              break;
            v26 += 7;
            v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_76:
              v2 = v28 + 1;
              goto LABEL_77;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
          goto LABEL_76;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_77;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_77:
        *((_DWORD *)this + 5) = v24;
        break;
      default:
        goto LABEL_19;
    }
LABEL_78:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::GyroCompass::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 60);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_WORD *)(v3 + 60);
    if ((v4 & 0x100) == 0)
    {
LABEL_3:
      if ((v4 & 0x200) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((*(_WORD *)(this + 60) & 0x100) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x200) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x80) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x800) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x800) == 0)
  {
LABEL_8:
    if ((v4 & 2) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 2) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 4) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  if ((*(_WORD *)(v3 + 60) & 4) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

BOOL CMMsl::GyroCompass::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 60);
  v3 = *(_WORD *)(a2 + 60);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x100) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 60) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x200) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 60) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x400) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 60) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x800) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 60) & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  v4 = (v3 & 4) == 0;
  if ((v2 & 4) != 0)
    return (v3 & 4) != 0 && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
  return v4;
}

uint64_t CMMsl::GyroCompass::hash_value(CMMsl::GyroCompass *this)
{
  __int16 v1;
  double v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *((_WORD *)this + 30);
  if ((v1 & 1) == 0)
  {
    v2 = 0.0;
    if ((*((_WORD *)this + 30) & 0x100) != 0)
      goto LABEL_3;
LABEL_37:
    v4 = 0;
    if ((*((_WORD *)this + 30) & 0x200) != 0)
      goto LABEL_6;
LABEL_38:
    v6 = 0;
    if ((*((_WORD *)this + 30) & 0x400) != 0)
      goto LABEL_9;
LABEL_39:
    v8 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_12;
LABEL_40:
    v10 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_15;
LABEL_41:
    v12 = 0;
    if ((*((_WORD *)this + 30) & 0x800) != 0)
      goto LABEL_18;
LABEL_42:
    v14 = 0;
    if ((v1 & 2) != 0)
      goto LABEL_21;
LABEL_43:
    v16 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_24;
LABEL_44:
    v18 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_27;
LABEL_45:
    v20 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_30;
    goto LABEL_46;
  }
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_WORD *)this + 30) & 0x100) == 0)
    goto LABEL_37;
LABEL_3:
  v3 = *((float *)this + 11);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  if ((*((_WORD *)this + 30) & 0x200) == 0)
    goto LABEL_38;
LABEL_6:
  v5 = *((float *)this + 12);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((*((_WORD *)this + 30) & 0x400) == 0)
    goto LABEL_39;
LABEL_9:
  v7 = *((float *)this + 13);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_40;
LABEL_12:
  v9 = *((float *)this + 10);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_41;
LABEL_15:
  v11 = *((float *)this + 9);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((*((_WORD *)this + 30) & 0x800) == 0)
    goto LABEL_42;
LABEL_18:
  v13 = *((float *)this + 14);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_43;
LABEL_21:
  v15 = *((float *)this + 4);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_44;
LABEL_24:
  v17 = *((float *)this + 6);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_45;
LABEL_27:
  v19 = *((float *)this + 7);
  v20 = LODWORD(v19);
  if (v19 == 0.0)
    v20 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_30:
    v21 = *((float *)this + 8);
    v22 = LODWORD(v21);
    if (v21 == 0.0)
      v22 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_33;
LABEL_47:
    v23 = 0;
    return v4 ^ *(_QWORD *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v23;
  }
LABEL_46:
  v22 = 0;
  if ((v1 & 4) == 0)
    goto LABEL_47;
LABEL_33:
  v23 = *((int *)this + 5);
  return v4 ^ *(_QWORD *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v23;
}

uint64_t CMMsl::GyroDt::GyroDt(uint64_t this)
{
  *(_QWORD *)this = &off_25135DEF8;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135DEF8;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

void CMMsl::GyroDt::~GyroDt(CMMsl::GyroDt *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::GyroDt::GyroDt(CMMsl::GyroDt *this, const CMMsl::GyroDt *a2)
{
  float result;

  *(_QWORD *)this = &off_25135DEF8;
  *((_DWORD *)this + 3) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    result = *((float *)a2 + 2);
    *((_BYTE *)this + 12) = 1;
    *((float *)this + 2) = result;
  }
  return result;
}

{
  float result;

  *(_QWORD *)this = &off_25135DEF8;
  *((_DWORD *)this + 3) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    result = *((float *)a2 + 2);
    *((_BYTE *)this + 12) = 1;
    *((float *)this + 2) = result;
  }
  return result;
}

uint64_t CMMsl::GyroDt::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  int v5;
  void (**v7)(CMMsl::GyroDt *__hidden);
  int v8;
  int v9;

  if (a1 != a2)
  {
    v7 = &off_25135DEF8;
    v3 = *(_DWORD *)(a2 + 8);
    v4 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = *(_BYTE *)(a2 + 12) & 1;
    v9 = v4;
    v5 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = v3;
    v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

{
  int v3;
  int v4;
  int v5;
  int v6;
  void (**v8)(CMMsl::GyroDt *__hidden);
  int v9;
  int v10;

  if (a1 != a2)
  {
    v8 = &off_25135DEF8;
    v3 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    v4 = *(_DWORD *)(a2 + 8);
    v5 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v3;
    v10 = v5;
    v6 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = v4;
    v9 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::GyroDt *a2, CMMsl::GyroDt *a3)
{
  int v3;
  float result;

  v3 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  result = *((float *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((float *)a2 + 2) = result;
  return result;
}

float CMMsl::GyroDt::GyroDt(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135DEF8;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_25135DEF8;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::GyroDt::formatText(CMMsl::GyroDt *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 12) & 1) != 0)
    PB::TextFormatter::format(a2, "dt", *((float *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GyroDt::readFrom(CMMsl::GyroDt *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_25;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 12) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 2) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_25:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_25;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::GyroDt::writeTo(uint64_t this, PB::Writer *a2)
{
  if ((*(_BYTE *)(this + 12) & 1) != 0)
    return PB::Writer::write(a2, *(float *)(this + 8));
  return this;
}

BOOL CMMsl::GyroDt::operator==(uint64_t a1, uint64_t a2)
{
  char v3;
  _BOOL8 result;

  v3 = *(_BYTE *)(a1 + 12);
  result = (*(_BYTE *)(a2 + 12) & 1) == 0;
  if ((v3 & 1) != 0)
    return (*(_BYTE *)(a2 + 12) & 1) != 0 && *(float *)(a1 + 8) == *(float *)(a2 + 8);
  return result;
}

float CMMsl::GyroDt::hash_value(CMMsl::GyroDt *this)
{
  float result;

  if ((*((_BYTE *)this + 12) & 1) != 0)
    return *((float *)this + 2);
  return result;
}

uint64_t CMMsl::GyroFactoryCalibrationData::GyroFactoryCalibrationData(uint64_t this)
{
  *(_QWORD *)this = &off_25135DF30;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135DF30;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void CMMsl::GyroFactoryCalibrationData::~GyroFactoryCalibrationData(CMMsl::GyroFactoryCalibrationData *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::GyroFactoryCalibrationData::GyroFactoryCalibrationData(CMMsl::GyroFactoryCalibrationData *this, const CMMsl::GyroFactoryCalibrationData *a2)
{
  char v2;
  char v3;
  float result;

  *(_QWORD *)this = &off_25135DF30;
  *((_DWORD *)this + 6) = 0;
  v2 = *((_BYTE *)a2 + 24);
  if ((v2 & 1) != 0)
  {
    result = *((float *)a2 + 2);
    v3 = 1;
    *((_BYTE *)this + 24) = 1;
    *((float *)this + 2) = result;
    v2 = *((_BYTE *)a2 + 24);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 24) & 2) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 3);
    v3 |= 2u;
    *((_BYTE *)this + 24) = v3;
    *((float *)this + 3) = result;
    v2 = *((_BYTE *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0)
      return result;
LABEL_10:
    result = *((float *)a2 + 5);
    *((_BYTE *)this + 24) = v3 | 8;
    *((float *)this + 5) = result;
    return result;
  }
  result = *((float *)a2 + 4);
  v3 |= 4u;
  *((_BYTE *)this + 24) = v3;
  *((float *)this + 4) = result;
  if ((*((_BYTE *)a2 + 24) & 8) != 0)
    goto LABEL_10;
  return result;
}

uint64_t CMMsl::GyroFactoryCalibrationData::operator=(uint64_t a1, const CMMsl::GyroFactoryCalibrationData *a2)
{
  int v3;
  __int128 v4;
  uint64_t v6;
  __int128 v7;
  int v8;

  if ((const CMMsl::GyroFactoryCalibrationData *)a1 != a2)
  {
    CMMsl::GyroFactoryCalibrationData::GyroFactoryCalibrationData((CMMsl::GyroFactoryCalibrationData *)&v6, a2);
    v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v8;
    v8 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::GyroFactoryCalibrationData *a2, CMMsl::GyroFactoryCalibrationData *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  float result;

  v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  v4 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  v5 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v5;
  v6 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v6;
  result = *((float *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((float *)a2 + 5) = result;
  return result;
}

float CMMsl::GyroFactoryCalibrationData::GyroFactoryCalibrationData(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135DF30;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_25135DF30;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  return result;
}

uint64_t CMMsl::GyroFactoryCalibrationData::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  void (**v7)(CMMsl::GyroFactoryCalibrationData *__hidden);
  __int128 v8;
  int v9;

  if (a1 != a2)
  {
    v7 = &off_25135DF30;
    v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    v9 = *(_DWORD *)(a1 + 24);
    v4 = *(_OWORD *)(a1 + 8);
    v5 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 24) = v3;
    *(_OWORD *)(a1 + 8) = v5;
    v8 = v4;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::GyroFactoryCalibrationData::formatText(CMMsl::GyroFactoryCalibrationData *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "temperature", *((float *)this + 2));
    v5 = *((_BYTE *)this + 24);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "y", *((float *)this + 4));
      if ((*((_BYTE *)this + 24) & 8) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 24) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "x", *((float *)this + 3));
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "z", *((float *)this + 5));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GyroFactoryCalibrationData::readFrom(CMMsl::GyroFactoryCalibrationData *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_37;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 24) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_DWORD *)this + 2) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 2u:
        *((_BYTE *)this + 24) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_DWORD *)this + 3) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 3u:
        *((_BYTE *)this + 24) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 4u:
        *((_BYTE *)this + 24) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_36:
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_34:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_37:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::GyroFactoryCalibrationData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 24);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 8));
    v4 = *(_BYTE *)(v3 + 24);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 24) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 12));
  v4 = *(_BYTE *)(v3 + 24);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 20));
  }
LABEL_8:
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  if ((*(_BYTE *)(v3 + 24) & 8) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 20));
  return this;
}

BOOL CMMsl::GyroFactoryCalibrationData::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) == 0 || *(float *)(a1 + 8) != *(float *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 2) == 0 || *(float *)(a1 + 12) != *(float *)(a2 + 12))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 4) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 24) & 8) == 0;
  if ((*(_BYTE *)(a1 + 24) & 8) != 0)
    return (*(_BYTE *)(a2 + 24) & 8) != 0 && *(float *)(a1 + 20) == *(float *)(a2 + 20);
  return v2;
}

uint64_t CMMsl::GyroFactoryCalibrationData::hash_value(CMMsl::GyroFactoryCalibrationData *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;

  if ((*((_BYTE *)this + 24) & 1) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 24) & 2) != 0)
      goto LABEL_3;
LABEL_15:
    v3 = 0;
    if ((*((_BYTE *)this + 24) & 4) != 0)
      goto LABEL_6;
    goto LABEL_16;
  }
  v8 = *((float *)this + 2);
  v1 = LODWORD(v8);
  if (v8 == 0.0)
    v1 = 0;
  if ((*((_BYTE *)this + 24) & 2) == 0)
    goto LABEL_15;
LABEL_3:
  v2 = *((float *)this + 3);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 24) & 4) != 0)
  {
LABEL_6:
    v4 = *((float *)this + 4);
    v5 = LODWORD(v4);
    if (v4 == 0.0)
      v5 = 0;
    if ((*((_BYTE *)this + 24) & 8) != 0)
      goto LABEL_9;
LABEL_17:
    v7 = 0;
    return v3 ^ v1 ^ v5 ^ v7;
  }
LABEL_16:
  v5 = 0;
  if ((*((_BYTE *)this + 24) & 8) == 0)
    goto LABEL_17;
LABEL_9:
  v6 = *((float *)this + 5);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  return v3 ^ v1 ^ v5 ^ v7;
}

uint64_t CMMsl::GyroGps::GyroGps(uint64_t this)
{
  *(_QWORD *)this = &off_25135DF68;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135DF68;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

void CMMsl::GyroGps::~GyroGps(CMMsl::GyroGps *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::GyroGps::GyroGps(CMMsl::GyroGps *this, const CMMsl::GyroGps *a2)
{
  char v2;
  char v3;
  uint64_t v4;

  *(_QWORD *)this = &off_25135DF68;
  *((_DWORD *)this + 7) = 0;
  v2 = *((_BYTE *)a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 28) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 28) & 2) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((_BYTE *)this + 28) = v3;
    *((_DWORD *)this + 4) = v4;
    v2 = *((_BYTE *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *((_BYTE *)this + 28) = v3;
    *((_DWORD *)this + 5) = v4;
    if ((*((_BYTE *)a2 + 28) & 8) == 0)
      return *(float *)&v4;
  }
  else if ((v2 & 8) == 0)
  {
    return *(float *)&v4;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  *((_BYTE *)this + 28) = v3 | 8;
  *((_DWORD *)this + 6) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::GyroGps::operator=(uint64_t a1, const CMMsl::GyroGps *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;

  if ((const CMMsl::GyroGps *)a1 != a2)
  {
    CMMsl::GyroGps::GyroGps((CMMsl::GyroGps *)&v9, a2);
    v3 = v11;
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v10;
    *(_QWORD *)(a1 + 16) = v3;
    v6 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v13;
    v13 = v6;
    v10 = v4;
    v11 = v5;
    v7 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v12;
    v12 = v7;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::GyroGps *a2, CMMsl::GyroGps *a3)
{
  int v3;
  uint64_t v4;
  float result;

  v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  return result;
}

float CMMsl::GyroGps::GyroGps(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135DF68;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_25135DF68;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

uint64_t CMMsl::GyroGps::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD v9[3];
  int v10;
  int v11;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    v4 = *(_DWORD *)(a2 + 24);
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    v9[0] = &off_25135DF68;
    v11 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v3;
    v9[1] = v5;
    v9[2] = v6;
    v7 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v4;
    v10 = v7;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::GyroGps::formatText(CMMsl::GyroGps *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    v5 = *((_BYTE *)this + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "y", *((float *)this + 5));
      if ((*((_BYTE *)this + 28) & 8) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "x", *((float *)this + 4));
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "z", *((float *)this + 6));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GyroGps::readFrom(CMMsl::GyroGps *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_38;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 28) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        v2 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_37;
      case 2u:
        *((_BYTE *)this + 28) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 3u:
        *((_BYTE *)this + 28) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 4u:
        *((_BYTE *)this + 28) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_36:
          v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_37:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_34:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_38:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::GyroGps::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 28);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 24));
  }
LABEL_8:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  if ((*(_BYTE *)(v3 + 28) & 8) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 24));
  return this;
}

BOOL CMMsl::GyroGps::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 28) & 8) == 0;
  if ((*(_BYTE *)(a1 + 28) & 8) != 0)
    return (*(_BYTE *)(a2 + 28) & 8) != 0 && *(float *)(a1 + 24) == *(float *)(a2 + 24);
  return v2;
}

uint64_t CMMsl::GyroGps::hash_value(CMMsl::GyroGps *this)
{
  double v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;

  if ((*((_BYTE *)this + 28) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 28) & 2) != 0)
      goto LABEL_3;
LABEL_15:
    v3 = 0;
    if ((*((_BYTE *)this + 28) & 4) != 0)
      goto LABEL_6;
    goto LABEL_16;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 28) & 2) == 0)
    goto LABEL_15;
LABEL_3:
  v2 = *((float *)this + 4);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 28) & 4) != 0)
  {
LABEL_6:
    v4 = *((float *)this + 5);
    v5 = LODWORD(v4);
    if (v4 == 0.0)
      v5 = 0;
    if ((*((_BYTE *)this + 28) & 8) != 0)
      goto LABEL_9;
LABEL_17:
    v7 = 0;
    return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7;
  }
LABEL_16:
  v5 = 0;
  if ((*((_BYTE *)this + 28) & 8) == 0)
    goto LABEL_17;
LABEL_9:
  v6 = *((float *)this + 6);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7;
}

uint64_t CMMsl::GyroOscarEmu::GyroOscarEmu(uint64_t this)
{
  *(_QWORD *)this = &off_25135DFA0;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135DFA0;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

void CMMsl::GyroOscarEmu::~GyroOscarEmu(CMMsl::GyroOscarEmu *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::GyroOscarEmu::GyroOscarEmu(uint64_t this, const CMMsl::GyroOscarEmu *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  char v9;

  *(_QWORD *)this = &off_25135DFA0;
  *(_DWORD *)(this + 36) = 0;
  v2 = *((_BYTE *)a2 + 36);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_BYTE *)(this + 36) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 36);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 36) & 4) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *(_BYTE *)(this + 36) = v3;
    *(_DWORD *)(this + 20) = v5;
    v2 = *((_BYTE *)a2 + 36);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    v6 = *((_DWORD *)a2 + 6);
    v3 |= 8u;
    *(_BYTE *)(this + 36) = v3;
    *(_DWORD *)(this + 24) = v6;
    v2 = *((_BYTE *)a2 + 36);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0)
        goto LABEL_9;
      goto LABEL_13;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *(_BYTE *)(this + 36) = v3;
  *(_DWORD *)(this + 28) = v7;
  v2 = *((_BYTE *)a2 + 36);
  if ((v2 & 2) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      return this;
LABEL_14:
    v9 = *((_BYTE *)a2 + 32);
    *(_BYTE *)(this + 36) = v3 | 0x20;
    *(_BYTE *)(this + 32) = v9;
    return this;
  }
LABEL_13:
  v8 = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *(_BYTE *)(this + 36) = v3;
  *(_DWORD *)(this + 16) = v8;
  if ((*((_BYTE *)a2 + 36) & 0x20) != 0)
    goto LABEL_14;
  return this;
}

uint64_t CMMsl::GyroOscarEmu::operator=(uint64_t a1, const CMMsl::GyroOscarEmu *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BYTE v8[8];
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  char v13;
  int v14;

  if ((const CMMsl::GyroOscarEmu *)a1 != a2)
  {
    CMMsl::GyroOscarEmu::GyroOscarEmu((uint64_t)v8, a2);
    v3 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v14;
    v14 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    v9 = v4;
    v5 = *(_QWORD *)(a1 + 20);
    *(_QWORD *)(a1 + 20) = v11;
    v11 = v5;
    LODWORD(v4) = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v12;
    v12 = v4;
    v6 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v10;
    v10 = v6;
    LOBYTE(v6) = *(_BYTE *)(a1 + 32);
    *(_BYTE *)(a1 + 32) = v13;
    v13 = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::GyroOscarEmu *a2, CMMsl::GyroOscarEmu *a3)
{
  int v3;
  uint64_t v4;
  float result;
  int v6;

  v3 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  result = *((float *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((float *)a2 + 7) = result;
  v6 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 32);
  *((_BYTE *)this + 32) = *((_BYTE *)a2 + 32);
  *((_BYTE *)a2 + 32) = v6;
  return result;
}

float CMMsl::GyroOscarEmu::GyroOscarEmu(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135DFA0;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(float *)(a2 + 28);
  *(float *)(a1 + 28) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_25135DFA0;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(float *)(a2 + 28);
  *(float *)(a1 + 28) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return result;
}

uint64_t CMMsl::GyroOscarEmu::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _QWORD v13[2];
  int v14;
  uint64_t v15;
  int v16;
  char v17;
  int v18;

  if (a1 != a2)
  {
    v13[0] = &off_25135DFA0;
    v3 = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a2 + 36) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_DWORD *)(a2 + 28);
    v6 = *(_DWORD *)(a2 + 16);
    v7 = *(_BYTE *)(a2 + 32);
    v18 = *(_DWORD *)(a1 + 36);
    v8 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v13[1] = v8;
    v9 = *(_QWORD *)(a1 + 20);
    v10 = *(_QWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 36) = v3;
    *(_QWORD *)(a1 + 20) = v10;
    v15 = v9;
    LODWORD(v9) = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v5;
    v16 = v9;
    v11 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v6;
    v14 = v11;
    LOBYTE(v11) = *(_BYTE *)(a1 + 32);
    *(_BYTE *)(a1 + 32) = v7;
    v17 = v11;
    PB::Base::~Base((PB::Base *)v13);
  }
  return a1;
}

uint64_t CMMsl::GyroOscarEmu::formatText(CMMsl::GyroOscarEmu *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 36);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(a2, "fsync");
    v5 = *((_BYTE *)this + 36);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*((_BYTE *)this + 36) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "sampleNum");
  v5 = *((_BYTE *)this + 36);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  v5 = *((_BYTE *)this + 36);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(a2, "y", *((float *)this + 6));
    if ((*((_BYTE *)this + 36) & 0x10) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "x", *((float *)this + 5));
  v5 = *((_BYTE *)this + 36);
  if ((v5 & 8) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 0x10) != 0)
LABEL_7:
    PB::TextFormatter::format(a2, "z", *((float *)this + 7));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GyroOscarEmu::readFrom(CMMsl::GyroOscarEmu *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  int v26;
  BOOL v27;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_61;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 36) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        v2 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_55;
      case 2u:
        *((_BYTE *)this + 36) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_54;
      case 3u:
        *((_BYTE *)this + 36) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_54;
      case 4u:
        *((_BYTE *)this + 36) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_54:
          v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_55:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_34:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 5u:
        *((_BYTE *)this + 36) |= 2u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v28 = 0;
          v29 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_60;
            }
            v30 = v20++;
            v31 = *(_BYTE *)(v21 + v30);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_59:
              v2 = v30 + 1;
              goto LABEL_60;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
          goto LABEL_59;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_60;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_60:
        *((_DWORD *)this + 4) = v24;
        break;
      case 6u:
        *((_BYTE *)this + 36) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v27 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v26 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v27 = v26 != 0;
        }
        *((_BYTE *)this + 32) = v27;
        break;
      default:
        goto LABEL_19;
    }
LABEL_61:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::GyroOscarEmu::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 36);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 36);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(this + 36) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 2) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      return this;
    return PB::Writer::write(a2);
  }
LABEL_12:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_BYTE *)(v3 + 36) & 0x20) != 0)
    return PB::Writer::write(a2);
  return this;
}

BOOL CMMsl::GyroOscarEmu::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 36) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 36) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 36) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 36) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 36) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 36) & 0x20) == 0;
  if ((*(_BYTE *)(a1 + 36) & 0x20) != 0)
    return (*(_BYTE *)(a2 + 36) & 0x20) != 0 && *(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32);
  return v2;
}

uint64_t CMMsl::GyroOscarEmu::hash_value(CMMsl::GyroOscarEmu *this)
{
  double v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if ((*((_BYTE *)this + 36) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 36) & 4) != 0)
      goto LABEL_3;
LABEL_17:
    v3 = 0;
    if ((*((_BYTE *)this + 36) & 8) != 0)
      goto LABEL_6;
LABEL_18:
    v5 = 0;
    if ((*((_BYTE *)this + 36) & 0x10) != 0)
      goto LABEL_9;
LABEL_19:
    v7 = 0;
    if ((*((_BYTE *)this + 36) & 2) != 0)
      goto LABEL_12;
LABEL_20:
    v8 = 0;
    if ((*((_BYTE *)this + 36) & 0x20) != 0)
      goto LABEL_13;
LABEL_21:
    v9 = 0;
    return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7 ^ v8 ^ v9;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 36) & 4) == 0)
    goto LABEL_17;
LABEL_3:
  v2 = *((float *)this + 5);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 36) & 8) == 0)
    goto LABEL_18;
LABEL_6:
  v4 = *((float *)this + 6);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((*((_BYTE *)this + 36) & 0x10) == 0)
    goto LABEL_19;
LABEL_9:
  v6 = *((float *)this + 7);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  if ((*((_BYTE *)this + 36) & 2) == 0)
    goto LABEL_20;
LABEL_12:
  v8 = *((unsigned int *)this + 4);
  if ((*((_BYTE *)this + 36) & 0x20) == 0)
    goto LABEL_21;
LABEL_13:
  v9 = *((unsigned __int8 *)this + 32);
  return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7 ^ v8 ^ v9;
}

uint64_t CMMsl::GyroTemperature::GyroTemperature(uint64_t this)
{
  *(_QWORD *)this = &off_25135DFD8;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135DFD8;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

void CMMsl::GyroTemperature::~GyroTemperature(CMMsl::GyroTemperature *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::GyroTemperature::GyroTemperature(uint64_t this, const CMMsl::GyroTemperature *a2)
{
  char v2;
  int v3;
  int v4;

  *(_QWORD *)this = &off_25135DFD8;
  *(_DWORD *)(this + 16) = 0;
  if ((*((_BYTE *)a2 + 16) & 2) != 0)
  {
    v3 = *((_DWORD *)a2 + 3);
    *(_BYTE *)(this + 16) = 2;
    *(_DWORD *)(this + 12) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 16) & 1) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 2);
    *(_BYTE *)(this + 16) = v2;
    *(_DWORD *)(this + 8) = v4;
  }
  return this;
}

{
  char v2;
  int v3;
  int v4;

  *(_QWORD *)this = &off_25135DFD8;
  *(_DWORD *)(this + 16) = 0;
  if ((*((_BYTE *)a2 + 16) & 2) != 0)
  {
    v3 = *((_DWORD *)a2 + 3);
    *(_BYTE *)(this + 16) = 2;
    *(_DWORD *)(this + 12) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 16) & 1) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 2);
    *(_BYTE *)(this + 16) = v2;
    *(_DWORD *)(this + 8) = v4;
  }
  return this;
}

float *CMMsl::GyroTemperature::operator=(float *a1, uint64_t a2, float a3)
{
  int v3;
  char v5;
  char v6;
  int v7;
  int v8;
  int v9;
  void (**v11)(CMMsl::GyroTemperature *__hidden);
  int v12;
  int v13;
  int v14;

  if (a1 != (float *)a2)
  {
    v11 = &off_25135DFD8;
    v14 = 0;
    v5 = *(_BYTE *)(a2 + 16);
    if ((v5 & 2) != 0)
    {
      a3 = *(float *)(a2 + 12);
      LOBYTE(v14) = 2;
      v6 = 3;
      if ((v5 & 1) != 0)
      {
LABEL_6:
        v3 = *(_DWORD *)(a2 + 8);
        LOBYTE(v14) = v6;
      }
    }
    else
    {
      v6 = 1;
      if ((*(_BYTE *)(a2 + 16) & 1) != 0)
        goto LABEL_6;
    }
    v7 = *((_DWORD *)a1 + 4);
    *((_DWORD *)a1 + 4) = v14;
    v14 = v7;
    v8 = *((_DWORD *)a1 + 3);
    a1[3] = a3;
    v13 = v8;
    v9 = *((_DWORD *)a1 + 2);
    *((_DWORD *)a1 + 2) = v3;
    v12 = v9;
    PB::Base::~Base((PB::Base *)&v11);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::GyroTemperature *a2, CMMsl::GyroTemperature *a3)
{
  int v3;
  float result;
  int v5;

  v3 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3;
  result = *((float *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((float *)a2 + 3) = result;
  v5 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v5;
  return result;
}

float CMMsl::GyroTemperature::GyroTemperature(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135DFD8;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_25135DFD8;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

_DWORD *CMMsl::GyroTemperature::operator=(_DWORD *a1, _DWORD *a2)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  void (**v10)(CMMsl::GyroTemperature *__hidden);
  int v11;
  int v12;
  int v13;

  if (a1 != a2)
  {
    v10 = &off_25135DFD8;
    v3 = a2[4];
    a2[4] = 0;
    v4 = a2[3];
    v5 = a2[2];
    v6 = a1[4];
    a1[4] = v3;
    v13 = v6;
    v7 = a1[3];
    a1[3] = v4;
    v12 = v7;
    v8 = a1[2];
    a1[2] = v5;
    v11 = v8;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

uint64_t CMMsl::GyroTemperature::formatText(CMMsl::GyroTemperature *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 16);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "location");
    v5 = *((_BYTE *)this + 16);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "temperature", *((float *)this + 3));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GyroTemperature::readFrom(CMMsl::GyroTemperature *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_26;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 16) |= 1u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v26 = 0;
          v27 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_47;
            }
            v28 = v20++;
            v29 = *(_BYTE *)(v21 + v28);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0)
              break;
            v26 += 7;
            v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
LABEL_46:
          v2 = v28 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)a2 + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 2) = v24;
      }
      else if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 16) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 3) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_26:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_26;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::GyroTemperature::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 16);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 12));
    v4 = *(_BYTE *)(v3 + 16);
  }
  if ((v4 & 1) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

BOOL CMMsl::GyroTemperature::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 16) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 16) & 2) == 0 || *(float *)(a1 + 12) != *(float *)(a2 + 12))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 16) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 16) & 1) == 0;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    return (*(_BYTE *)(a2 + 16) & 1) != 0 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
  return v2;
}

uint64_t CMMsl::GyroTemperature::hash_value(CMMsl::GyroTemperature *this)
{
  uint64_t v1;
  uint64_t v2;
  float v3;

  if ((*((_BYTE *)this + 16) & 2) != 0)
  {
    v3 = *((float *)this + 3);
    v1 = LODWORD(v3);
    if (v3 == 0.0)
      v1 = 0;
    if ((*((_BYTE *)this + 16) & 1) != 0)
      goto LABEL_3;
LABEL_7:
    v2 = 0;
    return v2 ^ v1;
  }
  v1 = 0;
  if ((*((_BYTE *)this + 16) & 1) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((int *)this + 2);
  return v2 ^ v1;
}

uint64_t CMMsl::HIDShower::HIDShower(uint64_t this)
{
  *(_QWORD *)this = &off_25135E010;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135E010;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::HIDShower::~HIDShower(CMMsl::HIDShower *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::HIDShower::HIDShower(uint64_t this, const CMMsl::HIDShower *a2)
{
  char v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)this = &off_25135E010;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_BYTE *)a2 + 16);
    *(_BYTE *)(this + 20) = v2;
    *(_BYTE *)(this + 16) = v4;
  }
  return this;
}

{
  char v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)this = &off_25135E010;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_BYTE *)a2 + 16);
    *(_BYTE *)(this + 20) = v2;
    *(_BYTE *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::HIDShower::operator=(uint64_t a1, uint64_t a2, double a3)
{
  char v3;
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  _QWORD v10[2];
  char v11;
  int v12;

  if (a1 != a2)
  {
    v10[0] = &off_25135E010;
    v12 = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      LOBYTE(v12) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        v3 = *(_BYTE *)(a2 + 16);
        LOBYTE(v12) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_6;
    }
    v7 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v12;
    v12 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    *(double *)(a1 + 8) = a3;
    v10[1] = v8;
    LOBYTE(v7) = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v3;
    v11 = v7;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::HIDShower *a2, CMMsl::HIDShower *a3)
{
  int v3;
  double result;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  LOBYTE(v3) = *((_BYTE *)this + 16);
  *((_BYTE *)this + 16) = *((_BYTE *)a2 + 16);
  *((_BYTE *)a2 + 16) = v3;
  return result;
}

double CMMsl::HIDShower::HIDShower(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135E010;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135E010;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return result;
}

uint64_t CMMsl::HIDShower::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  _QWORD v9[2];
  char v10;
  int v11;

  if (a1 != a2)
  {
    v9[0] = &off_25135E010;
    v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_BYTE *)(a2 + 16);
    v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    v11 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v9[1] = v7;
    LOBYTE(v3) = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v5;
    v10 = v3;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::HIDShower::formatText(CMMsl::HIDShower *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "inShower");
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::HIDShower::readFrom(CMMsl::HIDShower *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v20;
  BOOL v21;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_26;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v21 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v21 = v20 != 0;
        }
        *((_BYTE *)this + 16) = v21;
      }
      else if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_26:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_26;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::HIDShower::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(a2);
  return this;
}

BOOL CMMsl::HIDShower::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
  return v2;
}

uint64_t CMMsl::HIDShower::hash_value(CMMsl::HIDShower *this)
{
  double v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v2 = 0;
    return v2 ^ *(_QWORD *)&v1;
  }
  v1 = 0.0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((unsigned __int8 *)this + 16);
  return v2 ^ *(_QWORD *)&v1;
}

uint64_t CMMsl::HapticModuleState::HapticModuleState(uint64_t this)
{
  *(_QWORD *)this = &off_25135E048;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135E048;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::HapticModuleState::~HapticModuleState(CMMsl::HapticModuleState *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::HapticModuleState::HapticModuleState(uint64_t this, const CMMsl::HapticModuleState *a2)
{
  char v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)this = &off_25135E048;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_BYTE *)a2 + 16);
    *(_BYTE *)(this + 20) = v2;
    *(_BYTE *)(this + 16) = v4;
  }
  return this;
}

{
  char v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)this = &off_25135E048;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_BYTE *)a2 + 16);
    *(_BYTE *)(this + 20) = v2;
    *(_BYTE *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::HapticModuleState::operator=(uint64_t a1, uint64_t a2, double a3)
{
  char v3;
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  _QWORD v10[2];
  char v11;
  int v12;

  if (a1 != a2)
  {
    v10[0] = &off_25135E048;
    v12 = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      LOBYTE(v12) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        v3 = *(_BYTE *)(a2 + 16);
        LOBYTE(v12) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_6;
    }
    v7 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v12;
    v12 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    *(double *)(a1 + 8) = a3;
    v10[1] = v8;
    LOBYTE(v7) = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v3;
    v11 = v7;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::HapticModuleState *a2, CMMsl::HapticModuleState *a3)
{
  int v3;
  double result;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  LOBYTE(v3) = *((_BYTE *)this + 16);
  *((_BYTE *)this + 16) = *((_BYTE *)a2 + 16);
  *((_BYTE *)a2 + 16) = v3;
  return result;
}

double CMMsl::HapticModuleState::HapticModuleState(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135E048;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135E048;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return result;
}

uint64_t CMMsl::HapticModuleState::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  _QWORD v9[2];
  char v10;
  int v11;

  if (a1 != a2)
  {
    v9[0] = &off_25135E048;
    v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_BYTE *)(a2 + 16);
    v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    v11 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v9[1] = v7;
    LOBYTE(v3) = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v5;
    v10 = v3;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::HapticModuleState::formatText(CMMsl::HapticModuleState *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "hapticOn");
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::HapticModuleState::readFrom(CMMsl::HapticModuleState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v20;
  BOOL v21;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_26;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v21 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v21 = v20 != 0;
        }
        *((_BYTE *)this + 16) = v21;
      }
      else if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_26:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_26;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::HapticModuleState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(a2);
  return this;
}

BOOL CMMsl::HapticModuleState::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
  return v2;
}

uint64_t CMMsl::HapticModuleState::hash_value(CMMsl::HapticModuleState *this)
{
  double v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v2 = 0;
    return v2 ^ *(_QWORD *)&v1;
  }
  v1 = 0.0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((unsigned __int8 *)this + 16);
  return v2 ^ *(_QWORD *)&v1;
}

uint64_t CMMsl::HarmonicMetrics::HarmonicMetrics(uint64_t this)
{
  *(_QWORD *)this = &off_25135E080;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135E080;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

void CMMsl::HarmonicMetrics::~HarmonicMetrics(CMMsl::HarmonicMetrics *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::HarmonicMetrics::HarmonicMetrics(CMMsl::HarmonicMetrics *this, const CMMsl::HarmonicMetrics *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  float result;

  *(_QWORD *)this = &off_25135E080;
  *((_DWORD *)this + 11) = 0;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 44) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_BYTE *)a2 + 44);
    if ((v2 & 0x80) == 0)
      goto LABEL_6;
  }
  else
  {
    v3 = 0;
    if ((*((_BYTE *)a2 + 44) & 0x80) == 0)
      goto LABEL_6;
  }
  result = *((float *)a2 + 10);
  v3 |= 0x80u;
  *((_BYTE *)this + 44) = v3;
  *((float *)this + 10) = result;
  v2 = *((_BYTE *)a2 + 44);
LABEL_6:
  if ((v2 & 2) != 0)
  {
    result = *((float *)a2 + 4);
    v3 |= 2u;
    *((_BYTE *)this + 44) = v3;
    *((float *)this + 4) = result;
    v2 = *((_BYTE *)a2 + 44);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        goto LABEL_9;
      goto LABEL_15;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  result = *((float *)a2 + 5);
  v3 |= 4u;
  *((_BYTE *)this + 44) = v3;
  *((float *)this + 5) = result;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_16;
  }
LABEL_15:
  result = *((float *)a2 + 6);
  v3 |= 8u;
  *((_BYTE *)this + 44) = v3;
  *((float *)this + 6) = result;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x20) == 0)
      goto LABEL_11;
    goto LABEL_17;
  }
LABEL_16:
  result = *((float *)a2 + 7);
  v3 |= 0x10u;
  *((_BYTE *)this + 44) = v3;
  *((float *)this + 7) = result;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 0x20) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0)
      return result;
LABEL_18:
    result = *((float *)a2 + 9);
    *((_BYTE *)this + 44) = v3 | 0x40;
    *((float *)this + 9) = result;
    return result;
  }
LABEL_17:
  result = *((float *)a2 + 8);
  v3 |= 0x20u;
  *((_BYTE *)this + 44) = v3;
  *((float *)this + 8) = result;
  if ((*((_BYTE *)a2 + 44) & 0x40) != 0)
    goto LABEL_18;
  return result;
}

uint64_t CMMsl::HarmonicMetrics::operator=(uint64_t a1, const CMMsl::HarmonicMetrics *a2)
{
  int v3;
  uint64_t v4;
  int v5;
  __int128 v6;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  int v13;

  if ((const CMMsl::HarmonicMetrics *)a1 != a2)
  {
    CMMsl::HarmonicMetrics::HarmonicMetrics((CMMsl::HarmonicMetrics *)&v8, a2);
    v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v13;
    v13 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    v9 = v4;
    v5 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v12;
    v12 = v5;
    v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v10;
    v10 = v6;
    *(_QWORD *)&v6 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v11;
    v11 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::HarmonicMetrics *a2, CMMsl::HarmonicMetrics *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  float result;

  v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v5;
  v6 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v6;
  v7 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v7;
  v8 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v8;
  v9 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v9;
  v10 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v10;
  result = *((float *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((float *)a2 + 9) = result;
  return result;
}

float CMMsl::HarmonicMetrics::HarmonicMetrics(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135E080;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  result = *(float *)(a2 + 36);
  *(float *)(a1 + 36) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_25135E080;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  result = *(float *)(a2 + 36);
  *(float *)(a1 + 36) = result;
  return result;
}

uint64_t CMMsl::HarmonicMetrics::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  __int128 v12;
  uint64_t v13;
  int v14;
  int v15;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a2 + 44) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_DWORD *)(a2 + 40);
    v15 = *(_DWORD *)(a1 + 44);
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v11[0] = &off_25135E080;
    v11[1] = v6;
    v14 = *(_DWORD *)(a1 + 40);
    v7 = *(_OWORD *)(a2 + 16);
    v12 = *(_OWORD *)(a1 + 16);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 44) = v3;
    *(_DWORD *)(a1 + 40) = v5;
    *(_OWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 32) = v9;
    v13 = v8;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

uint64_t CMMsl::HarmonicMetrics::formatText(CMMsl::HarmonicMetrics *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "stepIndexOfHarmonicityAP", *((float *)this + 4));
    v5 = *((_BYTE *)this + 44);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((*((_BYTE *)this + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "stepIndexOfHarmonicityML", *((float *)this + 5));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "stepIndexOfHarmonicityVT", *((float *)this + 6));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "swingIndexOfHarmonicityAP", *((float *)this + 7));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "swingIndexOfHarmonicityML", *((float *)this + 8));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
LABEL_17:
    PB::TextFormatter::format(a2, "thetaAPDirRad", *((float *)this + 10));
    if ((*((_BYTE *)this + 44) & 1) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_9;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "swingIndexOfHarmonicityVT", *((float *)this + 9));
  v5 = *((_BYTE *)this + 44);
  if (v5 < 0)
    goto LABEL_17;
LABEL_8:
  if ((v5 & 1) != 0)
LABEL_9:
    PB::TextFormatter::format(a2, "timestamp");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::HarmonicMetrics::readFrom(CMMsl::HarmonicMetrics *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_65;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 44) |= 1u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v26 = 0;
          v27 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              v24 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_64;
            }
            v28 = v20++;
            v29 = *(_BYTE *)(v21 + v28);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0)
              break;
            v26 += 7;
            v14 = v27++ > 8;
            if (v14)
            {
              v24 = 0;
LABEL_63:
              v2 = v28 + 1;
              goto LABEL_64;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v24 = 0;
          goto LABEL_63;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_64;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        v24 = 0;
LABEL_64:
        *((_QWORD *)this + 1) = v24;
        break;
      case 2u:
        *((_BYTE *)this + 44) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_50;
        *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_59;
      case 3u:
        *((_BYTE *)this + 44) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_50;
        *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_59;
      case 4u:
        *((_BYTE *)this + 44) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_50;
        *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_59;
      case 5u:
        *((_BYTE *)this + 44) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_50;
        *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_59;
      case 6u:
        *((_BYTE *)this + 44) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_50;
        *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_59;
      case 7u:
        *((_BYTE *)this + 44) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_50;
        *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_59;
      case 8u:
        *((_BYTE *)this + 44) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_59:
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_50:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_65:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::HarmonicMetrics::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 44);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(this + 44) & 0x80) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x20) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 36));
  }
LABEL_16:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  if ((*(_BYTE *)(v3 + 44) & 0x40) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 36));
  return this;
}

BOOL CMMsl::HarmonicMetrics::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(unsigned __int8 *)(a1 + 44);
  v3 = *(unsigned __int8 *)(a2 + 44);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v3 & v2 & 0x80) != 0)
  {
    if (*(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if (((v3 | v2) & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x40) == 0;
  if ((v2 & 0x40) != 0)
    return (v3 & 0x40) != 0 && *(float *)(a1 + 36) == *(float *)(a2 + 36);
  return v4;
}

uint64_t CMMsl::HarmonicMetrics::hash_value(CMMsl::HarmonicMetrics *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t v15;

  if ((*((_BYTE *)this + 44) & 1) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 44) & 0x80) != 0)
      goto LABEL_3;
LABEL_25:
    v3 = 0;
    if ((*((_BYTE *)this + 44) & 2) != 0)
      goto LABEL_6;
LABEL_26:
    v5 = 0;
    if ((*((_BYTE *)this + 44) & 4) != 0)
      goto LABEL_9;
LABEL_27:
    v7 = 0;
    if ((*((_BYTE *)this + 44) & 8) != 0)
      goto LABEL_12;
LABEL_28:
    v9 = 0;
    if ((*((_BYTE *)this + 44) & 0x10) != 0)
      goto LABEL_15;
LABEL_29:
    v11 = 0;
    if ((*((_BYTE *)this + 44) & 0x20) != 0)
      goto LABEL_18;
    goto LABEL_30;
  }
  v1 = *((_QWORD *)this + 1);
  if ((*((_BYTE *)this + 44) & 0x80) == 0)
    goto LABEL_25;
LABEL_3:
  v2 = *((float *)this + 10);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 44) & 2) == 0)
    goto LABEL_26;
LABEL_6:
  v4 = *((float *)this + 4);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((*((_BYTE *)this + 44) & 4) == 0)
    goto LABEL_27;
LABEL_9:
  v6 = *((float *)this + 5);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  if ((*((_BYTE *)this + 44) & 8) == 0)
    goto LABEL_28;
LABEL_12:
  v8 = *((float *)this + 6);
  v9 = LODWORD(v8);
  if (v8 == 0.0)
    v9 = 0;
  if ((*((_BYTE *)this + 44) & 0x10) == 0)
    goto LABEL_29;
LABEL_15:
  v10 = *((float *)this + 7);
  v11 = LODWORD(v10);
  if (v10 == 0.0)
    v11 = 0;
  if ((*((_BYTE *)this + 44) & 0x20) != 0)
  {
LABEL_18:
    v12 = *((float *)this + 8);
    v13 = LODWORD(v12);
    if (v12 == 0.0)
      v13 = 0;
    if ((*((_BYTE *)this + 44) & 0x40) != 0)
      goto LABEL_21;
LABEL_31:
    v15 = 0;
    return v3 ^ v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13 ^ v15;
  }
LABEL_30:
  v13 = 0;
  if ((*((_BYTE *)this + 44) & 0x40) == 0)
    goto LABEL_31;
LABEL_21:
  v14 = *((float *)this + 9);
  v15 = LODWORD(v14);
  if (v14 == 0.0)
    v15 = 0;
  return v3 ^ v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13 ^ v15;
}

double CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::HeadToHeadsetAttitudeEstimatorMeasurementUpdate(CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *this)
{
  double result;

  *(_QWORD *)this = &off_25135E0B8;
  *((_QWORD *)this + 21) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_25135E0B8;
  *((_QWORD *)this + 21) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  return result;
}

void CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::~HeadToHeadsetAttitudeEstimatorMeasurementUpdate(CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = &off_25135E0B8;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 7);
  if (v3)
  {
    *((_QWORD *)this + 8) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 5) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 1);
  if (v5)
  {
    *((_QWORD *)this + 2) = v5;
    operator delete(v5);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::~HeadToHeadsetAttitudeEstimatorMeasurementUpdate(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::HeadToHeadsetAttitudeEstimatorMeasurementUpdate(CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *this, const CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  __int16 v6;
  uint64_t v7;
  int v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)this = &off_25135E0B8;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (_QWORD *)((char *)this + 8);
  *(_OWORD *)((char *)this + 56) = 0u;
  v5 = (_QWORD *)((char *)this + 56);
  *((_QWORD *)this + 21) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  if ((*((_WORD *)a2 + 86) & 0x10) != 0)
  {
    v7 = *((_QWORD *)a2 + 17);
    *((_WORD *)this + 86) = 16;
    *((_QWORD *)this + 17) = v7;
    v6 = 272;
    if ((*((_WORD *)a2 + 86) & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 256;
  if ((*((_WORD *)a2 + 86) & 0x100) != 0)
  {
LABEL_5:
    v8 = *((_DWORD *)a2 + 42);
    *((_WORD *)this + 86) = v6;
    *((_DWORD *)this + 42) = v8;
  }
LABEL_6:
  if (this != a2)
  {
    sub_2429111C4((_QWORD *)this + 10, *((char **)a2 + 10), *((char **)a2 + 11), (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 3);
    sub_2429111C4(v5, *((char **)a2 + 7), *((char **)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 3);
  }
  v9 = *((_WORD *)a2 + 86);
  if ((v9 & 2) != 0)
  {
    v10 = *((_QWORD *)a2 + 14);
    *((_WORD *)this + 86) |= 2u;
    *((_QWORD *)this + 14) = v10;
    v9 = *((_WORD *)a2 + 86);
  }
  if ((v9 & 1) != 0)
  {
    v11 = *((_QWORD *)a2 + 13);
    *((_WORD *)this + 86) |= 1u;
    *((_QWORD *)this + 13) = v11;
  }
  if (this != a2)
  {
    sub_2429111C4((_QWORD *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3);
    sub_2429111C4(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
  }
  v12 = *((_WORD *)a2 + 86);
  if ((v12 & 0x80) != 0)
  {
    v15 = *((_QWORD *)a2 + 20);
    *((_WORD *)this + 86) |= 0x80u;
    *((_QWORD *)this + 20) = v15;
    v12 = *((_WORD *)a2 + 86);
    if ((v12 & 0x20) == 0)
    {
LABEL_16:
      if ((v12 & 0x40) == 0)
        goto LABEL_17;
      goto LABEL_23;
    }
  }
  else if ((v12 & 0x20) == 0)
  {
    goto LABEL_16;
  }
  v16 = *((_QWORD *)a2 + 18);
  *((_WORD *)this + 86) |= 0x20u;
  *((_QWORD *)this + 18) = v16;
  v12 = *((_WORD *)a2 + 86);
  if ((v12 & 0x40) == 0)
  {
LABEL_17:
    if ((v12 & 8) == 0)
      goto LABEL_18;
LABEL_24:
    v18 = *((_QWORD *)a2 + 16);
    *((_WORD *)this + 86) |= 8u;
    *((_QWORD *)this + 16) = v18;
    if ((*((_WORD *)a2 + 86) & 4) == 0)
      return this;
    goto LABEL_19;
  }
LABEL_23:
  v17 = *((_QWORD *)a2 + 19);
  *((_WORD *)this + 86) |= 0x40u;
  *((_QWORD *)this + 19) = v17;
  v12 = *((_WORD *)a2 + 86);
  if ((v12 & 8) != 0)
    goto LABEL_24;
LABEL_18:
  if ((v12 & 4) != 0)
  {
LABEL_19:
    v13 = *((_QWORD *)a2 + 15);
    *((_WORD *)this + 86) |= 4u;
    *((_QWORD *)this + 15) = v13;
  }
  return this;
}

CMMsl *CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::operator=(CMMsl *a1, const CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *a2)
{
  CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *v3;
  _BYTE v5[176];

  if (a1 != a2)
  {
    CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::HeadToHeadsetAttitudeEstimatorMeasurementUpdate((CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *)v5, a2);
    CMMsl::swap(a1, (CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *)v5, v3);
    CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::~HeadToHeadsetAttitudeEstimatorMeasurementUpdate((CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *a2, CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double result;

  v3 = *((_DWORD *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((_DWORD *)a2 + 43) = v3;
  v4 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v4;
  v5 = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v5;
  v6 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v6;
  v7 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v7;
  v8 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v8;
  v9 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v9;
  v10 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v10;
  v11 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v11;
  v12 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v12;
  v13 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v13;
  v14 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v14;
  v15 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v15;
  v16 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v16;
  v17 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v17;
  v18 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v18;
  v19 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v19;
  v20 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = *((_QWORD *)a2 + 20);
  *((_QWORD *)a2 + 20) = v20;
  v21 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v21;
  v22 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 19) = v22;
  v23 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v23;
  result = *((double *)this + 15);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((double *)a2 + 15) = result;
  return result;
}

uint64_t CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::HeadToHeadsetAttitudeEstimatorMeasurementUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = &off_25135E0B8;
  v4 = a1 + 32;
  *(_DWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_DWORD *)(a2 + 172) = 0;
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  sub_242911330(a1 + 80, (__n128 *)(a2 + 80));
  sub_242911330(a1 + 56, (__n128 *)(a2 + 56));
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  sub_242911330(v4, (__n128 *)(a2 + 32));
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  return a1;
}

CMMsl *CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *v3;
  _BYTE v5[176];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::HeadToHeadsetAttitudeEstimatorMeasurementUpdate((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *)v5, v3);
    CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::~HeadToHeadsetAttitudeEstimatorMeasurementUpdate((CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *)v5);
  }
  return a1;
}

uint64_t CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::formatText(CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;
  double *v6;
  double *v7;
  double v8;
  __int16 v9;
  double *v10;
  double *v11;
  double v12;
  double *v13;
  double *v14;
  double v15;
  double *v16;
  double *v17;
  double v18;
  __int16 v19;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 86);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "covTraceAfterCorrection", *((double *)this + 13));
    v5 = *((_WORD *)this + 86);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "covTraceBeforeCorrection", *((double *)this + 14));
  v6 = (double *)*((_QWORD *)this + 1);
  v7 = (double *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(a2, "dX", v8);
  }
  v9 = *((_WORD *)this + 86);
  if ((v9 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "lastStateTimestamp", *((double *)this + 15));
    v9 = *((_WORD *)this + 86);
    if ((v9 & 8) == 0)
    {
LABEL_9:
      if ((v9 & 0x100) == 0)
        goto LABEL_11;
      goto LABEL_10;
    }
  }
  else if ((v9 & 8) == 0)
  {
    goto LABEL_9;
  }
  PB::TextFormatter::format(a2, "lidAngleDeg", *((double *)this + 16));
  if ((*((_WORD *)this + 86) & 0x100) != 0)
LABEL_10:
    PB::TextFormatter::format(a2, "measurementUpdateType");
LABEL_11:
  v10 = (double *)*((_QWORD *)this + 4);
  v11 = (double *)*((_QWORD *)this + 5);
  while (v10 != v11)
  {
    v12 = *v10++;
    PB::TextFormatter::format(a2, "residual", v12);
  }
  v13 = (double *)*((_QWORD *)this + 7);
  v14 = (double *)*((_QWORD *)this + 8);
  while (v13 != v14)
  {
    v15 = *v13++;
    PB::TextFormatter::format(a2, "stateQfbAfterCorrection", v15);
  }
  v16 = (double *)*((_QWORD *)this + 10);
  v17 = (double *)*((_QWORD *)this + 11);
  while (v16 != v17)
  {
    v18 = *v16++;
    PB::TextFormatter::format(a2, "stateQfbBeforeCorrection", v18);
  }
  v19 = *((_WORD *)this + 86);
  if ((v19 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 17));
    v19 = *((_WORD *)this + 86);
    if ((v19 & 0x20) == 0)
    {
LABEL_19:
      if ((v19 & 0x40) == 0)
        goto LABEL_20;
LABEL_28:
      PB::TextFormatter::format(a2, "wAuxFaceNormMeanDps", *((double *)this + 19));
      if ((*((_WORD *)this + 86) & 0x80) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_21;
    }
  }
  else if ((v19 & 0x20) == 0)
  {
    goto LABEL_19;
  }
  PB::TextFormatter::format(a2, "wAuxBudNormMeanDps", *((double *)this + 18));
  v19 = *((_WORD *)this + 86);
  if ((v19 & 0x40) != 0)
    goto LABEL_28;
LABEL_20:
  if ((v19 & 0x80) != 0)
LABEL_21:
    PB::TextFormatter::format(a2, "wSrcNormMeanDps", *((double *)this + 20));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::readFrom(CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  _QWORD *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  _QWORD *v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  _QWORD *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  char v92;
  unsigned int v93;
  unint64_t v94;
  char v95;
  unint64_t v96;
  char *v97;
  _QWORD *v98;
  unint64_t v99;
  char *v100;
  unint64_t v101;
  char *v102;
  unint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  unint64_t v137;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_21:
      v19 = v11 & 7;
      if (v19 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_WORD *)this + 86) |= 0x10u;
          v20 = *((_QWORD *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_233;
          *((_QWORD *)this + 17) = *(_QWORD *)(*(_QWORD *)a2 + v20);
          goto LABEL_235;
        case 2u:
          *((_WORD *)this + 86) |= 0x100u;
          v21 = *((_QWORD *)a2 + 1);
          v22 = *((_QWORD *)a2 + 2);
          v23 = *(_QWORD *)a2;
          if (v21 <= 0xFFFFFFFFFFFFFFF5 && v21 + 10 <= v22)
          {
            v24 = 0;
            v25 = 0;
            v26 = 0;
            do
            {
              v27 = v21 + 1;
              *((_QWORD *)a2 + 1) = v21 + 1;
              v28 = *(_BYTE *)(v23 + v21);
              v26 |= (unint64_t)(v28 & 0x7F) << v24;
              if ((v28 & 0x80) == 0)
                goto LABEL_202;
              v24 += 7;
              v21 = v27;
              v14 = v25++ > 8;
            }
            while (!v14);
LABEL_158:
            LODWORD(v26) = 0;
            goto LABEL_202;
          }
          v92 = 0;
          v93 = 0;
          v26 = 0;
          if (v22 <= v21)
            v22 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v22 == v21)
            {
              LODWORD(v26) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v94 = v21 + 1;
              v95 = *(_BYTE *)(v23 + v21);
              *((_QWORD *)a2 + 1) = v94;
              v26 |= (unint64_t)(v95 & 0x7F) << v92;
              if (v95 < 0)
              {
                v92 += 7;
                v21 = v94;
                v14 = v93++ > 8;
                if (v14)
                  goto LABEL_158;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v26) = 0;
            }
            break;
          }
LABEL_202:
          *((_DWORD *)this + 42) = v26;
          goto LABEL_236;
        case 3u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v29 = *((_QWORD *)a2 + 1);
            v30 = *((_QWORD *)a2 + 2);
            while (v29 < v30 && !*((_BYTE *)a2 + 24))
            {
              v32 = (char *)*((_QWORD *)this + 11);
              v31 = *((_QWORD *)this + 12);
              if ((unint64_t)v32 >= v31)
              {
                v34 = (char *)*((_QWORD *)this + 10);
                v35 = (v32 - v34) >> 3;
                v36 = v35 + 1;
                if ((unint64_t)(v35 + 1) >> 61)
                  goto LABEL_245;
                v37 = v31 - (_QWORD)v34;
                if (v37 >> 2 > v36)
                  v36 = v37 >> 2;
                if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
                  v38 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v38 = v36;
                if (v38)
                {
                  v38 = (unint64_t)sub_2429112FC(v38);
                  v34 = (char *)*((_QWORD *)this + 10);
                  v32 = (char *)*((_QWORD *)this + 11);
                }
                else
                {
                  v39 = 0;
                }
                v40 = (_QWORD *)(v38 + 8 * v35);
                *v40 = 0;
                v33 = v40 + 1;
                while (v32 != v34)
                {
                  v41 = *((_QWORD *)v32 - 1);
                  v32 -= 8;
                  *--v40 = v41;
                }
                *((_QWORD *)this + 10) = v40;
                *((_QWORD *)this + 11) = v33;
                *((_QWORD *)this + 12) = v38 + 8 * v39;
                if (v34)
                  operator delete(v34);
              }
              else
              {
                *(_QWORD *)v32 = 0;
                v33 = v32 + 8;
              }
              *((_QWORD *)this + 11) = v33;
              v42 = *((_QWORD *)a2 + 1);
              if (v42 > 0xFFFFFFFFFFFFFFF7 || v42 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_150;
              *(v33 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v42);
              v30 = *((_QWORD *)a2 + 2);
              v29 = *((_QWORD *)a2 + 1) + 8;
              *((_QWORD *)a2 + 1) = v29;
            }
            goto LABEL_151;
          }
          v97 = (char *)*((_QWORD *)this + 11);
          v96 = *((_QWORD *)this + 12);
          if ((unint64_t)v97 >= v96)
          {
            v105 = (char *)*((_QWORD *)this + 10);
            v106 = (v97 - v105) >> 3;
            v107 = v106 + 1;
            if ((unint64_t)(v106 + 1) >> 61)
              goto LABEL_245;
            v108 = v96 - (_QWORD)v105;
            if (v108 >> 2 > v107)
              v107 = v108 >> 2;
            if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFF8)
              v109 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v109 = v107;
            if (v109)
            {
              v109 = (unint64_t)sub_2429112FC(v109);
              v105 = (char *)*((_QWORD *)this + 10);
              v97 = (char *)*((_QWORD *)this + 11);
            }
            else
            {
              v110 = 0;
            }
            v129 = (_QWORD *)(v109 + 8 * v106);
            *v129 = 0;
            v98 = v129 + 1;
            while (v97 != v105)
            {
              v130 = *((_QWORD *)v97 - 1);
              v97 -= 8;
              *--v129 = v130;
            }
            *((_QWORD *)this + 10) = v129;
            *((_QWORD *)this + 11) = v98;
            *((_QWORD *)this + 12) = v109 + 8 * v110;
            if (v105)
              operator delete(v105);
          }
          else
          {
            *(_QWORD *)v97 = 0;
            v98 = v97 + 8;
          }
          *((_QWORD *)this + 11) = v98;
          goto LABEL_231;
        case 4u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v43 = *((_QWORD *)a2 + 1);
            v44 = *((_QWORD *)a2 + 2);
            while (v43 < v44 && !*((_BYTE *)a2 + 24))
            {
              v46 = (char *)*((_QWORD *)this + 8);
              v45 = *((_QWORD *)this + 9);
              if ((unint64_t)v46 >= v45)
              {
                v48 = (char *)*((_QWORD *)this + 7);
                v49 = (v46 - v48) >> 3;
                v50 = v49 + 1;
                if ((unint64_t)(v49 + 1) >> 61)
                  goto LABEL_245;
                v51 = v45 - (_QWORD)v48;
                if (v51 >> 2 > v50)
                  v50 = v51 >> 2;
                if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
                  v52 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v52 = v50;
                if (v52)
                {
                  v52 = (unint64_t)sub_2429112FC(v52);
                  v48 = (char *)*((_QWORD *)this + 7);
                  v46 = (char *)*((_QWORD *)this + 8);
                }
                else
                {
                  v53 = 0;
                }
                v54 = (_QWORD *)(v52 + 8 * v49);
                *v54 = 0;
                v47 = v54 + 1;
                while (v46 != v48)
                {
                  v55 = *((_QWORD *)v46 - 1);
                  v46 -= 8;
                  *--v54 = v55;
                }
                *((_QWORD *)this + 7) = v54;
                *((_QWORD *)this + 8) = v47;
                *((_QWORD *)this + 9) = v52 + 8 * v53;
                if (v48)
                  operator delete(v48);
              }
              else
              {
                *(_QWORD *)v46 = 0;
                v47 = v46 + 8;
              }
              *((_QWORD *)this + 8) = v47;
              v56 = *((_QWORD *)a2 + 1);
              if (v56 > 0xFFFFFFFFFFFFFFF7 || v56 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_150;
              *(v47 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v56);
              v44 = *((_QWORD *)a2 + 2);
              v43 = *((_QWORD *)a2 + 1) + 8;
              *((_QWORD *)a2 + 1) = v43;
            }
            goto LABEL_151;
          }
          v100 = (char *)*((_QWORD *)this + 8);
          v99 = *((_QWORD *)this + 9);
          if ((unint64_t)v100 >= v99)
          {
            v111 = (char *)*((_QWORD *)this + 7);
            v112 = (v100 - v111) >> 3;
            v113 = v112 + 1;
            if ((unint64_t)(v112 + 1) >> 61)
              goto LABEL_245;
            v114 = v99 - (_QWORD)v111;
            if (v114 >> 2 > v113)
              v113 = v114 >> 2;
            if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFF8)
              v115 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v115 = v113;
            if (v115)
            {
              v115 = (unint64_t)sub_2429112FC(v115);
              v111 = (char *)*((_QWORD *)this + 7);
              v100 = (char *)*((_QWORD *)this + 8);
            }
            else
            {
              v116 = 0;
            }
            v131 = (_QWORD *)(v115 + 8 * v112);
            *v131 = 0;
            v98 = v131 + 1;
            while (v100 != v111)
            {
              v132 = *((_QWORD *)v100 - 1);
              v100 -= 8;
              *--v131 = v132;
            }
            *((_QWORD *)this + 7) = v131;
            *((_QWORD *)this + 8) = v98;
            *((_QWORD *)this + 9) = v115 + 8 * v116;
            if (v111)
              operator delete(v111);
          }
          else
          {
            *(_QWORD *)v100 = 0;
            v98 = v100 + 8;
          }
          *((_QWORD *)this + 8) = v98;
          goto LABEL_231;
        case 5u:
          *((_WORD *)this + 86) |= 2u;
          v57 = *((_QWORD *)a2 + 1);
          if (v57 > 0xFFFFFFFFFFFFFFF7 || v57 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_233;
          *((_QWORD *)this + 14) = *(_QWORD *)(*(_QWORD *)a2 + v57);
          goto LABEL_235;
        case 6u:
          *((_WORD *)this + 86) |= 1u;
          v58 = *((_QWORD *)a2 + 1);
          if (v58 > 0xFFFFFFFFFFFFFFF7 || v58 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_233;
          *((_QWORD *)this + 13) = *(_QWORD *)(*(_QWORD *)a2 + v58);
          goto LABEL_235;
        case 7u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v59 = *((_QWORD *)a2 + 1);
            v60 = *((_QWORD *)a2 + 2);
            while (v59 < v60 && !*((_BYTE *)a2 + 24))
            {
              v62 = (char *)*((_QWORD *)this + 5);
              v61 = *((_QWORD *)this + 6);
              if ((unint64_t)v62 >= v61)
              {
                v64 = (char *)*((_QWORD *)this + 4);
                v65 = (v62 - v64) >> 3;
                v66 = v65 + 1;
                if ((unint64_t)(v65 + 1) >> 61)
                  goto LABEL_245;
                v67 = v61 - (_QWORD)v64;
                if (v67 >> 2 > v66)
                  v66 = v67 >> 2;
                if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8)
                  v68 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v68 = v66;
                if (v68)
                {
                  v68 = (unint64_t)sub_2429112FC(v68);
                  v64 = (char *)*((_QWORD *)this + 4);
                  v62 = (char *)*((_QWORD *)this + 5);
                }
                else
                {
                  v69 = 0;
                }
                v70 = (_QWORD *)(v68 + 8 * v65);
                *v70 = 0;
                v63 = v70 + 1;
                while (v62 != v64)
                {
                  v71 = *((_QWORD *)v62 - 1);
                  v62 -= 8;
                  *--v70 = v71;
                }
                *((_QWORD *)this + 4) = v70;
                *((_QWORD *)this + 5) = v63;
                *((_QWORD *)this + 6) = v68 + 8 * v69;
                if (v64)
                  operator delete(v64);
              }
              else
              {
                *(_QWORD *)v62 = 0;
                v63 = v62 + 8;
              }
              *((_QWORD *)this + 5) = v63;
              v72 = *((_QWORD *)a2 + 1);
              if (v72 > 0xFFFFFFFFFFFFFFF7 || v72 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_150;
              *(v63 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v72);
              v60 = *((_QWORD *)a2 + 2);
              v59 = *((_QWORD *)a2 + 1) + 8;
              *((_QWORD *)a2 + 1) = v59;
            }
            goto LABEL_151;
          }
          v102 = (char *)*((_QWORD *)this + 5);
          v101 = *((_QWORD *)this + 6);
          if ((unint64_t)v102 >= v101)
          {
            v117 = (char *)*((_QWORD *)this + 4);
            v118 = (v102 - v117) >> 3;
            v119 = v118 + 1;
            if ((unint64_t)(v118 + 1) >> 61)
              goto LABEL_245;
            v120 = v101 - (_QWORD)v117;
            if (v120 >> 2 > v119)
              v119 = v120 >> 2;
            if ((unint64_t)v120 >= 0x7FFFFFFFFFFFFFF8)
              v121 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v121 = v119;
            if (v121)
            {
              v121 = (unint64_t)sub_2429112FC(v121);
              v117 = (char *)*((_QWORD *)this + 4);
              v102 = (char *)*((_QWORD *)this + 5);
            }
            else
            {
              v122 = 0;
            }
            v133 = (_QWORD *)(v121 + 8 * v118);
            *v133 = 0;
            v98 = v133 + 1;
            while (v102 != v117)
            {
              v134 = *((_QWORD *)v102 - 1);
              v102 -= 8;
              *--v133 = v134;
            }
            *((_QWORD *)this + 4) = v133;
            *((_QWORD *)this + 5) = v98;
            *((_QWORD *)this + 6) = v121 + 8 * v122;
            if (v117)
              operator delete(v117);
          }
          else
          {
            *(_QWORD *)v102 = 0;
            v98 = v102 + 8;
          }
          *((_QWORD *)this + 5) = v98;
          goto LABEL_231;
        case 8u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v73 = *((_QWORD *)a2 + 1);
            v74 = *((_QWORD *)a2 + 2);
            while (v73 < v74 && !*((_BYTE *)a2 + 24))
            {
              v76 = (char *)*((_QWORD *)this + 2);
              v75 = *((_QWORD *)this + 3);
              if ((unint64_t)v76 >= v75)
              {
                v78 = (char *)*((_QWORD *)this + 1);
                v79 = (v76 - v78) >> 3;
                v80 = v79 + 1;
                if ((unint64_t)(v79 + 1) >> 61)
                  goto LABEL_245;
                v81 = v75 - (_QWORD)v78;
                if (v81 >> 2 > v80)
                  v80 = v81 >> 2;
                if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8)
                  v82 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v82 = v80;
                if (v82)
                {
                  v82 = (unint64_t)sub_2429112FC(v82);
                  v78 = (char *)*((_QWORD *)this + 1);
                  v76 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v83 = 0;
                }
                v84 = (_QWORD *)(v82 + 8 * v79);
                *v84 = 0;
                v77 = v84 + 1;
                while (v76 != v78)
                {
                  v85 = *((_QWORD *)v76 - 1);
                  v76 -= 8;
                  *--v84 = v85;
                }
                *((_QWORD *)this + 1) = v84;
                *((_QWORD *)this + 2) = v77;
                *((_QWORD *)this + 3) = v82 + 8 * v83;
                if (v78)
                  operator delete(v78);
              }
              else
              {
                *(_QWORD *)v76 = 0;
                v77 = v76 + 8;
              }
              *((_QWORD *)this + 2) = v77;
              v86 = *((_QWORD *)a2 + 1);
              if (v86 > 0xFFFFFFFFFFFFFFF7 || v86 + 8 > *((_QWORD *)a2 + 2))
              {
LABEL_150:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v77 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v86);
              v74 = *((_QWORD *)a2 + 2);
              v73 = *((_QWORD *)a2 + 1) + 8;
              *((_QWORD *)a2 + 1) = v73;
            }
LABEL_151:
            PB::Reader::recallMark();
          }
          else
          {
            v104 = (char *)*((_QWORD *)this + 2);
            v103 = *((_QWORD *)this + 3);
            if ((unint64_t)v104 >= v103)
            {
              v123 = (char *)*((_QWORD *)this + 1);
              v124 = (v104 - v123) >> 3;
              v125 = v124 + 1;
              if ((unint64_t)(v124 + 1) >> 61)
LABEL_245:
                sub_242729A44();
              v126 = v103 - (_QWORD)v123;
              if (v126 >> 2 > v125)
                v125 = v126 >> 2;
              if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFF8)
                v127 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v127 = v125;
              if (v127)
              {
                v127 = (unint64_t)sub_2429112FC(v127);
                v123 = (char *)*((_QWORD *)this + 1);
                v104 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v128 = 0;
              }
              v135 = (_QWORD *)(v127 + 8 * v124);
              *v135 = 0;
              v98 = v135 + 1;
              while (v104 != v123)
              {
                v136 = *((_QWORD *)v104 - 1);
                v104 -= 8;
                *--v135 = v136;
              }
              *((_QWORD *)this + 1) = v135;
              *((_QWORD *)this + 2) = v98;
              *((_QWORD *)this + 3) = v127 + 8 * v128;
              if (v123)
                operator delete(v123);
            }
            else
            {
              *(_QWORD *)v104 = 0;
              v98 = v104 + 8;
            }
            *((_QWORD *)this + 2) = v98;
LABEL_231:
            v137 = *((_QWORD *)a2 + 1);
            if (v137 <= 0xFFFFFFFFFFFFFFF7 && v137 + 8 <= *((_QWORD *)a2 + 2))
            {
              *(v98 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v137);
LABEL_235:
              *((_QWORD *)a2 + 1) += 8;
            }
            else
            {
LABEL_233:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
          break;
        case 9u:
          *((_WORD *)this + 86) |= 0x80u;
          v87 = *((_QWORD *)a2 + 1);
          if (v87 > 0xFFFFFFFFFFFFFFF7 || v87 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_233;
          *((_QWORD *)this + 20) = *(_QWORD *)(*(_QWORD *)a2 + v87);
          goto LABEL_235;
        case 0xAu:
          *((_WORD *)this + 86) |= 0x20u;
          v88 = *((_QWORD *)a2 + 1);
          if (v88 > 0xFFFFFFFFFFFFFFF7 || v88 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_233;
          *((_QWORD *)this + 18) = *(_QWORD *)(*(_QWORD *)a2 + v88);
          goto LABEL_235;
        case 0xBu:
          *((_WORD *)this + 86) |= 0x40u;
          v89 = *((_QWORD *)a2 + 1);
          if (v89 > 0xFFFFFFFFFFFFFFF7 || v89 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_233;
          *((_QWORD *)this + 19) = *(_QWORD *)(*(_QWORD *)a2 + v89);
          goto LABEL_235;
        case 0xCu:
          *((_WORD *)this + 86) |= 8u;
          v90 = *((_QWORD *)a2 + 1);
          if (v90 > 0xFFFFFFFFFFFFFFF7 || v90 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_233;
          *((_QWORD *)this + 16) = *(_QWORD *)(*(_QWORD *)a2 + v90);
          goto LABEL_235;
        case 0xDu:
          *((_WORD *)this + 86) |= 4u;
          v91 = *((_QWORD *)a2 + 1);
          if (v91 > 0xFFFFFFFFFFFFFFF7 || v91 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_233;
          *((_QWORD *)this + 15) = *(_QWORD *)(*(_QWORD *)a2 + v91);
          goto LABEL_235;
        default:
          goto LABEL_19;
      }
      goto LABEL_236;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_21;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    if ((PB::Reader::skip(a2) & 1) == 0)
      return 0;
LABEL_236:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
}

