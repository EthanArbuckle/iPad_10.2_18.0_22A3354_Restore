uint64_t CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;
  __int16 v11;
  double *v12;
  double *v13;
  double v14;
  double *v15;
  double *v16;
  double v17;
  __int16 v18;

  v3 = this;
  v4 = *(_WORD *)(this + 172);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 136));
    v4 = *(_WORD *)(v3 + 172);
  }
  if ((v4 & 0x100) != 0)
    this = PB::Writer::writeVarInt(a2);
  v5 = *(double **)(v3 + 80);
  v6 = *(double **)(v3 + 88);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7);
  }
  v8 = *(double **)(v3 + 56);
  v9 = *(double **)(v3 + 64);
  while (v8 != v9)
  {
    v10 = *v8++;
    this = PB::Writer::write(a2, v10);
  }
  v11 = *(_WORD *)(v3 + 172);
  if ((v11 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 112));
    v11 = *(_WORD *)(v3 + 172);
  }
  if ((v11 & 1) != 0)
    this = PB::Writer::write(a2, *(double *)(v3 + 104));
  v12 = *(double **)(v3 + 32);
  v13 = *(double **)(v3 + 40);
  while (v12 != v13)
  {
    v14 = *v12++;
    this = PB::Writer::write(a2, v14);
  }
  v15 = *(double **)(v3 + 8);
  v16 = *(double **)(v3 + 16);
  while (v15 != v16)
  {
    v17 = *v15++;
    this = PB::Writer::write(a2, v17);
  }
  v18 = *(_WORD *)(v3 + 172);
  if ((v18 & 0x80) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 160));
    v18 = *(_WORD *)(v3 + 172);
    if ((v18 & 0x20) == 0)
    {
LABEL_23:
      if ((v18 & 0x40) == 0)
        goto LABEL_24;
      goto LABEL_29;
    }
  }
  else if ((v18 & 0x20) == 0)
  {
    goto LABEL_23;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 144));
  v18 = *(_WORD *)(v3 + 172);
  if ((v18 & 0x40) == 0)
  {
LABEL_24:
    if ((v18 & 8) == 0)
      goto LABEL_25;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(double *)(v3 + 152));
  v18 = *(_WORD *)(v3 + 172);
  if ((v18 & 8) == 0)
  {
LABEL_25:
    if ((v18 & 4) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 120));
  }
LABEL_30:
  this = PB::Writer::write(a2, *(double *)(v3 + 128));
  if ((*(_WORD *)(v3 + 172) & 4) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 120));
  return this;
}

BOOL CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  double *v4;
  double *v5;
  double *v6;
  double *v7;
  double *v8;
  double *v9;
  double *v10;
  double *v11;
  double *v12;
  double *v13;
  double *v14;
  double *v15;
  _BOOL8 v16;

  v2 = *(_WORD *)(a1 + 172);
  v3 = *(_WORD *)(a2 + 172);
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 136) != *(double *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 172) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 172) & 0x100) == 0 || *(_DWORD *)(a1 + 168) != *(_DWORD *)(a2 + 168))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 172) & 0x100) != 0)
  {
    return 0;
  }
  v5 = *(double **)(a1 + 80);
  v4 = *(double **)(a1 + 88);
  v6 = *(double **)(a2 + 80);
  if ((char *)v4 - (char *)v5 != *(_QWORD *)(a2 + 88) - (_QWORD)v6)
    return 0;
  while (v5 != v4)
  {
    if (*v5 != *v6)
      return 0;
    ++v5;
    ++v6;
  }
  v8 = *(double **)(a1 + 56);
  v7 = *(double **)(a1 + 64);
  v9 = *(double **)(a2 + 56);
  if ((char *)v7 - (char *)v8 != *(_QWORD *)(a2 + 64) - (_QWORD)v9)
    return 0;
  while (v8 != v7)
  {
    if (*v8 != *v9)
      return 0;
    ++v8;
    ++v9;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 112) != *(double *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  v11 = *(double **)(a1 + 32);
  v10 = *(double **)(a1 + 40);
  v12 = *(double **)(a2 + 32);
  if ((char *)v10 - (char *)v11 != *(_QWORD *)(a2 + 40) - (_QWORD)v12)
    return 0;
  while (v11 != v10)
  {
    if (*v11 != *v12)
      return 0;
    ++v11;
    ++v12;
  }
  v14 = *(double **)(a1 + 8);
  v13 = *(double **)(a1 + 16);
  v15 = *(double **)(a2 + 8);
  if ((char *)v13 - (char *)v14 != *(_QWORD *)(a2 + 16) - (_QWORD)v15)
    return 0;
  while (v14 != v13)
  {
    if (*v14 != *v15)
      return 0;
    ++v14;
    ++v15;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 160) != *(double *)(a2 + 160))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 144) != *(double *)(a2 + 144))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 152) != *(double *)(a2 + 152))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 128) != *(double *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  v16 = (v3 & 4) == 0;
  if ((v2 & 4) != 0)
    return (v3 & 4) != 0 && *(double *)(a1 + 120) == *(double *)(a2 + 120);
  return v16;
}

uint64_t CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::hash_value(CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;

  if ((*((_WORD *)this + 86) & 0x10) != 0)
  {
    if (*((double *)this + 17) == 0.0)
      v2 = 0;
    else
      v2 = *((_QWORD *)this + 17);
    if ((*((_WORD *)this + 86) & 0x100) != 0)
      goto LABEL_3;
  }
  else
  {
    v2 = 0;
    if ((*((_WORD *)this + 86) & 0x100) != 0)
    {
LABEL_3:
      v3 = *((int *)this + 42);
      goto LABEL_9;
    }
  }
  v3 = 0;
LABEL_9:
  v4 = PBHashBytes();
  v5 = PBHashBytes();
  v6 = *((_WORD *)this + 86);
  if ((v6 & 2) != 0)
  {
    if (*((double *)this + 14) == 0.0)
      v7 = 0;
    else
      v7 = *((_QWORD *)this + 14);
    if ((v6 & 1) != 0)
      goto LABEL_11;
LABEL_18:
    v8 = 0;
    goto LABEL_19;
  }
  v7 = 0;
  if ((v6 & 1) == 0)
    goto LABEL_18;
LABEL_11:
  if (*((double *)this + 13) == 0.0)
    v8 = 0;
  else
    v8 = *((_QWORD *)this + 13);
LABEL_19:
  v9 = PBHashBytes();
  v10 = PBHashBytes();
  v11 = *((_WORD *)this + 86);
  if ((v11 & 0x80) == 0)
  {
    v12 = 0.0;
    if ((v11 & 0x20) != 0)
      goto LABEL_21;
LABEL_36:
    v13 = 0.0;
    if ((v11 & 0x40) != 0)
      goto LABEL_24;
LABEL_37:
    v14 = 0.0;
    if ((v11 & 8) != 0)
      goto LABEL_27;
    goto LABEL_38;
  }
  v12 = *((double *)this + 20);
  if (v12 == 0.0)
    v12 = 0.0;
  if ((v11 & 0x20) == 0)
    goto LABEL_36;
LABEL_21:
  v13 = *((double *)this + 18);
  if (v13 == 0.0)
    v13 = 0.0;
  if ((v11 & 0x40) == 0)
    goto LABEL_37;
LABEL_24:
  v14 = *((double *)this + 19);
  if (v14 == 0.0)
    v14 = 0.0;
  if ((v11 & 8) != 0)
  {
LABEL_27:
    v15 = *((double *)this + 16);
    if (v15 == 0.0)
      v15 = 0.0;
    if ((v11 & 4) != 0)
      goto LABEL_30;
LABEL_39:
    v16 = 0.0;
    return v3 ^ v2 ^ v4 ^ v5 ^ v7 ^ v8 ^ v9 ^ v10 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13 ^ *(_QWORD *)&v14 ^ *(_QWORD *)&v15 ^ *(_QWORD *)&v16;
  }
LABEL_38:
  v15 = 0.0;
  if ((v11 & 4) == 0)
    goto LABEL_39;
LABEL_30:
  v16 = *((double *)this + 15);
  if (v16 == 0.0)
    v16 = 0.0;
  return v3 ^ v2 ^ v4 ^ v5 ^ v7 ^ v8 ^ v9 ^ v10 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13 ^ *(_QWORD *)&v14 ^ *(_QWORD *)&v15 ^ *(_QWORD *)&v16;
}

double CMMsl::HeadToHeadsetTransformationEstimate::HeadToHeadsetTransformationEstimate(CMMsl::HeadToHeadsetTransformationEstimate *this)
{
  double result;

  *(_QWORD *)this = &off_25135E0F0;
  *((_DWORD *)this + 20) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_25135E0F0;
  *((_DWORD *)this + 20) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

void CMMsl::HeadToHeadsetTransformationEstimate::~HeadToHeadsetTransformationEstimate(CMMsl::HeadToHeadsetTransformationEstimate *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_25135E0F0;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::HeadToHeadsetTransformationEstimate::~HeadToHeadsetTransformationEstimate(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::HeadToHeadsetTransformationEstimate *CMMsl::HeadToHeadsetTransformationEstimate::HeadToHeadsetTransformationEstimate(CMMsl::HeadToHeadsetTransformationEstimate *this, const CMMsl::HeadToHeadsetTransformationEstimate *a2)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)this = &off_25135E0F0;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (_QWORD *)((char *)this + 8);
  *((_DWORD *)this + 20) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if ((*((_BYTE *)a2 + 80) & 4) != 0)
  {
    v5 = *((_QWORD *)a2 + 9);
    *((_BYTE *)this + 80) = 4;
    *((_QWORD *)this + 9) = v5;
  }
  if (this != a2)
  {
    sub_2429111C4((_QWORD *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3);
    sub_2429111C4(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
  }
  v6 = *((_BYTE *)a2 + 80);
  if ((v6 & 2) != 0)
  {
    v7 = *((_QWORD *)a2 + 8);
    *((_BYTE *)this + 80) |= 2u;
    *((_QWORD *)this + 8) = v7;
    v6 = *((_BYTE *)a2 + 80);
  }
  if ((v6 & 1) != 0)
  {
    v8 = *((_QWORD *)a2 + 7);
    *((_BYTE *)this + 80) |= 1u;
    *((_QWORD *)this + 7) = v8;
  }
  return this;
}

uint64_t CMMsl::HeadToHeadsetTransformationEstimate::operator=(uint64_t a1, const CMMsl::HeadToHeadsetTransformationEstimate *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _BYTE v10[8];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  int v16;

  if ((const CMMsl::HeadToHeadsetTransformationEstimate *)a1 != a2)
  {
    CMMsl::HeadToHeadsetTransformationEstimate::HeadToHeadsetTransformationEstimate((CMMsl::HeadToHeadsetTransformationEstimate *)v10, a2);
    v3 = *(_DWORD *)(a1 + 80);
    *(_DWORD *)(a1 + 80) = v16;
    v16 = v3;
    v4 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v15;
    v15 = v4;
    v5 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v13;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v11;
    v11 = v6;
    v7 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    v12 = v7;
    v13 = v5;
    v8 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v14;
    v14 = v8;
    CMMsl::HeadToHeadsetTransformationEstimate::~HeadToHeadsetTransformationEstimate((CMMsl::HeadToHeadsetTransformationEstimate *)v10);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::HeadToHeadsetTransformationEstimate *a2, CMMsl::HeadToHeadsetTransformationEstimate *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  v3 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v3;
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v4;
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v5;
  v6 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v6;
  v7 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v7;
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v8;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v9;
  v10 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v10;
  v11 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v11;
  result = *((double *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((double *)a2 + 7) = result;
  return result;
}

uint64_t CMMsl::HeadToHeadsetTransformationEstimate::HeadToHeadsetTransformationEstimate(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_25135E0F0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  sub_242911330(a1 + 32, (__n128 *)(a2 + 32));
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

uint64_t CMMsl::HeadToHeadsetTransformationEstimate::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _BYTE v10[8];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  int v16;

  if (a1 != a2)
  {
    CMMsl::HeadToHeadsetTransformationEstimate::HeadToHeadsetTransformationEstimate((uint64_t)v10, a2);
    v3 = *(_DWORD *)(a1 + 80);
    *(_DWORD *)(a1 + 80) = v16;
    v16 = v3;
    v4 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v15;
    v15 = v4;
    v5 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v13;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v11;
    v11 = v6;
    v7 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    v12 = v7;
    v13 = v5;
    v8 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v14;
    v14 = v8;
    CMMsl::HeadToHeadsetTransformationEstimate::~HeadToHeadsetTransformationEstimate((CMMsl::HeadToHeadsetTransformationEstimate *)v10);
  }
  return a1;
}

uint64_t CMMsl::HeadToHeadsetTransformationEstimate::formatText(CMMsl::HeadToHeadsetTransformationEstimate *this, PB::TextFormatter *a2, const char *a3)
{
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 80) & 1) != 0)
    PB::TextFormatter::format(a2, "lastUpdateTimestamp", *((double *)this + 7));
  v5 = (double *)*((_QWORD *)this + 1);
  v6 = (double *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "stateCov", v7);
  }
  if ((*((_BYTE *)this + 80) & 2) != 0)
    PB::TextFormatter::format(a2, "stateCovTrace", *((double *)this + 8));
  v8 = (double *)*((_QWORD *)this + 4);
  v9 = (double *)*((_QWORD *)this + 5);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(a2, "stateQfb", v10);
  }
  if ((*((_BYTE *)this + 80) & 4) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 9));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::HeadToHeadsetTransformationEstimate::readFrom(CMMsl::HeadToHeadsetTransformationEstimate *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  _QWORD *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  _QWORD *v53;
  unint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t v72;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_21:
      v19 = v11 & 7;
      if (v19 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 80) |= 4u;
          v20 = *((_QWORD *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_118;
          *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v20);
          goto LABEL_120;
        case 2u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v21 = *((_QWORD *)a2 + 1);
            v22 = *((_QWORD *)a2 + 2);
            while (v21 < v22 && !*((_BYTE *)a2 + 24))
            {
              v24 = (char *)*((_QWORD *)this + 5);
              v23 = *((_QWORD *)this + 6);
              if ((unint64_t)v24 >= v23)
              {
                v26 = (char *)*((_QWORD *)this + 4);
                v27 = (v24 - v26) >> 3;
                v28 = v27 + 1;
                if ((unint64_t)(v27 + 1) >> 61)
                  goto LABEL_128;
                v29 = v23 - (_QWORD)v26;
                if (v29 >> 2 > v28)
                  v28 = v29 >> 2;
                if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
                  v30 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v30 = v28;
                if (v30)
                {
                  v30 = (unint64_t)sub_2429112FC(v30);
                  v26 = (char *)*((_QWORD *)this + 4);
                  v24 = (char *)*((_QWORD *)this + 5);
                }
                else
                {
                  v31 = 0;
                }
                v32 = (_QWORD *)(v30 + 8 * v27);
                *v32 = 0;
                v25 = v32 + 1;
                while (v24 != v26)
                {
                  v33 = *((_QWORD *)v24 - 1);
                  v24 -= 8;
                  *--v32 = v33;
                }
                *((_QWORD *)this + 4) = v32;
                *((_QWORD *)this + 5) = v25;
                *((_QWORD *)this + 6) = v30 + 8 * v31;
                if (v26)
                  operator delete(v26);
              }
              else
              {
                *(_QWORD *)v24 = 0;
                v25 = v24 + 8;
              }
              *((_QWORD *)this + 5) = v25;
              v34 = *((_QWORD *)a2 + 1);
              if (v34 > 0xFFFFFFFFFFFFFFF7 || v34 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_84;
              *(v25 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v34);
              v22 = *((_QWORD *)a2 + 2);
              v21 = *((_QWORD *)a2 + 1) + 8;
              *((_QWORD *)a2 + 1) = v21;
            }
            goto LABEL_85;
          }
          v52 = (char *)*((_QWORD *)this + 5);
          v51 = *((_QWORD *)this + 6);
          if ((unint64_t)v52 >= v51)
          {
            v56 = (char *)*((_QWORD *)this + 4);
            v57 = (v52 - v56) >> 3;
            v58 = v57 + 1;
            if ((unint64_t)(v57 + 1) >> 61)
              goto LABEL_128;
            v59 = v51 - (_QWORD)v56;
            if (v59 >> 2 > v58)
              v58 = v59 >> 2;
            if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8)
              v60 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v60 = v58;
            if (v60)
            {
              v60 = (unint64_t)sub_2429112FC(v60);
              v56 = (char *)*((_QWORD *)this + 4);
              v52 = (char *)*((_QWORD *)this + 5);
            }
            else
            {
              v61 = 0;
            }
            v68 = (_QWORD *)(v60 + 8 * v57);
            *v68 = 0;
            v53 = v68 + 1;
            while (v52 != v56)
            {
              v69 = *((_QWORD *)v52 - 1);
              v52 -= 8;
              *--v68 = v69;
            }
            *((_QWORD *)this + 4) = v68;
            *((_QWORD *)this + 5) = v53;
            *((_QWORD *)this + 6) = v60 + 8 * v61;
            if (v56)
              operator delete(v56);
          }
          else
          {
            *(_QWORD *)v52 = 0;
            v53 = v52 + 8;
          }
          *((_QWORD *)this + 5) = v53;
          goto LABEL_116;
        case 3u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v35 = *((_QWORD *)a2 + 1);
            v36 = *((_QWORD *)a2 + 2);
            while (v35 < v36 && !*((_BYTE *)a2 + 24))
            {
              v38 = (char *)*((_QWORD *)this + 2);
              v37 = *((_QWORD *)this + 3);
              if ((unint64_t)v38 >= v37)
              {
                v40 = (char *)*((_QWORD *)this + 1);
                v41 = (v38 - v40) >> 3;
                v42 = v41 + 1;
                if ((unint64_t)(v41 + 1) >> 61)
                  goto LABEL_128;
                v43 = v37 - (_QWORD)v40;
                if (v43 >> 2 > v42)
                  v42 = v43 >> 2;
                if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
                  v44 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v44 = v42;
                if (v44)
                {
                  v44 = (unint64_t)sub_2429112FC(v44);
                  v40 = (char *)*((_QWORD *)this + 1);
                  v38 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v45 = 0;
                }
                v46 = (_QWORD *)(v44 + 8 * v41);
                *v46 = 0;
                v39 = v46 + 1;
                while (v38 != v40)
                {
                  v47 = *((_QWORD *)v38 - 1);
                  v38 -= 8;
                  *--v46 = v47;
                }
                *((_QWORD *)this + 1) = v46;
                *((_QWORD *)this + 2) = v39;
                *((_QWORD *)this + 3) = v44 + 8 * v45;
                if (v40)
                  operator delete(v40);
              }
              else
              {
                *(_QWORD *)v38 = 0;
                v39 = v38 + 8;
              }
              *((_QWORD *)this + 2) = v39;
              v48 = *((_QWORD *)a2 + 1);
              if (v48 > 0xFFFFFFFFFFFFFFF7 || v48 + 8 > *((_QWORD *)a2 + 2))
              {
LABEL_84:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v39 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v48);
              v36 = *((_QWORD *)a2 + 2);
              v35 = *((_QWORD *)a2 + 1) + 8;
              *((_QWORD *)a2 + 1) = v35;
            }
LABEL_85:
            PB::Reader::recallMark();
          }
          else
          {
            v55 = (char *)*((_QWORD *)this + 2);
            v54 = *((_QWORD *)this + 3);
            if ((unint64_t)v55 >= v54)
            {
              v62 = (char *)*((_QWORD *)this + 1);
              v63 = (v55 - v62) >> 3;
              v64 = v63 + 1;
              if ((unint64_t)(v63 + 1) >> 61)
LABEL_128:
                sub_242729A44();
              v65 = v54 - (_QWORD)v62;
              if (v65 >> 2 > v64)
                v64 = v65 >> 2;
              if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8)
                v66 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v66 = v64;
              if (v66)
              {
                v66 = (unint64_t)sub_2429112FC(v66);
                v62 = (char *)*((_QWORD *)this + 1);
                v55 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v67 = 0;
              }
              v70 = (_QWORD *)(v66 + 8 * v63);
              *v70 = 0;
              v53 = v70 + 1;
              while (v55 != v62)
              {
                v71 = *((_QWORD *)v55 - 1);
                v55 -= 8;
                *--v70 = v71;
              }
              *((_QWORD *)this + 1) = v70;
              *((_QWORD *)this + 2) = v53;
              *((_QWORD *)this + 3) = v66 + 8 * v67;
              if (v62)
                operator delete(v62);
            }
            else
            {
              *(_QWORD *)v55 = 0;
              v53 = v55 + 8;
            }
            *((_QWORD *)this + 2) = v53;
LABEL_116:
            v72 = *((_QWORD *)a2 + 1);
            if (v72 <= 0xFFFFFFFFFFFFFFF7 && v72 + 8 <= *((_QWORD *)a2 + 2))
            {
              *(v53 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v72);
LABEL_120:
              *((_QWORD *)a2 + 1) += 8;
            }
            else
            {
LABEL_118:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
          break;
        case 4u:
          *((_BYTE *)this + 80) |= 2u;
          v49 = *((_QWORD *)a2 + 1);
          if (v49 > 0xFFFFFFFFFFFFFFF7 || v49 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_118;
          *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v49);
          goto LABEL_120;
        case 5u:
          *((_BYTE *)this + 80) |= 1u;
          v50 = *((_QWORD *)a2 + 1);
          if (v50 > 0xFFFFFFFFFFFFFFF7 || v50 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_118;
          *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v50);
          goto LABEL_120;
        default:
          goto LABEL_19;
      }
      goto LABEL_121;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_21;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    if ((PB::Reader::skip(a2) & 1) == 0)
      return 0;
LABEL_121:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
}

uint64_t CMMsl::HeadToHeadsetTransformationEstimate::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  double *v4;
  double *v5;
  double v6;
  double *v7;
  double *v8;
  double v9;
  char v10;

  v3 = this;
  if ((*(_BYTE *)(this + 80) & 4) != 0)
    this = PB::Writer::write(a2, *(double *)(this + 72));
  v4 = *(double **)(v3 + 32);
  v5 = *(double **)(v3 + 40);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6);
  }
  v7 = *(double **)(v3 + 8);
  v8 = *(double **)(v3 + 16);
  while (v7 != v8)
  {
    v9 = *v7++;
    this = PB::Writer::write(a2, v9);
  }
  v10 = *(_BYTE *)(v3 + 80);
  if ((v10 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 64));
    v10 = *(_BYTE *)(v3 + 80);
  }
  if ((v10 & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 56));
  return this;
}

BOOL CMMsl::HeadToHeadsetTransformationEstimate::operator==(uint64_t a1, uint64_t a2)
{
  double *v2;
  double *v3;
  double *v4;
  double *v5;
  double *v6;
  double *v7;
  _BOOL8 v8;

  if ((*(_BYTE *)(a1 + 80) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 80) & 4) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 80) & 4) != 0)
  {
    return 0;
  }
  v3 = *(double **)(a1 + 32);
  v2 = *(double **)(a1 + 40);
  v4 = *(double **)(a2 + 32);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 40) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v6 = *(double **)(a1 + 8);
  v5 = *(double **)(a1 + 16);
  v7 = *(double **)(a2 + 8);
  if ((char *)v5 - (char *)v6 != *(_QWORD *)(a2 + 16) - (_QWORD)v7)
    return 0;
  while (v6 != v5)
  {
    if (*v6 != *v7)
      return 0;
    ++v6;
    ++v7;
  }
  if ((*(_BYTE *)(a1 + 80) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 80) & 2) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 80) & 2) != 0)
  {
    return 0;
  }
  v8 = (*(_BYTE *)(a2 + 80) & 1) == 0;
  if ((*(_BYTE *)(a1 + 80) & 1) != 0)
    return (*(_BYTE *)(a2 + 80) & 1) != 0 && *(double *)(a1 + 56) == *(double *)(a2 + 56);
  return v8;
}

uint64_t CMMsl::HeadToHeadsetTransformationEstimate::hash_value(CMMsl::HeadToHeadsetTransformationEstimate *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;

  if ((*((_BYTE *)this + 80) & 4) != 0)
  {
    if (*((double *)this + 9) == 0.0)
      v2 = 0;
    else
      v2 = *((_QWORD *)this + 9);
  }
  else
  {
    v2 = 0;
  }
  v3 = PBHashBytes();
  v4 = PBHashBytes();
  if ((*((_BYTE *)this + 80) & 2) != 0)
  {
    v5 = *((double *)this + 8);
    if (v5 == 0.0)
      v5 = 0.0;
    if ((*((_BYTE *)this + 80) & 1) != 0)
      goto LABEL_8;
LABEL_14:
    v6 = 0.0;
    return v3 ^ v2 ^ v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6;
  }
  v5 = 0.0;
  if ((*((_BYTE *)this + 80) & 1) == 0)
    goto LABEL_14;
LABEL_8:
  v6 = *((double *)this + 7);
  if (v6 == 0.0)
    v6 = 0.0;
  return v3 ^ v2 ^ v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6;
}

_QWORD *CMMsl::HeadTrackingBehaviorUpdate::HeadTrackingBehaviorUpdate(_QWORD *this)
{
  *this = &off_25135E128;
  this[1] = 0;
  return this;
}

{
  *this = &off_25135E128;
  this[1] = 0;
  return this;
}

void CMMsl::HeadTrackingBehaviorUpdate::~HeadTrackingBehaviorUpdate(CMMsl::HeadTrackingBehaviorUpdate *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::HeadTrackingBehaviorUpdate::HeadTrackingBehaviorUpdate(uint64_t this, const CMMsl::HeadTrackingBehaviorUpdate *a2)
{
  int v2;

  *(_QWORD *)this = &off_25135E128;
  *(_QWORD *)(this + 8) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v2 = *((_DWORD *)a2 + 2);
    *(_BYTE *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

{
  int v2;

  *(_QWORD *)this = &off_25135E128;
  *(_QWORD *)(this + 8) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v2 = *((_DWORD *)a2 + 2);
    *(_BYTE *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::HeadTrackingBehaviorUpdate::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v6[0] = &off_25135E128;
    v3 = *(unsigned __int8 *)(a2 + 12);
    v4 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = (v3 << 31 >> 31) & *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 12) = v3 & 1;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v6[0] = &off_25135E128;
    v3 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 12) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::HeadTrackingBehaviorUpdate *a2, CMMsl::HeadTrackingBehaviorUpdate *a3)
{
  int v3;
  int v4;

  v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  v4 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  return this;
}

uint64_t CMMsl::HeadTrackingBehaviorUpdate::HeadTrackingBehaviorUpdate(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = &off_25135E128;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

{
  *(_QWORD *)result = &off_25135E128;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t CMMsl::HeadTrackingBehaviorUpdate::formatText(CMMsl::HeadTrackingBehaviorUpdate *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 12) & 1) != 0)
    PB::TextFormatter::format(a2, "trackingBehavior");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::HeadTrackingBehaviorUpdate::readFrom(CMMsl::HeadTrackingBehaviorUpdate *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  char v24;
  uint64_t result;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_29;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 12) |= 1u;
        v19 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        v20 = *(_QWORD *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v3)
        {
          v26 = 0;
          v27 = 0;
          v23 = 0;
          if (v3 <= v19)
            v2 = *((_QWORD *)a2 + 1);
          else
            v2 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v2 == v19)
            {
              LODWORD(v23) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_43;
            }
            v28 = v19++;
            v29 = *(_BYTE *)(v20 + v28);
            *((_QWORD *)a2 + 1) = v19;
            v23 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0)
              break;
            v26 += 7;
            v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              goto LABEL_42;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v23) = 0;
LABEL_42:
          v2 = v28 + 1;
        }
        else
        {
          v21 = 0;
          v22 = 0;
          v23 = 0;
          while (1)
          {
            v2 = v19 + 1;
            *((_QWORD *)a2 + 1) = v19 + 1;
            v24 = *(_BYTE *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0)
              break;
            v21 += 7;
            v19 = v2;
            v14 = v22++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              break;
            }
          }
        }
LABEL_43:
        *((_DWORD *)this + 2) = v23;
      }
      else
      {
LABEL_29:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_29;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::HeadTrackingBehaviorUpdate::writeTo(uint64_t this, PB::Writer *a2)
{
  if ((*(_BYTE *)(this + 12) & 1) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

BOOL CMMsl::HeadTrackingBehaviorUpdate::operator==(uint64_t a1, uint64_t a2)
{
  char v3;
  _BOOL8 result;

  v3 = *(_BYTE *)(a1 + 12);
  result = (*(_BYTE *)(a2 + 12) & 1) == 0;
  if ((v3 & 1) != 0)
    return (*(_BYTE *)(a2 + 12) & 1) != 0 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t CMMsl::HeadTrackingBehaviorUpdate::hash_value(CMMsl::HeadTrackingBehaviorUpdate *this)
{
  if ((*((_BYTE *)this + 12) & 1) != 0)
    return *((int *)this + 2);
  else
    return 0;
}

_QWORD *CMMsl::HeadTrackingClientModeUpdate::HeadTrackingClientModeUpdate(_QWORD *this)
{
  *this = &off_25135E160;
  this[1] = 0;
  return this;
}

{
  *this = &off_25135E160;
  this[1] = 0;
  return this;
}

void CMMsl::HeadTrackingClientModeUpdate::~HeadTrackingClientModeUpdate(CMMsl::HeadTrackingClientModeUpdate *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::HeadTrackingClientModeUpdate::HeadTrackingClientModeUpdate(uint64_t this, const CMMsl::HeadTrackingClientModeUpdate *a2)
{
  int v2;

  *(_QWORD *)this = &off_25135E160;
  *(_QWORD *)(this + 8) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v2 = *((_DWORD *)a2 + 2);
    *(_BYTE *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

{
  int v2;

  *(_QWORD *)this = &off_25135E160;
  *(_QWORD *)(this + 8) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v2 = *((_DWORD *)a2 + 2);
    *(_BYTE *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::HeadTrackingClientModeUpdate::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v6[0] = &off_25135E160;
    v3 = *(unsigned __int8 *)(a2 + 12);
    v4 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = (v3 << 31 >> 31) & *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 12) = v3 & 1;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v6[0] = &off_25135E160;
    v3 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 12) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::HeadTrackingClientModeUpdate *a2, CMMsl::HeadTrackingClientModeUpdate *a3)
{
  int v3;
  int v4;

  v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  v4 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  return this;
}

uint64_t CMMsl::HeadTrackingClientModeUpdate::HeadTrackingClientModeUpdate(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = &off_25135E160;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

{
  *(_QWORD *)result = &off_25135E160;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t CMMsl::HeadTrackingClientModeUpdate::formatText(CMMsl::HeadTrackingClientModeUpdate *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 12) & 1) != 0)
    PB::TextFormatter::format(a2, "clientMode");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::HeadTrackingClientModeUpdate::readFrom(CMMsl::HeadTrackingClientModeUpdate *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  char v24;
  uint64_t result;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_29;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 12) |= 1u;
        v19 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        v20 = *(_QWORD *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v3)
        {
          v26 = 0;
          v27 = 0;
          v23 = 0;
          if (v3 <= v19)
            v2 = *((_QWORD *)a2 + 1);
          else
            v2 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v2 == v19)
            {
              LODWORD(v23) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_43;
            }
            v28 = v19++;
            v29 = *(_BYTE *)(v20 + v28);
            *((_QWORD *)a2 + 1) = v19;
            v23 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0)
              break;
            v26 += 7;
            v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              goto LABEL_42;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v23) = 0;
LABEL_42:
          v2 = v28 + 1;
        }
        else
        {
          v21 = 0;
          v22 = 0;
          v23 = 0;
          while (1)
          {
            v2 = v19 + 1;
            *((_QWORD *)a2 + 1) = v19 + 1;
            v24 = *(_BYTE *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0)
              break;
            v21 += 7;
            v19 = v2;
            v14 = v22++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              break;
            }
          }
        }
LABEL_43:
        *((_DWORD *)this + 2) = v23;
      }
      else
      {
LABEL_29:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_29;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::HeadTrackingClientModeUpdate::writeTo(uint64_t this, PB::Writer *a2)
{
  if ((*(_BYTE *)(this + 12) & 1) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

BOOL CMMsl::HeadTrackingClientModeUpdate::operator==(uint64_t a1, uint64_t a2)
{
  char v3;
  _BOOL8 result;

  v3 = *(_BYTE *)(a1 + 12);
  result = (*(_BYTE *)(a2 + 12) & 1) == 0;
  if ((v3 & 1) != 0)
    return (*(_BYTE *)(a2 + 12) & 1) != 0 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t CMMsl::HeadTrackingClientModeUpdate::hash_value(CMMsl::HeadTrackingClientModeUpdate *this)
{
  if ((*((_BYTE *)this + 12) & 1) != 0)
    return *((int *)this + 2);
  else
    return 0;
}

uint64_t CMMsl::HeartRateReference::HeartRateReference(uint64_t this)
{
  *(_QWORD *)this = &off_25135E198;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135E198;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::HeartRateReference::~HeartRateReference(CMMsl::HeartRateReference *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

double CMMsl::HeartRateReference::HeartRateReference(CMMsl::HeartRateReference *this, const CMMsl::HeartRateReference *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  double result;

  *(_QWORD *)this = &off_25135E198;
  *((_DWORD *)this + 8) = 0;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 32) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 32) & 4) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 3);
    v3 |= 4u;
    *((_BYTE *)this + 32) = v3;
    *((double *)this + 3) = result;
    v2 = *((_BYTE *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    result = *((double *)a2 + 2);
    *((_BYTE *)this + 32) = v3 | 2;
    *((double *)this + 2) = result;
  }
  return result;
}

uint64_t CMMsl::HeartRateReference::operator=(uint64_t a1, uint64_t a2, double a3, double a4)
{
  void (**v5)(CMMsl::HeartRateReference *__hidden);
  char v6;
  char v7;
  int v8;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[2];
  __int128 v13;
  int v14;

  if (a1 != a2)
  {
    v5 = &off_25135E198;
    v12[0] = &off_25135E198;
    v14 = 0;
    v6 = *(_BYTE *)(a2 + 32);
    if ((v6 & 1) != 0)
    {
      v5 = *(void (***)(CMMsl::HeartRateReference *__hidden))(a2 + 8);
      v7 = 1;
      LOBYTE(v14) = 1;
      if ((v6 & 4) != 0)
      {
LABEL_4:
        a3 = *(double *)(a2 + 24);
        v7 |= 4u;
        LOBYTE(v14) = v7;
        if ((v6 & 2) != 0)
          goto LABEL_8;
        goto LABEL_9;
      }
    }
    else
    {
      v7 = 0;
      if ((*(_BYTE *)(a2 + 32) & 4) != 0)
        goto LABEL_4;
    }
    if ((v6 & 2) != 0)
    {
LABEL_8:
      a4 = *(double *)(a2 + 16);
      LOBYTE(v14) = v7 | 2;
    }
LABEL_9:
    v8 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v14;
    v14 = v8;
    v9 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v5;
    v12[1] = v9;
    v10 = *(_OWORD *)(a1 + 16);
    *(double *)(a1 + 16) = a4;
    *(double *)(a1 + 24) = a3;
    v13 = v10;
    PB::Base::~Base((PB::Base *)v12);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::HeartRateReference *a2, CMMsl::HeartRateReference *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::HeartRateReference::HeartRateReference(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135E198;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135E198;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::HeartRateReference::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  _QWORD v9[2];
  __int128 v10;
  int v11;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v11 = *(_DWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v9[0] = &off_25135E198;
    v9[1] = v5;
    v6 = *(_OWORD *)(a1 + 16);
    v7 = *(_OWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 16) = v7;
    v10 = v6;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::HeartRateReference::formatText(CMMsl::HeartRateReference *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 1) == 0)
  {
    if ((*((_BYTE *)this + 32) & 2) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(a2, "globalMachtime", *((double *)this + 2));
    if ((*((_BYTE *)this + 32) & 4) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_4;
  }
  PB::TextFormatter::format(a2, "bpm");
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 2) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 4) != 0)
LABEL_4:
    PB::TextFormatter::format(a2, "localMachtime", *((double *)this + 3));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::HeartRateReference::readFrom(CMMsl::HeartRateReference *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int i;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  for (i = *((unsigned __int8 *)a2 + 24); v2 < v3 && i == 0; i = *((unsigned __int8 *)a2 + 24))
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_20;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
        if (v14)
          goto LABEL_31;
      }
      i = 1;
      *((_BYTE *)a2 + 24) = 1;
      return i == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_31;
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      i = 0;
      return i == 0;
    }
    v19 = v11 >> 3;
    if ((v11 >> 3) == 3)
    {
      *((_BYTE *)this + 32) |= 2u;
      v2 = *((_QWORD *)a2 + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
      {
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_47:
        v2 = *((_QWORD *)a2 + 1) + 8;
        *((_QWORD *)a2 + 1) = v2;
        goto LABEL_53;
      }
    }
    else
    {
      if ((_DWORD)v19 != 2)
      {
        if ((_DWORD)v19 == 1)
        {
          *((_BYTE *)this + 32) |= 1u;
          v20 = *((_QWORD *)a2 + 1);
          v2 = *((_QWORD *)a2 + 2);
          v21 = *(_QWORD *)a2;
          if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
          {
            v27 = 0;
            v28 = 0;
            v24 = 0;
            if (v2 <= v20)
              v2 = *((_QWORD *)a2 + 1);
            while (1)
            {
              if (v2 == v20)
              {
                v24 = 0;
                *((_BYTE *)a2 + 24) = 1;
                goto LABEL_52;
              }
              v29 = v20++;
              v30 = *(_BYTE *)(v21 + v29);
              *((_QWORD *)a2 + 1) = v20;
              v24 |= (unint64_t)(v30 & 0x7F) << v27;
              if ((v30 & 0x80) == 0)
                break;
              v27 += 7;
              v14 = v28++ > 8;
              if (v14)
              {
                v24 = 0;
                goto LABEL_51;
              }
            }
            if (*((_BYTE *)a2 + 24))
              v24 = 0;
LABEL_51:
            v2 = v29 + 1;
          }
          else
          {
            v22 = 0;
            v23 = 0;
            v24 = 0;
            while (1)
            {
              v2 = v20 + 1;
              *((_QWORD *)a2 + 1) = v20 + 1;
              v25 = *(_BYTE *)(v21 + v20);
              v24 |= (unint64_t)(v25 & 0x7F) << v22;
              if ((v25 & 0x80) == 0)
                break;
              v22 += 7;
              v20 = v2;
              v14 = v23++ > 8;
              if (v14)
              {
                v24 = 0;
                break;
              }
            }
          }
LABEL_52:
          *((_QWORD *)this + 1) = v24;
        }
        else
        {
LABEL_31:
          result = PB::Reader::skip(a2);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
        }
        goto LABEL_53;
      }
      *((_BYTE *)this + 32) |= 4u;
      v2 = *((_QWORD *)a2 + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
      {
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_47;
      }
    }
    *((_BYTE *)a2 + 24) = 1;
LABEL_53:
    v3 = *((_QWORD *)a2 + 2);
  }
  return i == 0;
}

uint64_t CMMsl::HeartRateReference::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        return this;
      return PB::Writer::write(a2, *(double *)(v3 + 16));
    }
  }
  else if ((*(_BYTE *)(this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 16));
  return this;
}

BOOL CMMsl::HeartRateReference::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 32) & 2) == 0;
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
    return (*(_BYTE *)(a2 + 32) & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  return v2;
}

uint64_t CMMsl::HeartRateReference::hash_value(CMMsl::HeartRateReference *this)
{
  uint64_t v1;
  double v2;
  double v3;

  if ((*((_BYTE *)this + 32) & 1) != 0)
  {
    v1 = *((_QWORD *)this + 1);
    if ((*((_BYTE *)this + 32) & 4) != 0)
    {
LABEL_3:
      v2 = *((double *)this + 3);
      if (v2 == 0.0)
        v2 = 0.0;
      if ((*((_BYTE *)this + 32) & 2) != 0)
        goto LABEL_6;
LABEL_11:
      v3 = 0.0;
      return *(_QWORD *)&v2 ^ v1 ^ *(_QWORD *)&v3;
    }
  }
  else
  {
    v1 = 0;
    if ((*((_BYTE *)this + 32) & 4) != 0)
      goto LABEL_3;
  }
  v2 = 0.0;
  if ((*((_BYTE *)this + 32) & 2) == 0)
    goto LABEL_11;
LABEL_6:
  v3 = *((double *)this + 2);
  if (v3 == 0.0)
    v3 = 0.0;
  return *(_QWORD *)&v2 ^ v1 ^ *(_QWORD *)&v3;
}

_QWORD *CMMsl::HgAccel::HgAccel(_QWORD *this)
{
  *this = &off_25135E1D0;
  this[1] = 0;
  return this;
}

{
  *this = &off_25135E1D0;
  this[1] = 0;
  return this;
}

void CMMsl::HgAccel::~HgAccel(CMMsl::HgAccel *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135E1D0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135E1D0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135E1D0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::HgAccel *CMMsl::HgAccel::HgAccel(CMMsl::HgAccel *this, const CMMsl::Accel **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_25135E1D0;
  *((_QWORD *)this + 1) = 0;
  if (a2[1])
  {
    v4 = operator new();
    v5 = CMMsl::Accel::Accel(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return this;
}

uint64_t CMMsl::HgAccel::operator=(uint64_t a1, const CMMsl::Accel **a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::HgAccel *__hidden);
  uint64_t v6;

  if ((const CMMsl::Accel **)a1 != a2)
  {
    CMMsl::HgAccel::HgAccel((CMMsl::HgAccel *)&v5, a2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v6;
    v5 = &off_25135E1D0;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::HgAccel *a2, CMMsl::HgAccel *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::HgAccel::HgAccel(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_25135E1D0;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_25135E1D0;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::HgAccel::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = &off_25135E1D0;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::HgAccel::formatText(CMMsl::HgAccel *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::HgAccel::readFrom(CMMsl::HgAccel *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v19 = (_DWORD *)operator new();
        *(_QWORD *)v19 = &off_25135BD10;
        v19[8] = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = (_DWORD *)*((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_27;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::HgAccel::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2);
  return this;
}

BOOL CMMsl::HgAccel::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::Accel::operator==(v2, v3);
  return result;
}

CMMsl::Accel *CMMsl::HgAccel::hash_value(CMMsl::HgAccel *this)
{
  CMMsl::Accel *result;

  result = (CMMsl::Accel *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::Accel *)CMMsl::Accel::hash_value(result);
  return result;
}

_QWORD *CMMsl::HgAccel::makeSuper(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135BD10;
    *(_DWORD *)(v2 + 32) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t CMMsl::ISPPacket::ISPPacket(uint64_t this)
{
  *(_QWORD *)this = &off_25135E208;
  *(_DWORD *)(this + 128) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135E208;
  *(_DWORD *)(this + 128) = 0;
  return this;
}

void CMMsl::ISPPacket::~ISPPacket(CMMsl::ISPPacket *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

float CMMsl::ISPPacket::ISPPacket(CMMsl::ISPPacket *this, const CMMsl::ISPPacket *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;

  *(_QWORD *)this = &off_25135E208;
  *((_DWORD *)this + 32) = 0;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_DWORD *)this + 32) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_DWORD *)a2 + 32);
    if ((v2 & 0x100000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x100000) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 26);
    v3 |= 0x100000u;
    *((_DWORD *)this + 32) = v3;
    *((_DWORD *)this + 26) = v4;
    v2 = *((_DWORD *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 0x200000) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 27);
    v3 |= 0x200000u;
    *((_DWORD *)this + 32) = v3;
    *((_DWORD *)this + 27) = v4;
    v2 = *((_DWORD *)a2 + 32);
    if ((v2 & 0x400000) == 0)
    {
LABEL_8:
      if ((v2 & 0x80000) == 0)
        goto LABEL_9;
      goto LABEL_33;
    }
  }
  else if ((v2 & 0x400000) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 28);
  v3 |= 0x400000u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 28) = v4;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x80000) == 0)
  {
LABEL_9:
    if ((v2 & 0x10000) == 0)
      goto LABEL_10;
    goto LABEL_34;
  }
LABEL_33:
  LODWORD(v4) = *((_DWORD *)a2 + 25);
  v3 |= 0x80000u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 25) = v4;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x10000) == 0)
  {
LABEL_10:
    if ((v2 & 0x20000) == 0)
      goto LABEL_11;
    goto LABEL_35;
  }
LABEL_34:
  LODWORD(v4) = *((_DWORD *)a2 + 22);
  v3 |= 0x10000u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 22) = v4;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x20000) == 0)
  {
LABEL_11:
    if ((v2 & 0x40000) == 0)
      goto LABEL_12;
    goto LABEL_36;
  }
LABEL_35:
  LODWORD(v4) = *((_DWORD *)a2 + 23);
  v3 |= 0x20000u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 23) = v4;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x40000) == 0)
  {
LABEL_12:
    if ((v2 & 0x8000) == 0)
      goto LABEL_13;
    goto LABEL_37;
  }
LABEL_36:
  LODWORD(v4) = *((_DWORD *)a2 + 24);
  v3 |= 0x40000u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 24) = v4;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x8000) == 0)
  {
LABEL_13:
    if ((v2 & 0x800) == 0)
      goto LABEL_14;
    goto LABEL_38;
  }
LABEL_37:
  LODWORD(v4) = *((_DWORD *)a2 + 21);
  v3 |= 0x8000u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 21) = v4;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x800) == 0)
  {
LABEL_14:
    if ((v2 & 0x1000) == 0)
      goto LABEL_15;
    goto LABEL_39;
  }
LABEL_38:
  LODWORD(v4) = *((_DWORD *)a2 + 17);
  v3 |= 0x800u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 17) = v4;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x1000) == 0)
  {
LABEL_15:
    if ((v2 & 0x2000) == 0)
      goto LABEL_16;
    goto LABEL_40;
  }
LABEL_39:
  LODWORD(v4) = *((_DWORD *)a2 + 18);
  v3 |= 0x1000u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 18) = v4;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x2000) == 0)
  {
LABEL_16:
    if ((v2 & 8) == 0)
      goto LABEL_17;
    goto LABEL_41;
  }
LABEL_40:
  LODWORD(v4) = *((_DWORD *)a2 + 19);
  v3 |= 0x2000u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 19) = v4;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 8) == 0)
  {
LABEL_17:
    if ((v2 & 0x400) == 0)
      goto LABEL_18;
    goto LABEL_42;
  }
LABEL_41:
  v4 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *((_DWORD *)this + 32) = v3;
  *((_QWORD *)this + 4) = v4;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x400) == 0)
  {
LABEL_18:
    if ((v2 & 2) == 0)
      goto LABEL_19;
    goto LABEL_43;
  }
LABEL_42:
  v5 = *((_DWORD *)a2 + 16);
  v3 |= 0x400u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 16) = v5;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 2) == 0)
  {
LABEL_19:
    if ((v2 & 0x80) == 0)
      goto LABEL_20;
    goto LABEL_44;
  }
LABEL_43:
  v4 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *((_DWORD *)this + 32) = v3;
  *((_QWORD *)this + 2) = v4;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x80) == 0)
  {
LABEL_20:
    if ((v2 & 0x100) == 0)
      goto LABEL_21;
    goto LABEL_45;
  }
LABEL_44:
  LODWORD(v4) = *((_DWORD *)a2 + 13);
  v3 |= 0x80u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 13) = v4;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x100) == 0)
  {
LABEL_21:
    if ((v2 & 0x200) == 0)
      goto LABEL_22;
    goto LABEL_46;
  }
LABEL_45:
  LODWORD(v4) = *((_DWORD *)a2 + 14);
  v3 |= 0x100u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 14) = v4;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x200) == 0)
  {
LABEL_22:
    if ((v2 & 0x4000) == 0)
      goto LABEL_23;
    goto LABEL_47;
  }
LABEL_46:
  LODWORD(v4) = *((_DWORD *)a2 + 15);
  v3 |= 0x200u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 15) = v4;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x4000) == 0)
  {
LABEL_23:
    if ((v2 & 0x800000) == 0)
      goto LABEL_24;
    goto LABEL_48;
  }
LABEL_47:
  LODWORD(v4) = *((_DWORD *)a2 + 20);
  v3 |= 0x4000u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 20) = v4;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x800000) == 0)
  {
LABEL_24:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_25;
    goto LABEL_49;
  }
LABEL_48:
  LODWORD(v4) = *((_DWORD *)a2 + 29);
  v3 |= 0x800000u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 29) = v4;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_26;
    goto LABEL_50;
  }
LABEL_49:
  LODWORD(v4) = *((_DWORD *)a2 + 30);
  v3 |= 0x1000000u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 30) = v4;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_26:
    if ((v2 & 4) == 0)
      goto LABEL_27;
    goto LABEL_51;
  }
LABEL_50:
  LODWORD(v4) = *((_DWORD *)a2 + 31);
  v3 |= 0x2000000u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 31) = v4;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 4) == 0)
  {
LABEL_27:
    if ((v2 & 0x10) == 0)
      goto LABEL_28;
    goto LABEL_52;
  }
LABEL_51:
  v4 = *((_QWORD *)a2 + 3);
  v3 |= 4u;
  *((_DWORD *)this + 32) = v3;
  *((_QWORD *)this + 3) = v4;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x10) == 0)
  {
LABEL_28:
    if ((v2 & 0x20) == 0)
      goto LABEL_29;
    goto LABEL_53;
  }
LABEL_52:
  LODWORD(v4) = *((_DWORD *)a2 + 10);
  v3 |= 0x10u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 10) = v4;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x20) == 0)
  {
LABEL_29:
    if ((v2 & 0x40) == 0)
      return *(float *)&v4;
    goto LABEL_54;
  }
LABEL_53:
  LODWORD(v4) = *((_DWORD *)a2 + 11);
  v3 |= 0x20u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 11) = v4;
  if ((*((_DWORD *)a2 + 32) & 0x40) == 0)
    return *(float *)&v4;
LABEL_54:
  LODWORD(v4) = *((_DWORD *)a2 + 12);
  *((_DWORD *)this + 32) = v3 | 0x40;
  *((_DWORD *)this + 12) = v4;
  return *(float *)&v4;
}

CMMsl *CMMsl::ISPPacket::operator=(CMMsl *a1, const CMMsl::ISPPacket *a2)
{
  CMMsl::ISPPacket *v3;
  _BYTE v5[136];

  if (a1 != a2)
  {
    CMMsl::ISPPacket::ISPPacket((CMMsl::ISPPacket *)v5, a2);
    CMMsl::swap(a1, (CMMsl::ISPPacket *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::ISPPacket *a2, CMMsl::ISPPacket *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  float result;

  v3 = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v4;
  LODWORD(v4) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v4;
  LODWORD(v4) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v4;
  LODWORD(v4) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v4;
  LODWORD(v4) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v4;
  LODWORD(v4) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v4;
  LODWORD(v4) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v4;
  LODWORD(v4) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v4;
  LODWORD(v4) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v4;
  LODWORD(v4) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v4;
  LODWORD(v4) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v4;
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v5;
  v6 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v6;
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v7;
  LODWORD(v7) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v7;
  LODWORD(v7) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v7;
  LODWORD(v7) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v7;
  LODWORD(v7) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v7;
  LODWORD(v7) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v7;
  LODWORD(v7) = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v7;
  LODWORD(v7) = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v7;
  v8 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v8;
  LODWORD(v8) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v8;
  LODWORD(v8) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v8;
  result = *((float *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((float *)a2 + 12) = result;
  return result;
}

float CMMsl::ISPPacket::ISPPacket(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135E208;
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  result = *(float *)(a2 + 48);
  *(float *)(a1 + 48) = result;
  return result;
}

CMMsl *CMMsl::ISPPacket::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::ISPPacket *v3;
  _BYTE v5[136];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::ISPPacket::ISPPacket((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::ISPPacket *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::ISPPacket::formatText(CMMsl::ISPPacket *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "accelUnfilteredX", *((float *)this + 10));
    v5 = *((_DWORD *)this + 32);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_31;
    }
  }
  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "accelUnfilteredY", *((float *)this + 11));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "accelUnfilteredZ", *((float *)this + 12));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x80) == 0)
  {
LABEL_5:
    if ((v5 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "accelX", *((float *)this + 13));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x100) == 0)
  {
LABEL_6:
    if ((v5 & 0x200) == 0)
      goto LABEL_7;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "accelY", *((float *)this + 14));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x200) == 0)
  {
LABEL_7:
    if ((v5 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "accelZ", *((float *)this + 15));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x400) == 0)
  {
LABEL_8:
    if ((v5 & 0x800) == 0)
      goto LABEL_9;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "flags");
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x800) == 0)
  {
LABEL_9:
    if ((v5 & 0x1000) == 0)
      goto LABEL_10;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "gravityX", *((float *)this + 17));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x1000) == 0)
  {
LABEL_10:
    if ((v5 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "gravityY", *((float *)this + 18));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x2000) == 0)
  {
LABEL_11:
    if ((v5 & 0x4000) == 0)
      goto LABEL_12;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "gravityZ", *((float *)this + 19));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x4000) == 0)
  {
LABEL_12:
    if ((v5 & 0x8000) == 0)
      goto LABEL_13;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "gyroBiasErrorEstimate", *((float *)this + 20));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x8000) == 0)
  {
LABEL_13:
    if ((v5 & 0x10000) == 0)
      goto LABEL_14;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "quaternionPredictedW", *((float *)this + 21));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x10000) == 0)
  {
LABEL_14:
    if ((v5 & 0x20000) == 0)
      goto LABEL_15;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "quaternionPredictedX", *((float *)this + 22));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x20000) == 0)
  {
LABEL_15:
    if ((v5 & 0x40000) == 0)
      goto LABEL_16;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "quaternionPredictedY", *((float *)this + 23));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x40000) == 0)
  {
LABEL_16:
    if ((v5 & 0x80000) == 0)
      goto LABEL_17;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "quaternionPredictedZ", *((float *)this + 24));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x80000) == 0)
  {
LABEL_17:
    if ((v5 & 0x100000) == 0)
      goto LABEL_18;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "quaternionW", *((float *)this + 25));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x100000) == 0)
  {
LABEL_18:
    if ((v5 & 0x200000) == 0)
      goto LABEL_19;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "quaternionX", *((float *)this + 26));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x200000) == 0)
  {
LABEL_19:
    if ((v5 & 0x400000) == 0)
      goto LABEL_20;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "quaternionY", *((float *)this + 27));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x400000) == 0)
  {
LABEL_20:
    if ((v5 & 0x800000) == 0)
      goto LABEL_21;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "quaternionZ", *((float *)this + 28));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x800000) == 0)
  {
LABEL_21:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_22;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "rotationRateX", *((float *)this + 29));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_22:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_23;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "rotationRateY", *((float *)this + 30));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_23:
    if ((v5 & 1) == 0)
      goto LABEL_24;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "rotationRateZ", *((float *)this + 31));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 1) == 0)
  {
LABEL_24:
    if ((v5 & 2) == 0)
      goto LABEL_25;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 2) == 0)
  {
LABEL_25:
    if ((v5 & 4) == 0)
      goto LABEL_26;
LABEL_53:
    PB::TextFormatter::format(a2, "timestampAccelUnfiltered", *((double *)this + 3));
    if ((*((_DWORD *)this + 32) & 8) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_27;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "timestampAccel", *((double *)this + 2));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 4) != 0)
    goto LABEL_53;
LABEL_26:
  if ((v5 & 8) != 0)
LABEL_27:
    PB::TextFormatter::format(a2, "timestampPrediction", *((double *)this + 4));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ISPPacket::readFrom(CMMsl::ISPPacket *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_116;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 32) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_105;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_96;
      case 2u:
        *((_DWORD *)this + 32) |= 0x100000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_105;
        *((_DWORD *)this + 26) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_114;
      case 3u:
        *((_DWORD *)this + 32) |= 0x200000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_105;
        *((_DWORD *)this + 27) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_114;
      case 4u:
        *((_DWORD *)this + 32) |= 0x400000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_105;
        *((_DWORD *)this + 28) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_114;
      case 5u:
        *((_DWORD *)this + 32) |= 0x80000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_105;
        *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_114;
      case 6u:
        *((_DWORD *)this + 32) |= 0x10000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_105;
        *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_114;
      case 7u:
        *((_DWORD *)this + 32) |= 0x20000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_105;
        *((_DWORD *)this + 23) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_114;
      case 8u:
        *((_DWORD *)this + 32) |= 0x40000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_105;
        *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_114;
      case 9u:
        *((_DWORD *)this + 32) |= 0x8000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_105;
        *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_114;
      case 0xAu:
        *((_DWORD *)this + 32) |= 0x800u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_105;
        *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_114;
      case 0xBu:
        *((_DWORD *)this + 32) |= 0x1000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_105;
        *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_114;
      case 0xCu:
        *((_DWORD *)this + 32) |= 0x2000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_105;
        *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_114;
      case 0xDu:
        *((_DWORD *)this + 32) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_105;
        *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_96;
      case 0xEu:
        *((_DWORD *)this + 32) |= 0x400u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v26 = 0;
          v27 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_125;
            }
            v28 = v20++;
            v29 = *(_BYTE *)(v21 + v28);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0)
              break;
            v26 += 7;
            v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_124:
              v2 = v28 + 1;
              goto LABEL_125;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
          goto LABEL_124;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_125;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_125:
        *((_DWORD *)this + 16) = v24;
        break;
      case 0xFu:
        *((_DWORD *)this + 32) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_105;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_96;
      case 0x10u:
        *((_DWORD *)this + 32) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_105;
        *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_114;
      case 0x11u:
        *((_DWORD *)this + 32) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_105;
        *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_114;
      case 0x12u:
        *((_DWORD *)this + 32) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_105;
        *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_114;
      case 0x13u:
        *((_DWORD *)this + 32) |= 0x4000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_105;
        *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_114;
      case 0x14u:
        *((_DWORD *)this + 32) |= 0x800000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_105;
        *((_DWORD *)this + 29) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_114;
      case 0x15u:
        *((_DWORD *)this + 32) |= 0x1000000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_105;
        *((_DWORD *)this + 30) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_114;
      case 0x16u:
        *((_DWORD *)this + 32) |= 0x2000000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_105;
        *((_DWORD *)this + 31) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_114;
      case 0x17u:
        *((_DWORD *)this + 32) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_105;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_96:
        v2 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_115;
      case 0x18u:
        *((_DWORD *)this + 32) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_105;
        *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_114;
      case 0x19u:
        *((_DWORD *)this + 32) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_105;
        *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_114;
      case 0x1Au:
        *((_DWORD *)this + 32) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_114:
          v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_115:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_105:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_116:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::ISPPacket::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 128);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_DWORD *)(v3 + 128);
    if ((v4 & 0x100000) == 0)
    {
LABEL_3:
      if ((v4 & 0x200000) == 0)
        goto LABEL_4;
      goto LABEL_30;
    }
  }
  else if ((v4 & 0x100000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 104));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x200000) == 0)
  {
LABEL_4:
    if ((v4 & 0x400000) == 0)
      goto LABEL_5;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(float *)(v3 + 108));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x400000) == 0)
  {
LABEL_5:
    if ((v4 & 0x80000) == 0)
      goto LABEL_6;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 112));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80000) == 0)
  {
LABEL_6:
    if ((v4 & 0x10000) == 0)
      goto LABEL_7;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 100));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10000) == 0)
  {
LABEL_7:
    if ((v4 & 0x20000) == 0)
      goto LABEL_8;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x20000) == 0)
  {
LABEL_8:
    if ((v4 & 0x40000) == 0)
      goto LABEL_9;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 92));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x40000) == 0)
  {
LABEL_9:
    if ((v4 & 0x8000) == 0)
      goto LABEL_10;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 96));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x8000) == 0)
  {
LABEL_10:
    if ((v4 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 84));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x800) == 0)
  {
LABEL_11:
    if ((v4 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 68));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x1000) == 0)
  {
LABEL_12:
    if ((v4 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x2000) == 0)
  {
LABEL_13:
    if ((v4 & 8) == 0)
      goto LABEL_14;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 76));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 8) == 0)
  {
LABEL_14:
    if ((v4 & 0x400) == 0)
      goto LABEL_15;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x400) == 0)
  {
LABEL_15:
    if ((v4 & 2) == 0)
      goto LABEL_16;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 2) == 0)
  {
LABEL_16:
    if ((v4 & 0x80) == 0)
      goto LABEL_17;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80) == 0)
  {
LABEL_17:
    if ((v4 & 0x100) == 0)
      goto LABEL_18;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x100) == 0)
  {
LABEL_18:
    if ((v4 & 0x200) == 0)
      goto LABEL_19;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x200) == 0)
  {
LABEL_19:
    if ((v4 & 0x4000) == 0)
      goto LABEL_20;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(float *)(v3 + 60));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x4000) == 0)
  {
LABEL_20:
    if ((v4 & 0x800000) == 0)
      goto LABEL_21;
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(float *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x800000) == 0)
  {
LABEL_21:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_22;
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(float *)(v3 + 116));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_23;
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(float *)(v3 + 120));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_23:
    if ((v4 & 4) == 0)
      goto LABEL_24;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(float *)(v3 + 124));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 4) == 0)
  {
LABEL_24:
    if ((v4 & 0x10) == 0)
      goto LABEL_25;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10) == 0)
  {
LABEL_25:
    if ((v4 & 0x20) == 0)
      goto LABEL_26;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x20) == 0)
  {
LABEL_26:
    if ((v4 & 0x40) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 48));
  }
LABEL_52:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  if ((*(_DWORD *)(v3 + 128) & 0x40) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 48));
  return this;
}

BOOL CMMsl::ISPPacket::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 128);
  v3 = *(_DWORD *)(a2 + 128);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124))
      return 0;
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  v4 = (*(_DWORD *)(a2 + 128) & 0x40) == 0;
  if ((v2 & 0x40) != 0)
    return (v3 & 0x40) != 0 && *(float *)(a1 + 48) == *(float *)(a2 + 48);
  return v4;
}

uint64_t CMMsl::ISPPacket::hash_value(CMMsl::ISPPacket *this)
{
  int v1;
  double v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  double v27;
  float v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  float v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  double v42;
  float v43;
  uint64_t v44;
  float v45;
  uint64_t v46;
  float v47;
  uint64_t v48;

  v1 = *((_DWORD *)this + 32);
  if ((v1 & 1) == 0)
  {
    v2 = 0.0;
    if ((v1 & 0x100000) != 0)
      goto LABEL_3;
LABEL_79:
    v4 = 0;
    if ((v1 & 0x200000) != 0)
      goto LABEL_6;
LABEL_80:
    v6 = 0;
    if ((v1 & 0x400000) != 0)
      goto LABEL_9;
LABEL_81:
    v8 = 0;
    if ((v1 & 0x80000) != 0)
      goto LABEL_12;
LABEL_82:
    v10 = 0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_15;
LABEL_83:
    v12 = 0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_18;
LABEL_84:
    v14 = 0;
    if ((v1 & 0x40000) != 0)
      goto LABEL_21;
LABEL_85:
    v16 = 0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_24;
LABEL_86:
    v18 = 0;
    if ((v1 & 0x800) != 0)
      goto LABEL_27;
LABEL_87:
    v20 = 0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_30;
LABEL_88:
    v22 = 0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_33;
LABEL_89:
    v24 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_36;
LABEL_90:
    v25 = 0.0;
    if ((v1 & 0x400) != 0)
      goto LABEL_39;
    goto LABEL_91;
  }
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 0x100000) == 0)
    goto LABEL_79;
LABEL_3:
  v3 = *((float *)this + 26);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  if ((v1 & 0x200000) == 0)
    goto LABEL_80;
LABEL_6:
  v5 = *((float *)this + 27);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((v1 & 0x400000) == 0)
    goto LABEL_81;
LABEL_9:
  v7 = *((float *)this + 28);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 0x80000) == 0)
    goto LABEL_82;
LABEL_12:
  v9 = *((float *)this + 25);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((v1 & 0x10000) == 0)
    goto LABEL_83;
LABEL_15:
  v11 = *((float *)this + 22);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((v1 & 0x20000) == 0)
    goto LABEL_84;
LABEL_18:
  v13 = *((float *)this + 23);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((v1 & 0x40000) == 0)
    goto LABEL_85;
LABEL_21:
  v15 = *((float *)this + 24);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  if ((v1 & 0x8000) == 0)
    goto LABEL_86;
LABEL_24:
  v17 = *((float *)this + 21);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  if ((v1 & 0x800) == 0)
    goto LABEL_87;
LABEL_27:
  v19 = *((float *)this + 17);
  v20 = LODWORD(v19);
  if (v19 == 0.0)
    v20 = 0;
  if ((v1 & 0x1000) == 0)
    goto LABEL_88;
LABEL_30:
  v21 = *((float *)this + 18);
  v22 = LODWORD(v21);
  if (v21 == 0.0)
    v22 = 0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_89;
LABEL_33:
  v23 = *((float *)this + 19);
  v24 = LODWORD(v23);
  if (v23 == 0.0)
    v24 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_90;
LABEL_36:
  v25 = *((double *)this + 4);
  if (v25 == 0.0)
    v25 = 0.0;
  if ((v1 & 0x400) != 0)
  {
LABEL_39:
    v26 = *((unsigned int *)this + 16);
    if ((v1 & 2) != 0)
      goto LABEL_40;
LABEL_92:
    v27 = 0.0;
    if ((v1 & 0x80) != 0)
      goto LABEL_43;
LABEL_93:
    v29 = 0;
    if ((v1 & 0x100) != 0)
      goto LABEL_46;
LABEL_94:
    v31 = 0;
    if ((v1 & 0x200) != 0)
      goto LABEL_49;
LABEL_95:
    v33 = 0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_52;
LABEL_96:
    v35 = 0;
    if ((v1 & 0x800000) != 0)
      goto LABEL_55;
LABEL_97:
    v37 = 0;
    if ((v1 & 0x1000000) != 0)
      goto LABEL_58;
LABEL_98:
    v39 = 0;
    if ((v1 & 0x2000000) != 0)
      goto LABEL_61;
LABEL_99:
    v41 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_64;
LABEL_100:
    v42 = 0.0;
    if ((v1 & 0x10) != 0)
      goto LABEL_67;
LABEL_101:
    v44 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_70;
    goto LABEL_102;
  }
LABEL_91:
  v26 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_92;
LABEL_40:
  v27 = *((double *)this + 2);
  if (v27 == 0.0)
    v27 = 0.0;
  if ((v1 & 0x80) == 0)
    goto LABEL_93;
LABEL_43:
  v28 = *((float *)this + 13);
  v29 = LODWORD(v28);
  if (v28 == 0.0)
    v29 = 0;
  if ((v1 & 0x100) == 0)
    goto LABEL_94;
LABEL_46:
  v30 = *((float *)this + 14);
  v31 = LODWORD(v30);
  if (v30 == 0.0)
    v31 = 0;
  if ((v1 & 0x200) == 0)
    goto LABEL_95;
LABEL_49:
  v32 = *((float *)this + 15);
  v33 = LODWORD(v32);
  if (v32 == 0.0)
    v33 = 0;
  if ((v1 & 0x4000) == 0)
    goto LABEL_96;
LABEL_52:
  v34 = *((float *)this + 20);
  v35 = LODWORD(v34);
  if (v34 == 0.0)
    v35 = 0;
  if ((v1 & 0x800000) == 0)
    goto LABEL_97;
LABEL_55:
  v36 = *((float *)this + 29);
  v37 = LODWORD(v36);
  if (v36 == 0.0)
    v37 = 0;
  if ((v1 & 0x1000000) == 0)
    goto LABEL_98;
LABEL_58:
  v38 = *((float *)this + 30);
  v39 = LODWORD(v38);
  if (v38 == 0.0)
    v39 = 0;
  if ((v1 & 0x2000000) == 0)
    goto LABEL_99;
LABEL_61:
  v40 = *((float *)this + 31);
  v41 = LODWORD(v40);
  if (v40 == 0.0)
    v41 = 0;
  if ((v1 & 4) == 0)
    goto LABEL_100;
LABEL_64:
  v42 = *((double *)this + 3);
  if (v42 == 0.0)
    v42 = 0.0;
  if ((v1 & 0x10) == 0)
    goto LABEL_101;
LABEL_67:
  v43 = *((float *)this + 10);
  v44 = LODWORD(v43);
  if (v43 == 0.0)
    v44 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_70:
    v45 = *((float *)this + 11);
    v46 = LODWORD(v45);
    if (v45 == 0.0)
      v46 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_73;
LABEL_103:
    v48 = 0;
    return v4 ^ *(_QWORD *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ *(_QWORD *)&v25 ^ v26 ^ *(_QWORD *)&v27 ^ v29 ^ v31 ^ v33 ^ v35 ^ v37 ^ v39 ^ v41 ^ *(_QWORD *)&v42 ^ v44 ^ v46 ^ v48;
  }
LABEL_102:
  v46 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_103;
LABEL_73:
  v47 = *((float *)this + 12);
  v48 = LODWORD(v47);
  if (v47 == 0.0)
    v48 = 0;
  return v4 ^ *(_QWORD *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ *(_QWORD *)&v25 ^ v26 ^ *(_QWORD *)&v27 ^ v29 ^ v31 ^ v33 ^ v35 ^ v37 ^ v39 ^ v41 ^ *(_QWORD *)&v42 ^ v44 ^ v46 ^ v48;
}

uint64_t CMMsl::InEarAdditionalState::InEarAdditionalState(uint64_t this)
{
  *(_QWORD *)this = &off_25135E240;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135E240;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

void CMMsl::InEarAdditionalState::~InEarAdditionalState(CMMsl::InEarAdditionalState *this)
{
  void **v2;

  *(_QWORD *)this = &off_25135E240;
  v2 = (void **)((char *)this + 8);
  sub_242910B70(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_25135E240;
  v2 = (void **)((char *)this + 8);
  sub_242910B70(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_25135E240;
  v2 = (void **)((char *)this + 8);
  sub_242910B70(&v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::InEarAdditionalState *CMMsl::InEarAdditionalState::InEarAdditionalState(CMMsl::InEarAdditionalState *this, const CMMsl::InEarAdditionalState *a2)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v6;
  int v7;

  *(_QWORD *)this = &off_25135E240;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t **)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 9) = 0;
  v5 = (uint64_t *)*((_QWORD *)a2 + 1);
  v6 = (uint64_t *)*((_QWORD *)a2 + 2);
  while (v5 != v6)
    sub_24273F69C(v4, *v5++);
  if ((*((_BYTE *)a2 + 36) & 1) != 0)
  {
    v7 = *((_DWORD *)a2 + 8);
    *((_BYTE *)this + 36) |= 1u;
    *((_DWORD *)this + 8) = v7;
  }
  return this;
}

uint64_t CMMsl::InEarAdditionalState::operator=(uint64_t a1, const CMMsl::InEarAdditionalState *a2)
{
  __int128 v3;
  uint64_t v4;
  void (**v6)(CMMsl::InEarAdditionalState *__hidden);
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;

  if ((const CMMsl::InEarAdditionalState *)a1 != a2)
  {
    CMMsl::InEarAdditionalState::InEarAdditionalState((CMMsl::InEarAdditionalState *)&v6, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v4;
    *(_QWORD *)&v3 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v9;
    v9 = v3;
    v6 = &off_25135E240;
    v10 = (void **)&v7;
    sub_242910B70(&v10);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::InEarAdditionalState *a2, CMMsl::InEarAdditionalState *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_DWORD *)(this + 36);
  *(_DWORD *)(this + 36) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  LODWORD(v6) = *(_DWORD *)(this + 32);
  *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v6;
  return this;
}

uint64_t CMMsl::InEarAdditionalState::InEarAdditionalState(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;

  *(_QWORD *)a1 = &off_25135E240;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_OWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  sub_242910BEC((_QWORD *)(a1 + 8));
  *v4 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

{
  _OWORD *v4;

  *(_QWORD *)a1 = &off_25135E240;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_OWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  sub_242910BEC((_QWORD *)(a1 + 8));
  *v4 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

uint64_t CMMsl::InEarAdditionalState::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  int v6;
  int v7;
  __int128 v8;
  uint64_t v9;
  void (**v11)(CMMsl::InEarAdditionalState *__hidden);
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;

  if (a1 != a2)
  {
    v11 = &off_25135E240;
    v12 = 0uLL;
    v13 = 0;
    HIDWORD(v14) = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a2 + 36) = 0;
    sub_242910BEC(&v12);
    v4 = *(_QWORD *)(a2 + 24);
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v6 = *(_DWORD *)(a2 + 32);
    v7 = HIDWORD(v14);
    v8 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    v12 = v8;
    v9 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v4;
    v13 = v9;
    *(_QWORD *)&v5 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v6;
    *(_DWORD *)(a1 + 36) = v7;
    v14 = v5;
    v11 = &off_25135E240;
    v15 = (void **)&v12;
    sub_242910B70(&v15);
    PB::Base::~Base((PB::Base *)&v11);
  }
  return a1;
}

uint64_t CMMsl::InEarAdditionalState::formatText(CMMsl::InEarAdditionalState *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 36) & 1) != 0)
    PB::TextFormatter::format(a2, "lastSampleId");
  v5 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "slowOptical");
  }
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::InEarAdditionalState::readFrom(CMMsl::InEarAdditionalState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  unint64_t v32;
  char v33;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (uint64_t **)((char *)this + 8);
    while (1)
    {
      v9 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_27;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v12 >> 3) == 2)
      {
        *((_BYTE *)this + 36) |= 1u;
        v22 = *((_QWORD *)a2 + 1);
        v23 = *((_QWORD *)a2 + 2);
        v24 = *(_QWORD *)a2;
        if (v22 > 0xFFFFFFFFFFFFFFF5 || v22 + 10 > v23)
        {
          v30 = 0;
          v31 = 0;
          v27 = 0;
          if (v23 <= v22)
            v23 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v23 == v22)
            {
              LODWORD(v27) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_46;
            }
            v32 = v22 + 1;
            v33 = *(_BYTE *)(v24 + v22);
            *((_QWORD *)a2 + 1) = v32;
            v27 |= (unint64_t)(v33 & 0x7F) << v30;
            if ((v33 & 0x80) == 0)
              break;
            v30 += 7;
            v22 = v32;
            v15 = v31++ > 8;
            if (v15)
            {
LABEL_42:
              LODWORD(v27) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v27) = 0;
        }
        else
        {
          v25 = 0;
          v26 = 0;
          v27 = 0;
          while (1)
          {
            v28 = v22 + 1;
            *((_QWORD *)a2 + 1) = v22 + 1;
            v29 = *(_BYTE *)(v24 + v22);
            v27 |= (unint64_t)(v29 & 0x7F) << v25;
            if ((v29 & 0x80) == 0)
              break;
            v25 += 7;
            v22 = v28;
            v15 = v26++ > 8;
            if (v15)
              goto LABEL_42;
          }
        }
LABEL_46:
        *((_DWORD *)this + 8) = v27;
      }
      else if ((v12 >> 3) == 1)
      {
        sub_2427406E4(v8);
        v20 = *(_QWORD *)(*((_QWORD *)this + 2) - 8);
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)a2 + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      v15 = v17++ > 8;
      if (v15)
        goto LABEL_27;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::InEarAdditionalState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base **v4;
  const PB::Base **v5;
  const PB::Base *v6;

  v3 = this;
  v4 = *(const PB::Base ***)(this + 8);
  v5 = *(const PB::Base ***)(this + 16);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::writeSubmessage(a2, v6);
  }
  if ((*(_BYTE *)(v3 + 36) & 1) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

BOOL CMMsl::InEarAdditionalState::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BOOL8 result;

  v2 = *(uint64_t **)(a1 + 8);
  v3 = *(uint64_t **)(a1 + 16);
  v4 = *(uint64_t **)(a2 + 8);
  if ((char *)v3 - (char *)v2 != *(_QWORD *)(a2 + 16) - (_QWORD)v4)
    return 0;
  while (v2 != v3)
  {
    result = CMMsl::ClefMeasurement::operator==(*v2, *v4);
    if (!result)
      return result;
    ++v2;
    ++v4;
  }
  result = (*(_BYTE *)(a2 + 36) & 1) == 0;
  if ((*(_BYTE *)(a1 + 36) & 1) != 0)
    return (*(_BYTE *)(a2 + 36) & 1) != 0 && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32);
  return result;
}

uint64_t CMMsl::InEarAdditionalState::hash_value(uint64_t **this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_242740C00(this[1], this[2]);
  if ((*((_BYTE *)this + 36) & 1) != 0)
    v3 = *((unsigned int *)this + 8);
  else
    v3 = 0;
  return v3 ^ v2;
}

double CMMsl::InEarBaseline::InEarBaseline(CMMsl::InEarBaseline *this)
{
  double result;

  *(_QWORD *)this = &off_25135E278;
  *((_DWORD *)this + 13) = 0;
  *((_DWORD *)this + 15) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_25135E278;
  *((_DWORD *)this + 13) = 0;
  *((_DWORD *)this + 15) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  return result;
}

void CMMsl::InEarBaseline::~InEarBaseline(CMMsl::InEarBaseline *this)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;

  *(_QWORD *)this = &off_25135E278;
  v4 = (void **)((char *)this + 24);
  sub_242910B70(&v4);
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  PB::Base::~Base(this);
}

{
  CMMsl::InEarBaseline::~InEarBaseline(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::InEarBaseline *CMMsl::InEarBaseline::InEarBaseline(CMMsl::InEarBaseline *this, const CMMsl::InEarBaseline *a2)
{
  uint64_t *v4;
  uint64_t **v5;
  char v6;
  int v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  int v22;
  int v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;

  *(_QWORD *)this = &off_25135E278;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (uint64_t *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  v5 = (uint64_t **)((char *)this + 24);
  *((_DWORD *)this + 13) = 0;
  *((_DWORD *)this + 15) = 0;
  *((_QWORD *)this + 5) = 0;
  if ((*((_BYTE *)a2 + 60) & 1) == 0)
  {
    v6 = 2;
    if ((*((_BYTE *)a2 + 60) & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v7 = *((_DWORD *)a2 + 12);
  *((_BYTE *)this + 60) = 1;
  *((_DWORD *)this + 12) = v7;
  v6 = 3;
  if ((*((_BYTE *)a2 + 60) & 2) != 0)
  {
LABEL_5:
    v8 = *((_DWORD *)a2 + 13);
    *((_BYTE *)this + 60) = v6;
    *((_DWORD *)this + 13) = v8;
  }
LABEL_6:
  v9 = (uint64_t *)*((_QWORD *)a2 + 3);
  v10 = (uint64_t *)*((_QWORD *)a2 + 4);
  while (v9 != v10)
    sub_24273F69C(v5, *v9++);
  if (!*((_QWORD *)a2 + 2))
    goto LABEL_17;
  v11 = operator new();
  v12 = *((_QWORD *)a2 + 2);
  *(_QWORD *)v11 = &off_25135CD78;
  *(_DWORD *)(v11 + 16) = 0;
  v13 = *(_BYTE *)(v12 + 16);
  if ((v13 & 1) != 0)
  {
    v15 = *(_DWORD *)(v12 + 8);
    *(_BYTE *)(v11 + 16) = 1;
    *(_DWORD *)(v11 + 8) = v15;
    v14 = 3;
    if ((v13 & 2) == 0)
      goto LABEL_15;
    goto LABEL_14;
  }
  v14 = 2;
  if ((*(_BYTE *)(v12 + 16) & 2) != 0)
  {
LABEL_14:
    v16 = *(_DWORD *)(v12 + 12);
    *(_BYTE *)(v11 + 16) = v14;
    *(_DWORD *)(v11 + 12) = v16;
  }
LABEL_15:
  v17 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v11;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
LABEL_17:
  if (!*((_QWORD *)a2 + 1))
    goto LABEL_25;
  v18 = operator new();
  v19 = *((_QWORD *)a2 + 1);
  *(_QWORD *)v18 = &off_25135CD78;
  *(_DWORD *)(v18 + 16) = 0;
  v20 = *(_BYTE *)(v19 + 16);
  if ((v20 & 1) != 0)
  {
    v22 = *(_DWORD *)(v19 + 8);
    *(_BYTE *)(v18 + 16) = 1;
    *(_DWORD *)(v18 + 8) = v22;
    v21 = 3;
    if ((v20 & 2) == 0)
      goto LABEL_23;
    goto LABEL_22;
  }
  v21 = 2;
  if ((*(_BYTE *)(v19 + 16) & 2) != 0)
  {
LABEL_22:
    v23 = *(_DWORD *)(v19 + 12);
    *(_BYTE *)(v18 + 16) = v21;
    *(_DWORD *)(v18 + 12) = v23;
  }
LABEL_23:
  v24 = *v4;
  *v4 = v18;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
LABEL_25:
  v25 = *((_BYTE *)a2 + 60);
  if ((v25 & 4) != 0)
  {
    v26 = *((_BYTE *)a2 + 56);
    *((_BYTE *)this + 60) |= 4u;
    *((_BYTE *)this + 56) = v26;
    v25 = *((_BYTE *)a2 + 60);
  }
  if ((v25 & 8) != 0)
  {
    v27 = *((_BYTE *)a2 + 57);
    *((_BYTE *)this + 60) |= 8u;
    *((_BYTE *)this + 57) = v27;
  }
  return this;
}

uint64_t CMMsl::InEarBaseline::operator=(uint64_t a1, const CMMsl::InEarBaseline *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  int v16;

  if ((const CMMsl::InEarBaseline *)a1 != a2)
  {
    CMMsl::InEarBaseline::InEarBaseline((CMMsl::InEarBaseline *)&v9, a2);
    v3 = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a1 + 60) = v16;
    v16 = v3;
    v4 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v13;
    v13 = v4;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v11 = v5;
    v6 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v12;
    v12 = v6;
    v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v7;
    LOBYTE(v6) = *(_BYTE *)(a1 + 56);
    *(_BYTE *)(a1 + 56) = v14;
    v14 = v6;
    LOBYTE(v6) = *(_BYTE *)(a1 + 57);
    *(_BYTE *)(a1 + 57) = v15;
    v15 = v6;
    CMMsl::InEarBaseline::~InEarBaseline((CMMsl::InEarBaseline *)&v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::InEarBaseline *a2, CMMsl::InEarBaseline *a3)
{
  int v3;
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v3;
  result = *((double *)a2 + 6);
  v5 = *((_QWORD *)this + 6);
  *((double *)this + 6) = result;
  *((_QWORD *)a2 + 6) = v5;
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  v7 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v7;
  v8 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v8;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v9;
  v10 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v10;
  LOBYTE(v10) = *((_BYTE *)this + 56);
  *((_BYTE *)this + 56) = *((_BYTE *)a2 + 56);
  *((_BYTE *)a2 + 56) = v10;
  LOBYTE(v10) = *((_BYTE *)this + 57);
  *((_BYTE *)this + 57) = *((_BYTE *)a2 + 57);
  *((_BYTE *)a2 + 57) = v10;
  return result;
}

uint64_t CMMsl::InEarBaseline::InEarBaseline(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = &off_25135E278;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (uint64_t *)(a1 + 8);
  *(_DWORD *)(a1 + 52) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  v5 = (_OWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  sub_242910BEC((_QWORD *)(a1 + 24));
  *v5 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v9 = *v4;
  *v4 = v8;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  return a1;
}

uint64_t CMMsl::InEarBaseline::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  int v16;

  if (a1 != a2)
  {
    CMMsl::InEarBaseline::InEarBaseline((uint64_t)&v9, a2);
    v3 = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a1 + 60) = v16;
    v16 = v3;
    v4 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v13;
    v13 = v4;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v11 = v5;
    v6 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v12;
    v12 = v6;
    v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v7;
    LOBYTE(v6) = *(_BYTE *)(a1 + 56);
    *(_BYTE *)(a1 + 56) = v14;
    v14 = v6;
    LOBYTE(v6) = *(_BYTE *)(a1 + 57);
    *(_BYTE *)(a1 + 57) = v15;
    v15 = v6;
    CMMsl::InEarBaseline::~InEarBaseline((CMMsl::InEarBaseline *)&v9);
  }
  return a1;
}

uint64_t CMMsl::InEarBaseline::formatText(CMMsl::InEarBaseline *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 60);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "conchaMinAccepted");
    v5 = *((_BYTE *)this + 60);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "location");
  v6 = *((_QWORD *)this + 1);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "newOpenLid");
  v7 = *((_QWORD *)this + 2);
  if (v7)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "oldOpenLid");
  v8 = (uint64_t *)*((_QWORD *)this + 3);
  v9 = (uint64_t *)*((_QWORD *)this + 4);
  while (v8 != v9)
  {
    v10 = *v8++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v10 + 32))(v10, a2, "optical");
  }
  v11 = *((_BYTE *)this + 60);
  if ((v11 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "state");
    v11 = *((_BYTE *)this + 60);
  }
  if ((v11 & 8) != 0)
    PB::TextFormatter::format(a2, "tragusMinAccepted");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::InEarBaseline::readFrom(CMMsl::InEarBaseline *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t result;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  BOOL v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  BOOL v47;
  char v48;
  unsigned int v49;
  unint64_t v50;
  char v51;
  char v52;
  unsigned int v53;
  unint64_t v54;
  char v55;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  v8 = (uint64_t **)((char *)this + 24);
  while (1)
  {
    v9 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_20;
      }
LABEL_22:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v12 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 60) |= 1u;
          v21 = *((_QWORD *)a2 + 1);
          v22 = *((_QWORD *)a2 + 2);
          v23 = *(_QWORD *)a2;
          if (v21 <= 0xFFFFFFFFFFFFFFF5 && v21 + 10 <= v22)
          {
            v24 = 0;
            v25 = 0;
            v26 = 0;
            do
            {
              v27 = v21 + 1;
              *((_QWORD *)a2 + 1) = v21 + 1;
              v28 = *(_BYTE *)(v23 + v21);
              v26 |= (unint64_t)(v28 & 0x7F) << v24;
              if ((v28 & 0x80) == 0)
                goto LABEL_71;
              v24 += 7;
              v21 = v27;
              v15 = v25++ > 8;
            }
            while (!v15);
LABEL_56:
            LODWORD(v26) = 0;
            goto LABEL_71;
          }
          v48 = 0;
          v49 = 0;
          v26 = 0;
          if (v22 <= v21)
            v22 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v22 == v21)
            {
              LODWORD(v26) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v50 = v21 + 1;
              v51 = *(_BYTE *)(v23 + v21);
              *((_QWORD *)a2 + 1) = v50;
              v26 |= (unint64_t)(v51 & 0x7F) << v48;
              if (v51 < 0)
              {
                v48 += 7;
                v21 = v50;
                v15 = v49++ > 8;
                if (v15)
                  goto LABEL_56;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v26) = 0;
            }
            break;
          }
LABEL_71:
          *((_DWORD *)this + 12) = v26;
          goto LABEL_76;
        case 2u:
          *((_BYTE *)this + 60) |= 2u;
          v29 = *((_QWORD *)a2 + 1);
          v30 = *((_QWORD *)a2 + 2);
          v31 = *(_QWORD *)a2;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            v32 = 0;
            v33 = 0;
            v34 = 0;
            do
            {
              v35 = v29 + 1;
              *((_QWORD *)a2 + 1) = v29 + 1;
              v36 = *(_BYTE *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0)
                goto LABEL_75;
              v32 += 7;
              v29 = v35;
              v15 = v33++ > 8;
            }
            while (!v15);
LABEL_63:
            LODWORD(v34) = 0;
            goto LABEL_75;
          }
          v52 = 0;
          v53 = 0;
          v34 = 0;
          if (v30 <= v29)
            v30 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v30 == v29)
            {
              LODWORD(v34) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v54 = v29 + 1;
              v55 = *(_BYTE *)(v31 + v29);
              *((_QWORD *)a2 + 1) = v54;
              v34 |= (unint64_t)(v55 & 0x7F) << v52;
              if (v55 < 0)
              {
                v52 += 7;
                v29 = v54;
                v15 = v53++ > 8;
                if (v15)
                  goto LABEL_63;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v34) = 0;
            }
            break;
          }
LABEL_75:
          *((_DWORD *)this + 13) = v34;
          goto LABEL_76;
        case 3u:
          sub_2427406E4(v8);
          v37 = *(_DWORD **)(*((_QWORD *)this + 4) - 8);
          goto LABEL_43;
        case 4u:
          v37 = (_DWORD *)operator new();
          *(_QWORD *)v37 = &off_25135CD78;
          v37[4] = 0;
          v38 = *((_QWORD *)this + 2);
          *((_QWORD *)this + 2) = v37;
          if (v38)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
            v37 = (_DWORD *)*((_QWORD *)this + 2);
          }
          goto LABEL_43;
        case 5u:
          v37 = (_DWORD *)operator new();
          *(_QWORD *)v37 = &off_25135CD78;
          v37[4] = 0;
          v39 = *((_QWORD *)this + 1);
          *((_QWORD *)this + 1) = v37;
          if (v39)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
            v37 = (_DWORD *)*((_QWORD *)this + 1);
          }
LABEL_43:
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v37 + 16))(v37, a2) & 1) == 0)
          {
            return 0;
          }
          PB::Reader::recallMark();
          break;
        case 6u:
          *((_BYTE *)this + 60) |= 4u;
          v40 = *((_QWORD *)a2 + 1);
          if (v40 >= *((_QWORD *)a2 + 2))
          {
            v43 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v41 = v40 + 1;
            v42 = *(unsigned __int8 *)(*(_QWORD *)a2 + v40);
            *((_QWORD *)a2 + 1) = v41;
            v43 = v42 != 0;
          }
          *((_BYTE *)this + 56) = v43;
          goto LABEL_76;
        case 7u:
          *((_BYTE *)this + 60) |= 8u;
          v44 = *((_QWORD *)a2 + 1);
          if (v44 >= *((_QWORD *)a2 + 2))
          {
            v47 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v45 = v44 + 1;
            v46 = *(unsigned __int8 *)(*(_QWORD *)a2 + v44);
            *((_QWORD *)a2 + 1) = v45;
            v47 = v46 != 0;
          }
          *((_BYTE *)this + 57) = v47;
          goto LABEL_76;
        default:
          goto LABEL_20;
      }
      goto LABEL_76;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)a2 + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_22;
      v16 += 7;
      v2 = v18;
      v15 = v17++ > 8;
    }
    while (!v15);
LABEL_20:
    result = PB::Reader::skip(a2);
    if (!(_DWORD)result)
      return result;
LABEL_76:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
}

uint64_t CMMsl::InEarBaseline::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  const PB::Base **v5;
  const PB::Base **v6;
  const PB::Base *v7;
  const PB::Base *v8;
  const PB::Base *v9;
  char v10;

  v3 = this;
  v4 = *(_BYTE *)(this + 60);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 60);
  }
  if ((v4 & 2) != 0)
    this = PB::Writer::writeVarInt(a2);
  v5 = *(const PB::Base ***)(v3 + 24);
  v6 = *(const PB::Base ***)(v3 + 32);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::writeSubmessage(a2, v7);
  }
  v8 = *(const PB::Base **)(v3 + 16);
  if (v8)
    this = PB::Writer::writeSubmessage(a2, v8);
  v9 = *(const PB::Base **)(v3 + 8);
  if (v9)
    this = PB::Writer::writeSubmessage(a2, v9);
  v10 = *(_BYTE *)(v3 + 60);
  if ((v10 & 4) != 0)
  {
    this = PB::Writer::write(a2);
    v10 = *(_BYTE *)(v3 + 60);
  }
  if ((v10 & 8) != 0)
    return PB::Writer::write(a2);
  return this;
}

BOOL CMMsl::InEarBaseline::operator==(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _BOOL8 result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_BYTE *)(a1 + 60);
  v5 = *(_BYTE *)(a2 + 60);
  if ((v4 & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 60) & 1) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 60) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 60) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 60) & 2) == 0 || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 60) & 2) != 0)
  {
    return 0;
  }
  v6 = *(uint64_t **)(a1 + 24);
  v7 = *(uint64_t **)(a1 + 32);
  v8 = *(uint64_t **)(a2 + 24);
  if ((char *)v7 - (char *)v6 == *(_QWORD *)(a2 + 32) - (_QWORD)v8)
  {
    while (v6 != v7)
    {
      result = CMMsl::ClefMeasurement::operator==(*v6, *v8);
      if (!result)
        return result;
      ++v6;
      ++v8;
    }
    v10 = *(_QWORD *)(a1 + 16);
    v11 = *(_QWORD *)(a2 + 16);
    if (v10)
    {
      if (!v11 || !CMMsl::ClefMeasurement::operator==(v10, v11))
        return 0;
    }
    else if (v11)
    {
      return 0;
    }
    v12 = *(_QWORD *)(a1 + 8);
    v13 = *(_QWORD *)(a2 + 8);
    if (v12)
    {
      if (!v13 || !CMMsl::ClefMeasurement::operator==(v12, v13))
        return 0;
    }
    else if (v13)
    {
      return 0;
    }
    if ((v4 & 4) != 0)
    {
      if ((v5 & 4) == 0 || *(unsigned __int8 *)(a1 + 56) != *(unsigned __int8 *)(a2 + 56))
        return 0;
    }
    else if ((v5 & 4) != 0)
    {
      return 0;
    }
    result = (v5 & 8) == 0;
    if ((v4 & 8) == 0)
      return result;
    if ((v5 & 8) != 0 && *(unsigned __int8 *)(a1 + 57) == *(unsigned __int8 *)(a2 + 57))
      return 1;
  }
  return 0;
}

uint64_t CMMsl::InEarBaseline::hash_value(CMMsl::InEarBaseline *this)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  float v8;
  float v9;
  BOOL v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  float v17;
  float v18;
  BOOL v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = *((_BYTE *)this + 60);
  if ((v2 & 1) != 0)
  {
    v3 = *((unsigned int *)this + 12);
    if ((*((_BYTE *)this + 60) & 2) != 0)
      goto LABEL_3;
  }
  else
  {
    v3 = 0;
    if ((*((_BYTE *)this + 60) & 2) != 0)
    {
LABEL_3:
      v4 = *((int *)this + 13);
      goto LABEL_6;
    }
  }
  v4 = 0;
LABEL_6:
  v5 = sub_242740C00(*((uint64_t **)this + 3), *((uint64_t **)this + 4));
  v6 = *((_QWORD *)this + 2);
  if (v6)
  {
    v7 = *(_BYTE *)(v6 + 16);
    v8 = *(float *)(v6 + 8);
    v9 = *(float *)(v6 + 12);
    v10 = v8 == 0.0 || (v7 & 1) == 0;
    v11 = LODWORD(v8);
    if (v10)
      v11 = 0;
    v12 = v7 & 2;
    v13 = v9 == 0.0 || v12 == 0;
    v14 = LODWORD(v9);
    if (v13)
      v14 = 0;
    v6 = v14 ^ v11;
  }
  v15 = *((_QWORD *)this + 1);
  if (v15)
  {
    v16 = *(_BYTE *)(v15 + 16);
    v17 = *(float *)(v15 + 8);
    v18 = *(float *)(v15 + 12);
    v19 = v17 == 0.0 || (v16 & 1) == 0;
    v20 = LODWORD(v17);
    if (v19)
      v20 = 0;
    v21 = v16 & 2;
    v22 = v18 == 0.0 || v21 == 0;
    v23 = LODWORD(v18);
    if (v22)
      v23 = 0;
    v15 = v23 ^ v20;
  }
  if ((v2 & 4) != 0)
  {
    v24 = *((unsigned __int8 *)this + 56);
    if ((v2 & 8) != 0)
      goto LABEL_32;
LABEL_34:
    v25 = 0;
    return v4 ^ v3 ^ v6 ^ v15 ^ v24 ^ v25 ^ v5;
  }
  v24 = 0;
  if ((v2 & 8) == 0)
    goto LABEL_34;
LABEL_32:
  v25 = *((unsigned __int8 *)this + 57);
  return v4 ^ v3 ^ v6 ^ v15 ^ v24 ^ v25 ^ v5;
}

_QWORD *CMMsl::InEarBaseline::makeOldOpenLid(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[2])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135CD78;
    *(_DWORD *)(v2 + 16) = 0;
    this = (_QWORD *)v1[2];
    v1[2] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::InEarBaseline::makeNewOpenLid(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135CD78;
    *(_DWORD *)(v2 + 16) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t CMMsl::InEarBaselining::InEarBaselining(uint64_t this)
{
  *(_DWORD *)(this + 56) = 0;
  *(_QWORD *)this = &off_25135E2B0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

{
  *(_DWORD *)(this + 56) = 0;
  *(_QWORD *)this = &off_25135E2B0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

void CMMsl::InEarBaselining::~InEarBaselining(CMMsl::InEarBaselining *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_25135E2B0;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  PB::Base::~Base(this);
}

{
  CMMsl::InEarBaselining::~InEarBaselining(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::InEarBaselining *CMMsl::InEarBaselining::InEarBaselining(CMMsl::InEarBaselining *this, const CMMsl::InEarBaselining *a2)
{
  uint64_t *v4;
  char v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  int v26;
  int v27;
  uint64_t v28;
  char v29;
  int v30;
  int v32;
  int v33;

  *(_QWORD *)this = &off_25135E2B0;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if ((*((_BYTE *)a2 + 56) & 1) != 0)
  {
    v6 = *((_QWORD *)a2 + 4);
    *((_BYTE *)this + 56) = 1;
    *((_QWORD *)this + 4) = v6;
    v5 = 9;
    if ((*((_BYTE *)a2 + 56) & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = 8;
  if ((*((_BYTE *)a2 + 56) & 8) != 0)
  {
LABEL_5:
    v7 = *((_DWORD *)a2 + 12);
    *((_BYTE *)this + 56) = v5;
    *((_DWORD *)this + 12) = v7;
  }
LABEL_6:
  if (!*((_QWORD *)a2 + 3))
    goto LABEL_14;
  v8 = operator new();
  v9 = *((_QWORD *)a2 + 3);
  *(_QWORD *)v8 = &off_25135CD78;
  *(_DWORD *)(v8 + 16) = 0;
  v10 = *(_BYTE *)(v9 + 16);
  if ((v10 & 1) != 0)
  {
    v12 = *(_DWORD *)(v9 + 8);
    *(_BYTE *)(v8 + 16) = 1;
    *(_DWORD *)(v8 + 8) = v12;
    v11 = 3;
    if ((v10 & 2) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
  v11 = 2;
  if ((*(_BYTE *)(v9 + 16) & 2) != 0)
  {
LABEL_11:
    v13 = *(_DWORD *)(v9 + 12);
    *(_BYTE *)(v8 + 16) = v11;
    *(_DWORD *)(v8 + 12) = v13;
  }
LABEL_12:
  v14 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v8;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
LABEL_14:
  if (!*((_QWORD *)a2 + 1))
    goto LABEL_22;
  v15 = operator new();
  v16 = *((_QWORD *)a2 + 1);
  *(_QWORD *)v15 = &off_25135CD78;
  *(_DWORD *)(v15 + 16) = 0;
  v17 = *(_BYTE *)(v16 + 16);
  if ((v17 & 1) != 0)
  {
    v19 = *(_DWORD *)(v16 + 8);
    *(_BYTE *)(v15 + 16) = 1;
    *(_DWORD *)(v15 + 8) = v19;
    v18 = 3;
    if ((v17 & 2) == 0)
      goto LABEL_20;
    goto LABEL_19;
  }
  v18 = 2;
  if ((*(_BYTE *)(v16 + 16) & 2) != 0)
  {
LABEL_19:
    v20 = *(_DWORD *)(v16 + 12);
    *(_BYTE *)(v15 + 16) = v18;
    *(_DWORD *)(v15 + 12) = v20;
  }
LABEL_20:
  v21 = *v4;
  *v4 = v15;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
LABEL_22:
  if (!*((_QWORD *)a2 + 2))
    goto LABEL_30;
  v22 = operator new();
  v23 = *((_QWORD *)a2 + 2);
  *(_QWORD *)v22 = &off_25135CD78;
  *(_DWORD *)(v22 + 16) = 0;
  v24 = *(_BYTE *)(v23 + 16);
  if ((v24 & 1) != 0)
  {
    v26 = *(_DWORD *)(v23 + 8);
    *(_BYTE *)(v22 + 16) = 1;
    *(_DWORD *)(v22 + 8) = v26;
    v25 = 3;
    if ((v24 & 2) == 0)
      goto LABEL_28;
    goto LABEL_27;
  }
  v25 = 2;
  if ((*(_BYTE *)(v23 + 16) & 2) != 0)
  {
LABEL_27:
    v27 = *(_DWORD *)(v23 + 12);
    *(_BYTE *)(v22 + 16) = v25;
    *(_DWORD *)(v22 + 12) = v27;
  }
LABEL_28:
  v28 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v22;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
LABEL_30:
  v29 = *((_BYTE *)a2 + 56);
  if ((v29 & 2) == 0)
  {
    if ((*((_BYTE *)a2 + 56) & 0x10) == 0)
      goto LABEL_32;
LABEL_36:
    v33 = *((_DWORD *)a2 + 13);
    *((_BYTE *)this + 56) |= 0x10u;
    *((_DWORD *)this + 13) = v33;
    if ((*((_BYTE *)a2 + 56) & 4) == 0)
      return this;
    goto LABEL_33;
  }
  v32 = *((_DWORD *)a2 + 10);
  *((_BYTE *)this + 56) |= 2u;
  *((_DWORD *)this + 10) = v32;
  v29 = *((_BYTE *)a2 + 56);
  if ((v29 & 0x10) != 0)
    goto LABEL_36;
LABEL_32:
  if ((v29 & 4) != 0)
  {
LABEL_33:
    v30 = *((_DWORD *)a2 + 11);
    *((_BYTE *)this + 56) |= 4u;
    *((_DWORD *)this + 11) = v30;
  }
  return this;
}

uint64_t CMMsl::InEarBaselining::operator=(uint64_t a1, const CMMsl::InEarBaselining *a2)
{
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;

  if ((const CMMsl::InEarBaselining *)a1 != a2)
  {
    CMMsl::InEarBaselining::InEarBaselining((CMMsl::InEarBaselining *)&v11, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    v12 = v3;
    v4 = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a1 + 52) = v17;
    v17 = v4;
    *(_QWORD *)&v3 = v15;
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 32) = v14;
    *(_QWORD *)(a1 + 40) = v3;
    v7 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v18;
    v18 = v7;
    v8 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v16;
    v16 = v8;
    v9 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v13;
    v13 = v9;
    v14 = v5;
    v15 = v6;
    CMMsl::InEarBaselining::~InEarBaselining((CMMsl::InEarBaselining *)&v11);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::InEarBaselining *a2, CMMsl::InEarBaselining *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float result;

  v3 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v3;
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  v5 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v5;
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v7;
  v8 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v8;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  result = *((float *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((float *)a2 + 11) = result;
  return result;
}

uint64_t CMMsl::InEarBaselining::InEarBaselining(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = &off_25135E2B0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v8 = *v4;
  *v4 = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v9;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  return a1;
}

uint64_t CMMsl::InEarBaselining::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;

  if (a1 != a2)
  {
    CMMsl::InEarBaselining::InEarBaselining((uint64_t)&v11, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    v12 = v3;
    v4 = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a1 + 52) = v17;
    v17 = v4;
    *(_QWORD *)&v3 = v15;
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 32) = v14;
    *(_QWORD *)(a1 + 40) = v3;
    v7 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v18;
    v18 = v7;
    v8 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v16;
    v16 = v8;
    v9 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v13;
    v13 = v9;
    v14 = v5;
    v15 = v6;
    CMMsl::InEarBaselining::~InEarBaselining((CMMsl::InEarBaselining *)&v11);
  }
  return a1;
}

uint64_t CMMsl::InEarBaselining::formatText(CMMsl::InEarBaselining *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "baseline");
  v6 = *((_BYTE *)this + 56);
  if ((v6 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "conchaOpenResponse", *((float *)this + 10));
    v6 = *((_BYTE *)this + 56);
  }
  if ((v6 & 4) != 0)
    PB::TextFormatter::format(a2, "filter", *((float *)this + 11));
  v7 = *((_QWORD *)this + 2);
  if (v7)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "lastBaseline");
  if ((*((_BYTE *)this + 56) & 8) != 0)
    PB::TextFormatter::format(a2, "location");
  v8 = *((_QWORD *)this + 3);
  if (v8)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "minimum");
  v9 = *((_BYTE *)this + 56);
  if ((v9 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "rho", *((float *)this + 13));
    v9 = *((_BYTE *)this + 56);
  }
  if ((v9 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 4));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::InEarBaselining::readFrom(CMMsl::InEarBaselining *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_21:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 56) |= 1u;
          v20 = *((_QWORD *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_50;
          *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v20);
          v21 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_60;
        case 2u:
          *((_BYTE *)this + 56) |= 8u;
          v22 = *((_QWORD *)a2 + 1);
          v23 = *((_QWORD *)a2 + 2);
          v24 = *(_QWORD *)a2;
          if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
          {
            v25 = 0;
            v26 = 0;
            v27 = 0;
            do
            {
              v28 = v22 + 1;
              *((_QWORD *)a2 + 1) = v22 + 1;
              v29 = *(_BYTE *)(v24 + v22);
              v27 |= (unint64_t)(v29 & 0x7F) << v25;
              if ((v29 & 0x80) == 0)
                goto LABEL_64;
              v25 += 7;
              v22 = v28;
              v14 = v26++ > 8;
            }
            while (!v14);
LABEL_57:
            LODWORD(v27) = 0;
            goto LABEL_64;
          }
          v37 = 0;
          v38 = 0;
          v27 = 0;
          if (v23 <= v22)
            v23 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v23 == v22)
            {
              LODWORD(v27) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v39 = v22 + 1;
              v40 = *(_BYTE *)(v24 + v22);
              *((_QWORD *)a2 + 1) = v39;
              v27 |= (unint64_t)(v40 & 0x7F) << v37;
              if (v40 < 0)
              {
                v37 += 7;
                v22 = v39;
                v14 = v38++ > 8;
                if (v14)
                  goto LABEL_57;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v27) = 0;
            }
            break;
          }
LABEL_64:
          *((_DWORD *)this + 12) = v27;
          goto LABEL_65;
        case 3u:
          v30 = (_DWORD *)operator new();
          *(_QWORD *)v30 = &off_25135CD78;
          v30[4] = 0;
          v31 = *((_QWORD *)this + 3);
          *((_QWORD *)this + 3) = v30;
          if (v31)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
            v30 = (_DWORD *)*((_QWORD *)this + 3);
          }
          goto LABEL_39;
        case 4u:
          v30 = (_DWORD *)operator new();
          *(_QWORD *)v30 = &off_25135CD78;
          v30[4] = 0;
          v32 = *((_QWORD *)this + 1);
          *((_QWORD *)this + 1) = v30;
          if (v32)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
            v30 = (_DWORD *)*((_QWORD *)this + 1);
          }
          goto LABEL_39;
        case 5u:
          v30 = (_DWORD *)operator new();
          *(_QWORD *)v30 = &off_25135CD78;
          v30[4] = 0;
          v33 = *((_QWORD *)this + 2);
          *((_QWORD *)this + 2) = v30;
          if (v33)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
            v30 = (_DWORD *)*((_QWORD *)this + 2);
          }
LABEL_39:
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v30 + 16))(v30, a2) & 1) == 0)
          {
            return 0;
          }
          PB::Reader::recallMark();
          break;
        case 6u:
          *((_BYTE *)this + 56) |= 2u;
          v34 = *((_QWORD *)a2 + 1);
          if (v34 > 0xFFFFFFFFFFFFFFFBLL || v34 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_50;
          *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v34);
          goto LABEL_59;
        case 7u:
          *((_BYTE *)this + 56) |= 0x10u;
          v35 = *((_QWORD *)a2 + 1);
          if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_50;
          *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v35);
          goto LABEL_59;
        case 8u:
          *((_BYTE *)this + 56) |= 4u;
          v36 = *((_QWORD *)a2 + 1);
          if (v36 <= 0xFFFFFFFFFFFFFFFBLL && v36 + 4 <= *((_QWORD *)a2 + 2))
          {
            *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v36);
LABEL_59:
            v21 = *((_QWORD *)a2 + 1) + 4;
LABEL_60:
            *((_QWORD *)a2 + 1) = v21;
          }
          else
          {
LABEL_50:
            *((_BYTE *)a2 + 24) = 1;
          }
          goto LABEL_65;
        default:
          goto LABEL_19;
      }
      goto LABEL_65;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_21;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    result = PB::Reader::skip(a2);
    if (!(_DWORD)result)
      return result;
LABEL_65:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
}

uint64_t CMMsl::InEarBaselining::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  const PB::Base *v5;
  const PB::Base *v6;
  const PB::Base *v7;
  char v8;

  v3 = this;
  v4 = *(_BYTE *)(this + 56);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32));
    v4 = *(_BYTE *)(v3 + 56);
  }
  if ((v4 & 8) != 0)
    this = PB::Writer::writeVarInt(a2);
  v5 = *(const PB::Base **)(v3 + 24);
  if (v5)
    this = PB::Writer::writeSubmessage(a2, v5);
  v6 = *(const PB::Base **)(v3 + 8);
  if (v6)
    this = PB::Writer::writeSubmessage(a2, v6);
  v7 = *(const PB::Base **)(v3 + 16);
  if (v7)
    this = PB::Writer::writeSubmessage(a2, v7);
  v8 = *(_BYTE *)(v3 + 56);
  if ((v8 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 40));
    v8 = *(_BYTE *)(v3 + 56);
    if ((v8 & 0x10) == 0)
    {
LABEL_13:
      if ((v8 & 4) == 0)
        return this;
      return PB::Writer::write(a2, *(float *)(v3 + 44));
    }
  }
  else if ((*(_BYTE *)(v3 + 56) & 0x10) == 0)
  {
    goto LABEL_13;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  if ((*(_BYTE *)(v3 + 56) & 4) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 44));
  return this;
}

BOOL CMMsl::InEarBaselining::operator==(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 result;

  v4 = *(_BYTE *)(a1 + 56);
  v5 = *(_BYTE *)(a2 + 56);
  if ((v4 & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 1) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 56) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 56) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 8) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 56) & 8) != 0)
  {
    return 0;
  }
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a2 + 24);
  if (v6)
  {
    if (!v7 || !CMMsl::ClefMeasurement::operator==(v6, v7))
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a2 + 8);
  if (v8)
  {
    if (!v9 || !CMMsl::ClefMeasurement::operator==(v8, v9))
      return 0;
  }
  else if (v9)
  {
    return 0;
  }
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a2 + 16);
  if (v10)
  {
    if (!v11 || !CMMsl::ClefMeasurement::operator==(v10, v11))
      return 0;
  }
  else if (v11)
  {
    return 0;
  }
  if ((v4 & 2) != 0)
  {
    if ((v5 & 2) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v5 & 2) != 0)
  {
    return 0;
  }
  if ((v4 & 0x10) != 0)
  {
    if ((v5 & 0x10) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v5 & 0x10) != 0)
  {
    return 0;
  }
  result = (v5 & 4) == 0;
  if ((v4 & 4) == 0)
    return result;
  return (v5 & 4) != 0 && *(float *)(a1 + 44) == *(float *)(a2 + 44);
}

uint64_t CMMsl::InEarBaselining::hash_value(CMMsl::InEarBaselining *this)
{
  double v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  float v5;
  float v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  float v14;
  float v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  float v23;
  float v24;
  BOOL v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  float v35;

  if ((*((_BYTE *)this + 56) & 1) != 0)
  {
    v1 = *((double *)this + 4);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 56) & 8) != 0)
      goto LABEL_3;
  }
  else
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 56) & 8) != 0)
    {
LABEL_3:
      v2 = *((unsigned int *)this + 12);
      goto LABEL_8;
    }
  }
  v2 = 0;
LABEL_8:
  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    v4 = *(_BYTE *)(v3 + 16);
    v5 = *(float *)(v3 + 8);
    v6 = *(float *)(v3 + 12);
    v7 = v5 == 0.0 || (v4 & 1) == 0;
    v8 = LODWORD(v5);
    if (v7)
      v8 = 0;
    v9 = v4 & 2;
    v10 = v6 == 0.0 || v9 == 0;
    v11 = LODWORD(v6);
    if (v10)
      v11 = 0;
    v3 = v11 ^ v8;
  }
  v12 = *((_QWORD *)this + 1);
  if (v12)
  {
    v13 = *(_BYTE *)(v12 + 16);
    v14 = *(float *)(v12 + 8);
    v15 = *(float *)(v12 + 12);
    v16 = v14 == 0.0 || (v13 & 1) == 0;
    v17 = LODWORD(v14);
    if (v16)
      v17 = 0;
    v18 = v13 & 2;
    v19 = v15 == 0.0 || v18 == 0;
    v20 = LODWORD(v15);
    if (v19)
      v20 = 0;
    v12 = v20 ^ v17;
  }
  v21 = *((_QWORD *)this + 2);
  if (v21)
  {
    v22 = *(_BYTE *)(v21 + 16);
    v23 = *(float *)(v21 + 8);
    v24 = *(float *)(v21 + 12);
    v25 = v23 == 0.0 || (v22 & 1) == 0;
    v26 = LODWORD(v23);
    if (v25)
      v26 = 0;
    v27 = v22 & 2;
    v28 = v24 == 0.0 || v27 == 0;
    v29 = LODWORD(v24);
    if (v28)
      v29 = 0;
    v21 = v29 ^ v26;
  }
  if ((*((_BYTE *)this + 56) & 2) != 0)
  {
    v35 = *((float *)this + 10);
    v30 = LODWORD(v35);
    if (v35 == 0.0)
      v30 = 0;
    if ((*((_BYTE *)this + 56) & 0x10) != 0)
    {
LABEL_46:
      v31 = *((float *)this + 13);
      v32 = LODWORD(v31);
      if (v31 == 0.0)
        v32 = 0;
      if ((*((_BYTE *)this + 56) & 4) != 0)
        goto LABEL_49;
LABEL_56:
      v34 = 0;
      return v2 ^ *(_QWORD *)&v1 ^ v3 ^ v12 ^ v21 ^ v30 ^ v32 ^ v34;
    }
  }
  else
  {
    v30 = 0;
    if ((*((_BYTE *)this + 56) & 0x10) != 0)
      goto LABEL_46;
  }
  v32 = 0;
  if ((*((_BYTE *)this + 56) & 4) == 0)
    goto LABEL_56;
LABEL_49:
  v33 = *((float *)this + 11);
  v34 = LODWORD(v33);
  if (v33 == 0.0)
    v34 = 0;
  return v2 ^ *(_QWORD *)&v1 ^ v3 ^ v12 ^ v21 ^ v30 ^ v32 ^ v34;
}

_QWORD *CMMsl::InEarBaselining::makeMinimum(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[3])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135CD78;
    *(_DWORD *)(v2 + 16) = 0;
    this = (_QWORD *)v1[3];
    v1[3] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::InEarBaselining::makeBaseline(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135CD78;
    *(_DWORD *)(v2 + 16) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::InEarBaselining::makeLastBaseline(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[2])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135CD78;
    *(_DWORD *)(v2 + 16) = 0;
    this = (_QWORD *)v1[2];
    v1[2] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t CMMsl::InEarConstraints::InEarConstraints(uint64_t this)
{
  *(_DWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = &off_25135E2E8;
  return this;
}

{
  *(_DWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = &off_25135E2E8;
  return this;
}

void CMMsl::InEarConstraints::~InEarConstraints(CMMsl::InEarConstraints *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_25135E2E8;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  PB::Base::~Base(this);
}

{
  CMMsl::InEarConstraints::~InEarConstraints(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::InEarConstraints *CMMsl::InEarConstraints::InEarConstraints(CMMsl::InEarConstraints *this, const CMMsl::InEarConstraints *a2)
{
  uint64_t *v4;
  __int16 v5;
  __int16 v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  int v20;
  int v21;
  uint64_t v22;
  __int16 v23;
  char v24;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;

  *(_QWORD *)this = &off_25135E2E8;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_DWORD *)this + 12) = 0;
  *((_QWORD *)this + 2) = 0;
  v5 = *((_WORD *)a2 + 24);
  if ((v5 & 1) != 0)
  {
    v7 = *((_QWORD *)a2 + 3);
    *((_WORD *)this + 24) = 1;
    *((_QWORD *)this + 3) = v7;
    v6 = 3;
    if ((*((_WORD *)a2 + 24) & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 2;
  if ((v5 & 2) != 0)
  {
LABEL_5:
    v8 = *((_DWORD *)a2 + 8);
    *((_WORD *)this + 24) = v6;
    *((_DWORD *)this + 8) = v8;
  }
LABEL_6:
  if (!*((_QWORD *)a2 + 1))
    goto LABEL_14;
  v9 = operator new();
  v10 = *((_QWORD *)a2 + 1);
  *(_QWORD *)v9 = &off_25135CD78;
  *(_DWORD *)(v9 + 16) = 0;
  v11 = *(_BYTE *)(v10 + 16);
  if ((v11 & 1) != 0)
  {
    v13 = *(_DWORD *)(v10 + 8);
    *(_BYTE *)(v9 + 16) = 1;
    *(_DWORD *)(v9 + 8) = v13;
    v12 = 3;
    if ((v11 & 2) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
  v12 = 2;
  if ((*(_BYTE *)(v10 + 16) & 2) != 0)
  {
LABEL_11:
    v14 = *(_DWORD *)(v10 + 12);
    *(_BYTE *)(v9 + 16) = v12;
    *(_DWORD *)(v9 + 12) = v14;
  }
LABEL_12:
  v15 = *v4;
  *v4 = v9;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
LABEL_14:
  if (!*((_QWORD *)a2 + 2))
    goto LABEL_22;
  v16 = operator new();
  v17 = *((_QWORD *)a2 + 2);
  *(_QWORD *)v16 = &off_25135CD78;
  *(_DWORD *)(v16 + 16) = 0;
  v18 = *(_BYTE *)(v17 + 16);
  if ((v18 & 1) != 0)
  {
    v20 = *(_DWORD *)(v17 + 8);
    *(_BYTE *)(v16 + 16) = 1;
    *(_DWORD *)(v16 + 8) = v20;
    v19 = 3;
    if ((v18 & 2) == 0)
      goto LABEL_20;
    goto LABEL_19;
  }
  v19 = 2;
  if ((*(_BYTE *)(v17 + 16) & 2) != 0)
  {
LABEL_19:
    v21 = *(_DWORD *)(v17 + 12);
    *(_BYTE *)(v16 + 16) = v19;
    *(_DWORD *)(v16 + 12) = v21;
  }
LABEL_20:
  v22 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v16;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
LABEL_22:
  v23 = *((_WORD *)a2 + 24);
  if ((v23 & 0x80) != 0)
  {
    v26 = *((_BYTE *)a2 + 41);
    *((_WORD *)this + 24) |= 0x80u;
    *((_BYTE *)this + 41) = v26;
    v23 = *((_WORD *)a2 + 24);
    if ((v23 & 0x20) == 0)
    {
LABEL_24:
      if ((v23 & 4) == 0)
        goto LABEL_25;
      goto LABEL_35;
    }
  }
  else if ((v23 & 0x20) == 0)
  {
    goto LABEL_24;
  }
  v27 = *((_BYTE *)a2 + 39);
  *((_WORD *)this + 24) |= 0x20u;
  *((_BYTE *)this + 39) = v27;
  v23 = *((_WORD *)a2 + 24);
  if ((v23 & 4) == 0)
  {
LABEL_25:
    if ((v23 & 8) == 0)
      goto LABEL_26;
    goto LABEL_36;
  }
LABEL_35:
  v28 = *((_BYTE *)a2 + 36);
  *((_WORD *)this + 24) |= 4u;
  *((_BYTE *)this + 36) = v28;
  v23 = *((_WORD *)a2 + 24);
  if ((v23 & 8) == 0)
  {
LABEL_26:
    if ((v23 & 0x40) == 0)
      goto LABEL_27;
    goto LABEL_37;
  }
LABEL_36:
  v29 = *((_BYTE *)a2 + 37);
  *((_WORD *)this + 24) |= 8u;
  *((_BYTE *)this + 37) = v29;
  v23 = *((_WORD *)a2 + 24);
  if ((v23 & 0x40) == 0)
  {
LABEL_27:
    if ((v23 & 0x200) == 0)
      goto LABEL_28;
    goto LABEL_38;
  }
LABEL_37:
  v30 = *((_BYTE *)a2 + 40);
  *((_WORD *)this + 24) |= 0x40u;
  *((_BYTE *)this + 40) = v30;
  v23 = *((_WORD *)a2 + 24);
  if ((v23 & 0x200) == 0)
  {
LABEL_28:
    if ((v23 & 0x100) == 0)
      goto LABEL_29;
    goto LABEL_39;
  }
LABEL_38:
  v31 = *((_BYTE *)a2 + 43);
  *((_WORD *)this + 24) |= 0x200u;
  *((_BYTE *)this + 43) = v31;
  v23 = *((_WORD *)a2 + 24);
  if ((v23 & 0x100) == 0)
  {
LABEL_29:
    if ((v23 & 0x10) == 0)
      goto LABEL_30;
LABEL_40:
    v33 = *((_BYTE *)a2 + 38);
    *((_WORD *)this + 24) |= 0x10u;
    *((_BYTE *)this + 38) = v33;
    if ((*((_WORD *)a2 + 24) & 0x400) == 0)
      return this;
    goto LABEL_31;
  }
LABEL_39:
  v32 = *((_BYTE *)a2 + 42);
  *((_WORD *)this + 24) |= 0x100u;
  *((_BYTE *)this + 42) = v32;
  v23 = *((_WORD *)a2 + 24);
  if ((v23 & 0x10) != 0)
    goto LABEL_40;
LABEL_30:
  if ((v23 & 0x400) != 0)
  {
LABEL_31:
    v24 = *((_BYTE *)a2 + 44);
    *((_WORD *)this + 24) |= 0x400u;
    *((_BYTE *)this + 44) = v24;
  }
  return this;
}

CMMsl *CMMsl::InEarConstraints::operator=(CMMsl *a1, const CMMsl::InEarConstraints *a2)
{
  CMMsl::InEarConstraints *v3;
  _BYTE v5[56];

  if (a1 != a2)
  {
    CMMsl::InEarConstraints::InEarConstraints((CMMsl::InEarConstraints *)v5, a2);
    CMMsl::swap(a1, (CMMsl::InEarConstraints *)v5, v3);
    CMMsl::InEarConstraints::~InEarConstraints((CMMsl::InEarConstraints *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::InEarConstraints *a2, CMMsl::InEarConstraints *a3)
{
  int v3;
  double result;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  result = *((double *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((double *)a2 + 3) = result;
  v5 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v5;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 41);
  *((_BYTE *)this + 41) = *((_BYTE *)a2 + 41);
  *((_BYTE *)a2 + 41) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 39);
  *((_BYTE *)this + 39) = *((_BYTE *)a2 + 39);
  *((_BYTE *)a2 + 39) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 36);
  *((_BYTE *)this + 36) = *((_BYTE *)a2 + 36);
  *((_BYTE *)a2 + 36) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 37);
  *((_BYTE *)this + 37) = *((_BYTE *)a2 + 37);
  *((_BYTE *)a2 + 37) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 40);
  *((_BYTE *)this + 40) = *((_BYTE *)a2 + 40);
  *((_BYTE *)a2 + 40) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 43);
  *((_BYTE *)this + 43) = *((_BYTE *)a2 + 43);
  *((_BYTE *)a2 + 43) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 42);
  *((_BYTE *)this + 42) = *((_BYTE *)a2 + 42);
  *((_BYTE *)a2 + 42) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 38);
  *((_BYTE *)this + 38) = *((_BYTE *)a2 + 38);
  *((_BYTE *)a2 + 38) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 44);
  *((_BYTE *)this + 44) = *((_BYTE *)a2 + 44);
  *((_BYTE *)a2 + 44) = v7;
  return result;
}

uint64_t CMMsl::InEarConstraints::InEarConstraints(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_25135E2E8;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_BYTE *)(a1 + 39) = *(_BYTE *)(a2 + 39);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_BYTE *)(a1 + 37) = *(_BYTE *)(a2 + 37);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 43) = *(_BYTE *)(a2 + 43);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  *(_BYTE *)(a1 + 38) = *(_BYTE *)(a2 + 38);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  return a1;
}

CMMsl *CMMsl::InEarConstraints::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::InEarConstraints *v3;
  _BYTE v5[56];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::InEarConstraints::InEarConstraints((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::InEarConstraints *)v5, v3);
    CMMsl::InEarConstraints::~InEarConstraints((CMMsl::InEarConstraints *)v5);
  }
  return a1;
}

uint64_t CMMsl::InEarConstraints::formatText(CMMsl::InEarConstraints *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  __int16 v9;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 24);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "above");
    v5 = *((_WORD *)this + 24);
  }
  if ((v5 & 8) != 0)
    PB::TextFormatter::format(a2, "below");
  v6 = *((_QWORD *)this + 1);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "current");
  v7 = *((_WORD *)this + 24);
  if ((v7 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "location");
    v7 = *((_WORD *)this + 24);
    if ((v7 & 0x10) == 0)
    {
LABEL_9:
      if ((v7 & 0x20) == 0)
        goto LABEL_10;
      goto LABEL_23;
    }
  }
  else if ((v7 & 0x10) == 0)
  {
    goto LABEL_9;
  }
  PB::TextFormatter::format(a2, "moving");
  v7 = *((_WORD *)this + 24);
  if ((v7 & 0x20) == 0)
  {
LABEL_10:
    if ((v7 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "partialin");
  if ((*((_WORD *)this + 24) & 0x40) != 0)
LABEL_11:
    PB::TextFormatter::format(a2, "stable");
LABEL_12:
  v8 = *((_QWORD *)this + 2);
  if (v8)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "threshold");
  v9 = *((_WORD *)this + 24);
  if ((v9 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 3));
    v9 = *((_WORD *)this + 24);
    if ((v9 & 0x80) == 0)
    {
LABEL_16:
      if ((v9 & 0x100) == 0)
        goto LABEL_17;
      goto LABEL_27;
    }
  }
  else if ((v9 & 0x80) == 0)
  {
    goto LABEL_16;
  }
  PB::TextFormatter::format(a2, "upright");
  v9 = *((_WORD *)this + 24);
  if ((v9 & 0x100) == 0)
  {
LABEL_17:
    if ((v9 & 0x200) == 0)
      goto LABEL_18;
LABEL_28:
    PB::TextFormatter::format(a2, "vertical");
    if ((*((_WORD *)this + 24) & 0x400) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_19;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "upsidedown");
  v9 = *((_WORD *)this + 24);
  if ((v9 & 0x200) != 0)
    goto LABEL_28;
LABEL_18:
  if ((v9 & 0x400) != 0)
LABEL_19:
    PB::TextFormatter::format(a2, "walking");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::InEarConstraints::readFrom(CMMsl::InEarConstraints *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  BOOL v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  BOOL v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  BOOL v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  BOOL v48;
  unint64_t v49;
  unint64_t v50;
  int v51;
  BOOL v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  BOOL v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  BOOL v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  BOOL v64;
  unint64_t v65;
  unint64_t v66;
  int v67;
  BOOL v68;
  char v69;
  unsigned int v70;
  unint64_t v71;
  char v72;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      break;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_25:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 24) |= 1u;
        v21 = *((_QWORD *)a2 + 1);
        if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v21);
          *((_QWORD *)a2 + 1) += 8;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
        goto LABEL_20;
      case 2u:
        *((_WORD *)this + 24) |= 2u;
        v22 = *((_QWORD *)a2 + 1);
        v23 = *((_QWORD *)a2 + 2);
        v24 = *(_QWORD *)a2;
        if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
        {
          v25 = 0;
          v26 = 0;
          v27 = 0;
          do
          {
            v28 = v22 + 1;
            *((_QWORD *)a2 + 1) = v22 + 1;
            v29 = *(_BYTE *)(v24 + v22);
            v27 |= (unint64_t)(v29 & 0x7F) << v25;
            if ((v29 & 0x80) == 0)
              goto LABEL_91;
            v25 += 7;
            v22 = v28;
            v14 = v26++ > 8;
          }
          while (!v14);
LABEL_68:
          LODWORD(v27) = 0;
          goto LABEL_91;
        }
        v69 = 0;
        v70 = 0;
        v27 = 0;
        if (v23 <= v22)
          v23 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v23 == v22)
          {
            LODWORD(v27) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v71 = v22 + 1;
            v72 = *(_BYTE *)(v24 + v22);
            *((_QWORD *)a2 + 1) = v71;
            v27 |= (unint64_t)(v72 & 0x7F) << v69;
            if (v72 < 0)
            {
              v69 += 7;
              v22 = v71;
              v14 = v70++ > 8;
              if (v14)
                goto LABEL_68;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v27) = 0;
          }
          break;
        }
LABEL_91:
        *((_DWORD *)this + 8) = v27;
        goto LABEL_20;
      case 3u:
        v30 = (_DWORD *)operator new();
        *(_QWORD *)v30 = &off_25135CD78;
        v30[4] = 0;
        v31 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v30;
        if (v31)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
          v30 = (_DWORD *)*((_QWORD *)this + 1);
        }
        goto LABEL_41;
      case 4u:
        v30 = (_DWORD *)operator new();
        *(_QWORD *)v30 = &off_25135CD78;
        v30[4] = 0;
        v32 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v30;
        if (v32)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
          v30 = (_DWORD *)*((_QWORD *)this + 2);
        }
LABEL_41:
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v30 + 16))(v30, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
LABEL_20:
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        v4 = *((unsigned __int8 *)a2 + 24);
        if (v2 >= v3 || v4 != 0)
          return v4 == 0;
        break;
      case 5u:
        *((_WORD *)this + 24) |= 0x80u;
        v33 = *((_QWORD *)a2 + 1);
        if (v33 >= *((_QWORD *)a2 + 2))
        {
          v36 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v34 = v33 + 1;
          v35 = *(unsigned __int8 *)(*(_QWORD *)a2 + v33);
          *((_QWORD *)a2 + 1) = v34;
          v36 = v35 != 0;
        }
        *((_BYTE *)this + 41) = v36;
        goto LABEL_20;
      case 6u:
        *((_WORD *)this + 24) |= 0x20u;
        v37 = *((_QWORD *)a2 + 1);
        if (v37 >= *((_QWORD *)a2 + 2))
        {
          v40 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v38 = v37 + 1;
          v39 = *(unsigned __int8 *)(*(_QWORD *)a2 + v37);
          *((_QWORD *)a2 + 1) = v38;
          v40 = v39 != 0;
        }
        *((_BYTE *)this + 39) = v40;
        goto LABEL_20;
      case 7u:
        *((_WORD *)this + 24) |= 4u;
        v41 = *((_QWORD *)a2 + 1);
        if (v41 >= *((_QWORD *)a2 + 2))
        {
          v44 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v42 = v41 + 1;
          v43 = *(unsigned __int8 *)(*(_QWORD *)a2 + v41);
          *((_QWORD *)a2 + 1) = v42;
          v44 = v43 != 0;
        }
        *((_BYTE *)this + 36) = v44;
        goto LABEL_20;
      case 8u:
        *((_WORD *)this + 24) |= 8u;
        v45 = *((_QWORD *)a2 + 1);
        if (v45 >= *((_QWORD *)a2 + 2))
        {
          v48 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v46 = v45 + 1;
          v47 = *(unsigned __int8 *)(*(_QWORD *)a2 + v45);
          *((_QWORD *)a2 + 1) = v46;
          v48 = v47 != 0;
        }
        *((_BYTE *)this + 37) = v48;
        goto LABEL_20;
      case 9u:
        *((_WORD *)this + 24) |= 0x40u;
        v49 = *((_QWORD *)a2 + 1);
        if (v49 >= *((_QWORD *)a2 + 2))
        {
          v52 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v50 = v49 + 1;
          v51 = *(unsigned __int8 *)(*(_QWORD *)a2 + v49);
          *((_QWORD *)a2 + 1) = v50;
          v52 = v51 != 0;
        }
        *((_BYTE *)this + 40) = v52;
        goto LABEL_20;
      case 0xAu:
        *((_WORD *)this + 24) |= 0x200u;
        v53 = *((_QWORD *)a2 + 1);
        if (v53 >= *((_QWORD *)a2 + 2))
        {
          v56 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v54 = v53 + 1;
          v55 = *(unsigned __int8 *)(*(_QWORD *)a2 + v53);
          *((_QWORD *)a2 + 1) = v54;
          v56 = v55 != 0;
        }
        *((_BYTE *)this + 43) = v56;
        goto LABEL_20;
      case 0xBu:
        *((_WORD *)this + 24) |= 0x100u;
        v57 = *((_QWORD *)a2 + 1);
        if (v57 >= *((_QWORD *)a2 + 2))
        {
          v60 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v58 = v57 + 1;
          v59 = *(unsigned __int8 *)(*(_QWORD *)a2 + v57);
          *((_QWORD *)a2 + 1) = v58;
          v60 = v59 != 0;
        }
        *((_BYTE *)this + 42) = v60;
        goto LABEL_20;
      case 0xCu:
        *((_WORD *)this + 24) |= 0x10u;
        v61 = *((_QWORD *)a2 + 1);
        if (v61 >= *((_QWORD *)a2 + 2))
        {
          v64 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v62 = v61 + 1;
          v63 = *(unsigned __int8 *)(*(_QWORD *)a2 + v61);
          *((_QWORD *)a2 + 1) = v62;
          v64 = v63 != 0;
        }
        *((_BYTE *)this + 38) = v64;
        goto LABEL_20;
      case 0xDu:
        *((_WORD *)this + 24) |= 0x400u;
        v65 = *((_QWORD *)a2 + 1);
        if (v65 >= *((_QWORD *)a2 + 2))
        {
          v68 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v66 = v65 + 1;
          v67 = *(unsigned __int8 *)(*(_QWORD *)a2 + v65);
          *((_QWORD *)a2 + 1) = v66;
          v68 = v67 != 0;
        }
        *((_BYTE *)this + 44) = v68;
        goto LABEL_20;
      default:
        goto LABEL_19;
    }
  }
  v15 = 0;
  v16 = 0;
  v11 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v17 = v2 + 1;
    v18 = *(_BYTE *)(v8 + v2);
    *((_QWORD *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0)
      goto LABEL_25;
    v15 += 7;
    v2 = v17;
    v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  result = PB::Reader::skip(a2);
  if ((_DWORD)result)
    goto LABEL_20;
  return result;
}

uint64_t CMMsl::InEarConstraints::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;
  const PB::Base *v5;
  const PB::Base *v6;
  __int16 v7;

  v3 = this;
  v4 = *(_WORD *)(this + 48);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24));
    v4 = *(_WORD *)(v3 + 48);
  }
  if ((v4 & 2) != 0)
    this = PB::Writer::writeVarInt(a2);
  v5 = *(const PB::Base **)(v3 + 8);
  if (v5)
    this = PB::Writer::writeSubmessage(a2, v5);
  v6 = *(const PB::Base **)(v3 + 16);
  if (v6)
    this = PB::Writer::writeSubmessage(a2, v6);
  v7 = *(_WORD *)(v3 + 48);
  if ((v7 & 0x80) != 0)
  {
    this = PB::Writer::write(a2);
    v7 = *(_WORD *)(v3 + 48);
    if ((v7 & 0x20) == 0)
    {
LABEL_11:
      if ((v7 & 4) == 0)
        goto LABEL_12;
      goto LABEL_21;
    }
  }
  else if ((v7 & 0x20) == 0)
  {
    goto LABEL_11;
  }
  this = PB::Writer::write(a2);
  v7 = *(_WORD *)(v3 + 48);
  if ((v7 & 4) == 0)
  {
LABEL_12:
    if ((v7 & 8) == 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2);
  v7 = *(_WORD *)(v3 + 48);
  if ((v7 & 8) == 0)
  {
LABEL_13:
    if ((v7 & 0x40) == 0)
      goto LABEL_14;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2);
  v7 = *(_WORD *)(v3 + 48);
  if ((v7 & 0x40) == 0)
  {
LABEL_14:
    if ((v7 & 0x200) == 0)
      goto LABEL_15;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2);
  v7 = *(_WORD *)(v3 + 48);
  if ((v7 & 0x200) == 0)
  {
LABEL_15:
    if ((v7 & 0x100) == 0)
      goto LABEL_16;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2);
  v7 = *(_WORD *)(v3 + 48);
  if ((v7 & 0x100) == 0)
  {
LABEL_16:
    if ((v7 & 0x10) == 0)
      goto LABEL_17;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2);
  v7 = *(_WORD *)(v3 + 48);
  if ((v7 & 0x10) == 0)
  {
LABEL_17:
    if ((v7 & 0x400) == 0)
      return this;
    return PB::Writer::write(a2);
  }
LABEL_26:
  this = PB::Writer::write(a2);
  if ((*(_WORD *)(v3 + 48) & 0x400) != 0)
    return PB::Writer::write(a2);
  return this;
}

BOOL CMMsl::InEarConstraints::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 result;

  v4 = *(_WORD *)(a1 + 48);
  v5 = *(_WORD *)(a2 + 48);
  if ((v4 & 1) != 0)
  {
    if ((v5 & 1) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v5 & 1) != 0)
  {
    return 0;
  }
  if ((v4 & 2) != 0)
  {
    if ((v5 & 2) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
      return 0;
  }
  else if ((v5 & 2) != 0)
  {
    return 0;
  }
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    if (!v7 || !CMMsl::ClefMeasurement::operator==(v6, v7))
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a2 + 16);
  if (v8)
  {
    if (!v9 || !CMMsl::ClefMeasurement::operator==(v8, v9))
      return 0;
  }
  else if (v9)
  {
    return 0;
  }
  if ((v4 & 0x80) != 0)
  {
    if ((v5 & 0x80) == 0 || *(unsigned __int8 *)(a1 + 41) != *(unsigned __int8 *)(a2 + 41))
      return 0;
  }
  else if ((v5 & 0x80) != 0)
  {
    return 0;
  }
  if ((v4 & 0x20) != 0)
  {
    if ((v5 & 0x20) == 0 || *(unsigned __int8 *)(a1 + 39) != *(unsigned __int8 *)(a2 + 39))
      return 0;
  }
  else if ((v5 & 0x20) != 0)
  {
    return 0;
  }
  if ((v4 & 4) != 0)
  {
    if ((v5 & 4) == 0 || *(unsigned __int8 *)(a1 + 36) != *(unsigned __int8 *)(a2 + 36))
      return 0;
  }
  else if ((v5 & 4) != 0)
  {
    return 0;
  }
  if ((v4 & 8) != 0)
  {
    if ((v5 & 8) == 0 || *(unsigned __int8 *)(a1 + 37) != *(unsigned __int8 *)(a2 + 37))
      return 0;
  }
  else if ((v5 & 8) != 0)
  {
    return 0;
  }
  if ((v4 & 0x40) != 0)
  {
    if ((v5 & 0x40) == 0 || *(unsigned __int8 *)(a1 + 40) != *(unsigned __int8 *)(a2 + 40))
      return 0;
  }
  else if ((v5 & 0x40) != 0)
  {
    return 0;
  }
  if ((v4 & 0x200) != 0)
  {
    if ((v5 & 0x200) == 0 || *(unsigned __int8 *)(a1 + 43) != *(unsigned __int8 *)(a2 + 43))
      return 0;
  }
  else if ((v5 & 0x200) != 0)
  {
    return 0;
  }
  if ((v4 & 0x100) != 0)
  {
    if ((v5 & 0x100) == 0 || *(unsigned __int8 *)(a1 + 42) != *(unsigned __int8 *)(a2 + 42))
      return 0;
  }
  else if ((v5 & 0x100) != 0)
  {
    return 0;
  }
  if ((v4 & 0x10) != 0)
  {
    if ((v5 & 0x10) == 0 || *(unsigned __int8 *)(a1 + 38) != *(unsigned __int8 *)(a2 + 38))
      return 0;
  }
  else if ((v5 & 0x10) != 0)
  {
    return 0;
  }
  result = (v5 & 0x400) == 0;
  if ((v4 & 0x400) == 0)
    return result;
  return (v5 & 0x400) != 0 && *(unsigned __int8 *)(a1 + 44) == *(unsigned __int8 *)(a2 + 44);
}

uint64_t CMMsl::InEarConstraints::hash_value(CMMsl::InEarConstraints *this)
{
  __int16 v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  float v6;
  float v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  float v15;
  float v16;
  BOOL v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *((_WORD *)this + 24);
  if ((v1 & 1) != 0)
  {
    v2 = *((double *)this + 3);
    if (v2 == 0.0)
      v2 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_3;
  }
  else
  {
    v2 = 0.0;
    if ((v1 & 2) != 0)
    {
LABEL_3:
      v3 = *((unsigned int *)this + 8);
      goto LABEL_8;
    }
  }
  v3 = 0;
LABEL_8:
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    v5 = *(_BYTE *)(v4 + 16);
    v6 = *(float *)(v4 + 8);
    v7 = *(float *)(v4 + 12);
    v8 = v6 == 0.0 || (v5 & 1) == 0;
    v9 = LODWORD(v6);
    if (v8)
      v9 = 0;
    v10 = v5 & 2;
    v11 = v7 == 0.0 || v10 == 0;
    v12 = LODWORD(v7);
    if (v11)
      v12 = 0;
    v4 = v12 ^ v9;
  }
  v13 = *((_QWORD *)this + 2);
  if (v13)
  {
    v14 = *(_BYTE *)(v13 + 16);
    v15 = *(float *)(v13 + 8);
    v16 = *(float *)(v13 + 12);
    v17 = v15 == 0.0 || (v14 & 1) == 0;
    v18 = LODWORD(v15);
    if (v17)
      v18 = 0;
    v19 = v14 & 2;
    v20 = v16 == 0.0 || v19 == 0;
    v21 = LODWORD(v16);
    if (v20)
      v21 = 0;
    v13 = v21 ^ v18;
  }
  if ((v1 & 0x80) != 0)
  {
    v22 = *((unsigned __int8 *)this + 41);
    if ((v1 & 0x20) != 0)
    {
LABEL_34:
      v23 = *((unsigned __int8 *)this + 39);
      if ((v1 & 4) != 0)
        goto LABEL_35;
      goto LABEL_44;
    }
  }
  else
  {
    v22 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_34;
  }
  v23 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_35:
    v24 = *((unsigned __int8 *)this + 36);
    if ((v1 & 8) != 0)
      goto LABEL_36;
    goto LABEL_45;
  }
LABEL_44:
  v24 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_36:
    v25 = *((unsigned __int8 *)this + 37);
    if ((v1 & 0x40) != 0)
      goto LABEL_37;
    goto LABEL_46;
  }
LABEL_45:
  v25 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_37:
    v26 = *((unsigned __int8 *)this + 40);
    if ((*((_WORD *)this + 24) & 0x200) != 0)
      goto LABEL_38;
    goto LABEL_47;
  }
LABEL_46:
  v26 = 0;
  if ((*((_WORD *)this + 24) & 0x200) != 0)
  {
LABEL_38:
    v27 = *((unsigned __int8 *)this + 43);
    if ((*((_WORD *)this + 24) & 0x100) != 0)
      goto LABEL_39;
    goto LABEL_48;
  }
LABEL_47:
  v27 = 0;
  if ((*((_WORD *)this + 24) & 0x100) != 0)
  {
LABEL_39:
    v28 = *((unsigned __int8 *)this + 42);
    if ((v1 & 0x10) != 0)
      goto LABEL_40;
LABEL_49:
    v29 = 0;
    if ((*((_WORD *)this + 24) & 0x400) != 0)
      goto LABEL_41;
LABEL_50:
    v30 = 0;
    return v3 ^ *(_QWORD *)&v2 ^ v4 ^ v13 ^ v22 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v30;
  }
LABEL_48:
  v28 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_49;
LABEL_40:
  v29 = *((unsigned __int8 *)this + 38);
  if ((*((_WORD *)this + 24) & 0x400) == 0)
    goto LABEL_50;
LABEL_41:
  v30 = *((unsigned __int8 *)this + 44);
  return v3 ^ *(_QWORD *)&v2 ^ v4 ^ v13 ^ v22 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v30;
}

_QWORD *CMMsl::InEarConstraints::makeCurrent(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135CD78;
    *(_DWORD *)(v2 + 16) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::InEarConstraints::makeThreshold(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[2])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135CD78;
    *(_DWORD *)(v2 + 16) = 0;
    this = (_QWORD *)v1[2];
    v1[2] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t CMMsl::InEarOpenLid::InEarOpenLid(uint64_t this)
{
  *(_DWORD *)(this + 44) = 0;
  *(_QWORD *)this = &off_25135E320;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

{
  *(_DWORD *)(this + 44) = 0;
  *(_QWORD *)this = &off_25135E320;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

void CMMsl::InEarOpenLid::~InEarOpenLid(CMMsl::InEarOpenLid *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_25135E320;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  PB::Base::~Base(this);
}

{
  CMMsl::InEarOpenLid::~InEarOpenLid(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::InEarOpenLid *CMMsl::InEarOpenLid::InEarOpenLid(CMMsl::InEarOpenLid *this, const CMMsl::InEarOpenLid *a2)
{
  uint64_t *v4;
  char v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  int v26;
  int v27;
  uint64_t v28;

  *(_QWORD *)this = &off_25135E320;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_DWORD *)this + 11) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if ((*((_BYTE *)a2 + 44) & 1) != 0)
  {
    v6 = *((_QWORD *)a2 + 4);
    *((_BYTE *)this + 44) = 1;
    *((_QWORD *)this + 4) = v6;
    v5 = 3;
    if ((*((_BYTE *)a2 + 44) & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = 2;
  if ((*((_BYTE *)a2 + 44) & 2) != 0)
  {
LABEL_5:
    v7 = *((_DWORD *)a2 + 10);
    *((_BYTE *)this + 44) = v5;
    *((_DWORD *)this + 10) = v7;
  }
LABEL_6:
  if (!*((_QWORD *)a2 + 3))
    goto LABEL_14;
  v8 = operator new();
  v9 = *((_QWORD *)a2 + 3);
  *(_QWORD *)v8 = &off_25135CD78;
  *(_DWORD *)(v8 + 16) = 0;
  v10 = *(_BYTE *)(v9 + 16);
  if ((v10 & 1) != 0)
  {
    v12 = *(_DWORD *)(v9 + 8);
    *(_BYTE *)(v8 + 16) = 1;
    *(_DWORD *)(v8 + 8) = v12;
    v11 = 3;
    if ((v10 & 2) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
  v11 = 2;
  if ((*(_BYTE *)(v9 + 16) & 2) != 0)
  {
LABEL_11:
    v13 = *(_DWORD *)(v9 + 12);
    *(_BYTE *)(v8 + 16) = v11;
    *(_DWORD *)(v8 + 12) = v13;
  }
LABEL_12:
  v14 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v8;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
LABEL_14:
  if (!*((_QWORD *)a2 + 1))
    goto LABEL_22;
  v15 = operator new();
  v16 = *((_QWORD *)a2 + 1);
  *(_QWORD *)v15 = &off_25135CD78;
  *(_DWORD *)(v15 + 16) = 0;
  v17 = *(_BYTE *)(v16 + 16);
  if ((v17 & 1) != 0)
  {
    v19 = *(_DWORD *)(v16 + 8);
    *(_BYTE *)(v15 + 16) = 1;
    *(_DWORD *)(v15 + 8) = v19;
    v18 = 3;
    if ((v17 & 2) == 0)
      goto LABEL_20;
    goto LABEL_19;
  }
  v18 = 2;
  if ((*(_BYTE *)(v16 + 16) & 2) != 0)
  {
LABEL_19:
    v20 = *(_DWORD *)(v16 + 12);
    *(_BYTE *)(v15 + 16) = v18;
    *(_DWORD *)(v15 + 12) = v20;
  }
LABEL_20:
  v21 = *v4;
  *v4 = v15;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
LABEL_22:
  if (!*((_QWORD *)a2 + 2))
    return this;
  v22 = operator new();
  v23 = *((_QWORD *)a2 + 2);
  *(_QWORD *)v22 = &off_25135CD78;
  *(_DWORD *)(v22 + 16) = 0;
  v24 = *(_BYTE *)(v23 + 16);
  if ((v24 & 1) != 0)
  {
    v26 = *(_DWORD *)(v23 + 8);
    *(_BYTE *)(v22 + 16) = 1;
    *(_DWORD *)(v22 + 8) = v26;
    v25 = 3;
    if ((v24 & 2) == 0)
      goto LABEL_28;
    goto LABEL_27;
  }
  v25 = 2;
  if ((*(_BYTE *)(v23 + 16) & 2) != 0)
  {
LABEL_27:
    v27 = *(_DWORD *)(v23 + 12);
    *(_BYTE *)(v22 + 16) = v25;
    *(_DWORD *)(v22 + 12) = v27;
  }
LABEL_28:
  v28 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v22;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  return this;
}

uint64_t CMMsl::InEarOpenLid::operator=(uint64_t a1, const CMMsl::InEarOpenLid *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((const CMMsl::InEarOpenLid *)a1 != a2)
  {
    CMMsl::InEarOpenLid::InEarOpenLid((CMMsl::InEarOpenLid *)&v9, a2);
    v3 = v13;
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 32) = v12;
    *(_QWORD *)(a1 + 40) = v3;
    v12 = v4;
    v13 = v5;
    v6 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v11;
    v11 = v6;
    v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v7;
    CMMsl::InEarOpenLid::~InEarOpenLid((CMMsl::InEarOpenLid *)&v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::InEarOpenLid *a2, CMMsl::InEarOpenLid *a3)
{
  int v3;
  double result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  result = *((double *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((double *)a2 + 4) = result;
  v5 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v5;
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v7;
  v8 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v8;
  return result;
}

uint64_t CMMsl::InEarOpenLid::InEarOpenLid(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = &off_25135E320;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v8 = *v4;
  *v4 = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v9;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return a1;
}

uint64_t CMMsl::InEarOpenLid::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a1 != a2)
  {
    CMMsl::InEarOpenLid::InEarOpenLid((uint64_t)&v9, a2);
    v3 = v13;
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 32) = v12;
    *(_QWORD *)(a1 + 40) = v3;
    v12 = v4;
    v13 = v5;
    v6 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v11;
    v11 = v6;
    v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v7;
    CMMsl::InEarOpenLid::~InEarOpenLid((CMMsl::InEarOpenLid *)&v9);
  }
  return a1;
}

uint64_t CMMsl::InEarOpenLid::formatText(CMMsl::InEarOpenLid *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "current");
  v6 = *((_QWORD *)this + 2);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "last");
  if ((*((_BYTE *)this + 44) & 2) != 0)
    PB::TextFormatter::format(a2, "location");
  v7 = *((_QWORD *)this + 3);
  if (v7)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "minimum");
  if ((*((_BYTE *)this + 44) & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 4));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::InEarOpenLid::readFrom(CMMsl::InEarOpenLid *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_21:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 44) |= 1u;
          v20 = *((_QWORD *)a2 + 1);
          if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *((_QWORD *)a2 + 2))
          {
            *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v20);
            *((_QWORD *)a2 + 1) += 8;
          }
          else
          {
            *((_BYTE *)a2 + 24) = 1;
          }
          goto LABEL_54;
        case 2u:
          *((_BYTE *)this + 44) |= 2u;
          v21 = *((_QWORD *)a2 + 1);
          v22 = *((_QWORD *)a2 + 2);
          v23 = *(_QWORD *)a2;
          if (v21 <= 0xFFFFFFFFFFFFFFF5 && v21 + 10 <= v22)
          {
            v24 = 0;
            v25 = 0;
            v26 = 0;
            do
            {
              v27 = v21 + 1;
              *((_QWORD *)a2 + 1) = v21 + 1;
              v28 = *(_BYTE *)(v23 + v21);
              v26 |= (unint64_t)(v28 & 0x7F) << v24;
              if ((v28 & 0x80) == 0)
                goto LABEL_53;
              v24 += 7;
              v21 = v27;
              v14 = v25++ > 8;
            }
            while (!v14);
LABEL_48:
            LODWORD(v26) = 0;
            goto LABEL_53;
          }
          v33 = 0;
          v34 = 0;
          v26 = 0;
          if (v22 <= v21)
            v22 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v22 == v21)
            {
              LODWORD(v26) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v35 = v21 + 1;
              v36 = *(_BYTE *)(v23 + v21);
              *((_QWORD *)a2 + 1) = v35;
              v26 |= (unint64_t)(v36 & 0x7F) << v33;
              if (v36 < 0)
              {
                v33 += 7;
                v21 = v35;
                v14 = v34++ > 8;
                if (v14)
                  goto LABEL_48;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v26) = 0;
            }
            break;
          }
LABEL_53:
          *((_DWORD *)this + 10) = v26;
          goto LABEL_54;
        case 3u:
          v29 = (_DWORD *)operator new();
          *(_QWORD *)v29 = &off_25135CD78;
          v29[4] = 0;
          v30 = *((_QWORD *)this + 3);
          *((_QWORD *)this + 3) = v29;
          if (v30)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
            v29 = (_DWORD *)*((_QWORD *)this + 3);
          }
          goto LABEL_39;
        case 4u:
          v29 = (_DWORD *)operator new();
          *(_QWORD *)v29 = &off_25135CD78;
          v29[4] = 0;
          v31 = *((_QWORD *)this + 1);
          *((_QWORD *)this + 1) = v29;
          if (v31)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
            v29 = (_DWORD *)*((_QWORD *)this + 1);
          }
          goto LABEL_39;
        case 5u:
          v29 = (_DWORD *)operator new();
          *(_QWORD *)v29 = &off_25135CD78;
          v29[4] = 0;
          v32 = *((_QWORD *)this + 2);
          *((_QWORD *)this + 2) = v29;
          if (v32)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
            v29 = (_DWORD *)*((_QWORD *)this + 2);
          }
LABEL_39:
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v29 + 16))(v29, a2) & 1) == 0)
          {
            return 0;
          }
          PB::Reader::recallMark();
          break;
        default:
          goto LABEL_19;
      }
      goto LABEL_54;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_21;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    result = PB::Reader::skip(a2);
    if (!(_DWORD)result)
      return result;
LABEL_54:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
}

uint64_t CMMsl::InEarOpenLid::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  const PB::Base *v5;
  const PB::Base *v6;
  const PB::Base *v7;

  v3 = this;
  v4 = *(_BYTE *)(this + 44);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32));
    v4 = *(_BYTE *)(v3 + 44);
  }
  if ((v4 & 2) != 0)
    this = PB::Writer::writeVarInt(a2);
  v5 = *(const PB::Base **)(v3 + 24);
  if (v5)
    this = PB::Writer::writeSubmessage(a2, v5);
  v6 = *(const PB::Base **)(v3 + 8);
  if (v6)
    this = PB::Writer::writeSubmessage(a2, v6);
  v7 = *(const PB::Base **)(v3 + 16);
  if (v7)
    return PB::Writer::writeSubmessage(a2, v7);
  return this;
}

BOOL CMMsl::InEarOpenLid::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;

  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 1) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 2) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 2) != 0)
  {
    return 0;
  }
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (!v5 || !CMMsl::ClefMeasurement::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    if (!v7 || !CMMsl::ClefMeasurement::operator==(v6, v7))
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  v8 = *(_QWORD *)(a2 + 16);
  result = v8 == 0;
  if (!*(_QWORD *)(a1 + 16))
    return result;
  return v8 && CMMsl::ClefMeasurement::operator==(*(_QWORD *)(a1 + 16), v8);
}

uint64_t CMMsl::InEarOpenLid::hash_value(CMMsl::InEarOpenLid *this)
{
  double v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  float v5;
  float v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  float v14;
  float v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  float v23;
  float v24;
  BOOL v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t v29;

  if ((*((_BYTE *)this + 44) & 1) != 0)
  {
    v1 = *((double *)this + 4);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 44) & 2) != 0)
      goto LABEL_3;
  }
  else
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 44) & 2) != 0)
    {
LABEL_3:
      v2 = *((unsigned int *)this + 10);
      goto LABEL_8;
    }
  }
  v2 = 0;
LABEL_8:
  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    v4 = *(_BYTE *)(v3 + 16);
    v5 = *(float *)(v3 + 8);
    v6 = *(float *)(v3 + 12);
    v7 = v5 == 0.0 || (v4 & 1) == 0;
    v8 = LODWORD(v5);
    if (v7)
      v8 = 0;
    v9 = v4 & 2;
    v10 = v6 == 0.0 || v9 == 0;
    v11 = LODWORD(v6);
    if (v10)
      v11 = 0;
    v3 = v11 ^ v8;
  }
  v12 = *((_QWORD *)this + 1);
  if (v12)
  {
    v13 = *(_BYTE *)(v12 + 16);
    v14 = *(float *)(v12 + 8);
    v15 = *(float *)(v12 + 12);
    v16 = v14 == 0.0 || (v13 & 1) == 0;
    v17 = LODWORD(v14);
    if (v16)
      v17 = 0;
    v18 = v13 & 2;
    v19 = v15 == 0.0 || v18 == 0;
    v20 = LODWORD(v15);
    if (v19)
      v20 = 0;
    v12 = v20 ^ v17;
  }
  v21 = *((_QWORD *)this + 2);
  if (v21)
  {
    v22 = *(_BYTE *)(v21 + 16);
    v23 = *(float *)(v21 + 8);
    v24 = *(float *)(v21 + 12);
    v25 = v23 == 0.0 || (v22 & 1) == 0;
    v26 = LODWORD(v23);
    if (v25)
      v26 = 0;
    v27 = v22 & 2;
    v28 = v24 == 0.0 || v27 == 0;
    v29 = LODWORD(v24);
    if (v28)
      v29 = 0;
    v21 = v29 ^ v26;
  }
  return v2 ^ *(_QWORD *)&v1 ^ v3 ^ v12 ^ v21;
}

_QWORD *CMMsl::InEarOpenLid::makeMinimum(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[3])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135CD78;
    *(_DWORD *)(v2 + 16) = 0;
    this = (_QWORD *)v1[3];
    v1[3] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::InEarOpenLid::makeCurrent(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135CD78;
    *(_DWORD *)(v2 + 16) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::InEarOpenLid::makeLast(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[2])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135CD78;
    *(_DWORD *)(v2 + 16) = 0;
    this = (_QWORD *)v1[2];
    v1[2] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

double CMMsl::InEarOptical::InEarOptical(CMMsl::InEarOptical *this)
{
  double result;

  *(_QWORD *)this = &off_25135E358;
  *((_DWORD *)this + 23) = 0;
  *((_DWORD *)this + 27) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_25135E358;
  *((_DWORD *)this + 23) = 0;
  *((_DWORD *)this + 27) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  return result;
}

void CMMsl::InEarOptical::~InEarOptical(CMMsl::InEarOptical *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = &off_25135E358;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (void *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 5) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 1);
  if (v5)
  {
    *((_QWORD *)this + 2) = v5;
    operator delete(v5);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::InEarOptical::~InEarOptical(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::InEarOptical *CMMsl::InEarOptical::InEarOptical(CMMsl::InEarOptical *this, const CMMsl::InEarOptical *a2)
{
  _QWORD *v4;
  char v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  int v19;
  int v20;
  uint64_t v21;
  char v22;
  int v23;
  char v24;
  int v25;
  int v26;
  int v28;
  int v29;
  char v30;

  *(_QWORD *)this = &off_25135E358;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (_QWORD *)((char *)this + 8);
  *((_DWORD *)this + 23) = 0;
  *((_DWORD *)this + 27) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  if ((*((_BYTE *)a2 + 108) & 1) != 0)
  {
    v6 = *((_QWORD *)a2 + 9);
    *((_BYTE *)this + 108) = 1;
    *((_QWORD *)this + 9) = v6;
    v5 = 9;
    if ((*((_BYTE *)a2 + 108) & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = 8;
  if ((*((_BYTE *)a2 + 108) & 8) != 0)
  {
LABEL_5:
    v7 = *((_DWORD *)a2 + 22);
    *((_BYTE *)this + 108) = v5;
    *((_DWORD *)this + 22) = v7;
  }
LABEL_6:
  if (!*((_QWORD *)a2 + 7))
    goto LABEL_14;
  v8 = operator new();
  v9 = *((_QWORD *)a2 + 7);
  *(_QWORD *)v8 = &off_25135CD78;
  *(_DWORD *)(v8 + 16) = 0;
  v10 = *(_BYTE *)(v9 + 16);
  if ((v10 & 1) != 0)
  {
    v12 = *(_DWORD *)(v9 + 8);
    *(_BYTE *)(v8 + 16) = 1;
    *(_DWORD *)(v8 + 8) = v12;
    v11 = 3;
    if ((v10 & 2) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
  v11 = 2;
  if ((*(_BYTE *)(v9 + 16) & 2) != 0)
  {
LABEL_11:
    v13 = *(_DWORD *)(v9 + 12);
    *(_BYTE *)(v8 + 16) = v11;
    *(_DWORD *)(v8 + 12) = v13;
  }
LABEL_12:
  v14 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = v8;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
LABEL_14:
  if (!*((_QWORD *)a2 + 8))
    goto LABEL_22;
  v15 = operator new();
  v16 = *((_QWORD *)a2 + 8);
  *(_QWORD *)v15 = &off_25135CD78;
  *(_DWORD *)(v15 + 16) = 0;
  v17 = *(_BYTE *)(v16 + 16);
  if ((v17 & 1) != 0)
  {
    v19 = *(_DWORD *)(v16 + 8);
    *(_BYTE *)(v15 + 16) = 1;
    *(_DWORD *)(v15 + 8) = v19;
    v18 = 3;
    if ((v17 & 2) == 0)
      goto LABEL_20;
    goto LABEL_19;
  }
  v18 = 2;
  if ((*(_BYTE *)(v16 + 16) & 2) != 0)
  {
LABEL_19:
    v20 = *(_DWORD *)(v16 + 12);
    *(_BYTE *)(v15 + 16) = v18;
    *(_DWORD *)(v15 + 12) = v20;
  }
LABEL_20:
  v21 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = v15;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
LABEL_22:
  if (this != a2)
    sub_242911380(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  v22 = *((_BYTE *)a2 + 108);
  if ((v22 & 0x40) != 0)
  {
    v28 = *((_DWORD *)a2 + 25);
    *((_BYTE *)this + 108) |= 0x40u;
    *((_DWORD *)this + 25) = v28;
    v22 = *((_BYTE *)a2 + 108);
    if ((v22 & 0x20) == 0)
    {
LABEL_26:
      if ((v22 & 0x80) == 0)
        goto LABEL_27;
      goto LABEL_38;
    }
  }
  else if ((*((_BYTE *)a2 + 108) & 0x20) == 0)
  {
    goto LABEL_26;
  }
  v29 = *((_DWORD *)a2 + 24);
  *((_BYTE *)this + 108) |= 0x20u;
  *((_DWORD *)this + 24) = v29;
  v22 = *((_BYTE *)a2 + 108);
  if ((v22 & 0x80) == 0)
  {
LABEL_27:
    if ((v22 & 0x10) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
LABEL_38:
  v30 = *((_BYTE *)a2 + 104);
  *((_BYTE *)this + 108) |= 0x80u;
  *((_BYTE *)this + 104) = v30;
  if ((*((_BYTE *)a2 + 108) & 0x10) != 0)
  {
LABEL_28:
    v23 = *((_DWORD *)a2 + 23);
    *((_BYTE *)this + 108) |= 0x10u;
    *((_DWORD *)this + 23) = v23;
  }
LABEL_29:
  if (this != a2)
    sub_242911380((_QWORD *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
  v24 = *((_BYTE *)a2 + 108);
  if ((v24 & 2) != 0)
  {
    v25 = *((_DWORD *)a2 + 20);
    *((_BYTE *)this + 108) |= 2u;
    *((_DWORD *)this + 20) = v25;
    v24 = *((_BYTE *)a2 + 108);
  }
  if ((v24 & 4) != 0)
  {
    v26 = *((_DWORD *)a2 + 21);
    *((_BYTE *)this + 108) |= 4u;
    *((_DWORD *)this + 21) = v26;
  }
  return this;
}

CMMsl *CMMsl::InEarOptical::operator=(CMMsl *a1, const CMMsl::InEarOptical *a2)
{
  CMMsl::InEarOptical *v3;
  _BYTE v5[112];

  if (a1 != a2)
  {
    CMMsl::InEarOptical::InEarOptical((CMMsl::InEarOptical *)v5, a2);
    CMMsl::swap(a1, (CMMsl::InEarOptical *)v5, v3);
    CMMsl::InEarOptical::~InEarOptical((CMMsl::InEarOptical *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::InEarOptical *a2, CMMsl::InEarOptical *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float result;

  v3 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v3;
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v4;
  v5 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v5;
  v6 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v6;
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v7;
  v8 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v8;
  v9 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v9;
  LODWORD(v4) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v4;
  LODWORD(v4) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v4;
  LOBYTE(v9) = *((_BYTE *)this + 104);
  *((_BYTE *)this + 104) = *((_BYTE *)a2 + 104);
  *((_BYTE *)a2 + 104) = v9;
  v10 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v10;
  v11 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v11;
  v12 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v12;
  v13 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v13;
  LODWORD(v4) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v4;
  result = *((float *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((float *)a2 + 21) = result;
  return result;
}

uint64_t CMMsl::InEarOptical::InEarOptical(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = &off_25135E358;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = a1 + 8;
  *(_DWORD *)(a1 + 92) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a2 + 108) = 0;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  v6 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  v8 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  sub_242911330(v4, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  sub_242911330(a1 + 32, (__n128 *)(a2 + 32));
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  return a1;
}

CMMsl *CMMsl::InEarOptical::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::InEarOptical *v3;
  _BYTE v5[112];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::InEarOptical::InEarOptical((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::InEarOptical *)v5, v3);
    CMMsl::InEarOptical::~InEarOptical((CMMsl::InEarOptical *)v5);
  }
  return a1;
}

uint64_t CMMsl::InEarOptical::formatText(CMMsl::InEarOptical *this, PB::TextFormatter *a2, const char *a3)
{
  float *v5;
  float *v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  float *v11;
  float *v12;
  float v13;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (float *)*((_QWORD *)this + 1);
  v6 = (float *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "acceleration", v7);
  }
  if ((*((_BYTE *)this + 108) & 2) != 0)
    PB::TextFormatter::format(a2, "correlation", *((float *)this + 20));
  v8 = *((_QWORD *)this + 7);
  if (v8)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "current");
  if ((*((_BYTE *)this + 108) & 4) != 0)
    PB::TextFormatter::format(a2, "deltatip", *((float *)this + 21));
  v9 = *((_QWORD *)this + 8);
  if (v9)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, a2, "instability");
  v10 = *((_BYTE *)this + 108);
  if ((v10 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "location");
    v10 = *((_BYTE *)this + 108);
    if ((v10 & 0x10) == 0)
    {
LABEL_13:
      if ((v10 & 0x20) == 0)
        goto LABEL_14;
      goto LABEL_22;
    }
  }
  else if ((*((_BYTE *)this + 108) & 0x10) == 0)
  {
    goto LABEL_13;
  }
  PB::TextFormatter::format(a2, "state");
  v10 = *((_BYTE *)this + 108);
  if ((v10 & 0x20) == 0)
  {
LABEL_14:
    if ((v10 & 1) == 0)
      goto LABEL_15;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "tilt", *((float *)this + 24));
  v10 = *((_BYTE *)this + 108);
  if ((v10 & 1) == 0)
  {
LABEL_15:
    if ((v10 & 0x40) == 0)
      goto LABEL_16;
LABEL_24:
    PB::TextFormatter::format(a2, "tip", *((float *)this + 25));
    if ((*((_BYTE *)this + 108) & 0x80) == 0)
      goto LABEL_17;
    goto LABEL_25;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 9));
  v10 = *((_BYTE *)this + 108);
  if ((v10 & 0x40) != 0)
    goto LABEL_24;
LABEL_16:
  if ((v10 & 0x80) == 0)
    goto LABEL_17;
LABEL_25:
  PB::TextFormatter::format(a2, "upright");
LABEL_17:
  v11 = (float *)*((_QWORD *)this + 4);
  v12 = (float *)*((_QWORD *)this + 5);
  while (v11 != v12)
  {
    v13 = *v11++;
    PB::TextFormatter::format(a2, "variance", v13);
  }
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::InEarOptical::readFrom(CMMsl::InEarOptical *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  _DWORD *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  int v51;
  BOOL v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  _DWORD *v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  _DWORD *v72;
  int v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char v77;
  unsigned int v78;
  unint64_t v79;
  char v80;
  unint64_t v81;
  char *v82;
  _DWORD *v83;
  char v84;
  unsigned int v85;
  unint64_t v86;
  char v87;
  unint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  _DWORD *v102;
  int v103;
  _DWORD *v104;
  int v105;
  unint64_t v106;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_21:
      v19 = v11 & 7;
      if (v19 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 108) |= 1u;
          v20 = *((_QWORD *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_170;
          *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v20);
          v21 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_173;
        case 2u:
          *((_BYTE *)this + 108) |= 8u;
          v22 = *((_QWORD *)a2 + 1);
          v23 = *((_QWORD *)a2 + 2);
          v24 = *(_QWORD *)a2;
          if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
          {
            v25 = 0;
            v26 = 0;
            v27 = 0;
            do
            {
              v28 = v22 + 1;
              *((_QWORD *)a2 + 1) = v22 + 1;
              v29 = *(_BYTE *)(v24 + v22);
              v27 |= (unint64_t)(v29 & 0x7F) << v25;
              if ((v29 & 0x80) == 0)
                goto LABEL_150;
              v25 += 7;
              v22 = v28;
              v14 = v26++ > 8;
            }
            while (!v14);
LABEL_115:
            LODWORD(v27) = 0;
            goto LABEL_150;
          }
          v77 = 0;
          v78 = 0;
          v27 = 0;
          if (v23 <= v22)
            v23 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v23 == v22)
            {
              LODWORD(v27) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v79 = v22 + 1;
              v80 = *(_BYTE *)(v24 + v22);
              *((_QWORD *)a2 + 1) = v79;
              v27 |= (unint64_t)(v80 & 0x7F) << v77;
              if (v80 < 0)
              {
                v77 += 7;
                v22 = v79;
                v14 = v78++ > 8;
                if (v14)
                  goto LABEL_115;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v27) = 0;
            }
            break;
          }
LABEL_150:
          *((_DWORD *)this + 22) = v27;
          goto LABEL_174;
        case 3u:
          v30 = (_DWORD *)operator new();
          *(_QWORD *)v30 = &off_25135CD78;
          v30[4] = 0;
          v31 = *((_QWORD *)this + 7);
          *((_QWORD *)this + 7) = v30;
          if (v31)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
            v30 = (_DWORD *)*((_QWORD *)this + 7);
          }
          goto LABEL_37;
        case 4u:
          v30 = (_DWORD *)operator new();
          *(_QWORD *)v30 = &off_25135CD78;
          v30[4] = 0;
          v32 = *((_QWORD *)this + 8);
          *((_QWORD *)this + 8) = v30;
          if (v32)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
            v30 = (_DWORD *)*((_QWORD *)this + 8);
          }
LABEL_37:
          if (PB::Reader::placeMark()
            && ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v30 + 16))(v30, a2) & 1) != 0)
          {
            goto LABEL_39;
          }
          return 0;
        case 5u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v33 = *((_QWORD *)a2 + 1);
            v34 = *((_QWORD *)a2 + 2);
            while (v33 < v34 && !*((_BYTE *)a2 + 24))
            {
              v36 = (char *)*((_QWORD *)this + 2);
              v35 = *((_QWORD *)this + 3);
              if ((unint64_t)v36 >= v35)
              {
                v38 = (char *)*((_QWORD *)this + 1);
                v39 = (v36 - v38) >> 2;
                v40 = v39 + 1;
                if ((unint64_t)(v39 + 1) >> 62)
                  goto LABEL_183;
                v41 = v35 - (_QWORD)v38;
                if (v41 >> 1 > v40)
                  v40 = v41 >> 1;
                if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL)
                  v42 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v42 = v40;
                if (v42)
                {
                  v42 = (unint64_t)sub_2429114B8(v42);
                  v38 = (char *)*((_QWORD *)this + 1);
                  v36 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v43 = 0;
                }
                v44 = (_DWORD *)(v42 + 4 * v39);
                *v44 = 0;
                v37 = v44 + 1;
                while (v36 != v38)
                {
                  v45 = *((_DWORD *)v36 - 1);
                  v36 -= 4;
                  *--v44 = v45;
                }
                *((_QWORD *)this + 1) = v44;
                *((_QWORD *)this + 2) = v37;
                *((_QWORD *)this + 3) = v42 + 4 * v43;
                if (v38)
                  operator delete(v38);
              }
              else
              {
                *(_DWORD *)v36 = 0;
                v37 = v36 + 4;
              }
              *((_QWORD *)this + 2) = v37;
              v46 = *((_QWORD *)a2 + 1);
              if (v46 > 0xFFFFFFFFFFFFFFFBLL || v46 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_129;
              *(v37 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v46);
              v34 = *((_QWORD *)a2 + 2);
              v33 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v33;
            }
            goto LABEL_39;
          }
          v82 = (char *)*((_QWORD *)this + 2);
          v81 = *((_QWORD *)this + 3);
          if ((unint64_t)v82 >= v81)
          {
            v90 = (char *)*((_QWORD *)this + 1);
            v91 = (v82 - v90) >> 2;
            v92 = v91 + 1;
            if ((unint64_t)(v91 + 1) >> 62)
              goto LABEL_183;
            v93 = v81 - (_QWORD)v90;
            if (v93 >> 1 > v92)
              v92 = v93 >> 1;
            if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL)
              v94 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v94 = v92;
            if (v94)
            {
              v94 = (unint64_t)sub_2429114B8(v94);
              v90 = (char *)*((_QWORD *)this + 1);
              v82 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v95 = 0;
            }
            v102 = (_DWORD *)(v94 + 4 * v91);
            *v102 = 0;
            v83 = v102 + 1;
            while (v82 != v90)
            {
              v103 = *((_DWORD *)v82 - 1);
              v82 -= 4;
              *--v102 = v103;
            }
            *((_QWORD *)this + 1) = v102;
            *((_QWORD *)this + 2) = v83;
            *((_QWORD *)this + 3) = v94 + 4 * v95;
            if (v90)
              operator delete(v90);
          }
          else
          {
            *(_DWORD *)v82 = 0;
            v83 = v82 + 4;
          }
          *((_QWORD *)this + 2) = v83;
          goto LABEL_168;
        case 6u:
          *((_BYTE *)this + 108) |= 0x40u;
          v47 = *((_QWORD *)a2 + 1);
          if (v47 > 0xFFFFFFFFFFFFFFFBLL || v47 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_170;
          *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v47);
          goto LABEL_172;
        case 7u:
          *((_BYTE *)this + 108) |= 0x20u;
          v48 = *((_QWORD *)a2 + 1);
          if (v48 > 0xFFFFFFFFFFFFFFFBLL || v48 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_170;
          *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v48);
          goto LABEL_172;
        case 8u:
          *((_BYTE *)this + 108) |= 0x80u;
          v49 = *((_QWORD *)a2 + 1);
          if (v49 >= *((_QWORD *)a2 + 2))
          {
            v52 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v50 = v49 + 1;
            v51 = *(unsigned __int8 *)(*(_QWORD *)a2 + v49);
            *((_QWORD *)a2 + 1) = v50;
            v52 = v51 != 0;
          }
          *((_BYTE *)this + 104) = v52;
          goto LABEL_174;
        case 9u:
          *((_BYTE *)this + 108) |= 0x10u;
          v53 = *((_QWORD *)a2 + 1);
          v54 = *((_QWORD *)a2 + 2);
          v55 = *(_QWORD *)a2;
          if (v53 <= 0xFFFFFFFFFFFFFFF5 && v53 + 10 <= v54)
          {
            v56 = 0;
            v57 = 0;
            v58 = 0;
            do
            {
              v59 = v53 + 1;
              *((_QWORD *)a2 + 1) = v53 + 1;
              v60 = *(_BYTE *)(v55 + v53);
              v58 |= (unint64_t)(v60 & 0x7F) << v56;
              if ((v60 & 0x80) == 0)
                goto LABEL_153;
              v56 += 7;
              v53 = v59;
              v14 = v57++ > 8;
            }
            while (!v14);
LABEL_126:
            LODWORD(v58) = 0;
            goto LABEL_153;
          }
          v84 = 0;
          v85 = 0;
          v58 = 0;
          if (v54 <= v53)
            v54 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v54 == v53)
            {
              LODWORD(v58) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v86 = v53 + 1;
              v87 = *(_BYTE *)(v55 + v53);
              *((_QWORD *)a2 + 1) = v86;
              v58 |= (unint64_t)(v87 & 0x7F) << v84;
              if (v87 < 0)
              {
                v84 += 7;
                v53 = v86;
                v14 = v85++ > 8;
                if (v14)
                  goto LABEL_126;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v58) = 0;
            }
            break;
          }
LABEL_153:
          *((_DWORD *)this + 23) = v58;
          goto LABEL_174;
        case 0xAu:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v61 = *((_QWORD *)a2 + 1);
            v62 = *((_QWORD *)a2 + 2);
            while (v61 < v62 && !*((_BYTE *)a2 + 24))
            {
              v64 = (char *)*((_QWORD *)this + 5);
              v63 = *((_QWORD *)this + 6);
              if ((unint64_t)v64 >= v63)
              {
                v66 = (char *)*((_QWORD *)this + 4);
                v67 = (v64 - v66) >> 2;
                v68 = v67 + 1;
                if ((unint64_t)(v67 + 1) >> 62)
                  goto LABEL_183;
                v69 = v63 - (_QWORD)v66;
                if (v69 >> 1 > v68)
                  v68 = v69 >> 1;
                if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFFCLL)
                  v70 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v70 = v68;
                if (v70)
                {
                  v70 = (unint64_t)sub_2429114B8(v70);
                  v66 = (char *)*((_QWORD *)this + 4);
                  v64 = (char *)*((_QWORD *)this + 5);
                }
                else
                {
                  v71 = 0;
                }
                v72 = (_DWORD *)(v70 + 4 * v67);
                *v72 = 0;
                v65 = v72 + 1;
                while (v64 != v66)
                {
                  v73 = *((_DWORD *)v64 - 1);
                  v64 -= 4;
                  *--v72 = v73;
                }
                *((_QWORD *)this + 4) = v72;
                *((_QWORD *)this + 5) = v65;
                *((_QWORD *)this + 6) = v70 + 4 * v71;
                if (v66)
                  operator delete(v66);
              }
              else
              {
                *(_DWORD *)v64 = 0;
                v65 = v64 + 4;
              }
              *((_QWORD *)this + 5) = v65;
              v74 = *((_QWORD *)a2 + 1);
              if (v74 > 0xFFFFFFFFFFFFFFFBLL || v74 + 4 > *((_QWORD *)a2 + 2))
              {
LABEL_129:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v65 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v74);
              v62 = *((_QWORD *)a2 + 2);
              v61 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v61;
            }
LABEL_39:
            PB::Reader::recallMark();
          }
          else
          {
            v89 = (char *)*((_QWORD *)this + 5);
            v88 = *((_QWORD *)this + 6);
            if ((unint64_t)v89 >= v88)
            {
              v96 = (char *)*((_QWORD *)this + 4);
              v97 = (v89 - v96) >> 2;
              v98 = v97 + 1;
              if ((unint64_t)(v97 + 1) >> 62)
LABEL_183:
                sub_242729A44();
              v99 = v88 - (_QWORD)v96;
              if (v99 >> 1 > v98)
                v98 = v99 >> 1;
              if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFFCLL)
                v100 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v100 = v98;
              if (v100)
              {
                v100 = (unint64_t)sub_2429114B8(v100);
                v96 = (char *)*((_QWORD *)this + 4);
                v89 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v101 = 0;
              }
              v104 = (_DWORD *)(v100 + 4 * v97);
              *v104 = 0;
              v83 = v104 + 1;
              while (v89 != v96)
              {
                v105 = *((_DWORD *)v89 - 1);
                v89 -= 4;
                *--v104 = v105;
              }
              *((_QWORD *)this + 4) = v104;
              *((_QWORD *)this + 5) = v83;
              *((_QWORD *)this + 6) = v100 + 4 * v101;
              if (v96)
                operator delete(v96);
            }
            else
            {
              *(_DWORD *)v89 = 0;
              v83 = v89 + 4;
            }
            *((_QWORD *)this + 5) = v83;
LABEL_168:
            v106 = *((_QWORD *)a2 + 1);
            if (v106 <= 0xFFFFFFFFFFFFFFFBLL && v106 + 4 <= *((_QWORD *)a2 + 2))
            {
              *(v83 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v106);
LABEL_172:
              v21 = *((_QWORD *)a2 + 1) + 4;
LABEL_173:
              *((_QWORD *)a2 + 1) = v21;
            }
            else
            {
LABEL_170:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
          break;
        case 0xBu:
          *((_BYTE *)this + 108) |= 2u;
          v75 = *((_QWORD *)a2 + 1);
          if (v75 > 0xFFFFFFFFFFFFFFFBLL || v75 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_170;
          *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v75);
          goto LABEL_172;
        case 0xCu:
          *((_BYTE *)this + 108) |= 4u;
          v76 = *((_QWORD *)a2 + 1);
          if (v76 > 0xFFFFFFFFFFFFFFFBLL || v76 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_170;
          *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v76);
          goto LABEL_172;
        default:
          goto LABEL_19;
      }
      goto LABEL_174;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_21;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    if ((PB::Reader::skip(a2) & 1) == 0)
      return 0;
LABEL_174:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
}

uint64_t CMMsl::InEarOptical::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  const PB::Base *v5;
  const PB::Base *v6;
  float *v7;
  float *v8;
  float v9;
  char v10;
  float *v11;
  float *v12;
  float v13;
  char v14;

  v3 = this;
  v4 = *(_BYTE *)(this + 108);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 72));
    v4 = *(_BYTE *)(v3 + 108);
  }
  if ((v4 & 8) != 0)
    this = PB::Writer::writeVarInt(a2);
  v5 = *(const PB::Base **)(v3 + 56);
  if (v5)
    this = PB::Writer::writeSubmessage(a2, v5);
  v6 = *(const PB::Base **)(v3 + 64);
  if (v6)
    this = PB::Writer::writeSubmessage(a2, v6);
  v7 = *(float **)(v3 + 8);
  v8 = *(float **)(v3 + 16);
  while (v7 != v8)
  {
    v9 = *v7++;
    this = PB::Writer::write(a2, v9);
  }
  v10 = *(_BYTE *)(v3 + 108);
  if ((v10 & 0x40) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 100));
    v10 = *(_BYTE *)(v3 + 108);
    if ((v10 & 0x20) == 0)
    {
LABEL_14:
      if ((v10 & 0x80) == 0)
        goto LABEL_15;
LABEL_26:
      this = PB::Writer::write(a2);
      if ((*(_BYTE *)(v3 + 108) & 0x10) == 0)
        goto LABEL_17;
      goto LABEL_16;
    }
  }
  else if ((*(_BYTE *)(v3 + 108) & 0x20) == 0)
  {
    goto LABEL_14;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 96));
  v10 = *(_BYTE *)(v3 + 108);
  if (v10 < 0)
    goto LABEL_26;
LABEL_15:
  if ((v10 & 0x10) != 0)
LABEL_16:
    this = PB::Writer::writeVarInt(a2);
LABEL_17:
  v11 = *(float **)(v3 + 32);
  v12 = *(float **)(v3 + 40);
  while (v11 != v12)
  {
    v13 = *v11++;
    this = PB::Writer::write(a2, v13);
  }
  v14 = *(_BYTE *)(v3 + 108);
  if ((v14 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 80));
    v14 = *(_BYTE *)(v3 + 108);
  }
  if ((v14 & 4) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 84));
  return this;
}

BOOL CMMsl::InEarOptical::operator==(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  float *v14;
  float *v15;
  _BOOL8 result;

  v4 = *(unsigned __int8 *)(a1 + 108);
  v5 = *(unsigned __int8 *)(a2 + 108);
  if ((v4 & 1) != 0)
  {
    if ((v5 & 1) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((v5 & 1) != 0)
  {
    return 0;
  }
  if ((v4 & 8) != 0)
  {
    if ((v5 & 8) == 0 || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88))
      return 0;
  }
  else if ((v5 & 8) != 0)
  {
    return 0;
  }
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a2 + 56);
  if (v6)
  {
    if (!v7 || !CMMsl::ClefMeasurement::operator==(v6, v7))
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  v8 = *(_QWORD *)(a1 + 64);
  v9 = *(_QWORD *)(a2 + 64);
  if (v8)
  {
    if (!v9 || !CMMsl::ClefMeasurement::operator==(v8, v9))
      return 0;
  }
  else if (v9)
  {
    return 0;
  }
  v11 = *(float **)(a1 + 8);
  v10 = *(float **)(a1 + 16);
  v12 = *(float **)(a2 + 8);
  if ((char *)v10 - (char *)v11 == *(_QWORD *)(a2 + 16) - (_QWORD)v12)
  {
    while (v11 != v10)
    {
      if (*v11 != *v12)
        return 0;
      ++v11;
      ++v12;
    }
    if ((v4 & 0x40) != 0)
    {
      if ((v5 & 0x40) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
        return 0;
    }
    else if ((v5 & 0x40) != 0)
    {
      return 0;
    }
    if ((v4 & 0x20) != 0)
    {
      if ((v5 & 0x20) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
        return 0;
    }
    else if ((v5 & 0x20) != 0)
    {
      return 0;
    }
    if ((v5 & v4 & 0x80) != 0)
    {
      if (*(unsigned __int8 *)(a1 + 104) != *(unsigned __int8 *)(a2 + 104))
        return 0;
    }
    else if (((v5 | v4) & 0x80) != 0)
    {
      return 0;
    }
    if ((v4 & 0x10) != 0)
    {
      if ((v5 & 0x10) == 0 || *(_DWORD *)(a1 + 92) != *(_DWORD *)(a2 + 92))
        return 0;
    }
    else if ((v5 & 0x10) != 0)
    {
      return 0;
    }
    v14 = *(float **)(a1 + 32);
    v13 = *(float **)(a1 + 40);
    v15 = *(float **)(a2 + 32);
    if ((char *)v13 - (char *)v14 == *(_QWORD *)(a2 + 40) - (_QWORD)v15)
    {
      while (v14 != v13)
      {
        if (*v14 != *v15)
          return 0;
        ++v14;
        ++v15;
      }
      if ((v4 & 2) != 0)
      {
        if ((v5 & 2) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
          return 0;
      }
      else if ((v5 & 2) != 0)
      {
        return 0;
      }
      result = (v5 & 4) == 0;
      if ((v4 & 4) == 0)
        return result;
      if ((v5 & 4) != 0 && *(float *)(a1 + 84) == *(float *)(a2 + 84))
        return 1;
    }
  }
  return 0;
}

uint64_t CMMsl::InEarOptical::hash_value(CMMsl::InEarOptical *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  float v6;
  float v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  float v16;
  float v17;
  BOOL v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  float v35;

  if ((*((_BYTE *)this + 108) & 1) != 0)
  {
    if (*((double *)this + 9) == 0.0)
      v2 = 0;
    else
      v2 = *((_QWORD *)this + 9);
    if ((*((_BYTE *)this + 108) & 8) != 0)
      goto LABEL_3;
  }
  else
  {
    v2 = 0;
    if ((*((_BYTE *)this + 108) & 8) != 0)
    {
LABEL_3:
      v3 = *((unsigned int *)this + 22);
      goto LABEL_9;
    }
  }
  v3 = 0;
LABEL_9:
  v4 = *((_QWORD *)this + 7);
  if (v4)
  {
    v5 = *(_BYTE *)(v4 + 16);
    v6 = *(float *)(v4 + 8);
    v7 = *(float *)(v4 + 12);
    v8 = v6 == 0.0 || (v5 & 1) == 0;
    v9 = LODWORD(v6);
    if (v8)
      v9 = 0;
    v10 = v5 & 2;
    v11 = v7 == 0.0 || v10 == 0;
    v12 = LODWORD(v7);
    if (v11)
      v12 = 0;
    v13 = v12 ^ v9;
  }
  else
  {
    v13 = 0;
  }
  v14 = *((_QWORD *)this + 8);
  if (v14)
  {
    v15 = *(_BYTE *)(v14 + 16);
    v16 = *(float *)(v14 + 8);
    v17 = *(float *)(v14 + 12);
    v18 = v16 == 0.0 || (v15 & 1) == 0;
    v19 = LODWORD(v16);
    if (v18)
      v19 = 0;
    v20 = v15 & 2;
    v21 = v17 == 0.0 || v20 == 0;
    v22 = LODWORD(v17);
    if (v21)
      v22 = 0;
    v23 = v22 ^ v19;
  }
  else
  {
    v23 = 0;
  }
  v24 = PBHashBytes();
  if ((*((_BYTE *)this + 108) & 0x40) == 0)
  {
    v25 = 0;
    if ((*((_BYTE *)this + 108) & 0x20) != 0)
      goto LABEL_37;
LABEL_47:
    v27 = 0;
    if ((*((_BYTE *)this + 108) & 0x80) != 0)
      goto LABEL_41;
LABEL_48:
    v28 = 0;
    if ((*((_BYTE *)this + 108) & 0x10) != 0)
      goto LABEL_42;
    goto LABEL_49;
  }
  v30 = *((float *)this + 25);
  if (v30 == 0.0)
    v25 = 0;
  else
    v25 = LODWORD(v30);
  if ((*((_BYTE *)this + 108) & 0x20) == 0)
    goto LABEL_47;
LABEL_37:
  v26 = *((float *)this + 24);
  if (v26 == 0.0)
    v27 = 0;
  else
    v27 = LODWORD(v26);
  if ((*((_BYTE *)this + 108) & 0x80) == 0)
    goto LABEL_48;
LABEL_41:
  v28 = *((unsigned __int8 *)this + 104);
  if ((*((_BYTE *)this + 108) & 0x10) != 0)
  {
LABEL_42:
    v29 = *((int *)this + 23);
    goto LABEL_50;
  }
LABEL_49:
  v29 = 0;
LABEL_50:
  v31 = PBHashBytes();
  if ((*((_BYTE *)this + 108) & 2) != 0)
  {
    v35 = *((float *)this + 20);
    v32 = LODWORD(v35);
    if (v35 == 0.0)
      v32 = 0;
    if ((*((_BYTE *)this + 108) & 4) != 0)
      goto LABEL_52;
LABEL_58:
    v34 = 0;
    return v3 ^ v2 ^ v13 ^ v23 ^ v25 ^ v27 ^ v28 ^ v29 ^ v24 ^ v31 ^ v32 ^ v34;
  }
  v32 = 0;
  if ((*((_BYTE *)this + 108) & 4) == 0)
    goto LABEL_58;
LABEL_52:
  v33 = *((float *)this + 21);
  v34 = LODWORD(v33);
  if (v33 == 0.0)
    v34 = 0;
  return v3 ^ v2 ^ v13 ^ v23 ^ v25 ^ v27 ^ v28 ^ v29 ^ v24 ^ v31 ^ v32 ^ v34;
}

_QWORD *CMMsl::InEarOptical::makeCurrent(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[7])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135CD78;
    *(_DWORD *)(v2 + 16) = 0;
    this = (_QWORD *)v1[7];
    v1[7] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::InEarOptical::makeInstability(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[8])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135CD78;
    *(_DWORD *)(v2 + 16) = 0;
    this = (_QWORD *)v1[8];
    v1[8] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t CMMsl::InEarSession::InEarSession(uint64_t this)
{
  *(_DWORD *)(this + 28) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = &off_25135E390;
  return this;
}

{
  *(_DWORD *)(this + 28) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = &off_25135E390;
  return this;
}

void CMMsl::InEarSession::~InEarSession(CMMsl::InEarSession *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_25135E390;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  PB::Base::~Base(this);
}

{
  CMMsl::InEarSession::~InEarSession(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::InEarSession *CMMsl::InEarSession::InEarSession(CMMsl::InEarSession *this, const CMMsl::InEarSession *a2)
{
  uint64_t *v4;
  char v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  int v19;
  int v20;
  uint64_t v21;

  *(_QWORD *)this = &off_25135E390;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_DWORD *)this + 7) = 0;
  *((_DWORD *)this + 8) = 0;
  *((_QWORD *)this + 2) = 0;
  if ((*((_BYTE *)a2 + 32) & 1) != 0)
  {
    v6 = *((_DWORD *)a2 + 6);
    *((_BYTE *)this + 32) = 1;
    *((_DWORD *)this + 6) = v6;
    v5 = 3;
    if ((*((_BYTE *)a2 + 32) & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = 2;
  if ((*((_BYTE *)a2 + 32) & 2) != 0)
  {
LABEL_5:
    v7 = *((_DWORD *)a2 + 7);
    *((_BYTE *)this + 32) = v5;
    *((_DWORD *)this + 7) = v7;
  }
LABEL_6:
  if (!*((_QWORD *)a2 + 2))
    goto LABEL_14;
  v8 = operator new();
  v9 = *((_QWORD *)a2 + 2);
  *(_QWORD *)v8 = &off_25135CD78;
  *(_DWORD *)(v8 + 16) = 0;
  v10 = *(_BYTE *)(v9 + 16);
  if ((v10 & 1) != 0)
  {
    v12 = *(_DWORD *)(v9 + 8);
    *(_BYTE *)(v8 + 16) = 1;
    *(_DWORD *)(v8 + 8) = v12;
    v11 = 3;
    if ((v10 & 2) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
  v11 = 2;
  if ((*(_BYTE *)(v9 + 16) & 2) != 0)
  {
LABEL_11:
    v13 = *(_DWORD *)(v9 + 12);
    *(_BYTE *)(v8 + 16) = v11;
    *(_DWORD *)(v8 + 12) = v13;
  }
LABEL_12:
  v14 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v8;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
LABEL_14:
  if (!*((_QWORD *)a2 + 1))
    return this;
  v15 = operator new();
  v16 = *((_QWORD *)a2 + 1);
  *(_QWORD *)v15 = &off_25135CD78;
  *(_DWORD *)(v15 + 16) = 0;
  v17 = *(_BYTE *)(v16 + 16);
  if ((v17 & 1) != 0)
  {
    v19 = *(_DWORD *)(v16 + 8);
    *(_BYTE *)(v15 + 16) = 1;
    *(_DWORD *)(v15 + 8) = v19;
    v18 = 3;
    if ((v17 & 2) == 0)
      goto LABEL_20;
    goto LABEL_19;
  }
  v18 = 2;
  if ((*(_BYTE *)(v16 + 16) & 2) != 0)
  {
LABEL_19:
    v20 = *(_DWORD *)(v16 + 12);
    *(_BYTE *)(v15 + 16) = v18;
    *(_DWORD *)(v15 + 12) = v20;
  }
LABEL_20:
  v21 = *v4;
  *v4 = v15;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  return this;
}

uint64_t CMMsl::InEarSession::operator=(uint64_t a1, const CMMsl::InEarSession *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  _BYTE v7[8];
  __int128 v8;
  uint64_t v9;
  int v10;

  if ((const CMMsl::InEarSession *)a1 != a2)
  {
    CMMsl::InEarSession::InEarSession((CMMsl::InEarSession *)v7, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v9;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v5;
    CMMsl::InEarSession::~InEarSession((CMMsl::InEarSession *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::InEarSession *a2, CMMsl::InEarSession *a3)
{
  int v3;
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  result = *((double *)a2 + 3);
  v5 = *((_QWORD *)this + 3);
  *((double *)this + 3) = result;
  *((_QWORD *)a2 + 3) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v7;
  return result;
}

uint64_t CMMsl::InEarSession::InEarSession(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)a1 = &off_25135E390;
  *(_DWORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v8 = *v4;
  *v4 = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return a1;
}

uint64_t CMMsl::InEarSession::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  _BYTE v7[8];
  __int128 v8;
  uint64_t v9;
  int v10;

  if (a1 != a2)
  {
    CMMsl::InEarSession::InEarSession((uint64_t)v7, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v9;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v5;
    CMMsl::InEarSession::~InEarSession((CMMsl::InEarSession *)v7);
  }
  return a1;
}

uint64_t CMMsl::InEarSession::formatText(CMMsl::InEarSession *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 32) & 1) != 0)
    PB::TextFormatter::format(a2, "location");
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "maximum");
  v6 = *((_QWORD *)this + 2);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "minimum");
  if ((*((_BYTE *)this + 32) & 2) != 0)
    PB::TextFormatter::format(a2, "state");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::InEarSession::readFrom(CMMsl::InEarSession *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_21:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 32) |= 1u;
          v20 = *((_QWORD *)a2 + 1);
          v21 = *((_QWORD *)a2 + 2);
          v22 = *(_QWORD *)a2;
          if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
          {
            v23 = 0;
            v24 = 0;
            v25 = 0;
            do
            {
              v26 = v20 + 1;
              *((_QWORD *)a2 + 1) = v20 + 1;
              v27 = *(_BYTE *)(v22 + v20);
              v25 |= (unint64_t)(v27 & 0x7F) << v23;
              if ((v27 & 0x80) == 0)
                goto LABEL_61;
              v23 += 7;
              v20 = v26;
              v14 = v24++ > 8;
            }
            while (!v14);
LABEL_50:
            LODWORD(v25) = 0;
            goto LABEL_61;
          }
          v39 = 0;
          v40 = 0;
          v25 = 0;
          if (v21 <= v20)
            v21 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v21 == v20)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v41 = v20 + 1;
              v42 = *(_BYTE *)(v22 + v20);
              *((_QWORD *)a2 + 1) = v41;
              v25 |= (unint64_t)(v42 & 0x7F) << v39;
              if (v42 < 0)
              {
                v39 += 7;
                v20 = v41;
                v14 = v40++ > 8;
                if (v14)
                  goto LABEL_50;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v25) = 0;
            }
            break;
          }
LABEL_61:
          *((_DWORD *)this + 6) = v25;
          goto LABEL_66;
        case 2u:
          *((_BYTE *)this + 32) |= 2u;
          v28 = *((_QWORD *)a2 + 1);
          v29 = *((_QWORD *)a2 + 2);
          v30 = *(_QWORD *)a2;
          if (v28 <= 0xFFFFFFFFFFFFFFF5 && v28 + 10 <= v29)
          {
            v31 = 0;
            v32 = 0;
            v33 = 0;
            do
            {
              v34 = v28 + 1;
              *((_QWORD *)a2 + 1) = v28 + 1;
              v35 = *(_BYTE *)(v30 + v28);
              v33 |= (unint64_t)(v35 & 0x7F) << v31;
              if ((v35 & 0x80) == 0)
                goto LABEL_65;
              v31 += 7;
              v28 = v34;
              v14 = v32++ > 8;
            }
            while (!v14);
LABEL_57:
            LODWORD(v33) = 0;
            goto LABEL_65;
          }
          v43 = 0;
          v44 = 0;
          v33 = 0;
          if (v29 <= v28)
            v29 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v29 == v28)
            {
              LODWORD(v33) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v45 = v28 + 1;
              v46 = *(_BYTE *)(v30 + v28);
              *((_QWORD *)a2 + 1) = v45;
              v33 |= (unint64_t)(v46 & 0x7F) << v43;
              if (v46 < 0)
              {
                v43 += 7;
                v28 = v45;
                v14 = v44++ > 8;
                if (v14)
                  goto LABEL_57;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v33) = 0;
            }
            break;
          }
LABEL_65:
          *((_DWORD *)this + 7) = v33;
          goto LABEL_66;
        case 3u:
          v36 = (_DWORD *)operator new();
          *(_QWORD *)v36 = &off_25135CD78;
          v36[4] = 0;
          v37 = *((_QWORD *)this + 2);
          *((_QWORD *)this + 2) = v36;
          if (v37)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
            v36 = (_DWORD *)*((_QWORD *)this + 2);
          }
          goto LABEL_41;
        case 4u:
          v36 = (_DWORD *)operator new();
          *(_QWORD *)v36 = &off_25135CD78;
          v36[4] = 0;
          v38 = *((_QWORD *)this + 1);
          *((_QWORD *)this + 1) = v36;
          if (v38)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
            v36 = (_DWORD *)*((_QWORD *)this + 1);
          }
LABEL_41:
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v36 + 16))(v36, a2) & 1) == 0)
          {
            return 0;
          }
          PB::Reader::recallMark();
          break;
        default:
          goto LABEL_19;
      }
      goto LABEL_66;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_21;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    result = PB::Reader::skip(a2);
    if (!(_DWORD)result)
      return result;
LABEL_66:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
}

uint64_t CMMsl::InEarSession::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  const PB::Base *v5;
  const PB::Base *v6;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 32);
  }
  if ((v4 & 2) != 0)
    this = PB::Writer::writeVarInt(a2);
  v5 = *(const PB::Base **)(v3 + 16);
  if (v5)
    this = PB::Writer::writeSubmessage(a2, v5);
  v6 = *(const PB::Base **)(v3 + 8);
  if (v6)
    return PB::Writer::writeSubmessage(a2, v6);
  return this;
}

BOOL CMMsl::InEarSession::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;

  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 2) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    if (!v5 || !CMMsl::ClefMeasurement::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = *(_QWORD *)(a2 + 8);
  result = v6 == 0;
  if (!*(_QWORD *)(a1 + 8))
    return result;
  return v6 && CMMsl::ClefMeasurement::operator==(*(_QWORD *)(a1 + 8), v6);
}

uint64_t CMMsl::InEarSession::hash_value(CMMsl::InEarSession *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  float v5;
  float v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  float v14;
  float v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  uint64_t v20;

  if ((*((_BYTE *)this + 32) & 1) != 0)
  {
    v1 = *((unsigned int *)this + 6);
    if ((*((_BYTE *)this + 32) & 2) != 0)
      goto LABEL_3;
  }
  else
  {
    v1 = 0;
    if ((*((_BYTE *)this + 32) & 2) != 0)
    {
LABEL_3:
      v2 = *((int *)this + 7);
      goto LABEL_6;
    }
  }
  v2 = 0;
LABEL_6:
  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    v4 = *(_BYTE *)(v3 + 16);
    v5 = *(float *)(v3 + 8);
    v6 = *(float *)(v3 + 12);
    v7 = v5 == 0.0 || (v4 & 1) == 0;
    v8 = LODWORD(v5);
    if (v7)
      v8 = 0;
    v9 = v4 & 2;
    v10 = v6 == 0.0 || v9 == 0;
    v11 = LODWORD(v6);
    if (v10)
      v11 = 0;
    v3 = v11 ^ v8;
  }
  v12 = *((_QWORD *)this + 1);
  if (v12)
  {
    v13 = *(_BYTE *)(v12 + 16);
    v14 = *(float *)(v12 + 8);
    v15 = *(float *)(v12 + 12);
    v16 = v14 == 0.0 || (v13 & 1) == 0;
    v17 = LODWORD(v14);
    if (v16)
      v17 = 0;
    v18 = v13 & 2;
    v19 = v15 == 0.0 || v18 == 0;
    v20 = LODWORD(v15);
    if (v19)
      v20 = 0;
    v12 = v20 ^ v17;
  }
  return v2 ^ v1 ^ v3 ^ v12;
}

_QWORD *CMMsl::InEarSession::makeMinimum(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[2])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135CD78;
    *(_DWORD *)(v2 + 16) = 0;
    this = (_QWORD *)v1[2];
    v1[2] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::InEarSession::makeMaximum(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135CD78;
    *(_DWORD *)(v2 + 16) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

double CMMsl::InEarTransition::InEarTransition(CMMsl::InEarTransition *this)
{
  double result;

  *(_QWORD *)this = &off_25135E3C8;
  result = 0.0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_25135E3C8;
  result = 0.0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  return result;
}

void CMMsl::InEarTransition::~InEarTransition(CMMsl::InEarTransition *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::InEarTransition::InEarTransition(uint64_t this, const CMMsl::InEarTransition *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;

  *(_QWORD *)this = &off_25135E3C8;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 28) = 0;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_BYTE *)(this + 32) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 32) & 8) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 6);
    v3 |= 8u;
    *(_BYTE *)(this + 32) = v3;
    *(_DWORD *)(this + 24) = v5;
    v2 = *((_BYTE *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *(_BYTE *)(this + 32) = v3;
    *(_DWORD *)(this + 20) = v6;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        return this;
LABEL_12:
      v8 = *((_DWORD *)a2 + 7);
      *(_BYTE *)(this + 32) = v3 | 0x10;
      *(_DWORD *)(this + 28) = v8;
      return this;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *(_BYTE *)(this + 32) = v3;
  *(_DWORD *)(this + 16) = v7;
  if ((*((_BYTE *)a2 + 32) & 0x10) != 0)
    goto LABEL_12;
  return this;
}

uint64_t CMMsl::InEarTransition::operator=(uint64_t a1, const CMMsl::InEarTransition *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  _BYTE v7[8];
  uint64_t v8;
  __int128 v9;
  int v10;

  if ((const CMMsl::InEarTransition *)a1 != a2)
  {
    CMMsl::InEarTransition::InEarTransition((uint64_t)v7, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v8;
    v8 = v4;
    v5 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v9;
    v9 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::InEarTransition *a2, CMMsl::InEarTransition *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  double result;
  uint64_t v7;
  int v8;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v5;
  result = *((double *)a2 + 2);
  v7 = *((_QWORD *)this + 2);
  *((double *)this + 2) = result;
  *((_QWORD *)a2 + 2) = v7;
  v8 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v8;
  return result;
}

double CMMsl::InEarTransition::InEarTransition(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_25135E3C8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135E3C8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  return result;
}

uint64_t CMMsl::InEarTransition::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  _QWORD v9[2];
  __int128 v10;
  int v11;

  if (a1 != a2)
  {
    v9[0] = &off_25135E3C8;
    v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v11 = *(_DWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v9[1] = v5;
    v6 = *(_OWORD *)(a1 + 16);
    v7 = *(_OWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 16) = v7;
    v10 = v6;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::InEarTransition::formatText(CMMsl::InEarTransition *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "eventTag");
    v5 = *((_BYTE *)this + 32);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*((_BYTE *)this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "from");
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    if ((*((_BYTE *)this + 32) & 0x10) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(a2, "location");
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 1) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 0x10) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "to");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::InEarTransition::readFrom(CMMsl::InEarTransition *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_26;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_21;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_26:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 32) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 2u:
        *((_BYTE *)this + 32) |= 8u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v45 = 0;
          v46 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_92;
            }
            v47 = v21++;
            v48 = *(_BYTE *)(v22 + v47);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v48 & 0x7F) << v45;
            if ((v48 & 0x80) == 0)
              break;
            v45 += 7;
            v14 = v46++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
LABEL_91:
              v2 = v47 + 1;
              goto LABEL_92;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v25) = 0;
          goto LABEL_91;
        }
        v23 = 0;
        v24 = 0;
        v25 = 0;
        do
        {
          v2 = v21 + 1;
          *((_QWORD *)a2 + 1) = v21 + 1;
          v26 = *(_BYTE *)(v22 + v21);
          v25 |= (unint64_t)(v26 & 0x7F) << v23;
          if ((v26 & 0x80) == 0)
            goto LABEL_92;
          v23 += 7;
          v21 = v2;
          v14 = v24++ > 8;
        }
        while (!v14);
        LODWORD(v25) = 0;
LABEL_92:
        *((_DWORD *)this + 6) = v25;
        break;
      case 3u:
        *((_BYTE *)this + 32) |= 4u;
        v27 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v28 = *(_QWORD *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v49 = 0;
          v50 = 0;
          v31 = 0;
          if (v2 <= v27)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_97;
            }
            v51 = v27++;
            v52 = *(_BYTE *)(v28 + v51);
            *((_QWORD *)a2 + 1) = v27;
            v31 |= (unint64_t)(v52 & 0x7F) << v49;
            if ((v52 & 0x80) == 0)
              break;
            v49 += 7;
            v14 = v50++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
LABEL_96:
              v2 = v51 + 1;
              goto LABEL_97;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v31) = 0;
          goto LABEL_96;
        }
        v29 = 0;
        v30 = 0;
        v31 = 0;
        do
        {
          v2 = v27 + 1;
          *((_QWORD *)a2 + 1) = v27 + 1;
          v32 = *(_BYTE *)(v28 + v27);
          v31 |= (unint64_t)(v32 & 0x7F) << v29;
          if ((v32 & 0x80) == 0)
            goto LABEL_97;
          v29 += 7;
          v27 = v2;
          v14 = v30++ > 8;
        }
        while (!v14);
        LODWORD(v31) = 0;
LABEL_97:
        *((_DWORD *)this + 5) = v31;
        break;
      case 4u:
        *((_BYTE *)this + 32) |= 2u;
        v33 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v34 = *(_QWORD *)a2;
        if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
        {
          v53 = 0;
          v54 = 0;
          v37 = 0;
          if (v2 <= v33)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v33)
            {
              LODWORD(v37) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_102;
            }
            v55 = v33++;
            v56 = *(_BYTE *)(v34 + v55);
            *((_QWORD *)a2 + 1) = v33;
            v37 |= (unint64_t)(v56 & 0x7F) << v53;
            if ((v56 & 0x80) == 0)
              break;
            v53 += 7;
            v14 = v54++ > 8;
            if (v14)
            {
              LODWORD(v37) = 0;
LABEL_101:
              v2 = v55 + 1;
              goto LABEL_102;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v37) = 0;
          goto LABEL_101;
        }
        v35 = 0;
        v36 = 0;
        v37 = 0;
        do
        {
          v2 = v33 + 1;
          *((_QWORD *)a2 + 1) = v33 + 1;
          v38 = *(_BYTE *)(v34 + v33);
          v37 |= (unint64_t)(v38 & 0x7F) << v35;
          if ((v38 & 0x80) == 0)
            goto LABEL_102;
          v35 += 7;
          v33 = v2;
          v14 = v36++ > 8;
        }
        while (!v14);
        LODWORD(v37) = 0;
LABEL_102:
        *((_DWORD *)this + 4) = v37;
        break;
      case 5u:
        *((_BYTE *)this + 32) |= 0x10u;
        v39 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v40 = *(_QWORD *)a2;
        if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
        {
          v57 = 0;
          v58 = 0;
          v43 = 0;
          if (v2 <= v39)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v39)
            {
              LODWORD(v43) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_107;
            }
            v59 = v39++;
            v60 = *(_BYTE *)(v40 + v59);
            *((_QWORD *)a2 + 1) = v39;
            v43 |= (unint64_t)(v60 & 0x7F) << v57;
            if ((v60 & 0x80) == 0)
              break;
            v57 += 7;
            v14 = v58++ > 8;
            if (v14)
            {
              LODWORD(v43) = 0;
LABEL_106:
              v2 = v59 + 1;
              goto LABEL_107;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v43) = 0;
          goto LABEL_106;
        }
        v41 = 0;
        v42 = 0;
        v43 = 0;
        do
        {
          v2 = v39 + 1;
          *((_QWORD *)a2 + 1) = v39 + 1;
          v44 = *(_BYTE *)(v40 + v39);
          v43 |= (unint64_t)(v44 & 0x7F) << v41;
          if ((v44 & 0x80) == 0)
            goto LABEL_107;
          v41 += 7;
          v39 = v2;
          v14 = v42++ > 8;
        }
        while (!v14);
        LODWORD(v43) = 0;
LABEL_107:
        *((_DWORD *)this + 7) = v43;
        break;
      default:
        goto LABEL_19;
    }
LABEL_21:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::InEarTransition::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(this + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      return this;
    return PB::Writer::writeVarInt(a2);
  }
LABEL_10:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_BYTE *)(v3 + 32) & 0x10) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

BOOL CMMsl::InEarTransition::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 8) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 32) & 0x10) == 0;
  if ((*(_BYTE *)(a1 + 32) & 0x10) != 0)
    return (*(_BYTE *)(a2 + 32) & 0x10) != 0 && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28);
  return v2;
}

uint64_t CMMsl::InEarTransition::hash_value(CMMsl::InEarTransition *this)
{
  double v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((*((_BYTE *)this + 32) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 32) & 8) != 0)
    {
LABEL_3:
      v2 = *((unsigned int *)this + 6);
      if ((*((_BYTE *)this + 32) & 4) != 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 32) & 8) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 32) & 4) != 0)
  {
LABEL_4:
    v3 = *((int *)this + 5);
    if ((*((_BYTE *)this + 32) & 2) != 0)
      goto LABEL_5;
LABEL_12:
    v4 = 0;
    if ((*((_BYTE *)this + 32) & 0x10) != 0)
      goto LABEL_6;
LABEL_13:
    v5 = 0;
    return v2 ^ *(_QWORD *)&v1 ^ v3 ^ v4 ^ v5;
  }
LABEL_11:
  v3 = 0;
  if ((*((_BYTE *)this + 32) & 2) == 0)
    goto LABEL_12;
LABEL_5:
  v4 = *((int *)this + 4);
  if ((*((_BYTE *)this + 32) & 0x10) == 0)
    goto LABEL_13;
LABEL_6:
  v5 = *((int *)this + 7);
  return v2 ^ *(_QWORD *)&v1 ^ v3 ^ v4 ^ v5;
}

double CMMsl::InEarTransitionEntry::InEarTransitionEntry(CMMsl::InEarTransitionEntry *this)
{
  double result;

  *(_QWORD *)this = &off_25135E400;
  *((_DWORD *)this + 31) = 0;
  *((_DWORD *)this + 33) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_25135E400;
  *((_DWORD *)this + 31) = 0;
  *((_DWORD *)this + 33) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  return result;
}

void CMMsl::InEarTransitionEntry::~InEarTransitionEntry(CMMsl::InEarTransitionEntry *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void **v11;

  *(_QWORD *)this = &off_25135E400;
  v2 = (_QWORD *)*((_QWORD *)this + 12);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 13);
    v4 = (void *)*((_QWORD *)this + 12);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 12);
    }
    *((_QWORD *)this + 13) = v2;
    operator delete(v4);
  }
  v11 = (void **)((char *)this + 72);
  sub_242910B70(&v11);
  v7 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = (void *)*((_QWORD *)this + 4);
  if (v9)
  {
    *((_QWORD *)this + 5) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 1);
  if (v10)
  {
    *((_QWORD *)this + 2) = v10;
    operator delete(v10);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::InEarTransitionEntry::~InEarTransitionEntry(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::InEarTransitionEntry *CMMsl::InEarTransitionEntry::InEarTransitionEntry(CMMsl::InEarTransitionEntry *this, const CMMsl::InEarTransitionEntry *a2)
{
  _QWORD *v4;
  uint64_t **v5;
  char v6;
  int v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  int v22;
  int v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  int v35;
  int v36;
  unint64_t v37;
  uint64_t *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  int64x2_t v51;
  unint64_t v52;
  uint64_t v54;
  int64x2_t v55;
  unint64_t v56;
  char *v57;

  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (_QWORD *)((char *)this + 8);
  *(_QWORD *)this = &off_25135E400;
  *(_OWORD *)((char *)this + 72) = 0u;
  v5 = (uint64_t **)((char *)this + 72);
  *((_DWORD *)this + 31) = 0;
  *((_DWORD *)this + 33) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  if ((*((_BYTE *)a2 + 132) & 1) == 0)
  {
    v6 = 2;
    if ((*((_BYTE *)a2 + 132) & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v7 = *((_DWORD *)a2 + 30);
  *((_BYTE *)this + 132) = 1;
  *((_DWORD *)this + 30) = v7;
  v6 = 3;
  if ((*((_BYTE *)a2 + 132) & 2) != 0)
  {
LABEL_5:
    v8 = *((_DWORD *)a2 + 31);
    *((_BYTE *)this + 132) = v6;
    *((_DWORD *)this + 31) = v8;
  }
LABEL_6:
  v9 = (uint64_t *)*((_QWORD *)a2 + 9);
  v10 = (uint64_t *)*((_QWORD *)a2 + 10);
  while (v9 != v10)
    sub_24273F69C(v5, *v9++);
  if (this != a2)
  {
    sub_242911380((_QWORD *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
    sub_242911380(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  }
  if (*((_QWORD *)a2 + 8))
  {
    v11 = operator new();
    v12 = *((_QWORD *)a2 + 8);
    *(_QWORD *)v11 = &off_25135CD78;
    *(_DWORD *)(v11 + 16) = 0;
    v13 = *(_BYTE *)(v12 + 16);
    if ((v13 & 1) != 0)
    {
      v15 = *(_DWORD *)(v12 + 8);
      *(_BYTE *)(v11 + 16) = 1;
      *(_DWORD *)(v11 + 8) = v15;
      v14 = 3;
      if ((v13 & 2) == 0)
        goto LABEL_17;
    }
    else
    {
      v14 = 2;
      if ((*(_BYTE *)(v12 + 16) & 2) == 0)
      {
LABEL_17:
        v17 = *((_QWORD *)this + 8);
        *((_QWORD *)this + 8) = v11;
        if (v17)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
        goto LABEL_19;
      }
    }
    v16 = *(_DWORD *)(v12 + 12);
    *(_BYTE *)(v11 + 16) = v14;
    *(_DWORD *)(v11 + 12) = v16;
    goto LABEL_17;
  }
LABEL_19:
  if (!*((_QWORD *)a2 + 7))
    goto LABEL_27;
  v18 = operator new();
  v19 = *((_QWORD *)a2 + 7);
  *(_QWORD *)v18 = &off_25135CD78;
  *(_DWORD *)(v18 + 16) = 0;
  v20 = *(_BYTE *)(v19 + 16);
  if ((v20 & 1) != 0)
  {
    v22 = *(_DWORD *)(v19 + 8);
    *(_BYTE *)(v18 + 16) = 1;
    *(_DWORD *)(v18 + 8) = v22;
    v21 = 3;
    if ((v20 & 2) == 0)
      goto LABEL_25;
    goto LABEL_24;
  }
  v21 = 2;
  if ((*(_BYTE *)(v19 + 16) & 2) != 0)
  {
LABEL_24:
    v23 = *(_DWORD *)(v19 + 12);
    *(_BYTE *)(v18 + 16) = v21;
    *(_DWORD *)(v18 + 12) = v23;
  }
LABEL_25:
  v24 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = v18;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
LABEL_27:
  v25 = *((_BYTE *)a2 + 132);
  if ((v25 & 8) != 0)
  {
    v26 = *((_BYTE *)a2 + 129);
    *((_BYTE *)this + 132) |= 8u;
    *((_BYTE *)this + 129) = v26;
    v25 = *((_BYTE *)a2 + 132);
  }
  if ((v25 & 4) != 0)
  {
    v27 = *((_BYTE *)a2 + 128);
    *((_BYTE *)this + 132) |= 4u;
    *((_BYTE *)this + 128) = v27;
  }
  v28 = (uint64_t *)*((_QWORD *)a2 + 12);
  v29 = (uint64_t *)*((_QWORD *)a2 + 13);
  if (v28 != v29)
  {
    while (1)
    {
      v30 = *v28;
      v31 = operator new();
      v32 = v31;
      *(_QWORD *)v31 = &off_25135CDB0;
      *(_DWORD *)(v31 + 16) = 0;
      v33 = *(_BYTE *)(v30 + 16);
      if ((v33 & 1) == 0)
        break;
      v35 = *(_DWORD *)(v30 + 8);
      *(_BYTE *)(v31 + 16) = 1;
      *(_DWORD *)(v31 + 8) = v35;
      v34 = 3;
      if ((v33 & 2) != 0)
        goto LABEL_36;
LABEL_37:
      v38 = (uint64_t *)*((_QWORD *)this + 13);
      v37 = *((_QWORD *)this + 14);
      if ((unint64_t)v38 >= v37)
      {
        v40 = *((_QWORD *)this + 12);
        v41 = ((uint64_t)v38 - v40) >> 3;
        if ((unint64_t)(v41 + 1) >> 61)
          sub_242729A44();
        v42 = v37 - v40;
        v43 = v42 >> 2;
        if (v42 >> 2 <= (unint64_t)(v41 + 1))
          v43 = v41 + 1;
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
          v44 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v44 = v43;
        v57 = (char *)this + 112;
        if (v44)
          v44 = (unint64_t)sub_2429112FC(v44);
        else
          v45 = 0;
        v46 = (uint64_t *)(v44 + 8 * v41);
        v47 = v44 + 8 * v45;
        v56 = v47;
        *v46 = v32;
        v39 = v46 + 1;
        v55.i64[1] = (uint64_t)(v46 + 1);
        v49 = (_QWORD *)*((_QWORD *)this + 12);
        v48 = (_QWORD *)*((_QWORD *)this + 13);
        if (v48 == v49)
        {
          v51 = vdupq_n_s64((unint64_t)v48);
        }
        else
        {
          do
          {
            v50 = *--v48;
            *v48 = 0;
            *--v46 = v50;
          }
          while (v48 != v49);
          v51 = *((int64x2_t *)this + 6);
          v39 = (_QWORD *)v55.i64[1];
          v47 = v56;
        }
        *((_QWORD *)this + 12) = v46;
        *((_QWORD *)this + 13) = v39;
        v55 = v51;
        v52 = *((_QWORD *)this + 14);
        *((_QWORD *)this + 14) = v47;
        v56 = v52;
        v54 = v51.i64[0];
        sub_2429114EC((uint64_t)&v54);
      }
      else
      {
        *v38 = v31;
        v39 = v38 + 1;
      }
      *((_QWORD *)this + 13) = v39;
      if (++v28 == v29)
        return this;
    }
    v34 = 2;
    if ((*(_BYTE *)(v30 + 16) & 2) == 0)
      goto LABEL_37;
LABEL_36:
    v36 = *(_DWORD *)(v30 + 12);
    *(_BYTE *)(v31 + 16) = v34;
    *(_DWORD *)(v31 + 12) = v36;
    goto LABEL_37;
  }
  return this;
}

void sub_2427CD7AC(void *a1)
{
  sub_2427297D4(a1);
}

CMMsl *CMMsl::InEarTransitionEntry::operator=(CMMsl *a1, const CMMsl::InEarTransitionEntry *a2)
{
  CMMsl::InEarTransitionEntry *v3;
  _BYTE v5[136];

  if (a1 != a2)
  {
    CMMsl::InEarTransitionEntry::InEarTransitionEntry((CMMsl::InEarTransitionEntry *)v5, a2);
    CMMsl::swap(a1, (CMMsl::InEarTransitionEntry *)v5, v3);
    CMMsl::InEarTransitionEntry::~InEarTransitionEntry((CMMsl::InEarTransitionEntry *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::InEarTransitionEntry *a2, CMMsl::InEarTransitionEntry *a3)
{
  int v3;
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v3;
  result = *((double *)a2 + 15);
  v5 = *((_QWORD *)this + 15);
  *((double *)this + 15) = result;
  *((_QWORD *)a2 + 15) = v5;
  v6 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v6;
  v7 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v7;
  v8 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v8;
  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v9;
  v10 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v10;
  v11 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v11;
  v12 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v12;
  v13 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v13;
  v14 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v14;
  v15 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v15;
  v16 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v16;
  LOBYTE(v16) = *((_BYTE *)this + 129);
  *((_BYTE *)this + 129) = *((_BYTE *)a2 + 129);
  *((_BYTE *)a2 + 129) = v16;
  LOBYTE(v16) = *((_BYTE *)this + 128);
  *((_BYTE *)this + 128) = *((_BYTE *)a2 + 128);
  *((_BYTE *)a2 + 128) = v16;
  v17 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v17;
  v18 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v18;
  v19 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v19;
  return result;
}

uint64_t CMMsl::InEarTransitionEntry::InEarTransitionEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)a1 = &off_25135E400;
  v4 = a1 + 32;
  *(_DWORD *)(a1 + 124) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v5 = a1 + 8;
  *(_OWORD *)(a1 + 72) = 0u;
  v6 = (_OWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a2 + 132) = 0;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  sub_242910BEC((_QWORD *)(a1 + 72));
  *v6 = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  sub_242911330(v4, (__n128 *)(a2 + 32));
  v7 = sub_242911330(v5, (__n128 *)(a2 + 8));
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  v9 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v8;
  if (v9)
    (*(void (**)(uint64_t, __n128))(*(_QWORD *)v9 + 8))(v9, v7);
  v10 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v10;
  if (v11)
    (*(void (**)(uint64_t, __n128))(*(_QWORD *)v11 + 8))(v11, v7);
  v12 = (void **)(a1 + 96);
  v13 = *(_QWORD **)(a1 + 96);
  *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  if (v13)
  {
    v14 = *(_QWORD **)(a1 + 104);
    v15 = v13;
    if (v14 != v13)
    {
      do
      {
        v17 = *--v14;
        v16 = v17;
        *v14 = 0;
        if (v17)
          (*(void (**)(uint64_t, __n128))(*(_QWORD *)v16 + 8))(v16, v7);
      }
      while (v14 != v13);
      v15 = *v12;
    }
    *(_QWORD *)(a1 + 104) = v13;
    operator delete(v15);
    *v12 = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  return a1;
}

CMMsl *CMMsl::InEarTransitionEntry::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::InEarTransitionEntry *v3;
  _BYTE v5[136];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::InEarTransitionEntry::InEarTransitionEntry((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::InEarTransitionEntry *)v5, v3);
    CMMsl::InEarTransitionEntry::~InEarTransitionEntry((CMMsl::InEarTransitionEntry *)v5);
  }
  return a1;
}

uint64_t CMMsl::InEarTransitionEntry::formatText(CMMsl::InEarTransitionEntry *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  float *v14;
  float *v15;
  float v16;
  float *v17;
  float *v18;
  float v19;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 7);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "baseline");
  if ((*((_BYTE *)this + 132) & 1) != 0)
    PB::TextFormatter::format(a2, "location");
  v6 = *((_QWORD *)this + 8);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "minimum");
  v7 = (uint64_t *)*((_QWORD *)this + 9);
  v8 = (uint64_t *)*((_QWORD *)this + 10);
  while (v7 != v8)
  {
    v9 = *v7++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, a2, "optical");
  }
  v10 = *((_BYTE *)this + 132);
  if ((v10 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "ringBufferUpdated");
    v10 = *((_BYTE *)this + 132);
    if ((v10 & 8) == 0)
    {
LABEL_11:
      if ((v10 & 2) == 0)
        goto LABEL_13;
      goto LABEL_12;
    }
  }
  else if ((*((_BYTE *)this + 132) & 8) == 0)
  {
    goto LABEL_11;
  }
  PB::TextFormatter::format(a2, "runningMinAccepted");
  if ((*((_BYTE *)this + 132) & 2) != 0)
LABEL_12:
    PB::TextFormatter::format(a2, "state");
LABEL_13:
  v11 = (uint64_t *)*((_QWORD *)this + 12);
  v12 = (uint64_t *)*((_QWORD *)this + 13);
  while (v11 != v12)
  {
    v13 = *v11++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v13 + 32))(v13, a2, "temp");
  }
  v14 = (float *)*((_QWORD *)this + 1);
  v15 = (float *)*((_QWORD *)this + 2);
  while (v14 != v15)
  {
    v16 = *v14++;
    PB::TextFormatter::format(a2, "tilt", v16);
  }
  v17 = (float *)*((_QWORD *)this + 4);
  v18 = (float *)*((_QWORD *)this + 5);
  while (v17 != v18)
  {
    v19 = *v17++;
    PB::TextFormatter::format(a2, "tip", v19);
  }
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::InEarTransitionEntry::readFrom(int64x2_t *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  int64x2_t *v9;
  void (**v10)(CMMsl::ClefMeasurement *__hidden);
  uint64_t v11;
  char v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  BOOL v17;
  char v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  _DWORD *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  int v43;
  unint64_t v44;
  void (**v45)(CMMsl::ClefMeasurement *__hidden);
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  _QWORD *v50;
  _DWORD *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  _DWORD *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _DWORD *v63;
  int v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  int v68;
  BOOL v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char v73;
  unsigned int v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  int v82;
  BOOL v83;
  unint64_t v84;
  char *v85;
  _DWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  char v93;
  unsigned int v94;
  unint64_t v95;
  char v96;
  unint64_t v97;
  char *v98;
  char v99;
  unsigned int v100;
  unint64_t v101;
  char v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  unint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  int64x2_t v120;
  uint64_t v121;
  uint64_t v122;
  _DWORD *v123;
  int v124;
  _DWORD *v125;
  int v126;
  unint64_t v127;
  uint64_t v130;
  int64x2_t v131;
  unint64_t v132;
  int64x2_t *v133;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  v8 = (uint64_t **)&this[4].i64[1];
  v9 = this + 7;
  v10 = &off_25135CD78;
  do
  {
    v11 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      while (1)
      {
        v15 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v16 = *(_BYTE *)(v11 + v2);
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0)
          break;
        v12 += 7;
        v2 = v15;
        v17 = v13++ > 8;
        if (v17)
          goto LABEL_20;
      }
LABEL_22:
      v22 = v14 & 7;
      if (v22 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v14 >> 3))
      {
        case 1u:
          this[8].i8[4] |= 1u;
          v23 = *((_QWORD *)a2 + 1);
          v24 = *((_QWORD *)a2 + 2);
          v25 = *(_QWORD *)a2;
          if (v23 <= 0xFFFFFFFFFFFFFFF5 && v23 + 10 <= v24)
          {
            v26 = 0;
            v27 = 0;
            v28 = 0;
            do
            {
              v29 = v23 + 1;
              *((_QWORD *)a2 + 1) = v23 + 1;
              v30 = *(_BYTE *)(v25 + v23);
              v28 |= (unint64_t)(v30 & 0x7F) << v26;
              if ((v30 & 0x80) == 0)
                goto LABEL_160;
              v26 += 7;
              v23 = v29;
              v17 = v27++ > 8;
            }
            while (!v17);
LABEL_116:
            LODWORD(v28) = 0;
            goto LABEL_160;
          }
          v93 = 0;
          v94 = 0;
          v28 = 0;
          if (v24 <= v23)
            v24 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v24 == v23)
            {
              LODWORD(v28) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v95 = v23 + 1;
              v96 = *(_BYTE *)(v25 + v23);
              *((_QWORD *)a2 + 1) = v95;
              v28 |= (unint64_t)(v96 & 0x7F) << v93;
              if (v96 < 0)
              {
                v93 += 7;
                v23 = v95;
                v17 = v94++ > 8;
                if (v17)
                  goto LABEL_116;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v28) = 0;
            }
            break;
          }
LABEL_160:
          this[7].i32[2] = v28;
          goto LABEL_182;
        case 2u:
          this[8].i8[4] |= 2u;
          v70 = *((_QWORD *)a2 + 1);
          v71 = *((_QWORD *)a2 + 2);
          v72 = *(_QWORD *)a2;
          if (v70 <= 0xFFFFFFFFFFFFFFF5 && v70 + 10 <= v71)
          {
            v73 = 0;
            v74 = 0;
            v75 = 0;
            do
            {
              v76 = v70 + 1;
              *((_QWORD *)a2 + 1) = v70 + 1;
              v77 = *(_BYTE *)(v72 + v70);
              v75 |= (unint64_t)(v77 & 0x7F) << v73;
              if ((v77 & 0x80) == 0)
                goto LABEL_163;
              v73 += 7;
              v70 = v76;
              v17 = v74++ > 8;
            }
            while (!v17);
LABEL_125:
            LODWORD(v75) = 0;
            goto LABEL_163;
          }
          v99 = 0;
          v100 = 0;
          v75 = 0;
          if (v71 <= v70)
            v71 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v71 == v70)
            {
              LODWORD(v75) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v101 = v70 + 1;
              v102 = *(_BYTE *)(v72 + v70);
              *((_QWORD *)a2 + 1) = v101;
              v75 |= (unint64_t)(v102 & 0x7F) << v99;
              if (v102 < 0)
              {
                v99 += 7;
                v70 = v101;
                v17 = v100++ > 8;
                if (v17)
                  goto LABEL_125;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v75) = 0;
            }
            break;
          }
LABEL_163:
          this[7].i32[3] = v75;
          goto LABEL_182;
        case 3u:
          sub_2427406E4(v8);
          v51 = *(_DWORD **)(this[5].i64[0] - 8);
          goto LABEL_95;
        case 4u:
          if (v22 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v52 = *((_QWORD *)a2 + 1);
            v53 = *((_QWORD *)a2 + 2);
            while (v52 < v53 && !*((_BYTE *)a2 + 24))
            {
              v55 = (char *)this[2].i64[1];
              v54 = this[3].u64[0];
              if ((unint64_t)v55 >= v54)
              {
                v57 = (char *)this[2].i64[0];
                v58 = (v55 - v57) >> 2;
                v59 = v58 + 1;
                if ((unint64_t)(v58 + 1) >> 62)
                  goto LABEL_192;
                v60 = v54 - (_QWORD)v57;
                if (v60 >> 1 > v59)
                  v59 = v60 >> 1;
                if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL)
                  v61 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v61 = v59;
                if (v61)
                {
                  v61 = (unint64_t)sub_2429114B8(v61);
                  v57 = (char *)this[2].i64[0];
                  v55 = (char *)this[2].i64[1];
                }
                else
                {
                  v62 = 0;
                }
                v63 = (_DWORD *)(v61 + 4 * v58);
                *v63 = 0;
                v56 = v63 + 1;
                while (v55 != v57)
                {
                  v64 = *((_DWORD *)v55 - 1);
                  v55 -= 4;
                  *--v63 = v64;
                }
                this[2].i64[0] = (uint64_t)v63;
                this[2].i64[1] = (uint64_t)v56;
                this[3].i64[0] = v61 + 4 * v62;
                if (v57)
                  operator delete(v57);
              }
              else
              {
                *(_DWORD *)v55 = 0;
                v56 = v55 + 4;
              }
              this[2].i64[1] = (uint64_t)v56;
              v65 = *((_QWORD *)a2 + 1);
              if (v65 > 0xFFFFFFFFFFFFFFFBLL || v65 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_130;
              *(v56 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v65);
              v53 = *((_QWORD *)a2 + 2);
              v52 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v52;
            }
            goto LABEL_97;
          }
          v98 = (char *)this[2].i64[1];
          v97 = this[3].u64[0];
          if ((unint64_t)v98 < v97)
          {
            *(_DWORD *)v98 = 0;
            v86 = v98 + 4;
LABEL_177:
            this[2].i64[1] = (uint64_t)v86;
            goto LABEL_178;
          }
          v109 = (char *)this[2].i64[0];
          v110 = (v98 - v109) >> 2;
          v111 = v110 + 1;
          if (!((unint64_t)(v110 + 1) >> 62))
          {
            v112 = v97 - (_QWORD)v109;
            if (v112 >> 1 > v111)
              v111 = v112 >> 1;
            if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFFCLL)
              v113 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v113 = v111;
            if (v113)
            {
              v113 = (unint64_t)sub_2429114B8(v113);
              v109 = (char *)this[2].i64[0];
              v98 = (char *)this[2].i64[1];
            }
            else
            {
              v114 = 0;
            }
            v125 = (_DWORD *)(v113 + 4 * v110);
            *v125 = 0;
            v86 = v125 + 1;
            while (v98 != v109)
            {
              v126 = *((_DWORD *)v98 - 1);
              v98 -= 4;
              *--v125 = v126;
            }
            this[2].i64[0] = (uint64_t)v125;
            this[2].i64[1] = (uint64_t)v86;
            this[3].i64[0] = v113 + 4 * v114;
            if (v109)
              operator delete(v109);
            goto LABEL_177;
          }
          goto LABEL_192;
        case 5u:
          if (v22 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v31 = *((_QWORD *)a2 + 1);
            v32 = *((_QWORD *)a2 + 2);
            while (v31 < v32 && !*((_BYTE *)a2 + 24))
            {
              v34 = (char *)this[1].i64[0];
              v33 = this[1].u64[1];
              if ((unint64_t)v34 >= v33)
              {
                v36 = (char *)this->i64[1];
                v37 = (v34 - v36) >> 2;
                v38 = v37 + 1;
                if ((unint64_t)(v37 + 1) >> 62)
                  goto LABEL_192;
                v39 = v33 - (_QWORD)v36;
                if (v39 >> 1 > v38)
                  v38 = v39 >> 1;
                if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
                  v40 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v40 = v38;
                if (v40)
                {
                  v40 = (unint64_t)sub_2429114B8(v40);
                  v36 = (char *)this->i64[1];
                  v34 = (char *)this[1].i64[0];
                }
                else
                {
                  v41 = 0;
                }
                v42 = (_DWORD *)(v40 + 4 * v37);
                *v42 = 0;
                v35 = v42 + 1;
                while (v34 != v36)
                {
                  v43 = *((_DWORD *)v34 - 1);
                  v34 -= 4;
                  *--v42 = v43;
                }
                this->i64[1] = (uint64_t)v42;
                this[1].i64[0] = (uint64_t)v35;
                this[1].i64[1] = v40 + 4 * v41;
                if (v36)
                  operator delete(v36);
              }
              else
              {
                *(_DWORD *)v34 = 0;
                v35 = v34 + 4;
              }
              this[1].i64[0] = (uint64_t)v35;
              v44 = *((_QWORD *)a2 + 1);
              if (v44 > 0xFFFFFFFFFFFFFFFBLL || v44 + 4 > *((_QWORD *)a2 + 2))
              {
LABEL_130:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v35 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v44);
              v32 = *((_QWORD *)a2 + 2);
              v31 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v31;
            }
LABEL_97:
            PB::Reader::recallMark();
            goto LABEL_182;
          }
          v85 = (char *)this[1].i64[0];
          v84 = this[1].u64[1];
          if ((unint64_t)v85 >= v84)
          {
            v103 = (char *)this->i64[1];
            v104 = (v85 - v103) >> 2;
            v105 = v104 + 1;
            if ((unint64_t)(v104 + 1) >> 62)
LABEL_192:
              sub_242729A44();
            v106 = v84 - (_QWORD)v103;
            if (v106 >> 1 > v105)
              v105 = v106 >> 1;
            if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFFCLL)
              v107 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v107 = v105;
            if (v107)
            {
              v107 = (unint64_t)sub_2429114B8(v107);
              v103 = (char *)this->i64[1];
              v85 = (char *)this[1].i64[0];
            }
            else
            {
              v108 = 0;
            }
            v123 = (_DWORD *)(v107 + 4 * v104);
            *v123 = 0;
            v86 = v123 + 1;
            while (v85 != v103)
            {
              v124 = *((_DWORD *)v85 - 1);
              v85 -= 4;
              *--v123 = v124;
            }
            this->i64[1] = (uint64_t)v123;
            this[1].i64[0] = (uint64_t)v86;
            this[1].i64[1] = v107 + 4 * v108;
            if (v103)
              operator delete(v103);
          }
          else
          {
            *(_DWORD *)v85 = 0;
            v86 = v85 + 4;
          }
          this[1].i64[0] = (uint64_t)v86;
LABEL_178:
          v127 = *((_QWORD *)a2 + 1);
          if (v127 <= 0xFFFFFFFFFFFFFFFBLL && v127 + 4 <= *((_QWORD *)a2 + 2))
          {
            *(v86 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v127);
            *((_QWORD *)a2 + 1) += 4;
          }
          else
          {
            *((_BYTE *)a2 + 24) = 1;
          }
          goto LABEL_182;
        case 6u:
          v51 = (_DWORD *)operator new();
          *(_QWORD *)v51 = v10;
          v51[4] = 0;
          v78 = this[4].i64[0];
          this[4].i64[0] = (uint64_t)v51;
          if (v78)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v78 + 8))(v78);
            v51 = (_DWORD *)this[4].i64[0];
          }
          goto LABEL_95;
        case 7u:
          v51 = (_DWORD *)operator new();
          *(_QWORD *)v51 = v10;
          v51[4] = 0;
          v79 = this[3].i64[1];
          this[3].i64[1] = (uint64_t)v51;
          if (v79)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
            v51 = (_DWORD *)this[3].i64[1];
          }
LABEL_95:
          if (PB::Reader::placeMark()
            && ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v51 + 16))(v51, a2) & 1) != 0)
          {
            goto LABEL_97;
          }
          return 0;
        case 8u:
          this[8].i8[4] |= 8u;
          v66 = *((_QWORD *)a2 + 1);
          if (v66 >= *((_QWORD *)a2 + 2))
          {
            v69 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v67 = v66 + 1;
            v68 = *(unsigned __int8 *)(*(_QWORD *)a2 + v66);
            *((_QWORD *)a2 + 1) = v67;
            v69 = v68 != 0;
          }
          this[8].i8[1] = v69;
          goto LABEL_182;
        case 9u:
          this[8].i8[4] |= 4u;
          v80 = *((_QWORD *)a2 + 1);
          if (v80 >= *((_QWORD *)a2 + 2))
          {
            v83 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v81 = v80 + 1;
            v82 = *(unsigned __int8 *)(*(_QWORD *)a2 + v80);
            *((_QWORD *)a2 + 1) = v81;
            v83 = v82 != 0;
          }
          this[8].i8[0] = v83;
          goto LABEL_182;
        case 0xAu:
          v45 = v10;
          v46 = operator new();
          v47 = v46;
          *(_QWORD *)v46 = &off_25135CDB0;
          *(_DWORD *)(v46 + 16) = 0;
          v49 = (uint64_t *)this[6].i64[1];
          v48 = this[7].u64[0];
          if ((unint64_t)v49 >= v48)
          {
            v87 = this[6].i64[0];
            v88 = ((uint64_t)v49 - v87) >> 3;
            if ((unint64_t)(v88 + 1) >> 61)
              sub_242729A44();
            v89 = v48 - v87;
            v90 = v89 >> 2;
            if (v89 >> 2 <= (unint64_t)(v88 + 1))
              v90 = v88 + 1;
            if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFF8)
              v91 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v91 = v90;
            v133 = v9;
            if (v91)
              v91 = (unint64_t)sub_2429112FC(v91);
            else
              v92 = 0;
            v115 = (uint64_t *)(v91 + 8 * v88);
            v116 = v91 + 8 * v92;
            v132 = v116;
            *v115 = v47;
            v50 = v115 + 1;
            v131.i64[1] = (uint64_t)(v115 + 1);
            v118 = (_QWORD *)this[6].i64[0];
            v117 = (_QWORD *)this[6].i64[1];
            if (v117 == v118)
            {
              v120 = vdupq_n_s64((unint64_t)v117);
            }
            else
            {
              do
              {
                v119 = *--v117;
                *v117 = 0;
                *--v115 = v119;
              }
              while (v117 != v118);
              v120 = this[6];
              v50 = (_QWORD *)v131.i64[1];
              v116 = v132;
            }
            this[6].i64[0] = (uint64_t)v115;
            this[6].i64[1] = (uint64_t)v50;
            v131 = v120;
            v121 = this[7].i64[0];
            this[7].i64[0] = v116;
            v132 = v121;
            v130 = v120.i64[0];
            sub_2429114EC((uint64_t)&v130);
          }
          else
          {
            *v49 = v46;
            v50 = v49 + 1;
          }
          this[6].i64[1] = (uint64_t)v50;
          v122 = *(v50 - 1);
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v122 + 16))(v122, a2) & 1) == 0)
          {
            return 0;
          }
          PB::Reader::recallMark();
          v10 = v45;
          goto LABEL_182;
        default:
          goto LABEL_20;
      }
    }
    v18 = 0;
    v19 = 0;
    v14 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v20 = v2 + 1;
      v21 = *(_BYTE *)(v11 + v2);
      *((_QWORD *)a2 + 1) = v20;
      v14 |= (unint64_t)(v21 & 0x7F) << v18;
      if ((v21 & 0x80) == 0)
        goto LABEL_22;
      v18 += 7;
      v2 = v20;
      v17 = v19++ > 8;
    }
    while (!v17);
LABEL_20:
    if ((PB::Reader::skip(a2) & 1) == 0)
      return 0;
LABEL_182:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
  }
  while (v2 < v3 && v4 == 0);
  return v4 == 0;
}

void sub_2427CE668(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::InEarTransitionEntry::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  const PB::Base **v5;
  const PB::Base **v6;
  const PB::Base *v7;
  float *v8;
  float *v9;
  float v10;
  float *v11;
  float *v12;
  float v13;
  const PB::Base *v14;
  const PB::Base *v15;
  char v16;
  const PB::Base **v17;
  const PB::Base **v18;
  const PB::Base *v19;

  v3 = this;
  v4 = *(_BYTE *)(this + 132);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 132);
  }
  if ((v4 & 2) != 0)
    this = PB::Writer::writeVarInt(a2);
  v5 = *(const PB::Base ***)(v3 + 72);
  v6 = *(const PB::Base ***)(v3 + 80);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::writeSubmessage(a2, v7);
  }
  v8 = *(float **)(v3 + 32);
  v9 = *(float **)(v3 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    this = PB::Writer::write(a2, v10);
  }
  v11 = *(float **)(v3 + 8);
  v12 = *(float **)(v3 + 16);
  while (v11 != v12)
  {
    v13 = *v11++;
    this = PB::Writer::write(a2, v13);
  }
  v14 = *(const PB::Base **)(v3 + 64);
  if (v14)
    this = PB::Writer::writeSubmessage(a2, v14);
  v15 = *(const PB::Base **)(v3 + 56);
  if (v15)
    this = PB::Writer::writeSubmessage(a2, v15);
  v16 = *(_BYTE *)(v3 + 132);
  if ((v16 & 8) != 0)
  {
    this = PB::Writer::write(a2);
    v16 = *(_BYTE *)(v3 + 132);
  }
  if ((v16 & 4) != 0)
    this = PB::Writer::write(a2);
  v18 = *(const PB::Base ***)(v3 + 96);
  v17 = *(const PB::Base ***)(v3 + 104);
  while (v18 != v17)
  {
    v19 = *v18++;
    this = PB::Writer::writeSubmessage(a2, v19);
  }
  return this;
}

BOOL CMMsl::InEarTransitionEntry::operator==(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  float *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(_BYTE *)(a1 + 132);
  v5 = *(_BYTE *)(a2 + 132);
  if ((v4 & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 132) & 1) == 0 || *(_DWORD *)(a1 + 120) != *(_DWORD *)(a2 + 120))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 132) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 132) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 132) & 2) == 0 || *(_DWORD *)(a1 + 124) != *(_DWORD *)(a2 + 124))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 132) & 2) != 0)
  {
    return 0;
  }
  v6 = *(uint64_t **)(a1 + 72);
  v7 = *(uint64_t **)(a1 + 80);
  v8 = *(uint64_t **)(a2 + 72);
  if ((char *)v7 - (char *)v6 != *(_QWORD *)(a2 + 80) - (_QWORD)v8)
    return 0;
  while (v6 != v7)
  {
    if (!CMMsl::ClefMeasurement::operator==(*v6, *v8))
      return 0;
    ++v6;
    ++v8;
  }
  v10 = *(float **)(a1 + 32);
  v9 = *(float **)(a1 + 40);
  v11 = *(float **)(a2 + 32);
  if ((char *)v9 - (char *)v10 != *(_QWORD *)(a2 + 40) - (_QWORD)v11)
    return 0;
  while (v10 != v9)
  {
    if (*v10 != *v11)
      return 0;
    ++v10;
    ++v11;
  }
  v13 = *(float **)(a1 + 8);
  v12 = *(float **)(a1 + 16);
  v14 = *(float **)(a2 + 8);
  if ((char *)v12 - (char *)v13 != *(_QWORD *)(a2 + 16) - (_QWORD)v14)
    return 0;
  while (v13 != v12)
  {
    if (*v13 != *v14)
      return 0;
    ++v13;
    ++v14;
  }
  v15 = *(_QWORD *)(a1 + 64);
  v16 = *(_QWORD *)(a2 + 64);
  if (v15)
  {
    if (!v16 || !CMMsl::ClefMeasurement::operator==(v15, v16))
      return 0;
  }
  else if (v16)
  {
    return 0;
  }
  v17 = *(_QWORD *)(a1 + 56);
  v18 = *(_QWORD *)(a2 + 56);
  if (v17)
  {
    if (!v18 || !CMMsl::ClefMeasurement::operator==(v17, v18))
      return 0;
LABEL_33:
    if ((v4 & 8) != 0)
    {
      if ((v5 & 8) == 0 || *(unsigned __int8 *)(a1 + 129) != *(unsigned __int8 *)(a2 + 129))
        return 0;
    }
    else if ((v5 & 8) != 0)
    {
      return 0;
    }
    if ((v4 & 4) != 0)
    {
      if ((v5 & 4) == 0 || *(unsigned __int8 *)(a1 + 128) != *(unsigned __int8 *)(a2 + 128))
        return 0;
    }
    else if ((v5 & 4) != 0)
    {
      return 0;
    }
    return sub_2427CE990(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(uint64_t **)(a2 + 96), *(_QWORD *)(a2 + 104));
  }
  if (!v18)
    goto LABEL_33;
  return 0;
}

BOOL sub_2427CE990(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 result;
  BOOL v9;

  if (a2 - a1 != a4 - (_QWORD)a3)
    return 0;
  if (a1 == a2)
    return 1;
  v5 = a3;
  v6 = a1 + 8;
  do
  {
    v7 = *v5++;
    result = CMMsl::ClefTemperature::operator==(*(_QWORD *)(v6 - 8), v7);
    v9 = !result || v6 == a2;
    v6 += 8;
  }
  while (!v9);
  return result;
}

uint64_t CMMsl::InEarTransitionEntry::hash_value(CMMsl::InEarTransitionEntry *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  float v9;
  float v10;
  BOOL v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  float v18;
  float v19;
  BOOL v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;

  if ((*((_BYTE *)this + 132) & 1) != 0)
  {
    v2 = *((unsigned int *)this + 30);
    if ((*((_BYTE *)this + 132) & 2) != 0)
      goto LABEL_3;
  }
  else
  {
    v2 = 0;
    if ((*((_BYTE *)this + 132) & 2) != 0)
    {
LABEL_3:
      v3 = *((int *)this + 31);
      goto LABEL_6;
    }
  }
  v3 = 0;
LABEL_6:
  v4 = sub_242740C00(*((uint64_t **)this + 9), *((uint64_t **)this + 10));
  v5 = PBHashBytes();
  v6 = PBHashBytes();
  v7 = *((_QWORD *)this + 8);
  if (v7)
  {
    v8 = *(_BYTE *)(v7 + 16);
    v9 = *(float *)(v7 + 8);
    v10 = *(float *)(v7 + 12);
    v11 = v9 == 0.0 || (v8 & 1) == 0;
    v12 = LODWORD(v9);
    if (v11)
      v12 = 0;
    v13 = v8 & 2;
    v14 = v10 == 0.0 || v13 == 0;
    v15 = LODWORD(v10);
    if (v14)
      v15 = 0;
    v7 = v15 ^ v12;
  }
  v16 = *((_QWORD *)this + 7);
  if (v16)
  {
    v17 = *(_BYTE *)(v16 + 16);
    v18 = *(float *)(v16 + 8);
    v19 = *(float *)(v16 + 12);
    v20 = v18 == 0.0 || (v17 & 1) == 0;
    v21 = LODWORD(v18);
    if (v20)
      v21 = 0;
    v22 = v17 & 2;
    v23 = v19 == 0.0 || v22 == 0;
    v24 = LODWORD(v19);
    if (v23)
      v24 = 0;
    v16 = v24 ^ v21;
  }
  if ((*((_BYTE *)this + 132) & 8) != 0)
  {
    v25 = *((unsigned __int8 *)this + 129);
    if ((*((_BYTE *)this + 132) & 4) != 0)
      goto LABEL_32;
  }
  else
  {
    v25 = 0;
    if ((*((_BYTE *)this + 132) & 4) != 0)
    {
LABEL_32:
      v26 = *((unsigned __int8 *)this + 128);
      goto LABEL_35;
    }
  }
  v26 = 0;
LABEL_35:
  v27 = (uint64_t *)*((_QWORD *)this + 12);
  v28 = (uint64_t *)*((_QWORD *)this + 13);
  if (v27 == v28)
  {
    v29 = 0;
  }
  else
  {
    v29 = 0;
    do
    {
      v30 = *v27++;
      v31 = *(_BYTE *)(v30 + 16);
      v33 = *(int *)(v30 + 8);
      v32 = *(int *)(v30 + 12);
      if ((v31 & 1) == 0)
        v33 = 0;
      if ((v31 & 2) == 0)
        v32 = 0;
      v29 ^= v33 ^ v32;
    }
    while (v27 != v28);
  }
  return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v16 ^ v25 ^ v26 ^ v29;
}

_QWORD *CMMsl::InEarTransitionEntry::makeMinimum(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[8])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135CD78;
    *(_DWORD *)(v2 + 16) = 0;
    this = (_QWORD *)v1[8];
    v1[8] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::InEarTransitionEntry::makeBaseline(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[7])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135CD78;
    *(_DWORD *)(v2 + 16) = 0;
    this = (_QWORD *)v1[7];
    v1[7] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t CMMsl::InertialOdometry::InertialOdometry(uint64_t this)
{
  *(_QWORD *)this = &off_25135E438;
  *(_DWORD *)(this + 68) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135E438;
  *(_DWORD *)(this + 68) = 0;
  return this;
}

void CMMsl::InertialOdometry::~InertialOdometry(CMMsl::InertialOdometry *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

uint64_t CMMsl::InertialOdometry::InertialOdometry(uint64_t this, const CMMsl::InertialOdometry *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  char v17;

  *(_QWORD *)this = &off_25135E438;
  *(_DWORD *)(this + 68) = 0;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_WORD *)(this + 68) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_WORD *)a2 + 34);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *(_WORD *)(this + 68) = v3;
    *(_DWORD *)(this + 16) = v5;
    v2 = *((_WORD *)a2 + 34);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *(_WORD *)(this + 68) = v3;
    *(_DWORD *)(this + 20) = v6;
    v2 = *((_WORD *)a2 + 34);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_21;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 24) = v7;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  v8 = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 28) = v8;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  v9 = *((_DWORD *)a2 + 8);
  v3 |= 0x20u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 32) = v9;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  v10 = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 36) = v10;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_25;
  }
LABEL_24:
  v11 = *((_DWORD *)a2 + 11);
  v3 |= 0x100u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 44) = v11;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_26;
  }
LABEL_25:
  v12 = *((_DWORD *)a2 + 12);
  v3 |= 0x200u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 48) = v12;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x400) == 0)
  {
LABEL_14:
    if ((v2 & 0x80) == 0)
      goto LABEL_15;
    goto LABEL_27;
  }
LABEL_26:
  v13 = *((_DWORD *)a2 + 13);
  v3 |= 0x400u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 52) = v13;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x80) == 0)
  {
LABEL_15:
    if ((v2 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_28;
  }
LABEL_27:
  v14 = *((_DWORD *)a2 + 10);
  v3 |= 0x80u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 40) = v14;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x800) == 0)
  {
LABEL_16:
    if ((v2 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_29;
  }
LABEL_28:
  v15 = *((_DWORD *)a2 + 14);
  v3 |= 0x800u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 56) = v15;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x1000) == 0)
  {
LABEL_17:
    if ((v2 & 0x2000) == 0)
      return this;
LABEL_30:
    v17 = *((_BYTE *)a2 + 64);
    *(_WORD *)(this + 68) = v3 | 0x2000;
    *(_BYTE *)(this + 64) = v17;
    return this;
  }
LABEL_29:
  v16 = *((_DWORD *)a2 + 15);
  v3 |= 0x1000u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 60) = v16;
  if ((*((_WORD *)a2 + 34) & 0x2000) != 0)
    goto LABEL_30;
  return this;
}

CMMsl *CMMsl::InertialOdometry::operator=(CMMsl *a1, const CMMsl::InertialOdometry *a2)
{
  CMMsl::InertialOdometry *v3;
  _BYTE v5[72];

  if (a1 != a2)
  {
    CMMsl::InertialOdometry::InertialOdometry((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::InertialOdometry *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::InertialOdometry *a2, CMMsl::InertialOdometry *a3)
{
  int v3;
  uint64_t v4;
  float result;
  int v6;
  int v7;

  v3 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  result = *((float *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((float *)a2 + 10) = result;
  v6 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v6;
  v7 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 64);
  *((_BYTE *)this + 64) = *((_BYTE *)a2 + 64);
  *((_BYTE *)a2 + 64) = v7;
  return result;
}

float CMMsl::InertialOdometry::InertialOdometry(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135E438;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a2 + 68) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  result = *(float *)(a2 + 40);
  *(float *)(a1 + 40) = result;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return result;
}

CMMsl *CMMsl::InertialOdometry::operator=(CMMsl *this, uint64_t a2, CMMsl::InertialOdometry *a3)
{
  __int128 v4;
  _QWORD v6[2];
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int v12;

  if (this != (CMMsl *)a2)
  {
    v6[0] = &off_25135E438;
    v12 = *(_DWORD *)(a2 + 68);
    *(_DWORD *)(a2 + 68) = 0;
    v6[1] = *(_QWORD *)(a2 + 8);
    v4 = *(_OWORD *)(a2 + 32);
    v7 = *(_OWORD *)(a2 + 16);
    v8 = v4;
    *(_QWORD *)&v4 = *(_QWORD *)(a2 + 56);
    v9 = *(_QWORD *)(a2 + 48);
    v10 = v4;
    v11 = *(_BYTE *)(a2 + 64);
    CMMsl::swap(this, (CMMsl::InertialOdometry *)v6, a3);
    PB::Base::~Base((PB::Base *)v6);
  }
  return this;
}

uint64_t CMMsl::InertialOdometry::formatText(CMMsl::InertialOdometry *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 34);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "deltaPositionX", *((float *)this + 4));
    v5 = *((_WORD *)this + 34);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "deltaPositionY", *((float *)this + 5));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "deltaPositionZ", *((float *)this + 6));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "deltaVelocityX", *((float *)this + 7));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "deltaVelocityY", *((float *)this + 8));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x2000) == 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "deltaVelocityZ", *((float *)this + 9));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x2000) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "isBIO");
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "quaternionW", *((float *)this + 10));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "quaternionX", *((float *)this + 11));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "quaternionY", *((float *)this + 12));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "quaternionZ", *((float *)this + 13));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
LABEL_29:
    PB::TextFormatter::format(a2, "staticFlag");
    if ((*((_WORD *)this + 34) & 1) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_15;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "referenceFrame");
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x1000) != 0)
    goto LABEL_29;
LABEL_14:
  if ((v5 & 1) != 0)
LABEL_15:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::InertialOdometry::readFrom(CMMsl::InertialOdometry *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  int v32;
  BOOL v33;
  char v34;
  unsigned int v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  unint64_t v40;
  char v41;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_101;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 34) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_55;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        v2 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_90;
      case 2u:
        *((_WORD *)this + 34) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_55;
        *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_89;
      case 3u:
        *((_WORD *)this + 34) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_55;
        *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_89;
      case 4u:
        *((_WORD *)this + 34) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_55;
        *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_89;
      case 5u:
        *((_WORD *)this + 34) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_55;
        *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_89;
      case 6u:
        *((_WORD *)this + 34) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_55;
        *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_89;
      case 7u:
        *((_WORD *)this + 34) |= 0x40u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_55;
        *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_89;
      case 8u:
        *((_WORD *)this + 34) |= 0x100u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_55;
        *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_89;
      case 9u:
        *((_WORD *)this + 34) |= 0x200u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_55;
        *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_89;
      case 0xAu:
        *((_WORD *)this + 34) |= 0x400u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_55;
        *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_89;
      case 0xBu:
        *((_WORD *)this + 34) |= 0x80u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_89:
          v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_90:
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_55:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      case 0xCu:
        *((_WORD *)this + 34) |= 0x800u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v34 = 0;
          v35 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_95;
            }
            v36 = v20++;
            v37 = *(_BYTE *)(v21 + v36);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0)
              break;
            v34 += 7;
            v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_94:
              v2 = v36 + 1;
              goto LABEL_95;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
          goto LABEL_94;
        }
        v22 = 0;
        v23 = 0;
        v24 = 0;
        do
        {
          v2 = v20 + 1;
          *((_QWORD *)a2 + 1) = v20 + 1;
          v25 = *(_BYTE *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0)
            goto LABEL_95;
          v22 += 7;
          v20 = v2;
          v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_95:
        *((_DWORD *)this + 14) = v24;
        break;
      case 0xDu:
        *((_WORD *)this + 34) |= 0x1000u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v38 = 0;
          v39 = 0;
          v30 = 0;
          if (v2 <= v26)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_100;
            }
            v40 = v26++;
            v41 = *(_BYTE *)(v27 + v40);
            *((_QWORD *)a2 + 1) = v26;
            v30 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0)
              break;
            v38 += 7;
            v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_99:
              v2 = v40 + 1;
              goto LABEL_100;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v30) = 0;
          goto LABEL_99;
        }
        v28 = 0;
        v29 = 0;
        v30 = 0;
        do
        {
          v2 = v26 + 1;
          *((_QWORD *)a2 + 1) = v26 + 1;
          v31 = *(_BYTE *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0)
            goto LABEL_100;
          v28 += 7;
          v26 = v2;
          v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_100:
        *((_DWORD *)this + 15) = v30;
        break;
      case 0xEu:
        *((_WORD *)this + 34) |= 0x2000u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v33 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v32 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v33 = v32 != 0;
        }
        *((_BYTE *)this + 64) = v33;
        break;
      default:
        goto LABEL_19;
    }
LABEL_101:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::InertialOdometry::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 68);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    v4 = *(_WORD *)(v3 + 68);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x400) == 0)
  {
LABEL_11:
    if ((v4 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x80) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x800) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::writeVarInt(a2);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x1000) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000) == 0)
      return this;
    return PB::Writer::write(a2);
  }
LABEL_28:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_WORD *)(v3 + 68) & 0x2000) != 0)
    return PB::Writer::write(a2);
  return this;
}

BOOL CMMsl::InertialOdometry::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 68);
  v3 = *(_WORD *)(a2 + 68);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x100) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 68) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x200) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 68) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x400) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 68) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x800) == 0 || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 68) & 0x800) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x1000) == 0 || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 68) & 0x1000) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x2000) == 0;
  if ((*(_WORD *)(a1 + 68) & 0x2000) != 0)
    return (*(_WORD *)(a2 + 68) & 0x2000) != 0 && *(unsigned __int8 *)(a1 + 64) == *(unsigned __int8 *)(a2 + 64);
  return v4;
}

uint64_t CMMsl::InertialOdometry::hash_value(CMMsl::InertialOdometry *this)
{
  __int16 v1;
  double v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *((_WORD *)this + 34);
  if ((v1 & 1) == 0)
  {
    v2 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_3;
LABEL_39:
    v4 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_6;
LABEL_40:
    v6 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_9;
LABEL_41:
    v8 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_12;
LABEL_42:
    v10 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_15;
LABEL_43:
    v12 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_18;
LABEL_44:
    v14 = 0;
    if ((*((_WORD *)this + 34) & 0x100) != 0)
      goto LABEL_21;
LABEL_45:
    v16 = 0;
    if ((*((_WORD *)this + 34) & 0x200) != 0)
      goto LABEL_24;
LABEL_46:
    v18 = 0;
    if ((*((_WORD *)this + 34) & 0x400) != 0)
      goto LABEL_27;
LABEL_47:
    v20 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_30;
LABEL_48:
    v22 = 0;
    if ((*((_WORD *)this + 34) & 0x800) != 0)
      goto LABEL_33;
    goto LABEL_49;
  }
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_39;
LABEL_3:
  v3 = *((float *)this + 4);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  if ((v1 & 4) == 0)
    goto LABEL_40;
LABEL_6:
  v5 = *((float *)this + 5);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_41;
LABEL_9:
  v7 = *((float *)this + 6);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_42;
LABEL_12:
  v9 = *((float *)this + 7);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_43;
LABEL_15:
  v11 = *((float *)this + 8);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_44;
LABEL_18:
  v13 = *((float *)this + 9);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((*((_WORD *)this + 34) & 0x100) == 0)
    goto LABEL_45;
LABEL_21:
  v15 = *((float *)this + 11);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  if ((*((_WORD *)this + 34) & 0x200) == 0)
    goto LABEL_46;
LABEL_24:
  v17 = *((float *)this + 12);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  if ((*((_WORD *)this + 34) & 0x400) == 0)
    goto LABEL_47;
LABEL_27:
  v19 = *((float *)this + 13);
  v20 = LODWORD(v19);
  if (v19 == 0.0)
    v20 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_48;
LABEL_30:
  v21 = *((float *)this + 10);
  v22 = LODWORD(v21);
  if (v21 == 0.0)
    v22 = 0;
  if ((*((_WORD *)this + 34) & 0x800) != 0)
  {
LABEL_33:
    v23 = *((unsigned int *)this + 14);
    if ((*((_WORD *)this + 34) & 0x1000) != 0)
      goto LABEL_34;
LABEL_50:
    v24 = 0;
    if ((*((_WORD *)this + 34) & 0x2000) != 0)
      goto LABEL_35;
LABEL_51:
    v25 = 0;
    return v4 ^ *(_QWORD *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v23 ^ v24 ^ v25;
  }
LABEL_49:
  v23 = 0;
  if ((*((_WORD *)this + 34) & 0x1000) == 0)
    goto LABEL_50;
LABEL_34:
  v24 = *((unsigned int *)this + 15);
  if ((*((_WORD *)this + 34) & 0x2000) == 0)
    goto LABEL_51;
LABEL_35:
  v25 = *((unsigned __int8 *)this + 64);
  return v4 ^ *(_QWORD *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v23 ^ v24 ^ v25;
}

double CMMsl::InitialHistoricalMeanSeaLevelPressure::InitialHistoricalMeanSeaLevelPressure(CMMsl::InitialHistoricalMeanSeaLevelPressure *this)
{
  double result;

  *(_QWORD *)this = &off_25135E470;
  *((_DWORD *)this + 22) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_25135E470;
  *((_DWORD *)this + 22) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  return result;
}

void CMMsl::InitialHistoricalMeanSeaLevelPressure::~InitialHistoricalMeanSeaLevelPressure(CMMsl::InitialHistoricalMeanSeaLevelPressure *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_25135E470;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::InitialHistoricalMeanSeaLevelPressure::~InitialHistoricalMeanSeaLevelPressure(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::InitialHistoricalMeanSeaLevelPressure *CMMsl::InitialHistoricalMeanSeaLevelPressure::InitialHistoricalMeanSeaLevelPressure(char **this, char **a2)
{
  _QWORD *v4;
  _QWORD *v5;
  char *v6;

  *(_OWORD *)(this + 1) = 0u;
  v4 = this + 1;
  *(_OWORD *)(this + 7) = 0u;
  v5 = this + 7;
  *this = (char *)&off_25135E470;
  *((_DWORD *)this + 22) = 0;
  *(_OWORD *)(this + 3) = 0u;
  *(_OWORD *)(this + 5) = 0u;
  this[9] = 0;
  if (this != a2)
  {
    sub_2429111C4(this + 4, a2[4], a2[5], (a2[5] - a2[4]) >> 3);
    sub_2429111C4(v4, a2[1], a2[2], (a2[2] - a2[1]) >> 3);
    sub_2429111C4(v5, a2[7], a2[8], (a2[8] - a2[7]) >> 3);
  }
  if (((_BYTE)a2[11] & 1) != 0)
  {
    v6 = a2[10];
    *((_BYTE *)this + 88) |= 1u;
    this[10] = v6;
  }
  return (CMMsl::InitialHistoricalMeanSeaLevelPressure *)this;
}

uint64_t CMMsl::InitialHistoricalMeanSeaLevelPressure::operator=(uint64_t a1, char **a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  int v18;

  if ((char **)a1 != a2)
  {
    CMMsl::InitialHistoricalMeanSeaLevelPressure::InitialHistoricalMeanSeaLevelPressure(&v11, a2);
    v3 = *(_DWORD *)(a1 + 88);
    *(_DWORD *)(a1 + 88) = v18;
    v18 = v3;
    v4 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v14;
    v14 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    v12 = v5;
    v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v13;
    v13 = v6;
    v7 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v15;
    v15 = v7;
    v8 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v16;
    v16 = v8;
    v9 = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v17;
    v17 = v9;
    CMMsl::InitialHistoricalMeanSeaLevelPressure::~InitialHistoricalMeanSeaLevelPressure((CMMsl::InitialHistoricalMeanSeaLevelPressure *)&v11);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::InitialHistoricalMeanSeaLevelPressure *a2, CMMsl::InitialHistoricalMeanSeaLevelPressure *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double result;

  v3 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v3;
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  v5 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v5;
  v6 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v6;
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v7;
  v8 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v8;
  v9 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v9;
  v10 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v10;
  v11 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v11;
  v12 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v12;
  result = *((double *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((double *)a2 + 10) = result;
  return result;
}

uint64_t CMMsl::InitialHistoricalMeanSeaLevelPressure::InitialHistoricalMeanSeaLevelPressure(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_25135E470;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a2 + 88) = 0;
  sub_242911330(a1 + 32, (__n128 *)(a2 + 32));
  sub_242911330(a1 + 8, (__n128 *)(a2 + 8));
  sub_242911330(a1 + 56, (__n128 *)(a2 + 56));
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  return a1;
}

uint64_t CMMsl::InitialHistoricalMeanSeaLevelPressure::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  int v18;

  if (a1 != a2)
  {
    CMMsl::InitialHistoricalMeanSeaLevelPressure::InitialHistoricalMeanSeaLevelPressure((uint64_t)&v11, a2);
    v3 = *(_DWORD *)(a1 + 88);
    *(_DWORD *)(a1 + 88) = v18;
    v18 = v3;
    v4 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v14;
    v14 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    v12 = v5;
    v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v13;
    v13 = v6;
    v7 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v15;
    v15 = v7;
    v8 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v16;
    v16 = v8;
    v9 = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v17;
    v17 = v9;
    CMMsl::InitialHistoricalMeanSeaLevelPressure::~InitialHistoricalMeanSeaLevelPressure((CMMsl::InitialHistoricalMeanSeaLevelPressure *)&v11);
  }
  return a1;
}

uint64_t CMMsl::InitialHistoricalMeanSeaLevelPressure::formatText(CMMsl::InitialHistoricalMeanSeaLevelPressure *this, PB::TextFormatter *a2, const char *a3)
{
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;
  double *v11;
  double *v12;
  double v13;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (double *)*((_QWORD *)this + 1);
  v6 = (double *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "historicalMeanSeaLevelPressure", v7);
  }
  v8 = (double *)*((_QWORD *)this + 4);
  v9 = (double *)*((_QWORD *)this + 5);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(a2, "historicalTimestamp", v10);
  }
  v11 = (double *)*((_QWORD *)this + 7);
  v12 = (double *)*((_QWORD *)this + 8);
  while (v11 != v12)
  {
    v13 = *v11++;
    PB::TextFormatter::format(a2, "historicalUncertainty", v13);
  }
  if ((*((_BYTE *)this + 88) & 1) != 0)
    PB::TextFormatter::format(a2, "refreshTime", *((double *)this + 10));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::InitialHistoricalMeanSeaLevelPressure::readFrom(CMMsl::InitialHistoricalMeanSeaLevelPressure *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  _QWORD *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  _QWORD *v65;
  unint64_t v66;
  char *v67;
  unint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  unint64_t v94;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_21:
      v19 = v11 & 7;
      if (v19 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v20 = *((_QWORD *)a2 + 1);
            v21 = *((_QWORD *)a2 + 2);
            while (v20 < v21 && !*((_BYTE *)a2 + 24))
            {
              v23 = (char *)*((_QWORD *)this + 5);
              v22 = *((_QWORD *)this + 6);
              if ((unint64_t)v23 >= v22)
              {
                v25 = (char *)*((_QWORD *)this + 4);
                v26 = (v23 - v25) >> 3;
                v27 = v26 + 1;
                if ((unint64_t)(v26 + 1) >> 61)
                  goto LABEL_163;
                v28 = v22 - (_QWORD)v25;
                if (v28 >> 2 > v27)
                  v27 = v28 >> 2;
                if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
                  v29 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v29 = v27;
                if (v29)
                {
                  v29 = (unint64_t)sub_2429112FC(v29);
                  v25 = (char *)*((_QWORD *)this + 4);
                  v23 = (char *)*((_QWORD *)this + 5);
                }
                else
                {
                  v30 = 0;
                }
                v31 = (_QWORD *)(v29 + 8 * v26);
                *v31 = 0;
                v24 = v31 + 1;
                while (v23 != v25)
                {
                  v32 = *((_QWORD *)v23 - 1);
                  v23 -= 8;
                  *--v31 = v32;
                }
                *((_QWORD *)this + 4) = v31;
                *((_QWORD *)this + 5) = v24;
                *((_QWORD *)this + 6) = v29 + 8 * v30;
                if (v25)
                  operator delete(v25);
              }
              else
              {
                *(_QWORD *)v23 = 0;
                v24 = v23 + 8;
              }
              *((_QWORD *)this + 5) = v24;
              v33 = *((_QWORD *)a2 + 1);
              if (v33 > 0xFFFFFFFFFFFFFFF7 || v33 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_104;
              *(v24 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v33);
              v21 = *((_QWORD *)a2 + 2);
              v20 = *((_QWORD *)a2 + 1) + 8;
              *((_QWORD *)a2 + 1) = v20;
            }
            goto LABEL_105;
          }
          v64 = (char *)*((_QWORD *)this + 5);
          v63 = *((_QWORD *)this + 6);
          if ((unint64_t)v64 >= v63)
          {
            v70 = (char *)*((_QWORD *)this + 4);
            v71 = (v64 - v70) >> 3;
            v72 = v71 + 1;
            if ((unint64_t)(v71 + 1) >> 61)
              goto LABEL_163;
            v73 = v63 - (_QWORD)v70;
            if (v73 >> 2 > v72)
              v72 = v73 >> 2;
            if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF8)
              v74 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v74 = v72;
            if (v74)
            {
              v74 = (unint64_t)sub_2429112FC(v74);
              v70 = (char *)*((_QWORD *)this + 4);
              v64 = (char *)*((_QWORD *)this + 5);
            }
            else
            {
              v75 = 0;
            }
            v88 = (_QWORD *)(v74 + 8 * v71);
            *v88 = 0;
            v65 = v88 + 1;
            while (v64 != v70)
            {
              v89 = *((_QWORD *)v64 - 1);
              v64 -= 8;
              *--v88 = v89;
            }
            *((_QWORD *)this + 4) = v88;
            *((_QWORD *)this + 5) = v65;
            *((_QWORD *)this + 6) = v74 + 8 * v75;
            if (v70)
              operator delete(v70);
          }
          else
          {
            *(_QWORD *)v64 = 0;
            v65 = v64 + 8;
          }
          *((_QWORD *)this + 5) = v65;
          goto LABEL_151;
        case 2u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v34 = *((_QWORD *)a2 + 1);
            v35 = *((_QWORD *)a2 + 2);
            while (v34 < v35 && !*((_BYTE *)a2 + 24))
            {
              v37 = (char *)*((_QWORD *)this + 2);
              v36 = *((_QWORD *)this + 3);
              if ((unint64_t)v37 >= v36)
              {
                v39 = (char *)*((_QWORD *)this + 1);
                v40 = (v37 - v39) >> 3;
                v41 = v40 + 1;
                if ((unint64_t)(v40 + 1) >> 61)
                  goto LABEL_163;
                v42 = v36 - (_QWORD)v39;
                if (v42 >> 2 > v41)
                  v41 = v42 >> 2;
                if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
                  v43 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v43 = v41;
                if (v43)
                {
                  v43 = (unint64_t)sub_2429112FC(v43);
                  v39 = (char *)*((_QWORD *)this + 1);
                  v37 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v44 = 0;
                }
                v45 = (_QWORD *)(v43 + 8 * v40);
                *v45 = 0;
                v38 = v45 + 1;
                while (v37 != v39)
                {
                  v46 = *((_QWORD *)v37 - 1);
                  v37 -= 8;
                  *--v45 = v46;
                }
                *((_QWORD *)this + 1) = v45;
                *((_QWORD *)this + 2) = v38;
                *((_QWORD *)this + 3) = v43 + 8 * v44;
                if (v39)
                  operator delete(v39);
              }
              else
              {
                *(_QWORD *)v37 = 0;
                v38 = v37 + 8;
              }
              *((_QWORD *)this + 2) = v38;
              v47 = *((_QWORD *)a2 + 1);
              if (v47 > 0xFFFFFFFFFFFFFFF7 || v47 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_104;
              *(v38 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v47);
              v35 = *((_QWORD *)a2 + 2);
              v34 = *((_QWORD *)a2 + 1) + 8;
              *((_QWORD *)a2 + 1) = v34;
            }
            goto LABEL_105;
          }
          v67 = (char *)*((_QWORD *)this + 2);
          v66 = *((_QWORD *)this + 3);
          if ((unint64_t)v67 >= v66)
          {
            v76 = (char *)*((_QWORD *)this + 1);
            v77 = (v67 - v76) >> 3;
            v78 = v77 + 1;
            if ((unint64_t)(v77 + 1) >> 61)
              goto LABEL_163;
            v79 = v66 - (_QWORD)v76;
            if (v79 >> 2 > v78)
              v78 = v79 >> 2;
            if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF8)
              v80 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v80 = v78;
            if (v80)
            {
              v80 = (unint64_t)sub_2429112FC(v80);
              v76 = (char *)*((_QWORD *)this + 1);
              v67 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v81 = 0;
            }
            v90 = (_QWORD *)(v80 + 8 * v77);
            *v90 = 0;
            v65 = v90 + 1;
            while (v67 != v76)
            {
              v91 = *((_QWORD *)v67 - 1);
              v67 -= 8;
              *--v90 = v91;
            }
            *((_QWORD *)this + 1) = v90;
            *((_QWORD *)this + 2) = v65;
            *((_QWORD *)this + 3) = v80 + 8 * v81;
            if (v76)
              operator delete(v76);
          }
          else
          {
            *(_QWORD *)v67 = 0;
            v65 = v67 + 8;
          }
          *((_QWORD *)this + 2) = v65;
          goto LABEL_151;
        case 3u:
          if (v19 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v48 = *((_QWORD *)a2 + 1);
            v49 = *((_QWORD *)a2 + 2);
            while (v48 < v49 && !*((_BYTE *)a2 + 24))
            {
              v51 = (char *)*((_QWORD *)this + 8);
              v50 = *((_QWORD *)this + 9);
              if ((unint64_t)v51 >= v50)
              {
                v53 = (char *)*((_QWORD *)this + 7);
                v54 = (v51 - v53) >> 3;
                v55 = v54 + 1;
                if ((unint64_t)(v54 + 1) >> 61)
                  goto LABEL_163;
                v56 = v50 - (_QWORD)v53;
                if (v56 >> 2 > v55)
                  v55 = v56 >> 2;
                if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
                  v57 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v57 = v55;
                if (v57)
                {
                  v57 = (unint64_t)sub_2429112FC(v57);
                  v53 = (char *)*((_QWORD *)this + 7);
                  v51 = (char *)*((_QWORD *)this + 8);
                }
                else
                {
                  v58 = 0;
                }
                v59 = (_QWORD *)(v57 + 8 * v54);
                *v59 = 0;
                v52 = v59 + 1;
                while (v51 != v53)
                {
                  v60 = *((_QWORD *)v51 - 1);
                  v51 -= 8;
                  *--v59 = v60;
                }
                *((_QWORD *)this + 7) = v59;
                *((_QWORD *)this + 8) = v52;
                *((_QWORD *)this + 9) = v57 + 8 * v58;
                if (v53)
                  operator delete(v53);
              }
              else
              {
                *(_QWORD *)v51 = 0;
                v52 = v51 + 8;
              }
              *((_QWORD *)this + 8) = v52;
              v61 = *((_QWORD *)a2 + 1);
              if (v61 > 0xFFFFFFFFFFFFFFF7 || v61 + 8 > *((_QWORD *)a2 + 2))
              {
LABEL_104:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v52 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v61);
              v49 = *((_QWORD *)a2 + 2);
              v48 = *((_QWORD *)a2 + 1) + 8;
              *((_QWORD *)a2 + 1) = v48;
            }
LABEL_105:
            PB::Reader::recallMark();
          }
          else
          {
            v69 = (char *)*((_QWORD *)this + 8);
            v68 = *((_QWORD *)this + 9);
            if ((unint64_t)v69 >= v68)
            {
              v82 = (char *)*((_QWORD *)this + 7);
              v83 = (v69 - v82) >> 3;
              v84 = v83 + 1;
              if ((unint64_t)(v83 + 1) >> 61)
LABEL_163:
                sub_242729A44();
              v85 = v68 - (_QWORD)v82;
              if (v85 >> 2 > v84)
                v84 = v85 >> 2;
              if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8)
                v86 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v86 = v84;
              if (v86)
              {
                v86 = (unint64_t)sub_2429112FC(v86);
                v82 = (char *)*((_QWORD *)this + 7);
                v69 = (char *)*((_QWORD *)this + 8);
              }
              else
              {
                v87 = 0;
              }
              v92 = (_QWORD *)(v86 + 8 * v83);
              *v92 = 0;
              v65 = v92 + 1;
              while (v69 != v82)
              {
                v93 = *((_QWORD *)v69 - 1);
                v69 -= 8;
                *--v92 = v93;
              }
              *((_QWORD *)this + 7) = v92;
              *((_QWORD *)this + 8) = v65;
              *((_QWORD *)this + 9) = v86 + 8 * v87;
              if (v82)
                operator delete(v82);
            }
            else
            {
              *(_QWORD *)v69 = 0;
              v65 = v69 + 8;
            }
            *((_QWORD *)this + 8) = v65;
LABEL_151:
            v94 = *((_QWORD *)a2 + 1);
            if (v94 <= 0xFFFFFFFFFFFFFFF7 && v94 + 8 <= *((_QWORD *)a2 + 2))
            {
              *(v65 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v94);
LABEL_155:
              *((_QWORD *)a2 + 1) += 8;
            }
            else
            {
LABEL_153:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
          break;
        case 4u:
          *((_BYTE *)this + 88) |= 1u;
          v62 = *((_QWORD *)a2 + 1);
          if (v62 > 0xFFFFFFFFFFFFFFF7 || v62 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_153;
          *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v62);
          goto LABEL_155;
        default:
          goto LABEL_19;
      }
      goto LABEL_156;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_21;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    if ((PB::Reader::skip(a2) & 1) == 0)
      return 0;
LABEL_156:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
}

uint64_t CMMsl::InitialHistoricalMeanSeaLevelPressure::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  double *v4;
  double *v5;
  double v6;
  double *v7;
  double *v8;
  double v9;
  double *v10;
  double *v11;
  double v12;

  v3 = this;
  v4 = *(double **)(this + 32);
  v5 = *(double **)(this + 40);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6);
  }
  v7 = *(double **)(v3 + 8);
  v8 = *(double **)(v3 + 16);
  while (v7 != v8)
  {
    v9 = *v7++;
    this = PB::Writer::write(a2, v9);
  }
  v10 = *(double **)(v3 + 56);
  v11 = *(double **)(v3 + 64);
  while (v10 != v11)
  {
    v12 = *v10++;
    this = PB::Writer::write(a2, v12);
  }
  if ((*(_BYTE *)(v3 + 88) & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 80));
  return this;
}

BOOL CMMsl::InitialHistoricalMeanSeaLevelPressure::operator==(uint64_t a1, uint64_t a2)
{
  double *v2;
  double *v3;
  double *v4;
  double *v5;
  double *v6;
  double *v7;
  double *v8;
  double *v9;
  double *v10;
  _BOOL8 v11;

  v3 = *(double **)(a1 + 32);
  v2 = *(double **)(a1 + 40);
  v4 = *(double **)(a2 + 32);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 40) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v6 = *(double **)(a1 + 8);
  v5 = *(double **)(a1 + 16);
  v7 = *(double **)(a2 + 8);
  if ((char *)v5 - (char *)v6 != *(_QWORD *)(a2 + 16) - (_QWORD)v7)
    return 0;
  while (v6 != v5)
  {
    if (*v6 != *v7)
      return 0;
    ++v6;
    ++v7;
  }
  v9 = *(double **)(a1 + 56);
  v8 = *(double **)(a1 + 64);
  v10 = *(double **)(a2 + 56);
  if ((char *)v8 - (char *)v9 != *(_QWORD *)(a2 + 64) - (_QWORD)v10)
    return 0;
  while (v9 != v8)
  {
    if (*v9 != *v10)
      return 0;
    ++v9;
    ++v10;
  }
  v11 = (*(_BYTE *)(a2 + 88) & 1) == 0;
  if ((*(_BYTE *)(a1 + 88) & 1) != 0)
    return (*(_BYTE *)(a2 + 88) & 1) != 0 && *(double *)(a1 + 80) == *(double *)(a2 + 80);
  return v11;
}

uint64_t CMMsl::InitialHistoricalMeanSeaLevelPressure::hash_value(CMMsl::InitialHistoricalMeanSeaLevelPressure *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;

  v2 = PBHashBytes();
  v3 = PBHashBytes();
  v4 = PBHashBytes();
  if ((*((_BYTE *)this + 88) & 1) != 0)
  {
    v5 = *((double *)this + 10);
    if (v5 == 0.0)
      v5 = 0.0;
  }
  else
  {
    v5 = 0.0;
  }
  return v3 ^ v2 ^ v4 ^ *(_QWORD *)&v5;
}

_QWORD *CMMsl::InterpolatedAccessoryAccel::InterpolatedAccessoryAccel(_QWORD *this)
{
  *this = &off_25135E4A8;
  this[1] = 0;
  return this;
}

{
  *this = &off_25135E4A8;
  this[1] = 0;
  return this;
}

void CMMsl::InterpolatedAccessoryAccel::~InterpolatedAccessoryAccel(CMMsl::InterpolatedAccessoryAccel *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135E4A8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135E4A8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_25135E4A8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::InterpolatedAccessoryAccel *CMMsl::InterpolatedAccessoryAccel::InterpolatedAccessoryAccel(CMMsl::InterpolatedAccessoryAccel *this, const CMMsl::Accel ***a2)
{
  CMMsl::AccessoryAccel *v4;
  CMMsl::AccessoryAccel *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_25135E4A8;
  *((_QWORD *)this + 1) = 0;
  if (a2[1])
  {
    v4 = (CMMsl::AccessoryAccel *)operator new();
    v5 = CMMsl::AccessoryAccel::AccessoryAccel(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return this;
}

uint64_t CMMsl::InterpolatedAccessoryAccel::operator=(uint64_t a1, const CMMsl::Accel ***a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::InterpolatedAccessoryAccel *__hidden);
  uint64_t v6;

  if ((const CMMsl::Accel ***)a1 != a2)
  {
    CMMsl::InterpolatedAccessoryAccel::InterpolatedAccessoryAccel((CMMsl::InterpolatedAccessoryAccel *)&v5, a2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v6;
    v5 = &off_25135E4A8;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::InterpolatedAccessoryAccel *a2, CMMsl::InterpolatedAccessoryAccel *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::InterpolatedAccessoryAccel::InterpolatedAccessoryAccel(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_25135E4A8;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_25135E4A8;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::InterpolatedAccessoryAccel::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = &off_25135E4A8;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::InterpolatedAccessoryAccel::formatText(CMMsl::InterpolatedAccessoryAccel *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::InterpolatedAccessoryAccel::readFrom(CMMsl::InterpolatedAccessoryAccel *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v19 = operator new();
        *(_QWORD *)v19 = &off_25135BED0;
        *(_QWORD *)(v19 + 8) = 0;
        *(_DWORD *)(v19 + 32) = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = *((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_27;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::InterpolatedAccessoryAccel::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2);
  return this;
}

BOOL CMMsl::InterpolatedAccessoryAccel::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::AccessoryAccel::operator==(v2, v3);
  return result;
}

CMMsl::AccessoryAccel *CMMsl::InterpolatedAccessoryAccel::hash_value(CMMsl::InterpolatedAccessoryAccel *this)
{
  CMMsl::AccessoryAccel *result;

  result = (CMMsl::AccessoryAccel *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::AccessoryAccel *)CMMsl::AccessoryAccel::hash_value(result);
  return result;
}

_QWORD *CMMsl::InterpolatedAccessoryAccel::makeSuper(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135BED0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 32) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::IntersiloNSCodingData::IntersiloNSCodingData(_QWORD *this)
{
  *this = &off_25135E4E0;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &off_25135E4E0;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

void CMMsl::IntersiloNSCodingData::~IntersiloNSCodingData(CMMsl::IntersiloNSCodingData *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_25135E4E0;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    sub_242910C5C(v2);
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    sub_242910C5C(v3);
  sub_242910C9C((void ***)this + 1, 0);
  PB::Base::~Base(this);
}

{
  CMMsl::IntersiloNSCodingData::~IntersiloNSCodingData(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::IntersiloNSCodingData *CMMsl::IntersiloNSCodingData::IntersiloNSCodingData(CMMsl::IntersiloNSCodingData *this, const CMMsl::IntersiloNSCodingData *a2)
{
  void ***v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  __int128 v13;
  uint64_t v14;
  void **v15;
  void **v17;

  *(_QWORD *)this = &off_25135E4E0;
  *((_QWORD *)this + 1) = 0;
  v4 = (void ***)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (*((_QWORD *)a2 + 2))
  {
    v5 = operator new();
    v6 = v5;
    v7 = (__int128 *)*((_QWORD *)a2 + 2);
    if (*((char *)v7 + 23) < 0)
    {
      sub_242910CE8((_BYTE *)v5, *(void **)v7, *((_QWORD *)v7 + 1));
    }
    else
    {
      v8 = *v7;
      *(_QWORD *)(v5 + 16) = *((_QWORD *)v7 + 2);
      *(_OWORD *)v5 = v8;
    }
    v9 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v6;
    if (v9)
      sub_242910C5C(v9);
  }
  if (*((_QWORD *)a2 + 3))
  {
    v10 = operator new();
    v11 = v10;
    v12 = (__int128 *)*((_QWORD *)a2 + 3);
    if (*((char *)v12 + 23) < 0)
    {
      sub_242910CE8((_BYTE *)v10, *(void **)v12, *((_QWORD *)v12 + 1));
    }
    else
    {
      v13 = *v12;
      *(_QWORD *)(v10 + 16) = *((_QWORD *)v12 + 2);
      *(_OWORD *)v10 = v13;
    }
    v14 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v11;
    if (v14)
      sub_242910C5C(v14);
  }
  if (*((_QWORD *)a2 + 1))
  {
    v15 = (void **)operator new();
    PB::Data::Data();
    v17 = 0;
    sub_242910C9C(v4, v15);
    sub_242910C9C(&v17, 0);
  }
  return this;
}

uint64_t CMMsl::IntersiloNSCodingData::operator=(uint64_t a1, const CMMsl::IntersiloNSCodingData *a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  if ((const CMMsl::IntersiloNSCodingData *)a1 != a2)
  {
    CMMsl::IntersiloNSCodingData::IntersiloNSCodingData((CMMsl::IntersiloNSCodingData *)&v6, a2);
    v3 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v4;
    CMMsl::IntersiloNSCodingData::~IntersiloNSCodingData((CMMsl::IntersiloNSCodingData *)&v6);
  }
  return a1;
}

_QWORD *CMMsl::swap(_QWORD *this, CMMsl::IntersiloNSCodingData *a2, CMMsl::IntersiloNSCodingData *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v3;
  v4 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v4;
  v5 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  return this;
}

_QWORD *CMMsl::IntersiloNSCodingData::IntersiloNSCodingData(_QWORD *a1, _QWORD *a2)
{
  void ***v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *a1 = &off_25135E4E0;
  a1[1] = 0;
  v4 = (void ***)(a1 + 1);
  a1[2] = 0;
  a1[3] = 0;
  v5 = a2[2];
  a2[2] = 0;
  v6 = a1[2];
  a1[2] = v5;
  if (v6)
    sub_242910C5C(v6);
  v7 = a2[3];
  a2[3] = 0;
  v8 = a1[3];
  a1[3] = v7;
  if (v8)
    sub_242910C5C(v8);
  v9 = (void **)a2[1];
  a2[1] = 0;
  sub_242910C9C(v4, v9);
  return a1;
}

uint64_t CMMsl::IntersiloNSCodingData::operator=(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  if ((_QWORD *)a1 != a2)
  {
    CMMsl::IntersiloNSCodingData::IntersiloNSCodingData(&v6, a2);
    v3 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v4;
    CMMsl::IntersiloNSCodingData::~IntersiloNSCodingData((CMMsl::IntersiloNSCodingData *)&v6);
  }
  return a1;
}

uint64_t CMMsl::IntersiloNSCodingData::formatText(CMMsl::IntersiloNSCodingData *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format();
  if (*((_QWORD *)this + 2))
    PB::TextFormatter::format();
  if (*((_QWORD *)this + 3))
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::IntersiloNSCodingData::readFrom(CMMsl::IntersiloNSCodingData *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void ***v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  _QWORD *v25;
  void **v26;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void ***)((char *)this + 8);
    while (1)
    {
      v9 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v16 = 0;
        v17 = 0;
        v12 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v18 = v2 + 1;
          v19 = *(_BYTE *)(v9 + v2);
          *((_QWORD *)a2 + 1) = v18;
          v12 |= (unint64_t)(v19 & 0x7F) << v16;
          if ((v19 & 0x80) == 0)
            goto LABEL_21;
          v16 += 7;
          v2 = v18;
          v15 = v17++ > 8;
          if (v15)
            goto LABEL_27;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_27;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v12 >> 3;
      if ((v12 >> 3) == 4)
      {
        v24 = operator new();
        *(_QWORD *)v24 = 0;
        *(_QWORD *)(v24 + 8) = 0;
        v26 = 0;
        sub_242910C9C(v8, (void **)v24);
        sub_242910C9C(&v26, 0);
        PB::Reader::read();
        goto LABEL_33;
      }
      if ((_DWORD)v20 != 3)
        break;
      v25 = (_QWORD *)operator new();
      v25[1] = 0;
      v25[2] = 0;
      *v25 = 0;
      v22 = *((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = v25;
      if (v22)
        goto LABEL_31;
LABEL_32:
      PB::Reader::read();
LABEL_33:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    if ((_DWORD)v20 != 2)
    {
LABEL_27:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      goto LABEL_33;
    }
    v21 = (_QWORD *)operator new();
    v21[1] = 0;
    v21[2] = 0;
    *v21 = 0;
    v22 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v21;
    if (!v22)
      goto LABEL_32;
LABEL_31:
    sub_242910C5C(v22);
    goto LABEL_32;
  }
  return v4 == 0;
}

uint64_t CMMsl::IntersiloNSCodingData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v2;

  v2 = this;
  if (*(_QWORD *)(this + 16))
    this = PB::Writer::write();
  if (*(_QWORD *)(v2 + 24))
    this = PB::Writer::write();
  if (*(_QWORD *)(v2 + 8))
    return PB::Writer::write();
  return this;
}

BOOL CMMsl::IntersiloNSCodingData::operator==(_QWORD *a1, _QWORD *a2)
{
  unsigned __int8 *v4;
  unsigned __int8 **v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 **v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;

  v4 = (unsigned __int8 *)a1[2];
  v5 = (unsigned __int8 **)a2[2];
  if (v4)
  {
    if (!v5)
      return 0;
    v6 = v4[23];
    if ((v6 & 0x80u) == 0)
      v7 = (unsigned __int8 *)v4[23];
    else
      v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
    v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    v9 = (char)v8;
    if ((char)v8 < 0)
      v8 = v5[1];
    if (v7 != v8)
      return 0;
    if (v9 >= 0)
      v10 = (unsigned __int8 *)a2[2];
    else
      v10 = *v5;
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((_QWORD *)v4 + 1)))
        return 0;
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6)
          goto LABEL_18;
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_18:
  v11 = (unsigned __int8 *)a1[3];
  v12 = (unsigned __int8 **)a2[3];
  if (!v11)
  {
    if (!v12)
      goto LABEL_35;
    return 0;
  }
  if (!v12)
    return 0;
  v13 = v11[23];
  if ((v13 & 0x80u) == 0)
    v14 = (unsigned __int8 *)v11[23];
  else
    v14 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
  v15 = (unsigned __int8 *)*((unsigned __int8 *)v12 + 23);
  v16 = (char)v15;
  if ((char)v15 < 0)
    v15 = v12[1];
  if (v14 != v15)
    return 0;
  if (v16 >= 0)
    v17 = (unsigned __int8 *)a2[3];
  else
    v17 = *v12;
  if ((v13 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v11, v17, *((_QWORD *)v11 + 1)))
      goto LABEL_35;
    return 0;
  }
  if (v11[23])
  {
    while (*v11 == *v17)
    {
      ++v11;
      ++v17;
      if (!--v13)
        goto LABEL_35;
    }
    return 0;
  }
LABEL_35:
  if (a1[1])
  {
    if (!a2[1])
      return 0;
    if ((PB::Data::operator==() & 1) != 0)
      return 1;
    if (a1[1])
      return 0;
  }
  return a2[1] == 0;
}

unint64_t CMMsl::IntersiloNSCodingData::hash_value(CMMsl::IntersiloNSCodingData *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    v3 = sub_242910D74(v2);
  else
    v3 = 0;
  v4 = *((_QWORD *)this + 3);
  if (v4)
    v5 = sub_242910D74(v4);
  else
    v5 = 0;
  if (*((_QWORD *)this + 1))
    v6 = PBHashBytes();
  else
    v6 = 0;
  return v5 ^ v3 ^ v6;
}

CMMsl::Item *CMMsl::Item::Item(CMMsl::Item *this)
{
  *(_QWORD *)this = &off_25135E518;
  bzero((char *)this + 8, 0x260uLL);
  bzero((char *)this + 624, 0xBB4uLL);
  return this;
}

{
  *(_QWORD *)this = &off_25135E518;
  bzero((char *)this + 8, 0x260uLL);
  bzero((char *)this + 624, 0xBB4uLL);
  return this;
}

void CMMsl::Item::~Item(CMMsl::Item *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;

  *(_QWORD *)this = &off_25135E518;
  v2 = *((_QWORD *)this + 451);
  *((_QWORD *)this + 451) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 450);
  *((_QWORD *)this + 450) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 449);
  *((_QWORD *)this + 449) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 448);
  *((_QWORD *)this + 448) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 447);
  *((_QWORD *)this + 447) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 446);
  *((_QWORD *)this + 446) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 445);
  *((_QWORD *)this + 445) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *((_QWORD *)this + 444);
  *((_QWORD *)this + 444) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 443);
  *((_QWORD *)this + 443) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *((_QWORD *)this + 442);
  *((_QWORD *)this + 442) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *((_QWORD *)this + 441);
  *((_QWORD *)this + 441) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *((_QWORD *)this + 440);
  *((_QWORD *)this + 440) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *((_QWORD *)this + 439);
  *((_QWORD *)this + 439) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = *((_QWORD *)this + 438);
  *((_QWORD *)this + 438) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = *((_QWORD *)this + 437);
  *((_QWORD *)this + 437) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = *((_QWORD *)this + 436);
  *((_QWORD *)this + 436) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *((_QWORD *)this + 435);
  *((_QWORD *)this + 435) = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = *((_QWORD *)this + 434);
  *((_QWORD *)this + 434) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = *((_QWORD *)this + 433);
  *((_QWORD *)this + 433) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = *((_QWORD *)this + 432);
  *((_QWORD *)this + 432) = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = *((_QWORD *)this + 431);
  *((_QWORD *)this + 431) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = *((_QWORD *)this + 430);
  *((_QWORD *)this + 430) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = *((_QWORD *)this + 429);
  *((_QWORD *)this + 429) = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v25 = *((_QWORD *)this + 428);
  *((_QWORD *)this + 428) = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = *((_QWORD *)this + 427);
  *((_QWORD *)this + 427) = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v27 = *((_QWORD *)this + 426);
  *((_QWORD *)this + 426) = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v28 = *((_QWORD *)this + 425);
  *((_QWORD *)this + 425) = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  v29 = *((_QWORD *)this + 424);
  *((_QWORD *)this + 424) = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  v30 = *((_QWORD *)this + 423);
  *((_QWORD *)this + 423) = 0;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  v31 = *((_QWORD *)this + 422);
  *((_QWORD *)this + 422) = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v32 = *((_QWORD *)this + 421);
  *((_QWORD *)this + 421) = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  v33 = *((_QWORD *)this + 420);
  *((_QWORD *)this + 420) = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  v34 = *((_QWORD *)this + 419);
  *((_QWORD *)this + 419) = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  v35 = *((_QWORD *)this + 418);
  *((_QWORD *)this + 418) = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = *((_QWORD *)this + 417);
  *((_QWORD *)this + 417) = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  v37 = *((_QWORD *)this + 416);
  *((_QWORD *)this + 416) = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  v38 = *((_QWORD *)this + 415);
  *((_QWORD *)this + 415) = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  v39 = *((_QWORD *)this + 414);
  *((_QWORD *)this + 414) = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  v40 = *((_QWORD *)this + 413);
  *((_QWORD *)this + 413) = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = *((_QWORD *)this + 412);
  *((_QWORD *)this + 412) = 0;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  v42 = *((_QWORD *)this + 411);
  *((_QWORD *)this + 411) = 0;
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  v43 = *((_QWORD *)this + 410);
  *((_QWORD *)this + 410) = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  v44 = *((_QWORD *)this + 409);
  *((_QWORD *)this + 409) = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = *((_QWORD *)this + 408);
  *((_QWORD *)this + 408) = 0;
  if (v45)
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  v46 = *((_QWORD *)this + 407);
  *((_QWORD *)this + 407) = 0;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  v47 = *((_QWORD *)this + 406);
  *((_QWORD *)this + 406) = 0;
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  v48 = *((_QWORD *)this + 405);
  *((_QWORD *)this + 405) = 0;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  v49 = *((_QWORD *)this + 404);
  *((_QWORD *)this + 404) = 0;
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  v50 = *((_QWORD *)this + 403);
  *((_QWORD *)this + 403) = 0;
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  v51 = *((_QWORD *)this + 402);
  *((_QWORD *)this + 402) = 0;
  if (v51)
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  v52 = *((_QWORD *)this + 401);
  *((_QWORD *)this + 401) = 0;
  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  v53 = *((_QWORD *)this + 400);
  *((_QWORD *)this + 400) = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  v54 = *((_QWORD *)this + 399);
  *((_QWORD *)this + 399) = 0;
  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  v55 = *((_QWORD *)this + 398);
  *((_QWORD *)this + 398) = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = *((_QWORD *)this + 397);
  *((_QWORD *)this + 397) = 0;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  v57 = *((_QWORD *)this + 396);
  *((_QWORD *)this + 396) = 0;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  v58 = *((_QWORD *)this + 395);
  *((_QWORD *)this + 395) = 0;
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  v59 = *((_QWORD *)this + 394);
  *((_QWORD *)this + 394) = 0;
  if (v59)
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
  v60 = *((_QWORD *)this + 393);
  *((_QWORD *)this + 393) = 0;
  if (v60)
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  v61 = *((_QWORD *)this + 392);
  *((_QWORD *)this + 392) = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  v62 = *((_QWORD *)this + 391);
  *((_QWORD *)this + 391) = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  v63 = *((_QWORD *)this + 390);
  *((_QWORD *)this + 390) = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  v64 = *((_QWORD *)this + 389);
  *((_QWORD *)this + 389) = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  v65 = *((_QWORD *)this + 388);
  *((_QWORD *)this + 388) = 0;
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  v66 = *((_QWORD *)this + 387);
  *((_QWORD *)this + 387) = 0;
  if (v66)
    (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
  v67 = *((_QWORD *)this + 386);
  *((_QWORD *)this + 386) = 0;
  if (v67)
    (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
  v68 = *((_QWORD *)this + 385);
  *((_QWORD *)this + 385) = 0;
  if (v68)
    (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
  v69 = *((_QWORD *)this + 384);
  *((_QWORD *)this + 384) = 0;
  if (v69)
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
  v70 = *((_QWORD *)this + 383);
  *((_QWORD *)this + 383) = 0;
  if (v70)
    (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
  v71 = *((_QWORD *)this + 382);
  *((_QWORD *)this + 382) = 0;
  if (v71)
    (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
  v72 = *((_QWORD *)this + 381);
  *((_QWORD *)this + 381) = 0;
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  v73 = *((_QWORD *)this + 380);
  *((_QWORD *)this + 380) = 0;
  if (v73)
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
  v74 = *((_QWORD *)this + 379);
  *((_QWORD *)this + 379) = 0;
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  v75 = *((_QWORD *)this + 378);
  *((_QWORD *)this + 378) = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  v76 = *((_QWORD *)this + 377);
  *((_QWORD *)this + 377) = 0;
  if (v76)
    (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
  v77 = *((_QWORD *)this + 376);
  *((_QWORD *)this + 376) = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  v78 = *((_QWORD *)this + 375);
  *((_QWORD *)this + 375) = 0;
  if (v78)
    (*(void (**)(uint64_t))(*(_QWORD *)v78 + 8))(v78);
  v79 = *((_QWORD *)this + 374);
  *((_QWORD *)this + 374) = 0;
  if (v79)
    (*(void (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
  v80 = *((_QWORD *)this + 373);
  *((_QWORD *)this + 373) = 0;
  if (v80)
    (*(void (**)(uint64_t))(*(_QWORD *)v80 + 8))(v80);
  v81 = *((_QWORD *)this + 372);
  *((_QWORD *)this + 372) = 0;
  if (v81)
    (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
  v82 = *((_QWORD *)this + 371);
  *((_QWORD *)this + 371) = 0;
  if (v82)
    (*(void (**)(uint64_t))(*(_QWORD *)v82 + 8))(v82);
  v83 = *((_QWORD *)this + 370);
  *((_QWORD *)this + 370) = 0;
  if (v83)
    (*(void (**)(uint64_t))(*(_QWORD *)v83 + 8))(v83);
  v84 = *((_QWORD *)this + 369);
  *((_QWORD *)this + 369) = 0;
  if (v84)
    (*(void (**)(uint64_t))(*(_QWORD *)v84 + 8))(v84);
  v85 = *((_QWORD *)this + 368);
  *((_QWORD *)this + 368) = 0;
  if (v85)
    (*(void (**)(uint64_t))(*(_QWORD *)v85 + 8))(v85);
  v86 = *((_QWORD *)this + 367);
  *((_QWORD *)this + 367) = 0;
  if (v86)
    (*(void (**)(uint64_t))(*(_QWORD *)v86 + 8))(v86);
  v87 = *((_QWORD *)this + 366);
  *((_QWORD *)this + 366) = 0;
  if (v87)
    (*(void (**)(uint64_t))(*(_QWORD *)v87 + 8))(v87);
  v88 = *((_QWORD *)this + 365);
  *((_QWORD *)this + 365) = 0;
  if (v88)
    (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
  v89 = *((_QWORD *)this + 364);
  *((_QWORD *)this + 364) = 0;
  if (v89)
    (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
  v90 = *((_QWORD *)this + 363);
  *((_QWORD *)this + 363) = 0;
  if (v90)
    (*(void (**)(uint64_t))(*(_QWORD *)v90 + 8))(v90);
  v91 = *((_QWORD *)this + 362);
  *((_QWORD *)this + 362) = 0;
  if (v91)
    (*(void (**)(uint64_t))(*(_QWORD *)v91 + 8))(v91);
  v92 = *((_QWORD *)this + 361);
  *((_QWORD *)this + 361) = 0;
  if (v92)
    (*(void (**)(uint64_t))(*(_QWORD *)v92 + 8))(v92);
  v93 = *((_QWORD *)this + 360);
  *((_QWORD *)this + 360) = 0;
  if (v93)
    (*(void (**)(uint64_t))(*(_QWORD *)v93 + 8))(v93);
  v94 = *((_QWORD *)this + 359);
  *((_QWORD *)this + 359) = 0;
  if (v94)
    (*(void (**)(uint64_t))(*(_QWORD *)v94 + 8))(v94);
  v95 = *((_QWORD *)this + 358);
  *((_QWORD *)this + 358) = 0;
  if (v95)
    (*(void (**)(uint64_t))(*(_QWORD *)v95 + 8))(v95);
  v96 = *((_QWORD *)this + 357);
  *((_QWORD *)this + 357) = 0;
  if (v96)
    (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
  v97 = *((_QWORD *)this + 356);
  *((_QWORD *)this + 356) = 0;
  if (v97)
    (*(void (**)(uint64_t))(*(_QWORD *)v97 + 8))(v97);
  v98 = *((_QWORD *)this + 355);
  *((_QWORD *)this + 355) = 0;
  if (v98)
    (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
  v99 = *((_QWORD *)this + 354);
  *((_QWORD *)this + 354) = 0;
  if (v99)
    (*(void (**)(uint64_t))(*(_QWORD *)v99 + 8))(v99);
  v100 = *((_QWORD *)this + 353);
  *((_QWORD *)this + 353) = 0;
  if (v100)
    (*(void (**)(uint64_t))(*(_QWORD *)v100 + 8))(v100);
  v101 = *((_QWORD *)this + 352);
  *((_QWORD *)this + 352) = 0;
  if (v101)
    (*(void (**)(uint64_t))(*(_QWORD *)v101 + 8))(v101);
  v102 = *((_QWORD *)this + 351);
  *((_QWORD *)this + 351) = 0;
  if (v102)
    (*(void (**)(uint64_t))(*(_QWORD *)v102 + 8))(v102);
  v103 = *((_QWORD *)this + 350);
  *((_QWORD *)this + 350) = 0;
  if (v103)
    (*(void (**)(uint64_t))(*(_QWORD *)v103 + 8))(v103);
  v104 = *((_QWORD *)this + 349);
  *((_QWORD *)this + 349) = 0;
  if (v104)
    (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  v105 = *((_QWORD *)this + 348);
  *((_QWORD *)this + 348) = 0;
  if (v105)
    (*(void (**)(uint64_t))(*(_QWORD *)v105 + 8))(v105);
  v106 = *((_QWORD *)this + 347);
  *((_QWORD *)this + 347) = 0;
  if (v106)
    (*(void (**)(uint64_t))(*(_QWORD *)v106 + 8))(v106);
  v107 = *((_QWORD *)this + 346);
  *((_QWORD *)this + 346) = 0;
  if (v107)
    (*(void (**)(uint64_t))(*(_QWORD *)v107 + 8))(v107);
  v108 = *((_QWORD *)this + 345);
  *((_QWORD *)this + 345) = 0;
  if (v108)
    (*(void (**)(uint64_t))(*(_QWORD *)v108 + 8))(v108);
  v109 = *((_QWORD *)this + 344);
  *((_QWORD *)this + 344) = 0;
  if (v109)
    (*(void (**)(uint64_t))(*(_QWORD *)v109 + 8))(v109);
  v110 = *((_QWORD *)this + 343);
  *((_QWORD *)this + 343) = 0;
  if (v110)
    (*(void (**)(uint64_t))(*(_QWORD *)v110 + 8))(v110);
  v111 = *((_QWORD *)this + 342);
  *((_QWORD *)this + 342) = 0;
  if (v111)
    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  v112 = *((_QWORD *)this + 341);
  *((_QWORD *)this + 341) = 0;
  if (v112)
    (*(void (**)(uint64_t))(*(_QWORD *)v112 + 8))(v112);
  v113 = *((_QWORD *)this + 340);
  *((_QWORD *)this + 340) = 0;
  if (v113)
    (*(void (**)(uint64_t))(*(_QWORD *)v113 + 8))(v113);
  v114 = *((_QWORD *)this + 339);
  *((_QWORD *)this + 339) = 0;
  if (v114)
    (*(void (**)(uint64_t))(*(_QWORD *)v114 + 8))(v114);
  v115 = *((_QWORD *)this + 338);
  *((_QWORD *)this + 338) = 0;
  if (v115)
    (*(void (**)(uint64_t))(*(_QWORD *)v115 + 8))(v115);
  v116 = *((_QWORD *)this + 337);
  *((_QWORD *)this + 337) = 0;
  if (v116)
    (*(void (**)(uint64_t))(*(_QWORD *)v116 + 8))(v116);
  v117 = *((_QWORD *)this + 336);
  *((_QWORD *)this + 336) = 0;
  if (v117)
    (*(void (**)(uint64_t))(*(_QWORD *)v117 + 8))(v117);
  v118 = *((_QWORD *)this + 335);
  *((_QWORD *)this + 335) = 0;
  if (v118)
    (*(void (**)(uint64_t))(*(_QWORD *)v118 + 8))(v118);
  v119 = *((_QWORD *)this + 334);
  *((_QWORD *)this + 334) = 0;
  if (v119)
    (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
  v120 = *((_QWORD *)this + 333);
  *((_QWORD *)this + 333) = 0;
  if (v120)
    (*(void (**)(uint64_t))(*(_QWORD *)v120 + 8))(v120);
  v121 = *((_QWORD *)this + 332);
  *((_QWORD *)this + 332) = 0;
  if (v121)
    (*(void (**)(uint64_t))(*(_QWORD *)v121 + 8))(v121);
  v122 = *((_QWORD *)this + 331);
  *((_QWORD *)this + 331) = 0;
  if (v122)
    (*(void (**)(uint64_t))(*(_QWORD *)v122 + 8))(v122);
  v123 = *((_QWORD *)this + 330);
  *((_QWORD *)this + 330) = 0;
  if (v123)
    (*(void (**)(uint64_t))(*(_QWORD *)v123 + 8))(v123);
  v124 = *((_QWORD *)this + 329);
  *((_QWORD *)this + 329) = 0;
  if (v124)
    (*(void (**)(uint64_t))(*(_QWORD *)v124 + 8))(v124);
  v125 = *((_QWORD *)this + 328);
  *((_QWORD *)this + 328) = 0;
  if (v125)
    (*(void (**)(uint64_t))(*(_QWORD *)v125 + 8))(v125);
  v126 = *((_QWORD *)this + 327);
  *((_QWORD *)this + 327) = 0;
  if (v126)
    (*(void (**)(uint64_t))(*(_QWORD *)v126 + 8))(v126);
  v127 = *((_QWORD *)this + 326);
  *((_QWORD *)this + 326) = 0;
  if (v127)
    (*(void (**)(uint64_t))(*(_QWORD *)v127 + 8))(v127);
  v128 = *((_QWORD *)this + 325);
  *((_QWORD *)this + 325) = 0;
  if (v128)
    (*(void (**)(uint64_t))(*(_QWORD *)v128 + 8))(v128);
  v129 = *((_QWORD *)this + 324);
  *((_QWORD *)this + 324) = 0;
  if (v129)
    (*(void (**)(uint64_t))(*(_QWORD *)v129 + 8))(v129);
  v130 = *((_QWORD *)this + 323);
  *((_QWORD *)this + 323) = 0;
  if (v130)
    (*(void (**)(uint64_t))(*(_QWORD *)v130 + 8))(v130);
  v131 = *((_QWORD *)this + 322);
  *((_QWORD *)this + 322) = 0;
  if (v131)
    (*(void (**)(uint64_t))(*(_QWORD *)v131 + 8))(v131);
  v132 = *((_QWORD *)this + 321);
  *((_QWORD *)this + 321) = 0;
  if (v132)
    (*(void (**)(uint64_t))(*(_QWORD *)v132 + 8))(v132);
  v133 = *((_QWORD *)this + 320);
  *((_QWORD *)this + 320) = 0;
  if (v133)
    (*(void (**)(uint64_t))(*(_QWORD *)v133 + 8))(v133);
  v134 = *((_QWORD *)this + 319);
  *((_QWORD *)this + 319) = 0;
  if (v134)
    (*(void (**)(uint64_t))(*(_QWORD *)v134 + 8))(v134);
  v135 = *((_QWORD *)this + 318);
  *((_QWORD *)this + 318) = 0;
  if (v135)
    (*(void (**)(uint64_t))(*(_QWORD *)v135 + 8))(v135);
  v136 = *((_QWORD *)this + 317);
  *((_QWORD *)this + 317) = 0;
  if (v136)
    (*(void (**)(uint64_t))(*(_QWORD *)v136 + 8))(v136);
  v137 = *((_QWORD *)this + 316);
  *((_QWORD *)this + 316) = 0;
  if (v137)
    (*(void (**)(uint64_t))(*(_QWORD *)v137 + 8))(v137);
  v138 = *((_QWORD *)this + 315);
  *((_QWORD *)this + 315) = 0;
  if (v138)
    (*(void (**)(uint64_t))(*(_QWORD *)v138 + 8))(v138);
  v139 = *((_QWORD *)this + 314);
  *((_QWORD *)this + 314) = 0;
  if (v139)
    (*(void (**)(uint64_t))(*(_QWORD *)v139 + 8))(v139);
  v140 = *((_QWORD *)this + 313);
  *((_QWORD *)this + 313) = 0;
  if (v140)
    (*(void (**)(uint64_t))(*(_QWORD *)v140 + 8))(v140);
  v141 = *((_QWORD *)this + 312);
  *((_QWORD *)this + 312) = 0;
  if (v141)
    (*(void (**)(uint64_t))(*(_QWORD *)v141 + 8))(v141);
  v142 = *((_QWORD *)this + 311);
  *((_QWORD *)this + 311) = 0;
  if (v142)
    (*(void (**)(uint64_t))(*(_QWORD *)v142 + 8))(v142);
  v143 = *((_QWORD *)this + 310);
  *((_QWORD *)this + 310) = 0;
  if (v143)
    (*(void (**)(uint64_t))(*(_QWORD *)v143 + 8))(v143);
  v144 = *((_QWORD *)this + 309);
  *((_QWORD *)this + 309) = 0;
  if (v144)
    (*(void (**)(uint64_t))(*(_QWORD *)v144 + 8))(v144);
  v145 = *((_QWORD *)this + 308);
  *((_QWORD *)this + 308) = 0;
  if (v145)
    (*(void (**)(uint64_t))(*(_QWORD *)v145 + 8))(v145);
  v146 = *((_QWORD *)this + 307);
  *((_QWORD *)this + 307) = 0;
  if (v146)
    (*(void (**)(uint64_t))(*(_QWORD *)v146 + 8))(v146);
  v147 = *((_QWORD *)this + 306);
  *((_QWORD *)this + 306) = 0;
  if (v147)
    (*(void (**)(uint64_t))(*(_QWORD *)v147 + 8))(v147);
  v148 = *((_QWORD *)this + 305);
  *((_QWORD *)this + 305) = 0;
  if (v148)
    (*(void (**)(uint64_t))(*(_QWORD *)v148 + 8))(v148);
  v149 = *((_QWORD *)this + 304);
  *((_QWORD *)this + 304) = 0;
  if (v149)
    (*(void (**)(uint64_t))(*(_QWORD *)v149 + 8))(v149);
  v150 = *((_QWORD *)this + 303);
  *((_QWORD *)this + 303) = 0;
  if (v150)
    (*(void (**)(uint64_t))(*(_QWORD *)v150 + 8))(v150);
  v151 = *((_QWORD *)this + 302);
  *((_QWORD *)this + 302) = 0;
  if (v151)
    (*(void (**)(uint64_t))(*(_QWORD *)v151 + 8))(v151);
  v152 = *((_QWORD *)this + 301);
  *((_QWORD *)this + 301) = 0;
  if (v152)
    (*(void (**)(uint64_t))(*(_QWORD *)v152 + 8))(v152);
  v153 = *((_QWORD *)this + 300);
  *((_QWORD *)this + 300) = 0;
  if (v153)
    (*(void (**)(uint64_t))(*(_QWORD *)v153 + 8))(v153);
  v154 = *((_QWORD *)this + 299);
  *((_QWORD *)this + 299) = 0;
  if (v154)
    (*(void (**)(uint64_t))(*(_QWORD *)v154 + 8))(v154);
  v155 = *((_QWORD *)this + 298);
  *((_QWORD *)this + 298) = 0;
  if (v155)
    (*(void (**)(uint64_t))(*(_QWORD *)v155 + 8))(v155);
  v156 = *((_QWORD *)this + 297);
  *((_QWORD *)this + 297) = 0;
  if (v156)
    (*(void (**)(uint64_t))(*(_QWORD *)v156 + 8))(v156);
  v157 = *((_QWORD *)this + 296);
  *((_QWORD *)this + 296) = 0;
  if (v157)
    (*(void (**)(uint64_t))(*(_QWORD *)v157 + 8))(v157);
  v158 = *((_QWORD *)this + 295);
  *((_QWORD *)this + 295) = 0;
  if (v158)
    (*(void (**)(uint64_t))(*(_QWORD *)v158 + 8))(v158);
  v159 = *((_QWORD *)this + 294);
  *((_QWORD *)this + 294) = 0;
  if (v159)
    (*(void (**)(uint64_t))(*(_QWORD *)v159 + 8))(v159);
  v160 = *((_QWORD *)this + 293);
  *((_QWORD *)this + 293) = 0;
  if (v160)
    (*(void (**)(uint64_t))(*(_QWORD *)v160 + 8))(v160);
  v161 = *((_QWORD *)this + 292);
  *((_QWORD *)this + 292) = 0;
  if (v161)
    (*(void (**)(uint64_t))(*(_QWORD *)v161 + 8))(v161);
  v162 = *((_QWORD *)this + 291);
  *((_QWORD *)this + 291) = 0;
  if (v162)
    (*(void (**)(uint64_t))(*(_QWORD *)v162 + 8))(v162);
  v163 = *((_QWORD *)this + 290);
  *((_QWORD *)this + 290) = 0;
  if (v163)
    (*(void (**)(uint64_t))(*(_QWORD *)v163 + 8))(v163);
  v164 = *((_QWORD *)this + 289);
  *((_QWORD *)this + 289) = 0;
  if (v164)
    (*(void (**)(uint64_t))(*(_QWORD *)v164 + 8))(v164);
  v165 = *((_QWORD *)this + 288);
  *((_QWORD *)this + 288) = 0;
  if (v165)
    (*(void (**)(uint64_t))(*(_QWORD *)v165 + 8))(v165);
  v166 = *((_QWORD *)this + 287);
  *((_QWORD *)this + 287) = 0;
  if (v166)
    (*(void (**)(uint64_t))(*(_QWORD *)v166 + 8))(v166);
  v167 = *((_QWORD *)this + 286);
  *((_QWORD *)this + 286) = 0;
  if (v167)
    (*(void (**)(uint64_t))(*(_QWORD *)v167 + 8))(v167);
  v168 = *((_QWORD *)this + 285);
  *((_QWORD *)this + 285) = 0;
  if (v168)
    (*(void (**)(uint64_t))(*(_QWORD *)v168 + 8))(v168);
  v169 = *((_QWORD *)this + 284);
  *((_QWORD *)this + 284) = 0;
  if (v169)
    (*(void (**)(uint64_t))(*(_QWORD *)v169 + 8))(v169);
  v170 = *((_QWORD *)this + 283);
  *((_QWORD *)this + 283) = 0;
  if (v170)
    (*(void (**)(uint64_t))(*(_QWORD *)v170 + 8))(v170);
  v171 = *((_QWORD *)this + 282);
  *((_QWORD *)this + 282) = 0;
  if (v171)
    (*(void (**)(uint64_t))(*(_QWORD *)v171 + 8))(v171);
  v172 = *((_QWORD *)this + 281);
  *((_QWORD *)this + 281) = 0;
  if (v172)
    (*(void (**)(uint64_t))(*(_QWORD *)v172 + 8))(v172);
  v173 = *((_QWORD *)this + 280);
  *((_QWORD *)this + 280) = 0;
  if (v173)
    (*(void (**)(uint64_t))(*(_QWORD *)v173 + 8))(v173);
  v174 = *((_QWORD *)this + 279);
  *((_QWORD *)this + 279) = 0;
  if (v174)
    (*(void (**)(uint64_t))(*(_QWORD *)v174 + 8))(v174);
  v175 = *((_QWORD *)this + 278);
  *((_QWORD *)this + 278) = 0;
  if (v175)
    (*(void (**)(uint64_t))(*(_QWORD *)v175 + 8))(v175);
  v176 = *((_QWORD *)this + 277);
  *((_QWORD *)this + 277) = 0;
  if (v176)
    (*(void (**)(uint64_t))(*(_QWORD *)v176 + 8))(v176);
  v177 = *((_QWORD *)this + 276);
  *((_QWORD *)this + 276) = 0;
  if (v177)
    (*(void (**)(uint64_t))(*(_QWORD *)v177 + 8))(v177);
  v178 = *((_QWORD *)this + 275);
  *((_QWORD *)this + 275) = 0;
  if (v178)
    (*(void (**)(uint64_t))(*(_QWORD *)v178 + 8))(v178);
  v179 = *((_QWORD *)this + 274);
  *((_QWORD *)this + 274) = 0;
  if (v179)
    (*(void (**)(uint64_t))(*(_QWORD *)v179 + 8))(v179);
  v180 = *((_QWORD *)this + 273);
  *((_QWORD *)this + 273) = 0;
  if (v180)
    (*(void (**)(uint64_t))(*(_QWORD *)v180 + 8))(v180);
  v181 = *((_QWORD *)this + 272);
  *((_QWORD *)this + 272) = 0;
  if (v181)
    (*(void (**)(uint64_t))(*(_QWORD *)v181 + 8))(v181);
  v182 = *((_QWORD *)this + 271);
  *((_QWORD *)this + 271) = 0;
  if (v182)
    (*(void (**)(uint64_t))(*(_QWORD *)v182 + 8))(v182);
  v183 = *((_QWORD *)this + 270);
  *((_QWORD *)this + 270) = 0;
  if (v183)
    (*(void (**)(uint64_t))(*(_QWORD *)v183 + 8))(v183);
  v184 = *((_QWORD *)this + 269);
  *((_QWORD *)this + 269) = 0;
  if (v184)
    (*(void (**)(uint64_t))(*(_QWORD *)v184 + 8))(v184);
  v185 = *((_QWORD *)this + 268);
  *((_QWORD *)this + 268) = 0;
  if (v185)
    (*(void (**)(uint64_t))(*(_QWORD *)v185 + 8))(v185);
  v186 = *((_QWORD *)this + 267);
  *((_QWORD *)this + 267) = 0;
  if (v186)
    (*(void (**)(uint64_t))(*(_QWORD *)v186 + 8))(v186);
  v187 = *((_QWORD *)this + 266);
  *((_QWORD *)this + 266) = 0;
  if (v187)
    (*(void (**)(uint64_t))(*(_QWORD *)v187 + 8))(v187);
  v188 = *((_QWORD *)this + 265);
  *((_QWORD *)this + 265) = 0;
  if (v188)
    (*(void (**)(uint64_t))(*(_QWORD *)v188 + 8))(v188);
  v189 = *((_QWORD *)this + 264);
  *((_QWORD *)this + 264) = 0;
  if (v189)
    (*(void (**)(uint64_t))(*(_QWORD *)v189 + 8))(v189);
  v190 = *((_QWORD *)this + 263);
  *((_QWORD *)this + 263) = 0;
  if (v190)
    (*(void (**)(uint64_t))(*(_QWORD *)v190 + 8))(v190);
  v191 = *((_QWORD *)this + 262);
  *((_QWORD *)this + 262) = 0;
  if (v191)
    (*(void (**)(uint64_t))(*(_QWORD *)v191 + 8))(v191);
  v192 = *((_QWORD *)this + 261);
  *((_QWORD *)this + 261) = 0;
  if (v192)
    (*(void (**)(uint64_t))(*(_QWORD *)v192 + 8))(v192);
  v193 = *((_QWORD *)this + 260);
  *((_QWORD *)this + 260) = 0;
  if (v193)
    (*(void (**)(uint64_t))(*(_QWORD *)v193 + 8))(v193);
  v194 = *((_QWORD *)this + 259);
  *((_QWORD *)this + 259) = 0;
  if (v194)
    (*(void (**)(uint64_t))(*(_QWORD *)v194 + 8))(v194);
  v195 = *((_QWORD *)this + 258);
  *((_QWORD *)this + 258) = 0;
  if (v195)
    (*(void (**)(uint64_t))(*(_QWORD *)v195 + 8))(v195);
  v196 = *((_QWORD *)this + 257);
  *((_QWORD *)this + 257) = 0;
  if (v196)
    (*(void (**)(uint64_t))(*(_QWORD *)v196 + 8))(v196);
  v197 = *((_QWORD *)this + 256);
  *((_QWORD *)this + 256) = 0;
  if (v197)
    (*(void (**)(uint64_t))(*(_QWORD *)v197 + 8))(v197);
  v198 = *((_QWORD *)this + 255);
  *((_QWORD *)this + 255) = 0;
  if (v198)
    (*(void (**)(uint64_t))(*(_QWORD *)v198 + 8))(v198);
  v199 = *((_QWORD *)this + 254);
  *((_QWORD *)this + 254) = 0;
  if (v199)
    (*(void (**)(uint64_t))(*(_QWORD *)v199 + 8))(v199);
  v200 = *((_QWORD *)this + 253);
  *((_QWORD *)this + 253) = 0;
  if (v200)
    (*(void (**)(uint64_t))(*(_QWORD *)v200 + 8))(v200);
  v201 = *((_QWORD *)this + 252);
  *((_QWORD *)this + 252) = 0;
  if (v201)
    (*(void (**)(uint64_t))(*(_QWORD *)v201 + 8))(v201);
  v202 = *((_QWORD *)this + 251);
  *((_QWORD *)this + 251) = 0;
  if (v202)
    (*(void (**)(uint64_t))(*(_QWORD *)v202 + 8))(v202);
  v203 = *((_QWORD *)this + 250);
  *((_QWORD *)this + 250) = 0;
  if (v203)
    (*(void (**)(uint64_t))(*(_QWORD *)v203 + 8))(v203);
  v204 = *((_QWORD *)this + 249);
  *((_QWORD *)this + 249) = 0;
  if (v204)
    (*(void (**)(uint64_t))(*(_QWORD *)v204 + 8))(v204);
  v205 = *((_QWORD *)this + 248);
  *((_QWORD *)this + 248) = 0;
  if (v205)
    (*(void (**)(uint64_t))(*(_QWORD *)v205 + 8))(v205);
  v206 = *((_QWORD *)this + 247);
  *((_QWORD *)this + 247) = 0;
  if (v206)
    (*(void (**)(uint64_t))(*(_QWORD *)v206 + 8))(v206);
  v207 = *((_QWORD *)this + 246);
  *((_QWORD *)this + 246) = 0;
  if (v207)
    (*(void (**)(uint64_t))(*(_QWORD *)v207 + 8))(v207);
  v208 = *((_QWORD *)this + 245);
  *((_QWORD *)this + 245) = 0;
  if (v208)
    (*(void (**)(uint64_t))(*(_QWORD *)v208 + 8))(v208);
  v209 = *((_QWORD *)this + 244);
  *((_QWORD *)this + 244) = 0;
  if (v209)
    (*(void (**)(uint64_t))(*(_QWORD *)v209 + 8))(v209);
  v210 = *((_QWORD *)this + 243);
  *((_QWORD *)this + 243) = 0;
  if (v210)
    (*(void (**)(uint64_t))(*(_QWORD *)v210 + 8))(v210);
  v211 = *((_QWORD *)this + 242);
  *((_QWORD *)this + 242) = 0;
  if (v211)
    (*(void (**)(uint64_t))(*(_QWORD *)v211 + 8))(v211);
  v212 = *((_QWORD *)this + 241);
  *((_QWORD *)this + 241) = 0;
  if (v212)
    (*(void (**)(uint64_t))(*(_QWORD *)v212 + 8))(v212);
  v213 = *((_QWORD *)this + 240);
  *((_QWORD *)this + 240) = 0;
  if (v213)
    (*(void (**)(uint64_t))(*(_QWORD *)v213 + 8))(v213);
  v214 = *((_QWORD *)this + 239);
  *((_QWORD *)this + 239) = 0;
  if (v214)
    (*(void (**)(uint64_t))(*(_QWORD *)v214 + 8))(v214);
  v215 = *((_QWORD *)this + 238);
  *((_QWORD *)this + 238) = 0;
  if (v215)
    (*(void (**)(uint64_t))(*(_QWORD *)v215 + 8))(v215);
  v216 = *((_QWORD *)this + 237);
  *((_QWORD *)this + 237) = 0;
  if (v216)
    (*(void (**)(uint64_t))(*(_QWORD *)v216 + 8))(v216);
  v217 = *((_QWORD *)this + 236);
  *((_QWORD *)this + 236) = 0;
  if (v217)
    (*(void (**)(uint64_t))(*(_QWORD *)v217 + 8))(v217);
  v218 = *((_QWORD *)this + 235);
  *((_QWORD *)this + 235) = 0;
  if (v218)
    (*(void (**)(uint64_t))(*(_QWORD *)v218 + 8))(v218);
  v219 = *((_QWORD *)this + 234);
  *((_QWORD *)this + 234) = 0;
  if (v219)
    (*(void (**)(uint64_t))(*(_QWORD *)v219 + 8))(v219);
  v220 = *((_QWORD *)this + 233);
  *((_QWORD *)this + 233) = 0;
  if (v220)
    (*(void (**)(uint64_t))(*(_QWORD *)v220 + 8))(v220);
  v221 = *((_QWORD *)this + 232);
  *((_QWORD *)this + 232) = 0;
  if (v221)
    (*(void (**)(uint64_t))(*(_QWORD *)v221 + 8))(v221);
  v222 = *((_QWORD *)this + 231);
  *((_QWORD *)this + 231) = 0;
  if (v222)
    (*(void (**)(uint64_t))(*(_QWORD *)v222 + 8))(v222);
  v223 = *((_QWORD *)this + 230);
  *((_QWORD *)this + 230) = 0;
  if (v223)
    (*(void (**)(uint64_t))(*(_QWORD *)v223 + 8))(v223);
  v224 = *((_QWORD *)this + 229);
  *((_QWORD *)this + 229) = 0;
  if (v224)
    (*(void (**)(uint64_t))(*(_QWORD *)v224 + 8))(v224);
  v225 = *((_QWORD *)this + 228);
  *((_QWORD *)this + 228) = 0;
  if (v225)
    (*(void (**)(uint64_t))(*(_QWORD *)v225 + 8))(v225);
  v226 = *((_QWORD *)this + 227);
  *((_QWORD *)this + 227) = 0;
  if (v226)
    (*(void (**)(uint64_t))(*(_QWORD *)v226 + 8))(v226);
  v227 = *((_QWORD *)this + 226);
  *((_QWORD *)this + 226) = 0;
  if (v227)
    (*(void (**)(uint64_t))(*(_QWORD *)v227 + 8))(v227);
  v228 = *((_QWORD *)this + 225);
  *((_QWORD *)this + 225) = 0;
  if (v228)
    (*(void (**)(uint64_t))(*(_QWORD *)v228 + 8))(v228);
  v229 = *((_QWORD *)this + 224);
  *((_QWORD *)this + 224) = 0;
  if (v229)
    (*(void (**)(uint64_t))(*(_QWORD *)v229 + 8))(v229);
  v230 = *((_QWORD *)this + 223);
  *((_QWORD *)this + 223) = 0;
  if (v230)
    (*(void (**)(uint64_t))(*(_QWORD *)v230 + 8))(v230);
  v231 = *((_QWORD *)this + 222);
  *((_QWORD *)this + 222) = 0;
  if (v231)
    (*(void (**)(uint64_t))(*(_QWORD *)v231 + 8))(v231);
  v232 = *((_QWORD *)this + 221);
  *((_QWORD *)this + 221) = 0;
  if (v232)
    (*(void (**)(uint64_t))(*(_QWORD *)v232 + 8))(v232);
  v233 = *((_QWORD *)this + 220);
  *((_QWORD *)this + 220) = 0;
  if (v233)
    (*(void (**)(uint64_t))(*(_QWORD *)v233 + 8))(v233);
  v234 = *((_QWORD *)this + 219);
  *((_QWORD *)this + 219) = 0;
  if (v234)
    (*(void (**)(uint64_t))(*(_QWORD *)v234 + 8))(v234);
  v235 = *((_QWORD *)this + 218);
  *((_QWORD *)this + 218) = 0;
  if (v235)
    (*(void (**)(uint64_t))(*(_QWORD *)v235 + 8))(v235);
  v236 = *((_QWORD *)this + 217);
  *((_QWORD *)this + 217) = 0;
  if (v236)
    (*(void (**)(uint64_t))(*(_QWORD *)v236 + 8))(v236);
  v237 = *((_QWORD *)this + 216);
  *((_QWORD *)this + 216) = 0;
  if (v237)
    (*(void (**)(uint64_t))(*(_QWORD *)v237 + 8))(v237);
  v238 = *((_QWORD *)this + 215);
  *((_QWORD *)this + 215) = 0;
  if (v238)
    (*(void (**)(uint64_t))(*(_QWORD *)v238 + 8))(v238);
  v239 = *((_QWORD *)this + 214);
  *((_QWORD *)this + 214) = 0;
  if (v239)
    (*(void (**)(uint64_t))(*(_QWORD *)v239 + 8))(v239);
  v240 = *((_QWORD *)this + 213);
  *((_QWORD *)this + 213) = 0;
  if (v240)
    (*(void (**)(uint64_t))(*(_QWORD *)v240 + 8))(v240);
  v241 = *((_QWORD *)this + 212);
  *((_QWORD *)this + 212) = 0;
  if (v241)
    (*(void (**)(uint64_t))(*(_QWORD *)v241 + 8))(v241);
  v242 = *((_QWORD *)this + 211);
  *((_QWORD *)this + 211) = 0;
  if (v242)
    (*(void (**)(uint64_t))(*(_QWORD *)v242 + 8))(v242);
  v243 = *((_QWORD *)this + 210);
  *((_QWORD *)this + 210) = 0;
  if (v243)
    (*(void (**)(uint64_t))(*(_QWORD *)v243 + 8))(v243);
  v244 = *((_QWORD *)this + 209);
  *((_QWORD *)this + 209) = 0;
  if (v244)
    (*(void (**)(uint64_t))(*(_QWORD *)v244 + 8))(v244);
  v245 = *((_QWORD *)this + 208);
  *((_QWORD *)this + 208) = 0;
  if (v245)
    (*(void (**)(uint64_t))(*(_QWORD *)v245 + 8))(v245);
  v246 = *((_QWORD *)this + 207);
  *((_QWORD *)this + 207) = 0;
  if (v246)
    (*(void (**)(uint64_t))(*(_QWORD *)v246 + 8))(v246);
  v247 = *((_QWORD *)this + 206);
  *((_QWORD *)this + 206) = 0;
  if (v247)
    (*(void (**)(uint64_t))(*(_QWORD *)v247 + 8))(v247);
  v248 = *((_QWORD *)this + 205);
  *((_QWORD *)this + 205) = 0;
  if (v248)
    (*(void (**)(uint64_t))(*(_QWORD *)v248 + 8))(v248);
  v249 = *((_QWORD *)this + 204);
  *((_QWORD *)this + 204) = 0;
  if (v249)
    (*(void (**)(uint64_t))(*(_QWORD *)v249 + 8))(v249);
  v250 = *((_QWORD *)this + 203);
  *((_QWORD *)this + 203) = 0;
  if (v250)
    (*(void (**)(uint64_t))(*(_QWORD *)v250 + 8))(v250);
  v251 = *((_QWORD *)this + 202);
  *((_QWORD *)this + 202) = 0;
  if (v251)
    (*(void (**)(uint64_t))(*(_QWORD *)v251 + 8))(v251);
  v252 = *((_QWORD *)this + 201);
  *((_QWORD *)this + 201) = 0;
  if (v252)
    (*(void (**)(uint64_t))(*(_QWORD *)v252 + 8))(v252);
  v253 = *((_QWORD *)this + 200);
  *((_QWORD *)this + 200) = 0;
  if (v253)
    (*(void (**)(uint64_t))(*(_QWORD *)v253 + 8))(v253);
  v254 = *((_QWORD *)this + 199);
  *((_QWORD *)this + 199) = 0;
  if (v254)
    (*(void (**)(uint64_t))(*(_QWORD *)v254 + 8))(v254);
  v255 = *((_QWORD *)this + 198);
  *((_QWORD *)this + 198) = 0;
  if (v255)
    (*(void (**)(uint64_t))(*(_QWORD *)v255 + 8))(v255);
  v256 = *((_QWORD *)this + 197);
  *((_QWORD *)this + 197) = 0;
  if (v256)
    (*(void (**)(uint64_t))(*(_QWORD *)v256 + 8))(v256);
  v257 = *((_QWORD *)this + 196);
  *((_QWORD *)this + 196) = 0;
  if (v257)
    (*(void (**)(uint64_t))(*(_QWORD *)v257 + 8))(v257);
  v258 = *((_QWORD *)this + 195);
  *((_QWORD *)this + 195) = 0;
  if (v258)
    (*(void (**)(uint64_t))(*(_QWORD *)v258 + 8))(v258);
  v259 = *((_QWORD *)this + 194);
  *((_QWORD *)this + 194) = 0;
  if (v259)
    (*(void (**)(uint64_t))(*(_QWORD *)v259 + 8))(v259);
  v260 = *((_QWORD *)this + 193);
  *((_QWORD *)this + 193) = 0;
  if (v260)
    (*(void (**)(uint64_t))(*(_QWORD *)v260 + 8))(v260);
  v261 = *((_QWORD *)this + 192);
  *((_QWORD *)this + 192) = 0;
  if (v261)
    (*(void (**)(uint64_t))(*(_QWORD *)v261 + 8))(v261);
  v262 = *((_QWORD *)this + 191);
  *((_QWORD *)this + 191) = 0;
  if (v262)
    (*(void (**)(uint64_t))(*(_QWORD *)v262 + 8))(v262);
  v263 = *((_QWORD *)this + 190);
  *((_QWORD *)this + 190) = 0;
  if (v263)
    (*(void (**)(uint64_t))(*(_QWORD *)v263 + 8))(v263);
  v264 = *((_QWORD *)this + 189);
  *((_QWORD *)this + 189) = 0;
  if (v264)
    (*(void (**)(uint64_t))(*(_QWORD *)v264 + 8))(v264);
  v265 = *((_QWORD *)this + 188);
  *((_QWORD *)this + 188) = 0;
  if (v265)
    (*(void (**)(uint64_t))(*(_QWORD *)v265 + 8))(v265);
  v266 = *((_QWORD *)this + 187);
  *((_QWORD *)this + 187) = 0;
  if (v266)
    (*(void (**)(uint64_t))(*(_QWORD *)v266 + 8))(v266);
  v267 = *((_QWORD *)this + 186);
  *((_QWORD *)this + 186) = 0;
  if (v267)
    (*(void (**)(uint64_t))(*(_QWORD *)v267 + 8))(v267);
  v268 = *((_QWORD *)this + 185);
  *((_QWORD *)this + 185) = 0;
  if (v268)
    (*(void (**)(uint64_t))(*(_QWORD *)v268 + 8))(v268);
  v269 = *((_QWORD *)this + 184);
  *((_QWORD *)this + 184) = 0;
  if (v269)
    (*(void (**)(uint64_t))(*(_QWORD *)v269 + 8))(v269);
  v270 = *((_QWORD *)this + 183);
  *((_QWORD *)this + 183) = 0;
  if (v270)
    (*(void (**)(uint64_t))(*(_QWORD *)v270 + 8))(v270);
  v271 = *((_QWORD *)this + 182);
  *((_QWORD *)this + 182) = 0;
  if (v271)
    (*(void (**)(uint64_t))(*(_QWORD *)v271 + 8))(v271);
  v272 = *((_QWORD *)this + 181);
  *((_QWORD *)this + 181) = 0;
  if (v272)
    (*(void (**)(uint64_t))(*(_QWORD *)v272 + 8))(v272);
  v273 = *((_QWORD *)this + 180);
  *((_QWORD *)this + 180) = 0;
  if (v273)
    (*(void (**)(uint64_t))(*(_QWORD *)v273 + 8))(v273);
  v274 = *((_QWORD *)this + 179);
  *((_QWORD *)this + 179) = 0;
  if (v274)
    (*(void (**)(uint64_t))(*(_QWORD *)v274 + 8))(v274);
  v275 = *((_QWORD *)this + 178);
  *((_QWORD *)this + 178) = 0;
  if (v275)
    (*(void (**)(uint64_t))(*(_QWORD *)v275 + 8))(v275);
  v276 = *((_QWORD *)this + 177);
  *((_QWORD *)this + 177) = 0;
  if (v276)
    (*(void (**)(uint64_t))(*(_QWORD *)v276 + 8))(v276);
  v277 = *((_QWORD *)this + 176);
  *((_QWORD *)this + 176) = 0;
  if (v277)
    (*(void (**)(uint64_t))(*(_QWORD *)v277 + 8))(v277);
  v278 = *((_QWORD *)this + 175);
  *((_QWORD *)this + 175) = 0;
  if (v278)
    (*(void (**)(uint64_t))(*(_QWORD *)v278 + 8))(v278);
  v279 = *((_QWORD *)this + 174);
  *((_QWORD *)this + 174) = 0;
  if (v279)
    (*(void (**)(uint64_t))(*(_QWORD *)v279 + 8))(v279);
  v280 = *((_QWORD *)this + 173);
  *((_QWORD *)this + 173) = 0;
  if (v280)
    (*(void (**)(uint64_t))(*(_QWORD *)v280 + 8))(v280);
  v281 = *((_QWORD *)this + 172);
  *((_QWORD *)this + 172) = 0;
  if (v281)
    (*(void (**)(uint64_t))(*(_QWORD *)v281 + 8))(v281);
  v282 = *((_QWORD *)this + 171);
  *((_QWORD *)this + 171) = 0;
  if (v282)
    (*(void (**)(uint64_t))(*(_QWORD *)v282 + 8))(v282);
  v283 = *((_QWORD *)this + 170);
  *((_QWORD *)this + 170) = 0;
  if (v283)
    (*(void (**)(uint64_t))(*(_QWORD *)v283 + 8))(v283);
  v284 = *((_QWORD *)this + 169);
  *((_QWORD *)this + 169) = 0;
  if (v284)
    (*(void (**)(uint64_t))(*(_QWORD *)v284 + 8))(v284);
  v285 = *((_QWORD *)this + 168);
  *((_QWORD *)this + 168) = 0;
  if (v285)
    (*(void (**)(uint64_t))(*(_QWORD *)v285 + 8))(v285);
  v286 = *((_QWORD *)this + 167);
  *((_QWORD *)this + 167) = 0;
  if (v286)
    (*(void (**)(uint64_t))(*(_QWORD *)v286 + 8))(v286);
  v287 = *((_QWORD *)this + 166);
  *((_QWORD *)this + 166) = 0;
  if (v287)
    (*(void (**)(uint64_t))(*(_QWORD *)v287 + 8))(v287);
  v288 = *((_QWORD *)this + 165);
  *((_QWORD *)this + 165) = 0;
  if (v288)
    (*(void (**)(uint64_t))(*(_QWORD *)v288 + 8))(v288);
  v289 = *((_QWORD *)this + 164);
  *((_QWORD *)this + 164) = 0;
  if (v289)
    (*(void (**)(uint64_t))(*(_QWORD *)v289 + 8))(v289);
  v290 = *((_QWORD *)this + 163);
  *((_QWORD *)this + 163) = 0;
  if (v290)
    (*(void (**)(uint64_t))(*(_QWORD *)v290 + 8))(v290);
  v291 = *((_QWORD *)this + 162);
  *((_QWORD *)this + 162) = 0;
  if (v291)
    (*(void (**)(uint64_t))(*(_QWORD *)v291 + 8))(v291);
  v292 = *((_QWORD *)this + 161);
  *((_QWORD *)this + 161) = 0;
  if (v292)
    (*(void (**)(uint64_t))(*(_QWORD *)v292 + 8))(v292);
  v293 = *((_QWORD *)this + 160);
  *((_QWORD *)this + 160) = 0;
  if (v293)
    (*(void (**)(uint64_t))(*(_QWORD *)v293 + 8))(v293);
  v294 = *((_QWORD *)this + 159);
  *((_QWORD *)this + 159) = 0;
  if (v294)
    (*(void (**)(uint64_t))(*(_QWORD *)v294 + 8))(v294);
  v295 = *((_QWORD *)this + 158);
  *((_QWORD *)this + 158) = 0;
  if (v295)
    (*(void (**)(uint64_t))(*(_QWORD *)v295 + 8))(v295);
  v296 = *((_QWORD *)this + 157);
  *((_QWORD *)this + 157) = 0;
  if (v296)
    (*(void (**)(uint64_t))(*(_QWORD *)v296 + 8))(v296);
  v297 = *((_QWORD *)this + 156);
  *((_QWORD *)this + 156) = 0;
  if (v297)
    (*(void (**)(uint64_t))(*(_QWORD *)v297 + 8))(v297);
  v298 = *((_QWORD *)this + 155);
  *((_QWORD *)this + 155) = 0;
  if (v298)
    (*(void (**)(uint64_t))(*(_QWORD *)v298 + 8))(v298);
  v299 = *((_QWORD *)this + 154);
  *((_QWORD *)this + 154) = 0;
  if (v299)
    (*(void (**)(uint64_t))(*(_QWORD *)v299 + 8))(v299);
  v300 = *((_QWORD *)this + 153);
  *((_QWORD *)this + 153) = 0;
  if (v300)
    (*(void (**)(uint64_t))(*(_QWORD *)v300 + 8))(v300);
  v301 = *((_QWORD *)this + 152);
  *((_QWORD *)this + 152) = 0;
  if (v301)
    (*(void (**)(uint64_t))(*(_QWORD *)v301 + 8))(v301);
  v302 = *((_QWORD *)this + 151);
  *((_QWORD *)this + 151) = 0;
  if (v302)
    (*(void (**)(uint64_t))(*(_QWORD *)v302 + 8))(v302);
  v303 = *((_QWORD *)this + 150);
  *((_QWORD *)this + 150) = 0;
  if (v303)
    (*(void (**)(uint64_t))(*(_QWORD *)v303 + 8))(v303);
  v304 = *((_QWORD *)this + 149);
  *((_QWORD *)this + 149) = 0;
  if (v304)
    (*(void (**)(uint64_t))(*(_QWORD *)v304 + 8))(v304);
  v305 = *((_QWORD *)this + 148);
  *((_QWORD *)this + 148) = 0;
  if (v305)
    (*(void (**)(uint64_t))(*(_QWORD *)v305 + 8))(v305);
  v306 = *((_QWORD *)this + 147);
  *((_QWORD *)this + 147) = 0;
  if (v306)
    (*(void (**)(uint64_t))(*(_QWORD *)v306 + 8))(v306);
  v307 = *((_QWORD *)this + 146);
  *((_QWORD *)this + 146) = 0;
  if (v307)
    (*(void (**)(uint64_t))(*(_QWORD *)v307 + 8))(v307);
  v308 = *((_QWORD *)this + 145);
  *((_QWORD *)this + 145) = 0;
  if (v308)
    (*(void (**)(uint64_t))(*(_QWORD *)v308 + 8))(v308);
  v309 = *((_QWORD *)this + 144);
  *((_QWORD *)this + 144) = 0;
  if (v309)
    (*(void (**)(uint64_t))(*(_QWORD *)v309 + 8))(v309);
  v310 = *((_QWORD *)this + 143);
  *((_QWORD *)this + 143) = 0;
  if (v310)
    (*(void (**)(uint64_t))(*(_QWORD *)v310 + 8))(v310);
  v311 = *((_QWORD *)this + 142);
  *((_QWORD *)this + 142) = 0;
  if (v311)
    (*(void (**)(uint64_t))(*(_QWORD *)v311 + 8))(v311);
  v312 = *((_QWORD *)this + 141);
  *((_QWORD *)this + 141) = 0;
  if (v312)
    (*(void (**)(uint64_t))(*(_QWORD *)v312 + 8))(v312);
  v313 = *((_QWORD *)this + 140);
  *((_QWORD *)this + 140) = 0;
  if (v313)
    (*(void (**)(uint64_t))(*(_QWORD *)v313 + 8))(v313);
  v314 = *((_QWORD *)this + 139);
  *((_QWORD *)this + 139) = 0;
  if (v314)
    (*(void (**)(uint64_t))(*(_QWORD *)v314 + 8))(v314);
  v315 = *((_QWORD *)this + 138);
  *((_QWORD *)this + 138) = 0;
  if (v315)
    (*(void (**)(uint64_t))(*(_QWORD *)v315 + 8))(v315);
  v316 = *((_QWORD *)this + 137);
  *((_QWORD *)this + 137) = 0;
  if (v316)
    (*(void (**)(uint64_t))(*(_QWORD *)v316 + 8))(v316);
  v317 = *((_QWORD *)this + 136);
  *((_QWORD *)this + 136) = 0;
  if (v317)
    (*(void (**)(uint64_t))(*(_QWORD *)v317 + 8))(v317);
  v318 = *((_QWORD *)this + 135);
  *((_QWORD *)this + 135) = 0;
  if (v318)
    (*(void (**)(uint64_t))(*(_QWORD *)v318 + 8))(v318);
  v319 = *((_QWORD *)this + 134);
  *((_QWORD *)this + 134) = 0;
  if (v319)
    (*(void (**)(uint64_t))(*(_QWORD *)v319 + 8))(v319);
  v320 = *((_QWORD *)this + 133);
  *((_QWORD *)this + 133) = 0;
  if (v320)
    (*(void (**)(uint64_t))(*(_QWORD *)v320 + 8))(v320);
  v321 = *((_QWORD *)this + 132);
  *((_QWORD *)this + 132) = 0;
  if (v321)
    (*(void (**)(uint64_t))(*(_QWORD *)v321 + 8))(v321);
  v322 = *((_QWORD *)this + 131);
  *((_QWORD *)this + 131) = 0;
  if (v322)
    (*(void (**)(uint64_t))(*(_QWORD *)v322 + 8))(v322);
  v323 = *((_QWORD *)this + 130);
  *((_QWORD *)this + 130) = 0;
  if (v323)
    (*(void (**)(uint64_t))(*(_QWORD *)v323 + 8))(v323);
  v324 = *((_QWORD *)this + 129);
  *((_QWORD *)this + 129) = 0;
  if (v324)
    (*(void (**)(uint64_t))(*(_QWORD *)v324 + 8))(v324);
  v325 = *((_QWORD *)this + 128);
  *((_QWORD *)this + 128) = 0;
  if (v325)
    (*(void (**)(uint64_t))(*(_QWORD *)v325 + 8))(v325);
  v326 = *((_QWORD *)this + 127);
  *((_QWORD *)this + 127) = 0;
  if (v326)
    (*(void (**)(uint64_t))(*(_QWORD *)v326 + 8))(v326);
  v327 = *((_QWORD *)this + 126);
  *((_QWORD *)this + 126) = 0;
  if (v327)
    (*(void (**)(uint64_t))(*(_QWORD *)v327 + 8))(v327);
  v328 = *((_QWORD *)this + 125);
  *((_QWORD *)this + 125) = 0;
  if (v328)
    (*(void (**)(uint64_t))(*(_QWORD *)v328 + 8))(v328);
  v329 = *((_QWORD *)this + 124);
  *((_QWORD *)this + 124) = 0;
  if (v329)
    (*(void (**)(uint64_t))(*(_QWORD *)v329 + 8))(v329);
  v330 = *((_QWORD *)this + 123);
  *((_QWORD *)this + 123) = 0;
  if (v330)
    (*(void (**)(uint64_t))(*(_QWORD *)v330 + 8))(v330);
  v331 = *((_QWORD *)this + 122);
  *((_QWORD *)this + 122) = 0;
  if (v331)
    (*(void (**)(uint64_t))(*(_QWORD *)v331 + 8))(v331);
  v332 = *((_QWORD *)this + 121);
  *((_QWORD *)this + 121) = 0;
  if (v332)
    (*(void (**)(uint64_t))(*(_QWORD *)v332 + 8))(v332);
  v333 = *((_QWORD *)this + 120);
  *((_QWORD *)this + 120) = 0;
  if (v333)
    (*(void (**)(uint64_t))(*(_QWORD *)v333 + 8))(v333);
  v334 = *((_QWORD *)this + 119);
  *((_QWORD *)this + 119) = 0;
  if (v334)
    (*(void (**)(uint64_t))(*(_QWORD *)v334 + 8))(v334);
  v335 = *((_QWORD *)this + 118);
  *((_QWORD *)this + 118) = 0;
  if (v335)
    (*(void (**)(uint64_t))(*(_QWORD *)v335 + 8))(v335);
  v336 = *((_QWORD *)this + 117);
  *((_QWORD *)this + 117) = 0;
  if (v336)
    (*(void (**)(uint64_t))(*(_QWORD *)v336 + 8))(v336);
  v337 = *((_QWORD *)this + 116);
  *((_QWORD *)this + 116) = 0;
  if (v337)
    (*(void (**)(uint64_t))(*(_QWORD *)v337 + 8))(v337);
  v338 = *((_QWORD *)this + 115);
  *((_QWORD *)this + 115) = 0;
  if (v338)
    (*(void (**)(uint64_t))(*(_QWORD *)v338 + 8))(v338);
  v339 = *((_QWORD *)this + 114);
  *((_QWORD *)this + 114) = 0;
  if (v339)
    (*(void (**)(uint64_t))(*(_QWORD *)v339 + 8))(v339);
  v340 = *((_QWORD *)this + 113);
  *((_QWORD *)this + 113) = 0;
  if (v340)
    (*(void (**)(uint64_t))(*(_QWORD *)v340 + 8))(v340);
  v341 = *((_QWORD *)this + 112);
  *((_QWORD *)this + 112) = 0;
  if (v341)
    (*(void (**)(uint64_t))(*(_QWORD *)v341 + 8))(v341);
  v342 = *((_QWORD *)this + 111);
  *((_QWORD *)this + 111) = 0;
  if (v342)
    (*(void (**)(uint64_t))(*(_QWORD *)v342 + 8))(v342);
  v343 = *((_QWORD *)this + 110);
  *((_QWORD *)this + 110) = 0;
  if (v343)
    (*(void (**)(uint64_t))(*(_QWORD *)v343 + 8))(v343);
  v344 = *((_QWORD *)this + 109);
  *((_QWORD *)this + 109) = 0;
  if (v344)
    (*(void (**)(uint64_t))(*(_QWORD *)v344 + 8))(v344);
  v345 = *((_QWORD *)this + 108);
  *((_QWORD *)this + 108) = 0;
  if (v345)
    (*(void (**)(uint64_t))(*(_QWORD *)v345 + 8))(v345);
  v346 = *((_QWORD *)this + 107);
  *((_QWORD *)this + 107) = 0;
  if (v346)
    (*(void (**)(uint64_t))(*(_QWORD *)v346 + 8))(v346);
  v347 = *((_QWORD *)this + 106);
  *((_QWORD *)this + 106) = 0;
  if (v347)
    (*(void (**)(uint64_t))(*(_QWORD *)v347 + 8))(v347);
  v348 = *((_QWORD *)this + 105);
  *((_QWORD *)this + 105) = 0;
  if (v348)
    (*(void (**)(uint64_t))(*(_QWORD *)v348 + 8))(v348);
  v349 = *((_QWORD *)this + 104);
  *((_QWORD *)this + 104) = 0;
  if (v349)
    (*(void (**)(uint64_t))(*(_QWORD *)v349 + 8))(v349);
  v350 = *((_QWORD *)this + 103);
  *((_QWORD *)this + 103) = 0;
  if (v350)
    (*(void (**)(uint64_t))(*(_QWORD *)v350 + 8))(v350);
  v351 = *((_QWORD *)this + 102);
  *((_QWORD *)this + 102) = 0;
  if (v351)
    (*(void (**)(uint64_t))(*(_QWORD *)v351 + 8))(v351);
  v352 = *((_QWORD *)this + 101);
  *((_QWORD *)this + 101) = 0;
  if (v352)
    (*(void (**)(uint64_t))(*(_QWORD *)v352 + 8))(v352);
  v353 = *((_QWORD *)this + 100);
  *((_QWORD *)this + 100) = 0;
  if (v353)
    (*(void (**)(uint64_t))(*(_QWORD *)v353 + 8))(v353);
  v354 = *((_QWORD *)this + 99);
  *((_QWORD *)this + 99) = 0;
  if (v354)
    (*(void (**)(uint64_t))(*(_QWORD *)v354 + 8))(v354);
  v355 = *((_QWORD *)this + 98);
  *((_QWORD *)this + 98) = 0;
  if (v355)
    (*(void (**)(uint64_t))(*(_QWORD *)v355 + 8))(v355);
  v356 = *((_QWORD *)this + 97);
  *((_QWORD *)this + 97) = 0;
  if (v356)
    (*(void (**)(uint64_t))(*(_QWORD *)v356 + 8))(v356);
  v357 = *((_QWORD *)this + 96);
  *((_QWORD *)this + 96) = 0;
  if (v357)
    (*(void (**)(uint64_t))(*(_QWORD *)v357 + 8))(v357);
  v358 = *((_QWORD *)this + 95);
  *((_QWORD *)this + 95) = 0;
  if (v358)
    (*(void (**)(uint64_t))(*(_QWORD *)v358 + 8))(v358);
  v359 = *((_QWORD *)this + 94);
  *((_QWORD *)this + 94) = 0;
  if (v359)
    (*(void (**)(uint64_t))(*(_QWORD *)v359 + 8))(v359);
  v360 = *((_QWORD *)this + 93);
  *((_QWORD *)this + 93) = 0;
  if (v360)
    (*(void (**)(uint64_t))(*(_QWORD *)v360 + 8))(v360);
  v361 = *((_QWORD *)this + 92);
  *((_QWORD *)this + 92) = 0;
  if (v361)
    (*(void (**)(uint64_t))(*(_QWORD *)v361 + 8))(v361);
  v362 = *((_QWORD *)this + 91);
  *((_QWORD *)this + 91) = 0;
  if (v362)
    (*(void (**)(uint64_t))(*(_QWORD *)v362 + 8))(v362);
  v363 = *((_QWORD *)this + 90);
  *((_QWORD *)this + 90) = 0;
  if (v363)
    (*(void (**)(uint64_t))(*(_QWORD *)v363 + 8))(v363);
  v364 = *((_QWORD *)this + 89);
  *((_QWORD *)this + 89) = 0;
  if (v364)
    (*(void (**)(uint64_t))(*(_QWORD *)v364 + 8))(v364);
  v365 = *((_QWORD *)this + 88);
  *((_QWORD *)this + 88) = 0;
  if (v365)
    (*(void (**)(uint64_t))(*(_QWORD *)v365 + 8))(v365);
  v366 = *((_QWORD *)this + 87);
  *((_QWORD *)this + 87) = 0;
  if (v366)
    (*(void (**)(uint64_t))(*(_QWORD *)v366 + 8))(v366);
  v367 = *((_QWORD *)this + 86);
  *((_QWORD *)this + 86) = 0;
  if (v367)
    (*(void (**)(uint64_t))(*(_QWORD *)v367 + 8))(v367);
  v368 = *((_QWORD *)this + 85);
  *((_QWORD *)this + 85) = 0;
  if (v368)
    (*(void (**)(uint64_t))(*(_QWORD *)v368 + 8))(v368);
  v369 = *((_QWORD *)this + 84);
  *((_QWORD *)this + 84) = 0;
  if (v369)
    (*(void (**)(uint64_t))(*(_QWORD *)v369 + 8))(v369);
  v370 = *((_QWORD *)this + 83);
  *((_QWORD *)this + 83) = 0;
  if (v370)
    (*(void (**)(uint64_t))(*(_QWORD *)v370 + 8))(v370);
  v371 = *((_QWORD *)this + 82);
  *((_QWORD *)this + 82) = 0;
  if (v371)
    (*(void (**)(uint64_t))(*(_QWORD *)v371 + 8))(v371);
  v372 = *((_QWORD *)this + 81);
  *((_QWORD *)this + 81) = 0;
  if (v372)
    (*(void (**)(uint64_t))(*(_QWORD *)v372 + 8))(v372);
  v373 = *((_QWORD *)this + 80);
  *((_QWORD *)this + 80) = 0;
  if (v373)
    (*(void (**)(uint64_t))(*(_QWORD *)v373 + 8))(v373);
  v374 = *((_QWORD *)this + 79);
  *((_QWORD *)this + 79) = 0;
  if (v374)
    (*(void (**)(uint64_t))(*(_QWORD *)v374 + 8))(v374);
  v375 = *((_QWORD *)this + 78);
  *((_QWORD *)this + 78) = 0;
  if (v375)
    (*(void (**)(uint64_t))(*(_QWORD *)v375 + 8))(v375);
  v376 = *((_QWORD *)this + 76);
  *((_QWORD *)this + 76) = 0;
  if (v376)
    (*(void (**)(uint64_t))(*(_QWORD *)v376 + 8))(v376);
  v377 = *((_QWORD *)this + 75);
  *((_QWORD *)this + 75) = 0;
  if (v377)
    (*(void (**)(uint64_t))(*(_QWORD *)v377 + 8))(v377);
  v378 = *((_QWORD *)this + 74);
  *((_QWORD *)this + 74) = 0;
  if (v378)
    (*(void (**)(uint64_t))(*(_QWORD *)v378 + 8))(v378);
  v379 = *((_QWORD *)this + 73);
  *((_QWORD *)this + 73) = 0;
  if (v379)
    (*(void (**)(uint64_t))(*(_QWORD *)v379 + 8))(v379);
  v380 = *((_QWORD *)this + 72);
  *((_QWORD *)this + 72) = 0;
  if (v380)
    (*(void (**)(uint64_t))(*(_QWORD *)v380 + 8))(v380);
  v381 = *((_QWORD *)this + 71);
  *((_QWORD *)this + 71) = 0;
  if (v381)
    (*(void (**)(uint64_t))(*(_QWORD *)v381 + 8))(v381);
  v382 = *((_QWORD *)this + 70);
  *((_QWORD *)this + 70) = 0;
  if (v382)
    (*(void (**)(uint64_t))(*(_QWORD *)v382 + 8))(v382);
  v383 = *((_QWORD *)this + 69);
  *((_QWORD *)this + 69) = 0;
  if (v383)
    (*(void (**)(uint64_t))(*(_QWORD *)v383 + 8))(v383);
  v384 = *((_QWORD *)this + 68);
  *((_QWORD *)this + 68) = 0;
  if (v384)
    (*(void (**)(uint64_t))(*(_QWORD *)v384 + 8))(v384);
  v385 = *((_QWORD *)this + 67);
  *((_QWORD *)this + 67) = 0;
  if (v385)
    (*(void (**)(uint64_t))(*(_QWORD *)v385 + 8))(v385);
  v386 = *((_QWORD *)this + 66);
  *((_QWORD *)this + 66) = 0;
  if (v386)
    (*(void (**)(uint64_t))(*(_QWORD *)v386 + 8))(v386);
  v387 = *((_QWORD *)this + 65);
  *((_QWORD *)this + 65) = 0;
  if (v387)
    (*(void (**)(uint64_t))(*(_QWORD *)v387 + 8))(v387);
  v388 = *((_QWORD *)this + 64);
  *((_QWORD *)this + 64) = 0;
  if (v388)
    (*(void (**)(uint64_t))(*(_QWORD *)v388 + 8))(v388);
  v389 = *((_QWORD *)this + 63);
  *((_QWORD *)this + 63) = 0;
  if (v389)
    (*(void (**)(uint64_t))(*(_QWORD *)v389 + 8))(v389);
  v390 = *((_QWORD *)this + 62);
  *((_QWORD *)this + 62) = 0;
  if (v390)
    (*(void (**)(uint64_t))(*(_QWORD *)v390 + 8))(v390);
  v391 = *((_QWORD *)this + 61);
  *((_QWORD *)this + 61) = 0;
  if (v391)
    (*(void (**)(uint64_t))(*(_QWORD *)v391 + 8))(v391);
  v392 = *((_QWORD *)this + 60);
  *((_QWORD *)this + 60) = 0;
  if (v392)
    (*(void (**)(uint64_t))(*(_QWORD *)v392 + 8))(v392);
  v393 = *((_QWORD *)this + 59);
  *((_QWORD *)this + 59) = 0;
  if (v393)
    (*(void (**)(uint64_t))(*(_QWORD *)v393 + 8))(v393);
  v394 = *((_QWORD *)this + 58);
  *((_QWORD *)this + 58) = 0;
  if (v394)
    (*(void (**)(uint64_t))(*(_QWORD *)v394 + 8))(v394);
  v395 = *((_QWORD *)this + 57);
  *((_QWORD *)this + 57) = 0;
  if (v395)
    (*(void (**)(uint64_t))(*(_QWORD *)v395 + 8))(v395);
  v396 = *((_QWORD *)this + 56);
  *((_QWORD *)this + 56) = 0;
  if (v396)
    (*(void (**)(uint64_t))(*(_QWORD *)v396 + 8))(v396);
  v397 = *((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = 0;
  if (v397)
    (*(void (**)(uint64_t))(*(_QWORD *)v397 + 8))(v397);
  v398 = *((_QWORD *)this + 54);
  *((_QWORD *)this + 54) = 0;
  if (v398)
    (*(void (**)(uint64_t))(*(_QWORD *)v398 + 8))(v398);
  v399 = *((_QWORD *)this + 53);
  *((_QWORD *)this + 53) = 0;
  if (v399)
    (*(void (**)(uint64_t))(*(_QWORD *)v399 + 8))(v399);
  v400 = *((_QWORD *)this + 52);
  *((_QWORD *)this + 52) = 0;
  if (v400)
    (*(void (**)(uint64_t))(*(_QWORD *)v400 + 8))(v400);
  v401 = *((_QWORD *)this + 51);
  *((_QWORD *)this + 51) = 0;
  if (v401)
    (*(void (**)(uint64_t))(*(_QWORD *)v401 + 8))(v401);
  v402 = *((_QWORD *)this + 50);
  *((_QWORD *)this + 50) = 0;
  if (v402)
    (*(void (**)(uint64_t))(*(_QWORD *)v402 + 8))(v402);
  v403 = *((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = 0;
  if (v403)
    (*(void (**)(uint64_t))(*(_QWORD *)v403 + 8))(v403);
  v404 = *((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  if (v404)
    (*(void (**)(uint64_t))(*(_QWORD *)v404 + 8))(v404);
  v405 = *((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v405)
    (*(void (**)(uint64_t))(*(_QWORD *)v405 + 8))(v405);
  v406 = *((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v406)
    (*(void (**)(uint64_t))(*(_QWORD *)v406 + 8))(v406);
  v407 = *((_QWORD *)this + 45);
  *((_QWORD *)this + 45) = 0;
  if (v407)
    (*(void (**)(uint64_t))(*(_QWORD *)v407 + 8))(v407);
  v408 = *((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (v408)
    (*(void (**)(uint64_t))(*(_QWORD *)v408 + 8))(v408);
  v409 = *((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v409)
    (*(void (**)(uint64_t))(*(_QWORD *)v409 + 8))(v409);
  v410 = *((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v410)
    (*(void (**)(uint64_t))(*(_QWORD *)v410 + 8))(v410);
  v411 = *((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v411)
    (*(void (**)(uint64_t))(*(_QWORD *)v411 + 8))(v411);
  v412 = *((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v412)
    (*(void (**)(uint64_t))(*(_QWORD *)v412 + 8))(v412);
  v413 = *((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v413)
    (*(void (**)(uint64_t))(*(_QWORD *)v413 + 8))(v413);
  v414 = *((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v414)
    (*(void (**)(uint64_t))(*(_QWORD *)v414 + 8))(v414);
  v415 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v415)
    (*(void (**)(uint64_t))(*(_QWORD *)v415 + 8))(v415);
  v416 = *((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v416)
    (*(void (**)(uint64_t))(*(_QWORD *)v416 + 8))(v416);
  v417 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v417)
    (*(void (**)(uint64_t))(*(_QWORD *)v417 + 8))(v417);
  v418 = *((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v418)
    (*(void (**)(uint64_t))(*(_QWORD *)v418 + 8))(v418);
  v419 = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v419)
    (*(void (**)(uint64_t))(*(_QWORD *)v419 + 8))(v419);
  v420 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v420)
    (*(void (**)(uint64_t))(*(_QWORD *)v420 + 8))(v420);
  v421 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v421)
    (*(void (**)(uint64_t))(*(_QWORD *)v421 + 8))(v421);
  v422 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v422)
    (*(void (**)(uint64_t))(*(_QWORD *)v422 + 8))(v422);
  v423 = *((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v423)
    (*(void (**)(uint64_t))(*(_QWORD *)v423 + 8))(v423);
  v424 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v424)
    (*(void (**)(uint64_t))(*(_QWORD *)v424 + 8))(v424);
  v425 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v425)
    (*(void (**)(uint64_t))(*(_QWORD *)v425 + 8))(v425);
  v426 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v426)
    (*(void (**)(uint64_t))(*(_QWORD *)v426 + 8))(v426);
  v427 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v427)
    (*(void (**)(uint64_t))(*(_QWORD *)v427 + 8))(v427);
  v428 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v428)
    (*(void (**)(uint64_t))(*(_QWORD *)v428 + 8))(v428);
  v429 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v429)
    (*(void (**)(uint64_t))(*(_QWORD *)v429 + 8))(v429);
  v430 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v430)
    (*(void (**)(uint64_t))(*(_QWORD *)v430 + 8))(v430);
  v431 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v431)
    (*(void (**)(uint64_t))(*(_QWORD *)v431 + 8))(v431);
  v432 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v432)
    (*(void (**)(uint64_t))(*(_QWORD *)v432 + 8))(v432);
  v433 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v433)
    (*(void (**)(uint64_t))(*(_QWORD *)v433 + 8))(v433);
  v434 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v434)
    (*(void (**)(uint64_t))(*(_QWORD *)v434 + 8))(v434);
  v435 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v435)
    (*(void (**)(uint64_t))(*(_QWORD *)v435 + 8))(v435);
  v436 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v436)
    (*(void (**)(uint64_t))(*(_QWORD *)v436 + 8))(v436);
  v437 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v437)
    (*(void (**)(uint64_t))(*(_QWORD *)v437 + 8))(v437);
  v438 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v438)
    (*(void (**)(uint64_t))(*(_QWORD *)v438 + 8))(v438);
  v439 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v439)
    (*(void (**)(uint64_t))(*(_QWORD *)v439 + 8))(v439);
  v440 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v440)
    (*(void (**)(uint64_t))(*(_QWORD *)v440 + 8))(v440);
  v441 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v441)
    (*(void (**)(uint64_t))(*(_QWORD *)v441 + 8))(v441);
  v442 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v442)
    (*(void (**)(uint64_t))(*(_QWORD *)v442 + 8))(v442);
  v443 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v443)
    (*(void (**)(uint64_t))(*(_QWORD *)v443 + 8))(v443);
  v444 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v444)
    (*(void (**)(uint64_t))(*(_QWORD *)v444 + 8))(v444);
  v445 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v445)
    (*(void (**)(uint64_t))(*(_QWORD *)v445 + 8))(v445);
  v446 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v446)
    (*(void (**)(uint64_t))(*(_QWORD *)v446 + 8))(v446);
  v447 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v447)
    (*(void (**)(uint64_t))(*(_QWORD *)v447 + 8))(v447);
  v448 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v448)
    (*(void (**)(uint64_t))(*(_QWORD *)v448 + 8))(v448);
  v449 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v449)
    (*(void (**)(uint64_t))(*(_QWORD *)v449 + 8))(v449);
  v450 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v450)
    (*(void (**)(uint64_t))(*(_QWORD *)v450 + 8))(v450);
  v451 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v451)
    (*(void (**)(uint64_t))(*(_QWORD *)v451 + 8))(v451);
  PB::Base::~Base(this);
}

{
  CMMsl::Item::~Item(this);
  JUMPOUT(0x2494E8384);
}

CMMsl::Item *CMMsl::Item::Item(CMMsl::Item *this, const CMMsl::Item *a2)
{
  uint64_t *v4;
  CMMsl::ClefCalibration **v5;
  uint64_t v6;
  CMMsl::GyroBiasCorrection *v7;
  CMMsl::GyroBiasCorrection *v8;
  uint64_t v9;
  CMMsl::GyroBiasConstraints *v10;
  CMMsl::GyroBiasConstraints *v11;
  uint64_t v12;
  CMMsl::GravityCorrection *v13;
  CMMsl::GravityCorrection *v14;
  uint64_t v15;
  CMMsl::GravityConstraints *v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  CMMsl::CompassCorrection *v20;
  CMMsl::CompassCorrection *v21;
  uint64_t v22;
  CMMsl::CompassConstraints *v23;
  CMMsl::CompassConstraints *v24;
  uint64_t v25;
  CMMsl::CourseCorrection *v26;
  CMMsl::CourseCorrection *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  CMMsl::IntersiloNSCodingData *v35;
  CMMsl::IntersiloNSCodingData *v36;
  uint64_t v37;
  CMMsl::DeviceMotionCovariance *v38;
  CMMsl::DeviceMotionCovariance *v39;
  uint64_t v40;
  CMMsl::AccessoryAccel *v41;
  CMMsl::AccessoryAccel *v42;
  uint64_t v43;
  CMMsl::AccessoryGyro *v44;
  CMMsl::AccessoryGyro *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  CMMsl::WorkoutRecorderAccel *v50;
  CMMsl::WorkoutRecorderAccel *v51;
  uint64_t v52;
  CMMsl::WorkoutRecorderBodyMetrics *v53;
  CMMsl::WorkoutRecorderBodyMetrics *v54;
  uint64_t v55;
  CMMsl::WorkoutRecorderElevation *v56;
  CMMsl::WorkoutRecorderElevation *v57;
  uint64_t v58;
  CMMsl::WorkoutRecorderHeartRate *v59;
  CMMsl::WorkoutRecorderHeartRate *v60;
  uint64_t v61;
  CMMsl::WorkoutRecorderRotationRate *v62;
  CMMsl::WorkoutRecorderRotationRate *v63;
  uint64_t v64;
  CMMsl::WorkoutRecorderOdometer *v65;
  CMMsl::WorkoutRecorderOdometer *v66;
  uint64_t v67;
  CMMsl::WorkoutRecorderWorkoutEvent *v68;
  CMMsl::WorkoutRecorderWorkoutEvent *v69;
  uint64_t v70;
  CMMsl::VO2MaxInput *v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  CMMsl::BraveHeartDeviceMotion *v75;
  CMMsl::BraveHeartDeviceMotion *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  CMMsl::BraveHeartVO2MaxInput *v81;
  CMMsl::BraveHeartVO2MaxInput *v82;
  uint64_t v83;
  CMMsl::BraveHeartAccel *v84;
  CMMsl::BraveHeartAccel *v85;
  uint64_t v86;
  CMMsl::BraveHeartWorkoutEvent *v87;
  double v88;
  uint64_t v89;
  uint64_t v90;
  CMMsl::WorkoutRecorderHealthKitInfo *v91;
  double v92;
  uint64_t v93;
  uint64_t v94;
  CMMsl::PearlAttitude *v95;
  CMMsl::PearlAttitude *v96;
  uint64_t v97;
  CMMsl::RotationRate *v98;
  float v99;
  uint64_t v100;
  uint64_t v101;
  CMMsl::WorkoutRecorderWatchOrientationSettings *v102;
  CMMsl::WorkoutRecorderWatchOrientationSettings *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  CMMsl::WifiScanResults *v111;
  CMMsl::WifiScanResults *v112;
  uint64_t v113;
  CMMsl::InEarTransitionEntry *v114;
  CMMsl::InEarTransitionEntry *v115;
  uint64_t v116;
  CMMsl::InEarSession *v117;
  CMMsl::InEarSession *v118;
  uint64_t v119;
  CMMsl::InEarBaseline *v120;
  CMMsl::InEarBaseline *v121;
  uint64_t v122;
  CMMsl::AccessoryProxSensorDrop *v123;
  CMMsl::AccessoryProxSensorDrop *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  CMMsl::AccessoryWake *v129;
  CMMsl::AccessoryWake *v130;
  uint64_t v131;
  CMMsl::FacePose *v132;
  float v133;
  uint64_t v134;
  uint64_t v135;
  CMMsl::WorkoutRecorderWifiScanResults *v136;
  CMMsl::WorkoutRecorderWifiScanResults *v137;
  uint64_t v138;
  CMMsl::WorkoutRecorderPressure *v139;
  CMMsl::WorkoutRecorderPressure *v140;
  uint64_t v141;
  CMMsl::InEarAdditionalState *v142;
  CMMsl::InEarAdditionalState *v143;
  uint64_t v144;
  CMMsl::AccessoryDeviceMotion *v145;
  CMMsl::AccessoryDeviceMotion *v146;
  uint64_t v147;
  CMMsl::VisionCompassBias *v148;
  CMMsl::VisionCompassBias *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  CMMsl::VIOEstimation *v155;
  CMMsl::VIOEstimation *v156;
  uint64_t v157;
  CMMsl::LSLHeadingEstimation *v158;
  CMMsl::LSLHeadingEstimation *v159;
  uint64_t v160;
  CMMsl::FallSnippet *v161;
  CMMsl::FallSnippet *v162;
  uint64_t v163;
  CMMsl::AccelerometerPace *v164;
  double v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  CMMsl::StepCountEntry *v172;
  CMMsl::StepCountEntry *v173;
  uint64_t v174;
  CMMsl::MobilityBoutMetrics *v175;
  float v176;
  uint64_t v177;
  uint64_t v178;
  CMMsl::CoprocessorReplyGaitMetrics *v179;
  float v180;
  uint64_t v181;
  uint64_t v182;
  CMMsl::VIOPose *v183;
  CMMsl::VIOPose *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  uint64_t v189;
  CMMsl::VIOReplayPose *v190;
  CMMsl::VIOReplayPose *v191;
  uint64_t v192;
  CMMsl::VisualStateMeasurement *v193;
  CMMsl::VisualStateMeasurement *v194;
  uint64_t v195;
  CMMsl::KappaTriggerDebug *v196;
  CMMsl::KappaTriggerDebug *v197;
  uint64_t v198;
  CMMsl::KappaDirectionOfTravel *v199;
  CMMsl::KappaDirectionOfTravel *v200;
  uint64_t v201;
  CMMsl::HgAccel *v202;
  CMMsl::HgAccel *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char v210;
  uint64_t v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  CMMsl::UserStudyEvent *v217;
  CMMsl::UserStudyEvent *v218;
  uint64_t v219;
  CMMsl::AuxiliaryDeviceMotion *v220;
  CMMsl::AuxiliaryDeviceMotion *v221;
  uint64_t v222;
  CMMsl::TempestPoCAuxiliaryDeviceMotion *v223;
  CMMsl::TempestPoCAuxiliaryDeviceMotion *v224;
  uint64_t v225;
  CMMsl::AudioAccessoryDeviceMotion *v226;
  CMMsl::AudioAccessoryDeviceMotion *v227;
  uint64_t v228;
  CMMsl::TempestPoCListenerOrientation *v229;
  CMMsl::TempestPoCListenerOrientation *v230;
  uint64_t v231;
  CMMsl::WorkoutRecorderAccel800 *v232;
  CMMsl::WorkoutRecorderAccel800 *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  int v237;
  uint64_t v238;
  CMMsl::WorkoutRecorderALSData *v239;
  CMMsl::WorkoutRecorderALSData *v240;
  uint64_t v241;
  CMMsl::VisualLocalization *v242;
  CMMsl::VisualLocalization *v243;
  uint64_t v244;
  CMMsl::GyroFactoryCalibrationData *v245;
  float v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  char v251;
  int v252;
  uint64_t v253;
  uint64_t v254;
  CMMsl::FrequencyResponse *v255;
  CMMsl::FrequencyResponse *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  int v260;
  uint64_t v261;
  CMMsl::Accel800 *v262;
  CMMsl::Accel800 *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  char **v271;
  CMMsl::BioMotionPose *v272;
  uint64_t v273;
  CMMsl::KappaTrigger *v274;
  CMMsl::KappaTrigger *v275;
  uint64_t v276;
  CMMsl::RelDMInSystemConfig *v277;
  CMMsl::RelDMInSystemConfig *v278;
  uint64_t v279;
  CMMsl::JointLinkModelPose *v280;
  CMMsl::JointLinkModelPose *v281;
  uint64_t v282;
  CMMsl::ConstrainedIntegratorPose *v283;
  CMMsl::ConstrainedIntegratorPose *v284;
  uint64_t v285;
  CMMsl::GyroCalibrationSample *v286;
  float v287;
  uint64_t v288;
  uint64_t v289;
  CMMsl::GyroCalibrationSampleNonlinear *v290;
  CMMsl::GyroCalibrationSampleNonlinear *v291;
  uint64_t v292;
  CMMsl::GyroCalibrationDataNonlinearNonFactory *v293;
  CMMsl::GyroCalibrationDataNonlinearNonFactory *v294;
  uint64_t v295;
  CMMsl::GyroCalibrationDataFactory *v296;
  CMMsl::GyroCalibrationDataFactory *v297;
  uint64_t v298;
  CMMsl::BioMotionClassification *v299;
  double v300;
  uint64_t v301;
  uint64_t v302;
  CMMsl::FusedBioMotionClassification *v303;
  CMMsl::FusedBioMotionClassification *v304;
  uint64_t v305;
  CMMsl::ModelBasedBioMotionClassification *v306;
  CMMsl::ModelBasedBioMotionClassification *v307;
  uint64_t v308;
  CMMsl::MLBasedBioMotionClassification *v309;
  CMMsl::MLBasedBioMotionClassification *v310;
  uint64_t v311;
  CMMsl::Pose *v312;
  CMMsl::Pose *v313;
  uint64_t v314;
  CMMsl::PoseState *v315;
  CMMsl::PoseState *v316;
  uint64_t v317;
  CMMsl::BioMotionPredictedPose *v318;
  CMMsl::BioMotionPredictedPose *v319;
  uint64_t v320;
  CMMsl::JointLinkModelPredictedPose *v321;
  CMMsl::JointLinkModelPredictedPose *v322;
  uint64_t v323;
  CMMsl::ConstrainedIntegratorModelPredictedPose *v324;
  CMMsl::ConstrainedIntegratorModelPredictedPose *v325;
  uint64_t v326;
  CMMsl::PressureCompensated *v327;
  CMMsl::PressureCompensated *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  CMMsl::MagneticAccessoryType1 *v333;
  CMMsl::MagneticAccessoryType1 *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  char v338;
  uint64_t v339;
  CMMsl::PressureCalibration *v340;
  float v341;
  uint64_t v342;
  uint64_t v343;
  CMMsl::WorkoutRecorderMagnetometer *v344;
  CMMsl::WorkoutRecorderMagnetometer *v345;
  uint64_t v346;
  CMMsl::WorkoutRecorderCompassCalibration *v347;
  CMMsl::WorkoutRecorderCompassCalibration *v348;
  uint64_t v349;
  char **v350;
  CMMsl::RawAudio *v351;
  uint64_t v352;
  CMMsl::CV3DPredictedPose *v353;
  CMMsl::CV3DPredictedPose *v354;
  uint64_t v355;
  CMMsl::BioMotionLinkLengthFitParameters *v356;
  CMMsl::BioMotionLinkLengthFitParameters *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  CMMsl::ODTPose *v362;
  CMMsl::ODTPose *v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  char v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  CMMsl::PencilTouch *v371;
  double v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  char v377;
  uint64_t v378;
  int v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  char v383;
  int v384;
  uint64_t v385;
  uint64_t v386;
  CMMsl::AppleCV3DSLAMState *v387;
  CMMsl::AppleCV3DSLAMState *v388;
  uint64_t v389;
  CMMsl::BioMotionAnchorPose *v390;
  CMMsl::BioMotionAnchorPose *v391;
  uint64_t v392;
  CMMsl::BioMotionPropagatedAnchor *v393;
  CMMsl::BioMotionPropagatedAnchor *v394;
  uint64_t v395;
  CMMsl::WalkingSteadinessClassification *v396;
  CMMsl::WalkingSteadinessClassification *v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  CMMsl::SteadinessEvent *v402;
  double v403;
  uint64_t v404;
  uint64_t v405;
  CMMsl::SteadinessModelGaitBaselineFeatures *v406;
  double v407;
  uint64_t v408;
  uint64_t v409;
  CMMsl::SteadinessModelContinuousWalkingFeatures *v410;
  double v411;
  uint64_t v412;
  uint64_t v413;
  CMMsl::SteadinessModelTemporalDispersionFeatures *v414;
  double v415;
  uint64_t v416;
  uint64_t v417;
  CMMsl::SteadinessModelTemporalEntropyFeatures *v418;
  double v419;
  uint64_t v420;
  uint64_t v421;
  CMMsl::SteadinessModelBalanceFeatures *v422;
  double v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  CMMsl::WorkoutRecorderWatchOnWristStatus *v429;
  CMMsl::WorkoutRecorderWatchOnWristStatus *v430;
  uint64_t v431;
  CMMsl::LiftToWakeOnHeadStatus *v432;
  double v433;
  uint64_t v434;
  uint64_t v435;
  CMMsl::AccessoryMagnetometer *v436;
  CMMsl::AccessoryMagnetometer *v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  CMMsl::StepDistanceFusionResult *v442;
  CMMsl::StepDistanceFusionResult *v443;
  uint64_t v444;
  CMMsl::Skeleton3D *v445;
  CMMsl::Skeleton3D *v446;
  uint64_t v447;
  CMMsl::CVWatchCalories *v448;
  double v449;
  uint64_t v450;
  uint64_t v451;
  CMMsl::FaceBlendShapeCoefficientsSample *v452;
  CMMsl::FaceBlendShapeCoefficientsSample *v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  char v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  char v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  CMMsl::FocusModes *v470;
  CMMsl::FocusModes *v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  char v475;
  uint64_t v476;
  _QWORD *v477;
  uint64_t v478;
  CMMsl::APWake *v479;
  CMMsl::APWake *v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  CMMsl::LiftToWakeState *v485;
  double v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  CMMsl::RunningFormMetrics *v492;
  double v493;
  uint64_t v494;
  uint64_t v495;
  CMMsl::WorkoutSessionPriors *v496;
  CMMsl::WorkoutSessionPriors *v497;
  uint64_t v498;
  CMMsl::WorkoutRecorderWorkoutSessionPriors *v499;
  CMMsl::WorkoutRecorderWorkoutSessionPriors *v500;
  uint64_t v501;
  CMMsl::ARKitWorldPose *v502;
  CMMsl::ARKitWorldPose *v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  char v507;
  int v508;
  uint64_t v509;
  uint64_t v510;
  CMMsl::PocketDetectionPacket *v511;
  double v512;
  uint64_t v513;
  uint64_t v514;
  CMMsl::LiftToWakeFeaturesNeo *v515;
  float v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  CMMsl::MotionContextActivity *v531;
  CMMsl::MotionContextActivity *v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  int v536;
  uint64_t v537;
  char **v538;
  CMMsl::AccelTNBFrame *v539;
  uint64_t v540;
  CMMsl::DoTEstimatorWithTNB *v541;
  CMMsl::DoTEstimatorWithTNB *v542;
  uint64_t v543;
  CMMsl::PdrMLModelOutput *v544;
  CMMsl::PdrMLModelOutput *v545;
  uint64_t v546;
  CMMsl::GaitEventsModelOutput *v547;
  double v548;
  uint64_t v549;
  uint64_t v550;
  CMMsl::GaitEventsStrideAggregation *v551;
  double v552;
  uint64_t v553;
  uint64_t v554;
  CMMsl::GaitEventsHKResult *v555;
  double v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  char v561;
  uint64_t v562;
  char v563;
  uint64_t v564;
  CMMsl::WorkoutRecorderAveragedALSData *v565;
  CMMsl::WorkoutRecorderAveragedALSData *v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  CMMsl::KeyboardMotionFeatures *v577;
  float v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  char v583;
  uint64_t v584;
  int v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  char v589;
  uint64_t v590;
  int v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  char v595;
  uint64_t v596;
  char v597;
  uint64_t v598;
  CMMsl::WakeGestureNotification *v599;
  double v600;
  uint64_t v601;
  uint64_t v602;
  CMMsl::ProxBaselineEstimatorState *v603;
  float v604;
  uint64_t v605;
  uint64_t v606;
  CMMsl::BaselineResetCheck *v607;
  float v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  char v616;
  uint64_t v617;
  char v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  char v622;
  uint64_t v623;
  char v624;
  uint64_t v625;
  CMMsl::BacklightState *v626;
  CMMsl::BacklightState *v627;
  uint64_t v628;
  CMMsl::BatchedLocationFromOdometer *v629;
  CMMsl::BatchedLocationFromOdometer *v630;
  uint64_t v631;
  CMMsl::HeartRateReference *v632;
  double v633;
  uint64_t v634;
  uint64_t v635;
  CMMsl::Skeleton2D *v636;
  CMMsl::Skeleton2D *v637;
  uint64_t v638;
  CMMsl::Skeleton3DRetargeted *v639;
  CMMsl::Skeleton3DRetargeted *v640;
  uint64_t v641;
  CMMsl::Skeleton3DLifted *v642;
  CMMsl::Skeleton3DLifted *v643;
  uint64_t v644;
  CMMsl::FitnessMachineSample *v645;
  float v646;
  uint64_t v647;
  uint64_t v648;
  CMMsl::WatchHeartRateData *v649;
  CMMsl::WatchHeartRateData *v650;
  uint64_t v651;
  CMMsl::FacePoseSynchronized *v652;
  CMMsl::FacePoseSynchronized *v653;
  uint64_t v654;
  CMMsl::WatchActiveCalories *v655;
  double v656;
  uint64_t v657;
  uint64_t v658;
  CMMsl::WatchBasalCalories *v659;
  double v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  CMMsl::GnssAvailabilityPredictorData *v666;
  double v667;
  uint64_t v668;
  uint64_t v669;
  CMMsl::GnssLeechLocationData *v670;
  CMMsl::GnssLeechLocationData *v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  CMMsl::FitnessMachineData *v676;
  double v677;
  uint64_t v678;
  uint64_t v679;
  CMMsl::WorkoutRecorderFitnessMachineData *v680;
  CMMsl::WorkoutRecorderFitnessMachineData *v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  CMMsl::ElevationThreshold *v701;
  CMMsl::ElevationThreshold *v702;
  uint64_t v703;
  char **v704;
  CMMsl::InitialHistoricalMeanSeaLevelPressure *v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  char v709;
  int v710;
  int v711;
  uint64_t v712;
  CMMsl::PencilDeviceMotion *v713;
  CMMsl::PencilDeviceMotion *v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  char v721;
  uint64_t v722;
  char v723;
  uint64_t v724;
  CMMsl::SteadinessModelHarmonicFeatures *v725;
  double v726;
  uint64_t v727;
  uint64_t v728;
  CMMsl::PencilFusionReplayResult *v729;
  CMMsl::PencilFusionReplayResult *v730;
  uint64_t v731;
  CMMsl::MobilitySmoothedGaitMetrics *v732;
  float v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  char v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  CMMsl::AccessoryPPG *v745;
  CMMsl::AccessoryPPG *v746;
  uint64_t v747;
  char **v748;
  CMMsl::MotionLoiAltitudeData *v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  char v753;
  uint64_t v754;
  int v755;
  uint64_t v756;
  char **v757;
  CMMsl::PostureJoint *v758;
  uint64_t v759;
  CMMsl::PostureSkeleton *v760;
  CMMsl::PostureSkeleton *v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  char v765;
  uint64_t v766;
  char v767;
  uint64_t v768;
  CMMsl::WorkoutRecorderFaceCovered *v769;
  CMMsl::WorkoutRecorderFaceCovered *v770;
  uint64_t v771;
  CMMsl::StreamingHighFrequencyHeartRateData *v772;
  CMMsl::StreamingHighFrequencyHeartRateData *v773;
  uint64_t v774;
  CMMsl::UltraFastAccel *v775;
  CMMsl::UltraFastAccel *v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  CMMsl::AccelOscarEmu *v784;
  CMMsl::AccelOscarEmu *v785;
  uint64_t v786;
  CMMsl::AccelGesture *v787;
  CMMsl::AccelGesture *v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  char v798;
  int v799;
  int v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  char **v805;
  CMMsl::GyroBiasFit *v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  int v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  CMMsl::Compass *v815;
  float v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  char v821;
  uint64_t v822;
  int v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  CMMsl::CompassCalibration *v828;
  float v829;
  uint64_t v830;
  uint64_t v831;
  CMMsl::Pressure *v832;
  float v833;
  uint64_t v834;
  uint64_t v835;
  CMMsl::PressureOscarEmu *v836;
  CMMsl::PressureOscarEmu *v837;
  uint64_t v838;
  CMMsl::PressureFiltered *v839;
  CMMsl::PressureFiltered *v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  char v844;
  uint64_t v845;
  int v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  char v850;
  uint64_t v851;
  char v852;
  uint64_t v853;
  CMMsl::DeviceMotion *v854;
  float v855;
  uint64_t v856;
  uint64_t v857;
  CMMsl::MotionStateUpdate *v858;
  CMMsl::MotionStateUpdate *v859;
  uint64_t v860;
  CMMsl::AccelGps *v861;
  float v862;
  uint64_t v863;
  uint64_t v864;
  CMMsl::GyroGps *v865;
  float v866;
  uint64_t v867;
  uint64_t v868;
  CMMsl::PressureGps *v869;
  CMMsl::PressureGps *v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  char v877;
  uint64_t v878;
  int v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  char **v890;
  CMMsl::NonlinearBiasFit *v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  CMMsl::BodyMetrics *v896;
  float v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  CMMsl::StreamingHeartRateData *v906;
  CMMsl::StreamingHeartRateData *v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  char v914;
  uint64_t v915;
  int v916;
  uint64_t v917;
  CMMsl::MotionGPSLocation *v918;
  CMMsl::MotionGPSLocation *v919;
  uint64_t v920;
  CMMsl::MotionWifiLocation *v921;
  CMMsl::MotionWifiLocation *v922;
  uint64_t v923;
  CMMsl::StrideCalBin *v924;
  double v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  char v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  CMMsl::MetsInfo *v935;
  float v936;
  uint64_t v937;
  uint64_t v938;
  CMMsl::FallStats *v939;
  float v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  char v948;
  uint64_t v949;
  CMMsl::StepCadenceToStrideLengthBin *v950;
  double v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  char v956;
  int v957;
  int v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  char v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  CMMsl::OdometerWithAltitude *v967;
  CMMsl::OdometerWithAltitude *v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  char v972;
  uint64_t v973;
  int v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  CMMsl::ClefCalibration *v979;
  CMMsl::ClefCalibration *v980;
  CMMsl::ClefCalibration *v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  CMMsl::InEarOptical *v985;
  CMMsl::InEarOptical *v986;
  uint64_t v987;
  CMMsl::InEarConstraints *v988;
  CMMsl::InEarConstraints *v989;
  uint64_t v990;
  CMMsl::InEarOpenLid *v991;
  CMMsl::InEarOpenLid *v992;
  uint64_t v993;
  CMMsl::InEarBaselining *v994;
  CMMsl::InEarBaselining *v995;
  uint64_t v996;
  CMMsl::AccessoryConfig *v997;
  CMMsl::AccessoryConfig *v998;
  uint64_t v999;
  CMMsl::AccessoryAccelConfig *v1000;
  CMMsl::AccessoryAccelConfig *v1001;
  uint64_t v1002;
  CMMsl::AccessoryProximityConfig *v1003;
  CMMsl::AccessoryProximityConfig *v1004;
  uint64_t v1005;
  CMMsl::TapDetect *v1006;
  double v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  CMMsl::AccessoryWakeDebug *v1016;
  CMMsl::AccessoryWakeDebug *v1017;
  uint64_t v1018;
  CMMsl::GeomagneticData *v1019;
  float v1020;
  uint64_t v1021;
  uint64_t v1022;
  CMMsl::RelativeDeviceMotionInternal *v1023;
  CMMsl::RelativeDeviceMotionInternal *v1024;
  uint64_t v1025;
  CMMsl::RelativeGravityCorrection *v1026;
  CMMsl::RelativeGravityCorrection *v1027;
  uint64_t v1028;
  CMMsl::RelativeGravityConstraints *v1029;
  float v1030;
  uint64_t v1031;
  uint64_t v1032;
  CMMsl::ZeroVelocityCorrection *v1033;
  CMMsl::ZeroVelocityCorrection *v1034;
  uint64_t v1035;
  CMMsl::AnchorCorrection *v1036;
  CMMsl::AnchorCorrection *v1037;
  uint64_t v1038;
  CMMsl::PredictedRelativeDeviceMotion *v1039;
  double v1040;
  uint64_t v1041;
  uint64_t v1042;
  CMMsl::MovementStatsSignal *v1043;
  float v1044;
  uint64_t v1045;
  uint64_t v1046;
  CMMsl::MovementStatsGravityProjection *v1047;
  CMMsl::MovementStatsGravityProjection *v1048;
  uint64_t v1049;
  CMMsl::BleedToZeroCorrection *v1050;
  CMMsl::BleedToZeroCorrection *v1051;
  uint64_t v1052;
  CMMsl::AccessoryGyroConfig *v1053;
  CMMsl::AccessoryGyroConfig *v1054;
  uint64_t v1055;
  CMMsl::AccessoryGyroGYTT *v1056;
  CMMsl::AccessoryGyroGYTT *v1057;
  uint64_t v1058;
  CMMsl::AccessoryGyroCachedBias *v1059;
  CMMsl::AccessoryGyroCachedBias *v1060;
  uint64_t v1061;
  CMMsl::GaitCycleSegment *v1062;
  float v1063;
  uint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  uint64_t v1068;
  CMMsl::CompassCalibrationAttempt *v1069;
  float v1070;
  uint64_t v1071;
  uint64_t v1072;
  CMMsl::VisualLocalizationAttitudeCorrection *v1073;
  CMMsl::VisualLocalizationAttitudeCorrection *v1074;
  uint64_t v1075;
  CMMsl::VisualLocalizationAttitudeConstraints *v1076;
  CMMsl::VisualLocalizationAttitudeConstraints *v1077;
  uint64_t v1078;
  CMMsl::AccessoryMagnetometerConfig *v1079;
  CMMsl::AccessoryMagnetometerConfig *v1080;
  uint64_t v1081;
  uint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  CMMsl::FallDetectionReplay *v1085;
  double v1086;
  uint64_t v1087;
  uint64_t v1088;
  CMMsl::FallDetectionStateMachine *v1089;
  double v1090;
  uint64_t v1091;
  uint64_t v1092;
  CMMsl::FallDetectionDetector *v1093;
  float v1094;
  uint64_t v1095;
  uint64_t v1096;
  uint64_t v1097;
  uint64_t v1098;
  uint64_t v1099;
  CMMsl::AccessoryDeviceMotionConfig *v1100;
  CMMsl::AccessoryDeviceMotionConfig *v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  uint64_t v1106;
  uint64_t v1107;
  uint64_t v1108;
  CMMsl::DeviceMotionAlwaysOn *v1109;
  CMMsl::DeviceMotionAlwaysOn *v1110;
  uint64_t v1111;
  uint64_t v1112;
  uint64_t v1113;
  char v1114;
  uint64_t v1115;
  char v1116;
  uint64_t v1117;
  uint64_t v1118;
  uint64_t v1119;
  uint64_t v1120;
  uint64_t v1121;
  uint64_t v1122;
  char v1123;
  int v1124;
  int v1125;
  uint64_t v1126;
  CMMsl::FallDetectionWristStateReplay *v1127;
  CMMsl::FallDetectionWristStateReplay *v1128;
  uint64_t v1129;
  CMMsl::GyroBiasEstimateError *v1130;
  CMMsl::GyroBiasEstimateError *v1131;
  uint64_t v1132;
  CMMsl::StepLikelihoodFeatures *v1133;
  double v1134;
  uint64_t v1135;
  uint64_t v1136;
  uint64_t v1137;
  uint64_t StepFeatures;
  uint64_t v1139;
  CMMsl::AccessoryStepDetectorDebug *v1140;
  CMMsl::AccessoryStepDetectorDebug *v1141;
  uint64_t v1142;
  CMMsl::SitStandDetectorFeatures *v1143;
  float v1144;
  uint64_t v1145;
  uint64_t v1146;
  uint64_t v1147;
  uint64_t v1148;
  char v1149;
  uint64_t v1150;
  int v1151;
  uint64_t v1152;
  CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand *v1153;
  float v1154;
  uint64_t v1155;
  uint64_t v1156;
  CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit *v1157;
  float v1158;
  uint64_t v1159;
  uint64_t v1160;
  uint64_t v1161;
  uint64_t v1162;
  char v1163;
  int v1164;
  uint64_t v1165;
  uint64_t v1166;
  CMMsl::FallDistanceReplay *v1167;
  float v1168;
  uint64_t v1169;
  uint64_t v1170;
  uint64_t v1171;
  uint64_t v1172;
  uint64_t v1173;
  CMMsl::PressureFiltered1HzLowPass *v1174;
  CMMsl::PressureFiltered1HzLowPass *v1175;
  uint64_t v1176;
  uint64_t v1177;
  uint64_t v1178;
  uint64_t v1179;
  CMMsl::FallDetectionActivityClassifierReplay *v1180;
  float v1181;
  uint64_t v1182;
  uint64_t v1183;
  CMMsl::LegacyALS5CHInput *v1184;
  float v1185;
  uint64_t v1186;
  uint64_t v1187;
  uint64_t v1188;
  uint64_t v1189;
  char v1190;
  uint64_t v1191;
  int v1192;
  uint64_t v1193;
  uint64_t v1194;
  uint64_t v1195;
  uint64_t v1196;
  uint64_t v1197;
  uint64_t v1198;
  uint64_t v1199;
  CMMsl::DopplerDebugRecord *v1200;
  float v1201;
  uint64_t v1202;
  uint64_t v1203;
  uint64_t v1204;
  uint64_t v1205;
  char v1206;
  uint64_t v1207;
  int v1208;
  uint64_t v1209;
  CMMsl::KappaAudioResult *v1210;
  float v1211;
  uint64_t v1212;
  uint64_t v1213;
  CMMsl::KappaBaroResult *v1214;
  float v1215;
  uint64_t v1216;
  uint64_t v1217;
  uint64_t v1218;
  uint64_t v1219;
  uint64_t v1220;
  CMMsl::KappaPulseResult *v1221;
  float v1222;
  uint64_t v1223;
  uint64_t v1224;
  uint64_t v1225;
  uint64_t v1226;
  uint64_t v1227;
  uint64_t v1228;
  uint64_t v1229;
  uint64_t v1230;
  uint64_t v1231;
  CMMsl::KappaPulseInertialAccel *v1232;
  double v1233;
  uint64_t v1234;
  uint64_t v1235;
  uint64_t v1236;
  uint64_t v1237;
  int v1238;
  uint64_t v1239;
  uint64_t v1240;
  uint64_t v1241;
  int v1242;
  uint64_t v1243;
  uint64_t v1244;
  uint64_t v1245;
  uint64_t v1246;
  CMMsl::KappaCrashResult *v1247;
  float v1248;
  uint64_t v1249;
  uint64_t v1250;
  uint64_t v1251;
  uint64_t v1252;
  uint64_t v1253;
  uint64_t v1254;
  uint64_t v1255;
  uint64_t v1256;
  CMMsl::KappaRolloverCrashResult *v1257;
  float v1258;
  uint64_t v1259;
  uint64_t v1260;
  uint64_t v1261;
  uint64_t v1262;
  uint64_t v1263;
  uint64_t v1264;
  uint64_t v1265;
  uint64_t v1266;
  CMMsl::KappaSevereCrashResult *v1267;
  float v1268;
  uint64_t v1269;
  uint64_t v1270;
  CMMsl::KappaLocalAudioResult *v1271;
  float v1272;
  uint64_t v1273;
  uint64_t v1274;
  uint64_t v1275;
  uint64_t v1276;
  uint64_t v1277;
  CMMsl::DirectionOfTravelMetrics *v1278;
  float v1279;
  uint64_t v1280;
  uint64_t v1281;
  uint64_t v1282;
  uint64_t v1283;
  char v1284;
  uint64_t v1285;
  char v1286;
  uint64_t v1287;
  CMMsl::HeadToHeadsetTransformationEstimate *v1288;
  CMMsl::HeadToHeadsetTransformationEstimate *v1289;
  uint64_t v1290;
  CMMsl::ViewObstructedMachineLearningFeatures *v1291;
  float v1292;
  uint64_t v1293;
  uint64_t v1294;
  CMMsl::ViewObstructedMachineLearningProbabilities *v1295;
  float v1296;
  uint64_t v1297;
  uint64_t v1298;
  CMMsl::RunningArmSwingSignals *v1299;
  double v1300;
  uint64_t v1301;
  uint64_t v1302;
  CMMsl::RunningCentripetalAccelSignals *v1303;
  double v1304;
  uint64_t v1305;
  uint64_t v1306;
  CMMsl::RunningRotationAxis *v1307;
  double v1308;
  uint64_t v1309;
  uint64_t v1310;
  CMMsl::RunningVerticalOscillationSignals *v1311;
  double v1312;
  uint64_t v1313;
  uint64_t v1314;
  CMMsl::RunningVerticalOscillation *v1315;
  double v1316;
  uint64_t v1317;
  uint64_t v1318;
  CMMsl::KappaSpinResult *v1319;
  CMMsl::KappaSpinResult *v1320;
  uint64_t v1321;
  uint64_t v1322;
  uint64_t v1323;
  uint64_t v1324;
  CMMsl::RunningStrideLength *v1325;
  double v1326;
  uint64_t v1327;
  uint64_t v1328;
  CMMsl::ISPPacket *v1329;
  float v1330;
  uint64_t v1331;
  uint64_t v1332;
  uint64_t v1333;
  uint64_t v1334;
  uint64_t v1335;
  CMMsl::KappaPulseInertialHgAccel *v1336;
  double v1337;
  uint64_t v1338;
  uint64_t v1339;
  CMMsl::HarmonicMetrics *v1340;
  float v1341;
  uint64_t v1342;
  uint64_t v1343;
  CMMsl::CalorieControllerMETsConsumed *v1344;
  float v1345;
  uint64_t v1346;
  uint64_t v1347;
  CMMsl::PedometerPathStraightness *v1348;
  double v1349;
  uint64_t v1350;
  uint64_t v1351;
  uint64_t v1352;
  uint64_t v1353;
  uint64_t v1354;
  uint64_t v1355;
  uint64_t v1356;
  uint64_t v1357;
  CMMsl::VO2MaxModelInput *v1358;
  double v1359;
  uint64_t v1360;
  uint64_t v1361;
  CMMsl::ProxCalibration *v1362;
  CMMsl::ProxCalibration *v1363;
  uint64_t v1364;
  uint64_t v1365;
  uint64_t v1366;
  uint64_t v1367;
  uint64_t v1368;
  uint64_t v1369;
  uint64_t v1370;
  uint64_t v1371;
  uint64_t v1372;
  uint64_t v1373;
  uint64_t v1374;
  uint64_t v1375;
  uint64_t v1376;
  CMMsl::SubStats *v1377;
  float v1378;
  uint64_t v1379;
  uint64_t v1380;
  uint64_t v1381;
  uint64_t v1382;
  uint64_t v1383;
  uint64_t v1384;
  uint64_t v1385;
  char v1386;
  uint64_t v1387;
  int v1388;
  uint64_t v1389;
  CMMsl::PDRPedestrianClassifierState *v1390;
  CMMsl::PDRPedestrianClassifierState *v1391;
  uint64_t v1392;
  CMMsl::PDRPlacementClassifierState *v1393;
  CMMsl::PDRPlacementClassifierState *v1394;
  uint64_t v1395;
  CMMsl::PDRSpeedEstimatorState *v1396;
  double v1397;
  uint64_t v1398;
  uint64_t v1399;
  CMMsl::PDRDOTEstimatorState *v1400;
  double v1401;
  uint64_t v1402;
  uint64_t v1403;
  CMMsl::PDRVelocityEstimatorState *v1404;
  double v1405;
  uint64_t v1406;
  uint64_t v1407;
  CMMsl::KMVelocityEstimatorState *v1408;
  double v1409;
  uint64_t v1410;
  uint64_t v1411;
  CMMsl::VelocityEstimatorFusionState *v1412;
  double v1413;
  uint64_t v1414;
  uint64_t v1415;
  uint64_t v1416;
  uint64_t v1417;
  char v1418;
  uint64_t v1419;
  int v1420;
  uint64_t v1421;
  uint64_t v1422;
  uint64_t v1423;
  uint64_t v1424;
  CMMsl::UWBRange *v1425;
  double v1426;
  uint64_t v1427;
  uint64_t v1428;
  CMMsl::SwingDoTCandidate *v1429;
  double v1430;
  uint64_t v1431;
  uint64_t v1432;
  CMMsl::DoTEstimatorHandSwing *v1433;
  CMMsl::DoTEstimatorHandSwing *v1434;
  uint64_t v1435;
  uint64_t v1436;
  uint64_t v1437;
  uint64_t v1438;
  CMMsl::SimActivityEvent *v1439;
  CMMsl::SimActivityEvent *v1440;
  uint64_t v1441;
  CMMsl::PDRFeatures *v1442;
  double v1443;
  uint64_t v1444;
  uint64_t v1445;
  CMMsl::PDRDOTEstimatorStateBody *v1446;
  double v1447;
  uint64_t v1448;
  uint64_t v1449;
  CMMsl::PDRDOTEstimatorStateArmSwing *v1450;
  double v1451;
  uint64_t v1452;
  uint64_t v1453;
  CMMsl::PDRDOTEstimatorStateHeading *v1454;
  double v1455;
  uint64_t v1456;
  uint64_t v1457;
  uint64_t v1458;
  uint64_t v1459;
  uint64_t v1460;
  CMMsl::PDRSpeedEstimatorStateDebug *v1461;
  double v1462;
  uint64_t v1463;
  uint64_t v1464;
  uint64_t v1465;
  uint64_t v1466;
  char v1467;
  uint64_t v1468;
  uint64_t v1469;
  uint64_t v1470;
  CMMsl::PrecisionFindingState *v1471;
  double v1472;
  uint64_t v1473;
  uint64_t v1474;
  uint64_t v1475;
  uint64_t v1476;
  uint64_t v1477;
  CMMsl::PrecisionFindingVelocityEstimate *v1478;
  float v1479;
  uint64_t v1480;
  uint64_t v1481;
  uint64_t v1482;
  uint64_t v1483;
  uint64_t v1484;
  CMMsl::PDRDOTMeasurementSelectorState *v1485;
  CMMsl::PDRDOTMeasurementSelectorState *v1486;
  uint64_t v1487;
  uint64_t v1488;
  uint64_t v1489;
  char v1490;
  uint64_t v1491;
  int v1492;
  uint64_t v1493;
  CMMsl::PDRDOTEstimatorUncertaintyModelOnBody *v1494;
  float v1495;
  uint64_t v1496;
  uint64_t v1497;
  uint64_t v1498;
  uint64_t v1499;
  char v1500;
  uint64_t v1501;
  int v1502;
  uint64_t v1503;
  CMMsl::MagnetometerCalibratorFilterParameters *v1504;
  CMMsl::MagnetometerCalibratorFilterParameters *v1505;
  uint64_t v1506;
  CMMsl::KappaActivityPhone *v1507;
  CMMsl::KappaActivityPhone *v1508;
  uint64_t v1509;
  CMMsl::KappaActivityWatch *v1510;
  CMMsl::KappaActivityWatch *v1511;
  uint64_t v1512;
  uint64_t v1513;
  uint64_t v1514;
  char v1515;
  uint64_t v1516;
  char v1517;
  uint64_t v1518;
  CMMsl::PDRDOTEstimatorStateDebug *v1519;
  double v1520;
  uint64_t v1521;
  uint64_t v1522;
  CMMsl::PDRDOTEstimatorStateBodyDebug *v1523;
  CMMsl::PDRDOTEstimatorStateBodyDebug *v1524;
  uint64_t v1525;
  CMMsl::KappaPeakDetectorMapResult *v1526;
  CMMsl::KappaPeakDetectorMapResult *v1527;
  uint64_t v1528;
  uint64_t v1529;
  uint64_t v1530;
  uint64_t v1531;
  uint64_t v1532;
  uint64_t v1533;
  uint64_t v1534;
  CMMsl::Altimeter *v1535;
  double v1536;
  uint64_t v1537;
  uint64_t v1538;
  CMMsl::FaceDownDetection *v1539;
  CMMsl::FaceDownDetection *v1540;
  uint64_t v1541;
  uint64_t v1542;
  uint64_t v1543;
  uint64_t v1544;
  CMMsl::PencilFusionRingSensorTrustModelUpdate *v1545;
  double v1546;
  uint64_t v1547;
  uint64_t v1548;
  uint64_t v1549;
  uint64_t v1550;
  uint64_t v1551;
  uint64_t v1552;
  uint64_t v1553;
  uint64_t v1554;
  uint64_t v1555;
  uint64_t v1556;
  uint64_t v1557;
  uint64_t v1558;
  uint64_t v1559;
  char v1560;
  uint64_t v1561;
  int v1562;
  uint64_t v1563;
  CMMsl::PTSConsumedGNSS *v1564;
  CMMsl::PTSConsumedGNSS *v1565;
  uint64_t v1566;
  CMMsl::PTSForwardPropagation *v1567;
  CMMsl::PTSForwardPropagation *v1568;
  uint64_t v1569;
  CMMsl::PTSReconstructedRoute *v1570;
  CMMsl::PTSReconstructedRoute *v1571;
  uint64_t v1572;
  CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *v1573;
  CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *v1574;
  uint64_t v1575;
  CMMsl::PTSMapMatchedRoute *v1576;
  CMMsl::PTSMapMatchedRoute *v1577;
  uint64_t v1578;
  CMMsl::AnchorMotionCorrespondence *v1579;
  double v1580;
  uint64_t v1581;
  uint64_t v1582;
  uint64_t v1583;
  uint64_t v1584;
  char v1585;
  uint64_t v1586;
  int v1587;
  uint64_t v1588;
  uint64_t v1589;
  uint64_t v1590;
  uint64_t v1591;
  CMMsl::KData3 *v1592;
  float v1593;
  uint64_t v1594;
  uint64_t v1595;
  uint64_t v1596;
  uint64_t v1597;
  uint64_t v1598;
  uint64_t v1599;
  uint64_t v1600;
  uint64_t v1601;
  CMMsl::SPUPlaybackExampleDeviceMotion *v1602;
  CMMsl::SPUPlaybackExampleDeviceMotion *v1603;
  uint64_t v1604;
  CMMsl::SPUPlaybackExampleMotionStateUpdate *v1605;
  CMMsl::SPUPlaybackExampleMotionStateUpdate *v1606;
  uint64_t v1607;
  CMMsl::InterpolatedAccessoryAccel *v1608;
  CMMsl::InterpolatedAccessoryAccel *v1609;
  uint64_t v1610;

  *(_QWORD *)this = &off_25135E518;
  v4 = (uint64_t *)((char *)this + 8);
  v5 = (CMMsl::ClefCalibration **)((char *)this + 624);
  bzero((char *)this + 8, 0x260uLL);
  bzero(v5, 0xBB4uLL);
  if ((*((_BYTE *)a2 + 3616) & 1) != 0)
  {
    v6 = *((_QWORD *)a2 + 77);
    *((_BYTE *)this + 3616) = 1;
    *((_QWORD *)this + 77) = v6;
  }
  if (*((_QWORD *)a2 + 146))
  {
    v7 = (CMMsl::GyroBiasCorrection *)operator new();
    v8 = CMMsl::GyroBiasCorrection::GyroBiasCorrection(v7, *((const CMMsl::DeviceMotionCorrection ***)a2 + 146));
    v9 = *((_QWORD *)this + 146);
    *((_QWORD *)this + 146) = v8;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  if (*((_QWORD *)a2 + 145))
  {
    v10 = (CMMsl::GyroBiasConstraints *)operator new();
    v11 = CMMsl::GyroBiasConstraints::GyroBiasConstraints(v10, *((const CMMsl::GyroBiasConstraints **)a2 + 145));
    v12 = *((_QWORD *)this + 145);
    *((_QWORD *)this + 145) = v11;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  if (*((_QWORD *)a2 + 142))
  {
    v13 = (CMMsl::GravityCorrection *)operator new();
    v14 = CMMsl::GravityCorrection::GravityCorrection(v13, *((const CMMsl::DeviceMotionCorrection ***)a2 + 142));
    v15 = *((_QWORD *)this + 142);
    *((_QWORD *)this + 142) = v14;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  if (*((_QWORD *)a2 + 141))
  {
    v16 = (CMMsl::GravityConstraints *)operator new();
    v17 = CMMsl::GravityConstraints::GravityConstraints(v16, *((const CMMsl::GravityConstraints **)a2 + 141));
    v18 = *((_QWORD *)this + 141);
    *((_QWORD *)this + 141) = v19;
    if (v18)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v18 + 8))(v18, v17);
  }
  if (*((_QWORD *)a2 + 85))
  {
    v20 = (CMMsl::CompassCorrection *)operator new();
    v21 = CMMsl::CompassCorrection::CompassCorrection(v20, *((const CMMsl::DeviceMotionCorrection ***)a2 + 85));
    v22 = *((_QWORD *)this + 85);
    *((_QWORD *)this + 85) = v21;
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  }
  if (*((_QWORD *)a2 + 84))
  {
    v23 = (CMMsl::CompassConstraints *)operator new();
    v24 = CMMsl::CompassConstraints::CompassConstraints(v23, *((const CMMsl::CompassConstraints **)a2 + 84));
    v25 = *((_QWORD *)this + 84);
    *((_QWORD *)this + 84) = v24;
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  }
  if (*((_QWORD *)a2 + 91))
  {
    v26 = (CMMsl::CourseCorrection *)operator new();
    v27 = CMMsl::CourseCorrection::CourseCorrection(v26, *((const CMMsl::DeviceMotionCorrection ***)a2 + 91));
    v28 = *((_QWORD *)this + 91);
    *((_QWORD *)this + 91) = v27;
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  }
  if (*((_QWORD *)a2 + 90))
  {
    v29 = operator new();
    v30 = *((_QWORD *)a2 + 90);
    *(_QWORD *)v29 = &off_25135D050;
    *(_DWORD *)(v29 + 20) = 0;
    if ((*(_BYTE *)(v30 + 20) & 1) != 0)
    {
      v32 = *(_QWORD *)(v30 + 8);
      *(_BYTE *)(v29 + 20) = 1;
      *(_QWORD *)(v29 + 8) = v32;
      v31 = 3;
      if ((*(_BYTE *)(v30 + 20) & 2) == 0)
        goto LABEL_30;
    }
    else
    {
      v31 = 2;
      if ((*(_BYTE *)(v30 + 20) & 2) == 0)
      {
LABEL_30:
        v34 = *((_QWORD *)this + 90);
        *((_QWORD *)this + 90) = v29;
        if (v34)
          (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
        goto LABEL_32;
      }
    }
    v33 = *(_DWORD *)(v30 + 16);
    *(_BYTE *)(v29 + 20) = v31;
    *(_DWORD *)(v29 + 16) = v33;
    goto LABEL_30;
  }
LABEL_32:
  if (*((_QWORD *)a2 + 180))
  {
    v35 = (CMMsl::IntersiloNSCodingData *)operator new();
    v36 = CMMsl::IntersiloNSCodingData::IntersiloNSCodingData(v35, *((const CMMsl::IntersiloNSCodingData **)a2 + 180));
    v37 = *((_QWORD *)this + 180);
    *((_QWORD *)this + 180) = v36;
    if (v37)
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  }
  if (*((_QWORD *)a2 + 95))
  {
    v38 = (CMMsl::DeviceMotionCovariance *)operator new();
    v39 = CMMsl::DeviceMotionCovariance::DeviceMotionCovariance(v38, *((const CMMsl::DeviceMotionCovariance **)a2 + 95));
    v40 = *((_QWORD *)this + 95);
    *((_QWORD *)this + 95) = v39;
    if (v40)
      (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  }
  if (*((_QWORD *)a2 + 11))
  {
    v41 = (CMMsl::AccessoryAccel *)operator new();
    v42 = CMMsl::AccessoryAccel::AccessoryAccel(v41, *((const CMMsl::Accel ***)a2 + 11));
    v43 = *((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = v42;
    if (v43)
      (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  }
  if (*((_QWORD *)a2 + 18))
  {
    v44 = (CMMsl::AccessoryGyro *)operator new();
    v45 = CMMsl::AccessoryGyro::AccessoryGyro(v44, *((const CMMsl::Gyro ***)a2 + 18));
    v46 = *((_QWORD *)this + 18);
    *((_QWORD *)this + 18) = v45;
    if (v46)
      (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  }
  if (*((_QWORD *)a2 + 27))
  {
    v47 = operator new();
    v48 = CMMsl::AccessoryProx::AccessoryProx(v47, *((const CMMsl::AccessoryProx **)a2 + 27));
    v49 = *((_QWORD *)this + 27);
    *((_QWORD *)this + 27) = v48;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  }
  if (*((_QWORD *)a2 + 431))
  {
    v50 = (CMMsl::WorkoutRecorderAccel *)operator new();
    v51 = CMMsl::WorkoutRecorderAccel::WorkoutRecorderAccel(v50, *((const CMMsl::Accel ***)a2 + 431));
    v52 = *((_QWORD *)this + 431);
    *((_QWORD *)this + 431) = v51;
    if (v52)
      (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  }
  if (*((_QWORD *)a2 + 434))
  {
    v53 = (CMMsl::WorkoutRecorderBodyMetrics *)operator new();
    v54 = CMMsl::WorkoutRecorderBodyMetrics::WorkoutRecorderBodyMetrics(v53, *((const CMMsl::BodyMetrics ***)a2 + 434));
    v55 = *((_QWORD *)this + 434);
    *((_QWORD *)this + 434) = v54;
    if (v55)
      (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  }
  if (*((_QWORD *)a2 + 436))
  {
    v56 = (CMMsl::WorkoutRecorderElevation *)operator new();
    v57 = CMMsl::WorkoutRecorderElevation::WorkoutRecorderElevation(v56, *((const CMMsl::ElevationChange ***)a2 + 436));
    v58 = *((_QWORD *)this + 436);
    *((_QWORD *)this + 436) = v57;
    if (v58)
      (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  }
  if (*((_QWORD *)a2 + 440))
  {
    v59 = (CMMsl::WorkoutRecorderHeartRate *)operator new();
    v60 = CMMsl::WorkoutRecorderHeartRate::WorkoutRecorderHeartRate(v59, *((const CMMsl::OnsetHeartRateData ***)a2 + 440));
    v61 = *((_QWORD *)this + 440);
    *((_QWORD *)this + 440) = v60;
    if (v61)
      (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  }
  if (*((_QWORD *)a2 + 444))
  {
    v62 = (CMMsl::WorkoutRecorderRotationRate *)operator new();
    v63 = CMMsl::WorkoutRecorderRotationRate::WorkoutRecorderRotationRate(v62, *((const CMMsl::RotationRate ***)a2 + 444));
    v64 = *((_QWORD *)this + 444);
    *((_QWORD *)this + 444) = v63;
    if (v64)
      (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  }
  if (*((_QWORD *)a2 + 442))
  {
    v65 = (CMMsl::WorkoutRecorderOdometer *)operator new();
    v66 = CMMsl::WorkoutRecorderOdometer::WorkoutRecorderOdometer(v65, *((const CMMsl::Odometer ****)a2 + 442));
    v67 = *((_QWORD *)this + 442);
    *((_QWORD *)this + 442) = v66;
    if (v67)
      (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
  }
  if (*((_QWORD *)a2 + 448))
  {
    v68 = (CMMsl::WorkoutRecorderWorkoutEvent *)operator new();
    v69 = CMMsl::WorkoutRecorderWorkoutEvent::WorkoutRecorderWorkoutEvent(v68, *((const CMMsl::WorkoutEvent ***)a2 + 448));
    v70 = *((_QWORD *)this + 448);
    *((_QWORD *)this + 448) = v69;
    if (v70)
      (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
  }
  if (*((_QWORD *)a2 + 415))
  {
    v71 = (CMMsl::VO2MaxInput *)operator new();
    v72 = CMMsl::VO2MaxInput::VO2MaxInput(v71, *((const CMMsl::VO2MaxInput **)a2 + 415));
    v73 = *((_QWORD *)this + 415);
    *((_QWORD *)this + 415) = v74;
    if (v73)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v73 + 8))(v73, v72);
  }
  if (*((_QWORD *)a2 + 68))
  {
    v75 = (CMMsl::BraveHeartDeviceMotion *)operator new();
    v76 = CMMsl::BraveHeartDeviceMotion::BraveHeartDeviceMotion(v75, *((const CMMsl::BraveHeartDeviceMotion **)a2 + 68));
    v77 = *((_QWORD *)this + 68);
    *((_QWORD *)this + 68) = v76;
    if (v77)
      (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  }
  if (*((_QWORD *)a2 + 69))
  {
    v78 = operator new();
    v79 = CMMsl::BraveHeartNatalieData::BraveHeartNatalieData(v78, *((const CMMsl::BraveHeartNatalieData **)a2 + 69));
    v80 = *((_QWORD *)this + 69);
    *((_QWORD *)this + 69) = v79;
    if (v80)
      (*(void (**)(uint64_t))(*(_QWORD *)v80 + 8))(v80);
  }
  if (*((_QWORD *)a2 + 70))
  {
    v81 = (CMMsl::BraveHeartVO2MaxInput *)operator new();
    v82 = CMMsl::BraveHeartVO2MaxInput::BraveHeartVO2MaxInput(v81, *((const CMMsl::BraveHeartVO2MaxInput **)a2 + 70));
    v83 = *((_QWORD *)this + 70);
    *((_QWORD *)this + 70) = v82;
    if (v83)
      (*(void (**)(uint64_t))(*(_QWORD *)v83 + 8))(v83);
  }
  if (*((_QWORD *)a2 + 67))
  {
    v84 = (CMMsl::BraveHeartAccel *)operator new();
    v85 = CMMsl::BraveHeartAccel::BraveHeartAccel(v84, *((const CMMsl::BraveHeartAccel **)a2 + 67));
    v86 = *((_QWORD *)this + 67);
    *((_QWORD *)this + 67) = v85;
    if (v86)
      (*(void (**)(uint64_t))(*(_QWORD *)v86 + 8))(v86);
  }
  if (*((_QWORD *)a2 + 71))
  {
    v87 = (CMMsl::BraveHeartWorkoutEvent *)operator new();
    v88 = CMMsl::BraveHeartWorkoutEvent::BraveHeartWorkoutEvent(v87, *((const CMMsl::BraveHeartWorkoutEvent **)a2 + 71));
    v89 = *((_QWORD *)this + 71);
    *((_QWORD *)this + 71) = v90;
    if (v89)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v89 + 8))(v89, v88);
  }
  if (*((_QWORD *)a2 + 439))
  {
    v91 = (CMMsl::WorkoutRecorderHealthKitInfo *)operator new();
    v92 = CMMsl::WorkoutRecorderHealthKitInfo::WorkoutRecorderHealthKitInfo(v91, *((const CMMsl::WorkoutRecorderHealthKitInfo **)a2 + 439));
    v93 = *((_QWORD *)this + 439);
    *((_QWORD *)this + 439) = v94;
    if (v93)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v93 + 8))(v93, v92);
  }
  if (*((_QWORD *)a2 + 288))
  {
    v95 = (CMMsl::PearlAttitude *)operator new();
    v96 = CMMsl::PearlAttitude::PearlAttitude(v95, *((const CMMsl::PearlAttitude **)a2 + 288));
    v97 = *((_QWORD *)this + 288);
    *((_QWORD *)this + 288) = v96;
    if (v97)
      (*(void (**)(uint64_t))(*(_QWORD *)v97 + 8))(v97);
  }
  if (*((_QWORD *)a2 + 340))
  {
    v98 = (CMMsl::RotationRate *)operator new();
    v99 = CMMsl::RotationRate::RotationRate(v98, *((const CMMsl::RotationRate **)a2 + 340));
    v100 = *((_QWORD *)this + 340);
    *((_QWORD *)this + 340) = v101;
    if (v100)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v100 + 8))(v100, v99);
  }
  if (*((_QWORD *)a2 + 446))
  {
    v102 = (CMMsl::WorkoutRecorderWatchOrientationSettings *)operator new();
    v103 = CMMsl::WorkoutRecorderWatchOrientationSettings::WorkoutRecorderWatchOrientationSettings(v102, *((const CMMsl::WorkoutRecorderWatchOrientationSettings **)a2 + 446));
    v104 = *((_QWORD *)this + 446);
    *((_QWORD *)this + 446) = v103;
    if (v104)
      (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  }
  if (*((_QWORD *)a2 + 425))
  {
    v105 = operator new();
    v106 = CMMsl::WatchOnWristState::WatchOnWristState(v105, *((const CMMsl::WatchOnWristState **)a2 + 425));
    v107 = *((_QWORD *)this + 425);
    *((_QWORD *)this + 425) = v106;
    if (v107)
      (*(void (**)(uint64_t))(*(_QWORD *)v107 + 8))(v107);
  }
  if (*((_QWORD *)a2 + 76))
  {
    v108 = operator new();
    v109 = CMMsl::CatherineHealthKitData::CatherineHealthKitData(v108, *((const CMMsl::CatherineHealthKitData **)a2 + 76));
    v110 = *((_QWORD *)this + 76);
    *((_QWORD *)this + 76) = v109;
    if (v110)
      (*(void (**)(uint64_t))(*(_QWORD *)v110 + 8))(v110);
  }
  if (*((_QWORD *)a2 + 427))
  {
    v111 = (CMMsl::WifiScanResults *)operator new();
    v112 = CMMsl::WifiScanResults::WifiScanResults(v111, *((const CMMsl::WifiScanResults **)a2 + 427));
    v113 = *((_QWORD *)this + 427);
    *((_QWORD *)this + 427) = v112;
    if (v113)
      (*(void (**)(uint64_t))(*(_QWORD *)v113 + 8))(v113);
  }
  if (*((_QWORD *)a2 + 176))
  {
    v114 = (CMMsl::InEarTransitionEntry *)operator new();
    v115 = CMMsl::InEarTransitionEntry::InEarTransitionEntry(v114, *((const CMMsl::InEarTransitionEntry **)a2 + 176));
    v116 = *((_QWORD *)this + 176);
    *((_QWORD *)this + 176) = v115;
    if (v116)
      (*(void (**)(uint64_t))(*(_QWORD *)v116 + 8))(v116);
  }
  if (*((_QWORD *)a2 + 174))
  {
    v117 = (CMMsl::InEarSession *)operator new();
    v118 = CMMsl::InEarSession::InEarSession(v117, *((const CMMsl::InEarSession **)a2 + 174));
    v119 = *((_QWORD *)this + 174);
    *((_QWORD *)this + 174) = v118;
    if (v119)
      (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
  }
  if (*((_QWORD *)a2 + 169))
  {
    v120 = (CMMsl::InEarBaseline *)operator new();
    v121 = CMMsl::InEarBaseline::InEarBaseline(v120, *((const CMMsl::InEarBaseline **)a2 + 169));
    v122 = *((_QWORD *)this + 169);
    *((_QWORD *)this + 169) = v121;
    if (v122)
      (*(void (**)(uint64_t))(*(_QWORD *)v122 + 8))(v122);
  }
  if (*((_QWORD *)a2 + 28))
  {
    v123 = (CMMsl::AccessoryProxSensorDrop *)operator new();
    v124 = CMMsl::AccessoryProxSensorDrop::AccessoryProxSensorDrop(v123, *((const CMMsl::AccessoryProxSensorDrop **)a2 + 28));
    v125 = *((_QWORD *)this + 28);
    *((_QWORD *)this + 28) = v124;
    if (v125)
      (*(void (**)(uint64_t))(*(_QWORD *)v125 + 8))(v125);
  }
  if (*((_QWORD *)a2 + 29))
  {
    v126 = operator new();
    v127 = CMMsl::AccessoryProxTempComp::AccessoryProxTempComp(v126, *((const CMMsl::AccessoryProxTempComp **)a2 + 29));
    v128 = *((_QWORD *)this + 29);
    *((_QWORD *)this + 29) = v127;
    if (v128)
      (*(void (**)(uint64_t))(*(_QWORD *)v128 + 8))(v128);
  }
  if (*((_QWORD *)a2 + 34))
  {
    v129 = (CMMsl::AccessoryWake *)operator new();
    v130 = CMMsl::AccessoryWake::AccessoryWake(v129, *((const CMMsl::AccessoryWake **)a2 + 34));
    v131 = *((_QWORD *)this + 34);
    *((_QWORD *)this + 34) = v130;
    if (v131)
      (*(void (**)(uint64_t))(*(_QWORD *)v131 + 8))(v131);
  }
  if (*((_QWORD *)a2 + 114))
  {
    v132 = (CMMsl::FacePose *)operator new();
    v133 = CMMsl::FacePose::FacePose(v132, *((const CMMsl::FacePose **)a2 + 114));
    v134 = *((_QWORD *)this + 114);
    *((_QWORD *)this + 114) = v135;
    if (v134)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v134 + 8))(v134, v133);
  }
  if (*((_QWORD *)a2 + 447))
  {
    v136 = (CMMsl::WorkoutRecorderWifiScanResults *)operator new();
    v137 = CMMsl::WorkoutRecorderWifiScanResults::WorkoutRecorderWifiScanResults(v136, *((const CMMsl::WifiScanResults ***)a2 + 447));
    v138 = *((_QWORD *)this + 447);
    *((_QWORD *)this + 447) = v137;
    if (v138)
      (*(void (**)(uint64_t))(*(_QWORD *)v138 + 8))(v138);
  }
  if (*((_QWORD *)a2 + 443))
  {
    v139 = (CMMsl::WorkoutRecorderPressure *)operator new();
    v140 = CMMsl::WorkoutRecorderPressure::WorkoutRecorderPressure(v139, *((const CMMsl::Pressure ***)a2 + 443));
    v141 = *((_QWORD *)this + 443);
    *((_QWORD *)this + 443) = v140;
    if (v141)
      (*(void (**)(uint64_t))(*(_QWORD *)v141 + 8))(v141);
  }
  if (*((_QWORD *)a2 + 168))
  {
    v142 = (CMMsl::InEarAdditionalState *)operator new();
    v143 = CMMsl::InEarAdditionalState::InEarAdditionalState(v142, *((const CMMsl::InEarAdditionalState **)a2 + 168));
    v144 = *((_QWORD *)this + 168);
    *((_QWORD *)this + 168) = v143;
    if (v144)
      (*(void (**)(uint64_t))(*(_QWORD *)v144 + 8))(v144);
  }
  if (*((_QWORD *)a2 + 16))
  {
    v145 = (CMMsl::AccessoryDeviceMotion *)operator new();
    v146 = CMMsl::AccessoryDeviceMotion::AccessoryDeviceMotion(v145, *((const CMMsl::DeviceMotion ***)a2 + 16));
    v147 = *((_QWORD *)this + 16);
    *((_QWORD *)this + 16) = v146;
    if (v147)
      (*(void (**)(uint64_t))(*(_QWORD *)v147 + 8))(v147);
  }
  if (*((_QWORD *)a2 + 410))
  {
    v148 = (CMMsl::VisionCompassBias *)operator new();
    v149 = CMMsl::VisionCompassBias::VisionCompassBias(v148, *((const CMMsl::VisionCompassBias **)a2 + 410));
    v150 = *((_QWORD *)this + 410);
    *((_QWORD *)this + 410) = v149;
    if (v150)
      (*(void (**)(uint64_t))(*(_QWORD *)v150 + 8))(v150);
  }
  if (*((_QWORD *)a2 + 44))
  {
    v151 = operator new();
    v152 = *((_QWORD *)a2 + 44);
    *(_QWORD *)v151 = &off_25135BCD8;
    *(_QWORD *)(v151 + 8) = 0;
    if ((*(_BYTE *)(v152 + 12) & 1) != 0)
    {
      v153 = *(_DWORD *)(v152 + 8);
      *(_BYTE *)(v151 + 12) = 1;
      *(_DWORD *)(v151 + 8) = v153;
    }
    v154 = *((_QWORD *)this + 44);
    *((_QWORD *)this + 44) = v151;
    if (v154)
      (*(void (**)(uint64_t))(*(_QWORD *)v154 + 8))(v154);
  }
  if (*((_QWORD *)a2 + 407))
  {
    v155 = (CMMsl::VIOEstimation *)operator new();
    v156 = CMMsl::VIOEstimation::VIOEstimation(v155, *((const CMMsl::VIOEstimation **)a2 + 407));
    v157 = *((_QWORD *)this + 407);
    *((_QWORD *)this + 407) = v156;
    if (v157)
      (*(void (**)(uint64_t))(*(_QWORD *)v157 + 8))(v157);
  }
  if (*((_QWORD *)a2 + 235))
  {
    v158 = (CMMsl::LSLHeadingEstimation *)operator new();
    v159 = CMMsl::LSLHeadingEstimation::LSLHeadingEstimation(v158, *((const CMMsl::LSLHeadingEstimation **)a2 + 235));
    v160 = *((_QWORD *)this + 235);
    *((_QWORD *)this + 235) = v159;
    if (v160)
      (*(void (**)(uint64_t))(*(_QWORD *)v160 + 8))(v160);
  }
  if (*((_QWORD *)a2 + 125))
  {
    v161 = (CMMsl::FallSnippet *)operator new();
    v162 = CMMsl::FallSnippet::FallSnippet(v161, *((const CMMsl::FallSnippet **)a2 + 125));
    v163 = *((_QWORD *)this + 125);
    *((_QWORD *)this + 125) = v162;
    if (v163)
      (*(void (**)(uint64_t))(*(_QWORD *)v163 + 8))(v163);
  }
  if (*((_QWORD *)a2 + 10))
  {
    v164 = (CMMsl::AccelerometerPace *)operator new();
    v165 = CMMsl::AccelerometerPace::AccelerometerPace(v164, *((const CMMsl::AccelerometerPace **)a2 + 10));
    v166 = *((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = v167;
    if (v166)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v166 + 8))(v166, v165);
  }
  if (*((_QWORD *)a2 + 259))
  {
    v168 = operator new();
    v169 = *((_QWORD *)a2 + 259);
    *(_QWORD *)v168 = &off_25135F628;
    *(_DWORD *)(v168 + 12) = 0;
    if ((*(_BYTE *)(v169 + 12) & 1) != 0)
    {
      v170 = *(_DWORD *)(v169 + 8);
      *(_BYTE *)(v168 + 12) = 1;
      *(_DWORD *)(v168 + 8) = v170;
    }
    v171 = *((_QWORD *)this + 259);
    *((_QWORD *)this + 259) = v168;
    if (v171)
      (*(void (**)(uint64_t))(*(_QWORD *)v171 + 8))(v171);
  }
  if (*((_QWORD *)a2 + 379))
  {
    v172 = (CMMsl::StepCountEntry *)operator new();
    v173 = CMMsl::StepCountEntry::StepCountEntry(v172, *((const CMMsl::StepCountEntry **)a2 + 379));
    v174 = *((_QWORD *)this + 379);
    *((_QWORD *)this + 379) = v173;
    if (v174)
      (*(void (**)(uint64_t))(*(_QWORD *)v174 + 8))(v174);
  }
  if (*((_QWORD *)a2 + 245))
  {
    v175 = (CMMsl::MobilityBoutMetrics *)operator new();
    v176 = CMMsl::MobilityBoutMetrics::MobilityBoutMetrics(v175, *((const CMMsl::MobilityBoutMetrics **)a2 + 245));
    v177 = *((_QWORD *)this + 245);
    *((_QWORD *)this + 245) = v178;
    if (v177)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v177 + 8))(v177, v176);
  }
  if (*((_QWORD *)a2 + 89))
  {
    v179 = (CMMsl::CoprocessorReplyGaitMetrics *)operator new();
    v180 = CMMsl::CoprocessorReplyGaitMetrics::CoprocessorReplyGaitMetrics(v179, *((const CMMsl::CoprocessorReplyGaitMetrics **)a2 + 89));
    v181 = *((_QWORD *)this + 89);
    *((_QWORD *)this + 89) = v182;
    if (v181)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v181 + 8))(v181, v180);
  }
  if (*((_QWORD *)a2 + 408))
  {
    v183 = (CMMsl::VIOPose *)operator new();
    v184 = CMMsl::VIOPose::VIOPose(v183, *((const CMMsl::VIOPose **)a2 + 408));
    v185 = *((_QWORD *)this + 408);
    *((_QWORD *)this + 408) = v184;
    if (v185)
      (*(void (**)(uint64_t))(*(_QWORD *)v185 + 8))(v185);
  }
  if (*((_QWORD *)a2 + 356))
  {
    v186 = operator new();
    v187 = *((_QWORD *)a2 + 356);
    *(_QWORD *)v186 = &off_251360D20;
    *(_QWORD *)(v186 + 8) = 0;
    if ((*(_BYTE *)(v187 + 12) & 1) != 0)
    {
      v188 = *(_DWORD *)(v187 + 8);
      *(_BYTE *)(v186 + 12) = 1;
      *(_DWORD *)(v186 + 8) = v188;
    }
    v189 = *((_QWORD *)this + 356);
    *((_QWORD *)this + 356) = v186;
    if (v189)
      (*(void (**)(uint64_t))(*(_QWORD *)v189 + 8))(v189);
  }
  if (*((_QWORD *)a2 + 409))
  {
    v190 = (CMMsl::VIOReplayPose *)operator new();
    v191 = CMMsl::VIOReplayPose::VIOReplayPose(v190, *((const CMMsl::VIOReplayPose **)a2 + 409));
    v192 = *((_QWORD *)this + 409);
    *((_QWORD *)this + 409) = v191;
    if (v192)
      (*(void (**)(uint64_t))(*(_QWORD *)v192 + 8))(v192);
  }
  if (*((_QWORD *)a2 + 414))
  {
    v193 = (CMMsl::VisualStateMeasurement *)operator new();
    v194 = CMMsl::VisualStateMeasurement::VisualStateMeasurement(v193, *((const CMMsl::VisualStateMeasurement **)a2 + 414));
    v195 = *((_QWORD *)this + 414);
    *((_QWORD *)this + 414) = v194;
    if (v195)
      (*(void (**)(uint64_t))(*(_QWORD *)v195 + 8))(v195);
  }
  if (*((_QWORD *)a2 + 219))
  {
    v196 = (CMMsl::KappaTriggerDebug *)operator new();
    v197 = CMMsl::KappaTriggerDebug::KappaTriggerDebug(v196, *((const CMMsl::KappaTriggerDebug **)a2 + 219));
    v198 = *((_QWORD *)this + 219);
    *((_QWORD *)this + 219) = v197;
    if (v198)
      (*(void (**)(uint64_t))(*(_QWORD *)v198 + 8))(v198);
  }
  if (*((_QWORD *)a2 + 194))
  {
    v199 = (CMMsl::KappaDirectionOfTravel *)operator new();
    v200 = CMMsl::KappaDirectionOfTravel::KappaDirectionOfTravel(v199, *((const CMMsl::KappaDirectionOfTravel **)a2 + 194));
    v201 = *((_QWORD *)this + 194);
    *((_QWORD *)this + 194) = v200;
    if (v201)
      (*(void (**)(uint64_t))(*(_QWORD *)v201 + 8))(v201);
  }
  if (*((_QWORD *)a2 + 166))
  {
    v202 = (CMMsl::HgAccel *)operator new();
    v203 = CMMsl::HgAccel::HgAccel(v202, *((const CMMsl::Accel ***)a2 + 166));
    v204 = *((_QWORD *)this + 166);
    *((_QWORD *)this + 166) = v203;
    if (v204)
      (*(void (**)(uint64_t))(*(_QWORD *)v204 + 8))(v204);
  }
  if (*((_QWORD *)a2 + 215))
  {
    v205 = operator new();
    v206 = CMMsl::KappaSteps::KappaSteps(v205, *((const CMMsl::KappaSteps **)a2 + 215));
    v207 = *((_QWORD *)this + 215);
    *((_QWORD *)this + 215) = v206;
    if (v207)
      (*(void (**)(uint64_t))(*(_QWORD *)v207 + 8))(v207);
  }
  if (*((_QWORD *)a2 + 397))
  {
    v208 = operator new();
    v209 = *((_QWORD *)a2 + 397);
    *(_QWORD *)v208 = &off_251360D58;
    *(_QWORD *)(v208 + 16) = 0;
    if ((*(_BYTE *)(v209 + 20) & 1) != 0)
    {
      v211 = *(_QWORD *)(v209 + 8);
      *(_BYTE *)(v208 + 20) = 1;
      *(_QWORD *)(v208 + 8) = v211;
      v210 = 3;
      if ((*(_BYTE *)(v209 + 20) & 2) == 0)
        goto LABEL_206;
    }
    else
    {
      v210 = 2;
      if ((*(_BYTE *)(v209 + 20) & 2) == 0)
      {
LABEL_206:
        v213 = *((_QWORD *)this + 397);
        *((_QWORD *)this + 397) = v208;
        if (v213)
          (*(void (**)(uint64_t))(*(_QWORD *)v213 + 8))(v213);
        goto LABEL_208;
      }
    }
    v212 = *(_DWORD *)(v209 + 16);
    *(_BYTE *)(v208 + 20) = v210;
    *(_DWORD *)(v208 + 16) = v212;
    goto LABEL_206;
  }
LABEL_208:
  if (*((_QWORD *)a2 + 210))
  {
    v214 = operator new();
    v215 = CMMsl::KappaRoads::KappaRoads(v214, *((const CMMsl::KappaRoads **)a2 + 210));
    v216 = *((_QWORD *)this + 210);
    *((_QWORD *)this + 210) = v215;
    if (v216)
      (*(void (**)(uint64_t))(*(_QWORD *)v216 + 8))(v216);
  }
  if (*((_QWORD *)a2 + 398))
  {
    v217 = (CMMsl::UserStudyEvent *)operator new();
    v218 = CMMsl::UserStudyEvent::UserStudyEvent(v217, *((const CMMsl::UserStudyEvent **)a2 + 398));
    v219 = *((_QWORD *)this + 398);
    *((_QWORD *)this + 398) = v218;
    if (v219)
      (*(void (**)(uint64_t))(*(_QWORD *)v219 + 8))(v219);
  }
  if (*((_QWORD *)a2 + 47))
  {
    v220 = (CMMsl::AuxiliaryDeviceMotion *)operator new();
    v221 = CMMsl::AuxiliaryDeviceMotion::AuxiliaryDeviceMotion(v220, *((const CMMsl::AuxiliaryDeviceMotion **)a2 + 47));
    v222 = *((_QWORD *)this + 47);
    *((_QWORD *)this + 47) = v221;
    if (v222)
      (*(void (**)(uint64_t))(*(_QWORD *)v222 + 8))(v222);
  }
  if (*((_QWORD *)a2 + 391))
  {
    v223 = (CMMsl::TempestPoCAuxiliaryDeviceMotion *)operator new();
    v224 = CMMsl::TempestPoCAuxiliaryDeviceMotion::TempestPoCAuxiliaryDeviceMotion(v223, *((const CMMsl::TempestPoCAuxiliaryDeviceMotion **)a2 + 391));
    v225 = *((_QWORD *)this + 391);
    *((_QWORD *)this + 391) = v224;
    if (v225)
      (*(void (**)(uint64_t))(*(_QWORD *)v225 + 8))(v225);
  }
  if (*((_QWORD *)a2 + 46))
  {
    v226 = (CMMsl::AudioAccessoryDeviceMotion *)operator new();
    v227 = CMMsl::AudioAccessoryDeviceMotion::AudioAccessoryDeviceMotion(v226, *((const CMMsl::AudioAccessoryDeviceMotion **)a2 + 46));
    v228 = *((_QWORD *)this + 46);
    *((_QWORD *)this + 46) = v227;
    if (v228)
      (*(void (**)(uint64_t))(*(_QWORD *)v228 + 8))(v228);
  }
  if (*((_QWORD *)a2 + 392))
  {
    v229 = (CMMsl::TempestPoCListenerOrientation *)operator new();
    v230 = CMMsl::TempestPoCListenerOrientation::TempestPoCListenerOrientation(v229, *((const CMMsl::TempestPoCListenerOrientation **)a2 + 392));
    v231 = *((_QWORD *)this + 392);
    *((_QWORD *)this + 392) = v230;
    if (v231)
      (*(void (**)(uint64_t))(*(_QWORD *)v231 + 8))(v231);
  }
  if (*((_QWORD *)a2 + 432))
  {
    v232 = (CMMsl::WorkoutRecorderAccel800 *)operator new();
    v233 = CMMsl::WorkoutRecorderAccel800::WorkoutRecorderAccel800(v232, *((const CMMsl::Accel ***)a2 + 432));
    v234 = *((_QWORD *)this + 432);
    *((_QWORD *)this + 432) = v233;
    if (v234)
      (*(void (**)(uint64_t))(*(_QWORD *)v234 + 8))(v234);
  }
  if (*((_QWORD *)a2 + 37))
  {
    v235 = operator new();
    v236 = *((_QWORD *)a2 + 37);
    *(_QWORD *)v235 = &off_25135BBC0;
    *(_DWORD *)(v235 + 12) = 0;
    if ((*(_BYTE *)(v236 + 12) & 1) != 0)
    {
      v237 = *(_DWORD *)(v236 + 8);
      *(_BYTE *)(v235 + 12) = 1;
      *(_DWORD *)(v235 + 8) = v237;
    }
    v238 = *((_QWORD *)this + 37);
    *((_QWORD *)this + 37) = v235;
    if (v238)
      (*(void (**)(uint64_t))(*(_QWORD *)v238 + 8))(v238);
  }
  if (*((_QWORD *)a2 + 430))
  {
    v239 = (CMMsl::WorkoutRecorderALSData *)operator new();
    v240 = CMMsl::WorkoutRecorderALSData::WorkoutRecorderALSData(v239, *((const CMMsl::WorkoutRecorderALSData **)a2 + 430));
    v241 = *((_QWORD *)this + 430);
    *((_QWORD *)this + 430) = v240;
    if (v241)
      (*(void (**)(uint64_t))(*(_QWORD *)v241 + 8))(v241);
  }
  if (*((_QWORD *)a2 + 411))
  {
    v242 = (CMMsl::VisualLocalization *)operator new();
    v243 = CMMsl::VisualLocalization::VisualLocalization(v242, *((const CMMsl::VisualLocalization **)a2 + 411));
    v244 = *((_QWORD *)this + 411);
    *((_QWORD *)this + 411) = v243;
    if (v244)
      (*(void (**)(uint64_t))(*(_QWORD *)v244 + 8))(v244);
  }
  if (*((_QWORD *)a2 + 155))
  {
    v245 = (CMMsl::GyroFactoryCalibrationData *)operator new();
    v246 = CMMsl::GyroFactoryCalibrationData::GyroFactoryCalibrationData(v245, *((const CMMsl::GyroFactoryCalibrationData **)a2 + 155));
    v247 = *((_QWORD *)this + 155);
    *((_QWORD *)this + 155) = v248;
    if (v247)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v247 + 8))(v247, v246);
  }
  if (*((_QWORD *)a2 + 367))
  {
    v249 = operator new();
    v250 = *((_QWORD *)a2 + 367);
    *(_QWORD *)v249 = &off_251361068;
    *(_DWORD *)(v249 + 20) = 0;
    if ((*(_BYTE *)(v250 + 20) & 2) != 0)
    {
      v252 = *(_DWORD *)(v250 + 16);
      *(_BYTE *)(v249 + 20) = 2;
      *(_DWORD *)(v249 + 16) = v252;
      v251 = 3;
      if ((*(_BYTE *)(v250 + 20) & 1) == 0)
        goto LABEL_249;
    }
    else
    {
      v251 = 1;
      if ((*(_BYTE *)(v250 + 20) & 1) == 0)
      {
LABEL_249:
        v254 = *((_QWORD *)this + 367);
        *((_QWORD *)this + 367) = v249;
        if (v254)
          (*(void (**)(uint64_t))(*(_QWORD *)v254 + 8))(v254);
        goto LABEL_251;
      }
    }
    v253 = *(_QWORD *)(v250 + 8);
    *(_BYTE *)(v249 + 20) = v251;
    *(_QWORD *)(v249 + 8) = v253;
    goto LABEL_249;
  }
LABEL_251:
  if (*((_QWORD *)a2 + 131))
  {
    v255 = (CMMsl::FrequencyResponse *)operator new();
    v256 = CMMsl::FrequencyResponse::FrequencyResponse(v255, *((const CMMsl::FrequencyResponse **)a2 + 131));
    v257 = *((_QWORD *)this + 131);
    *((_QWORD *)this + 131) = v256;
    if (v257)
      (*(void (**)(uint64_t))(*(_QWORD *)v257 + 8))(v257);
  }
  if (*((_QWORD *)a2 + 109))
  {
    v258 = operator new();
    v259 = *((_QWORD *)a2 + 109);
    *(_QWORD *)v258 = &off_25135D478;
    *(_DWORD *)(v258 + 12) = 0;
    if ((*(_BYTE *)(v259 + 12) & 1) != 0)
    {
      v260 = *(_DWORD *)(v259 + 8);
      *(_BYTE *)(v258 + 12) = 1;
      *(_DWORD *)(v258 + 8) = v260;
    }
    v261 = *((_QWORD *)this + 109);
    *((_QWORD *)this + 109) = v258;
    if (v261)
      (*(void (**)(uint64_t))(*(_QWORD *)v261 + 8))(v261);
  }
  if (*((_QWORD *)a2 + 4))
  {
    v262 = (CMMsl::Accel800 *)operator new();
    v263 = CMMsl::Accel800::Accel800(v262, *((const CMMsl::Accel ***)a2 + 4));
    v264 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v263;
    if (v264)
      (*(void (**)(uint64_t))(*(_QWORD *)v264 + 8))(v264);
  }
  if (*((_QWORD *)a2 + 253))
  {
    v265 = operator new();
    v266 = CMMsl::MotionLocation::MotionLocation(v265, *((const CMMsl::MotionLocation **)a2 + 253));
    v267 = *((_QWORD *)this + 253);
    *((_QWORD *)this + 253) = v266;
    if (v267)
      (*(void (**)(uint64_t))(*(_QWORD *)v267 + 8))(v267);
  }
  if (*((_QWORD *)a2 + 248))
  {
    v268 = operator new();
    v269 = CMMsl::MotionActivity::MotionActivity(v268, *((const CMMsl::MotionActivity **)a2 + 248));
    v270 = *((_QWORD *)this + 248);
    *((_QWORD *)this + 248) = v269;
    if (v270)
      (*(void (**)(uint64_t))(*(_QWORD *)v270 + 8))(v270);
  }
  if (*((_QWORD *)a2 + 62))
  {
    v271 = (char **)operator new();
    v272 = CMMsl::BioMotionPose::BioMotionPose(v271, *((char ***)a2 + 62));
    v273 = *((_QWORD *)this + 62);
    *((_QWORD *)this + 62) = v272;
    if (v273)
      (*(void (**)(uint64_t))(*(_QWORD *)v273 + 8))(v273);
  }
  if (*((_QWORD *)a2 + 217))
  {
    v274 = (CMMsl::KappaTrigger *)operator new();
    v275 = CMMsl::KappaTrigger::KappaTrigger(v274, *((const CMMsl::KappaTrigger **)a2 + 217));
    v276 = *((_QWORD *)this + 217);
    *((_QWORD *)this + 217) = v275;
    if (v276)
      (*(void (**)(uint64_t))(*(_QWORD *)v276 + 8))(v276);
  }
  if (*((_QWORD *)a2 + 333))
  {
    v277 = (CMMsl::RelDMInSystemConfig *)operator new();
    v278 = CMMsl::RelDMInSystemConfig::RelDMInSystemConfig(v277, *((const CMMsl::RelDMInSystemConfig **)a2 + 333));
    v279 = *((_QWORD *)this + 333);
    *((_QWORD *)this + 333) = v278;
    if (v279)
      (*(void (**)(uint64_t))(*(_QWORD *)v279 + 8))(v279);
  }
  if (*((_QWORD *)a2 + 183))
  {
    v280 = (CMMsl::JointLinkModelPose *)operator new();
    v281 = CMMsl::JointLinkModelPose::JointLinkModelPose(v280, *((char ****)a2 + 183));
    v282 = *((_QWORD *)this + 183);
    *((_QWORD *)this + 183) = v281;
    if (v282)
      (*(void (**)(uint64_t))(*(_QWORD *)v282 + 8))(v282);
  }
  if (*((_QWORD *)a2 + 88))
  {
    v283 = (CMMsl::ConstrainedIntegratorPose *)operator new();
    v284 = CMMsl::ConstrainedIntegratorPose::ConstrainedIntegratorPose(v283, *((char ****)a2 + 88));
    v285 = *((_QWORD *)this + 88);
    *((_QWORD *)this + 88) = v284;
    if (v285)
      (*(void (**)(uint64_t))(*(_QWORD *)v285 + 8))(v285);
  }
  if (*((_QWORD *)a2 + 151))
  {
    v286 = (CMMsl::GyroCalibrationSample *)operator new();
    v287 = CMMsl::GyroCalibrationSample::GyroCalibrationSample(v286, *((const CMMsl::GyroCalibrationSample **)a2 + 151));
    v288 = *((_QWORD *)this + 151);
    *((_QWORD *)this + 151) = v289;
    if (v288)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v288 + 8))(v288, v287);
  }
  if (*((_QWORD *)a2 + 152))
  {
    v290 = (CMMsl::GyroCalibrationSampleNonlinear *)operator new();
    v291 = CMMsl::GyroCalibrationSampleNonlinear::GyroCalibrationSampleNonlinear(v290, *((const CMMsl::GyroCalibrationSample ***)a2 + 152));
    v292 = *((_QWORD *)this + 152);
    *((_QWORD *)this + 152) = v291;
    if (v292)
      (*(void (**)(uint64_t))(*(_QWORD *)v292 + 8))(v292);
  }
  if (*((_QWORD *)a2 + 150))
  {
    v293 = (CMMsl::GyroCalibrationDataNonlinearNonFactory *)operator new();
    v294 = CMMsl::GyroCalibrationDataNonlinearNonFactory::GyroCalibrationDataNonlinearNonFactory(v293, *((const CMMsl::GyroCalibrationDataNonlinearNonFactory **)a2 + 150));
    v295 = *((_QWORD *)this + 150);
    *((_QWORD *)this + 150) = v294;
    if (v295)
      (*(void (**)(uint64_t))(*(_QWORD *)v295 + 8))(v295);
  }
  if (*((_QWORD *)a2 + 149))
  {
    v296 = (CMMsl::GyroCalibrationDataFactory *)operator new();
    v297 = CMMsl::GyroCalibrationDataFactory::GyroCalibrationDataFactory(v296, *((const CMMsl::GyroCalibrationDataFactory **)a2 + 149));
    v298 = *((_QWORD *)this + 149);
    *((_QWORD *)this + 149) = v297;
    if (v298)
      (*(void (**)(uint64_t))(*(_QWORD *)v298 + 8))(v298);
  }
  if (*((_QWORD *)a2 + 59))
  {
    v299 = (CMMsl::BioMotionClassification *)operator new();
    v300 = CMMsl::BioMotionClassification::BioMotionClassification(v299, *((const CMMsl::BioMotionClassification **)a2 + 59));
    v301 = *((_QWORD *)this + 59);
    *((_QWORD *)this + 59) = v302;
    if (v301)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v301 + 8))(v301, v300);
  }
  if (*((_QWORD *)a2 + 132))
  {
    v303 = (CMMsl::FusedBioMotionClassification *)operator new();
    v304 = CMMsl::FusedBioMotionClassification::FusedBioMotionClassification(v303, *((const CMMsl::BioMotionClassification ***)a2 + 132));
    v305 = *((_QWORD *)this + 132);
    *((_QWORD *)this + 132) = v304;
    if (v305)
      (*(void (**)(uint64_t))(*(_QWORD *)v305 + 8))(v305);
  }
  if (*((_QWORD *)a2 + 247))
  {
    v306 = (CMMsl::ModelBasedBioMotionClassification *)operator new();
    v307 = CMMsl::ModelBasedBioMotionClassification::ModelBasedBioMotionClassification(v306, *((const CMMsl::BioMotionClassification ***)a2 + 247));
    v308 = *((_QWORD *)this + 247);
    *((_QWORD *)this + 247) = v307;
    if (v308)
      (*(void (**)(uint64_t))(*(_QWORD *)v308 + 8))(v308);
  }
  if (*((_QWORD *)a2 + 236))
  {
    v309 = (CMMsl::MLBasedBioMotionClassification *)operator new();
    v310 = CMMsl::MLBasedBioMotionClassification::MLBasedBioMotionClassification(v309, *((const CMMsl::BioMotionClassification ***)a2 + 236));
    v311 = *((_QWORD *)this + 236);
    *((_QWORD *)this + 236) = v310;
    if (v311)
      (*(void (**)(uint64_t))(*(_QWORD *)v311 + 8))(v311);
  }
  if (*((_QWORD *)a2 + 304))
  {
    v312 = (CMMsl::Pose *)operator new();
    v313 = CMMsl::Pose::Pose(v312, *((const CMMsl::Pose **)a2 + 304));
    v314 = *((_QWORD *)this + 304);
    *((_QWORD *)this + 304) = v313;
    if (v314)
      (*(void (**)(uint64_t))(*(_QWORD *)v314 + 8))(v314);
  }
  if (*((_QWORD *)a2 + 305))
  {
    v315 = (CMMsl::PoseState *)operator new();
    v316 = CMMsl::PoseState::PoseState(v315, *((const CMMsl::PoseState **)a2 + 305));
    v317 = *((_QWORD *)this + 305);
    *((_QWORD *)this + 305) = v316;
    if (v317)
      (*(void (**)(uint64_t))(*(_QWORD *)v317 + 8))(v317);
  }
  if (*((_QWORD *)a2 + 63))
  {
    v318 = (CMMsl::BioMotionPredictedPose *)operator new();
    v319 = CMMsl::BioMotionPredictedPose::BioMotionPredictedPose(v318, *((const CMMsl::PoseState ***)a2 + 63));
    v320 = *((_QWORD *)this + 63);
    *((_QWORD *)this + 63) = v319;
    if (v320)
      (*(void (**)(uint64_t))(*(_QWORD *)v320 + 8))(v320);
  }
  if (*((_QWORD *)a2 + 184))
  {
    v321 = (CMMsl::JointLinkModelPredictedPose *)operator new();
    v322 = CMMsl::JointLinkModelPredictedPose::JointLinkModelPredictedPose(v321, *((const CMMsl::PoseState ****)a2 + 184));
    v323 = *((_QWORD *)this + 184);
    *((_QWORD *)this + 184) = v322;
    if (v323)
      (*(void (**)(uint64_t))(*(_QWORD *)v323 + 8))(v323);
  }
  if (*((_QWORD *)a2 + 87))
  {
    v324 = (CMMsl::ConstrainedIntegratorModelPredictedPose *)operator new();
    v325 = CMMsl::ConstrainedIntegratorModelPredictedPose::ConstrainedIntegratorModelPredictedPose(v324, *((const CMMsl::PoseState ****)a2 + 87));
    v326 = *((_QWORD *)this + 87);
    *((_QWORD *)this + 87) = v325;
    if (v326)
      (*(void (**)(uint64_t))(*(_QWORD *)v326 + 8))(v326);
  }
  if (*((_QWORD *)a2 + 318))
  {
    v327 = (CMMsl::PressureCompensated *)operator new();
    v328 = CMMsl::PressureCompensated::PressureCompensated(v327, *((const CMMsl::Pressure ***)a2 + 318));
    v329 = *((_QWORD *)this + 318);
    *((_QWORD *)this + 318) = v328;
    if (v329)
      (*(void (**)(uint64_t))(*(_QWORD *)v329 + 8))(v329);
  }
  if (*((_QWORD *)a2 + 416))
  {
    v330 = operator new();
    v331 = CMMsl::VO2MaxOutput::VO2MaxOutput(v330, *((const CMMsl::VO2MaxOutput **)a2 + 416));
    v332 = *((_QWORD *)this + 416);
    *((_QWORD *)this + 416) = v331;
    if (v332)
      (*(void (**)(uint64_t))(*(_QWORD *)v332 + 8))(v332);
  }
  if (*((_QWORD *)a2 + 238))
  {
    v333 = (CMMsl::MagneticAccessoryType1 *)operator new();
    v334 = CMMsl::MagneticAccessoryType1::MagneticAccessoryType1(v333, *((const CMMsl::MagneticAccessoryType1 **)a2 + 238));
    v335 = *((_QWORD *)this + 238);
    *((_QWORD *)this + 238) = v334;
    if (v335)
      (*(void (**)(uint64_t))(*(_QWORD *)v335 + 8))(v335);
  }
  if (*((_QWORD *)a2 + 239))
  {
    v336 = operator new();
    v337 = *((_QWORD *)a2 + 239);
    *(_QWORD *)v336 = &off_25135F1C8;
    *(_DWORD *)(v336 + 12) = 0;
    if ((*(_BYTE *)(v337 + 12) & 1) != 0)
    {
      v338 = *(_BYTE *)(v337 + 8);
      *(_BYTE *)(v336 + 12) = 1;
      *(_BYTE *)(v336 + 8) = v338;
    }
    v339 = *((_QWORD *)this + 239);
    *((_QWORD *)this + 239) = v336;
    if (v339)
      (*(void (**)(uint64_t))(*(_QWORD *)v339 + 8))(v339);
  }
  if (*((_QWORD *)a2 + 317))
  {
    v340 = (CMMsl::PressureCalibration *)operator new();
    v341 = CMMsl::PressureCalibration::PressureCalibration(v340, *((const CMMsl::PressureCalibration **)a2 + 317));
    v342 = *((_QWORD *)this + 317);
    *((_QWORD *)this + 317) = v343;
    if (v342)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v342 + 8))(v342, v341);
  }
  if (*((_QWORD *)a2 + 441))
  {
    v344 = (CMMsl::WorkoutRecorderMagnetometer *)operator new();
    v345 = CMMsl::WorkoutRecorderMagnetometer::WorkoutRecorderMagnetometer(v344, *((const CMMsl::Magnetometer ***)a2 + 441));
    v346 = *((_QWORD *)this + 441);
    *((_QWORD *)this + 441) = v345;
    if (v346)
      (*(void (**)(uint64_t))(*(_QWORD *)v346 + 8))(v346);
  }
  if (*((_QWORD *)a2 + 435))
  {
    v347 = (CMMsl::WorkoutRecorderCompassCalibration *)operator new();
    v348 = CMMsl::WorkoutRecorderCompassCalibration::WorkoutRecorderCompassCalibration(v347, *((const CMMsl::CompassCalibration ***)a2 + 435));
    v349 = *((_QWORD *)this + 435);
    *((_QWORD *)this + 435) = v348;
    if (v349)
      (*(void (**)(uint64_t))(*(_QWORD *)v349 + 8))(v349);
  }
  if (*((_QWORD *)a2 + 332))
  {
    v350 = (char **)operator new();
    v351 = CMMsl::RawAudio::RawAudio(v350, *((char ***)a2 + 332));
    v352 = *((_QWORD *)this + 332);
    *((_QWORD *)this + 332) = v351;
    if (v352)
      (*(void (**)(uint64_t))(*(_QWORD *)v352 + 8))(v352);
  }
  if (*((_QWORD *)a2 + 73))
  {
    v353 = (CMMsl::CV3DPredictedPose *)operator new();
    v354 = CMMsl::CV3DPredictedPose::CV3DPredictedPose(v353, *((const CMMsl::CV3DPredictedPose **)a2 + 73));
    v355 = *((_QWORD *)this + 73);
    *((_QWORD *)this + 73) = v354;
    if (v355)
      (*(void (**)(uint64_t))(*(_QWORD *)v355 + 8))(v355);
  }
  if (*((_QWORD *)a2 + 60))
  {
    v356 = (CMMsl::BioMotionLinkLengthFitParameters *)operator new();
    v357 = CMMsl::BioMotionLinkLengthFitParameters::BioMotionLinkLengthFitParameters(v356, *((const CMMsl::BioMotionLinkLengthFitParameters **)a2 + 60));
    v358 = *((_QWORD *)this + 60);
    *((_QWORD *)this + 60) = v357;
    if (v358)
      (*(void (**)(uint64_t))(*(_QWORD *)v358 + 8))(v358);
  }
  if (*((_QWORD *)a2 + 61))
  {
    v359 = operator new();
    v360 = CMMsl::BioMotionOnlineLinkLengthUpdate::BioMotionOnlineLinkLengthUpdate(v359, *((const CMMsl::BioMotionOnlineLinkLengthUpdate **)a2 + 61));
    v361 = *((_QWORD *)this + 61);
    *((_QWORD *)this + 61) = v360;
    if (v361)
      (*(void (**)(uint64_t))(*(_QWORD *)v361 + 8))(v361);
  }
  if (*((_QWORD *)a2 + 266))
  {
    v362 = (CMMsl::ODTPose *)operator new();
    v363 = CMMsl::ODTPose::ODTPose(v362, *((const CMMsl::ODTPose **)a2 + 266));
    v364 = *((_QWORD *)this + 266);
    *((_QWORD *)this + 266) = v363;
    if (v364)
      (*(void (**)(uint64_t))(*(_QWORD *)v364 + 8))(v364);
  }
  if (*((_QWORD *)a2 + 299))
  {
    v365 = operator new();
    v366 = *((_QWORD *)a2 + 299);
    *(_QWORD *)v365 = &off_25135FFC8;
    *(_DWORD *)(v365 + 24) = 0;
    if ((*(_BYTE *)(v366 + 24) & 1) != 0)
    {
      v368 = *(_QWORD *)(v366 + 8);
      *(_BYTE *)(v365 + 24) = 1;
      *(_QWORD *)(v365 + 8) = v368;
      v367 = 3;
      if ((*(_BYTE *)(v366 + 24) & 2) == 0)
        goto LABEL_366;
    }
    else
    {
      v367 = 2;
      if ((*(_BYTE *)(v366 + 24) & 2) == 0)
      {
LABEL_366:
        v370 = *((_QWORD *)this + 299);
        *((_QWORD *)this + 299) = v365;
        if (v370)
          (*(void (**)(uint64_t))(*(_QWORD *)v370 + 8))(v370);
        goto LABEL_368;
      }
    }
    v369 = *(_QWORD *)(v366 + 16);
    *(_BYTE *)(v365 + 24) = v367;
    *(_QWORD *)(v365 + 16) = v369;
    goto LABEL_366;
  }
LABEL_368:
  if (*((_QWORD *)a2 + 300))
  {
    v371 = (CMMsl::PencilTouch *)operator new();
    v372 = CMMsl::PencilTouch::PencilTouch(v371, *((const CMMsl::PencilTouch **)a2 + 300));
    v373 = *((_QWORD *)this + 300);
    *((_QWORD *)this + 300) = v374;
    if (v373)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v373 + 8))(v373, v372);
  }
  if (*((_QWORD *)a2 + 48))
  {
    v375 = operator new();
    v376 = *((_QWORD *)a2 + 48);
    *(_QWORD *)v375 = &off_25135C608;
    *(_DWORD *)(v375 + 20) = 0;
    if ((*(_BYTE *)(v376 + 20) & 1) != 0)
    {
      v378 = *(_QWORD *)(v376 + 8);
      *(_BYTE *)(v375 + 20) = 1;
      *(_QWORD *)(v375 + 8) = v378;
      v377 = 3;
      if ((*(_BYTE *)(v376 + 20) & 2) == 0)
        goto LABEL_377;
    }
    else
    {
      v377 = 2;
      if ((*(_BYTE *)(v376 + 20) & 2) == 0)
      {
LABEL_377:
        v380 = *((_QWORD *)this + 48);
        *((_QWORD *)this + 48) = v375;
        if (v380)
          (*(void (**)(uint64_t))(*(_QWORD *)v380 + 8))(v380);
        goto LABEL_379;
      }
    }
    v379 = *(_DWORD *)(v376 + 16);
    *(_BYTE *)(v375 + 20) = v377;
    *(_DWORD *)(v375 + 16) = v379;
    goto LABEL_377;
  }
LABEL_379:
  if (!*((_QWORD *)a2 + 393))
    goto LABEL_387;
  v381 = operator new();
  v382 = *((_QWORD *)a2 + 393);
  *(_QWORD *)v381 = &off_2513615E0;
  *(_QWORD *)(v381 + 16) = 0;
  if ((*(_BYTE *)(v382 + 20) & 2) != 0)
  {
    v384 = *(_DWORD *)(v382 + 16);
    *(_BYTE *)(v381 + 20) = 2;
    *(_DWORD *)(v381 + 16) = v384;
    v383 = 3;
    if ((*(_BYTE *)(v382 + 20) & 1) == 0)
      goto LABEL_385;
    goto LABEL_384;
  }
  v383 = 1;
  if ((*(_BYTE *)(v382 + 20) & 1) != 0)
  {
LABEL_384:
    v385 = *(_QWORD *)(v382 + 8);
    *(_BYTE *)(v381 + 20) = v383;
    *(_QWORD *)(v381 + 8) = v385;
  }
LABEL_385:
  v386 = *((_QWORD *)this + 393);
  *((_QWORD *)this + 393) = v381;
  if (v386)
    (*(void (**)(uint64_t))(*(_QWORD *)v386 + 8))(v386);
LABEL_387:
  if (*((_QWORD *)a2 + 43))
  {
    v387 = (CMMsl::AppleCV3DSLAMState *)operator new();
    v388 = CMMsl::AppleCV3DSLAMState::AppleCV3DSLAMState(v387, *((const CMMsl::CV3DSLAMState ***)a2 + 43));
    v389 = *((_QWORD *)this + 43);
    *((_QWORD *)this + 43) = v388;
    if (v389)
      (*(void (**)(uint64_t))(*(_QWORD *)v389 + 8))(v389);
  }
  if (*((_QWORD *)a2 + 58))
  {
    v390 = (CMMsl::BioMotionAnchorPose *)operator new();
    v391 = CMMsl::BioMotionAnchorPose::BioMotionAnchorPose(v390, *((const CMMsl::BioMotionAnchor ***)a2 + 58));
    v392 = *((_QWORD *)this + 58);
    *((_QWORD *)this + 58) = v391;
    if (v392)
      (*(void (**)(uint64_t))(*(_QWORD *)v392 + 8))(v392);
  }
  if (*((_QWORD *)a2 + 64))
  {
    v393 = (CMMsl::BioMotionPropagatedAnchor *)operator new();
    v394 = CMMsl::BioMotionPropagatedAnchor::BioMotionPropagatedAnchor(v393, *((const CMMsl::PropagatedAnchor ***)a2 + 64));
    v395 = *((_QWORD *)this + 64);
    *((_QWORD *)this + 64) = v394;
    if (v395)
      (*(void (**)(uint64_t))(*(_QWORD *)v395 + 8))(v395);
  }
  if (*((_QWORD *)a2 + 420))
  {
    v396 = (CMMsl::WalkingSteadinessClassification *)operator new();
    v397 = CMMsl::WalkingSteadinessClassification::WalkingSteadinessClassification(v396, *((const CMMsl::WalkingSteadinessClassification **)a2 + 420));
    v398 = *((_QWORD *)this + 420);
    *((_QWORD *)this + 420) = v397;
    if (v398)
      (*(void (**)(uint64_t))(*(_QWORD *)v398 + 8))(v398);
  }
  if (*((_QWORD *)a2 + 375))
  {
    v399 = operator new();
    v400 = CMMsl::SteadinessModelResult::SteadinessModelResult(v399, *((const CMMsl::SteadinessModelResult **)a2 + 375));
    v401 = *((_QWORD *)this + 375);
    *((_QWORD *)this + 375) = v400;
    if (v401)
      (*(void (**)(uint64_t))(*(_QWORD *)v401 + 8))(v401);
  }
  if (*((_QWORD *)a2 + 370))
  {
    v402 = (CMMsl::SteadinessEvent *)operator new();
    v403 = CMMsl::SteadinessEvent::SteadinessEvent(v402, *((const CMMsl::SteadinessEvent **)a2 + 370));
    v404 = *((_QWORD *)this + 370);
    *((_QWORD *)this + 370) = v405;
    if (v404)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v404 + 8))(v404, v403);
  }
  if (*((_QWORD *)a2 + 373))
  {
    v406 = (CMMsl::SteadinessModelGaitBaselineFeatures *)operator new();
    v407 = CMMsl::SteadinessModelGaitBaselineFeatures::SteadinessModelGaitBaselineFeatures(v406, *((const CMMsl::SteadinessModelGaitBaselineFeatures **)a2 + 373));
    v408 = *((_QWORD *)this + 373);
    *((_QWORD *)this + 373) = v409;
    if (v408)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v408 + 8))(v408, v407);
  }
  if (*((_QWORD *)a2 + 372))
  {
    v410 = (CMMsl::SteadinessModelContinuousWalkingFeatures *)operator new();
    v411 = CMMsl::SteadinessModelContinuousWalkingFeatures::SteadinessModelContinuousWalkingFeatures(v410, *((const CMMsl::SteadinessModelContinuousWalkingFeatures **)a2 + 372));
    v412 = *((_QWORD *)this + 372);
    *((_QWORD *)this + 372) = v413;
    if (v412)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v412 + 8))(v412, v411);
  }
  if (*((_QWORD *)a2 + 376))
  {
    v414 = (CMMsl::SteadinessModelTemporalDispersionFeatures *)operator new();
    v415 = CMMsl::SteadinessModelTemporalDispersionFeatures::SteadinessModelTemporalDispersionFeatures(v414, *((const CMMsl::SteadinessModelTemporalDispersionFeatures **)a2 + 376));
    v416 = *((_QWORD *)this + 376);
    *((_QWORD *)this + 376) = v417;
    if (v416)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v416 + 8))(v416, v415);
  }
  if (*((_QWORD *)a2 + 377))
  {
    v418 = (CMMsl::SteadinessModelTemporalEntropyFeatures *)operator new();
    v419 = CMMsl::SteadinessModelTemporalEntropyFeatures::SteadinessModelTemporalEntropyFeatures(v418, *((const CMMsl::SteadinessModelTemporalEntropyFeatures **)a2 + 377));
    v420 = *((_QWORD *)this + 377);
    *((_QWORD *)this + 377) = v421;
    if (v420)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v420 + 8))(v420, v419);
  }
  if (*((_QWORD *)a2 + 371))
  {
    v422 = (CMMsl::SteadinessModelBalanceFeatures *)operator new();
    v423 = CMMsl::SteadinessModelBalanceFeatures::SteadinessModelBalanceFeatures(v422, *((const CMMsl::SteadinessModelBalanceFeatures **)a2 + 371));
    v424 = *((_QWORD *)this + 371);
    *((_QWORD *)this + 371) = v425;
    if (v424)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v424 + 8))(v424, v423);
  }
  if (*((_QWORD *)a2 + 242))
  {
    v426 = operator new();
    v427 = CMMsl::MagnetometerReset::MagnetometerReset(v426, *((const CMMsl::MagnetometerReset **)a2 + 242));
    v428 = *((_QWORD *)this + 242);
    *((_QWORD *)this + 242) = v427;
    if (v428)
      (*(void (**)(uint64_t))(*(_QWORD *)v428 + 8))(v428);
  }
  if (*((_QWORD *)a2 + 445))
  {
    v429 = (CMMsl::WorkoutRecorderWatchOnWristStatus *)operator new();
    v430 = CMMsl::WorkoutRecorderWatchOnWristStatus::WorkoutRecorderWatchOnWristStatus(v429, *((const CMMsl::WatchOnWristState ***)a2 + 445));
    v431 = *((_QWORD *)this + 445);
    *((_QWORD *)this + 445) = v430;
    if (v431)
      (*(void (**)(uint64_t))(*(_QWORD *)v431 + 8))(v431);
  }
  if (*((_QWORD *)a2 + 230))
  {
    v432 = (CMMsl::LiftToWakeOnHeadStatus *)operator new();
    v433 = CMMsl::LiftToWakeOnHeadStatus::LiftToWakeOnHeadStatus(v432, *((const CMMsl::LiftToWakeOnHeadStatus **)a2 + 230));
    v434 = *((_QWORD *)this + 230);
    *((_QWORD *)this + 230) = v435;
    if (v434)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v434 + 8))(v434, v433);
  }
  if (*((_QWORD *)a2 + 24))
  {
    v436 = (CMMsl::AccessoryMagnetometer *)operator new();
    v437 = CMMsl::AccessoryMagnetometer::AccessoryMagnetometer(v436, *((const CMMsl::Magnetometer ***)a2 + 24));
    v438 = *((_QWORD *)this + 24);
    *((_QWORD *)this + 24) = v437;
    if (v438)
      (*(void (**)(uint64_t))(*(_QWORD *)v438 + 8))(v438);
  }
  if (*((_QWORD *)a2 + 380))
  {
    v439 = operator new();
    v440 = CMMsl::StepCountEntryAddition::StepCountEntryAddition(v439, *((const CMMsl::StepCountEntryAddition **)a2 + 380));
    v441 = *((_QWORD *)this + 380);
    *((_QWORD *)this + 380) = v440;
    if (v441)
      (*(void (**)(uint64_t))(*(_QWORD *)v441 + 8))(v441);
  }
  if (*((_QWORD *)a2 + 381))
  {
    v442 = (CMMsl::StepDistanceFusionResult *)operator new();
    v443 = CMMsl::StepDistanceFusionResult::StepDistanceFusionResult(v442, *((const CMMsl::StepCountEntry ***)a2 + 381));
    v444 = *((_QWORD *)this + 381);
    *((_QWORD *)this + 381) = v443;
    if (v444)
      (*(void (**)(uint64_t))(*(_QWORD *)v444 + 8))(v444);
  }
  if (*((_QWORD *)a2 + 363))
  {
    v445 = (CMMsl::Skeleton3D *)operator new();
    v446 = CMMsl::Skeleton3D::Skeleton3D(v445, *((const CMMsl::Skeleton3D **)a2 + 363));
    v447 = *((_QWORD *)this + 363);
    *((_QWORD *)this + 363) = v446;
    if (v447)
      (*(void (**)(uint64_t))(*(_QWORD *)v447 + 8))(v447);
  }
  if (*((_QWORD *)a2 + 92))
  {
    v448 = (CMMsl::CVWatchCalories *)operator new();
    v449 = CMMsl::CVWatchCalories::CVWatchCalories(v448, *((const CMMsl::CVWatchCalories **)a2 + 92));
    v450 = *((_QWORD *)this + 92);
    *((_QWORD *)this + 92) = v451;
    if (v450)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v450 + 8))(v450, v449);
  }
  if (*((_QWORD *)a2 + 111))
  {
    v452 = (CMMsl::FaceBlendShapeCoefficientsSample *)operator new();
    v453 = CMMsl::FaceBlendShapeCoefficientsSample::FaceBlendShapeCoefficientsSample(v452, *((const CMMsl::FaceBlendShapeCoefficientsSample **)a2 + 111));
    v454 = *((_QWORD *)this + 111);
    *((_QWORD *)this + 111) = v453;
    if (v454)
      (*(void (**)(uint64_t))(*(_QWORD *)v454 + 8))(v454);
  }
  if (*((_QWORD *)a2 + 57))
  {
    v455 = operator new();
    v456 = CMMsl::BatteryStatus::BatteryStatus(v455, *((const CMMsl::BatteryStatus **)a2 + 57));
    v457 = *((_QWORD *)this + 57);
    *((_QWORD *)this + 57) = v456;
    if (v457)
      (*(void (**)(uint64_t))(*(_QWORD *)v457 + 8))(v457);
  }
  if (*((_QWORD *)a2 + 234))
  {
    v458 = operator new();
    v459 = *((_QWORD *)a2 + 234);
    *(_QWORD *)v458 = &off_25135F0E8;
    *(_DWORD *)(v458 + 12) = 0;
    if ((*(_BYTE *)(v459 + 12) & 1) != 0)
    {
      v460 = *(_BYTE *)(v459 + 8);
      *(_BYTE *)(v458 + 12) = 1;
      *(_BYTE *)(v458 + 8) = v460;
    }
    v461 = *((_QWORD *)this + 234);
    *((_QWORD *)this + 234) = v458;
    if (v461)
      (*(void (**)(uint64_t))(*(_QWORD *)v461 + 8))(v461);
  }
  if (*((_QWORD *)a2 + 56))
  {
    v462 = operator new();
    v463 = *((_QWORD *)a2 + 56);
    *(_QWORD *)v462 = &off_25135C7C8;
    *(_DWORD *)(v462 + 12) = 0;
    if ((*(_BYTE *)(v463 + 12) & 1) != 0)
    {
      v464 = *(_BYTE *)(v463 + 8);
      *(_BYTE *)(v462 + 12) = 1;
      *(_BYTE *)(v462 + 8) = v464;
    }
    v465 = *((_QWORD *)this + 56);
    *((_QWORD *)this + 56) = v462;
    if (v465)
      (*(void (**)(uint64_t))(*(_QWORD *)v465 + 8))(v465);
  }
  if (*((_QWORD *)a2 + 308))
  {
    v466 = operator new();
    v467 = *((_QWORD *)a2 + 308);
    *(_QWORD *)v466 = &off_2513601C0;
    *(_DWORD *)(v466 + 16) = 0;
    if ((*(_BYTE *)(v467 + 16) & 1) != 0)
    {
      v468 = *(_QWORD *)(v467 + 8);
      *(_BYTE *)(v466 + 16) = 1;
      *(_QWORD *)(v466 + 8) = v468;
    }
    v469 = *((_QWORD *)this + 308);
    *((_QWORD *)this + 308) = v466;
    if (v469)
      (*(void (**)(uint64_t))(*(_QWORD *)v469 + 8))(v469);
  }
  if (*((_QWORD *)a2 + 130))
  {
    v470 = (CMMsl::FocusModes *)operator new();
    v471 = CMMsl::FocusModes::FocusModes(v470, *((const CMMsl::FocusModes **)a2 + 130));
    v472 = *((_QWORD *)this + 130);
    *((_QWORD *)this + 130) = v471;
    if (v472)
      (*(void (**)(uint64_t))(*(_QWORD *)v472 + 8))(v472);
  }
  if (*((_QWORD *)a2 + 98))
  {
    v473 = operator new();
    v474 = *((_QWORD *)a2 + 98);
    *(_QWORD *)v473 = &off_25135D210;
    *(_DWORD *)(v473 + 12) = 0;
    if ((*(_BYTE *)(v474 + 12) & 1) != 0)
    {
      v475 = *(_BYTE *)(v474 + 8);
      *(_BYTE *)(v473 + 12) = 1;
      *(_BYTE *)(v473 + 8) = v475;
    }
    v476 = *((_QWORD *)this + 98);
    *((_QWORD *)this + 98) = v473;
    if (v476)
      (*(void (**)(uint64_t))(*(_QWORD *)v476 + 8))(v476);
  }
  if (*((_QWORD *)a2 + 1))
  {
    v477 = (_QWORD *)operator new();
    *v477 = &off_25135BC30;
    v478 = *v4;
    *v4 = (uint64_t)v477;
    if (v478)
      (*(void (**)(uint64_t))(*(_QWORD *)v478 + 8))(v478);
  }
  if (*((_QWORD *)a2 + 2))
  {
    v479 = (CMMsl::APWake *)operator new();
    v480 = CMMsl::APWake::APWake(v479, *((const CMMsl::APWake **)a2 + 2));
    v481 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v480;
    if (v481)
      (*(void (**)(uint64_t))(*(_QWORD *)v481 + 8))(v481);
  }
  if (*((_QWORD *)a2 + 40))
  {
    v482 = operator new();
    v483 = CMMsl::AltimeterKF::AltimeterKF(v482, *((const CMMsl::AltimeterKF **)a2 + 40));
    v484 = *((_QWORD *)this + 40);
    *((_QWORD *)this + 40) = v483;
    if (v484)
      (*(void (**)(uint64_t))(*(_QWORD *)v484 + 8))(v484);
  }
  if (*((_QWORD *)a2 + 231))
  {
    v485 = (CMMsl::LiftToWakeState *)operator new();
    v486 = CMMsl::LiftToWakeState::LiftToWakeState(v485, *((const CMMsl::LiftToWakeState **)a2 + 231));
    v487 = *((_QWORD *)this + 231);
    *((_QWORD *)this + 231) = v488;
    if (v487)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v487 + 8))(v487, v486);
  }
  if (*((_QWORD *)a2 + 406))
  {
    v489 = operator new();
    v490 = CMMsl::ViewObstructedState::ViewObstructedState(v489, *((const CMMsl::ViewObstructedState **)a2 + 406));
    v491 = *((_QWORD *)this + 406);
    *((_QWORD *)this + 406) = v490;
    if (v491)
      (*(void (**)(uint64_t))(*(_QWORD *)v491 + 8))(v491);
  }
  if (*((_QWORD *)a2 + 343))
  {
    v492 = (CMMsl::RunningFormMetrics *)operator new();
    v493 = CMMsl::RunningFormMetrics::RunningFormMetrics(v492, *((const CMMsl::RunningFormMetrics **)a2 + 343));
    v494 = *((_QWORD *)this + 343);
    *((_QWORD *)this + 343) = v495;
    if (v494)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v494 + 8))(v494, v493);
  }
  if (*((_QWORD *)a2 + 450))
  {
    v496 = (CMMsl::WorkoutSessionPriors *)operator new();
    v497 = CMMsl::WorkoutSessionPriors::WorkoutSessionPriors(v496, *((const CMMsl::WorkoutSessionPriors **)a2 + 450));
    v498 = *((_QWORD *)this + 450);
    *((_QWORD *)this + 450) = v497;
    if (v498)
      (*(void (**)(uint64_t))(*(_QWORD *)v498 + 8))(v498);
  }
  if (*((_QWORD *)a2 + 449))
  {
    v499 = (CMMsl::WorkoutRecorderWorkoutSessionPriors *)operator new();
    v500 = CMMsl::WorkoutRecorderWorkoutSessionPriors::WorkoutRecorderWorkoutSessionPriors(v499, *((const CMMsl::WorkoutSessionPriors ***)a2 + 449));
    v501 = *((_QWORD *)this + 449);
    *((_QWORD *)this + 449) = v500;
    if (v501)
      (*(void (**)(uint64_t))(*(_QWORD *)v501 + 8))(v501);
  }
  if (*((_QWORD *)a2 + 45))
  {
    v502 = (CMMsl::ARKitWorldPose *)operator new();
    v503 = CMMsl::ARKitWorldPose::ARKitWorldPose(v502, *((const CMMsl::ARKitWorldPose **)a2 + 45));
    v504 = *((_QWORD *)this + 45);
    *((_QWORD *)this + 45) = v503;
    if (v504)
      (*(void (**)(uint64_t))(*(_QWORD *)v504 + 8))(v504);
  }
  if (*((_QWORD *)a2 + 281))
  {
    v505 = operator new();
    v506 = *((_QWORD *)a2 + 281);
    *(_QWORD *)v505 = &off_25135FAF8;
    *(_DWORD *)(v505 + 20) = 0;
    if ((*(_BYTE *)(v506 + 20) & 2) != 0)
    {
      v508 = *(_DWORD *)(v506 + 16);
      *(_BYTE *)(v505 + 20) = 2;
      *(_DWORD *)(v505 + 16) = v508;
      v507 = 3;
      if ((*(_BYTE *)(v506 + 20) & 1) == 0)
        goto LABEL_506;
    }
    else
    {
      v507 = 1;
      if ((*(_BYTE *)(v506 + 20) & 1) == 0)
      {
LABEL_506:
        v510 = *((_QWORD *)this + 281);
        *((_QWORD *)this + 281) = v505;
        if (v510)
          (*(void (**)(uint64_t))(*(_QWORD *)v510 + 8))(v510);
        goto LABEL_508;
      }
    }
    v509 = *(_QWORD *)(v506 + 8);
    *(_BYTE *)(v505 + 20) = v507;
    *(_QWORD *)(v505 + 8) = v509;
    goto LABEL_506;
  }
LABEL_508:
  if (*((_QWORD *)a2 + 303))
  {
    v511 = (CMMsl::PocketDetectionPacket *)operator new();
    v512 = CMMsl::PocketDetectionPacket::PocketDetectionPacket(v511, *((const CMMsl::PocketDetectionPacket **)a2 + 303));
    v513 = *((_QWORD *)this + 303);
    *((_QWORD *)this + 303) = v514;
    if (v513)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v513 + 8))(v513, v512);
  }
  if (*((_QWORD *)a2 + 229))
  {
    v515 = (CMMsl::LiftToWakeFeaturesNeo *)operator new();
    v516 = CMMsl::LiftToWakeFeaturesNeo::LiftToWakeFeaturesNeo(v515, *((const CMMsl::LiftToWakeFeaturesNeo **)a2 + 229));
    v517 = *((_QWORD *)this + 229);
    *((_QWORD *)this + 229) = v518;
    if (v517)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v517 + 8))(v517, v516);
  }
  if (*((_QWORD *)a2 + 232))
  {
    v519 = operator new();
    v520 = CMMsl::LiftToWakeStatusNeo::LiftToWakeStatusNeo(v519, *((const CMMsl::LiftToWakeStatusNeo **)a2 + 232));
    v521 = *((_QWORD *)this + 232);
    *((_QWORD *)this + 232) = v520;
    if (v521)
      (*(void (**)(uint64_t))(*(_QWORD *)v521 + 8))(v521);
  }
  if (*((_QWORD *)a2 + 344))
  {
    v522 = operator new();
    v523 = CMMsl::RunningPower::RunningPower(v522, *((const CMMsl::RunningPower **)a2 + 344));
    v524 = *((_QWORD *)this + 344);
    *((_QWORD *)this + 344) = v523;
    if (v524)
      (*(void (**)(uint64_t))(*(_QWORD *)v524 + 8))(v524);
  }
  if (*((_QWORD *)a2 + 51))
  {
    v525 = operator new();
    v526 = CMMsl::BasebandCompassCoex::BasebandCompassCoex(v525, *((const CMMsl::BasebandCompassCoex **)a2 + 51));
    v527 = *((_QWORD *)this + 51);
    *((_QWORD *)this + 51) = v526;
    if (v527)
      (*(void (**)(uint64_t))(*(_QWORD *)v527 + 8))(v527);
  }
  if (*((_QWORD *)a2 + 52))
  {
    v528 = operator new();
    v529 = CMMsl::BasebandCompassCoexConstraints::BasebandCompassCoexConstraints(v528, *((const CMMsl::BasebandCompassCoexConstraints **)a2 + 52));
    v530 = *((_QWORD *)this + 52);
    *((_QWORD *)this + 52) = v529;
    if (v530)
      (*(void (**)(uint64_t))(*(_QWORD *)v530 + 8))(v530);
  }
  if (*((_QWORD *)a2 + 250))
  {
    v531 = (CMMsl::MotionContextActivity *)operator new();
    v532 = CMMsl::MotionContextActivity::MotionContextActivity(v531, *((const CMMsl::MotionContextActivity **)a2 + 250));
    v533 = *((_QWORD *)this + 250);
    *((_QWORD *)this + 250) = v532;
    if (v533)
      (*(void (**)(uint64_t))(*(_QWORD *)v533 + 8))(v533);
  }
  if (*((_QWORD *)a2 + 269))
  {
    v534 = operator new();
    v535 = *((_QWORD *)a2 + 269);
    *(_QWORD *)v534 = &off_25135F858;
    *(_QWORD *)(v534 + 8) = 0;
    if ((*(_BYTE *)(v535 + 12) & 1) != 0)
    {
      v536 = *(_DWORD *)(v535 + 8);
      *(_BYTE *)(v534 + 12) = 1;
      *(_DWORD *)(v534 + 8) = v536;
    }
    v537 = *((_QWORD *)this + 269);
    *((_QWORD *)this + 269) = v534;
    if (v537)
      (*(void (**)(uint64_t))(*(_QWORD *)v537 + 8))(v537);
  }
  if (*((_QWORD *)a2 + 9))
  {
    v538 = (char **)operator new();
    v539 = CMMsl::AccelTNBFrame::AccelTNBFrame(v538, *((char ***)a2 + 9));
    v540 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v539;
    if (v540)
      (*(void (**)(uint64_t))(*(_QWORD *)v540 + 8))(v540);
  }
  if (*((_QWORD *)a2 + 104))
  {
    v541 = (CMMsl::DoTEstimatorWithTNB *)operator new();
    v542 = CMMsl::DoTEstimatorWithTNB::DoTEstimatorWithTNB(v541, *((const CMMsl::DoTEstimatorWithTNB **)a2 + 104));
    v543 = *((_QWORD *)this + 104);
    *((_QWORD *)this + 104) = v542;
    if (v543)
      (*(void (**)(uint64_t))(*(_QWORD *)v543 + 8))(v543);
  }
  if (*((_QWORD *)a2 + 282))
  {
    v544 = (CMMsl::PdrMLModelOutput *)operator new();
    v545 = CMMsl::PdrMLModelOutput::PdrMLModelOutput(v544, *((const CMMsl::PdrMLModelOutput **)a2 + 282));
    v546 = *((_QWORD *)this + 282);
    *((_QWORD *)this + 282) = v545;
    if (v546)
      (*(void (**)(uint64_t))(*(_QWORD *)v546 + 8))(v546);
  }
  if (*((_QWORD *)a2 + 136))
  {
    v547 = (CMMsl::GaitEventsModelOutput *)operator new();
    v548 = CMMsl::GaitEventsModelOutput::GaitEventsModelOutput(v547, *((const CMMsl::GaitEventsModelOutput **)a2 + 136));
    v549 = *((_QWORD *)this + 136);
    *((_QWORD *)this + 136) = v550;
    if (v549)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v549 + 8))(v549, v548);
  }
  if (*((_QWORD *)a2 + 137))
  {
    v551 = (CMMsl::GaitEventsStrideAggregation *)operator new();
    v552 = CMMsl::GaitEventsStrideAggregation::GaitEventsStrideAggregation(v551, *((const CMMsl::GaitEventsStrideAggregation **)a2 + 137));
    v553 = *((_QWORD *)this + 137);
    *((_QWORD *)this + 137) = v554;
    if (v553)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v553 + 8))(v553, v552);
  }
  if (*((_QWORD *)a2 + 135))
  {
    v555 = (CMMsl::GaitEventsHKResult *)operator new();
    v556 = CMMsl::GaitEventsHKResult::GaitEventsHKResult(v555, *((const CMMsl::GaitEventsHKResult **)a2 + 135));
    v557 = *((_QWORD *)this + 135);
    *((_QWORD *)this + 135) = v558;
    if (v557)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v557 + 8))(v557, v556);
  }
  if (*((_QWORD *)a2 + 112))
  {
    v559 = operator new();
    v560 = *((_QWORD *)a2 + 112);
    *(_QWORD *)v559 = &off_25135D558;
    *(_DWORD *)(v559 + 20) = 0;
    if ((*(_BYTE *)(v560 + 20) & 1) != 0)
    {
      v562 = *(_QWORD *)(v560 + 8);
      *(_BYTE *)(v559 + 20) = 1;
      *(_QWORD *)(v559 + 8) = v562;
      v561 = 3;
      if ((*(_BYTE *)(v560 + 20) & 2) == 0)
        goto LABEL_558;
    }
    else
    {
      v561 = 2;
      if ((*(_BYTE *)(v560 + 20) & 2) == 0)
      {
LABEL_558:
        v564 = *((_QWORD *)this + 112);
        *((_QWORD *)this + 112) = v559;
        if (v564)
          (*(void (**)(uint64_t))(*(_QWORD *)v564 + 8))(v564);
        goto LABEL_560;
      }
    }
    v563 = *(_BYTE *)(v560 + 16);
    *(_BYTE *)(v559 + 20) = v561;
    *(_BYTE *)(v559 + 16) = v563;
    goto LABEL_558;
  }
LABEL_560:
  if (*((_QWORD *)a2 + 433))
  {
    v565 = (CMMsl::WorkoutRecorderAveragedALSData *)operator new();
    v566 = CMMsl::WorkoutRecorderAveragedALSData::WorkoutRecorderAveragedALSData(v565, *((const CMMsl::WorkoutRecorderAveragedALSData **)a2 + 433));
    v567 = *((_QWORD *)this + 433);
    *((_QWORD *)this + 433) = v566;
    if (v567)
      (*(void (**)(uint64_t))(*(_QWORD *)v567 + 8))(v567);
  }
  if (*((_QWORD *)a2 + 386))
  {
    v568 = operator new();
    v569 = CMMsl::StrideCalEntry::StrideCalEntry(v568, *((const CMMsl::StrideCalEntry **)a2 + 386));
    v570 = *((_QWORD *)this + 386);
    *((_QWORD *)this + 386) = v569;
    if (v570)
      (*(void (**)(uint64_t))(*(_QWORD *)v570 + 8))(v570);
  }
  if (*((_QWORD *)a2 + 346))
  {
    v571 = operator new();
    v572 = CMMsl::RunningSpeedKFResult::RunningSpeedKFResult(v571, *((const CMMsl::RunningSpeedKFResult **)a2 + 346));
    v573 = *((_QWORD *)this + 346);
    *((_QWORD *)this + 346) = v572;
    if (v573)
      (*(void (**)(uint64_t))(*(_QWORD *)v573 + 8))(v573);
  }
  if (*((_QWORD *)a2 + 327))
  {
    v574 = operator new();
    v575 = CMMsl::ProxPDP::ProxPDP(v574, *((const CMMsl::ProxPDP **)a2 + 327));
    v576 = *((_QWORD *)this + 327);
    *((_QWORD *)this + 327) = v575;
    if (v576)
      (*(void (**)(uint64_t))(*(_QWORD *)v576 + 8))(v576);
  }
  if (*((_QWORD *)a2 + 224))
  {
    v577 = (CMMsl::KeyboardMotionFeatures *)operator new();
    v578 = CMMsl::KeyboardMotionFeatures::KeyboardMotionFeatures(v577, *((const CMMsl::KeyboardMotionFeatures **)a2 + 224));
    v579 = *((_QWORD *)this + 224);
    *((_QWORD *)this + 224) = v580;
    if (v579)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v579 + 8))(v579, v578);
  }
  if (*((_QWORD *)a2 + 225))
  {
    v581 = operator new();
    v582 = *((_QWORD *)a2 + 225);
    *(_QWORD *)v581 = &off_25135EEF0;
    *(_DWORD *)(v581 + 20) = 0;
    if ((*(_BYTE *)(v582 + 20) & 1) != 0)
    {
      v584 = *(_QWORD *)(v582 + 8);
      *(_BYTE *)(v581 + 20) = 1;
      *(_QWORD *)(v581 + 8) = v584;
      v583 = 3;
      if ((*(_BYTE *)(v582 + 20) & 2) == 0)
        goto LABEL_581;
    }
    else
    {
      v583 = 2;
      if ((*(_BYTE *)(v582 + 20) & 2) == 0)
      {
LABEL_581:
        v586 = *((_QWORD *)this + 225);
        *((_QWORD *)this + 225) = v581;
        if (v586)
          (*(void (**)(uint64_t))(*(_QWORD *)v586 + 8))(v586);
        goto LABEL_583;
      }
    }
    v585 = *(_DWORD *)(v582 + 16);
    *(_BYTE *)(v581 + 20) = v583;
    *(_DWORD *)(v581 + 16) = v585;
    goto LABEL_581;
  }
LABEL_583:
  if (!*((_QWORD *)a2 + 38))
    goto LABEL_591;
  v587 = operator new();
  v588 = *((_QWORD *)a2 + 38);
  *(_QWORD *)v587 = &off_25135BBF8;
  *(_DWORD *)(v587 + 20) = 0;
  if ((*(_BYTE *)(v588 + 20) & 1) != 0)
  {
    v590 = *(_QWORD *)(v588 + 8);
    *(_BYTE *)(v587 + 20) = 1;
    *(_QWORD *)(v587 + 8) = v590;
    v589 = 3;
    if ((*(_BYTE *)(v588 + 20) & 2) == 0)
      goto LABEL_589;
    goto LABEL_588;
  }
  v589 = 2;
  if ((*(_BYTE *)(v588 + 20) & 2) != 0)
  {
LABEL_588:
    v591 = *(_DWORD *)(v588 + 16);
    *(_BYTE *)(v587 + 20) = v589;
    *(_DWORD *)(v587 + 16) = v591;
  }
LABEL_589:
  v592 = *((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = v587;
  if (v592)
    (*(void (**)(uint64_t))(*(_QWORD *)v592 + 8))(v592);
LABEL_591:
  if (!*((_QWORD *)a2 + 223))
    goto LABEL_599;
  v593 = operator new();
  v594 = *((_QWORD *)a2 + 223);
  *(_QWORD *)v593 = &off_25135EE80;
  *(_DWORD *)(v593 + 20) = 0;
  if ((*(_BYTE *)(v594 + 20) & 1) != 0)
  {
    v596 = *(_QWORD *)(v594 + 8);
    *(_BYTE *)(v593 + 20) = 1;
    *(_QWORD *)(v593 + 8) = v596;
    v595 = 3;
    if ((*(_BYTE *)(v594 + 20) & 2) == 0)
      goto LABEL_597;
    goto LABEL_596;
  }
  v595 = 2;
  if ((*(_BYTE *)(v594 + 20) & 2) != 0)
  {
LABEL_596:
    v597 = *(_BYTE *)(v594 + 16);
    *(_BYTE *)(v593 + 20) = v595;
    *(_BYTE *)(v593 + 16) = v597;
  }
LABEL_597:
  v598 = *((_QWORD *)this + 223);
  *((_QWORD *)this + 223) = v593;
  if (v598)
    (*(void (**)(uint64_t))(*(_QWORD *)v598 + 8))(v598);
LABEL_599:
  if (*((_QWORD *)a2 + 417))
  {
    v599 = (CMMsl::WakeGestureNotification *)operator new();
    v600 = CMMsl::WakeGestureNotification::WakeGestureNotification(v599, *((const CMMsl::WakeGestureNotification **)a2 + 417));
    v601 = *((_QWORD *)this + 417);
    *((_QWORD *)this + 417) = v602;
    if (v601)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v601 + 8))(v601, v600);
  }
  if (*((_QWORD *)a2 + 325))
  {
    v603 = (CMMsl::ProxBaselineEstimatorState *)operator new();
    v604 = CMMsl::ProxBaselineEstimatorState::ProxBaselineEstimatorState(v603, *((const CMMsl::ProxBaselineEstimatorState **)a2 + 325));
    v605 = *((_QWORD *)this + 325);
    *((_QWORD *)this + 325) = v606;
    if (v605)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v605 + 8))(v605, v604);
  }
  if (*((_QWORD *)a2 + 54))
  {
    v607 = (CMMsl::BaselineResetCheck *)operator new();
    v608 = CMMsl::BaselineResetCheck::BaselineResetCheck(v607, *((const CMMsl::BaselineResetCheck **)a2 + 54));
    v609 = *((_QWORD *)this + 54);
    *((_QWORD *)this + 54) = v610;
    if (v609)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v609 + 8))(v609, v608);
  }
  if (*((_QWORD *)a2 + 339))
  {
    v611 = operator new();
    v612 = CMMsl::RhythmicGnssOperatorStatus::RhythmicGnssOperatorStatus(v611, *((const CMMsl::RhythmicGnssOperatorStatus **)a2 + 339));
    v613 = *((_QWORD *)this + 339);
    *((_QWORD *)this + 339) = v612;
    if (v613)
      (*(void (**)(uint64_t))(*(_QWORD *)v613 + 8))(v613);
  }
  if (*((_QWORD *)a2 + 226))
  {
    v614 = operator new();
    v615 = *((_QWORD *)a2 + 226);
    *(_QWORD *)v614 = &off_25135EF28;
    *(_DWORD *)(v614 + 20) = 0;
    if ((*(_BYTE *)(v615 + 20) & 1) != 0)
    {
      v617 = *(_QWORD *)(v615 + 8);
      *(_BYTE *)(v614 + 20) = 1;
      *(_QWORD *)(v614 + 8) = v617;
      v616 = 3;
      if ((*(_BYTE *)(v615 + 20) & 2) == 0)
        goto LABEL_617;
    }
    else
    {
      v616 = 2;
      if ((*(_BYTE *)(v615 + 20) & 2) == 0)
      {
LABEL_617:
        v619 = *((_QWORD *)this + 226);
        *((_QWORD *)this + 226) = v614;
        if (v619)
          (*(void (**)(uint64_t))(*(_QWORD *)v619 + 8))(v619);
        goto LABEL_619;
      }
    }
    v618 = *(_BYTE *)(v615 + 16);
    *(_BYTE *)(v614 + 20) = v616;
    *(_BYTE *)(v614 + 16) = v618;
    goto LABEL_617;
  }
LABEL_619:
  if (!*((_QWORD *)a2 + 222))
    goto LABEL_627;
  v620 = operator new();
  v621 = *((_QWORD *)a2 + 222);
  *(_QWORD *)v620 = &off_25135EE48;
  *(_DWORD *)(v620 + 20) = 0;
  if ((*(_BYTE *)(v621 + 20) & 1) != 0)
  {
    v623 = *(_QWORD *)(v621 + 8);
    *(_BYTE *)(v620 + 20) = 1;
    *(_QWORD *)(v620 + 8) = v623;
    v622 = 3;
    if ((*(_BYTE *)(v621 + 20) & 2) == 0)
      goto LABEL_625;
    goto LABEL_624;
  }
  v622 = 2;
  if ((*(_BYTE *)(v621 + 20) & 2) != 0)
  {
LABEL_624:
    v624 = *(_BYTE *)(v621 + 16);
    *(_BYTE *)(v620 + 20) = v622;
    *(_BYTE *)(v620 + 16) = v624;
  }
LABEL_625:
  v625 = *((_QWORD *)this + 222);
  *((_QWORD *)this + 222) = v620;
  if (v625)
    (*(void (**)(uint64_t))(*(_QWORD *)v625 + 8))(v625);
LABEL_627:
  if (*((_QWORD *)a2 + 50))
  {
    v626 = (CMMsl::BacklightState *)operator new();
    v627 = CMMsl::BacklightState::BacklightState(v626, *((const CMMsl::BacklightState **)a2 + 50));
    v628 = *((_QWORD *)this + 50);
    *((_QWORD *)this + 50) = v627;
    if (v628)
      (*(void (**)(uint64_t))(*(_QWORD *)v628 + 8))(v628);
  }
  if (*((_QWORD *)a2 + 55))
  {
    v629 = (CMMsl::BatchedLocationFromOdometer *)operator new();
    v630 = CMMsl::BatchedLocationFromOdometer::BatchedLocationFromOdometer(v629, *((const CMMsl::MotionGPSLocation ***)a2 + 55));
    v631 = *((_QWORD *)this + 55);
    *((_QWORD *)this + 55) = v630;
    if (v631)
      (*(void (**)(uint64_t))(*(_QWORD *)v631 + 8))(v631);
  }
  if (*((_QWORD *)a2 + 165))
  {
    v632 = (CMMsl::HeartRateReference *)operator new();
    v633 = CMMsl::HeartRateReference::HeartRateReference(v632, *((const CMMsl::HeartRateReference **)a2 + 165));
    v634 = *((_QWORD *)this + 165);
    *((_QWORD *)this + 165) = v635;
    if (v634)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v634 + 8))(v634, v633);
  }
  if (*((_QWORD *)a2 + 362))
  {
    v636 = (CMMsl::Skeleton2D *)operator new();
    v637 = CMMsl::Skeleton2D::Skeleton2D(v636, *((const CMMsl::Skeleton2D **)a2 + 362));
    v638 = *((_QWORD *)this + 362);
    *((_QWORD *)this + 362) = v637;
    if (v638)
      (*(void (**)(uint64_t))(*(_QWORD *)v638 + 8))(v638);
  }
  if (*((_QWORD *)a2 + 365))
  {
    v639 = (CMMsl::Skeleton3DRetargeted *)operator new();
    v640 = CMMsl::Skeleton3DRetargeted::Skeleton3DRetargeted(v639, *((const CMMsl::Skeleton3DRetargeted **)a2 + 365));
    v641 = *((_QWORD *)this + 365);
    *((_QWORD *)this + 365) = v640;
    if (v641)
      (*(void (**)(uint64_t))(*(_QWORD *)v641 + 8))(v641);
  }
  if (*((_QWORD *)a2 + 364))
  {
    v642 = (CMMsl::Skeleton3DLifted *)operator new();
    v643 = CMMsl::Skeleton3DLifted::Skeleton3DLifted(v642, *((const CMMsl::Skeleton3DLifted **)a2 + 364));
    v644 = *((_QWORD *)this + 364);
    *((_QWORD *)this + 364) = v643;
    if (v644)
      (*(void (**)(uint64_t))(*(_QWORD *)v644 + 8))(v644);
  }
  if (*((_QWORD *)a2 + 129))
  {
    v645 = (CMMsl::FitnessMachineSample *)operator new();
    v646 = CMMsl::FitnessMachineSample::FitnessMachineSample(v645, *((const CMMsl::FitnessMachineSample **)a2 + 129));
    v647 = *((_QWORD *)this + 129);
    *((_QWORD *)this + 129) = v648;
    if (v647)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v647 + 8))(v647, v646);
  }
  if (*((_QWORD *)a2 + 424))
  {
    v649 = (CMMsl::WatchHeartRateData *)operator new();
    v650 = CMMsl::WatchHeartRateData::WatchHeartRateData(v649, *((const CMMsl::WatchHeartRateData **)a2 + 424));
    v651 = *((_QWORD *)this + 424);
    *((_QWORD *)this + 424) = v650;
    if (v651)
      (*(void (**)(uint64_t))(*(_QWORD *)v651 + 8))(v651);
  }
  if (*((_QWORD *)a2 + 115))
  {
    v652 = (CMMsl::FacePoseSynchronized *)operator new();
    v653 = CMMsl::FacePoseSynchronized::FacePoseSynchronized(v652, *((const CMMsl::FacePoseSynchronized **)a2 + 115));
    v654 = *((_QWORD *)this + 115);
    *((_QWORD *)this + 115) = v653;
    if (v654)
      (*(void (**)(uint64_t))(*(_QWORD *)v654 + 8))(v654);
  }
  if (*((_QWORD *)a2 + 421))
  {
    v655 = (CMMsl::WatchActiveCalories *)operator new();
    v656 = CMMsl::WatchActiveCalories::WatchActiveCalories(v655, *((const CMMsl::WatchActiveCalories **)a2 + 421));
    v657 = *((_QWORD *)this + 421);
    *((_QWORD *)this + 421) = v658;
    if (v657)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v657 + 8))(v657, v656);
  }
  if (*((_QWORD *)a2 + 422))
  {
    v659 = (CMMsl::WatchBasalCalories *)operator new();
    v660 = CMMsl::WatchBasalCalories::WatchBasalCalories(v659, *((const CMMsl::WatchBasalCalories **)a2 + 422));
    v661 = *((_QWORD *)this + 422);
    *((_QWORD *)this + 422) = v662;
    if (v661)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v661 + 8))(v661, v660);
  }
  if (*((_QWORD *)a2 + 395))
  {
    v663 = operator new();
    v664 = CMMsl::TrackRunData::TrackRunData(v663, *((const CMMsl::TrackRunData **)a2 + 395));
    v665 = *((_QWORD *)this + 395);
    *((_QWORD *)this + 395) = v664;
    if (v665)
      (*(void (**)(uint64_t))(*(_QWORD *)v665 + 8))(v665);
  }
  if (*((_QWORD *)a2 + 139))
  {
    v666 = (CMMsl::GnssAvailabilityPredictorData *)operator new();
    v667 = CMMsl::GnssAvailabilityPredictorData::GnssAvailabilityPredictorData(v666, *((const CMMsl::GnssAvailabilityPredictorData **)a2 + 139));
    v668 = *((_QWORD *)this + 139);
    *((_QWORD *)this + 139) = v669;
    if (v668)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v668 + 8))(v668, v667);
  }
  if (*((_QWORD *)a2 + 140))
  {
    v670 = (CMMsl::GnssLeechLocationData *)operator new();
    v671 = CMMsl::GnssLeechLocationData::GnssLeechLocationData(v670, *((const CMMsl::GnssLeechLocationData **)a2 + 140));
    v672 = *((_QWORD *)this + 140);
    *((_QWORD *)this + 140) = v671;
    if (v672)
      (*(void (**)(uint64_t))(*(_QWORD *)v672 + 8))(v672);
  }
  if (*((_QWORD *)a2 + 243))
  {
    v673 = operator new();
    v674 = CMMsl::MapsRouteHintData::MapsRouteHintData(v673, *((const CMMsl::MapsRouteHintData **)a2 + 243));
    v675 = *((_QWORD *)this + 243);
    *((_QWORD *)this + 243) = v674;
    if (v675)
      (*(void (**)(uint64_t))(*(_QWORD *)v675 + 8))(v675);
  }
  if (*((_QWORD *)a2 + 128))
  {
    v676 = (CMMsl::FitnessMachineData *)operator new();
    v677 = CMMsl::FitnessMachineData::FitnessMachineData(v676, *((const CMMsl::FitnessMachineData **)a2 + 128));
    v678 = *((_QWORD *)this + 128);
    *((_QWORD *)this + 128) = v679;
    if (v678)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v678 + 8))(v678, v677);
  }
  if (*((_QWORD *)a2 + 438))
  {
    v680 = (CMMsl::WorkoutRecorderFitnessMachineData *)operator new();
    v681 = CMMsl::WorkoutRecorderFitnessMachineData::WorkoutRecorderFitnessMachineData(v680, *((const CMMsl::FitnessMachineData ***)a2 + 438));
    v682 = *((_QWORD *)this + 438);
    *((_QWORD *)this + 438) = v681;
    if (v682)
      (*(void (**)(uint64_t))(*(_QWORD *)v682 + 8))(v682);
  }
  if (*((_QWORD *)a2 + 14))
  {
    v683 = operator new();
    v684 = CMMsl::AccessoryActivityStateUpdate::AccessoryActivityStateUpdate(v683, *((const CMMsl::AccessoryActivityStateUpdate **)a2 + 14));
    v685 = *((_QWORD *)this + 14);
    *((_QWORD *)this + 14) = v684;
    if (v685)
      (*(void (**)(uint64_t))(*(_QWORD *)v685 + 8))(v685);
  }
  if (*((_QWORD *)a2 + 291))
  {
    v686 = operator new();
    v687 = CMMsl::PedestrianFenceExit::PedestrianFenceExit(v686, *((const CMMsl::PedestrianFenceExit **)a2 + 291));
    v688 = *((_QWORD *)this + 291);
    *((_QWORD *)this + 291) = v687;
    if (v688)
      (*(void (**)(uint64_t))(*(_QWORD *)v688 + 8))(v688);
  }
  if (*((_QWORD *)a2 + 177))
  {
    v689 = operator new();
    v690 = CMMsl::InertialOdometry::InertialOdometry(v689, *((const CMMsl::InertialOdometry **)a2 + 177));
    v691 = *((_QWORD *)this + 177);
    *((_QWORD *)this + 177) = v690;
    if (v691)
      (*(void (**)(uint64_t))(*(_QWORD *)v691 + 8))(v691);
  }
  if (*((_QWORD *)a2 + 301))
  {
    v692 = operator new();
    v693 = CMMsl::PhysicalEffortInput::PhysicalEffortInput(v692, *((const CMMsl::PhysicalEffortInput **)a2 + 301));
    v694 = *((_QWORD *)this + 301);
    *((_QWORD *)this + 301) = v693;
    if (v694)
      (*(void (**)(uint64_t))(*(_QWORD *)v694 + 8))(v694);
  }
  if (*((_QWORD *)a2 + 302))
  {
    v695 = operator new();
    v696 = CMMsl::PhysicalEffortSample::PhysicalEffortSample(v695, *((const CMMsl::PhysicalEffortSample **)a2 + 302));
    v697 = *((_QWORD *)this + 302);
    *((_QWORD *)this + 302) = v696;
    if (v697)
      (*(void (**)(uint64_t))(*(_QWORD *)v697 + 8))(v697);
  }
  if (*((_QWORD *)a2 + 290))
  {
    v698 = operator new();
    v699 = CMMsl::PedestrianCalorieModelDebugging::PedestrianCalorieModelDebugging(v698, *((const CMMsl::PedestrianCalorieModelDebugging **)a2 + 290));
    v700 = *((_QWORD *)this + 290);
    *((_QWORD *)this + 290) = v699;
    if (v700)
      (*(void (**)(uint64_t))(*(_QWORD *)v700 + 8))(v700);
  }
  if (*((_QWORD *)a2 + 108))
  {
    v701 = (CMMsl::ElevationThreshold *)operator new();
    v702 = CMMsl::ElevationThreshold::ElevationThreshold(v701, *((const CMMsl::ElevationThreshold **)a2 + 108));
    v703 = *((_QWORD *)this + 108);
    *((_QWORD *)this + 108) = v702;
    if (v703)
      (*(void (**)(uint64_t))(*(_QWORD *)v703 + 8))(v703);
  }
  if (*((_QWORD *)a2 + 178))
  {
    v704 = (char **)operator new();
    v705 = CMMsl::InitialHistoricalMeanSeaLevelPressure::InitialHistoricalMeanSeaLevelPressure(v704, *((char ***)a2 + 178));
    v706 = *((_QWORD *)this + 178);
    *((_QWORD *)this + 178) = v705;
    if (v706)
      (*(void (**)(uint64_t))(*(_QWORD *)v706 + 8))(v706);
  }
  if (*((_QWORD *)a2 + 428))
  {
    v707 = operator new();
    v708 = *((_QWORD *)a2 + 428);
    *(_QWORD *)v707 = &off_251361DC0;
    *(_DWORD *)(v707 + 16) = 0;
    if ((*(_BYTE *)(v708 + 16) & 2) != 0)
    {
      v710 = *(_DWORD *)(v708 + 12);
      *(_BYTE *)(v707 + 16) = 2;
      *(_DWORD *)(v707 + 12) = v710;
      v709 = 3;
      if ((*(_BYTE *)(v708 + 16) & 1) == 0)
        goto LABEL_708;
    }
    else
    {
      v709 = 1;
      if ((*(_BYTE *)(v708 + 16) & 1) == 0)
      {
LABEL_708:
        v712 = *((_QWORD *)this + 428);
        *((_QWORD *)this + 428) = v707;
        if (v712)
          (*(void (**)(uint64_t))(*(_QWORD *)v712 + 8))(v712);
        goto LABEL_710;
      }
    }
    v711 = *(_DWORD *)(v708 + 8);
    *(_BYTE *)(v707 + 16) = v709;
    *(_DWORD *)(v707 + 8) = v711;
    goto LABEL_708;
  }
LABEL_710:
  if (*((_QWORD *)a2 + 294))
  {
    v713 = (CMMsl::PencilDeviceMotion *)operator new();
    v714 = CMMsl::PencilDeviceMotion::PencilDeviceMotion(v713, *((const CMMsl::PencilDeviceMotion **)a2 + 294));
    v715 = *((_QWORD *)this + 294);
    *((_QWORD *)this + 294) = v714;
    if (v715)
      (*(void (**)(uint64_t))(*(_QWORD *)v715 + 8))(v715);
  }
  if (*((_QWORD *)a2 + 297))
  {
    v716 = operator new();
    v717 = CMMsl::PencilFusionResult::PencilFusionResult(v716, *((const CMMsl::PencilFusionResult **)a2 + 297));
    v718 = *((_QWORD *)this + 297);
    *((_QWORD *)this + 297) = v717;
    if (v718)
      (*(void (**)(uint64_t))(*(_QWORD *)v718 + 8))(v718);
  }
  if (*((_QWORD *)a2 + 159))
  {
    v719 = operator new();
    v720 = *((_QWORD *)a2 + 159);
    *(_QWORD *)v719 = &off_25135E048;
    *(_DWORD *)(v719 + 20) = 0;
    if ((*(_BYTE *)(v720 + 20) & 1) != 0)
    {
      v722 = *(_QWORD *)(v720 + 8);
      *(_BYTE *)(v719 + 20) = 1;
      *(_QWORD *)(v719 + 8) = v722;
      v721 = 3;
      if ((*(_BYTE *)(v720 + 20) & 2) == 0)
        goto LABEL_722;
    }
    else
    {
      v721 = 2;
      if ((*(_BYTE *)(v720 + 20) & 2) == 0)
      {
LABEL_722:
        v724 = *((_QWORD *)this + 159);
        *((_QWORD *)this + 159) = v719;
        if (v724)
          (*(void (**)(uint64_t))(*(_QWORD *)v724 + 8))(v724);
        goto LABEL_724;
      }
    }
    v723 = *(_BYTE *)(v720 + 16);
    *(_BYTE *)(v719 + 20) = v721;
    *(_BYTE *)(v719 + 16) = v723;
    goto LABEL_722;
  }
LABEL_724:
  if (*((_QWORD *)a2 + 374))
  {
    v725 = (CMMsl::SteadinessModelHarmonicFeatures *)operator new();
    v726 = CMMsl::SteadinessModelHarmonicFeatures::SteadinessModelHarmonicFeatures(v725, *((const CMMsl::SteadinessModelHarmonicFeatures **)a2 + 374));
    v727 = *((_QWORD *)this + 374);
    *((_QWORD *)this + 374) = v728;
    if (v727)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v727 + 8))(v727, v726);
  }
  if (*((_QWORD *)a2 + 296))
  {
    v729 = (CMMsl::PencilFusionReplayResult *)operator new();
    v730 = CMMsl::PencilFusionReplayResult::PencilFusionReplayResult(v729, *((const CMMsl::PencilFusionReplayResult **)a2 + 296));
    v731 = *((_QWORD *)this + 296);
    *((_QWORD *)this + 296) = v730;
    if (v731)
      (*(void (**)(uint64_t))(*(_QWORD *)v731 + 8))(v731);
  }
  if (*((_QWORD *)a2 + 246))
  {
    v732 = (CMMsl::MobilitySmoothedGaitMetrics *)operator new();
    v733 = CMMsl::MobilitySmoothedGaitMetrics::MobilitySmoothedGaitMetrics(v732, *((const CMMsl::MobilitySmoothedGaitMetrics **)a2 + 246));
    v734 = *((_QWORD *)this + 246);
    *((_QWORD *)this + 246) = v735;
    if (v734)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v734 + 8))(v734, v733);
  }
  if (*((_QWORD *)a2 + 423))
  {
    v736 = operator new();
    v737 = *((_QWORD *)a2 + 423);
    *(_QWORD *)v736 = &off_251361C70;
    *(_DWORD *)(v736 + 24) = 0;
    if ((*(_BYTE *)(v737 + 24) & 2) != 0)
    {
      v739 = *(_QWORD *)(v737 + 16);
      *(_BYTE *)(v736 + 24) = 2;
      *(_QWORD *)(v736 + 16) = v739;
      v738 = 3;
      if ((*(_BYTE *)(v737 + 24) & 1) == 0)
        goto LABEL_739;
    }
    else
    {
      v738 = 1;
      if ((*(_BYTE *)(v737 + 24) & 1) == 0)
      {
LABEL_739:
        v741 = *((_QWORD *)this + 423);
        *((_QWORD *)this + 423) = v736;
        if (v741)
          (*(void (**)(uint64_t))(*(_QWORD *)v741 + 8))(v741);
        goto LABEL_741;
      }
    }
    v740 = *(_QWORD *)(v737 + 8);
    *(_BYTE *)(v736 + 24) = v738;
    *(_QWORD *)(v736 + 8) = v740;
    goto LABEL_739;
  }
LABEL_741:
  if (*((_QWORD *)a2 + 22))
  {
    v742 = operator new();
    v743 = CMMsl::AccessoryHeartRate::AccessoryHeartRate(v742, *((const CMMsl::AccessoryHeartRate **)a2 + 22));
    v744 = *((_QWORD *)this + 22);
    *((_QWORD *)this + 22) = v743;
    if (v744)
      (*(void (**)(uint64_t))(*(_QWORD *)v744 + 8))(v744);
  }
  if (*((_QWORD *)a2 + 26))
  {
    v745 = (CMMsl::AccessoryPPG *)operator new();
    v746 = CMMsl::AccessoryPPG::AccessoryPPG(v745, *((const CMMsl::AccessoryPPG **)a2 + 26));
    v747 = *((_QWORD *)this + 26);
    *((_QWORD *)this + 26) = v746;
    if (v747)
      (*(void (**)(uint64_t))(*(_QWORD *)v747 + 8))(v747);
  }
  if (*((_QWORD *)a2 + 254))
  {
    v748 = (char **)operator new();
    v749 = CMMsl::MotionLoiAltitudeData::MotionLoiAltitudeData(v748, *((char ***)a2 + 254));
    v750 = *((_QWORD *)this + 254);
    *((_QWORD *)this + 254) = v749;
    if (v750)
      (*(void (**)(uint64_t))(*(_QWORD *)v750 + 8))(v750);
  }
  if (*((_QWORD *)a2 + 97))
  {
    v751 = operator new();
    v752 = *((_QWORD *)a2 + 97);
    *(_QWORD *)v751 = &off_25135D1D8;
    *(_DWORD *)(v751 + 20) = 0;
    if ((*(_BYTE *)(v752 + 20) & 1) != 0)
    {
      v754 = *(_QWORD *)(v752 + 8);
      *(_BYTE *)(v751 + 20) = 1;
      *(_QWORD *)(v751 + 8) = v754;
      v753 = 3;
      if ((*(_BYTE *)(v752 + 20) & 2) == 0)
        goto LABEL_756;
    }
    else
    {
      v753 = 2;
      if ((*(_BYTE *)(v752 + 20) & 2) == 0)
      {
LABEL_756:
        v756 = *((_QWORD *)this + 97);
        *((_QWORD *)this + 97) = v751;
        if (v756)
          (*(void (**)(uint64_t))(*(_QWORD *)v756 + 8))(v756);
        goto LABEL_758;
      }
    }
    v755 = *(_DWORD *)(v752 + 16);
    *(_BYTE *)(v751 + 20) = v753;
    *(_DWORD *)(v751 + 16) = v755;
    goto LABEL_756;
  }
LABEL_758:
  if (*((_QWORD *)a2 + 306))
  {
    v757 = (char **)operator new();
    v758 = CMMsl::PostureJoint::PostureJoint(v757, *((char ***)a2 + 306));
    v759 = *((_QWORD *)this + 306);
    *((_QWORD *)this + 306) = v758;
    if (v759)
      (*(void (**)(uint64_t))(*(_QWORD *)v759 + 8))(v759);
  }
  if (*((_QWORD *)a2 + 307))
  {
    v760 = (CMMsl::PostureSkeleton *)operator new();
    v761 = CMMsl::PostureSkeleton::PostureSkeleton(v760, *((const CMMsl::PostureSkeleton **)a2 + 307));
    v762 = *((_QWORD *)this + 307);
    *((_QWORD *)this + 307) = v761;
    if (v762)
      (*(void (**)(uint64_t))(*(_QWORD *)v762 + 8))(v762);
  }
  if (*((_QWORD *)a2 + 167))
  {
    v763 = operator new();
    v764 = *((_QWORD *)a2 + 167);
    *(_QWORD *)v763 = &off_25135E010;
    *(_DWORD *)(v763 + 20) = 0;
    if ((*(_BYTE *)(v764 + 20) & 1) != 0)
    {
      v766 = *(_QWORD *)(v764 + 8);
      *(_BYTE *)(v763 + 20) = 1;
      *(_QWORD *)(v763 + 8) = v766;
      v765 = 3;
      if ((*(_BYTE *)(v764 + 20) & 2) == 0)
        goto LABEL_770;
    }
    else
    {
      v765 = 2;
      if ((*(_BYTE *)(v764 + 20) & 2) == 0)
      {
LABEL_770:
        v768 = *((_QWORD *)this + 167);
        *((_QWORD *)this + 167) = v763;
        if (v768)
          (*(void (**)(uint64_t))(*(_QWORD *)v768 + 8))(v768);
        goto LABEL_772;
      }
    }
    v767 = *(_BYTE *)(v764 + 16);
    *(_BYTE *)(v763 + 20) = v765;
    *(_BYTE *)(v763 + 16) = v767;
    goto LABEL_770;
  }
LABEL_772:
  if (*((_QWORD *)a2 + 437))
  {
    v769 = (CMMsl::WorkoutRecorderFaceCovered *)operator new();
    v770 = CMMsl::WorkoutRecorderFaceCovered::WorkoutRecorderFaceCovered(v769, *((const CMMsl::WorkoutRecorderFaceCovered **)a2 + 437));
    v771 = *((_QWORD *)this + 437);
    *((_QWORD *)this + 437) = v770;
    if (v771)
      (*(void (**)(uint64_t))(*(_QWORD *)v771 + 8))(v771);
  }
  if (*((_QWORD *)a2 + 384))
  {
    v772 = (CMMsl::StreamingHighFrequencyHeartRateData *)operator new();
    v773 = CMMsl::StreamingHighFrequencyHeartRateData::StreamingHighFrequencyHeartRateData(v772, *((const CMMsl::OnsetHeartRateData ***)a2 + 384));
    v774 = *((_QWORD *)this + 384);
    *((_QWORD *)this + 384) = v773;
    if (v774)
      (*(void (**)(uint64_t))(*(_QWORD *)v774 + 8))(v774);
  }
  if (*((_QWORD *)a2 + 396))
  {
    v775 = (CMMsl::UltraFastAccel *)operator new();
    v776 = CMMsl::UltraFastAccel::UltraFastAccel(v775, *((const CMMsl::Accel ***)a2 + 396));
    v777 = *((_QWORD *)this + 396);
    *((_QWORD *)this + 396) = v776;
    if (v777)
      (*(void (**)(uint64_t))(*(_QWORD *)v777 + 8))(v777);
  }
  if (*((_QWORD *)a2 + 3))
  {
    v778 = operator new();
    v779 = CMMsl::Accel::Accel(v778, *((const CMMsl::Accel **)a2 + 3));
    v780 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v779;
    if (v780)
      (*(void (**)(uint64_t))(*(_QWORD *)v780 + 8))(v780);
  }
  if (*((_QWORD *)a2 + 5))
  {
    v781 = operator new();
    v782 = CMMsl::AccelBatch::AccelBatch(v781, *((const CMMsl::AccelBatch **)a2 + 5));
    v783 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v782;
    if (v783)
      (*(void (**)(uint64_t))(*(_QWORD *)v783 + 8))(v783);
  }
  if (*((_QWORD *)a2 + 8))
  {
    v784 = (CMMsl::AccelOscarEmu *)operator new();
    v785 = CMMsl::AccelOscarEmu::AccelOscarEmu(v784, *((const CMMsl::Accel ***)a2 + 8));
    v786 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v785;
    if (v786)
      (*(void (**)(uint64_t))(*(_QWORD *)v786 + 8))(v786);
  }
  if (*((_QWORD *)a2 + 6))
  {
    v787 = (CMMsl::AccelGesture *)operator new();
    v788 = CMMsl::AccelGesture::AccelGesture(v787, *((const CMMsl::Accel ***)a2 + 6));
    v789 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = v788;
    if (v789)
      (*(void (**)(uint64_t))(*(_QWORD *)v789 + 8))(v789);
  }
  if (*((_QWORD *)a2 + 143))
  {
    v790 = operator new();
    v791 = CMMsl::Gyro::Gyro(v790, *((const CMMsl::Gyro **)a2 + 143));
    v792 = *((_QWORD *)this + 143);
    *((_QWORD *)this + 143) = v791;
    if (v792)
      (*(void (**)(uint64_t))(*(_QWORD *)v792 + 8))(v792);
  }
  if (*((_QWORD *)a2 + 157))
  {
    v793 = operator new();
    v794 = CMMsl::GyroOscarEmu::GyroOscarEmu(v793, *((const CMMsl::GyroOscarEmu **)a2 + 157));
    v795 = *((_QWORD *)this + 157);
    *((_QWORD *)this + 157) = v794;
    if (v795)
      (*(void (**)(uint64_t))(*(_QWORD *)v795 + 8))(v795);
  }
  if (*((_QWORD *)a2 + 158))
  {
    v796 = operator new();
    v797 = *((_QWORD *)a2 + 158);
    *(_QWORD *)v796 = &off_25135DFD8;
    *(_DWORD *)(v796 + 16) = 0;
    if ((*(_BYTE *)(v797 + 16) & 2) != 0)
    {
      v799 = *(_DWORD *)(v797 + 12);
      *(_BYTE *)(v796 + 16) = 2;
      *(_DWORD *)(v796 + 12) = v799;
      v798 = 3;
      if ((*(_BYTE *)(v797 + 16) & 1) == 0)
        goto LABEL_805;
    }
    else
    {
      v798 = 1;
      if ((*(_BYTE *)(v797 + 16) & 1) == 0)
      {
LABEL_805:
        v801 = *((_QWORD *)this + 158);
        *((_QWORD *)this + 158) = v796;
        if (v801)
          (*(void (**)(uint64_t))(*(_QWORD *)v801 + 8))(v801);
        goto LABEL_807;
      }
    }
    v800 = *(_DWORD *)(v797 + 8);
    *(_BYTE *)(v796 + 16) = v798;
    *(_DWORD *)(v796 + 8) = v800;
    goto LABEL_805;
  }
LABEL_807:
  if (*((_QWORD *)a2 + 144))
  {
    v802 = operator new();
    v803 = CMMsl::GyroBiasAndVariance::GyroBiasAndVariance(v802, *((const CMMsl::GyroBiasAndVariance **)a2 + 144));
    v804 = *((_QWORD *)this + 144);
    *((_QWORD *)this + 144) = v803;
    if (v804)
      (*(void (**)(uint64_t))(*(_QWORD *)v804 + 8))(v804);
  }
  if (*((_QWORD *)a2 + 148))
  {
    v805 = (char **)operator new();
    v806 = CMMsl::GyroBiasFit::GyroBiasFit(v805, *((char ***)a2 + 148));
    v807 = *((_QWORD *)this + 148);
    *((_QWORD *)this + 148) = v806;
    if (v807)
      (*(void (**)(uint64_t))(*(_QWORD *)v807 + 8))(v807);
  }
  if (*((_QWORD *)a2 + 154))
  {
    v808 = operator new();
    v809 = *((_QWORD *)a2 + 154);
    *(_QWORD *)v808 = &off_25135DEF8;
    *(_DWORD *)(v808 + 12) = 0;
    if ((*(_BYTE *)(v809 + 12) & 1) != 0)
    {
      v810 = *(_DWORD *)(v809 + 8);
      *(_BYTE *)(v808 + 12) = 1;
      *(_DWORD *)(v808 + 8) = v810;
    }
    v811 = *((_QWORD *)this + 154);
    *((_QWORD *)this + 154) = v808;
    if (v811)
      (*(void (**)(uint64_t))(*(_QWORD *)v811 + 8))(v811);
  }
  if (*((_QWORD *)a2 + 240))
  {
    v812 = operator new();
    v813 = CMMsl::Magnetometer::Magnetometer(v812, *((const CMMsl::Magnetometer **)a2 + 240));
    v814 = *((_QWORD *)this + 240);
    *((_QWORD *)this + 240) = v813;
    if (v814)
      (*(void (**)(uint64_t))(*(_QWORD *)v814 + 8))(v814);
  }
  if (*((_QWORD *)a2 + 80))
  {
    v815 = (CMMsl::Compass *)operator new();
    v816 = CMMsl::Compass::Compass(v815, *((const CMMsl::Compass **)a2 + 80));
    v817 = *((_QWORD *)this + 80);
    *((_QWORD *)this + 80) = v818;
    if (v817)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v817 + 8))(v817, v816);
  }
  if (*((_QWORD *)a2 + 81))
  {
    v819 = operator new();
    v820 = *((_QWORD *)a2 + 81);
    *(_QWORD *)v819 = &off_25135CE58;
    *(_DWORD *)(v819 + 20) = 0;
    if ((*(_BYTE *)(v820 + 20) & 1) != 0)
    {
      v822 = *(_QWORD *)(v820 + 8);
      *(_BYTE *)(v819 + 20) = 1;
      *(_QWORD *)(v819 + 8) = v822;
      v821 = 3;
      if ((*(_BYTE *)(v820 + 20) & 2) == 0)
        goto LABEL_830;
    }
    else
    {
      v821 = 2;
      if ((*(_BYTE *)(v820 + 20) & 2) == 0)
      {
LABEL_830:
        v824 = *((_QWORD *)this + 81);
        *((_QWORD *)this + 81) = v819;
        if (v824)
          (*(void (**)(uint64_t))(*(_QWORD *)v824 + 8))(v824);
        goto LABEL_832;
      }
    }
    v823 = *(_DWORD *)(v820 + 16);
    *(_BYTE *)(v819 + 20) = v821;
    *(_DWORD *)(v819 + 16) = v823;
    goto LABEL_830;
  }
LABEL_832:
  if (*((_QWORD *)a2 + 153))
  {
    v825 = operator new();
    v826 = CMMsl::GyroCompass::GyroCompass(v825, *((const CMMsl::GyroCompass **)a2 + 153));
    v827 = *((_QWORD *)this + 153);
    *((_QWORD *)this + 153) = v826;
    if (v827)
      (*(void (**)(uint64_t))(*(_QWORD *)v827 + 8))(v827);
  }
  if (*((_QWORD *)a2 + 82))
  {
    v828 = (CMMsl::CompassCalibration *)operator new();
    v829 = CMMsl::CompassCalibration::CompassCalibration(v828, *((const CMMsl::CompassCalibration **)a2 + 82));
    v830 = *((_QWORD *)this + 82);
    *((_QWORD *)this + 82) = v831;
    if (v830)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v830 + 8))(v830, v829);
  }
  if (*((_QWORD *)a2 + 316))
  {
    v832 = (CMMsl::Pressure *)operator new();
    v833 = CMMsl::Pressure::Pressure(v832, *((const CMMsl::Pressure **)a2 + 316));
    v834 = *((_QWORD *)this + 316);
    *((_QWORD *)this + 316) = v835;
    if (v834)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v834 + 8))(v834, v833);
  }
  if (*((_QWORD *)a2 + 323))
  {
    v836 = (CMMsl::PressureOscarEmu *)operator new();
    v837 = CMMsl::PressureOscarEmu::PressureOscarEmu(v836, *((const CMMsl::Pressure ***)a2 + 323));
    v838 = *((_QWORD *)this + 323);
    *((_QWORD *)this + 323) = v837;
    if (v838)
      (*(void (**)(uint64_t))(*(_QWORD *)v838 + 8))(v838);
  }
  if (*((_QWORD *)a2 + 319))
  {
    v839 = (CMMsl::PressureFiltered *)operator new();
    v840 = CMMsl::PressureFiltered::PressureFiltered(v839, *((const CMMsl::Pressure ***)a2 + 319));
    v841 = *((_QWORD *)this + 319);
    *((_QWORD *)this + 319) = v840;
    if (v841)
      (*(void (**)(uint64_t))(*(_QWORD *)v841 + 8))(v841);
  }
  if (*((_QWORD *)a2 + 324))
  {
    v842 = operator new();
    v843 = *((_QWORD *)a2 + 324);
    *(_QWORD *)v842 = &off_251360578;
    *(_DWORD *)(v842 + 20) = 0;
    if ((*(_BYTE *)(v843 + 20) & 1) != 0)
    {
      v845 = *(_QWORD *)(v843 + 8);
      *(_BYTE *)(v842 + 20) = 1;
      *(_QWORD *)(v842 + 8) = v845;
      v844 = 3;
      if ((*(_BYTE *)(v843 + 20) & 2) == 0)
        goto LABEL_853;
    }
    else
    {
      v844 = 2;
      if ((*(_BYTE *)(v843 + 20) & 2) == 0)
      {
LABEL_853:
        v847 = *((_QWORD *)this + 324);
        *((_QWORD *)this + 324) = v842;
        if (v847)
          (*(void (**)(uint64_t))(*(_QWORD *)v847 + 8))(v847);
        goto LABEL_855;
      }
    }
    v846 = *(_DWORD *)(v843 + 16);
    *(_BYTE *)(v842 + 20) = v844;
    *(_DWORD *)(v842 + 16) = v846;
    goto LABEL_853;
  }
LABEL_855:
  if (!*((_QWORD *)a2 + 394))
    goto LABEL_863;
  v848 = operator new();
  v849 = *((_QWORD *)a2 + 394);
  *(_QWORD *)v848 = &off_251361618;
  *(_DWORD *)(v848 + 20) = 0;
  if ((*(_BYTE *)(v849 + 20) & 1) != 0)
  {
    v851 = *(_QWORD *)(v849 + 8);
    *(_BYTE *)(v848 + 20) = 1;
    *(_QWORD *)(v848 + 8) = v851;
    v850 = 3;
    if ((*(_BYTE *)(v849 + 20) & 2) == 0)
      goto LABEL_861;
    goto LABEL_860;
  }
  v850 = 2;
  if ((*(_BYTE *)(v849 + 20) & 2) != 0)
  {
LABEL_860:
    v852 = *(_BYTE *)(v849 + 16);
    *(_BYTE *)(v848 + 20) = v850;
    *(_BYTE *)(v848 + 16) = v852;
  }
LABEL_861:
  v853 = *((_QWORD *)this + 394);
  *((_QWORD *)this + 394) = v848;
  if (v853)
    (*(void (**)(uint64_t))(*(_QWORD *)v853 + 8))(v853);
LABEL_863:
  if (*((_QWORD *)a2 + 93))
  {
    v854 = (CMMsl::DeviceMotion *)operator new();
    v855 = CMMsl::DeviceMotion::DeviceMotion(v854, *((const CMMsl::DeviceMotion **)a2 + 93));
    v856 = *((_QWORD *)this + 93);
    *((_QWORD *)this + 93) = v857;
    if (v856)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v856 + 8))(v856, v855);
  }
  if (*((_QWORD *)a2 + 256))
  {
    v858 = (CMMsl::MotionStateUpdate *)operator new();
    v859 = CMMsl::MotionStateUpdate::MotionStateUpdate(v858, *((const CMMsl::MotionStateUpdate **)a2 + 256));
    v860 = *((_QWORD *)this + 256);
    *((_QWORD *)this + 256) = v859;
    if (v860)
      (*(void (**)(uint64_t))(*(_QWORD *)v860 + 8))(v860);
  }
  if (*((_QWORD *)a2 + 7))
  {
    v861 = (CMMsl::AccelGps *)operator new();
    v862 = CMMsl::AccelGps::AccelGps(v861, *((const CMMsl::AccelGps **)a2 + 7));
    v863 = *((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v864;
    if (v863)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v863 + 8))(v863, v862);
  }
  if (*((_QWORD *)a2 + 156))
  {
    v865 = (CMMsl::GyroGps *)operator new();
    v866 = CMMsl::GyroGps::GyroGps(v865, *((const CMMsl::GyroGps **)a2 + 156));
    v867 = *((_QWORD *)this + 156);
    *((_QWORD *)this + 156) = v868;
    if (v867)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v867 + 8))(v867, v866);
  }
  if (*((_QWORD *)a2 + 322))
  {
    v869 = (CMMsl::PressureGps *)operator new();
    v870 = CMMsl::PressureGps::PressureGps(v869, *((const CMMsl::Pressure ***)a2 + 322));
    v871 = *((_QWORD *)this + 322);
    *((_QWORD *)this + 322) = v870;
    if (v871)
      (*(void (**)(uint64_t))(*(_QWORD *)v871 + 8))(v871);
  }
  if (*((_QWORD *)a2 + 49))
  {
    v872 = operator new();
    v873 = CMMsl::BTConnection::BTConnection(v872, *((const CMMsl::BTConnection **)a2 + 49));
    v874 = *((_QWORD *)this + 49);
    *((_QWORD *)this + 49) = v873;
    if (v874)
      (*(void (**)(uint64_t))(*(_QWORD *)v874 + 8))(v874);
  }
  if (*((_QWORD *)a2 + 355))
  {
    v875 = operator new();
    v876 = *((_QWORD *)a2 + 355);
    *(_QWORD *)v875 = &off_251360CE8;
    *(_DWORD *)(v875 + 20) = 0;
    if ((*(_BYTE *)(v876 + 20) & 1) != 0)
    {
      v878 = *(_QWORD *)(v876 + 8);
      *(_BYTE *)(v875 + 20) = 1;
      *(_QWORD *)(v875 + 8) = v878;
      v877 = 3;
      if ((*(_BYTE *)(v876 + 20) & 2) == 0)
        goto LABEL_887;
    }
    else
    {
      v877 = 2;
      if ((*(_BYTE *)(v876 + 20) & 2) == 0)
      {
LABEL_887:
        v880 = *((_QWORD *)this + 355);
        *((_QWORD *)this + 355) = v875;
        if (v880)
          (*(void (**)(uint64_t))(*(_QWORD *)v880 + 8))(v880);
        goto LABEL_889;
      }
    }
    v879 = *(_DWORD *)(v876 + 16);
    *(_BYTE *)(v875 + 20) = v877;
    *(_DWORD *)(v875 + 16) = v879;
    goto LABEL_887;
  }
LABEL_889:
  if (*((_QWORD *)a2 + 233))
  {
    v881 = operator new();
    v882 = CMMsl::LocationOscarEmu::LocationOscarEmu(v881, *((const CMMsl::LocationOscarEmu **)a2 + 233));
    v883 = *((_QWORD *)this + 233);
    *((_QWORD *)this + 233) = v882;
    if (v883)
      (*(void (**)(uint64_t))(*(_QWORD *)v883 + 8))(v883);
  }
  if (*((_QWORD *)a2 + 252))
  {
    v884 = operator new();
    v885 = CMMsl::MotionHint::MotionHint(v884, *((const CMMsl::MotionHint **)a2 + 252));
    v886 = *((_QWORD *)this + 252);
    *((_QWORD *)this + 252) = v885;
    if (v886)
      (*(void (**)(uint64_t))(*(_QWORD *)v886 + 8))(v886);
  }
  if (*((_QWORD *)a2 + 110))
  {
    v887 = operator new();
    v888 = CMMsl::EnhancedDeviceMotion::EnhancedDeviceMotion(v887, *((const CMMsl::EnhancedDeviceMotion **)a2 + 110));
    v889 = *((_QWORD *)this + 110);
    *((_QWORD *)this + 110) = v888;
    if (v889)
      (*(void (**)(uint64_t))(*(_QWORD *)v889 + 8))(v889);
  }
  if (*((_QWORD *)a2 + 263))
  {
    v890 = (char **)operator new();
    v891 = CMMsl::NonlinearBiasFit::NonlinearBiasFit(v890, *((char ***)a2 + 263));
    v892 = *((_QWORD *)this + 263);
    *((_QWORD *)this + 263) = v891;
    if (v892)
      (*(void (**)(uint64_t))(*(_QWORD *)v892 + 8))(v892);
  }
  if (*((_QWORD *)a2 + 262))
  {
    v893 = operator new();
    v894 = CMMsl::NatalieData::NatalieData(v893, *((const CMMsl::NatalieData **)a2 + 262));
    v895 = *((_QWORD *)this + 262);
    *((_QWORD *)this + 262) = v894;
    if (v895)
      (*(void (**)(uint64_t))(*(_QWORD *)v895 + 8))(v895);
  }
  if (*((_QWORD *)a2 + 66))
  {
    v896 = (CMMsl::BodyMetrics *)operator new();
    v897 = CMMsl::BodyMetrics::BodyMetrics(v896, *((const CMMsl::BodyMetrics **)a2 + 66));
    v898 = *((_QWORD *)this + 66);
    *((_QWORD *)this + 66) = v899;
    if (v898)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v898 + 8))(v898, v897);
  }
  if (*((_QWORD *)a2 + 429))
  {
    v900 = operator new();
    v901 = CMMsl::WorkoutEvent::WorkoutEvent(v900, *((const CMMsl::WorkoutEvent **)a2 + 429));
    v902 = *((_QWORD *)this + 429);
    *((_QWORD *)this + 429) = v901;
    if (v902)
      (*(void (**)(uint64_t))(*(_QWORD *)v902 + 8))(v902);
  }
  if (*((_QWORD *)a2 + 267))
  {
    v903 = operator new();
    v904 = CMMsl::OnsetHeartRateData::OnsetHeartRateData(v903, *((const CMMsl::OnsetHeartRateData **)a2 + 267));
    v905 = *((_QWORD *)this + 267);
    *((_QWORD *)this + 267) = v904;
    if (v905)
      (*(void (**)(uint64_t))(*(_QWORD *)v905 + 8))(v905);
  }
  if (*((_QWORD *)a2 + 383))
  {
    v906 = (CMMsl::StreamingHeartRateData *)operator new();
    v907 = CMMsl::StreamingHeartRateData::StreamingHeartRateData(v906, *((const CMMsl::OnsetHeartRateData ***)a2 + 383));
    v908 = *((_QWORD *)this + 383);
    *((_QWORD *)this + 383) = v907;
    if (v908)
      (*(void (**)(uint64_t))(*(_QWORD *)v908 + 8))(v908);
  }
  if (*((_QWORD *)a2 + 106))
  {
    v909 = operator new();
    v910 = CMMsl::ElevationChange::ElevationChange(v909, *((const CMMsl::ElevationChange **)a2 + 106));
    v911 = *((_QWORD *)this + 106);
    *((_QWORD *)this + 106) = v910;
    if (v911)
      (*(void (**)(uint64_t))(*(_QWORD *)v911 + 8))(v911);
  }
  if (*((_QWORD *)a2 + 79))
  {
    v912 = operator new();
    v913 = *((_QWORD *)a2 + 79);
    *(_QWORD *)v912 = &off_25135CDE8;
    *(_DWORD *)(v912 + 20) = 0;
    if ((*(_BYTE *)(v913 + 20) & 1) != 0)
    {
      v915 = *(_QWORD *)(v913 + 8);
      *(_BYTE *)(v912 + 20) = 1;
      *(_QWORD *)(v912 + 8) = v915;
      v914 = 3;
      if ((*(_BYTE *)(v913 + 20) & 2) == 0)
        goto LABEL_925;
    }
    else
    {
      v914 = 2;
      if ((*(_BYTE *)(v913 + 20) & 2) == 0)
      {
LABEL_925:
        v917 = *((_QWORD *)this + 79);
        *((_QWORD *)this + 79) = v912;
        if (v917)
          (*(void (**)(uint64_t))(*(_QWORD *)v917 + 8))(v917);
        goto LABEL_927;
      }
    }
    v916 = *(_DWORD *)(v913 + 16);
    *(_BYTE *)(v912 + 20) = v914;
    *(_DWORD *)(v912 + 16) = v916;
    goto LABEL_925;
  }
LABEL_927:
  if (*((_QWORD *)a2 + 251))
  {
    v918 = (CMMsl::MotionGPSLocation *)operator new();
    v919 = CMMsl::MotionGPSLocation::MotionGPSLocation(v918, *((const CMMsl::MotionGPSLocation **)a2 + 251));
    v920 = *((_QWORD *)this + 251);
    *((_QWORD *)this + 251) = v919;
    if (v920)
      (*(void (**)(uint64_t))(*(_QWORD *)v920 + 8))(v920);
  }
  if (*((_QWORD *)a2 + 258))
  {
    v921 = (CMMsl::MotionWifiLocation *)operator new();
    v922 = CMMsl::MotionWifiLocation::MotionWifiLocation(v921, *((const CMMsl::MotionGPSLocation ***)a2 + 258));
    v923 = *((_QWORD *)this + 258);
    *((_QWORD *)this + 258) = v922;
    if (v923)
      (*(void (**)(uint64_t))(*(_QWORD *)v923 + 8))(v923);
  }
  if (*((_QWORD *)a2 + 385))
  {
    v924 = (CMMsl::StrideCalBin *)operator new();
    v925 = CMMsl::StrideCalBin::StrideCalBin(v924, *((const CMMsl::StrideCalBin **)a2 + 385));
    v926 = *((_QWORD *)this + 385);
    *((_QWORD *)this + 385) = v927;
    if (v926)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v926 + 8))(v926, v925);
  }
  if (*((_QWORD *)a2 + 75))
  {
    v928 = operator new();
    v929 = *((_QWORD *)a2 + 75);
    *(_QWORD *)v928 = &off_25135CC98;
    *(_DWORD *)(v928 + 12) = 0;
    if ((*(_BYTE *)(v929 + 12) & 1) != 0)
    {
      v930 = *(_BYTE *)(v929 + 8);
      *(_BYTE *)(v928 + 12) = 1;
      *(_BYTE *)(v928 + 8) = v930;
    }
    v931 = *((_QWORD *)this + 75);
    *((_QWORD *)this + 75) = v928;
    if (v931)
      (*(void (**)(uint64_t))(*(_QWORD *)v931 + 8))(v931);
  }
  if (*((_QWORD *)a2 + 264))
  {
    v932 = operator new();
    v933 = CMMsl::Odometer::Odometer(v932, *((const CMMsl::Odometer **)a2 + 264));
    v934 = *((_QWORD *)this + 264);
    *((_QWORD *)this + 264) = v933;
    if (v934)
      (*(void (**)(uint64_t))(*(_QWORD *)v934 + 8))(v934);
  }
  if (*((_QWORD *)a2 + 244))
  {
    v935 = (CMMsl::MetsInfo *)operator new();
    v936 = CMMsl::MetsInfo::MetsInfo(v935, *((const CMMsl::MetsInfo **)a2 + 244));
    v937 = *((_QWORD *)this + 244);
    *((_QWORD *)this + 244) = v938;
    if (v937)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v937 + 8))(v937, v936);
  }
  if (*((_QWORD *)a2 + 126))
  {
    v939 = (CMMsl::FallStats *)operator new();
    v940 = CMMsl::FallStats::FallStats(v939, *((const CMMsl::FallStats **)a2 + 126));
    v941 = *((_QWORD *)this + 126);
    *((_QWORD *)this + 126) = v942;
    if (v941)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v941 + 8))(v941, v940);
  }
  if (*((_QWORD *)a2 + 53))
  {
    v943 = operator new();
    v944 = CMMsl::BasebandSpeed::BasebandSpeed(v943, *((const CMMsl::BasebandSpeed **)a2 + 53));
    v945 = *((_QWORD *)this + 53);
    *((_QWORD *)this + 53) = v944;
    if (v945)
      (*(void (**)(uint64_t))(*(_QWORD *)v945 + 8))(v945);
  }
  if (*((_QWORD *)a2 + 402))
  {
    v946 = operator new();
    v947 = *((_QWORD *)a2 + 402);
    *(_QWORD *)v946 = &off_2513618F0;
    *(_DWORD *)(v946 + 12) = 0;
    if ((*(_BYTE *)(v947 + 12) & 1) != 0)
    {
      v948 = *(_BYTE *)(v947 + 8);
      *(_BYTE *)(v946 + 12) = 1;
      *(_BYTE *)(v946 + 8) = v948;
    }
    v949 = *((_QWORD *)this + 402);
    *((_QWORD *)this + 402) = v946;
    if (v949)
      (*(void (**)(uint64_t))(*(_QWORD *)v949 + 8))(v949);
  }
  if (*((_QWORD *)a2 + 378))
  {
    v950 = (CMMsl::StepCadenceToStrideLengthBin *)operator new();
    v951 = CMMsl::StepCadenceToStrideLengthBin::StepCadenceToStrideLengthBin(v950, *((const CMMsl::StepCadenceToStrideLengthBin **)a2 + 378));
    v952 = *((_QWORD *)this + 378);
    *((_QWORD *)this + 378) = v953;
    if (v952)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v952 + 8))(v952, v951);
  }
  if (*((_QWORD *)a2 + 426))
  {
    v954 = operator new();
    v955 = *((_QWORD *)a2 + 426);
    *(_QWORD *)v954 = &off_251361D18;
    *(_DWORD *)(v954 + 16) = 0;
    if ((*(_BYTE *)(v955 + 16) & 2) != 0)
    {
      v957 = *(_DWORD *)(v955 + 12);
      *(_BYTE *)(v954 + 16) = 2;
      *(_DWORD *)(v954 + 12) = v957;
      v956 = 3;
      if ((*(_BYTE *)(v955 + 16) & 1) == 0)
        goto LABEL_967;
    }
    else
    {
      v956 = 1;
      if ((*(_BYTE *)(v955 + 16) & 1) == 0)
      {
LABEL_967:
        v959 = *((_QWORD *)this + 426);
        *((_QWORD *)this + 426) = v954;
        if (v959)
          (*(void (**)(uint64_t))(*(_QWORD *)v959 + 8))(v959);
        goto LABEL_969;
      }
    }
    v958 = *(_DWORD *)(v955 + 8);
    *(_BYTE *)(v954 + 16) = v956;
    *(_DWORD *)(v954 + 8) = v958;
    goto LABEL_967;
  }
LABEL_969:
  if (*((_QWORD *)a2 + 257))
  {
    v960 = operator new();
    v961 = *((_QWORD *)a2 + 257);
    *(_QWORD *)v960 = &off_25135F5B8;
    *(_DWORD *)(v960 + 12) = 0;
    if ((*(_BYTE *)(v961 + 12) & 1) != 0)
    {
      v962 = *(_BYTE *)(v961 + 8);
      *(_BYTE *)(v960 + 12) = 1;
      *(_BYTE *)(v960 + 8) = v962;
    }
    v963 = *((_QWORD *)this + 257);
    *((_QWORD *)this + 257) = v960;
    if (v963)
      (*(void (**)(uint64_t))(*(_QWORD *)v963 + 8))(v963);
  }
  if (*((_QWORD *)a2 + 255))
  {
    v964 = operator new();
    v965 = CMMsl::MotionLoiData::MotionLoiData(v964, *((const CMMsl::MotionLoiData **)a2 + 255));
    v966 = *((_QWORD *)this + 255);
    *((_QWORD *)this + 255) = v965;
    if (v966)
      (*(void (**)(uint64_t))(*(_QWORD *)v966 + 8))(v966);
  }
  if (*((_QWORD *)a2 + 265))
  {
    v967 = (CMMsl::OdometerWithAltitude *)operator new();
    v968 = CMMsl::OdometerWithAltitude::OdometerWithAltitude(v967, *((const CMMsl::Odometer ***)a2 + 265));
    v969 = *((_QWORD *)this + 265);
    *((_QWORD *)this + 265) = v968;
    if (v969)
      (*(void (**)(uint64_t))(*(_QWORD *)v969 + 8))(v969);
  }
  if (*((_QWORD *)a2 + 321))
  {
    v970 = operator new();
    v971 = *((_QWORD *)a2 + 321);
    *(_QWORD *)v970 = &off_251360498;
    *(_DWORD *)(v970 + 20) = 0;
    if ((*(_BYTE *)(v971 + 20) & 1) != 0)
    {
      v973 = *(_QWORD *)(v971 + 8);
      *(_BYTE *)(v970 + 20) = 1;
      *(_QWORD *)(v970 + 8) = v973;
      v972 = 3;
      if ((*(_BYTE *)(v971 + 20) & 2) == 0)
        goto LABEL_986;
    }
    else
    {
      v972 = 2;
      if ((*(_BYTE *)(v971 + 20) & 2) == 0)
      {
LABEL_986:
        v975 = *((_QWORD *)this + 321);
        *((_QWORD *)this + 321) = v970;
        if (v975)
          (*(void (**)(uint64_t))(*(_QWORD *)v975 + 8))(v975);
        goto LABEL_988;
      }
    }
    v974 = *(_DWORD *)(v971 + 16);
    *(_BYTE *)(v970 + 20) = v972;
    *(_DWORD *)(v970 + 16) = v974;
    goto LABEL_986;
  }
LABEL_988:
  if (*((_QWORD *)a2 + 175))
  {
    v976 = operator new();
    v977 = CMMsl::InEarTransition::InEarTransition(v976, *((const CMMsl::InEarTransition **)a2 + 175));
    v978 = *((_QWORD *)this + 175);
    *((_QWORD *)this + 175) = v977;
    if (v978)
      (*(void (**)(uint64_t))(*(_QWORD *)v978 + 8))(v978);
  }
  if (*((_QWORD *)a2 + 78))
  {
    v979 = (CMMsl::ClefCalibration *)operator new();
    v980 = CMMsl::ClefCalibration::ClefCalibration(v979, *((const CMMsl::ClefCalibration **)a2 + 78));
    v981 = *v5;
    *v5 = v980;
    if (v981)
      (*(void (**)(CMMsl::ClefCalibration *))(*(_QWORD *)v981 + 8))(v981);
  }
  if (*((_QWORD *)a2 + 36))
  {
    v982 = operator new();
    v983 = CMMsl::AirpodEvent::AirpodEvent(v982, *((const CMMsl::AirpodEvent **)a2 + 36));
    v984 = *((_QWORD *)this + 36);
    *((_QWORD *)this + 36) = v983;
    if (v984)
      (*(void (**)(uint64_t))(*(_QWORD *)v984 + 8))(v984);
  }
  if (*((_QWORD *)a2 + 173))
  {
    v985 = (CMMsl::InEarOptical *)operator new();
    v986 = CMMsl::InEarOptical::InEarOptical(v985, *((const CMMsl::InEarOptical **)a2 + 173));
    v987 = *((_QWORD *)this + 173);
    *((_QWORD *)this + 173) = v986;
    if (v987)
      (*(void (**)(uint64_t))(*(_QWORD *)v987 + 8))(v987);
  }
  if (*((_QWORD *)a2 + 171))
  {
    v988 = (CMMsl::InEarConstraints *)operator new();
    v989 = CMMsl::InEarConstraints::InEarConstraints(v988, *((const CMMsl::InEarConstraints **)a2 + 171));
    v990 = *((_QWORD *)this + 171);
    *((_QWORD *)this + 171) = v989;
    if (v990)
      (*(void (**)(uint64_t))(*(_QWORD *)v990 + 8))(v990);
  }
  if (*((_QWORD *)a2 + 172))
  {
    v991 = (CMMsl::InEarOpenLid *)operator new();
    v992 = CMMsl::InEarOpenLid::InEarOpenLid(v991, *((const CMMsl::InEarOpenLid **)a2 + 172));
    v993 = *((_QWORD *)this + 172);
    *((_QWORD *)this + 172) = v992;
    if (v993)
      (*(void (**)(uint64_t))(*(_QWORD *)v993 + 8))(v993);
  }
  if (*((_QWORD *)a2 + 170))
  {
    v994 = (CMMsl::InEarBaselining *)operator new();
    v995 = CMMsl::InEarBaselining::InEarBaselining(v994, *((const CMMsl::InEarBaselining **)a2 + 170));
    v996 = *((_QWORD *)this + 170);
    *((_QWORD *)this + 170) = v995;
    if (v996)
      (*(void (**)(uint64_t))(*(_QWORD *)v996 + 8))(v996);
  }
  if (*((_QWORD *)a2 + 15))
  {
    v997 = (CMMsl::AccessoryConfig *)operator new();
    v998 = CMMsl::AccessoryConfig::AccessoryConfig(v997, *((const CMMsl::AccessoryConfig **)a2 + 15));
    v999 = *((_QWORD *)this + 15);
    *((_QWORD *)this + 15) = v998;
    if (v999)
      (*(void (**)(uint64_t))(*(_QWORD *)v999 + 8))(v999);
  }
  if (*((_QWORD *)a2 + 12))
  {
    v1000 = (CMMsl::AccessoryAccelConfig *)operator new();
    v1001 = CMMsl::AccessoryAccelConfig::AccessoryAccelConfig(v1000, *((const CMMsl::AccessoryConfig ***)a2 + 12));
    v1002 = *((_QWORD *)this + 12);
    *((_QWORD *)this + 12) = v1001;
    if (v1002)
      (*(void (**)(uint64_t))(*(_QWORD *)v1002 + 8))(v1002);
  }
  if (*((_QWORD *)a2 + 30))
  {
    v1003 = (CMMsl::AccessoryProximityConfig *)operator new();
    v1004 = CMMsl::AccessoryProximityConfig::AccessoryProximityConfig(v1003, *((const CMMsl::AccessoryConfig ***)a2 + 30));
    v1005 = *((_QWORD *)this + 30);
    *((_QWORD *)this + 30) = v1004;
    if (v1005)
      (*(void (**)(uint64_t))(*(_QWORD *)v1005 + 8))(v1005);
  }
  if (*((_QWORD *)a2 + 390))
  {
    v1006 = (CMMsl::TapDetect *)operator new();
    v1007 = CMMsl::TapDetect::TapDetect(v1006, *((const CMMsl::TapDetect **)a2 + 390));
    v1008 = *((_QWORD *)this + 390);
    *((_QWORD *)this + 390) = v1009;
    if (v1008)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1008 + 8))(v1008, v1007);
  }
  if (*((_QWORD *)a2 + 389))
  {
    v1010 = operator new();
    v1011 = CMMsl::TapAccept::TapAccept(v1010, *((const CMMsl::TapAccept **)a2 + 389));
    v1012 = *((_QWORD *)this + 389);
    *((_QWORD *)this + 389) = v1011;
    if (v1012)
      (*(void (**)(uint64_t))(*(_QWORD *)v1012 + 8))(v1012);
  }
  if (*((_QWORD *)a2 + 105))
  {
    v1013 = operator new();
    v1014 = CMMsl::DoubleTap::DoubleTap(v1013, *((const CMMsl::DoubleTap **)a2 + 105));
    v1015 = *((_QWORD *)this + 105);
    *((_QWORD *)this + 105) = v1014;
    if (v1015)
      (*(void (**)(uint64_t))(*(_QWORD *)v1015 + 8))(v1015);
  }
  if (*((_QWORD *)a2 + 35))
  {
    v1016 = (CMMsl::AccessoryWakeDebug *)operator new();
    v1017 = CMMsl::AccessoryWakeDebug::AccessoryWakeDebug(v1016, *((const CMMsl::AccessoryWakeDebug **)a2 + 35));
    v1018 = *((_QWORD *)this + 35);
    *((_QWORD *)this + 35) = v1017;
    if (v1018)
      (*(void (**)(uint64_t))(*(_QWORD *)v1018 + 8))(v1018);
  }
  if (*((_QWORD *)a2 + 138))
  {
    v1019 = (CMMsl::GeomagneticData *)operator new();
    v1020 = CMMsl::GeomagneticData::GeomagneticData(v1019, *((const CMMsl::GeomagneticData **)a2 + 138));
    v1021 = *((_QWORD *)this + 138);
    *((_QWORD *)this + 138) = v1022;
    if (v1021)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1021 + 8))(v1021, v1020);
  }
  if (*((_QWORD *)a2 + 336))
  {
    v1023 = (CMMsl::RelativeDeviceMotionInternal *)operator new();
    v1024 = CMMsl::RelativeDeviceMotionInternal::RelativeDeviceMotionInternal(v1023, *((const CMMsl::RelativeDeviceMotionInternal **)a2 + 336));
    v1025 = *((_QWORD *)this + 336);
    *((_QWORD *)this + 336) = v1024;
    if (v1025)
      (*(void (**)(uint64_t))(*(_QWORD *)v1025 + 8))(v1025);
  }
  if (*((_QWORD *)a2 + 338))
  {
    v1026 = (CMMsl::RelativeGravityCorrection *)operator new();
    v1027 = CMMsl::RelativeGravityCorrection::RelativeGravityCorrection(v1026, *((const CMMsl::DeviceMotionCorrection ***)a2 + 338));
    v1028 = *((_QWORD *)this + 338);
    *((_QWORD *)this + 338) = v1027;
    if (v1028)
      (*(void (**)(uint64_t))(*(_QWORD *)v1028 + 8))(v1028);
  }
  if (*((_QWORD *)a2 + 337))
  {
    v1029 = (CMMsl::RelativeGravityConstraints *)operator new();
    v1030 = CMMsl::RelativeGravityConstraints::RelativeGravityConstraints(v1029, *((const CMMsl::RelativeGravityConstraints **)a2 + 337));
    v1031 = *((_QWORD *)this + 337);
    *((_QWORD *)this + 337) = v1032;
    if (v1031)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1031 + 8))(v1031, v1030);
  }
  if (*((_QWORD *)a2 + 451))
  {
    v1033 = (CMMsl::ZeroVelocityCorrection *)operator new();
    v1034 = CMMsl::ZeroVelocityCorrection::ZeroVelocityCorrection(v1033, *((const CMMsl::DeviceMotionCorrection ***)a2 + 451));
    v1035 = *((_QWORD *)this + 451);
    *((_QWORD *)this + 451) = v1034;
    if (v1035)
      (*(void (**)(uint64_t))(*(_QWORD *)v1035 + 8))(v1035);
  }
  if (*((_QWORD *)a2 + 41))
  {
    v1036 = (CMMsl::AnchorCorrection *)operator new();
    v1037 = CMMsl::AnchorCorrection::AnchorCorrection(v1036, *((const CMMsl::DeviceMotionCorrection ***)a2 + 41));
    v1038 = *((_QWORD *)this + 41);
    *((_QWORD *)this + 41) = v1037;
    if (v1038)
      (*(void (**)(uint64_t))(*(_QWORD *)v1038 + 8))(v1038);
  }
  if (*((_QWORD *)a2 + 315))
  {
    v1039 = (CMMsl::PredictedRelativeDeviceMotion *)operator new();
    v1040 = CMMsl::PredictedRelativeDeviceMotion::PredictedRelativeDeviceMotion(v1039, *((const CMMsl::PredictedRelativeDeviceMotion **)a2 + 315));
    v1041 = *((_QWORD *)this + 315);
    *((_QWORD *)this + 315) = v1042;
    if (v1041)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1041 + 8))(v1041, v1040);
  }
  if (*((_QWORD *)a2 + 261))
  {
    v1043 = (CMMsl::MovementStatsSignal *)operator new();
    v1044 = CMMsl::MovementStatsSignal::MovementStatsSignal(v1043, *((const CMMsl::MovementStatsSignal **)a2 + 261));
    v1045 = *((_QWORD *)this + 261);
    *((_QWORD *)this + 261) = v1046;
    if (v1045)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1045 + 8))(v1045, v1044);
  }
  if (*((_QWORD *)a2 + 260))
  {
    v1047 = (CMMsl::MovementStatsGravityProjection *)operator new();
    v1048 = CMMsl::MovementStatsGravityProjection::MovementStatsGravityProjection(v1047, *((const CMMsl::MovementStatsGravityProjection **)a2 + 260));
    v1049 = *((_QWORD *)this + 260);
    *((_QWORD *)this + 260) = v1048;
    if (v1049)
      (*(void (**)(uint64_t))(*(_QWORD *)v1049 + 8))(v1049);
  }
  if (*((_QWORD *)a2 + 65))
  {
    v1050 = (CMMsl::BleedToZeroCorrection *)operator new();
    v1051 = CMMsl::BleedToZeroCorrection::BleedToZeroCorrection(v1050, *((const CMMsl::DeviceMotionCorrection ***)a2 + 65));
    v1052 = *((_QWORD *)this + 65);
    *((_QWORD *)this + 65) = v1051;
    if (v1052)
      (*(void (**)(uint64_t))(*(_QWORD *)v1052 + 8))(v1052);
  }
  if (*((_QWORD *)a2 + 20))
  {
    v1053 = (CMMsl::AccessoryGyroConfig *)operator new();
    v1054 = CMMsl::AccessoryGyroConfig::AccessoryGyroConfig(v1053, *((const CMMsl::AccessoryConfig ***)a2 + 20));
    v1055 = *((_QWORD *)this + 20);
    *((_QWORD *)this + 20) = v1054;
    if (v1055)
      (*(void (**)(uint64_t))(*(_QWORD *)v1055 + 8))(v1055);
  }
  if (*((_QWORD *)a2 + 21))
  {
    v1056 = (CMMsl::AccessoryGyroGYTT *)operator new();
    v1057 = CMMsl::AccessoryGyroGYTT::AccessoryGyroGYTT(v1056, *((const CMMsl::AccessoryGyroGYTT **)a2 + 21));
    v1058 = *((_QWORD *)this + 21);
    *((_QWORD *)this + 21) = v1057;
    if (v1058)
      (*(void (**)(uint64_t))(*(_QWORD *)v1058 + 8))(v1058);
  }
  if (*((_QWORD *)a2 + 19))
  {
    v1059 = (CMMsl::AccessoryGyroCachedBias *)operator new();
    v1060 = CMMsl::AccessoryGyroCachedBias::AccessoryGyroCachedBias(v1059, *((const CMMsl::AccessoryGyroCachedBias **)a2 + 19));
    v1061 = *((_QWORD *)this + 19);
    *((_QWORD *)this + 19) = v1060;
    if (v1061)
      (*(void (**)(uint64_t))(*(_QWORD *)v1061 + 8))(v1061);
  }
  if (*((_QWORD *)a2 + 133))
  {
    v1062 = (CMMsl::GaitCycleSegment *)operator new();
    v1063 = CMMsl::GaitCycleSegment::GaitCycleSegment(v1062, *((const CMMsl::GaitCycleSegment **)a2 + 133));
    v1064 = *((_QWORD *)this + 133);
    *((_QWORD *)this + 133) = v1065;
    if (v1064)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1064 + 8))(v1064, v1063);
  }
  if (*((_QWORD *)a2 + 134))
  {
    v1066 = operator new();
    v1067 = CMMsl::GaitCycleSegmentationState::GaitCycleSegmentationState(v1066, *((const CMMsl::GaitCycleSegmentationState **)a2 + 134));
    v1068 = *((_QWORD *)this + 134);
    *((_QWORD *)this + 134) = v1067;
    if (v1068)
      (*(void (**)(uint64_t))(*(_QWORD *)v1068 + 8))(v1068);
  }
  if (*((_QWORD *)a2 + 83))
  {
    v1069 = (CMMsl::CompassCalibrationAttempt *)operator new();
    v1070 = CMMsl::CompassCalibrationAttempt::CompassCalibrationAttempt(v1069, *((const CMMsl::CompassCalibrationAttempt **)a2 + 83));
    v1071 = *((_QWORD *)this + 83);
    *((_QWORD *)this + 83) = v1072;
    if (v1071)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1071 + 8))(v1071, v1070);
  }
  if (*((_QWORD *)a2 + 413))
  {
    v1073 = (CMMsl::VisualLocalizationAttitudeCorrection *)operator new();
    v1074 = CMMsl::VisualLocalizationAttitudeCorrection::VisualLocalizationAttitudeCorrection(v1073, *((const CMMsl::DeviceMotionCorrection ***)a2 + 413));
    v1075 = *((_QWORD *)this + 413);
    *((_QWORD *)this + 413) = v1074;
    if (v1075)
      (*(void (**)(uint64_t))(*(_QWORD *)v1075 + 8))(v1075);
  }
  if (*((_QWORD *)a2 + 412))
  {
    v1076 = (CMMsl::VisualLocalizationAttitudeConstraints *)operator new();
    v1077 = CMMsl::VisualLocalizationAttitudeConstraints::VisualLocalizationAttitudeConstraints(v1076, *((const CMMsl::VisualLocalizationAttitudeConstraints **)a2 + 412));
    v1078 = *((_QWORD *)this + 412);
    *((_QWORD *)this + 412) = v1077;
    if (v1078)
      (*(void (**)(uint64_t))(*(_QWORD *)v1078 + 8))(v1078);
  }
  if (*((_QWORD *)a2 + 25))
  {
    v1079 = (CMMsl::AccessoryMagnetometerConfig *)operator new();
    v1080 = CMMsl::AccessoryMagnetometerConfig::AccessoryMagnetometerConfig(v1079, *((const CMMsl::AccessoryConfig ***)a2 + 25));
    v1081 = *((_QWORD *)this + 25);
    *((_QWORD *)this + 25) = v1080;
    if (v1081)
      (*(void (**)(uint64_t))(*(_QWORD *)v1081 + 8))(v1081);
  }
  if (*((_QWORD *)a2 + 119))
  {
    v1082 = operator new();
    v1083 = CMMsl::FallDetectionReferee::FallDetectionReferee(v1082, *((const CMMsl::FallDetectionReferee **)a2 + 119));
    v1084 = *((_QWORD *)this + 119);
    *((_QWORD *)this + 119) = v1083;
    if (v1084)
      (*(void (**)(uint64_t))(*(_QWORD *)v1084 + 8))(v1084);
  }
  if (*((_QWORD *)a2 + 120))
  {
    v1085 = (CMMsl::FallDetectionReplay *)operator new();
    v1086 = CMMsl::FallDetectionReplay::FallDetectionReplay(v1085, *((const CMMsl::FallDetectionReplay **)a2 + 120));
    v1087 = *((_QWORD *)this + 120);
    *((_QWORD *)this + 120) = v1088;
    if (v1087)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1087 + 8))(v1087, v1086);
  }
  if (*((_QWORD *)a2 + 121))
  {
    v1089 = (CMMsl::FallDetectionStateMachine *)operator new();
    v1090 = CMMsl::FallDetectionStateMachine::FallDetectionStateMachine(v1089, *((const CMMsl::FallDetectionStateMachine **)a2 + 121));
    v1091 = *((_QWORD *)this + 121);
    *((_QWORD *)this + 121) = v1092;
    if (v1091)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1091 + 8))(v1091, v1090);
  }
  if (*((_QWORD *)a2 + 117))
  {
    v1093 = (CMMsl::FallDetectionDetector *)operator new();
    v1094 = CMMsl::FallDetectionDetector::FallDetectionDetector(v1093, *((const CMMsl::FallDetectionDetector **)a2 + 117));
    v1095 = *((_QWORD *)this + 117);
    *((_QWORD *)this + 117) = v1096;
    if (v1095)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1095 + 8))(v1095, v1094);
  }
  if (*((_QWORD *)a2 + 124))
  {
    v1097 = operator new();
    v1098 = CMMsl::FallFalsePositiveSuppressionFeatures::FallFalsePositiveSuppressionFeatures(v1097, *((const CMMsl::FallFalsePositiveSuppressionFeatures **)a2 + 124));
    v1099 = *((_QWORD *)this + 124);
    *((_QWORD *)this + 124) = v1098;
    if (v1099)
      (*(void (**)(uint64_t))(*(_QWORD *)v1099 + 8))(v1099);
  }
  if (*((_QWORD *)a2 + 17))
  {
    v1100 = (CMMsl::AccessoryDeviceMotionConfig *)operator new();
    v1101 = CMMsl::AccessoryDeviceMotionConfig::AccessoryDeviceMotionConfig(v1100, *((const CMMsl::AccessoryDeviceMotionConfig **)a2 + 17));
    v1102 = *((_QWORD *)this + 17);
    *((_QWORD *)this + 17) = v1101;
    if (v1102)
      (*(void (**)(uint64_t))(*(_QWORD *)v1102 + 8))(v1102);
  }
  if (*((_QWORD *)a2 + 335))
  {
    v1103 = operator new();
    v1104 = CMMsl::RelativeDeviceMotionCorrelatedMotion::RelativeDeviceMotionCorrelatedMotion(v1103, *((const CMMsl::RelativeDeviceMotionCorrelatedMotion **)a2 + 335));
    v1105 = *((_QWORD *)this + 335);
    *((_QWORD *)this + 335) = v1104;
    if (v1105)
      (*(void (**)(uint64_t))(*(_QWORD *)v1105 + 8))(v1105);
  }
  if (*((_QWORD *)a2 + 334))
  {
    v1106 = operator new();
    v1107 = CMMsl::RelativeDeviceMotionComplexTransition::RelativeDeviceMotionComplexTransition(v1106, *((const CMMsl::RelativeDeviceMotionComplexTransition **)a2 + 334));
    v1108 = *((_QWORD *)this + 334);
    *((_QWORD *)this + 334) = v1107;
    if (v1108)
      (*(void (**)(uint64_t))(*(_QWORD *)v1108 + 8))(v1108);
  }
  if (*((_QWORD *)a2 + 94))
  {
    v1109 = (CMMsl::DeviceMotionAlwaysOn *)operator new();
    v1110 = CMMsl::DeviceMotionAlwaysOn::DeviceMotionAlwaysOn(v1109, *((const CMMsl::DeviceMotion ***)a2 + 94));
    v1111 = *((_QWORD *)this + 94);
    *((_QWORD *)this + 94) = v1110;
    if (v1111)
      (*(void (**)(uint64_t))(*(_QWORD *)v1111 + 8))(v1111);
  }
  if (*((_QWORD *)a2 + 118))
  {
    v1112 = operator new();
    v1113 = *((_QWORD *)a2 + 118);
    *(_QWORD *)v1112 = &off_25135D6A8;
    *(_DWORD *)(v1112 + 20) = 0;
    if ((*(_BYTE *)(v1113 + 20) & 1) != 0)
    {
      v1115 = *(_QWORD *)(v1113 + 8);
      *(_BYTE *)(v1112 + 20) = 1;
      *(_QWORD *)(v1112 + 8) = v1115;
      v1114 = 3;
      if ((*(_BYTE *)(v1113 + 20) & 2) == 0)
        goto LABEL_1120;
    }
    else
    {
      v1114 = 2;
      if ((*(_BYTE *)(v1113 + 20) & 2) == 0)
      {
LABEL_1120:
        v1117 = *((_QWORD *)this + 118);
        *((_QWORD *)this + 118) = v1112;
        if (v1117)
          (*(void (**)(uint64_t))(*(_QWORD *)v1117 + 8))(v1117);
        goto LABEL_1122;
      }
    }
    v1116 = *(_BYTE *)(v1113 + 16);
    *(_BYTE *)(v1112 + 20) = v1114;
    *(_BYTE *)(v1112 + 16) = v1116;
    goto LABEL_1120;
  }
LABEL_1122:
  if (*((_QWORD *)a2 + 419))
  {
    v1118 = operator new();
    v1119 = CMMsl::WalkingDetectionResult::WalkingDetectionResult(v1118, *((const CMMsl::WalkingDetectionResult **)a2 + 419));
    v1120 = *((_QWORD *)this + 419);
    *((_QWORD *)this + 419) = v1119;
    if (v1120)
      (*(void (**)(uint64_t))(*(_QWORD *)v1120 + 8))(v1120);
  }
  if (*((_QWORD *)a2 + 23))
  {
    v1121 = operator new();
    v1122 = *((_QWORD *)a2 + 23);
    *(_QWORD *)v1121 = &off_25135C170;
    *(_DWORD *)(v1121 + 8) = 0;
    *(_DWORD *)(v1121 + 16) = 0;
    if ((*(_BYTE *)(v1122 + 16) & 1) != 0)
    {
      v1124 = *(_DWORD *)(v1122 + 8);
      *(_BYTE *)(v1121 + 16) = 1;
      *(_DWORD *)(v1121 + 8) = v1124;
      v1123 = 3;
      if ((*(_BYTE *)(v1122 + 16) & 2) == 0)
        goto LABEL_1131;
    }
    else
    {
      v1123 = 2;
      if ((*(_BYTE *)(v1122 + 16) & 2) == 0)
      {
LABEL_1131:
        v1126 = *((_QWORD *)this + 23);
        *((_QWORD *)this + 23) = v1121;
        if (v1126)
          (*(void (**)(uint64_t))(*(_QWORD *)v1126 + 8))(v1126);
        goto LABEL_1133;
      }
    }
    v1125 = *(_DWORD *)(v1122 + 12);
    *(_BYTE *)(v1121 + 16) = v1123;
    *(_DWORD *)(v1121 + 12) = v1125;
    goto LABEL_1131;
  }
LABEL_1133:
  if (*((_QWORD *)a2 + 122))
  {
    v1127 = (CMMsl::FallDetectionWristStateReplay *)operator new();
    v1128 = CMMsl::FallDetectionWristStateReplay::FallDetectionWristStateReplay(v1127, *((const CMMsl::FallDetectionWristStateReplay **)a2 + 122));
    v1129 = *((_QWORD *)this + 122);
    *((_QWORD *)this + 122) = v1128;
    if (v1129)
      (*(void (**)(uint64_t))(*(_QWORD *)v1129 + 8))(v1129);
  }
  if (*((_QWORD *)a2 + 147))
  {
    v1130 = (CMMsl::GyroBiasEstimateError *)operator new();
    v1131 = CMMsl::GyroBiasEstimateError::GyroBiasEstimateError(v1130, *((const CMMsl::GyroBiasEstimateError **)a2 + 147));
    v1132 = *((_QWORD *)this + 147);
    *((_QWORD *)this + 147) = v1131;
    if (v1132)
      (*(void (**)(uint64_t))(*(_QWORD *)v1132 + 8))(v1132);
  }
  if (*((_QWORD *)a2 + 382))
  {
    v1133 = (CMMsl::StepLikelihoodFeatures *)operator new();
    v1134 = CMMsl::StepLikelihoodFeatures::StepLikelihoodFeatures(v1133, *((const CMMsl::StepLikelihoodFeatures **)a2 + 382));
    v1135 = *((_QWORD *)this + 382);
    *((_QWORD *)this + 382) = v1136;
    if (v1135)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1135 + 8))(v1135, v1134);
  }
  if (*((_QWORD *)a2 + 127))
  {
    v1137 = operator new();
    StepFeatures = CMMsl::FirstStepFeatures::FirstStepFeatures(v1137, *((const CMMsl::FirstStepFeatures **)a2 + 127));
    v1139 = *((_QWORD *)this + 127);
    *((_QWORD *)this + 127) = StepFeatures;
    if (v1139)
      (*(void (**)(uint64_t))(*(_QWORD *)v1139 + 8))(v1139);
  }
  if (*((_QWORD *)a2 + 33))
  {
    v1140 = (CMMsl::AccessoryStepDetectorDebug *)operator new();
    v1141 = CMMsl::AccessoryStepDetectorDebug::AccessoryStepDetectorDebug(v1140, *((const CMMsl::AccessoryStepDetectorDebug **)a2 + 33));
    v1142 = *((_QWORD *)this + 33);
    *((_QWORD *)this + 33) = v1141;
    if (v1142)
      (*(void (**)(uint64_t))(*(_QWORD *)v1142 + 8))(v1142);
  }
  if (*((_QWORD *)a2 + 358))
  {
    v1143 = (CMMsl::SitStandDetectorFeatures *)operator new();
    v1144 = CMMsl::SitStandDetectorFeatures::SitStandDetectorFeatures(v1143, *((const CMMsl::SitStandDetectorFeatures **)a2 + 358));
    v1145 = *((_QWORD *)this + 358);
    *((_QWORD *)this + 358) = v1146;
    if (v1145)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1145 + 8))(v1145, v1144);
  }
  if (*((_QWORD *)a2 + 361))
  {
    v1147 = operator new();
    v1148 = *((_QWORD *)a2 + 361);
    *(_QWORD *)v1147 = &off_251360EA8;
    *(_QWORD *)(v1147 + 16) = 0;
    if ((*(_BYTE *)(v1148 + 20) & 1) != 0)
    {
      v1150 = *(_QWORD *)(v1148 + 8);
      *(_BYTE *)(v1147 + 20) = 1;
      *(_QWORD *)(v1147 + 8) = v1150;
      v1149 = 3;
      if ((*(_BYTE *)(v1148 + 20) & 2) == 0)
        goto LABEL_1157;
    }
    else
    {
      v1149 = 2;
      if ((*(_BYTE *)(v1148 + 20) & 2) == 0)
      {
LABEL_1157:
        v1152 = *((_QWORD *)this + 361);
        *((_QWORD *)this + 361) = v1147;
        if (v1152)
          (*(void (**)(uint64_t))(*(_QWORD *)v1152 + 8))(v1152);
        goto LABEL_1159;
      }
    }
    v1151 = *(_DWORD *)(v1148 + 16);
    *(_BYTE *)(v1147 + 20) = v1149;
    *(_DWORD *)(v1147 + 16) = v1151;
    goto LABEL_1157;
  }
LABEL_1159:
  if (*((_QWORD *)a2 + 359))
  {
    v1153 = (CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand *)operator new();
    v1154 = CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand::SitStandDetectorPosteriorBufferStatsForSitToStand(v1153, *((const CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand **)a2 + 359));
    v1155 = *((_QWORD *)this + 359);
    *((_QWORD *)this + 359) = v1156;
    if (v1155)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1155 + 8))(v1155, v1154);
  }
  if (*((_QWORD *)a2 + 360))
  {
    v1157 = (CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit *)operator new();
    v1158 = CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit::SitStandDetectorPosteriorBufferStatsForStandToSit(v1157, *((const CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit **)a2 + 360));
    v1159 = *((_QWORD *)this + 360);
    *((_QWORD *)this + 360) = v1160;
    if (v1159)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1159 + 8))(v1159, v1158);
  }
  if (*((_QWORD *)a2 + 366))
  {
    v1161 = operator new();
    v1162 = *((_QWORD *)a2 + 366);
    *(_QWORD *)v1161 = &off_2513610A0;
    *(_QWORD *)(v1161 + 16) = 0;
    if ((*(_BYTE *)(v1162 + 20) & 2) != 0)
    {
      v1164 = *(_DWORD *)(v1162 + 16);
      *(_BYTE *)(v1161 + 20) = 2;
      *(_DWORD *)(v1161 + 16) = v1164;
      v1163 = 3;
      if ((*(_BYTE *)(v1162 + 20) & 1) == 0)
        goto LABEL_1171;
    }
    else
    {
      v1163 = 1;
      if ((*(_BYTE *)(v1162 + 20) & 1) == 0)
      {
LABEL_1171:
        v1166 = *((_QWORD *)this + 366);
        *((_QWORD *)this + 366) = v1161;
        if (v1166)
          (*(void (**)(uint64_t))(*(_QWORD *)v1166 + 8))(v1166);
        goto LABEL_1173;
      }
    }
    v1165 = *(_QWORD *)(v1162 + 8);
    *(_BYTE *)(v1161 + 20) = v1163;
    *(_QWORD *)(v1161 + 8) = v1165;
    goto LABEL_1171;
  }
LABEL_1173:
  if (*((_QWORD *)a2 + 123))
  {
    v1167 = (CMMsl::FallDistanceReplay *)operator new();
    v1168 = CMMsl::FallDistanceReplay::FallDistanceReplay(v1167, *((const CMMsl::FallDistanceReplay **)a2 + 123));
    v1169 = *((_QWORD *)this + 123);
    *((_QWORD *)this + 123) = v1170;
    if (v1169)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1169 + 8))(v1169, v1168);
  }
  if (*((_QWORD *)a2 + 182))
  {
    v1171 = operator new();
    v1172 = CMMsl::JitterBufferLevel::JitterBufferLevel(v1171, *((const CMMsl::JitterBufferLevel **)a2 + 182));
    v1173 = *((_QWORD *)this + 182);
    *((_QWORD *)this + 182) = v1172;
    if (v1173)
      (*(void (**)(uint64_t))(*(_QWORD *)v1173 + 8))(v1173);
  }
  if (*((_QWORD *)a2 + 320))
  {
    v1174 = (CMMsl::PressureFiltered1HzLowPass *)operator new();
    v1175 = CMMsl::PressureFiltered1HzLowPass::PressureFiltered1HzLowPass(v1174, *((const CMMsl::PressureFiltered1HzLowPass **)a2 + 320));
    v1176 = *((_QWORD *)this + 320);
    *((_QWORD *)this + 320) = v1175;
    if (v1176)
      (*(void (**)(uint64_t))(*(_QWORD *)v1176 + 8))(v1176);
  }
  if (*((_QWORD *)a2 + 249))
  {
    v1177 = operator new();
    v1178 = CMMsl::MotionActivityReplay::MotionActivityReplay(v1177, *((const CMMsl::MotionActivityReplay **)a2 + 249));
    v1179 = *((_QWORD *)this + 249);
    *((_QWORD *)this + 249) = v1178;
    if (v1179)
      (*(void (**)(uint64_t))(*(_QWORD *)v1179 + 8))(v1179);
  }
  if (*((_QWORD *)a2 + 116))
  {
    v1180 = (CMMsl::FallDetectionActivityClassifierReplay *)operator new();
    v1181 = CMMsl::FallDetectionActivityClassifierReplay::FallDetectionActivityClassifierReplay(v1180, *((const CMMsl::FallDetectionActivityClassifierReplay **)a2 + 116));
    v1182 = *((_QWORD *)this + 116);
    *((_QWORD *)this + 116) = v1183;
    if (v1182)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1182 + 8))(v1182, v1181);
  }
  if (*((_QWORD *)a2 + 228))
  {
    v1184 = (CMMsl::LegacyALS5CHInput *)operator new();
    v1185 = CMMsl::LegacyALS5CHInput::LegacyALS5CHInput(v1184, *((const CMMsl::LegacyALS5CHInput **)a2 + 228));
    v1186 = *((_QWORD *)this + 228);
    *((_QWORD *)this + 228) = v1187;
    if (v1186)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1186 + 8))(v1186, v1185);
  }
  if (*((_QWORD *)a2 + 102))
  {
    v1188 = operator new();
    v1189 = *((_QWORD *)a2 + 102);
    *(_QWORD *)v1188 = &off_25135D360;
    *(_DWORD *)(v1188 + 20) = 0;
    if ((*(_BYTE *)(v1189 + 20) & 1) != 0)
    {
      v1191 = *(_QWORD *)(v1189 + 8);
      *(_BYTE *)(v1188 + 20) = 1;
      *(_QWORD *)(v1188 + 8) = v1191;
      v1190 = 3;
      if ((*(_BYTE *)(v1189 + 20) & 2) == 0)
        goto LABEL_1197;
    }
    else
    {
      v1190 = 2;
      if ((*(_BYTE *)(v1189 + 20) & 2) == 0)
      {
LABEL_1197:
        v1193 = *((_QWORD *)this + 102);
        *((_QWORD *)this + 102) = v1188;
        if (v1193)
          (*(void (**)(uint64_t))(*(_QWORD *)v1193 + 8))(v1193);
        goto LABEL_1199;
      }
    }
    v1192 = *(_DWORD *)(v1189 + 16);
    *(_BYTE *)(v1188 + 20) = v1190;
    *(_DWORD *)(v1188 + 16) = v1192;
    goto LABEL_1197;
  }
LABEL_1199:
  if (*((_QWORD *)a2 + 100))
  {
    v1194 = operator new();
    v1195 = CMMsl::DopplerProximityEvent::DopplerProximityEvent(v1194, *((const CMMsl::DopplerProximityEvent **)a2 + 100));
    v1196 = *((_QWORD *)this + 100);
    *((_QWORD *)this + 100) = v1195;
    if (v1196)
      (*(void (**)(uint64_t))(*(_QWORD *)v1196 + 8))(v1196);
  }
  if (*((_QWORD *)a2 + 101))
  {
    v1197 = operator new();
    v1198 = CMMsl::DopplerRawDataInput::DopplerRawDataInput(v1197, *((const CMMsl::DopplerRawDataInput **)a2 + 101));
    v1199 = *((_QWORD *)this + 101);
    *((_QWORD *)this + 101) = v1198;
    if (v1199)
      (*(void (**)(uint64_t))(*(_QWORD *)v1199 + 8))(v1199);
  }
  if (*((_QWORD *)a2 + 99))
  {
    v1200 = (CMMsl::DopplerDebugRecord *)operator new();
    v1201 = CMMsl::DopplerDebugRecord::DopplerDebugRecord(v1200, *((const CMMsl::DopplerDebugRecord **)a2 + 99));
    v1202 = *((_QWORD *)this + 99);
    *((_QWORD *)this + 99) = v1203;
    if (v1202)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1202 + 8))(v1202, v1201);
  }
  if (*((_QWORD *)a2 + 268))
  {
    v1204 = operator new();
    v1205 = *((_QWORD *)a2 + 268);
    *(_QWORD *)v1204 = &off_25135F820;
    *(_DWORD *)(v1204 + 20) = 0;
    if ((*(_BYTE *)(v1205 + 20) & 1) != 0)
    {
      v1207 = *(_QWORD *)(v1205 + 8);
      *(_BYTE *)(v1204 + 20) = 1;
      *(_QWORD *)(v1204 + 8) = v1207;
      v1206 = 3;
      if ((*(_BYTE *)(v1205 + 20) & 2) == 0)
        goto LABEL_1214;
    }
    else
    {
      v1206 = 2;
      if ((*(_BYTE *)(v1205 + 20) & 2) == 0)
      {
LABEL_1214:
        v1209 = *((_QWORD *)this + 268);
        *((_QWORD *)this + 268) = v1204;
        if (v1209)
          (*(void (**)(uint64_t))(*(_QWORD *)v1209 + 8))(v1209);
        goto LABEL_1216;
      }
    }
    v1208 = *(_DWORD *)(v1205 + 16);
    *(_BYTE *)(v1204 + 20) = v1206;
    *(_DWORD *)(v1204 + 16) = v1208;
    goto LABEL_1214;
  }
LABEL_1216:
  if (*((_QWORD *)a2 + 191))
  {
    v1210 = (CMMsl::KappaAudioResult *)operator new();
    v1211 = CMMsl::KappaAudioResult::KappaAudioResult(v1210, *((const CMMsl::KappaAudioResult **)a2 + 191));
    v1212 = *((_QWORD *)this + 191);
    *((_QWORD *)this + 191) = v1213;
    if (v1212)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1212 + 8))(v1212, v1211);
  }
  if (*((_QWORD *)a2 + 192))
  {
    v1214 = (CMMsl::KappaBaroResult *)operator new();
    v1215 = CMMsl::KappaBaroResult::KappaBaroResult(v1214, *((const CMMsl::KappaBaroResult **)a2 + 192));
    v1216 = *((_QWORD *)this + 192);
    *((_QWORD *)this + 192) = v1217;
    if (v1216)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1216 + 8))(v1216, v1215);
  }
  if (*((_QWORD *)a2 + 195))
  {
    v1218 = operator new();
    v1219 = CMMsl::KappaGpsResult::KappaGpsResult(v1218, *((const CMMsl::KappaGpsResult **)a2 + 195));
    v1220 = *((_QWORD *)this + 195);
    *((_QWORD *)this + 195) = v1219;
    if (v1220)
      (*(void (**)(uint64_t))(*(_QWORD *)v1220 + 8))(v1220);
  }
  if (*((_QWORD *)a2 + 206))
  {
    v1221 = (CMMsl::KappaPulseResult *)operator new();
    v1222 = CMMsl::KappaPulseResult::KappaPulseResult(v1221, *((const CMMsl::KappaPulseResult **)a2 + 206));
    v1223 = *((_QWORD *)this + 206);
    *((_QWORD *)this + 206) = v1224;
    if (v1223)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1223 + 8))(v1223, v1222);
  }
  if (*((_QWORD *)a2 + 221))
  {
    v1225 = operator new();
    v1226 = CMMsl::KappaZgResult::KappaZgResult(v1225, *((const CMMsl::KappaZgResult **)a2 + 221));
    v1227 = *((_QWORD *)this + 221);
    *((_QWORD *)this + 221) = v1226;
    if (v1227)
      (*(void (**)(uint64_t))(*(_QWORD *)v1227 + 8))(v1227);
  }
  if (*((_QWORD *)a2 + 220))
  {
    v1228 = operator new();
    v1229 = *((_QWORD *)a2 + 220);
    *(_QWORD *)v1228 = &off_25135EDD8;
    *(_DWORD *)(v1228 + 16) = 0;
    if ((*(_BYTE *)(v1229 + 16) & 1) != 0)
    {
      v1230 = *(_QWORD *)(v1229 + 8);
      *(_BYTE *)(v1228 + 16) = 1;
      *(_QWORD *)(v1228 + 8) = v1230;
    }
    v1231 = *((_QWORD *)this + 220);
    *((_QWORD *)this + 220) = v1228;
    if (v1231)
      (*(void (**)(uint64_t))(*(_QWORD *)v1231 + 8))(v1231);
  }
  if (*((_QWORD *)a2 + 204))
  {
    v1232 = (CMMsl::KappaPulseInertialAccel *)operator new();
    v1233 = CMMsl::KappaPulseInertialAccel::KappaPulseInertialAccel(v1232, *((const CMMsl::KappaPulseInertialAccel **)a2 + 204));
    v1234 = *((_QWORD *)this + 204);
    *((_QWORD *)this + 204) = v1235;
    if (v1234)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1234 + 8))(v1234, v1233);
  }
  if (*((_QWORD *)a2 + 164))
  {
    v1236 = operator new();
    v1237 = *((_QWORD *)a2 + 164);
    *(_QWORD *)v1236 = &off_25135E160;
    *(_QWORD *)(v1236 + 8) = 0;
    if ((*(_BYTE *)(v1237 + 12) & 1) != 0)
    {
      v1238 = *(_DWORD *)(v1237 + 8);
      *(_BYTE *)(v1236 + 12) = 1;
      *(_DWORD *)(v1236 + 8) = v1238;
    }
    v1239 = *((_QWORD *)this + 164);
    *((_QWORD *)this + 164) = v1236;
    if (v1239)
      (*(void (**)(uint64_t))(*(_QWORD *)v1239 + 8))(v1239);
  }
  if (*((_QWORD *)a2 + 163))
  {
    v1240 = operator new();
    v1241 = *((_QWORD *)a2 + 163);
    *(_QWORD *)v1240 = &off_25135E128;
    *(_QWORD *)(v1240 + 8) = 0;
    if ((*(_BYTE *)(v1241 + 12) & 1) != 0)
    {
      v1242 = *(_DWORD *)(v1241 + 8);
      *(_BYTE *)(v1240 + 12) = 1;
      *(_DWORD *)(v1240 + 8) = v1242;
    }
    v1243 = *((_QWORD *)this + 163);
    *((_QWORD *)this + 163) = v1240;
    if (v1243)
      (*(void (**)(uint64_t))(*(_QWORD *)v1243 + 8))(v1243);
  }
  if (*((_QWORD *)a2 + 190))
  {
    v1244 = operator new();
    v1245 = CMMsl::KappaAirbagResult::KappaAirbagResult(v1244, *((const CMMsl::KappaAirbagResult **)a2 + 190));
    v1246 = *((_QWORD *)this + 190);
    *((_QWORD *)this + 190) = v1245;
    if (v1246)
      (*(void (**)(uint64_t))(*(_QWORD *)v1246 + 8))(v1246);
  }
  if (*((_QWORD *)a2 + 193))
  {
    v1247 = (CMMsl::KappaCrashResult *)operator new();
    v1248 = CMMsl::KappaCrashResult::KappaCrashResult(v1247, *((const CMMsl::KappaCrashResult **)a2 + 193));
    v1249 = *((_QWORD *)this + 193);
    *((_QWORD *)this + 193) = v1250;
    if (v1249)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1249 + 8))(v1249, v1248);
  }
  if (*((_QWORD *)a2 + 207))
  {
    v1251 = operator new();
    v1252 = CMMsl::KappaQuiescenceResult::KappaQuiescenceResult(v1251, *((const CMMsl::KappaQuiescenceResult **)a2 + 207));
    v1253 = *((_QWORD *)this + 207);
    *((_QWORD *)this + 207) = v1252;
    if (v1253)
      (*(void (**)(uint64_t))(*(_QWORD *)v1253 + 8))(v1253);
  }
  if (*((_QWORD *)a2 + 208))
  {
    v1254 = operator new();
    v1255 = CMMsl::KappaRecoveryResult::KappaRecoveryResult(v1254, *((const CMMsl::KappaRecoveryResult **)a2 + 208));
    v1256 = *((_QWORD *)this + 208);
    *((_QWORD *)this + 208) = v1255;
    if (v1256)
      (*(void (**)(uint64_t))(*(_QWORD *)v1256 + 8))(v1256);
  }
  if (*((_QWORD *)a2 + 212))
  {
    v1257 = (CMMsl::KappaRolloverCrashResult *)operator new();
    v1258 = CMMsl::KappaRolloverCrashResult::KappaRolloverCrashResult(v1257, *((const CMMsl::KappaRolloverCrashResult **)a2 + 212));
    v1259 = *((_QWORD *)this + 212);
    *((_QWORD *)this + 212) = v1260;
    if (v1259)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1259 + 8))(v1259, v1258);
  }
  if (*((_QWORD *)a2 + 200))
  {
    v1261 = operator new();
    v1262 = CMMsl::KappaMildImpactResult::KappaMildImpactResult(v1261, *((const CMMsl::KappaMildImpactResult **)a2 + 200));
    v1263 = *((_QWORD *)this + 200);
    *((_QWORD *)this + 200) = v1262;
    if (v1263)
      (*(void (**)(uint64_t))(*(_QWORD *)v1263 + 8))(v1263);
  }
  if (*((_QWORD *)a2 + 198))
  {
    v1264 = operator new();
    v1265 = CMMsl::KappaLackOfMotionResult::KappaLackOfMotionResult(v1264, *((const CMMsl::KappaLackOfMotionResult **)a2 + 198));
    v1266 = *((_QWORD *)this + 198);
    *((_QWORD *)this + 198) = v1265;
    if (v1266)
      (*(void (**)(uint64_t))(*(_QWORD *)v1266 + 8))(v1266);
  }
  if (*((_QWORD *)a2 + 213))
  {
    v1267 = (CMMsl::KappaSevereCrashResult *)operator new();
    v1268 = CMMsl::KappaSevereCrashResult::KappaSevereCrashResult(v1267, *((const CMMsl::KappaSevereCrashResult **)a2 + 213));
    v1269 = *((_QWORD *)this + 213);
    *((_QWORD *)this + 213) = v1270;
    if (v1269)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1269 + 8))(v1269, v1268);
  }
  if (*((_QWORD *)a2 + 199))
  {
    v1271 = (CMMsl::KappaLocalAudioResult *)operator new();
    v1272 = CMMsl::KappaLocalAudioResult::KappaLocalAudioResult(v1271, *((const CMMsl::KappaLocalAudioResult **)a2 + 199));
    v1273 = *((_QWORD *)this + 199);
    *((_QWORD *)this + 199) = v1274;
    if (v1273)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1273 + 8))(v1273, v1272);
  }
  if (*((_QWORD *)a2 + 209))
  {
    v1275 = operator new();
    v1276 = CMMsl::KappaRemoteAudioResult::KappaRemoteAudioResult(v1275, *((const CMMsl::KappaRemoteAudioResult **)a2 + 209));
    v1277 = *((_QWORD *)this + 209);
    *((_QWORD *)this + 209) = v1276;
    if (v1277)
      (*(void (**)(uint64_t))(*(_QWORD *)v1277 + 8))(v1277);
  }
  if (*((_QWORD *)a2 + 96))
  {
    v1278 = (CMMsl::DirectionOfTravelMetrics *)operator new();
    v1279 = CMMsl::DirectionOfTravelMetrics::DirectionOfTravelMetrics(v1278, *((const CMMsl::DirectionOfTravelMetrics **)a2 + 96));
    v1280 = *((_QWORD *)this + 96);
    *((_QWORD *)this + 96) = v1281;
    if (v1280)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1280 + 8))(v1280, v1279);
  }
  if (*((_QWORD *)a2 + 403))
  {
    v1282 = operator new();
    v1283 = *((_QWORD *)a2 + 403);
    *(_QWORD *)v1282 = &off_251361928;
    *(_DWORD *)(v1282 + 20) = 0;
    if ((*(_BYTE *)(v1283 + 20) & 1) != 0)
    {
      v1285 = *(_QWORD *)(v1283 + 8);
      *(_BYTE *)(v1282 + 20) = 1;
      *(_QWORD *)(v1282 + 8) = v1285;
      v1284 = 3;
      if ((*(_BYTE *)(v1283 + 20) & 2) == 0)
        goto LABEL_1288;
    }
    else
    {
      v1284 = 2;
      if ((*(_BYTE *)(v1283 + 20) & 2) == 0)
      {
LABEL_1288:
        v1287 = *((_QWORD *)this + 403);
        *((_QWORD *)this + 403) = v1282;
        if (v1287)
          (*(void (**)(uint64_t))(*(_QWORD *)v1287 + 8))(v1287);
        goto LABEL_1290;
      }
    }
    v1286 = *(_BYTE *)(v1283 + 16);
    *(_BYTE *)(v1282 + 20) = v1284;
    *(_BYTE *)(v1282 + 16) = v1286;
    goto LABEL_1288;
  }
LABEL_1290:
  if (*((_QWORD *)a2 + 162))
  {
    v1288 = (CMMsl::HeadToHeadsetTransformationEstimate *)operator new();
    v1289 = CMMsl::HeadToHeadsetTransformationEstimate::HeadToHeadsetTransformationEstimate(v1288, *((const CMMsl::HeadToHeadsetTransformationEstimate **)a2 + 162));
    v1290 = *((_QWORD *)this + 162);
    *((_QWORD *)this + 162) = v1289;
    if (v1290)
      (*(void (**)(uint64_t))(*(_QWORD *)v1290 + 8))(v1290);
  }
  if (*((_QWORD *)a2 + 404))
  {
    v1291 = (CMMsl::ViewObstructedMachineLearningFeatures *)operator new();
    v1292 = CMMsl::ViewObstructedMachineLearningFeatures::ViewObstructedMachineLearningFeatures(v1291, *((const CMMsl::ViewObstructedMachineLearningFeatures **)a2 + 404));
    v1293 = *((_QWORD *)this + 404);
    *((_QWORD *)this + 404) = v1294;
    if (v1293)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1293 + 8))(v1293, v1292);
  }
  if (*((_QWORD *)a2 + 405))
  {
    v1295 = (CMMsl::ViewObstructedMachineLearningProbabilities *)operator new();
    v1296 = CMMsl::ViewObstructedMachineLearningProbabilities::ViewObstructedMachineLearningProbabilities(v1295, *((const CMMsl::ViewObstructedMachineLearningProbabilities **)a2 + 405));
    v1297 = *((_QWORD *)this + 405);
    *((_QWORD *)this + 405) = v1298;
    if (v1297)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1297 + 8))(v1297, v1296);
  }
  if (*((_QWORD *)a2 + 341))
  {
    v1299 = (CMMsl::RunningArmSwingSignals *)operator new();
    v1300 = CMMsl::RunningArmSwingSignals::RunningArmSwingSignals(v1299, *((const CMMsl::RunningArmSwingSignals **)a2 + 341));
    v1301 = *((_QWORD *)this + 341);
    *((_QWORD *)this + 341) = v1302;
    if (v1301)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1301 + 8))(v1301, v1300);
  }
  if (*((_QWORD *)a2 + 342))
  {
    v1303 = (CMMsl::RunningCentripetalAccelSignals *)operator new();
    v1304 = CMMsl::RunningCentripetalAccelSignals::RunningCentripetalAccelSignals(v1303, *((const CMMsl::RunningCentripetalAccelSignals **)a2 + 342));
    v1305 = *((_QWORD *)this + 342);
    *((_QWORD *)this + 342) = v1306;
    if (v1305)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1305 + 8))(v1305, v1304);
  }
  if (*((_QWORD *)a2 + 345))
  {
    v1307 = (CMMsl::RunningRotationAxis *)operator new();
    v1308 = CMMsl::RunningRotationAxis::RunningRotationAxis(v1307, *((const CMMsl::RunningRotationAxis **)a2 + 345));
    v1309 = *((_QWORD *)this + 345);
    *((_QWORD *)this + 345) = v1310;
    if (v1309)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1309 + 8))(v1309, v1308);
  }
  if (*((_QWORD *)a2 + 350))
  {
    v1311 = (CMMsl::RunningVerticalOscillationSignals *)operator new();
    v1312 = CMMsl::RunningVerticalOscillationSignals::RunningVerticalOscillationSignals(v1311, *((const CMMsl::RunningVerticalOscillationSignals **)a2 + 350));
    v1313 = *((_QWORD *)this + 350);
    *((_QWORD *)this + 350) = v1314;
    if (v1313)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1313 + 8))(v1313, v1312);
  }
  if (*((_QWORD *)a2 + 348))
  {
    v1315 = (CMMsl::RunningVerticalOscillation *)operator new();
    v1316 = CMMsl::RunningVerticalOscillation::RunningVerticalOscillation(v1315, *((const CMMsl::RunningVerticalOscillation **)a2 + 348));
    v1317 = *((_QWORD *)this + 348);
    *((_QWORD *)this + 348) = v1318;
    if (v1317)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1317 + 8))(v1317, v1316);
  }
  if (*((_QWORD *)a2 + 214))
  {
    v1319 = (CMMsl::KappaSpinResult *)operator new();
    v1320 = CMMsl::KappaSpinResult::KappaSpinResult(v1319, *((const CMMsl::KappaSpinResult **)a2 + 214));
    v1321 = *((_QWORD *)this + 214);
    *((_QWORD *)this + 214) = v1320;
    if (v1321)
      (*(void (**)(uint64_t))(*(_QWORD *)v1321 + 8))(v1321);
  }
  if (*((_QWORD *)a2 + 203))
  {
    v1322 = operator new();
    v1323 = CMMsl::KappaPulseDeltaV::KappaPulseDeltaV(v1322, *((const CMMsl::KappaPulseDeltaV **)a2 + 203));
    v1324 = *((_QWORD *)this + 203);
    *((_QWORD *)this + 203) = v1323;
    if (v1324)
      (*(void (**)(uint64_t))(*(_QWORD *)v1324 + 8))(v1324);
  }
  if (*((_QWORD *)a2 + 347))
  {
    v1325 = (CMMsl::RunningStrideLength *)operator new();
    v1326 = CMMsl::RunningStrideLength::RunningStrideLength(v1325, *((const CMMsl::RunningStrideLength **)a2 + 347));
    v1327 = *((_QWORD *)this + 347);
    *((_QWORD *)this + 347) = v1328;
    if (v1327)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1327 + 8))(v1327, v1326);
  }
  if (*((_QWORD *)a2 + 181))
  {
    v1329 = (CMMsl::ISPPacket *)operator new();
    v1330 = CMMsl::ISPPacket::ISPPacket(v1329, *((const CMMsl::ISPPacket **)a2 + 181));
    v1331 = *((_QWORD *)this + 181);
    *((_QWORD *)this + 181) = v1332;
    if (v1331)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1331 + 8))(v1331, v1330);
  }
  if (*((_QWORD *)a2 + 197))
  {
    v1333 = operator new();
    v1334 = CMMsl::KappaHighSpeedCrashResult::KappaHighSpeedCrashResult(v1333, *((const CMMsl::KappaHighSpeedCrashResult **)a2 + 197));
    v1335 = *((_QWORD *)this + 197);
    *((_QWORD *)this + 197) = v1334;
    if (v1335)
      (*(void (**)(uint64_t))(*(_QWORD *)v1335 + 8))(v1335);
  }
  if (*((_QWORD *)a2 + 205))
  {
    v1336 = (CMMsl::KappaPulseInertialHgAccel *)operator new();
    v1337 = CMMsl::KappaPulseInertialHgAccel::KappaPulseInertialHgAccel(v1336, *((const CMMsl::KappaPulseInertialHgAccel **)a2 + 205));
    v1338 = *((_QWORD *)this + 205);
    *((_QWORD *)this + 205) = v1339;
    if (v1338)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1338 + 8))(v1338, v1337);
  }
  if (*((_QWORD *)a2 + 160))
  {
    v1340 = (CMMsl::HarmonicMetrics *)operator new();
    v1341 = CMMsl::HarmonicMetrics::HarmonicMetrics(v1340, *((const CMMsl::HarmonicMetrics **)a2 + 160));
    v1342 = *((_QWORD *)this + 160);
    *((_QWORD *)this + 160) = v1343;
    if (v1342)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1342 + 8))(v1342, v1341);
  }
  if (*((_QWORD *)a2 + 74))
  {
    v1344 = (CMMsl::CalorieControllerMETsConsumed *)operator new();
    v1345 = CMMsl::CalorieControllerMETsConsumed::CalorieControllerMETsConsumed(v1344, *((const CMMsl::CalorieControllerMETsConsumed **)a2 + 74));
    v1346 = *((_QWORD *)this + 74);
    *((_QWORD *)this + 74) = v1347;
    if (v1346)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1346 + 8))(v1346, v1345);
  }
  if (*((_QWORD *)a2 + 292))
  {
    v1348 = (CMMsl::PedometerPathStraightness *)operator new();
    v1349 = CMMsl::PedometerPathStraightness::PedometerPathStraightness(v1348, *((const CMMsl::PedometerPathStraightness **)a2 + 292));
    v1350 = *((_QWORD *)this + 292);
    *((_QWORD *)this + 292) = v1351;
    if (v1350)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1350 + 8))(v1350, v1349);
  }
  if (*((_QWORD *)a2 + 86))
  {
    v1352 = operator new();
    v1353 = CMMsl::ComplexHandMotion::ComplexHandMotion(v1352, *((const CMMsl::ComplexHandMotion **)a2 + 86));
    v1354 = *((_QWORD *)this + 86);
    *((_QWORD *)this + 86) = v1353;
    if (v1354)
      (*(void (**)(uint64_t))(*(_QWORD *)v1354 + 8))(v1354);
  }
  if (*((_QWORD *)a2 + 107))
  {
    v1355 = operator new();
    v1356 = CMMsl::ElevationGradeEstimator::ElevationGradeEstimator(v1355, *((const CMMsl::ElevationGradeEstimator **)a2 + 107));
    v1357 = *((_QWORD *)this + 107);
    *((_QWORD *)this + 107) = v1356;
    if (v1357)
      (*(void (**)(uint64_t))(*(_QWORD *)v1357 + 8))(v1357);
  }
  if (*((_QWORD *)a2 + 400))
  {
    v1358 = (CMMsl::VO2MaxModelInput *)operator new();
    v1359 = CMMsl::VO2MaxModelInput::VO2MaxModelInput(v1358, *((const CMMsl::VO2MaxModelInput **)a2 + 400));
    v1360 = *((_QWORD *)this + 400);
    *((_QWORD *)this + 400) = v1361;
    if (v1360)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1360 + 8))(v1360, v1359);
  }
  if (*((_QWORD *)a2 + 326))
  {
    v1362 = (CMMsl::ProxCalibration *)operator new();
    v1363 = CMMsl::ProxCalibration::ProxCalibration(v1362, *((const CMMsl::ProxCalibration **)a2 + 326));
    v1364 = *((_QWORD *)this + 326);
    *((_QWORD *)this + 326) = v1363;
    if (v1364)
      (*(void (**)(uint64_t))(*(_QWORD *)v1364 + 8))(v1364);
  }
  if (*((_QWORD *)a2 + 216))
  {
    v1365 = operator new();
    v1366 = CMMsl::KappaStepsResult::KappaStepsResult(v1365, *((const CMMsl::KappaStepsResult **)a2 + 216));
    v1367 = *((_QWORD *)this + 216);
    *((_QWORD *)this + 216) = v1366;
    if (v1367)
      (*(void (**)(uint64_t))(*(_QWORD *)v1367 + 8))(v1367);
  }
  if (*((_QWORD *)a2 + 418))
  {
    v1368 = operator new();
    v1369 = CMMsl::WakeGestureSample::WakeGestureSample(v1368, *((const CMMsl::WakeGestureSample **)a2 + 418));
    v1370 = *((_QWORD *)this + 418);
    *((_QWORD *)this + 418) = v1369;
    if (v1370)
      (*(void (**)(uint64_t))(*(_QWORD *)v1370 + 8))(v1370);
  }
  if (*((_QWORD *)a2 + 196))
  {
    v1371 = operator new();
    v1372 = CMMsl::KappaGravityAutocorrelationResult::KappaGravityAutocorrelationResult(v1371, *((const CMMsl::KappaGravityAutocorrelationResult **)a2 + 196));
    v1373 = *((_QWORD *)this + 196);
    *((_QWORD *)this + 196) = v1372;
    if (v1373)
      (*(void (**)(uint64_t))(*(_QWORD *)v1373 + 8))(v1373);
  }
  if (*((_QWORD *)a2 + 349))
  {
    v1374 = operator new();
    v1375 = CMMsl::RunningVerticalOscillationGradientBoostedSignals::RunningVerticalOscillationGradientBoostedSignals(v1374, *((const CMMsl::RunningVerticalOscillationGradientBoostedSignals **)a2 + 349));
    v1376 = *((_QWORD *)this + 349);
    *((_QWORD *)this + 349) = v1375;
    if (v1376)
      (*(void (**)(uint64_t))(*(_QWORD *)v1376 + 8))(v1376);
  }
  if (*((_QWORD *)a2 + 387))
  {
    v1377 = (CMMsl::SubStats *)operator new();
    v1378 = CMMsl::SubStats::SubStats(v1377, *((const CMMsl::SubStats **)a2 + 387));
    v1379 = *((_QWORD *)this + 387);
    *((_QWORD *)this + 387) = v1380;
    if (v1379)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1379 + 8))(v1379, v1378);
  }
  if (*((_QWORD *)a2 + 289))
  {
    v1381 = operator new();
    v1382 = CMMsl::PedOdomFusionExtendedModeSegment::PedOdomFusionExtendedModeSegment(v1381, *((const CMMsl::PedOdomFusionExtendedModeSegment **)a2 + 289));
    v1383 = *((_QWORD *)this + 289);
    *((_QWORD *)this + 289) = v1382;
    if (v1383)
      (*(void (**)(uint64_t))(*(_QWORD *)v1383 + 8))(v1383);
  }
  if (*((_QWORD *)a2 + 237))
  {
    v1384 = operator new();
    v1385 = *((_QWORD *)a2 + 237);
    *(_QWORD *)v1384 = &off_25135F158;
    *(_DWORD *)(v1384 + 20) = 0;
    if ((*(_BYTE *)(v1385 + 20) & 1) != 0)
    {
      v1387 = *(_QWORD *)(v1385 + 8);
      *(_BYTE *)(v1384 + 20) = 1;
      *(_QWORD *)(v1384 + 8) = v1387;
      v1386 = 3;
      if ((*(_BYTE *)(v1385 + 20) & 2) == 0)
        goto LABEL_1377;
    }
    else
    {
      v1386 = 2;
      if ((*(_BYTE *)(v1385 + 20) & 2) == 0)
      {
LABEL_1377:
        v1389 = *((_QWORD *)this + 237);
        *((_QWORD *)this + 237) = v1384;
        if (v1389)
          (*(void (**)(uint64_t))(*(_QWORD *)v1389 + 8))(v1389);
        goto LABEL_1379;
      }
    }
    v1388 = *(_DWORD *)(v1385 + 16);
    *(_BYTE *)(v1384 + 20) = v1386;
    *(_DWORD *)(v1384 + 16) = v1388;
    goto LABEL_1377;
  }
LABEL_1379:
  if (*((_QWORD *)a2 + 283))
  {
    v1390 = (CMMsl::PDRPedestrianClassifierState *)operator new();
    v1391 = CMMsl::PDRPedestrianClassifierState::PDRPedestrianClassifierState(v1390, *((const CMMsl::PDRPedestrianClassifierState **)a2 + 283));
    v1392 = *((_QWORD *)this + 283);
    *((_QWORD *)this + 283) = v1391;
    if (v1392)
      (*(void (**)(uint64_t))(*(_QWORD *)v1392 + 8))(v1392);
  }
  if (*((_QWORD *)a2 + 284))
  {
    v1393 = (CMMsl::PDRPlacementClassifierState *)operator new();
    v1394 = CMMsl::PDRPlacementClassifierState::PDRPlacementClassifierState(v1393, *((const CMMsl::PDRPlacementClassifierState **)a2 + 284));
    v1395 = *((_QWORD *)this + 284);
    *((_QWORD *)this + 284) = v1394;
    if (v1395)
      (*(void (**)(uint64_t))(*(_QWORD *)v1395 + 8))(v1395);
  }
  if (*((_QWORD *)a2 + 285))
  {
    v1396 = (CMMsl::PDRSpeedEstimatorState *)operator new();
    v1397 = CMMsl::PDRSpeedEstimatorState::PDRSpeedEstimatorState(v1396, *((const CMMsl::PDRSpeedEstimatorState **)a2 + 285));
    v1398 = *((_QWORD *)this + 285);
    *((_QWORD *)this + 285) = v1399;
    if (v1398)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1398 + 8))(v1398, v1397);
  }
  if (*((_QWORD *)a2 + 270))
  {
    v1400 = (CMMsl::PDRDOTEstimatorState *)operator new();
    v1401 = CMMsl::PDRDOTEstimatorState::PDRDOTEstimatorState(v1400, *((const CMMsl::PDRDOTEstimatorState **)a2 + 270));
    v1402 = *((_QWORD *)this + 270);
    *((_QWORD *)this + 270) = v1403;
    if (v1402)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1402 + 8))(v1402, v1401);
  }
  if (*((_QWORD *)a2 + 287))
  {
    v1404 = (CMMsl::PDRVelocityEstimatorState *)operator new();
    v1405 = CMMsl::PDRVelocityEstimatorState::PDRVelocityEstimatorState(v1404, *((const CMMsl::PDRVelocityEstimatorState **)a2 + 287));
    v1406 = *((_QWORD *)this + 287);
    *((_QWORD *)this + 287) = v1407;
    if (v1406)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1406 + 8))(v1406, v1405);
  }
  if (*((_QWORD *)a2 + 227))
  {
    v1408 = (CMMsl::KMVelocityEstimatorState *)operator new();
    v1409 = CMMsl::KMVelocityEstimatorState::KMVelocityEstimatorState(v1408, *((const CMMsl::KMVelocityEstimatorState **)a2 + 227));
    v1410 = *((_QWORD *)this + 227);
    *((_QWORD *)this + 227) = v1411;
    if (v1410)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1410 + 8))(v1410, v1409);
  }
  if (*((_QWORD *)a2 + 401))
  {
    v1412 = (CMMsl::VelocityEstimatorFusionState *)operator new();
    v1413 = CMMsl::VelocityEstimatorFusionState::VelocityEstimatorFusionState(v1412, *((const CMMsl::VelocityEstimatorFusionState **)a2 + 401));
    v1414 = *((_QWORD *)this + 401);
    *((_QWORD *)this + 401) = v1415;
    if (v1414)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1414 + 8))(v1414, v1413);
  }
  if (*((_QWORD *)a2 + 279))
  {
    v1416 = operator new();
    v1417 = *((_QWORD *)a2 + 279);
    *(_QWORD *)v1416 = &off_25135FA88;
    *(_DWORD *)(v1416 + 20) = 0;
    if ((*(_BYTE *)(v1417 + 20) & 1) != 0)
    {
      v1419 = *(_QWORD *)(v1417 + 8);
      *(_BYTE *)(v1416 + 20) = 1;
      *(_QWORD *)(v1416 + 8) = v1419;
      v1418 = 3;
      if ((*(_BYTE *)(v1417 + 20) & 2) == 0)
        goto LABEL_1406;
    }
    else
    {
      v1418 = 2;
      if ((*(_BYTE *)(v1417 + 20) & 2) == 0)
      {
LABEL_1406:
        v1421 = *((_QWORD *)this + 279);
        *((_QWORD *)this + 279) = v1416;
        if (v1421)
          (*(void (**)(uint64_t))(*(_QWORD *)v1421 + 8))(v1421);
        goto LABEL_1408;
      }
    }
    v1420 = *(_DWORD *)(v1417 + 16);
    *(_BYTE *)(v1416 + 20) = v1418;
    *(_DWORD *)(v1416 + 16) = v1420;
    goto LABEL_1406;
  }
LABEL_1408:
  if (*((_QWORD *)a2 + 280))
  {
    v1422 = operator new();
    v1423 = CMMsl::PDRFenceState::PDRFenceState(v1422, *((const CMMsl::PDRFenceState **)a2 + 280));
    v1424 = *((_QWORD *)this + 280);
    *((_QWORD *)this + 280) = v1423;
    if (v1424)
      (*(void (**)(uint64_t))(*(_QWORD *)v1424 + 8))(v1424);
  }
  if (*((_QWORD *)a2 + 399))
  {
    v1425 = (CMMsl::UWBRange *)operator new();
    v1426 = CMMsl::UWBRange::UWBRange(v1425, *((const CMMsl::UWBRange **)a2 + 399));
    v1427 = *((_QWORD *)this + 399);
    *((_QWORD *)this + 399) = v1428;
    if (v1427)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1427 + 8))(v1427, v1426);
  }
  if (*((_QWORD *)a2 + 388))
  {
    v1429 = (CMMsl::SwingDoTCandidate *)operator new();
    v1430 = CMMsl::SwingDoTCandidate::SwingDoTCandidate(v1429, *((const CMMsl::SwingDoTCandidate **)a2 + 388));
    v1431 = *((_QWORD *)this + 388);
    *((_QWORD *)this + 388) = v1432;
    if (v1431)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1431 + 8))(v1431, v1430);
  }
  if (*((_QWORD *)a2 + 103))
  {
    v1433 = (CMMsl::DoTEstimatorHandSwing *)operator new();
    v1434 = CMMsl::DoTEstimatorHandSwing::DoTEstimatorHandSwing(v1433, *((const CMMsl::DoTEstimatorHandSwing **)a2 + 103));
    v1435 = *((_QWORD *)this + 103);
    *((_QWORD *)this + 103) = v1434;
    if (v1435)
      (*(void (**)(uint64_t))(*(_QWORD *)v1435 + 8))(v1435);
  }
  if (*((_QWORD *)a2 + 218))
  {
    v1436 = operator new();
    v1437 = CMMsl::KappaTriggerClustersResult::KappaTriggerClustersResult(v1436, *((const CMMsl::KappaTriggerClustersResult **)a2 + 218));
    v1438 = *((_QWORD *)this + 218);
    *((_QWORD *)this + 218) = v1437;
    if (v1438)
      (*(void (**)(uint64_t))(*(_QWORD *)v1438 + 8))(v1438);
  }
  if (*((_QWORD *)a2 + 357))
  {
    v1439 = (CMMsl::SimActivityEvent *)operator new();
    v1440 = CMMsl::SimActivityEvent::SimActivityEvent(v1439, *((const CMMsl::SimActivityEvent **)a2 + 357));
    v1441 = *((_QWORD *)this + 357);
    *((_QWORD *)this + 357) = v1440;
    if (v1441)
      (*(void (**)(uint64_t))(*(_QWORD *)v1441 + 8))(v1441);
  }
  if (*((_QWORD *)a2 + 278))
  {
    v1442 = (CMMsl::PDRFeatures *)operator new();
    v1443 = CMMsl::PDRFeatures::PDRFeatures(v1442, *((const CMMsl::PDRFeatures **)a2 + 278));
    v1444 = *((_QWORD *)this + 278);
    *((_QWORD *)this + 278) = v1445;
    if (v1444)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1444 + 8))(v1444, v1443);
  }
  if (*((_QWORD *)a2 + 272))
  {
    v1446 = (CMMsl::PDRDOTEstimatorStateBody *)operator new();
    v1447 = CMMsl::PDRDOTEstimatorStateBody::PDRDOTEstimatorStateBody(v1446, *((const CMMsl::PDRDOTEstimatorStateBody **)a2 + 272));
    v1448 = *((_QWORD *)this + 272);
    *((_QWORD *)this + 272) = v1449;
    if (v1448)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1448 + 8))(v1448, v1447);
  }
  if (*((_QWORD *)a2 + 271))
  {
    v1450 = (CMMsl::PDRDOTEstimatorStateArmSwing *)operator new();
    v1451 = CMMsl::PDRDOTEstimatorStateArmSwing::PDRDOTEstimatorStateArmSwing(v1450, *((const CMMsl::PDRDOTEstimatorStateArmSwing **)a2 + 271));
    v1452 = *((_QWORD *)this + 271);
    *((_QWORD *)this + 271) = v1453;
    if (v1452)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1452 + 8))(v1452, v1451);
  }
  if (*((_QWORD *)a2 + 275))
  {
    v1454 = (CMMsl::PDRDOTEstimatorStateHeading *)operator new();
    v1455 = CMMsl::PDRDOTEstimatorStateHeading::PDRDOTEstimatorStateHeading(v1454, *((const CMMsl::PDRDOTEstimatorStateHeading **)a2 + 275));
    v1456 = *((_QWORD *)this + 275);
    *((_QWORD *)this + 275) = v1457;
    if (v1456)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1456 + 8))(v1456, v1455);
  }
  if (*((_QWORD *)a2 + 13))
  {
    v1458 = operator new();
    v1459 = CMMsl::AccessoryActivityAlseepConfidenceEpoch::AccessoryActivityAlseepConfidenceEpoch(v1458, *((const CMMsl::AccessoryActivityAlseepConfidenceEpoch **)a2 + 13));
    v1460 = *((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = v1459;
    if (v1460)
      (*(void (**)(uint64_t))(*(_QWORD *)v1460 + 8))(v1460);
  }
  if (*((_QWORD *)a2 + 286))
  {
    v1461 = (CMMsl::PDRSpeedEstimatorStateDebug *)operator new();
    v1462 = CMMsl::PDRSpeedEstimatorStateDebug::PDRSpeedEstimatorStateDebug(v1461, *((const CMMsl::PDRSpeedEstimatorStateDebug **)a2 + 286));
    v1463 = *((_QWORD *)this + 286);
    *((_QWORD *)this + 286) = v1464;
    if (v1463)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1463 + 8))(v1463, v1462);
  }
  if (*((_QWORD *)a2 + 309))
  {
    v1465 = operator new();
    v1466 = *((_QWORD *)a2 + 309);
    *(_QWORD *)v1465 = &off_2513601F8;
    *(_DWORD *)(v1465 + 24) = 0;
    if ((*(_BYTE *)(v1466 + 24) & 2) != 0)
    {
      v1468 = *(_QWORD *)(v1466 + 16);
      *(_BYTE *)(v1465 + 24) = 2;
      *(_QWORD *)(v1465 + 16) = v1468;
      v1467 = 3;
      if ((*(_BYTE *)(v1466 + 24) & 1) == 0)
        goto LABEL_1450;
    }
    else
    {
      v1467 = 1;
      if ((*(_BYTE *)(v1466 + 24) & 1) == 0)
      {
LABEL_1450:
        v1470 = *((_QWORD *)this + 309);
        *((_QWORD *)this + 309) = v1465;
        if (v1470)
          (*(void (**)(uint64_t))(*(_QWORD *)v1470 + 8))(v1470);
        goto LABEL_1452;
      }
    }
    v1469 = *(_QWORD *)(v1466 + 8);
    *(_BYTE *)(v1465 + 24) = v1467;
    *(_QWORD *)(v1465 + 8) = v1469;
    goto LABEL_1450;
  }
LABEL_1452:
  if (*((_QWORD *)a2 + 312))
  {
    v1471 = (CMMsl::PrecisionFindingState *)operator new();
    v1472 = CMMsl::PrecisionFindingState::PrecisionFindingState(v1471, *((const CMMsl::PrecisionFindingState **)a2 + 312));
    v1473 = *((_QWORD *)this + 312);
    *((_QWORD *)this + 312) = v1474;
    if (v1473)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1473 + 8))(v1473, v1472);
  }
  if (*((_QWORD *)a2 + 211))
  {
    v1475 = operator new();
    v1476 = CMMsl::KappaRoadsResult::KappaRoadsResult(v1475, *((const CMMsl::KappaRoadsResult **)a2 + 211));
    v1477 = *((_QWORD *)this + 211);
    *((_QWORD *)this + 211) = v1476;
    if (v1477)
      (*(void (**)(uint64_t))(*(_QWORD *)v1477 + 8))(v1477);
  }
  if (*((_QWORD *)a2 + 313))
  {
    v1478 = (CMMsl::PrecisionFindingVelocityEstimate *)operator new();
    v1479 = CMMsl::PrecisionFindingVelocityEstimate::PrecisionFindingVelocityEstimate(v1478, *((const CMMsl::PrecisionFindingVelocityEstimate **)a2 + 313));
    v1480 = *((_QWORD *)this + 313);
    *((_QWORD *)this + 313) = v1481;
    if (v1480)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1480 + 8))(v1480, v1479);
  }
  if (*((_QWORD *)a2 + 310))
  {
    v1482 = operator new();
    v1483 = CMMsl::PrecisionFindingRangeFilter::PrecisionFindingRangeFilter(v1482, *((const CMMsl::PrecisionFindingRangeFilter **)a2 + 310));
    v1484 = *((_QWORD *)this + 310);
    *((_QWORD *)this + 310) = v1483;
    if (v1484)
      (*(void (**)(uint64_t))(*(_QWORD *)v1484 + 8))(v1484);
  }
  if (*((_QWORD *)a2 + 277))
  {
    v1485 = (CMMsl::PDRDOTMeasurementSelectorState *)operator new();
    v1486 = CMMsl::PDRDOTMeasurementSelectorState::PDRDOTMeasurementSelectorState(v1485, *((const CMMsl::PDRDOTMeasurementSelectorState **)a2 + 277));
    v1487 = *((_QWORD *)this + 277);
    *((_QWORD *)this + 277) = v1486;
    if (v1487)
      (*(void (**)(uint64_t))(*(_QWORD *)v1487 + 8))(v1487);
  }
  if (*((_QWORD *)a2 + 72))
  {
    v1488 = operator new();
    v1489 = *((_QWORD *)a2 + 72);
    *(_QWORD *)v1488 = &off_25135CB80;
    *(_DWORD *)(v1488 + 20) = 0;
    if ((*(_BYTE *)(v1489 + 20) & 1) != 0)
    {
      v1491 = *(_QWORD *)(v1489 + 8);
      *(_BYTE *)(v1488 + 20) = 1;
      *(_QWORD *)(v1488 + 8) = v1491;
      v1490 = 3;
      if ((*(_BYTE *)(v1489 + 20) & 2) == 0)
        goto LABEL_1473;
    }
    else
    {
      v1490 = 2;
      if ((*(_BYTE *)(v1489 + 20) & 2) == 0)
      {
LABEL_1473:
        v1493 = *((_QWORD *)this + 72);
        *((_QWORD *)this + 72) = v1488;
        if (v1493)
          (*(void (**)(uint64_t))(*(_QWORD *)v1493 + 8))(v1493);
        goto LABEL_1475;
      }
    }
    v1492 = *(_DWORD *)(v1489 + 16);
    *(_BYTE *)(v1488 + 20) = v1490;
    *(_DWORD *)(v1488 + 16) = v1492;
    goto LABEL_1473;
  }
LABEL_1475:
  if (*((_QWORD *)a2 + 276))
  {
    v1494 = (CMMsl::PDRDOTEstimatorUncertaintyModelOnBody *)operator new();
    v1495 = CMMsl::PDRDOTEstimatorUncertaintyModelOnBody::PDRDOTEstimatorUncertaintyModelOnBody(v1494, *((const CMMsl::PDRDOTEstimatorUncertaintyModelOnBody **)a2 + 276));
    v1496 = *((_QWORD *)this + 276);
    *((_QWORD *)this + 276) = v1497;
    if (v1496)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1496 + 8))(v1496, v1495);
  }
  if (*((_QWORD *)a2 + 293))
  {
    v1498 = operator new();
    v1499 = *((_QWORD *)a2 + 293);
    *(_QWORD *)v1498 = &off_25135FE78;
    *(_DWORD *)(v1498 + 20) = 0;
    if ((*(_BYTE *)(v1499 + 20) & 1) != 0)
    {
      v1501 = *(_QWORD *)(v1499 + 8);
      *(_BYTE *)(v1498 + 20) = 1;
      *(_QWORD *)(v1498 + 8) = v1501;
      v1500 = 3;
      if ((*(_BYTE *)(v1499 + 20) & 2) == 0)
        goto LABEL_1484;
    }
    else
    {
      v1500 = 2;
      if ((*(_BYTE *)(v1499 + 20) & 2) == 0)
      {
LABEL_1484:
        v1503 = *((_QWORD *)this + 293);
        *((_QWORD *)this + 293) = v1498;
        if (v1503)
          (*(void (**)(uint64_t))(*(_QWORD *)v1503 + 8))(v1503);
        goto LABEL_1486;
      }
    }
    v1502 = *(_DWORD *)(v1499 + 16);
    *(_BYTE *)(v1498 + 20) = v1500;
    *(_DWORD *)(v1498 + 16) = v1502;
    goto LABEL_1484;
  }
LABEL_1486:
  if (*((_QWORD *)a2 + 241))
  {
    v1504 = (CMMsl::MagnetometerCalibratorFilterParameters *)operator new();
    v1505 = CMMsl::MagnetometerCalibratorFilterParameters::MagnetometerCalibratorFilterParameters(v1504, *((const CMMsl::MagnetometerCalibratorFilterParameters **)a2 + 241));
    v1506 = *((_QWORD *)this + 241);
    *((_QWORD *)this + 241) = v1505;
    if (v1506)
      (*(void (**)(uint64_t))(*(_QWORD *)v1506 + 8))(v1506);
  }
  if (*((_QWORD *)a2 + 188))
  {
    v1507 = (CMMsl::KappaActivityPhone *)operator new();
    v1508 = CMMsl::KappaActivityPhone::KappaActivityPhone(v1507, *((const CMMsl::KappaActivityPhone **)a2 + 188));
    v1509 = *((_QWORD *)this + 188);
    *((_QWORD *)this + 188) = v1508;
    if (v1509)
      (*(void (**)(uint64_t))(*(_QWORD *)v1509 + 8))(v1509);
  }
  if (*((_QWORD *)a2 + 189))
  {
    v1510 = (CMMsl::KappaActivityWatch *)operator new();
    v1511 = CMMsl::KappaActivityWatch::KappaActivityWatch(v1510, *((const CMMsl::KappaActivityWatch **)a2 + 189));
    v1512 = *((_QWORD *)this + 189);
    *((_QWORD *)this + 189) = v1511;
    if (v1512)
      (*(void (**)(uint64_t))(*(_QWORD *)v1512 + 8))(v1512);
  }
  if (*((_QWORD *)a2 + 311))
  {
    v1513 = operator new();
    v1514 = *((_QWORD *)a2 + 311);
    *(_QWORD *)v1513 = &off_251360268;
    *(_DWORD *)(v1513 + 20) = 0;
    if ((*(_BYTE *)(v1514 + 20) & 1) != 0)
    {
      v1516 = *(_QWORD *)(v1514 + 8);
      *(_BYTE *)(v1513 + 20) = 1;
      *(_QWORD *)(v1513 + 8) = v1516;
      v1515 = 3;
      if ((*(_BYTE *)(v1514 + 20) & 2) == 0)
        goto LABEL_1501;
    }
    else
    {
      v1515 = 2;
      if ((*(_BYTE *)(v1514 + 20) & 2) == 0)
      {
LABEL_1501:
        v1518 = *((_QWORD *)this + 311);
        *((_QWORD *)this + 311) = v1513;
        if (v1518)
          (*(void (**)(uint64_t))(*(_QWORD *)v1518 + 8))(v1518);
        goto LABEL_1503;
      }
    }
    v1517 = *(_BYTE *)(v1514 + 16);
    *(_BYTE *)(v1513 + 20) = v1515;
    *(_BYTE *)(v1513 + 16) = v1517;
    goto LABEL_1501;
  }
LABEL_1503:
  if (*((_QWORD *)a2 + 274))
  {
    v1519 = (CMMsl::PDRDOTEstimatorStateDebug *)operator new();
    v1520 = CMMsl::PDRDOTEstimatorStateDebug::PDRDOTEstimatorStateDebug(v1519, *((const CMMsl::PDRDOTEstimatorStateDebug **)a2 + 274));
    v1521 = *((_QWORD *)this + 274);
    *((_QWORD *)this + 274) = v1522;
    if (v1521)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1521 + 8))(v1521, v1520);
  }
  if (*((_QWORD *)a2 + 273))
  {
    v1523 = (CMMsl::PDRDOTEstimatorStateBodyDebug *)operator new();
    v1524 = CMMsl::PDRDOTEstimatorStateBodyDebug::PDRDOTEstimatorStateBodyDebug(v1523, *((const CMMsl::PDRDOTEstimatorStateBodyDebug **)a2 + 273));
    v1525 = *((_QWORD *)this + 273);
    *((_QWORD *)this + 273) = v1524;
    if (v1525)
      (*(void (**)(uint64_t))(*(_QWORD *)v1525 + 8))(v1525);
  }
  if (*((_QWORD *)a2 + 202))
  {
    v1526 = (CMMsl::KappaPeakDetectorMapResult *)operator new();
    v1527 = CMMsl::KappaPeakDetectorMapResult::KappaPeakDetectorMapResult(v1526, *((const CMMsl::KappaPeakDetectorMapResult **)a2 + 202));
    v1528 = *((_QWORD *)this + 202);
    *((_QWORD *)this + 202) = v1527;
    if (v1528)
      (*(void (**)(uint64_t))(*(_QWORD *)v1528 + 8))(v1528);
  }
  if (*((_QWORD *)a2 + 201))
  {
    v1529 = operator new();
    v1530 = CMMsl::KappaPeakDetectorMapMagTimestamps::KappaPeakDetectorMapMagTimestamps(v1529, *((const CMMsl::KappaPeakDetectorMapMagTimestamps **)a2 + 201));
    v1531 = *((_QWORD *)this + 201);
    *((_QWORD *)this + 201) = v1530;
    if (v1531)
      (*(void (**)(uint64_t))(*(_QWORD *)v1531 + 8))(v1531);
  }
  if (*((_QWORD *)a2 + 314))
  {
    v1532 = operator new();
    v1533 = CMMsl::PrecisionFindingVerticalState::PrecisionFindingVerticalState(v1532, *((const CMMsl::PrecisionFindingVerticalState **)a2 + 314));
    v1534 = *((_QWORD *)this + 314);
    *((_QWORD *)this + 314) = v1533;
    if (v1534)
      (*(void (**)(uint64_t))(*(_QWORD *)v1534 + 8))(v1534);
  }
  if (*((_QWORD *)a2 + 39))
  {
    v1535 = (CMMsl::Altimeter *)operator new();
    v1536 = CMMsl::Altimeter::Altimeter(v1535, *((const CMMsl::Altimeter **)a2 + 39));
    v1537 = *((_QWORD *)this + 39);
    *((_QWORD *)this + 39) = v1538;
    if (v1537)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1537 + 8))(v1537, v1536);
  }
  if (*((_QWORD *)a2 + 113))
  {
    v1539 = (CMMsl::FaceDownDetection *)operator new();
    v1540 = CMMsl::FaceDownDetection::FaceDownDetection(v1539, *((const CMMsl::FaceDownDetection **)a2 + 113));
    v1541 = *((_QWORD *)this + 113);
    *((_QWORD *)this + 113) = v1540;
    if (v1541)
      (*(void (**)(uint64_t))(*(_QWORD *)v1541 + 8))(v1541);
  }
  if (*((_QWORD *)a2 + 295))
  {
    v1542 = operator new();
    v1543 = CMMsl::PencilFusionDMYawAlignmentUpdate::PencilFusionDMYawAlignmentUpdate(v1542, *((const CMMsl::PencilFusionDMYawAlignmentUpdate **)a2 + 295));
    v1544 = *((_QWORD *)this + 295);
    *((_QWORD *)this + 295) = v1543;
    if (v1544)
      (*(void (**)(uint64_t))(*(_QWORD *)v1544 + 8))(v1544);
  }
  if (*((_QWORD *)a2 + 298))
  {
    v1545 = (CMMsl::PencilFusionRingSensorTrustModelUpdate *)operator new();
    v1546 = CMMsl::PencilFusionRingSensorTrustModelUpdate::PencilFusionRingSensorTrustModelUpdate(v1545, *((const CMMsl::PencilFusionRingSensorTrustModelUpdate **)a2 + 298));
    v1547 = *((_QWORD *)this + 298);
    *((_QWORD *)this + 298) = v1548;
    if (v1547)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1547 + 8))(v1547, v1546);
  }
  if (*((_QWORD *)a2 + 32))
  {
    v1549 = operator new();
    v1550 = CMMsl::AccessorySleepStateUpdate::AccessorySleepStateUpdate(v1549, *((const CMMsl::AccessorySleepStateUpdate **)a2 + 32));
    v1551 = *((_QWORD *)this + 32);
    *((_QWORD *)this + 32) = v1550;
    if (v1551)
      (*(void (**)(uint64_t))(*(_QWORD *)v1551 + 8))(v1551);
  }
  if (*((_QWORD *)a2 + 31))
  {
    v1552 = operator new();
    v1553 = CMMsl::AccessorySleepStateConfidenceEpoch::AccessorySleepStateConfidenceEpoch(v1552, *((const CMMsl::AccessorySleepStateConfidenceEpoch **)a2 + 31));
    v1554 = *((_QWORD *)this + 31);
    *((_QWORD *)this + 31) = v1553;
    if (v1554)
      (*(void (**)(uint64_t))(*(_QWORD *)v1554 + 8))(v1554);
  }
  if (*((_QWORD *)a2 + 352))
  {
    v1555 = operator new();
    v1556 = CMMsl::SafetyHertzSample::SafetyHertzSample(v1555, *((const CMMsl::SafetyHertzSample **)a2 + 352));
    v1557 = *((_QWORD *)this + 352);
    *((_QWORD *)this + 352) = v1556;
    if (v1557)
      (*(void (**)(uint64_t))(*(_QWORD *)v1557 + 8))(v1557);
  }
  if (*((_QWORD *)a2 + 351))
  {
    v1558 = operator new();
    v1559 = *((_QWORD *)a2 + 351);
    *(_QWORD *)v1558 = &off_251360BD0;
    *(_DWORD *)(v1558 + 20) = 0;
    if ((*(_BYTE *)(v1559 + 20) & 1) != 0)
    {
      v1561 = *(_QWORD *)(v1559 + 8);
      *(_BYTE *)(v1558 + 20) = 1;
      *(_QWORD *)(v1558 + 8) = v1561;
      v1560 = 3;
      if ((*(_BYTE *)(v1559 + 20) & 2) == 0)
        goto LABEL_1545;
    }
    else
    {
      v1560 = 2;
      if ((*(_BYTE *)(v1559 + 20) & 2) == 0)
      {
LABEL_1545:
        v1563 = *((_QWORD *)this + 351);
        *((_QWORD *)this + 351) = v1558;
        if (v1563)
          (*(void (**)(uint64_t))(*(_QWORD *)v1563 + 8))(v1563);
        goto LABEL_1547;
      }
    }
    v1562 = *(_DWORD *)(v1559 + 16);
    *(_BYTE *)(v1558 + 20) = v1560;
    *(_DWORD *)(v1558 + 16) = v1562;
    goto LABEL_1545;
  }
LABEL_1547:
  if (*((_QWORD *)a2 + 328))
  {
    v1564 = (CMMsl::PTSConsumedGNSS *)operator new();
    v1565 = CMMsl::PTSConsumedGNSS::PTSConsumedGNSS(v1564, *((const CMMsl::LocationOscarEmu ***)a2 + 328));
    v1566 = *((_QWORD *)this + 328);
    *((_QWORD *)this + 328) = v1565;
    if (v1566)
      (*(void (**)(uint64_t))(*(_QWORD *)v1566 + 8))(v1566);
  }
  if (*((_QWORD *)a2 + 329))
  {
    v1567 = (CMMsl::PTSForwardPropagation *)operator new();
    v1568 = CMMsl::PTSForwardPropagation::PTSForwardPropagation(v1567, *((const CMMsl::PTSForwardPropagation **)a2 + 329));
    v1569 = *((_QWORD *)this + 329);
    *((_QWORD *)this + 329) = v1568;
    if (v1569)
      (*(void (**)(uint64_t))(*(_QWORD *)v1569 + 8))(v1569);
  }
  if (*((_QWORD *)a2 + 331))
  {
    v1570 = (CMMsl::PTSReconstructedRoute *)operator new();
    v1571 = CMMsl::PTSReconstructedRoute::PTSReconstructedRoute(v1570, *((const CMMsl::PTSForwardPropagation ***)a2 + 331));
    v1572 = *((_QWORD *)this + 331);
    *((_QWORD *)this + 331) = v1571;
    if (v1572)
      (*(void (**)(uint64_t))(*(_QWORD *)v1572 + 8))(v1572);
  }
  if (*((_QWORD *)a2 + 161))
  {
    v1573 = (CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *)operator new();
    v1574 = CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::HeadToHeadsetAttitudeEstimatorMeasurementUpdate(v1573, *((const CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate **)a2 + 161));
    v1575 = *((_QWORD *)this + 161);
    *((_QWORD *)this + 161) = v1574;
    if (v1575)
      (*(void (**)(uint64_t))(*(_QWORD *)v1575 + 8))(v1575);
  }
  if (*((_QWORD *)a2 + 330))
  {
    v1576 = (CMMsl::PTSMapMatchedRoute *)operator new();
    v1577 = CMMsl::PTSMapMatchedRoute::PTSMapMatchedRoute(v1576, *((const CMMsl::PTSForwardPropagation ***)a2 + 330));
    v1578 = *((_QWORD *)this + 330);
    *((_QWORD *)this + 330) = v1577;
    if (v1578)
      (*(void (**)(uint64_t))(*(_QWORD *)v1578 + 8))(v1578);
  }
  if (*((_QWORD *)a2 + 42))
  {
    v1579 = (CMMsl::AnchorMotionCorrespondence *)operator new();
    v1580 = CMMsl::AnchorMotionCorrespondence::AnchorMotionCorrespondence(v1579, *((const CMMsl::AnchorMotionCorrespondence **)a2 + 42));
    v1581 = *((_QWORD *)this + 42);
    *((_QWORD *)this + 42) = v1582;
    if (v1581)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1581 + 8))(v1581, v1580);
  }
  if (*((_QWORD *)a2 + 185))
  {
    v1583 = operator new();
    v1584 = *((_QWORD *)a2 + 185);
    *(_QWORD *)v1583 = &off_25135E5F8;
    *(_DWORD *)(v1583 + 20) = 0;
    if ((*(_BYTE *)(v1584 + 20) & 1) != 0)
    {
      v1586 = *(_QWORD *)(v1584 + 8);
      *(_BYTE *)(v1583 + 20) = 1;
      *(_QWORD *)(v1583 + 8) = v1586;
      v1585 = 3;
      if ((*(_BYTE *)(v1584 + 20) & 2) == 0)
        goto LABEL_1571;
    }
    else
    {
      v1585 = 2;
      if ((*(_BYTE *)(v1584 + 20) & 2) == 0)
      {
LABEL_1571:
        v1588 = *((_QWORD *)this + 185);
        *((_QWORD *)this + 185) = v1583;
        if (v1588)
          (*(void (**)(uint64_t))(*(_QWORD *)v1588 + 8))(v1588);
        goto LABEL_1573;
      }
    }
    v1587 = *(_DWORD *)(v1584 + 16);
    *(_BYTE *)(v1583 + 20) = v1585;
    *(_DWORD *)(v1583 + 16) = v1587;
    goto LABEL_1571;
  }
LABEL_1573:
  if (*((_QWORD *)a2 + 186))
  {
    v1589 = operator new();
    v1590 = CMMsl::KData2::KData2(v1589, *((const CMMsl::KData2 **)a2 + 186));
    v1591 = *((_QWORD *)this + 186);
    *((_QWORD *)this + 186) = v1590;
    if (v1591)
      (*(void (**)(uint64_t))(*(_QWORD *)v1591 + 8))(v1591);
  }
  if (*((_QWORD *)a2 + 187))
  {
    v1592 = (CMMsl::KData3 *)operator new();
    v1593 = CMMsl::KData3::KData3(v1592, *((const CMMsl::KData3 **)a2 + 187));
    v1594 = *((_QWORD *)this + 187);
    *((_QWORD *)this + 187) = v1595;
    if (v1594)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1594 + 8))(v1594, v1593);
  }
  if (*((_QWORD *)a2 + 353))
  {
    v1596 = operator new();
    v1597 = CMMsl::SafetyRemoteSample::SafetyRemoteSample(v1596, *((const CMMsl::SafetyRemoteSample **)a2 + 353));
    v1598 = *((_QWORD *)this + 353);
    *((_QWORD *)this + 353) = v1597;
    if (v1598)
      (*(void (**)(uint64_t))(*(_QWORD *)v1598 + 8))(v1598);
  }
  if (*((_QWORD *)a2 + 354))
  {
    v1599 = operator new();
    v1600 = CMMsl::SafetyTrustedAudioResult::SafetyTrustedAudioResult(v1599, *((const CMMsl::SafetyTrustedAudioResult **)a2 + 354));
    v1601 = *((_QWORD *)this + 354);
    *((_QWORD *)this + 354) = v1600;
    if (v1601)
      (*(void (**)(uint64_t))(*(_QWORD *)v1601 + 8))(v1601);
  }
  if (*((_QWORD *)a2 + 368))
  {
    v1602 = (CMMsl::SPUPlaybackExampleDeviceMotion *)operator new();
    v1603 = CMMsl::SPUPlaybackExampleDeviceMotion::SPUPlaybackExampleDeviceMotion(v1602, *((const CMMsl::DeviceMotion ***)a2 + 368));
    v1604 = *((_QWORD *)this + 368);
    *((_QWORD *)this + 368) = v1603;
    if (v1604)
      (*(void (**)(uint64_t))(*(_QWORD *)v1604 + 8))(v1604);
  }
  if (*((_QWORD *)a2 + 369))
  {
    v1605 = (CMMsl::SPUPlaybackExampleMotionStateUpdate *)operator new();
    v1606 = CMMsl::SPUPlaybackExampleMotionStateUpdate::SPUPlaybackExampleMotionStateUpdate(v1605, *((const CMMsl::MotionStateUpdate ***)a2 + 369));
    v1607 = *((_QWORD *)this + 369);
    *((_QWORD *)this + 369) = v1606;
    if (v1607)
      (*(void (**)(uint64_t))(*(_QWORD *)v1607 + 8))(v1607);
  }
  if (*((_QWORD *)a2 + 179))
  {
    v1608 = (CMMsl::InterpolatedAccessoryAccel *)operator new();
    v1609 = CMMsl::InterpolatedAccessoryAccel::InterpolatedAccessoryAccel(v1608, *((const CMMsl::Accel ****)a2 + 179));
    v1610 = *((_QWORD *)this + 179);
    *((_QWORD *)this + 179) = v1609;
    if (v1610)
      (*(void (**)(uint64_t))(*(_QWORD *)v1610 + 8))(v1610);
  }
  return this;
}

float CMMsl::MovementStats::MovementStats(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_25135F628;
  *(_DWORD *)(a1 + 12) = 0;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    result = *(float *)(a2 + 8);
    *(_BYTE *)(a1 + 12) = 1;
    *(float *)(a1 + 8) = result;
  }
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_25135F628;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_25135F628;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::SignalEnvironment::SignalEnvironment(uint64_t result, uint64_t a2)
{
  int v2;

  *(_QWORD *)result = &off_251360D20;
  *(_QWORD *)(result + 8) = 0;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    v2 = *(_DWORD *)(a2 + 8);
    *(_BYTE *)(result + 12) = 1;
    *(_DWORD *)(result + 8) = v2;
  }
  return result;
}

{
  *(_QWORD *)result = &off_251360D20;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

{
  *(_QWORD *)result = &off_251360D20;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t CMMsl::SignificantUserInteraction::SignificantUserInteraction(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)result = &off_251360D58;
  *(_QWORD *)(result + 16) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_DWORD *)(result + 16) = v4;
  }
  return result;
}

{
  *(_QWORD *)result = &off_251360D58;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  *(_QWORD *)result = &off_251360D58;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::SoundPressureLevel::SoundPressureLevel(uint64_t result, uint64_t a2)
{
  char v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)result = &off_251361068;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
    v3 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = 2;
    *(_DWORD *)(result + 16) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 1) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
LABEL_5:
    v4 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = v2;
    *(_QWORD *)(result + 8) = v4;
  }
  return result;
}

uint64_t CMMsl::MagneticAccessoryType2::MagneticAccessoryType2(uint64_t result, uint64_t a2)
{
  char v2;

  *(_QWORD *)result = &off_25135F1C8;
  *(_DWORD *)(result + 12) = 0;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    v2 = *(_BYTE *)(a2 + 8);
    *(_BYTE *)(result + 12) = 1;
    *(_BYTE *)(result + 8) = v2;
  }
  return result;
}

{
  *(_QWORD *)result = &off_25135F1C8;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  return result;
}

{
  *(_QWORD *)result = &off_25135F1C8;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  return result;
}

double CMMsl::PencilTipForce::PencilTipForce(uint64_t a1, uint64_t a2)
{
  char v2;
  double result;

  *(_QWORD *)a1 = &off_25135FFC8;
  *(_DWORD *)(a1 + 24) = 0;
  if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    result = *(double *)(a2 + 8);
    *(_BYTE *)(a1 + 24) = 1;
    *(double *)(a1 + 8) = result;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 24) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 16);
    *(_BYTE *)(a1 + 24) = v2;
    *(double *)(a1 + 16) = result;
  }
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135FFC8;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135FFC8;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::Timestamp::Timestamp(uint64_t result, uint64_t a2)
{
  char v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)result = &off_2513615E0;
  *(_QWORD *)(result + 16) = 0;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
    v3 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = 2;
    *(_DWORD *)(result + 16) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 1) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
LABEL_5:
    v4 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = v2;
    *(_QWORD *)(result + 8) = v4;
  }
  return result;
}

{
  *(_QWORD *)result = &off_2513615E0;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

{
  *(_QWORD *)result = &off_2513615E0;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t CMMsl::LockScreenStatus::LockScreenStatus(uint64_t result, uint64_t a2)
{
  char v2;

  *(_QWORD *)result = &off_25135F0E8;
  *(_DWORD *)(result + 12) = 0;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    v2 = *(_BYTE *)(a2 + 8);
    *(_BYTE *)(result + 12) = 1;
    *(_BYTE *)(result + 8) = v2;
  }
  return result;
}

{
  *(_QWORD *)result = &off_25135F0E8;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  return result;
}

{
  *(_QWORD *)result = &off_25135F0E8;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  return result;
}

uint64_t CMMsl::PowerManagementUserActivity::PowerManagementUserActivity(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)result = &off_2513601C0;
  *(_DWORD *)(result + 16) = 0;
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    v2 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 16) = 1;
    *(_QWORD *)(result + 8) = v2;
  }
  return result;
}

{
  *(_QWORD *)result = &off_2513601C0;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

{
  *(_QWORD *)result = &off_2513601C0;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

double CMMsl::PDRImpulse::PDRImpulse(uint64_t a1, uint64_t a2)
{
  char v2;
  int v3;
  double result;

  *(_QWORD *)a1 = &off_25135FAF8;
  *(_DWORD *)(a1 + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
    v3 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 20) = 2;
    *(_DWORD *)(a1 + 16) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 1) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 8);
    *(_BYTE *)(a1 + 20) = v2;
    *(double *)(a1 + 8) = result;
  }
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135FAF8;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_25135FAF8;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::PDRAlgType::PDRAlgType(uint64_t result, uint64_t a2)
{
  int v2;

  *(_QWORD *)result = &off_25135F858;
  *(_QWORD *)(result + 8) = 0;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    v2 = *(_DWORD *)(a2 + 8);
    *(_BYTE *)(result + 12) = 1;
    *(_DWORD *)(result + 8) = v2;
  }
  return result;
}

{
  *(_QWORD *)result = &off_25135F858;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

{
  *(_QWORD *)result = &off_25135F858;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t CMMsl::KeyboardMotionState::KeyboardMotionState(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)result = &off_25135EEF0;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_DWORD *)(result + 16) = v4;
  }
  return result;
}

uint64_t CMMsl::KeyboardKeyPress::KeyboardKeyPress(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)result = &off_25135EE80;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_BYTE *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_BYTE *)(result + 16) = v4;
  }
  return result;
}

uint64_t CMMsl::KeyboardMotionTrackpad::KeyboardMotionTrackpad(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)result = &off_25135EF28;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_BYTE *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_BYTE *)(result + 16) = v4;
  }
  return result;
}

uint64_t CMMsl::KeyboardAttached::KeyboardAttached(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)result = &off_25135EE48;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_BYTE *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_BYTE *)(result + 16) = v4;
  }
  return result;
}

uint64_t CMMsl::WorkoutActivity::WorkoutActivity(uint64_t result, uint64_t a2)
{
  char v2;
  int v3;
  int v4;

  *(_QWORD *)result = &off_251361DC0;
  *(_DWORD *)(result + 16) = 0;
  if ((*(_BYTE *)(a2 + 16) & 2) != 0)
  {
    v3 = *(_DWORD *)(a2 + 12);
    *(_BYTE *)(result + 16) = 2;
    *(_DWORD *)(result + 12) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 16) & 1) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
LABEL_5:
    v4 = *(_DWORD *)(a2 + 8);
    *(_BYTE *)(result + 16) = v2;
    *(_DWORD *)(result + 8) = v4;
  }
  return result;
}

uint64_t CMMsl::WatchEnclosureMaterial::WatchEnclosureMaterial(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)result = &off_251361C70;
  *(_DWORD *)(result + 24) = 0;
  if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
    v3 = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(result + 24) = 2;
    *(_QWORD *)(result + 16) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 24) & 1) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
LABEL_5:
    v4 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 24) = v2;
    *(_QWORD *)(result + 8) = v4;
  }
  return result;
}

uint64_t CMMsl::Prox::Prox(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)result = &off_251360578;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_DWORD *)(result + 16) = v4;
  }
  return result;
}

uint64_t CMMsl::TouchOscarEmu::TouchOscarEmu(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)result = &off_251361618;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_BYTE *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_BYTE *)(result + 16) = v4;
  }
  return result;
}

uint64_t CMMsl::SessionOverride::SessionOverride(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)result = &off_251360CE8;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_DWORD *)(result + 16) = v4;
  }
  return result;
}

uint64_t CMMsl::VibrationEvent::VibrationEvent(uint64_t result, uint64_t a2)
{
  char v2;

  *(_QWORD *)result = &off_2513618F0;
  *(_DWORD *)(result + 12) = 0;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    v2 = *(_BYTE *)(a2 + 8);
    *(_BYTE *)(result + 12) = 1;
    *(_BYTE *)(result + 8) = v2;
  }
  return result;
}

{
  *(_QWORD *)result = &off_2513618F0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  return result;
}

{
  *(_QWORD *)result = &off_2513618F0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  return result;
}

uint64_t CMMsl::WatchOrientationSettings::WatchOrientationSettings(uint64_t result, uint64_t a2)
{
  char v2;
  int v3;
  int v4;

  *(_QWORD *)result = &off_251361D18;
  *(_DWORD *)(result + 16) = 0;
  if ((*(_BYTE *)(a2 + 16) & 2) != 0)
  {
    v3 = *(_DWORD *)(a2 + 12);
    *(_BYTE *)(result + 16) = 2;
    *(_DWORD *)(result + 12) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 16) & 1) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
LABEL_5:
    v4 = *(_DWORD *)(a2 + 8);
    *(_BYTE *)(result + 16) = v2;
    *(_DWORD *)(result + 8) = v4;
  }
  return result;
}

uint64_t CMMsl::MotionWifiAssociation::MotionWifiAssociation(uint64_t result, uint64_t a2)
{
  char v2;

  *(_QWORD *)result = &off_25135F5B8;
  *(_DWORD *)(result + 12) = 0;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    v2 = *(_BYTE *)(a2 + 8);
    *(_BYTE *)(result + 12) = 1;
    *(_BYTE *)(result + 8) = v2;
  }
  return result;
}

{
  *(_QWORD *)result = &off_25135F5B8;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  return result;
}

{
  *(_QWORD *)result = &off_25135F5B8;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  return result;
}

float CMMsl::PressureFilteredNoTemperature::PressureFilteredNoTemperature(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  float result;

  *(_QWORD *)a1 = &off_251360498;
  *(_DWORD *)(a1 + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(a1 + 20) = 1;
    *(_QWORD *)(a1 + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    result = *(float *)(a2 + 16);
    *(_BYTE *)(a1 + 20) = v2;
    *(float *)(a1 + 16) = result;
  }
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_251360498;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_251360498;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::SitStandDetectorTransition::SitStandDetectorTransition(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)result = &off_251360EA8;
  *(_QWORD *)(result + 16) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_DWORD *)(result + 16) = v4;
  }
  return result;
}

double CMMsl::SpatialEvent::SpatialEvent(uint64_t a1, uint64_t a2)
{
  char v2;
  int v3;
  double result;

  *(_QWORD *)a1 = &off_2513610A0;
  *(_QWORD *)(a1 + 16) = 0;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
    v3 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 20) = 2;
    *(_DWORD *)(a1 + 16) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 1) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 8);
    *(_BYTE *)(a1 + 20) = v2;
    *(double *)(a1 + 8) = result;
  }
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_2513610A0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_2513610A0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::Orientation::Orientation(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)result = &off_25135F820;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_DWORD *)(result + 16) = v4;
  }
  return result;
}

uint64_t CMMsl::KappaZgDetected::KappaZgDetected(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)result = &off_25135EDD8;
  *(_DWORD *)(result + 16) = 0;
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    v2 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 16) = 1;
    *(_QWORD *)(result + 8) = v2;
  }
  return result;
}

{
  *(_QWORD *)result = &off_25135EDD8;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

{
  *(_QWORD *)result = &off_25135EDD8;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t CMMsl::ViewObstructedMachineLearningDecision::ViewObstructedMachineLearningDecision(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)result = &off_251361928;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_BYTE *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_BYTE *)(result + 16) = v4;
  }
  return result;
}

{
  *(_QWORD *)result = &off_251361928;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(result + 16) = *(_BYTE *)(a2 + 16);
  return result;
}

{
  *(_QWORD *)result = &off_251361928;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(result + 16) = *(_BYTE *)(a2 + 16);
  return result;
}

uint64_t CMMsl::MagicMountState::MagicMountState(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)result = &off_25135F158;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_DWORD *)(result + 16) = v4;
  }
  return result;
}

{
  *(_QWORD *)result = &off_25135F158;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  *(_QWORD *)result = &off_25135F158;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

float CMMsl::PDRFenceReference::PDRFenceReference(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_25135FA88;
  *(_DWORD *)(a1 + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) == 0)
  {
    v2 = 2;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return *(float *)&v3;
    goto LABEL_5;
  }
  v3 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 20) = 1;
  *(_QWORD *)(a1 + 8) = v3;
  v2 = 3;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    LODWORD(v3) = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 20) = v2;
    *(_DWORD *)(a1 + 16) = v3;
  }
  return *(float *)&v3;
}

{
  float result;

  *(_QWORD *)a1 = &off_25135FA88;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_25135FA88;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

double CMMsl::PrecisionFindingDOTEstimate::PrecisionFindingDOTEstimate(uint64_t a1, uint64_t a2)
{
  char v2;
  double result;

  *(_QWORD *)a1 = &off_2513601F8;
  *(_DWORD *)(a1 + 24) = 0;
  if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
    result = *(double *)(a2 + 16);
    *(_BYTE *)(a1 + 24) = 2;
    *(double *)(a1 + 16) = result;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 24) & 1) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 8);
    *(_BYTE *)(a1 + 24) = v2;
    *(double *)(a1 + 8) = result;
  }
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_2513601F8;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_2513601F8;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::PeerState::PeerState(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)result = &off_25135FE78;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_DWORD *)(result + 16) = v4;
  }
  return result;
}

uint64_t CMMsl::PrecisionFindingSessionStartStop::PrecisionFindingSessionStartStop(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)result = &off_251360268;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_BYTE *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_BYTE *)(result + 16) = v4;
  }
  return result;
}

uint64_t CMMsl::SafetyCompanionStatus::SafetyCompanionStatus(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)result = &off_251360BD0;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_DWORD *)(result + 16) = v4;
  }
  return result;
}

{
  *(_QWORD *)result = &off_251360BD0;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  *(_QWORD *)result = &off_251360BD0;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::KData1::KData1(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)result = &off_25135E5F8;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_DWORD *)(result + 16) = v4;
  }
  return result;
}

{
  *(_QWORD *)result = &off_25135E5F8;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  *(_QWORD *)result = &off_25135E5F8;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

CMMsl *CMMsl::Item::operator=(CMMsl *a1, const CMMsl::Item *a2)
{
  CMMsl::Item *v3;
  _BYTE v5[3624];

  if (a1 != a2)
  {
    CMMsl::Item::Item((CMMsl::Item *)v5, a2);
    CMMsl::swap(a1, (CMMsl::Item *)v5, v3);
    CMMsl::Item::~Item((CMMsl::Item *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::Item *a2, CMMsl::Item *a3)
{
  int v3;
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;

  v3 = *((_DWORD *)this + 904);
  *((_DWORD *)this + 904) = *((_DWORD *)a2 + 904);
  *((_DWORD *)a2 + 904) = v3;
  result = *((double *)this + 77);
  *((_QWORD *)this + 77) = *((_QWORD *)a2 + 77);
  *((double *)a2 + 77) = result;
  v5 = *((_QWORD *)this + 146);
  *((_QWORD *)this + 146) = *((_QWORD *)a2 + 146);
  *((_QWORD *)a2 + 146) = v5;
  v6 = *((_QWORD *)this + 145);
  *((_QWORD *)this + 145) = *((_QWORD *)a2 + 145);
  *((_QWORD *)a2 + 145) = v6;
  v7 = *((_QWORD *)this + 142);
  *((_QWORD *)this + 142) = *((_QWORD *)a2 + 142);
  *((_QWORD *)a2 + 142) = v7;
  v8 = *((_QWORD *)this + 141);
  *((_QWORD *)this + 141) = *((_QWORD *)a2 + 141);
  *((_QWORD *)a2 + 141) = v8;
  v9 = *((_QWORD *)this + 85);
  *((_QWORD *)this + 85) = *((_QWORD *)a2 + 85);
  *((_QWORD *)a2 + 85) = v9;
  v10 = *((_QWORD *)this + 84);
  *((_QWORD *)this + 84) = *((_QWORD *)a2 + 84);
  *((_QWORD *)a2 + 84) = v10;
  v11 = *((_QWORD *)this + 91);
  *((_QWORD *)this + 91) = *((_QWORD *)a2 + 91);
  *((_QWORD *)a2 + 91) = v11;
  v12 = *((_QWORD *)this + 90);
  *((_QWORD *)this + 90) = *((_QWORD *)a2 + 90);
  *((_QWORD *)a2 + 90) = v12;
  v13 = *((_QWORD *)this + 180);
  *((_QWORD *)this + 180) = *((_QWORD *)a2 + 180);
  *((_QWORD *)a2 + 180) = v13;
  v14 = *((_QWORD *)this + 95);
  *((_QWORD *)this + 95) = *((_QWORD *)a2 + 95);
  *((_QWORD *)a2 + 95) = v14;
  v15 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v15;
  v16 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v16;
  v17 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = *((_QWORD *)a2 + 27);
  *((_QWORD *)a2 + 27) = v17;
  v18 = *((_QWORD *)this + 431);
  *((_QWORD *)this + 431) = *((_QWORD *)a2 + 431);
  *((_QWORD *)a2 + 431) = v18;
  v19 = *((_QWORD *)this + 434);
  *((_QWORD *)this + 434) = *((_QWORD *)a2 + 434);
  *((_QWORD *)a2 + 434) = v19;
  v20 = *((_QWORD *)this + 436);
  *((_QWORD *)this + 436) = *((_QWORD *)a2 + 436);
  *((_QWORD *)a2 + 436) = v20;
  v21 = *((_QWORD *)this + 440);
  *((_QWORD *)this + 440) = *((_QWORD *)a2 + 440);
  *((_QWORD *)a2 + 440) = v21;
  v22 = *((_QWORD *)this + 444);
  *((_QWORD *)this + 444) = *((_QWORD *)a2 + 444);
  *((_QWORD *)a2 + 444) = v22;
  v23 = *((_QWORD *)this + 442);
  *((_QWORD *)this + 442) = *((_QWORD *)a2 + 442);
  *((_QWORD *)a2 + 442) = v23;
  v24 = *((_QWORD *)this + 448);
  *((_QWORD *)this + 448) = *((_QWORD *)a2 + 448);
  *((_QWORD *)a2 + 448) = v24;
  v25 = *((_QWORD *)this + 415);
  *((_QWORD *)this + 415) = *((_QWORD *)a2 + 415);
  *((_QWORD *)a2 + 415) = v25;
  v26 = *((_QWORD *)this + 68);
  *((_QWORD *)this + 68) = *((_QWORD *)a2 + 68);
  *((_QWORD *)a2 + 68) = v26;
  v27 = *((_QWORD *)this + 69);
  *((_QWORD *)this + 69) = *((_QWORD *)a2 + 69);
  *((_QWORD *)a2 + 69) = v27;
  v28 = *((_QWORD *)this + 70);
  *((_QWORD *)this + 70) = *((_QWORD *)a2 + 70);
  *((_QWORD *)a2 + 70) = v28;
  v29 = *((_QWORD *)this + 67);
  *((_QWORD *)this + 67) = *((_QWORD *)a2 + 67);
  *((_QWORD *)a2 + 67) = v29;
  v30 = *((_QWORD *)this + 71);
  *((_QWORD *)this + 71) = *((_QWORD *)a2 + 71);
  *((_QWORD *)a2 + 71) = v30;
  v31 = *((_QWORD *)this + 439);
  *((_QWORD *)this + 439) = *((_QWORD *)a2 + 439);
  *((_QWORD *)a2 + 439) = v31;
  v32 = *((_QWORD *)this + 288);
  *((_QWORD *)this + 288) = *((_QWORD *)a2 + 288);
  *((_QWORD *)a2 + 288) = v32;
  v33 = *((_QWORD *)this + 340);
  *((_QWORD *)this + 340) = *((_QWORD *)a2 + 340);
  *((_QWORD *)a2 + 340) = v33;
  v34 = *((_QWORD *)this + 446);
  *((_QWORD *)this + 446) = *((_QWORD *)a2 + 446);
  *((_QWORD *)a2 + 446) = v34;
  v35 = *((_QWORD *)this + 425);
  *((_QWORD *)this + 425) = *((_QWORD *)a2 + 425);
  *((_QWORD *)a2 + 425) = v35;
  v36 = *((_QWORD *)this + 76);
  *((_QWORD *)this + 76) = *((_QWORD *)a2 + 76);
  *((_QWORD *)a2 + 76) = v36;
  v37 = *((_QWORD *)this + 427);
  *((_QWORD *)this + 427) = *((_QWORD *)a2 + 427);
  *((_QWORD *)a2 + 427) = v37;
  v38 = *((_QWORD *)this + 176);
  *((_QWORD *)this + 176) = *((_QWORD *)a2 + 176);
  *((_QWORD *)a2 + 176) = v38;
  v39 = *((_QWORD *)this + 174);
  *((_QWORD *)this + 174) = *((_QWORD *)a2 + 174);
  *((_QWORD *)a2 + 174) = v39;
  v40 = *((_QWORD *)this + 169);
  *((_QWORD *)this + 169) = *((_QWORD *)a2 + 169);
  *((_QWORD *)a2 + 169) = v40;
  v41 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = *((_QWORD *)a2 + 28);
  *((_QWORD *)a2 + 28) = v41;
  v42 = *((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = *((_QWORD *)a2 + 29);
  *((_QWORD *)a2 + 29) = v42;
  v43 = *((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = *((_QWORD *)a2 + 34);
  *((_QWORD *)a2 + 34) = v43;
  v44 = *((_QWORD *)this + 114);
  *((_QWORD *)this + 114) = *((_QWORD *)a2 + 114);
  *((_QWORD *)a2 + 114) = v44;
  v45 = *((_QWORD *)this + 447);
  *((_QWORD *)this + 447) = *((_QWORD *)a2 + 447);
  *((_QWORD *)a2 + 447) = v45;
  v46 = *((_QWORD *)this + 443);
  *((_QWORD *)this + 443) = *((_QWORD *)a2 + 443);
  *((_QWORD *)a2 + 443) = v46;
  v47 = *((_QWORD *)this + 168);
  *((_QWORD *)this + 168) = *((_QWORD *)a2 + 168);
  *((_QWORD *)a2 + 168) = v47;
  v48 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v48;
  v49 = *((_QWORD *)this + 410);
  *((_QWORD *)this + 410) = *((_QWORD *)a2 + 410);
  *((_QWORD *)a2 + 410) = v49;
  v50 = *((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = *((_QWORD *)a2 + 44);
  *((_QWORD *)a2 + 44) = v50;
  v51 = *((_QWORD *)this + 407);
  *((_QWORD *)this + 407) = *((_QWORD *)a2 + 407);
  *((_QWORD *)a2 + 407) = v51;
  v52 = *((_QWORD *)this + 235);
  *((_QWORD *)this + 235) = *((_QWORD *)a2 + 235);
  *((_QWORD *)a2 + 235) = v52;
  v53 = *((_QWORD *)this + 125);
  *((_QWORD *)this + 125) = *((_QWORD *)a2 + 125);
  *((_QWORD *)a2 + 125) = v53;
  v54 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v54;
  v55 = *((_QWORD *)this + 259);
  *((_QWORD *)this + 259) = *((_QWORD *)a2 + 259);
  *((_QWORD *)a2 + 259) = v55;
  v56 = *((_QWORD *)this + 379);
  *((_QWORD *)this + 379) = *((_QWORD *)a2 + 379);
  *((_QWORD *)a2 + 379) = v56;
  v57 = *((_QWORD *)this + 245);
  *((_QWORD *)this + 245) = *((_QWORD *)a2 + 245);
  *((_QWORD *)a2 + 245) = v57;
  v58 = *((_QWORD *)this + 89);
  *((_QWORD *)this + 89) = *((_QWORD *)a2 + 89);
  *((_QWORD *)a2 + 89) = v58;
  v59 = *((_QWORD *)this + 408);
  *((_QWORD *)this + 408) = *((_QWORD *)a2 + 408);
  *((_QWORD *)a2 + 408) = v59;
  v60 = *((_QWORD *)this + 356);
  *((_QWORD *)this + 356) = *((_QWORD *)a2 + 356);
  *((_QWORD *)a2 + 356) = v60;
  v61 = *((_QWORD *)this + 409);
  *((_QWORD *)this + 409) = *((_QWORD *)a2 + 409);
  *((_QWORD *)a2 + 409) = v61;
  v62 = *((_QWORD *)this + 414);
  *((_QWORD *)this + 414) = *((_QWORD *)a2 + 414);
  *((_QWORD *)a2 + 414) = v62;
  v63 = *((_QWORD *)this + 219);
  *((_QWORD *)this + 219) = *((_QWORD *)a2 + 219);
  *((_QWORD *)a2 + 219) = v63;
  v64 = *((_QWORD *)this + 194);
  *((_QWORD *)this + 194) = *((_QWORD *)a2 + 194);
  *((_QWORD *)a2 + 194) = v64;
  v65 = *((_QWORD *)this + 166);
  *((_QWORD *)this + 166) = *((_QWORD *)a2 + 166);
  *((_QWORD *)a2 + 166) = v65;
  v66 = *((_QWORD *)this + 215);
  *((_QWORD *)this + 215) = *((_QWORD *)a2 + 215);
  *((_QWORD *)a2 + 215) = v66;
  v67 = *((_QWORD *)this + 397);
  *((_QWORD *)this + 397) = *((_QWORD *)a2 + 397);
  *((_QWORD *)a2 + 397) = v67;
  v68 = *((_QWORD *)this + 210);
  *((_QWORD *)this + 210) = *((_QWORD *)a2 + 210);
  *((_QWORD *)a2 + 210) = v68;
  v69 = *((_QWORD *)this + 398);
  *((_QWORD *)this + 398) = *((_QWORD *)a2 + 398);
  *((_QWORD *)a2 + 398) = v69;
  v70 = *((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = *((_QWORD *)a2 + 47);
  *((_QWORD *)a2 + 47) = v70;
  v71 = *((_QWORD *)this + 391);
  *((_QWORD *)this + 391) = *((_QWORD *)a2 + 391);
  *((_QWORD *)a2 + 391) = v71;
  v72 = *((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = *((_QWORD *)a2 + 46);
  *((_QWORD *)a2 + 46) = v72;
  v73 = *((_QWORD *)this + 392);
  *((_QWORD *)this + 392) = *((_QWORD *)a2 + 392);
  *((_QWORD *)a2 + 392) = v73;
  v74 = *((_QWORD *)this + 432);
  *((_QWORD *)this + 432) = *((_QWORD *)a2 + 432);
  *((_QWORD *)a2 + 432) = v74;
  v75 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = *((_QWORD *)a2 + 37);
  *((_QWORD *)a2 + 37) = v75;
  v76 = *((_QWORD *)this + 430);
  *((_QWORD *)this + 430) = *((_QWORD *)a2 + 430);
  *((_QWORD *)a2 + 430) = v76;
  v77 = *((_QWORD *)this + 411);
  *((_QWORD *)this + 411) = *((_QWORD *)a2 + 411);
  *((_QWORD *)a2 + 411) = v77;
  v78 = *((_QWORD *)this + 155);
  *((_QWORD *)this + 155) = *((_QWORD *)a2 + 155);
  *((_QWORD *)a2 + 155) = v78;
  v79 = *((_QWORD *)this + 367);
  *((_QWORD *)this + 367) = *((_QWORD *)a2 + 367);
  *((_QWORD *)a2 + 367) = v79;
  v80 = *((_QWORD *)this + 131);
  *((_QWORD *)this + 131) = *((_QWORD *)a2 + 131);
  *((_QWORD *)a2 + 131) = v80;
  v81 = *((_QWORD *)this + 109);
  *((_QWORD *)this + 109) = *((_QWORD *)a2 + 109);
  *((_QWORD *)a2 + 109) = v81;
  v82 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v82;
  v83 = *((_QWORD *)this + 253);
  *((_QWORD *)this + 253) = *((_QWORD *)a2 + 253);
  *((_QWORD *)a2 + 253) = v83;
  v84 = *((_QWORD *)this + 248);
  *((_QWORD *)this + 248) = *((_QWORD *)a2 + 248);
  *((_QWORD *)a2 + 248) = v84;
  v85 = *((_QWORD *)this + 62);
  *((_QWORD *)this + 62) = *((_QWORD *)a2 + 62);
  *((_QWORD *)a2 + 62) = v85;
  v86 = *((_QWORD *)this + 217);
  *((_QWORD *)this + 217) = *((_QWORD *)a2 + 217);
  *((_QWORD *)a2 + 217) = v86;
  v87 = *((_QWORD *)this + 333);
  *((_QWORD *)this + 333) = *((_QWORD *)a2 + 333);
  *((_QWORD *)a2 + 333) = v87;
  v88 = *((_QWORD *)this + 183);
  *((_QWORD *)this + 183) = *((_QWORD *)a2 + 183);
  *((_QWORD *)a2 + 183) = v88;
  v89 = *((_QWORD *)this + 88);
  *((_QWORD *)this + 88) = *((_QWORD *)a2 + 88);
  *((_QWORD *)a2 + 88) = v89;
  v90 = *((_QWORD *)this + 151);
  *((_QWORD *)this + 151) = *((_QWORD *)a2 + 151);
  *((_QWORD *)a2 + 151) = v90;
  v91 = *((_QWORD *)this + 152);
  *((_QWORD *)this + 152) = *((_QWORD *)a2 + 152);
  *((_QWORD *)a2 + 152) = v91;
  v92 = *((_QWORD *)this + 150);
  *((_QWORD *)this + 150) = *((_QWORD *)a2 + 150);
  *((_QWORD *)a2 + 150) = v92;
  v93 = *((_QWORD *)this + 149);
  *((_QWORD *)this + 149) = *((_QWORD *)a2 + 149);
  *((_QWORD *)a2 + 149) = v93;
  v94 = *((_QWORD *)this + 59);
  *((_QWORD *)this + 59) = *((_QWORD *)a2 + 59);
  *((_QWORD *)a2 + 59) = v94;
  v95 = *((_QWORD *)this + 132);
  *((_QWORD *)this + 132) = *((_QWORD *)a2 + 132);
  *((_QWORD *)a2 + 132) = v95;
  v96 = *((_QWORD *)this + 247);
  *((_QWORD *)this + 247) = *((_QWORD *)a2 + 247);
  *((_QWORD *)a2 + 247) = v96;
  v97 = *((_QWORD *)this + 236);
  *((_QWORD *)this + 236) = *((_QWORD *)a2 + 236);
  *((_QWORD *)a2 + 236) = v97;
  v98 = *((_QWORD *)this + 304);
  *((_QWORD *)this + 304) = *((_QWORD *)a2 + 304);
  *((_QWORD *)a2 + 304) = v98;
  v99 = *((_QWORD *)this + 305);
  *((_QWORD *)this + 305) = *((_QWORD *)a2 + 305);
  *((_QWORD *)a2 + 305) = v99;
  v100 = *((_QWORD *)this + 63);
  *((_QWORD *)this + 63) = *((_QWORD *)a2 + 63);
  *((_QWORD *)a2 + 63) = v100;
  v101 = *((_QWORD *)this + 184);
  *((_QWORD *)this + 184) = *((_QWORD *)a2 + 184);
  *((_QWORD *)a2 + 184) = v101;
  v102 = *((_QWORD *)this + 87);
  *((_QWORD *)this + 87) = *((_QWORD *)a2 + 87);
  *((_QWORD *)a2 + 87) = v102;
  v103 = *((_QWORD *)this + 318);
  *((_QWORD *)this + 318) = *((_QWORD *)a2 + 318);
  *((_QWORD *)a2 + 318) = v103;
  v104 = *((_QWORD *)this + 416);
  *((_QWORD *)this + 416) = *((_QWORD *)a2 + 416);
  *((_QWORD *)a2 + 416) = v104;
  v105 = *((_QWORD *)this + 238);
  *((_QWORD *)this + 238) = *((_QWORD *)a2 + 238);
  *((_QWORD *)a2 + 238) = v105;
  v106 = *((_QWORD *)this + 239);
  *((_QWORD *)this + 239) = *((_QWORD *)a2 + 239);
  *((_QWORD *)a2 + 239) = v106;
  v107 = *((_QWORD *)this + 317);
  *((_QWORD *)this + 317) = *((_QWORD *)a2 + 317);
  *((_QWORD *)a2 + 317) = v107;
  v108 = *((_QWORD *)this + 441);
  *((_QWORD *)this + 441) = *((_QWORD *)a2 + 441);
  *((_QWORD *)a2 + 441) = v108;
  v109 = *((_QWORD *)this + 435);
  *((_QWORD *)this + 435) = *((_QWORD *)a2 + 435);
  *((_QWORD *)a2 + 435) = v109;
  v110 = *((_QWORD *)this + 332);
  *((_QWORD *)this + 332) = *((_QWORD *)a2 + 332);
  *((_QWORD *)a2 + 332) = v110;
  v111 = *((_QWORD *)this + 73);
  *((_QWORD *)this + 73) = *((_QWORD *)a2 + 73);
  *((_QWORD *)a2 + 73) = v111;
  v112 = *((_QWORD *)this + 60);
  *((_QWORD *)this + 60) = *((_QWORD *)a2 + 60);
  *((_QWORD *)a2 + 60) = v112;
  v113 = *((_QWORD *)this + 61);
  *((_QWORD *)this + 61) = *((_QWORD *)a2 + 61);
  *((_QWORD *)a2 + 61) = v113;
  v114 = *((_QWORD *)this + 266);
  *((_QWORD *)this + 266) = *((_QWORD *)a2 + 266);
  *((_QWORD *)a2 + 266) = v114;
  v115 = *((_QWORD *)this + 299);
  *((_QWORD *)this + 299) = *((_QWORD *)a2 + 299);
  *((_QWORD *)a2 + 299) = v115;
  v116 = *((_QWORD *)this + 300);
  *((_QWORD *)this + 300) = *((_QWORD *)a2 + 300);
  *((_QWORD *)a2 + 300) = v116;
  v117 = *((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = *((_QWORD *)a2 + 48);
  *((_QWORD *)a2 + 48) = v117;
  v118 = *((_QWORD *)this + 393);
  *((_QWORD *)this + 393) = *((_QWORD *)a2 + 393);
  *((_QWORD *)a2 + 393) = v118;
  v119 = *((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = *((_QWORD *)a2 + 43);
  *((_QWORD *)a2 + 43) = v119;
  v120 = *((_QWORD *)this + 58);
  *((_QWORD *)this + 58) = *((_QWORD *)a2 + 58);
  *((_QWORD *)a2 + 58) = v120;
  v121 = *((_QWORD *)this + 64);
  *((_QWORD *)this + 64) = *((_QWORD *)a2 + 64);
  *((_QWORD *)a2 + 64) = v121;
  v122 = *((_QWORD *)this + 420);
  *((_QWORD *)this + 420) = *((_QWORD *)a2 + 420);
  *((_QWORD *)a2 + 420) = v122;
  v123 = *((_QWORD *)this + 375);
  *((_QWORD *)this + 375) = *((_QWORD *)a2 + 375);
  *((_QWORD *)a2 + 375) = v123;
  v124 = *((_QWORD *)this + 370);
  *((_QWORD *)this + 370) = *((_QWORD *)a2 + 370);
  *((_QWORD *)a2 + 370) = v124;
  v125 = *((_QWORD *)this + 373);
  *((_QWORD *)this + 373) = *((_QWORD *)a2 + 373);
  *((_QWORD *)a2 + 373) = v125;
  v126 = *((_QWORD *)this + 372);
  *((_QWORD *)this + 372) = *((_QWORD *)a2 + 372);
  *((_QWORD *)a2 + 372) = v126;
  v127 = *((_QWORD *)this + 376);
  *((_QWORD *)this + 376) = *((_QWORD *)a2 + 376);
  *((_QWORD *)a2 + 376) = v127;
  v128 = *((_QWORD *)this + 377);
  *((_QWORD *)this + 377) = *((_QWORD *)a2 + 377);
  *((_QWORD *)a2 + 377) = v128;
  v129 = *((_QWORD *)this + 371);
  *((_QWORD *)this + 371) = *((_QWORD *)a2 + 371);
  *((_QWORD *)a2 + 371) = v129;
  v130 = *((_QWORD *)this + 242);
  *((_QWORD *)this + 242) = *((_QWORD *)a2 + 242);
  *((_QWORD *)a2 + 242) = v130;
  v131 = *((_QWORD *)this + 445);
  *((_QWORD *)this + 445) = *((_QWORD *)a2 + 445);
  *((_QWORD *)a2 + 445) = v131;
  v132 = *((_QWORD *)this + 230);
  *((_QWORD *)this + 230) = *((_QWORD *)a2 + 230);
  *((_QWORD *)a2 + 230) = v132;
  v133 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = *((_QWORD *)a2 + 24);
  *((_QWORD *)a2 + 24) = v133;
  v134 = *((_QWORD *)this + 380);
  *((_QWORD *)this + 380) = *((_QWORD *)a2 + 380);
  *((_QWORD *)a2 + 380) = v134;
  v135 = *((_QWORD *)this + 381);
  *((_QWORD *)this + 381) = *((_QWORD *)a2 + 381);
  *((_QWORD *)a2 + 381) = v135;
  v136 = *((_QWORD *)this + 363);
  *((_QWORD *)this + 363) = *((_QWORD *)a2 + 363);
  *((_QWORD *)a2 + 363) = v136;
  v137 = *((_QWORD *)this + 92);
  *((_QWORD *)this + 92) = *((_QWORD *)a2 + 92);
  *((_QWORD *)a2 + 92) = v137;
  v138 = *((_QWORD *)this + 111);
  *((_QWORD *)this + 111) = *((_QWORD *)a2 + 111);
  *((_QWORD *)a2 + 111) = v138;
  v139 = *((_QWORD *)this + 57);
  *((_QWORD *)this + 57) = *((_QWORD *)a2 + 57);
  *((_QWORD *)a2 + 57) = v139;
  v140 = *((_QWORD *)this + 234);
  *((_QWORD *)this + 234) = *((_QWORD *)a2 + 234);
  *((_QWORD *)a2 + 234) = v140;
  v141 = *((_QWORD *)this + 56);
  *((_QWORD *)this + 56) = *((_QWORD *)a2 + 56);
  *((_QWORD *)a2 + 56) = v141;
  v142 = *((_QWORD *)this + 308);
  *((_QWORD *)this + 308) = *((_QWORD *)a2 + 308);
  *((_QWORD *)a2 + 308) = v142;
  v143 = *((_QWORD *)this + 130);
  *((_QWORD *)this + 130) = *((_QWORD *)a2 + 130);
  *((_QWORD *)a2 + 130) = v143;
  v144 = *((_QWORD *)this + 98);
  *((_QWORD *)this + 98) = *((_QWORD *)a2 + 98);
  *((_QWORD *)a2 + 98) = v144;
  v145 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v145;
  v146 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v146;
  v147 = *((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = *((_QWORD *)a2 + 40);
  *((_QWORD *)a2 + 40) = v147;
  v148 = *((_QWORD *)this + 231);
  *((_QWORD *)this + 231) = *((_QWORD *)a2 + 231);
  *((_QWORD *)a2 + 231) = v148;
  v149 = *((_QWORD *)this + 406);
  *((_QWORD *)this + 406) = *((_QWORD *)a2 + 406);
  *((_QWORD *)a2 + 406) = v149;
  v150 = *((_QWORD *)this + 343);
  *((_QWORD *)this + 343) = *((_QWORD *)a2 + 343);
  *((_QWORD *)a2 + 343) = v150;
  v151 = *((_QWORD *)this + 450);
  *((_QWORD *)this + 450) = *((_QWORD *)a2 + 450);
  *((_QWORD *)a2 + 450) = v151;
  v152 = *((_QWORD *)this + 449);
  *((_QWORD *)this + 449) = *((_QWORD *)a2 + 449);
  *((_QWORD *)a2 + 449) = v152;
  v153 = *((_QWORD *)this + 45);
  *((_QWORD *)this + 45) = *((_QWORD *)a2 + 45);
  *((_QWORD *)a2 + 45) = v153;
  v154 = *((_QWORD *)this + 281);
  *((_QWORD *)this + 281) = *((_QWORD *)a2 + 281);
  *((_QWORD *)a2 + 281) = v154;
  v155 = *((_QWORD *)this + 303);
  *((_QWORD *)this + 303) = *((_QWORD *)a2 + 303);
  *((_QWORD *)a2 + 303) = v155;
  v156 = *((_QWORD *)this + 229);
  *((_QWORD *)this + 229) = *((_QWORD *)a2 + 229);
  *((_QWORD *)a2 + 229) = v156;
  v157 = *((_QWORD *)this + 232);
  *((_QWORD *)this + 232) = *((_QWORD *)a2 + 232);
  *((_QWORD *)a2 + 232) = v157;
  v158 = *((_QWORD *)this + 344);
  *((_QWORD *)this + 344) = *((_QWORD *)a2 + 344);
  *((_QWORD *)a2 + 344) = v158;
  v159 = *((_QWORD *)this + 51);
  *((_QWORD *)this + 51) = *((_QWORD *)a2 + 51);
  *((_QWORD *)a2 + 51) = v159;
  v160 = *((_QWORD *)this + 52);
  *((_QWORD *)this + 52) = *((_QWORD *)a2 + 52);
  *((_QWORD *)a2 + 52) = v160;
  v161 = *((_QWORD *)this + 250);
  *((_QWORD *)this + 250) = *((_QWORD *)a2 + 250);
  *((_QWORD *)a2 + 250) = v161;
  v162 = *((_QWORD *)this + 269);
  *((_QWORD *)this + 269) = *((_QWORD *)a2 + 269);
  *((_QWORD *)a2 + 269) = v162;
  v163 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v163;
  v164 = *((_QWORD *)this + 104);
  *((_QWORD *)this + 104) = *((_QWORD *)a2 + 104);
  *((_QWORD *)a2 + 104) = v164;
  v165 = *((_QWORD *)this + 282);
  *((_QWORD *)this + 282) = *((_QWORD *)a2 + 282);
  *((_QWORD *)a2 + 282) = v165;
  v166 = *((_QWORD *)this + 136);
  *((_QWORD *)this + 136) = *((_QWORD *)a2 + 136);
  *((_QWORD *)a2 + 136) = v166;
  v167 = *((_QWORD *)this + 137);
  *((_QWORD *)this + 137) = *((_QWORD *)a2 + 137);
  *((_QWORD *)a2 + 137) = v167;
  v168 = *((_QWORD *)this + 135);
  *((_QWORD *)this + 135) = *((_QWORD *)a2 + 135);
  *((_QWORD *)a2 + 135) = v168;
  v169 = *((_QWORD *)this + 112);
  *((_QWORD *)this + 112) = *((_QWORD *)a2 + 112);
  *((_QWORD *)a2 + 112) = v169;
  v170 = *((_QWORD *)this + 433);
  *((_QWORD *)this + 433) = *((_QWORD *)a2 + 433);
  *((_QWORD *)a2 + 433) = v170;
  v171 = *((_QWORD *)this + 386);
  *((_QWORD *)this + 386) = *((_QWORD *)a2 + 386);
  *((_QWORD *)a2 + 386) = v171;
  v172 = *((_QWORD *)this + 346);
  *((_QWORD *)this + 346) = *((_QWORD *)a2 + 346);
  *((_QWORD *)a2 + 346) = v172;
  v173 = *((_QWORD *)this + 327);
  *((_QWORD *)this + 327) = *((_QWORD *)a2 + 327);
  *((_QWORD *)a2 + 327) = v173;
  v174 = *((_QWORD *)this + 224);
  *((_QWORD *)this + 224) = *((_QWORD *)a2 + 224);
  *((_QWORD *)a2 + 224) = v174;
  v175 = *((_QWORD *)this + 225);
  *((_QWORD *)this + 225) = *((_QWORD *)a2 + 225);
  *((_QWORD *)a2 + 225) = v175;
  v176 = *((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = *((_QWORD *)a2 + 38);
  *((_QWORD *)a2 + 38) = v176;
  v177 = *((_QWORD *)this + 223);
  *((_QWORD *)this + 223) = *((_QWORD *)a2 + 223);
  *((_QWORD *)a2 + 223) = v177;
  v178 = *((_QWORD *)this + 417);
  *((_QWORD *)this + 417) = *((_QWORD *)a2 + 417);
  *((_QWORD *)a2 + 417) = v178;
  v179 = *((_QWORD *)this + 325);
  *((_QWORD *)this + 325) = *((_QWORD *)a2 + 325);
  *((_QWORD *)a2 + 325) = v179;
  v180 = *((_QWORD *)this + 54);
  *((_QWORD *)this + 54) = *((_QWORD *)a2 + 54);
  *((_QWORD *)a2 + 54) = v180;
  v181 = *((_QWORD *)this + 339);
  *((_QWORD *)this + 339) = *((_QWORD *)a2 + 339);
  *((_QWORD *)a2 + 339) = v181;
  v182 = *((_QWORD *)this + 226);
  *((_QWORD *)this + 226) = *((_QWORD *)a2 + 226);
  *((_QWORD *)a2 + 226) = v182;
  v183 = *((_QWORD *)this + 222);
  *((_QWORD *)this + 222) = *((_QWORD *)a2 + 222);
  *((_QWORD *)a2 + 222) = v183;
  v184 = *((_QWORD *)this + 50);
  *((_QWORD *)this + 50) = *((_QWORD *)a2 + 50);
  *((_QWORD *)a2 + 50) = v184;
  v185 = *((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = *((_QWORD *)a2 + 55);
  *((_QWORD *)a2 + 55) = v185;
  v186 = *((_QWORD *)this + 165);
  *((_QWORD *)this + 165) = *((_QWORD *)a2 + 165);
  *((_QWORD *)a2 + 165) = v186;
  v187 = *((_QWORD *)this + 362);
  *((_QWORD *)this + 362) = *((_QWORD *)a2 + 362);
  *((_QWORD *)a2 + 362) = v187;
  v188 = *((_QWORD *)this + 365);
  *((_QWORD *)this + 365) = *((_QWORD *)a2 + 365);
  *((_QWORD *)a2 + 365) = v188;
  v189 = *((_QWORD *)this + 364);
  *((_QWORD *)this + 364) = *((_QWORD *)a2 + 364);
  *((_QWORD *)a2 + 364) = v189;
  v190 = *((_QWORD *)this + 129);
  *((_QWORD *)this + 129) = *((_QWORD *)a2 + 129);
  *((_QWORD *)a2 + 129) = v190;
  v191 = *((_QWORD *)this + 424);
  *((_QWORD *)this + 424) = *((_QWORD *)a2 + 424);
  *((_QWORD *)a2 + 424) = v191;
  v192 = *((_QWORD *)this + 115);
  *((_QWORD *)this + 115) = *((_QWORD *)a2 + 115);
  *((_QWORD *)a2 + 115) = v192;
  v193 = *((_QWORD *)this + 421);
  *((_QWORD *)this + 421) = *((_QWORD *)a2 + 421);
  *((_QWORD *)a2 + 421) = v193;
  v194 = *((_QWORD *)this + 422);
  *((_QWORD *)this + 422) = *((_QWORD *)a2 + 422);
  *((_QWORD *)a2 + 422) = v194;
  v195 = *((_QWORD *)this + 395);
  *((_QWORD *)this + 395) = *((_QWORD *)a2 + 395);
  *((_QWORD *)a2 + 395) = v195;
  v196 = *((_QWORD *)this + 139);
  *((_QWORD *)this + 139) = *((_QWORD *)a2 + 139);
  *((_QWORD *)a2 + 139) = v196;
  v197 = *((_QWORD *)this + 140);
  *((_QWORD *)this + 140) = *((_QWORD *)a2 + 140);
  *((_QWORD *)a2 + 140) = v197;
  v198 = *((_QWORD *)this + 243);
  *((_QWORD *)this + 243) = *((_QWORD *)a2 + 243);
  *((_QWORD *)a2 + 243) = v198;
  v199 = *((_QWORD *)this + 128);
  *((_QWORD *)this + 128) = *((_QWORD *)a2 + 128);
  *((_QWORD *)a2 + 128) = v199;
  v200 = *((_QWORD *)this + 438);
  *((_QWORD *)this + 438) = *((_QWORD *)a2 + 438);
  *((_QWORD *)a2 + 438) = v200;
  v201 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v201;
  v202 = *((_QWORD *)this + 291);
  *((_QWORD *)this + 291) = *((_QWORD *)a2 + 291);
  *((_QWORD *)a2 + 291) = v202;
  v203 = *((_QWORD *)this + 177);
  *((_QWORD *)this + 177) = *((_QWORD *)a2 + 177);
  *((_QWORD *)a2 + 177) = v203;
  v204 = *((_QWORD *)this + 301);
  *((_QWORD *)this + 301) = *((_QWORD *)a2 + 301);
  *((_QWORD *)a2 + 301) = v204;
  v205 = *((_QWORD *)this + 302);
  *((_QWORD *)this + 302) = *((_QWORD *)a2 + 302);
  *((_QWORD *)a2 + 302) = v205;
  v206 = *((_QWORD *)this + 290);
  *((_QWORD *)this + 290) = *((_QWORD *)a2 + 290);
  *((_QWORD *)a2 + 290) = v206;
  v207 = *((_QWORD *)this + 108);
  *((_QWORD *)this + 108) = *((_QWORD *)a2 + 108);
  *((_QWORD *)a2 + 108) = v207;
  v208 = *((_QWORD *)this + 178);
  *((_QWORD *)this + 178) = *((_QWORD *)a2 + 178);
  *((_QWORD *)a2 + 178) = v208;
  v209 = *((_QWORD *)this + 428);
  *((_QWORD *)this + 428) = *((_QWORD *)a2 + 428);
  *((_QWORD *)a2 + 428) = v209;
  v210 = *((_QWORD *)this + 294);
  *((_QWORD *)this + 294) = *((_QWORD *)a2 + 294);
  *((_QWORD *)a2 + 294) = v210;
  v211 = *((_QWORD *)this + 297);
  *((_QWORD *)this + 297) = *((_QWORD *)a2 + 297);
  *((_QWORD *)a2 + 297) = v211;
  v212 = *((_QWORD *)this + 159);
  *((_QWORD *)this + 159) = *((_QWORD *)a2 + 159);
  *((_QWORD *)a2 + 159) = v212;
  v213 = *((_QWORD *)this + 374);
  *((_QWORD *)this + 374) = *((_QWORD *)a2 + 374);
  *((_QWORD *)a2 + 374) = v213;
  v214 = *((_QWORD *)this + 296);
  *((_QWORD *)this + 296) = *((_QWORD *)a2 + 296);
  *((_QWORD *)a2 + 296) = v214;
  v215 = *((_QWORD *)this + 246);
  *((_QWORD *)this + 246) = *((_QWORD *)a2 + 246);
  *((_QWORD *)a2 + 246) = v215;
  v216 = *((_QWORD *)this + 423);
  *((_QWORD *)this + 423) = *((_QWORD *)a2 + 423);
  *((_QWORD *)a2 + 423) = v216;
  v217 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = *((_QWORD *)a2 + 22);
  *((_QWORD *)a2 + 22) = v217;
  v218 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = *((_QWORD *)a2 + 26);
  *((_QWORD *)a2 + 26) = v218;
  v219 = *((_QWORD *)this + 254);
  *((_QWORD *)this + 254) = *((_QWORD *)a2 + 254);
  *((_QWORD *)a2 + 254) = v219;
  v220 = *((_QWORD *)this + 97);
  *((_QWORD *)this + 97) = *((_QWORD *)a2 + 97);
  *((_QWORD *)a2 + 97) = v220;
  v221 = *((_QWORD *)this + 306);
  *((_QWORD *)this + 306) = *((_QWORD *)a2 + 306);
  *((_QWORD *)a2 + 306) = v221;
  v222 = *((_QWORD *)this + 307);
  *((_QWORD *)this + 307) = *((_QWORD *)a2 + 307);
  *((_QWORD *)a2 + 307) = v222;
  v223 = *((_QWORD *)this + 167);
  *((_QWORD *)this + 167) = *((_QWORD *)a2 + 167);
  *((_QWORD *)a2 + 167) = v223;
  v224 = *((_QWORD *)this + 437);
  *((_QWORD *)this + 437) = *((_QWORD *)a2 + 437);
  *((_QWORD *)a2 + 437) = v224;
  v225 = *((_QWORD *)this + 384);
  *((_QWORD *)this + 384) = *((_QWORD *)a2 + 384);
  *((_QWORD *)a2 + 384) = v225;
  v226 = *((_QWORD *)this + 396);
  *((_QWORD *)this + 396) = *((_QWORD *)a2 + 396);
  *((_QWORD *)a2 + 396) = v226;
  v227 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v227;
  v228 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v228;
  v229 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v229;
  v230 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v230;
  v231 = *((_QWORD *)this + 143);
  *((_QWORD *)this + 143) = *((_QWORD *)a2 + 143);
  *((_QWORD *)a2 + 143) = v231;
  v232 = *((_QWORD *)this + 157);
  *((_QWORD *)this + 157) = *((_QWORD *)a2 + 157);
  *((_QWORD *)a2 + 157) = v232;
  v233 = *((_QWORD *)this + 158);
  *((_QWORD *)this + 158) = *((_QWORD *)a2 + 158);
  *((_QWORD *)a2 + 158) = v233;
  v234 = *((_QWORD *)this + 144);
  *((_QWORD *)this + 144) = *((_QWORD *)a2 + 144);
  *((_QWORD *)a2 + 144) = v234;
  v235 = *((_QWORD *)this + 148);
  *((_QWORD *)this + 148) = *((_QWORD *)a2 + 148);
  *((_QWORD *)a2 + 148) = v235;
  v236 = *((_QWORD *)this + 154);
  *((_QWORD *)this + 154) = *((_QWORD *)a2 + 154);
  *((_QWORD *)a2 + 154) = v236;
  v237 = *((_QWORD *)this + 240);
  *((_QWORD *)this + 240) = *((_QWORD *)a2 + 240);
  *((_QWORD *)a2 + 240) = v237;
  v238 = *((_QWORD *)this + 80);
  *((_QWORD *)this + 80) = *((_QWORD *)a2 + 80);
  *((_QWORD *)a2 + 80) = v238;
  v239 = *((_QWORD *)this + 81);
  *((_QWORD *)this + 81) = *((_QWORD *)a2 + 81);
  *((_QWORD *)a2 + 81) = v239;
  v240 = *((_QWORD *)this + 153);
  *((_QWORD *)this + 153) = *((_QWORD *)a2 + 153);
  *((_QWORD *)a2 + 153) = v240;
  v241 = *((_QWORD *)this + 82);
  *((_QWORD *)this + 82) = *((_QWORD *)a2 + 82);
  *((_QWORD *)a2 + 82) = v241;
  v242 = *((_QWORD *)this + 316);
  *((_QWORD *)this + 316) = *((_QWORD *)a2 + 316);
  *((_QWORD *)a2 + 316) = v242;
  v243 = *((_QWORD *)this + 323);
  *((_QWORD *)this + 323) = *((_QWORD *)a2 + 323);
  *((_QWORD *)a2 + 323) = v243;
  v244 = *((_QWORD *)this + 319);
  *((_QWORD *)this + 319) = *((_QWORD *)a2 + 319);
  *((_QWORD *)a2 + 319) = v244;
  v245 = *((_QWORD *)this + 324);
  *((_QWORD *)this + 324) = *((_QWORD *)a2 + 324);
  *((_QWORD *)a2 + 324) = v245;
  v246 = *((_QWORD *)this + 394);
  *((_QWORD *)this + 394) = *((_QWORD *)a2 + 394);
  *((_QWORD *)a2 + 394) = v246;
  v247 = *((_QWORD *)this + 93);
  *((_QWORD *)this + 93) = *((_QWORD *)a2 + 93);
  *((_QWORD *)a2 + 93) = v247;
  v248 = *((_QWORD *)this + 256);
  *((_QWORD *)this + 256) = *((_QWORD *)a2 + 256);
  *((_QWORD *)a2 + 256) = v248;
  v249 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v249;
  v250 = *((_QWORD *)this + 156);
  *((_QWORD *)this + 156) = *((_QWORD *)a2 + 156);
  *((_QWORD *)a2 + 156) = v250;
  v251 = *((_QWORD *)this + 322);
  *((_QWORD *)this + 322) = *((_QWORD *)a2 + 322);
  *((_QWORD *)a2 + 322) = v251;
  v252 = *((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = *((_QWORD *)a2 + 49);
  *((_QWORD *)a2 + 49) = v252;
  v253 = *((_QWORD *)this + 355);
  *((_QWORD *)this + 355) = *((_QWORD *)a2 + 355);
  *((_QWORD *)a2 + 355) = v253;
  v254 = *((_QWORD *)this + 233);
  *((_QWORD *)this + 233) = *((_QWORD *)a2 + 233);
  *((_QWORD *)a2 + 233) = v254;
  v255 = *((_QWORD *)this + 252);
  *((_QWORD *)this + 252) = *((_QWORD *)a2 + 252);
  *((_QWORD *)a2 + 252) = v255;
  v256 = *((_QWORD *)this + 110);
  *((_QWORD *)this + 110) = *((_QWORD *)a2 + 110);
  *((_QWORD *)a2 + 110) = v256;
  v257 = *((_QWORD *)this + 263);
  *((_QWORD *)this + 263) = *((_QWORD *)a2 + 263);
  *((_QWORD *)a2 + 263) = v257;
  v258 = *((_QWORD *)this + 262);
  *((_QWORD *)this + 262) = *((_QWORD *)a2 + 262);
  *((_QWORD *)a2 + 262) = v258;
  v259 = *((_QWORD *)this + 66);
  *((_QWORD *)this + 66) = *((_QWORD *)a2 + 66);
  *((_QWORD *)a2 + 66) = v259;
  v260 = *((_QWORD *)this + 429);
  *((_QWORD *)this + 429) = *((_QWORD *)a2 + 429);
  *((_QWORD *)a2 + 429) = v260;
  v261 = *((_QWORD *)this + 267);
  *((_QWORD *)this + 267) = *((_QWORD *)a2 + 267);
  *((_QWORD *)a2 + 267) = v261;
  v262 = *((_QWORD *)this + 383);
  *((_QWORD *)this + 383) = *((_QWORD *)a2 + 383);
  *((_QWORD *)a2 + 383) = v262;
  v263 = *((_QWORD *)this + 106);
  *((_QWORD *)this + 106) = *((_QWORD *)a2 + 106);
  *((_QWORD *)a2 + 106) = v263;
  v264 = *((_QWORD *)this + 79);
  *((_QWORD *)this + 79) = *((_QWORD *)a2 + 79);
  *((_QWORD *)a2 + 79) = v264;
  v265 = *((_QWORD *)this + 251);
  *((_QWORD *)this + 251) = *((_QWORD *)a2 + 251);
  *((_QWORD *)a2 + 251) = v265;
  v266 = *((_QWORD *)this + 258);
  *((_QWORD *)this + 258) = *((_QWORD *)a2 + 258);
  *((_QWORD *)a2 + 258) = v266;
  v267 = *((_QWORD *)this + 385);
  *((_QWORD *)this + 385) = *((_QWORD *)a2 + 385);
  *((_QWORD *)a2 + 385) = v267;
  v268 = *((_QWORD *)this + 75);
  *((_QWORD *)this + 75) = *((_QWORD *)a2 + 75);
  *((_QWORD *)a2 + 75) = v268;
  v269 = *((_QWORD *)this + 264);
  *((_QWORD *)this + 264) = *((_QWORD *)a2 + 264);
  *((_QWORD *)a2 + 264) = v269;
  v270 = *((_QWORD *)this + 244);
  *((_QWORD *)this + 244) = *((_QWORD *)a2 + 244);
  *((_QWORD *)a2 + 244) = v270;
  v271 = *((_QWORD *)this + 126);
  *((_QWORD *)this + 126) = *((_QWORD *)a2 + 126);
  *((_QWORD *)a2 + 126) = v271;
  v272 = *((_QWORD *)this + 53);
  *((_QWORD *)this + 53) = *((_QWORD *)a2 + 53);
  *((_QWORD *)a2 + 53) = v272;
  v273 = *((_QWORD *)this + 402);
  *((_QWORD *)this + 402) = *((_QWORD *)a2 + 402);
  *((_QWORD *)a2 + 402) = v273;
  v274 = *((_QWORD *)this + 378);
  *((_QWORD *)this + 378) = *((_QWORD *)a2 + 378);
  *((_QWORD *)a2 + 378) = v274;
  v275 = *((_QWORD *)this + 426);
  *((_QWORD *)this + 426) = *((_QWORD *)a2 + 426);
  *((_QWORD *)a2 + 426) = v275;
  v276 = *((_QWORD *)this + 257);
  *((_QWORD *)this + 257) = *((_QWORD *)a2 + 257);
  *((_QWORD *)a2 + 257) = v276;
  v277 = *((_QWORD *)this + 255);
  *((_QWORD *)this + 255) = *((_QWORD *)a2 + 255);
  *((_QWORD *)a2 + 255) = v277;
  v278 = *((_QWORD *)this + 265);
  *((_QWORD *)this + 265) = *((_QWORD *)a2 + 265);
  *((_QWORD *)a2 + 265) = v278;
  v279 = *((_QWORD *)this + 321);
  *((_QWORD *)this + 321) = *((_QWORD *)a2 + 321);
  *((_QWORD *)a2 + 321) = v279;
  v280 = *((_QWORD *)this + 175);
  *((_QWORD *)this + 175) = *((_QWORD *)a2 + 175);
  *((_QWORD *)a2 + 175) = v280;
  v281 = *((_QWORD *)this + 78);
  *((_QWORD *)this + 78) = *((_QWORD *)a2 + 78);
  *((_QWORD *)a2 + 78) = v281;
  v282 = *((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = *((_QWORD *)a2 + 36);
  *((_QWORD *)a2 + 36) = v282;
  v283 = *((_QWORD *)this + 173);
  *((_QWORD *)this + 173) = *((_QWORD *)a2 + 173);
  *((_QWORD *)a2 + 173) = v283;
  v284 = *((_QWORD *)this + 171);
  *((_QWORD *)this + 171) = *((_QWORD *)a2 + 171);
  *((_QWORD *)a2 + 171) = v284;
  v285 = *((_QWORD *)this + 172);
  *((_QWORD *)this + 172) = *((_QWORD *)a2 + 172);
  *((_QWORD *)a2 + 172) = v285;
  v286 = *((_QWORD *)this + 170);
  *((_QWORD *)this + 170) = *((_QWORD *)a2 + 170);
  *((_QWORD *)a2 + 170) = v286;
  v287 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v287;
  v288 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v288;
  v289 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = *((_QWORD *)a2 + 30);
  *((_QWORD *)a2 + 30) = v289;
  v290 = *((_QWORD *)this + 390);
  *((_QWORD *)this + 390) = *((_QWORD *)a2 + 390);
  *((_QWORD *)a2 + 390) = v290;
  v291 = *((_QWORD *)this + 389);
  *((_QWORD *)this + 389) = *((_QWORD *)a2 + 389);
  *((_QWORD *)a2 + 389) = v291;
  v292 = *((_QWORD *)this + 105);
  *((_QWORD *)this + 105) = *((_QWORD *)a2 + 105);
  *((_QWORD *)a2 + 105) = v292;
  v293 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = *((_QWORD *)a2 + 35);
  *((_QWORD *)a2 + 35) = v293;
  v294 = *((_QWORD *)this + 138);
  *((_QWORD *)this + 138) = *((_QWORD *)a2 + 138);
  *((_QWORD *)a2 + 138) = v294;
  v295 = *((_QWORD *)this + 336);
  *((_QWORD *)this + 336) = *((_QWORD *)a2 + 336);
  *((_QWORD *)a2 + 336) = v295;
  v296 = *((_QWORD *)this + 338);
  *((_QWORD *)this + 338) = *((_QWORD *)a2 + 338);
  *((_QWORD *)a2 + 338) = v296;
  v297 = *((_QWORD *)this + 337);
  *((_QWORD *)this + 337) = *((_QWORD *)a2 + 337);
  *((_QWORD *)a2 + 337) = v297;
  v298 = *((_QWORD *)this + 451);
  *((_QWORD *)this + 451) = *((_QWORD *)a2 + 451);
  *((_QWORD *)a2 + 451) = v298;
  v299 = *((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = *((_QWORD *)a2 + 41);
  *((_QWORD *)a2 + 41) = v299;
  v300 = *((_QWORD *)this + 315);
  *((_QWORD *)this + 315) = *((_QWORD *)a2 + 315);
  *((_QWORD *)a2 + 315) = v300;
  v301 = *((_QWORD *)this + 261);
  *((_QWORD *)this + 261) = *((_QWORD *)a2 + 261);
  *((_QWORD *)a2 + 261) = v301;
  v302 = *((_QWORD *)this + 260);
  *((_QWORD *)this + 260) = *((_QWORD *)a2 + 260);
  *((_QWORD *)a2 + 260) = v302;
  v303 = *((_QWORD *)this + 65);
  *((_QWORD *)this + 65) = *((_QWORD *)a2 + 65);
  *((_QWORD *)a2 + 65) = v303;
  v304 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = *((_QWORD *)a2 + 20);
  *((_QWORD *)a2 + 20) = v304;
  v305 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = *((_QWORD *)a2 + 21);
  *((_QWORD *)a2 + 21) = v305;
  v306 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 19) = v306;
  v307 = *((_QWORD *)this + 133);
  *((_QWORD *)this + 133) = *((_QWORD *)a2 + 133);
  *((_QWORD *)a2 + 133) = v307;
  v308 = *((_QWORD *)this + 134);
  *((_QWORD *)this + 134) = *((_QWORD *)a2 + 134);
  *((_QWORD *)a2 + 134) = v308;
  v309 = *((_QWORD *)this + 83);
  *((_QWORD *)this + 83) = *((_QWORD *)a2 + 83);
  *((_QWORD *)a2 + 83) = v309;
  v310 = *((_QWORD *)this + 413);
  *((_QWORD *)this + 413) = *((_QWORD *)a2 + 413);
  *((_QWORD *)a2 + 413) = v310;
  v311 = *((_QWORD *)this + 412);
  *((_QWORD *)this + 412) = *((_QWORD *)a2 + 412);
  *((_QWORD *)a2 + 412) = v311;
  v312 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = *((_QWORD *)a2 + 25);
  *((_QWORD *)a2 + 25) = v312;
  v313 = *((_QWORD *)this + 119);
  *((_QWORD *)this + 119) = *((_QWORD *)a2 + 119);
  *((_QWORD *)a2 + 119) = v313;
  v314 = *((_QWORD *)this + 120);
  *((_QWORD *)this + 120) = *((_QWORD *)a2 + 120);
  *((_QWORD *)a2 + 120) = v314;
  v315 = *((_QWORD *)this + 121);
  *((_QWORD *)this + 121) = *((_QWORD *)a2 + 121);
  *((_QWORD *)a2 + 121) = v315;
  v316 = *((_QWORD *)this + 117);
  *((_QWORD *)this + 117) = *((_QWORD *)a2 + 117);
  *((_QWORD *)a2 + 117) = v316;
  v317 = *((_QWORD *)this + 124);
  *((_QWORD *)this + 124) = *((_QWORD *)a2 + 124);
  *((_QWORD *)a2 + 124) = v317;
  v318 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v318;
  v319 = *((_QWORD *)this + 335);
  *((_QWORD *)this + 335) = *((_QWORD *)a2 + 335);
  *((_QWORD *)a2 + 335) = v319;
  v320 = *((_QWORD *)this + 334);
  *((_QWORD *)this + 334) = *((_QWORD *)a2 + 334);
  *((_QWORD *)a2 + 334) = v320;
  v321 = *((_QWORD *)this + 94);
  *((_QWORD *)this + 94) = *((_QWORD *)a2 + 94);
  *((_QWORD *)a2 + 94) = v321;
  v322 = *((_QWORD *)this + 118);
  *((_QWORD *)this + 118) = *((_QWORD *)a2 + 118);
  *((_QWORD *)a2 + 118) = v322;
  v323 = *((_QWORD *)this + 419);
  *((_QWORD *)this + 419) = *((_QWORD *)a2 + 419);
  *((_QWORD *)a2 + 419) = v323;
  v324 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = *((_QWORD *)a2 + 23);
  *((_QWORD *)a2 + 23) = v324;
  v325 = *((_QWORD *)this + 122);
  *((_QWORD *)this + 122) = *((_QWORD *)a2 + 122);
  *((_QWORD *)a2 + 122) = v325;
  v326 = *((_QWORD *)this + 147);
  *((_QWORD *)this + 147) = *((_QWORD *)a2 + 147);
  *((_QWORD *)a2 + 147) = v326;
  v327 = *((_QWORD *)this + 382);
  *((_QWORD *)this + 382) = *((_QWORD *)a2 + 382);
  *((_QWORD *)a2 + 382) = v327;
  v328 = *((_QWORD *)this + 127);
  *((_QWORD *)this + 127) = *((_QWORD *)a2 + 127);
  *((_QWORD *)a2 + 127) = v328;
  v329 = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = *((_QWORD *)a2 + 33);
  *((_QWORD *)a2 + 33) = v329;
  v330 = *((_QWORD *)this + 358);
  *((_QWORD *)this + 358) = *((_QWORD *)a2 + 358);
  *((_QWORD *)a2 + 358) = v330;
  v331 = *((_QWORD *)this + 361);
  *((_QWORD *)this + 361) = *((_QWORD *)a2 + 361);
  *((_QWORD *)a2 + 361) = v331;
  v332 = *((_QWORD *)this + 359);
  *((_QWORD *)this + 359) = *((_QWORD *)a2 + 359);
  *((_QWORD *)a2 + 359) = v332;
  v333 = *((_QWORD *)this + 360);
  *((_QWORD *)this + 360) = *((_QWORD *)a2 + 360);
  *((_QWORD *)a2 + 360) = v333;
  v334 = *((_QWORD *)this + 366);
  *((_QWORD *)this + 366) = *((_QWORD *)a2 + 366);
  *((_QWORD *)a2 + 366) = v334;
  v335 = *((_QWORD *)this + 123);
  *((_QWORD *)this + 123) = *((_QWORD *)a2 + 123);
  *((_QWORD *)a2 + 123) = v335;
  v336 = *((_QWORD *)this + 182);
  *((_QWORD *)this + 182) = *((_QWORD *)a2 + 182);
  *((_QWORD *)a2 + 182) = v336;
  v337 = *((_QWORD *)this + 320);
  *((_QWORD *)this + 320) = *((_QWORD *)a2 + 320);
  *((_QWORD *)a2 + 320) = v337;
  v338 = *((_QWORD *)this + 249);
  *((_QWORD *)this + 249) = *((_QWORD *)a2 + 249);
  *((_QWORD *)a2 + 249) = v338;
  v339 = *((_QWORD *)this + 116);
  *((_QWORD *)this + 116) = *((_QWORD *)a2 + 116);
  *((_QWORD *)a2 + 116) = v339;
  v340 = *((_QWORD *)this + 228);
  *((_QWORD *)this + 228) = *((_QWORD *)a2 + 228);
  *((_QWORD *)a2 + 228) = v340;
  v341 = *((_QWORD *)this + 102);
  *((_QWORD *)this + 102) = *((_QWORD *)a2 + 102);
  *((_QWORD *)a2 + 102) = v341;
  v342 = *((_QWORD *)this + 100);
  *((_QWORD *)this + 100) = *((_QWORD *)a2 + 100);
  *((_QWORD *)a2 + 100) = v342;
  v343 = *((_QWORD *)this + 101);
  *((_QWORD *)this + 101) = *((_QWORD *)a2 + 101);
  *((_QWORD *)a2 + 101) = v343;
  v344 = *((_QWORD *)this + 99);
  *((_QWORD *)this + 99) = *((_QWORD *)a2 + 99);
  *((_QWORD *)a2 + 99) = v344;
  v345 = *((_QWORD *)this + 268);
  *((_QWORD *)this + 268) = *((_QWORD *)a2 + 268);
  *((_QWORD *)a2 + 268) = v345;
  v346 = *((_QWORD *)this + 191);
  *((_QWORD *)this + 191) = *((_QWORD *)a2 + 191);
  *((_QWORD *)a2 + 191) = v346;
  v347 = *((_QWORD *)this + 192);
  *((_QWORD *)this + 192) = *((_QWORD *)a2 + 192);
  *((_QWORD *)a2 + 192) = v347;
  v348 = *((_QWORD *)this + 195);
  *((_QWORD *)this + 195) = *((_QWORD *)a2 + 195);
  *((_QWORD *)a2 + 195) = v348;
  v349 = *((_QWORD *)this + 206);
  *((_QWORD *)this + 206) = *((_QWORD *)a2 + 206);
  *((_QWORD *)a2 + 206) = v349;
  v350 = *((_QWORD *)this + 221);
  *((_QWORD *)this + 221) = *((_QWORD *)a2 + 221);
  *((_QWORD *)a2 + 221) = v350;
  v351 = *((_QWORD *)this + 220);
  *((_QWORD *)this + 220) = *((_QWORD *)a2 + 220);
  *((_QWORD *)a2 + 220) = v351;
  v352 = *((_QWORD *)this + 204);
  *((_QWORD *)this + 204) = *((_QWORD *)a2 + 204);
  *((_QWORD *)a2 + 204) = v352;
  v353 = *((_QWORD *)this + 164);
  *((_QWORD *)this + 164) = *((_QWORD *)a2 + 164);
  *((_QWORD *)a2 + 164) = v353;
  v354 = *((_QWORD *)this + 163);
  *((_QWORD *)this + 163) = *((_QWORD *)a2 + 163);
  *((_QWORD *)a2 + 163) = v354;
  v355 = *((_QWORD *)this + 190);
  *((_QWORD *)this + 190) = *((_QWORD *)a2 + 190);
  *((_QWORD *)a2 + 190) = v355;
  v356 = *((_QWORD *)this + 193);
  *((_QWORD *)this + 193) = *((_QWORD *)a2 + 193);
  *((_QWORD *)a2 + 193) = v356;
  v357 = *((_QWORD *)this + 207);
  *((_QWORD *)this + 207) = *((_QWORD *)a2 + 207);
  *((_QWORD *)a2 + 207) = v357;
  v358 = *((_QWORD *)this + 208);
  *((_QWORD *)this + 208) = *((_QWORD *)a2 + 208);
  *((_QWORD *)a2 + 208) = v358;
  v359 = *((_QWORD *)this + 212);
  *((_QWORD *)this + 212) = *((_QWORD *)a2 + 212);
  *((_QWORD *)a2 + 212) = v359;
  v360 = *((_QWORD *)this + 200);
  *((_QWORD *)this + 200) = *((_QWORD *)a2 + 200);
  *((_QWORD *)a2 + 200) = v360;
  v361 = *((_QWORD *)this + 198);
  *((_QWORD *)this + 198) = *((_QWORD *)a2 + 198);
  *((_QWORD *)a2 + 198) = v361;
  v362 = *((_QWORD *)this + 213);
  *((_QWORD *)this + 213) = *((_QWORD *)a2 + 213);
  *((_QWORD *)a2 + 213) = v362;
  v363 = *((_QWORD *)this + 199);
  *((_QWORD *)this + 199) = *((_QWORD *)a2 + 199);
  *((_QWORD *)a2 + 199) = v363;
  v364 = *((_QWORD *)this + 209);
  *((_QWORD *)this + 209) = *((_QWORD *)a2 + 209);
  *((_QWORD *)a2 + 209) = v364;
  v365 = *((_QWORD *)this + 96);
  *((_QWORD *)this + 96) = *((_QWORD *)a2 + 96);
  *((_QWORD *)a2 + 96) = v365;
  v366 = *((_QWORD *)this + 403);
  *((_QWORD *)this + 403) = *((_QWORD *)a2 + 403);
  *((_QWORD *)a2 + 403) = v366;
  v367 = *((_QWORD *)this + 162);
  *((_QWORD *)this + 162) = *((_QWORD *)a2 + 162);
  *((_QWORD *)a2 + 162) = v367;
  v368 = *((_QWORD *)this + 404);
  *((_QWORD *)this + 404) = *((_QWORD *)a2 + 404);
  *((_QWORD *)a2 + 404) = v368;
  v369 = *((_QWORD *)this + 405);
  *((_QWORD *)this + 405) = *((_QWORD *)a2 + 405);
  *((_QWORD *)a2 + 405) = v369;
  v370 = *((_QWORD *)this + 341);
  *((_QWORD *)this + 341) = *((_QWORD *)a2 + 341);
  *((_QWORD *)a2 + 341) = v370;
  v371 = *((_QWORD *)this + 342);
  *((_QWORD *)this + 342) = *((_QWORD *)a2 + 342);
  *((_QWORD *)a2 + 342) = v371;
  v372 = *((_QWORD *)this + 345);
  *((_QWORD *)this + 345) = *((_QWORD *)a2 + 345);
  *((_QWORD *)a2 + 345) = v372;
  v373 = *((_QWORD *)this + 350);
  *((_QWORD *)this + 350) = *((_QWORD *)a2 + 350);
  *((_QWORD *)a2 + 350) = v373;
  v374 = *((_QWORD *)this + 348);
  *((_QWORD *)this + 348) = *((_QWORD *)a2 + 348);
  *((_QWORD *)a2 + 348) = v374;
  v375 = *((_QWORD *)this + 214);
  *((_QWORD *)this + 214) = *((_QWORD *)a2 + 214);
  *((_QWORD *)a2 + 214) = v375;
  v376 = *((_QWORD *)this + 203);
  *((_QWORD *)this + 203) = *((_QWORD *)a2 + 203);
  *((_QWORD *)a2 + 203) = v376;
  v377 = *((_QWORD *)this + 347);
  *((_QWORD *)this + 347) = *((_QWORD *)a2 + 347);
  *((_QWORD *)a2 + 347) = v377;
  v378 = *((_QWORD *)this + 181);
  *((_QWORD *)this + 181) = *((_QWORD *)a2 + 181);
  *((_QWORD *)a2 + 181) = v378;
  v379 = *((_QWORD *)this + 197);
  *((_QWORD *)this + 197) = *((_QWORD *)a2 + 197);
  *((_QWORD *)a2 + 197) = v379;
  v380 = *((_QWORD *)this + 205);
  *((_QWORD *)this + 205) = *((_QWORD *)a2 + 205);
  *((_QWORD *)a2 + 205) = v380;
  v381 = *((_QWORD *)this + 160);
  *((_QWORD *)this + 160) = *((_QWORD *)a2 + 160);
  *((_QWORD *)a2 + 160) = v381;
  v382 = *((_QWORD *)this + 74);
  *((_QWORD *)this + 74) = *((_QWORD *)a2 + 74);
  *((_QWORD *)a2 + 74) = v382;
  v383 = *((_QWORD *)this + 292);
  *((_QWORD *)this + 292) = *((_QWORD *)a2 + 292);
  *((_QWORD *)a2 + 292) = v383;
  v384 = *((_QWORD *)this + 86);
  *((_QWORD *)this + 86) = *((_QWORD *)a2 + 86);
  *((_QWORD *)a2 + 86) = v384;
  v385 = *((_QWORD *)this + 107);
  *((_QWORD *)this + 107) = *((_QWORD *)a2 + 107);
  *((_QWORD *)a2 + 107) = v385;
  v386 = *((_QWORD *)this + 400);
  *((_QWORD *)this + 400) = *((_QWORD *)a2 + 400);
  *((_QWORD *)a2 + 400) = v386;
  v387 = *((_QWORD *)this + 326);
  *((_QWORD *)this + 326) = *((_QWORD *)a2 + 326);
  *((_QWORD *)a2 + 326) = v387;
  v388 = *((_QWORD *)this + 216);
  *((_QWORD *)this + 216) = *((_QWORD *)a2 + 216);
  *((_QWORD *)a2 + 216) = v388;
  v389 = *((_QWORD *)this + 418);
  *((_QWORD *)this + 418) = *((_QWORD *)a2 + 418);
  *((_QWORD *)a2 + 418) = v389;
  v390 = *((_QWORD *)this + 196);
  *((_QWORD *)this + 196) = *((_QWORD *)a2 + 196);
  *((_QWORD *)a2 + 196) = v390;
  v391 = *((_QWORD *)this + 349);
  *((_QWORD *)this + 349) = *((_QWORD *)a2 + 349);
  *((_QWORD *)a2 + 349) = v391;
  v392 = *((_QWORD *)this + 387);
  *((_QWORD *)this + 387) = *((_QWORD *)a2 + 387);
  *((_QWORD *)a2 + 387) = v392;
  v393 = *((_QWORD *)this + 289);
  *((_QWORD *)this + 289) = *((_QWORD *)a2 + 289);
  *((_QWORD *)a2 + 289) = v393;
  v394 = *((_QWORD *)this + 237);
  *((_QWORD *)this + 237) = *((_QWORD *)a2 + 237);
  *((_QWORD *)a2 + 237) = v394;
  v395 = *((_QWORD *)this + 283);
  *((_QWORD *)this + 283) = *((_QWORD *)a2 + 283);
  *((_QWORD *)a2 + 283) = v395;
  v396 = *((_QWORD *)this + 284);
  *((_QWORD *)this + 284) = *((_QWORD *)a2 + 284);
  *((_QWORD *)a2 + 284) = v396;
  v397 = *((_QWORD *)this + 285);
  *((_QWORD *)this + 285) = *((_QWORD *)a2 + 285);
  *((_QWORD *)a2 + 285) = v397;
  v398 = *((_QWORD *)this + 270);
  *((_QWORD *)this + 270) = *((_QWORD *)a2 + 270);
  *((_QWORD *)a2 + 270) = v398;
  v399 = *((_QWORD *)this + 287);
  *((_QWORD *)this + 287) = *((_QWORD *)a2 + 287);
  *((_QWORD *)a2 + 287) = v399;
  v400 = *((_QWORD *)this + 227);
  *((_QWORD *)this + 227) = *((_QWORD *)a2 + 227);
  *((_QWORD *)a2 + 227) = v400;
  v401 = *((_QWORD *)this + 401);
  *((_QWORD *)this + 401) = *((_QWORD *)a2 + 401);
  *((_QWORD *)a2 + 401) = v401;
  v402 = *((_QWORD *)this + 279);
  *((_QWORD *)this + 279) = *((_QWORD *)a2 + 279);
  *((_QWORD *)a2 + 279) = v402;
  v403 = *((_QWORD *)this + 280);
  *((_QWORD *)this + 280) = *((_QWORD *)a2 + 280);
  *((_QWORD *)a2 + 280) = v403;
  v404 = *((_QWORD *)this + 399);
  *((_QWORD *)this + 399) = *((_QWORD *)a2 + 399);
  *((_QWORD *)a2 + 399) = v404;
  v405 = *((_QWORD *)this + 388);
  *((_QWORD *)this + 388) = *((_QWORD *)a2 + 388);
  *((_QWORD *)a2 + 388) = v405;
  v406 = *((_QWORD *)this + 103);
  *((_QWORD *)this + 103) = *((_QWORD *)a2 + 103);
  *((_QWORD *)a2 + 103) = v406;
  v407 = *((_QWORD *)this + 218);
  *((_QWORD *)this + 218) = *((_QWORD *)a2 + 218);
  *((_QWORD *)a2 + 218) = v407;
  v408 = *((_QWORD *)this + 357);
  *((_QWORD *)this + 357) = *((_QWORD *)a2 + 357);
  *((_QWORD *)a2 + 357) = v408;
  v409 = *((_QWORD *)this + 278);
  *((_QWORD *)this + 278) = *((_QWORD *)a2 + 278);
  *((_QWORD *)a2 + 278) = v409;
  v410 = *((_QWORD *)this + 272);
  *((_QWORD *)this + 272) = *((_QWORD *)a2 + 272);
  *((_QWORD *)a2 + 272) = v410;
  v411 = *((_QWORD *)this + 271);
  *((_QWORD *)this + 271) = *((_QWORD *)a2 + 271);
  *((_QWORD *)a2 + 271) = v411;
  v412 = *((_QWORD *)this + 275);
  *((_QWORD *)this + 275) = *((_QWORD *)a2 + 275);
  *((_QWORD *)a2 + 275) = v412;
  v413 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v413;
  v414 = *((_QWORD *)this + 286);
  *((_QWORD *)this + 286) = *((_QWORD *)a2 + 286);
  *((_QWORD *)a2 + 286) = v414;
  v415 = *((_QWORD *)this + 309);
  *((_QWORD *)this + 309) = *((_QWORD *)a2 + 309);
  *((_QWORD *)a2 + 309) = v415;
  v416 = *((_QWORD *)this + 312);
  *((_QWORD *)this + 312) = *((_QWORD *)a2 + 312);
  *((_QWORD *)a2 + 312) = v416;
  v417 = *((_QWORD *)this + 211);
  *((_QWORD *)this + 211) = *((_QWORD *)a2 + 211);
  *((_QWORD *)a2 + 211) = v417;
  v418 = *((_QWORD *)this + 313);
  *((_QWORD *)this + 313) = *((_QWORD *)a2 + 313);
  *((_QWORD *)a2 + 313) = v418;
  v419 = *((_QWORD *)this + 310);
  *((_QWORD *)this + 310) = *((_QWORD *)a2 + 310);
  *((_QWORD *)a2 + 310) = v419;
  v420 = *((_QWORD *)this + 277);
  *((_QWORD *)this + 277) = *((_QWORD *)a2 + 277);
  *((_QWORD *)a2 + 277) = v420;
  v421 = *((_QWORD *)this + 72);
  *((_QWORD *)this + 72) = *((_QWORD *)a2 + 72);
  *((_QWORD *)a2 + 72) = v421;
  v422 = *((_QWORD *)this + 276);
  *((_QWORD *)this + 276) = *((_QWORD *)a2 + 276);
  *((_QWORD *)a2 + 276) = v422;
  v423 = *((_QWORD *)this + 293);
  *((_QWORD *)this + 293) = *((_QWORD *)a2 + 293);
  *((_QWORD *)a2 + 293) = v423;
  v424 = *((_QWORD *)this + 241);
  *((_QWORD *)this + 241) = *((_QWORD *)a2 + 241);
  *((_QWORD *)a2 + 241) = v424;
  v425 = *((_QWORD *)this + 188);
  *((_QWORD *)this + 188) = *((_QWORD *)a2 + 188);
  *((_QWORD *)a2 + 188) = v425;
  v426 = *((_QWORD *)this + 189);
  *((_QWORD *)this + 189) = *((_QWORD *)a2 + 189);
  *((_QWORD *)a2 + 189) = v426;
  v427 = *((_QWORD *)this + 311);
  *((_QWORD *)this + 311) = *((_QWORD *)a2 + 311);
  *((_QWORD *)a2 + 311) = v427;
  v428 = *((_QWORD *)this + 274);
  *((_QWORD *)this + 274) = *((_QWORD *)a2 + 274);
  *((_QWORD *)a2 + 274) = v428;
  v429 = *((_QWORD *)this + 273);
  *((_QWORD *)this + 273) = *((_QWORD *)a2 + 273);
  *((_QWORD *)a2 + 273) = v429;
  v430 = *((_QWORD *)this + 202);
  *((_QWORD *)this + 202) = *((_QWORD *)a2 + 202);
  *((_QWORD *)a2 + 202) = v430;
  v431 = *((_QWORD *)this + 201);
  *((_QWORD *)this + 201) = *((_QWORD *)a2 + 201);
  *((_QWORD *)a2 + 201) = v431;
  v432 = *((_QWORD *)this + 314);
  *((_QWORD *)this + 314) = *((_QWORD *)a2 + 314);
  *((_QWORD *)a2 + 314) = v432;
  v433 = *((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = *((_QWORD *)a2 + 39);
  *((_QWORD *)a2 + 39) = v433;
  v434 = *((_QWORD *)this + 113);
  *((_QWORD *)this + 113) = *((_QWORD *)a2 + 113);
  *((_QWORD *)a2 + 113) = v434;
  v435 = *((_QWORD *)this + 295);
  *((_QWORD *)this + 295) = *((_QWORD *)a2 + 295);
  *((_QWORD *)a2 + 295) = v435;
  v436 = *((_QWORD *)this + 298);
  *((_QWORD *)this + 298) = *((_QWORD *)a2 + 298);
  *((_QWORD *)a2 + 298) = v436;
  v437 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = *((_QWORD *)a2 + 32);
  *((_QWORD *)a2 + 32) = v437;
  v438 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = *((_QWORD *)a2 + 31);
  *((_QWORD *)a2 + 31) = v438;
  v439 = *((_QWORD *)this + 352);
  *((_QWORD *)this + 352) = *((_QWORD *)a2 + 352);
  *((_QWORD *)a2 + 352) = v439;
  v440 = *((_QWORD *)this + 351);
  *((_QWORD *)this + 351) = *((_QWORD *)a2 + 351);
  *((_QWORD *)a2 + 351) = v440;
  v441 = *((_QWORD *)this + 328);
  *((_QWORD *)this + 328) = *((_QWORD *)a2 + 328);
  *((_QWORD *)a2 + 328) = v441;
  v442 = *((_QWORD *)this + 329);
  *((_QWORD *)this + 329) = *((_QWORD *)a2 + 329);
  *((_QWORD *)a2 + 329) = v442;
  v443 = *((_QWORD *)this + 331);
  *((_QWORD *)this + 331) = *((_QWORD *)a2 + 331);
  *((_QWORD *)a2 + 331) = v443;
  v444 = *((_QWORD *)this + 161);
  *((_QWORD *)this + 161) = *((_QWORD *)a2 + 161);
  *((_QWORD *)a2 + 161) = v444;
  v445 = *((_QWORD *)this + 330);
  *((_QWORD *)this + 330) = *((_QWORD *)a2 + 330);
  *((_QWORD *)a2 + 330) = v445;
  v446 = *((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = *((_QWORD *)a2 + 42);
  *((_QWORD *)a2 + 42) = v446;
  v447 = *((_QWORD *)this + 185);
  *((_QWORD *)this + 185) = *((_QWORD *)a2 + 185);
  *((_QWORD *)a2 + 185) = v447;
  v448 = *((_QWORD *)this + 186);
  *((_QWORD *)this + 186) = *((_QWORD *)a2 + 186);
  *((_QWORD *)a2 + 186) = v448;
  v449 = *((_QWORD *)this + 187);
  *((_QWORD *)this + 187) = *((_QWORD *)a2 + 187);
  *((_QWORD *)a2 + 187) = v449;
  v450 = *((_QWORD *)this + 353);
  *((_QWORD *)this + 353) = *((_QWORD *)a2 + 353);
  *((_QWORD *)a2 + 353) = v450;
  v451 = *((_QWORD *)this + 354);
  *((_QWORD *)this + 354) = *((_QWORD *)a2 + 354);
  *((_QWORD *)a2 + 354) = v451;
  v452 = *((_QWORD *)this + 368);
  *((_QWORD *)this + 368) = *((_QWORD *)a2 + 368);
  *((_QWORD *)a2 + 368) = v452;
  v453 = *((_QWORD *)this + 369);
  *((_QWORD *)this + 369) = *((_QWORD *)a2 + 369);
  *((_QWORD *)a2 + 369) = v453;
  v454 = *((_QWORD *)this + 179);
  *((_QWORD *)this + 179) = *((_QWORD *)a2 + 179);
  *((_QWORD *)a2 + 179) = v454;
  return result;
}

uint64_t CMMsl::Item::Item(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;

  *(_QWORD *)a1 = &off_25135E518;
  v4 = (uint64_t *)(a1 + 8);
  v5 = (uint64_t *)(a1 + 624);
  bzero((void *)(a1 + 8), 0x260uLL);
  bzero(v5, 0xBB0uLL);
  *(_DWORD *)(a1 + 3616) = *(_DWORD *)(a2 + 3616);
  *(_DWORD *)(a2 + 3616) = 0;
  *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 616);
  v6 = *(_QWORD *)(a2 + 1168);
  *(_QWORD *)(a2 + 1168) = 0;
  v7 = *(_QWORD *)(a1 + 1168);
  *(_QWORD *)(a1 + 1168) = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(a2 + 1160);
  *(_QWORD *)(a2 + 1160) = 0;
  v9 = *(_QWORD *)(a1 + 1160);
  *(_QWORD *)(a1 + 1160) = v8;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *(_QWORD *)(a2 + 1136);
  *(_QWORD *)(a2 + 1136) = 0;
  v11 = *(_QWORD *)(a1 + 1136);
  *(_QWORD *)(a1 + 1136) = v10;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(_QWORD *)(a2 + 1128);
  *(_QWORD *)(a2 + 1128) = 0;
  v13 = *(_QWORD *)(a1 + 1128);
  *(_QWORD *)(a1 + 1128) = v12;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(_QWORD *)(a2 + 680);
  *(_QWORD *)(a2 + 680) = 0;
  v15 = *(_QWORD *)(a1 + 680);
  *(_QWORD *)(a1 + 680) = v14;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = *(_QWORD *)(a2 + 672);
  *(_QWORD *)(a2 + 672) = 0;
  v17 = *(_QWORD *)(a1 + 672);
  *(_QWORD *)(a1 + 672) = v16;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(_QWORD *)(a2 + 728);
  *(_QWORD *)(a2 + 728) = 0;
  v19 = *(_QWORD *)(a1 + 728);
  *(_QWORD *)(a1 + 728) = v18;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = *(_QWORD *)(a2 + 720);
  *(_QWORD *)(a2 + 720) = 0;
  v21 = *(_QWORD *)(a1 + 720);
  *(_QWORD *)(a1 + 720) = v20;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = *(_QWORD *)(a2 + 1440);
  *(_QWORD *)(a2 + 1440) = 0;
  v23 = *(_QWORD *)(a1 + 1440);
  *(_QWORD *)(a1 + 1440) = v22;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = *(_QWORD *)(a2 + 760);
  *(_QWORD *)(a2 + 760) = 0;
  v25 = *(_QWORD *)(a1 + 760);
  *(_QWORD *)(a1 + 760) = v24;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = 0;
  v27 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v26;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v28 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a2 + 144) = 0;
  v29 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v28;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  v30 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a2 + 216) = 0;
  v31 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = v30;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v32 = *(_QWORD *)(a2 + 3448);
  *(_QWORD *)(a2 + 3448) = 0;
  v33 = *(_QWORD *)(a1 + 3448);
  *(_QWORD *)(a1 + 3448) = v32;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  v34 = *(_QWORD *)(a2 + 3472);
  *(_QWORD *)(a2 + 3472) = 0;
  v35 = *(_QWORD *)(a1 + 3472);
  *(_QWORD *)(a1 + 3472) = v34;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = *(_QWORD *)(a2 + 3488);
  *(_QWORD *)(a2 + 3488) = 0;
  v37 = *(_QWORD *)(a1 + 3488);
  *(_QWORD *)(a1 + 3488) = v36;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  v38 = *(_QWORD *)(a2 + 3520);
  *(_QWORD *)(a2 + 3520) = 0;
  v39 = *(_QWORD *)(a1 + 3520);
  *(_QWORD *)(a1 + 3520) = v38;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  v40 = *(_QWORD *)(a2 + 3552);
  *(_QWORD *)(a2 + 3552) = 0;
  v41 = *(_QWORD *)(a1 + 3552);
  *(_QWORD *)(a1 + 3552) = v40;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  v42 = *(_QWORD *)(a2 + 3536);
  *(_QWORD *)(a2 + 3536) = 0;
  v43 = *(_QWORD *)(a1 + 3536);
  *(_QWORD *)(a1 + 3536) = v42;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  v44 = *(_QWORD *)(a2 + 3584);
  *(_QWORD *)(a2 + 3584) = 0;
  v45 = *(_QWORD *)(a1 + 3584);
  *(_QWORD *)(a1 + 3584) = v44;
  if (v45)
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  v46 = *(_QWORD *)(a2 + 3320);
  *(_QWORD *)(a2 + 3320) = 0;
  v47 = *(_QWORD *)(a1 + 3320);
  *(_QWORD *)(a1 + 3320) = v46;
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  v48 = *(_QWORD *)(a2 + 544);
  *(_QWORD *)(a2 + 544) = 0;
  v49 = *(_QWORD *)(a1 + 544);
  *(_QWORD *)(a1 + 544) = v48;
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  v50 = *(_QWORD *)(a2 + 552);
  *(_QWORD *)(a2 + 552) = 0;
  v51 = *(_QWORD *)(a1 + 552);
  *(_QWORD *)(a1 + 552) = v50;
  if (v51)
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  v52 = *(_QWORD *)(a2 + 560);
  *(_QWORD *)(a2 + 560) = 0;
  v53 = *(_QWORD *)(a1 + 560);
  *(_QWORD *)(a1 + 560) = v52;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  v54 = *(_QWORD *)(a2 + 536);
  *(_QWORD *)(a2 + 536) = 0;
  v55 = *(_QWORD *)(a1 + 536);
  *(_QWORD *)(a1 + 536) = v54;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = *(_QWORD *)(a2 + 568);
  *(_QWORD *)(a2 + 568) = 0;
  v57 = *(_QWORD *)(a1 + 568);
  *(_QWORD *)(a1 + 568) = v56;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  v58 = *(_QWORD *)(a2 + 3512);
  *(_QWORD *)(a2 + 3512) = 0;
  v59 = *(_QWORD *)(a1 + 3512);
  *(_QWORD *)(a1 + 3512) = v58;
  if (v59)
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
  v60 = *(_QWORD *)(a2 + 2304);
  *(_QWORD *)(a2 + 2304) = 0;
  v61 = *(_QWORD *)(a1 + 2304);
  *(_QWORD *)(a1 + 2304) = v60;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  v62 = *(_QWORD *)(a2 + 2720);
  *(_QWORD *)(a2 + 2720) = 0;
  v63 = *(_QWORD *)(a1 + 2720);
  *(_QWORD *)(a1 + 2720) = v62;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  v64 = *(_QWORD *)(a2 + 3568);
  *(_QWORD *)(a2 + 3568) = 0;
  v65 = *(_QWORD *)(a1 + 3568);
  *(_QWORD *)(a1 + 3568) = v64;
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  v66 = *(_QWORD *)(a2 + 3400);
  *(_QWORD *)(a2 + 3400) = 0;
  v67 = *(_QWORD *)(a1 + 3400);
  *(_QWORD *)(a1 + 3400) = v66;
  if (v67)
    (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
  v68 = *(_QWORD *)(a2 + 608);
  *(_QWORD *)(a2 + 608) = 0;
  v69 = *(_QWORD *)(a1 + 608);
  *(_QWORD *)(a1 + 608) = v68;
  if (v69)
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
  v70 = *(_QWORD *)(a2 + 3416);
  *(_QWORD *)(a2 + 3416) = 0;
  v71 = *(_QWORD *)(a1 + 3416);
  *(_QWORD *)(a1 + 3416) = v70;
  if (v71)
    (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
  v72 = *(_QWORD *)(a2 + 1408);
  *(_QWORD *)(a2 + 1408) = 0;
  v73 = *(_QWORD *)(a1 + 1408);
  *(_QWORD *)(a1 + 1408) = v72;
  if (v73)
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
  v74 = *(_QWORD *)(a2 + 1392);
  *(_QWORD *)(a2 + 1392) = 0;
  v75 = *(_QWORD *)(a1 + 1392);
  *(_QWORD *)(a1 + 1392) = v74;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  v76 = *(_QWORD *)(a2 + 1352);
  *(_QWORD *)(a2 + 1352) = 0;
  v77 = *(_QWORD *)(a1 + 1352);
  *(_QWORD *)(a1 + 1352) = v76;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  v78 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a2 + 224) = 0;
  v79 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = v78;
  if (v79)
    (*(void (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
  v80 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a2 + 232) = 0;
  v81 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 232) = v80;
  if (v81)
    (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
  v82 = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a2 + 272) = 0;
  v83 = *(_QWORD *)(a1 + 272);
  *(_QWORD *)(a1 + 272) = v82;
  if (v83)
    (*(void (**)(uint64_t))(*(_QWORD *)v83 + 8))(v83);
  v84 = *(_QWORD *)(a2 + 912);
  *(_QWORD *)(a2 + 912) = 0;
  v85 = *(_QWORD *)(a1 + 912);
  *(_QWORD *)(a1 + 912) = v84;
  if (v85)
    (*(void (**)(uint64_t))(*(_QWORD *)v85 + 8))(v85);
  v86 = *(_QWORD *)(a2 + 3576);
  *(_QWORD *)(a2 + 3576) = 0;
  v87 = *(_QWORD *)(a1 + 3576);
  *(_QWORD *)(a1 + 3576) = v86;
  if (v87)
    (*(void (**)(uint64_t))(*(_QWORD *)v87 + 8))(v87);
  v88 = *(_QWORD *)(a2 + 3544);
  *(_QWORD *)(a2 + 3544) = 0;
  v89 = *(_QWORD *)(a1 + 3544);
  *(_QWORD *)(a1 + 3544) = v88;
  if (v89)
    (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
  v90 = *(_QWORD *)(a2 + 1344);
  *(_QWORD *)(a2 + 1344) = 0;
  v91 = *(_QWORD *)(a1 + 1344);
  *(_QWORD *)(a1 + 1344) = v90;
  if (v91)
    (*(void (**)(uint64_t))(*(_QWORD *)v91 + 8))(v91);
  v92 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 128) = 0;
  v93 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v92;
  if (v93)
    (*(void (**)(uint64_t))(*(_QWORD *)v93 + 8))(v93);
  v94 = *(_QWORD *)(a2 + 3280);
  *(_QWORD *)(a2 + 3280) = 0;
  v95 = *(_QWORD *)(a1 + 3280);
  *(_QWORD *)(a1 + 3280) = v94;
  if (v95)
    (*(void (**)(uint64_t))(*(_QWORD *)v95 + 8))(v95);
  v96 = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a2 + 352) = 0;
  v97 = *(_QWORD *)(a1 + 352);
  *(_QWORD *)(a1 + 352) = v96;
  if (v97)
    (*(void (**)(uint64_t))(*(_QWORD *)v97 + 8))(v97);
  v98 = *(_QWORD *)(a2 + 3256);
  *(_QWORD *)(a2 + 3256) = 0;
  v99 = *(_QWORD *)(a1 + 3256);
  *(_QWORD *)(a1 + 3256) = v98;
  if (v99)
    (*(void (**)(uint64_t))(*(_QWORD *)v99 + 8))(v99);
  v100 = *(_QWORD *)(a2 + 1880);
  *(_QWORD *)(a2 + 1880) = 0;
  v101 = *(_QWORD *)(a1 + 1880);
  *(_QWORD *)(a1 + 1880) = v100;
  if (v101)
    (*(void (**)(uint64_t))(*(_QWORD *)v101 + 8))(v101);
  v102 = *(_QWORD *)(a2 + 1000);
  *(_QWORD *)(a2 + 1000) = 0;
  v103 = *(_QWORD *)(a1 + 1000);
  *(_QWORD *)(a1 + 1000) = v102;
  if (v103)
    (*(void (**)(uint64_t))(*(_QWORD *)v103 + 8))(v103);
  v104 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = 0;
  v105 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v104;
  if (v105)
    (*(void (**)(uint64_t))(*(_QWORD *)v105 + 8))(v105);
  v106 = *(_QWORD *)(a2 + 2072);
  *(_QWORD *)(a2 + 2072) = 0;
  v107 = *(_QWORD *)(a1 + 2072);
  *(_QWORD *)(a1 + 2072) = v106;
  if (v107)
    (*(void (**)(uint64_t))(*(_QWORD *)v107 + 8))(v107);
  v108 = *(_QWORD *)(a2 + 3032);
  *(_QWORD *)(a2 + 3032) = 0;
  v109 = *(_QWORD *)(a1 + 3032);
  *(_QWORD *)(a1 + 3032) = v108;
  if (v109)
    (*(void (**)(uint64_t))(*(_QWORD *)v109 + 8))(v109);
  v110 = *(_QWORD *)(a2 + 1960);
  *(_QWORD *)(a2 + 1960) = 0;
  v111 = *(_QWORD *)(a1 + 1960);
  *(_QWORD *)(a1 + 1960) = v110;
  if (v111)
    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  v112 = *(_QWORD *)(a2 + 712);
  *(_QWORD *)(a2 + 712) = 0;
  v113 = *(_QWORD *)(a1 + 712);
  *(_QWORD *)(a1 + 712) = v112;
  if (v113)
    (*(void (**)(uint64_t))(*(_QWORD *)v113 + 8))(v113);
  v114 = *(_QWORD *)(a2 + 3264);
  *(_QWORD *)(a2 + 3264) = 0;
  v115 = *(_QWORD *)(a1 + 3264);
  *(_QWORD *)(a1 + 3264) = v114;
  if (v115)
    (*(void (**)(uint64_t))(*(_QWORD *)v115 + 8))(v115);
  v116 = *(_QWORD *)(a2 + 2848);
  *(_QWORD *)(a2 + 2848) = 0;
  v117 = *(_QWORD *)(a1 + 2848);
  *(_QWORD *)(a1 + 2848) = v116;
  if (v117)
    (*(void (**)(uint64_t))(*(_QWORD *)v117 + 8))(v117);
  v118 = *(_QWORD *)(a2 + 3272);
  *(_QWORD *)(a2 + 3272) = 0;
  v119 = *(_QWORD *)(a1 + 3272);
  *(_QWORD *)(a1 + 3272) = v118;
  if (v119)
    (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
  v120 = *(_QWORD *)(a2 + 3312);
  *(_QWORD *)(a2 + 3312) = 0;
  v121 = *(_QWORD *)(a1 + 3312);
  *(_QWORD *)(a1 + 3312) = v120;
  if (v121)
    (*(void (**)(uint64_t))(*(_QWORD *)v121 + 8))(v121);
  v122 = *(_QWORD *)(a2 + 1752);
  *(_QWORD *)(a2 + 1752) = 0;
  v123 = *(_QWORD *)(a1 + 1752);
  *(_QWORD *)(a1 + 1752) = v122;
  if (v123)
    (*(void (**)(uint64_t))(*(_QWORD *)v123 + 8))(v123);
  v124 = *(_QWORD *)(a2 + 1552);
  *(_QWORD *)(a2 + 1552) = 0;
  v125 = *(_QWORD *)(a1 + 1552);
  *(_QWORD *)(a1 + 1552) = v124;
  if (v125)
    (*(void (**)(uint64_t))(*(_QWORD *)v125 + 8))(v125);
  v126 = *(_QWORD *)(a2 + 1328);
  *(_QWORD *)(a2 + 1328) = 0;
  v127 = *(_QWORD *)(a1 + 1328);
  *(_QWORD *)(a1 + 1328) = v126;
  if (v127)
    (*(void (**)(uint64_t))(*(_QWORD *)v127 + 8))(v127);
  v128 = *(_QWORD *)(a2 + 1720);
  *(_QWORD *)(a2 + 1720) = 0;
  v129 = *(_QWORD *)(a1 + 1720);
  *(_QWORD *)(a1 + 1720) = v128;
  if (v129)
    (*(void (**)(uint64_t))(*(_QWORD *)v129 + 8))(v129);
  v130 = *(_QWORD *)(a2 + 3176);
  *(_QWORD *)(a2 + 3176) = 0;
  v131 = *(_QWORD *)(a1 + 3176);
  *(_QWORD *)(a1 + 3176) = v130;
  if (v131)
    (*(void (**)(uint64_t))(*(_QWORD *)v131 + 8))(v131);
  v132 = *(_QWORD *)(a2 + 1680);
  *(_QWORD *)(a2 + 1680) = 0;
  v133 = *(_QWORD *)(a1 + 1680);
  *(_QWORD *)(a1 + 1680) = v132;
  if (v133)
    (*(void (**)(uint64_t))(*(_QWORD *)v133 + 8))(v133);
  v134 = *(_QWORD *)(a2 + 3184);
  *(_QWORD *)(a2 + 3184) = 0;
  v135 = *(_QWORD *)(a1 + 3184);
  *(_QWORD *)(a1 + 3184) = v134;
  if (v135)
    (*(void (**)(uint64_t))(*(_QWORD *)v135 + 8))(v135);
  v136 = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a2 + 376) = 0;
  v137 = *(_QWORD *)(a1 + 376);
  *(_QWORD *)(a1 + 376) = v136;
  if (v137)
    (*(void (**)(uint64_t))(*(_QWORD *)v137 + 8))(v137);
  v138 = *(_QWORD *)(a2 + 3128);
  *(_QWORD *)(a2 + 3128) = 0;
  v139 = *(_QWORD *)(a1 + 3128);
  *(_QWORD *)(a1 + 3128) = v138;
  if (v139)
    (*(void (**)(uint64_t))(*(_QWORD *)v139 + 8))(v139);
  v140 = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a2 + 368) = 0;
  v141 = *(_QWORD *)(a1 + 368);
  *(_QWORD *)(a1 + 368) = v140;
  if (v141)
    (*(void (**)(uint64_t))(*(_QWORD *)v141 + 8))(v141);
  v142 = *(_QWORD *)(a2 + 3136);
  *(_QWORD *)(a2 + 3136) = 0;
  v143 = *(_QWORD *)(a1 + 3136);
  *(_QWORD *)(a1 + 3136) = v142;
  if (v143)
    (*(void (**)(uint64_t))(*(_QWORD *)v143 + 8))(v143);
  v144 = *(_QWORD *)(a2 + 3456);
  *(_QWORD *)(a2 + 3456) = 0;
  v145 = *(_QWORD *)(a1 + 3456);
  *(_QWORD *)(a1 + 3456) = v144;
  if (v145)
    (*(void (**)(uint64_t))(*(_QWORD *)v145 + 8))(v145);
  v146 = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a2 + 296) = 0;
  v147 = *(_QWORD *)(a1 + 296);
  *(_QWORD *)(a1 + 296) = v146;
  if (v147)
    (*(void (**)(uint64_t))(*(_QWORD *)v147 + 8))(v147);
  v148 = *(_QWORD *)(a2 + 3440);
  *(_QWORD *)(a2 + 3440) = 0;
  v149 = *(_QWORD *)(a1 + 3440);
  *(_QWORD *)(a1 + 3440) = v148;
  if (v149)
    (*(void (**)(uint64_t))(*(_QWORD *)v149 + 8))(v149);
  v150 = *(_QWORD *)(a2 + 3288);
  *(_QWORD *)(a2 + 3288) = 0;
  v151 = *(_QWORD *)(a1 + 3288);
  *(_QWORD *)(a1 + 3288) = v150;
  if (v151)
    (*(void (**)(uint64_t))(*(_QWORD *)v151 + 8))(v151);
  v152 = *(_QWORD *)(a2 + 1240);
  *(_QWORD *)(a2 + 1240) = 0;
  v153 = *(_QWORD *)(a1 + 1240);
  *(_QWORD *)(a1 + 1240) = v152;
  if (v153)
    (*(void (**)(uint64_t))(*(_QWORD *)v153 + 8))(v153);
  v154 = *(_QWORD *)(a2 + 2936);
  *(_QWORD *)(a2 + 2936) = 0;
  v155 = *(_QWORD *)(a1 + 2936);
  *(_QWORD *)(a1 + 2936) = v154;
  if (v155)
    (*(void (**)(uint64_t))(*(_QWORD *)v155 + 8))(v155);
  v156 = *(_QWORD *)(a2 + 1048);
  *(_QWORD *)(a2 + 1048) = 0;
  v157 = *(_QWORD *)(a1 + 1048);
  *(_QWORD *)(a1 + 1048) = v156;
  if (v157)
    (*(void (**)(uint64_t))(*(_QWORD *)v157 + 8))(v157);
  v158 = *(_QWORD *)(a2 + 872);
  *(_QWORD *)(a2 + 872) = 0;
  v159 = *(_QWORD *)(a1 + 872);
  *(_QWORD *)(a1 + 872) = v158;
  if (v159)
    (*(void (**)(uint64_t))(*(_QWORD *)v159 + 8))(v159);
  v160 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v161 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v160;
  if (v161)
    (*(void (**)(uint64_t))(*(_QWORD *)v161 + 8))(v161);
  v162 = *(_QWORD *)(a2 + 2024);
  *(_QWORD *)(a2 + 2024) = 0;
  v163 = *(_QWORD *)(a1 + 2024);
  *(_QWORD *)(a1 + 2024) = v162;
  if (v163)
    (*(void (**)(uint64_t))(*(_QWORD *)v163 + 8))(v163);
  v164 = *(_QWORD *)(a2 + 1984);
  *(_QWORD *)(a2 + 1984) = 0;
  v165 = *(_QWORD *)(a1 + 1984);
  *(_QWORD *)(a1 + 1984) = v164;
  if (v165)
    (*(void (**)(uint64_t))(*(_QWORD *)v165 + 8))(v165);
  v166 = *(_QWORD *)(a2 + 496);
  *(_QWORD *)(a2 + 496) = 0;
  v167 = *(_QWORD *)(a1 + 496);
  *(_QWORD *)(a1 + 496) = v166;
  if (v167)
    (*(void (**)(uint64_t))(*(_QWORD *)v167 + 8))(v167);
  v168 = *(_QWORD *)(a2 + 1736);
  *(_QWORD *)(a2 + 1736) = 0;
  v169 = *(_QWORD *)(a1 + 1736);
  *(_QWORD *)(a1 + 1736) = v168;
  if (v169)
    (*(void (**)(uint64_t))(*(_QWORD *)v169 + 8))(v169);
  v170 = *(_QWORD *)(a2 + 2664);
  *(_QWORD *)(a2 + 2664) = 0;
  v171 = *(_QWORD *)(a1 + 2664);
  *(_QWORD *)(a1 + 2664) = v170;
  if (v171)
    (*(void (**)(uint64_t))(*(_QWORD *)v171 + 8))(v171);
  v172 = *(_QWORD *)(a2 + 1464);
  *(_QWORD *)(a2 + 1464) = 0;
  v173 = *(_QWORD *)(a1 + 1464);
  *(_QWORD *)(a1 + 1464) = v172;
  if (v173)
    (*(void (**)(uint64_t))(*(_QWORD *)v173 + 8))(v173);
  v174 = *(_QWORD *)(a2 + 704);
  *(_QWORD *)(a2 + 704) = 0;
  v175 = *(_QWORD *)(a1 + 704);
  *(_QWORD *)(a1 + 704) = v174;
  if (v175)
    (*(void (**)(uint64_t))(*(_QWORD *)v175 + 8))(v175);
  v176 = *(_QWORD *)(a2 + 1208);
  *(_QWORD *)(a2 + 1208) = 0;
  v177 = *(_QWORD *)(a1 + 1208);
  *(_QWORD *)(a1 + 1208) = v176;
  if (v177)
    (*(void (**)(uint64_t))(*(_QWORD *)v177 + 8))(v177);
  v178 = *(_QWORD *)(a2 + 1216);
  *(_QWORD *)(a2 + 1216) = 0;
  v179 = *(_QWORD *)(a1 + 1216);
  *(_QWORD *)(a1 + 1216) = v178;
  if (v179)
    (*(void (**)(uint64_t))(*(_QWORD *)v179 + 8))(v179);
  v180 = *(_QWORD *)(a2 + 1200);
  *(_QWORD *)(a2 + 1200) = 0;
  v181 = *(_QWORD *)(a1 + 1200);
  *(_QWORD *)(a1 + 1200) = v180;
  if (v181)
    (*(void (**)(uint64_t))(*(_QWORD *)v181 + 8))(v181);
  v182 = *(_QWORD *)(a2 + 1192);
  *(_QWORD *)(a2 + 1192) = 0;
  v183 = *(_QWORD *)(a1 + 1192);
  *(_QWORD *)(a1 + 1192) = v182;
  if (v183)
    (*(void (**)(uint64_t))(*(_QWORD *)v183 + 8))(v183);
  v184 = *(_QWORD *)(a2 + 472);
  *(_QWORD *)(a2 + 472) = 0;
  v185 = *(_QWORD *)(a1 + 472);
  *(_QWORD *)(a1 + 472) = v184;
  if (v185)
    (*(void (**)(uint64_t))(*(_QWORD *)v185 + 8))(v185);
  v186 = *(_QWORD *)(a2 + 1056);
  *(_QWORD *)(a2 + 1056) = 0;
  v187 = *(_QWORD *)(a1 + 1056);
  *(_QWORD *)(a1 + 1056) = v186;
  if (v187)
    (*(void (**)(uint64_t))(*(_QWORD *)v187 + 8))(v187);
  v188 = *(_QWORD *)(a2 + 1976);
  *(_QWORD *)(a2 + 1976) = 0;
  v189 = *(_QWORD *)(a1 + 1976);
  *(_QWORD *)(a1 + 1976) = v188;
  if (v189)
    (*(void (**)(uint64_t))(*(_QWORD *)v189 + 8))(v189);
  v190 = *(_QWORD *)(a2 + 1888);
  *(_QWORD *)(a2 + 1888) = 0;
  v191 = *(_QWORD *)(a1 + 1888);
  *(_QWORD *)(a1 + 1888) = v190;
  if (v191)
    (*(void (**)(uint64_t))(*(_QWORD *)v191 + 8))(v191);
  v192 = *(_QWORD *)(a2 + 2432);
  *(_QWORD *)(a2 + 2432) = 0;
  v193 = *(_QWORD *)(a1 + 2432);
  *(_QWORD *)(a1 + 2432) = v192;
  if (v193)
    (*(void (**)(uint64_t))(*(_QWORD *)v193 + 8))(v193);
  v194 = *(_QWORD *)(a2 + 2440);
  *(_QWORD *)(a2 + 2440) = 0;
  v195 = *(_QWORD *)(a1 + 2440);
  *(_QWORD *)(a1 + 2440) = v194;
  if (v195)
    (*(void (**)(uint64_t))(*(_QWORD *)v195 + 8))(v195);
  v196 = *(_QWORD *)(a2 + 504);
  *(_QWORD *)(a2 + 504) = 0;
  v197 = *(_QWORD *)(a1 + 504);
  *(_QWORD *)(a1 + 504) = v196;
  if (v197)
    (*(void (**)(uint64_t))(*(_QWORD *)v197 + 8))(v197);
  v198 = *(_QWORD *)(a2 + 1472);
  *(_QWORD *)(a2 + 1472) = 0;
  v199 = *(_QWORD *)(a1 + 1472);
  *(_QWORD *)(a1 + 1472) = v198;
  if (v199)
    (*(void (**)(uint64_t))(*(_QWORD *)v199 + 8))(v199);
  v200 = *(_QWORD *)(a2 + 696);
  *(_QWORD *)(a2 + 696) = 0;
  v201 = *(_QWORD *)(a1 + 696);
  *(_QWORD *)(a1 + 696) = v200;
  if (v201)
    (*(void (**)(uint64_t))(*(_QWORD *)v201 + 8))(v201);
  v202 = *(_QWORD *)(a2 + 2544);
  *(_QWORD *)(a2 + 2544) = 0;
  v203 = *(_QWORD *)(a1 + 2544);
  *(_QWORD *)(a1 + 2544) = v202;
  if (v203)
    (*(void (**)(uint64_t))(*(_QWORD *)v203 + 8))(v203);
  v204 = *(_QWORD *)(a2 + 3328);
  *(_QWORD *)(a2 + 3328) = 0;
  v205 = *(_QWORD *)(a1 + 3328);
  *(_QWORD *)(a1 + 3328) = v204;
  if (v205)
    (*(void (**)(uint64_t))(*(_QWORD *)v205 + 8))(v205);
  v206 = *(_QWORD *)(a2 + 1904);
  *(_QWORD *)(a2 + 1904) = 0;
  v207 = *(_QWORD *)(a1 + 1904);
  *(_QWORD *)(a1 + 1904) = v206;
  if (v207)
    (*(void (**)(uint64_t))(*(_QWORD *)v207 + 8))(v207);
  v208 = *(_QWORD *)(a2 + 1912);
  *(_QWORD *)(a2 + 1912) = 0;
  v209 = *(_QWORD *)(a1 + 1912);
  *(_QWORD *)(a1 + 1912) = v208;
  if (v209)
    (*(void (**)(uint64_t))(*(_QWORD *)v209 + 8))(v209);
  v210 = *(_QWORD *)(a2 + 2536);
  *(_QWORD *)(a2 + 2536) = 0;
  v211 = *(_QWORD *)(a1 + 2536);
  *(_QWORD *)(a1 + 2536) = v210;
  if (v211)
    (*(void (**)(uint64_t))(*(_QWORD *)v211 + 8))(v211);
  v212 = *(_QWORD *)(a2 + 3528);
  *(_QWORD *)(a2 + 3528) = 0;
  v213 = *(_QWORD *)(a1 + 3528);
  *(_QWORD *)(a1 + 3528) = v212;
  if (v213)
    (*(void (**)(uint64_t))(*(_QWORD *)v213 + 8))(v213);
  v214 = *(_QWORD *)(a2 + 3480);
  *(_QWORD *)(a2 + 3480) = 0;
  v215 = *(_QWORD *)(a1 + 3480);
  *(_QWORD *)(a1 + 3480) = v214;
  if (v215)
    (*(void (**)(uint64_t))(*(_QWORD *)v215 + 8))(v215);
  v216 = *(_QWORD *)(a2 + 2656);
  *(_QWORD *)(a2 + 2656) = 0;
  v217 = *(_QWORD *)(a1 + 2656);
  *(_QWORD *)(a1 + 2656) = v216;
  if (v217)
    (*(void (**)(uint64_t))(*(_QWORD *)v217 + 8))(v217);
  v218 = *(_QWORD *)(a2 + 584);
  *(_QWORD *)(a2 + 584) = 0;
  v219 = *(_QWORD *)(a1 + 584);
  *(_QWORD *)(a1 + 584) = v218;
  if (v219)
    (*(void (**)(uint64_t))(*(_QWORD *)v219 + 8))(v219);
  v220 = *(_QWORD *)(a2 + 480);
  *(_QWORD *)(a2 + 480) = 0;
  v221 = *(_QWORD *)(a1 + 480);
  *(_QWORD *)(a1 + 480) = v220;
  if (v221)
    (*(void (**)(uint64_t))(*(_QWORD *)v221 + 8))(v221);
  v222 = *(_QWORD *)(a2 + 488);
  *(_QWORD *)(a2 + 488) = 0;
  v223 = *(_QWORD *)(a1 + 488);
  *(_QWORD *)(a1 + 488) = v222;
  if (v223)
    (*(void (**)(uint64_t))(*(_QWORD *)v223 + 8))(v223);
  v224 = *(_QWORD *)(a2 + 2128);
  *(_QWORD *)(a2 + 2128) = 0;
  v225 = *(_QWORD *)(a1 + 2128);
  *(_QWORD *)(a1 + 2128) = v224;
  if (v225)
    (*(void (**)(uint64_t))(*(_QWORD *)v225 + 8))(v225);
  v226 = *(_QWORD *)(a2 + 2392);
  *(_QWORD *)(a2 + 2392) = 0;
  v227 = *(_QWORD *)(a1 + 2392);
  *(_QWORD *)(a1 + 2392) = v226;
  if (v227)
    (*(void (**)(uint64_t))(*(_QWORD *)v227 + 8))(v227);
  v228 = *(_QWORD *)(a2 + 2400);
  *(_QWORD *)(a2 + 2400) = 0;
  v229 = *(_QWORD *)(a1 + 2400);
  *(_QWORD *)(a1 + 2400) = v228;
  if (v229)
    (*(void (**)(uint64_t))(*(_QWORD *)v229 + 8))(v229);
  v230 = *(_QWORD *)(a2 + 384);
  *(_QWORD *)(a2 + 384) = 0;
  v231 = *(_QWORD *)(a1 + 384);
  *(_QWORD *)(a1 + 384) = v230;
  if (v231)
    (*(void (**)(uint64_t))(*(_QWORD *)v231 + 8))(v231);
  v232 = *(_QWORD *)(a2 + 3144);
  *(_QWORD *)(a2 + 3144) = 0;
  v233 = *(_QWORD *)(a1 + 3144);
  *(_QWORD *)(a1 + 3144) = v232;
  if (v233)
    (*(void (**)(uint64_t))(*(_QWORD *)v233 + 8))(v233);
  v234 = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a2 + 344) = 0;
  v235 = *(_QWORD *)(a1 + 344);
  *(_QWORD *)(a1 + 344) = v234;
  if (v235)
    (*(void (**)(uint64_t))(*(_QWORD *)v235 + 8))(v235);
  v236 = *(_QWORD *)(a2 + 464);
  *(_QWORD *)(a2 + 464) = 0;
  v237 = *(_QWORD *)(a1 + 464);
  *(_QWORD *)(a1 + 464) = v236;
  if (v237)
    (*(void (**)(uint64_t))(*(_QWORD *)v237 + 8))(v237);
  v238 = *(_QWORD *)(a2 + 512);
  *(_QWORD *)(a2 + 512) = 0;
  v239 = *(_QWORD *)(a1 + 512);
  *(_QWORD *)(a1 + 512) = v238;
  if (v239)
    (*(void (**)(uint64_t))(*(_QWORD *)v239 + 8))(v239);
  v240 = *(_QWORD *)(a2 + 3360);
  *(_QWORD *)(a2 + 3360) = 0;
  v241 = *(_QWORD *)(a1 + 3360);
  *(_QWORD *)(a1 + 3360) = v240;
  if (v241)
    (*(void (**)(uint64_t))(*(_QWORD *)v241 + 8))(v241);
  v242 = *(_QWORD *)(a2 + 3000);
  *(_QWORD *)(a2 + 3000) = 0;
  v243 = *(_QWORD *)(a1 + 3000);
  *(_QWORD *)(a1 + 3000) = v242;
  if (v243)
    (*(void (**)(uint64_t))(*(_QWORD *)v243 + 8))(v243);
  v244 = *(_QWORD *)(a2 + 2960);
  *(_QWORD *)(a2 + 2960) = 0;
  v245 = *(_QWORD *)(a1 + 2960);
  *(_QWORD *)(a1 + 2960) = v244;
  if (v245)
    (*(void (**)(uint64_t))(*(_QWORD *)v245 + 8))(v245);
  v246 = *(_QWORD *)(a2 + 2984);
  *(_QWORD *)(a2 + 2984) = 0;
  v247 = *(_QWORD *)(a1 + 2984);
  *(_QWORD *)(a1 + 2984) = v246;
  if (v247)
    (*(void (**)(uint64_t))(*(_QWORD *)v247 + 8))(v247);
  v248 = *(_QWORD *)(a2 + 2976);
  *(_QWORD *)(a2 + 2976) = 0;
  v249 = *(_QWORD *)(a1 + 2976);
  *(_QWORD *)(a1 + 2976) = v248;
  if (v249)
    (*(void (**)(uint64_t))(*(_QWORD *)v249 + 8))(v249);
  v250 = *(_QWORD *)(a2 + 3008);
  *(_QWORD *)(a2 + 3008) = 0;
  v251 = *(_QWORD *)(a1 + 3008);
  *(_QWORD *)(a1 + 3008) = v250;
  if (v251)
    (*(void (**)(uint64_t))(*(_QWORD *)v251 + 8))(v251);
  v252 = *(_QWORD *)(a2 + 3016);
  *(_QWORD *)(a2 + 3016) = 0;
  v253 = *(_QWORD *)(a1 + 3016);
  *(_QWORD *)(a1 + 3016) = v252;
  if (v253)
    (*(void (**)(uint64_t))(*(_QWORD *)v253 + 8))(v253);
  v254 = *(_QWORD *)(a2 + 2968);
  *(_QWORD *)(a2 + 2968) = 0;
  v255 = *(_QWORD *)(a1 + 2968);
  *(_QWORD *)(a1 + 2968) = v254;
  if (v255)
    (*(void (**)(uint64_t))(*(_QWORD *)v255 + 8))(v255);
  v256 = *(_QWORD *)(a2 + 1936);
  *(_QWORD *)(a2 + 1936) = 0;
  v257 = *(_QWORD *)(a1 + 1936);
  *(_QWORD *)(a1 + 1936) = v256;
  if (v257)
    (*(void (**)(uint64_t))(*(_QWORD *)v257 + 8))(v257);
  v258 = *(_QWORD *)(a2 + 3560);
  *(_QWORD *)(a2 + 3560) = 0;
  v259 = *(_QWORD *)(a1 + 3560);
  *(_QWORD *)(a1 + 3560) = v258;
  if (v259)
    (*(void (**)(uint64_t))(*(_QWORD *)v259 + 8))(v259);
  v260 = *(_QWORD *)(a2 + 1840);
  *(_QWORD *)(a2 + 1840) = 0;
  v261 = *(_QWORD *)(a1 + 1840);
  *(_QWORD *)(a1 + 1840) = v260;
  if (v261)
    (*(void (**)(uint64_t))(*(_QWORD *)v261 + 8))(v261);
  v262 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a2 + 192) = 0;
  v263 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v262;
  if (v263)
    (*(void (**)(uint64_t))(*(_QWORD *)v263 + 8))(v263);
  v264 = *(_QWORD *)(a2 + 3040);
  *(_QWORD *)(a2 + 3040) = 0;
  v265 = *(_QWORD *)(a1 + 3040);
  *(_QWORD *)(a1 + 3040) = v264;
  if (v265)
    (*(void (**)(uint64_t))(*(_QWORD *)v265 + 8))(v265);
  v266 = *(_QWORD *)(a2 + 3048);
  *(_QWORD *)(a2 + 3048) = 0;
  v267 = *(_QWORD *)(a1 + 3048);
  *(_QWORD *)(a1 + 3048) = v266;
  if (v267)
    (*(void (**)(uint64_t))(*(_QWORD *)v267 + 8))(v267);
  v268 = *(_QWORD *)(a2 + 2904);
  *(_QWORD *)(a2 + 2904) = 0;
  v269 = *(_QWORD *)(a1 + 2904);
  *(_QWORD *)(a1 + 2904) = v268;
  if (v269)
    (*(void (**)(uint64_t))(*(_QWORD *)v269 + 8))(v269);
  v270 = *(_QWORD *)(a2 + 736);
  *(_QWORD *)(a2 + 736) = 0;
  v271 = *(_QWORD *)(a1 + 736);
  *(_QWORD *)(a1 + 736) = v270;
  if (v271)
    (*(void (**)(uint64_t))(*(_QWORD *)v271 + 8))(v271);
  v272 = *(_QWORD *)(a2 + 888);
  *(_QWORD *)(a2 + 888) = 0;
  v273 = *(_QWORD *)(a1 + 888);
  *(_QWORD *)(a1 + 888) = v272;
  if (v273)
    (*(void (**)(uint64_t))(*(_QWORD *)v273 + 8))(v273);
  v274 = *(_QWORD *)(a2 + 456);
  *(_QWORD *)(a2 + 456) = 0;
  v275 = *(_QWORD *)(a1 + 456);
  *(_QWORD *)(a1 + 456) = v274;
  if (v275)
    (*(void (**)(uint64_t))(*(_QWORD *)v275 + 8))(v275);
  v276 = *(_QWORD *)(a2 + 1872);
  *(_QWORD *)(a2 + 1872) = 0;
  v277 = *(_QWORD *)(a1 + 1872);
  *(_QWORD *)(a1 + 1872) = v276;
  if (v277)
    (*(void (**)(uint64_t))(*(_QWORD *)v277 + 8))(v277);
  v278 = *(_QWORD *)(a2 + 448);
  *(_QWORD *)(a2 + 448) = 0;
  v279 = *(_QWORD *)(a1 + 448);
  *(_QWORD *)(a1 + 448) = v278;
  if (v279)
    (*(void (**)(uint64_t))(*(_QWORD *)v279 + 8))(v279);
  v280 = *(_QWORD *)(a2 + 2464);
  *(_QWORD *)(a2 + 2464) = 0;
  v281 = *(_QWORD *)(a1 + 2464);
  *(_QWORD *)(a1 + 2464) = v280;
  if (v281)
    (*(void (**)(uint64_t))(*(_QWORD *)v281 + 8))(v281);
  v282 = *(_QWORD *)(a2 + 1040);
  *(_QWORD *)(a2 + 1040) = 0;
  v283 = *(_QWORD *)(a1 + 1040);
  *(_QWORD *)(a1 + 1040) = v282;
  if (v283)
    (*(void (**)(uint64_t))(*(_QWORD *)v283 + 8))(v283);
  v284 = *(_QWORD *)(a2 + 784);
  *(_QWORD *)(a2 + 784) = 0;
  v285 = *(_QWORD *)(a1 + 784);
  *(_QWORD *)(a1 + 784) = v284;
  if (v285)
    (*(void (**)(uint64_t))(*(_QWORD *)v285 + 8))(v285);
  v286 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v287 = *v4;
  *v4 = v286;
  if (v287)
    (*(void (**)(uint64_t))(*(_QWORD *)v287 + 8))(v287);
  v288 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v289 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v288;
  if (v289)
    (*(void (**)(uint64_t))(*(_QWORD *)v289 + 8))(v289);
  v290 = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a2 + 320) = 0;
  v291 = *(_QWORD *)(a1 + 320);
  *(_QWORD *)(a1 + 320) = v290;
  if (v291)
    (*(void (**)(uint64_t))(*(_QWORD *)v291 + 8))(v291);
  v292 = *(_QWORD *)(a2 + 1848);
  *(_QWORD *)(a2 + 1848) = 0;
  v293 = *(_QWORD *)(a1 + 1848);
  *(_QWORD *)(a1 + 1848) = v292;
  if (v293)
    (*(void (**)(uint64_t))(*(_QWORD *)v293 + 8))(v293);
  v294 = *(_QWORD *)(a2 + 3248);
  *(_QWORD *)(a2 + 3248) = 0;
  v295 = *(_QWORD *)(a1 + 3248);
  *(_QWORD *)(a1 + 3248) = v294;
  if (v295)
    (*(void (**)(uint64_t))(*(_QWORD *)v295 + 8))(v295);
  v296 = *(_QWORD *)(a2 + 2744);
  *(_QWORD *)(a2 + 2744) = 0;
  v297 = *(_QWORD *)(a1 + 2744);
  *(_QWORD *)(a1 + 2744) = v296;
  if (v297)
    (*(void (**)(uint64_t))(*(_QWORD *)v297 + 8))(v297);
  v298 = *(_QWORD *)(a2 + 3600);
  *(_QWORD *)(a2 + 3600) = 0;
  v299 = *(_QWORD *)(a1 + 3600);
  *(_QWORD *)(a1 + 3600) = v298;
  if (v299)
    (*(void (**)(uint64_t))(*(_QWORD *)v299 + 8))(v299);
  v300 = *(_QWORD *)(a2 + 3592);
  *(_QWORD *)(a2 + 3592) = 0;
  v301 = *(_QWORD *)(a1 + 3592);
  *(_QWORD *)(a1 + 3592) = v300;
  if (v301)
    (*(void (**)(uint64_t))(*(_QWORD *)v301 + 8))(v301);
  v302 = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a2 + 360) = 0;
  v303 = *(_QWORD *)(a1 + 360);
  *(_QWORD *)(a1 + 360) = v302;
  if (v303)
    (*(void (**)(uint64_t))(*(_QWORD *)v303 + 8))(v303);
  v304 = *(_QWORD *)(a2 + 2248);
  *(_QWORD *)(a2 + 2248) = 0;
  v305 = *(_QWORD *)(a1 + 2248);
  *(_QWORD *)(a1 + 2248) = v304;
  if (v305)
    (*(void (**)(uint64_t))(*(_QWORD *)v305 + 8))(v305);
  v306 = *(_QWORD *)(a2 + 2424);
  *(_QWORD *)(a2 + 2424) = 0;
  v307 = *(_QWORD *)(a1 + 2424);
  *(_QWORD *)(a1 + 2424) = v306;
  if (v307)
    (*(void (**)(uint64_t))(*(_QWORD *)v307 + 8))(v307);
  v308 = *(_QWORD *)(a2 + 1832);
  *(_QWORD *)(a2 + 1832) = 0;
  v309 = *(_QWORD *)(a1 + 1832);
  *(_QWORD *)(a1 + 1832) = v308;
  if (v309)
    (*(void (**)(uint64_t))(*(_QWORD *)v309 + 8))(v309);
  v310 = *(_QWORD *)(a2 + 1856);
  *(_QWORD *)(a2 + 1856) = 0;
  v311 = *(_QWORD *)(a1 + 1856);
  *(_QWORD *)(a1 + 1856) = v310;
  if (v311)
    (*(void (**)(uint64_t))(*(_QWORD *)v311 + 8))(v311);
  v312 = *(_QWORD *)(a2 + 2752);
  *(_QWORD *)(a2 + 2752) = 0;
  v313 = *(_QWORD *)(a1 + 2752);
  *(_QWORD *)(a1 + 2752) = v312;
  if (v313)
    (*(void (**)(uint64_t))(*(_QWORD *)v313 + 8))(v313);
  v314 = *(_QWORD *)(a2 + 408);
  *(_QWORD *)(a2 + 408) = 0;
  v315 = *(_QWORD *)(a1 + 408);
  *(_QWORD *)(a1 + 408) = v314;
  if (v315)
    (*(void (**)(uint64_t))(*(_QWORD *)v315 + 8))(v315);
  v316 = *(_QWORD *)(a2 + 416);
  *(_QWORD *)(a2 + 416) = 0;
  v317 = *(_QWORD *)(a1 + 416);
  *(_QWORD *)(a1 + 416) = v316;
  if (v317)
    (*(void (**)(uint64_t))(*(_QWORD *)v317 + 8))(v317);
  v318 = *(_QWORD *)(a2 + 2000);
  *(_QWORD *)(a2 + 2000) = 0;
  v319 = *(_QWORD *)(a1 + 2000);
  *(_QWORD *)(a1 + 2000) = v318;
  if (v319)
    (*(void (**)(uint64_t))(*(_QWORD *)v319 + 8))(v319);
  v320 = *(_QWORD *)(a2 + 2152);
  *(_QWORD *)(a2 + 2152) = 0;
  v321 = *(_QWORD *)(a1 + 2152);
  *(_QWORD *)(a1 + 2152) = v320;
  if (v321)
    (*(void (**)(uint64_t))(*(_QWORD *)v321 + 8))(v321);
  v322 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  v323 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v322;
  if (v323)
    (*(void (**)(uint64_t))(*(_QWORD *)v323 + 8))(v323);
  v324 = *(_QWORD *)(a2 + 832);
  *(_QWORD *)(a2 + 832) = 0;
  v325 = *(_QWORD *)(a1 + 832);
  *(_QWORD *)(a1 + 832) = v324;
  if (v325)
    (*(void (**)(uint64_t))(*(_QWORD *)v325 + 8))(v325);
  v326 = *(_QWORD *)(a2 + 2256);
  *(_QWORD *)(a2 + 2256) = 0;
  v327 = *(_QWORD *)(a1 + 2256);
  *(_QWORD *)(a1 + 2256) = v326;
  if (v327)
    (*(void (**)(uint64_t))(*(_QWORD *)v327 + 8))(v327);
  v328 = *(_QWORD *)(a2 + 1088);
  *(_QWORD *)(a2 + 1088) = 0;
  v329 = *(_QWORD *)(a1 + 1088);
  *(_QWORD *)(a1 + 1088) = v328;
  if (v329)
    (*(void (**)(uint64_t))(*(_QWORD *)v329 + 8))(v329);
  v330 = *(_QWORD *)(a2 + 1096);
  *(_QWORD *)(a2 + 1096) = 0;
  v331 = *(_QWORD *)(a1 + 1096);
  *(_QWORD *)(a1 + 1096) = v330;
  if (v331)
    (*(void (**)(uint64_t))(*(_QWORD *)v331 + 8))(v331);
  v332 = *(_QWORD *)(a2 + 1080);
  *(_QWORD *)(a2 + 1080) = 0;
  v333 = *(_QWORD *)(a1 + 1080);
  *(_QWORD *)(a1 + 1080) = v332;
  if (v333)
    (*(void (**)(uint64_t))(*(_QWORD *)v333 + 8))(v333);
  v334 = *(_QWORD *)(a2 + 896);
  *(_QWORD *)(a2 + 896) = 0;
  v335 = *(_QWORD *)(a1 + 896);
  *(_QWORD *)(a1 + 896) = v334;
  if (v335)
    (*(void (**)(uint64_t))(*(_QWORD *)v335 + 8))(v335);
  v336 = *(_QWORD *)(a2 + 3464);
  *(_QWORD *)(a2 + 3464) = 0;
  v337 = *(_QWORD *)(a1 + 3464);
  *(_QWORD *)(a1 + 3464) = v336;
  if (v337)
    (*(void (**)(uint64_t))(*(_QWORD *)v337 + 8))(v337);
  v338 = *(_QWORD *)(a2 + 3088);
  *(_QWORD *)(a2 + 3088) = 0;
  v339 = *(_QWORD *)(a1 + 3088);
  *(_QWORD *)(a1 + 3088) = v338;
  if (v339)
    (*(void (**)(uint64_t))(*(_QWORD *)v339 + 8))(v339);
  v340 = *(_QWORD *)(a2 + 2768);
  *(_QWORD *)(a2 + 2768) = 0;
  v341 = *(_QWORD *)(a1 + 2768);
  *(_QWORD *)(a1 + 2768) = v340;
  if (v341)
    (*(void (**)(uint64_t))(*(_QWORD *)v341 + 8))(v341);
  v342 = *(_QWORD *)(a2 + 2616);
  *(_QWORD *)(a2 + 2616) = 0;
  v343 = *(_QWORD *)(a1 + 2616);
  *(_QWORD *)(a1 + 2616) = v342;
  if (v343)
    (*(void (**)(uint64_t))(*(_QWORD *)v343 + 8))(v343);
  v344 = *(_QWORD *)(a2 + 1792);
  *(_QWORD *)(a2 + 1792) = 0;
  v345 = *(_QWORD *)(a1 + 1792);
  *(_QWORD *)(a1 + 1792) = v344;
  if (v345)
    (*(void (**)(uint64_t))(*(_QWORD *)v345 + 8))(v345);
  v346 = *(_QWORD *)(a2 + 1800);
  *(_QWORD *)(a2 + 1800) = 0;
  v347 = *(_QWORD *)(a1 + 1800);
  *(_QWORD *)(a1 + 1800) = v346;
  if (v347)
    (*(void (**)(uint64_t))(*(_QWORD *)v347 + 8))(v347);
  v348 = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a2 + 304) = 0;
  v349 = *(_QWORD *)(a1 + 304);
  *(_QWORD *)(a1 + 304) = v348;
  if (v349)
    (*(void (**)(uint64_t))(*(_QWORD *)v349 + 8))(v349);
  v350 = *(_QWORD *)(a2 + 1784);
  *(_QWORD *)(a2 + 1784) = 0;
  v351 = *(_QWORD *)(a1 + 1784);
  *(_QWORD *)(a1 + 1784) = v350;
  if (v351)
    (*(void (**)(uint64_t))(*(_QWORD *)v351 + 8))(v351);
  v352 = *(_QWORD *)(a2 + 3336);
  *(_QWORD *)(a2 + 3336) = 0;
  v353 = *(_QWORD *)(a1 + 3336);
  *(_QWORD *)(a1 + 3336) = v352;
  if (v353)
    (*(void (**)(uint64_t))(*(_QWORD *)v353 + 8))(v353);
  v354 = *(_QWORD *)(a2 + 2600);
  *(_QWORD *)(a2 + 2600) = 0;
  v355 = *(_QWORD *)(a1 + 2600);
  *(_QWORD *)(a1 + 2600) = v354;
  if (v355)
    (*(void (**)(uint64_t))(*(_QWORD *)v355 + 8))(v355);
  v356 = *(_QWORD *)(a2 + 432);
  *(_QWORD *)(a2 + 432) = 0;
  v357 = *(_QWORD *)(a1 + 432);
  *(_QWORD *)(a1 + 432) = v356;
  if (v357)
    (*(void (**)(uint64_t))(*(_QWORD *)v357 + 8))(v357);
  v358 = *(_QWORD *)(a2 + 2712);
  *(_QWORD *)(a2 + 2712) = 0;
  v359 = *(_QWORD *)(a1 + 2712);
  *(_QWORD *)(a1 + 2712) = v358;
  if (v359)
    (*(void (**)(uint64_t))(*(_QWORD *)v359 + 8))(v359);
  v360 = *(_QWORD *)(a2 + 1808);
  *(_QWORD *)(a2 + 1808) = 0;
  v361 = *(_QWORD *)(a1 + 1808);
  *(_QWORD *)(a1 + 1808) = v360;
  if (v361)
    (*(void (**)(uint64_t))(*(_QWORD *)v361 + 8))(v361);
  v362 = *(_QWORD *)(a2 + 1776);
  *(_QWORD *)(a2 + 1776) = 0;
  v363 = *(_QWORD *)(a1 + 1776);
  *(_QWORD *)(a1 + 1776) = v362;
  if (v363)
    (*(void (**)(uint64_t))(*(_QWORD *)v363 + 8))(v363);
  v364 = *(_QWORD *)(a2 + 400);
  *(_QWORD *)(a2 + 400) = 0;
  v365 = *(_QWORD *)(a1 + 400);
  *(_QWORD *)(a1 + 400) = v364;
  if (v365)
    (*(void (**)(uint64_t))(*(_QWORD *)v365 + 8))(v365);
  v366 = *(_QWORD *)(a2 + 440);
  *(_QWORD *)(a2 + 440) = 0;
  v367 = *(_QWORD *)(a1 + 440);
  *(_QWORD *)(a1 + 440) = v366;
  if (v367)
    (*(void (**)(uint64_t))(*(_QWORD *)v367 + 8))(v367);
  v368 = *(_QWORD *)(a2 + 1320);
  *(_QWORD *)(a2 + 1320) = 0;
  v369 = *(_QWORD *)(a1 + 1320);
  *(_QWORD *)(a1 + 1320) = v368;
  if (v369)
    (*(void (**)(uint64_t))(*(_QWORD *)v369 + 8))(v369);
  v370 = *(_QWORD *)(a2 + 2896);
  *(_QWORD *)(a2 + 2896) = 0;
  v371 = *(_QWORD *)(a1 + 2896);
  *(_QWORD *)(a1 + 2896) = v370;
  if (v371)
    (*(void (**)(uint64_t))(*(_QWORD *)v371 + 8))(v371);
  v372 = *(_QWORD *)(a2 + 2920);
  *(_QWORD *)(a2 + 2920) = 0;
  v373 = *(_QWORD *)(a1 + 2920);
  *(_QWORD *)(a1 + 2920) = v372;
  if (v373)
    (*(void (**)(uint64_t))(*(_QWORD *)v373 + 8))(v373);
  v374 = *(_QWORD *)(a2 + 2912);
  *(_QWORD *)(a2 + 2912) = 0;
  v375 = *(_QWORD *)(a1 + 2912);
  *(_QWORD *)(a1 + 2912) = v374;
  if (v375)
    (*(void (**)(uint64_t))(*(_QWORD *)v375 + 8))(v375);
  v376 = *(_QWORD *)(a2 + 1032);
  *(_QWORD *)(a2 + 1032) = 0;
  v377 = *(_QWORD *)(a1 + 1032);
  *(_QWORD *)(a1 + 1032) = v376;
  if (v377)
    (*(void (**)(uint64_t))(*(_QWORD *)v377 + 8))(v377);
  v378 = *(_QWORD *)(a2 + 3392);
  *(_QWORD *)(a2 + 3392) = 0;
  v379 = *(_QWORD *)(a1 + 3392);
  *(_QWORD *)(a1 + 3392) = v378;
  if (v379)
    (*(void (**)(uint64_t))(*(_QWORD *)v379 + 8))(v379);
  v380 = *(_QWORD *)(a2 + 920);
  *(_QWORD *)(a2 + 920) = 0;
  v381 = *(_QWORD *)(a1 + 920);
  *(_QWORD *)(a1 + 920) = v380;
  if (v381)
    (*(void (**)(uint64_t))(*(_QWORD *)v381 + 8))(v381);
  v382 = *(_QWORD *)(a2 + 3368);
  *(_QWORD *)(a2 + 3368) = 0;
  v383 = *(_QWORD *)(a1 + 3368);
  *(_QWORD *)(a1 + 3368) = v382;
  if (v383)
    (*(void (**)(uint64_t))(*(_QWORD *)v383 + 8))(v383);
  v384 = *(_QWORD *)(a2 + 3376);
  *(_QWORD *)(a2 + 3376) = 0;
  v385 = *(_QWORD *)(a1 + 3376);
  *(_QWORD *)(a1 + 3376) = v384;
  if (v385)
    (*(void (**)(uint64_t))(*(_QWORD *)v385 + 8))(v385);
  v386 = *(_QWORD *)(a2 + 3160);
  *(_QWORD *)(a2 + 3160) = 0;
  v387 = *(_QWORD *)(a1 + 3160);
  *(_QWORD *)(a1 + 3160) = v386;
  if (v387)
    (*(void (**)(uint64_t))(*(_QWORD *)v387 + 8))(v387);
  v388 = *(_QWORD *)(a2 + 1112);
  *(_QWORD *)(a2 + 1112) = 0;
  v389 = *(_QWORD *)(a1 + 1112);
  *(_QWORD *)(a1 + 1112) = v388;
  if (v389)
    (*(void (**)(uint64_t))(*(_QWORD *)v389 + 8))(v389);
  v390 = *(_QWORD *)(a2 + 1120);
  *(_QWORD *)(a2 + 1120) = 0;
  v391 = *(_QWORD *)(a1 + 1120);
  *(_QWORD *)(a1 + 1120) = v390;
  if (v391)
    (*(void (**)(uint64_t))(*(_QWORD *)v391 + 8))(v391);
  v392 = *(_QWORD *)(a2 + 1944);
  *(_QWORD *)(a2 + 1944) = 0;
  v393 = *(_QWORD *)(a1 + 1944);
  *(_QWORD *)(a1 + 1944) = v392;
  if (v393)
    (*(void (**)(uint64_t))(*(_QWORD *)v393 + 8))(v393);
  v394 = *(_QWORD *)(a2 + 1024);
  *(_QWORD *)(a2 + 1024) = 0;
  v395 = *(_QWORD *)(a1 + 1024);
  *(_QWORD *)(a1 + 1024) = v394;
  if (v395)
    (*(void (**)(uint64_t))(*(_QWORD *)v395 + 8))(v395);
  v396 = *(_QWORD *)(a2 + 3504);
  *(_QWORD *)(a2 + 3504) = 0;
  v397 = *(_QWORD *)(a1 + 3504);
  *(_QWORD *)(a1 + 3504) = v396;
  if (v397)
    (*(void (**)(uint64_t))(*(_QWORD *)v397 + 8))(v397);
  v398 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  v399 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v398;
  if (v399)
    (*(void (**)(uint64_t))(*(_QWORD *)v399 + 8))(v399);
  v400 = *(_QWORD *)(a2 + 2328);
  *(_QWORD *)(a2 + 2328) = 0;
  v401 = *(_QWORD *)(a1 + 2328);
  *(_QWORD *)(a1 + 2328) = v400;
  if (v401)
    (*(void (**)(uint64_t))(*(_QWORD *)v401 + 8))(v401);
  v402 = *(_QWORD *)(a2 + 1416);
  *(_QWORD *)(a2 + 1416) = 0;
  v403 = *(_QWORD *)(a1 + 1416);
  *(_QWORD *)(a1 + 1416) = v402;
  if (v403)
    (*(void (**)(uint64_t))(*(_QWORD *)v403 + 8))(v403);
  v404 = *(_QWORD *)(a2 + 2408);
  *(_QWORD *)(a2 + 2408) = 0;
  v405 = *(_QWORD *)(a1 + 2408);
  *(_QWORD *)(a1 + 2408) = v404;
  if (v405)
    (*(void (**)(uint64_t))(*(_QWORD *)v405 + 8))(v405);
  v406 = *(_QWORD *)(a2 + 2416);
  *(_QWORD *)(a2 + 2416) = 0;
  v407 = *(_QWORD *)(a1 + 2416);
  *(_QWORD *)(a1 + 2416) = v406;
  if (v407)
    (*(void (**)(uint64_t))(*(_QWORD *)v407 + 8))(v407);
  v408 = *(_QWORD *)(a2 + 2320);
  *(_QWORD *)(a2 + 2320) = 0;
  v409 = *(_QWORD *)(a1 + 2320);
  *(_QWORD *)(a1 + 2320) = v408;
  if (v409)
    (*(void (**)(uint64_t))(*(_QWORD *)v409 + 8))(v409);
  v410 = *(_QWORD *)(a2 + 864);
  *(_QWORD *)(a2 + 864) = 0;
  v411 = *(_QWORD *)(a1 + 864);
  *(_QWORD *)(a1 + 864) = v410;
  if (v411)
    (*(void (**)(uint64_t))(*(_QWORD *)v411 + 8))(v411);
  v412 = *(_QWORD *)(a2 + 1424);
  *(_QWORD *)(a2 + 1424) = 0;
  v413 = *(_QWORD *)(a1 + 1424);
  *(_QWORD *)(a1 + 1424) = v412;
  if (v413)
    (*(void (**)(uint64_t))(*(_QWORD *)v413 + 8))(v413);
  v414 = *(_QWORD *)(a2 + 3424);
  *(_QWORD *)(a2 + 3424) = 0;
  v415 = *(_QWORD *)(a1 + 3424);
  *(_QWORD *)(a1 + 3424) = v414;
  if (v415)
    (*(void (**)(uint64_t))(*(_QWORD *)v415 + 8))(v415);
  v416 = *(_QWORD *)(a2 + 2352);
  *(_QWORD *)(a2 + 2352) = 0;
  v417 = *(_QWORD *)(a1 + 2352);
  *(_QWORD *)(a1 + 2352) = v416;
  if (v417)
    (*(void (**)(uint64_t))(*(_QWORD *)v417 + 8))(v417);
  v418 = *(_QWORD *)(a2 + 2376);
  *(_QWORD *)(a2 + 2376) = 0;
  v419 = *(_QWORD *)(a1 + 2376);
  *(_QWORD *)(a1 + 2376) = v418;
  if (v419)
    (*(void (**)(uint64_t))(*(_QWORD *)v419 + 8))(v419);
  v420 = *(_QWORD *)(a2 + 1272);
  *(_QWORD *)(a2 + 1272) = 0;
  v421 = *(_QWORD *)(a1 + 1272);
  *(_QWORD *)(a1 + 1272) = v420;
  if (v421)
    (*(void (**)(uint64_t))(*(_QWORD *)v421 + 8))(v421);
  v422 = *(_QWORD *)(a2 + 2992);
  *(_QWORD *)(a2 + 2992) = 0;
  v423 = *(_QWORD *)(a1 + 2992);
  *(_QWORD *)(a1 + 2992) = v422;
  if (v423)
    (*(void (**)(uint64_t))(*(_QWORD *)v423 + 8))(v423);
  v424 = *(_QWORD *)(a2 + 2368);
  *(_QWORD *)(a2 + 2368) = 0;
  v425 = *(_QWORD *)(a1 + 2368);
  *(_QWORD *)(a1 + 2368) = v424;
  if (v425)
    (*(void (**)(uint64_t))(*(_QWORD *)v425 + 8))(v425);
  v426 = *(_QWORD *)(a2 + 1968);
  *(_QWORD *)(a2 + 1968) = 0;
  v427 = *(_QWORD *)(a1 + 1968);
  *(_QWORD *)(a1 + 1968) = v426;
  if (v427)
    (*(void (**)(uint64_t))(*(_QWORD *)v427 + 8))(v427);
  v428 = *(_QWORD *)(a2 + 3384);
  *(_QWORD *)(a2 + 3384) = 0;
  v429 = *(_QWORD *)(a1 + 3384);
  *(_QWORD *)(a1 + 3384) = v428;
  if (v429)
    (*(void (**)(uint64_t))(*(_QWORD *)v429 + 8))(v429);
  v430 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a2 + 176) = 0;
  v431 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v430;
  if (v431)
    (*(void (**)(uint64_t))(*(_QWORD *)v431 + 8))(v431);
  v432 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a2 + 208) = 0;
  v433 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = v432;
  if (v433)
    (*(void (**)(uint64_t))(*(_QWORD *)v433 + 8))(v433);
  v434 = *(_QWORD *)(a2 + 2032);
  *(_QWORD *)(a2 + 2032) = 0;
  v435 = *(_QWORD *)(a1 + 2032);
  *(_QWORD *)(a1 + 2032) = v434;
  if (v435)
    (*(void (**)(uint64_t))(*(_QWORD *)v435 + 8))(v435);
  v436 = *(_QWORD *)(a2 + 776);
  *(_QWORD *)(a2 + 776) = 0;
  v437 = *(_QWORD *)(a1 + 776);
  *(_QWORD *)(a1 + 776) = v436;
  if (v437)
    (*(void (**)(uint64_t))(*(_QWORD *)v437 + 8))(v437);
  v438 = *(_QWORD *)(a2 + 2448);
  *(_QWORD *)(a2 + 2448) = 0;
  v439 = *(_QWORD *)(a1 + 2448);
  *(_QWORD *)(a1 + 2448) = v438;
  if (v439)
    (*(void (**)(uint64_t))(*(_QWORD *)v439 + 8))(v439);
  v440 = *(_QWORD *)(a2 + 2456);
  *(_QWORD *)(a2 + 2456) = 0;
  v441 = *(_QWORD *)(a1 + 2456);
  *(_QWORD *)(a1 + 2456) = v440;
  if (v441)
    (*(void (**)(uint64_t))(*(_QWORD *)v441 + 8))(v441);
  v442 = *(_QWORD *)(a2 + 1336);
  *(_QWORD *)(a2 + 1336) = 0;
  v443 = *(_QWORD *)(a1 + 1336);
  *(_QWORD *)(a1 + 1336) = v442;
  if (v443)
    (*(void (**)(uint64_t))(*(_QWORD *)v443 + 8))(v443);
  v444 = *(_QWORD *)(a2 + 3496);
  *(_QWORD *)(a2 + 3496) = 0;
  v445 = *(_QWORD *)(a1 + 3496);
  *(_QWORD *)(a1 + 3496) = v444;
  if (v445)
    (*(void (**)(uint64_t))(*(_QWORD *)v445 + 8))(v445);
  v446 = *(_QWORD *)(a2 + 3072);
  *(_QWORD *)(a2 + 3072) = 0;
  v447 = *(_QWORD *)(a1 + 3072);
  *(_QWORD *)(a1 + 3072) = v446;
  if (v447)
    (*(void (**)(uint64_t))(*(_QWORD *)v447 + 8))(v447);
  v448 = *(_QWORD *)(a2 + 3168);
  *(_QWORD *)(a2 + 3168) = 0;
  v449 = *(_QWORD *)(a1 + 3168);
  *(_QWORD *)(a1 + 3168) = v448;
  if (v449)
    (*(void (**)(uint64_t))(*(_QWORD *)v449 + 8))(v449);
  v450 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  v451 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v450;
  if (v451)
    (*(void (**)(uint64_t))(*(_QWORD *)v451 + 8))(v451);
  v452 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  v453 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v452;
  if (v453)
    (*(void (**)(uint64_t))(*(_QWORD *)v453 + 8))(v453);
  v454 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  v455 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v454;
  if (v455)
    (*(void (**)(uint64_t))(*(_QWORD *)v455 + 8))(v455);
  v456 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  v457 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v456;
  if (v457)
    (*(void (**)(uint64_t))(*(_QWORD *)v457 + 8))(v457);
  v458 = *(_QWORD *)(a2 + 1144);
  *(_QWORD *)(a2 + 1144) = 0;
  v459 = *(_QWORD *)(a1 + 1144);
  *(_QWORD *)(a1 + 1144) = v458;
  if (v459)
    (*(void (**)(uint64_t))(*(_QWORD *)v459 + 8))(v459);
  v460 = *(_QWORD *)(a2 + 1256);
  *(_QWORD *)(a2 + 1256) = 0;
  v461 = *(_QWORD *)(a1 + 1256);
  *(_QWORD *)(a1 + 1256) = v460;
  if (v461)
    (*(void (**)(uint64_t))(*(_QWORD *)v461 + 8))(v461);
  v462 = *(_QWORD *)(a2 + 1264);
  *(_QWORD *)(a2 + 1264) = 0;
  v463 = *(_QWORD *)(a1 + 1264);
  *(_QWORD *)(a1 + 1264) = v462;
  if (v463)
    (*(void (**)(uint64_t))(*(_QWORD *)v463 + 8))(v463);
  v464 = *(_QWORD *)(a2 + 1152);
  *(_QWORD *)(a2 + 1152) = 0;
  v465 = *(_QWORD *)(a1 + 1152);
  *(_QWORD *)(a1 + 1152) = v464;
  if (v465)
    (*(void (**)(uint64_t))(*(_QWORD *)v465 + 8))(v465);
  v466 = *(_QWORD *)(a2 + 1184);
  *(_QWORD *)(a2 + 1184) = 0;
  v467 = *(_QWORD *)(a1 + 1184);
  *(_QWORD *)(a1 + 1184) = v466;
  if (v467)
    (*(void (**)(uint64_t))(*(_QWORD *)v467 + 8))(v467);
  v468 = *(_QWORD *)(a2 + 1232);
  *(_QWORD *)(a2 + 1232) = 0;
  v469 = *(_QWORD *)(a1 + 1232);
  *(_QWORD *)(a1 + 1232) = v468;
  if (v469)
    (*(void (**)(uint64_t))(*(_QWORD *)v469 + 8))(v469);
  v470 = *(_QWORD *)(a2 + 1920);
  *(_QWORD *)(a2 + 1920) = 0;
  v471 = *(_QWORD *)(a1 + 1920);
  *(_QWORD *)(a1 + 1920) = v470;
  if (v471)
    (*(void (**)(uint64_t))(*(_QWORD *)v471 + 8))(v471);
  v472 = *(_QWORD *)(a2 + 640);
  *(_QWORD *)(a2 + 640) = 0;
  v473 = *(_QWORD *)(a1 + 640);
  *(_QWORD *)(a1 + 640) = v472;
  if (v473)
    (*(void (**)(uint64_t))(*(_QWORD *)v473 + 8))(v473);
  v474 = *(_QWORD *)(a2 + 648);
  *(_QWORD *)(a2 + 648) = 0;
  v475 = *(_QWORD *)(a1 + 648);
  *(_QWORD *)(a1 + 648) = v474;
  if (v475)
    (*(void (**)(uint64_t))(*(_QWORD *)v475 + 8))(v475);
  v476 = *(_QWORD *)(a2 + 1224);
  *(_QWORD *)(a2 + 1224) = 0;
  v477 = *(_QWORD *)(a1 + 1224);
  *(_QWORD *)(a1 + 1224) = v476;
  if (v477)
    (*(void (**)(uint64_t))(*(_QWORD *)v477 + 8))(v477);
  v478 = *(_QWORD *)(a2 + 656);
  *(_QWORD *)(a2 + 656) = 0;
  v479 = *(_QWORD *)(a1 + 656);
  *(_QWORD *)(a1 + 656) = v478;
  if (v479)
    (*(void (**)(uint64_t))(*(_QWORD *)v479 + 8))(v479);
  v480 = *(_QWORD *)(a2 + 2528);
  *(_QWORD *)(a2 + 2528) = 0;
  v481 = *(_QWORD *)(a1 + 2528);
  *(_QWORD *)(a1 + 2528) = v480;
  if (v481)
    (*(void (**)(uint64_t))(*(_QWORD *)v481 + 8))(v481);
  v482 = *(_QWORD *)(a2 + 2584);
  *(_QWORD *)(a2 + 2584) = 0;
  v483 = *(_QWORD *)(a1 + 2584);
  *(_QWORD *)(a1 + 2584) = v482;
  if (v483)
    (*(void (**)(uint64_t))(*(_QWORD *)v483 + 8))(v483);
  v484 = *(_QWORD *)(a2 + 2552);
  *(_QWORD *)(a2 + 2552) = 0;
  v485 = *(_QWORD *)(a1 + 2552);
  *(_QWORD *)(a1 + 2552) = v484;
  if (v485)
    (*(void (**)(uint64_t))(*(_QWORD *)v485 + 8))(v485);
  v486 = *(_QWORD *)(a2 + 2592);
  *(_QWORD *)(a2 + 2592) = 0;
  v487 = *(_QWORD *)(a1 + 2592);
  *(_QWORD *)(a1 + 2592) = v486;
  if (v487)
    (*(void (**)(uint64_t))(*(_QWORD *)v487 + 8))(v487);
  v488 = *(_QWORD *)(a2 + 3152);
  *(_QWORD *)(a2 + 3152) = 0;
  v489 = *(_QWORD *)(a1 + 3152);
  *(_QWORD *)(a1 + 3152) = v488;
  if (v489)
    (*(void (**)(uint64_t))(*(_QWORD *)v489 + 8))(v489);
  v490 = *(_QWORD *)(a2 + 744);
  *(_QWORD *)(a2 + 744) = 0;
  v491 = *(_QWORD *)(a1 + 744);
  *(_QWORD *)(a1 + 744) = v490;
  if (v491)
    (*(void (**)(uint64_t))(*(_QWORD *)v491 + 8))(v491);
  v492 = *(_QWORD *)(a2 + 2048);
  *(_QWORD *)(a2 + 2048) = 0;
  v493 = *(_QWORD *)(a1 + 2048);
  *(_QWORD *)(a1 + 2048) = v492;
  if (v493)
    (*(void (**)(uint64_t))(*(_QWORD *)v493 + 8))(v493);
  v494 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  v495 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v494;
  if (v495)
    (*(void (**)(uint64_t))(*(_QWORD *)v495 + 8))(v495);
  v496 = *(_QWORD *)(a2 + 1248);
  *(_QWORD *)(a2 + 1248) = 0;
  v497 = *(_QWORD *)(a1 + 1248);
  *(_QWORD *)(a1 + 1248) = v496;
  if (v497)
    (*(void (**)(uint64_t))(*(_QWORD *)v497 + 8))(v497);
  v498 = *(_QWORD *)(a2 + 2576);
  *(_QWORD *)(a2 + 2576) = 0;
  v499 = *(_QWORD *)(a1 + 2576);
  *(_QWORD *)(a1 + 2576) = v498;
  if (v499)
    (*(void (**)(uint64_t))(*(_QWORD *)v499 + 8))(v499);
  v500 = *(_QWORD *)(a2 + 392);
  *(_QWORD *)(a2 + 392) = 0;
  v501 = *(_QWORD *)(a1 + 392);
  *(_QWORD *)(a1 + 392) = v500;
  if (v501)
    (*(void (**)(uint64_t))(*(_QWORD *)v501 + 8))(v501);
  v502 = *(_QWORD *)(a2 + 2840);
  *(_QWORD *)(a2 + 2840) = 0;
  v503 = *(_QWORD *)(a1 + 2840);
  *(_QWORD *)(a1 + 2840) = v502;
  if (v503)
    (*(void (**)(uint64_t))(*(_QWORD *)v503 + 8))(v503);
  v504 = *(_QWORD *)(a2 + 1864);
  *(_QWORD *)(a2 + 1864) = 0;
  v505 = *(_QWORD *)(a1 + 1864);
  *(_QWORD *)(a1 + 1864) = v504;
  if (v505)
    (*(void (**)(uint64_t))(*(_QWORD *)v505 + 8))(v505);
  v506 = *(_QWORD *)(a2 + 2016);
  *(_QWORD *)(a2 + 2016) = 0;
  v507 = *(_QWORD *)(a1 + 2016);
  *(_QWORD *)(a1 + 2016) = v506;
  if (v507)
    (*(void (**)(uint64_t))(*(_QWORD *)v507 + 8))(v507);
  v508 = *(_QWORD *)(a2 + 880);
  *(_QWORD *)(a2 + 880) = 0;
  v509 = *(_QWORD *)(a1 + 880);
  *(_QWORD *)(a1 + 880) = v508;
  if (v509)
    (*(void (**)(uint64_t))(*(_QWORD *)v509 + 8))(v509);
  v510 = *(_QWORD *)(a2 + 2104);
  *(_QWORD *)(a2 + 2104) = 0;
  v511 = *(_QWORD *)(a1 + 2104);
  *(_QWORD *)(a1 + 2104) = v510;
  if (v511)
    (*(void (**)(uint64_t))(*(_QWORD *)v511 + 8))(v511);
  v512 = *(_QWORD *)(a2 + 2096);
  *(_QWORD *)(a2 + 2096) = 0;
  v513 = *(_QWORD *)(a1 + 2096);
  *(_QWORD *)(a1 + 2096) = v512;
  if (v513)
    (*(void (**)(uint64_t))(*(_QWORD *)v513 + 8))(v513);
  v514 = *(_QWORD *)(a2 + 528);
  *(_QWORD *)(a2 + 528) = 0;
  v515 = *(_QWORD *)(a1 + 528);
  *(_QWORD *)(a1 + 528) = v514;
  if (v515)
    (*(void (**)(uint64_t))(*(_QWORD *)v515 + 8))(v515);
  v516 = *(_QWORD *)(a2 + 3432);
  *(_QWORD *)(a2 + 3432) = 0;
  v517 = *(_QWORD *)(a1 + 3432);
  *(_QWORD *)(a1 + 3432) = v516;
  if (v517)
    (*(void (**)(uint64_t))(*(_QWORD *)v517 + 8))(v517);
  v518 = *(_QWORD *)(a2 + 2136);
  *(_QWORD *)(a2 + 2136) = 0;
  v519 = *(_QWORD *)(a1 + 2136);
  *(_QWORD *)(a1 + 2136) = v518;
  if (v519)
    (*(void (**)(uint64_t))(*(_QWORD *)v519 + 8))(v519);
  v520 = *(_QWORD *)(a2 + 3064);
  *(_QWORD *)(a2 + 3064) = 0;
  v521 = *(_QWORD *)(a1 + 3064);
  *(_QWORD *)(a1 + 3064) = v520;
  if (v521)
    (*(void (**)(uint64_t))(*(_QWORD *)v521 + 8))(v521);
  v522 = *(_QWORD *)(a2 + 848);
  *(_QWORD *)(a2 + 848) = 0;
  v523 = *(_QWORD *)(a1 + 848);
  *(_QWORD *)(a1 + 848) = v522;
  if (v523)
    (*(void (**)(uint64_t))(*(_QWORD *)v523 + 8))(v523);
  v524 = *(_QWORD *)(a2 + 632);
  *(_QWORD *)(a2 + 632) = 0;
  v525 = *(_QWORD *)(a1 + 632);
  *(_QWORD *)(a1 + 632) = v524;
  if (v525)
    (*(void (**)(uint64_t))(*(_QWORD *)v525 + 8))(v525);
  v526 = *(_QWORD *)(a2 + 2008);
  *(_QWORD *)(a2 + 2008) = 0;
  v527 = *(_QWORD *)(a1 + 2008);
  *(_QWORD *)(a1 + 2008) = v526;
  if (v527)
    (*(void (**)(uint64_t))(*(_QWORD *)v527 + 8))(v527);
  v528 = *(_QWORD *)(a2 + 2064);
  *(_QWORD *)(a2 + 2064) = 0;
  v529 = *(_QWORD *)(a1 + 2064);
  *(_QWORD *)(a1 + 2064) = v528;
  if (v529)
    (*(void (**)(uint64_t))(*(_QWORD *)v529 + 8))(v529);
  v530 = *(_QWORD *)(a2 + 3080);
  *(_QWORD *)(a2 + 3080) = 0;
  v531 = *(_QWORD *)(a1 + 3080);
  *(_QWORD *)(a1 + 3080) = v530;
  if (v531)
    (*(void (**)(uint64_t))(*(_QWORD *)v531 + 8))(v531);
  v532 = *(_QWORD *)(a2 + 600);
  *(_QWORD *)(a2 + 600) = 0;
  v533 = *(_QWORD *)(a1 + 600);
  *(_QWORD *)(a1 + 600) = v532;
  if (v533)
    (*(void (**)(uint64_t))(*(_QWORD *)v533 + 8))(v533);
  v534 = *(_QWORD *)(a2 + 2112);
  *(_QWORD *)(a2 + 2112) = 0;
  v535 = *(_QWORD *)(a1 + 2112);
  *(_QWORD *)(a1 + 2112) = v534;
  if (v535)
    (*(void (**)(uint64_t))(*(_QWORD *)v535 + 8))(v535);
  v536 = *(_QWORD *)(a2 + 1952);
  *(_QWORD *)(a2 + 1952) = 0;
  v537 = *(_QWORD *)(a1 + 1952);
  *(_QWORD *)(a1 + 1952) = v536;
  if (v537)
    (*(void (**)(uint64_t))(*(_QWORD *)v537 + 8))(v537);
  v538 = *(_QWORD *)(a2 + 1008);
  *(_QWORD *)(a2 + 1008) = 0;
  v539 = *(_QWORD *)(a1 + 1008);
  *(_QWORD *)(a1 + 1008) = v538;
  if (v539)
    (*(void (**)(uint64_t))(*(_QWORD *)v539 + 8))(v539);
  v540 = *(_QWORD *)(a2 + 424);
  *(_QWORD *)(a2 + 424) = 0;
  v541 = *(_QWORD *)(a1 + 424);
  *(_QWORD *)(a1 + 424) = v540;
  if (v541)
    (*(void (**)(uint64_t))(*(_QWORD *)v541 + 8))(v541);
  v542 = *(_QWORD *)(a2 + 3216);
  *(_QWORD *)(a2 + 3216) = 0;
  v543 = *(_QWORD *)(a1 + 3216);
  *(_QWORD *)(a1 + 3216) = v542;
  if (v543)
    (*(void (**)(uint64_t))(*(_QWORD *)v543 + 8))(v543);
  v544 = *(_QWORD *)(a2 + 3024);
  *(_QWORD *)(a2 + 3024) = 0;
  v545 = *(_QWORD *)(a1 + 3024);
  *(_QWORD *)(a1 + 3024) = v544;
  if (v545)
    (*(void (**)(uint64_t))(*(_QWORD *)v545 + 8))(v545);
  v546 = *(_QWORD *)(a2 + 3408);
  *(_QWORD *)(a2 + 3408) = 0;
  v547 = *(_QWORD *)(a1 + 3408);
  *(_QWORD *)(a1 + 3408) = v546;
  if (v547)
    (*(void (**)(uint64_t))(*(_QWORD *)v547 + 8))(v547);
  v548 = *(_QWORD *)(a2 + 2056);
  *(_QWORD *)(a2 + 2056) = 0;
  v549 = *(_QWORD *)(a1 + 2056);
  *(_QWORD *)(a1 + 2056) = v548;
  if (v549)
    (*(void (**)(uint64_t))(*(_QWORD *)v549 + 8))(v549);
  v550 = *(_QWORD *)(a2 + 2040);
  *(_QWORD *)(a2 + 2040) = 0;
  v551 = *(_QWORD *)(a1 + 2040);
  *(_QWORD *)(a1 + 2040) = v550;
  if (v551)
    (*(void (**)(uint64_t))(*(_QWORD *)v551 + 8))(v551);
  v552 = *(_QWORD *)(a2 + 2120);
  *(_QWORD *)(a2 + 2120) = 0;
  v553 = *(_QWORD *)(a1 + 2120);
  *(_QWORD *)(a1 + 2120) = v552;
  if (v553)
    (*(void (**)(uint64_t))(*(_QWORD *)v553 + 8))(v553);
  v554 = *(_QWORD *)(a2 + 2568);
  *(_QWORD *)(a2 + 2568) = 0;
  v555 = *(_QWORD *)(a1 + 2568);
  *(_QWORD *)(a1 + 2568) = v554;
  if (v555)
    (*(void (**)(uint64_t))(*(_QWORD *)v555 + 8))(v555);
  v556 = *(_QWORD *)(a2 + 1400);
  *(_QWORD *)(a2 + 1400) = 0;
  v557 = *(_QWORD *)(a1 + 1400);
  *(_QWORD *)(a1 + 1400) = v556;
  if (v557)
    (*(void (**)(uint64_t))(*(_QWORD *)v557 + 8))(v557);
  v558 = *(_QWORD *)(a2 + 624);
  *(_QWORD *)(a2 + 624) = 0;
  v559 = *v5;
  *v5 = v558;
  if (v559)
    (*(void (**)(uint64_t))(*(_QWORD *)v559 + 8))(v559);
  v560 = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a2 + 288) = 0;
  v561 = *(_QWORD *)(a1 + 288);
  *(_QWORD *)(a1 + 288) = v560;
  if (v561)
    (*(void (**)(uint64_t))(*(_QWORD *)v561 + 8))(v561);
  v562 = *(_QWORD *)(a2 + 1384);
  *(_QWORD *)(a2 + 1384) = 0;
  v563 = *(_QWORD *)(a1 + 1384);
  *(_QWORD *)(a1 + 1384) = v562;
  if (v563)
    (*(void (**)(uint64_t))(*(_QWORD *)v563 + 8))(v563);
  v564 = *(_QWORD *)(a2 + 1368);
  *(_QWORD *)(a2 + 1368) = 0;
  v565 = *(_QWORD *)(a1 + 1368);
  *(_QWORD *)(a1 + 1368) = v564;
  if (v565)
    (*(void (**)(uint64_t))(*(_QWORD *)v565 + 8))(v565);
  v566 = *(_QWORD *)(a2 + 1376);
  *(_QWORD *)(a2 + 1376) = 0;
  v567 = *(_QWORD *)(a1 + 1376);
  *(_QWORD *)(a1 + 1376) = v566;
  if (v567)
    (*(void (**)(uint64_t))(*(_QWORD *)v567 + 8))(v567);
  v568 = *(_QWORD *)(a2 + 1360);
  *(_QWORD *)(a2 + 1360) = 0;
  v569 = *(_QWORD *)(a1 + 1360);
  *(_QWORD *)(a1 + 1360) = v568;
  if (v569)
    (*(void (**)(uint64_t))(*(_QWORD *)v569 + 8))(v569);
  v570 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 120) = 0;
  v571 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v570;
  if (v571)
    (*(void (**)(uint64_t))(*(_QWORD *)v571 + 8))(v571);
  v572 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = 0;
  v573 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v572;
  if (v573)
    (*(void (**)(uint64_t))(*(_QWORD *)v573 + 8))(v573);
  v574 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a2 + 240) = 0;
  v575 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 240) = v574;
  if (v575)
    (*(void (**)(uint64_t))(*(_QWORD *)v575 + 8))(v575);
  v576 = *(_QWORD *)(a2 + 3120);
  *(_QWORD *)(a2 + 3120) = 0;
  v577 = *(_QWORD *)(a1 + 3120);
  *(_QWORD *)(a1 + 3120) = v576;
  if (v577)
    (*(void (**)(uint64_t))(*(_QWORD *)v577 + 8))(v577);
  v578 = *(_QWORD *)(a2 + 3112);
  *(_QWORD *)(a2 + 3112) = 0;
  v579 = *(_QWORD *)(a1 + 3112);
  *(_QWORD *)(a1 + 3112) = v578;
  if (v579)
    (*(void (**)(uint64_t))(*(_QWORD *)v579 + 8))(v579);
  v580 = *(_QWORD *)(a2 + 840);
  *(_QWORD *)(a2 + 840) = 0;
  v581 = *(_QWORD *)(a1 + 840);
  *(_QWORD *)(a1 + 840) = v580;
  if (v581)
    (*(void (**)(uint64_t))(*(_QWORD *)v581 + 8))(v581);
  v582 = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a2 + 280) = 0;
  v583 = *(_QWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 280) = v582;
  if (v583)
    (*(void (**)(uint64_t))(*(_QWORD *)v583 + 8))(v583);
  v584 = *(_QWORD *)(a2 + 1104);
  *(_QWORD *)(a2 + 1104) = 0;
  v585 = *(_QWORD *)(a1 + 1104);
  *(_QWORD *)(a1 + 1104) = v584;
  if (v585)
    (*(void (**)(uint64_t))(*(_QWORD *)v585 + 8))(v585);
  v586 = *(_QWORD *)(a2 + 2688);
  *(_QWORD *)(a2 + 2688) = 0;
  v587 = *(_QWORD *)(a1 + 2688);
  *(_QWORD *)(a1 + 2688) = v586;
  if (v587)
    (*(void (**)(uint64_t))(*(_QWORD *)v587 + 8))(v587);
  v588 = *(_QWORD *)(a2 + 2704);
  *(_QWORD *)(a2 + 2704) = 0;
  v589 = *(_QWORD *)(a1 + 2704);
  *(_QWORD *)(a1 + 2704) = v588;
  if (v589)
    (*(void (**)(uint64_t))(*(_QWORD *)v589 + 8))(v589);
  v590 = *(_QWORD *)(a2 + 2696);
  *(_QWORD *)(a2 + 2696) = 0;
  v591 = *(_QWORD *)(a1 + 2696);
  *(_QWORD *)(a1 + 2696) = v590;
  if (v591)
    (*(void (**)(uint64_t))(*(_QWORD *)v591 + 8))(v591);
  v592 = *(_QWORD *)(a2 + 3608);
  *(_QWORD *)(a2 + 3608) = 0;
  v593 = *(_QWORD *)(a1 + 3608);
  *(_QWORD *)(a1 + 3608) = v592;
  if (v593)
    (*(void (**)(uint64_t))(*(_QWORD *)v593 + 8))(v593);
  v594 = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a2 + 328) = 0;
  v595 = *(_QWORD *)(a1 + 328);
  *(_QWORD *)(a1 + 328) = v594;
  if (v595)
    (*(void (**)(uint64_t))(*(_QWORD *)v595 + 8))(v595);
  v596 = *(_QWORD *)(a2 + 2520);
  *(_QWORD *)(a2 + 2520) = 0;
  v597 = *(_QWORD *)(a1 + 2520);
  *(_QWORD *)(a1 + 2520) = v596;
  if (v597)
    (*(void (**)(uint64_t))(*(_QWORD *)v597 + 8))(v597);
  v598 = *(_QWORD *)(a2 + 2088);
  *(_QWORD *)(a2 + 2088) = 0;
  v599 = *(_QWORD *)(a1 + 2088);
  *(_QWORD *)(a1 + 2088) = v598;
  if (v599)
    (*(void (**)(uint64_t))(*(_QWORD *)v599 + 8))(v599);
  v600 = *(_QWORD *)(a2 + 2080);
  *(_QWORD *)(a2 + 2080) = 0;
  v601 = *(_QWORD *)(a1 + 2080);
  *(_QWORD *)(a1 + 2080) = v600;
  if (v601)
    (*(void (**)(uint64_t))(*(_QWORD *)v601 + 8))(v601);
  v602 = *(_QWORD *)(a2 + 520);
  *(_QWORD *)(a2 + 520) = 0;
  v603 = *(_QWORD *)(a1 + 520);
  *(_QWORD *)(a1 + 520) = v602;
  if (v603)
    (*(void (**)(uint64_t))(*(_QWORD *)v603 + 8))(v603);
  v604 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 160) = 0;
  v605 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v604;
  if (v605)
    (*(void (**)(uint64_t))(*(_QWORD *)v605 + 8))(v605);
  v606 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a2 + 168) = 0;
  v607 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v606;
  if (v607)
    (*(void (**)(uint64_t))(*(_QWORD *)v607 + 8))(v607);
  v608 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 152) = 0;
  v609 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v608;
  if (v609)
    (*(void (**)(uint64_t))(*(_QWORD *)v609 + 8))(v609);
  v610 = *(_QWORD *)(a2 + 1064);
  *(_QWORD *)(a2 + 1064) = 0;
  v611 = *(_QWORD *)(a1 + 1064);
  *(_QWORD *)(a1 + 1064) = v610;
  if (v611)
    (*(void (**)(uint64_t))(*(_QWORD *)v611 + 8))(v611);
  v612 = *(_QWORD *)(a2 + 1072);
  *(_QWORD *)(a2 + 1072) = 0;
  v613 = *(_QWORD *)(a1 + 1072);
  *(_QWORD *)(a1 + 1072) = v612;
  if (v613)
    (*(void (**)(uint64_t))(*(_QWORD *)v613 + 8))(v613);
  v614 = *(_QWORD *)(a2 + 664);
  *(_QWORD *)(a2 + 664) = 0;
  v615 = *(_QWORD *)(a1 + 664);
  *(_QWORD *)(a1 + 664) = v614;
  if (v615)
    (*(void (**)(uint64_t))(*(_QWORD *)v615 + 8))(v615);
  v616 = *(_QWORD *)(a2 + 3304);
  *(_QWORD *)(a2 + 3304) = 0;
  v617 = *(_QWORD *)(a1 + 3304);
  *(_QWORD *)(a1 + 3304) = v616;
  if (v617)
    (*(void (**)(uint64_t))(*(_QWORD *)v617 + 8))(v617);
  v618 = *(_QWORD *)(a2 + 3296);
  *(_QWORD *)(a2 + 3296) = 0;
  v619 = *(_QWORD *)(a1 + 3296);
  *(_QWORD *)(a1 + 3296) = v618;
  if (v619)
    (*(void (**)(uint64_t))(*(_QWORD *)v619 + 8))(v619);
  v620 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a2 + 200) = 0;
  v621 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = v620;
  if (v621)
    (*(void (**)(uint64_t))(*(_QWORD *)v621 + 8))(v621);
  v622 = *(_QWORD *)(a2 + 952);
  *(_QWORD *)(a2 + 952) = 0;
  v623 = *(_QWORD *)(a1 + 952);
  *(_QWORD *)(a1 + 952) = v622;
  if (v623)
    (*(void (**)(uint64_t))(*(_QWORD *)v623 + 8))(v623);
  v624 = *(_QWORD *)(a2 + 960);
  *(_QWORD *)(a2 + 960) = 0;
  v625 = *(_QWORD *)(a1 + 960);
  *(_QWORD *)(a1 + 960) = v624;
  if (v625)
    (*(void (**)(uint64_t))(*(_QWORD *)v625 + 8))(v625);
  v626 = *(_QWORD *)(a2 + 968);
  *(_QWORD *)(a2 + 968) = 0;
  v627 = *(_QWORD *)(a1 + 968);
  *(_QWORD *)(a1 + 968) = v626;
  if (v627)
    (*(void (**)(uint64_t))(*(_QWORD *)v627 + 8))(v627);
  v628 = *(_QWORD *)(a2 + 936);
  *(_QWORD *)(a2 + 936) = 0;
  v629 = *(_QWORD *)(a1 + 936);
  *(_QWORD *)(a1 + 936) = v628;
  if (v629)
    (*(void (**)(uint64_t))(*(_QWORD *)v629 + 8))(v629);
  v630 = *(_QWORD *)(a2 + 992);
  *(_QWORD *)(a2 + 992) = 0;
  v631 = *(_QWORD *)(a1 + 992);
  *(_QWORD *)(a1 + 992) = v630;
  if (v631)
    (*(void (**)(uint64_t))(*(_QWORD *)v631 + 8))(v631);
  v632 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 136) = 0;
  v633 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v632;
  if (v633)
    (*(void (**)(uint64_t))(*(_QWORD *)v633 + 8))(v633);
  v634 = *(_QWORD *)(a2 + 2680);
  *(_QWORD *)(a2 + 2680) = 0;
  v635 = *(_QWORD *)(a1 + 2680);
  *(_QWORD *)(a1 + 2680) = v634;
  if (v635)
    (*(void (**)(uint64_t))(*(_QWORD *)v635 + 8))(v635);
  v636 = *(_QWORD *)(a2 + 2672);
  *(_QWORD *)(a2 + 2672) = 0;
  v637 = *(_QWORD *)(a1 + 2672);
  *(_QWORD *)(a1 + 2672) = v636;
  if (v637)
    (*(void (**)(uint64_t))(*(_QWORD *)v637 + 8))(v637);
  v638 = *(_QWORD *)(a2 + 752);
  *(_QWORD *)(a2 + 752) = 0;
  v639 = *(_QWORD *)(a1 + 752);
  *(_QWORD *)(a1 + 752) = v638;
  if (v639)
    (*(void (**)(uint64_t))(*(_QWORD *)v639 + 8))(v639);
  v640 = *(_QWORD *)(a2 + 944);
  *(_QWORD *)(a2 + 944) = 0;
  v641 = *(_QWORD *)(a1 + 944);
  *(_QWORD *)(a1 + 944) = v640;
  if (v641)
    (*(void (**)(uint64_t))(*(_QWORD *)v641 + 8))(v641);
  v642 = *(_QWORD *)(a2 + 3352);
  *(_QWORD *)(a2 + 3352) = 0;
  v643 = *(_QWORD *)(a1 + 3352);
  *(_QWORD *)(a1 + 3352) = v642;
  if (v643)
    (*(void (**)(uint64_t))(*(_QWORD *)v643 + 8))(v643);
  v644 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a2 + 184) = 0;
  v645 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = v644;
  if (v645)
    (*(void (**)(uint64_t))(*(_QWORD *)v645 + 8))(v645);
  v646 = *(_QWORD *)(a2 + 976);
  *(_QWORD *)(a2 + 976) = 0;
  v647 = *(_QWORD *)(a1 + 976);
  *(_QWORD *)(a1 + 976) = v646;
  if (v647)
    (*(void (**)(uint64_t))(*(_QWORD *)v647 + 8))(v647);
  v648 = *(_QWORD *)(a2 + 1176);
  *(_QWORD *)(a2 + 1176) = 0;
  v649 = *(_QWORD *)(a1 + 1176);
  *(_QWORD *)(a1 + 1176) = v648;
  if (v649)
    (*(void (**)(uint64_t))(*(_QWORD *)v649 + 8))(v649);
  v650 = *(_QWORD *)(a2 + 3056);
  *(_QWORD *)(a2 + 3056) = 0;
  v651 = *(_QWORD *)(a1 + 3056);
  *(_QWORD *)(a1 + 3056) = v650;
  if (v651)
    (*(void (**)(uint64_t))(*(_QWORD *)v651 + 8))(v651);
  v652 = *(_QWORD *)(a2 + 1016);
  *(_QWORD *)(a2 + 1016) = 0;
  v653 = *(_QWORD *)(a1 + 1016);
  *(_QWORD *)(a1 + 1016) = v652;
  if (v653)
    (*(void (**)(uint64_t))(*(_QWORD *)v653 + 8))(v653);
  v654 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a2 + 264) = 0;
  v655 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 264) = v654;
  if (v655)
    (*(void (**)(uint64_t))(*(_QWORD *)v655 + 8))(v655);
  v656 = *(_QWORD *)(a2 + 2864);
  *(_QWORD *)(a2 + 2864) = 0;
  v657 = *(_QWORD *)(a1 + 2864);
  *(_QWORD *)(a1 + 2864) = v656;
  if (v657)
    (*(void (**)(uint64_t))(*(_QWORD *)v657 + 8))(v657);
  v658 = *(_QWORD *)(a2 + 2888);
  *(_QWORD *)(a2 + 2888) = 0;
  v659 = *(_QWORD *)(a1 + 2888);
  *(_QWORD *)(a1 + 2888) = v658;
  if (v659)
    (*(void (**)(uint64_t))(*(_QWORD *)v659 + 8))(v659);
  v660 = *(_QWORD *)(a2 + 2872);
  *(_QWORD *)(a2 + 2872) = 0;
  v661 = *(_QWORD *)(a1 + 2872);
  *(_QWORD *)(a1 + 2872) = v660;
  if (v661)
    (*(void (**)(uint64_t))(*(_QWORD *)v661 + 8))(v661);
  v662 = *(_QWORD *)(a2 + 2880);
  *(_QWORD *)(a2 + 2880) = 0;
  v663 = *(_QWORD *)(a1 + 2880);
  *(_QWORD *)(a1 + 2880) = v662;
  if (v663)
    (*(void (**)(uint64_t))(*(_QWORD *)v663 + 8))(v663);
  v664 = *(_QWORD *)(a2 + 2928);
  *(_QWORD *)(a2 + 2928) = 0;
  v665 = *(_QWORD *)(a1 + 2928);
  *(_QWORD *)(a1 + 2928) = v664;
  if (v665)
    (*(void (**)(uint64_t))(*(_QWORD *)v665 + 8))(v665);
  v666 = *(_QWORD *)(a2 + 984);
  *(_QWORD *)(a2 + 984) = 0;
  v667 = *(_QWORD *)(a1 + 984);
  *(_QWORD *)(a1 + 984) = v666;
  if (v667)
    (*(void (**)(uint64_t))(*(_QWORD *)v667 + 8))(v667);
  v668 = *(_QWORD *)(a2 + 1456);
  *(_QWORD *)(a2 + 1456) = 0;
  v669 = *(_QWORD *)(a1 + 1456);
  *(_QWORD *)(a1 + 1456) = v668;
  if (v669)
    (*(void (**)(uint64_t))(*(_QWORD *)v669 + 8))(v669);
  v670 = *(_QWORD *)(a2 + 2560);
  *(_QWORD *)(a2 + 2560) = 0;
  v671 = *(_QWORD *)(a1 + 2560);
  *(_QWORD *)(a1 + 2560) = v670;
  if (v671)
    (*(void (**)(uint64_t))(*(_QWORD *)v671 + 8))(v671);
  v672 = *(_QWORD *)(a2 + 1992);
  *(_QWORD *)(a2 + 1992) = 0;
  v673 = *(_QWORD *)(a1 + 1992);
  *(_QWORD *)(a1 + 1992) = v672;
  if (v673)
    (*(void (**)(uint64_t))(*(_QWORD *)v673 + 8))(v673);
  v674 = *(_QWORD *)(a2 + 928);
  *(_QWORD *)(a2 + 928) = 0;
  v675 = *(_QWORD *)(a1 + 928);
  *(_QWORD *)(a1 + 928) = v674;
  if (v675)
    (*(void (**)(uint64_t))(*(_QWORD *)v675 + 8))(v675);
  v676 = *(_QWORD *)(a2 + 1824);
  *(_QWORD *)(a2 + 1824) = 0;
  v677 = *(_QWORD *)(a1 + 1824);
  *(_QWORD *)(a1 + 1824) = v676;
  if (v677)
    (*(void (**)(uint64_t))(*(_QWORD *)v677 + 8))(v677);
  v678 = *(_QWORD *)(a2 + 816);
  *(_QWORD *)(a2 + 816) = 0;
  v679 = *(_QWORD *)(a1 + 816);
  *(_QWORD *)(a1 + 816) = v678;
  if (v679)
    (*(void (**)(uint64_t))(*(_QWORD *)v679 + 8))(v679);
  v680 = *(_QWORD *)(a2 + 800);
  *(_QWORD *)(a2 + 800) = 0;
  v681 = *(_QWORD *)(a1 + 800);
  *(_QWORD *)(a1 + 800) = v680;
  if (v681)
    (*(void (**)(uint64_t))(*(_QWORD *)v681 + 8))(v681);
  v682 = *(_QWORD *)(a2 + 808);
  *(_QWORD *)(a2 + 808) = 0;
  v683 = *(_QWORD *)(a1 + 808);
  *(_QWORD *)(a1 + 808) = v682;
  if (v683)
    (*(void (**)(uint64_t))(*(_QWORD *)v683 + 8))(v683);
  v684 = *(_QWORD *)(a2 + 792);
  *(_QWORD *)(a2 + 792) = 0;
  v685 = *(_QWORD *)(a1 + 792);
  *(_QWORD *)(a1 + 792) = v684;
  if (v685)
    (*(void (**)(uint64_t))(*(_QWORD *)v685 + 8))(v685);
  v686 = *(_QWORD *)(a2 + 2144);
  *(_QWORD *)(a2 + 2144) = 0;
  v687 = *(_QWORD *)(a1 + 2144);
  *(_QWORD *)(a1 + 2144) = v686;
  if (v687)
    (*(void (**)(uint64_t))(*(_QWORD *)v687 + 8))(v687);
  v688 = *(_QWORD *)(a2 + 1528);
  *(_QWORD *)(a2 + 1528) = 0;
  v689 = *(_QWORD *)(a1 + 1528);
  *(_QWORD *)(a1 + 1528) = v688;
  if (v689)
    (*(void (**)(uint64_t))(*(_QWORD *)v689 + 8))(v689);
  v690 = *(_QWORD *)(a2 + 1536);
  *(_QWORD *)(a2 + 1536) = 0;
  v691 = *(_QWORD *)(a1 + 1536);
  *(_QWORD *)(a1 + 1536) = v690;
  if (v691)
    (*(void (**)(uint64_t))(*(_QWORD *)v691 + 8))(v691);
  v692 = *(_QWORD *)(a2 + 1560);
  *(_QWORD *)(a2 + 1560) = 0;
  v693 = *(_QWORD *)(a1 + 1560);
  *(_QWORD *)(a1 + 1560) = v692;
  if (v693)
    (*(void (**)(uint64_t))(*(_QWORD *)v693 + 8))(v693);
  v694 = *(_QWORD *)(a2 + 1648);
  *(_QWORD *)(a2 + 1648) = 0;
  v695 = *(_QWORD *)(a1 + 1648);
  *(_QWORD *)(a1 + 1648) = v694;
  if (v695)
    (*(void (**)(uint64_t))(*(_QWORD *)v695 + 8))(v695);
  v696 = *(_QWORD *)(a2 + 1768);
  *(_QWORD *)(a2 + 1768) = 0;
  v697 = *(_QWORD *)(a1 + 1768);
  *(_QWORD *)(a1 + 1768) = v696;
  if (v697)
    (*(void (**)(uint64_t))(*(_QWORD *)v697 + 8))(v697);
  v698 = *(_QWORD *)(a2 + 1760);
  *(_QWORD *)(a2 + 1760) = 0;
  v699 = *(_QWORD *)(a1 + 1760);
  *(_QWORD *)(a1 + 1760) = v698;
  if (v699)
    (*(void (**)(uint64_t))(*(_QWORD *)v699 + 8))(v699);
  v700 = *(_QWORD *)(a2 + 1632);
  *(_QWORD *)(a2 + 1632) = 0;
  v701 = *(_QWORD *)(a1 + 1632);
  *(_QWORD *)(a1 + 1632) = v700;
  if (v701)
    (*(void (**)(uint64_t))(*(_QWORD *)v701 + 8))(v701);
  v702 = *(_QWORD *)(a2 + 1312);
  *(_QWORD *)(a2 + 1312) = 0;
  v703 = *(_QWORD *)(a1 + 1312);
  *(_QWORD *)(a1 + 1312) = v702;
  if (v703)
    (*(void (**)(uint64_t))(*(_QWORD *)v703 + 8))(v703);
  v704 = *(_QWORD *)(a2 + 1304);
  *(_QWORD *)(a2 + 1304) = 0;
  v705 = *(_QWORD *)(a1 + 1304);
  *(_QWORD *)(a1 + 1304) = v704;
  if (v705)
    (*(void (**)(uint64_t))(*(_QWORD *)v705 + 8))(v705);
  v706 = *(_QWORD *)(a2 + 1520);
  *(_QWORD *)(a2 + 1520) = 0;
  v707 = *(_QWORD *)(a1 + 1520);
  *(_QWORD *)(a1 + 1520) = v706;
  if (v707)
    (*(void (**)(uint64_t))(*(_QWORD *)v707 + 8))(v707);
  v708 = *(_QWORD *)(a2 + 1544);
  *(_QWORD *)(a2 + 1544) = 0;
  v709 = *(_QWORD *)(a1 + 1544);
  *(_QWORD *)(a1 + 1544) = v708;
  if (v709)
    (*(void (**)(uint64_t))(*(_QWORD *)v709 + 8))(v709);
  v710 = *(_QWORD *)(a2 + 1656);
  *(_QWORD *)(a2 + 1656) = 0;
  v711 = *(_QWORD *)(a1 + 1656);
  *(_QWORD *)(a1 + 1656) = v710;
  if (v711)
    (*(void (**)(uint64_t))(*(_QWORD *)v711 + 8))(v711);
  v712 = *(_QWORD *)(a2 + 1664);
  *(_QWORD *)(a2 + 1664) = 0;
  v713 = *(_QWORD *)(a1 + 1664);
  *(_QWORD *)(a1 + 1664) = v712;
  if (v713)
    (*(void (**)(uint64_t))(*(_QWORD *)v713 + 8))(v713);
  v714 = *(_QWORD *)(a2 + 1696);
  *(_QWORD *)(a2 + 1696) = 0;
  v715 = *(_QWORD *)(a1 + 1696);
  *(_QWORD *)(a1 + 1696) = v714;
  if (v715)
    (*(void (**)(uint64_t))(*(_QWORD *)v715 + 8))(v715);
  v716 = *(_QWORD *)(a2 + 1600);
  *(_QWORD *)(a2 + 1600) = 0;
  v717 = *(_QWORD *)(a1 + 1600);
  *(_QWORD *)(a1 + 1600) = v716;
  if (v717)
    (*(void (**)(uint64_t))(*(_QWORD *)v717 + 8))(v717);
  v718 = *(_QWORD *)(a2 + 1584);
  *(_QWORD *)(a2 + 1584) = 0;
  v719 = *(_QWORD *)(a1 + 1584);
  *(_QWORD *)(a1 + 1584) = v718;
  if (v719)
    (*(void (**)(uint64_t))(*(_QWORD *)v719 + 8))(v719);
  v720 = *(_QWORD *)(a2 + 1704);
  *(_QWORD *)(a2 + 1704) = 0;
  v721 = *(_QWORD *)(a1 + 1704);
  *(_QWORD *)(a1 + 1704) = v720;
  if (v721)
    (*(void (**)(uint64_t))(*(_QWORD *)v721 + 8))(v721);
  v722 = *(_QWORD *)(a2 + 1592);
  *(_QWORD *)(a2 + 1592) = 0;
  v723 = *(_QWORD *)(a1 + 1592);
  *(_QWORD *)(a1 + 1592) = v722;
  if (v723)
    (*(void (**)(uint64_t))(*(_QWORD *)v723 + 8))(v723);
  v724 = *(_QWORD *)(a2 + 1672);
  *(_QWORD *)(a2 + 1672) = 0;
  v725 = *(_QWORD *)(a1 + 1672);
  *(_QWORD *)(a1 + 1672) = v724;
  if (v725)
    (*(void (**)(uint64_t))(*(_QWORD *)v725 + 8))(v725);
  v726 = *(_QWORD *)(a2 + 768);
  *(_QWORD *)(a2 + 768) = 0;
  v727 = *(_QWORD *)(a1 + 768);
  *(_QWORD *)(a1 + 768) = v726;
  if (v727)
    (*(void (**)(uint64_t))(*(_QWORD *)v727 + 8))(v727);
  v728 = *(_QWORD *)(a2 + 3224);
  *(_QWORD *)(a2 + 3224) = 0;
  v729 = *(_QWORD *)(a1 + 3224);
  *(_QWORD *)(a1 + 3224) = v728;
  if (v729)
    (*(void (**)(uint64_t))(*(_QWORD *)v729 + 8))(v729);
  v730 = *(_QWORD *)(a2 + 1296);
  *(_QWORD *)(a2 + 1296) = 0;
  v731 = *(_QWORD *)(a1 + 1296);
  *(_QWORD *)(a1 + 1296) = v730;
  if (v731)
    (*(void (**)(uint64_t))(*(_QWORD *)v731 + 8))(v731);
  v732 = *(_QWORD *)(a2 + 3232);
  *(_QWORD *)(a2 + 3232) = 0;
  v733 = *(_QWORD *)(a1 + 3232);
  *(_QWORD *)(a1 + 3232) = v732;
  if (v733)
    (*(void (**)(uint64_t))(*(_QWORD *)v733 + 8))(v733);
  v734 = *(_QWORD *)(a2 + 3240);
  *(_QWORD *)(a2 + 3240) = 0;
  v735 = *(_QWORD *)(a1 + 3240);
  *(_QWORD *)(a1 + 3240) = v734;
  if (v735)
    (*(void (**)(uint64_t))(*(_QWORD *)v735 + 8))(v735);
  v736 = *(_QWORD *)(a2 + 2728);
  *(_QWORD *)(a2 + 2728) = 0;
  v737 = *(_QWORD *)(a1 + 2728);
  *(_QWORD *)(a1 + 2728) = v736;
  if (v737)
    (*(void (**)(uint64_t))(*(_QWORD *)v737 + 8))(v737);
  v738 = *(_QWORD *)(a2 + 2736);
  *(_QWORD *)(a2 + 2736) = 0;
  v739 = *(_QWORD *)(a1 + 2736);
  *(_QWORD *)(a1 + 2736) = v738;
  if (v739)
    (*(void (**)(uint64_t))(*(_QWORD *)v739 + 8))(v739);
  v740 = *(_QWORD *)(a2 + 2760);
  *(_QWORD *)(a2 + 2760) = 0;
  v741 = *(_QWORD *)(a1 + 2760);
  *(_QWORD *)(a1 + 2760) = v740;
  if (v741)
    (*(void (**)(uint64_t))(*(_QWORD *)v741 + 8))(v741);
  v742 = *(_QWORD *)(a2 + 2800);
  *(_QWORD *)(a2 + 2800) = 0;
  v743 = *(_QWORD *)(a1 + 2800);
  *(_QWORD *)(a1 + 2800) = v742;
  if (v743)
    (*(void (**)(uint64_t))(*(_QWORD *)v743 + 8))(v743);
  v744 = *(_QWORD *)(a2 + 2784);
  *(_QWORD *)(a2 + 2784) = 0;
  v745 = *(_QWORD *)(a1 + 2784);
  *(_QWORD *)(a1 + 2784) = v744;
  if (v745)
    (*(void (**)(uint64_t))(*(_QWORD *)v745 + 8))(v745);
  v746 = *(_QWORD *)(a2 + 1712);
  *(_QWORD *)(a2 + 1712) = 0;
  v747 = *(_QWORD *)(a1 + 1712);
  *(_QWORD *)(a1 + 1712) = v746;
  if (v747)
    (*(void (**)(uint64_t))(*(_QWORD *)v747 + 8))(v747);
  v748 = *(_QWORD *)(a2 + 1624);
  *(_QWORD *)(a2 + 1624) = 0;
  v749 = *(_QWORD *)(a1 + 1624);
  *(_QWORD *)(a1 + 1624) = v748;
  if (v749)
    (*(void (**)(uint64_t))(*(_QWORD *)v749 + 8))(v749);
  v750 = *(_QWORD *)(a2 + 2776);
  *(_QWORD *)(a2 + 2776) = 0;
  v751 = *(_QWORD *)(a1 + 2776);
  *(_QWORD *)(a1 + 2776) = v750;
  if (v751)
    (*(void (**)(uint64_t))(*(_QWORD *)v751 + 8))(v751);
  v752 = *(_QWORD *)(a2 + 1448);
  *(_QWORD *)(a2 + 1448) = 0;
  v753 = *(_QWORD *)(a1 + 1448);
  *(_QWORD *)(a1 + 1448) = v752;
  if (v753)
    (*(void (**)(uint64_t))(*(_QWORD *)v753 + 8))(v753);
  v754 = *(_QWORD *)(a2 + 1576);
  *(_QWORD *)(a2 + 1576) = 0;
  v755 = *(_QWORD *)(a1 + 1576);
  *(_QWORD *)(a1 + 1576) = v754;
  if (v755)
    (*(void (**)(uint64_t))(*(_QWORD *)v755 + 8))(v755);
  v756 = *(_QWORD *)(a2 + 1640);
  *(_QWORD *)(a2 + 1640) = 0;
  v757 = *(_QWORD *)(a1 + 1640);
  *(_QWORD *)(a1 + 1640) = v756;
  if (v757)
    (*(void (**)(uint64_t))(*(_QWORD *)v757 + 8))(v757);
  v758 = *(_QWORD *)(a2 + 1280);
  *(_QWORD *)(a2 + 1280) = 0;
  v759 = *(_QWORD *)(a1 + 1280);
  *(_QWORD *)(a1 + 1280) = v758;
  if (v759)
    (*(void (**)(uint64_t))(*(_QWORD *)v759 + 8))(v759);
  v760 = *(_QWORD *)(a2 + 592);
  *(_QWORD *)(a2 + 592) = 0;
  v761 = *(_QWORD *)(a1 + 592);
  *(_QWORD *)(a1 + 592) = v760;
  if (v761)
    (*(void (**)(uint64_t))(*(_QWORD *)v761 + 8))(v761);
  v762 = *(_QWORD *)(a2 + 2336);
  *(_QWORD *)(a2 + 2336) = 0;
  v763 = *(_QWORD *)(a1 + 2336);
  *(_QWORD *)(a1 + 2336) = v762;
  if (v763)
    (*(void (**)(uint64_t))(*(_QWORD *)v763 + 8))(v763);
  v764 = *(_QWORD *)(a2 + 688);
  *(_QWORD *)(a2 + 688) = 0;
  v765 = *(_QWORD *)(a1 + 688);
  *(_QWORD *)(a1 + 688) = v764;
  if (v765)
    (*(void (**)(uint64_t))(*(_QWORD *)v765 + 8))(v765);
  v766 = *(_QWORD *)(a2 + 856);
  *(_QWORD *)(a2 + 856) = 0;
  v767 = *(_QWORD *)(a1 + 856);
  *(_QWORD *)(a1 + 856) = v766;
  if (v767)
    (*(void (**)(uint64_t))(*(_QWORD *)v767 + 8))(v767);
  v768 = *(_QWORD *)(a2 + 3200);
  *(_QWORD *)(a2 + 3200) = 0;
  v769 = *(_QWORD *)(a1 + 3200);
  *(_QWORD *)(a1 + 3200) = v768;
  if (v769)
    (*(void (**)(uint64_t))(*(_QWORD *)v769 + 8))(v769);
  v770 = *(_QWORD *)(a2 + 2608);
  *(_QWORD *)(a2 + 2608) = 0;
  v771 = *(_QWORD *)(a1 + 2608);
  *(_QWORD *)(a1 + 2608) = v770;
  if (v771)
    (*(void (**)(uint64_t))(*(_QWORD *)v771 + 8))(v771);
  v772 = *(_QWORD *)(a2 + 1728);
  *(_QWORD *)(a2 + 1728) = 0;
  v773 = *(_QWORD *)(a1 + 1728);
  *(_QWORD *)(a1 + 1728) = v772;
  if (v773)
    (*(void (**)(uint64_t))(*(_QWORD *)v773 + 8))(v773);
  v774 = *(_QWORD *)(a2 + 3344);
  *(_QWORD *)(a2 + 3344) = 0;
  v775 = *(_QWORD *)(a1 + 3344);
  *(_QWORD *)(a1 + 3344) = v774;
  if (v775)
    (*(void (**)(uint64_t))(*(_QWORD *)v775 + 8))(v775);
  v776 = *(_QWORD *)(a2 + 1568);
  *(_QWORD *)(a2 + 1568) = 0;
  v777 = *(_QWORD *)(a1 + 1568);
  *(_QWORD *)(a1 + 1568) = v776;
  if (v777)
    (*(void (**)(uint64_t))(*(_QWORD *)v777 + 8))(v777);
  v778 = *(_QWORD *)(a2 + 2792);
  *(_QWORD *)(a2 + 2792) = 0;
  v779 = *(_QWORD *)(a1 + 2792);
  *(_QWORD *)(a1 + 2792) = v778;
  if (v779)
    (*(void (**)(uint64_t))(*(_QWORD *)v779 + 8))(v779);
  v780 = *(_QWORD *)(a2 + 3096);
  *(_QWORD *)(a2 + 3096) = 0;
  v781 = *(_QWORD *)(a1 + 3096);
  *(_QWORD *)(a1 + 3096) = v780;
  if (v781)
    (*(void (**)(uint64_t))(*(_QWORD *)v781 + 8))(v781);
  v782 = *(_QWORD *)(a2 + 2312);
  *(_QWORD *)(a2 + 2312) = 0;
  v783 = *(_QWORD *)(a1 + 2312);
  *(_QWORD *)(a1 + 2312) = v782;
  if (v783)
    (*(void (**)(uint64_t))(*(_QWORD *)v783 + 8))(v783);
  v784 = *(_QWORD *)(a2 + 1896);
  *(_QWORD *)(a2 + 1896) = 0;
  v785 = *(_QWORD *)(a1 + 1896);
  *(_QWORD *)(a1 + 1896) = v784;
  if (v785)
    (*(void (**)(uint64_t))(*(_QWORD *)v785 + 8))(v785);
  v786 = *(_QWORD *)(a2 + 2264);
  *(_QWORD *)(a2 + 2264) = 0;
  v787 = *(_QWORD *)(a1 + 2264);
  *(_QWORD *)(a1 + 2264) = v786;
  if (v787)
    (*(void (**)(uint64_t))(*(_QWORD *)v787 + 8))(v787);
  v788 = *(_QWORD *)(a2 + 2272);
  *(_QWORD *)(a2 + 2272) = 0;
  v789 = *(_QWORD *)(a1 + 2272);
  *(_QWORD *)(a1 + 2272) = v788;
  if (v789)
    (*(void (**)(uint64_t))(*(_QWORD *)v789 + 8))(v789);
  v790 = *(_QWORD *)(a2 + 2280);
  *(_QWORD *)(a2 + 2280) = 0;
  v791 = *(_QWORD *)(a1 + 2280);
  *(_QWORD *)(a1 + 2280) = v790;
  if (v791)
    (*(void (**)(uint64_t))(*(_QWORD *)v791 + 8))(v791);
  v792 = *(_QWORD *)(a2 + 2160);
  *(_QWORD *)(a2 + 2160) = 0;
  v793 = *(_QWORD *)(a1 + 2160);
  *(_QWORD *)(a1 + 2160) = v792;
  if (v793)
    (*(void (**)(uint64_t))(*(_QWORD *)v793 + 8))(v793);
  v794 = *(_QWORD *)(a2 + 2296);
  *(_QWORD *)(a2 + 2296) = 0;
  v795 = *(_QWORD *)(a1 + 2296);
  *(_QWORD *)(a1 + 2296) = v794;
  if (v795)
    (*(void (**)(uint64_t))(*(_QWORD *)v795 + 8))(v795);
  v796 = *(_QWORD *)(a2 + 1816);
  *(_QWORD *)(a2 + 1816) = 0;
  v797 = *(_QWORD *)(a1 + 1816);
  *(_QWORD *)(a1 + 1816) = v796;
  if (v797)
    (*(void (**)(uint64_t))(*(_QWORD *)v797 + 8))(v797);
  v798 = *(_QWORD *)(a2 + 3208);
  *(_QWORD *)(a2 + 3208) = 0;
  v799 = *(_QWORD *)(a1 + 3208);
  *(_QWORD *)(a1 + 3208) = v798;
  if (v799)
    (*(void (**)(uint64_t))(*(_QWORD *)v799 + 8))(v799);
  v800 = *(_QWORD *)(a2 + 2232);
  *(_QWORD *)(a2 + 2232) = 0;
  v801 = *(_QWORD *)(a1 + 2232);
  *(_QWORD *)(a1 + 2232) = v800;
  if (v801)
    (*(void (**)(uint64_t))(*(_QWORD *)v801 + 8))(v801);
  v802 = *(_QWORD *)(a2 + 2240);
  *(_QWORD *)(a2 + 2240) = 0;
  v803 = *(_QWORD *)(a1 + 2240);
  *(_QWORD *)(a1 + 2240) = v802;
  if (v803)
    (*(void (**)(uint64_t))(*(_QWORD *)v803 + 8))(v803);
  v804 = *(_QWORD *)(a2 + 3192);
  *(_QWORD *)(a2 + 3192) = 0;
  v805 = *(_QWORD *)(a1 + 3192);
  *(_QWORD *)(a1 + 3192) = v804;
  if (v805)
    (*(void (**)(uint64_t))(*(_QWORD *)v805 + 8))(v805);
  v806 = *(_QWORD *)(a2 + 3104);
  *(_QWORD *)(a2 + 3104) = 0;
  v807 = *(_QWORD *)(a1 + 3104);
  *(_QWORD *)(a1 + 3104) = v806;
  if (v807)
    (*(void (**)(uint64_t))(*(_QWORD *)v807 + 8))(v807);
  v808 = *(_QWORD *)(a2 + 824);
  *(_QWORD *)(a2 + 824) = 0;
  v809 = *(_QWORD *)(a1 + 824);
  *(_QWORD *)(a1 + 824) = v808;
  if (v809)
    (*(void (**)(uint64_t))(*(_QWORD *)v809 + 8))(v809);
  v810 = *(_QWORD *)(a2 + 1744);
  *(_QWORD *)(a2 + 1744) = 0;
  v811 = *(_QWORD *)(a1 + 1744);
  *(_QWORD *)(a1 + 1744) = v810;
  if (v811)
    (*(void (**)(uint64_t))(*(_QWORD *)v811 + 8))(v811);
  v812 = *(_QWORD *)(a2 + 2856);
  *(_QWORD *)(a2 + 2856) = 0;
  v813 = *(_QWORD *)(a1 + 2856);
  *(_QWORD *)(a1 + 2856) = v812;
  if (v813)
    (*(void (**)(uint64_t))(*(_QWORD *)v813 + 8))(v813);
  v814 = *(_QWORD *)(a2 + 2224);
  *(_QWORD *)(a2 + 2224) = 0;
  v815 = *(_QWORD *)(a1 + 2224);
  *(_QWORD *)(a1 + 2224) = v814;
  if (v815)
    (*(void (**)(uint64_t))(*(_QWORD *)v815 + 8))(v815);
  v816 = *(_QWORD *)(a2 + 2176);
  *(_QWORD *)(a2 + 2176) = 0;
  v817 = *(_QWORD *)(a1 + 2176);
  *(_QWORD *)(a1 + 2176) = v816;
  if (v817)
    (*(void (**)(uint64_t))(*(_QWORD *)v817 + 8))(v817);
  v818 = *(_QWORD *)(a2 + 2168);
  *(_QWORD *)(a2 + 2168) = 0;
  v819 = *(_QWORD *)(a1 + 2168);
  *(_QWORD *)(a1 + 2168) = v818;
  if (v819)
    (*(void (**)(uint64_t))(*(_QWORD *)v819 + 8))(v819);
  v820 = *(_QWORD *)(a2 + 2200);
  *(_QWORD *)(a2 + 2200) = 0;
  v821 = *(_QWORD *)(a1 + 2200);
  *(_QWORD *)(a1 + 2200) = v820;
  if (v821)
    (*(void (**)(uint64_t))(*(_QWORD *)v821 + 8))(v821);
  v822 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = 0;
  v823 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v822;
  if (v823)
    (*(void (**)(uint64_t))(*(_QWORD *)v823 + 8))(v823);
  v824 = *(_QWORD *)(a2 + 2288);
  *(_QWORD *)(a2 + 2288) = 0;
  v825 = *(_QWORD *)(a1 + 2288);
  *(_QWORD *)(a1 + 2288) = v824;
  if (v825)
    (*(void (**)(uint64_t))(*(_QWORD *)v825 + 8))(v825);
  v826 = *(_QWORD *)(a2 + 2472);
  *(_QWORD *)(a2 + 2472) = 0;
  v827 = *(_QWORD *)(a1 + 2472);
  *(_QWORD *)(a1 + 2472) = v826;
  if (v827)
    (*(void (**)(uint64_t))(*(_QWORD *)v827 + 8))(v827);
  v828 = *(_QWORD *)(a2 + 2496);
  *(_QWORD *)(a2 + 2496) = 0;
  v829 = *(_QWORD *)(a1 + 2496);
  *(_QWORD *)(a1 + 2496) = v828;
  if (v829)
    (*(void (**)(uint64_t))(*(_QWORD *)v829 + 8))(v829);
  v830 = *(_QWORD *)(a2 + 1688);
  *(_QWORD *)(a2 + 1688) = 0;
  v831 = *(_QWORD *)(a1 + 1688);
  *(_QWORD *)(a1 + 1688) = v830;
  if (v831)
    (*(void (**)(uint64_t))(*(_QWORD *)v831 + 8))(v831);
  v832 = *(_QWORD *)(a2 + 2504);
  *(_QWORD *)(a2 + 2504) = 0;
  v833 = *(_QWORD *)(a1 + 2504);
  *(_QWORD *)(a1 + 2504) = v832;
  if (v833)
    (*(void (**)(uint64_t))(*(_QWORD *)v833 + 8))(v833);
  v834 = *(_QWORD *)(a2 + 2480);
  *(_QWORD *)(a2 + 2480) = 0;
  v835 = *(_QWORD *)(a1 + 2480);
  *(_QWORD *)(a1 + 2480) = v834;
  if (v835)
    (*(void (**)(uint64_t))(*(_QWORD *)v835 + 8))(v835);
  v836 = *(_QWORD *)(a2 + 2216);
  *(_QWORD *)(a2 + 2216) = 0;
  v837 = *(_QWORD *)(a1 + 2216);
  *(_QWORD *)(a1 + 2216) = v836;
  if (v837)
    (*(void (**)(uint64_t))(*(_QWORD *)v837 + 8))(v837);
  v838 = *(_QWORD *)(a2 + 576);
  *(_QWORD *)(a2 + 576) = 0;
  v839 = *(_QWORD *)(a1 + 576);
  *(_QWORD *)(a1 + 576) = v838;
  if (v839)
    (*(void (**)(uint64_t))(*(_QWORD *)v839 + 8))(v839);
  v840 = *(_QWORD *)(a2 + 2208);
  *(_QWORD *)(a2 + 2208) = 0;
  v841 = *(_QWORD *)(a1 + 2208);
  *(_QWORD *)(a1 + 2208) = v840;
  if (v841)
    (*(void (**)(uint64_t))(*(_QWORD *)v841 + 8))(v841);
  v842 = *(_QWORD *)(a2 + 2344);
  *(_QWORD *)(a2 + 2344) = 0;
  v843 = *(_QWORD *)(a1 + 2344);
  *(_QWORD *)(a1 + 2344) = v842;
  if (v843)
    (*(void (**)(uint64_t))(*(_QWORD *)v843 + 8))(v843);
  v844 = *(_QWORD *)(a2 + 1928);
  *(_QWORD *)(a2 + 1928) = 0;
  v845 = *(_QWORD *)(a1 + 1928);
  *(_QWORD *)(a1 + 1928) = v844;
  if (v845)
    (*(void (**)(uint64_t))(*(_QWORD *)v845 + 8))(v845);
  v846 = *(_QWORD *)(a2 + 1504);
  *(_QWORD *)(a2 + 1504) = 0;
  v847 = *(_QWORD *)(a1 + 1504);
  *(_QWORD *)(a1 + 1504) = v846;
  if (v847)
    (*(void (**)(uint64_t))(*(_QWORD *)v847 + 8))(v847);
  v848 = *(_QWORD *)(a2 + 1512);
  *(_QWORD *)(a2 + 1512) = 0;
  v849 = *(_QWORD *)(a1 + 1512);
  *(_QWORD *)(a1 + 1512) = v848;
  if (v849)
    (*(void (**)(uint64_t))(*(_QWORD *)v849 + 8))(v849);
  v850 = *(_QWORD *)(a2 + 2488);
  *(_QWORD *)(a2 + 2488) = 0;
  v851 = *(_QWORD *)(a1 + 2488);
  *(_QWORD *)(a1 + 2488) = v850;
  if (v851)
    (*(void (**)(uint64_t))(*(_QWORD *)v851 + 8))(v851);
  v852 = *(_QWORD *)(a2 + 2192);
  *(_QWORD *)(a2 + 2192) = 0;
  v853 = *(_QWORD *)(a1 + 2192);
  *(_QWORD *)(a1 + 2192) = v852;
  if (v853)
    (*(void (**)(uint64_t))(*(_QWORD *)v853 + 8))(v853);
  v854 = *(_QWORD *)(a2 + 2184);
  *(_QWORD *)(a2 + 2184) = 0;
  v855 = *(_QWORD *)(a1 + 2184);
  *(_QWORD *)(a1 + 2184) = v854;
  if (v855)
    (*(void (**)(uint64_t))(*(_QWORD *)v855 + 8))(v855);
  v856 = *(_QWORD *)(a2 + 1616);
  *(_QWORD *)(a2 + 1616) = 0;
  v857 = *(_QWORD *)(a1 + 1616);
  *(_QWORD *)(a1 + 1616) = v856;
  if (v857)
    (*(void (**)(uint64_t))(*(_QWORD *)v857 + 8))(v857);
  v858 = *(_QWORD *)(a2 + 1608);
  *(_QWORD *)(a2 + 1608) = 0;
  v859 = *(_QWORD *)(a1 + 1608);
  *(_QWORD *)(a1 + 1608) = v858;
  if (v859)
    (*(void (**)(uint64_t))(*(_QWORD *)v859 + 8))(v859);
  v860 = *(_QWORD *)(a2 + 2512);
  *(_QWORD *)(a2 + 2512) = 0;
  v861 = *(_QWORD *)(a1 + 2512);
  *(_QWORD *)(a1 + 2512) = v860;
  if (v861)
    (*(void (**)(uint64_t))(*(_QWORD *)v861 + 8))(v861);
  v862 = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a2 + 312) = 0;
  v863 = *(_QWORD *)(a1 + 312);
  *(_QWORD *)(a1 + 312) = v862;
  if (v863)
    (*(void (**)(uint64_t))(*(_QWORD *)v863 + 8))(v863);
  v864 = *(_QWORD *)(a2 + 904);
  *(_QWORD *)(a2 + 904) = 0;
  v865 = *(_QWORD *)(a1 + 904);
  *(_QWORD *)(a1 + 904) = v864;
  if (v865)
    (*(void (**)(uint64_t))(*(_QWORD *)v865 + 8))(v865);
  v866 = *(_QWORD *)(a2 + 2360);
  *(_QWORD *)(a2 + 2360) = 0;
  v867 = *(_QWORD *)(a1 + 2360);
  *(_QWORD *)(a1 + 2360) = v866;
  if (v867)
    (*(void (**)(uint64_t))(*(_QWORD *)v867 + 8))(v867);
  v868 = *(_QWORD *)(a2 + 2384);
  *(_QWORD *)(a2 + 2384) = 0;
  v869 = *(_QWORD *)(a1 + 2384);
  *(_QWORD *)(a1 + 2384) = v868;
  if (v869)
    (*(void (**)(uint64_t))(*(_QWORD *)v869 + 8))(v869);
  v870 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a2 + 256) = 0;
  v871 = *(_QWORD *)(a1 + 256);
  *(_QWORD *)(a1 + 256) = v870;
  if (v871)
    (*(void (**)(uint64_t))(*(_QWORD *)v871 + 8))(v871);
  v872 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a2 + 248) = 0;
  v873 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 248) = v872;
  if (v873)
    (*(void (**)(uint64_t))(*(_QWORD *)v873 + 8))(v873);
  v874 = *(_QWORD *)(a2 + 2816);
  *(_QWORD *)(a2 + 2816) = 0;
  v875 = *(_QWORD *)(a1 + 2816);
  *(_QWORD *)(a1 + 2816) = v874;
  if (v875)
    (*(void (**)(uint64_t))(*(_QWORD *)v875 + 8))(v875);
  v876 = *(_QWORD *)(a2 + 2808);
  *(_QWORD *)(a2 + 2808) = 0;
  v877 = *(_QWORD *)(a1 + 2808);
  *(_QWORD *)(a1 + 2808) = v876;
  if (v877)
    (*(void (**)(uint64_t))(*(_QWORD *)v877 + 8))(v877);
  v878 = *(_QWORD *)(a2 + 2624);
  *(_QWORD *)(a2 + 2624) = 0;
  v879 = *(_QWORD *)(a1 + 2624);
  *(_QWORD *)(a1 + 2624) = v878;
  if (v879)
    (*(void (**)(uint64_t))(*(_QWORD *)v879 + 8))(v879);
  v880 = *(_QWORD *)(a2 + 2632);
  *(_QWORD *)(a2 + 2632) = 0;
  v881 = *(_QWORD *)(a1 + 2632);
  *(_QWORD *)(a1 + 2632) = v880;
  if (v881)
    (*(void (**)(uint64_t))(*(_QWORD *)v881 + 8))(v881);
  v882 = *(_QWORD *)(a2 + 2648);
  *(_QWORD *)(a2 + 2648) = 0;
  v883 = *(_QWORD *)(a1 + 2648);
  *(_QWORD *)(a1 + 2648) = v882;
  if (v883)
    (*(void (**)(uint64_t))(*(_QWORD *)v883 + 8))(v883);
  v884 = *(_QWORD *)(a2 + 1288);
  *(_QWORD *)(a2 + 1288) = 0;
  v885 = *(_QWORD *)(a1 + 1288);
  *(_QWORD *)(a1 + 1288) = v884;
  if (v885)
    (*(void (**)(uint64_t))(*(_QWORD *)v885 + 8))(v885);
  v886 = *(_QWORD *)(a2 + 2640);
  *(_QWORD *)(a2 + 2640) = 0;
  v887 = *(_QWORD *)(a1 + 2640);
  *(_QWORD *)(a1 + 2640) = v886;
  if (v887)
    (*(void (**)(uint64_t))(*(_QWORD *)v887 + 8))(v887);
  v888 = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a2 + 336) = 0;
  v889 = *(_QWORD *)(a1 + 336);
  *(_QWORD *)(a1 + 336) = v888;
  if (v889)
    (*(void (**)(uint64_t))(*(_QWORD *)v889 + 8))(v889);
  v890 = *(_QWORD *)(a2 + 1480);
  *(_QWORD *)(a2 + 1480) = 0;
  v891 = *(_QWORD *)(a1 + 1480);
  *(_QWORD *)(a1 + 1480) = v890;
  if (v891)
    (*(void (**)(uint64_t))(*(_QWORD *)v891 + 8))(v891);
  v892 = *(_QWORD *)(a2 + 1488);
  *(_QWORD *)(a2 + 1488) = 0;
  v893 = *(_QWORD *)(a1 + 1488);
  *(_QWORD *)(a1 + 1488) = v892;
  if (v893)
    (*(void (**)(uint64_t))(*(_QWORD *)v893 + 8))(v893);
  v894 = *(_QWORD *)(a2 + 1496);
  *(_QWORD *)(a2 + 1496) = 0;
  v895 = *(_QWORD *)(a1 + 1496);
  *(_QWORD *)(a1 + 1496) = v894;
  if (v895)
    (*(void (**)(uint64_t))(*(_QWORD *)v895 + 8))(v895);
  v896 = *(_QWORD *)(a2 + 2824);
  *(_QWORD *)(a2 + 2824) = 0;
  v897 = *(_QWORD *)(a1 + 2824);
  *(_QWORD *)(a1 + 2824) = v896;
  if (v897)
    (*(void (**)(uint64_t))(*(_QWORD *)v897 + 8))(v897);
  v898 = *(_QWORD *)(a2 + 2832);
  *(_QWORD *)(a2 + 2832) = 0;
  v899 = *(_QWORD *)(a1 + 2832);
  *(_QWORD *)(a1 + 2832) = v898;
  if (v899)
    (*(void (**)(uint64_t))(*(_QWORD *)v899 + 8))(v899);
  v900 = *(_QWORD *)(a2 + 2944);
  *(_QWORD *)(a2 + 2944) = 0;
  v901 = *(_QWORD *)(a1 + 2944);
  *(_QWORD *)(a1 + 2944) = v900;
  if (v901)
    (*(void (**)(uint64_t))(*(_QWORD *)v901 + 8))(v901);
  v902 = *(_QWORD *)(a2 + 2952);
  *(_QWORD *)(a2 + 2952) = 0;
  v903 = *(_QWORD *)(a1 + 2952);
  *(_QWORD *)(a1 + 2952) = v902;
  if (v903)
    (*(void (**)(uint64_t))(*(_QWORD *)v903 + 8))(v903);
  v904 = *(_QWORD *)(a2 + 1432);
  *(_QWORD *)(a2 + 1432) = 0;
  v905 = *(_QWORD *)(a1 + 1432);
  *(_QWORD *)(a1 + 1432) = v904;
  if (v905)
    (*(void (**)(uint64_t))(*(_QWORD *)v905 + 8))(v905);
  return a1;
}

CMMsl *CMMsl::Item::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::Item *v3;
  _BYTE v5[3624];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::Item::Item((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::Item *)v5, v3);
    CMMsl::Item::~Item((CMMsl::Item *)v5);
  }
  return a1;
}

uint64_t CMMsl::Item::formatText(CMMsl::Item *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "aPSleep");
  v6 = *((_QWORD *)this + 2);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "aPWake");
  v7 = *((_QWORD *)this + 3);
  if (v7)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "accel");
  v8 = *((_QWORD *)this + 4);
  if (v8)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "accel800");
  v9 = *((_QWORD *)this + 5);
  if (v9)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, a2, "accelBatch");
  v10 = *((_QWORD *)this + 6);
  if (v10)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v10 + 32))(v10, a2, "accelGesture");
  v11 = *((_QWORD *)this + 7);
  if (v11)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v11 + 32))(v11, a2, "accelGps");
  v12 = *((_QWORD *)this + 8);
  if (v12)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v12 + 32))(v12, a2, "accelOscarEmu");
  v13 = *((_QWORD *)this + 9);
  if (v13)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v13 + 32))(v13, a2, "accelTNBFrame");
  v14 = *((_QWORD *)this + 10);
  if (v14)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v14 + 32))(v14, a2, "accelerometerPace");
  v15 = *((_QWORD *)this + 11);
  if (v15)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v15 + 32))(v15, a2, "accessoryAccel");
  v16 = *((_QWORD *)this + 12);
  if (v16)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v16 + 32))(v16, a2, "accessoryAccelConfig");
  v17 = *((_QWORD *)this + 13);
  if (v17)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v17 + 32))(v17, a2, "accessoryActivityAsleepConfidenceEpoch");
  v18 = *((_QWORD *)this + 14);
  if (v18)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v18 + 32))(v18, a2, "accessoryActivityStateUpdate");
  v19 = *((_QWORD *)this + 15);
  if (v19)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v19 + 32))(v19, a2, "accessoryConfig");
  v20 = *((_QWORD *)this + 16);
  if (v20)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v20 + 32))(v20, a2, "accessoryDeviceMotion");
  v21 = *((_QWORD *)this + 17);
  if (v21)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v21 + 32))(v21, a2, "accessoryDeviceMotionConfig");
  v22 = *((_QWORD *)this + 18);
  if (v22)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v22 + 32))(v22, a2, "accessoryGyro");
  v23 = *((_QWORD *)this + 19);
  if (v23)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v23 + 32))(v23, a2, "accessoryGyroCachedBias");
  v24 = *((_QWORD *)this + 20);
  if (v24)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v24 + 32))(v24, a2, "accessoryGyroConfig");
  v25 = *((_QWORD *)this + 21);
  if (v25)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v25 + 32))(v25, a2, "accessoryGyroGYTT");
  v26 = *((_QWORD *)this + 22);
  if (v26)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v26 + 32))(v26, a2, "accessoryHeartRate");
  v27 = *((_QWORD *)this + 23);
  if (v27)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v27 + 32))(v27, a2, "accessoryInEarStatus");
  v28 = *((_QWORD *)this + 24);
  if (v28)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v28 + 32))(v28, a2, "accessoryMagnetometer");
  v29 = *((_QWORD *)this + 25);
  if (v29)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v29 + 32))(v29, a2, "accessoryMagnetometerConfig");
  v30 = *((_QWORD *)this + 26);
  if (v30)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v30 + 32))(v30, a2, "accessoryPPG");
  v31 = *((_QWORD *)this + 27);
  if (v31)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v31 + 32))(v31, a2, "accessoryProx");
  v32 = *((_QWORD *)this + 28);
  if (v32)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v32 + 32))(v32, a2, "accessoryProxSensorDrop");
  v33 = *((_QWORD *)this + 29);
  if (v33)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v33 + 32))(v33, a2, "accessoryProxTempComp");
  v34 = *((_QWORD *)this + 30);
  if (v34)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v34 + 32))(v34, a2, "accessoryProximityConfig");
  v35 = *((_QWORD *)this + 31);
  if (v35)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v35 + 32))(v35, a2, "accessorySleepStateConfidenceEpoch");
  v36 = *((_QWORD *)this + 32);
  if (v36)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v36 + 32))(v36, a2, "accessorySleepStateUpdate");
  v37 = *((_QWORD *)this + 33);
  if (v37)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v37 + 32))(v37, a2, "accessoryStepDetectorDebug");
  v38 = *((_QWORD *)this + 34);
  if (v38)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v38 + 32))(v38, a2, "accessoryWake");
  v39 = *((_QWORD *)this + 35);
  if (v39)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v39 + 32))(v39, a2, "accessoryWakeDebug");
  v40 = *((_QWORD *)this + 36);
  if (v40)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v40 + 32))(v40, a2, "airpodEvent");
  v41 = *((_QWORD *)this + 37);
  if (v41)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v41 + 32))(v41, a2, "alsData");
  v42 = *((_QWORD *)this + 38);
  if (v42)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v42 + 32))(v42, a2, "alsPhone");
  v43 = *((_QWORD *)this + 39);
  if (v43)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v43 + 32))(v43, a2, "altimeter");
  v44 = *((_QWORD *)this + 40);
  if (v44)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v44 + 32))(v44, a2, "altimeterKF");
  v45 = *((_QWORD *)this + 41);
  if (v45)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v45 + 32))(v45, a2, "anchorCorrection");
  v46 = *((_QWORD *)this + 42);
  if (v46)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v46 + 32))(v46, a2, "anchorMotionCorrespondence");
  v47 = *((_QWORD *)this + 43);
  if (v47)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v47 + 32))(v47, a2, "appleCV3DSLAMState");
  v48 = *((_QWORD *)this + 44);
  if (v48)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v48 + 32))(v48, a2, "arSessionState");
  v49 = *((_QWORD *)this + 45);
  if (v49)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v49 + 32))(v49, a2, "arkitWorldPose");
  v50 = *((_QWORD *)this + 46);
  if (v50)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v50 + 32))(v50, a2, "audioAccessoryDeviceMotion");
  v51 = *((_QWORD *)this + 47);
  if (v51)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v51 + 32))(v51, a2, "auxiliaryDeviceMotion");
  v52 = *((_QWORD *)this + 48);
  if (v52)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v52 + 32))(v52, a2, "averagedALSData");
  v53 = *((_QWORD *)this + 49);
  if (v53)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v53 + 32))(v53, a2, "bTConnection");
  v54 = *((_QWORD *)this + 50);
  if (v54)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v54 + 32))(v54, a2, "backlightState");
  v55 = *((_QWORD *)this + 51);
  if (v55)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v55 + 32))(v55, a2, "basebandCompassCoex");
  v56 = *((_QWORD *)this + 52);
  if (v56)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v56 + 32))(v56, a2, "basebandCompassCoexConstraints");
  v57 = *((_QWORD *)this + 53);
  if (v57)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v57 + 32))(v57, a2, "basebandSpeed");
  v58 = *((_QWORD *)this + 54);
  if (v58)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v58 + 32))(v58, a2, "baselineResetCheck");
  v59 = *((_QWORD *)this + 55);
  if (v59)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v59 + 32))(v59, a2, "batchedLocationFromOdometer");
  v60 = *((_QWORD *)this + 56);
  if (v60)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v60 + 32))(v60, a2, "batterySaverModeStatus");
  v61 = *((_QWORD *)this + 57);
  if (v61)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v61 + 32))(v61, a2, "batteryStatus");
  v62 = *((_QWORD *)this + 58);
  if (v62)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v62 + 32))(v62, a2, "bioMotionAnchorPose");
  v63 = *((_QWORD *)this + 59);
  if (v63)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v63 + 32))(v63, a2, "bioMotionClassification");
  v64 = *((_QWORD *)this + 60);
  if (v64)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v64 + 32))(v64, a2, "bioMotionLinkLengthFitParameters");
  v65 = *((_QWORD *)this + 61);
  if (v65)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v65 + 32))(v65, a2, "bioMotionOnlineLinkLengthUpdate");
  v66 = *((_QWORD *)this + 62);
  if (v66)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v66 + 32))(v66, a2, "bioMotionPose");
  v67 = *((_QWORD *)this + 63);
  if (v67)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v67 + 32))(v67, a2, "bioMotionPredictedPose");
  v68 = *((_QWORD *)this + 64);
  if (v68)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v68 + 32))(v68, a2, "bioMotionPropagatedAnchor");
  v69 = *((_QWORD *)this + 65);
  if (v69)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v69 + 32))(v69, a2, "bleedToZeroCorrection");
  v70 = *((_QWORD *)this + 66);
  if (v70)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v70 + 32))(v70, a2, "bodyMetrics");
  v71 = *((_QWORD *)this + 67);
  if (v71)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v71 + 32))(v71, a2, "braveHeartAccel");
  v72 = *((_QWORD *)this + 68);
  if (v72)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v72 + 32))(v72, a2, "braveHeartDeviceMotion");
  v73 = *((_QWORD *)this + 69);
  if (v73)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v73 + 32))(v73, a2, "braveHeartNatalieData");
  v74 = *((_QWORD *)this + 70);
  if (v74)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v74 + 32))(v74, a2, "braveHeartVO2MaxInput");
  v75 = *((_QWORD *)this + 71);
  if (v75)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v75 + 32))(v75, a2, "braveHeartWorkoutEvent");
  v76 = *((_QWORD *)this + 72);
  if (v76)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v76 + 32))(v76, a2, "bumpToWakeState");
  v77 = *((_QWORD *)this + 73);
  if (v77)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v77 + 32))(v77, a2, "cV3DPredictedPose");
  v78 = *((_QWORD *)this + 74);
  if (v78)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v78 + 32))(v78, a2, "calorimetryMETsConsumed");
  v79 = *((_QWORD *)this + 75);
  if (v79)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v79 + 32))(v79, a2, "calorimetryPauseEvent");
  v80 = *((_QWORD *)this + 76);
  if (v80)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v80 + 32))(v80, a2, "catherineHealthKitData");
  if ((*((_BYTE *)this + 3616) & 1) != 0)
    PB::TextFormatter::format(a2, "cftime", *((double *)this + 77));
  v81 = *((_QWORD *)this + 78);
  if (v81)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v81 + 32))(v81, a2, "clefCalibration");
  v82 = *((_QWORD *)this + 79);
  if (v82)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v82 + 32))(v82, a2, "coarseElevationChange");
  v83 = *((_QWORD *)this + 80);
  if (v83)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v83 + 32))(v83, a2, "compass");
  v84 = *((_QWORD *)this + 81);
  if (v84)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v84 + 32))(v84, a2, "compassAlignment");
  v85 = *((_QWORD *)this + 82);
  if (v85)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v85 + 32))(v85, a2, "compassCalibration");
  v86 = *((_QWORD *)this + 83);
  if (v86)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v86 + 32))(v86, a2, "compassCalibrationAttempt");
  v87 = *((_QWORD *)this + 84);
  if (v87)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v87 + 32))(v87, a2, "compassConstraints");
  v88 = *((_QWORD *)this + 85);
  if (v88)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v88 + 32))(v88, a2, "compassCorrection");
  v89 = *((_QWORD *)this + 86);
  if (v89)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v89 + 32))(v89, a2, "complexHandMotion");
  v90 = *((_QWORD *)this + 87);
  if (v90)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v90 + 32))(v90, a2, "constrainedIntegratorModelPredictedPose");
  v91 = *((_QWORD *)this + 88);
  if (v91)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v91 + 32))(v91, a2, "constrainedIntegratorPose");
  v92 = *((_QWORD *)this + 89);
  if (v92)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v92 + 32))(v92, a2, "coprocessorReplyGaitMetrics");
  v93 = *((_QWORD *)this + 90);
  if (v93)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v93 + 32))(v93, a2, "courseConstraints");
  v94 = *((_QWORD *)this + 91);
  if (v94)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v94 + 32))(v94, a2, "courseCorrection");
  v95 = *((_QWORD *)this + 92);
  if (v95)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v95 + 32))(v95, a2, "cvWatchCalories");
  v96 = *((_QWORD *)this + 93);
  if (v96)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v96 + 32))(v96, a2, "deviceMotion");
  v97 = *((_QWORD *)this + 94);
  if (v97)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v97 + 32))(v97, a2, "deviceMotionAlwaysOn");
  v98 = *((_QWORD *)this + 95);
  if (v98)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v98 + 32))(v98, a2, "deviceMotionCovariance");
  v99 = *((_QWORD *)this + 96);
  if (v99)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v99 + 32))(v99, a2, "directionOfTravelMetrics");
  v100 = *((_QWORD *)this + 97);
  if (v100)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v100 + 32))(v100, a2, "displacingState");
  v101 = *((_QWORD *)this + 98);
  if (v101)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v101 + 32))(v101, a2, "displayStatus");
  v102 = *((_QWORD *)this + 99);
  if (v102)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v102 + 32))(v102, a2, "dopplerDebugRecord");
  v103 = *((_QWORD *)this + 100);
  if (v103)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v103 + 32))(v103, a2, "dopplerProximityEvent");
  v104 = *((_QWORD *)this + 101);
  if (v104)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v104 + 32))(v104, a2, "dopplerRawDataInput");
  v105 = *((_QWORD *)this + 102);
  if (v105)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v105 + 32))(v105, a2, "dopplerSample");
  v106 = *((_QWORD *)this + 103);
  if (v106)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v106 + 32))(v106, a2, "dotEstimatorHandSwing");
  v107 = *((_QWORD *)this + 104);
  if (v107)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v107 + 32))(v107, a2, "dotEstimatorWithTNB");
  v108 = *((_QWORD *)this + 105);
  if (v108)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v108 + 32))(v108, a2, "doubleTap");
  v109 = *((_QWORD *)this + 106);
  if (v109)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v109 + 32))(v109, a2, "elevationChange");
  v110 = *((_QWORD *)this + 107);
  if (v110)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v110 + 32))(v110, a2, "elevationGradeEstimator");
  v111 = *((_QWORD *)this + 108);
  if (v111)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v111 + 32))(v111, a2, "elevationThreshold");
  v112 = *((_QWORD *)this + 109);
  if (v112)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v112 + 32))(v112, a2, "emergencyState");
  v113 = *((_QWORD *)this + 110);
  if (v113)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v113 + 32))(v113, a2, "enhancedDeviceMotion");
  v114 = *((_QWORD *)this + 111);
  if (v114)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v114 + 32))(v114, a2, "faceBlendShapeCoefficientsSample");
  v115 = *((_QWORD *)this + 112);
  if (v115)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v115 + 32))(v115, a2, "faceCovered");
  v116 = *((_QWORD *)this + 113);
  if (v116)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v116 + 32))(v116, a2, "faceDownDetection");
  v117 = *((_QWORD *)this + 114);
  if (v117)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v117 + 32))(v117, a2, "facePose");
  v118 = *((_QWORD *)this + 115);
  if (v118)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v118 + 32))(v118, a2, "facePoseSynchronized");
  v119 = *((_QWORD *)this + 116);
  if (v119)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v119 + 32))(v119, a2, "fallDetectionActivityClassifierReplay");
  v120 = *((_QWORD *)this + 117);
  if (v120)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v120 + 32))(v120, a2, "fallDetectionDetector");
  v121 = *((_QWORD *)this + 118);
  if (v121)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v121 + 32))(v121, a2, "fallDetectionGyroControllerReplay");
  v122 = *((_QWORD *)this + 119);
  if (v122)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v122 + 32))(v122, a2, "fallDetectionReferee");
  v123 = *((_QWORD *)this + 120);
  if (v123)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v123 + 32))(v123, a2, "fallDetectionReplay");
  v124 = *((_QWORD *)this + 121);
  if (v124)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v124 + 32))(v124, a2, "fallDetectionStateMachine");
  v125 = *((_QWORD *)this + 122);
  if (v125)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v125 + 32))(v125, a2, "fallDetectionWristStateReplay");
  v126 = *((_QWORD *)this + 123);
  if (v126)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v126 + 32))(v126, a2, "fallDistanceReplay");
  v127 = *((_QWORD *)this + 124);
  if (v127)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v127 + 32))(v127, a2, "fallFalsePositiveSuppressionFeatures");
  v128 = *((_QWORD *)this + 125);
  if (v128)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v128 + 32))(v128, a2, "fallSnippet");
  v129 = *((_QWORD *)this + 126);
  if (v129)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v129 + 32))(v129, a2, "fallStats");
  v130 = *((_QWORD *)this + 127);
  if (v130)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v130 + 32))(v130, a2, "firstStepFeatures");
  v131 = *((_QWORD *)this + 128);
  if (v131)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v131 + 32))(v131, a2, "fitnessMachineData");
  v132 = *((_QWORD *)this + 129);
  if (v132)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v132 + 32))(v132, a2, "fitnessMachineSample");
  v133 = *((_QWORD *)this + 130);
  if (v133)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v133 + 32))(v133, a2, "focusModes");
  v134 = *((_QWORD *)this + 131);
  if (v134)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v134 + 32))(v134, a2, "frequencyResponse");
  v135 = *((_QWORD *)this + 132);
  if (v135)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v135 + 32))(v135, a2, "fusedBioMotionClassification");
  v136 = *((_QWORD *)this + 133);
  if (v136)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v136 + 32))(v136, a2, "gaitCycleSegment");
  v137 = *((_QWORD *)this + 134);
  if (v137)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v137 + 32))(v137, a2, "gaitCycleSegmentationState");
  v138 = *((_QWORD *)this + 135);
  if (v138)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v138 + 32))(v138, a2, "gaitEventsHKResult");
  v139 = *((_QWORD *)this + 136);
  if (v139)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v139 + 32))(v139, a2, "gaitEventsModelOutput");
  v140 = *((_QWORD *)this + 137);
  if (v140)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v140 + 32))(v140, a2, "gaitEventsStrideAggregation");
  v141 = *((_QWORD *)this + 138);
  if (v141)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v141 + 32))(v141, a2, "geomagneticData");
  v142 = *((_QWORD *)this + 139);
  if (v142)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v142 + 32))(v142, a2, "gnssAvailabilityPredictorData");
  v143 = *((_QWORD *)this + 140);
  if (v143)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v143 + 32))(v143, a2, "gnssLeechLocationData");
  v144 = *((_QWORD *)this + 141);
  if (v144)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v144 + 32))(v144, a2, "gravityConstraints");
  v145 = *((_QWORD *)this + 142);
  if (v145)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v145 + 32))(v145, a2, "gravityCorrection");
  v146 = *((_QWORD *)this + 143);
  if (v146)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v146 + 32))(v146, a2, "gyro");
  v147 = *((_QWORD *)this + 144);
  if (v147)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v147 + 32))(v147, a2, "gyroBiasAndVariance");
  v148 = *((_QWORD *)this + 145);
  if (v148)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v148 + 32))(v148, a2, "gyroBiasConstraints");
  v149 = *((_QWORD *)this + 146);
  if (v149)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v149 + 32))(v149, a2, "gyroBiasCorrection");
  v150 = *((_QWORD *)this + 147);
  if (v150)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v150 + 32))(v150, a2, "gyroBiasEstimateError");
  v151 = *((_QWORD *)this + 148);
  if (v151)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v151 + 32))(v151, a2, "gyroBiasFit");
  v152 = *((_QWORD *)this + 149);
  if (v152)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v152 + 32))(v152, a2, "gyroCalibrationDataFactory");
  v153 = *((_QWORD *)this + 150);
  if (v153)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v153 + 32))(v153, a2, "gyroCalibrationDataNonlinearNonFactory");
  v154 = *((_QWORD *)this + 151);
  if (v154)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v154 + 32))(v154, a2, "gyroCalibrationSample");
  v155 = *((_QWORD *)this + 152);
  if (v155)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v155 + 32))(v155, a2, "gyroCalibrationSampleNonlinear");
  v156 = *((_QWORD *)this + 153);
  if (v156)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v156 + 32))(v156, a2, "gyroCompass");
  v157 = *((_QWORD *)this + 154);
  if (v157)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v157 + 32))(v157, a2, "gyroDt");
  v158 = *((_QWORD *)this + 155);
  if (v158)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v158 + 32))(v158, a2, "gyroFactoryCalibrationData");
  v159 = *((_QWORD *)this + 156);
  if (v159)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v159 + 32))(v159, a2, "gyroGps");
  v160 = *((_QWORD *)this + 157);
  if (v160)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v160 + 32))(v160, a2, "gyroOscarEmu");
  v161 = *((_QWORD *)this + 158);
  if (v161)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v161 + 32))(v161, a2, "gyroTemperature");
  v162 = *((_QWORD *)this + 159);
  if (v162)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v162 + 32))(v162, a2, "hapticModuleState");
  v163 = *((_QWORD *)this + 160);
  if (v163)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v163 + 32))(v163, a2, "harmonicMetrics");
  v164 = *((_QWORD *)this + 161);
  if (v164)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v164 + 32))(v164, a2, "headToHeadsetAttitudeEstimatorMeasurementUpdate");
  v165 = *((_QWORD *)this + 162);
  if (v165)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v165 + 32))(v165, a2, "headToHeadsetTransformationEstimate");
  v166 = *((_QWORD *)this + 163);
  if (v166)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v166 + 32))(v166, a2, "headTrackingBehaviorUpdate");
  v167 = *((_QWORD *)this + 164);
  if (v167)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v167 + 32))(v167, a2, "headTrackingClientModeUpdate");
  v168 = *((_QWORD *)this + 165);
  if (v168)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v168 + 32))(v168, a2, "heartRateReference");
  v169 = *((_QWORD *)this + 166);
  if (v169)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v169 + 32))(v169, a2, "hgAccel");
  v170 = *((_QWORD *)this + 167);
  if (v170)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v170 + 32))(v170, a2, "hidShower");
  v171 = *((_QWORD *)this + 168);
  if (v171)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v171 + 32))(v171, a2, "inEarAdditionalState");
  v172 = *((_QWORD *)this + 169);
  if (v172)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v172 + 32))(v172, a2, "inEarBaseline");
  v173 = *((_QWORD *)this + 170);
  if (v173)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v173 + 32))(v173, a2, "inEarBaselining");
  v174 = *((_QWORD *)this + 171);
  if (v174)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v174 + 32))(v174, a2, "inEarConstraints");
  v175 = *((_QWORD *)this + 172);
  if (v175)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v175 + 32))(v175, a2, "inEarOpenLid");
  v176 = *((_QWORD *)this + 173);
  if (v176)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v176 + 32))(v176, a2, "inEarOptical");
  v177 = *((_QWORD *)this + 174);
  if (v177)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v177 + 32))(v177, a2, "inEarSession");
  v178 = *((_QWORD *)this + 175);
  if (v178)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v178 + 32))(v178, a2, "inEarTransition");
  v179 = *((_QWORD *)this + 176);
  if (v179)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v179 + 32))(v179, a2, "inEarTransitionEntry");
  v180 = *((_QWORD *)this + 177);
  if (v180)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v180 + 32))(v180, a2, "inertialOdometry");
  v181 = *((_QWORD *)this + 178);
  if (v181)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v181 + 32))(v181, a2, "initialHistoricalMeanSeaLevelPressure");
  v182 = *((_QWORD *)this + 179);
  if (v182)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v182 + 32))(v182, a2, "interpolatedAccessoryAccel");
  v183 = *((_QWORD *)this + 180);
  if (v183)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v183 + 32))(v183, a2, "intersiloNSCodingData");
  v184 = *((_QWORD *)this + 181);
  if (v184)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v184 + 32))(v184, a2, "ispPacket");
  v185 = *((_QWORD *)this + 182);
  if (v185)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v185 + 32))(v185, a2, "jitterBufferLevel");
  v186 = *((_QWORD *)this + 183);
  if (v186)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v186 + 32))(v186, a2, "jointLinkModelPose");
  v187 = *((_QWORD *)this + 184);
  if (v187)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v187 + 32))(v187, a2, "jointLinkModelPredictedPose");
  v188 = *((_QWORD *)this + 185);
  if (v188)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v188 + 32))(v188, a2, "kData1");
  v189 = *((_QWORD *)this + 186);
  if (v189)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v189 + 32))(v189, a2, "kData2");
  v190 = *((_QWORD *)this + 187);
  if (v190)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v190 + 32))(v190, a2, "kData3");
  v191 = *((_QWORD *)this + 188);
  if (v191)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v191 + 32))(v191, a2, "kappaActivityPhone");
  v192 = *((_QWORD *)this + 189);
  if (v192)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v192 + 32))(v192, a2, "kappaActivityWatch");
  v193 = *((_QWORD *)this + 190);
  if (v193)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v193 + 32))(v193, a2, "kappaAirbagResult");
  v194 = *((_QWORD *)this + 191);
  if (v194)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v194 + 32))(v194, a2, "kappaAudioResult");
  v195 = *((_QWORD *)this + 192);
  if (v195)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v195 + 32))(v195, a2, "kappaBaroResult");
  v196 = *((_QWORD *)this + 193);
  if (v196)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v196 + 32))(v196, a2, "kappaCrashResult");
  v197 = *((_QWORD *)this + 194);
  if (v197)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v197 + 32))(v197, a2, "kappaDirectionOfTravel");
  v198 = *((_QWORD *)this + 195);
  if (v198)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v198 + 32))(v198, a2, "kappaGpsResult");
  v199 = *((_QWORD *)this + 196);
  if (v199)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v199 + 32))(v199, a2, "kappaGravityAutocorrelationResult");
  v200 = *((_QWORD *)this + 197);
  if (v200)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v200 + 32))(v200, a2, "kappaHighSpeedCrashResult");
  v201 = *((_QWORD *)this + 198);
  if (v201)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v201 + 32))(v201, a2, "kappaLackOfMotionResult");
  v202 = *((_QWORD *)this + 199);
  if (v202)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v202 + 32))(v202, a2, "kappaLocalAudioResult");
  v203 = *((_QWORD *)this + 200);
  if (v203)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v203 + 32))(v203, a2, "kappaMildImpactResult");
  v204 = *((_QWORD *)this + 201);
  if (v204)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v204 + 32))(v204, a2, "kappaPeakDetectorMapMagTimestamps");
  v205 = *((_QWORD *)this + 202);
  if (v205)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v205 + 32))(v205, a2, "kappaPeakDetectorMapResult");
  v206 = *((_QWORD *)this + 203);
  if (v206)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v206 + 32))(v206, a2, "kappaPulseDeltaV");
  v207 = *((_QWORD *)this + 204);
  if (v207)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v207 + 32))(v207, a2, "kappaPulseInertialAccel");
  v208 = *((_QWORD *)this + 205);
  if (v208)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v208 + 32))(v208, a2, "kappaPulseInertialHgAccel");
  v209 = *((_QWORD *)this + 206);
  if (v209)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v209 + 32))(v209, a2, "kappaPulseResult");
  v210 = *((_QWORD *)this + 207);
  if (v210)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v210 + 32))(v210, a2, "kappaQuiescenceResult");
  v211 = *((_QWORD *)this + 208);
  if (v211)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v211 + 32))(v211, a2, "kappaRecoveryResult");
  v212 = *((_QWORD *)this + 209);
  if (v212)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v212 + 32))(v212, a2, "kappaRemoteAudioResult");
  v213 = *((_QWORD *)this + 210);
  if (v213)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v213 + 32))(v213, a2, "kappaRoads");
  v214 = *((_QWORD *)this + 211);
  if (v214)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v214 + 32))(v214, a2, "kappaRoadsResult");
  v215 = *((_QWORD *)this + 212);
  if (v215)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v215 + 32))(v215, a2, "kappaRolloverCrashResult");
  v216 = *((_QWORD *)this + 213);
  if (v216)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v216 + 32))(v216, a2, "kappaSevereCrashResult");
  v217 = *((_QWORD *)this + 214);
  if (v217)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v217 + 32))(v217, a2, "kappaSpinResult");
  v218 = *((_QWORD *)this + 215);
  if (v218)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v218 + 32))(v218, a2, "kappaSteps");
  v219 = *((_QWORD *)this + 216);
  if (v219)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v219 + 32))(v219, a2, "kappaStepsResult");
  v220 = *((_QWORD *)this + 217);
  if (v220)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v220 + 32))(v220, a2, "kappaTrigger");
  v221 = *((_QWORD *)this + 218);
  if (v221)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v221 + 32))(v221, a2, "kappaTriggerClustersResult");
  v222 = *((_QWORD *)this + 219);
  if (v222)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v222 + 32))(v222, a2, "kappaTriggerDebug");
  v223 = *((_QWORD *)this + 220);
  if (v223)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v223 + 32))(v223, a2, "kappaZgDetected");
  v224 = *((_QWORD *)this + 221);
  if (v224)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v224 + 32))(v224, a2, "kappaZgResult");
  v225 = *((_QWORD *)this + 222);
  if (v225)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v225 + 32))(v225, a2, "keyboardAttached");
  v226 = *((_QWORD *)this + 223);
  if (v226)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v226 + 32))(v226, a2, "keyboardKeyPress");
  v227 = *((_QWORD *)this + 224);
  if (v227)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v227 + 32))(v227, a2, "keyboardMotionFeatures");
  v228 = *((_QWORD *)this + 225);
  if (v228)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v228 + 32))(v228, a2, "keyboardMotionState");
  v229 = *((_QWORD *)this + 226);
  if (v229)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v229 + 32))(v229, a2, "keyboardMotionTrackpad");
  v230 = *((_QWORD *)this + 227);
  if (v230)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v230 + 32))(v230, a2, "kmVelocityEstimatorState");
  v231 = *((_QWORD *)this + 228);
  if (v231)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v231 + 32))(v231, a2, "legacyALS5CHInput");
  v232 = *((_QWORD *)this + 229);
  if (v232)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v232 + 32))(v232, a2, "liftToWakeFeaturesNeo");
  v233 = *((_QWORD *)this + 230);
  if (v233)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v233 + 32))(v233, a2, "liftToWakeOnHeadStatus");
  v234 = *((_QWORD *)this + 231);
  if (v234)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v234 + 32))(v234, a2, "liftToWakeState");
  v235 = *((_QWORD *)this + 232);
  if (v235)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v235 + 32))(v235, a2, "liftToWakeStatusNeo");
  v236 = *((_QWORD *)this + 233);
  if (v236)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v236 + 32))(v236, a2, "locationOscarEmu");
  v237 = *((_QWORD *)this + 234);
  if (v237)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v237 + 32))(v237, a2, "lockScreenStatus");
  v238 = *((_QWORD *)this + 235);
  if (v238)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v238 + 32))(v238, a2, "lslHeadingEstimation");
  v239 = *((_QWORD *)this + 236);
  if (v239)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v239 + 32))(v239, a2, "mLBasedBioMotionClassification");
  v240 = *((_QWORD *)this + 237);
  if (v240)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v240 + 32))(v240, a2, "magicMountState");
  v241 = *((_QWORD *)this + 238);
  if (v241)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v241 + 32))(v241, a2, "magneticAccessoryType1");
  v242 = *((_QWORD *)this + 239);
  if (v242)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v242 + 32))(v242, a2, "magneticAccessoryType2");
  v243 = *((_QWORD *)this + 240);
  if (v243)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v243 + 32))(v243, a2, "magnetometer");
  v244 = *((_QWORD *)this + 241);
  if (v244)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v244 + 32))(v244, a2, "magnetometerCalibratorFilterParameters");
  v245 = *((_QWORD *)this + 242);
  if (v245)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v245 + 32))(v245, a2, "magnetometerReset");
  v246 = *((_QWORD *)this + 243);
  if (v246)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v246 + 32))(v246, a2, "mapsRouteHintData");
  v247 = *((_QWORD *)this + 244);
  if (v247)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v247 + 32))(v247, a2, "metsInfo");
  v248 = *((_QWORD *)this + 245);
  if (v248)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v248 + 32))(v248, a2, "mobilityBoutMetrics");
  v249 = *((_QWORD *)this + 246);
  if (v249)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v249 + 32))(v249, a2, "mobilitySmoothedGaitMetrics");
  v250 = *((_QWORD *)this + 247);
  if (v250)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v250 + 32))(v250, a2, "modelBasedBioMotionClassification");
  v251 = *((_QWORD *)this + 248);
  if (v251)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v251 + 32))(v251, a2, "motionActivity");
  v252 = *((_QWORD *)this + 249);
  if (v252)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v252 + 32))(v252, a2, "motionActivityReplay");
  v253 = *((_QWORD *)this + 250);
  if (v253)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v253 + 32))(v253, a2, "motionContextActivity");
  v254 = *((_QWORD *)this + 251);
  if (v254)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v254 + 32))(v254, a2, "motionGPSLocation");
  v255 = *((_QWORD *)this + 252);
  if (v255)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v255 + 32))(v255, a2, "motionHint");
  v256 = *((_QWORD *)this + 253);
  if (v256)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v256 + 32))(v256, a2, "motionLocation");
  v257 = *((_QWORD *)this + 254);
  if (v257)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v257 + 32))(v257, a2, "motionLoiAltitudeData");
  v258 = *((_QWORD *)this + 255);
  if (v258)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v258 + 32))(v258, a2, "motionLoiData");
  v259 = *((_QWORD *)this + 256);
  if (v259)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v259 + 32))(v259, a2, "motionStateUpdate");
  v260 = *((_QWORD *)this + 257);
  if (v260)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v260 + 32))(v260, a2, "motionWifiAssociation");
  v261 = *((_QWORD *)this + 258);
  if (v261)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v261 + 32))(v261, a2, "motionWifiLocation");
  v262 = *((_QWORD *)this + 259);
  if (v262)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v262 + 32))(v262, a2, "movementStats");
  v263 = *((_QWORD *)this + 260);
  if (v263)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v263 + 32))(v263, a2, "movementStatsGravityProjection");
  v264 = *((_QWORD *)this + 261);
  if (v264)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v264 + 32))(v264, a2, "movementStatsSignal");
  v265 = *((_QWORD *)this + 262);
  if (v265)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v265 + 32))(v265, a2, "natalieData");
  v266 = *((_QWORD *)this + 263);
  if (v266)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v266 + 32))(v266, a2, "nonlinearBiasFit");
  v267 = *((_QWORD *)this + 264);
  if (v267)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v267 + 32))(v267, a2, "odometer");
  v268 = *((_QWORD *)this + 265);
  if (v268)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v268 + 32))(v268, a2, "odometerWithAltitude");
  v269 = *((_QWORD *)this + 266);
  if (v269)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v269 + 32))(v269, a2, "odtPose");
  v270 = *((_QWORD *)this + 267);
  if (v270)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v270 + 32))(v270, a2, "onsetHeartRateData");
  v271 = *((_QWORD *)this + 268);
  if (v271)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v271 + 32))(v271, a2, "orientation");
  v272 = *((_QWORD *)this + 269);
  if (v272)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v272 + 32))(v272, a2, "pdrAlgType");
  v273 = *((_QWORD *)this + 270);
  if (v273)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v273 + 32))(v273, a2, "pdrDOTEstimatorState");
  v274 = *((_QWORD *)this + 271);
  if (v274)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v274 + 32))(v274, a2, "pdrDOTEstimatorStateArmSwing");
  v275 = *((_QWORD *)this + 272);
  if (v275)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v275 + 32))(v275, a2, "pdrDOTEstimatorStateBody");
  v276 = *((_QWORD *)this + 273);
  if (v276)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v276 + 32))(v276, a2, "pdrDOTEstimatorStateBodyDebug");
  v277 = *((_QWORD *)this + 274);
  if (v277)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v277 + 32))(v277, a2, "pdrDOTEstimatorStateDebug");
  v278 = *((_QWORD *)this + 275);
  if (v278)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v278 + 32))(v278, a2, "pdrDOTEstimatorStateHeading");
  v279 = *((_QWORD *)this + 276);
  if (v279)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v279 + 32))(v279, a2, "pdrDOTEstimatorUncertaintyModelOnBody");
  v280 = *((_QWORD *)this + 277);
  if (v280)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v280 + 32))(v280, a2, "pdrDOTMeasurementSelectorState");
  v281 = *((_QWORD *)this + 278);
  if (v281)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v281 + 32))(v281, a2, "pdrFeatures");
  v282 = *((_QWORD *)this + 279);
  if (v282)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v282 + 32))(v282, a2, "pdrFenceReference");
  v283 = *((_QWORD *)this + 280);
  if (v283)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v283 + 32))(v283, a2, "pdrFenceState");
  v284 = *((_QWORD *)this + 281);
  if (v284)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v284 + 32))(v284, a2, "pdrImpulse");
  v285 = *((_QWORD *)this + 282);
  if (v285)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v285 + 32))(v285, a2, "pdrMLModelOutput");
  v286 = *((_QWORD *)this + 283);
  if (v286)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v286 + 32))(v286, a2, "pdrPedestrianClassifierState");
  v287 = *((_QWORD *)this + 284);
  if (v287)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v287 + 32))(v287, a2, "pdrPlacementClassifierState");
  v288 = *((_QWORD *)this + 285);
  if (v288)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v288 + 32))(v288, a2, "pdrSpeedEstimatorState");
  v289 = *((_QWORD *)this + 286);
  if (v289)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v289 + 32))(v289, a2, "pdrSpeedEstimatorStateDebug");
  v290 = *((_QWORD *)this + 287);
  if (v290)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v290 + 32))(v290, a2, "pdrVelocityEstimatorState");
  v291 = *((_QWORD *)this + 288);
  if (v291)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v291 + 32))(v291, a2, "pearlAttitude");
  v292 = *((_QWORD *)this + 289);
  if (v292)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v292 + 32))(v292, a2, "pedOdomFusionExtendedModeSegment");
  v293 = *((_QWORD *)this + 290);
  if (v293)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v293 + 32))(v293, a2, "pedestrianCalorieModelDebugging");
  v294 = *((_QWORD *)this + 291);
  if (v294)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v294 + 32))(v294, a2, "pedestrianFenceExit");
  v295 = *((_QWORD *)this + 292);
  if (v295)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v295 + 32))(v295, a2, "pedometerPathStraightness");
  v296 = *((_QWORD *)this + 293);
  if (v296)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v296 + 32))(v296, a2, "peerState");
  v297 = *((_QWORD *)this + 294);
  if (v297)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v297 + 32))(v297, a2, "pencilDeviceMotion");
  v298 = *((_QWORD *)this + 295);
  if (v298)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v298 + 32))(v298, a2, "pencilFusionDMYawAlignmentUpdate");
  v299 = *((_QWORD *)this + 296);
  if (v299)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v299 + 32))(v299, a2, "pencilFusionReplayResult");
  v300 = *((_QWORD *)this + 297);
  if (v300)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v300 + 32))(v300, a2, "pencilFusionResult");
  v301 = *((_QWORD *)this + 298);
  if (v301)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v301 + 32))(v301, a2, "pencilFusionRingSensorTrustModelUpdate");
  v302 = *((_QWORD *)this + 299);
  if (v302)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v302 + 32))(v302, a2, "pencilTipForce");
  v303 = *((_QWORD *)this + 300);
  if (v303)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v303 + 32))(v303, a2, "pencilTouch");
  v304 = *((_QWORD *)this + 301);
  if (v304)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v304 + 32))(v304, a2, "physicalEffortInput");
  v305 = *((_QWORD *)this + 302);
  if (v305)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v305 + 32))(v305, a2, "physicalEffortSample");
  v306 = *((_QWORD *)this + 303);
  if (v306)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v306 + 32))(v306, a2, "pocketDetectionPacket");
  v307 = *((_QWORD *)this + 304);
  if (v307)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v307 + 32))(v307, a2, "pose");
  v308 = *((_QWORD *)this + 305);
  if (v308)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v308 + 32))(v308, a2, "poseState");
  v309 = *((_QWORD *)this + 306);
  if (v309)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v309 + 32))(v309, a2, "postureJoint");
  v310 = *((_QWORD *)this + 307);
  if (v310)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v310 + 32))(v310, a2, "postureSkeleton");
  v311 = *((_QWORD *)this + 308);
  if (v311)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v311 + 32))(v311, a2, "powerManagementUserActivity");
  v312 = *((_QWORD *)this + 309);
  if (v312)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v312 + 32))(v312, a2, "precisionFindingDOTEstimate");
  v313 = *((_QWORD *)this + 310);
  if (v313)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v313 + 32))(v313, a2, "precisionFindingRangeFilter");
  v314 = *((_QWORD *)this + 311);
  if (v314)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v314 + 32))(v314, a2, "precisionFindingSessionStartStop");
  v315 = *((_QWORD *)this + 312);
  if (v315)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v315 + 32))(v315, a2, "precisionFindingState");
  v316 = *((_QWORD *)this + 313);
  if (v316)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v316 + 32))(v316, a2, "precisionFindingVelocityEstimate");
  v317 = *((_QWORD *)this + 314);
  if (v317)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v317 + 32))(v317, a2, "precisionFindingVerticalState");
  v318 = *((_QWORD *)this + 315);
  if (v318)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v318 + 32))(v318, a2, "predictedRelativeDeviceMotion");
  v319 = *((_QWORD *)this + 316);
  if (v319)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v319 + 32))(v319, a2, "pressure");
  v320 = *((_QWORD *)this + 317);
  if (v320)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v320 + 32))(v320, a2, "pressureCalibration");
  v321 = *((_QWORD *)this + 318);
  if (v321)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v321 + 32))(v321, a2, "pressureCompensated");
  v322 = *((_QWORD *)this + 319);
  if (v322)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v322 + 32))(v322, a2, "pressureFiltered");
  v323 = *((_QWORD *)this + 320);
  if (v323)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v323 + 32))(v323, a2, "pressureFiltered1HzLowPass");
  v324 = *((_QWORD *)this + 321);
  if (v324)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v324 + 32))(v324, a2, "pressureFilteredNoTemperature");
  v325 = *((_QWORD *)this + 322);
  if (v325)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v325 + 32))(v325, a2, "pressureGps");
  v326 = *((_QWORD *)this + 323);
  if (v326)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v326 + 32))(v326, a2, "pressureOscarEmu");
  v327 = *((_QWORD *)this + 324);
  if (v327)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v327 + 32))(v327, a2, "prox");
  v328 = *((_QWORD *)this + 325);
  if (v328)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v328 + 32))(v328, a2, "proxBaselineEstimatorState");
  v329 = *((_QWORD *)this + 326);
  if (v329)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v329 + 32))(v329, a2, "proxCalibration");
  v330 = *((_QWORD *)this + 327);
  if (v330)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v330 + 32))(v330, a2, "proxPDP");
  v331 = *((_QWORD *)this + 328);
  if (v331)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v331 + 32))(v331, a2, "ptsConsumedGNSS");
  v332 = *((_QWORD *)this + 329);
  if (v332)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v332 + 32))(v332, a2, "ptsForwardPropagation");
  v333 = *((_QWORD *)this + 330);
  if (v333)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v333 + 32))(v333, a2, "ptsMapMatchedRoute");
  v334 = *((_QWORD *)this + 331);
  if (v334)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v334 + 32))(v334, a2, "ptsReconstructedRoute");
  v335 = *((_QWORD *)this + 332);
  if (v335)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v335 + 32))(v335, a2, "rawAudio");
  v336 = *((_QWORD *)this + 333);
  if (v336)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v336 + 32))(v336, a2, "relDMInSystemConfig");
  v337 = *((_QWORD *)this + 334);
  if (v337)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v337 + 32))(v337, a2, "relativeDeviceMotionComplexTransition");
  v338 = *((_QWORD *)this + 335);
  if (v338)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v338 + 32))(v338, a2, "relativeDeviceMotionCorrelatedMotion");
  v339 = *((_QWORD *)this + 336);
  if (v339)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v339 + 32))(v339, a2, "relativeDeviceMotionInternal");
  v340 = *((_QWORD *)this + 337);
  if (v340)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v340 + 32))(v340, a2, "relativeGravityConstraints");
  v341 = *((_QWORD *)this + 338);
  if (v341)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v341 + 32))(v341, a2, "relativeGravityCorrection");
  v342 = *((_QWORD *)this + 339);
  if (v342)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v342 + 32))(v342, a2, "rhythmicGnssOperatorStatus");
  v343 = *((_QWORD *)this + 340);
  if (v343)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v343 + 32))(v343, a2, "rotationRate");
  v344 = *((_QWORD *)this + 341);
  if (v344)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v344 + 32))(v344, a2, "runningArmSwingSignals");
  v345 = *((_QWORD *)this + 342);
  if (v345)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v345 + 32))(v345, a2, "runningCentripetalAccelSignals");
  v346 = *((_QWORD *)this + 343);
  if (v346)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v346 + 32))(v346, a2, "runningFormMetrics");
  v347 = *((_QWORD *)this + 344);
  if (v347)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v347 + 32))(v347, a2, "runningPower");
  v348 = *((_QWORD *)this + 345);
  if (v348)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v348 + 32))(v348, a2, "runningRotationAxis");
  v349 = *((_QWORD *)this + 346);
  if (v349)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v349 + 32))(v349, a2, "runningSpeedKFResult");
  v350 = *((_QWORD *)this + 347);
  if (v350)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v350 + 32))(v350, a2, "runningStrideLength");
  v351 = *((_QWORD *)this + 348);
  if (v351)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v351 + 32))(v351, a2, "runningVerticalOscillation");
  v352 = *((_QWORD *)this + 349);
  if (v352)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v352 + 32))(v352, a2, "runningVerticalOscillationGradientBoostedSignals");
  v353 = *((_QWORD *)this + 350);
  if (v353)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v353 + 32))(v353, a2, "runningVerticalOscillationSignals");
  v354 = *((_QWORD *)this + 351);
  if (v354)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v354 + 32))(v354, a2, "safetyCompanionStatus");
  v355 = *((_QWORD *)this + 352);
  if (v355)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v355 + 32))(v355, a2, "safetyHertzSample");
  v356 = *((_QWORD *)this + 353);
  if (v356)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v356 + 32))(v356, a2, "safetyRemoteSample");
  v357 = *((_QWORD *)this + 354);
  if (v357)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v357 + 32))(v357, a2, "safetyTrustedAudioResult");
  v358 = *((_QWORD *)this + 355);
  if (v358)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v358 + 32))(v358, a2, "sessionOverride");
  v359 = *((_QWORD *)this + 356);
  if (v359)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v359 + 32))(v359, a2, "signalEnvironment");
  v360 = *((_QWORD *)this + 357);
  if (v360)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v360 + 32))(v360, a2, "simActivityEvent");
  v361 = *((_QWORD *)this + 358);
  if (v361)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v361 + 32))(v361, a2, "sitStandDetectorFeatures");
  v362 = *((_QWORD *)this + 359);
  if (v362)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v362 + 32))(v362, a2, "sitStandDetectorPosteriorBufferStatsForSitToStand");
  v363 = *((_QWORD *)this + 360);
  if (v363)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v363 + 32))(v363, a2, "sitStandDetectorPosteriorBufferStatsForStandToSit");
  v364 = *((_QWORD *)this + 361);
  if (v364)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v364 + 32))(v364, a2, "sitStandDetectorTransitions");
  v365 = *((_QWORD *)this + 362);
  if (v365)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v365 + 32))(v365, a2, "skeleton2D");
  v366 = *((_QWORD *)this + 363);
  if (v366)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v366 + 32))(v366, a2, "skeleton3D");
  v367 = *((_QWORD *)this + 364);
  if (v367)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v367 + 32))(v367, a2, "skeleton3DLifted");
  v368 = *((_QWORD *)this + 365);
  if (v368)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v368 + 32))(v368, a2, "skeleton3DRetargeted");
  v369 = *((_QWORD *)this + 366);
  if (v369)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v369 + 32))(v369, a2, "spatialEvent");
  v370 = *((_QWORD *)this + 367);
  if (v370)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v370 + 32))(v370, a2, "spl");
  v371 = *((_QWORD *)this + 368);
  if (v371)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v371 + 32))(v371, a2, "spuPlaybackExampleDeviceMotion");
  v372 = *((_QWORD *)this + 369);
  if (v372)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v372 + 32))(v372, a2, "spuPlaybackExampleMotionStateUpdate");
  v373 = *((_QWORD *)this + 370);
  if (v373)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v373 + 32))(v373, a2, "steadinessEvent");
  v374 = *((_QWORD *)this + 371);
  if (v374)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v374 + 32))(v374, a2, "steadinessModelBalanceFeatures");
  v375 = *((_QWORD *)this + 372);
  if (v375)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v375 + 32))(v375, a2, "steadinessModelContinuousWalkingFeatures");
  v376 = *((_QWORD *)this + 373);
  if (v376)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v376 + 32))(v376, a2, "steadinessModelGaitBaselineFeatures");
  v377 = *((_QWORD *)this + 374);
  if (v377)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v377 + 32))(v377, a2, "steadinessModelHarmonicFeatures");
  v378 = *((_QWORD *)this + 375);
  if (v378)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v378 + 32))(v378, a2, "steadinessModelResult");
  v379 = *((_QWORD *)this + 376);
  if (v379)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v379 + 32))(v379, a2, "steadinessModelTemporalDispersionFeatures");
  v380 = *((_QWORD *)this + 377);
  if (v380)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v380 + 32))(v380, a2, "steadinessModelTemporalEntropyFeatures");
  v381 = *((_QWORD *)this + 378);
  if (v381)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v381 + 32))(v381, a2, "stepCadenceToStrideLengthBin");
  v382 = *((_QWORD *)this + 379);
  if (v382)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v382 + 32))(v382, a2, "stepCountEntry");
  v383 = *((_QWORD *)this + 380);
  if (v383)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v383 + 32))(v383, a2, "stepCountEntryAddition");
  v384 = *((_QWORD *)this + 381);
  if (v384)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v384 + 32))(v384, a2, "stepDistanceFusionResult");
  v385 = *((_QWORD *)this + 382);
  if (v385)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v385 + 32))(v385, a2, "stepLikelihoodFeatures");
  v386 = *((_QWORD *)this + 383);
  if (v386)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v386 + 32))(v386, a2, "streamingHeartRateData");
  v387 = *((_QWORD *)this + 384);
  if (v387)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v387 + 32))(v387, a2, "streamingHighFrequencyHeartRateData");
  v388 = *((_QWORD *)this + 385);
  if (v388)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v388 + 32))(v388, a2, "strideCalBin");
  v389 = *((_QWORD *)this + 386);
  if (v389)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v389 + 32))(v389, a2, "strideCalEntry");
  v390 = *((_QWORD *)this + 387);
  if (v390)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v390 + 32))(v390, a2, "subStats");
  v391 = *((_QWORD *)this + 388);
  if (v391)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v391 + 32))(v391, a2, "swingDoTCandidate");
  v392 = *((_QWORD *)this + 389);
  if (v392)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v392 + 32))(v392, a2, "tapAccept");
  v393 = *((_QWORD *)this + 390);
  if (v393)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v393 + 32))(v393, a2, "tapDetect");
  v394 = *((_QWORD *)this + 391);
  if (v394)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v394 + 32))(v394, a2, "tempestPoCAuxiliaryDeviceMotion");
  v395 = *((_QWORD *)this + 392);
  if (v395)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v395 + 32))(v395, a2, "tempestPoCListenerOrientation");
  v396 = *((_QWORD *)this + 393);
  if (v396)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v396 + 32))(v396, a2, "timestamp");
  v397 = *((_QWORD *)this + 394);
  if (v397)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v397 + 32))(v397, a2, "touchOscarEmu");
  v398 = *((_QWORD *)this + 395);
  if (v398)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v398 + 32))(v398, a2, "trackRunData");
  v399 = *((_QWORD *)this + 396);
  if (v399)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v399 + 32))(v399, a2, "ultraFastAccel");
  v400 = *((_QWORD *)this + 397);
  if (v400)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v400 + 32))(v400, a2, "userInteraction");
  v401 = *((_QWORD *)this + 398);
  if (v401)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v401 + 32))(v401, a2, "userStudyEvent");
  v402 = *((_QWORD *)this + 399);
  if (v402)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v402 + 32))(v402, a2, "uwbRange");
  v403 = *((_QWORD *)this + 400);
  if (v403)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v403 + 32))(v403, a2, "vO2MaxModelInput");
  v404 = *((_QWORD *)this + 401);
  if (v404)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v404 + 32))(v404, a2, "velocityEstimatorFusionState");
  v405 = *((_QWORD *)this + 402);
  if (v405)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v405 + 32))(v405, a2, "vibrationEvent");
  v406 = *((_QWORD *)this + 403);
  if (v406)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v406 + 32))(v406, a2, "viewObstructedMachineLearningDecision");
  v407 = *((_QWORD *)this + 404);
  if (v407)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v407 + 32))(v407, a2, "viewObstructedMachineLearningFeatures");
  v408 = *((_QWORD *)this + 405);
  if (v408)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v408 + 32))(v408, a2, "viewObstructedMachineLearningProbabilities");
  v409 = *((_QWORD *)this + 406);
  if (v409)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v409 + 32))(v409, a2, "viewObstructedState");
  v410 = *((_QWORD *)this + 407);
  if (v410)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v410 + 32))(v410, a2, "vioEstimation");
  v411 = *((_QWORD *)this + 408);
  if (v411)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v411 + 32))(v411, a2, "vioPose");
  v412 = *((_QWORD *)this + 409);
  if (v412)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v412 + 32))(v412, a2, "vioReplayPose");
  v413 = *((_QWORD *)this + 410);
  if (v413)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v413 + 32))(v413, a2, "visionCompassBias");
  v414 = *((_QWORD *)this + 411);
  if (v414)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v414 + 32))(v414, a2, "visualLocalization");
  v415 = *((_QWORD *)this + 412);
  if (v415)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v415 + 32))(v415, a2, "visualLocalizationAttitudeConstraints");
  v416 = *((_QWORD *)this + 413);
  if (v416)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v416 + 32))(v416, a2, "visualLocalizationAttitudeCorrection");
  v417 = *((_QWORD *)this + 414);
  if (v417)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v417 + 32))(v417, a2, "visualStateMeasurement");
  v418 = *((_QWORD *)this + 415);
  if (v418)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v418 + 32))(v418, a2, "vo2MaxInput");
  v419 = *((_QWORD *)this + 416);
  if (v419)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v419 + 32))(v419, a2, "vo2MaxOutput");
  v420 = *((_QWORD *)this + 417);
  if (v420)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v420 + 32))(v420, a2, "wakeGestureNotification");
  v421 = *((_QWORD *)this + 418);
  if (v421)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v421 + 32))(v421, a2, "wakeGestureSample");
  v422 = *((_QWORD *)this + 419);
  if (v422)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v422 + 32))(v422, a2, "walkingDetectionResult");
  v423 = *((_QWORD *)this + 420);
  if (v423)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v423 + 32))(v423, a2, "walkingSteadinessClassification");
  v424 = *((_QWORD *)this + 421);
  if (v424)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v424 + 32))(v424, a2, "watchActiveCalories");
  v425 = *((_QWORD *)this + 422);
  if (v425)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v425 + 32))(v425, a2, "watchBasalCalories");
  v426 = *((_QWORD *)this + 423);
  if (v426)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v426 + 32))(v426, a2, "watchEnclosureMaterial");
  v427 = *((_QWORD *)this + 424);
  if (v427)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v427 + 32))(v427, a2, "watchHeartRateData");
  v428 = *((_QWORD *)this + 425);
  if (v428)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v428 + 32))(v428, a2, "watchOnWristState");
  v429 = *((_QWORD *)this + 426);
  if (v429)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v429 + 32))(v429, a2, "watchOrientationSettings");
  v430 = *((_QWORD *)this + 427);
  if (v430)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v430 + 32))(v430, a2, "wifiScanResults");
  v431 = *((_QWORD *)this + 428);
  if (v431)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v431 + 32))(v431, a2, "workoutActivity");
  v432 = *((_QWORD *)this + 429);
  if (v432)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v432 + 32))(v432, a2, "workoutEvent");
  v433 = *((_QWORD *)this + 430);
  if (v433)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v433 + 32))(v433, a2, "workoutRecorderALSData");
  v434 = *((_QWORD *)this + 431);
  if (v434)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v434 + 32))(v434, a2, "workoutRecorderAccel");
  v435 = *((_QWORD *)this + 432);
  if (v435)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v435 + 32))(v435, a2, "workoutRecorderAccel800");
  v436 = *((_QWORD *)this + 433);
  if (v436)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v436 + 32))(v436, a2, "workoutRecorderAveragedALSData");
  v437 = *((_QWORD *)this + 434);
  if (v437)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v437 + 32))(v437, a2, "workoutRecorderBodyMetrics");
  v438 = *((_QWORD *)this + 435);
  if (v438)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v438 + 32))(v438, a2, "workoutRecorderCompassCalibration");
  v439 = *((_QWORD *)this + 436);
  if (v439)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v439 + 32))(v439, a2, "workoutRecorderElevation");
  v440 = *((_QWORD *)this + 437);
  if (v440)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v440 + 32))(v440, a2, "workoutRecorderFaceCovered");
  v441 = *((_QWORD *)this + 438);
  if (v441)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v441 + 32))(v441, a2, "workoutRecorderFitnessMachineData");
  v442 = *((_QWORD *)this + 439);
  if (v442)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v442 + 32))(v442, a2, "workoutRecorderHealthKitInfo");
  v443 = *((_QWORD *)this + 440);
  if (v443)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v443 + 32))(v443, a2, "workoutRecorderHeartRate");
  v444 = *((_QWORD *)this + 441);
  if (v444)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v444 + 32))(v444, a2, "workoutRecorderMagnetometer");
  v445 = *((_QWORD *)this + 442);
  if (v445)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v445 + 32))(v445, a2, "workoutRecorderOdometer");
  v446 = *((_QWORD *)this + 443);
  if (v446)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v446 + 32))(v446, a2, "workoutRecorderPressure");
  v447 = *((_QWORD *)this + 444);
  if (v447)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v447 + 32))(v447, a2, "workoutRecorderRotationRate");
  v448 = *((_QWORD *)this + 445);
  if (v448)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v448 + 32))(v448, a2, "workoutRecorderWatchOnWristStatus");
  v449 = *((_QWORD *)this + 446);
  if (v449)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v449 + 32))(v449, a2, "workoutRecorderWatchOrientationSettings");
  v450 = *((_QWORD *)this + 447);
  if (v450)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v450 + 32))(v450, a2, "workoutRecorderWifiScanResults");
  v451 = *((_QWORD *)this + 448);
  if (v451)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v451 + 32))(v451, a2, "workoutRecorderWorkoutEvent");
  v452 = *((_QWORD *)this + 449);
  if (v452)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v452 + 32))(v452, a2, "workoutRecorderWorkoutSessionPriors");
  v453 = *((_QWORD *)this + 450);
  if (v453)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v453 + 32))(v453, a2, "workoutSessionPriors");
  v454 = *((_QWORD *)this + 451);
  if (v454)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v454 + 32))(v454, a2, "zeroVelocityCorrection");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::Item::readFrom(CMMsl::Item *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t result;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v9 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v16 = 0;
        v17 = 0;
        v18 = 0;
        if (v2 > v3)
          v3 = v2;
        while (1)
        {
          if (v3 == v2)
          {
            v12 = 0;
            *((_BYTE *)a2 + 24) = 1;
            goto LABEL_24;
          }
          v19 = v2 + 1;
          v20 = *(_BYTE *)(v9 + v2);
          *((_QWORD *)a2 + 1) = v19;
          v18 |= (unint64_t)(v20 & 0x7F) << v16;
          if ((v20 & 0x80) == 0)
            break;
          v16 += 7;
          v2 = v19;
          v15 = v17++ > 8;
          if (v15)
          {
LABEL_19:
            v12 = 0;
            goto LABEL_24;
          }
        }
        if (*((_BYTE *)a2 + 24))
          v12 = 0;
        else
          v12 = v18;
      }
      else
      {
        v10 = 0;
        v11 = 0;
        v12 = 0;
        while (1)
        {
          v13 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v14 = *(_BYTE *)(v9 + v2);
          v12 |= (unint64_t)(v14 & 0x7F) << v10;
          if ((v14 & 0x80) == 0)
            break;
          v10 += 7;
          v2 = v13;
          v15 = v11++ > 8;
          if (v15)
            goto LABEL_19;
        }
      }
LABEL_24:
      v4 = *((unsigned __int8 *)a2 + 24);
      if (*((_BYTE *)a2 + 24))
        v21 = 1;
      else
        v21 = (v12 & 7) == 4;
      if (v21)
        return v4 == 0;
      v22 = v12 >> 3;
      if ((int)(v12 >> 3) <= 2047)
        break;
      if ((int)v22 <= 29999)
      {
        v23 = (v22 - 2048);
        if (v23 <= 0xBC)
          __asm { BR              X9 }
        goto LABEL_45;
      }
      switch((_DWORD)v22)
      {
        case 0x7530:
          v26 = (_QWORD *)operator new();
          *v26 = &off_251360B60;
          v26[1] = 0;
          v28 = *((_QWORD *)this + 368);
          *((_QWORD *)this + 368) = v26;
          if (v28)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
            v26 = (_QWORD *)*((_QWORD *)this + 368);
          }
          break;
        case 0x7531:
          v26 = (_QWORD *)operator new();
          *v26 = &off_251360B98;
          v26[1] = 0;
          v29 = *((_QWORD *)this + 369);
          *((_QWORD *)this + 369) = v26;
          if (v29)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
            v26 = (_QWORD *)*((_QWORD *)this + 369);
          }
          break;
        case 0x7532:
          v26 = (_QWORD *)operator new();
          *v26 = &off_25135E4A8;
          v26[1] = 0;
          v27 = *((_QWORD *)this + 179);
          *((_QWORD *)this + 179) = v26;
          if (v27)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
            v26 = (_QWORD *)*((_QWORD *)this + 179);
          }
          break;
        default:
          goto LABEL_45;
      }
      if (!PB::Reader::placeMark()
        || ((*(uint64_t (**)(_QWORD *, PB::Reader *))(*v26 + 16))(v26, a2) & 1) == 0)
      {
        return 0;
      }
      PB::Reader::recallMark();
LABEL_50:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v24 = (v22 - 1);
    if (v24 <= 0x1FF)
      __asm { BR              X9 }
    v25 = (v22 - 1001);
    if (v25 <= 0x34)
      __asm { BR              X9 }
LABEL_45:
    result = PB::Reader::skip(a2);
    if (!(_DWORD)result)
      return result;
    goto LABEL_50;
  }
  return v4 == 0;
}

_QWORD *CMMsl::WorkoutRecorderAccel::WorkoutRecorderAccel(_QWORD *this)
{
  *this = &off_251361EA0;
  this[1] = 0;
  return this;
}

{
  *this = &off_251361EA0;
  this[1] = 0;
  return this;
}

_QWORD *CMMsl::WorkoutRecorderBodyMetrics::WorkoutRecorderBodyMetrics(_QWORD *this)
{
  *this = &off_251361F48;
  this[1] = 0;
  return this;
}

{
  *this = &off_251361F48;
  this[1] = 0;
  return this;
}

_QWORD *CMMsl::WorkoutRecorderElevation::WorkoutRecorderElevation(_QWORD *this)
{
  *this = &off_251361FB8;
  this[1] = 0;
  return this;
}

{
  *this = &off_251361FB8;
  this[1] = 0;
  return this;
}

_QWORD *CMMsl::WorkoutRecorderHeartRate::WorkoutRecorderHeartRate(_QWORD *this)
{
  *this = &off_251362098;
  this[1] = 0;
  return this;
}

{
  *this = &off_251362098;
  this[1] = 0;
  return this;
}

_QWORD *CMMsl::WorkoutRecorderRotationRate::WorkoutRecorderRotationRate(_QWORD *this)
{
  *this = &off_251362178;
  this[1] = 0;
  return this;
}

{
  *this = &off_251362178;
  this[1] = 0;
  return this;
}

_QWORD *CMMsl::WorkoutRecorderOdometer::WorkoutRecorderOdometer(_QWORD *this)
{
  *this = &off_251362108;
  this[1] = 0;
  return this;
}

{
  *this = &off_251362108;
  this[1] = 0;
  return this;
}

_QWORD *CMMsl::WorkoutRecorderWorkoutEvent::WorkoutRecorderWorkoutEvent(_QWORD *this)
{
  *this = &off_251362258;
  this[1] = 0;
  return this;
}

{
  *this = &off_251362258;
  this[1] = 0;
  return this;
}

uint64_t CMMsl::VO2MaxInput::VO2MaxInput(uint64_t this)
{
  *(_QWORD *)this = &off_2513617D8;
  *(_DWORD *)(this + 88) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_2513617D8;
  *(_DWORD *)(this + 88) = 0;
  return this;
}

uint64_t CMMsl::WorkoutRecorderHealthKitInfo::WorkoutRecorderHealthKitInfo(uint64_t this)
{
  *(_QWORD *)this = &off_251362060;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251362060;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

double CMMsl::PearlAttitude::PearlAttitude(CMMsl::PearlAttitude *this)
{
  double result;

  *(_QWORD *)this = &off_25135FD60;
  *((_DWORD *)this + 31) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_25135FD60;
  *((_DWORD *)this + 31) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  return result;
}

uint64_t CMMsl::RotationRate::RotationRate(uint64_t this)
{
  *(_QWORD *)this = &off_251360818;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251360818;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

_QWORD *CMMsl::WorkoutRecorderWatchOrientationSettings::WorkoutRecorderWatchOrientationSettings(_QWORD *this)
{
  *this = &off_2513621E8;
  this[1] = 0;
  return this;
}

{
  *this = &off_2513621E8;
  this[1] = 0;
  return this;
}

_QWORD *CMMsl::WifiScanResults::WifiScanResults(_QWORD *this)
{
  *this = &off_251361D88;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &off_251361D88;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

_QWORD *CMMsl::WorkoutRecorderWifiScanResults::WorkoutRecorderWifiScanResults(_QWORD *this)
{
  *this = &off_251362220;
  this[1] = 0;
  return this;
}

{
  *this = &off_251362220;
  this[1] = 0;
  return this;
}

_QWORD *CMMsl::WorkoutRecorderPressure::WorkoutRecorderPressure(_QWORD *this)
{
  *this = &off_251362140;
  this[1] = 0;
  return this;
}

{
  *this = &off_251362140;
  this[1] = 0;
  return this;
}

uint64_t CMMsl::VisionCompassBias::VisionCompassBias(uint64_t this)
{
  *(_QWORD *)this = &off_251361A08;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 76) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251361A08;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 76) = 0;
  return this;
}

double CMMsl::VIOEstimation::VIOEstimation(CMMsl::VIOEstimation *this)
{
  double result;

  *(_QWORD *)this = &off_251361730;
  *((_QWORD *)this + 42) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_251361730;
  *((_QWORD *)this + 42) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  return result;
}

double CMMsl::LSLHeadingEstimation::LSLHeadingEstimation(CMMsl::LSLHeadingEstimation *this)
{
  double result;

  *(_QWORD *)this = &off_25135EF60;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  *(_QWORD *)&result = 0xFFFFFFFFLL;
  *((_QWORD *)this + 23) = 0xFFFFFFFFLL;
  *((_DWORD *)this + 48) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_25135EF60;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  *(_QWORD *)&result = 0xFFFFFFFFLL;
  *((_QWORD *)this + 23) = 0xFFFFFFFFLL;
  *((_DWORD *)this + 48) = 0;
  return result;
}

uint64_t CMMsl::MovementStats::MovementStats(uint64_t this)
{
  *(_QWORD *)this = &off_25135F628;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135F628;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

uint64_t CMMsl::StepCountEntry::StepCountEntry(uint64_t this)
{
  *(_QWORD *)this = &off_2513612D0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 56) = 0;
  *(_QWORD *)(this + 72) = 0;
  *(_DWORD *)(this + 152) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_2513612D0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 56) = 0;
  *(_QWORD *)(this + 72) = 0;
  *(_DWORD *)(this + 152) = 0;
  return this;
}

_QWORD *CMMsl::MobilityBoutMetrics::MobilityBoutMetrics(_QWORD *this)
{
  *this = &off_25135F318;
  this[23] = 0;
  return this;
}

{
  *this = &off_25135F318;
  this[23] = 0;
  return this;
}

uint64_t CMMsl::VIOPose::VIOPose(uint64_t this)
{
  *(_QWORD *)this = &off_251361768;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 112) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251361768;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 112) = 0;
  return this;
}

_QWORD *CMMsl::SignalEnvironment::SignalEnvironment(_QWORD *this)
{
  *this = &off_251360D20;
  this[1] = 0;
  return this;
}

{
  *this = &off_251360D20;
  this[1] = 0;
  return this;
}

double CMMsl::VIOReplayPose::VIOReplayPose(CMMsl::VIOReplayPose *this)
{
  double result;

  *(_QWORD *)this = &off_2513617A0;
  *((_DWORD *)this + 16) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_2513617A0;
  *((_DWORD *)this + 16) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

double CMMsl::VisualStateMeasurement::VisualStateMeasurement(CMMsl::VisualStateMeasurement *this)
{
  double result;

  *(_QWORD *)this = &off_251361AE8;
  *((_DWORD *)this + 24) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_251361AE8;
  *((_DWORD *)this + 24) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  return result;
}

double CMMsl::KappaTriggerDebug::KappaTriggerDebug(CMMsl::KappaTriggerDebug *this)
{
  double result;

  *(_QWORD *)this = &off_25135EDA0;
  *((_DWORD *)this + 30) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_25135EDA0;
  *((_DWORD *)this + 30) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  return result;
}

double CMMsl::KappaDirectionOfTravel::KappaDirectionOfTravel(CMMsl::KappaDirectionOfTravel *this)
{
  double result;

  *(_QWORD *)this = &off_25135E828;
  *((_DWORD *)this + 36) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_25135E828;
  *((_DWORD *)this + 36) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

uint64_t CMMsl::KappaSteps::KappaSteps(uint64_t this)
{
  *(_QWORD *)this = &off_25135ECC0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135ECC0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

_QWORD *CMMsl::SignificantUserInteraction::SignificantUserInteraction(_QWORD *this)
{
  *this = &off_251360D58;
  this[2] = 0;
  return this;
}

{
  *this = &off_251360D58;
  this[2] = 0;
  return this;
}

uint64_t CMMsl::KappaRoads::KappaRoads(uint64_t this)
{
  *(_QWORD *)this = &off_25135EBA8;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135EBA8;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t CMMsl::UserStudyEvent::UserStudyEvent(uint64_t this)
{
  *(_QWORD *)this = &off_2513616F8;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_2513616F8;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t CMMsl::TempestPoCAuxiliaryDeviceMotion::TempestPoCAuxiliaryDeviceMotion(uint64_t this)
{
  *(_QWORD *)this = &off_251361570;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 80) = 0;
  *(_DWORD *)(this + 104) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251361570;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 80) = 0;
  *(_DWORD *)(this + 104) = 0;
  return this;
}

uint64_t CMMsl::TempestPoCListenerOrientation::TempestPoCListenerOrientation(uint64_t this)
{
  *(_QWORD *)this = &off_2513615A8;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 96) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_2513615A8;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 96) = 0;
  return this;
}

_QWORD *CMMsl::WorkoutRecorderAccel800::WorkoutRecorderAccel800(_QWORD *this)
{
  *this = &off_251361ED8;
  this[1] = 0;
  return this;
}

{
  *this = &off_251361ED8;
  this[1] = 0;
  return this;
}

_QWORD *CMMsl::WorkoutRecorderALSData::WorkoutRecorderALSData(_QWORD *this)
{
  *this = &off_251361E68;
  this[1] = 0;
  return this;
}

{
  *this = &off_251361E68;
  this[1] = 0;
  return this;
}

double CMMsl::VisualLocalization::VisualLocalization(CMMsl::VisualLocalization *this)
{
  double result;

  *(_QWORD *)this = &off_251361A40;
  *((_DWORD *)this + 25) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_251361A40;
  *((_DWORD *)this + 25) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

uint64_t CMMsl::SoundPressureLevel::SoundPressureLevel(uint64_t this)
{
  *(_QWORD *)this = &off_251361068;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251361068;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CMMsl::MotionLocation::MotionLocation(uint64_t this)
{
  *(_QWORD *)this = &off_25135F4D8;
  *(_DWORD *)(this + 220) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135F4D8;
  *(_DWORD *)(this + 220) = 0;
  return this;
}

uint64_t CMMsl::MotionActivity::MotionActivity(uint64_t this)
{
  *(_QWORD *)this = &off_25135F3C0;
  *(_DWORD *)(this + 116) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135F3C0;
  *(_DWORD *)(this + 116) = 0;
  return this;
}

double CMMsl::KappaTrigger::KappaTrigger(CMMsl::KappaTrigger *this)
{
  double result;

  *(_QWORD *)this = &off_25135ED30;
  *((_DWORD *)this + 53) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_25135ED30;
  *((_DWORD *)this + 53) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  return result;
}

uint64_t CMMsl::RelDMInSystemConfig::RelDMInSystemConfig(uint64_t this)
{
  *(_QWORD *)this = &off_251360690;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251360690;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

_QWORD *CMMsl::JointLinkModelPose::JointLinkModelPose(_QWORD *this)
{
  *this = &off_25135E588;
  this[1] = 0;
  return this;
}

{
  *this = &off_25135E588;
  this[1] = 0;
  return this;
}

_QWORD *CMMsl::ModelBasedBioMotionClassification::ModelBasedBioMotionClassification(_QWORD *this)
{
  *this = &off_25135F388;
  this[1] = 0;
  return this;
}

{
  *this = &off_25135F388;
  this[1] = 0;
  return this;
}

_QWORD *CMMsl::MLBasedBioMotionClassification::MLBasedBioMotionClassification(_QWORD *this)
{
  *this = &off_25135F120;
  this[1] = 0;
  return this;
}

{
  *this = &off_25135F120;
  this[1] = 0;
  return this;
}

_QWORD *CMMsl::JointLinkModelPredictedPose::JointLinkModelPredictedPose(_QWORD *this)
{
  *this = &off_25135E5C0;
  this[1] = 0;
  return this;
}

{
  *this = &off_25135E5C0;
  this[1] = 0;
  return this;
}

_QWORD *CMMsl::PressureCompensated::PressureCompensated(_QWORD *this)
{
  *this = &off_2513603F0;
  this[1] = 0;
  return this;
}

{
  *this = &off_2513603F0;
  this[1] = 0;
  return this;
}

uint64_t CMMsl::VO2MaxOutput::VO2MaxOutput(uint64_t this)
{
  *(_QWORD *)this = &off_251361848;
  *(_DWORD *)(this + 72) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251361848;
  *(_DWORD *)(this + 72) = 0;
  return this;
}

uint64_t CMMsl::MagneticAccessoryType1::MagneticAccessoryType1(uint64_t this)
{
  *(_QWORD *)this = &off_25135F190;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135F190;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t CMMsl::MagneticAccessoryType2::MagneticAccessoryType2(uint64_t this)
{
  *(_QWORD *)this = &off_25135F1C8;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135F1C8;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

uint64_t CMMsl::PressureCalibration::PressureCalibration(uint64_t this)
{
  *(_QWORD *)this = &off_2513603B8;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_2513603B8;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

_QWORD *CMMsl::WorkoutRecorderMagnetometer::WorkoutRecorderMagnetometer(_QWORD *this)
{
  *this = &off_2513620D0;
  this[1] = 0;
  return this;
}

{
  *this = &off_2513620D0;
  this[1] = 0;
  return this;
}

_QWORD *CMMsl::WorkoutRecorderCompassCalibration::WorkoutRecorderCompassCalibration(_QWORD *this)
{
  *this = &off_251361F80;
  this[1] = 0;
  return this;
}

{
  *this = &off_251361F80;
  this[1] = 0;
  return this;
}

_QWORD *CMMsl::RawAudio::RawAudio(_QWORD *this)
{
  *this = &off_251360658;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &off_251360658;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

uint64_t CMMsl::ODTPose::ODTPose(uint64_t this)
{
  *(_QWORD *)this = &off_25135F740;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135F740;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t CMMsl::PencilTipForce::PencilTipForce(uint64_t this)
{
  *(_QWORD *)this = &off_25135FFC8;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135FFC8;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t CMMsl::PencilTouch::PencilTouch(uint64_t this)
{
  *(_QWORD *)this = &off_251360000;
  *(_DWORD *)(this + 88) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251360000;
  *(_DWORD *)(this + 88) = 0;
  return this;
}

_QWORD *CMMsl::Timestamp::Timestamp(_QWORD *this)
{
  *this = &off_2513615E0;
  this[2] = 0;
  return this;
}

{
  *this = &off_2513615E0;
  this[2] = 0;
  return this;
}

double CMMsl::WalkingSteadinessClassification::WalkingSteadinessClassification(CMMsl::WalkingSteadinessClassification *this)
{
  double result;

  *(_QWORD *)this = &off_251361BC8;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 61) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_QWORD *)this + 21) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_251361BC8;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 61) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_QWORD *)this + 21) = 0;
  return result;
}

uint64_t CMMsl::SteadinessModelResult::SteadinessModelResult(uint64_t this)
{
  *(_QWORD *)this = &off_2513611F0;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_2513611F0;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

uint64_t CMMsl::SteadinessEvent::SteadinessEvent(uint64_t this)
{
  *(_QWORD *)this = &off_2513610D8;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_2513610D8;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

uint64_t CMMsl::SteadinessModelGaitBaselineFeatures::SteadinessModelGaitBaselineFeatures(uint64_t this)
{
  *(_QWORD *)this = &off_251361180;
  *(_DWORD *)(this + 88) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251361180;
  *(_DWORD *)(this + 88) = 0;
  return this;
}

uint64_t CMMsl::SteadinessModelContinuousWalkingFeatures::SteadinessModelContinuousWalkingFeatures(uint64_t this)
{
  *(_QWORD *)this = &off_251361148;
  *(_DWORD *)(this + 176) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251361148;
  *(_DWORD *)(this + 176) = 0;
  return this;
}

uint64_t CMMsl::SteadinessModelTemporalDispersionFeatures::SteadinessModelTemporalDispersionFeatures(uint64_t this)
{
  *(_QWORD *)this = &off_251361228;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251361228;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t CMMsl::SteadinessModelTemporalEntropyFeatures::SteadinessModelTemporalEntropyFeatures(uint64_t this)
{
  *(_QWORD *)this = &off_251361260;
  *(_DWORD *)(this + 216) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251361260;
  *(_DWORD *)(this + 216) = 0;
  return this;
}

uint64_t CMMsl::SteadinessModelBalanceFeatures::SteadinessModelBalanceFeatures(uint64_t this)
{
  *(_QWORD *)this = &off_251361110;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251361110;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t CMMsl::MagnetometerReset::MagnetometerReset(uint64_t this)
{
  *(_QWORD *)this = &off_25135F270;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135F270;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

_QWORD *CMMsl::WorkoutRecorderWatchOnWristStatus::WorkoutRecorderWatchOnWristStatus(_QWORD *this)
{
  *this = &off_2513621B0;
  this[1] = 0;
  return this;
}

{
  *this = &off_2513621B0;
  this[1] = 0;
  return this;
}

uint64_t CMMsl::LiftToWakeOnHeadStatus::LiftToWakeOnHeadStatus(uint64_t this)
{
  *(_QWORD *)this = &off_25135F008;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135F008;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t CMMsl::StepCountEntryAddition::StepCountEntryAddition(uint64_t this)
{
  *(_QWORD *)this = &off_251361308;
  *(_DWORD *)(this + 72) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251361308;
  *(_DWORD *)(this + 72) = 0;
  return this;
}

uint64_t CMMsl::StepDistanceFusionResult::StepDistanceFusionResult(uint64_t this)
{
  *(_DWORD *)(this + 100) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = &off_251361340;
  return this;
}

{
  *(_DWORD *)(this + 100) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = &off_251361340;
  return this;
}

_QWORD *CMMsl::Skeleton3D::Skeleton3D(_QWORD *this)
{
  *this = &off_251360F50;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &off_251360F50;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

uint64_t CMMsl::LockScreenStatus::LockScreenStatus(uint64_t this)
{
  *(_QWORD *)this = &off_25135F0E8;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135F0E8;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

uint64_t CMMsl::PowerManagementUserActivity::PowerManagementUserActivity(uint64_t this)
{
  *(_QWORD *)this = &off_2513601C0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_2513601C0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CMMsl::LiftToWakeState::LiftToWakeState(uint64_t this)
{
  *(_QWORD *)this = &off_25135F040;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135F040;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t CMMsl::ViewObstructedState::ViewObstructedState(uint64_t this)
{
  *(_QWORD *)this = &off_2513619D0;
  *(_DWORD *)(this + 84) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_2513619D0;
  *(_DWORD *)(this + 84) = 0;
  return this;
}

_QWORD *CMMsl::RunningFormMetrics::RunningFormMetrics(_QWORD *this)
{
  *this = &off_2513608C0;
  this[28] = 0;
  return this;
}

{
  *this = &off_2513608C0;
  this[28] = 0;
  return this;
}

_QWORD *CMMsl::WorkoutSessionPriors::WorkoutSessionPriors(_QWORD *this)
{
  *this = &off_2513622C8;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &off_2513622C8;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

_QWORD *CMMsl::WorkoutRecorderWorkoutSessionPriors::WorkoutRecorderWorkoutSessionPriors(_QWORD *this)
{
  *this = &off_251362290;
  this[1] = 0;
  return this;
}

{
  *this = &off_251362290;
  this[1] = 0;
  return this;
}

uint64_t CMMsl::PDRImpulse::PDRImpulse(uint64_t this)
{
  *(_QWORD *)this = &off_25135FAF8;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135FAF8;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CMMsl::PocketDetectionPacket::PocketDetectionPacket(uint64_t this)
{
  *(_QWORD *)this = &off_2513600A8;
  *(_DWORD *)(this + 84) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_2513600A8;
  *(_DWORD *)(this + 84) = 0;
  return this;
}

uint64_t CMMsl::LiftToWakeFeaturesNeo::LiftToWakeFeaturesNeo(uint64_t this)
{
  *(_QWORD *)this = &off_25135EFD0;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135EFD0;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t CMMsl::LiftToWakeStatusNeo::LiftToWakeStatusNeo(uint64_t this)
{
  *(_QWORD *)this = &off_25135F078;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135F078;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

uint64_t CMMsl::RunningPower::RunningPower(uint64_t this)
{
  *(_QWORD *)this = &off_2513608F8;
  *(_DWORD *)(this + 128) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_2513608F8;
  *(_DWORD *)(this + 128) = 0;
  return this;
}

_QWORD *CMMsl::MotionContextActivity::MotionContextActivity(_QWORD *this)
{
  *this = &off_25135F430;
  this[1] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &off_25135F430;
  this[1] = 0;
  this[3] = 0;
  return this;
}

_QWORD *CMMsl::PDRAlgType::PDRAlgType(_QWORD *this)
{
  *this = &off_25135F858;
  this[1] = 0;
  return this;
}

{
  *this = &off_25135F858;
  this[1] = 0;
  return this;
}

uint64_t CMMsl::PdrMLModelOutput::PdrMLModelOutput(uint64_t this)
{
  *(_QWORD *)this = &off_25135FD28;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135FD28;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

_QWORD *CMMsl::WorkoutRecorderAveragedALSData::WorkoutRecorderAveragedALSData(_QWORD *this)
{
  *this = &off_251361F10;
  this[1] = 0;
  return this;
}

{
  *this = &off_251361F10;
  this[1] = 0;
  return this;
}

uint64_t CMMsl::StrideCalEntry::StrideCalEntry(uint64_t this)
{
  *(_QWORD *)this = &off_251361458;
  *(_DWORD *)(this + 92) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251361458;
  *(_DWORD *)(this + 92) = 0;
  return this;
}

uint64_t CMMsl::RunningSpeedKFResult::RunningSpeedKFResult(uint64_t this)
{
  *(_QWORD *)this = &off_251360968;
  *(_DWORD *)(this + 188) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251360968;
  *(_DWORD *)(this + 188) = 0;
  return this;
}

uint64_t CMMsl::ProxPDP::ProxPDP(uint64_t this)
{
  *(_QWORD *)this = &off_251360620;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251360620;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

uint64_t CMMsl::KeyboardMotionFeatures::KeyboardMotionFeatures(uint64_t this)
{
  *(_QWORD *)this = &off_25135EEB8;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135EEB8;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t CMMsl::KeyboardMotionState::KeyboardMotionState(uint64_t this)
{
  *(_QWORD *)this = &off_25135EEF0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135EEF0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CMMsl::KeyboardKeyPress::KeyboardKeyPress(uint64_t this)
{
  *(_QWORD *)this = &off_25135EE80;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135EE80;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CMMsl::WakeGestureNotification::WakeGestureNotification(uint64_t this)
{
  *(_QWORD *)this = &off_251361B20;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251361B20;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

uint64_t CMMsl::ProxBaselineEstimatorState::ProxBaselineEstimatorState(uint64_t this)
{
  *(_QWORD *)this = &off_2513605B0;
  *(_DWORD *)(this + 88) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_2513605B0;
  *(_DWORD *)(this + 88) = 0;
  return this;
}

uint64_t CMMsl::RhythmicGnssOperatorStatus::RhythmicGnssOperatorStatus(uint64_t this)
{
  *(_QWORD *)this = &off_2513607E0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_2513607E0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t CMMsl::KeyboardMotionTrackpad::KeyboardMotionTrackpad(uint64_t this)
{
  *(_QWORD *)this = &off_25135EF28;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135EF28;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CMMsl::KeyboardAttached::KeyboardAttached(uint64_t this)
{
  *(_QWORD *)this = &off_25135EE48;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135EE48;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CMMsl::Skeleton2D::Skeleton2D(uint64_t this)
{
  *(_QWORD *)this = &off_251360EE0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251360EE0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

uint64_t CMMsl::Skeleton3DRetargeted::Skeleton3DRetargeted(uint64_t this)
{
  *(_QWORD *)this = &off_251360FF8;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251360FF8;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

uint64_t CMMsl::Skeleton3DLifted::Skeleton3DLifted(uint64_t this)
{
  *(_QWORD *)this = &off_251360F88;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251360F88;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

uint64_t CMMsl::WatchHeartRateData::WatchHeartRateData(uint64_t this)
{
  *(_QWORD *)this = &off_251361CA8;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251361CA8;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t CMMsl::WatchActiveCalories::WatchActiveCalories(uint64_t this)
{
  *(_QWORD *)this = &off_251361C00;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251361C00;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t CMMsl::WatchBasalCalories::WatchBasalCalories(uint64_t this)
{
  *(_QWORD *)this = &off_251361C38;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251361C38;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t CMMsl::TrackRunData::TrackRunData(uint64_t this)
{
  *(_QWORD *)this = &off_251361650;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251361650;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t CMMsl::MapsRouteHintData::MapsRouteHintData(uint64_t this)
{
  *(_QWORD *)this = &off_25135F2A8;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135F2A8;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

_QWORD *CMMsl::WorkoutRecorderFitnessMachineData::WorkoutRecorderFitnessMachineData(_QWORD *this)
{
  *this = &off_251362028;
  this[1] = 0;
  return this;
}

{
  *this = &off_251362028;
  this[1] = 0;
  return this;
}

double CMMsl::PedestrianFenceExit::PedestrianFenceExit(CMMsl::PedestrianFenceExit *this)
{
  double result;

  *(_QWORD *)this = &off_25135FE08;
  *(_QWORD *)&result = 0xFFFFFFFFLL;
  *(_QWORD *)((char *)this + 28) = 0xFFFFFFFFLL;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_25135FE08;
  *(_QWORD *)&result = 0xFFFFFFFFLL;
  *(_QWORD *)((char *)this + 28) = 0xFFFFFFFFLL;
  return result;
}

uint64_t CMMsl::PhysicalEffortInput::PhysicalEffortInput(uint64_t this)
{
  *(_QWORD *)this = &off_251360038;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251360038;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t CMMsl::PhysicalEffortSample::PhysicalEffortSample(uint64_t this)
{
  *(_QWORD *)this = &off_251360070;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251360070;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

uint64_t CMMsl::PedestrianCalorieModelDebugging::PedestrianCalorieModelDebugging(uint64_t this)
{
  *(_QWORD *)this = &off_25135FDD0;
  *(_DWORD *)(this + 116) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135FDD0;
  *(_DWORD *)(this + 116) = 0;
  return this;
}

uint64_t CMMsl::WorkoutActivity::WorkoutActivity(uint64_t this)
{
  *(_QWORD *)this = &off_251361DC0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251361DC0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

double CMMsl::PencilDeviceMotion::PencilDeviceMotion(CMMsl::PencilDeviceMotion *this)
{
  double result;

  *(_QWORD *)this = &off_25135FEB0;
  *((_DWORD *)this + 12) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_25135FEB0;
  *((_DWORD *)this + 12) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

uint64_t CMMsl::PencilFusionResult::PencilFusionResult(uint64_t this)
{
  *(_QWORD *)this = &off_25135FF58;
  *(_DWORD *)(this + 76) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135FF58;
  *(_DWORD *)(this + 76) = 0;
  return this;
}

uint64_t CMMsl::SteadinessModelHarmonicFeatures::SteadinessModelHarmonicFeatures(uint64_t this)
{
  *(_QWORD *)this = &off_2513611B8;
  *(_DWORD *)(this + 248) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_2513611B8;
  *(_DWORD *)(this + 248) = 0;
  return this;
}

uint64_t CMMsl::PencilFusionReplayResult::PencilFusionReplayResult(uint64_t this)
{
  *(_QWORD *)this = &off_25135FF20;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135FF20;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

uint64_t CMMsl::MobilitySmoothedGaitMetrics::MobilitySmoothedGaitMetrics(uint64_t this)
{
  *(_QWORD *)this = &off_25135F350;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135F350;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t CMMsl::WatchEnclosureMaterial::WatchEnclosureMaterial(uint64_t this)
{
  *(_QWORD *)this = &off_251361C70;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251361C70;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

double CMMsl::MotionLoiAltitudeData::MotionLoiAltitudeData(CMMsl::MotionLoiAltitudeData *this)
{
  double result;

  *(_QWORD *)this = &off_25135F510;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_25135F510;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

double CMMsl::PostureJoint::PostureJoint(CMMsl::PostureJoint *this)
{
  double result;

  *(_QWORD *)this = &off_251360150;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_251360150;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = 0;
  return result;
}

_QWORD *CMMsl::PostureSkeleton::PostureSkeleton(_QWORD *this)
{
  *this = &off_251360188;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &off_251360188;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

_QWORD *CMMsl::WorkoutRecorderFaceCovered::WorkoutRecorderFaceCovered(_QWORD *this)
{
  *this = &off_251361FF0;
  this[1] = 0;
  return this;
}

{
  *this = &off_251361FF0;
  this[1] = 0;
  return this;
}

_QWORD *CMMsl::StreamingHighFrequencyHeartRateData::StreamingHighFrequencyHeartRateData(_QWORD *this)
{
  *this = &off_2513613E8;
  this[1] = 0;
  return this;
}

{
  *this = &off_2513613E8;
  this[1] = 0;
  return this;
}

uint64_t CMMsl::UltraFastAccel::UltraFastAccel(uint64_t this)
{
  *(_QWORD *)this = &off_2513616C0;
  *(_QWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_2513616C0;
  *(_QWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

_QWORD *CMMsl::PressureOscarEmu::PressureOscarEmu(_QWORD *this)
{
  *this = &off_251360508;
  this[1] = 0;
  return this;
}

{
  *this = &off_251360508;
  this[1] = 0;
  return this;
}

_QWORD *CMMsl::PressureGps::PressureGps(_QWORD *this)
{
  *this = &off_2513604D0;
  this[1] = 0;
  return this;
}

{
  *this = &off_2513604D0;
  this[1] = 0;
  return this;
}

_QWORD *CMMsl::PressureFiltered::PressureFiltered(_QWORD *this)
{
  *this = &off_251360428;
  this[1] = 0;
  return this;
}

{
  *this = &off_251360428;
  this[1] = 0;
  return this;
}

uint64_t CMMsl::Prox::Prox(uint64_t this)
{
  *(_QWORD *)this = &off_251360578;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251360578;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

_QWORD *CMMsl::MotionStateUpdate::MotionStateUpdate(_QWORD *this)
{
  *this = &off_25135F580;
  this[4] = 0;
  this[24] = 0;
  return this;
}

{
  *this = &off_25135F580;
  this[4] = 0;
  this[24] = 0;
  return this;
}

uint64_t CMMsl::TouchOscarEmu::TouchOscarEmu(uint64_t this)
{
  *(_QWORD *)this = &off_251361618;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251361618;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CMMsl::SessionOverride::SessionOverride(uint64_t this)
{
  *(_QWORD *)this = &off_251360CE8;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251360CE8;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CMMsl::MotionHint::MotionHint(uint64_t this)
{
  *(_QWORD *)this = &off_25135F4A0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135F4A0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t CMMsl::LocationOscarEmu::LocationOscarEmu(uint64_t this)
{
  *(_QWORD *)this = &off_25135F0B0;
  *(_DWORD *)(this + 100) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135F0B0;
  *(_DWORD *)(this + 100) = 0;
  return this;
}

double CMMsl::NonlinearBiasFit::NonlinearBiasFit(CMMsl::NonlinearBiasFit *this)
{
  double result;

  *(_QWORD *)this = &off_25135F708;
  *((_DWORD *)this + 45) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_QWORD *)this + 21) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_25135F708;
  *((_DWORD *)this + 45) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_QWORD *)this + 21) = 0;
  return result;
}

uint64_t CMMsl::NatalieData::NatalieData(uint64_t this)
{
  *(_QWORD *)this = &off_25135F6D0;
  *(_DWORD *)(this + 68) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135F6D0;
  *(_DWORD *)(this + 68) = 0;
  return this;
}

uint64_t CMMsl::WorkoutEvent::WorkoutEvent(uint64_t this)
{
  *(_QWORD *)this = &off_251361DF8;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251361DF8;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

uint64_t CMMsl::OnsetHeartRateData::OnsetHeartRateData(uint64_t this)
{
  *(_QWORD *)this = &off_25135F7E8;
  *(_DWORD *)(this + 68) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135F7E8;
  *(_DWORD *)(this + 68) = 0;
  return this;
}

_QWORD *CMMsl::MotionWifiLocation::MotionWifiLocation(_QWORD *this)
{
  *this = &off_25135F5F0;
  this[1] = 0;
  return this;
}

{
  *this = &off_25135F5F0;
  this[1] = 0;
  return this;
}

uint64_t CMMsl::StrideCalBin::StrideCalBin(uint64_t this)
{
  *(_QWORD *)this = &off_251361420;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251361420;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t CMMsl::Odometer::Odometer(uint64_t this)
{
  *(_QWORD *)this = &off_25135F778;
  *(_DWORD *)(this + 100) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135F778;
  *(_DWORD *)(this + 100) = 0;
  return this;
}

uint64_t CMMsl::MetsInfo::MetsInfo(uint64_t this)
{
  *(_QWORD *)this = &off_25135F2E0;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135F2E0;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t CMMsl::VibrationEvent::VibrationEvent(uint64_t this)
{
  *(_QWORD *)this = &off_2513618F0;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_2513618F0;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

uint64_t CMMsl::StepCadenceToStrideLengthBin::StepCadenceToStrideLengthBin(uint64_t this)
{
  *(_QWORD *)this = &off_251361298;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251361298;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t CMMsl::WatchOrientationSettings::WatchOrientationSettings(uint64_t this)
{
  *(_QWORD *)this = &off_251361D18;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251361D18;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CMMsl::MotionWifiAssociation::MotionWifiAssociation(uint64_t this)
{
  *(_QWORD *)this = &off_25135F5B8;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135F5B8;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

uint64_t CMMsl::MotionLoiData::MotionLoiData(uint64_t this)
{
  *(_QWORD *)this = &off_25135F548;
  *(_DWORD *)(this + 84) = -1;
  *(_DWORD *)(this + 92) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135F548;
  *(_DWORD *)(this + 84) = -1;
  *(_DWORD *)(this + 92) = 0;
  return this;
}

uint64_t CMMsl::PressureFilteredNoTemperature::PressureFilteredNoTemperature(uint64_t this)
{
  *(_QWORD *)this = &off_251360498;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251360498;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

double CMMsl::TapDetect::TapDetect(CMMsl::TapDetect *this)
{
  double result;

  *(_QWORD *)this = &off_251361538;
  *((_DWORD *)this + 7) = -2;
  result = NAN;
  *(_OWORD *)((char *)this + 52) = xmmword_242924C70;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_251361538;
  *((_DWORD *)this + 7) = -2;
  result = NAN;
  *(_OWORD *)((char *)this + 52) = xmmword_242924C70;
  return result;
}

uint64_t CMMsl::TapAccept::TapAccept(uint64_t this)
{
  *(_QWORD *)this = &off_251361500;
  *(_DWORD *)(this + 36) = -1;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251361500;
  *(_DWORD *)(this + 36) = -1;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

double CMMsl::RelativeDeviceMotionInternal::RelativeDeviceMotionInternal(CMMsl::RelativeDeviceMotionInternal *this)
{
  double result;

  *(_QWORD *)this = &off_251360738;
  *((_DWORD *)this + 41) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_251360738;
  *((_DWORD *)this + 41) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

uint64_t CMMsl::RelativeGravityCorrection::RelativeGravityCorrection(uint64_t this)
{
  *(_QWORD *)this = &off_2513607A8;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_2513607A8;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CMMsl::RelativeGravityConstraints::RelativeGravityConstraints(uint64_t this)
{
  *(_QWORD *)this = &off_251360770;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251360770;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

_QWORD *CMMsl::ZeroVelocityCorrection::ZeroVelocityCorrection(_QWORD *this)
{
  *this = &off_251362300;
  this[1] = 0;
  return this;
}

{
  *this = &off_251362300;
  this[1] = 0;
  return this;
}

uint64_t CMMsl::PredictedRelativeDeviceMotion::PredictedRelativeDeviceMotion(uint64_t this)
{
  *(_QWORD *)this = &off_251360348;
  *(_DWORD *)(this + 80) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251360348;
  *(_DWORD *)(this + 80) = 0;
  return this;
}

uint64_t CMMsl::MovementStatsSignal::MovementStatsSignal(uint64_t this)
{
  *(_QWORD *)this = &off_25135F698;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135F698;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

double CMMsl::MovementStatsGravityProjection::MovementStatsGravityProjection(CMMsl::MovementStatsGravityProjection *this)
{
  double result;

  *(_QWORD *)this = &off_25135F660;
  *((_DWORD *)this + 19) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_25135F660;
  *((_DWORD *)this + 19) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

_QWORD *CMMsl::VisualLocalizationAttitudeCorrection::VisualLocalizationAttitudeCorrection(_QWORD *this)
{
  *this = &off_251361AB0;
  this[1] = 0;
  return this;
}

{
  *this = &off_251361AB0;
  this[1] = 0;
  return this;
}

uint64_t CMMsl::VisualLocalizationAttitudeConstraints::VisualLocalizationAttitudeConstraints(uint64_t this)
{
  *(_QWORD *)this = &off_251361A78;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251361A78;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

uint64_t CMMsl::RelativeDeviceMotionCorrelatedMotion::RelativeDeviceMotionCorrelatedMotion(uint64_t this)
{
  *(_QWORD *)this = &off_251360700;
  *(_DWORD *)(this + 128) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251360700;
  *(_DWORD *)(this + 128) = 0;
  return this;
}

_QWORD *CMMsl::RelativeDeviceMotionComplexTransition::RelativeDeviceMotionComplexTransition(_QWORD *this)
{
  *this = &off_2513606C8;
  *(_QWORD *)((char *)this + 188) = 0;
  return this;
}

{
  *this = &off_2513606C8;
  *(_QWORD *)((char *)this + 188) = 0;
  return this;
}

uint64_t CMMsl::WalkingDetectionResult::WalkingDetectionResult(uint64_t this)
{
  *(_QWORD *)this = &off_251361B90;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251361B90;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

uint64_t CMMsl::SitStandDetectorFeatures::SitStandDetectorFeatures(uint64_t this)
{
  *(_QWORD *)this = &off_251360E00;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251360E00;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

_QWORD *CMMsl::SitStandDetectorTransition::SitStandDetectorTransition(_QWORD *this)
{
  *this = &off_251360EA8;
  this[2] = 0;
  return this;
}

{
  *this = &off_251360EA8;
  this[2] = 0;
  return this;
}

uint64_t CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand::SitStandDetectorPosteriorBufferStatsForSitToStand(uint64_t this)
{
  *(_QWORD *)this = &off_251360E38;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251360E38;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit::SitStandDetectorPosteriorBufferStatsForStandToSit(uint64_t this)
{
  *(_QWORD *)this = &off_251360E70;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251360E70;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

_QWORD *CMMsl::SpatialEvent::SpatialEvent(_QWORD *this)
{
  *this = &off_2513610A0;
  this[2] = 0;
  return this;
}

{
  *this = &off_2513610A0;
  this[2] = 0;
  return this;
}

uint64_t CMMsl::JitterBufferLevel::JitterBufferLevel(uint64_t this)
{
  *(_QWORD *)this = &off_25135E550;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135E550;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CMMsl::PressureFiltered1HzLowPass::PressureFiltered1HzLowPass(uint64_t this)
{
  *(_QWORD *)this = &off_251360460;
  *(_QWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251360460;
  *(_QWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t CMMsl::MotionActivityReplay::MotionActivityReplay(uint64_t this)
{
  *(_QWORD *)this = &off_25135F3F8;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135F3F8;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

uint64_t CMMsl::LegacyALS5CHInput::LegacyALS5CHInput(uint64_t this)
{
  *(_QWORD *)this = &off_25135EF98;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135EF98;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t CMMsl::Orientation::Orientation(uint64_t this)
{
  *(_QWORD *)this = &off_25135F820;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135F820;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CMMsl::KappaAudioResult::KappaAudioResult(uint64_t this)
{
  *(_QWORD *)this = &off_25135E780;
  *(_DWORD *)(this + 108) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135E780;
  *(_DWORD *)(this + 108) = 0;
  return this;
}

uint64_t CMMsl::KappaBaroResult::KappaBaroResult(uint64_t this)
{
  *(_QWORD *)this = &off_25135E7B8;
  *(_DWORD *)(this + 152) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135E7B8;
  *(_DWORD *)(this + 152) = 0;
  return this;
}

uint64_t CMMsl::KappaGpsResult::KappaGpsResult(uint64_t this)
{
  *(_QWORD *)this = &off_25135E860;
  *(_DWORD *)(this + 132) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135E860;
  *(_DWORD *)(this + 132) = 0;
  return this;
}

uint64_t CMMsl::KappaPulseResult::KappaPulseResult(uint64_t this)
{
  *(_QWORD *)this = &off_25135EAC8;
  *(_DWORD *)(this + 324) = 0;
  *(_QWORD *)(this + 316) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135EAC8;
  *(_DWORD *)(this + 324) = 0;
  *(_QWORD *)(this + 316) = 0;
  return this;
}

_QWORD *CMMsl::KappaZgResult::KappaZgResult(_QWORD *this)
{
  *this = &off_25135EE10;
  *(_QWORD *)((char *)this + 164) = 0;
  return this;
}

{
  *this = &off_25135EE10;
  *(_QWORD *)((char *)this + 164) = 0;
  return this;
}

uint64_t CMMsl::KappaZgDetected::KappaZgDetected(uint64_t this)
{
  *(_QWORD *)this = &off_25135EDD8;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135EDD8;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CMMsl::KappaPulseInertialAccel::KappaPulseInertialAccel(uint64_t this)
{
  *(_QWORD *)this = &off_25135EA58;
  *(_DWORD *)(this + 80) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135EA58;
  *(_DWORD *)(this + 80) = 0;
  return this;
}

uint64_t CMMsl::KappaAirbagResult::KappaAirbagResult(uint64_t this)
{
  *(_QWORD *)this = &off_25135E748;
  *(_DWORD *)(this + 68) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135E748;
  *(_DWORD *)(this + 68) = 0;
  return this;
}

uint64_t CMMsl::KappaCrashResult::KappaCrashResult(uint64_t this)
{
  *(_QWORD *)this = &off_25135E7F0;
  *(_QWORD *)(this + 280) = 0;
  *(_DWORD *)(this + 288) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135E7F0;
  *(_QWORD *)(this + 280) = 0;
  *(_DWORD *)(this + 288) = 0;
  return this;
}

uint64_t CMMsl::KappaQuiescenceResult::KappaQuiescenceResult(uint64_t this)
{
  *(_QWORD *)this = &off_25135EB00;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135EB00;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t CMMsl::KappaRecoveryResult::KappaRecoveryResult(uint64_t this)
{
  *(_QWORD *)this = &off_25135EB38;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135EB38;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t CMMsl::KappaRolloverCrashResult::KappaRolloverCrashResult(uint64_t this)
{
  *(_QWORD *)this = &off_25135EC18;
  *(_DWORD *)(this + 324) = 0;
  *(_QWORD *)(this + 316) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135EC18;
  *(_DWORD *)(this + 324) = 0;
  *(_QWORD *)(this + 316) = 0;
  return this;
}

uint64_t CMMsl::KappaMildImpactResult::KappaMildImpactResult(uint64_t this)
{
  *(_QWORD *)this = &off_25135E978;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135E978;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t CMMsl::KappaLackOfMotionResult::KappaLackOfMotionResult(uint64_t this)
{
  *(_QWORD *)this = &off_25135E908;
  *(_DWORD *)(this + 92) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135E908;
  *(_DWORD *)(this + 92) = 0;
  return this;
}

_QWORD *CMMsl::KappaSevereCrashResult::KappaSevereCrashResult(_QWORD *this)
{
  *this = &off_25135EC50;
  *(_QWORD *)((char *)this + 364) = 0;
  *(_QWORD *)((char *)this + 356) = 0;
  return this;
}

{
  *this = &off_25135EC50;
  *(_QWORD *)((char *)this + 364) = 0;
  *(_QWORD *)((char *)this + 356) = 0;
  return this;
}

_QWORD *CMMsl::KappaLocalAudioResult::KappaLocalAudioResult(_QWORD *this)
{
  *this = &off_25135E940;
  *(_QWORD *)((char *)this + 172) = 0;
  return this;
}

{
  *this = &off_25135E940;
  *(_QWORD *)((char *)this + 172) = 0;
  return this;
}

uint64_t CMMsl::KappaRemoteAudioResult::KappaRemoteAudioResult(uint64_t this)
{
  *(_QWORD *)this = &off_25135EB70;
  *(_QWORD *)(this + 204) = 0;
  *(_DWORD *)(this + 212) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135EB70;
  *(_QWORD *)(this + 204) = 0;
  *(_DWORD *)(this + 212) = 0;
  return this;
}

uint64_t CMMsl::ViewObstructedMachineLearningDecision::ViewObstructedMachineLearningDecision(uint64_t this)
{
  *(_QWORD *)this = &off_251361928;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251361928;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CMMsl::ViewObstructedMachineLearningFeatures::ViewObstructedMachineLearningFeatures(uint64_t this)
{
  *(_QWORD *)this = &off_251361960;
  *(_DWORD *)(this + 116) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251361960;
  *(_DWORD *)(this + 116) = 0;
  return this;
}

uint64_t CMMsl::ViewObstructedMachineLearningProbabilities::ViewObstructedMachineLearningProbabilities(uint64_t this)
{
  *(_QWORD *)this = &off_251361998;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251361998;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

uint64_t CMMsl::RunningArmSwingSignals::RunningArmSwingSignals(uint64_t this)
{
  *(_QWORD *)this = &off_251360850;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251360850;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

uint64_t CMMsl::RunningCentripetalAccelSignals::RunningCentripetalAccelSignals(uint64_t this)
{
  *(_QWORD *)this = &off_251360888;
  *(_DWORD *)(this + 120) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251360888;
  *(_DWORD *)(this + 120) = 0;
  return this;
}

uint64_t CMMsl::RunningRotationAxis::RunningRotationAxis(uint64_t this)
{
  *(_QWORD *)this = &off_251360930;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251360930;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

uint64_t CMMsl::RunningVerticalOscillationSignals::RunningVerticalOscillationSignals(uint64_t this)
{
  *(_QWORD *)this = &off_251360A48;
  *(_DWORD *)(this + 208) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251360A48;
  *(_DWORD *)(this + 208) = 0;
  return this;
}

uint64_t CMMsl::RunningVerticalOscillation::RunningVerticalOscillation(uint64_t this)
{
  *(_QWORD *)this = &off_2513609D8;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_2513609D8;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

double CMMsl::KappaSpinResult::KappaSpinResult(CMMsl::KappaSpinResult *this)
{
  double result;

  *(_QWORD *)this = &off_25135EC88;
  *((_DWORD *)this + 51) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_QWORD *)this + 15) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_25135EC88;
  *((_DWORD *)this + 51) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_QWORD *)this + 15) = 0;
  return result;
}

uint64_t CMMsl::KappaPulseDeltaV::KappaPulseDeltaV(uint64_t this)
{
  *(_QWORD *)this = &off_25135EA20;
  *(_DWORD *)(this + 72) = 0;
  *(_DWORD *)(this + 112) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135EA20;
  *(_DWORD *)(this + 72) = 0;
  *(_DWORD *)(this + 112) = 0;
  return this;
}

uint64_t CMMsl::RunningStrideLength::RunningStrideLength(uint64_t this)
{
  *(_QWORD *)this = &off_2513609A0;
  *(_DWORD *)(this + 136) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_2513609A0;
  *(_DWORD *)(this + 136) = 0;
  return this;
}

uint64_t CMMsl::KappaHighSpeedCrashResult::KappaHighSpeedCrashResult(uint64_t this)
{
  *(_QWORD *)this = &off_25135E8D0;
  *(_DWORD *)(this + 68) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135E8D0;
  *(_DWORD *)(this + 68) = 0;
  return this;
}

uint64_t CMMsl::KappaPulseInertialHgAccel::KappaPulseInertialHgAccel(uint64_t this)
{
  *(_QWORD *)this = &off_25135EA90;
  *(_DWORD *)(this + 104) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135EA90;
  *(_DWORD *)(this + 104) = 0;
  return this;
}

uint64_t CMMsl::PedometerPathStraightness::PedometerPathStraightness(uint64_t this)
{
  *(_QWORD *)this = &off_25135FE40;
  *(_DWORD *)(this + 56) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135FE40;
  *(_DWORD *)(this + 56) = 0;
  return this;
}

uint64_t CMMsl::VO2MaxModelInput::VO2MaxModelInput(uint64_t this)
{
  *(_QWORD *)this = &off_251361810;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251361810;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

double CMMsl::ProxCalibration::ProxCalibration(CMMsl::ProxCalibration *this)
{
  double result;

  *(_QWORD *)this = &off_2513605E8;
  *((_DWORD *)this + 18) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_2513605E8;
  *((_DWORD *)this + 18) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

uint64_t CMMsl::KappaStepsResult::KappaStepsResult(uint64_t this)
{
  *(_QWORD *)this = &off_25135ECF8;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135ECF8;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

uint64_t CMMsl::WakeGestureSample::WakeGestureSample(uint64_t this)
{
  *(_QWORD *)this = &off_251361B58;
  *(_DWORD *)(this + 84) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251361B58;
  *(_DWORD *)(this + 84) = 0;
  return this;
}

uint64_t CMMsl::KappaGravityAutocorrelationResult::KappaGravityAutocorrelationResult(uint64_t this)
{
  *(_QWORD *)this = &off_25135E898;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135E898;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

uint64_t CMMsl::RunningVerticalOscillationGradientBoostedSignals::RunningVerticalOscillationGradientBoostedSignals(uint64_t this)
{
  *(_QWORD *)this = &off_251360A10;
  *(_DWORD *)(this + 212) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251360A10;
  *(_DWORD *)(this + 212) = 0;
  return this;
}

uint64_t CMMsl::SubStats::SubStats(uint64_t this)
{
  *(_QWORD *)this = &off_251361490;
  *(_DWORD *)(this + 56) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251361490;
  *(_DWORD *)(this + 56) = 0;
  return this;
}

uint64_t CMMsl::PedOdomFusionExtendedModeSegment::PedOdomFusionExtendedModeSegment(uint64_t this)
{
  *(_QWORD *)this = &off_25135FD98;
  *(_DWORD *)(this + 56) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135FD98;
  *(_DWORD *)(this + 56) = 0;
  return this;
}

uint64_t CMMsl::MagicMountState::MagicMountState(uint64_t this)
{
  *(_QWORD *)this = &off_25135F158;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135F158;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CMMsl::PDRPedestrianClassifierState::PDRPedestrianClassifierState(uint64_t this)
{
  *(_QWORD *)this = &off_25135FB30;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135FB30;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

uint64_t CMMsl::PDRPlacementClassifierState::PDRPlacementClassifierState(uint64_t this)
{
  *(_QWORD *)this = &off_25135FB68;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135FB68;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

uint64_t CMMsl::PDRSpeedEstimatorState::PDRSpeedEstimatorState(uint64_t this)
{
  *(_QWORD *)this = &off_25135FBA0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135FBA0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t CMMsl::PDRDOTEstimatorState::PDRDOTEstimatorState(uint64_t this)
{
  *(_QWORD *)this = &off_25135F890;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135F890;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t CMMsl::PDRVelocityEstimatorState::PDRVelocityEstimatorState(uint64_t this)
{
  *(_QWORD *)this = &off_25135FC10;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135FC10;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

uint64_t CMMsl::KMVelocityEstimatorState::KMVelocityEstimatorState(uint64_t this)
{
  *(_QWORD *)this = &off_25135E6A0;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135E6A0;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

uint64_t CMMsl::VelocityEstimatorFusionState::VelocityEstimatorFusionState(uint64_t this)
{
  *(_QWORD *)this = &off_2513618B8;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_2513618B8;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

uint64_t CMMsl::PDRFenceReference::PDRFenceReference(uint64_t this)
{
  *(_QWORD *)this = &off_25135FA88;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135FA88;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CMMsl::PDRFenceState::PDRFenceState(uint64_t this)
{
  *(_QWORD *)this = &off_25135FAC0;
  *(_DWORD *)(this + 68) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135FAC0;
  *(_DWORD *)(this + 68) = 0;
  return this;
}

uint64_t CMMsl::UWBRange::UWBRange(uint64_t this)
{
  *(_QWORD *)this = &off_251361688;
  *(_DWORD *)(this + 56) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251361688;
  *(_DWORD *)(this + 56) = 0;
  return this;
}

uint64_t CMMsl::KappaTriggerClustersResult::KappaTriggerClustersResult(uint64_t this)
{
  *(_QWORD *)this = &off_25135ED68;
  *(_DWORD *)(this + 96) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135ED68;
  *(_DWORD *)(this + 96) = 0;
  return this;
}

uint64_t CMMsl::SimActivityEvent::SimActivityEvent(uint64_t this)
{
  *(_QWORD *)this = &off_251360D90;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251360D90;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t CMMsl::PDRFeatures::PDRFeatures(uint64_t this)
{
  *(_QWORD *)this = &off_25135FA50;
  *(_DWORD *)(this + 108) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135FA50;
  *(_DWORD *)(this + 108) = 0;
  return this;
}

uint64_t CMMsl::PDRDOTEstimatorStateBody::PDRDOTEstimatorStateBody(uint64_t this)
{
  *(_QWORD *)this = &off_25135F900;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135F900;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t CMMsl::PDRDOTEstimatorStateArmSwing::PDRDOTEstimatorStateArmSwing(uint64_t this)
{
  *(_QWORD *)this = &off_25135F8C8;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135F8C8;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t CMMsl::PDRDOTEstimatorStateHeading::PDRDOTEstimatorStateHeading(uint64_t this)
{
  *(_QWORD *)this = &off_25135F9A8;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135F9A8;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t CMMsl::PDRSpeedEstimatorStateDebug::PDRSpeedEstimatorStateDebug(uint64_t this)
{
  *(_QWORD *)this = &off_25135FBD8;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135FBD8;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t CMMsl::PrecisionFindingDOTEstimate::PrecisionFindingDOTEstimate(uint64_t this)
{
  *(_QWORD *)this = &off_2513601F8;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_2513601F8;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t CMMsl::PrecisionFindingState::PrecisionFindingState(uint64_t this)
{
  *(_QWORD *)this = &off_2513602A0;
  *(_DWORD *)(this + 92) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_2513602A0;
  *(_DWORD *)(this + 92) = 0;
  return this;
}

uint64_t CMMsl::KappaRoadsResult::KappaRoadsResult(uint64_t this)
{
  *(_QWORD *)this = &off_25135EBE0;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135EBE0;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t CMMsl::PrecisionFindingVelocityEstimate::PrecisionFindingVelocityEstimate(uint64_t this)
{
  *(_QWORD *)this = &off_2513602D8;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_2513602D8;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

uint64_t CMMsl::PrecisionFindingRangeFilter::PrecisionFindingRangeFilter(uint64_t this)
{
  *(_QWORD *)this = &off_251360230;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251360230;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t CMMsl::PDRDOTMeasurementSelectorState::PDRDOTMeasurementSelectorState(uint64_t this)
{
  *(_QWORD *)this = &off_25135FA18;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135FA18;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

uint64_t CMMsl::PDRDOTEstimatorUncertaintyModelOnBody::PDRDOTEstimatorUncertaintyModelOnBody(uint64_t this)
{
  *(_QWORD *)this = &off_25135F9E0;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135F9E0;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t CMMsl::PeerState::PeerState(uint64_t this)
{
  *(_QWORD *)this = &off_25135FE78;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135FE78;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

double CMMsl::MagnetometerCalibratorFilterParameters::MagnetometerCalibratorFilterParameters(CMMsl::MagnetometerCalibratorFilterParameters *this)
{
  double result;

  *(_QWORD *)this = &off_25135F238;
  *((_DWORD *)this + 28) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_25135F238;
  *((_DWORD *)this + 28) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  return result;
}

double CMMsl::KappaActivityPhone::KappaActivityPhone(CMMsl::KappaActivityPhone *this)
{
  double result;

  *(_QWORD *)this = &off_25135E6D8;
  *((_DWORD *)this + 35) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_25135E6D8;
  *((_DWORD *)this + 35) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  return result;
}

double CMMsl::KappaActivityWatch::KappaActivityWatch(CMMsl::KappaActivityWatch *this)
{
  double result;

  *(_QWORD *)this = &off_25135E710;
  *((_DWORD *)this + 26) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_25135E710;
  *((_DWORD *)this + 26) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

uint64_t CMMsl::PrecisionFindingSessionStartStop::PrecisionFindingSessionStartStop(uint64_t this)
{
  *(_QWORD *)this = &off_251360268;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251360268;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CMMsl::PDRDOTEstimatorStateDebug::PDRDOTEstimatorStateDebug(uint64_t this)
{
  *(_QWORD *)this = &off_25135F970;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135F970;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

double CMMsl::PDRDOTEstimatorStateBodyDebug::PDRDOTEstimatorStateBodyDebug(CMMsl::PDRDOTEstimatorStateBodyDebug *this)
{
  double result;

  *(_QWORD *)this = &off_25135F938;
  *((_DWORD *)this + 18) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_25135F938;
  *((_DWORD *)this + 18) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

double CMMsl::KappaPeakDetectorMapResult::KappaPeakDetectorMapResult(CMMsl::KappaPeakDetectorMapResult *this)
{
  double result;

  *(_QWORD *)this = &off_25135E9E8;
  *((_DWORD *)this + 38) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_25135E9E8;
  *((_DWORD *)this + 38) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

uint64_t CMMsl::KappaPeakDetectorMapMagTimestamps::KappaPeakDetectorMapMagTimestamps(uint64_t this)
{
  *(_QWORD *)this = &off_25135E9B0;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135E9B0;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

uint64_t CMMsl::PrecisionFindingVerticalState::PrecisionFindingVerticalState(uint64_t this)
{
  *(_QWORD *)this = &off_251360310;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251360310;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

uint64_t CMMsl::PencilFusionDMYawAlignmentUpdate::PencilFusionDMYawAlignmentUpdate(uint64_t this)
{
  *(_QWORD *)this = &off_25135FEE8;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135FEE8;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

uint64_t CMMsl::PencilFusionRingSensorTrustModelUpdate::PencilFusionRingSensorTrustModelUpdate(uint64_t this)
{
  *(_QWORD *)this = &off_25135FF90;
  *(_DWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135FF90;
  *(_DWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t CMMsl::SafetyHertzSample::SafetyHertzSample(uint64_t this)
{
  *(_QWORD *)this = &off_251360C08;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251360C08;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t CMMsl::SafetyCompanionStatus::SafetyCompanionStatus(uint64_t this)
{
  *(_QWORD *)this = &off_251360BD0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251360BD0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

_QWORD *CMMsl::PTSConsumedGNSS::PTSConsumedGNSS(_QWORD *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &off_25135FC48;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &off_25135FC48;
  return this;
}

uint64_t CMMsl::PTSForwardPropagation::PTSForwardPropagation(uint64_t this)
{
  *(_QWORD *)this = &off_25135FC80;
  *(_QWORD *)(this + 48) = 0;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135FC80;
  *(_QWORD *)(this + 48) = 0;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

_QWORD *CMMsl::PTSReconstructedRoute::PTSReconstructedRoute(_QWORD *this)
{
  *this = &off_25135FCF0;
  this[1] = 0;
  return this;
}

{
  *this = &off_25135FCF0;
  this[1] = 0;
  return this;
}

_QWORD *CMMsl::PTSMapMatchedRoute::PTSMapMatchedRoute(_QWORD *this)
{
  *this = &off_25135FCB8;
  this[1] = 0;
  return this;
}

{
  *this = &off_25135FCB8;
  this[1] = 0;
  return this;
}

uint64_t CMMsl::KData1::KData1(uint64_t this)
{
  *(_QWORD *)this = &off_25135E5F8;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135E5F8;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CMMsl::KData2::KData2(uint64_t this)
{
  *(_QWORD *)this = &off_25135E630;
  *(_DWORD *)(this + 100) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135E630;
  *(_DWORD *)(this + 100) = 0;
  return this;
}

uint64_t CMMsl::KData3::KData3(uint64_t this)
{
  *(_QWORD *)this = &off_25135E668;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_25135E668;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t CMMsl::SafetyRemoteSample::SafetyRemoteSample(uint64_t this)
{
  *(_QWORD *)this = &off_251360C40;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_251360C40;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

_QWORD *CMMsl::SafetyTrustedAudioResult::SafetyTrustedAudioResult(_QWORD *this)
{
  *this = &off_251360C78;
  *(_QWORD *)((char *)this + 188) = 0;
  return this;
}

{
  *this = &off_251360C78;
  *(_QWORD *)((char *)this + 188) = 0;
  return this;
}

_QWORD *CMMsl::SPUPlaybackExampleDeviceMotion::SPUPlaybackExampleDeviceMotion(_QWORD *this)
{
  *this = &off_251360B60;
  this[1] = 0;
  return this;
}

{
  *this = &off_251360B60;
  this[1] = 0;
  return this;
}

_QWORD *CMMsl::SPUPlaybackExampleMotionStateUpdate::SPUPlaybackExampleMotionStateUpdate(_QWORD *this)
{
  *this = &off_251360B98;
  this[1] = 0;
  return this;
}

{
  *this = &off_251360B98;
  this[1] = 0;
  return this;
}

uint64_t CMMsl::Item::writeTo(uint64_t this, PB::Writer *a2)
{
  _QWORD *v3;
  const PB::Base *v4;
  const PB::Base *v5;
  const PB::Base *v6;
  const PB::Base *v7;
  const PB::Base *v8;
  const PB::Base *v9;
  const PB::Base *v10;
  const PB::Base *v11;
  const PB::Base *v12;
  const PB::Base *v13;
  const PB::Base *v14;
  const PB::Base *v15;
  const PB::Base *v16;
  const PB::Base *v17;
  const PB::Base *v18;
  const PB::Base *v19;
  const PB::Base *v20;
  const PB::Base *v21;
  const PB::Base *v22;
  const PB::Base *v23;
  const PB::Base *v24;
  const PB::Base *v25;
  const PB::Base *v26;
  const PB::Base *v27;
  const PB::Base *v28;
  const PB::Base *v29;
  const PB::Base *v30;
  const PB::Base *v31;
  const PB::Base *v32;
  const PB::Base *v33;
  const PB::Base *v34;
  const PB::Base *v35;
  const PB::Base *v36;
  const PB::Base *v37;
  const PB::Base *v38;
  const PB::Base *v39;
  const PB::Base *v40;
  const PB::Base *v41;
  const PB::Base *v42;
  const PB::Base *v43;
  const PB::Base *v44;
  const PB::Base *v45;
  const PB::Base *v46;
  const PB::Base *v47;
  const PB::Base *v48;
  const PB::Base *v49;
  const PB::Base *v50;
  const PB::Base *v51;
  const PB::Base *v52;
  const PB::Base *v53;
  const PB::Base *v54;
  const PB::Base *v55;
  const PB::Base *v56;
  const PB::Base *v57;
  const PB::Base *v58;
  const PB::Base *v59;
  const PB::Base *v60;
  const PB::Base *v61;
  const PB::Base *v62;
  const PB::Base *v63;
  const PB::Base *v64;
  const PB::Base *v65;
  const PB::Base *v66;
  const PB::Base *v67;
  const PB::Base *v68;
  const PB::Base *v69;
  const PB::Base *v70;
  const PB::Base *v71;
  const PB::Base *v72;
  const PB::Base *v73;
  const PB::Base *v74;
  const PB::Base *v75;
  const PB::Base *v76;
  const PB::Base *v77;
  const PB::Base *v78;
  const PB::Base *v79;
  const PB::Base *v80;
  const PB::Base *v81;
  const PB::Base *v82;
  const PB::Base *v83;
  const PB::Base *v84;
  const PB::Base *v85;
  const PB::Base *v86;
  const PB::Base *v87;
  const PB::Base *v88;
  const PB::Base *v89;
  const PB::Base *v90;
  const PB::Base *v91;
  const PB::Base *v92;
  const PB::Base *v93;
  const PB::Base *v94;
  const PB::Base *v95;
  const PB::Base *v96;
  const PB::Base *v97;
  const PB::Base *v98;
  const PB::Base *v99;
  const PB::Base *v100;
  const PB::Base *v101;
  const PB::Base *v102;
  const PB::Base *v103;
  const PB::Base *v104;
  const PB::Base *v105;
  const PB::Base *v106;
  const PB::Base *v107;
  const PB::Base *v108;
  const PB::Base *v109;
  const PB::Base *v110;
  const PB::Base *v111;
  const PB::Base *v112;
  const PB::Base *v113;
  const PB::Base *v114;
  const PB::Base *v115;
  const PB::Base *v116;
  const PB::Base *v117;
  const PB::Base *v118;
  const PB::Base *v119;
  const PB::Base *v120;
  const PB::Base *v121;
  const PB::Base *v122;
  const PB::Base *v123;
  const PB::Base *v124;
  const PB::Base *v125;
  const PB::Base *v126;
  const PB::Base *v127;
  const PB::Base *v128;
  const PB::Base *v129;
  const PB::Base *v130;
  const PB::Base *v131;
  const PB::Base *v132;
  const PB::Base *v133;
  const PB::Base *v134;
  const PB::Base *v135;
  const PB::Base *v136;
  const PB::Base *v137;
  const PB::Base *v138;
  const PB::Base *v139;
  const PB::Base *v140;
  const PB::Base *v141;
  const PB::Base *v142;
  const PB::Base *v143;
  const PB::Base *v144;
  const PB::Base *v145;
  const PB::Base *v146;
  const PB::Base *v147;
  const PB::Base *v148;
  const PB::Base *v149;
  const PB::Base *v150;
  const PB::Base *v151;
  const PB::Base *v152;
  const PB::Base *v153;
  const PB::Base *v154;
  const PB::Base *v155;
  const PB::Base *v156;
  const PB::Base *v157;
  const PB::Base *v158;
  const PB::Base *v159;
  const PB::Base *v160;
  const PB::Base *v161;
  const PB::Base *v162;
  const PB::Base *v163;
  const PB::Base *v164;
  const PB::Base *v165;
  const PB::Base *v166;
  const PB::Base *v167;
  const PB::Base *v168;
  const PB::Base *v169;
  const PB::Base *v170;
  const PB::Base *v171;
  const PB::Base *v172;
  const PB::Base *v173;
  const PB::Base *v174;
  const PB::Base *v175;
  const PB::Base *v176;
  const PB::Base *v177;
  const PB::Base *v178;
  const PB::Base *v179;
  const PB::Base *v180;
  const PB::Base *v181;
  const PB::Base *v182;
  const PB::Base *v183;
  const PB::Base *v184;
  const PB::Base *v185;
  const PB::Base *v186;
  const PB::Base *v187;
  const PB::Base *v188;
  const PB::Base *v189;
  const PB::Base *v190;
  const PB::Base *v191;
  const PB::Base *v192;
  const PB::Base *v193;
  const PB::Base *v194;
  const PB::Base *v195;
  const PB::Base *v196;
  const PB::Base *v197;
  const PB::Base *v198;
  const PB::Base *v199;
  const PB::Base *v200;
  const PB::Base *v201;
  const PB::Base *v202;
  const PB::Base *v203;
  const PB::Base *v204;
  const PB::Base *v205;
  const PB::Base *v206;
  const PB::Base *v207;
  const PB::Base *v208;
  const PB::Base *v209;
  const PB::Base *v210;
  const PB::Base *v211;
  const PB::Base *v212;
  const PB::Base *v213;
  const PB::Base *v214;
  const PB::Base *v215;
  const PB::Base *v216;
  const PB::Base *v217;
  const PB::Base *v218;
  const PB::Base *v219;
  const PB::Base *v220;
  const PB::Base *v221;
  const PB::Base *v222;
  const PB::Base *v223;
  const PB::Base *v224;
  const PB::Base *v225;
  const PB::Base *v226;
  const PB::Base *v227;
  const PB::Base *v228;
  const PB::Base *v229;
  const PB::Base *v230;
  const PB::Base *v231;
  const PB::Base *v232;
  const PB::Base *v233;
  const PB::Base *v234;
  const PB::Base *v235;
  const PB::Base *v236;
  const PB::Base *v237;
  const PB::Base *v238;
  const PB::Base *v239;
  const PB::Base *v240;
  const PB::Base *v241;
  const PB::Base *v242;
  const PB::Base *v243;
  const PB::Base *v244;
  const PB::Base *v245;
  const PB::Base *v246;
  const PB::Base *v247;
  const PB::Base *v248;
  const PB::Base *v249;
  const PB::Base *v250;
  const PB::Base *v251;
  const PB::Base *v252;
  const PB::Base *v253;
  const PB::Base *v254;
  const PB::Base *v255;
  const PB::Base *v256;
  const PB::Base *v257;
  const PB::Base *v258;
  const PB::Base *v259;
  const PB::Base *v260;
  const PB::Base *v261;
  const PB::Base *v262;
  const PB::Base *v263;
  const PB::Base *v264;
  const PB::Base *v265;
  const PB::Base *v266;
  const PB::Base *v267;
  const PB::Base *v268;
  const PB::Base *v269;
  const PB::Base *v270;
  const PB::Base *v271;
  const PB::Base *v272;
  const PB::Base *v273;
  const PB::Base *v274;
  const PB::Base *v275;
  const PB::Base *v276;
  const PB::Base *v277;
  const PB::Base *v278;
  const PB::Base *v279;
  const PB::Base *v280;
  const PB::Base *v281;
  const PB::Base *v282;
  const PB::Base *v283;
  const PB::Base *v284;
  const PB::Base *v285;
  const PB::Base *v286;
  const PB::Base *v287;
  const PB::Base *v288;
  const PB::Base *v289;
  const PB::Base *v290;
  const PB::Base *v291;
  const PB::Base *v292;
  const PB::Base *v293;
  const PB::Base *v294;
  const PB::Base *v295;
  const PB::Base *v296;
  const PB::Base *v297;
  const PB::Base *v298;
  const PB::Base *v299;
  const PB::Base *v300;
  const PB::Base *v301;
  const PB::Base *v302;
  const PB::Base *v303;
  const PB::Base *v304;
  const PB::Base *v305;
  const PB::Base *v306;
  const PB::Base *v307;
  const PB::Base *v308;
  const PB::Base *v309;
  const PB::Base *v310;
  const PB::Base *v311;
  const PB::Base *v312;
  const PB::Base *v313;
  const PB::Base *v314;
  const PB::Base *v315;
  const PB::Base *v316;
  const PB::Base *v317;
  const PB::Base *v318;
  const PB::Base *v319;
  const PB::Base *v320;
  const PB::Base *v321;
  const PB::Base *v322;
  const PB::Base *v323;
  const PB::Base *v324;
  const PB::Base *v325;
  const PB::Base *v326;
  const PB::Base *v327;
  const PB::Base *v328;
  const PB::Base *v329;
  const PB::Base *v330;
  const PB::Base *v331;
  const PB::Base *v332;
  const PB::Base *v333;
  const PB::Base *v334;
  const PB::Base *v335;
  const PB::Base *v336;
  const PB::Base *v337;
  const PB::Base *v338;
  const PB::Base *v339;
  const PB::Base *v340;
  const PB::Base *v341;
  const PB::Base *v342;
  const PB::Base *v343;
  const PB::Base *v344;
  const PB::Base *v345;
  const PB::Base *v346;
  const PB::Base *v347;
  const PB::Base *v348;
  const PB::Base *v349;
  const PB::Base *v350;
  const PB::Base *v351;
  const PB::Base *v352;
  const PB::Base *v353;
  const PB::Base *v354;
  const PB::Base *v355;
  const PB::Base *v356;
  const PB::Base *v357;
  const PB::Base *v358;
  const PB::Base *v359;
  const PB::Base *v360;
  const PB::Base *v361;
  const PB::Base *v362;
  const PB::Base *v363;
  const PB::Base *v364;
  const PB::Base *v365;
  const PB::Base *v366;
  const PB::Base *v367;
  const PB::Base *v368;
  const PB::Base *v369;
  const PB::Base *v370;
  const PB::Base *v371;
  const PB::Base *v372;
  const PB::Base *v373;
  const PB::Base *v374;
  const PB::Base *v375;
  const PB::Base *v376;
  const PB::Base *v377;
  const PB::Base *v378;
  const PB::Base *v379;
  const PB::Base *v380;
  const PB::Base *v381;
  const PB::Base *v382;
  const PB::Base *v383;
  const PB::Base *v384;
  const PB::Base *v385;
  const PB::Base *v386;
  const PB::Base *v387;
  const PB::Base *v388;
  const PB::Base *v389;
  const PB::Base *v390;
  const PB::Base *v391;
  const PB::Base *v392;
  const PB::Base *v393;
  const PB::Base *v394;
  const PB::Base *v395;
  const PB::Base *v396;
  const PB::Base *v397;
  const PB::Base *v398;
  const PB::Base *v399;
  const PB::Base *v400;
  const PB::Base *v401;
  const PB::Base *v402;
  const PB::Base *v403;
  const PB::Base *v404;
  const PB::Base *v405;
  const PB::Base *v406;
  const PB::Base *v407;
  const PB::Base *v408;
  const PB::Base *v409;
  const PB::Base *v410;
  const PB::Base *v411;
  const PB::Base *v412;
  const PB::Base *v413;
  const PB::Base *v414;
  const PB::Base *v415;
  const PB::Base *v416;
  const PB::Base *v417;
  const PB::Base *v418;
  const PB::Base *v419;
  const PB::Base *v420;
  const PB::Base *v421;
  const PB::Base *v422;
  const PB::Base *v423;
  const PB::Base *v424;
  const PB::Base *v425;
  const PB::Base *v426;
  const PB::Base *v427;
  const PB::Base *v428;
  const PB::Base *v429;
  const PB::Base *v430;
  const PB::Base *v431;
  const PB::Base *v432;
  const PB::Base *v433;
  const PB::Base *v434;
  const PB::Base *v435;
  const PB::Base *v436;
  const PB::Base *v437;
  const PB::Base *v438;
  const PB::Base *v439;
  const PB::Base *v440;
  const PB::Base *v441;
  const PB::Base *v442;
  const PB::Base *v443;
  const PB::Base *v444;
  const PB::Base *v445;
  const PB::Base *v446;
  const PB::Base *v447;
  const PB::Base *v448;
  const PB::Base *v449;
  const PB::Base *v450;
  const PB::Base *v451;
  const PB::Base *v452;
  const PB::Base *v453;

  v3 = (_QWORD *)this;
  if ((*(_BYTE *)(this + 3616) & 1) != 0)
    this = PB::Writer::write(a2, *(double *)(this + 616));
  v4 = (const PB::Base *)v3[146];
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = (const PB::Base *)v3[145];
  if (v5)
    this = PB::Writer::writeSubmessage(a2, v5);
  v6 = (const PB::Base *)v3[142];
  if (v6)
    this = PB::Writer::writeSubmessage(a2, v6);
  v7 = (const PB::Base *)v3[141];
  if (v7)
    this = PB::Writer::writeSubmessage(a2, v7);
  v8 = (const PB::Base *)v3[85];
  if (v8)
    this = PB::Writer::writeSubmessage(a2, v8);
  v9 = (const PB::Base *)v3[84];
  if (v9)
    this = PB::Writer::writeSubmessage(a2, v9);
  v10 = (const PB::Base *)v3[91];
  if (v10)
    this = PB::Writer::writeSubmessage(a2, v10);
  v11 = (const PB::Base *)v3[90];
  if (v11)
    this = PB::Writer::writeSubmessage(a2, v11);
  v12 = (const PB::Base *)v3[180];
  if (v12)
    this = PB::Writer::writeSubmessage(a2, v12);
  v13 = (const PB::Base *)v3[95];
  if (v13)
    this = PB::Writer::writeSubmessage(a2, v13);
  v14 = (const PB::Base *)v3[11];
  if (v14)
    this = PB::Writer::writeSubmessage(a2, v14);
  v15 = (const PB::Base *)v3[18];
  if (v15)
    this = PB::Writer::writeSubmessage(a2, v15);
  v16 = (const PB::Base *)v3[27];
  if (v16)
    this = PB::Writer::writeSubmessage(a2, v16);
  v17 = (const PB::Base *)v3[431];
  if (v17)
    this = PB::Writer::writeSubmessage(a2, v17);
  v18 = (const PB::Base *)v3[434];
  if (v18)
    this = PB::Writer::writeSubmessage(a2, v18);
  v19 = (const PB::Base *)v3[436];
  if (v19)
    this = PB::Writer::writeSubmessage(a2, v19);
  v20 = (const PB::Base *)v3[440];
  if (v20)
    this = PB::Writer::writeSubmessage(a2, v20);
  v21 = (const PB::Base *)v3[444];
  if (v21)
    this = PB::Writer::writeSubmessage(a2, v21);
  v22 = (const PB::Base *)v3[442];
  if (v22)
    this = PB::Writer::writeSubmessage(a2, v22);
  v23 = (const PB::Base *)v3[448];
  if (v23)
    this = PB::Writer::writeSubmessage(a2, v23);
  v24 = (const PB::Base *)v3[415];
  if (v24)
    this = PB::Writer::writeSubmessage(a2, v24);
  v25 = (const PB::Base *)v3[68];
  if (v25)
    this = PB::Writer::writeSubmessage(a2, v25);
  v26 = (const PB::Base *)v3[69];
  if (v26)
    this = PB::Writer::writeSubmessage(a2, v26);
  v27 = (const PB::Base *)v3[70];
  if (v27)
    this = PB::Writer::writeSubmessage(a2, v27);
  v28 = (const PB::Base *)v3[67];
  if (v28)
    this = PB::Writer::writeSubmessage(a2, v28);
  v29 = (const PB::Base *)v3[71];
  if (v29)
    this = PB::Writer::writeSubmessage(a2, v29);
  v30 = (const PB::Base *)v3[439];
  if (v30)
    this = PB::Writer::writeSubmessage(a2, v30);
  v31 = (const PB::Base *)v3[288];
  if (v31)
    this = PB::Writer::writeSubmessage(a2, v31);
  v32 = (const PB::Base *)v3[340];
  if (v32)
    this = PB::Writer::writeSubmessage(a2, v32);
  v33 = (const PB::Base *)v3[446];
  if (v33)
    this = PB::Writer::writeSubmessage(a2, v33);
  v34 = (const PB::Base *)v3[425];
  if (v34)
    this = PB::Writer::writeSubmessage(a2, v34);
  v35 = (const PB::Base *)v3[76];
  if (v35)
    this = PB::Writer::writeSubmessage(a2, v35);
  v36 = (const PB::Base *)v3[427];
  if (v36)
    this = PB::Writer::writeSubmessage(a2, v36);
  v37 = (const PB::Base *)v3[176];
  if (v37)
    this = PB::Writer::writeSubmessage(a2, v37);
  v38 = (const PB::Base *)v3[174];
  if (v38)
    this = PB::Writer::writeSubmessage(a2, v38);
  v39 = (const PB::Base *)v3[169];
  if (v39)
    this = PB::Writer::writeSubmessage(a2, v39);
  v40 = (const PB::Base *)v3[28];
  if (v40)
    this = PB::Writer::writeSubmessage(a2, v40);
  v41 = (const PB::Base *)v3[29];
  if (v41)
    this = PB::Writer::writeSubmessage(a2, v41);
  v42 = (const PB::Base *)v3[34];
  if (v42)
    this = PB::Writer::writeSubmessage(a2, v42);
  v43 = (const PB::Base *)v3[114];
  if (v43)
    this = PB::Writer::writeSubmessage(a2, v43);
  v44 = (const PB::Base *)v3[447];
  if (v44)
    this = PB::Writer::writeSubmessage(a2, v44);
  v45 = (const PB::Base *)v3[443];
  if (v45)
    this = PB::Writer::writeSubmessage(a2, v45);
  v46 = (const PB::Base *)v3[168];
  if (v46)
    this = PB::Writer::writeSubmessage(a2, v46);
  v47 = (const PB::Base *)v3[410];
  if (v47)
    this = PB::Writer::writeSubmessage(a2, v47);
  v48 = (const PB::Base *)v3[44];
  if (v48)
    this = PB::Writer::writeSubmessage(a2, v48);
  v49 = (const PB::Base *)v3[407];
  if (v49)
    this = PB::Writer::writeSubmessage(a2, v49);
  v50 = (const PB::Base *)v3[235];
  if (v50)
    this = PB::Writer::writeSubmessage(a2, v50);
  v51 = (const PB::Base *)v3[125];
  if (v51)
    this = PB::Writer::writeSubmessage(a2, v51);
  v52 = (const PB::Base *)v3[10];
  if (v52)
    this = PB::Writer::writeSubmessage(a2, v52);
  v53 = (const PB::Base *)v3[259];
  if (v53)
    this = PB::Writer::writeSubmessage(a2, v53);
  v54 = (const PB::Base *)v3[379];
  if (v54)
    this = PB::Writer::writeSubmessage(a2, v54);
  v55 = (const PB::Base *)v3[245];
  if (v55)
    this = PB::Writer::writeSubmessage(a2, v55);
  v56 = (const PB::Base *)v3[89];
  if (v56)
    this = PB::Writer::writeSubmessage(a2, v56);
  v57 = (const PB::Base *)v3[408];
  if (v57)
    this = PB::Writer::writeSubmessage(a2, v57);
  v58 = (const PB::Base *)v3[356];
  if (v58)
    this = PB::Writer::writeSubmessage(a2, v58);
  v59 = (const PB::Base *)v3[409];
  if (v59)
    this = PB::Writer::writeSubmessage(a2, v59);
  v60 = (const PB::Base *)v3[414];
  if (v60)
    this = PB::Writer::writeSubmessage(a2, v60);
  v61 = (const PB::Base *)v3[219];
  if (v61)
    this = PB::Writer::writeSubmessage(a2, v61);
  v62 = (const PB::Base *)v3[194];
  if (v62)
    this = PB::Writer::writeSubmessage(a2, v62);
  v63 = (const PB::Base *)v3[166];
  if (v63)
    this = PB::Writer::writeSubmessage(a2, v63);
  v64 = (const PB::Base *)v3[215];
  if (v64)
    this = PB::Writer::writeSubmessage(a2, v64);
  v65 = (const PB::Base *)v3[397];
  if (v65)
    this = PB::Writer::writeSubmessage(a2, v65);
  v66 = (const PB::Base *)v3[210];
  if (v66)
    this = PB::Writer::writeSubmessage(a2, v66);
  v67 = (const PB::Base *)v3[16];
  if (v67)
    this = PB::Writer::writeSubmessage(a2, v67);
  v68 = (const PB::Base *)v3[398];
  if (v68)
    this = PB::Writer::writeSubmessage(a2, v68);
  v69 = (const PB::Base *)v3[47];
  if (v69)
    this = PB::Writer::writeSubmessage(a2, v69);
  v70 = (const PB::Base *)v3[391];
  if (v70)
    this = PB::Writer::writeSubmessage(a2, v70);
  v71 = (const PB::Base *)v3[46];
  if (v71)
    this = PB::Writer::writeSubmessage(a2, v71);
  v72 = (const PB::Base *)v3[392];
  if (v72)
    this = PB::Writer::writeSubmessage(a2, v72);
  v73 = (const PB::Base *)v3[432];
  if (v73)
    this = PB::Writer::writeSubmessage(a2, v73);
  v74 = (const PB::Base *)v3[37];
  if (v74)
    this = PB::Writer::writeSubmessage(a2, v74);
  v75 = (const PB::Base *)v3[430];
  if (v75)
    this = PB::Writer::writeSubmessage(a2, v75);
  v76 = (const PB::Base *)v3[411];
  if (v76)
    this = PB::Writer::writeSubmessage(a2, v76);
  v77 = (const PB::Base *)v3[155];
  if (v77)
    this = PB::Writer::writeSubmessage(a2, v77);
  v78 = (const PB::Base *)v3[367];
  if (v78)
    this = PB::Writer::writeSubmessage(a2, v78);
  v79 = (const PB::Base *)v3[131];
  if (v79)
    this = PB::Writer::writeSubmessage(a2, v79);
  v80 = (const PB::Base *)v3[109];
  if (v80)
    this = PB::Writer::writeSubmessage(a2, v80);
  v81 = (const PB::Base *)v3[4];
  if (v81)
    this = PB::Writer::writeSubmessage(a2, v81);
  v82 = (const PB::Base *)v3[253];
  if (v82)
    this = PB::Writer::writeSubmessage(a2, v82);
  v83 = (const PB::Base *)v3[248];
  if (v83)
    this = PB::Writer::writeSubmessage(a2, v83);
  v84 = (const PB::Base *)v3[62];
  if (v84)
    this = PB::Writer::writeSubmessage(a2, v84);
  v85 = (const PB::Base *)v3[217];
  if (v85)
    this = PB::Writer::writeSubmessage(a2, v85);
  v86 = (const PB::Base *)v3[333];
  if (v86)
    this = PB::Writer::writeSubmessage(a2, v86);
  v87 = (const PB::Base *)v3[183];
  if (v87)
    this = PB::Writer::writeSubmessage(a2, v87);
  v88 = (const PB::Base *)v3[88];
  if (v88)
    this = PB::Writer::writeSubmessage(a2, v88);
  v89 = (const PB::Base *)v3[151];
  if (v89)
    this = PB::Writer::writeSubmessage(a2, v89);
  v90 = (const PB::Base *)v3[152];
  if (v90)
    this = PB::Writer::writeSubmessage(a2, v90);
  v91 = (const PB::Base *)v3[150];
  if (v91)
    this = PB::Writer::writeSubmessage(a2, v91);
  v92 = (const PB::Base *)v3[149];
  if (v92)
    this = PB::Writer::writeSubmessage(a2, v92);
  v93 = (const PB::Base *)v3[59];
  if (v93)
    this = PB::Writer::writeSubmessage(a2, v93);
  v94 = (const PB::Base *)v3[132];
  if (v94)
    this = PB::Writer::writeSubmessage(a2, v94);
  v95 = (const PB::Base *)v3[247];
  if (v95)
    this = PB::Writer::writeSubmessage(a2, v95);
  v96 = (const PB::Base *)v3[236];
  if (v96)
    this = PB::Writer::writeSubmessage(a2, v96);
  v97 = (const PB::Base *)v3[304];
  if (v97)
    this = PB::Writer::writeSubmessage(a2, v97);
  v98 = (const PB::Base *)v3[305];
  if (v98)
    this = PB::Writer::writeSubmessage(a2, v98);
  v99 = (const PB::Base *)v3[63];
  if (v99)
    this = PB::Writer::writeSubmessage(a2, v99);
  v100 = (const PB::Base *)v3[184];
  if (v100)
    this = PB::Writer::writeSubmessage(a2, v100);
  v101 = (const PB::Base *)v3[87];
  if (v101)
    this = PB::Writer::writeSubmessage(a2, v101);
  v102 = (const PB::Base *)v3[318];
  if (v102)
    this = PB::Writer::writeSubmessage(a2, v102);
  v103 = (const PB::Base *)v3[416];
  if (v103)
    this = PB::Writer::writeSubmessage(a2, v103);
  v104 = (const PB::Base *)v3[238];
  if (v104)
    this = PB::Writer::writeSubmessage(a2, v104);
  v105 = (const PB::Base *)v3[239];
  if (v105)
    this = PB::Writer::writeSubmessage(a2, v105);
  v106 = (const PB::Base *)v3[317];
  if (v106)
    this = PB::Writer::writeSubmessage(a2, v106);
  v107 = (const PB::Base *)v3[441];
  if (v107)
    this = PB::Writer::writeSubmessage(a2, v107);
  v108 = (const PB::Base *)v3[435];
  if (v108)
    this = PB::Writer::writeSubmessage(a2, v108);
  v109 = (const PB::Base *)v3[332];
  if (v109)
    this = PB::Writer::writeSubmessage(a2, v109);
  v110 = (const PB::Base *)v3[73];
  if (v110)
    this = PB::Writer::writeSubmessage(a2, v110);
  v111 = (const PB::Base *)v3[60];
  if (v111)
    this = PB::Writer::writeSubmessage(a2, v111);
  v112 = (const PB::Base *)v3[61];
  if (v112)
    this = PB::Writer::writeSubmessage(a2, v112);
  v113 = (const PB::Base *)v3[266];
  if (v113)
    this = PB::Writer::writeSubmessage(a2, v113);
  v114 = (const PB::Base *)v3[299];
  if (v114)
    this = PB::Writer::writeSubmessage(a2, v114);
  v115 = (const PB::Base *)v3[300];
  if (v115)
    this = PB::Writer::writeSubmessage(a2, v115);
  v116 = (const PB::Base *)v3[48];
  if (v116)
    this = PB::Writer::writeSubmessage(a2, v116);
  v117 = (const PB::Base *)v3[393];
  if (v117)
    this = PB::Writer::writeSubmessage(a2, v117);
  v118 = (const PB::Base *)v3[43];
  if (v118)
    this = PB::Writer::writeSubmessage(a2, v118);
  v119 = (const PB::Base *)v3[58];
  if (v119)
    this = PB::Writer::writeSubmessage(a2, v119);
  v120 = (const PB::Base *)v3[64];
  if (v120)
    this = PB::Writer::writeSubmessage(a2, v120);
  v121 = (const PB::Base *)v3[420];
  if (v121)
    this = PB::Writer::writeSubmessage(a2, v121);
  v122 = (const PB::Base *)v3[375];
  if (v122)
    this = PB::Writer::writeSubmessage(a2, v122);
  v123 = (const PB::Base *)v3[370];
  if (v123)
    this = PB::Writer::writeSubmessage(a2, v123);
  v124 = (const PB::Base *)v3[373];
  if (v124)
    this = PB::Writer::writeSubmessage(a2, v124);
  v125 = (const PB::Base *)v3[372];
  if (v125)
    this = PB::Writer::writeSubmessage(a2, v125);
  v126 = (const PB::Base *)v3[376];
  if (v126)
    this = PB::Writer::writeSubmessage(a2, v126);
  v127 = (const PB::Base *)v3[377];
  if (v127)
    this = PB::Writer::writeSubmessage(a2, v127);
  v128 = (const PB::Base *)v3[371];
  if (v128)
    this = PB::Writer::writeSubmessage(a2, v128);
  v129 = (const PB::Base *)v3[242];
  if (v129)
    this = PB::Writer::writeSubmessage(a2, v129);
  v130 = (const PB::Base *)v3[445];
  if (v130)
    this = PB::Writer::writeSubmessage(a2, v130);
  v131 = (const PB::Base *)v3[230];
  if (v131)
    this = PB::Writer::writeSubmessage(a2, v131);
  v132 = (const PB::Base *)v3[24];
  if (v132)
    this = PB::Writer::writeSubmessage(a2, v132);
  v133 = (const PB::Base *)v3[380];
  if (v133)
    this = PB::Writer::writeSubmessage(a2, v133);
  v134 = (const PB::Base *)v3[381];
  if (v134)
    this = PB::Writer::writeSubmessage(a2, v134);
  v135 = (const PB::Base *)v3[363];
  if (v135)
    this = PB::Writer::writeSubmessage(a2, v135);
  v136 = (const PB::Base *)v3[92];
  if (v136)
    this = PB::Writer::writeSubmessage(a2, v136);
  v137 = (const PB::Base *)v3[111];
  if (v137)
    this = PB::Writer::writeSubmessage(a2, v137);
  v138 = (const PB::Base *)v3[57];
  if (v138)
    this = PB::Writer::writeSubmessage(a2, v138);
  v139 = (const PB::Base *)v3[234];
  if (v139)
    this = PB::Writer::writeSubmessage(a2, v139);
  v140 = (const PB::Base *)v3[56];
  if (v140)
    this = PB::Writer::writeSubmessage(a2, v140);
  v141 = (const PB::Base *)v3[308];
  if (v141)
    this = PB::Writer::writeSubmessage(a2, v141);
  v142 = (const PB::Base *)v3[130];
  if (v142)
    this = PB::Writer::writeSubmessage(a2, v142);
  v143 = (const PB::Base *)v3[98];
  if (v143)
    this = PB::Writer::writeSubmessage(a2, v143);
  v144 = (const PB::Base *)v3[1];
  if (v144)
    this = PB::Writer::writeSubmessage(a2, v144);
  v145 = (const PB::Base *)v3[2];
  if (v145)
    this = PB::Writer::writeSubmessage(a2, v145);
  v146 = (const PB::Base *)v3[40];
  if (v146)
    this = PB::Writer::writeSubmessage(a2, v146);
  v147 = (const PB::Base *)v3[231];
  if (v147)
    this = PB::Writer::writeSubmessage(a2, v147);
  v148 = (const PB::Base *)v3[406];
  if (v148)
    this = PB::Writer::writeSubmessage(a2, v148);
  v149 = (const PB::Base *)v3[343];
  if (v149)
    this = PB::Writer::writeSubmessage(a2, v149);
  v150 = (const PB::Base *)v3[450];
  if (v150)
    this = PB::Writer::writeSubmessage(a2, v150);
  v151 = (const PB::Base *)v3[449];
  if (v151)
    this = PB::Writer::writeSubmessage(a2, v151);
  v152 = (const PB::Base *)v3[45];
  if (v152)
    this = PB::Writer::writeSubmessage(a2, v152);
  v153 = (const PB::Base *)v3[281];
  if (v153)
    this = PB::Writer::writeSubmessage(a2, v153);
  v154 = (const PB::Base *)v3[303];
  if (v154)
    this = PB::Writer::writeSubmessage(a2, v154);
  v155 = (const PB::Base *)v3[229];
  if (v155)
    this = PB::Writer::writeSubmessage(a2, v155);
  v156 = (const PB::Base *)v3[232];
  if (v156)
    this = PB::Writer::writeSubmessage(a2, v156);
  v157 = (const PB::Base *)v3[344];
  if (v157)
    this = PB::Writer::writeSubmessage(a2, v157);
  v158 = (const PB::Base *)v3[51];
  if (v158)
    this = PB::Writer::writeSubmessage(a2, v158);
  v159 = (const PB::Base *)v3[52];
  if (v159)
    this = PB::Writer::writeSubmessage(a2, v159);
  v160 = (const PB::Base *)v3[250];
  if (v160)
    this = PB::Writer::writeSubmessage(a2, v160);
  v161 = (const PB::Base *)v3[269];
  if (v161)
    this = PB::Writer::writeSubmessage(a2, v161);
  v162 = (const PB::Base *)v3[9];
  if (v162)
    this = PB::Writer::writeSubmessage(a2, v162);
  v163 = (const PB::Base *)v3[104];
  if (v163)
    this = PB::Writer::writeSubmessage(a2, v163);
  v164 = (const PB::Base *)v3[282];
  if (v164)
    this = PB::Writer::writeSubmessage(a2, v164);
  v165 = (const PB::Base *)v3[136];
  if (v165)
    this = PB::Writer::writeSubmessage(a2, v165);
  v166 = (const PB::Base *)v3[137];
  if (v166)
    this = PB::Writer::writeSubmessage(a2, v166);
  v167 = (const PB::Base *)v3[135];
  if (v167)
    this = PB::Writer::writeSubmessage(a2, v167);
  v168 = (const PB::Base *)v3[112];
  if (v168)
    this = PB::Writer::writeSubmessage(a2, v168);
  v169 = (const PB::Base *)v3[433];
  if (v169)
    this = PB::Writer::writeSubmessage(a2, v169);
  v170 = (const PB::Base *)v3[386];
  if (v170)
    this = PB::Writer::writeSubmessage(a2, v170);
  v171 = (const PB::Base *)v3[346];
  if (v171)
    this = PB::Writer::writeSubmessage(a2, v171);
  v172 = (const PB::Base *)v3[327];
  if (v172)
    this = PB::Writer::writeSubmessage(a2, v172);
  v173 = (const PB::Base *)v3[224];
  if (v173)
    this = PB::Writer::writeSubmessage(a2, v173);
  v174 = (const PB::Base *)v3[225];
  if (v174)
    this = PB::Writer::writeSubmessage(a2, v174);
  v175 = (const PB::Base *)v3[38];
  if (v175)
    this = PB::Writer::writeSubmessage(a2, v175);
  v176 = (const PB::Base *)v3[223];
  if (v176)
    this = PB::Writer::writeSubmessage(a2, v176);
  v177 = (const PB::Base *)v3[417];
  if (v177)
    this = PB::Writer::writeSubmessage(a2, v177);
  v178 = (const PB::Base *)v3[325];
  if (v178)
    this = PB::Writer::writeSubmessage(a2, v178);
  v179 = (const PB::Base *)v3[54];
  if (v179)
    this = PB::Writer::writeSubmessage(a2, v179);
  v180 = (const PB::Base *)v3[339];
  if (v180)
    this = PB::Writer::writeSubmessage(a2, v180);
  v181 = (const PB::Base *)v3[226];
  if (v181)
    this = PB::Writer::writeSubmessage(a2, v181);
  v182 = (const PB::Base *)v3[222];
  if (v182)
    this = PB::Writer::writeSubmessage(a2, v182);
  v183 = (const PB::Base *)v3[50];
  if (v183)
    this = PB::Writer::writeSubmessage(a2, v183);
  v184 = (const PB::Base *)v3[55];
  if (v184)
    this = PB::Writer::writeSubmessage(a2, v184);
  v185 = (const PB::Base *)v3[165];
  if (v185)
    this = PB::Writer::writeSubmessage(a2, v185);
  v186 = (const PB::Base *)v3[362];
  if (v186)
    this = PB::Writer::writeSubmessage(a2, v186);
  v187 = (const PB::Base *)v3[365];
  if (v187)
    this = PB::Writer::writeSubmessage(a2, v187);
  v188 = (const PB::Base *)v3[364];
  if (v188)
    this = PB::Writer::writeSubmessage(a2, v188);
  v189 = (const PB::Base *)v3[129];
  if (v189)
    this = PB::Writer::writeSubmessage(a2, v189);
  v190 = (const PB::Base *)v3[424];
  if (v190)
    this = PB::Writer::writeSubmessage(a2, v190);
  v191 = (const PB::Base *)v3[115];
  if (v191)
    this = PB::Writer::writeSubmessage(a2, v191);
  v192 = (const PB::Base *)v3[421];
  if (v192)
    this = PB::Writer::writeSubmessage(a2, v192);
  v193 = (const PB::Base *)v3[422];
  if (v193)
    this = PB::Writer::writeSubmessage(a2, v193);
  v194 = (const PB::Base *)v3[395];
  if (v194)
    this = PB::Writer::writeSubmessage(a2, v194);
  v195 = (const PB::Base *)v3[139];
  if (v195)
    this = PB::Writer::writeSubmessage(a2, v195);
  v196 = (const PB::Base *)v3[140];
  if (v196)
    this = PB::Writer::writeSubmessage(a2, v196);
  v197 = (const PB::Base *)v3[243];
  if (v197)
    this = PB::Writer::writeSubmessage(a2, v197);
  v198 = (const PB::Base *)v3[128];
  if (v198)
    this = PB::Writer::writeSubmessage(a2, v198);
  v199 = (const PB::Base *)v3[438];
  if (v199)
    this = PB::Writer::writeSubmessage(a2, v199);
  v200 = (const PB::Base *)v3[14];
  if (v200)
    this = PB::Writer::writeSubmessage(a2, v200);
  v201 = (const PB::Base *)v3[291];
  if (v201)
    this = PB::Writer::writeSubmessage(a2, v201);
  v202 = (const PB::Base *)v3[177];
  if (v202)
    this = PB::Writer::writeSubmessage(a2, v202);
  v203 = (const PB::Base *)v3[301];
  if (v203)
    this = PB::Writer::writeSubmessage(a2, v203);
  v204 = (const PB::Base *)v3[302];
  if (v204)
    this = PB::Writer::writeSubmessage(a2, v204);
  v205 = (const PB::Base *)v3[290];
  if (v205)
    this = PB::Writer::writeSubmessage(a2, v205);
  v206 = (const PB::Base *)v3[108];
  if (v206)
    this = PB::Writer::writeSubmessage(a2, v206);
  v207 = (const PB::Base *)v3[178];
  if (v207)
    this = PB::Writer::writeSubmessage(a2, v207);
  v208 = (const PB::Base *)v3[428];
  if (v208)
    this = PB::Writer::writeSubmessage(a2, v208);
  v209 = (const PB::Base *)v3[294];
  if (v209)
    this = PB::Writer::writeSubmessage(a2, v209);
  v210 = (const PB::Base *)v3[297];
  if (v210)
    this = PB::Writer::writeSubmessage(a2, v210);
  v211 = (const PB::Base *)v3[159];
  if (v211)
    this = PB::Writer::writeSubmessage(a2, v211);
  v212 = (const PB::Base *)v3[374];
  if (v212)
    this = PB::Writer::writeSubmessage(a2, v212);
  v213 = (const PB::Base *)v3[296];
  if (v213)
    this = PB::Writer::writeSubmessage(a2, v213);
  v214 = (const PB::Base *)v3[246];
  if (v214)
    this = PB::Writer::writeSubmessage(a2, v214);
  v215 = (const PB::Base *)v3[423];
  if (v215)
    this = PB::Writer::writeSubmessage(a2, v215);
  v216 = (const PB::Base *)v3[22];
  if (v216)
    this = PB::Writer::writeSubmessage(a2, v216);
  v217 = (const PB::Base *)v3[26];
  if (v217)
    this = PB::Writer::writeSubmessage(a2, v217);
  v218 = (const PB::Base *)v3[254];
  if (v218)
    this = PB::Writer::writeSubmessage(a2, v218);
  v219 = (const PB::Base *)v3[97];
  if (v219)
    this = PB::Writer::writeSubmessage(a2, v219);
  v220 = (const PB::Base *)v3[306];
  if (v220)
    this = PB::Writer::writeSubmessage(a2, v220);
  v221 = (const PB::Base *)v3[307];
  if (v221)
    this = PB::Writer::writeSubmessage(a2, v221);
  v222 = (const PB::Base *)v3[167];
  if (v222)
    this = PB::Writer::writeSubmessage(a2, v222);
  v223 = (const PB::Base *)v3[437];
  if (v223)
    this = PB::Writer::writeSubmessage(a2, v223);
  v224 = (const PB::Base *)v3[384];
  if (v224)
    this = PB::Writer::writeSubmessage(a2, v224);
  v225 = (const PB::Base *)v3[396];
  if (v225)
    this = PB::Writer::writeSubmessage(a2, v225);
  v226 = (const PB::Base *)v3[3];
  if (v226)
    this = PB::Writer::writeSubmessage(a2, v226);
  v227 = (const PB::Base *)v3[143];
  if (v227)
    this = PB::Writer::writeSubmessage(a2, v227);
  v228 = (const PB::Base *)v3[240];
  if (v228)
    this = PB::Writer::writeSubmessage(a2, v228);
  v229 = (const PB::Base *)v3[80];
  if (v229)
    this = PB::Writer::writeSubmessage(a2, v229);
  v230 = (const PB::Base *)v3[93];
  if (v230)
    this = PB::Writer::writeSubmessage(a2, v230);
  v231 = (const PB::Base *)v3[158];
  if (v231)
    this = PB::Writer::writeSubmessage(a2, v231);
  v232 = (const PB::Base *)v3[7];
  if (v232)
    this = PB::Writer::writeSubmessage(a2, v232);
  v233 = (const PB::Base *)v3[156];
  if (v233)
    this = PB::Writer::writeSubmessage(a2, v233);
  v234 = (const PB::Base *)v3[5];
  if (v234)
    this = PB::Writer::writeSubmessage(a2, v234);
  v235 = (const PB::Base *)v3[8];
  if (v235)
    this = PB::Writer::writeSubmessage(a2, v235);
  v236 = (const PB::Base *)v3[81];
  if (v236)
    this = PB::Writer::writeSubmessage(a2, v236);
  v237 = (const PB::Base *)v3[144];
  if (v237)
    this = PB::Writer::writeSubmessage(a2, v237);
  v238 = (const PB::Base *)v3[316];
  if (v238)
    this = PB::Writer::writeSubmessage(a2, v238);
  v239 = (const PB::Base *)v3[323];
  if (v239)
    this = PB::Writer::writeSubmessage(a2, v239);
  v240 = (const PB::Base *)v3[322];
  if (v240)
    this = PB::Writer::writeSubmessage(a2, v240);
  v241 = (const PB::Base *)v3[319];
  if (v241)
    this = PB::Writer::writeSubmessage(a2, v241);
  v242 = (const PB::Base *)v3[148];
  if (v242)
    this = PB::Writer::writeSubmessage(a2, v242);
  v243 = (const PB::Base *)v3[154];
  if (v243)
    this = PB::Writer::writeSubmessage(a2, v243);
  v244 = (const PB::Base *)v3[324];
  if (v244)
    this = PB::Writer::writeSubmessage(a2, v244);
  v245 = (const PB::Base *)v3[256];
  if (v245)
    this = PB::Writer::writeSubmessage(a2, v245);
  v246 = (const PB::Base *)v3[153];
  if (v246)
    this = PB::Writer::writeSubmessage(a2, v246);
  v247 = (const PB::Base *)v3[82];
  if (v247)
    this = PB::Writer::writeSubmessage(a2, v247);
  v248 = (const PB::Base *)v3[157];
  if (v248)
    this = PB::Writer::writeSubmessage(a2, v248);
  v249 = (const PB::Base *)v3[49];
  if (v249)
    this = PB::Writer::writeSubmessage(a2, v249);
  v250 = (const PB::Base *)v3[394];
  if (v250)
    this = PB::Writer::writeSubmessage(a2, v250);
  v251 = (const PB::Base *)v3[355];
  if (v251)
    this = PB::Writer::writeSubmessage(a2, v251);
  v252 = (const PB::Base *)v3[252];
  if (v252)
    this = PB::Writer::writeSubmessage(a2, v252);
  v253 = (const PB::Base *)v3[6];
  if (v253)
    this = PB::Writer::writeSubmessage(a2, v253);
  v254 = (const PB::Base *)v3[233];
  if (v254)
    this = PB::Writer::writeSubmessage(a2, v254);
  v255 = (const PB::Base *)v3[110];
  if (v255)
    this = PB::Writer::writeSubmessage(a2, v255);
  v256 = (const PB::Base *)v3[263];
  if (v256)
    this = PB::Writer::writeSubmessage(a2, v256);
  v257 = (const PB::Base *)v3[262];
  if (v257)
    this = PB::Writer::writeSubmessage(a2, v257);
  v258 = (const PB::Base *)v3[66];
  if (v258)
    this = PB::Writer::writeSubmessage(a2, v258);
  v259 = (const PB::Base *)v3[429];
  if (v259)
    this = PB::Writer::writeSubmessage(a2, v259);
  v260 = (const PB::Base *)v3[267];
  if (v260)
    this = PB::Writer::writeSubmessage(a2, v260);
  v261 = (const PB::Base *)v3[383];
  if (v261)
    this = PB::Writer::writeSubmessage(a2, v261);
  v262 = (const PB::Base *)v3[106];
  if (v262)
    this = PB::Writer::writeSubmessage(a2, v262);
  v263 = (const PB::Base *)v3[251];
  if (v263)
    this = PB::Writer::writeSubmessage(a2, v263);
  v264 = (const PB::Base *)v3[258];
  if (v264)
    this = PB::Writer::writeSubmessage(a2, v264);
  v265 = (const PB::Base *)v3[385];
  if (v265)
    this = PB::Writer::writeSubmessage(a2, v265);
  v266 = (const PB::Base *)v3[75];
  if (v266)
    this = PB::Writer::writeSubmessage(a2, v266);
  v267 = (const PB::Base *)v3[79];
  if (v267)
    this = PB::Writer::writeSubmessage(a2, v267);
  v268 = (const PB::Base *)v3[264];
  if (v268)
    this = PB::Writer::writeSubmessage(a2, v268);
  v269 = (const PB::Base *)v3[244];
  if (v269)
    this = PB::Writer::writeSubmessage(a2, v269);
  v270 = (const PB::Base *)v3[126];
  if (v270)
    this = PB::Writer::writeSubmessage(a2, v270);
  v271 = (const PB::Base *)v3[53];
  if (v271)
    this = PB::Writer::writeSubmessage(a2, v271);
  v272 = (const PB::Base *)v3[402];
  if (v272)
    this = PB::Writer::writeSubmessage(a2, v272);
  v273 = (const PB::Base *)v3[378];
  if (v273)
    this = PB::Writer::writeSubmessage(a2, v273);
  v274 = (const PB::Base *)v3[426];
  if (v274)
    this = PB::Writer::writeSubmessage(a2, v274);
  v275 = (const PB::Base *)v3[257];
  if (v275)
    this = PB::Writer::writeSubmessage(a2, v275);
  v276 = (const PB::Base *)v3[255];
  if (v276)
    this = PB::Writer::writeSubmessage(a2, v276);
  v277 = (const PB::Base *)v3[265];
  if (v277)
    this = PB::Writer::writeSubmessage(a2, v277);
  v278 = (const PB::Base *)v3[321];
  if (v278)
    this = PB::Writer::writeSubmessage(a2, v278);
  v279 = (const PB::Base *)v3[175];
  if (v279)
    this = PB::Writer::writeSubmessage(a2, v279);
  v280 = (const PB::Base *)v3[78];
  if (v280)
    this = PB::Writer::writeSubmessage(a2, v280);
  v281 = (const PB::Base *)v3[36];
  if (v281)
    this = PB::Writer::writeSubmessage(a2, v281);
  v282 = (const PB::Base *)v3[173];
  if (v282)
    this = PB::Writer::writeSubmessage(a2, v282);
  v283 = (const PB::Base *)v3[171];
  if (v283)
    this = PB::Writer::writeSubmessage(a2, v283);
  v284 = (const PB::Base *)v3[172];
  if (v284)
    this = PB::Writer::writeSubmessage(a2, v284);
  v285 = (const PB::Base *)v3[170];
  if (v285)
    this = PB::Writer::writeSubmessage(a2, v285);
  v286 = (const PB::Base *)v3[15];
  if (v286)
    this = PB::Writer::writeSubmessage(a2, v286);
  v287 = (const PB::Base *)v3[12];
  if (v287)
    this = PB::Writer::writeSubmessage(a2, v287);
  v288 = (const PB::Base *)v3[30];
  if (v288)
    this = PB::Writer::writeSubmessage(a2, v288);
  v289 = (const PB::Base *)v3[390];
  if (v289)
    this = PB::Writer::writeSubmessage(a2, v289);
  v290 = (const PB::Base *)v3[389];
  if (v290)
    this = PB::Writer::writeSubmessage(a2, v290);
  v291 = (const PB::Base *)v3[105];
  if (v291)
    this = PB::Writer::writeSubmessage(a2, v291);
  v292 = (const PB::Base *)v3[35];
  if (v292)
    this = PB::Writer::writeSubmessage(a2, v292);
  v293 = (const PB::Base *)v3[138];
  if (v293)
    this = PB::Writer::writeSubmessage(a2, v293);
  v294 = (const PB::Base *)v3[336];
  if (v294)
    this = PB::Writer::writeSubmessage(a2, v294);
  v295 = (const PB::Base *)v3[338];
  if (v295)
    this = PB::Writer::writeSubmessage(a2, v295);
  v296 = (const PB::Base *)v3[337];
  if (v296)
    this = PB::Writer::writeSubmessage(a2, v296);
  v297 = (const PB::Base *)v3[451];
  if (v297)
    this = PB::Writer::writeSubmessage(a2, v297);
  v298 = (const PB::Base *)v3[41];
  if (v298)
    this = PB::Writer::writeSubmessage(a2, v298);
  v299 = (const PB::Base *)v3[315];
  if (v299)
    this = PB::Writer::writeSubmessage(a2, v299);
  v300 = (const PB::Base *)v3[261];
  if (v300)
    this = PB::Writer::writeSubmessage(a2, v300);
  v301 = (const PB::Base *)v3[260];
  if (v301)
    this = PB::Writer::writeSubmessage(a2, v301);
  v302 = (const PB::Base *)v3[65];
  if (v302)
    this = PB::Writer::writeSubmessage(a2, v302);
  v303 = (const PB::Base *)v3[20];
  if (v303)
    this = PB::Writer::writeSubmessage(a2, v303);
  v304 = (const PB::Base *)v3[21];
  if (v304)
    this = PB::Writer::writeSubmessage(a2, v304);
  v305 = (const PB::Base *)v3[19];
  if (v305)
    this = PB::Writer::writeSubmessage(a2, v305);
  v306 = (const PB::Base *)v3[133];
  if (v306)
    this = PB::Writer::writeSubmessage(a2, v306);
  v307 = (const PB::Base *)v3[134];
  if (v307)
    this = PB::Writer::writeSubmessage(a2, v307);
  v308 = (const PB::Base *)v3[83];
  if (v308)
    this = PB::Writer::writeSubmessage(a2, v308);
  v309 = (const PB::Base *)v3[413];
  if (v309)
    this = PB::Writer::writeSubmessage(a2, v309);
  v310 = (const PB::Base *)v3[412];
  if (v310)
    this = PB::Writer::writeSubmessage(a2, v310);
  v311 = (const PB::Base *)v3[25];
  if (v311)
    this = PB::Writer::writeSubmessage(a2, v311);
  v312 = (const PB::Base *)v3[119];
  if (v312)
    this = PB::Writer::writeSubmessage(a2, v312);
  v313 = (const PB::Base *)v3[120];
  if (v313)
    this = PB::Writer::writeSubmessage(a2, v313);
  v314 = (const PB::Base *)v3[121];
  if (v314)
    this = PB::Writer::writeSubmessage(a2, v314);
  v315 = (const PB::Base *)v3[117];
  if (v315)
    this = PB::Writer::writeSubmessage(a2, v315);
  v316 = (const PB::Base *)v3[124];
  if (v316)
    this = PB::Writer::writeSubmessage(a2, v316);
  v317 = (const PB::Base *)v3[17];
  if (v317)
    this = PB::Writer::writeSubmessage(a2, v317);
  v318 = (const PB::Base *)v3[335];
  if (v318)
    this = PB::Writer::writeSubmessage(a2, v318);
  v319 = (const PB::Base *)v3[334];
  if (v319)
    this = PB::Writer::writeSubmessage(a2, v319);
  v320 = (const PB::Base *)v3[94];
  if (v320)
    this = PB::Writer::writeSubmessage(a2, v320);
  v321 = (const PB::Base *)v3[118];
  if (v321)
    this = PB::Writer::writeSubmessage(a2, v321);
  v322 = (const PB::Base *)v3[419];
  if (v322)
    this = PB::Writer::writeSubmessage(a2, v322);
  v323 = (const PB::Base *)v3[23];
  if (v323)
    this = PB::Writer::writeSubmessage(a2, v323);
  v324 = (const PB::Base *)v3[122];
  if (v324)
    this = PB::Writer::writeSubmessage(a2, v324);
  v325 = (const PB::Base *)v3[147];
  if (v325)
    this = PB::Writer::writeSubmessage(a2, v325);
  v326 = (const PB::Base *)v3[382];
  if (v326)
    this = PB::Writer::writeSubmessage(a2, v326);
  v327 = (const PB::Base *)v3[127];
  if (v327)
    this = PB::Writer::writeSubmessage(a2, v327);
  v328 = (const PB::Base *)v3[33];
  if (v328)
    this = PB::Writer::writeSubmessage(a2, v328);
  v329 = (const PB::Base *)v3[358];
  if (v329)
    this = PB::Writer::writeSubmessage(a2, v329);
  v330 = (const PB::Base *)v3[361];
  if (v330)
    this = PB::Writer::writeSubmessage(a2, v330);
  v331 = (const PB::Base *)v3[359];
  if (v331)
    this = PB::Writer::writeSubmessage(a2, v331);
  v332 = (const PB::Base *)v3[360];
  if (v332)
    this = PB::Writer::writeSubmessage(a2, v332);
  v333 = (const PB::Base *)v3[366];
  if (v333)
    this = PB::Writer::writeSubmessage(a2, v333);
  v334 = (const PB::Base *)v3[123];
  if (v334)
    this = PB::Writer::writeSubmessage(a2, v334);
  v335 = (const PB::Base *)v3[182];
  if (v335)
    this = PB::Writer::writeSubmessage(a2, v335);
  v336 = (const PB::Base *)v3[320];
  if (v336)
    this = PB::Writer::writeSubmessage(a2, v336);
  v337 = (const PB::Base *)v3[249];
  if (v337)
    this = PB::Writer::writeSubmessage(a2, v337);
  v338 = (const PB::Base *)v3[116];
  if (v338)
    this = PB::Writer::writeSubmessage(a2, v338);
  v339 = (const PB::Base *)v3[228];
  if (v339)
    this = PB::Writer::writeSubmessage(a2, v339);
  v340 = (const PB::Base *)v3[102];
  if (v340)
    this = PB::Writer::writeSubmessage(a2, v340);
  v341 = (const PB::Base *)v3[100];
  if (v341)
    this = PB::Writer::writeSubmessage(a2, v341);
  v342 = (const PB::Base *)v3[101];
  if (v342)
    this = PB::Writer::writeSubmessage(a2, v342);
  v343 = (const PB::Base *)v3[99];
  if (v343)
    this = PB::Writer::writeSubmessage(a2, v343);
  v344 = (const PB::Base *)v3[268];
  if (v344)
    this = PB::Writer::writeSubmessage(a2, v344);
  v345 = (const PB::Base *)v3[191];
  if (v345)
    this = PB::Writer::writeSubmessage(a2, v345);
  v346 = (const PB::Base *)v3[192];
  if (v346)
    this = PB::Writer::writeSubmessage(a2, v346);
  v347 = (const PB::Base *)v3[195];
  if (v347)
    this = PB::Writer::writeSubmessage(a2, v347);
  v348 = (const PB::Base *)v3[206];
  if (v348)
    this = PB::Writer::writeSubmessage(a2, v348);
  v349 = (const PB::Base *)v3[221];
  if (v349)
    this = PB::Writer::writeSubmessage(a2, v349);
  v350 = (const PB::Base *)v3[220];
  if (v350)
    this = PB::Writer::writeSubmessage(a2, v350);
  v351 = (const PB::Base *)v3[204];
  if (v351)
    this = PB::Writer::writeSubmessage(a2, v351);
  v352 = (const PB::Base *)v3[164];
  if (v352)
    this = PB::Writer::writeSubmessage(a2, v352);
  v353 = (const PB::Base *)v3[163];
  if (v353)
    this = PB::Writer::writeSubmessage(a2, v353);
  v354 = (const PB::Base *)v3[190];
  if (v354)
    this = PB::Writer::writeSubmessage(a2, v354);
  v355 = (const PB::Base *)v3[193];
  if (v355)
    this = PB::Writer::writeSubmessage(a2, v355);
  v356 = (const PB::Base *)v3[207];
  if (v356)
    this = PB::Writer::writeSubmessage(a2, v356);
  v357 = (const PB::Base *)v3[208];
  if (v357)
    this = PB::Writer::writeSubmessage(a2, v357);
  v358 = (const PB::Base *)v3[212];
  if (v358)
    this = PB::Writer::writeSubmessage(a2, v358);
  v359 = (const PB::Base *)v3[200];
  if (v359)
    this = PB::Writer::writeSubmessage(a2, v359);
  v360 = (const PB::Base *)v3[198];
  if (v360)
    this = PB::Writer::writeSubmessage(a2, v360);
  v361 = (const PB::Base *)v3[213];
  if (v361)
    this = PB::Writer::writeSubmessage(a2, v361);
  v362 = (const PB::Base *)v3[199];
  if (v362)
    this = PB::Writer::writeSubmessage(a2, v362);
  v363 = (const PB::Base *)v3[209];
  if (v363)
    this = PB::Writer::writeSubmessage(a2, v363);
  v364 = (const PB::Base *)v3[96];
  if (v364)
    this = PB::Writer::writeSubmessage(a2, v364);
  v365 = (const PB::Base *)v3[403];
  if (v365)
    this = PB::Writer::writeSubmessage(a2, v365);
  v366 = (const PB::Base *)v3[162];
  if (v366)
    this = PB::Writer::writeSubmessage(a2, v366);
  v367 = (const PB::Base *)v3[404];
  if (v367)
    this = PB::Writer::writeSubmessage(a2, v367);
  v368 = (const PB::Base *)v3[405];
  if (v368)
    this = PB::Writer::writeSubmessage(a2, v368);
  v369 = (const PB::Base *)v3[341];
  if (v369)
    this = PB::Writer::writeSubmessage(a2, v369);
  v370 = (const PB::Base *)v3[342];
  if (v370)
    this = PB::Writer::writeSubmessage(a2, v370);
  v371 = (const PB::Base *)v3[345];
  if (v371)
    this = PB::Writer::writeSubmessage(a2, v371);
  v372 = (const PB::Base *)v3[350];
  if (v372)
    this = PB::Writer::writeSubmessage(a2, v372);
  v373 = (const PB::Base *)v3[348];
  if (v373)
    this = PB::Writer::writeSubmessage(a2, v373);
  v374 = (const PB::Base *)v3[214];
  if (v374)
    this = PB::Writer::writeSubmessage(a2, v374);
  v375 = (const PB::Base *)v3[203];
  if (v375)
    this = PB::Writer::writeSubmessage(a2, v375);
  v376 = (const PB::Base *)v3[347];
  if (v376)
    this = PB::Writer::writeSubmessage(a2, v376);
  v377 = (const PB::Base *)v3[181];
  if (v377)
    this = PB::Writer::writeSubmessage(a2, v377);
  v378 = (const PB::Base *)v3[197];
  if (v378)
    this = PB::Writer::writeSubmessage(a2, v378);
  v379 = (const PB::Base *)v3[205];
  if (v379)
    this = PB::Writer::writeSubmessage(a2, v379);
  v380 = (const PB::Base *)v3[160];
  if (v380)
    this = PB::Writer::writeSubmessage(a2, v380);
  v381 = (const PB::Base *)v3[74];
  if (v381)
    this = PB::Writer::writeSubmessage(a2, v381);
  v382 = (const PB::Base *)v3[292];
  if (v382)
    this = PB::Writer::writeSubmessage(a2, v382);
  v383 = (const PB::Base *)v3[86];
  if (v383)
    this = PB::Writer::writeSubmessage(a2, v383);
  v384 = (const PB::Base *)v3[107];
  if (v384)
    this = PB::Writer::writeSubmessage(a2, v384);
  v385 = (const PB::Base *)v3[400];
  if (v385)
    this = PB::Writer::writeSubmessage(a2, v385);
  v386 = (const PB::Base *)v3[326];
  if (v386)
    this = PB::Writer::writeSubmessage(a2, v386);
  v387 = (const PB::Base *)v3[216];
  if (v387)
    this = PB::Writer::writeSubmessage(a2, v387);
  v388 = (const PB::Base *)v3[418];
  if (v388)
    this = PB::Writer::writeSubmessage(a2, v388);
  v389 = (const PB::Base *)v3[196];
  if (v389)
    this = PB::Writer::writeSubmessage(a2, v389);
  v390 = (const PB::Base *)v3[349];
  if (v390)
    this = PB::Writer::writeSubmessage(a2, v390);
  v391 = (const PB::Base *)v3[387];
  if (v391)
    this = PB::Writer::writeSubmessage(a2, v391);
  v392 = (const PB::Base *)v3[289];
  if (v392)
    this = PB::Writer::writeSubmessage(a2, v392);
  v393 = (const PB::Base *)v3[237];
  if (v393)
    this = PB::Writer::writeSubmessage(a2, v393);
  v394 = (const PB::Base *)v3[283];
  if (v394)
    this = PB::Writer::writeSubmessage(a2, v394);
  v395 = (const PB::Base *)v3[284];
  if (v395)
    this = PB::Writer::writeSubmessage(a2, v395);
  v396 = (const PB::Base *)v3[285];
  if (v396)
    this = PB::Writer::writeSubmessage(a2, v396);
  v397 = (const PB::Base *)v3[270];
  if (v397)
    this = PB::Writer::writeSubmessage(a2, v397);
  v398 = (const PB::Base *)v3[287];
  if (v398)
    this = PB::Writer::writeSubmessage(a2, v398);
  v399 = (const PB::Base *)v3[227];
  if (v399)
    this = PB::Writer::writeSubmessage(a2, v399);
  v400 = (const PB::Base *)v3[401];
  if (v400)
    this = PB::Writer::writeSubmessage(a2, v400);
  v401 = (const PB::Base *)v3[279];
  if (v401)
    this = PB::Writer::writeSubmessage(a2, v401);
  v402 = (const PB::Base *)v3[280];
  if (v402)
    this = PB::Writer::writeSubmessage(a2, v402);
  v403 = (const PB::Base *)v3[399];
  if (v403)
    this = PB::Writer::writeSubmessage(a2, v403);
  v404 = (const PB::Base *)v3[388];
  if (v404)
    this = PB::Writer::writeSubmessage(a2, v404);
  v405 = (const PB::Base *)v3[103];
  if (v405)
    this = PB::Writer::writeSubmessage(a2, v405);
  v406 = (const PB::Base *)v3[218];
  if (v406)
    this = PB::Writer::writeSubmessage(a2, v406);
  v407 = (const PB::Base *)v3[357];
  if (v407)
    this = PB::Writer::writeSubmessage(a2, v407);
  v408 = (const PB::Base *)v3[278];
  if (v408)
    this = PB::Writer::writeSubmessage(a2, v408);
  v409 = (const PB::Base *)v3[272];
  if (v409)
    this = PB::Writer::writeSubmessage(a2, v409);
  v410 = (const PB::Base *)v3[271];
  if (v410)
    this = PB::Writer::writeSubmessage(a2, v410);
  v411 = (const PB::Base *)v3[275];
  if (v411)
    this = PB::Writer::writeSubmessage(a2, v411);
  v412 = (const PB::Base *)v3[13];
  if (v412)
    this = PB::Writer::writeSubmessage(a2, v412);
  v413 = (const PB::Base *)v3[286];
  if (v413)
    this = PB::Writer::writeSubmessage(a2, v413);
  v414 = (const PB::Base *)v3[309];
  if (v414)
    this = PB::Writer::writeSubmessage(a2, v414);
  v415 = (const PB::Base *)v3[312];
  if (v415)
    this = PB::Writer::writeSubmessage(a2, v415);
  v416 = (const PB::Base *)v3[211];
  if (v416)
    this = PB::Writer::writeSubmessage(a2, v416);
  v417 = (const PB::Base *)v3[313];
  if (v417)
    this = PB::Writer::writeSubmessage(a2, v417);
  v418 = (const PB::Base *)v3[310];
  if (v418)
    this = PB::Writer::writeSubmessage(a2, v418);
  v419 = (const PB::Base *)v3[277];
  if (v419)
    this = PB::Writer::writeSubmessage(a2, v419);
  v420 = (const PB::Base *)v3[72];
  if (v420)
    this = PB::Writer::writeSubmessage(a2, v420);
  v421 = (const PB::Base *)v3[276];
  if (v421)
    this = PB::Writer::writeSubmessage(a2, v421);
  v422 = (const PB::Base *)v3[293];
  if (v422)
    this = PB::Writer::writeSubmessage(a2, v422);
  v423 = (const PB::Base *)v3[241];
  if (v423)
    this = PB::Writer::writeSubmessage(a2, v423);
  v424 = (const PB::Base *)v3[188];
  if (v424)
    this = PB::Writer::writeSubmessage(a2, v424);
  v425 = (const PB::Base *)v3[189];
  if (v425)
    this = PB::Writer::writeSubmessage(a2, v425);
  v426 = (const PB::Base *)v3[311];
  if (v426)
    this = PB::Writer::writeSubmessage(a2, v426);
  v427 = (const PB::Base *)v3[274];
  if (v427)
    this = PB::Writer::writeSubmessage(a2, v427);
  v428 = (const PB::Base *)v3[273];
  if (v428)
    this = PB::Writer::writeSubmessage(a2, v428);
  v429 = (const PB::Base *)v3[202];
  if (v429)
    this = PB::Writer::writeSubmessage(a2, v429);
  v430 = (const PB::Base *)v3[201];
  if (v430)
    this = PB::Writer::writeSubmessage(a2, v430);
  v431 = (const PB::Base *)v3[314];
  if (v431)
    this = PB::Writer::writeSubmessage(a2, v431);
  v432 = (const PB::Base *)v3[39];
  if (v432)
    this = PB::Writer::writeSubmessage(a2, v432);
  v433 = (const PB::Base *)v3[113];
  if (v433)
    this = PB::Writer::writeSubmessage(a2, v433);
  v434 = (const PB::Base *)v3[295];
  if (v434)
    this = PB::Writer::writeSubmessage(a2, v434);
  v435 = (const PB::Base *)v3[298];
  if (v435)
    this = PB::Writer::writeSubmessage(a2, v435);
  v436 = (const PB::Base *)v3[32];
  if (v436)
    this = PB::Writer::writeSubmessage(a2, v436);
  v437 = (const PB::Base *)v3[31];
  if (v437)
    this = PB::Writer::writeSubmessage(a2, v437);
  v438 = (const PB::Base *)v3[352];
  if (v438)
    this = PB::Writer::writeSubmessage(a2, v438);
  v439 = (const PB::Base *)v3[351];
  if (v439)
    this = PB::Writer::writeSubmessage(a2, v439);
  v440 = (const PB::Base *)v3[328];
  if (v440)
    this = PB::Writer::writeSubmessage(a2, v440);
  v441 = (const PB::Base *)v3[329];
  if (v441)
    this = PB::Writer::writeSubmessage(a2, v441);
  v442 = (const PB::Base *)v3[331];
  if (v442)
    this = PB::Writer::writeSubmessage(a2, v442);
  v443 = (const PB::Base *)v3[161];
  if (v443)
    this = PB::Writer::writeSubmessage(a2, v443);
  v444 = (const PB::Base *)v3[330];
  if (v444)
    this = PB::Writer::writeSubmessage(a2, v444);
  v445 = (const PB::Base *)v3[42];
  if (v445)
    this = PB::Writer::writeSubmessage(a2, v445);
  v446 = (const PB::Base *)v3[185];
  if (v446)
    this = PB::Writer::writeSubmessage(a2, v446);
  v447 = (const PB::Base *)v3[186];
  if (v447)
    this = PB::Writer::writeSubmessage(a2, v447);
  v448 = (const PB::Base *)v3[187];
  if (v448)
    this = PB::Writer::writeSubmessage(a2, v448);
  v449 = (const PB::Base *)v3[353];
  if (v449)
    this = PB::Writer::writeSubmessage(a2, v449);
  v450 = (const PB::Base *)v3[354];
  if (v450)
    this = PB::Writer::writeSubmessage(a2, v450);
  v451 = (const PB::Base *)v3[368];
  if (v451)
    this = PB::Writer::writeSubmessage(a2, v451);
  v452 = (const PB::Base *)v3[369];
  if (v452)
    this = PB::Writer::writeSubmessage(a2, v452);
  v453 = (const PB::Base *)v3[179];
  if (v453)
    return PB::Writer::writeSubmessage(a2, v453);
  return this;
}

uint64_t CMMsl::Item::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  _QWORD *v491;
  _QWORD *v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  _QWORD *v647;
  _QWORD *v648;
  uint64_t v649;
  _QWORD *v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t result;
  uint64_t v998;
  uint64_t v999;

  if ((*(_BYTE *)(a1 + 3616) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 3616) & 1) == 0 || *(double *)(a1 + 616) != *(double *)(a2 + 616))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 3616) & 1) != 0)
  {
    return 0;
  }
  v4 = *(_QWORD *)(a1 + 1168);
  v5 = *(_QWORD *)(a2 + 1168);
  if (v4)
  {
    if (!v5 || !CMMsl::GyroBiasCorrection::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = *(_QWORD *)(a1 + 1160);
  v7 = *(_QWORD *)(a2 + 1160);
  if (v6)
  {
    if (!v7 || !CMMsl::GyroBiasConstraints::operator==(v6, v7))
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  v8 = *(_QWORD *)(a1 + 1136);
  v9 = *(_QWORD *)(a2 + 1136);
  if (v8)
  {
    if (!v9 || !CMMsl::GravityCorrection::operator==(v8, v9))
      return 0;
  }
  else if (v9)
  {
    return 0;
  }
  v10 = *(_QWORD *)(a1 + 1128);
  v11 = *(_QWORD *)(a2 + 1128);
  if (v10)
  {
    if (!v11 || !CMMsl::GravityConstraints::operator==(v10, v11))
      return 0;
  }
  else if (v11)
  {
    return 0;
  }
  v12 = *(_QWORD *)(a1 + 680);
  v13 = *(_QWORD *)(a2 + 680);
  if (v12)
  {
    if (!v13)
      return 0;
    v14 = *(_QWORD *)(v12 + 8);
    v15 = *(_QWORD *)(v13 + 8);
    if (v14)
    {
      if (!v15 || !CMMsl::DeviceMotionCorrection::operator==(v14, v15))
        return 0;
    }
    else if (v15)
    {
      return 0;
    }
  }
  else if (v13)
  {
    return 0;
  }
  v16 = *(_QWORD *)(a1 + 672);
  v17 = *(_QWORD *)(a2 + 672);
  if (v16)
  {
    if (!v17 || !CMMsl::CompassConstraints::operator==(v16, v17))
      return 0;
  }
  else if (v17)
  {
    return 0;
  }
  v18 = *(_QWORD *)(a1 + 728);
  v19 = *(_QWORD *)(a2 + 728);
  if (v18)
  {
    if (!v19)
      return 0;
    v20 = *(_QWORD *)(v18 + 8);
    v21 = *(_QWORD *)(v19 + 8);
    if (v20)
    {
      if (!v21 || !CMMsl::DeviceMotionCorrection::operator==(v20, v21))
        return 0;
    }
    else if (v21)
    {
      return 0;
    }
  }
  else if (v19)
  {
    return 0;
  }
  v22 = *(_QWORD *)(a1 + 720);
  v23 = *(_QWORD *)(a2 + 720);
  if (v22)
  {
    if (!v23 || !CMMsl::CourseConstraints::operator==(v22, v23))
      return 0;
  }
  else if (v23)
  {
    return 0;
  }
  v24 = *(_QWORD **)(a1 + 1440);
  v25 = *(_QWORD **)(a2 + 1440);
  if (v24)
  {
    if (!v25 || !CMMsl::IntersiloNSCodingData::operator==(v24, v25) && *(_QWORD *)(a1 + 1440) | *(_QWORD *)(a2 + 1440))
      return 0;
  }
  else if (v25)
  {
    return 0;
  }
  v26 = *(_QWORD *)(a1 + 760);
  v27 = *(_QWORD *)(a2 + 760);
  if (v26)
  {
    if (!v27 || !CMMsl::DeviceMotionCovariance::operator==(v26, v27))
      return 0;
  }
  else if (v27)
  {
    return 0;
  }
  v28 = *(_QWORD *)(a1 + 88);
  v29 = *(_QWORD *)(a2 + 88);
  if (v28)
  {
    if (!v29 || !CMMsl::AccessoryAccel::operator==(v28, v29))
      return 0;
  }
  else if (v29)
  {
    return 0;
  }
  v30 = *(_QWORD *)(a1 + 144);
  v31 = *(_QWORD *)(a2 + 144);
  if (v30)
  {
    if (!v31 || !CMMsl::AccessoryGyro::operator==(v30, v31))
      return 0;
  }
  else if (v31)
  {
    return 0;
  }
  v32 = *(_QWORD *)(a1 + 216);
  v33 = *(_QWORD *)(a2 + 216);
  if (v32)
  {
    if (!v33 || !CMMsl::AccessoryProx::operator==(v32, v33))
      return 0;
  }
  else if (v33)
  {
    return 0;
  }
  v34 = *(_QWORD *)(a1 + 3448);
  v35 = *(_QWORD *)(a2 + 3448);
  if (v34)
  {
    if (!v35)
      return 0;
    v36 = *(_QWORD *)(v34 + 8);
    v37 = *(_QWORD *)(v35 + 8);
    if (v36)
    {
      if (!v37 || !CMMsl::Accel::operator==(v36, v37))
        return 0;
    }
    else if (v37)
    {
      return 0;
    }
  }
  else if (v35)
  {
    return 0;
  }
  v38 = *(_QWORD *)(a1 + 3472);
  v39 = *(_QWORD *)(a2 + 3472);
  if (v38)
  {
    if (!v39)
      return 0;
    v40 = *(_QWORD *)(v38 + 8);
    v41 = *(_QWORD *)(v39 + 8);
    if (v40)
    {
      if (!v41 || !CMMsl::BodyMetrics::operator==(v40, v41))
        return 0;
    }
    else if (v41)
    {
      return 0;
    }
  }
  else if (v39)
  {
    return 0;
  }
  v42 = *(_QWORD *)(a1 + 3488);
  v43 = *(_QWORD *)(a2 + 3488);
  if (v42)
  {
    if (!v43)
      return 0;
    v44 = *(_QWORD *)(v42 + 8);
    v45 = *(_QWORD *)(v43 + 8);
    if (v44)
    {
      if (!v45 || !CMMsl::ElevationChange::operator==(v44, v45))
        return 0;
    }
    else if (v45)
    {
      return 0;
    }
  }
  else if (v43)
  {
    return 0;
  }
  v46 = *(_QWORD *)(a1 + 3520);
  v47 = *(_QWORD *)(a2 + 3520);
  if (v46)
  {
    if (!v47)
      return 0;
    v48 = *(_QWORD *)(v46 + 8);
    v49 = *(_QWORD *)(v47 + 8);
    if (v48)
    {
      if (!v49 || !CMMsl::OnsetHeartRateData::operator==(v48, v49))
        return 0;
    }
    else if (v49)
    {
      return 0;
    }
  }
  else if (v47)
  {
    return 0;
  }
  v50 = *(_QWORD *)(a1 + 3552);
  v51 = *(_QWORD *)(a2 + 3552);
  if (v50)
  {
    if (!v51)
      return 0;
    v52 = *(_QWORD *)(v50 + 8);
    v53 = *(_QWORD *)(v51 + 8);
    if (v52)
    {
      if (!v53 || !CMMsl::RotationRate::operator==(v52, v53))
        return 0;
    }
    else if (v53)
    {
      return 0;
    }
  }
  else if (v51)
  {
    return 0;
  }
  v54 = *(_QWORD *)(a1 + 3536);
  v55 = *(_QWORD *)(a2 + 3536);
  if (v54)
  {
    if (!v55)
      return 0;
    v56 = *(_QWORD *)(v54 + 8);
    v57 = *(_QWORD *)(v55 + 8);
    if (v56)
    {
      if (!v57 || !CMMsl::OdometerWithAltitude::operator==(v56, v57))
        return 0;
    }
    else if (v57)
    {
      return 0;
    }
  }
  else if (v55)
  {
    return 0;
  }
  v58 = *(_QWORD *)(a1 + 3584);
  v59 = *(_QWORD *)(a2 + 3584);
  if (v58)
  {
    if (!v59)
      return 0;
    v60 = *(_QWORD *)(v58 + 8);
    v61 = *(_QWORD *)(v59 + 8);
    if (v60)
    {
      if (!v61 || !CMMsl::WorkoutEvent::operator==(v60, v61))
        return 0;
    }
    else if (v61)
    {
      return 0;
    }
  }
  else if (v59)
  {
    return 0;
  }
  v62 = *(_QWORD *)(a1 + 3320);
  v63 = *(_QWORD *)(a2 + 3320);
  if (v62)
  {
    if (!v63 || !CMMsl::VO2MaxInput::operator==(v62, v63))
      return 0;
  }
  else if (v63)
  {
    return 0;
  }
  v64 = *(_QWORD *)(a1 + 544);
  v65 = *(_QWORD *)(a2 + 544);
  if (v64)
  {
    if (!v65
      || !sub_24275CB68(*(_QWORD *)(v64 + 8), *(_QWORD *)(v64 + 16), *(uint64_t **)(v65 + 8), *(_QWORD *)(v65 + 16)))
    {
      return 0;
    }
  }
  else if (v65)
  {
    return 0;
  }
  v66 = *(_QWORD *)(a1 + 552);
  v67 = *(_QWORD *)(a2 + 552);
  if (v66)
  {
    if (!v67 || !CMMsl::BraveHeartNatalieData::operator==(v66, v67))
      return 0;
  }
  else if (v67)
  {
    return 0;
  }
  v68 = *(_QWORD *)(a1 + 560);
  v69 = *(_QWORD *)(a2 + 560);
  if (v68)
  {
    if (!v69
      || !sub_24275DDC8(*(_QWORD *)(v68 + 8), *(_QWORD *)(v68 + 16), *(uint64_t **)(v69 + 8), *(_QWORD *)(v69 + 16)))
    {
      return 0;
    }
  }
  else if (v69)
  {
    return 0;
  }
  v70 = *(_QWORD *)(a1 + 536);
  v71 = *(_QWORD *)(a2 + 536);
  if (v70)
  {
    if (!v71
      || !sub_24275C1F8(*(_QWORD *)(v70 + 8), *(_QWORD *)(v70 + 16), *(uint64_t **)(v71 + 8), *(_QWORD *)(v71 + 16)))
    {
      return 0;
    }
  }
  else if (v71)
  {
    return 0;
  }
  v72 = *(_QWORD *)(a1 + 568);
  v73 = *(_QWORD *)(a2 + 568);
  if (v72)
  {
    if (!v73 || !CMMsl::BraveHeartWorkoutEvent::operator==(v72, v73))
      return 0;
  }
  else if (v73)
  {
    return 0;
  }
  v74 = *(_QWORD *)(a1 + 3512);
  v75 = *(_QWORD *)(a2 + 3512);
  if (v74)
  {
    if (!v75 || !CMMsl::WorkoutRecorderHealthKitInfo::operator==(v74, v75))
      return 0;
  }
  else if (v75)
  {
    return 0;
  }
  v76 = *(_QWORD *)(a1 + 2304);
  v77 = *(_QWORD *)(a2 + 2304);
  if (v76)
  {
    if (!v77 || !CMMsl::PearlAttitude::operator==(v76, v77))
      return 0;
  }
  else if (v77)
  {
    return 0;
  }
  v78 = *(_QWORD *)(a1 + 2720);
  v79 = *(_QWORD *)(a2 + 2720);
  if (v78)
  {
    if (!v79 || !CMMsl::RotationRate::operator==(v78, v79))
      return 0;
  }
  else if (v79)
  {
    return 0;
  }
  v80 = *(_QWORD *)(a1 + 3568);
  v81 = *(_QWORD *)(a2 + 3568);
  if (v80)
  {
    if (!v81)
      return 0;
    v82 = *(_QWORD *)(v80 + 8);
    v83 = *(_QWORD *)(v81 + 8);
    if (v82)
    {
      if (!v83 || !CMMsl::WatchOrientationSettings::operator==(v82, v83))
        return 0;
    }
    else if (v83)
    {
      return 0;
    }
  }
  else if (v81)
  {
    return 0;
  }
  v84 = *(_QWORD *)(a1 + 3400);
  v85 = *(_QWORD *)(a2 + 3400);
  if (v84)
  {
    if (!v85 || !CMMsl::WatchOnWristState::operator==(v84, v85))
      return 0;
  }
  else if (v85)
  {
    return 0;
  }
  v86 = *(_QWORD *)(a1 + 608);
  v87 = *(_QWORD *)(a2 + 608);
  if (v86)
  {
    if (!v87 || !CMMsl::CatherineHealthKitData::operator==(v86, v87))
      return 0;
  }
  else if (v87)
  {
    return 0;
  }
  v88 = *(_QWORD *)(a1 + 3416);
  v89 = *(_QWORD *)(a2 + 3416);
  if (v88)
  {
    if (!v89
      || !sub_2429068B4(*(_QWORD *)(v88 + 8), *(_QWORD *)(v88 + 16), *(uint64_t **)(v89 + 8), *(_QWORD *)(v89 + 16)))
    {
      return 0;
    }
  }
  else if (v89)
  {
    return 0;
  }
  v90 = *(_QWORD *)(a1 + 1408);
  v91 = *(_QWORD *)(a2 + 1408);
  if (v90)
  {
    if (!v91 || !CMMsl::InEarTransitionEntry::operator==(v90, v91))
      return 0;
  }
  else if (v91)
  {
    return 0;
  }
  v92 = *(_QWORD *)(a1 + 1392);
  v93 = *(_QWORD *)(a2 + 1392);
  if (v92)
  {
    if (!v93 || !CMMsl::InEarSession::operator==(v92, v93))
      return 0;
  }
  else if (v93)
  {
    return 0;
  }
  v94 = *(_QWORD *)(a1 + 1352);
  v95 = *(_QWORD *)(a2 + 1352);
  if (v94)
  {
    if (!v95 || !CMMsl::InEarBaseline::operator==(v94, v95))
      return 0;
  }
  else if (v95)
  {
    return 0;
  }
  v96 = *(_QWORD *)(a1 + 224);
  v97 = *(_QWORD *)(a2 + 224);
  if (v96)
  {
    if (!v97 || !CMMsl::AccessoryProxSensorDrop::operator==(v96, v97))
      return 0;
  }
  else if (v97)
  {
    return 0;
  }
  v98 = *(_QWORD *)(a1 + 232);
  v99 = *(_QWORD *)(a2 + 232);
  if (v98)
  {
    if (!v99 || !CMMsl::AccessoryProxTempComp::operator==(v98, v99))
      return 0;
  }
  else if (v99)
  {
    return 0;
  }
  v100 = *(_QWORD *)(a1 + 272);
  v101 = *(_QWORD *)(a2 + 272);
  if (v100)
  {
    if (!v101 || !CMMsl::AccessoryWake::operator==(v100, v101))
      return 0;
  }
  else if (v101)
  {
    return 0;
  }
  v102 = *(_QWORD *)(a1 + 912);
  v103 = *(_QWORD *)(a2 + 912);
  if (v102)
  {
    if (!v103 || !CMMsl::FacePose::operator==(v102, v103))
      return 0;
  }
  else if (v103)
  {
    return 0;
  }
  v104 = *(_QWORD *)(a1 + 3576);
  v105 = *(_QWORD *)(a2 + 3576);
  if (v104)
  {
    if (!v105 || !CMMsl::WorkoutRecorderWifiScanResults::operator==(v104, v105))
      return 0;
  }
  else if (v105)
  {
    return 0;
  }
  v106 = *(_QWORD *)(a1 + 3544);
  v107 = *(_QWORD *)(a2 + 3544);
  if (v106)
  {
    if (!v107)
      return 0;
    v108 = *(_QWORD *)(v106 + 8);
    v109 = *(_QWORD *)(v107 + 8);
    if (v108)
    {
      if (!v109 || !CMMsl::Pressure::operator==(v108, v109))
        return 0;
    }
    else if (v109)
    {
      return 0;
    }
  }
  else if (v107)
  {
    return 0;
  }
  v110 = *(_QWORD *)(a1 + 1344);
  v111 = *(_QWORD *)(a2 + 1344);
  if (v110)
  {
    if (!v111 || !CMMsl::InEarAdditionalState::operator==(v110, v111))
      return 0;
  }
  else if (v111)
  {
    return 0;
  }
  v112 = *(_QWORD *)(a1 + 128);
  v113 = *(_QWORD *)(a2 + 128);
  if (v112)
  {
    if (!v113 || !CMMsl::AccessoryDeviceMotion::operator==(v112, v113))
      return 0;
  }
  else if (v113)
  {
    return 0;
  }
  v114 = *(_QWORD *)(a1 + 3280);
  v115 = *(_QWORD *)(a2 + 3280);
  if (v114)
  {
    if (!v115 || !CMMsl::VisionCompassBias::operator==(v114, v115))
      return 0;
  }
  else if (v115)
  {
    return 0;
  }
  v116 = *(_QWORD *)(a1 + 352);
  v117 = *(_QWORD *)(a2 + 352);
  if (v116)
  {
    if (!v117)
      return 0;
    if ((*(_BYTE *)(v116 + 12) & 1) != 0)
    {
      if ((*(_BYTE *)(v117 + 12) & 1) == 0 || *(_DWORD *)(v116 + 8) != *(_DWORD *)(v117 + 8))
        return 0;
    }
    else if ((*(_BYTE *)(v117 + 12) & 1) != 0)
    {
      return 0;
    }
  }
  else if (v117)
  {
    return 0;
  }
  v118 = *(_QWORD *)(a1 + 3256);
  v119 = *(_QWORD *)(a2 + 3256);
  if (v118)
  {
    if (!v119 || !CMMsl::VIOEstimation::operator==(v118, v119))
      return 0;
  }
  else if (v119)
  {
    return 0;
  }
  v120 = *(_QWORD *)(a1 + 1880);
  v121 = *(_QWORD *)(a2 + 1880);
  if (v120)
  {
    if (!v121 || !CMMsl::LSLHeadingEstimation::operator==(v120, v121))
      return 0;
  }
  else if (v121)
  {
    return 0;
  }
  v122 = *(_QWORD *)(a1 + 1000);
  v123 = *(_QWORD *)(a2 + 1000);
  if (v122)
  {
    if (!v123 || !CMMsl::FallSnippet::operator==(v122, v123))
      return 0;
  }
  else if (v123)
  {
    return 0;
  }
  v124 = *(_QWORD *)(a1 + 80);
  v125 = *(_QWORD *)(a2 + 80);
  if (v124)
  {
    if (!v125 || !CMMsl::AccelerometerPace::operator==(v124, v125))
      return 0;
  }
  else if (v125)
  {
    return 0;
  }
  v126 = *(_QWORD *)(a1 + 2072);
  v127 = *(_QWORD *)(a2 + 2072);
  if (v126)
  {
    if (!v127)
      return 0;
    if ((*(_BYTE *)(v126 + 12) & 1) != 0)
    {
      if ((*(_BYTE *)(v127 + 12) & 1) == 0 || *(float *)(v126 + 8) != *(float *)(v127 + 8))
        return 0;
    }
    else if ((*(_BYTE *)(v127 + 12) & 1) != 0)
    {
      return 0;
    }
  }
  else if (v127)
  {
    return 0;
  }
  v128 = *(_QWORD *)(a1 + 3032);
  v129 = *(_QWORD *)(a2 + 3032);
  if (v128)
  {
    if (!v129 || !CMMsl::StepCountEntry::operator==(v128, v129))
      return 0;
  }
  else if (v129)
  {
    return 0;
  }
  v130 = *(_QWORD *)(a1 + 1960);
  v131 = *(_QWORD *)(a2 + 1960);
  if (v130)
  {
    if (!v131 || !CMMsl::MobilityBoutMetrics::operator==(v130, v131))
      return 0;
  }
  else if (v131)
  {
    return 0;
  }
  v132 = *(_QWORD *)(a1 + 712);
  v133 = *(_QWORD *)(a2 + 712);
  if (v132)
  {
    if (!v133 || !CMMsl::CoprocessorReplyGaitMetrics::operator==(v132, v133))
      return 0;
  }
  else if (v133)
  {
    return 0;
  }
  v134 = *(_QWORD *)(a1 + 3264);
  v135 = *(_QWORD *)(a2 + 3264);
  if (v134)
  {
    if (!v135 || !CMMsl::VIOPose::operator==(v134, v135))
      return 0;
  }
  else if (v135)
  {
    return 0;
  }
  v136 = *(_QWORD *)(a1 + 2848);
  v137 = *(_QWORD *)(a2 + 2848);
  if (v136)
  {
    if (!v137)
      return 0;
    if ((*(_BYTE *)(v136 + 12) & 1) != 0)
    {
      if ((*(_BYTE *)(v137 + 12) & 1) == 0 || *(_DWORD *)(v136 + 8) != *(_DWORD *)(v137 + 8))
        return 0;
    }
    else if ((*(_BYTE *)(v137 + 12) & 1) != 0)
    {
      return 0;
    }
  }
  else if (v137)
  {
    return 0;
  }
  v138 = *(_QWORD *)(a1 + 3272);
  v139 = *(_QWORD *)(a2 + 3272);
  if (v138)
  {
    if (!v139 || !CMMsl::VIOReplayPose::operator==(v138, v139))
      return 0;
  }
  else if (v139)
  {
    return 0;
  }
  v140 = *(_QWORD *)(a1 + 3312);
  v141 = *(_QWORD *)(a2 + 3312);
  if (v140)
  {
    if (!v141 || !CMMsl::VisualStateMeasurement::operator==(v140, v141))
      return 0;
  }
  else if (v141)
  {
    return 0;
  }
  v142 = *(_QWORD *)(a1 + 1752);
  v143 = *(_QWORD *)(a2 + 1752);
  if (v142)
  {
    if (!v143 || !CMMsl::KappaTriggerDebug::operator==(v142, v143))
      return 0;
  }
  else if (v143)
  {
    return 0;
  }
  v144 = *(_QWORD *)(a1 + 1552);
  v145 = *(_QWORD *)(a2 + 1552);
  if (v144)
  {
    if (!v145 || !CMMsl::KappaDirectionOfTravel::operator==(v144, v145))
      return 0;
  }
  else if (v145)
  {
    return 0;
  }
  v146 = *(_QWORD *)(a1 + 1328);
  v147 = *(_QWORD *)(a2 + 1328);
  if (v146)
  {
    if (!v147)
      return 0;
    v148 = *(_QWORD *)(v146 + 8);
    v149 = *(_QWORD *)(v147 + 8);
    if (v148)
    {
      if (!v149 || !CMMsl::Accel::operator==(v148, v149))
        return 0;
    }
    else if (v149)
    {
      return 0;
    }
  }
  else if (v147)
  {
    return 0;
  }
  v150 = *(_QWORD *)(a1 + 1720);
  v151 = *(_QWORD *)(a2 + 1720);
  if (v150)
  {
    if (!v151 || !CMMsl::KappaSteps::operator==(v150, v151))
      return 0;
  }
  else if (v151)
  {
    return 0;
  }
  v152 = *(_QWORD *)(a1 + 3176);
  v153 = *(_QWORD *)(a2 + 3176);
  if (v152)
  {
    if (!v153 || !CMMsl::SignificantUserInteraction::operator==(v152, v153))
      return 0;
  }
  else if (v153)
  {
    return 0;
  }
  v154 = *(_QWORD *)(a1 + 1680);
  v155 = *(_QWORD *)(a2 + 1680);
  if (v154)
  {
    if (!v155 || !CMMsl::KappaRoads::operator==(v154, v155))
      return 0;
  }
  else if (v155)
  {
    return 0;
  }
  v156 = *(_QWORD *)(a1 + 3184);
  v157 = *(_QWORD *)(a2 + 3184);
  if (v156)
  {
    if (!v157 || (CMMsl::UserStudyEvent::operator==(v156, v157) & 1) == 0)
      return 0;
  }
  else if (v157)
  {
    return 0;
  }
  v158 = *(_QWORD *)(a1 + 376);
  v159 = *(_QWORD *)(a2 + 376);
  if (v158)
  {
    if (!v159 || !CMMsl::AuxiliaryDeviceMotion::operator==(v158, v159))
      return 0;
  }
  else if (v159)
  {
    return 0;
  }
  v160 = *(_QWORD *)(a1 + 3128);
  v161 = *(_QWORD *)(a2 + 3128);
  if (v160)
  {
    if (!v161 || !CMMsl::TempestPoCAuxiliaryDeviceMotion::operator==(v160, v161))
      return 0;
  }
  else if (v161)
  {
    return 0;
  }
  v162 = *(_QWORD *)(a1 + 368);
  v163 = *(_QWORD *)(a2 + 368);
  if (v162)
  {
    if (!v163 || !CMMsl::AudioAccessoryDeviceMotion::operator==(v162, v163))
      return 0;
  }
  else if (v163)
  {
    return 0;
  }
  v164 = *(_QWORD *)(a1 + 3136);
  v165 = *(_QWORD *)(a2 + 3136);
  if (v164)
  {
    if (!v165 || !CMMsl::TempestPoCListenerOrientation::operator==(v164, v165))
      return 0;
  }
  else if (v165)
  {
    return 0;
  }
  v166 = *(_QWORD *)(a1 + 3456);
  v167 = *(_QWORD *)(a2 + 3456);
  if (v166)
  {
    if (!v167)
      return 0;
    v168 = *(_QWORD *)(v166 + 8);
    v169 = *(_QWORD *)(v167 + 8);
    if (v168)
    {
      if (!v169 || !CMMsl::Accel::operator==(v168, v169))
        return 0;
    }
    else if (v169)
    {
      return 0;
    }
  }
  else if (v167)
  {
    return 0;
  }
  v170 = *(_QWORD *)(a1 + 296);
  v171 = *(_QWORD *)(a2 + 296);
  if (v170)
  {
    if (!v171)
      return 0;
    if ((*(_BYTE *)(v170 + 12) & 1) != 0)
    {
      if ((*(_BYTE *)(v171 + 12) & 1) == 0 || *(float *)(v170 + 8) != *(float *)(v171 + 8))
        return 0;
    }
    else if ((*(_BYTE *)(v171 + 12) & 1) != 0)
    {
      return 0;
    }
  }
  else if (v171)
  {
    return 0;
  }
  v172 = *(_QWORD *)(a1 + 3440);
  v173 = *(_QWORD *)(a2 + 3440);
  if (v172)
  {
    if (!v173 || !CMMsl::WorkoutRecorderALSData::operator==(v172, v173))
      return 0;
  }
  else if (v173)
  {
    return 0;
  }
  v174 = *(_QWORD *)(a1 + 3288);
  v175 = *(_QWORD *)(a2 + 3288);
  if (v174)
  {
    if (!v175 || !CMMsl::VisualLocalization::operator==(v174, v175))
      return 0;
  }
  else if (v175)
  {
    return 0;
  }
  v176 = *(_QWORD *)(a1 + 1240);
  v177 = *(_QWORD *)(a2 + 1240);
  if (v176)
  {
    if (!v177 || !CMMsl::GyroFactoryCalibrationData::operator==(v176, v177))
      return 0;
  }
  else if (v177)
  {
    return 0;
  }
  v178 = *(_QWORD *)(a1 + 2936);
  v179 = *(_QWORD *)(a2 + 2936);
  if (v178)
  {
    if (!v179 || !CMMsl::SoundPressureLevel::operator==(v178, v179))
      return 0;
  }
  else if (v179)
  {
    return 0;
  }
  v180 = *(_QWORD *)(a1 + 1048);
  v181 = *(_QWORD *)(a2 + 1048);
  if (v180)
  {
    if (!v181 || !CMMsl::FrequencyResponse::operator==(v180, v181))
      return 0;
  }
  else if (v181)
  {
    return 0;
  }
  v182 = *(_QWORD *)(a1 + 872);
  v183 = *(_QWORD *)(a2 + 872);
  if (v182)
  {
    if (!v183)
      return 0;
    if ((*(_BYTE *)(v182 + 12) & 1) != 0)
    {
      if ((*(_BYTE *)(v183 + 12) & 1) == 0 || *(_DWORD *)(v182 + 8) != *(_DWORD *)(v183 + 8))
        return 0;
    }
    else if ((*(_BYTE *)(v183 + 12) & 1) != 0)
    {
      return 0;
    }
  }
  else if (v183)
  {
    return 0;
  }
  v184 = *(_QWORD *)(a1 + 32);
  v185 = *(_QWORD *)(a2 + 32);
  if (v184)
  {
    if (!v185)
      return 0;
    v186 = *(_QWORD *)(v184 + 8);
    v187 = *(_QWORD *)(v185 + 8);
    if (v186)
    {
      if (!v187 || !CMMsl::Accel::operator==(v186, v187))
        return 0;
    }
    else if (v187)
    {
      return 0;
    }
  }
  else if (v185)
  {
    return 0;
  }
  v188 = *(_QWORD *)(a1 + 2024);
  v189 = *(_QWORD *)(a2 + 2024);
  if (v188)
  {
    if (!v189 || !CMMsl::MotionLocation::operator==(v188, v189))
      return 0;
  }
  else if (v189)
  {
    return 0;
  }
  v190 = *(_QWORD *)(a1 + 1984);
  v191 = *(_QWORD *)(a2 + 1984);
  if (v190)
  {
    if (!v191 || !CMMsl::MotionActivity::operator==(v190, v191))
      return 0;
  }
  else if (v191)
  {
    return 0;
  }
  v192 = *(_QWORD *)(a1 + 496);
  v193 = *(_QWORD *)(a2 + 496);
  if (v192)
  {
    if (!v193 || !CMMsl::BioMotionPose::operator==(v192, v193))
      return 0;
  }
  else if (v193)
  {
    return 0;
  }
  v194 = *(_QWORD *)(a1 + 1736);
  v195 = *(_QWORD *)(a2 + 1736);
  if (v194)
  {
    if (!v195 || !CMMsl::KappaTrigger::operator==(v194, v195))
      return 0;
  }
  else if (v195)
  {
    return 0;
  }
  v196 = *(_QWORD *)(a1 + 2664);
  v197 = *(_QWORD *)(a2 + 2664);
  if (v196)
  {
    if (!v197 || !CMMsl::RelDMInSystemConfig::operator==(v196, v197))
      return 0;
  }
  else if (v197)
  {
    return 0;
  }
  v198 = *(_QWORD *)(a1 + 1464);
  v199 = *(_QWORD *)(a2 + 1464);
  if (v198)
  {
    if (!v199)
      return 0;
    v200 = *(_QWORD *)(v198 + 8);
    v201 = *(_QWORD *)(v199 + 8);
    if (v200)
    {
      if (!v201 || !CMMsl::BioMotionPose::operator==(v200, v201))
        return 0;
    }
    else if (v201)
    {
      return 0;
    }
  }
  else if (v199)
  {
    return 0;
  }
  v202 = *(_QWORD *)(a1 + 704);
  v203 = *(_QWORD *)(a2 + 704);
  if (v202)
  {
    if (!v203)
      return 0;
    v204 = *(_QWORD *)(v202 + 8);
    v205 = *(_QWORD *)(v203 + 8);
    if (v204)
    {
      if (!v205 || !CMMsl::BioMotionPose::operator==(v204, v205))
        return 0;
    }
    else if (v205)
    {
      return 0;
    }
  }
  else if (v203)
  {
    return 0;
  }
  v206 = *(_QWORD *)(a1 + 1208);
  v207 = *(_QWORD *)(a2 + 1208);
  if (v206)
  {
    if (!v207 || !CMMsl::GyroCalibrationSample::operator==(v206, v207))
      return 0;
  }
  else if (v207)
  {
    return 0;
  }
  v208 = *(_QWORD *)(a1 + 1216);
  v209 = *(_QWORD *)(a2 + 1216);
  if (v208)
  {
    if (!v209 || !CMMsl::GyroCalibrationSampleNonlinear::operator==(v208, v209))
      return 0;
  }
  else if (v209)
  {
    return 0;
  }
  v210 = *(_QWORD *)(a1 + 1200);
  v211 = *(_QWORD *)(a2 + 1200);
  if (v210)
  {
    if (!v211
      || !sub_2427BAA88(*(_QWORD *)(v210 + 8), *(_QWORD *)(v210 + 16), *(uint64_t **)(v211 + 8), *(_QWORD *)(v211 + 16)))
    {
      return 0;
    }
  }
  else if (v211)
  {
    return 0;
  }
  v212 = *(_QWORD *)(a1 + 1192);
  v213 = *(_QWORD *)(a2 + 1192);
  if (v212)
  {
    if (!v213
      || !sub_2427BA118(*(_QWORD *)(v212 + 8), *(_QWORD *)(v212 + 16), *(uint64_t **)(v213 + 8), *(_QWORD *)(v213 + 16)))
    {
      return 0;
    }
  }
  else if (v213)
  {
    return 0;
  }
  v214 = *(_QWORD *)(a1 + 472);
  v215 = *(_QWORD *)(a2 + 472);
  if (v214)
  {
    if (!v215 || !CMMsl::BioMotionClassification::operator==(v214, v215))
      return 0;
  }
  else if (v215)
  {
    return 0;
  }
  v216 = *(_QWORD *)(a1 + 1056);
  v217 = *(_QWORD *)(a2 + 1056);
  if (v216)
  {
    if (!v217)
      return 0;
    v218 = *(_QWORD *)(v216 + 8);
    v219 = *(_QWORD *)(v217 + 8);
    if (v218)
    {
      if (!v219 || !CMMsl::BioMotionClassification::operator==(v218, v219))
        return 0;
    }
    else if (v219)
    {
      return 0;
    }
  }
  else if (v217)
  {
    return 0;
  }
  v220 = *(_QWORD *)(a1 + 1976);
  v221 = *(_QWORD *)(a2 + 1976);
  if (v220)
  {
    if (!v221)
      return 0;
    v222 = *(_QWORD *)(v220 + 8);
    v223 = *(_QWORD *)(v221 + 8);
    if (v222)
    {
      if (!v223 || !CMMsl::BioMotionClassification::operator==(v222, v223))
        return 0;
    }
    else if (v223)
    {
      return 0;
    }
  }
  else if (v221)
  {
    return 0;
  }
  v224 = *(_QWORD *)(a1 + 1888);
  v225 = *(_QWORD *)(a2 + 1888);
  if (v224)
  {
    if (!v225)
      return 0;
    v226 = *(_QWORD *)(v224 + 8);
    v227 = *(_QWORD *)(v225 + 8);
    if (v226)
    {
      if (!v227 || !CMMsl::BioMotionClassification::operator==(v226, v227))
        return 0;
    }
    else if (v227)
    {
      return 0;
    }
  }
  else if (v225)
  {
    return 0;
  }
  v228 = *(_QWORD *)(a1 + 2432);
  v229 = *(_QWORD *)(a2 + 2432);
  if (v228)
  {
    if (!v229 || !CMMsl::Pose::operator==(v228, v229))
      return 0;
  }
  else if (v229)
  {
    return 0;
  }
  v230 = *(_QWORD *)(a1 + 2440);
  v231 = *(_QWORD *)(a2 + 2440);
  if (v230)
  {
    if (!v231 || !CMMsl::PoseState::operator==(v230, v231))
      return 0;
  }
  else if (v231)
  {
    return 0;
  }
  v232 = *(_QWORD *)(a1 + 504);
  v233 = *(_QWORD *)(a2 + 504);
  if (v232)
  {
    if (!v233 || !CMMsl::BioMotionPredictedPose::operator==(v232, v233))
      return 0;
  }
  else if (v233)
  {
    return 0;
  }
  v234 = *(_QWORD *)(a1 + 1472);
  v235 = *(_QWORD *)(a2 + 1472);
  if (v234)
  {
    if (!v235)
      return 0;
    v236 = *(_QWORD *)(v234 + 8);
    v237 = *(_QWORD *)(v235 + 8);
    if (v236)
    {
      if (!v237 || !CMMsl::BioMotionPredictedPose::operator==(v236, v237))
        return 0;
    }
    else if (v237)
    {
      return 0;
    }
  }
  else if (v235)
  {
    return 0;
  }
  v238 = *(_QWORD *)(a1 + 696);
  v239 = *(_QWORD *)(a2 + 696);
  if (v238)
  {
    if (!v239)
      return 0;
    v240 = *(_QWORD *)(v238 + 8);
    v241 = *(_QWORD *)(v239 + 8);
    if (v240)
    {
      if (!v241 || !CMMsl::BioMotionPredictedPose::operator==(v240, v241))
        return 0;
    }
    else if (v241)
    {
      return 0;
    }
  }
  else if (v239)
  {
    return 0;
  }
  v242 = *(_QWORD *)(a1 + 2544);
  v243 = *(_QWORD *)(a2 + 2544);
  if (v242)
  {
    if (!v243)
      return 0;
    v244 = *(_QWORD *)(v242 + 8);
    v245 = *(_QWORD *)(v243 + 8);
    if (v244)
    {
      if (!v245 || !CMMsl::Pressure::operator==(v244, v245))
        return 0;
    }
    else if (v245)
    {
      return 0;
    }
  }
  else if (v243)
  {
    return 0;
  }
  v246 = *(_QWORD *)(a1 + 3328);
  v247 = *(_QWORD *)(a2 + 3328);
  if (v246)
  {
    if (!v247 || !CMMsl::VO2MaxOutput::operator==(v246, v247))
      return 0;
  }
  else if (v247)
  {
    return 0;
  }
  v248 = *(_QWORD *)(a1 + 1904);
  v249 = *(_QWORD *)(a2 + 1904);
  if (v248)
  {
    if (!v249 || !CMMsl::MagneticAccessoryType1::operator==(v248, v249))
      return 0;
  }
  else if (v249)
  {
    return 0;
  }
  v250 = *(_QWORD *)(a1 + 1912);
  v251 = *(_QWORD *)(a2 + 1912);
  if (v250)
  {
    if (!v251)
      return 0;
    if ((*(_BYTE *)(v250 + 12) & 1) != 0)
    {
      if ((*(_BYTE *)(v251 + 12) & 1) == 0 || *(unsigned __int8 *)(v250 + 8) != *(unsigned __int8 *)(v251 + 8))
        return 0;
    }
    else if ((*(_BYTE *)(v251 + 12) & 1) != 0)
    {
      return 0;
    }
  }
  else if (v251)
  {
    return 0;
  }
  v252 = *(_QWORD *)(a1 + 2536);
  v253 = *(_QWORD *)(a2 + 2536);
  if (v252)
  {
    if (!v253 || !CMMsl::PressureCalibration::operator==(v252, v253))
      return 0;
  }
  else if (v253)
  {
    return 0;
  }
  v254 = *(_QWORD *)(a1 + 3528);
  v255 = *(_QWORD *)(a2 + 3528);
  if (v254)
  {
    if (!v255)
      return 0;
    v256 = *(_QWORD *)(v254 + 8);
    v257 = *(_QWORD *)(v255 + 8);
    if (v256)
    {
      if (!v257 || !CMMsl::Magnetometer::operator==(v256, v257))
        return 0;
    }
    else if (v257)
    {
      return 0;
    }
  }
  else if (v255)
  {
    return 0;
  }
  v258 = *(_QWORD *)(a1 + 3480);
  v259 = *(_QWORD *)(a2 + 3480);
  if (v258)
  {
    if (!v259)
      return 0;
    v260 = *(_QWORD *)(v258 + 8);
    v261 = *(_QWORD *)(v259 + 8);
    if (v260)
    {
      if (!v261 || !CMMsl::CompassCalibration::operator==(v260, v261))
        return 0;
    }
    else if (v261)
    {
      return 0;
    }
  }
  else if (v259)
  {
    return 0;
  }
  v262 = *(_QWORD *)(a1 + 2656);
  v263 = *(_QWORD *)(a2 + 2656);
  if (v262)
  {
    if (!v263 || !CMMsl::RawAudio::operator==(v262, v263))
      return 0;
  }
  else if (v263)
  {
    return 0;
  }
  v264 = *(_QWORD *)(a1 + 584);
  v265 = *(_QWORD *)(a2 + 584);
  if (v264)
  {
    if (!v265 || !CMMsl::CV3DPredictedPose::operator==(v264, v265))
      return 0;
  }
  else if (v265)
  {
    return 0;
  }
  v266 = *(_QWORD *)(a1 + 480);
  v267 = *(_QWORD *)(a2 + 480);
  if (v266)
  {
    if (!v267 || !CMMsl::BioMotionLinkLengthFitParameters::operator==(v266, v267))
      return 0;
  }
  else if (v267)
  {
    return 0;
  }
  v268 = *(_QWORD *)(a1 + 488);
  v269 = *(_QWORD *)(a2 + 488);
  if (v268)
  {
    if (!v269 || !CMMsl::BioMotionOnlineLinkLengthUpdate::operator==(v268, v269))
      return 0;
  }
  else if (v269)
  {
    return 0;
  }
  v270 = *(_QWORD *)(a1 + 2128);
  v271 = *(_QWORD *)(a2 + 2128);
  if (v270)
  {
    if (!v271 || !CMMsl::ODTPose::operator==(v270, v271))
      return 0;
  }
  else if (v271)
  {
    return 0;
  }
  v272 = *(_QWORD *)(a1 + 2392);
  v273 = *(_QWORD *)(a2 + 2392);
  if (v272)
  {
    if (!v273 || !CMMsl::PencilTipForce::operator==(v272, v273))
      return 0;
  }
  else if (v273)
  {
    return 0;
  }
  v274 = *(_QWORD *)(a1 + 2400);
  v275 = *(_QWORD *)(a2 + 2400);
  if (v274)
  {
    if (!v275 || !CMMsl::PencilTouch::operator==(v274, v275))
      return 0;
  }
  else if (v275)
  {
    return 0;
  }
  v276 = *(_QWORD *)(a1 + 384);
  v277 = *(_QWORD *)(a2 + 384);
  if (v276)
  {
    if (!v277 || !CMMsl::AveragedALSData::operator==(v276, v277))
      return 0;
  }
  else if (v277)
  {
    return 0;
  }
  v278 = *(_QWORD *)(a1 + 3144);
  v279 = *(_QWORD *)(a2 + 3144);
  if (v278)
  {
    if (!v279 || !CMMsl::Timestamp::operator==(v278, v279))
      return 0;
  }
  else if (v279)
  {
    return 0;
  }
  v280 = *(_QWORD *)(a1 + 344);
  v281 = *(_QWORD *)(a2 + 344);
  if (v280)
  {
    if (!v281)
      return 0;
    v282 = *(_QWORD *)(v280 + 8);
    v283 = *(_QWORD *)(v281 + 8);
    if (v282)
    {
      if (!v283 || !CMMsl::CV3DSLAMState::operator==(v282, v283))
        return 0;
    }
    else if (v283)
    {
      return 0;
    }
  }
  else if (v281)
  {
    return 0;
  }
  v284 = *(_QWORD *)(a1 + 464);
  v285 = *(_QWORD *)(a2 + 464);
  if (v284)
  {
    if (!v285)
      return 0;
    v286 = *(_QWORD *)(v284 + 8);
    v287 = *(_QWORD *)(v285 + 8);
    if (v286)
    {
      if (!v287 || !CMMsl::BioMotionAnchor::operator==(v286, v287))
        return 0;
    }
    else if (v287)
    {
      return 0;
    }
  }
  else if (v285)
  {
    return 0;
  }
  v288 = *(_QWORD *)(a1 + 512);
  v289 = *(_QWORD *)(a2 + 512);
  if (v288)
  {
    if (!v289)
      return 0;
    v290 = *(_QWORD *)(v288 + 8);
    v291 = *(_QWORD *)(v289 + 8);
    if (v290)
    {
      if (!v291 || !CMMsl::PropagatedAnchor::operator==(v290, v291))
        return 0;
    }
    else if (v291)
    {
      return 0;
    }
  }
  else if (v289)
  {
    return 0;
  }
  v292 = *(_QWORD *)(a1 + 3360);
  v293 = *(_QWORD *)(a2 + 3360);
  if (v292)
  {
    if (!v293 || !CMMsl::WalkingSteadinessClassification::operator==(v292, v293))
      return 0;
  }
  else if (v293)
  {
    return 0;
  }
  v294 = *(_QWORD *)(a1 + 3000);
  v295 = *(_QWORD *)(a2 + 3000);
  if (v294)
  {
    if (!v295 || !CMMsl::SteadinessModelResult::operator==(v294, v295))
      return 0;
  }
  else if (v295)
  {
    return 0;
  }
  v296 = *(_QWORD *)(a1 + 2960);
  v297 = *(_QWORD *)(a2 + 2960);
  if (v296)
  {
    if (!v297 || !CMMsl::SteadinessEvent::operator==(v296, v297))
      return 0;
  }
  else if (v297)
  {
    return 0;
  }
  v298 = *(_QWORD *)(a1 + 2984);
  v299 = *(_QWORD *)(a2 + 2984);
  if (v298)
  {
    if (!v299 || !CMMsl::SteadinessModelGaitBaselineFeatures::operator==(v298, v299))
      return 0;
  }
  else if (v299)
  {
    return 0;
  }
  v300 = *(_QWORD *)(a1 + 2976);
  v301 = *(_QWORD *)(a2 + 2976);
  if (v300)
  {
    if (!v301 || !CMMsl::SteadinessModelContinuousWalkingFeatures::operator==(v300, v301))
      return 0;
  }
  else if (v301)
  {
    return 0;
  }
  v302 = *(_QWORD *)(a1 + 3008);
  v303 = *(_QWORD *)(a2 + 3008);
  if (v302)
  {
    if (!v303 || !CMMsl::SteadinessModelTemporalDispersionFeatures::operator==(v302, v303))
      return 0;
  }
  else if (v303)
  {
    return 0;
  }
  v304 = *(_QWORD *)(a1 + 3016);
  v305 = *(_QWORD *)(a2 + 3016);
  if (v304)
  {
    if (!v305 || !CMMsl::SteadinessModelTemporalEntropyFeatures::operator==(v304, v305))
      return 0;
  }
  else if (v305)
  {
    return 0;
  }
  v306 = *(_QWORD *)(a1 + 2968);
  v307 = *(_QWORD *)(a2 + 2968);
  if (v306)
  {
    if (!v307 || !CMMsl::SteadinessModelBalanceFeatures::operator==(v306, v307))
      return 0;
  }
  else if (v307)
  {
    return 0;
  }
  v308 = *(_QWORD *)(a1 + 1936);
  v309 = *(_QWORD *)(a2 + 1936);
  if (v308)
  {
    if (!v309 || !CMMsl::MagnetometerReset::operator==(v308, v309))
      return 0;
  }
  else if (v309)
  {
    return 0;
  }
  v310 = *(_QWORD *)(a1 + 3560);
  v311 = *(_QWORD *)(a2 + 3560);
  if (v310)
  {
    if (!v311)
      return 0;
    v312 = *(_QWORD *)(v310 + 8);
    v313 = *(_QWORD *)(v311 + 8);
    if (v312)
    {
      if (!v313 || !CMMsl::WatchOnWristState::operator==(v312, v313))
        return 0;
    }
    else if (v313)
    {
      return 0;
    }
  }
  else if (v311)
  {
    return 0;
  }
  v314 = *(_QWORD *)(a1 + 1840);
  v315 = *(_QWORD *)(a2 + 1840);
  if (v314)
  {
    if (!v315 || !CMMsl::LiftToWakeOnHeadStatus::operator==(v314, v315))
      return 0;
  }
  else if (v315)
  {
    return 0;
  }
  v316 = *(_QWORD *)(a1 + 192);
  v317 = *(_QWORD *)(a2 + 192);
  if (v316)
  {
    if (!v317 || !CMMsl::AccessoryMagnetometer::operator==(v316, v317))
      return 0;
  }
  else if (v317)
  {
    return 0;
  }
  v318 = *(_QWORD *)(a1 + 3040);
  v319 = *(_QWORD *)(a2 + 3040);
  if (v318)
  {
    if (!v319 || !CMMsl::StepCountEntryAddition::operator==(v318, v319))
      return 0;
  }
  else if (v319)
  {
    return 0;
  }
  v320 = *(_QWORD *)(a1 + 3048);
  v321 = *(_QWORD *)(a2 + 3048);
  if (v320)
  {
    if (!v321 || !CMMsl::StepDistanceFusionResult::operator==(v320, v321))
      return 0;
  }
  else if (v321)
  {
    return 0;
  }
  v322 = *(_QWORD *)(a1 + 2904);
  v323 = *(_QWORD *)(a2 + 2904);
  if (v322)
  {
    if (!v323
      || !sub_2428D2A38(*(_QWORD *)(v322 + 8), *(_QWORD *)(v322 + 16), *(uint64_t **)(v323 + 8), *(_QWORD *)(v323 + 16)))
    {
      return 0;
    }
  }
  else if (v323)
  {
    return 0;
  }
  v324 = *(_QWORD *)(a1 + 736);
  v325 = *(_QWORD *)(a2 + 736);
  if (v324)
  {
    if (!v325 || !CMMsl::CVWatchCalories::operator==(v324, v325))
      return 0;
  }
  else if (v325)
  {
    return 0;
  }
  v326 = *(_QWORD *)(a1 + 888);
  v327 = *(_QWORD *)(a2 + 888);
  if (v326)
  {
    if (!v327 || !CMMsl::FaceBlendShapeCoefficientsSample::operator==(v326, v327))
      return 0;
  }
  else if (v327)
  {
    return 0;
  }
  v328 = *(_QWORD *)(a1 + 456);
  v329 = *(_QWORD *)(a2 + 456);
  if (v328)
  {
    if (!v329 || !CMMsl::BatteryStatus::operator==(v328, v329))
      return 0;
  }
  else if (v329)
  {
    return 0;
  }
  v330 = *(_QWORD *)(a1 + 1872);
  v331 = *(_QWORD *)(a2 + 1872);
  if (v330)
  {
    if (!v331)
      return 0;
    if ((*(_BYTE *)(v330 + 12) & 1) != 0)
    {
      if ((*(_BYTE *)(v331 + 12) & 1) == 0 || *(unsigned __int8 *)(v330 + 8) != *(unsigned __int8 *)(v331 + 8))
        return 0;
    }
    else if ((*(_BYTE *)(v331 + 12) & 1) != 0)
    {
      return 0;
    }
  }
  else if (v331)
  {
    return 0;
  }
  v332 = *(_QWORD *)(a1 + 448);
  v333 = *(_QWORD *)(a2 + 448);
  if (v332)
  {
    if (!v333)
      return 0;
    if ((*(_BYTE *)(v332 + 12) & 1) != 0)
    {
      if ((*(_BYTE *)(v333 + 12) & 1) == 0 || *(unsigned __int8 *)(v332 + 8) != *(unsigned __int8 *)(v333 + 8))
        return 0;
    }
    else if ((*(_BYTE *)(v333 + 12) & 1) != 0)
    {
      return 0;
    }
  }
  else if (v333)
  {
    return 0;
  }
  v334 = *(_QWORD *)(a1 + 2464);
  v335 = *(_QWORD *)(a2 + 2464);
  if (v334)
  {
    if (!v335)
      return 0;
    if ((*(_BYTE *)(v334 + 16) & 1) != 0)
    {
      if ((*(_BYTE *)(v335 + 16) & 1) == 0 || *(_QWORD *)(v334 + 8) != *(_QWORD *)(v335 + 8))
        return 0;
    }
    else if ((*(_BYTE *)(v335 + 16) & 1) != 0)
    {
      return 0;
    }
  }
  else if (v335)
  {
    return 0;
  }
  v336 = *(_QWORD *)(a1 + 1040);
  v337 = *(_QWORD *)(a2 + 1040);
  if (v336)
  {
    if (!v337 || !CMMsl::FocusModes::operator==(v336, v337))
      return 0;
  }
  else if (v337)
  {
    return 0;
  }
  v338 = *(_QWORD *)(a1 + 784);
  v339 = *(_QWORD *)(a2 + 784);
  if (v338)
  {
    if (!v339)
      return 0;
    if ((*(_BYTE *)(v338 + 12) & 1) != 0)
    {
      if ((*(_BYTE *)(v339 + 12) & 1) == 0 || *(unsigned __int8 *)(v338 + 8) != *(unsigned __int8 *)(v339 + 8))
        return 0;
    }
    else if ((*(_BYTE *)(v339 + 12) & 1) != 0)
    {
      return 0;
    }
  }
  else if (v339)
  {
    return 0;
  }
  v340 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 8))
  {
    if (!v340)
      return 0;
  }
  else if (v340)
  {
    return 0;
  }
  v341 = *(_QWORD *)(a1 + 16);
  v342 = *(_QWORD *)(a2 + 16);
  if (v341)
  {
    if (!v342 || (CMMsl::APWake::operator==(v341, v342) & 1) == 0)
      return 0;
  }
  else if (v342)
  {
    return 0;
  }
  v343 = *(_QWORD *)(a1 + 320);
  v344 = *(_QWORD *)(a2 + 320);
  if (v343)
  {
    if (!v344 || !CMMsl::AltimeterKF::operator==(v343, v344))
      return 0;
  }
  else if (v344)
  {
    return 0;
  }
  v345 = *(_QWORD *)(a1 + 1848);
  v346 = *(_QWORD *)(a2 + 1848);
  if (v345)
  {
    if (!v346 || !CMMsl::LiftToWakeState::operator==(v345, v346))
      return 0;
  }
  else if (v346)
  {
    return 0;
  }
  v347 = *(_QWORD *)(a1 + 3248);
  v348 = *(_QWORD *)(a2 + 3248);
  if (v347)
  {
    if (!v348 || !CMMsl::ViewObstructedState::operator==(v347, v348))
      return 0;
  }
  else if (v348)
  {
    return 0;
  }
  v349 = *(_QWORD *)(a1 + 2744);
  v350 = *(_QWORD *)(a2 + 2744);
  if (v349)
  {
    if (!v350 || !CMMsl::RunningFormMetrics::operator==(v349, v350))
      return 0;
  }
  else if (v350)
  {
    return 0;
  }
  v351 = *(_QWORD *)(a1 + 3600);
  v352 = *(_QWORD *)(a2 + 3600);
  if (v351)
  {
    if (!v352
      || !sub_2429104C4(*(_QWORD *)(v351 + 8), *(_QWORD *)(v351 + 16), *(uint64_t **)(v352 + 8), *(_QWORD *)(v352 + 16)))
    {
      return 0;
    }
  }
  else if (v352)
  {
    return 0;
  }
  v353 = *(_QWORD *)(a1 + 3592);
  v354 = *(_QWORD *)(a2 + 3592);
  if (v353)
  {
    if (!v354 || !CMMsl::WorkoutRecorderWorkoutSessionPriors::operator==(v353, v354))
      return 0;
  }
  else if (v354)
  {
    return 0;
  }
  v355 = *(_QWORD *)(a1 + 360);
  v356 = *(_QWORD *)(a2 + 360);
  if (v355)
  {
    if (!v356 || !CMMsl::ARKitWorldPose::operator==(v355, v356))
      return 0;
  }
  else if (v356)
  {
    return 0;
  }
  v357 = *(_QWORD *)(a1 + 2248);
  v358 = *(_QWORD *)(a2 + 2248);
  if (v357)
  {
    if (!v358 || !CMMsl::PDRImpulse::operator==(v357, v358))
      return 0;
  }
  else if (v358)
  {
    return 0;
  }
  v359 = *(_QWORD *)(a1 + 2424);
  v360 = *(_QWORD *)(a2 + 2424);
  if (v359)
  {
    if (!v360 || !CMMsl::PocketDetectionPacket::operator==(v359, v360))
      return 0;
  }
  else if (v360)
  {
    return 0;
  }
  v361 = *(_QWORD *)(a1 + 1832);
  v362 = *(_QWORD *)(a2 + 1832);
  if (v361)
  {
    if (!v362 || !CMMsl::LiftToWakeFeaturesNeo::operator==(v361, v362))
      return 0;
  }
  else if (v362)
  {
    return 0;
  }
  v363 = *(_QWORD *)(a1 + 1856);
  v364 = *(_QWORD *)(a2 + 1856);
  if (v363)
  {
    if (!v364 || !CMMsl::LiftToWakeStatusNeo::operator==(v363, v364))
      return 0;
  }
  else if (v364)
  {
    return 0;
  }
  v365 = *(_QWORD *)(a1 + 2752);
  v366 = *(_QWORD *)(a2 + 2752);
  if (v365)
  {
    if (!v366 || !CMMsl::RunningPower::operator==(v365, v366))
      return 0;
  }
  else if (v366)
  {
    return 0;
  }
  v367 = *(_QWORD *)(a1 + 408);
  v368 = *(_QWORD *)(a2 + 408);
  if (v367)
  {
    if (!v368 || !CMMsl::BasebandCompassCoex::operator==(v367, v368))
      return 0;
  }
  else if (v368)
  {
    return 0;
  }
  v369 = *(_QWORD *)(a1 + 416);
  v370 = *(_QWORD *)(a2 + 416);
  if (v369)
  {
    if (!v370 || !CMMsl::BasebandCompassCoexConstraints::operator==(v369, v370))
      return 0;
  }
  else if (v370)
  {
    return 0;
  }
  v371 = *(_QWORD *)(a1 + 2000);
  v372 = *(_QWORD *)(a2 + 2000);
  if (v371)
  {
    if (!v372 || !CMMsl::MotionContextActivity::operator==(v371, v372))
      return 0;
  }
  else if (v372)
  {
    return 0;
  }
  v373 = *(_QWORD *)(a1 + 2152);
  v374 = *(_QWORD *)(a2 + 2152);
  if (v373)
  {
    if (!v374)
      return 0;
    if ((*(_BYTE *)(v373 + 12) & 1) != 0)
    {
      if ((*(_BYTE *)(v374 + 12) & 1) == 0 || *(_DWORD *)(v373 + 8) != *(_DWORD *)(v374 + 8))
        return 0;
    }
    else if ((*(_BYTE *)(v374 + 12) & 1) != 0)
    {
      return 0;
    }
  }
  else if (v374)
  {
    return 0;
  }
  v375 = *(_QWORD *)(a1 + 72);
  v376 = *(_QWORD *)(a2 + 72);
  if (v375)
  {
    if (!v376 || !CMMsl::AccelTNBFrame::operator==(v375, v376))
      return 0;
  }
  else if (v376)
  {
    return 0;
  }
  v377 = *(_QWORD *)(a1 + 832);
  v378 = *(_QWORD *)(a2 + 832);
  if (v377)
  {
    if (!v378 || !CMMsl::DoTEstimatorWithTNB::operator==(v377, v378))
      return 0;
  }
  else if (v378)
  {
    return 0;
  }
  v379 = *(_QWORD *)(a1 + 2256);
  v380 = *(_QWORD *)(a2 + 2256);
  if (v379)
  {
    if (!v380 || !CMMsl::PdrMLModelOutput::operator==(v379, v380))
      return 0;
  }
  else if (v380)
  {
    return 0;
  }
  v381 = *(_QWORD *)(a1 + 1088);
  v382 = *(_QWORD *)(a2 + 1088);
  if (v381)
  {
    if (!v382 || !CMMsl::GaitEventsModelOutput::operator==(v381, v382))
      return 0;
  }
  else if (v382)
  {
    return 0;
  }
  v383 = *(_QWORD *)(a1 + 1096);
  v384 = *(_QWORD *)(a2 + 1096);
  if (v383)
  {
    if (!v384 || !CMMsl::GaitEventsStrideAggregation::operator==(v383, v384))
      return 0;
  }
  else if (v384)
  {
    return 0;
  }
  v385 = *(_QWORD *)(a1 + 1080);
  v386 = *(_QWORD *)(a2 + 1080);
  if (v385)
  {
    if (!v386 || !CMMsl::GaitEventsHKResult::operator==(v385, v386))
      return 0;
  }
  else if (v386)
  {
    return 0;
  }
  v387 = *(_QWORD *)(a1 + 896);
  v388 = *(_QWORD *)(a2 + 896);
  if (v387)
  {
    if (!v388 || !CMMsl::FaceCovered::operator==(v387, v388))
      return 0;
  }
  else if (v388)
  {
    return 0;
  }
  v389 = *(_QWORD *)(a1 + 3464);
  v390 = *(_QWORD *)(a2 + 3464);
  if (v389)
  {
    if (!v390)
      return 0;
    v391 = *(_QWORD *)(v389 + 8);
    v392 = *(_QWORD *)(v390 + 8);
    if (v391)
    {
      if (!v392 || !CMMsl::AveragedALSData::operator==(v391, v392))
        return 0;
    }
    else if (v392)
    {
      return 0;
    }
  }
  else if (v390)
  {
    return 0;
  }
  v393 = *(_QWORD *)(a1 + 3088);
  v394 = *(_QWORD *)(a2 + 3088);
  if (v393)
  {
    if (!v394 || !CMMsl::StrideCalEntry::operator==(v393, v394))
      return 0;
  }
  else if (v394)
  {
    return 0;
  }
  v395 = *(_QWORD *)(a1 + 2768);
  v396 = *(_QWORD *)(a2 + 2768);
  if (v395)
  {
    if (!v396 || !CMMsl::RunningSpeedKFResult::operator==(v395, v396))
      return 0;
  }
  else if (v396)
  {
    return 0;
  }
  v397 = *(_QWORD *)(a1 + 2616);
  v398 = *(_QWORD *)(a2 + 2616);
  if (v397)
  {
    if (!v398 || !CMMsl::ProxPDP::operator==(v397, v398))
      return 0;
  }
  else if (v398)
  {
    return 0;
  }
  v399 = *(_QWORD *)(a1 + 1792);
  v400 = *(_QWORD *)(a2 + 1792);
  if (v399)
  {
    if (!v400 || !CMMsl::KeyboardMotionFeatures::operator==(v399, v400))
      return 0;
  }
  else if (v400)
  {
    return 0;
  }
  v401 = *(_QWORD *)(a1 + 1800);
  v402 = *(_QWORD *)(a2 + 1800);
  if (v401)
  {
    if (!v402 || !CMMsl::KeyboardMotionState::operator==(v401, v402))
      return 0;
  }
  else if (v402)
  {
    return 0;
  }
  v403 = *(_QWORD *)(a1 + 304);
  v404 = *(_QWORD *)(a2 + 304);
  if (v403)
  {
    if (!v404 || !CMMsl::ALSPhone::operator==(v403, v404))
      return 0;
  }
  else if (v404)
  {
    return 0;
  }
  v405 = *(_QWORD *)(a1 + 1784);
  v406 = *(_QWORD *)(a2 + 1784);
  if (v405)
  {
    if (!v406 || !CMMsl::KeyboardKeyPress::operator==(v405, v406))
      return 0;
  }
  else if (v406)
  {
    return 0;
  }
  v407 = *(_QWORD *)(a1 + 3336);
  v408 = *(_QWORD *)(a2 + 3336);
  if (v407)
  {
    if (!v408 || !CMMsl::WakeGestureNotification::operator==(v407, v408))
      return 0;
  }
  else if (v408)
  {
    return 0;
  }
  v409 = *(_QWORD *)(a1 + 2600);
  v410 = *(_QWORD *)(a2 + 2600);
  if (v409)
  {
    if (!v410 || !CMMsl::ProxBaselineEstimatorState::operator==(v409, v410))
      return 0;
  }
  else if (v410)
  {
    return 0;
  }
  v411 = *(_QWORD *)(a1 + 432);
  v412 = *(_QWORD *)(a2 + 432);
  if (v411)
  {
    if (!v412 || !CMMsl::BaselineResetCheck::operator==(v411, v412))
      return 0;
  }
  else if (v412)
  {
    return 0;
  }
  v413 = *(_QWORD *)(a1 + 2712);
  v414 = *(_QWORD *)(a2 + 2712);
  if (v413)
  {
    if (!v414 || !CMMsl::RhythmicGnssOperatorStatus::operator==(v413, v414))
      return 0;
  }
  else if (v414)
  {
    return 0;
  }
  v415 = *(_QWORD *)(a1 + 1808);
  v416 = *(_QWORD *)(a2 + 1808);
  if (v415)
  {
    if (!v416 || !CMMsl::KeyboardMotionTrackpad::operator==(v415, v416))
      return 0;
  }
  else if (v416)
  {
    return 0;
  }
  v417 = *(_QWORD *)(a1 + 1776);
  v418 = *(_QWORD *)(a2 + 1776);
  if (v417)
  {
    if (!v418 || !CMMsl::KeyboardAttached::operator==(v417, v418))
      return 0;
  }
  else if (v418)
  {
    return 0;
  }
  v419 = *(_QWORD *)(a1 + 400);
  v420 = *(_QWORD *)(a2 + 400);
  if (v419)
  {
    if (!v420 || (CMMsl::BacklightState::operator==(v419, v420) & 1) == 0)
      return 0;
  }
  else if (v420)
  {
    return 0;
  }
  v421 = *(_QWORD *)(a1 + 440);
  v422 = *(_QWORD *)(a2 + 440);
  if (v421)
  {
    if (!v422 || !CMMsl::BatchedLocationFromOdometer::operator==(v421, v422))
      return 0;
  }
  else if (v422)
  {
    return 0;
  }
  v423 = *(_QWORD *)(a1 + 1320);
  v424 = *(_QWORD *)(a2 + 1320);
  if (v423)
  {
    if (!v424 || !CMMsl::HeartRateReference::operator==(v423, v424))
      return 0;
  }
  else if (v424)
  {
    return 0;
  }
  v425 = *(_QWORD *)(a1 + 2896);
  v426 = *(_QWORD *)(a2 + 2896);
  if (v425)
  {
    if (!v426 || !CMMsl::Skeleton2D::operator==(v425, v426))
      return 0;
  }
  else if (v426)
  {
    return 0;
  }
  v427 = *(_QWORD *)(a1 + 2920);
  v428 = *(_QWORD *)(a2 + 2920);
  if (v427)
  {
    if (!v428 || !CMMsl::Skeleton3DRetargeted::operator==(v427, v428))
      return 0;
  }
  else if (v428)
  {
    return 0;
  }
  v429 = *(_QWORD *)(a1 + 2912);
  v430 = *(_QWORD *)(a2 + 2912);
  if (v429)
  {
    if (!v430 || !CMMsl::Skeleton3DLifted::operator==(v429, v430))
      return 0;
  }
  else if (v430)
  {
    return 0;
  }
  v431 = *(_QWORD *)(a1 + 1032);
  v432 = *(_QWORD *)(a2 + 1032);
  if (v431)
  {
    if (!v432 || !CMMsl::FitnessMachineSample::operator==(v431, v432))
      return 0;
  }
  else if (v432)
  {
    return 0;
  }
  v433 = *(_QWORD *)(a1 + 3392);
  v434 = *(_QWORD *)(a2 + 3392);
  if (v433)
  {
    if (!v434 || !CMMsl::WatchHeartRateData::operator==(v433, v434))
      return 0;
  }
  else if (v434)
  {
    return 0;
  }
  v435 = *(_QWORD *)(a1 + 920);
  v436 = *(_QWORD *)(a2 + 920);
  if (v435)
  {
    if (!v436 || !CMMsl::FacePoseSynchronized::operator==(v435, v436))
      return 0;
  }
  else if (v436)
  {
    return 0;
  }
  v437 = *(_QWORD *)(a1 + 3368);
  v438 = *(_QWORD *)(a2 + 3368);
  if (v437)
  {
    if (!v438 || !CMMsl::WatchActiveCalories::operator==(v437, v438))
      return 0;
  }
  else if (v438)
  {
    return 0;
  }
  v439 = *(_QWORD *)(a1 + 3376);
  v440 = *(_QWORD *)(a2 + 3376);
  if (v439)
  {
    if (!v440 || !CMMsl::WatchBasalCalories::operator==(v439, v440))
      return 0;
  }
  else if (v440)
  {
    return 0;
  }
  v441 = *(_QWORD *)(a1 + 3160);
  v442 = *(_QWORD *)(a2 + 3160);
  if (v441)
  {
    if (!v442 || !CMMsl::TrackRunData::operator==(v441, v442))
      return 0;
  }
  else if (v442)
  {
    return 0;
  }
  v443 = *(_QWORD *)(a1 + 1112);
  v444 = *(_QWORD *)(a2 + 1112);
  if (v443)
  {
    if (!v444 || !CMMsl::GnssAvailabilityPredictorData::operator==(v443, v444))
      return 0;
  }
  else if (v444)
  {
    return 0;
  }
  v445 = *(_QWORD *)(a1 + 1120);
  v446 = *(_QWORD *)(a2 + 1120);
  if (v445)
  {
    if (!v446 || !CMMsl::GnssLeechLocationData::operator==(v445, v446))
      return 0;
  }
  else if (v446)
  {
    return 0;
  }
  v447 = *(_QWORD *)(a1 + 1944);
  v448 = *(_QWORD *)(a2 + 1944);
  if (v447)
  {
    if (!v448 || !CMMsl::MapsRouteHintData::operator==(v447, v448))
      return 0;
  }
  else if (v448)
  {
    return 0;
  }
  v449 = *(_QWORD *)(a1 + 1024);
  v450 = *(_QWORD *)(a2 + 1024);
  if (v449)
  {
    if (!v450 || !CMMsl::FitnessMachineData::operator==(v449, v450))
      return 0;
  }
  else if (v450)
  {
    return 0;
  }
  v451 = *(_QWORD *)(a1 + 3504);
  v452 = *(_QWORD *)(a2 + 3504);
  if (v451)
  {
    if (!v452)
      return 0;
    v453 = *(_QWORD *)(v451 + 8);
    v454 = *(_QWORD *)(v452 + 8);
    if (v453)
    {
      if (!v454 || !CMMsl::FitnessMachineData::operator==(v453, v454))
        return 0;
    }
    else if (v454)
    {
      return 0;
    }
  }
  else if (v452)
  {
    return 0;
  }
  v455 = *(_QWORD *)(a1 + 112);
  v456 = *(_QWORD *)(a2 + 112);
  if (v455)
  {
    if (!v456 || !CMMsl::AccessoryActivityStateUpdate::operator==(v455, v456))
      return 0;
  }
  else if (v456)
  {
    return 0;
  }
  v457 = *(_QWORD *)(a1 + 2328);
  v458 = *(_QWORD *)(a2 + 2328);
  if (v457)
  {
    if (!v458 || !CMMsl::PedestrianFenceExit::operator==(v457, v458))
      return 0;
  }
  else if (v458)
  {
    return 0;
  }
  v459 = *(_QWORD *)(a1 + 1416);
  v460 = *(_QWORD *)(a2 + 1416);
  if (v459)
  {
    if (!v460 || !CMMsl::InertialOdometry::operator==(v459, v460))
      return 0;
  }
  else if (v460)
  {
    return 0;
  }
  v461 = *(_QWORD *)(a1 + 2408);
  v462 = *(_QWORD *)(a2 + 2408);
  if (v461)
  {
    if (!v462 || !CMMsl::PhysicalEffortInput::operator==(v461, v462))
      return 0;
  }
  else if (v462)
  {
    return 0;
  }
  v463 = *(_QWORD *)(a1 + 2416);
  v464 = *(_QWORD *)(a2 + 2416);
  if (v463)
  {
    if (!v464 || !CMMsl::PhysicalEffortSample::operator==(v463, v464))
      return 0;
  }
  else if (v464)
  {
    return 0;
  }
  v465 = *(_QWORD *)(a1 + 2320);
  v466 = *(_QWORD *)(a2 + 2320);
  if (v465)
  {
    if (!v466 || !CMMsl::PedestrianCalorieModelDebugging::operator==(v465, v466))
      return 0;
  }
  else if (v466)
  {
    return 0;
  }
  v467 = *(_QWORD *)(a1 + 864);
  v468 = *(_QWORD *)(a2 + 864);
  if (v467)
  {
    if (!v468 || !CMMsl::ElevationThreshold::operator==(v467, v468))
      return 0;
  }
  else if (v468)
  {
    return 0;
  }
  v469 = *(_QWORD *)(a1 + 1424);
  v470 = *(_QWORD *)(a2 + 1424);
  if (v469)
  {
    if (!v470 || !CMMsl::InitialHistoricalMeanSeaLevelPressure::operator==(v469, v470))
      return 0;
  }
  else if (v470)
  {
    return 0;
  }
  v471 = *(_QWORD *)(a1 + 3424);
  v472 = *(_QWORD *)(a2 + 3424);
  if (v471)
  {
    if (!v472 || !CMMsl::WorkoutActivity::operator==(v471, v472))
      return 0;
  }
  else if (v472)
  {
    return 0;
  }
  v473 = *(_QWORD *)(a1 + 2352);
  v474 = *(_QWORD *)(a2 + 2352);
  if (v473)
  {
    if (!v474 || !CMMsl::PencilDeviceMotion::operator==(v473, v474))
      return 0;
  }
  else if (v474)
  {
    return 0;
  }
  v475 = *(_QWORD *)(a1 + 2376);
  v476 = *(_QWORD *)(a2 + 2376);
  if (v475)
  {
    if (!v476 || !CMMsl::PencilFusionResult::operator==(v475, v476))
      return 0;
  }
  else if (v476)
  {
    return 0;
  }
  v477 = *(_QWORD *)(a1 + 1272);
  v478 = *(_QWORD *)(a2 + 1272);
  if (v477)
  {
    if (!v478 || !CMMsl::HapticModuleState::operator==(v477, v478))
      return 0;
  }
  else if (v478)
  {
    return 0;
  }
  v479 = *(_QWORD *)(a1 + 2992);
  v480 = *(_QWORD *)(a2 + 2992);
  if (v479)
  {
    if (!v480 || !CMMsl::SteadinessModelHarmonicFeatures::operator==(v479, v480))
      return 0;
  }
  else if (v480)
  {
    return 0;
  }
  v481 = *(_QWORD *)(a1 + 2368);
  v482 = *(_QWORD *)(a2 + 2368);
  if (v481)
  {
    if (!v482 || !CMMsl::PencilFusionReplayResult::operator==(v481, v482))
      return 0;
  }
  else if (v482)
  {
    return 0;
  }
  v483 = *(_QWORD *)(a1 + 1968);
  v484 = *(_QWORD *)(a2 + 1968);
  if (v483)
  {
    if (!v484 || !CMMsl::MobilitySmoothedGaitMetrics::operator==(v483, v484))
      return 0;
  }
  else if (v484)
  {
    return 0;
  }
  v485 = *(_QWORD *)(a1 + 3384);
  v486 = *(_QWORD *)(a2 + 3384);
  if (v485)
  {
    if (!v486 || !CMMsl::WatchEnclosureMaterial::operator==(v485, v486))
      return 0;
  }
  else if (v486)
  {
    return 0;
  }
  v487 = *(_QWORD *)(a1 + 176);
  v488 = *(_QWORD *)(a2 + 176);
  if (v487)
  {
    if (!v488 || !CMMsl::AccessoryHeartRate::operator==(v487, v488))
      return 0;
  }
  else if (v488)
  {
    return 0;
  }
  v489 = *(_QWORD *)(a1 + 208);
  v490 = *(_QWORD *)(a2 + 208);
  if (v489)
  {
    if (!v490 || !CMMsl::AccessoryPPG::operator==(v489, v490))
      return 0;
  }
  else if (v490)
  {
    return 0;
  }
  v491 = *(_QWORD **)(a1 + 2032);
  v492 = *(_QWORD **)(a2 + 2032);
  if (v491)
  {
    if (!v492 || !CMMsl::MotionLoiAltitudeData::operator==(v491, v492))
      return 0;
  }
  else if (v492)
  {
    return 0;
  }
  v493 = *(_QWORD *)(a1 + 776);
  v494 = *(_QWORD *)(a2 + 776);
  if (v493)
  {
    if (!v494 || !CMMsl::DisplacingState::operator==(v493, v494))
      return 0;
  }
  else if (v494)
  {
    return 0;
  }
  v495 = *(_QWORD *)(a1 + 2448);
  v496 = *(_QWORD *)(a2 + 2448);
  if (v495)
  {
    if (!v496 || !CMMsl::PostureJoint::operator==(v495, v496))
      return 0;
  }
  else if (v496)
  {
    return 0;
  }
  v497 = *(_QWORD *)(a1 + 2456);
  v498 = *(_QWORD *)(a2 + 2456);
  if (v497)
  {
    if (!v498
      || !sub_2428A4E10(*(_QWORD *)(v497 + 8), *(_QWORD *)(v497 + 16), *(uint64_t **)(v498 + 8), *(_QWORD *)(v498 + 16)))
    {
      return 0;
    }
  }
  else if (v498)
  {
    return 0;
  }
  v499 = *(_QWORD *)(a1 + 1336);
  v500 = *(_QWORD *)(a2 + 1336);
  if (v499)
  {
    if (!v500 || !CMMsl::HIDShower::operator==(v499, v500))
      return 0;
  }
  else if (v500)
  {
    return 0;
  }
  v501 = *(_QWORD *)(a1 + 3496);
  v502 = *(_QWORD *)(a2 + 3496);
  if (v501)
  {
    if (!v502)
      return 0;
    v503 = *(_QWORD *)(v501 + 8);
    v504 = *(_QWORD *)(v502 + 8);
    if (v503)
    {
      if (!v504 || !CMMsl::FaceCovered::operator==(v503, v504))
        return 0;
    }
    else if (v504)
    {
      return 0;
    }
  }
  else if (v502)
  {
    return 0;
  }
  v505 = *(_QWORD *)(a1 + 3072);
  v506 = *(_QWORD *)(a2 + 3072);
  if (v505)
  {
    if (!v506)
      return 0;
    v507 = *(_QWORD *)(v505 + 8);
    v508 = *(_QWORD *)(v506 + 8);
    if (v507)
    {
      if (!v508 || !CMMsl::OnsetHeartRateData::operator==(v507, v508))
        return 0;
    }
    else if (v508)
    {
      return 0;
    }
  }
  else if (v506)
  {
    return 0;
  }
  v509 = *(_QWORD *)(a1 + 3168);
  v510 = *(_QWORD *)(a2 + 3168);
  if (v509)
  {
    if (!v510 || !CMMsl::UltraFastAccel::operator==(v509, v510))
      return 0;
  }
  else if (v510)
  {
    return 0;
  }
  v511 = *(_QWORD *)(a1 + 24);
  v512 = *(_QWORD *)(a2 + 24);
  if (v511)
  {
    if (!v512 || !CMMsl::Accel::operator==(v511, v512))
      return 0;
  }
  else if (v512)
  {
    return 0;
  }
  v513 = *(_QWORD *)(a1 + 40);
  v514 = *(_QWORD *)(a2 + 40);
  if (v513)
  {
    if (!v514 || !CMMsl::AccelBatch::operator==(v513, v514))
      return 0;
  }
  else if (v514)
  {
    return 0;
  }
  v515 = *(_QWORD *)(a1 + 64);
  v516 = *(_QWORD *)(a2 + 64);
  if (v515)
  {
    if (!v516)
      return 0;
    v517 = *(_QWORD *)(v515 + 8);
    v518 = *(_QWORD *)(v516 + 8);
    if (v517)
    {
      if (!v518 || !CMMsl::Accel::operator==(v517, v518))
        return 0;
    }
    else if (v518)
    {
      return 0;
    }
  }
  else if (v516)
  {
    return 0;
  }
  v519 = *(_QWORD *)(a1 + 48);
  v520 = *(_QWORD *)(a2 + 48);
  if (v519)
  {
    if (!v520)
      return 0;
    v521 = *(_QWORD *)(v519 + 8);
    v522 = *(_QWORD *)(v520 + 8);
    if (v521)
    {
      if (!v522 || !CMMsl::Accel::operator==(v521, v522))
        return 0;
    }
    else if (v522)
    {
      return 0;
    }
  }
  else if (v520)
  {
    return 0;
  }
  v523 = *(_QWORD *)(a1 + 1144);
  v524 = *(_QWORD *)(a2 + 1144);
  if (v523)
  {
    if (!v524 || !CMMsl::Gyro::operator==(v523, v524))
      return 0;
  }
  else if (v524)
  {
    return 0;
  }
  v525 = *(_QWORD *)(a1 + 1256);
  v526 = *(_QWORD *)(a2 + 1256);
  if (v525)
  {
    if (!v526 || !CMMsl::GyroOscarEmu::operator==(v525, v526))
      return 0;
  }
  else if (v526)
  {
    return 0;
  }
  v527 = *(_QWORD *)(a1 + 1264);
  v528 = *(_QWORD *)(a2 + 1264);
  if (v527)
  {
    if (!v528 || !CMMsl::GyroTemperature::operator==(v527, v528))
      return 0;
  }
  else if (v528)
  {
    return 0;
  }
  v529 = *(_QWORD *)(a1 + 1152);
  v530 = *(_QWORD *)(a2 + 1152);
  if (v529)
  {
    if (!v530 || !CMMsl::GyroBiasAndVariance::operator==(v529, v530))
      return 0;
  }
  else if (v530)
  {
    return 0;
  }
  v531 = *(_QWORD *)(a1 + 1184);
  v532 = *(_QWORD *)(a2 + 1184);
  if (v531)
  {
    if (!v532 || !CMMsl::GyroBiasFit::operator==(v531, v532))
      return 0;
  }
  else if (v532)
  {
    return 0;
  }
  v533 = *(_QWORD *)(a1 + 1232);
  v534 = *(_QWORD *)(a2 + 1232);
  if (v533)
  {
    if (!v534)
      return 0;
    if ((*(_BYTE *)(v533 + 12) & 1) != 0)
    {
      if ((*(_BYTE *)(v534 + 12) & 1) == 0 || *(float *)(v533 + 8) != *(float *)(v534 + 8))
        return 0;
    }
    else if ((*(_BYTE *)(v534 + 12) & 1) != 0)
    {
      return 0;
    }
  }
  else if (v534)
  {
    return 0;
  }
  v535 = *(_QWORD *)(a1 + 1920);
  v536 = *(_QWORD *)(a2 + 1920);
  if (v535)
  {
    if (!v536 || !CMMsl::Magnetometer::operator==(v535, v536))
      return 0;
  }
  else if (v536)
  {
    return 0;
  }
  v537 = *(_QWORD *)(a1 + 640);
  v538 = *(_QWORD *)(a2 + 640);
  if (v537)
  {
    if (!v538 || !CMMsl::Compass::operator==(v537, v538))
      return 0;
  }
  else if (v538)
  {
    return 0;
  }
  v539 = *(_QWORD *)(a1 + 648);
  v540 = *(_QWORD *)(a2 + 648);
  if (v539)
  {
    if (!v540 || !CMMsl::CompassAlignment::operator==(v539, v540))
      return 0;
  }
  else if (v540)
  {
    return 0;
  }
  v541 = *(_QWORD *)(a1 + 1224);
  v542 = *(_QWORD *)(a2 + 1224);
  if (v541)
  {
    if (!v542 || !CMMsl::GyroCompass::operator==(v541, v542))
      return 0;
  }
  else if (v542)
  {
    return 0;
  }
  v543 = *(_QWORD *)(a1 + 656);
  v544 = *(_QWORD *)(a2 + 656);
  if (v543)
  {
    if (!v544 || !CMMsl::CompassCalibration::operator==(v543, v544))
      return 0;
  }
  else if (v544)
  {
    return 0;
  }
  v545 = *(_QWORD *)(a1 + 2528);
  v546 = *(_QWORD *)(a2 + 2528);
  if (v545)
  {
    if (!v546 || !CMMsl::Pressure::operator==(v545, v546))
      return 0;
  }
  else if (v546)
  {
    return 0;
  }
  v547 = *(_QWORD *)(a1 + 2584);
  v548 = *(_QWORD *)(a2 + 2584);
  if (v547)
  {
    if (!v548)
      return 0;
    v549 = *(_QWORD *)(v547 + 8);
    v550 = *(_QWORD *)(v548 + 8);
    if (v549)
    {
      if (!v550 || !CMMsl::Pressure::operator==(v549, v550))
        return 0;
    }
    else if (v550)
    {
      return 0;
    }
  }
  else if (v548)
  {
    return 0;
  }
  v551 = *(_QWORD *)(a1 + 2552);
  v552 = *(_QWORD *)(a2 + 2552);
  if (v551)
  {
    if (!v552)
      return 0;
    v553 = *(_QWORD *)(v551 + 8);
    v554 = *(_QWORD *)(v552 + 8);
    if (v553)
    {
      if (!v554 || !CMMsl::Pressure::operator==(v553, v554))
        return 0;
    }
    else if (v554)
    {
      return 0;
    }
  }
  else if (v552)
  {
    return 0;
  }
  v555 = *(_QWORD *)(a1 + 2592);
  v556 = *(_QWORD *)(a2 + 2592);
  if (v555)
  {
    if (!v556 || !CMMsl::Prox::operator==(v555, v556))
      return 0;
  }
  else if (v556)
  {
    return 0;
  }
  v557 = *(_QWORD *)(a1 + 3152);
  v558 = *(_QWORD *)(a2 + 3152);
  if (v557)
  {
    if (!v558 || !CMMsl::TouchOscarEmu::operator==(v557, v558))
      return 0;
  }
  else if (v558)
  {
    return 0;
  }
  v559 = *(_QWORD *)(a1 + 744);
  v560 = *(_QWORD *)(a2 + 744);
  if (v559)
  {
    if (!v560 || !CMMsl::DeviceMotion::operator==(v559, v560))
      return 0;
  }
  else if (v560)
  {
    return 0;
  }
  v561 = *(_QWORD *)(a1 + 2048);
  v562 = *(_QWORD *)(a2 + 2048);
  if (v561)
  {
    if (!v562 || !CMMsl::MotionStateUpdate::operator==(v561, v562))
      return 0;
  }
  else if (v562)
  {
    return 0;
  }
  v563 = *(_QWORD *)(a1 + 56);
  v564 = *(_QWORD *)(a2 + 56);
  if (v563)
  {
    if (!v564 || !CMMsl::AccelGps::operator==(v563, v564))
      return 0;
  }
  else if (v564)
  {
    return 0;
  }
  v565 = *(_QWORD *)(a1 + 1248);
  v566 = *(_QWORD *)(a2 + 1248);
  if (v565)
  {
    if (!v566 || !CMMsl::GyroGps::operator==(v565, v566))
      return 0;
  }
  else if (v566)
  {
    return 0;
  }
  v567 = *(_QWORD *)(a1 + 2576);
  v568 = *(_QWORD *)(a2 + 2576);
  if (v567)
  {
    if (!v568)
      return 0;
    v569 = *(_QWORD *)(v567 + 8);
    v570 = *(_QWORD *)(v568 + 8);
    if (v569)
    {
      if (!v570 || !CMMsl::Pressure::operator==(v569, v570))
        return 0;
    }
    else if (v570)
    {
      return 0;
    }
  }
  else if (v568)
  {
    return 0;
  }
  v571 = *(_QWORD *)(a1 + 392);
  v572 = *(_QWORD *)(a2 + 392);
  if (v571)
  {
    if (!v572 || !CMMsl::BTConnection::operator==(v571, v572))
      return 0;
  }
  else if (v572)
  {
    return 0;
  }
  v573 = *(_QWORD *)(a1 + 2840);
  v574 = *(_QWORD *)(a2 + 2840);
  if (v573)
  {
    if (!v574 || !CMMsl::SessionOverride::operator==(v573, v574))
      return 0;
  }
  else if (v574)
  {
    return 0;
  }
  v575 = *(_QWORD *)(a1 + 1864);
  v576 = *(_QWORD *)(a2 + 1864);
  if (v575)
  {
    if (!v576 || !CMMsl::LocationOscarEmu::operator==(v575, v576))
      return 0;
  }
  else if (v576)
  {
    return 0;
  }
  v577 = *(_QWORD *)(a1 + 2016);
  v578 = *(_QWORD *)(a2 + 2016);
  if (v577)
  {
    if (!v578 || !CMMsl::MotionHint::operator==(v577, v578))
      return 0;
  }
  else if (v578)
  {
    return 0;
  }
  v579 = *(_QWORD *)(a1 + 880);
  v580 = *(_QWORD *)(a2 + 880);
  if (v579)
  {
    if (!v580 || !CMMsl::EnhancedDeviceMotion::operator==(v579, v580))
      return 0;
  }
  else if (v580)
  {
    return 0;
  }
  v581 = *(_QWORD *)(a1 + 2104);
  v582 = *(_QWORD *)(a2 + 2104);
  if (v581)
  {
    if (!v582 || !CMMsl::NonlinearBiasFit::operator==(v581, v582))
      return 0;
  }
  else if (v582)
  {
    return 0;
  }
  v583 = *(_QWORD *)(a1 + 2096);
  v584 = *(_QWORD *)(a2 + 2096);
  if (v583)
  {
    if (!v584 || !CMMsl::NatalieData::operator==(v583, v584))
      return 0;
  }
  else if (v584)
  {
    return 0;
  }
  v585 = *(_QWORD *)(a1 + 528);
  v586 = *(_QWORD *)(a2 + 528);
  if (v585)
  {
    if (!v586 || !CMMsl::BodyMetrics::operator==(v585, v586))
      return 0;
  }
  else if (v586)
  {
    return 0;
  }
  v587 = *(_QWORD *)(a1 + 3432);
  v588 = *(_QWORD *)(a2 + 3432);
  if (v587)
  {
    if (!v588 || !CMMsl::WorkoutEvent::operator==(v587, v588))
      return 0;
  }
  else if (v588)
  {
    return 0;
  }
  v589 = *(_QWORD *)(a1 + 2136);
  v590 = *(_QWORD *)(a2 + 2136);
  if (v589)
  {
    if (!v590 || !CMMsl::OnsetHeartRateData::operator==(v589, v590))
      return 0;
  }
  else if (v590)
  {
    return 0;
  }
  v591 = *(_QWORD *)(a1 + 3064);
  v592 = *(_QWORD *)(a2 + 3064);
  if (v591)
  {
    if (!v592)
      return 0;
    v593 = *(_QWORD *)(v591 + 8);
    v594 = *(_QWORD *)(v592 + 8);
    if (v593)
    {
      if (!v594 || !CMMsl::OnsetHeartRateData::operator==(v593, v594))
        return 0;
    }
    else if (v594)
    {
      return 0;
    }
  }
  else if (v592)
  {
    return 0;
  }
  v595 = *(_QWORD *)(a1 + 848);
  v596 = *(_QWORD *)(a2 + 848);
  if (v595)
  {
    if (!v596 || !CMMsl::ElevationChange::operator==(v595, v596))
      return 0;
  }
  else if (v596)
  {
    return 0;
  }
  v597 = *(_QWORD *)(a1 + 632);
  v598 = *(_QWORD *)(a2 + 632);
  if (v597)
  {
    if (!v598 || !CMMsl::CoarseElevationChange::operator==(v597, v598))
      return 0;
  }
  else if (v598)
  {
    return 0;
  }
  v599 = *(_QWORD *)(a1 + 2008);
  v600 = *(_QWORD *)(a2 + 2008);
  if (v599)
  {
    if (!v600 || !CMMsl::MotionGPSLocation::operator==(v599, v600))
      return 0;
  }
  else if (v600)
  {
    return 0;
  }
  v601 = *(_QWORD *)(a1 + 2064);
  v602 = *(_QWORD *)(a2 + 2064);
  if (v601)
  {
    if (!v602)
      return 0;
    v603 = *(_QWORD *)(v601 + 8);
    v604 = *(_QWORD *)(v602 + 8);
    if (v603)
    {
      if (!v604 || !CMMsl::MotionGPSLocation::operator==(v603, v604))
        return 0;
    }
    else if (v604)
    {
      return 0;
    }
  }
  else if (v602)
  {
    return 0;
  }
  v605 = *(_QWORD *)(a1 + 3080);
  v606 = *(_QWORD *)(a2 + 3080);
  if (v605)
  {
    if (!v606 || !CMMsl::StrideCalBin::operator==(v605, v606))
      return 0;
  }
  else if (v606)
  {
    return 0;
  }
  v607 = *(_QWORD *)(a1 + 600);
  v608 = *(_QWORD *)(a2 + 600);
  if (v607)
  {
    if (!v608)
      return 0;
    if ((*(_BYTE *)(v607 + 12) & 1) != 0)
    {
      if ((*(_BYTE *)(v608 + 12) & 1) == 0 || *(unsigned __int8 *)(v607 + 8) != *(unsigned __int8 *)(v608 + 8))
        return 0;
    }
    else if ((*(_BYTE *)(v608 + 12) & 1) != 0)
    {
      return 0;
    }
  }
  else if (v608)
  {
    return 0;
  }
  v609 = *(_QWORD *)(a1 + 2112);
  v610 = *(_QWORD *)(a2 + 2112);
  if (v609)
  {
    if (!v610 || !CMMsl::Odometer::operator==(v609, v610))
      return 0;
  }
  else if (v610)
  {
    return 0;
  }
  v611 = *(_QWORD *)(a1 + 1952);
  v612 = *(_QWORD *)(a2 + 1952);
  if (v611)
  {
    if (!v612 || !CMMsl::MetsInfo::operator==(v611, v612))
      return 0;
  }
  else if (v612)
  {
    return 0;
  }
  v613 = *(_QWORD *)(a1 + 1008);
  v614 = *(_QWORD *)(a2 + 1008);
  if (v613)
  {
    if (!v614 || !CMMsl::FallStats::operator==(v613, v614))
      return 0;
  }
  else if (v614)
  {
    return 0;
  }
  v615 = *(_QWORD *)(a1 + 424);
  v616 = *(_QWORD *)(a2 + 424);
  if (v615)
  {
    if (!v616 || !CMMsl::BasebandSpeed::operator==(v615, v616))
      return 0;
  }
  else if (v616)
  {
    return 0;
  }
  v617 = *(_QWORD *)(a1 + 3216);
  v618 = *(_QWORD *)(a2 + 3216);
  if (v617)
  {
    if (!v618)
      return 0;
    if ((*(_BYTE *)(v617 + 12) & 1) != 0)
    {
      if ((*(_BYTE *)(v618 + 12) & 1) == 0 || *(unsigned __int8 *)(v617 + 8) != *(unsigned __int8 *)(v618 + 8))
        return 0;
    }
    else if ((*(_BYTE *)(v618 + 12) & 1) != 0)
    {
      return 0;
    }
  }
  else if (v618)
  {
    return 0;
  }
  v619 = *(_QWORD *)(a1 + 3024);
  v620 = *(_QWORD *)(a2 + 3024);
  if (v619)
  {
    if (!v620 || !CMMsl::StepCadenceToStrideLengthBin::operator==(v619, v620))
      return 0;
  }
  else if (v620)
  {
    return 0;
  }
  v621 = *(_QWORD *)(a1 + 3408);
  v622 = *(_QWORD *)(a2 + 3408);
  if (v621)
  {
    if (!v622 || !CMMsl::WatchOrientationSettings::operator==(v621, v622))
      return 0;
  }
  else if (v622)
  {
    return 0;
  }
  v623 = *(_QWORD *)(a1 + 2056);
  v624 = *(_QWORD *)(a2 + 2056);
  if (v623)
  {
    if (!v624)
      return 0;
    if ((*(_BYTE *)(v623 + 12) & 1) != 0)
    {
      if ((*(_BYTE *)(v624 + 12) & 1) == 0 || *(unsigned __int8 *)(v623 + 8) != *(unsigned __int8 *)(v624 + 8))
        return 0;
    }
    else if ((*(_BYTE *)(v624 + 12) & 1) != 0)
    {
      return 0;
    }
  }
  else if (v624)
  {
    return 0;
  }
  v625 = *(_QWORD *)(a1 + 2040);
  v626 = *(_QWORD *)(a2 + 2040);
  if (v625)
  {
    if (!v626 || !CMMsl::MotionLoiData::operator==(v625, v626))
      return 0;
  }
  else if (v626)
  {
    return 0;
  }
  v627 = *(_QWORD *)(a1 + 2120);
  v628 = *(_QWORD *)(a2 + 2120);
  if (v627)
  {
    if (!v628 || !CMMsl::OdometerWithAltitude::operator==(v627, v628))
      return 0;
  }
  else if (v628)
  {
    return 0;
  }
  v629 = *(_QWORD *)(a1 + 2568);
  v630 = *(_QWORD *)(a2 + 2568);
  if (v629)
  {
    if (!v630 || !CMMsl::PressureFilteredNoTemperature::operator==(v629, v630))
      return 0;
  }
  else if (v630)
  {
    return 0;
  }
  v631 = *(_QWORD *)(a1 + 1400);
  v632 = *(_QWORD *)(a2 + 1400);
  if (v631)
  {
    if (!v632 || !CMMsl::InEarTransition::operator==(v631, v632))
      return 0;
  }
  else if (v632)
  {
    return 0;
  }
  v633 = *(_QWORD *)(a1 + 624);
  v634 = *(_QWORD *)(a2 + 624);
  if (v633)
  {
    if (!v634 || !CMMsl::ClefCalibration::operator==(v633, v634))
      return 0;
  }
  else if (v634)
  {
    return 0;
  }
  v635 = *(_QWORD *)(a1 + 288);
  v636 = *(_QWORD *)(a2 + 288);
  if (v635)
  {
    if (!v636 || !CMMsl::AirpodEvent::operator==(v635, v636))
      return 0;
  }
  else if (v636)
  {
    return 0;
  }
  v637 = *(_QWORD *)(a1 + 1384);
  v638 = *(_QWORD *)(a2 + 1384);
  if (v637)
  {
    if (!v638 || !CMMsl::InEarOptical::operator==(v637, v638))
      return 0;
  }
  else if (v638)
  {
    return 0;
  }
  v639 = *(_QWORD *)(a1 + 1368);
  v640 = *(_QWORD *)(a2 + 1368);
  if (v639)
  {
    if (!v640 || !CMMsl::InEarConstraints::operator==(v639, v640))
      return 0;
  }
  else if (v640)
  {
    return 0;
  }
  v641 = *(_QWORD *)(a1 + 1376);
  v642 = *(_QWORD *)(a2 + 1376);
  if (v641)
  {
    if (!v642 || !CMMsl::InEarOpenLid::operator==(v641, v642))
      return 0;
  }
  else if (v642)
  {
    return 0;
  }
  v643 = *(_QWORD *)(a1 + 1360);
  v644 = *(_QWORD *)(a2 + 1360);
  if (v643)
  {
    if (!v644 || !CMMsl::InEarBaselining::operator==(v643, v644))
      return 0;
  }
  else if (v644)
  {
    return 0;
  }
  v645 = *(_QWORD *)(a1 + 120);
  v646 = *(_QWORD *)(a2 + 120);
  if (v645)
  {
    if (!v646 || !CMMsl::AccessoryConfig::operator==(v645, v646))
      return 0;
  }
  else if (v646)
  {
    return 0;
  }
  v647 = *(_QWORD **)(a1 + 96);
  v648 = *(_QWORD **)(a2 + 96);
  if (v647)
  {
    if (!v648
      || (CMMsl::AccessoryAccelConfig::operator==(v647, v648) & 1) == 0 && *(_QWORD *)(a1 + 96) | *(_QWORD *)(a2 + 96))
    {
      return 0;
    }
  }
  else if (v648)
  {
    return 0;
  }
  v649 = *(_QWORD *)(a1 + 240);
  v650 = *(_QWORD **)(a2 + 240);
  if (v649)
  {
    if (!v650
      || !CMMsl::AccessoryProximityConfig::operator==(v649, v650) && *(_QWORD *)(a1 + 240) | *(_QWORD *)(a2 + 240))
    {
      return 0;
    }
  }
  else if (v650)
  {
    return 0;
  }
  v651 = *(_QWORD *)(a1 + 3120);
  v652 = *(_QWORD *)(a2 + 3120);
  if (v651)
  {
    if (!v652 || !CMMsl::TapDetect::operator==(v651, v652))
      return 0;
  }
  else if (v652)
  {
    return 0;
  }
  v653 = *(_QWORD *)(a1 + 3112);
  v654 = *(_QWORD *)(a2 + 3112);
  if (v653)
  {
    if (!v654 || !CMMsl::TapAccept::operator==(v653, v654))
      return 0;
  }
  else if (v654)
  {
    return 0;
  }
  v655 = *(_QWORD *)(a1 + 840);
  v656 = *(_QWORD *)(a2 + 840);
  if (v655)
  {
    if (!v656 || !CMMsl::DoubleTap::operator==(v655, v656))
      return 0;
  }
  else if (v656)
  {
    return 0;
  }
  v657 = *(_QWORD *)(a1 + 280);
  v658 = *(_QWORD *)(a2 + 280);
  if (v657)
  {
    if (!v658 || !CMMsl::AccessoryWakeDebug::operator==(v657, v658))
      return 0;
  }
  else if (v658)
  {
    return 0;
  }
  v659 = *(_QWORD *)(a1 + 1104);
  v660 = *(_QWORD *)(a2 + 1104);
  if (v659)
  {
    if (!v660 || !CMMsl::GeomagneticData::operator==(v659, v660))
      return 0;
  }
  else if (v660)
  {
    return 0;
  }
  v661 = *(_QWORD *)(a1 + 2688);
  v662 = *(_QWORD *)(a2 + 2688);
  if (v661)
  {
    if (!v662 || !CMMsl::RelativeDeviceMotionInternal::operator==(v661, v662))
      return 0;
  }
  else if (v662)
  {
    return 0;
  }
  v663 = *(_QWORD *)(a1 + 2704);
  v664 = *(_QWORD *)(a2 + 2704);
  if (v663)
  {
    if (!v664 || !CMMsl::RelativeGravityCorrection::operator==(v663, v664))
      return 0;
  }
  else if (v664)
  {
    return 0;
  }
  v665 = *(_QWORD *)(a1 + 2696);
  v666 = *(_QWORD *)(a2 + 2696);
  if (v665)
  {
    if (!v666 || !CMMsl::RelativeGravityConstraints::operator==(v665, v666))
      return 0;
  }
  else if (v666)
  {
    return 0;
  }
  v667 = *(_QWORD *)(a1 + 3608);
  v668 = *(_QWORD *)(a2 + 3608);
  if (v667)
  {
    if (!v668)
      return 0;
    v669 = *(_QWORD *)(v667 + 8);
    v670 = *(_QWORD *)(v668 + 8);
    if (v669)
    {
      if (!v670 || !CMMsl::DeviceMotionCorrection::operator==(v669, v670))
        return 0;
    }
    else if (v670)
    {
      return 0;
    }
  }
  else if (v668)
  {
    return 0;
  }
  v671 = *(_QWORD *)(a1 + 328);
  v672 = *(_QWORD *)(a2 + 328);
  if (v671)
  {
    if (!v672 || !CMMsl::AnchorCorrection::operator==(v671, v672))
      return 0;
  }
  else if (v672)
  {
    return 0;
  }
  v673 = *(_QWORD *)(a1 + 2520);
  v674 = *(_QWORD *)(a2 + 2520);
  if (v673)
  {
    if (!v674 || !CMMsl::PredictedRelativeDeviceMotion::operator==(v673, v674))
      return 0;
  }
  else if (v674)
  {
    return 0;
  }
  v675 = *(_QWORD *)(a1 + 2088);
  v676 = *(_QWORD *)(a2 + 2088);
  if (v675)
  {
    if (!v676 || !CMMsl::MovementStatsSignal::operator==(v675, v676))
      return 0;
  }
  else if (v676)
  {
    return 0;
  }
  v677 = *(_QWORD *)(a1 + 2080);
  v678 = *(_QWORD *)(a2 + 2080);
  if (v677)
  {
    if (!v678 || !CMMsl::MovementStatsGravityProjection::operator==(v677, v678))
      return 0;
  }
  else if (v678)
  {
    return 0;
  }
  v679 = *(_QWORD *)(a1 + 520);
  v680 = *(_QWORD *)(a2 + 520);
  if (v679)
  {
    if (!v680 || !CMMsl::BleedToZeroCorrection::operator==(v679, v680))
      return 0;
  }
  else if (v680)
  {
    return 0;
  }
  v681 = *(_QWORD *)(a1 + 160);
  v682 = *(_QWORD *)(a2 + 160);
  if (v681)
  {
    if (!v682)
      return 0;
    v683 = *(_QWORD *)(v681 + 8);
    v684 = *(_QWORD *)(v682 + 8);
    if (v683)
    {
      if (!v684 || !CMMsl::AccessoryConfig::operator==(v683, v684))
        return 0;
    }
    else if (v684)
    {
      return 0;
    }
  }
  else if (v682)
  {
    return 0;
  }
  v685 = *(_QWORD *)(a1 + 168);
  v686 = *(_QWORD *)(a2 + 168);
  if (v685)
  {
    if (!v686 || (CMMsl::AccessoryGyroGYTT::operator==(v685, v686) & 1) == 0)
      return 0;
  }
  else if (v686)
  {
    return 0;
  }
  v687 = *(_QWORD *)(a1 + 152);
  v688 = *(_QWORD *)(a2 + 152);
  if (v687)
  {
    if (!v688 || (CMMsl::AccessoryGyroCachedBias::operator==(v687, v688) & 1) == 0)
      return 0;
  }
  else if (v688)
  {
    return 0;
  }
  v689 = *(_QWORD *)(a1 + 1064);
  v690 = *(_QWORD *)(a2 + 1064);
  if (v689)
  {
    if (!v690 || !CMMsl::GaitCycleSegment::operator==(v689, v690))
      return 0;
  }
  else if (v690)
  {
    return 0;
  }
  v691 = *(_QWORD *)(a1 + 1072);
  v692 = *(_QWORD *)(a2 + 1072);
  if (v691)
  {
    if (!v692 || !CMMsl::GaitCycleSegmentationState::operator==(v691, v692))
      return 0;
  }
  else if (v692)
  {
    return 0;
  }
  v693 = *(_QWORD *)(a1 + 664);
  v694 = *(_QWORD *)(a2 + 664);
  if (v693)
  {
    if (!v694 || !CMMsl::CompassCalibrationAttempt::operator==(v693, v694))
      return 0;
  }
  else if (v694)
  {
    return 0;
  }
  v695 = *(_QWORD *)(a1 + 3304);
  v696 = *(_QWORD *)(a2 + 3304);
  if (v695)
  {
    if (!v696)
      return 0;
    v697 = *(_QWORD *)(v695 + 8);
    v698 = *(_QWORD *)(v696 + 8);
    if (v697)
    {
      if (!v698 || !CMMsl::DeviceMotionCorrection::operator==(v697, v698))
        return 0;
    }
    else if (v698)
    {
      return 0;
    }
  }
  else if (v696)
  {
    return 0;
  }
  v699 = *(_QWORD *)(a1 + 3296);
  v700 = *(_QWORD *)(a2 + 3296);
  if (v699)
  {
    if (!v700 || !CMMsl::VisualLocalizationAttitudeConstraints::operator==(v699, v700))
      return 0;
  }
  else if (v700)
  {
    return 0;
  }
  v701 = *(_QWORD *)(a1 + 200);
  v702 = *(_QWORD *)(a2 + 200);
  if (v701)
  {
    if (!v702)
      return 0;
    v703 = *(_QWORD *)(v701 + 8);
    v704 = *(_QWORD *)(v702 + 8);
    if (v703)
    {
      if (!v704 || !CMMsl::AccessoryConfig::operator==(v703, v704))
        return 0;
    }
    else if (v704)
    {
      return 0;
    }
  }
  else if (v702)
  {
    return 0;
  }
  v705 = *(_QWORD *)(a1 + 952);
  v706 = *(_QWORD *)(a2 + 952);
  if (v705)
  {
    if (!v706 || !CMMsl::FallDetectionReferee::operator==(v705, v706))
      return 0;
  }
  else if (v706)
  {
    return 0;
  }
  v707 = *(_QWORD *)(a1 + 960);
  v708 = *(_QWORD *)(a2 + 960);
  if (v707)
  {
    if (!v708 || !CMMsl::FallDetectionReplay::operator==(v707, v708))
      return 0;
  }
  else if (v708)
  {
    return 0;
  }
  v709 = *(_QWORD *)(a1 + 968);
  v710 = *(_QWORD *)(a2 + 968);
  if (v709)
  {
    if (!v710 || !CMMsl::FallDetectionStateMachine::operator==(v709, v710))
      return 0;
  }
  else if (v710)
  {
    return 0;
  }
  v711 = *(_QWORD *)(a1 + 936);
  v712 = *(_QWORD *)(a2 + 936);
  if (v711)
  {
    if (!v712 || !CMMsl::FallDetectionDetector::operator==(v711, v712))
      return 0;
  }
  else if (v712)
  {
    return 0;
  }
  v713 = *(_QWORD *)(a1 + 992);
  v714 = *(_QWORD *)(a2 + 992);
  if (v713)
  {
    if (!v714 || !CMMsl::FallFalsePositiveSuppressionFeatures::operator==(v713, v714))
      return 0;
  }
  else if (v714)
  {
    return 0;
  }
  v715 = *(_QWORD *)(a1 + 136);
  v716 = *(_QWORD *)(a2 + 136);
  if (v715)
  {
    if (!v716 || !CMMsl::AccessoryDeviceMotionConfig::operator==(v715, v716))
      return 0;
  }
  else if (v716)
  {
    return 0;
  }
  v717 = *(_QWORD *)(a1 + 2680);
  v718 = *(_QWORD *)(a2 + 2680);
  if (v717)
  {
    if (!v718 || !CMMsl::RelativeDeviceMotionCorrelatedMotion::operator==(v717, v718))
      return 0;
  }
  else if (v718)
  {
    return 0;
  }
  v719 = *(_QWORD *)(a1 + 2672);
  v720 = *(_QWORD *)(a2 + 2672);
  if (v719)
  {
    if (!v720 || !CMMsl::RelativeDeviceMotionComplexTransition::operator==(v719, v720))
      return 0;
  }
  else if (v720)
  {
    return 0;
  }
  v721 = *(_QWORD *)(a1 + 752);
  v722 = *(_QWORD *)(a2 + 752);
  if (v721)
  {
    if (!v722 || !CMMsl::DeviceMotionAlwaysOn::operator==(v721, v722))
      return 0;
  }
  else if (v722)
  {
    return 0;
  }
  v723 = *(_QWORD *)(a1 + 944);
  v724 = *(_QWORD *)(a2 + 944);
  if (v723)
  {
    if (!v724 || !CMMsl::FallDetectionGyroControllerReplay::operator==(v723, v724))
      return 0;
  }
  else if (v724)
  {
    return 0;
  }
  v725 = *(_QWORD *)(a1 + 3352);
  v726 = *(_QWORD *)(a2 + 3352);
  if (v725)
  {
    if (!v726 || !CMMsl::WalkingDetectionResult::operator==(v725, v726))
      return 0;
  }
  else if (v726)
  {
    return 0;
  }
  v727 = *(_QWORD *)(a1 + 184);
  v728 = *(_QWORD *)(a2 + 184);
  if (v727)
  {
    if (!v728 || !CMMsl::AccessoryInEarStatus::operator==(v727, v728))
      return 0;
  }
  else if (v728)
  {
    return 0;
  }
  v729 = *(_QWORD *)(a1 + 976);
  v730 = *(_QWORD *)(a2 + 976);
  if (v729)
  {
    if (!v730 || !CMMsl::FallDetectionWristStateReplay::operator==(v729, v730))
      return 0;
  }
  else if (v730)
  {
    return 0;
  }
  v731 = *(_QWORD *)(a1 + 1176);
  v732 = *(_QWORD *)(a2 + 1176);
  if (v731)
  {
    if (!v732 || !CMMsl::GyroBiasEstimateError::operator==(v731, v732))
      return 0;
  }
  else if (v732)
  {
    return 0;
  }
  v733 = *(_QWORD *)(a1 + 3056);
  v734 = *(_QWORD *)(a2 + 3056);
  if (v733)
  {
    if (!v734 || !CMMsl::StepLikelihoodFeatures::operator==(v733, v734))
      return 0;
  }
  else if (v734)
  {
    return 0;
  }
  v735 = *(_QWORD *)(a1 + 1016);
  v736 = *(_QWORD *)(a2 + 1016);
  if (v735)
  {
    if (!v736 || !CMMsl::FirstStepFeatures::operator==(v735, v736))
      return 0;
  }
  else if (v736)
  {
    return 0;
  }
  v737 = *(_QWORD *)(a1 + 264);
  v738 = *(_QWORD *)(a2 + 264);
  if (v737)
  {
    if (!v738 || !CMMsl::AccessoryStepDetectorDebug::operator==(v737, v738))
      return 0;
  }
  else if (v738)
  {
    return 0;
  }
  v739 = *(_QWORD *)(a1 + 2864);
  v740 = *(_QWORD *)(a2 + 2864);
  if (v739)
  {
    if (!v740 || !CMMsl::SitStandDetectorFeatures::operator==(v739, v740))
      return 0;
  }
  else if (v740)
  {
    return 0;
  }
  v741 = *(_QWORD *)(a1 + 2888);
  v742 = *(_QWORD *)(a2 + 2888);
  if (v741)
  {
    if (!v742 || !CMMsl::SitStandDetectorTransition::operator==(v741, v742))
      return 0;
  }
  else if (v742)
  {
    return 0;
  }
  v743 = *(_QWORD *)(a1 + 2872);
  v744 = *(_QWORD *)(a2 + 2872);
  if (v743)
  {
    if (!v744 || !CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand::operator==(v743, v744))
      return 0;
  }
  else if (v744)
  {
    return 0;
  }
  v745 = *(_QWORD *)(a1 + 2880);
  v746 = *(_QWORD *)(a2 + 2880);
  if (v745)
  {
    if (!v746 || !CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit::operator==(v745, v746))
      return 0;
  }
  else if (v746)
  {
    return 0;
  }
  v747 = *(_QWORD *)(a1 + 2928);
  v748 = *(_QWORD *)(a2 + 2928);
  if (v747)
  {
    if (!v748 || !CMMsl::SpatialEvent::operator==(v747, v748))
      return 0;
  }
  else if (v748)
  {
    return 0;
  }
  v749 = *(_QWORD *)(a1 + 984);
  v750 = *(_QWORD *)(a2 + 984);
  if (v749)
  {
    if (!v750 || !CMMsl::FallDistanceReplay::operator==(v749, v750))
      return 0;
  }
  else if (v750)
  {
    return 0;
  }
  v751 = *(_QWORD *)(a1 + 1456);
  v752 = *(_QWORD *)(a2 + 1456);
  if (v751)
  {
    if (!v752 || !CMMsl::JitterBufferLevel::operator==(v751, v752))
      return 0;
  }
  else if (v752)
  {
    return 0;
  }
  v753 = *(_QWORD *)(a1 + 2560);
  v754 = *(_QWORD *)(a2 + 2560);
  if (v753)
  {
    if (!v754 || !CMMsl::PressureFiltered1HzLowPass::operator==(v753, v754))
      return 0;
  }
  else if (v754)
  {
    return 0;
  }
  v755 = *(_QWORD *)(a1 + 1992);
  v756 = *(_QWORD *)(a2 + 1992);
  if (v755)
  {
    if (!v756 || !CMMsl::MotionActivityReplay::operator==(v755, v756))
      return 0;
  }
  else if (v756)
  {
    return 0;
  }
  v757 = *(_QWORD *)(a1 + 928);
  v758 = *(_QWORD *)(a2 + 928);
  if (v757)
  {
    if (!v758 || !CMMsl::FallDetectionActivityClassifierReplay::operator==(v757, v758))
      return 0;
  }
  else if (v758)
  {
    return 0;
  }
  v759 = *(_QWORD *)(a1 + 1824);
  v760 = *(_QWORD *)(a2 + 1824);
  if (v759)
  {
    if (!v760 || !CMMsl::LegacyALS5CHInput::operator==(v759, v760))
      return 0;
  }
  else if (v760)
  {
    return 0;
  }
  v761 = *(_QWORD *)(a1 + 816);
  v762 = *(_QWORD *)(a2 + 816);
  if (v761)
  {
    if (!v762 || !CMMsl::DopplerSample::operator==(v761, v762))
      return 0;
  }
  else if (v762)
  {
    return 0;
  }
  v763 = *(_QWORD *)(a1 + 800);
  v764 = *(_QWORD *)(a2 + 800);
  if (v763)
  {
    if (!v764 || !CMMsl::DopplerProximityEvent::operator==(v763, v764))
      return 0;
  }
  else if (v764)
  {
    return 0;
  }
  v765 = *(_QWORD *)(a1 + 808);
  v766 = *(_QWORD *)(a2 + 808);
  if (v765)
  {
    if (!v766 || !CMMsl::DopplerRawDataInput::operator==(v765, v766))
      return 0;
  }
  else if (v766)
  {
    return 0;
  }
  v767 = *(_QWORD *)(a1 + 792);
  v768 = *(_QWORD *)(a2 + 792);
  if (v767)
  {
    if (!v768 || !CMMsl::DopplerDebugRecord::operator==(v767, v768))
      return 0;
  }
  else if (v768)
  {
    return 0;
  }
  v769 = *(_QWORD *)(a1 + 2144);
  v770 = *(_QWORD *)(a2 + 2144);
  if (v769)
  {
    if (!v770 || !CMMsl::Orientation::operator==(v769, v770))
      return 0;
  }
  else if (v770)
  {
    return 0;
  }
  v771 = *(_QWORD *)(a1 + 1528);
  v772 = *(_QWORD *)(a2 + 1528);
  if (v771)
  {
    if (!v772 || !CMMsl::KappaAudioResult::operator==(v771, v772))
      return 0;
  }
  else if (v772)
  {
    return 0;
  }
  v773 = *(_QWORD *)(a1 + 1536);
  v774 = *(_QWORD *)(a2 + 1536);
  if (v773)
  {
    if (!v774 || !CMMsl::KappaBaroResult::operator==(v773, v774))
      return 0;
  }
  else if (v774)
  {
    return 0;
  }
  v775 = *(_QWORD *)(a1 + 1560);
  v776 = *(_QWORD *)(a2 + 1560);
  if (v775)
  {
    if (!v776 || !CMMsl::KappaGpsResult::operator==(v775, v776))
      return 0;
  }
  else if (v776)
  {
    return 0;
  }
  v777 = *(_QWORD *)(a1 + 1648);
  v778 = *(_QWORD *)(a2 + 1648);
  if (v777)
  {
    if (!v778 || !CMMsl::KappaPulseResult::operator==(v777, v778))
      return 0;
  }
  else if (v778)
  {
    return 0;
  }
  v779 = *(_QWORD *)(a1 + 1768);
  v780 = *(_QWORD *)(a2 + 1768);
  if (v779)
  {
    if (!v780 || !CMMsl::KappaZgResult::operator==(v779, v780))
      return 0;
  }
  else if (v780)
  {
    return 0;
  }
  v781 = *(_QWORD *)(a1 + 1760);
  v782 = *(_QWORD *)(a2 + 1760);
  if (v781)
  {
    if (!v782)
      return 0;
    if ((*(_BYTE *)(v781 + 16) & 1) != 0)
    {
      if ((*(_BYTE *)(v782 + 16) & 1) == 0 || *(_QWORD *)(v781 + 8) != *(_QWORD *)(v782 + 8))
        return 0;
    }
    else if ((*(_BYTE *)(v782 + 16) & 1) != 0)
    {
      return 0;
    }
  }
  else if (v782)
  {
    return 0;
  }
  v783 = *(_QWORD *)(a1 + 1632);
  v784 = *(_QWORD *)(a2 + 1632);
  if (v783)
  {
    if (!v784 || !CMMsl::KappaPulseInertialAccel::operator==(v783, v784))
      return 0;
  }
  else if (v784)
  {
    return 0;
  }
  v785 = *(_QWORD *)(a1 + 1312);
  v786 = *(_QWORD *)(a2 + 1312);
  if (v785)
  {
    if (!v786)
      return 0;
    if ((*(_BYTE *)(v785 + 12) & 1) != 0)
    {
      if ((*(_BYTE *)(v786 + 12) & 1) == 0 || *(_DWORD *)(v785 + 8) != *(_DWORD *)(v786 + 8))
        return 0;
    }
    else if ((*(_BYTE *)(v786 + 12) & 1) != 0)
    {
      return 0;
    }
  }
  else if (v786)
  {
    return 0;
  }
  v787 = *(_QWORD *)(a1 + 1304);
  v788 = *(_QWORD *)(a2 + 1304);
  if (v787)
  {
    if (!v788)
      return 0;
    if ((*(_BYTE *)(v787 + 12) & 1) != 0)
    {
      if ((*(_BYTE *)(v788 + 12) & 1) == 0 || *(_DWORD *)(v787 + 8) != *(_DWORD *)(v788 + 8))
        return 0;
    }
    else if ((*(_BYTE *)(v788 + 12) & 1) != 0)
    {
      return 0;
    }
  }
  else if (v788)
  {
    return 0;
  }
  v789 = *(_QWORD *)(a1 + 1520);
  v790 = *(_QWORD *)(a2 + 1520);
  if (v789)
  {
    if (!v790 || !CMMsl::KappaAirbagResult::operator==(v789, v790))
      return 0;
  }
  else if (v790)
  {
    return 0;
  }
  v791 = *(_QWORD *)(a1 + 1544);
  v792 = *(_QWORD *)(a2 + 1544);
  if (v791)
  {
    if (!v792 || !CMMsl::KappaCrashResult::operator==(v791, v792))
      return 0;
  }
  else if (v792)
  {
    return 0;
  }
  v793 = *(_QWORD *)(a1 + 1656);
  v794 = *(_QWORD *)(a2 + 1656);
  if (v793)
  {
    if (!v794 || !CMMsl::KappaQuiescenceResult::operator==(v793, v794))
      return 0;
  }
  else if (v794)
  {
    return 0;
  }
  v795 = *(_QWORD *)(a1 + 1664);
  v796 = *(_QWORD *)(a2 + 1664);
  if (v795)
  {
    if (!v796 || !CMMsl::KappaRecoveryResult::operator==(v795, v796))
      return 0;
  }
  else if (v796)
  {
    return 0;
  }
  v797 = *(_QWORD *)(a1 + 1696);
  v798 = *(_QWORD *)(a2 + 1696);
  if (v797)
  {
    if (!v798 || !CMMsl::KappaRolloverCrashResult::operator==(v797, v798))
      return 0;
  }
  else if (v798)
  {
    return 0;
  }
  v799 = *(_QWORD *)(a1 + 1600);
  v800 = *(_QWORD *)(a2 + 1600);
  if (v799)
  {
    if (!v800 || !CMMsl::KappaMildImpactResult::operator==(v799, v800))
      return 0;
  }
  else if (v800)
  {
    return 0;
  }
  v801 = *(_QWORD *)(a1 + 1584);
  v802 = *(_QWORD *)(a2 + 1584);
  if (v801)
  {
    if (!v802 || !CMMsl::KappaLackOfMotionResult::operator==(v801, v802))
      return 0;
  }
  else if (v802)
  {
    return 0;
  }
  v803 = *(_QWORD *)(a1 + 1704);
  v804 = *(_QWORD *)(a2 + 1704);
  if (v803)
  {
    if (!v804 || !CMMsl::KappaSevereCrashResult::operator==(v803, v804))
      return 0;
  }
  else if (v804)
  {
    return 0;
  }
  v805 = *(_QWORD *)(a1 + 1592);
  v806 = *(_QWORD *)(a2 + 1592);
  if (v805)
  {
    if (!v806 || !CMMsl::KappaLocalAudioResult::operator==(v805, v806))
      return 0;
  }
  else if (v806)
  {
    return 0;
  }
  v807 = *(_QWORD *)(a1 + 1672);
  v808 = *(_QWORD *)(a2 + 1672);
  if (v807)
  {
    if (!v808 || !CMMsl::KappaRemoteAudioResult::operator==(v807, v808))
      return 0;
  }
  else if (v808)
  {
    return 0;
  }
  v809 = *(_QWORD *)(a1 + 768);
  v810 = *(_QWORD *)(a2 + 768);
  if (v809)
  {
    if (!v810 || !CMMsl::DirectionOfTravelMetrics::operator==(v809, v810))
      return 0;
  }
  else if (v810)
  {
    return 0;
  }
  v811 = *(_QWORD *)(a1 + 3224);
  v812 = *(_QWORD *)(a2 + 3224);
  if (v811)
  {
    if (!v812 || !CMMsl::ViewObstructedMachineLearningDecision::operator==(v811, v812))
      return 0;
  }
  else if (v812)
  {
    return 0;
  }
  v813 = *(_QWORD *)(a1 + 1296);
  v814 = *(_QWORD *)(a2 + 1296);
  if (v813)
  {
    if (!v814 || !CMMsl::HeadToHeadsetTransformationEstimate::operator==(v813, v814))
      return 0;
  }
  else if (v814)
  {
    return 0;
  }
  v815 = *(_QWORD *)(a1 + 3232);
  v816 = *(_QWORD *)(a2 + 3232);
  if (v815)
  {
    if (!v816 || !CMMsl::ViewObstructedMachineLearningFeatures::operator==(v815, v816))
      return 0;
  }
  else if (v816)
  {
    return 0;
  }
  v817 = *(_QWORD *)(a1 + 3240);
  v818 = *(_QWORD *)(a2 + 3240);
  if (v817)
  {
    if (!v818 || !CMMsl::ViewObstructedMachineLearningProbabilities::operator==(v817, v818))
      return 0;
  }
  else if (v818)
  {
    return 0;
  }
  v819 = *(_QWORD *)(a1 + 2728);
  v820 = *(_QWORD *)(a2 + 2728);
  if (v819)
  {
    if (!v820 || !CMMsl::RunningArmSwingSignals::operator==(v819, v820))
      return 0;
  }
  else if (v820)
  {
    return 0;
  }
  v821 = *(_QWORD *)(a1 + 2736);
  v822 = *(_QWORD *)(a2 + 2736);
  if (v821)
  {
    if (!v822 || !CMMsl::RunningCentripetalAccelSignals::operator==(v821, v822))
      return 0;
  }
  else if (v822)
  {
    return 0;
  }
  v823 = *(_QWORD *)(a1 + 2760);
  v824 = *(_QWORD *)(a2 + 2760);
  if (v823)
  {
    if (!v824 || !CMMsl::RunningRotationAxis::operator==(v823, v824))
      return 0;
  }
  else if (v824)
  {
    return 0;
  }
  v825 = *(_QWORD *)(a1 + 2800);
  v826 = *(_QWORD *)(a2 + 2800);
  if (v825)
  {
    if (!v826 || !CMMsl::RunningVerticalOscillationSignals::operator==(v825, v826))
      return 0;
  }
  else if (v826)
  {
    return 0;
  }
  v827 = *(_QWORD *)(a1 + 2784);
  v828 = *(_QWORD *)(a2 + 2784);
  if (v827)
  {
    if (!v828 || !CMMsl::RunningVerticalOscillation::operator==(v827, v828))
      return 0;
  }
  else if (v828)
  {
    return 0;
  }
  v829 = *(_QWORD *)(a1 + 1712);
  v830 = *(_QWORD *)(a2 + 1712);
  if (v829)
  {
    if (!v830 || !CMMsl::KappaSpinResult::operator==(v829, v830))
      return 0;
  }
  else if (v830)
  {
    return 0;
  }
  v831 = *(_QWORD *)(a1 + 1624);
  v832 = *(_QWORD *)(a2 + 1624);
  if (v831)
  {
    if (!v832 || !CMMsl::KappaPulseDeltaV::operator==(v831, v832))
      return 0;
  }
  else if (v832)
  {
    return 0;
  }
  v833 = *(_QWORD *)(a1 + 2776);
  v834 = *(_QWORD *)(a2 + 2776);
  if (v833)
  {
    if (!v834 || !CMMsl::RunningStrideLength::operator==(v833, v834))
      return 0;
  }
  else if (v834)
  {
    return 0;
  }
  v835 = *(_QWORD *)(a1 + 1448);
  v836 = *(_QWORD *)(a2 + 1448);
  if (v835)
  {
    if (!v836 || !CMMsl::ISPPacket::operator==(v835, v836))
      return 0;
  }
  else if (v836)
  {
    return 0;
  }
  v837 = *(_QWORD *)(a1 + 1576);
  v838 = *(_QWORD *)(a2 + 1576);
  if (v837)
  {
    if (!v838 || !CMMsl::KappaHighSpeedCrashResult::operator==(v837, v838))
      return 0;
  }
  else if (v838)
  {
    return 0;
  }
  v839 = *(_QWORD *)(a1 + 1640);
  v840 = *(_QWORD *)(a2 + 1640);
  if (v839)
  {
    if (!v840 || !CMMsl::KappaPulseInertialHgAccel::operator==(v839, v840))
      return 0;
  }
  else if (v840)
  {
    return 0;
  }
  v841 = *(_QWORD *)(a1 + 1280);
  v842 = *(_QWORD *)(a2 + 1280);
  if (v841)
  {
    if (!v842 || !CMMsl::HarmonicMetrics::operator==(v841, v842))
      return 0;
  }
  else if (v842)
  {
    return 0;
  }
  v843 = *(_QWORD *)(a1 + 592);
  v844 = *(_QWORD *)(a2 + 592);
  if (v843)
  {
    if (!v844 || !CMMsl::CalorieControllerMETsConsumed::operator==(v843, v844))
      return 0;
  }
  else if (v844)
  {
    return 0;
  }
  v845 = *(_QWORD *)(a1 + 2336);
  v846 = *(_QWORD *)(a2 + 2336);
  if (v845)
  {
    if (!v846 || !CMMsl::PedometerPathStraightness::operator==(v845, v846))
      return 0;
  }
  else if (v846)
  {
    return 0;
  }
  v847 = *(_QWORD *)(a1 + 688);
  v848 = *(_QWORD *)(a2 + 688);
  if (v847)
  {
    if (!v848 || !CMMsl::ComplexHandMotion::operator==(v847, v848))
      return 0;
  }
  else if (v848)
  {
    return 0;
  }
  v849 = *(_QWORD *)(a1 + 856);
  v850 = *(_QWORD *)(a2 + 856);
  if (v849)
  {
    if (!v850 || !CMMsl::ElevationGradeEstimator::operator==(v849, v850))
      return 0;
  }
  else if (v850)
  {
    return 0;
  }
  v851 = *(_QWORD *)(a1 + 3200);
  v852 = *(_QWORD *)(a2 + 3200);
  if (v851)
  {
    if (!v852 || !CMMsl::VO2MaxModelInput::operator==(v851, v852))
      return 0;
  }
  else if (v852)
  {
    return 0;
  }
  v853 = *(_QWORD *)(a1 + 2608);
  v854 = *(_QWORD *)(a2 + 2608);
  if (v853)
  {
    if (!v854 || !CMMsl::ProxCalibration::operator==(v853, v854))
      return 0;
  }
  else if (v854)
  {
    return 0;
  }
  v855 = *(_QWORD *)(a1 + 1728);
  v856 = *(_QWORD *)(a2 + 1728);
  if (v855)
  {
    if (!v856 || !CMMsl::KappaStepsResult::operator==(v855, v856))
      return 0;
  }
  else if (v856)
  {
    return 0;
  }
  v857 = *(_QWORD *)(a1 + 3344);
  v858 = *(_QWORD *)(a2 + 3344);
  if (v857)
  {
    if (!v858 || !CMMsl::WakeGestureSample::operator==(v857, v858))
      return 0;
  }
  else if (v858)
  {
    return 0;
  }
  v859 = *(_QWORD *)(a1 + 1568);
  v860 = *(_QWORD *)(a2 + 1568);
  if (v859)
  {
    if (!v860 || !CMMsl::KappaGravityAutocorrelationResult::operator==(v859, v860))
      return 0;
  }
  else if (v860)
  {
    return 0;
  }
  v861 = *(_QWORD *)(a1 + 2792);
  v862 = *(_QWORD *)(a2 + 2792);
  if (v861)
  {
    if (!v862 || !CMMsl::RunningVerticalOscillationGradientBoostedSignals::operator==(v861, v862))
      return 0;
  }
  else if (v862)
  {
    return 0;
  }
  v863 = *(_QWORD *)(a1 + 3096);
  v864 = *(_QWORD *)(a2 + 3096);
  if (v863)
  {
    if (!v864 || !CMMsl::SubStats::operator==(v863, v864))
      return 0;
  }
  else if (v864)
  {
    return 0;
  }
  v865 = *(_QWORD *)(a1 + 2312);
  v866 = *(_QWORD *)(a2 + 2312);
  if (v865)
  {
    if (!v866 || !CMMsl::PedOdomFusionExtendedModeSegment::operator==(v865, v866))
      return 0;
  }
  else if (v866)
  {
    return 0;
  }
  v867 = *(_QWORD *)(a1 + 1896);
  v868 = *(_QWORD *)(a2 + 1896);
  if (v867)
  {
    if (!v868 || !CMMsl::MagicMountState::operator==(v867, v868))
      return 0;
  }
  else if (v868)
  {
    return 0;
  }
  v869 = *(_QWORD *)(a1 + 2264);
  v870 = *(_QWORD *)(a2 + 2264);
  if (v869)
  {
    if (!v870 || !CMMsl::PDRPedestrianClassifierState::operator==(v869, v870))
      return 0;
  }
  else if (v870)
  {
    return 0;
  }
  v871 = *(_QWORD *)(a1 + 2272);
  v872 = *(_QWORD *)(a2 + 2272);
  if (v871)
  {
    if (!v872 || !CMMsl::PDRPlacementClassifierState::operator==(v871, v872))
      return 0;
  }
  else if (v872)
  {
    return 0;
  }
  v873 = *(_QWORD *)(a1 + 2280);
  v874 = *(_QWORD *)(a2 + 2280);
  if (v873)
  {
    if (!v874 || !CMMsl::PDRSpeedEstimatorState::operator==(v873, v874))
      return 0;
  }
  else if (v874)
  {
    return 0;
  }
  v875 = *(_QWORD *)(a1 + 2160);
  v876 = *(_QWORD *)(a2 + 2160);
  if (v875)
  {
    if (!v876 || !CMMsl::PDRDOTEstimatorState::operator==(v875, v876))
      return 0;
  }
  else if (v876)
  {
    return 0;
  }
  v877 = *(_QWORD *)(a1 + 2296);
  v878 = *(_QWORD *)(a2 + 2296);
  if (v877)
  {
    if (!v878 || !CMMsl::PDRVelocityEstimatorState::operator==(v877, v878))
      return 0;
  }
  else if (v878)
  {
    return 0;
  }
  v879 = *(_QWORD *)(a1 + 1816);
  v880 = *(_QWORD *)(a2 + 1816);
  if (v879)
  {
    if (!v880 || !CMMsl::KMVelocityEstimatorState::operator==(v879, v880))
      return 0;
  }
  else if (v880)
  {
    return 0;
  }
  v881 = *(_QWORD *)(a1 + 3208);
  v882 = *(_QWORD *)(a2 + 3208);
  if (v881)
  {
    if (!v882 || !CMMsl::VelocityEstimatorFusionState::operator==(v881, v882))
      return 0;
  }
  else if (v882)
  {
    return 0;
  }
  v883 = *(_QWORD *)(a1 + 2232);
  v884 = *(_QWORD *)(a2 + 2232);
  if (v883)
  {
    if (!v884 || !CMMsl::PDRFenceReference::operator==(v883, v884))
      return 0;
  }
  else if (v884)
  {
    return 0;
  }
  v885 = *(_QWORD *)(a1 + 2240);
  v886 = *(_QWORD *)(a2 + 2240);
  if (v885)
  {
    if (!v886 || !CMMsl::PDRFenceState::operator==(v885, v886))
      return 0;
  }
  else if (v886)
  {
    return 0;
  }
  v887 = *(_QWORD *)(a1 + 3192);
  v888 = *(_QWORD *)(a2 + 3192);
  if (v887)
  {
    if (!v888 || !CMMsl::UWBRange::operator==(v887, v888))
      return 0;
  }
  else if (v888)
  {
    return 0;
  }
  v889 = *(_QWORD *)(a1 + 3104);
  v890 = *(_QWORD *)(a2 + 3104);
  if (v889)
  {
    if (!v890 || !CMMsl::SwingDoTCandidate::operator==(v889, v890))
      return 0;
  }
  else if (v890)
  {
    return 0;
  }
  v891 = *(_QWORD *)(a1 + 824);
  v892 = *(_QWORD *)(a2 + 824);
  if (v891)
  {
    if (!v892 || !CMMsl::DoTEstimatorHandSwing::operator==(v891, v892))
      return 0;
  }
  else if (v892)
  {
    return 0;
  }
  v893 = *(_QWORD *)(a1 + 1744);
  v894 = *(_QWORD *)(a2 + 1744);
  if (v893)
  {
    if (!v894 || !CMMsl::KappaTriggerClustersResult::operator==(v893, v894))
      return 0;
  }
  else if (v894)
  {
    return 0;
  }
  v895 = *(_QWORD *)(a1 + 2856);
  v896 = *(_QWORD *)(a2 + 2856);
  if (v895)
  {
    if (!v896 || !CMMsl::SimActivityEvent::operator==(v895, v896))
      return 0;
  }
  else if (v896)
  {
    return 0;
  }
  v897 = *(_QWORD *)(a1 + 2224);
  v898 = *(_QWORD *)(a2 + 2224);
  if (v897)
  {
    if (!v898 || !CMMsl::PDRFeatures::operator==(v897, v898))
      return 0;
  }
  else if (v898)
  {
    return 0;
  }
  v899 = *(_QWORD *)(a1 + 2176);
  v900 = *(_QWORD *)(a2 + 2176);
  if (v899)
  {
    if (!v900 || !CMMsl::PDRDOTEstimatorStateBody::operator==(v899, v900))
      return 0;
  }
  else if (v900)
  {
    return 0;
  }
  v901 = *(_QWORD *)(a1 + 2168);
  v902 = *(_QWORD *)(a2 + 2168);
  if (v901)
  {
    if (!v902 || !CMMsl::PDRDOTEstimatorStateArmSwing::operator==(v901, v902))
      return 0;
  }
  else if (v902)
  {
    return 0;
  }
  v903 = *(_QWORD *)(a1 + 2200);
  v904 = *(_QWORD *)(a2 + 2200);
  if (v903)
  {
    if (!v904 || !CMMsl::PDRDOTEstimatorStateHeading::operator==(v903, v904))
      return 0;
  }
  else if (v904)
  {
    return 0;
  }
  v905 = *(_QWORD *)(a1 + 104);
  v906 = *(_QWORD *)(a2 + 104);
  if (v905)
  {
    if (!v906 || !CMMsl::AccessoryActivityAlseepConfidenceEpoch::operator==(v905, v906))
      return 0;
  }
  else if (v906)
  {
    return 0;
  }
  v907 = *(_QWORD *)(a1 + 2288);
  v908 = *(_QWORD *)(a2 + 2288);
  if (v907)
  {
    if (!v908 || !CMMsl::PDRSpeedEstimatorStateDebug::operator==(v907, v908))
      return 0;
  }
  else if (v908)
  {
    return 0;
  }
  v909 = *(_QWORD *)(a1 + 2472);
  v910 = *(_QWORD *)(a2 + 2472);
  if (v909)
  {
    if (!v910 || !CMMsl::PrecisionFindingDOTEstimate::operator==(v909, v910))
      return 0;
  }
  else if (v910)
  {
    return 0;
  }
  v911 = *(_QWORD *)(a1 + 2496);
  v912 = *(_QWORD *)(a2 + 2496);
  if (v911)
  {
    if (!v912 || !CMMsl::PrecisionFindingState::operator==(v911, v912))
      return 0;
  }
  else if (v912)
  {
    return 0;
  }
  v913 = *(_QWORD *)(a1 + 1688);
  v914 = *(_QWORD *)(a2 + 1688);
  if (v913)
  {
    if (!v914 || !CMMsl::KappaRoadsResult::operator==(v913, v914))
      return 0;
  }
  else if (v914)
  {
    return 0;
  }
  v915 = *(_QWORD *)(a1 + 2504);
  v916 = *(_QWORD *)(a2 + 2504);
  if (v915)
  {
    if (!v916 || !CMMsl::PrecisionFindingVelocityEstimate::operator==(v915, v916))
      return 0;
  }
  else if (v916)
  {
    return 0;
  }
  v917 = *(_QWORD *)(a1 + 2480);
  v918 = *(_QWORD *)(a2 + 2480);
  if (v917)
  {
    if (!v918 || !CMMsl::PrecisionFindingRangeFilter::operator==(v917, v918))
      return 0;
  }
  else if (v918)
  {
    return 0;
  }
  v919 = *(_QWORD *)(a1 + 2216);
  v920 = *(_QWORD *)(a2 + 2216);
  if (v919)
  {
    if (!v920 || !CMMsl::PDRDOTMeasurementSelectorState::operator==(v919, v920))
      return 0;
  }
  else if (v920)
  {
    return 0;
  }
  v921 = *(_QWORD *)(a1 + 576);
  v922 = *(_QWORD *)(a2 + 576);
  if (v921)
  {
    if (!v922 || !CMMsl::BumpToWakeState::operator==(v921, v922))
      return 0;
  }
  else if (v922)
  {
    return 0;
  }
  v923 = *(_QWORD *)(a1 + 2208);
  v924 = *(_QWORD *)(a2 + 2208);
  if (v923)
  {
    if (!v924 || !CMMsl::PDRDOTEstimatorUncertaintyModelOnBody::operator==(v923, v924))
      return 0;
  }
  else if (v924)
  {
    return 0;
  }
  v925 = *(_QWORD *)(a1 + 2344);
  v926 = *(_QWORD *)(a2 + 2344);
  if (v925)
  {
    if (!v926 || !CMMsl::PeerState::operator==(v925, v926))
      return 0;
  }
  else if (v926)
  {
    return 0;
  }
  v927 = *(_QWORD *)(a1 + 1928);
  v928 = *(_QWORD *)(a2 + 1928);
  if (v927)
  {
    if (!v928 || !CMMsl::MagnetometerCalibratorFilterParameters::operator==(v927, v928))
      return 0;
  }
  else if (v928)
  {
    return 0;
  }
  v929 = *(_QWORD *)(a1 + 1504);
  v930 = *(_QWORD *)(a2 + 1504);
  if (v929)
  {
    if (!v930 || !CMMsl::KappaActivityPhone::operator==(v929, v930))
      return 0;
  }
  else if (v930)
  {
    return 0;
  }
  v931 = *(_QWORD *)(a1 + 1512);
  v932 = *(_QWORD *)(a2 + 1512);
  if (v931)
  {
    if (!v932 || !CMMsl::KappaActivityWatch::operator==(v931, v932))
      return 0;
  }
  else if (v932)
  {
    return 0;
  }
  v933 = *(_QWORD *)(a1 + 2488);
  v934 = *(_QWORD *)(a2 + 2488);
  if (v933)
  {
    if (!v934 || !CMMsl::PrecisionFindingSessionStartStop::operator==(v933, v934))
      return 0;
  }
  else if (v934)
  {
    return 0;
  }
  v935 = *(_QWORD *)(a1 + 2192);
  v936 = *(_QWORD *)(a2 + 2192);
  if (v935)
  {
    if (!v936 || !CMMsl::PDRDOTEstimatorStateDebug::operator==(v935, v936))
      return 0;
  }
  else if (v936)
  {
    return 0;
  }
  v937 = *(_QWORD *)(a1 + 2184);
  v938 = *(_QWORD *)(a2 + 2184);
  if (v937)
  {
    if (!v938 || !CMMsl::PDRDOTEstimatorStateBodyDebug::operator==(v937, v938))
      return 0;
  }
  else if (v938)
  {
    return 0;
  }
  v939 = *(_QWORD *)(a1 + 1616);
  v940 = *(_QWORD *)(a2 + 1616);
  if (v939)
  {
    if (!v940 || !CMMsl::KappaPeakDetectorMapResult::operator==(v939, v940))
      return 0;
  }
  else if (v940)
  {
    return 0;
  }
  v941 = *(_QWORD *)(a1 + 1608);
  v942 = *(_QWORD *)(a2 + 1608);
  if (v941)
  {
    if (!v942 || !CMMsl::KappaPeakDetectorMapMagTimestamps::operator==(v941, v942))
      return 0;
  }
  else if (v942)
  {
    return 0;
  }
  v943 = *(_QWORD *)(a1 + 2512);
  v944 = *(_QWORD *)(a2 + 2512);
  if (v943)
  {
    if (!v944 || !CMMsl::PrecisionFindingVerticalState::operator==(v943, v944))
      return 0;
  }
  else if (v944)
  {
    return 0;
  }
  v945 = *(_QWORD *)(a1 + 312);
  v946 = *(_QWORD *)(a2 + 312);
  if (v945)
  {
    if (!v946 || !CMMsl::Altimeter::operator==(v945, v946))
      return 0;
  }
  else if (v946)
  {
    return 0;
  }
  v947 = *(_QWORD *)(a1 + 904);
  v948 = *(_QWORD *)(a2 + 904);
  if (v947)
  {
    if (!v948 || !CMMsl::FaceDownDetection::operator==(v947, v948))
      return 0;
  }
  else if (v948)
  {
    return 0;
  }
  v949 = *(_QWORD *)(a1 + 2360);
  v950 = *(_QWORD *)(a2 + 2360);
  if (v949)
  {
    if (!v950 || !CMMsl::PencilFusionDMYawAlignmentUpdate::operator==(v949, v950))
      return 0;
  }
  else if (v950)
  {
    return 0;
  }
  v951 = *(_QWORD *)(a1 + 2384);
  v952 = *(_QWORD *)(a2 + 2384);
  if (v951)
  {
    if (!v952 || !CMMsl::PencilFusionRingSensorTrustModelUpdate::operator==(v951, v952))
      return 0;
  }
  else if (v952)
  {
    return 0;
  }
  v953 = *(_QWORD *)(a1 + 256);
  v954 = *(_QWORD *)(a2 + 256);
  if (v953)
  {
    if (!v954 || !CMMsl::AccessorySleepStateUpdate::operator==(v953, v954))
      return 0;
  }
  else if (v954)
  {
    return 0;
  }
  v955 = *(_QWORD *)(a1 + 248);
  v956 = *(_QWORD *)(a2 + 248);
  if (v955)
  {
    if (!v956 || !CMMsl::AccessorySleepStateConfidenceEpoch::operator==(v955, v956))
      return 0;
  }
  else if (v956)
  {
    return 0;
  }
  v957 = *(_QWORD *)(a1 + 2816);
  v958 = *(_QWORD *)(a2 + 2816);
  if (v957)
  {
    if (!v958 || !CMMsl::SafetyHertzSample::operator==(v957, v958))
      return 0;
  }
  else if (v958)
  {
    return 0;
  }
  v959 = *(_QWORD *)(a1 + 2808);
  v960 = *(_QWORD *)(a2 + 2808);
  if (v959)
  {
    if (!v960 || !CMMsl::SafetyCompanionStatus::operator==(v959, v960))
      return 0;
  }
  else if (v960)
  {
    return 0;
  }
  v961 = *(_QWORD *)(a1 + 2624);
  v962 = *(_QWORD *)(a2 + 2624);
  if (v961)
  {
    if (!v962 || !CMMsl::PTSConsumedGNSS::operator==(v961, v962))
      return 0;
  }
  else if (v962)
  {
    return 0;
  }
  v963 = *(_QWORD *)(a1 + 2632);
  v964 = *(_QWORD *)(a2 + 2632);
  if (v963)
  {
    if (!v964 || !CMMsl::PTSForwardPropagation::operator==(v963, v964))
      return 0;
  }
  else if (v964)
  {
    return 0;
  }
  v965 = *(_QWORD *)(a1 + 2648);
  v966 = *(_QWORD *)(a2 + 2648);
  if (v965)
  {
    if (!v966)
      return 0;
    v967 = *(_QWORD *)(v965 + 8);
    v968 = *(_QWORD *)(v966 + 8);
    if (v967)
    {
      if (!v968 || !CMMsl::PTSForwardPropagation::operator==(v967, v968))
        return 0;
    }
    else if (v968)
    {
      return 0;
    }
  }
  else if (v966)
  {
    return 0;
  }
  v969 = *(_QWORD *)(a1 + 1288);
  v970 = *(_QWORD *)(a2 + 1288);
  if (v969)
  {
    if (!v970 || !CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::operator==(v969, v970))
      return 0;
  }
  else if (v970)
  {
    return 0;
  }
  v971 = *(_QWORD *)(a1 + 2640);
  v972 = *(_QWORD *)(a2 + 2640);
  if (v971)
  {
    if (!v972)
      return 0;
    v973 = *(_QWORD *)(v971 + 8);
    v974 = *(_QWORD *)(v972 + 8);
    if (v973)
    {
      if (!v974 || !CMMsl::PTSForwardPropagation::operator==(v973, v974))
        return 0;
    }
    else if (v974)
    {
      return 0;
    }
  }
  else if (v972)
  {
    return 0;
  }
  v975 = *(_QWORD *)(a1 + 336);
  v976 = *(_QWORD *)(a2 + 336);
  if (v975)
  {
    if (!v976 || !CMMsl::AnchorMotionCorrespondence::operator==(v975, v976))
      return 0;
  }
  else if (v976)
  {
    return 0;
  }
  v977 = *(_QWORD *)(a1 + 1480);
  v978 = *(_QWORD *)(a2 + 1480);
  if (v977)
  {
    if (!v978 || !CMMsl::KData1::operator==(v977, v978))
      return 0;
  }
  else if (v978)
  {
    return 0;
  }
  v979 = *(_QWORD *)(a1 + 1488);
  v980 = *(_QWORD *)(a2 + 1488);
  if (v979)
  {
    if (!v980 || !CMMsl::KData2::operator==(v979, v980))
      return 0;
  }
  else if (v980)
  {
    return 0;
  }
  v981 = *(_QWORD *)(a1 + 1496);
  v982 = *(_QWORD *)(a2 + 1496);
  if (v981)
  {
    if (!v982 || !CMMsl::KData3::operator==(v981, v982))
      return 0;
  }
  else if (v982)
  {
    return 0;
  }
  v983 = *(_QWORD *)(a1 + 2824);
  v984 = *(_QWORD *)(a2 + 2824);
  if (v983)
  {
    if (!v984 || !CMMsl::SafetyRemoteSample::operator==(v983, v984))
      return 0;
  }
  else if (v984)
  {
    return 0;
  }
  v985 = *(_QWORD *)(a1 + 2832);
  v986 = *(_QWORD *)(a2 + 2832);
  if (v985)
  {
    if (!v986 || !CMMsl::SafetyTrustedAudioResult::operator==(v985, v986))
      return 0;
  }
  else if (v986)
  {
    return 0;
  }
  v987 = *(_QWORD *)(a1 + 2944);
  v988 = *(_QWORD *)(a2 + 2944);
  if (v987)
  {
    if (!v988)
      return 0;
    v989 = *(_QWORD *)(v987 + 8);
    v990 = *(_QWORD *)(v988 + 8);
    if (v989)
    {
      if (!v990 || !CMMsl::DeviceMotion::operator==(v989, v990))
        return 0;
    }
    else if (v990)
    {
      return 0;
    }
  }
  else if (v988)
  {
    return 0;
  }
  v991 = *(_QWORD *)(a1 + 2952);
  v992 = *(_QWORD *)(a2 + 2952);
  if (v991)
  {
    if (!v992)
      return 0;
    v993 = *(_QWORD *)(v991 + 8);
    v994 = *(_QWORD *)(v992 + 8);
    if (v993)
    {
      if (!v994 || !CMMsl::MotionStateUpdate::operator==(v993, v994))
        return 0;
    }
    else if (v994)
    {
      return 0;
    }
  }
  else if (v992)
  {
    return 0;
  }
  v995 = *(_QWORD *)(a1 + 1432);
  v996 = *(_QWORD *)(a2 + 1432);
  result = v996 == 0;
  if (!v995)
    return result;
  if (v996)
  {
    v998 = *(_QWORD *)(v995 + 8);
    v999 = *(_QWORD *)(v996 + 8);
    if (v998)
      return v999 && CMMsl::AccessoryAccel::operator==(v998, v999);
    if (!v999)
      return 1;
  }
  return 0;
}

BOOL CMMsl::WorkoutRecorderAccel::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::Accel::operator==(v2, v3);
  return result;
}

BOOL CMMsl::WorkoutRecorderBodyMetrics::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::BodyMetrics::operator==(v2, v3);
  return result;
}

BOOL CMMsl::WorkoutRecorderElevation::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::ElevationChange::operator==(v2, v3);
  return result;
}

BOOL CMMsl::WorkoutRecorderHeartRate::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::OnsetHeartRateData::operator==(v2, v3);
  return result;
}

BOOL CMMsl::WorkoutRecorderRotationRate::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::RotationRate::operator==(v2, v3);
  return result;
}

BOOL CMMsl::WorkoutRecorderOdometer::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::OdometerWithAltitude::operator==(v2, v3);
  return result;
}

BOOL CMMsl::WorkoutRecorderWorkoutEvent::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::WorkoutEvent::operator==(v2, v3);
  return result;
}

BOOL CMMsl::VO2MaxInput::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 88);
  v3 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 88) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x200) == 0 || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 88) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 88) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x100) == 0 || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 72))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 88) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 88) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x800) == 0 || *(unsigned __int8 *)(a1 + 84) != *(unsigned __int8 *)(a2 + 84))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 88) & 0x800) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 88) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x1000) == 0 || *(unsigned __int8 *)(a1 + 85) != *(unsigned __int8 *)(a2 + 85))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 88) & 0x1000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 88) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x400) == 0 || *(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 88) & 0x400) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 88) & 0x2000) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x2000) == 0 || *(unsigned __int8 *)(a1 + 86) != *(unsigned __int8 *)(a2 + 86))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 88) & 0x2000) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x10) == 0;
  if ((v2 & 0x10) != 0)
    return (v3 & 0x10) != 0 && *(double *)(a1 + 40) == *(double *)(a2 + 40);
  return v4;
}

BOOL CMMsl::WorkoutRecorderHealthKitInfo::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 28) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 4) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 28) & 2) == 0;
  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
    return (*(_BYTE *)(a2 + 28) & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  return v2;
}

BOOL CMMsl::PearlAttitude::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  uint64_t v13;
  float v14;
  _BOOL8 result;
  BOOL v16;

  v2 = *(_WORD *)(a1 + 124);
  v3 = *(_WORD *)(a2 + 124);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 124) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 124) & 0x200) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 124) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 112) != *(_DWORD *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 100) != *(_DWORD *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  v5 = *(float **)(a1 + 8);
  v4 = *(float **)(a1 + 16);
  v6 = *(float **)(a2 + 8);
  if ((char *)v4 - (char *)v5 != *(_QWORD *)(a2 + 16) - (_QWORD)v6)
    return 0;
  while (v5 != v4)
  {
    if (*v5 != *v6)
      return 0;
    ++v5;
    ++v6;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 124) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 124) & 0x100) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 124) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  v8 = *(float **)(a1 + 32);
  v7 = *(float **)(a1 + 40);
  v9 = *(float **)(a2 + 32);
  if ((char *)v7 - (char *)v8 != *(_QWORD *)(a2 + 40) - (_QWORD)v9)
    return 0;
  while (v8 != v7)
  {
    if (*v8 != *v9)
      return 0;
    ++v8;
    ++v9;
  }
  v11 = *(_QWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 64);
  v12 = *(float **)(a2 + 56);
  if (v10 - v11 != *(_QWORD *)(a2 + 64) - (_QWORD)v12)
    return 0;
  if (v11 == v10)
    return 1;
  v13 = v11 + 4;
  do
  {
    v14 = *v12++;
    result = *(float *)(v13 - 4) == v14;
    v16 = *(float *)(v13 - 4) != v14 || v13 == v10;
    v13 += 4;
  }
  while (!v16);
  return result;
}

BOOL CMMsl::RotationRate::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 28) & 8) == 0;
  if ((*(_BYTE *)(a1 + 28) & 8) != 0)
    return (*(_BYTE *)(a2 + 28) & 8) != 0 && *(float *)(a1 + 24) == *(float *)(a2 + 24);
  return v2;
}

BOOL CMMsl::WorkoutRecorderWatchOrientationSettings::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::WatchOrientationSettings::operator==(v2, v3);
  return result;
}

BOOL CMMsl::WifiScanResults::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;
  BOOL v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(uint64_t **)(a2 + 8);
  if (v3 - v2 != *(_QWORD *)(a2 + 16) - (_QWORD)v4)
    return 0;
  if (v2 == v3)
    return 1;
  v5 = v2 + 8;
  do
  {
    v6 = *v4++;
    result = CMMsl::WifiScanEntry::operator==(*(_QWORD *)(v5 - 8), v6);
    v8 = !result || v5 == v3;
    v5 += 8;
  }
  while (!v8);
  return result;
}

BOOL CMMsl::WorkoutRecorderWifiScanResults::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = (v2 | v3) == 0;
  if (v2)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v6 = *(_QWORD *)(v2 + 8);
    v7 = *(_QWORD *)(v2 + 16);
    v8 = *(uint64_t **)(v3 + 8);
    if (v7 - v6 == *(_QWORD *)(v3 + 16) - (_QWORD)v8)
    {
      if (v6 == v7)
      {
        return 1;
      }
      else
      {
        v9 = v6 + 8;
        do
        {
          v10 = *v8++;
          result = CMMsl::WifiScanEntry::operator==(*(_QWORD *)(v9 - 8), v10);
          v11 = !result || v9 == v7;
          v9 += 8;
        }
        while (!v11);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL CMMsl::WorkoutRecorderPressure::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::Pressure::operator==(v2, v3);
  return result;
}

BOOL CMMsl::VisionCompassBias::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  float *v4;
  float *v5;
  float *v6;
  _BOOL8 v7;

  v2 = *(_WORD *)(a1 + 76);
  v3 = *(_WORD *)(a2 + 76);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  v5 = *(float **)(a1 + 8);
  v4 = *(float **)(a1 + 16);
  v6 = *(float **)(a2 + 8);
  if ((char *)v4 - (char *)v5 != *(_QWORD *)(a2 + 16) - (_QWORD)v6)
    return 0;
  while (v5 != v4)
  {
    if (*v5 != *v6)
      return 0;
    ++v5;
    ++v6;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 76) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 76) & 0x100) == 0 || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 72))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 76) & 0x100) != 0)
  {
    return 0;
  }
  v7 = (v3 & 0x20) == 0;
  if ((v2 & 0x20) != 0)
    return (v3 & 0x20) != 0 && *(_DWORD *)(a1 + 60) == *(_DWORD *)(a2 + 60);
  return v7;
}

BOOL CMMsl::VIOEstimation::operator==(uint64_t a1, uint64_t a2)
{
  double *v2;
  double *v3;
  double *v4;
  double *v5;
  double *v6;
  double *v7;
  double *v8;
  double *v9;
  double *v10;
  double *v11;
  double *v12;
  double *v13;
  double *v14;
  double *v15;
  double *v16;
  double *v17;
  double *v18;
  double *v19;
  double *v20;
  double *v21;
  double *v22;
  double *v23;
  double *v24;
  double *v25;
  double *v26;
  double *v27;
  double *v28;
  double *v29;
  double *v30;
  double *v31;
  double *v32;
  double *v33;
  double *v34;
  double *v35;
  double *v36;
  double *v37;
  _BOOL8 v38;

  if ((*(_BYTE *)(a1 + 340) & 0x40) != 0)
  {
    if ((*(_BYTE *)(a2 + 340) & 0x40) == 0 || *(_DWORD *)(a1 + 336) != *(_DWORD *)(a2 + 336))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 340) & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 340) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 340) & 4) == 0 || *(double *)(a1 + 312) != *(double *)(a2 + 312))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 340) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 340) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 340) & 1) == 0 || *(double *)(a1 + 296) != *(double *)(a2 + 296))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 340) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 340) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 340) & 8) == 0 || *(double *)(a1 + 320) != *(double *)(a2 + 320))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 340) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 340) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 340) & 2) == 0 || *(double *)(a1 + 304) != *(double *)(a2 + 304))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 340) & 2) != 0)
  {
    return 0;
  }
  v3 = *(double **)(a1 + 176);
  v2 = *(double **)(a1 + 184);
  v4 = *(double **)(a2 + 176);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 184) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v6 = *(double **)(a1 + 104);
  v5 = *(double **)(a1 + 112);
  v7 = *(double **)(a2 + 104);
  if ((char *)v5 - (char *)v6 != *(_QWORD *)(a2 + 112) - (_QWORD)v7)
    return 0;
  while (v6 != v5)
  {
    if (*v6 != *v7)
      return 0;
    ++v6;
    ++v7;
  }
  v9 = *(double **)(a1 + 272);
  v8 = *(double **)(a1 + 280);
  v10 = *(double **)(a2 + 272);
  if ((char *)v8 - (char *)v9 != *(_QWORD *)(a2 + 280) - (_QWORD)v10)
    return 0;
  while (v9 != v8)
  {
    if (*v9 != *v10)
      return 0;
    ++v9;
    ++v10;
  }
  v12 = *(double **)(a1 + 8);
  v11 = *(double **)(a1 + 16);
  v13 = *(double **)(a2 + 8);
  if ((char *)v11 - (char *)v12 != *(_QWORD *)(a2 + 16) - (_QWORD)v13)
    return 0;
  while (v12 != v11)
  {
    if (*v12 != *v13)
      return 0;
    ++v12;
    ++v13;
  }
  v15 = *(double **)(a1 + 224);
  v14 = *(double **)(a1 + 232);
  v16 = *(double **)(a2 + 224);
  if ((char *)v14 - (char *)v15 != *(_QWORD *)(a2 + 232) - (_QWORD)v16)
    return 0;
  while (v15 != v14)
  {
    if (*v15 != *v16)
      return 0;
    ++v15;
    ++v16;
  }
  v18 = *(double **)(a1 + 152);
  v17 = *(double **)(a1 + 160);
  v19 = *(double **)(a2 + 152);
  if ((char *)v17 - (char *)v18 != *(_QWORD *)(a2 + 160) - (_QWORD)v19)
    return 0;
  while (v18 != v17)
  {
    if (*v18 != *v19)
      return 0;
    ++v18;
    ++v19;
  }
  v21 = *(double **)(a1 + 128);
  v20 = *(double **)(a1 + 136);
  v22 = *(double **)(a2 + 128);
  if ((char *)v20 - (char *)v21 != *(_QWORD *)(a2 + 136) - (_QWORD)v22)
    return 0;
  while (v21 != v20)
  {
    if (*v21 != *v22)
      return 0;
    ++v21;
    ++v22;
  }
  v24 = *(double **)(a1 + 248);
  v23 = *(double **)(a1 + 256);
  v25 = *(double **)(a2 + 248);
  if ((char *)v23 - (char *)v24 != *(_QWORD *)(a2 + 256) - (_QWORD)v25)
    return 0;
  while (v24 != v23)
  {
    if (*v24 != *v25)
      return 0;
    ++v24;
    ++v25;
  }
  v27 = *(double **)(a1 + 32);
  v26 = *(double **)(a1 + 40);
  v28 = *(double **)(a2 + 32);
  if ((char *)v26 - (char *)v27 != *(_QWORD *)(a2 + 40) - (_QWORD)v28)
    return 0;
  while (v27 != v26)
  {
    if (*v27 != *v28)
      return 0;
    ++v27;
    ++v28;
  }
  v30 = *(double **)(a1 + 200);
  v29 = *(double **)(a1 + 208);
  v31 = *(double **)(a2 + 200);
  if ((char *)v29 - (char *)v30 != *(_QWORD *)(a2 + 208) - (_QWORD)v31)
    return 0;
  while (v30 != v29)
  {
    if (*v30 != *v31)
      return 0;
    ++v30;
    ++v31;
  }
  v33 = *(double **)(a1 + 80);
  v32 = *(double **)(a1 + 88);
  v34 = *(double **)(a2 + 80);
  if ((char *)v32 - (char *)v33 != *(_QWORD *)(a2 + 88) - (_QWORD)v34)
    return 0;
  while (v33 != v32)
  {
    if (*v33 != *v34)
      return 0;
    ++v33;
    ++v34;
  }
  v36 = *(double **)(a1 + 56);
  v35 = *(double **)(a1 + 64);
  v37 = *(double **)(a2 + 56);
  if ((char *)v35 - (char *)v36 != *(_QWORD *)(a2 + 64) - (_QWORD)v37)
    return 0;
  while (v36 != v35)
  {
    if (*v36 != *v37)
      return 0;
    ++v36;
    ++v37;
  }
  if ((*(_BYTE *)(a1 + 340) & 0x20) != 0)
  {
    if ((*(_BYTE *)(a2 + 340) & 0x20) == 0 || *(float *)(a1 + 332) != *(float *)(a2 + 332))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 340) & 0x20) != 0)
  {
    return 0;
  }
  v38 = (*(_BYTE *)(a2 + 340) & 0x10) == 0;
  if ((*(_BYTE *)(a1 + 340) & 0x10) != 0)
    return (*(_BYTE *)(a2 + 340) & 0x10) != 0 && *(float *)(a1 + 328) == *(float *)(a2 + 328);
  return v38;
}

BOOL CMMsl::LSLHeadingEstimation::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  double *v4;
  double *v5;
  double *v6;
  double *v7;
  double *v8;
  double *v9;
  double *v10;
  double *v11;
  double *v12;
  _BOOL8 v13;

  v2 = *(_WORD *)(a1 + 192);
  v3 = *(_WORD *)(a2 + 192);
  if ((v2 & 0x4000) != 0)
  {
    if ((*(_WORD *)(a2 + 192) & 0x4000) == 0 || *(_DWORD *)(a1 + 188) != *(_DWORD *)(a2 + 188))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 192) & 0x4000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 192) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 192) & 0x1000) == 0 || *(double *)(a1 + 176) != *(double *)(a2 + 176))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 192) & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 128) != *(double *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  v5 = *(double **)(a1 + 32);
  v4 = *(double **)(a1 + 40);
  v6 = *(double **)(a2 + 32);
  if ((char *)v4 - (char *)v5 != *(_QWORD *)(a2 + 40) - (_QWORD)v6)
    return 0;
  while (v5 != v4)
  {
    if (*v5 != *v6)
      return 0;
    ++v5;
    ++v6;
  }
  v8 = *(double **)(a1 + 8);
  v7 = *(double **)(a1 + 16);
  v9 = *(double **)(a2 + 8);
  if ((char *)v7 - (char *)v8 != *(_QWORD *)(a2 + 16) - (_QWORD)v9)
    return 0;
  while (v8 != v7)
  {
    if (*v8 != *v9)
      return 0;
    ++v8;
    ++v9;
  }
  v11 = *(double **)(a1 + 56);
  v10 = *(double **)(a1 + 64);
  v12 = *(double **)(a2 + 56);
  if ((char *)v10 - (char *)v11 != *(_QWORD *)(a2 + 64) - (_QWORD)v12)
    return 0;
  while (v11 != v10)
  {
    if (*v11 != *v12)
      return 0;
    ++v11;
    ++v12;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 192) & 0x2000) != 0)
  {
    if ((*(_WORD *)(a2 + 192) & 0x2000) == 0 || *(_DWORD *)(a1 + 184) != *(_DWORD *)(a2 + 184))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 192) & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 96) != *(double *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 112) != *(double *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 120) != *(double *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 192) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 192) & 0x800) == 0 || *(_QWORD *)(a1 + 168) != *(_QWORD *)(a2 + 168))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 192) & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 136) != *(double *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 192) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 192) & 0x100) == 0 || *(double *)(a1 + 144) != *(double *)(a2 + 144))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 192) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 192) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 192) & 0x200) == 0 || *(double *)(a1 + 152) != *(double *)(a2 + 152))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 192) & 0x200) != 0)
  {
    return 0;
  }
  v13 = (v3 & 0x400) == 0;
  if ((*(_WORD *)(a1 + 192) & 0x400) != 0)
    return (*(_WORD *)(a2 + 192) & 0x400) != 0 && *(double *)(a1 + 160) == *(double *)(a2 + 160);
  return v13;
}

BOOL CMMsl::MovementStats::operator==(uint64_t a1, uint64_t a2)
{
  char v3;
  _BOOL8 result;

  v3 = *(_BYTE *)(a1 + 12);
  result = (*(_BYTE *)(a2 + 12) & 1) == 0;
  if ((v3 & 1) != 0)
    return (*(_BYTE *)(a2 + 12) & 1) != 0 && *(float *)(a1 + 8) == *(float *)(a2 + 8);
  return result;
}

BOOL CMMsl::StepCountEntry::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 result;
  int v11;

  v2 = *(_DWORD *)(a1 + 152);
  v3 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(_DWORD *)(a1 + 96) != *(_DWORD *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(_DWORD *)(a1 + 120) != *(_DWORD *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(_DWORD *)(a1 + 124) != *(_DWORD *)(a2 + 124))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  v11 = *(_DWORD *)(a1 + 152);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v11 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(_DWORD *)(a1 + 140) != *(_DWORD *)(a2 + 140))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  v4 = *(unsigned __int8 **)(a1 + 72);
  v5 = *(unsigned __int8 **)(a2 + 72);
  if (v4)
  {
    if (!v5 || !sub_24272D8FC(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  if ((v11 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(unsigned __int8 *)(a1 + 148) != *(unsigned __int8 *)(a2 + 148))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v11 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(unsigned __int8 *)(a1 + 149) != *(unsigned __int8 *)(a2 + 149))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    if (!v7 || !CMMsl::AccelerometerPace::operator==(v6, v7))
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  if ((v11 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(_DWORD *)(a1 + 136) != *(_DWORD *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v11 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(_DWORD *)(a1 + 144) != *(_DWORD *)(a2 + 144))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v11 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(_DWORD *)(a1 + 132) != *(_DWORD *)(a2 + 132))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v11 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(_DWORD *)(a1 + 104) != *(_DWORD *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v11 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(_DWORD *)(a1 + 108) != *(_DWORD *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v11 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(_DWORD *)(a1 + 116) != *(_DWORD *)(a2 + 116))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v11 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(_DWORD *)(a1 + 100) != *(_DWORD *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v11 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 112) != *(_DWORD *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  v8 = *(_QWORD *)(a1 + 56);
  v9 = *(_QWORD *)(a2 + 56);
  if (v8)
  {
    if (!v9)
      return 0;
    if ((*(_BYTE *)(v8 + 12) & 1) != 0)
    {
      if ((*(_BYTE *)(v9 + 12) & 1) == 0 || *(float *)(v8 + 8) != *(float *)(v9 + 8))
        return 0;
    }
    else if ((*(_BYTE *)(v9 + 12) & 1) != 0)
    {
      return 0;
    }
  }
  else if (v9)
  {
    return 0;
  }
  result = (v3 & 0x10000) == 0;
  if ((v11 & 0x10000) == 0)
    return result;
  return (v3 & 0x10000) != 0 && *(_DWORD *)(a1 + 128) == *(_DWORD *)(a2 + 128);
}

BOOL CMMsl::MobilityBoutMetrics::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 v4;

  v2 = *(_QWORD *)(a1 + 184);
  v3 = *(_QWORD *)(a2 + 184);
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(_DWORD *)(a1 + 104) != *(_DWORD *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000) != 0)
  {
    if ((v3 & 0x1000000000) == 0 || *(float *)(a1 + 164) != *(float *)(a2 + 164))
      return 0;
  }
  else if ((v3 & 0x1000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000000) != 0)
  {
    if ((v3 & 0x100000000000) == 0 || *(unsigned __int8 *)(a1 + 181) != *(unsigned __int8 *)(a2 + 181))
      return 0;
  }
  else if ((v3 & 0x100000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000000) != 0)
  {
    if ((v3 & 0x10000000000) == 0 || *(unsigned __int8 *)(a1 + 177) != *(unsigned __int8 *)(a2 + 177))
      return 0;
  }
  else if ((v3 & 0x10000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000000) != 0)
  {
    if ((v3 & 0x80000000000) == 0 || *(unsigned __int8 *)(a1 + 180) != *(unsigned __int8 *)(a2 + 180))
      return 0;
  }
  else if ((v3 & 0x80000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000000) != 0)
  {
    if ((v3 & 0x8000000000) == 0 || *(unsigned __int8 *)(a1 + 176) != *(unsigned __int8 *)(a2 + 176))
      return 0;
  }
  else if ((v3 & 0x8000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000) != 0)
  {
    if ((v3 & 0x200000000) == 0 || *(_DWORD *)(a1 + 152) != *(_DWORD *)(a2 + 152))
      return 0;
  }
  else if ((v3 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000000) != 0)
  {
    if ((v3 & 0x4000000000) == 0 || *(_DWORD *)(a1 + 172) != *(_DWORD *)(a2 + 172))
      return 0;
  }
  else if ((v3 & 0x4000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(_DWORD *)(a1 + 100) != *(_DWORD *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(_DWORD *)(a1 + 84) != *(_DWORD *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(_DWORD *)(a1 + 92) != *(_DWORD *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(_DWORD *)(a1 + 96) != *(_DWORD *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000000) != 0)
  {
    if ((v3 & 0x2000000000) == 0 || *(_DWORD *)(a1 + 168) != *(_DWORD *)(a2 + 168))
      return 0;
  }
  else if ((v3 & 0x2000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(_DWORD *)(a1 + 136) != *(_DWORD *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000) != 0)
  {
    if ((v3 & 0x400000000) == 0 || *(float *)(a1 + 156) != *(float *)(a2 + 156))
      return 0;
  }
  else if ((v3 & 0x400000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000000) != 0)
  {
    if ((v3 & 0x20000000000) == 0 || *(unsigned __int8 *)(a1 + 178) != *(unsigned __int8 *)(a2 + 178))
      return 0;
  }
  else if ((v3 & 0x20000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000) != 0)
  {
    if ((v3 & 0x800000000) == 0 || *(float *)(a1 + 160) != *(float *)(a2 + 160))
      return 0;
  }
  else if ((v3 & 0x800000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000000) != 0)
  {
    if ((v3 & 0x40000000000) == 0 || *(unsigned __int8 *)(a1 + 179) != *(unsigned __int8 *)(a2 + 179))
      return 0;
  }
  else if ((v3 & 0x40000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124))
      return 0;
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132))
      return 0;
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140))
      return 0;
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000) != 0)
  {
    if ((v3 & 0x80000000) == 0 || *(float *)(a1 + 144) != *(float *)(a2 + 144))
      return 0;
  }
  else if ((v3 & 0x80000000) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x100000000) == 0;
  if ((v2 & 0x100000000) != 0)
    return (v3 & 0x100000000) != 0 && *(float *)(a1 + 148) == *(float *)(a2 + 148);
  return v4;
}

BOOL CMMsl::VIOPose::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  double *v4;
  double *v5;
  double *v6;
  _BOOL8 v7;

  v2 = *(_WORD *)(a1 + 112);
  v3 = *(_WORD *)(a2 + 112);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 112) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 112) & 0x200) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 112) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  v5 = *(double **)(a1 + 8);
  v4 = *(double **)(a1 + 16);
  v6 = *(double **)(a2 + 8);
  if ((char *)v4 - (char *)v5 != *(_QWORD *)(a2 + 16) - (_QWORD)v6)
    return 0;
  while (v5 != v4)
  {
    if (*v5 != *v6)
      return 0;
    ++v5;
    ++v6;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 112) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 112) & 0x100) == 0 || *(double *)(a1 + 96) != *(double *)(a2 + 96))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 112) & 0x100) != 0)
  {
    return 0;
  }
  v7 = (v3 & 0x40) == 0;
  if ((v2 & 0x40) != 0)
    return (v3 & 0x40) != 0 && *(double *)(a1 + 80) == *(double *)(a2 + 80);
  return v7;
}

BOOL CMMsl::SignalEnvironment::operator==(uint64_t a1, uint64_t a2)
{
  char v3;
  _BOOL8 result;

  v3 = *(_BYTE *)(a1 + 12);
  result = (*(_BYTE *)(a2 + 12) & 1) == 0;
  if ((v3 & 1) != 0)
    return (*(_BYTE *)(a2 + 12) & 1) != 0 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
  return result;
}

BOOL CMMsl::VIOReplayPose::operator==(uint64_t a1, uint64_t a2)
{
  double *v2;
  double *v3;
  double *v4;
  uint64_t v5;
  uint64_t v6;
  double *v7;
  uint64_t v8;
  double v9;
  _BOOL8 result;
  BOOL v11;

  if ((*(_BYTE *)(a1 + 64) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 64) & 1) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 64) & 1) != 0)
  {
    return 0;
  }
  v3 = *(double **)(a1 + 8);
  v2 = *(double **)(a1 + 16);
  v4 = *(double **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 16) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v6 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v7 = *(double **)(a2 + 32);
  if (v5 - v6 != *(_QWORD *)(a2 + 40) - (_QWORD)v7)
    return 0;
  if (v6 == v5)
    return 1;
  v8 = v6 + 8;
  do
  {
    v9 = *v7++;
    result = *(double *)(v8 - 8) == v9;
    v11 = *(double *)(v8 - 8) != v9 || v8 == v5;
    v8 += 8;
  }
  while (!v11);
  return result;
}

BOOL CMMsl::VisualStateMeasurement::operator==(uint64_t a1, uint64_t a2)
{
  double *v2;
  double *v3;
  double *v4;
  double *v5;
  double *v6;
  double *v7;
  double *v8;
  double *v9;
  double *v10;
  _BOOL8 v11;

  if ((*(_BYTE *)(a1 + 96) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 96) & 1) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 96) & 1) != 0)
  {
    return 0;
  }
  v3 = *(double **)(a1 + 8);
  v2 = *(double **)(a1 + 16);
  v4 = *(double **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 16) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v6 = *(double **)(a1 + 32);
  v5 = *(double **)(a1 + 40);
  v7 = *(double **)(a2 + 32);
  if ((char *)v5 - (char *)v6 != *(_QWORD *)(a2 + 40) - (_QWORD)v7)
    return 0;
  while (v6 != v5)
  {
    if (*v6 != *v7)
      return 0;
    ++v6;
    ++v7;
  }
  v9 = *(double **)(a1 + 56);
  v8 = *(double **)(a1 + 64);
  v10 = *(double **)(a2 + 56);
  if ((char *)v8 - (char *)v9 != *(_QWORD *)(a2 + 64) - (_QWORD)v10)
    return 0;
  while (v9 != v8)
  {
    if (*v9 != *v10)
      return 0;
    ++v9;
    ++v10;
  }
  if ((*(_BYTE *)(a1 + 96) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 96) & 4) == 0 || *(unsigned __int8 *)(a1 + 92) != *(unsigned __int8 *)(a2 + 92))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 96) & 4) != 0)
  {
    return 0;
  }
  v11 = (*(_BYTE *)(a2 + 96) & 2) == 0;
  if ((*(_BYTE *)(a1 + 96) & 2) != 0)
    return (*(_BYTE *)(a2 + 96) & 2) != 0 && *(_DWORD *)(a1 + 88) == *(_DWORD *)(a2 + 88);
  return v11;
}

BOOL CMMsl::KappaTriggerDebug::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  double *v4;
  double *v5;
  double *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  _BOOL8 v13;

  v2 = *(_WORD *)(a1 + 120);
  v3 = *(_WORD *)(a2 + 120);
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 88) != *(_QWORD *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 120) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 120) & 0x200) == 0 || *(unsigned __int8 *)(a1 + 118) != *(unsigned __int8 *)(a2 + 118))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 120) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  v5 = *(double **)(a1 + 8);
  v4 = *(double **)(a1 + 16);
  v6 = *(double **)(a2 + 8);
  if ((char *)v4 - (char *)v5 != *(_QWORD *)(a2 + 16) - (_QWORD)v6)
    return 0;
  while (v5 != v4)
  {
    if (*v5 != *v6)
      return 0;
    ++v5;
    ++v6;
  }
  v8 = *(float **)(a1 + 56);
  v7 = *(float **)(a1 + 64);
  v9 = *(float **)(a2 + 56);
  if ((char *)v7 - (char *)v8 != *(_QWORD *)(a2 + 64) - (_QWORD)v9)
    return 0;
  while (v8 != v7)
  {
    if (*v8 != *v9)
      return 0;
    ++v8;
    ++v9;
  }
  v11 = *(float **)(a1 + 32);
  v10 = *(float **)(a1 + 40);
  v12 = *(float **)(a2 + 32);
  if ((char *)v10 - (char *)v11 != *(_QWORD *)(a2 + 40) - (_QWORD)v12)
    return 0;
  while (v11 != v10)
  {
    if (*v11 != *v12)
      return 0;
    ++v11;
    ++v12;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(unsigned __int8 *)(a1 + 116) != *(unsigned __int8 *)(a2 + 116))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 120) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 120) & 0x100) == 0 || *(unsigned __int8 *)(a1 + 117) != *(unsigned __int8 *)(a2 + 117))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 120) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 112) != *(_DWORD *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 108) != *(_DWORD *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  v13 = (v3 & 0x10) == 0;
  if ((v2 & 0x10) != 0)
    return (v3 & 0x10) != 0 && *(_DWORD *)(a1 + 104) == *(_DWORD *)(a2 + 104);
  return v13;
}

BOOL CMMsl::KappaDirectionOfTravel::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  float *v4;
  float *v5;
  float *v6;
  uint64_t v7;
  uint64_t v8;
  float *v9;
  uint64_t v10;
  float v11;
  _BOOL8 result;
  BOOL v13;

  v2 = *(_DWORD *)(a1 + 144);
  v3 = *(_DWORD *)(a2 + 144);
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_QWORD *)(a1 + 80) != *(_QWORD *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(_DWORD *)(a1 + 104) != *(_DWORD *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 136) != *(float *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(_DWORD *)(a1 + 140) != *(_DWORD *)(a2 + 140))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_QWORD *)(a1 + 72) != *(_QWORD *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 56) != *(_QWORD *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 64) != *(_QWORD *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  v5 = *(float **)(a1 + 32);
  v4 = *(float **)(a1 + 40);
  v6 = *(float **)(a2 + 32);
  if ((char *)v4 - (char *)v5 != *(_QWORD *)(a2 + 40) - (_QWORD)v6)
    return 0;
  while (v5 != v4)
  {
    if (*v5 != *v6)
      return 0;
    ++v5;
    ++v6;
  }
  v8 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v9 = *(float **)(a2 + 8);
  if (v7 - v8 != *(_QWORD *)(a2 + 16) - (_QWORD)v9)
    return 0;
  if (v8 == v7)
    return 1;
  v10 = v8 + 4;
  do
  {
    v11 = *v9++;
    result = *(float *)(v10 - 4) == v11;
    v13 = *(float *)(v10 - 4) != v11 || v10 == v7;
    v10 += 4;
  }
  while (!v13);
  return result;
}

BOOL CMMsl::KappaSteps::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 0x10) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 32) & 8) == 0;
  if ((*(_BYTE *)(a1 + 32) & 8) != 0)
    return (*(_BYTE *)(a2 + 32) & 8) != 0 && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24);
  return v2;
}

BOOL CMMsl::SignificantUserInteraction::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v2;
}

BOOL CMMsl::KappaRoads::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 32) & 8) == 0;
  if ((*(_BYTE *)(a1 + 32) & 8) != 0)
    return (*(_BYTE *)(a2 + 32) & 8) != 0 && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28);
  return v2;
}

uint64_t CMMsl::UserStudyEvent::operator==(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 **v3;
  uint64_t result;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v16;

  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    return 0;
  }
  v2 = *(unsigned __int8 **)(a1 + 8);
  v3 = *(unsigned __int8 ***)(a2 + 8);
  result = v3 == 0;
  if (!v2)
    return result;
  if (!v3)
    return 0;
  v5 = v2[23];
  if ((v5 & 0x80u) == 0)
    v6 = (unsigned __int8 *)v2[23];
  else
    v6 = (unsigned __int8 *)*((_QWORD *)v2 + 1);
  v7 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 23);
  v8 = (char)v7;
  if ((char)v7 < 0)
    v7 = v3[1];
  if (v6 != v7)
    return 0;
  if (v8 >= 0)
    v9 = *(unsigned __int8 **)(a2 + 8);
  else
    v9 = *v3;
  if ((v5 & 0x80) != 0)
    return !memcmp(*(const void **)v2, v9, *((_QWORD *)v2 + 1));
  if (!v2[23])
    return 1;
  v10 = v5 - 1;
  do
  {
    v12 = *v2++;
    v11 = v12;
    v14 = *v9++;
    v13 = v14;
    v16 = v10-- != 0;
    result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

BOOL CMMsl::TempestPoCAuxiliaryDeviceMotion::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  float *v6;
  float *v7;
  float *v8;
  __int16 v9;
  __int16 v10;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 80);
  v5 = *(_QWORD *)(a2 + 80);
  if (v4)
  {
    if (!v5 || !CMMsl::AuxiliaryDeviceMotion::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v7 = *(float **)(a1 + 8);
  v6 = *(float **)(a1 + 16);
  v8 = *(float **)(a2 + 8);
  if ((char *)v6 - (char *)v7 == *(_QWORD *)(a2 + 16) - (_QWORD)v8)
  {
    while (v7 != v6)
    {
      if (*v7 != *v8)
        return 0;
      ++v7;
      ++v8;
    }
    v9 = *(_WORD *)(a1 + 104);
    v10 = *(_WORD *)(a2 + 104);
    if ((v9 & 0x80) != 0)
    {
      if ((v10 & 0x80) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92))
        return 0;
    }
    else if ((v10 & 0x80) != 0)
    {
      return 0;
    }
    if ((v9 & 0x40) != 0)
    {
      if ((v10 & 0x40) == 0 || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88))
        return 0;
    }
    else if ((v10 & 0x40) != 0)
    {
      return 0;
    }
    if ((*(_WORD *)(a1 + 104) & 0x100) != 0)
    {
      if ((*(_WORD *)(a2 + 104) & 0x100) == 0 || *(_DWORD *)(a1 + 96) != *(_DWORD *)(a2 + 96))
        return 0;
    }
    else if ((*(_WORD *)(a2 + 104) & 0x100) != 0)
    {
      return 0;
    }
    if ((*(_WORD *)(a1 + 104) & 0x200) != 0)
    {
      if ((*(_WORD *)(a2 + 104) & 0x200) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
        return 0;
    }
    else if ((*(_WORD *)(a2 + 104) & 0x200) != 0)
    {
      return 0;
    }
    if ((v9 & 2) != 0)
    {
      if ((v10 & 2) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
        return 0;
    }
    else if ((v10 & 2) != 0)
    {
      return 0;
    }
    if ((v9 & 4) != 0)
    {
      if ((v10 & 4) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
        return 0;
    }
    else if ((v10 & 4) != 0)
    {
      return 0;
    }
    if ((v9 & 0x10) != 0)
    {
      if ((v10 & 0x10) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
        return 0;
    }
    else if ((v10 & 0x10) != 0)
    {
      return 0;
    }
    if ((v9 & 0x20) != 0)
    {
      if ((v10 & 0x20) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
        return 0;
    }
    else if ((v10 & 0x20) != 0)
    {
      return 0;
    }
    if ((v9 & 1) != 0)
    {
      if ((v10 & 1) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
        return 0;
    }
    else if ((v10 & 1) != 0)
    {
      return 0;
    }
    result = (v10 & 8) == 0;
    if ((v9 & 8) == 0)
      return result;
    if ((v10 & 8) != 0 && *(double *)(a1 + 56) == *(double *)(a2 + 56))
      return 1;
  }
  return 0;
}

BOOL CMMsl::TempestPoCListenerOrientation::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  float *v4;
  float *v5;
  float *v6;
  _BOOL8 v7;

  v2 = *(_WORD *)(a1 + 96);
  v3 = *(_WORD *)(a2 + 96);
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 96) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 96) & 0x200) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 96) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 96) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 96) & 0x100) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 96) & 0x100) != 0)
  {
    return 0;
  }
  v5 = *(float **)(a1 + 8);
  v4 = *(float **)(a1 + 16);
  v6 = *(float **)(a2 + 8);
  if ((char *)v4 - (char *)v5 != *(_QWORD *)(a2 + 16) - (_QWORD)v6)
    return 0;
  while (v5 != v4)
  {
    if (*v5 != *v6)
      return 0;
    ++v5;
    ++v6;
  }
  if ((*(_WORD *)(a1 + 96) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 96) & 0x400) == 0 || *(unsigned __int8 *)(a1 + 92) != *(unsigned __int8 *)(a2 + 92))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 96) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  v7 = (v3 & 2) == 0;
  if ((v2 & 2) != 0)
    return (v3 & 2) != 0 && *(double *)(a1 + 40) == *(double *)(a2 + 40);
  return v7;
}

BOOL CMMsl::WorkoutRecorderAccel800::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::Accel::operator==(v2, v3);
  return result;
}

BOOL CMMsl::WorkoutRecorderALSData::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
  {
    if (v3)
    {
      if ((*(_BYTE *)(v2 + 12) & 1) != 0)
      {
        if ((*(_BYTE *)(v3 + 12) & 1) == 0 || *(float *)(v2 + 8) != *(float *)(v3 + 8))
          return 0;
      }
      else if ((*(_BYTE *)(v3 + 12) & 1) != 0)
      {
        return 0;
      }
      return 1;
    }
    return 0;
  }
  return result;
}

BOOL CMMsl::VisualLocalization::operator==(uint64_t a1, uint64_t a2)
{
  double *v2;
  double *v3;
  double *v4;
  float *v5;
  float *v6;
  float *v7;
  _BOOL8 v8;

  if ((*(_BYTE *)(a1 + 100) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 100) & 0x10) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 100) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 100) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 100) & 4) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 100) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 100) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 100) & 8) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 100) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 100) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 100) & 1) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 100) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 100) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 100) & 2) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 100) & 2) != 0)
  {
    return 0;
  }
  v3 = *(double **)(a1 + 32);
  v2 = *(double **)(a1 + 40);
  v4 = *(double **)(a2 + 32);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 40) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v6 = *(float **)(a1 + 8);
  v5 = *(float **)(a1 + 16);
  v7 = *(float **)(a2 + 8);
  if ((char *)v5 - (char *)v6 != *(_QWORD *)(a2 + 16) - (_QWORD)v7)
    return 0;
  while (v6 != v5)
  {
    if (*v6 != *v7)
      return 0;
    ++v6;
    ++v7;
  }
  v8 = (*(_BYTE *)(a2 + 100) & 0x20) == 0;
  if ((*(_BYTE *)(a1 + 100) & 0x20) != 0)
    return (*(_BYTE *)(a2 + 100) & 0x20) != 0 && *(float *)(a1 + 96) == *(float *)(a2 + 96);
  return v8;
}

BOOL CMMsl::SoundPressureLevel::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 1) == 0;
  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
    return (*(_BYTE *)(a2 + 20) & 1) != 0 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  return v2;
}

BOOL CMMsl::MotionLocation::operator==(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  _BOOL8 v15;

  v3 = *(_DWORD *)(a1 + 220);
  v4 = *(_DWORD *)(a2 + 220);
  if ((v3 & 0x40000) != 0)
  {
    if ((v4 & 0x40000) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 152) != *(double *)(a2 + 152))
      return 0;
  }
  else if ((v4 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x100) != 0)
  {
    if ((v4 & 0x100) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((v4 & 0x100) != 0)
  {
    return 0;
  }
  if ((v3 & 0x200) != 0)
  {
    if ((v4 & 0x200) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((v4 & 0x200) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10000) != 0)
  {
    if ((v4 & 0x10000) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 136) != *(double *)(a2 + 136))
      return 0;
  }
  else if ((v4 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20000) != 0)
  {
    if ((v4 & 0x20000) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 144) != *(double *)(a2 + 144))
      return 0;
  }
  else if ((v4 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x80) != 0)
  {
    if ((v4 & 0x80) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v4 & 0x80) != 0)
  {
    return 0;
  }
  if ((v3 & 2) != 0)
  {
    if ((v4 & 2) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v4 & 2) != 0)
  {
    return 0;
  }
  if ((v3 & 4) != 0)
  {
    if ((v4 & 4) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v4 & 4) != 0)
  {
    return 0;
  }
  if ((v3 & 1) != 0)
  {
    if ((v4 & 1) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v4 & 1) != 0)
  {
    return 0;
  }
  if ((v3 & 0x100000) != 0)
  {
    if ((v4 & 0x100000) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 168) != *(double *)(a2 + 168))
      return 0;
  }
  else if ((v4 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10000000) != 0)
  {
    if ((v4 & 0x10000000) == 0)
      return 0;
    v5 = *(_DWORD *)(a1 + 204);
    v6 = *(_DWORD *)(a2 + 204);
    v2 = __OFSUB__(v5, v6);
    if (v5 != v6)
      return 0;
  }
  else if ((v4 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x80000) != 0)
  {
    if ((v4 & 0x80000) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 160) != *(double *)(a2 + 160))
      return 0;
  }
  else if ((v4 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20000000) != 0)
  {
    if ((v4 & 0x20000000) == 0)
      return 0;
    v2 = 0;
    if (*(float *)(a1 + 208) != *(float *)(a2 + 208))
      return 0;
  }
  else if ((v4 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40000000) != 0)
  {
    if ((v4 & 0x40000000) == 0)
      return 0;
    v7 = *(_DWORD *)(a1 + 212);
    v8 = *(_DWORD *)(a2 + 212);
    v2 = __OFSUB__(v7, v8);
    if (v7 != v8)
      return 0;
  }
  else if ((v4 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x200000) != 0)
  {
    if ((v4 & 0x200000) == 0)
      return 0;
    v2 = 0;
    if (*(float *)(a1 + 176) != *(float *)(a2 + 176))
      return 0;
  }
  else if ((v4 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x800000) != 0)
  {
    if ((v4 & 0x800000) == 0)
      return 0;
    v2 = 0;
    if (*(float *)(a1 + 184) != *(float *)(a2 + 184))
      return 0;
  }
  else if ((v4 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x400000) != 0)
  {
    if ((v4 & 0x400000) == 0)
      return 0;
    v2 = 0;
    if (*(float *)(a1 + 180) != *(float *)(a2 + 180))
      return 0;
  }
  else if ((v4 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x800) != 0)
  {
    if ((v4 & 0x800) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 96) != *(double *)(a2 + 96))
      return 0;
  }
  else if ((v4 & 0x800) != 0)
  {
    return 0;
  }
  if ((v3 & 8) != 0)
  {
    if ((v4 & 8) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v4 & 8) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10) != 0)
  {
    if ((v4 & 0x10) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v4 & 0x10) != 0)
  {
    return 0;
  }
  if ((v3 & 0x2000000) != 0)
  {
    if ((v4 & 0x2000000) == 0)
      return 0;
    v9 = *(_DWORD *)(a1 + 192);
    v10 = *(_DWORD *)(a2 + 192);
    v2 = __OFSUB__(v9, v10);
    if (v9 != v10)
      return 0;
  }
  else if ((v4 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x8000000) != 0)
  {
    if ((v4 & 0x8000000) == 0)
      return 0;
    v11 = *(_DWORD *)(a1 + 200);
    v12 = *(_DWORD *)(a2 + 200);
    v2 = __OFSUB__(v11, v12);
    if (v11 != v12)
      return 0;
  }
  else if ((v4 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x1000000) != 0)
  {
    if ((v4 & 0x1000000) == 0)
      return 0;
    v13 = *(_DWORD *)(a1 + 188);
    v14 = *(_DWORD *)(a2 + 188);
    v2 = __OFSUB__(v13, v14);
    if (v13 != v14)
      return 0;
  }
  else if ((v4 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20) != 0)
  {
    if ((v4 & 0x20) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v4 & 0x20) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40) != 0)
  {
    if ((v4 & 0x40) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v4 & 0x40) != 0)
  {
    return 0;
  }
  if ((v3 & 0x8000) != 0)
  {
    if ((v4 & 0x8000) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 128) != *(double *)(a2 + 128))
      return 0;
  }
  else if ((v4 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x400) != 0)
  {
    if ((v4 & 0x400) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 88) != *(double *)(a2 + 88))
      return 0;
  }
  else if ((v4 & 0x400) != 0)
  {
    return 0;
  }
  if ((v4 & v3) < 0 != v2)
  {
    if (*(unsigned __int8 *)(a1 + 216) != *(unsigned __int8 *)(a2 + 216))
      return 0;
  }
  else if ((v4 | v3) < 0)
  {
    return 0;
  }
  if ((v3 & 0x1000) != 0)
  {
    if ((v4 & 0x1000) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104))
      return 0;
  }
  else if ((v4 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x4000) != 0)
  {
    if ((v4 & 0x4000) == 0 || *(double *)(a1 + 120) != *(double *)(a2 + 120))
      return 0;
  }
  else if ((v4 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x2000) != 0)
  {
    if ((v4 & 0x2000) == 0 || *(double *)(a1 + 112) != *(double *)(a2 + 112))
      return 0;
  }
  else if ((v4 & 0x2000) != 0)
  {
    return 0;
  }
  v15 = (v4 & 0x4000000) == 0;
  if ((v3 & 0x4000000) != 0)
    return (v4 & 0x4000000) != 0 && *(_DWORD *)(a1 + 196) == *(_DWORD *)(a2 + 196);
  return v15;
}

BOOL CMMsl::MotionActivity::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 116);
  v3 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(_DWORD *)(a1 + 92) != *(_DWORD *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(unsigned __int8 *)(a1 + 108) != *(unsigned __int8 *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(unsigned __int8 *)(a1 + 109) != *(unsigned __int8 *)(a2 + 109))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(unsigned __int8 *)(a1 + 113) != *(unsigned __int8 *)(a2 + 113))
      return 0;
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(unsigned __int8 *)(a1 + 112) != *(unsigned __int8 *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(unsigned __int8 *)(a1 + 110) != *(unsigned __int8 *)(a2 + 110))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(unsigned __int8 *)(a1 + 114) != *(unsigned __int8 *)(a2 + 114))
      return 0;
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(unsigned __int8 *)(a1 + 111) != *(unsigned __int8 *)(a2 + 111))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(_DWORD *)(a1 + 100) != *(_DWORD *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(_DWORD *)(a1 + 104) != *(_DWORD *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_QWORD *)(a1 + 40) != *(_QWORD *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(_DWORD *)(a1 + 96) != *(_DWORD *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  v4 = (*(_DWORD *)(a2 + 116) & 0x2000) == 0;
  if ((v2 & 0x2000) != 0)
    return (v3 & 0x2000) != 0 && *(_DWORD *)(a1 + 80) == *(_DWORD *)(a2 + 80);
  return v4;
}

BOOL CMMsl::KappaTrigger::operator==(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  double *v7;
  double *v8;
  double *v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  float *v14;
  float *v15;
  _BOOL8 v16;

  v3 = *(_DWORD *)(a1 + 212);
  v4 = *(_DWORD *)(a2 + 212);
  if ((v3 & 4) != 0)
  {
    if ((v4 & 4) == 0)
      return 0;
    v5 = *(_QWORD *)(a1 + 96);
    v6 = *(_QWORD *)(a2 + 96);
    v2 = __OFSUB__(v5, v6);
    if (v5 != v6)
      return 0;
  }
  else if ((v4 & 4) != 0)
  {
    return 0;
  }
  if ((v4 & v3) < 0 != v2)
  {
    if (*(unsigned __int8 *)(a1 + 211) != *(unsigned __int8 *)(a2 + 211))
      return 0;
  }
  else if ((v4 | v3) < 0)
  {
    return 0;
  }
  if ((v3 & 1) != 0)
  {
    if ((v4 & 1) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((v4 & 1) != 0)
  {
    return 0;
  }
  v8 = *(double **)(a1 + 8);
  v7 = *(double **)(a1 + 16);
  v9 = *(double **)(a2 + 8);
  if ((char *)v7 - (char *)v8 != *(_QWORD *)(a2 + 16) - (_QWORD)v9)
    return 0;
  while (v8 != v7)
  {
    if (*v8 != *v9)
      return 0;
    ++v8;
    ++v9;
  }
  v11 = *(float **)(a1 + 56);
  v10 = *(float **)(a1 + 64);
  v12 = *(float **)(a2 + 56);
  if ((char *)v10 - (char *)v11 != *(_QWORD *)(a2 + 64) - (_QWORD)v12)
    return 0;
  while (v11 != v10)
  {
    if (*v11 != *v12)
      return 0;
    ++v11;
    ++v12;
  }
  v14 = *(float **)(a1 + 32);
  v13 = *(float **)(a1 + 40);
  v15 = *(float **)(a2 + 32);
  if ((char *)v13 - (char *)v14 != *(_QWORD *)(a2 + 40) - (_QWORD)v15)
    return 0;
  while (v14 != v13)
  {
    if (*v14 != *v15)
      return 0;
    ++v14;
    ++v15;
  }
  if ((v3 & 0x10000000) != 0)
  {
    if ((v4 & 0x10000000) == 0 || *(unsigned __int8 *)(a1 + 208) != *(unsigned __int8 *)(a2 + 208))
      return 0;
  }
  else if ((v4 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20000000) != 0)
  {
    if ((v4 & 0x20000000) == 0 || *(unsigned __int8 *)(a1 + 209) != *(unsigned __int8 *)(a2 + 209))
      return 0;
  }
  else if ((v4 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x400000) != 0)
  {
    if ((v4 & 0x400000) == 0 || *(_DWORD *)(a1 + 184) != *(_DWORD *)(a2 + 184))
      return 0;
  }
  else if ((v4 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10) != 0)
  {
    if ((v4 & 0x10) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112))
      return 0;
  }
  else if ((v4 & 0x10) != 0)
  {
    return 0;
  }
  if ((v3 & 0x80000) != 0)
  {
    if ((v4 & 0x80000) == 0 || *(_DWORD *)(a1 + 172) != *(_DWORD *)(a2 + 172))
      return 0;
  }
  else if ((v4 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40000) != 0)
  {
    if ((v4 & 0x40000) == 0 || *(_DWORD *)(a1 + 168) != *(_DWORD *)(a2 + 168))
      return 0;
  }
  else if ((v4 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20000) != 0)
  {
    if ((v4 & 0x20000) == 0 || *(_DWORD *)(a1 + 164) != *(_DWORD *)(a2 + 164))
      return 0;
  }
  else if ((v4 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10000) != 0)
  {
    if ((v4 & 0x10000) == 0 || *(_DWORD *)(a1 + 160) != *(_DWORD *)(a2 + 160))
      return 0;
  }
  else if ((v4 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x8000) != 0)
  {
    if ((v4 & 0x8000) == 0 || *(_DWORD *)(a1 + 156) != *(_DWORD *)(a2 + 156))
      return 0;
  }
  else if ((v4 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x4000) != 0)
  {
    if ((v4 & 0x4000) == 0 || *(_DWORD *)(a1 + 152) != *(_DWORD *)(a2 + 152))
      return 0;
  }
  else if ((v4 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x2000) != 0)
  {
    if ((v4 & 0x2000) == 0 || *(_DWORD *)(a1 + 148) != *(_DWORD *)(a2 + 148))
      return 0;
  }
  else if ((v4 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x100000) != 0)
  {
    if ((v4 & 0x100000) == 0 || *(_DWORD *)(a1 + 176) != *(_DWORD *)(a2 + 176))
      return 0;
  }
  else if ((v4 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x100) != 0)
  {
    if ((v4 & 0x100) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128))
      return 0;
  }
  else if ((v4 & 0x100) != 0)
  {
    return 0;
  }
  if ((v3 & 0x1000000) != 0)
  {
    if ((v4 & 0x1000000) == 0 || *(_DWORD *)(a1 + 192) != *(_DWORD *)(a2 + 192))
      return 0;
  }
  else if ((v4 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20) != 0)
  {
    if ((v4 & 0x20) == 0 || *(_DWORD *)(a1 + 116) != *(_DWORD *)(a2 + 116))
      return 0;
  }
  else if ((v4 & 0x20) != 0)
  {
    return 0;
  }
  if ((v3 & 8) != 0)
  {
    if ((v4 & 8) == 0 || *(_QWORD *)(a1 + 104) != *(_QWORD *)(a2 + 104))
      return 0;
  }
  else if ((v4 & 8) != 0)
  {
    return 0;
  }
  if ((v3 & 0x2000000) != 0)
  {
    if ((v4 & 0x2000000) == 0 || *(float *)(a1 + 196) != *(float *)(a2 + 196))
      return 0;
  }
  else if ((v4 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x4000000) != 0)
  {
    if ((v4 & 0x4000000) == 0 || *(float *)(a1 + 200) != *(float *)(a2 + 200))
      return 0;
  }
  else if ((v4 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x8000000) != 0)
  {
    if ((v4 & 0x8000000) == 0 || *(float *)(a1 + 204) != *(float *)(a2 + 204))
      return 0;
  }
  else if ((v4 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x800) != 0)
  {
    if ((v4 & 0x800) == 0 || *(_DWORD *)(a1 + 140) != *(_DWORD *)(a2 + 140))
      return 0;
  }
  else if ((v4 & 0x800) != 0)
  {
    return 0;
  }
  if ((v3 & 0x80) != 0)
  {
    if ((v4 & 0x80) == 0 || *(_DWORD *)(a1 + 124) != *(_DWORD *)(a2 + 124))
      return 0;
  }
  else if ((v4 & 0x80) != 0)
  {
    return 0;
  }
  if ((v3 & 2) != 0)
  {
    if ((v4 & 2) == 0 || *(_QWORD *)(a1 + 88) != *(_QWORD *)(a2 + 88))
      return 0;
  }
  else if ((v4 & 2) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40000000) != 0)
  {
    if ((v4 & 0x40000000) == 0 || *(unsigned __int8 *)(a1 + 210) != *(unsigned __int8 *)(a2 + 210))
      return 0;
  }
  else if ((v4 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x1000) != 0)
  {
    if ((v4 & 0x1000) == 0 || *(float *)(a1 + 144) != *(float *)(a2 + 144))
      return 0;
  }
  else if ((v4 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x200) != 0)
  {
    if ((v4 & 0x200) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132))
      return 0;
  }
  else if ((v4 & 0x200) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40) != 0)
  {
    if ((v4 & 0x40) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120))
      return 0;
  }
  else if ((v4 & 0x40) != 0)
  {
    return 0;
  }
  if ((v3 & 0x200000) != 0)
  {
    if ((v4 & 0x200000) == 0 || *(_DWORD *)(a1 + 180) != *(_DWORD *)(a2 + 180))
      return 0;
  }
  else if ((v4 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x400) != 0)
  {
    if ((v4 & 0x400) == 0 || *(_DWORD *)(a1 + 136) != *(_DWORD *)(a2 + 136))
      return 0;
  }
  else if ((v4 & 0x400) != 0)
  {
    return 0;
  }
  v16 = (v4 & 0x800000) == 0;
  if ((v3 & 0x800000) != 0)
    return (v4 & 0x800000) != 0 && *(_DWORD *)(a1 + 188) == *(_DWORD *)(a2 + 188);
  return v16;
}

BOOL CMMsl::RelDMInSystemConfig::operator==(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 **v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  _BOOL8 result;

  v4 = *(unsigned __int8 **)(a1 + 8);
  v5 = *(unsigned __int8 ***)(a2 + 8);
  if (v4)
  {
    if (!v5)
      return 0;
    v6 = v4[23];
    if ((v6 & 0x80u) == 0)
      v7 = (unsigned __int8 *)v4[23];
    else
      v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
    v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    v9 = (char)v8;
    if ((char)v8 < 0)
      v8 = v5[1];
    if (v7 != v8)
      return 0;
    if (v9 >= 0)
      v10 = *(unsigned __int8 **)(a2 + 8);
    else
      v10 = *v5;
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((_QWORD *)v4 + 1)))
        return 0;
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6)
          goto LABEL_18;
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_18:
  result = (*(_BYTE *)(a2 + 24) & 1) == 0;
  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
    return result;
  return (*(_BYTE *)(a2 + 24) & 1) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
}

BOOL CMMsl::JointLinkModelPose::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::BioMotionPose::operator==(v2, v3);
  return result;
}

BOOL CMMsl::ModelBasedBioMotionClassification::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::BioMotionClassification::operator==(v2, v3);
  return result;
}

BOOL CMMsl::MLBasedBioMotionClassification::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::BioMotionClassification::operator==(v2, v3);
  return result;
}

BOOL CMMsl::JointLinkModelPredictedPose::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::BioMotionPredictedPose::operator==(v2, v3);
  return result;
}

BOOL CMMsl::PressureCompensated::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::Pressure::operator==(v2, v3);
  return result;
}

BOOL CMMsl::VO2MaxOutput::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 72);
  v3 = *(_WORD *)(a2 + 72);
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 72) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 72) & 0x100) == 0 || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 68))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 72) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x80) == 0;
  if ((v2 & 0x80) != 0)
    return (v3 & 0x80) != 0 && *(_DWORD *)(a1 + 64) == *(_DWORD *)(a2 + 64);
  return v4;
}

BOOL CMMsl::MagneticAccessoryType1::operator==(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 **v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  _BOOL8 result;

  v4 = *(unsigned __int8 **)(a1 + 8);
  v5 = *(unsigned __int8 ***)(a2 + 8);
  if (v4)
  {
    if (!v5)
      return 0;
    v6 = v4[23];
    if ((v6 & 0x80u) == 0)
      v7 = (unsigned __int8 *)v4[23];
    else
      v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
    v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    v9 = (char)v8;
    if ((char)v8 < 0)
      v8 = v5[1];
    if (v7 != v8)
      return 0;
    if (v9 >= 0)
      v10 = *(unsigned __int8 **)(a2 + 8);
    else
      v10 = *v5;
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((_QWORD *)v4 + 1)))
        return 0;
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6)
          goto LABEL_18;
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_18:
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    return 0;
  }
  result = (*(_BYTE *)(a2 + 24) & 2) == 0;
  if ((*(_BYTE *)(a1 + 24) & 2) == 0)
    return result;
  return (*(_BYTE *)(a2 + 24) & 2) != 0 && *(unsigned __int8 *)(a1 + 20) == *(unsigned __int8 *)(a2 + 20);
}

BOOL CMMsl::MagneticAccessoryType2::operator==(uint64_t a1, uint64_t a2)
{
  char v3;
  _BOOL8 result;

  v3 = *(_BYTE *)(a1 + 12);
  result = (*(_BYTE *)(a2 + 12) & 1) == 0;
  if ((v3 & 1) != 0)
    return (*(_BYTE *)(a2 + 12) & 1) != 0 && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8);
  return result;
}

BOOL CMMsl::PressureCalibration::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 32) & 0x20) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 0x20) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 0x10) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 8) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(float *)(a1 + 8) != *(float *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 2) == 0 || *(float *)(a1 + 12) != *(float *)(a2 + 12))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 32) & 4) == 0;
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
    return (*(_BYTE *)(a2 + 32) & 4) != 0 && *(float *)(a1 + 16) == *(float *)(a2 + 16);
  return v2;
}

BOOL CMMsl::WorkoutRecorderMagnetometer::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::Magnetometer::operator==(v2, v3);
  return result;
}

BOOL CMMsl::WorkoutRecorderCompassCalibration::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::CompassCalibration::operator==(v2, v3);
  return result;
}

BOOL CMMsl::RawAudio::operator==(uint64_t a1, uint64_t a2)
{
  const void *v2;
  uint64_t v3;
  size_t v4;
  const void *v5;
  uint64_t v6;

  v3 = a1 + 8;
  v2 = *(const void **)(a1 + 8);
  v4 = *(_QWORD *)(v3 + 8) - (_QWORD)v2;
  v6 = a2 + 8;
  v5 = *(const void **)(a2 + 8);
  return v4 == *(_QWORD *)(v6 + 8) - (_QWORD)v5 && memcmp(v2, v5, v4) == 0;
}

BOOL CMMsl::ODTPose::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  double *v4;
  uint64_t v5;
  double v6;
  _BOOL8 result;
  BOOL v8;

  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    return 0;
  }
  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v4 = *(double **)(a2 + 8);
  if (v2 - v3 != *(_QWORD *)(a2 + 16) - (_QWORD)v4)
    return 0;
  if (v3 == v2)
    return 1;
  v5 = v3 + 8;
  do
  {
    v6 = *v4++;
    result = *(double *)(v5 - 8) == v6;
    v8 = *(double *)(v5 - 8) != v6 || v5 == v2;
    v5 += 8;
  }
  while (!v8);
  return result;
}

BOOL CMMsl::PencilTipForce::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 24) & 2) == 0;
  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
    return (*(_BYTE *)(a2 + 24) & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  return v2;
}

BOOL CMMsl::PencilTouch::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 88);
  v3 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 88) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 88) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 88) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x400) == 0 || *(_DWORD *)(a1 + 84) != *(_DWORD *)(a2 + 84))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 88) & 0x400) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 88) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x200) == 0 || *(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 88) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x10) == 0;
  if ((v2 & 0x10) != 0)
    return (v3 & 0x10) != 0 && *(double *)(a1 + 40) == *(double *)(a2 + 40);
  return v4;
}

BOOL CMMsl::Timestamp::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 1) == 0;
  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
    return (*(_BYTE *)(a2 + 20) & 1) != 0 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  return v2;
}

BOOL CMMsl::WalkingSteadinessClassification::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL8 result;

  v2 = *(_DWORD *)(a1 + 244);
  v3 = *(_DWORD *)(a2 + 244);
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(_DWORD *)(a1 + 220) != *(_DWORD *)(a2 + 220))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(_DWORD *)(a1 + 216) != *(_DWORD *)(a2 + 216))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 228) != *(float *)(a2 + 228))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(unsigned __int8 *)(a1 + 241) != *(unsigned __int8 *)(a2 + 241))
      return 0;
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 232) != *(float *)(a2 + 232))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(unsigned __int8 *)(a1 + 242) != *(unsigned __int8 *)(a2 + 242))
      return 0;
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(double *)(a1 + 176) != *(double *)(a2 + 176))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(unsigned __int8 *)(a1 + 238) != *(unsigned __int8 *)(a2 + 238))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  v4 = *(_QWORD *)(a1 + 64);
  v5 = *(_QWORD *)(a2 + 64);
  if (v4)
  {
    if (!v5 || !CMMsl::SteadinessEvent::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(double *)(a1 + 192) != *(double *)(a2 + 192))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(unsigned __int8 *)(a1 + 239) != *(unsigned __int8 *)(a2 + 239))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(double *)(a1 + 184) != *(double *)(a2 + 184))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(unsigned __int8 *)(a1 + 237) != *(unsigned __int8 *)(a2 + 237))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  v6 = *(_QWORD *)(a1 + 120);
  v7 = *(_QWORD *)(a2 + 120);
  if (v6)
  {
    if (!v7 || !CMMsl::SteadinessModelResult::operator==(v6, v7))
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  v8 = *(_QWORD *)(a1 + 112);
  v9 = *(_QWORD *)(a2 + 112);
  if (v8)
  {
    if (!v9 || !CMMsl::SteadinessModelGaitBaselineFeatures::operator==(v8, v9))
      return 0;
  }
  else if (v9)
  {
    return 0;
  }
  v10 = *(_QWORD *)(a1 + 104);
  v11 = *(_QWORD *)(a2 + 104);
  if (v10)
  {
    if (!v11 || !CMMsl::SteadinessModelResult::operator==(v10, v11))
      return 0;
  }
  else if (v11)
  {
    return 0;
  }
  v12 = *(_QWORD *)(a1 + 96);
  v13 = *(_QWORD *)(a2 + 96);
  if (v12)
  {
    if (!v13 || !CMMsl::SteadinessModelContinuousWalkingFeatures::operator==(v12, v13))
      return 0;
  }
  else if (v13)
  {
    return 0;
  }
  v14 = *(_QWORD *)(a1 + 152);
  v15 = *(_QWORD *)(a2 + 152);
  if (v14)
  {
    if (!v15 || !CMMsl::SteadinessModelResult::operator==(v14, v15))
      return 0;
  }
  else if (v15)
  {
    return 0;
  }
  v16 = *(_QWORD *)(a1 + 144);
  v17 = *(_QWORD *)(a2 + 144);
  if (v16)
  {
    if (!v17 || !CMMsl::SteadinessModelTemporalDispersionFeatures::operator==(v16, v17))
      return 0;
  }
  else if (v17)
  {
    return 0;
  }
  v18 = *(_QWORD *)(a1 + 168);
  v19 = *(_QWORD *)(a2 + 168);
  if (v18)
  {
    if (!v19 || !CMMsl::SteadinessModelResult::operator==(v18, v19))
      return 0;
  }
  else if (v19)
  {
    return 0;
  }
  v20 = *(_QWORD *)(a1 + 160);
  v21 = *(_QWORD *)(a2 + 160);
  if (v20)
  {
    if (!v21 || !CMMsl::SteadinessModelTemporalEntropyFeatures::operator==(v20, v21))
      return 0;
  }
  else if (v21)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(unsigned __int8 *)(a1 + 236) != *(unsigned __int8 *)(a2 + 236))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  v22 = *(_QWORD *)(a1 + 88);
  v23 = *(_QWORD *)(a2 + 88);
  if (v22)
  {
    if (!v23 || !CMMsl::SteadinessModelBalanceFeatures::operator==(v22, v23))
      return 0;
  }
  else if (v23)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 224) != *(float *)(a2 + 224))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(unsigned __int8 *)(a1 + 240) != *(unsigned __int8 *)(a2 + 240))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(double *)(a1 + 200) != *(double *)(a2 + 200))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(_DWORD *)(a1 + 212) != *(_DWORD *)(a2 + 212))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(_DWORD *)(a1 + 208) != *(_DWORD *)(a2 + 208))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  v24 = *(_QWORD *)(a1 + 136);
  v25 = *(_QWORD *)(a2 + 136);
  if (v24)
  {
    if (!v25 || !CMMsl::SteadinessModelResult::operator==(v24, v25))
      return 0;
  }
  else if (v25)
  {
    return 0;
  }
  v26 = *(_QWORD *)(a2 + 128);
  result = v26 == 0;
  if (!*(_QWORD *)(a1 + 128))
    return result;
  return v26 && CMMsl::SteadinessModelHarmonicFeatures::operator==(*(_QWORD *)(a1 + 128), v26);
}

BOOL CMMsl::SteadinessModelResult::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(unsigned __int8 *)(a1 + 52);
  v3 = *(unsigned __int8 *)(a2 + 52);
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v3 & v2 & 0x80) != 0)
  {
    if (*(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48))
      return 0;
  }
  else if (((v3 | v2) & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x20) == 0;
  if ((v2 & 0x20) != 0)
    return (v3 & 0x20) != 0 && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40);
  return v4;
}

BOOL CMMsl::SteadinessEvent::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 60);
  v3 = *(_WORD *)(a2 + 60);
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x200) == 0 || *(unsigned __int8 *)(a1 + 55) != *(unsigned __int8 *)(a2 + 55))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 60) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x400) == 0 || *(unsigned __int8 *)(a1 + 56) != *(unsigned __int8 *)(a2 + 56))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 60) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(unsigned __int8 *)(a1 + 52) != *(unsigned __int8 *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(unsigned __int8 *)(a1 + 53) != *(unsigned __int8 *)(a2 + 53))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x100) == 0 || *(unsigned __int8 *)(a1 + 54) != *(unsigned __int8 *)(a2 + 54))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 60) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x10) == 0;
  if ((v2 & 0x10) != 0)
    return (v3 & 0x10) != 0 && *(double *)(a1 + 40) == *(double *)(a2 + 40);
  return v4;
}

BOOL CMMsl::SteadinessModelGaitBaselineFeatures::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 88);
  v3 = *(_WORD *)(a2 + 88);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 88) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x200) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 88) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 88) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 88) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x20) == 0;
  if ((v2 & 0x20) != 0)
    return (v3 & 0x20) != 0 && *(double *)(a1 + 48) == *(double *)(a2 + 48);
  return v4;
}

BOOL CMMsl::SteadinessModelContinuousWalkingFeatures::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 176);
  v3 = *(_DWORD *)(a2 + 176);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(double *)(a1 + 96) != *(double *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(double *)(a1 + 160) != *(double *)(a2 + 160))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(double *)(a1 + 168) != *(double *)(a2 + 168))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(double *)(a1 + 144) != *(double *)(a2 + 144))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(double *)(a1 + 120) != *(double *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(double *)(a1 + 128) != *(double *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(double *)(a1 + 152) != *(double *)(a2 + 152))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(double *)(a1 + 112) != *(double *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(double *)(a1 + 136) != *(double *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  v4 = (*(_DWORD *)(a2 + 176) & 0x1000) == 0;
  if ((v2 & 0x1000) != 0)
    return (v3 & 0x1000) != 0 && *(double *)(a1 + 104) == *(double *)(a2 + 104);
  return v4;
}

BOOL CMMsl::SteadinessModelTemporalDispersionFeatures::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 40) & 1) == 0;
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
    return (*(_BYTE *)(a2 + 40) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  return v2;
}

BOOL CMMsl::SteadinessModelTemporalEntropyFeatures::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 216);
  v3 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(double *)(a1 + 160) != *(double *)(a2 + 160))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(double *)(a1 + 152) != *(double *)(a2 + 152))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(double *)(a1 + 168) != *(double *)(a2 + 168))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(double *)(a1 + 184) != *(double *)(a2 + 184))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(double *)(a1 + 176) != *(double *)(a2 + 176))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(double *)(a1 + 192) != *(double *)(a2 + 192))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(double *)(a1 + 208) != *(double *)(a2 + 208))
      return 0;
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(double *)(a1 + 200) != *(double *)(a2 + 200))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(double *)(a1 + 112) != *(double *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(double *)(a1 + 120) != *(double *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(double *)(a1 + 128) != *(double *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(double *)(a1 + 144) != *(double *)(a2 + 144))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(double *)(a1 + 136) != *(double *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(double *)(a1 + 96) != *(double *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  v4 = (*(_DWORD *)(a2 + 216) & 0x1000) == 0;
  if ((v2 & 0x1000) != 0)
    return (v3 & 0x1000) != 0 && *(double *)(a1 + 104) == *(double *)(a2 + 104);
  return v4;
}

BOOL CMMsl::SteadinessModelBalanceFeatures::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 40) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 40) & 8) == 0;
  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
    return (*(_BYTE *)(a2 + 40) & 8) != 0 && *(double *)(a1 + 32) == *(double *)(a2 + 32);
  return v2;
}

BOOL CMMsl::MagnetometerReset::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 44) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 8) == 0 || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 0x40) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 0x40) == 0 || *(unsigned __int8 *)(a1 + 42) != *(unsigned __int8 *)(a2 + 42))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 0x10) == 0 || *(unsigned __int8 *)(a1 + 40) != *(unsigned __int8 *)(a2 + 40))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 0x10) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 44) & 0x20) == 0;
  if ((*(_BYTE *)(a1 + 44) & 0x20) != 0)
    return (*(_BYTE *)(a2 + 44) & 0x20) != 0 && *(unsigned __int8 *)(a1 + 41) == *(unsigned __int8 *)(a2 + 41);
  return v2;
}

BOOL CMMsl::WorkoutRecorderWatchOnWristStatus::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::WatchOnWristState::operator==(v2, v3);
  return result;
}

BOOL CMMsl::LiftToWakeOnHeadStatus::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 4) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 28) & 2) == 0;
  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
    return (*(_BYTE *)(a2 + 28) & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  return v2;
}

BOOL CMMsl::StepCountEntryAddition::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 72);
  v3 = *(_WORD *)(a2 + 72);
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 72) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 72) & 0x200) == 0 || *(unsigned __int8 *)(a1 + 69) != *(unsigned __int8 *)(a2 + 69))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 72) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 72) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 72) & 0x400) == 0 || *(unsigned __int8 *)(a1 + 70) != *(unsigned __int8 *)(a2 + 70))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 72) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x100) == 0;
  if ((*(_WORD *)(a1 + 72) & 0x100) != 0)
    return (*(_WORD *)(a2 + 72) & 0x100) != 0 && *(unsigned __int8 *)(a1 + 68) == *(unsigned __int8 *)(a2 + 68);
  return v4;
}

BOOL CMMsl::StepDistanceFusionResult::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  __int16 v9;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    if (!v5 || !CMMsl::StepCountEntry::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    if (!v7 || !CMMsl::StepCountEntryAddition::operator==(v6, v7))
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  v8 = *(_WORD *)(a1 + 100);
  v9 = *(_WORD *)(a2 + 100);
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v9 & 1) != 0)
  {
    return 0;
  }
  if ((v8 & 2) != 0)
  {
    if ((v9 & 2) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v9 & 2) != 0)
  {
    return 0;
  }
  if ((v8 & 0x80) != 0)
  {
    if ((v9 & 0x80) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((v9 & 0x80) != 0)
  {
    return 0;
  }
  if ((v8 & 0x20) != 0)
  {
    if ((v9 & 0x20) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v9 & 0x20) != 0)
  {
    return 0;
  }
  if ((v8 & 0x40) != 0)
  {
    if ((v9 & 0x40) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((v9 & 0x40) != 0)
  {
    return 0;
  }
  if ((v8 & 4) != 0)
  {
    if ((v9 & 4) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v9 & 4) != 0)
  {
    return 0;
  }
  if ((v8 & 8) != 0)
  {
    if ((v9 & 8) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v9 & 8) != 0)
  {
    return 0;
  }
  if ((v8 & 0x10) != 0)
  {
    if ((v9 & 0x10) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v9 & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 100) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 100) & 0x400) == 0 || *(unsigned __int8 *)(a1 + 96) != *(unsigned __int8 *)(a2 + 96))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 100) & 0x400) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 100) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 100) & 0x200) == 0 || *(_DWORD *)(a1 + 92) != *(_DWORD *)(a2 + 92))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 100) & 0x200) != 0)
  {
    return 0;
  }
  result = (v9 & 0x100) == 0;
  if ((*(_WORD *)(a1 + 100) & 0x100) == 0)
    return result;
  return (*(_WORD *)(a2 + 100) & 0x100) != 0 && *(_DWORD *)(a1 + 88) == *(_DWORD *)(a2 + 88);
}

BOOL CMMsl::Skeleton3D::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;
  BOOL v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(uint64_t **)(a2 + 8);
  if (v3 - v2 != *(_QWORD *)(a2 + 16) - (_QWORD)v4)
    return 0;
  if (v2 == v3)
    return 1;
  v5 = v2 + 8;
  do
  {
    v6 = *v4++;
    result = CMMsl::SkeletonJoint::operator==(*(_QWORD *)(v5 - 8), v6);
    v8 = !result || v5 == v3;
    v5 += 8;
  }
  while (!v8);
  return result;
}

BOOL CMMsl::LockScreenStatus::operator==(uint64_t a1, uint64_t a2)
{
  char v3;
  _BOOL8 result;

  v3 = *(_BYTE *)(a1 + 12);
  result = (*(_BYTE *)(a2 + 12) & 1) == 0;
  if ((v3 & 1) != 0)
    return (*(_BYTE *)(a2 + 12) & 1) != 0 && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8);
  return result;
}

BOOL CMMsl::PowerManagementUserActivity::operator==(uint64_t a1, uint64_t a2)
{
  char v3;
  _BOOL8 result;

  v3 = *(_BYTE *)(a1 + 16);
  result = (*(_BYTE *)(a2 + 16) & 1) == 0;
  if ((v3 & 1) != 0)
    return (*(_BYTE *)(a2 + 16) & 1) != 0 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  return result;
}

BOOL CMMsl::LiftToWakeState::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 4) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 28) & 2) == 0;
  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
    return (*(_BYTE *)(a2 + 28) & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  return v2;
}

BOOL CMMsl::ViewObstructedState::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 84);
  v3 = *(_DWORD *)(a2 + 84);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(unsigned __int8 *)(a1 + 80) != *(unsigned __int8 *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x40000) == 0;
  if ((v2 & 0x40000) != 0)
    return (v3 & 0x40000) != 0 && *(unsigned __int8 *)(a1 + 81) == *(unsigned __int8 *)(a2 + 81);
  return v4;
}

BOOL CMMsl::RunningFormMetrics::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 v4;

  v2 = *(_QWORD *)(a1 + 224);
  v3 = *(_QWORD *)(a2 + 224);
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000) != 0)
  {
    if ((v3 & 0x200000000) == 0 || *(unsigned __int8 *)(a1 + 220) != *(unsigned __int8 *)(a2 + 220))
      return 0;
  }
  else if ((v3 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(unsigned __int8 *)(a1 + 217) != *(unsigned __int8 *)(a2 + 217))
      return 0;
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(double *)(a1 + 160) != *(double *)(a2 + 160))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000) != 0)
  {
    if ((v3 & 0x400000000) == 0 || *(unsigned __int8 *)(a1 + 221) != *(unsigned __int8 *)(a2 + 221))
      return 0;
  }
  else if ((v3 & 0x400000000) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(unsigned __int8 *)(a1 + 216) != *(unsigned __int8 *)(a2 + 216))
      return 0;
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000) != 0)
  {
    if ((v3 & 0x80000000) == 0 || *(unsigned __int8 *)(a1 + 218) != *(unsigned __int8 *)(a2 + 218))
      return 0;
  }
  else if ((v3 & 0x80000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(double *)(a1 + 128) != *(double *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(double *)(a1 + 152) != *(double *)(a2 + 152))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(double *)(a1 + 120) != *(double *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(_DWORD *)(a1 + 208) != *(_DWORD *)(a2 + 208))
      return 0;
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(_DWORD *)(a1 + 204) != *(_DWORD *)(a2 + 204))
      return 0;
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(_DWORD *)(a1 + 212) != *(_DWORD *)(a2 + 212))
      return 0;
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(_DWORD *)(a1 + 192) != *(_DWORD *)(a2 + 192))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(_DWORD *)(a1 + 200) != *(_DWORD *)(a2 + 200))
      return 0;
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(_DWORD *)(a1 + 196) != *(_DWORD *)(a2 + 196))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000) != 0)
  {
    if ((v3 & 0x100000000) == 0 || *(unsigned __int8 *)(a1 + 219) != *(unsigned __int8 *)(a2 + 219))
      return 0;
  }
  else if ((v3 & 0x100000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(double *)(a1 + 96) != *(double *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(double *)(a1 + 136) != *(double *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(double *)(a1 + 144) != *(double *)(a2 + 144))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(double *)(a1 + 184) != *(double *)(a2 + 184))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(double *)(a1 + 112) != *(double *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(double *)(a1 + 168) != *(double *)(a2 + 168))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(double *)(a1 + 176) != *(double *)(a2 + 176))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  v4 = (*(_QWORD *)(a2 + 224) & 0x400) == 0;
  if ((v2 & 0x400) != 0)
    return (v3 & 0x400) != 0 && *(double *)(a1 + 88) == *(double *)(a2 + 88);
  return v4;
}

BOOL CMMsl::WorkoutSessionPriors::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;
  BOOL v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(uint64_t **)(a2 + 8);
  if (v3 - v2 != *(_QWORD *)(a2 + 16) - (_QWORD)v4)
    return 0;
  if (v2 == v3)
    return 1;
  v5 = v2 + 8;
  do
  {
    v6 = *v4++;
    result = CMMsl::WorkoutPriorInformation::operator==(*(_QWORD *)(v5 - 8), v6);
    v8 = !result || v5 == v3;
    v5 += 8;
  }
  while (!v8);
  return result;
}

BOOL CMMsl::WorkoutRecorderWorkoutSessionPriors::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = (v2 | v3) == 0;
  if (v2)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v6 = *(_QWORD *)(v2 + 8);
    v7 = *(_QWORD *)(v2 + 16);
    v8 = *(uint64_t **)(v3 + 8);
    if (v7 - v6 == *(_QWORD *)(v3 + 16) - (_QWORD)v8)
    {
      if (v6 == v7)
      {
        return 1;
      }
      else
      {
        v9 = v6 + 8;
        do
        {
          v10 = *v8++;
          result = CMMsl::WorkoutPriorInformation::operator==(*(_QWORD *)(v9 - 8), v10);
          v11 = !result || v9 == v7;
          v9 += 8;
        }
        while (!v11);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL CMMsl::PDRImpulse::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 1) == 0;
  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
    return (*(_BYTE *)(a2 + 20) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  return v2;
}

BOOL CMMsl::PocketDetectionPacket::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 84);
  v3 = *(_WORD *)(a2 + 84);
  if ((v2 & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 84) & 0x200) == 0 || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 84) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 84) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 84) & 0x400) == 0 || *(unsigned __int8 *)(a1 + 80) != *(unsigned __int8 *)(a2 + 80))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 84) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 84) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 84) & 0x100) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 84) & 0x100) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x40) == 0;
  if ((v2 & 0x40) != 0)
    return (v3 & 0x40) != 0 && *(double *)(a1 + 56) == *(double *)(a2 + 56);
  return v4;
}

BOOL CMMsl::LiftToWakeFeaturesNeo::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 8) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 40) & 0x10) == 0;
  if ((*(_BYTE *)(a1 + 40) & 0x10) != 0)
    return (*(_BYTE *)(a2 + 40) & 0x10) != 0 && *(float *)(a1 + 36) == *(float *)(a2 + 36);
  return v2;
}

BOOL CMMsl::LiftToWakeStatusNeo::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 64);
  v3 = *(_WORD *)(a2 + 64);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x800) == 0 || *(unsigned __int8 *)(a1 + 60) != *(unsigned __int8 *)(a2 + 60))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 64) & 0x800) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x400) == 0 || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 64) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x1000) == 0 || *(unsigned __int8 *)(a1 + 61) != *(unsigned __int8 *)(a2 + 61))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 64) & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x100) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 64) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x200) == 0;
  if ((*(_WORD *)(a1 + 64) & 0x200) != 0)
    return (*(_WORD *)(a2 + 64) & 0x200) != 0 && *(_DWORD *)(a1 + 52) == *(_DWORD *)(a2 + 52);
  return v4;
}

BOOL CMMsl::RunningPower::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 128);
  v3 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(unsigned __int8 *)(a1 + 124) != *(unsigned __int8 *)(a2 + 124))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(double *)(a1 + 96) != *(double *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(_DWORD *)(a1 + 108) != *(_DWORD *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 104) != *(_DWORD *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(unsigned __int8 *)(a1 + 123) != *(unsigned __int8 *)(a2 + 123))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(unsigned __int8 *)(a1 + 125) != *(unsigned __int8 *)(a2 + 125))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(unsigned __int8 *)(a1 + 121) != *(unsigned __int8 *)(a2 + 121))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(_DWORD *)(a1 + 116) != *(_DWORD *)(a2 + 116))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(unsigned __int8 *)(a1 + 120) != *(unsigned __int8 *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(unsigned __int8 *)(a1 + 122) != *(unsigned __int8 *)(a2 + 122))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  v4 = (*(_DWORD *)(a2 + 128) & 0x4000) == 0;
  if ((v2 & 0x4000) != 0)
    return (v3 & 0x4000) != 0 && *(_DWORD *)(a1 + 112) == *(_DWORD *)(a2 + 112);
  return v4;
}

BOOL CMMsl::MotionContextActivity::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 2) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    return 0;
  }
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (!v2)
    return result;
  return v3 && CMMsl::PDRImpulse::operator==(v2, v3);
}

BOOL CMMsl::PDRAlgType::operator==(uint64_t a1, uint64_t a2)
{
  char v3;
  _BOOL8 result;

  v3 = *(_BYTE *)(a1 + 12);
  result = (*(_BYTE *)(a2 + 12) & 1) == 0;
  if ((v3 & 1) != 0)
    return (*(_BYTE *)(a2 + 12) & 1) != 0 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
  return result;
}

BOOL CMMsl::PdrMLModelOutput::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  double *v4;
  uint64_t v5;
  double v6;
  _BOOL8 result;
  BOOL v8;

  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    return 0;
  }
  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v4 = *(double **)(a2 + 8);
  if (v2 - v3 != *(_QWORD *)(a2 + 16) - (_QWORD)v4)
    return 0;
  if (v3 == v2)
    return 1;
  v5 = v3 + 8;
  do
  {
    v6 = *v4++;
    result = *(double *)(v5 - 8) == v6;
    v8 = *(double *)(v5 - 8) != v6 || v5 == v2;
    v5 += 8;
  }
  while (!v8);
  return result;
}

BOOL CMMsl::WorkoutRecorderAveragedALSData::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::AveragedALSData::operator==(v2, v3);
  return result;
}

BOOL CMMsl::StrideCalEntry::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 92);
  v3 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 92) & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 92) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 92) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 92) & 0x800) == 0 || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 92) & 0x800) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 92) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 92) & 0x400) == 0 || *(_DWORD *)(a1 + 84) != *(_DWORD *)(a2 + 84))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 92) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x200) == 0;
  if ((*(_WORD *)(a1 + 92) & 0x200) != 0)
    return (*(_WORD *)(a2 + 92) & 0x200) != 0 && *(_DWORD *)(a1 + 80) == *(_DWORD *)(a2 + 80);
  return v4;
}

BOOL CMMsl::RunningSpeedKFResult::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 188);
  v3 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(double *)(a1 + 160) != *(double *)(a2 + 160))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(double *)(a1 + 152) != *(double *)(a2 + 152))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(unsigned __int8 *)(a1 + 184) != *(unsigned __int8 *)(a2 + 184))
      return 0;
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(double *)(a1 + 144) != *(double *)(a2 + 144))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(double *)(a1 + 136) != *(double *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(unsigned __int8 *)(a1 + 182) != *(unsigned __int8 *)(a2 + 182))
      return 0;
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(unsigned __int8 *)(a1 + 183) != *(unsigned __int8 *)(a2 + 183))
      return 0;
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(double *)(a1 + 128) != *(double *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(double *)(a1 + 120) != *(double *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(_DWORD *)(a1 + 176) != *(_DWORD *)(a2 + 176))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(_DWORD *)(a1 + 168) != *(_DWORD *)(a2 + 168))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(_DWORD *)(a1 + 172) != *(_DWORD *)(a2 + 172))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(unsigned __int8 *)(a1 + 180) != *(unsigned __int8 *)(a2 + 180))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(double *)(a1 + 112) != *(double *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(double *)(a1 + 96) != *(double *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x1000000) == 0;
  if ((v2 & 0x1000000) != 0)
    return (v3 & 0x1000000) != 0 && *(unsigned __int8 *)(a1 + 181) == *(unsigned __int8 *)(a2 + 181);
  return v4;
}

BOOL CMMsl::ProxPDP::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 48);
  v3 = *(_WORD *)(a2 + 48);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 48) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 48) & 0x200) == 0 || *(unsigned __int8 *)(a1 + 45) != *(unsigned __int8 *)(a2 + 45))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 48) & 0x200) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x100) == 0;
  if ((*(_WORD *)(a1 + 48) & 0x100) != 0)
    return (*(_WORD *)(a2 + 48) & 0x100) != 0 && *(unsigned __int8 *)(a1 + 44) == *(unsigned __int8 *)(a2 + 44);
  return v4;
}

BOOL CMMsl::KeyboardMotionFeatures::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 28) & 8) == 0;
  if ((*(_BYTE *)(a1 + 28) & 8) != 0)
    return (*(_BYTE *)(a2 + 28) & 8) != 0 && *(float *)(a1 + 24) == *(float *)(a2 + 24);
  return v2;
}

BOOL CMMsl::KeyboardMotionState::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v2;
}

BOOL CMMsl::KeyboardKeyPress::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
  return v2;
}

BOOL CMMsl::WakeGestureNotification::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 44) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 0x10) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 8) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 0x20) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 0x20) == 0 || *(unsigned __int8 *)(a1 + 40) != *(unsigned __int8 *)(a2 + 40))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 0x20) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 44) & 1) == 0;
  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
    return (*(_BYTE *)(a2 + 44) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  return v2;
}

BOOL CMMsl::ProxBaselineEstimatorState::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 88);
  v3 = *(_DWORD *)(a2 + 88);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(unsigned __int8 *)(a1 + 84) != *(unsigned __int8 *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  v4 = (*(_DWORD *)(a2 + 88) & 0x200) == 0;
  if ((v2 & 0x200) != 0)
    return (v3 & 0x200) != 0 && *(float *)(a1 + 48) == *(float *)(a2 + 48);
  return v4;
}

BOOL CMMsl::RhythmicGnssOperatorStatus::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 2) == 0 || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 8) == 0 || *(unsigned __int8 *)(a1 + 20) != *(unsigned __int8 *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 4) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) == 0 || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 24) & 0x10) == 0;
  if ((*(_BYTE *)(a1 + 24) & 0x10) != 0)
    return (*(_BYTE *)(a2 + 24) & 0x10) != 0 && *(unsigned __int8 *)(a1 + 21) == *(unsigned __int8 *)(a2 + 21);
  return v2;
}

BOOL CMMsl::KeyboardMotionTrackpad::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
  return v2;
}

BOOL CMMsl::KeyboardAttached::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
  return v2;
}

BOOL CMMsl::Skeleton2D::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BOOL8 result;

  v2 = *(uint64_t **)(a1 + 16);
  v3 = *(uint64_t **)(a1 + 24);
  v4 = *(uint64_t **)(a2 + 16);
  if ((char *)v3 - (char *)v2 != *(_QWORD *)(a2 + 24) - (_QWORD)v4)
    return 0;
  while (v2 != v3)
  {
    result = CMMsl::Skeleton2DJoint::operator==(*v2, *v4);
    if (!result)
      return result;
    ++v2;
    ++v4;
  }
  if ((*(_BYTE *)(a1 + 48) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 48) & 2) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 48) & 2) != 0)
  {
    return 0;
  }
  result = (*(_BYTE *)(a2 + 48) & 1) == 0;
  if ((*(_BYTE *)(a1 + 48) & 1) == 0)
    return result;
  return (*(_BYTE *)(a2 + 48) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
}

BOOL CMMsl::Skeleton3DRetargeted::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BOOL8 result;

  v2 = *(uint64_t **)(a1 + 16);
  v3 = *(uint64_t **)(a1 + 24);
  v4 = *(uint64_t **)(a2 + 16);
  if ((char *)v3 - (char *)v2 != *(_QWORD *)(a2 + 24) - (_QWORD)v4)
    return 0;
  while (v2 != v3)
  {
    result = CMMsl::SkeletonJoint::operator==(*v2, *v4);
    if (!result)
      return result;
    ++v2;
    ++v4;
  }
  if ((*(_BYTE *)(a1 + 48) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 48) & 2) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 48) & 2) != 0)
  {
    return 0;
  }
  result = (*(_BYTE *)(a2 + 48) & 1) == 0;
  if ((*(_BYTE *)(a1 + 48) & 1) == 0)
    return result;
  return (*(_BYTE *)(a2 + 48) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
}

BOOL CMMsl::Skeleton3DLifted::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BOOL8 result;

  v2 = *(uint64_t **)(a1 + 16);
  v3 = *(uint64_t **)(a1 + 24);
  v4 = *(uint64_t **)(a2 + 16);
  if ((char *)v3 - (char *)v2 != *(_QWORD *)(a2 + 24) - (_QWORD)v4)
    return 0;
  while (v2 != v3)
  {
    result = CMMsl::Skeleton3DLiftedJoint::operator==(*v2, *v4);
    if (!result)
      return result;
    ++v2;
    ++v4;
  }
  if ((*(_BYTE *)(a1 + 48) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 48) & 2) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 48) & 2) != 0)
  {
    return 0;
  }
  result = (*(_BYTE *)(a2 + 48) & 1) == 0;
  if ((*(_BYTE *)(a1 + 48) & 1) == 0)
    return result;
  return (*(_BYTE *)(a2 + 48) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
}

BOOL CMMsl::WatchHeartRateData::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a2 + 24);
  result = v3 == 0;
  if (!v2)
    return result;
  return v3 && CMMsl::OnsetHeartRateData::operator==(v2, v3);
}

BOOL CMMsl::WatchActiveCalories::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 28) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 28) & 1) == 0;
  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
    return (*(_BYTE *)(a2 + 28) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  return v2;
}

BOOL CMMsl::WatchBasalCalories::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 28) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 28) & 1) == 0;
  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
    return (*(_BYTE *)(a2 + 28) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  return v2;
}

BOOL CMMsl::TrackRunData::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 40) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 0x10) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 8) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 0x20) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 0x20) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 40) & 0x40) == 0;
  if ((*(_BYTE *)(a1 + 40) & 0x40) != 0)
    return (*(_BYTE *)(a2 + 40) & 0x40) != 0 && *(unsigned __int8 *)(a1 + 36) == *(unsigned __int8 *)(a2 + 36);
  return v2;
}

BOOL CMMsl::MapsRouteHintData::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 20);
  v3 = *(_WORD *)(a2 + 20);
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(unsigned __int8 *)(a1 + 15) != *(unsigned __int8 *)(a2 + 15))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(unsigned __int8 *)(a1 + 9) != *(unsigned __int8 *)(a2 + 9))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(unsigned __int8 *)(a1 + 11) != *(unsigned __int8 *)(a2 + 11))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(unsigned __int8 *)(a1 + 13) != *(unsigned __int8 *)(a2 + 13))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(unsigned __int8 *)(a1 + 14) != *(unsigned __int8 *)(a2 + 14))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(unsigned __int8 *)(a1 + 12) != *(unsigned __int8 *)(a2 + 12))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 20) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 20) & 0x100) == 0 || *(unsigned __int8 *)(a1 + 16) != *(unsigned __int8 *)(a2 + 16))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 20) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(unsigned __int8 *)(a1 + 10) != *(unsigned __int8 *)(a2 + 10))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  v4 = (v3 & 1) == 0;
  if ((v2 & 1) != 0)
    return (v3 & 1) != 0 && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8);
  return v4;
}

BOOL CMMsl::WorkoutRecorderFitnessMachineData::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::FitnessMachineData::operator==(v2, v3);
  return result;
}

BOOL CMMsl::PedestrianFenceExit::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 32) & 8) == 0;
  if ((*(_BYTE *)(a1 + 32) & 8) != 0)
    return (*(_BYTE *)(a2 + 32) & 8) != 0 && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28);
  return v2;
}

BOOL CMMsl::PhysicalEffortInput::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 28) & 4) == 0;
  if ((*(_BYTE *)(a1 + 28) & 4) != 0)
    return (*(_BYTE *)(a2 + 28) & 4) != 0 && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24);
  return v2;
}

BOOL CMMsl::PhysicalEffortSample::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 44) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 8) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 0x10) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 0x10) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 44) & 0x20) == 0;
  if ((*(_BYTE *)(a1 + 44) & 0x20) != 0)
    return (*(_BYTE *)(a2 + 44) & 0x20) != 0 && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40);
  return v2;
}

BOOL CMMsl::PedestrianCalorieModelDebugging::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(unsigned __int16 *)(a1 + 116);
  v3 = *(unsigned __int16 *)(a2 + 116);
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(_DWORD *)(a1 + 108) != *(_DWORD *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(double *)(a1 + 96) != *(double *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v3 & v2 & 0x8000) != 0)
  {
    if (*(unsigned __int8 *)(a1 + 113) != *(unsigned __int8 *)(a2 + 113))
      return 0;
  }
  else if (((v3 | v2) & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(unsigned __int8 *)(a1 + 112) != *(unsigned __int8 *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x1000) == 0;
  if ((v2 & 0x1000) != 0)
    return (v3 & 0x1000) != 0 && *(_DWORD *)(a1 + 104) == *(_DWORD *)(a2 + 104);
  return v4;
}

BOOL CMMsl::WorkoutActivity::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 16) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 16) & 2) == 0 || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 16) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 16) & 1) == 0;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    return (*(_BYTE *)(a2 + 16) & 1) != 0 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
  return v2;
}

BOOL CMMsl::PencilDeviceMotion::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  float *v6;
  float *v7;
  float *v8;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a2 + 32);
  if (v4)
  {
    if (!v5 || !CMMsl::AuxiliaryDeviceMotion::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v7 = *(float **)(a1 + 8);
  v6 = *(float **)(a1 + 16);
  v8 = *(float **)(a2 + 8);
  if ((char *)v6 - (char *)v7 == *(_QWORD *)(a2 + 16) - (_QWORD)v8)
  {
    while (v7 != v6)
    {
      if (*v7 != *v8)
        return 0;
      ++v7;
      ++v8;
    }
    if ((*(_BYTE *)(a1 + 48) & 2) != 0)
    {
      if ((*(_BYTE *)(a2 + 48) & 2) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
        return 0;
    }
    else if ((*(_BYTE *)(a2 + 48) & 2) != 0)
    {
      return 0;
    }
    result = (*(_BYTE *)(a2 + 48) & 1) == 0;
    if ((*(_BYTE *)(a1 + 48) & 1) == 0)
      return result;
    if ((*(_BYTE *)(a2 + 48) & 1) != 0 && *(float *)(a1 + 40) == *(float *)(a2 + 40))
      return 1;
  }
  return 0;
}

BOOL CMMsl::PencilFusionResult::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 76);
  v3 = *(_WORD *)(a2 + 76);
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x100) == 0;
  if ((*(_WORD *)(a1 + 76) & 0x100) != 0)
    return (*(_WORD *)(a2 + 76) & 0x100) != 0 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)(a2 + 72);
  return v4;
}

BOOL CMMsl::SteadinessModelHarmonicFeatures::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 248);
  v3 = *(_DWORD *)(a2 + 248);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(double *)(a1 + 96) != *(double *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(double *)(a1 + 112) != *(double *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(double *)(a1 + 120) != *(double *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(double *)(a1 + 128) != *(double *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(double *)(a1 + 136) != *(double *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(double *)(a1 + 144) != *(double *)(a2 + 144))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(double *)(a1 + 152) != *(double *)(a2 + 152))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(double *)(a1 + 160) != *(double *)(a2 + 160))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(double *)(a1 + 168) != *(double *)(a2 + 168))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(double *)(a1 + 176) != *(double *)(a2 + 176))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(double *)(a1 + 184) != *(double *)(a2 + 184))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(double *)(a1 + 192) != *(double *)(a2 + 192))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(double *)(a1 + 200) != *(double *)(a2 + 200))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(double *)(a1 + 216) != *(double *)(a2 + 216))
      return 0;
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(double *)(a1 + 224) != *(double *)(a2 + 224))
      return 0;
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(double *)(a1 + 232) != *(double *)(a2 + 232))
      return 0;
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(double *)(a1 + 240) != *(double *)(a2 + 240))
      return 0;
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x2000000) == 0;
  if ((v2 & 0x2000000) != 0)
    return (v3 & 0x2000000) != 0 && *(double *)(a1 + 208) == *(double *)(a2 + 208);
  return v4;
}

BOOL CMMsl::PencilFusionReplayResult::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  double *v6;
  double *v7;
  double *v8;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a2 + 48);
  if (v4)
  {
    if (!v5 || !CMMsl::PencilFusionResult::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 64) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 64) & 4) == 0 || *(_QWORD *)(a1 + 56) != *(_QWORD *)(a2 + 56))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 64) & 4) != 0)
  {
    return 0;
  }
  v7 = *(double **)(a1 + 8);
  v6 = *(double **)(a1 + 16);
  v8 = *(double **)(a2 + 8);
  if ((char *)v6 - (char *)v7 == *(_QWORD *)(a2 + 16) - (_QWORD)v8)
  {
    while (v7 != v6)
    {
      if (*v7 != *v8)
        return 0;
      ++v7;
      ++v8;
    }
    if ((*(_BYTE *)(a1 + 64) & 1) != 0)
    {
      if ((*(_BYTE *)(a2 + 64) & 1) == 0 || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
        return 0;
    }
    else if ((*(_BYTE *)(a2 + 64) & 1) != 0)
    {
      return 0;
    }
    result = (*(_BYTE *)(a2 + 64) & 2) == 0;
    if ((*(_BYTE *)(a1 + 64) & 2) == 0)
      return result;
    if ((*(_BYTE *)(a2 + 64) & 2) != 0 && *(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40))
      return 1;
  }
  return 0;
}

BOOL CMMsl::MobilitySmoothedGaitMetrics::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 0x40) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 0x20) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 0x10) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 40) & 2) == 0;
  if ((*(_BYTE *)(a1 + 40) & 2) != 0)
    return (*(_BYTE *)(a2 + 40) & 2) != 0 && *(float *)(a1 + 16) == *(float *)(a2 + 16);
  return v2;
}

BOOL CMMsl::WatchEnclosureMaterial::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 24) & 1) == 0;
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    return (*(_BYTE *)(a2 + 24) & 1) != 0 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  return v2;
}

BOOL CMMsl::MotionLoiAltitudeData::operator==(_QWORD *a1, _QWORD *a2)
{
  double *v2;
  double *v3;
  double *v4;
  uint64_t v5;
  uint64_t v6;
  double *v7;
  uint64_t v8;
  double v9;
  _BOOL8 result;
  BOOL v11;

  v3 = (double *)a1[1];
  v2 = (double *)a1[2];
  v4 = (double *)a2[1];
  if ((char *)v2 - (char *)v3 != a2[2] - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v6 = a1[4];
  v5 = a1[5];
  v7 = (double *)a2[4];
  if (v5 - v6 != a2[5] - (_QWORD)v7)
    return 0;
  if (v6 == v5)
    return 1;
  v8 = v6 + 8;
  do
  {
    v9 = *v7++;
    result = *(double *)(v8 - 8) == v9;
    v11 = *(double *)(v8 - 8) != v9 || v8 == v5;
    v8 += 8;
  }
  while (!v11);
  return result;
}

BOOL CMMsl::PostureJoint::operator==(uint64_t a1, uint64_t a2)
{
  double *v2;
  double *v3;
  double *v4;
  double *v5;
  double *v6;
  double *v7;
  _BOOL8 v8;

  v3 = *(double **)(a1 + 8);
  v2 = *(double **)(a1 + 16);
  v4 = *(double **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 16) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v6 = *(double **)(a1 + 32);
  v5 = *(double **)(a1 + 40);
  v7 = *(double **)(a2 + 32);
  if ((char *)v5 - (char *)v6 != *(_QWORD *)(a2 + 40) - (_QWORD)v7)
    return 0;
  while (v6 != v5)
  {
    if (*v6 != *v7)
      return 0;
    ++v6;
    ++v7;
  }
  v8 = (*(_BYTE *)(a2 + 60) & 1) == 0;
  if ((*(_BYTE *)(a1 + 60) & 1) != 0)
    return (*(_BYTE *)(a2 + 60) & 1) != 0 && *(_DWORD *)(a1 + 56) == *(_DWORD *)(a2 + 56);
  return v8;
}

BOOL CMMsl::PostureSkeleton::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;
  BOOL v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(uint64_t **)(a2 + 8);
  if (v3 - v2 != *(_QWORD *)(a2 + 16) - (_QWORD)v4)
    return 0;
  if (v2 == v3)
    return 1;
  v5 = v2 + 8;
  do
  {
    v6 = *v4++;
    result = CMMsl::PostureJoint::operator==(*(_QWORD *)(v5 - 8), v6);
    v8 = !result || v5 == v3;
    v5 += 8;
  }
  while (!v8);
  return result;
}

BOOL CMMsl::WorkoutRecorderFaceCovered::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::FaceCovered::operator==(v2, v3);
  return result;
}

BOOL CMMsl::StreamingHighFrequencyHeartRateData::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::OnsetHeartRateData::operator==(v2, v3);
  return result;
}

BOOL CMMsl::UltraFastAccel::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    if (!v5 || !CMMsl::Accel::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  result = (*(_BYTE *)(a2 + 24) & 1) == 0;
  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
    return result;
  return (*(_BYTE *)(a2 + 24) & 1) != 0 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
}

BOOL CMMsl::PressureOscarEmu::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::Pressure::operator==(v2, v3);
  return result;
}

BOOL CMMsl::PressureFiltered::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::Pressure::operator==(v2, v3);
  return result;
}

BOOL CMMsl::Prox::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v2;
}

BOOL CMMsl::TouchOscarEmu::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
  return v2;
}

BOOL CMMsl::MotionStateUpdate::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 192);
  v3 = *(_QWORD *)(a2 + 192);
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(_DWORD *)(a1 + 100) != *(_DWORD *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(_DWORD *)(a1 + 104) != *(_DWORD *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(_DWORD *)(a1 + 108) != *(_DWORD *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(_DWORD *)(a1 + 84) != *(_DWORD *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(_DWORD *)(a1 + 148) != *(_DWORD *)(a2 + 148))
      return 0;
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(_DWORD *)(a1 + 92) != *(_DWORD *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(_DWORD *)(a1 + 136) != *(_DWORD *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  v7 = *(_QWORD *)(a1 + 192);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(float *)(a1 + 156) != *(float *)(a2 + 156))
      return 0;
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(_DWORD *)(a1 + 144) != *(_DWORD *)(a2 + 144))
      return 0;
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v7 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v7 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v7 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_QWORD *)(a1 + 48) != *(_QWORD *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v7 & 0x800000000) != 0)
  {
    if ((v3 & 0x800000000) == 0 || *(_DWORD *)(a1 + 180) != *(_DWORD *)(a2 + 180))
      return 0;
  }
  else if ((v3 & 0x800000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(_DWORD *)(a1 + 160) != *(_DWORD *)(a2 + 160))
      return 0;
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v7 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(_DWORD *)(a1 + 120) != *(_DWORD *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v7 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(_DWORD *)(a1 + 116) != *(_DWORD *)(a2 + 116))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v7 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(_DWORD *)(a1 + 112) != *(_DWORD *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a2 + 32);
  if (v4)
  {
    if (!v5 || !CMMsl::VehicularFlagsData::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  if ((v7 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v7 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v7 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140))
      return 0;
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v7 & 0x1000000000) != 0)
  {
    if ((v3 & 0x1000000000) == 0 || *(_DWORD *)(a1 + 184) != *(_DWORD *)(a2 + 184))
      return 0;
  }
  else if ((v3 & 0x1000000000) != 0)
  {
    return 0;
  }
  if ((v7 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_QWORD *)(a1 + 56) != *(_QWORD *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v7 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(_DWORD *)(a1 + 152) != *(_DWORD *)(a2 + 152))
      return 0;
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v7 & 0x2000000000) != 0)
  {
    if ((v3 & 0x2000000000) == 0 || *(_DWORD *)(a1 + 188) != *(_DWORD *)(a2 + 188))
      return 0;
  }
  else if ((v3 & 0x2000000000) != 0)
  {
    return 0;
  }
  if ((v7 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v7 & 0x80000000) != 0)
  {
    if ((v3 & 0x80000000) == 0 || *(float *)(a1 + 164) != *(float *)(a2 + 164))
      return 0;
  }
  else if ((v3 & 0x80000000) != 0)
  {
    return 0;
  }
  if ((v7 & 0x100000000) != 0)
  {
    if ((v3 & 0x100000000) == 0 || *(float *)(a1 + 168) != *(float *)(a2 + 168))
      return 0;
  }
  else if ((v3 & 0x100000000) != 0)
  {
    return 0;
  }
  if ((v7 & 0x200000000) != 0)
  {
    if ((v3 & 0x200000000) == 0 || *(float *)(a1 + 172) != *(float *)(a2 + 172))
      return 0;
  }
  else if ((v3 & 0x200000000) != 0)
  {
    return 0;
  }
  result = (v3 & 0x400000000) == 0;
  if ((v7 & 0x400000000) == 0)
    return result;
  return (v3 & 0x400000000) != 0 && *(_DWORD *)(a1 + 176) == *(_DWORD *)(a2 + 176);
}

BOOL CMMsl::PressureGps::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::Pressure::operator==(v2, v3);
  return result;
}

BOOL CMMsl::SessionOverride::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v2;
}

BOOL CMMsl::LocationOscarEmu::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 100);
  v3 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 100) & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 100) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 100) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 100) & 0x1000) == 0 || *(_DWORD *)(a1 + 96) != *(_DWORD *)(a2 + 96))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 100) & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 100) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 100) & 0x200) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 100) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 100) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 100) & 0x400) == 0 || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 100) & 0x400) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x800) == 0;
  if ((*(_WORD *)(a1 + 100) & 0x800) != 0)
    return (*(_WORD *)(a2 + 100) & 0x800) != 0 && *(_DWORD *)(a1 + 92) == *(_DWORD *)(a2 + 92);
  return v4;
}

BOOL CMMsl::MotionHint::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 24) & 4) == 0;
  if ((*(_BYTE *)(a1 + 24) & 4) != 0)
    return (*(_BYTE *)(a2 + 24) & 4) != 0 && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
  return v2;
}

BOOL CMMsl::NonlinearBiasFit::operator==(uint64_t a1, uint64_t a2)
{
  float *v2;
  float *v3;
  float *v4;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  const void *v13;
  size_t v14;
  const void *v15;
  const void *v16;
  size_t v17;
  const void *v18;
  const void *v19;
  const void *v20;
  size_t v21;
  const void *v22;
  const void *v23;
  size_t v24;

  v3 = *(float **)(a1 + 128);
  v2 = *(float **)(a1 + 136);
  v4 = *(float **)(a2 + 128);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 136) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v8 = *(float **)(a1 + 104);
  v7 = *(float **)(a1 + 112);
  v9 = *(float **)(a2 + 104);
  if ((char *)v7 - (char *)v8 != *(_QWORD *)(a2 + 112) - (_QWORD)v9)
    return 0;
  while (v8 != v7)
  {
    if (*v8 != *v9)
      return 0;
    ++v8;
    ++v9;
  }
  v11 = *(float **)(a1 + 152);
  v10 = *(float **)(a1 + 160);
  v12 = *(float **)(a2 + 152);
  if ((char *)v10 - (char *)v11 != *(_QWORD *)(a2 + 160) - (_QWORD)v12)
    return 0;
  while (v11 != v10)
  {
    if (*v11 != *v12)
      return 0;
    ++v11;
    ++v12;
  }
  if ((*(_BYTE *)(a1 + 180) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 180) & 1) == 0 || *(float *)(a1 + 176) != *(float *)(a2 + 176))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 180) & 1) != 0)
  {
    return 0;
  }
  v13 = *(const void **)(a1 + 80);
  v14 = *(_QWORD *)(a1 + 88) - (_QWORD)v13;
  v15 = *(const void **)(a2 + 80);
  if (v14 == *(_QWORD *)(a2 + 88) - (_QWORD)v15 && !memcmp(v13, v15, v14))
  {
    v16 = *(const void **)(a1 + 8);
    v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
    v18 = *(const void **)(a2 + 8);
    if (v17 == *(_QWORD *)(a2 + 16) - (_QWORD)v18 && !memcmp(v16, v18, v17))
    {
      v19 = *(const void **)(a1 + 32);
      v20 = *(const void **)(a2 + 32);
      v21 = *(_QWORD *)(a1 + 40) - (_QWORD)v19;
      if (v21 == *(_QWORD *)(a2 + 40) - (_QWORD)v20 && !memcmp(v19, v20, v21))
      {
        v22 = *(const void **)(a1 + 56);
        v23 = *(const void **)(a2 + 56);
        v24 = *(_QWORD *)(a1 + 64) - (_QWORD)v22;
        if (v24 == *(_QWORD *)(a2 + 64) - (_QWORD)v23)
          return memcmp(v22, v23, v24) == 0;
      }
    }
  }
  return 0;
}

BOOL CMMsl::NatalieData::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 68);
  v3 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x400) == 0 || *(unsigned __int8 *)(a1 + 65) != *(unsigned __int8 *)(a2 + 65))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 68) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x100) == 0 || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 68) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x200) == 0;
  if ((*(_WORD *)(a1 + 68) & 0x200) != 0)
    return (*(_WORD *)(a2 + 68) & 0x200) != 0 && *(unsigned __int8 *)(a1 + 64) == *(unsigned __int8 *)(a2 + 64);
  return v4;
}

BOOL CMMsl::WorkoutEvent::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 64);
  v3 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x200) == 0 || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 64) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x100) == 0 || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 64) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x20) == 0;
  if ((v2 & 0x20) != 0)
    return (v3 & 0x20) != 0 && *(_DWORD *)(a1 + 44) == *(_DWORD *)(a2 + 44);
  return v4;
}

BOOL CMMsl::OnsetHeartRateData::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 68);
  v3 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x200) == 0 || *(unsigned __int8 *)(a1 + 64) != *(unsigned __int8 *)(a2 + 64))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 68) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x100) == 0 || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 68) & 0x100) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x20) == 0;
  if ((v2 & 0x20) != 0)
    return (v3 & 0x20) != 0 && *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 48);
  return v4;
}

BOOL CMMsl::MotionWifiLocation::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::MotionGPSLocation::operator==(v2, v3);
  return result;
}

BOOL CMMsl::StrideCalBin::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 8) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 0x10) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 0x10) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 40) & 4) == 0;
  if ((*(_BYTE *)(a1 + 40) & 4) != 0)
    return (*(_BYTE *)(a2 + 40) & 4) != 0 && *(double *)(a1 + 24) == *(double *)(a2 + 24);
  return v2;
}

BOOL CMMsl::Odometer::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 100);
  v3 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 100) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 100) & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 100) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 100) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 100) & 0x400) == 0 || *(_DWORD *)(a1 + 84) != *(_DWORD *)(a2 + 84))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 100) & 0x400) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 100) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 100) & 0x800) == 0 || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 100) & 0x800) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 100) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 100) & 0x1000) == 0 || *(_DWORD *)(a1 + 92) != *(_DWORD *)(a2 + 92))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 100) & 0x1000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 100) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 100) & 0x200) == 0 || *(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 100) & 0x200) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x2000) == 0;
  if ((*(_WORD *)(a1 + 100) & 0x2000) != 0)
    return (*(_WORD *)(a2 + 100) & 0x2000) != 0 && *(unsigned __int8 *)(a1 + 96) == *(unsigned __int8 *)(a2 + 96);
  return v4;
}

BOOL CMMsl::MetsInfo::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) == 0 || *(float *)(a1 + 8) != *(float *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 4) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 8) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 0x10) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 0x10) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 28) & 2) == 0;
  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
    return (*(_BYTE *)(a2 + 28) & 2) != 0 && *(float *)(a1 + 12) == *(float *)(a2 + 12);
  return v2;
}

BOOL CMMsl::VibrationEvent::operator==(uint64_t a1, uint64_t a2)
{
  char v3;
  _BOOL8 result;

  v3 = *(_BYTE *)(a1 + 12);
  result = (*(_BYTE *)(a2 + 12) & 1) == 0;
  if ((v3 & 1) != 0)
    return (*(_BYTE *)(a2 + 12) & 1) != 0 && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8);
  return result;
}

BOOL CMMsl::StepCadenceToStrideLengthBin::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 8) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 0x10) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 0x10) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 40) & 4) == 0;
  if ((*(_BYTE *)(a1 + 40) & 4) != 0)
    return (*(_BYTE *)(a2 + 40) & 4) != 0 && *(double *)(a1 + 24) == *(double *)(a2 + 24);
  return v2;
}

BOOL CMMsl::WatchOrientationSettings::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 16) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 16) & 2) == 0 || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 16) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 16) & 1) == 0;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    return (*(_BYTE *)(a2 + 16) & 1) != 0 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
  return v2;
}

BOOL CMMsl::MotionWifiAssociation::operator==(uint64_t a1, uint64_t a2)
{
  char v3;
  _BOOL8 result;

  v3 = *(_BYTE *)(a1 + 12);
  result = (*(_BYTE *)(a2 + 12) & 1) == 0;
  if ((v3 & 1) != 0)
    return (*(_BYTE *)(a2 + 12) & 1) != 0 && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8);
  return result;
}

BOOL CMMsl::MotionLoiData::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 92);
  v3 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 92) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 92) & 0x200) == 0 || *(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 92) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 92) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 92) & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 92) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 92) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 92) & 0x400) == 0 || *(_DWORD *)(a1 + 84) != *(_DWORD *)(a2 + 84))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 92) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x800) == 0;
  if ((*(_WORD *)(a1 + 92) & 0x800) != 0)
    return (*(_WORD *)(a2 + 92) & 0x800) != 0 && *(unsigned __int8 *)(a1 + 88) == *(unsigned __int8 *)(a2 + 88);
  return v4;
}

BOOL CMMsl::PressureFilteredNoTemperature::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(float *)(a1 + 16) == *(float *)(a2 + 16);
  return v2;
}

BOOL CMMsl::TapDetect::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 64);
  v3 = *(_WORD *)(a2 + 64);
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x400) == 0 || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 64) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x200) == 0 || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 64) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x800) == 0 || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 64) & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x100) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 64) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  v4 = (v3 & 1) == 0;
  if ((v2 & 1) != 0)
    return (v3 & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  return v4;
}

BOOL CMMsl::TapAccept::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 44) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 4) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 0x20) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 0x20) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 0x10) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 44) & 0x40) == 0;
  if ((*(_BYTE *)(a1 + 44) & 0x40) != 0)
    return (*(_BYTE *)(a2 + 44) & 0x40) != 0 && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40);
  return v2;
}

BOOL CMMsl::RelativeDeviceMotionInternal::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  BOOL v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  _BOOL8 v19;

  v2 = *(_DWORD *)(a1 + 164);
  v3 = *(_DWORD *)(a2 + 164);
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(float *)(a1 + 144) != *(float *)(a2 + 144))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 148) != *(float *)(a2 + 148))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  v5 = *(float **)(a1 + 32);
  v4 = *(float **)(a1 + 40);
  v6 = *(float **)(a2 + 32);
  if ((char *)v4 - (char *)v5 != *(_QWORD *)(a2 + 40) - (_QWORD)v6)
    return 0;
  while (v5 != v4)
  {
    if (*v5 != *v6)
      return 0;
    ++v5;
    ++v6;
  }
  v8 = *(float **)(a1 + 8);
  v7 = *(float **)(a1 + 16);
  v9 = *(float **)(a2 + 8);
  if ((char *)v7 - (char *)v8 != *(_QWORD *)(a2 + 16) - (_QWORD)v9)
    return 0;
  while (1)
  {
    v10 = __OFSUB__(v8, v7);
    if (v8 == v7)
      break;
    if (*v8 != *v9)
      return 0;
    ++v8;
    ++v9;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0)
      return 0;
    v11 = *(unsigned __int8 *)(a1 + 157);
    v12 = *(unsigned __int8 *)(a2 + 157);
    v10 = __OFSUB__(v11, v12);
    if (v11 != v12)
      return 0;
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0)
      return 0;
    v13 = *(unsigned __int8 *)(a1 + 152);
    v14 = *(unsigned __int8 *)(a2 + 152);
    v10 = __OFSUB__(v13, v14);
    if (v13 != v14)
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0)
      return 0;
    v15 = *(unsigned __int8 *)(a1 + 154);
    v16 = *(unsigned __int8 *)(a2 + 154);
    v10 = __OFSUB__(v15, v16);
    if (v15 != v16)
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0)
      return 0;
    v10 = 0;
    if (*(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0)
      return 0;
    v10 = 0;
    if (*(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0)
      return 0;
    v10 = 0;
    if (*(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0)
      return 0;
    v17 = *(unsigned __int8 *)(a1 + 159);
    v18 = *(unsigned __int8 *)(a2 + 159);
    v10 = __OFSUB__(v17, v18);
    if (v17 != v18)
      return 0;
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v3 & v2) < 0 != v10)
  {
    if (*(unsigned __int8 *)(a1 + 161) != *(unsigned __int8 *)(a2 + 161))
      return 0;
  }
  else if ((v3 | v2) < 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(unsigned __int8 *)(a1 + 153) != *(unsigned __int8 *)(a2 + 153))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(_DWORD *)(a1 + 136) != *(_DWORD *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(unsigned __int8 *)(a1 + 158) != *(unsigned __int8 *)(a2 + 158))
      return 0;
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(unsigned __int8 *)(a1 + 156) != *(unsigned __int8 *)(a2 + 156))
      return 0;
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(unsigned __int8 *)(a1 + 160) != *(unsigned __int8 *)(a2 + 160))
      return 0;
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(unsigned __int8 *)(a1 + 155) != *(unsigned __int8 *)(a2 + 155))
      return 0;
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  v19 = (v3 & 0x20000) == 0;
  if ((v2 & 0x20000) != 0)
    return (v3 & 0x20000) != 0 && *(_DWORD *)(a1 + 132) == *(_DWORD *)(a2 + 132);
  return v19;
}

BOOL CMMsl::RelativeGravityCorrection::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !CMMsl::DeviceMotionCorrection::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  result = (*(_BYTE *)(a2 + 20) & 1) == 0;
  if ((*(_BYTE *)(a1 + 20) & 1) == 0)
    return result;
  return (*(_BYTE *)(a2 + 20) & 1) != 0 && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
}

BOOL CMMsl::RelativeGravityConstraints::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 48);
  v3 = *(_WORD *)(a2 + 48);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 48) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 48) & 0x100) == 0 || *(unsigned __int8 *)(a1 + 44) != *(unsigned __int8 *)(a2 + 44))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 48) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  v4 = (v3 & 4) == 0;
  if ((v2 & 4) != 0)
    return (v3 & 4) != 0 && *(float *)(a1 + 20) == *(float *)(a2 + 20);
  return v4;
}

BOOL CMMsl::ZeroVelocityCorrection::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::DeviceMotionCorrection::operator==(v2, v3);
  return result;
}

BOOL CMMsl::PredictedRelativeDeviceMotion::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 80);
  v3 = *(_WORD *)(a2 + 80);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 80) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 80) & 0x100) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 80) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 80) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 80) & 0x200) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 80) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 80) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 80) & 0x400) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 80) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 80) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 80) & 0x800) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 80) & 0x800) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 80) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 80) & 0x1000) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 80) & 0x1000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 80) & 0x2000) != 0)
  {
    if ((*(_WORD *)(a2 + 80) & 0x2000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 80) & 0x2000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 80) & 0x4000) != 0)
  {
    if ((*(_WORD *)(a2 + 80) & 0x4000) == 0 || *(unsigned __int8 *)(a1 + 76) != *(unsigned __int8 *)(a2 + 76))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 80) & 0x4000) != 0)
  {
    return 0;
  }
  v4 = (v3 & 2) == 0;
  if ((v2 & 2) != 0)
    return (v3 & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  return v4;
}

BOOL CMMsl::MovementStatsSignal::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 0x40) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 0x20) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 40) & 0x10) == 0;
  if ((*(_BYTE *)(a1 + 40) & 0x10) != 0)
    return (*(_BYTE *)(a2 + 40) & 0x10) != 0 && *(float *)(a1 + 28) == *(float *)(a2 + 28);
  return v2;
}

BOOL CMMsl::MovementStatsGravityProjection::operator==(uint64_t a1, uint64_t a2)
{
  float *v2;
  float *v3;
  float *v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  float v9;
  _BOOL8 result;
  BOOL v11;

  if ((*(_BYTE *)(a1 + 76) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 76) & 2) == 0 || *(_QWORD *)(a1 + 64) != *(_QWORD *)(a2 + 64))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 76) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 76) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 76) & 1) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 76) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 76) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 76) & 4) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 76) & 4) != 0)
  {
    return 0;
  }
  v3 = *(float **)(a1 + 32);
  v2 = *(float **)(a1 + 40);
  v4 = *(float **)(a2 + 32);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 40) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(float **)(a2 + 8);
  if (v5 - v6 != *(_QWORD *)(a2 + 16) - (_QWORD)v7)
    return 0;
  if (v6 == v5)
    return 1;
  v8 = v6 + 4;
  do
  {
    v9 = *v7++;
    result = *(float *)(v8 - 4) == v9;
    v11 = *(float *)(v8 - 4) != v9 || v8 == v5;
    v8 += 4;
  }
  while (!v11);
  return result;
}

BOOL CMMsl::VisualLocalizationAttitudeCorrection::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::DeviceMotionCorrection::operator==(v2, v3);
  return result;
}

BOOL CMMsl::VisualLocalizationAttitudeConstraints::operator==(uint64_t a1, uint64_t a2)
{
  float *v2;
  float *v3;
  float *v4;
  _BOOL8 v5;

  if ((*(_BYTE *)(a1 + 60) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 60) & 2) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 60) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 60) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 60) & 1) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 60) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 60) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 60) & 0x10) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 60) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 60) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 60) & 8) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 60) & 8) != 0)
  {
    return 0;
  }
  v3 = *(float **)(a1 + 8);
  v2 = *(float **)(a1 + 16);
  v4 = *(float **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 16) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v5 = (*(_BYTE *)(a2 + 60) & 4) == 0;
  if ((*(_BYTE *)(a1 + 60) & 4) != 0)
    return (*(_BYTE *)(a2 + 60) & 4) != 0 && *(float *)(a1 + 48) == *(float *)(a2 + 48);
  return v5;
}

BOOL CMMsl::RelativeDeviceMotionCorrelatedMotion::operator==(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  _BOOL8 v13;

  v3 = *(_DWORD *)(a1 + 128);
  v4 = *(_DWORD *)(a2 + 128);
  if ((v3 & 4) != 0)
  {
    if ((v4 & 4) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v4 & 4) != 0)
  {
    return 0;
  }
  if ((v3 & 0x100000) != 0)
  {
    if ((v4 & 0x100000) == 0)
      return 0;
    v2 = 0;
    if (*(float *)(a1 + 100) != *(float *)(a2 + 100))
      return 0;
  }
  else if ((v4 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x80) != 0)
  {
    if ((v4 & 0x80) == 0)
      return 0;
    v2 = 0;
    if (*(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((v4 & 0x80) != 0)
  {
    return 0;
  }
  if ((v3 & 0x80000) != 0)
  {
    if ((v4 & 0x80000) == 0)
      return 0;
    v2 = 0;
    if (*(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v4 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40) != 0)
  {
    if ((v4 & 0x40) == 0)
      return 0;
    v2 = 0;
    if (*(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v4 & 0x40) != 0)
  {
    return 0;
  }
  if ((v3 & 0x4000) != 0)
  {
    if ((v4 & 0x4000) == 0)
      return 0;
    v2 = 0;
    if (*(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v4 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x2000) != 0)
  {
    if ((v4 & 0x2000) == 0)
      return 0;
    v2 = 0;
    if (*(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v4 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x1000) != 0)
  {
    if ((v4 & 0x1000) == 0)
      return 0;
    v2 = 0;
    if (*(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v4 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x800000) != 0)
  {
    if ((v4 & 0x800000) == 0)
      return 0;
    v2 = 0;
    if (*(float *)(a1 + 112) != *(float *)(a2 + 112))
      return 0;
  }
  else if ((v4 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20000000) != 0)
  {
    if ((v4 & 0x20000000) == 0)
      return 0;
    v5 = *(unsigned __int8 *)(a1 + 124);
    v6 = *(unsigned __int8 *)(a2 + 124);
    v2 = __OFSUB__(v5, v6);
    if (v5 != v6)
      return 0;
  }
  else if ((v4 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x2000000) != 0)
  {
    if ((v4 & 0x2000000) == 0)
      return 0;
    v7 = *(unsigned __int8 *)(a1 + 120);
    v8 = *(unsigned __int8 *)(a2 + 120);
    v2 = __OFSUB__(v7, v8);
    if (v7 != v8)
      return 0;
  }
  else if ((v4 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x400) != 0)
  {
    if ((v4 & 0x400) == 0)
      return 0;
    v2 = 0;
    if (*(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((v4 & 0x400) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10000000) != 0)
  {
    if ((v4 & 0x10000000) == 0)
      return 0;
    v9 = *(unsigned __int8 *)(a1 + 123);
    v10 = *(unsigned __int8 *)(a2 + 123);
    v2 = __OFSUB__(v9, v10);
    if (v9 != v10)
      return 0;
  }
  else if ((v4 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40000000) != 0)
  {
    if ((v4 & 0x40000000) == 0)
      return 0;
    v11 = *(unsigned __int8 *)(a1 + 125);
    v12 = *(unsigned __int8 *)(a2 + 125);
    v2 = __OFSUB__(v11, v12);
    if (v11 != v12)
      return 0;
  }
  else if ((v4 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40000) != 0)
  {
    if ((v4 & 0x40000) == 0)
      return 0;
    v2 = 0;
    if (*(float *)(a1 + 92) != *(float *)(a2 + 92))
      return 0;
  }
  else if ((v4 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20) != 0)
  {
    if ((v4 & 0x20) == 0)
      return 0;
    v2 = 0;
    if (*(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v4 & 0x20) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20000) != 0)
  {
    if ((v4 & 0x20000) == 0)
      return 0;
    v2 = 0;
    if (*(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v4 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10) != 0)
  {
    if ((v4 & 0x10) == 0)
      return 0;
    v2 = 0;
    if (*(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v4 & 0x10) != 0)
  {
    return 0;
  }
  if ((v3 & 0x100) != 0)
  {
    if ((v4 & 0x100) == 0)
      return 0;
    v2 = 0;
    if (*(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v4 & 0x100) != 0)
  {
    return 0;
  }
  if ((v3 & 0x400000) != 0)
  {
    if ((v4 & 0x400000) == 0)
      return 0;
    v2 = 0;
    if (*(float *)(a1 + 108) != *(float *)(a2 + 108))
      return 0;
  }
  else if ((v4 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v4 & v3) < 0 != v2)
  {
    if (*(unsigned __int8 *)(a1 + 126) != *(unsigned __int8 *)(a2 + 126))
      return 0;
  }
  else if ((v4 | v3) < 0)
  {
    return 0;
  }
  if ((v3 & 0x10000) != 0)
  {
    if ((v4 & 0x10000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v4 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v3 & 8) != 0)
  {
    if ((v4 & 8) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v4 & 8) != 0)
  {
    return 0;
  }
  if ((v3 & 0x200) != 0)
  {
    if ((v4 & 0x200) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v4 & 0x200) != 0)
  {
    return 0;
  }
  if ((v3 & 0x200000) != 0)
  {
    if ((v4 & 0x200000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104))
      return 0;
  }
  else if ((v4 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x4000000) != 0)
  {
    if ((v4 & 0x4000000) == 0 || *(unsigned __int8 *)(a1 + 121) != *(unsigned __int8 *)(a2 + 121))
      return 0;
  }
  else if ((v4 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x800) != 0)
  {
    if ((v4 & 0x800) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v4 & 0x800) != 0)
  {
    return 0;
  }
  if ((v3 & 1) != 0)
  {
    if ((v4 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v4 & 1) != 0)
  {
    return 0;
  }
  if ((v3 & 2) != 0)
  {
    if ((v4 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v4 & 2) != 0)
  {
    return 0;
  }
  if ((v3 & 0x1000000) != 0)
  {
    if ((v4 & 0x1000000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116))
      return 0;
  }
  else if ((v4 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x8000) != 0)
  {
    if ((v4 & 0x8000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v4 & 0x8000) != 0)
  {
    return 0;
  }
  v13 = (v4 & 0x8000000) == 0;
  if ((v3 & 0x8000000) != 0)
    return (v4 & 0x8000000) != 0 && *(unsigned __int8 *)(a1 + 122) == *(unsigned __int8 *)(a2 + 122);
  return v13;
}

BOOL CMMsl::RelativeDeviceMotionComplexTransition::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 v4;

  v2 = *(_QWORD *)(a1 + 188);
  v3 = *(_QWORD *)(a2 + 188);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132))
      return 0;
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116))
      return 0;
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124))
      return 0;
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000) != 0)
  {
    if ((v3 & 0x80000000) == 0 || *(float *)(a1 + 136) != *(float *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x80000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000) != 0)
  {
    if ((v3 & 0x400000000) == 0 || *(float *)(a1 + 148) != *(float *)(a2 + 148))
      return 0;
  }
  else if ((v3 & 0x400000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000000) != 0)
  {
    if ((v3 & 0x2000000000) == 0 || *(float *)(a1 + 160) != *(float *)(a2 + 160))
      return 0;
  }
  else if ((v3 & 0x2000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000) != 0)
  {
    if ((v3 & 0x800000000) == 0 || *(float *)(a1 + 152) != *(float *)(a2 + 152))
      return 0;
  }
  else if ((v3 & 0x800000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000000) != 0)
  {
    if ((v3 & 0x4000000000) == 0 || *(float *)(a1 + 164) != *(float *)(a2 + 164))
      return 0;
  }
  else if ((v3 & 0x4000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000) != 0)
  {
    if ((v3 & 0x1000000000) == 0 || *(float *)(a1 + 156) != *(float *)(a2 + 156))
      return 0;
  }
  else if ((v3 & 0x1000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000000) != 0)
  {
    if ((v3 & 0x8000000000) == 0 || *(float *)(a1 + 168) != *(float *)(a2 + 168))
      return 0;
  }
  else if ((v3 & 0x8000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000000) != 0)
  {
    if ((v3 & 0x200000000000) == 0 || *(unsigned __int8 *)(a1 + 183) != *(unsigned __int8 *)(a2 + 183))
      return 0;
  }
  else if ((v3 & 0x200000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000000) != 0)
  {
    if ((v3 & 0x100000000000) == 0 || *(unsigned __int8 *)(a1 + 182) != *(unsigned __int8 *)(a2 + 182))
      return 0;
  }
  else if ((v3 & 0x100000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000000) != 0)
  {
    if ((v3 & 0x400000000000) == 0 || *(unsigned __int8 *)(a1 + 184) != *(unsigned __int8 *)(a2 + 184))
      return 0;
  }
  else if ((v3 & 0x400000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000) != 0)
  {
    if ((v3 & 0x100000000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140))
      return 0;
  }
  else if ((v3 & 0x100000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000) != 0)
  {
    if ((v3 & 0x200000000) == 0 || *(float *)(a1 + 144) != *(float *)(a2 + 144))
      return 0;
  }
  else if ((v3 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000000) != 0)
  {
    if ((v3 & 0x1000000000000) == 0 || *(unsigned __int8 *)(a1 + 186) != *(unsigned __int8 *)(a2 + 186))
      return 0;
  }
  else if ((v3 & 0x1000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000000) != 0)
  {
    if ((v3 & 0x80000000000) == 0 || *(unsigned __int8 *)(a1 + 181) != *(unsigned __int8 *)(a2 + 181))
      return 0;
  }
  else if ((v3 & 0x80000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000000) != 0)
  {
    if ((v3 & 0x40000000000) == 0 || *(unsigned __int8 *)(a1 + 180) != *(unsigned __int8 *)(a2 + 180))
      return 0;
  }
  else if ((v3 & 0x40000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000000) != 0)
  {
    if ((v3 & 0x20000000000) == 0 || *(float *)(a1 + 176) != *(float *)(a2 + 176))
      return 0;
  }
  else if ((v3 & 0x20000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000000) != 0)
  {
    if ((v3 & 0x10000000000) == 0 || *(float *)(a1 + 172) != *(float *)(a2 + 172))
      return 0;
  }
  else if ((v3 & 0x10000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(_DWORD *)(a1 + 92) != *(_DWORD *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000000) != 0)
  {
    if ((v3 & 0x800000000000) == 0 || *(unsigned __int8 *)(a1 + 185) != *(unsigned __int8 *)(a2 + 185))
      return 0;
  }
  else if ((v3 & 0x800000000000) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x2000000000000) == 0;
  if ((v2 & 0x2000000000000) != 0)
    return (v3 & 0x2000000000000) != 0 && *(unsigned __int8 *)(a1 + 187) == *(unsigned __int8 *)(a2 + 187);
  return v4;
}

BOOL CMMsl::WalkingDetectionResult::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 60);
  v3 = *(_WORD *)(a2 + 60);
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x200) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 60) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x100) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 60) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x400) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 60) & 0x400) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x4000) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x4000) == 0 || *(unsigned __int8 *)(a1 + 59) != *(unsigned __int8 *)(a2 + 59))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 60) & 0x4000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x2000) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x2000) == 0 || *(unsigned __int8 *)(a1 + 58) != *(unsigned __int8 *)(a2 + 58))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 60) & 0x2000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x1000) == 0 || *(unsigned __int8 *)(a1 + 57) != *(unsigned __int8 *)(a2 + 57))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 60) & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x800) == 0 || *(unsigned __int8 *)(a1 + 56) != *(unsigned __int8 *)(a2 + 56))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 60) & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x80) == 0;
  if ((v2 & 0x80) != 0)
    return (v3 & 0x80) != 0 && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40);
  return v4;
}

BOOL CMMsl::SitStandDetectorFeatures::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(unsigned __int8 *)(a1 + 44);
  v3 = *(unsigned __int8 *)(a2 + 44);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v3 & v2 & 0x80) != 0)
  {
    if (*(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if (((v3 | v2) & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x20) == 0;
  if ((v2 & 0x20) != 0)
    return (v3 & 0x20) != 0 && *(float *)(a1 + 32) == *(float *)(a2 + 32);
  return v4;
}

BOOL CMMsl::SitStandDetectorTransition::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v2;
}

BOOL CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 28) & 4) == 0;
  if ((*(_BYTE *)(a1 + 28) & 4) != 0)
    return (*(_BYTE *)(a2 + 28) & 4) != 0 && *(float *)(a1 + 20) == *(float *)(a2 + 20);
  return v2;
}

BOOL CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 28) & 4) == 0;
  if ((*(_BYTE *)(a1 + 28) & 4) != 0)
    return (*(_BYTE *)(a2 + 28) & 4) != 0 && *(float *)(a1 + 20) == *(float *)(a2 + 20);
  return v2;
}

BOOL CMMsl::SpatialEvent::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 1) == 0;
  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
    return (*(_BYTE *)(a2 + 20) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  return v2;
}

BOOL CMMsl::JitterBufferLevel::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 4) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12);
  return v2;
}

BOOL CMMsl::PressureFiltered1HzLowPass::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    return 0;
  }
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a2 + 16);
  result = v3 == 0;
  if (!v2)
    return result;
  return v3 && CMMsl::PressureFilteredNoTemperature::operator==(v2, v3);
}

BOOL CMMsl::MotionActivityReplay::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 36);
  v3 = *(_WORD *)(a2 + 36);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(unsigned __int8 *)(a1 + 34) != *(unsigned __int8 *)(a2 + 34))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 36) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 36) & 0x100) == 0 || *(unsigned __int8 *)(a1 + 35) != *(unsigned __int8 *)(a2 + 35))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 36) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(unsigned __int8 *)(a1 + 32) != *(unsigned __int8 *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(unsigned __int8 *)(a1 + 33) != *(unsigned __int8 *)(a2 + 33))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  v4 = (v3 & 4) == 0;
  if ((v2 & 4) != 0)
    return (v3 & 4) != 0 && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
  return v4;
}

BOOL CMMsl::LegacyALS5CHInput::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 8) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 0x10) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 0x20) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 0x20) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 0x20) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 40) & 0x40) == 0;
  if ((*(_BYTE *)(a1 + 40) & 0x40) != 0)
    return (*(_BYTE *)(a2 + 40) & 0x40) != 0 && *(float *)(a1 + 36) == *(float *)(a2 + 36);
  return v2;
}

BOOL CMMsl::Orientation::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v2;
}

BOOL CMMsl::KappaAudioResult::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 108);
  v3 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(unsigned __int8 *)(a1 + 100) != *(unsigned __int8 *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(_DWORD *)(a1 + 84) != *(_DWORD *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(unsigned __int8 *)(a1 + 103) != *(unsigned __int8 *)(a2 + 103))
      return 0;
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(unsigned __int8 *)(a1 + 102) != *(unsigned __int8 *)(a2 + 102))
      return 0;
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(unsigned __int8 *)(a1 + 101) != *(unsigned __int8 *)(a2 + 101))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(unsigned __int8 *)(a1 + 104) != *(unsigned __int8 *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(float *)(a1 + 8) != *(float *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  v4 = (*(_DWORD *)(a2 + 108) & 0x200) == 0;
  if ((v2 & 0x200) != 0)
    return (v3 & 0x200) != 0 && *(float *)(a1 + 44) == *(float *)(a2 + 44);
  return v4;
}

BOOL CMMsl::KappaBaroResult::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 152);
  v3 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(unsigned __int8 *)(a1 + 148) != *(unsigned __int8 *)(a2 + 148))
      return 0;
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(float *)(a1 + 144) != *(float *)(a2 + 144))
      return 0;
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(float *)(a1 + 136) != *(float *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(_DWORD *)(a1 + 112) != *(_DWORD *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(_DWORD *)(a1 + 104) != *(_DWORD *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_QWORD *)(a1 + 40) != *(_QWORD *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140))
      return 0;
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(_DWORD *)(a1 + 92) != *(_DWORD *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_QWORD *)(a1 + 48) != *(_QWORD *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132))
      return 0;
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(_DWORD *)(a1 + 108) != *(_DWORD *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  v4 = (*(_DWORD *)(a2 + 152) & 0x80) == 0;
  if ((v2 & 0x80) != 0)
    return (v3 & 0x80) != 0 && *(float *)(a1 + 60) == *(float *)(a2 + 60);
  return v4;
}

BOOL CMMsl::KappaGpsResult::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 132);
  v3 = *(_DWORD *)(a2 + 132);
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(unsigned __int8 *)(a1 + 126) != *(unsigned __int8 *)(a2 + 126))
      return 0;
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(unsigned __int8 *)(a1 + 127) != *(unsigned __int8 *)(a2 + 127))
      return 0;
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(unsigned __int8 *)(a1 + 124) != *(unsigned __int8 *)(a2 + 124))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_QWORD *)(a1 + 40) != *(_QWORD *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(unsigned __int8 *)(a1 + 128) != *(unsigned __int8 *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x2000000) == 0;
  if ((v2 & 0x2000000) != 0)
    return (v3 & 0x2000000) != 0 && *(unsigned __int8 *)(a1 + 125) == *(unsigned __int8 *)(a2 + 125);
  return v4;
}

BOOL CMMsl::KappaPulseResult::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 v4;

  v2 = *(_QWORD *)(a1 + 316);
  v3 = *(_QWORD *)(a2 + 316);
  if ((*(_BYTE *)(a1 + 324) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 324) & 8) == 0 || *(unsigned __int8 *)(a1 + 312) != *(unsigned __int8 *)(a2 + 312))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 324) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 324) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 324) & 2) == 0 || *(float *)(a1 + 304) != *(float *)(a2 + 304))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 324) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 324) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 324) & 4) == 0 || *(float *)(a1 + 308) != *(float *)(a2 + 308))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 324) & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_QWORD *)(a1 + 48) != *(_QWORD *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_QWORD *)(a1 + 56) != *(_QWORD *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_QWORD *)(a1 + 64) != *(_QWORD *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(_QWORD *)(a1 + 72) != *(_QWORD *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(float *)(a1 + 144) != *(float *)(a2 + 144))
      return 0;
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 136) != *(float *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(float *)(a1 + 152) != *(float *)(a2 + 152))
      return 0;
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(float *)(a1 + 148) != *(float *)(a2 + 148))
      return 0;
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000000000) != 0)
  {
    if ((v3 & 0x40000000000000) == 0 || *(float *)(a1 + 260) != *(float *)(a2 + 260))
      return 0;
  }
  else if ((v3 & 0x40000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000000000) != 0)
  {
    if ((v3 & 0x20000000000000) == 0 || *(float *)(a1 + 256) != *(float *)(a2 + 256))
      return 0;
  }
  else if ((v3 & 0x20000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000000000000) != 0)
  {
    if ((v3 & 0x4000000000000000) == 0 || *(float *)(a1 + 292) != *(float *)(a2 + 292))
      return 0;
  }
  else if ((v3 & 0x4000000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000000) != 0)
  {
    if ((v3 & 0x800000000000) == 0 || *(float *)(a1 + 232) != *(float *)(a2 + 232))
      return 0;
  }
  else if ((v3 & 0x800000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000000) != 0)
  {
    if ((v3 & 0x1000000000000) == 0 || *(float *)(a1 + 236) != *(float *)(a2 + 236))
      return 0;
  }
  else if ((v3 & 0x1000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000000000) != 0)
  {
    if ((v3 & 0x1000000000000000) == 0 || *(float *)(a1 + 284) != *(float *)(a2 + 284))
      return 0;
  }
  else if ((v3 & 0x1000000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000000000) != 0)
  {
    if ((v3 & 0x10000000000000) == 0 || *(float *)(a1 + 252) != *(float *)(a2 + 252))
      return 0;
  }
  else if ((v3 & 0x10000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000000000) != 0)
  {
    if ((v3 & 0x800000000000000) == 0 || *(float *)(a1 + 280) != *(float *)(a2 + 280))
      return 0;
  }
  else if ((v3 & 0x800000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000000000) != 0)
  {
    if ((v3 & 0x8000000000000) == 0 || *(float *)(a1 + 248) != *(float *)(a2 + 248))
      return 0;
  }
  else if ((v3 & 0x8000000000000) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 324) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 324) & 1) == 0 || *(float *)(a1 + 300) != *(float *)(a2 + 300))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 324) & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000000000) != 0)
  {
    if ((v3 & 0x200000000000000) == 0 || *(float *)(a1 + 272) != *(float *)(a2 + 272))
      return 0;
  }
  else if ((v3 & 0x200000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000000000) != 0)
  {
    if ((v3 & 0x4000000000000) == 0 || *(float *)(a1 + 244) != *(float *)(a2 + 244))
      return 0;
  }
  else if ((v3 & 0x4000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000000000) != 0)
  {
    if ((v3 & 0x100000000000000) == 0 || *(float *)(a1 + 268) != *(float *)(a2 + 268))
      return 0;
  }
  else if ((v3 & 0x100000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000000000) != 0)
  {
    if ((v3 & 0x2000000000000) == 0 || *(float *)(a1 + 240) != *(float *)(a2 + 240))
      return 0;
  }
  else if ((v3 & 0x2000000000000) != 0)
  {
    return 0;
  }
  if (v2 < 0)
  {
    if ((v3 & 0x8000000000000000) == 0 || *(float *)(a1 + 296) != *(float *)(a2 + 296))
      return 0;
  }
  else if (v3 < 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000) != 0)
  {
    if ((v3 & 0x800000000) == 0 || *(float *)(a1 + 184) != *(float *)(a2 + 184))
      return 0;
  }
  else if ((v3 & 0x800000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000) != 0)
  {
    if ((v3 & 0x400000000) == 0 || *(float *)(a1 + 180) != *(float *)(a2 + 180))
      return 0;
  }
  else if ((v3 & 0x400000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000000) != 0)
  {
    if ((v3 & 0x80000000000) == 0 || *(float *)(a1 + 216) != *(float *)(a2 + 216))
      return 0;
  }
  else if ((v3 & 0x80000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(float *)(a1 + 156) != *(float *)(a2 + 156))
      return 0;
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(float *)(a1 + 160) != *(float *)(a2 + 160))
      return 0;
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000000) != 0)
  {
    if ((v3 & 0x20000000000) == 0 || *(float *)(a1 + 208) != *(float *)(a2 + 208))
      return 0;
  }
  else if ((v3 & 0x20000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000) != 0)
  {
    if ((v3 & 0x200000000) == 0 || *(float *)(a1 + 176) != *(float *)(a2 + 176))
      return 0;
  }
  else if ((v3 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000000) != 0)
  {
    if ((v3 & 0x10000000000) == 0 || *(float *)(a1 + 204) != *(float *)(a2 + 204))
      return 0;
  }
  else if ((v3 & 0x10000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000) != 0)
  {
    if ((v3 & 0x100000000) == 0 || *(float *)(a1 + 172) != *(float *)(a2 + 172))
      return 0;
  }
  else if ((v3 & 0x100000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000000) != 0)
  {
    if ((v3 & 0x200000000000) == 0 || *(float *)(a1 + 224) != *(float *)(a2 + 224))
      return 0;
  }
  else if ((v3 & 0x200000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000000) != 0)
  {
    if ((v3 & 0x4000000000) == 0 || *(float *)(a1 + 196) != *(float *)(a2 + 196))
      return 0;
  }
  else if ((v3 & 0x4000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000) != 0)
  {
    if ((v3 & 0x80000000) == 0 || *(float *)(a1 + 168) != *(float *)(a2 + 168))
      return 0;
  }
  else if ((v3 & 0x80000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000000) != 0)
  {
    if ((v3 & 0x2000000000) == 0 || *(float *)(a1 + 192) != *(float *)(a2 + 192))
      return 0;
  }
  else if ((v3 & 0x2000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(float *)(a1 + 164) != *(float *)(a2 + 164))
      return 0;
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000000) != 0)
  {
    if ((v3 & 0x100000000000) == 0 || *(float *)(a1 + 220) != *(float *)(a2 + 220))
      return 0;
  }
  else if ((v3 & 0x100000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_QWORD *)(a1 + 40) != *(_QWORD *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000000000000) != 0)
  {
    if ((v3 & 0x2000000000000000) == 0 || *(float *)(a1 + 288) != *(float *)(a2 + 288))
      return 0;
  }
  else if ((v3 & 0x2000000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000000) != 0)
  {
    if ((v3 & 0x40000000000) == 0 || *(float *)(a1 + 212) != *(float *)(a2 + 212))
      return 0;
  }
  else if ((v3 & 0x40000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000000000) != 0)
  {
    if ((v3 & 0x80000000000000) == 0 || *(float *)(a1 + 264) != *(float *)(a2 + 264))
      return 0;
  }
  else if ((v3 & 0x80000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000) != 0)
  {
    if ((v3 & 0x1000000000) == 0 || *(float *)(a1 + 188) != *(float *)(a2 + 188))
      return 0;
  }
  else if ((v3 & 0x1000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000000000) != 0)
  {
    if ((v3 & 0x400000000000000) == 0 || *(float *)(a1 + 276) != *(float *)(a2 + 276))
      return 0;
  }
  else if ((v3 & 0x400000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000000) != 0)
  {
    if ((v3 & 0x8000000000) == 0 || *(float *)(a1 + 200) != *(float *)(a2 + 200))
      return 0;
  }
  else if ((v3 & 0x8000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) == 0)
  {
    if ((v3 & 4) == 0)
      goto LABEL_336;
    return 0;
  }
  if ((v3 & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
    return 0;
LABEL_336:
  v4 = (v3 & 0x400000000000) == 0;
  if ((v2 & 0x400000000000) != 0)
    return (v3 & 0x400000000000) != 0 && *(float *)(a1 + 228) == *(float *)(a2 + 228);
  return v4;
}

BOOL CMMsl::KappaZgResult::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 v4;

  v2 = *(_QWORD *)(a1 + 164);
  v3 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x100000000) != 0)
  {
    if ((v3 & 0x100000000) == 0 || *(unsigned __int8 *)(a1 + 160) != *(unsigned __int8 *)(a2 + 160))
      return 0;
  }
  else if ((v3 & 0x100000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(_DWORD *)(a1 + 112) != *(_DWORD *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(_DWORD *)(a1 + 108) != *(_DWORD *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(float *)(a1 + 148) != *(float *)(a2 + 148))
      return 0;
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(float *)(a1 + 136) != *(float *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000) != 0)
  {
    if ((v3 & 0x80000000) == 0 || *(float *)(a1 + 156) != *(float *)(a2 + 156))
      return 0;
  }
  else if ((v3 & 0x80000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(float *)(a1 + 144) != *(float *)(a2 + 144))
      return 0;
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(_DWORD *)(a1 + 116) != *(_DWORD *)(a2 + 116))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(_DWORD *)(a1 + 120) != *(_DWORD *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_QWORD *)(a1 + 40) != *(_QWORD *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(_DWORD *)(a1 + 92) != *(_DWORD *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(_DWORD *)(a1 + 96) != *(_DWORD *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140))
      return 0;
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(_DWORD *)(a1 + 124) != *(_DWORD *)(a2 + 124))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_QWORD *)(a1 + 48) != *(_QWORD *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132))
      return 0;
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(float *)(a1 + 152) != *(float *)(a2 + 152))
      return 0;
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  v4 = (*(_QWORD *)(a2 + 164) & 2) == 0;
  if ((v2 & 2) != 0)
    return (v3 & 2) != 0 && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
  return v4;
}

BOOL CMMsl::KappaZgDetected::operator==(uint64_t a1, uint64_t a2)
{
  char v3;
  _BOOL8 result;

  v3 = *(_BYTE *)(a1 + 16);
  result = (*(_BYTE *)(a2 + 16) & 1) == 0;
  if ((v3 & 1) != 0)
    return (*(_BYTE *)(a2 + 16) & 1) != 0 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  return result;
}

BOOL CMMsl::KappaPulseInertialAccel::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 80);
  v3 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 80) & 0x100) == 0 || *(_QWORD *)(a1 + 72) != *(_QWORD *)(a2 + 72))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 80) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x10) == 0;
  if ((v2 & 0x10) != 0)
    return (v3 & 0x10) != 0 && *(double *)(a1 + 40) == *(double *)(a2 + 40);
  return v4;
}

BOOL CMMsl::KappaAirbagResult::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 68);
  v3 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x400) == 0 || *(unsigned __int8 *)(a1 + 64) != *(unsigned __int8 *)(a2 + 64))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 68) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x200) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 68) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x100) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 68) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  v4 = (v3 & 8) == 0;
  if ((v2 & 8) != 0)
    return (v3 & 8) != 0 && *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32);
  return v4;
}

BOOL CMMsl::KappaCrashResult::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  uint64_t v3;
  uint64_t v4;
  __int16 v5;
  _BOOL8 v6;

  v2 = *(_WORD *)(a1 + 288);
  v3 = *(_QWORD *)(a1 + 280);
  v4 = *(_QWORD *)(a2 + 280);
  v5 = *(_WORD *)(a2 + 288);
  if ((v3 & 1) != 0)
  {
    if ((v4 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v4 & 1) != 0)
  {
    return 0;
  }
  if ((v3 & 0x2000000000000) != 0)
  {
    if ((v4 & 0x2000000000000) == 0 || *(float *)(a1 + 208) != *(float *)(a2 + 208))
      return 0;
  }
  else if ((v4 & 0x2000000000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 288) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 288) & 0x100) == 0 || *(unsigned __int8 *)(a1 + 276) != *(unsigned __int8 *)(a2 + 276))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 288) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v5 & 0x80) == 0 || *(unsigned __int8 *)(a1 + 275) != *(unsigned __int8 *)(a2 + 275))
      return 0;
  }
  else if ((v5 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v5 & 0x20) == 0 || *(unsigned __int8 *)(a1 + 273) != *(unsigned __int8 *)(a2 + 273))
      return 0;
  }
  else if ((v5 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v5 & 4) == 0 || *(unsigned __int8 *)(a1 + 270) != *(unsigned __int8 *)(a2 + 270))
      return 0;
  }
  else if ((v5 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v5 & 2) == 0 || *(unsigned __int8 *)(a1 + 269) != *(unsigned __int8 *)(a2 + 269))
      return 0;
  }
  else if ((v5 & 2) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40000) != 0)
  {
    if ((v4 & 0x40000) == 0 || *(_DWORD *)(a1 + 84) != *(_DWORD *)(a2 + 84))
      return 0;
  }
  else if ((v4 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v5 & 1) == 0 || *(unsigned __int8 *)(a1 + 268) != *(unsigned __int8 *)(a2 + 268))
      return 0;
  }
  else if ((v5 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v5 & 0x10) == 0 || *(unsigned __int8 *)(a1 + 272) != *(unsigned __int8 *)(a2 + 272))
      return 0;
  }
  else if ((v5 & 0x10) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20000) != 0)
  {
    if ((v4 & 0x20000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v4 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10000) != 0)
  {
    if ((v4 & 0x10000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v4 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x400000) != 0)
  {
    if ((v4 & 0x400000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
      return 0;
  }
  else if ((v4 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x8000000) != 0)
  {
    if ((v4 & 0x8000000) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120))
      return 0;
  }
  else if ((v4 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x100000000) != 0)
  {
    if ((v4 & 0x100000000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140))
      return 0;
  }
  else if ((v4 & 0x100000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x4000000000000) != 0)
  {
    if ((v4 & 0x4000000000000) == 0 || *(float *)(a1 + 212) != *(float *)(a2 + 212))
      return 0;
  }
  else if ((v4 & 0x4000000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x800000) != 0)
  {
    if ((v4 & 0x800000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104))
      return 0;
  }
  else if ((v4 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10000000) != 0)
  {
    if ((v4 & 0x10000000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124))
      return 0;
  }
  else if ((v4 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x200000000) != 0)
  {
    if ((v4 & 0x200000000) == 0 || *(float *)(a1 + 144) != *(float *)(a2 + 144))
      return 0;
  }
  else if ((v4 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x8000000000000) != 0)
  {
    if ((v4 & 0x8000000000000) == 0 || *(float *)(a1 + 216) != *(float *)(a2 + 216))
      return 0;
  }
  else if ((v4 & 0x8000000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x1000000) != 0)
  {
    if ((v4 & 0x1000000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108))
      return 0;
  }
  else if ((v4 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20000000) != 0)
  {
    if ((v4 & 0x20000000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128))
      return 0;
  }
  else if ((v4 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x400000000) != 0)
  {
    if ((v4 & 0x400000000) == 0 || *(float *)(a1 + 148) != *(float *)(a2 + 148))
      return 0;
  }
  else if ((v4 & 0x400000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10000000000000) != 0)
  {
    if ((v4 & 0x10000000000000) == 0 || *(float *)(a1 + 220) != *(float *)(a2 + 220))
      return 0;
  }
  else if ((v4 & 0x10000000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x80000) != 0)
  {
    if ((v4 & 0x80000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v4 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x100000) != 0)
  {
    if ((v4 & 0x100000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92))
      return 0;
  }
  else if ((v4 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x200000) != 0)
  {
    if ((v4 & 0x200000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v4 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x100000000000000) != 0)
  {
    if ((v4 & 0x100000000000000) == 0 || *(float *)(a1 + 236) != *(float *)(a2 + 236))
      return 0;
  }
  else if ((v4 & 0x100000000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x80000000000000) != 0)
  {
    if ((v4 & 0x80000000000000) == 0 || *(float *)(a1 + 232) != *(float *)(a2 + 232))
      return 0;
  }
  else if ((v4 & 0x80000000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x200000000000000) != 0)
  {
    if ((v4 & 0x200000000000000) == 0 || *(float *)(a1 + 240) != *(float *)(a2 + 240))
      return 0;
  }
  else if ((v4 & 0x200000000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40) != 0)
  {
    if ((v4 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v4 & 0x40) != 0)
  {
    return 0;
  }
  if ((v3 & 2) != 0)
  {
    if ((v4 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((v4 & 2) != 0)
  {
    return 0;
  }
  if ((v3 & 0x8000) != 0)
  {
    if ((v4 & 0x8000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v4 & 0x8000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 288) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 288) & 0x800) == 0 || *(unsigned __int8 *)(a1 + 279) != *(unsigned __int8 *)(a2 + 279))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 288) & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v5 & 8) == 0 || *(unsigned __int8 *)(a1 + 271) != *(unsigned __int8 *)(a2 + 271))
      return 0;
  }
  else if ((v5 & 8) != 0)
  {
    return 0;
  }
  if ((v3 & 0x80) != 0)
  {
    if ((v4 & 0x80) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v4 & 0x80) != 0)
  {
    return 0;
  }
  if ((v3 & 0x400) != 0)
  {
    if ((v4 & 0x400) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v4 & 0x400) != 0)
  {
    return 0;
  }
  if ((v3 & 0x200) != 0)
  {
    if ((v4 & 0x200) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((v4 & 0x200) != 0)
  {
    return 0;
  }
  if ((v3 & 0x100) != 0)
  {
    if ((v4 & 0x100) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v4 & 0x100) != 0)
  {
    return 0;
  }
  if ((v3 & 4) != 0)
  {
    if ((v4 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((v4 & 4) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20) != 0)
  {
    if ((v4 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v4 & 0x20) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10) != 0)
  {
    if ((v4 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v4 & 0x10) != 0)
  {
    return 0;
  }
  if ((v3 & 8) != 0)
  {
    if ((v4 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v4 & 8) != 0)
  {
    return 0;
  }
  if ((v3 & 0x800) != 0)
  {
    if ((v4 & 0x800) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v4 & 0x800) != 0)
  {
    return 0;
  }
  if ((v3 & 0x4000) != 0)
  {
    if ((v4 & 0x4000) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v4 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x2000) != 0)
  {
    if ((v4 & 0x2000) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v4 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x1000) != 0)
  {
    if ((v4 & 0x1000) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((v4 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x2000000) != 0)
  {
    if ((v4 & 0x2000000) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112))
      return 0;
  }
  else if ((v4 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40000000) != 0)
  {
    if ((v4 & 0x40000000) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132))
      return 0;
  }
  else if ((v4 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x800000000) != 0)
  {
    if ((v4 & 0x800000000) == 0 || *(float *)(a1 + 152) != *(float *)(a2 + 152))
      return 0;
  }
  else if ((v4 & 0x800000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20000000000000) != 0)
  {
    if ((v4 & 0x20000000000000) == 0 || *(float *)(a1 + 224) != *(float *)(a2 + 224))
      return 0;
  }
  else if ((v4 & 0x20000000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x4000000) != 0)
  {
    if ((v4 & 0x4000000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116))
      return 0;
  }
  else if ((v4 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x80000000) != 0)
  {
    if ((v4 & 0x80000000) == 0 || *(float *)(a1 + 136) != *(float *)(a2 + 136))
      return 0;
  }
  else if ((v4 & 0x80000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x1000000000) != 0)
  {
    if ((v4 & 0x1000000000) == 0 || *(float *)(a1 + 156) != *(float *)(a2 + 156))
      return 0;
  }
  else if ((v4 & 0x1000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40000000000000) != 0)
  {
    if ((v4 & 0x40000000000000) == 0 || *(float *)(a1 + 228) != *(float *)(a2 + 228))
      return 0;
  }
  else if ((v4 & 0x40000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v5 & 0x40) == 0 || *(unsigned __int8 *)(a1 + 274) != *(unsigned __int8 *)(a2 + 274))
      return 0;
  }
  else if ((v5 & 0x40) != 0)
  {
    return 0;
  }
  if ((v3 & 0x1000000000000000) != 0)
  {
    if ((v4 & 0x1000000000000000) == 0 || *(float *)(a1 + 252) != *(float *)(a2 + 252))
      return 0;
  }
  else if ((v4 & 0x1000000000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x400000000000000) != 0)
  {
    if ((v4 & 0x400000000000000) == 0 || *(float *)(a1 + 244) != *(float *)(a2 + 244))
      return 0;
  }
  else if ((v4 & 0x400000000000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 288) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 288) & 0x200) == 0 || *(unsigned __int8 *)(a1 + 277) != *(unsigned __int8 *)(a2 + 277))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 288) & 0x200) != 0)
  {
    return 0;
  }
  if ((v3 & 0x2000000000) != 0)
  {
    if ((v4 & 0x2000000000) == 0 || *(float *)(a1 + 160) != *(float *)(a2 + 160))
      return 0;
  }
  else if ((v4 & 0x2000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x4000000000) != 0)
  {
    if ((v4 & 0x4000000000) == 0 || *(float *)(a1 + 164) != *(float *)(a2 + 164))
      return 0;
  }
  else if ((v4 & 0x4000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x8000000000) != 0)
  {
    if ((v4 & 0x8000000000) == 0 || *(float *)(a1 + 168) != *(float *)(a2 + 168))
      return 0;
  }
  else if ((v4 & 0x8000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20000000000) != 0)
  {
    if ((v4 & 0x20000000000) == 0 || *(float *)(a1 + 176) != *(float *)(a2 + 176))
      return 0;
  }
  else if ((v4 & 0x20000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10000000000) != 0)
  {
    if ((v4 & 0x10000000000) == 0 || *(float *)(a1 + 172) != *(float *)(a2 + 172))
      return 0;
  }
  else if ((v4 & 0x10000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40000000000) != 0)
  {
    if ((v4 & 0x40000000000) == 0 || *(float *)(a1 + 180) != *(float *)(a2 + 180))
      return 0;
  }
  else if ((v4 & 0x40000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x80000000000) != 0)
  {
    if ((v4 & 0x80000000000) == 0 || *(float *)(a1 + 184) != *(float *)(a2 + 184))
      return 0;
  }
  else if ((v4 & 0x80000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x100000000000) != 0)
  {
    if ((v4 & 0x100000000000) == 0 || *(float *)(a1 + 188) != *(float *)(a2 + 188))
      return 0;
  }
  else if ((v4 & 0x100000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x200000000000) != 0)
  {
    if ((v4 & 0x200000000000) == 0 || *(float *)(a1 + 192) != *(float *)(a2 + 192))
      return 0;
  }
  else if ((v4 & 0x200000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x800000000000) != 0)
  {
    if ((v4 & 0x800000000000) == 0 || *(float *)(a1 + 200) != *(float *)(a2 + 200))
      return 0;
  }
  else if ((v4 & 0x800000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x400000000000) != 0)
  {
    if ((v4 & 0x400000000000) == 0 || *(float *)(a1 + 196) != *(float *)(a2 + 196))
      return 0;
  }
  else if ((v4 & 0x400000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x1000000000000) != 0)
  {
    if ((v4 & 0x1000000000000) == 0 || *(float *)(a1 + 204) != *(float *)(a2 + 204))
      return 0;
  }
  else if ((v4 & 0x1000000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x800000000000000) != 0)
  {
    if ((v4 & 0x800000000000000) == 0 || *(_DWORD *)(a1 + 248) != *(_DWORD *)(a2 + 248))
      return 0;
  }
  else if ((v4 & 0x800000000000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 288) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 288) & 0x400) == 0 || *(unsigned __int8 *)(a1 + 278) != *(unsigned __int8 *)(a2 + 278))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 288) & 0x400) != 0)
  {
    return 0;
  }
  if ((v3 & 0x4000000000000000) != 0)
  {
    if ((v4 & 0x4000000000000000) == 0 || *(float *)(a1 + 260) != *(float *)(a2 + 260))
      return 0;
  }
  else if ((v4 & 0x4000000000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x8000000000000000) == 0)
  {
    if ((v4 & 0x8000000000000000) == 0)
      goto LABEL_376;
    return 0;
  }
  if ((v4 & 0x8000000000000000) == 0 || *(float *)(a1 + 264) != *(float *)(a2 + 264))
    return 0;
LABEL_376:
  v6 = (v4 & 0x2000000000000000) == 0;
  if ((v3 & 0x2000000000000000) != 0)
    return (v4 & 0x2000000000000000) != 0 && *(float *)(a1 + 256) == *(float *)(a2 + 256);
  return v6;
}

BOOL CMMsl::KappaQuiescenceResult::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) == 0 || *(float *)(a1 + 8) != *(float *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 8) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 0x10) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 2) == 0 || *(float *)(a1 + 12) != *(float *)(a2 + 12))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 28) & 4) == 0;
  if ((*(_BYTE *)(a1 + 28) & 4) != 0)
    return (*(_BYTE *)(a2 + 28) & 4) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v2;
}

BOOL CMMsl::KappaRecoveryResult::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) == 0 || *(float *)(a1 + 8) != *(float *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 8) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 0x10) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 2) == 0 || *(float *)(a1 + 12) != *(float *)(a2 + 12))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 28) & 4) == 0;
  if ((*(_BYTE *)(a1 + 28) & 4) != 0)
    return (*(_BYTE *)(a2 + 28) & 4) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v2;
}

BOOL CMMsl::KappaRolloverCrashResult::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  _BOOL8 v6;

  v2 = *(_QWORD *)(a1 + 316);
  v3 = *(_QWORD *)(a2 + 316);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  v4 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v5 = *(unsigned __int16 *)(a2 + 324) | (*(unsigned __int8 *)(a2 + 326) << 16);
  if ((*(_WORD *)(a1 + 324) & 0x8000) != 0)
  {
    if ((*(_WORD *)(a2 + 324) & 0x8000) == 0 || *(unsigned __int8 *)(a1 + 310) != *(unsigned __int8 *)(a2 + 310))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 324) & 0x8000) != 0)
  {
    return 0;
  }
  if ((v4 & 0x10000) != 0)
  {
    if ((v5 & 0x10000) == 0 || *(unsigned __int8 *)(a1 + 311) != *(unsigned __int8 *)(a2 + 311))
      return 0;
  }
  else if ((v5 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000000) != 0)
  {
    if ((v3 & 0x40000000000) == 0 || *(float *)(a1 + 180) != *(float *)(a2 + 180))
      return 0;
  }
  else if ((v3 & 0x40000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 324) & 8) != 0)
  {
    if ((*(_WORD *)(a2 + 324) & 8) == 0 || *(float *)(a1 + 280) != *(float *)(a2 + 280))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 324) & 8) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 324) & 0x2000) != 0)
  {
    if ((*(_WORD *)(a2 + 324) & 0x2000) == 0 || *(unsigned __int8 *)(a1 + 308) != *(unsigned __int8 *)(a2 + 308))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 324) & 0x2000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 324) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 324) & 0x400) == 0 || *(unsigned __int8 *)(a1 + 305) != *(unsigned __int8 *)(a2 + 305))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 324) & 0x400) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 324) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 324) & 0x200) == 0 || *(unsigned __int8 *)(a1 + 304) != *(unsigned __int8 *)(a2 + 304))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 324) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(_DWORD *)(a1 + 112) != *(_DWORD *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 324) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 324) & 0x1000) == 0 || *(unsigned __int8 *)(a1 + 307) != *(unsigned __int8 *)(a2 + 307))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 324) & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000000000) != 0)
  {
    if ((v3 & 0x2000000000000) == 0 || *(float *)(a1 + 208) != *(float *)(a2 + 208))
      return 0;
  }
  else if ((v3 & 0x2000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000000) != 0)
  {
    if ((v3 & 0x1000000000000) == 0 || *(float *)(a1 + 204) != *(float *)(a2 + 204))
      return 0;
  }
  else if ((v3 & 0x1000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000000000) != 0)
  {
    if ((v3 & 0x4000000000000) == 0 || *(float *)(a1 + 212) != *(float *)(a2 + 212))
      return 0;
  }
  else if ((v3 & 0x4000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v4 & 0x40000) != 0)
  {
    if ((v5 & 0x40000) == 0 || *(unsigned __int8 *)(a1 + 313) != *(unsigned __int8 *)(a2 + 313))
      return 0;
  }
  else if ((v5 & 0x40000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 324) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 324) & 0x800) == 0 || *(unsigned __int8 *)(a1 + 306) != *(unsigned __int8 *)(a2 + 306))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 324) & 0x800) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 324) & 0x4000) != 0)
  {
    if ((*(_WORD *)(a2 + 324) & 0x4000) == 0 || *(unsigned __int8 *)(a1 + 309) != *(unsigned __int8 *)(a2 + 309))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 324) & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000000000) != 0)
  {
    if ((v3 & 0x20000000000000) == 0 || *(float *)(a1 + 224) != *(float *)(a2 + 224))
      return 0;
  }
  else if ((v3 & 0x20000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000000000) != 0)
  {
    if ((v3 & 0x8000000000000) == 0 || *(float *)(a1 + 216) != *(float *)(a2 + 216))
      return 0;
  }
  else if ((v3 & 0x8000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000000000) != 0)
  {
    if ((v3 & 0x10000000000000) == 0 || *(_DWORD *)(a1 + 220) != *(_DWORD *)(a2 + 220))
      return 0;
  }
  else if ((v3 & 0x10000000000000) != 0)
  {
    return 0;
  }
  if ((v4 & 0x20000) != 0)
  {
    if ((v5 & 0x20000) == 0 || *(unsigned __int8 *)(a1 + 312) != *(unsigned __int8 *)(a2 + 312))
      return 0;
  }
  else if ((v5 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000000000) != 0)
  {
    if ((v3 & 0x40000000000000) == 0 || *(float *)(a1 + 228) != *(float *)(a2 + 228))
      return 0;
  }
  else if ((v3 & 0x40000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000000000) != 0)
  {
    if ((v3 & 0x800000000000000) == 0 || *(float *)(a1 + 248) != *(float *)(a2 + 248))
      return 0;
  }
  else if ((v3 & 0x800000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000000) != 0)
  {
    if ((v3 & 0x80000000000) == 0 || *(float *)(a1 + 184) != *(float *)(a2 + 184))
      return 0;
  }
  else if ((v3 & 0x80000000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 324) & 0x10) != 0)
  {
    if ((*(_WORD *)(a2 + 324) & 0x10) == 0 || *(float *)(a1 + 284) != *(float *)(a2 + 284))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 324) & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000000000) != 0)
  {
    if ((v3 & 0x80000000000000) == 0 || *(float *)(a1 + 232) != *(float *)(a2 + 232))
      return 0;
  }
  else if ((v3 & 0x80000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000000000) != 0)
  {
    if ((v3 & 0x1000000000000000) == 0 || *(float *)(a1 + 252) != *(float *)(a2 + 252))
      return 0;
  }
  else if ((v3 & 0x1000000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000000) != 0)
  {
    if ((v3 & 0x100000000000) == 0 || *(float *)(a1 + 188) != *(float *)(a2 + 188))
      return 0;
  }
  else if ((v3 & 0x100000000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 324) & 0x20) != 0)
  {
    if ((*(_WORD *)(a2 + 324) & 0x20) == 0 || *(float *)(a1 + 288) != *(float *)(a2 + 288))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 324) & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000000000) != 0)
  {
    if ((v3 & 0x100000000000000) == 0 || *(float *)(a1 + 236) != *(float *)(a2 + 236))
      return 0;
  }
  else if ((v3 & 0x100000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000000000000) != 0)
  {
    if ((v3 & 0x2000000000000000) == 0 || *(float *)(a1 + 256) != *(float *)(a2 + 256))
      return 0;
  }
  else if ((v3 & 0x2000000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000000) != 0)
  {
    if ((v3 & 0x200000000000) == 0 || *(float *)(a1 + 192) != *(float *)(a2 + 192))
      return 0;
  }
  else if ((v3 & 0x200000000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 324) & 0x40) != 0)
  {
    if ((*(_WORD *)(a2 + 324) & 0x40) == 0 || *(float *)(a1 + 292) != *(float *)(a2 + 292))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 324) & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000000000) != 0)
  {
    if ((v3 & 0x200000000000000) == 0 || *(float *)(a1 + 240) != *(float *)(a2 + 240))
      return 0;
  }
  else if ((v3 & 0x200000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000000000000) != 0)
  {
    if ((v3 & 0x4000000000000000) == 0 || *(float *)(a1 + 260) != *(float *)(a2 + 260))
      return 0;
  }
  else if ((v3 & 0x4000000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000000) != 0)
  {
    if ((v3 & 0x400000000000) == 0 || *(float *)(a1 + 196) != *(float *)(a2 + 196))
      return 0;
  }
  else if ((v3 & 0x400000000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 324) & 0x80) != 0)
  {
    if ((*(_WORD *)(a2 + 324) & 0x80) == 0 || *(float *)(a1 + 296) != *(float *)(a2 + 296))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 324) & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000000000) != 0)
  {
    if ((v3 & 0x400000000000000) == 0 || *(float *)(a1 + 244) != *(float *)(a2 + 244))
      return 0;
  }
  else if ((v3 & 0x400000000000000) != 0)
  {
    return 0;
  }
  if (v2 < 0)
  {
    if ((v3 & 0x8000000000000000) == 0 || *(float *)(a1 + 264) != *(float *)(a2 + 264))
      return 0;
  }
  else if (v3 < 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000000) != 0)
  {
    if ((v3 & 0x800000000000) == 0 || *(float *)(a1 + 200) != *(float *)(a2 + 200))
      return 0;
  }
  else if ((v3 & 0x800000000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 324) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 324) & 0x100) == 0 || *(float *)(a1 + 300) != *(float *)(a2 + 300))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 324) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000) != 0)
  {
    if ((v3 & 0x100000000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140))
      return 0;
  }
  else if ((v3 & 0x100000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000) != 0)
  {
    if ((v3 & 0x200000000) == 0 || *(float *)(a1 + 144) != *(float *)(a2 + 144))
      return 0;
  }
  else if ((v3 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116))
      return 0;
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000) != 0)
  {
    if ((v3 & 0x80000000) == 0 || *(float *)(a1 + 136) != *(float *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x80000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132))
      return 0;
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124))
      return 0;
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000000) != 0)
  {
    if ((v3 & 0x10000000000) == 0 || *(float *)(a1 + 172) != *(float *)(a2 + 172))
      return 0;
  }
  else if ((v3 & 0x10000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000000) != 0)
  {
    if ((v3 & 0x20000000000) == 0 || *(float *)(a1 + 176) != *(float *)(a2 + 176))
      return 0;
  }
  else if ((v3 & 0x20000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000) != 0)
  {
    if ((v3 & 0x800000000) == 0 || *(float *)(a1 + 152) != *(float *)(a2 + 152))
      return 0;
  }
  else if ((v3 & 0x800000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000) != 0)
  {
    if ((v3 & 0x400000000) == 0 || *(float *)(a1 + 148) != *(float *)(a2 + 148))
      return 0;
  }
  else if ((v3 & 0x400000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000000) != 0)
  {
    if ((v3 & 0x8000000000) == 0 || *(float *)(a1 + 168) != *(float *)(a2 + 168))
      return 0;
  }
  else if ((v3 & 0x8000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000000) != 0)
  {
    if ((v3 & 0x4000000000) == 0 || *(float *)(a1 + 164) != *(float *)(a2 + 164))
      return 0;
  }
  else if ((v3 & 0x4000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000000) != 0)
  {
    if ((v3 & 0x2000000000) == 0 || *(float *)(a1 + 160) != *(float *)(a2 + 160))
      return 0;
  }
  else if ((v3 & 0x2000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000) != 0)
  {
    if ((v3 & 0x1000000000) == 0 || *(float *)(a1 + 156) != *(float *)(a2 + 156))
      return 0;
  }
  else if ((v3 & 0x1000000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 324) & 2) != 0)
  {
    if ((*(_WORD *)(a2 + 324) & 2) == 0 || *(float *)(a1 + 272) != *(float *)(a2 + 272))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 324) & 2) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 324) & 4) == 0)
  {
    if ((*(_WORD *)(a2 + 324) & 4) == 0)
      goto LABEL_411;
    return 0;
  }
  if ((*(_WORD *)(a2 + 324) & 4) == 0 || *(float *)(a1 + 276) != *(float *)(a2 + 276))
    return 0;
LABEL_411:
  v6 = (*(_WORD *)(a2 + 324) & 1) == 0;
  if ((*(_WORD *)(a1 + 324) & 1) != 0)
    return (*(_WORD *)(a2 + 324) & 1) != 0 && *(float *)(a1 + 268) == *(float *)(a2 + 268);
  return v6;
}

BOOL CMMsl::KappaMildImpactResult::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) == 0 || *(float *)(a1 + 8) != *(float *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 8) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 0x10) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 2) == 0 || *(float *)(a1 + 12) != *(float *)(a2 + 12))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 28) & 4) == 0;
  if ((*(_BYTE *)(a1 + 28) & 4) != 0)
    return (*(_BYTE *)(a2 + 28) & 4) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v2;
}

BOOL CMMsl::KappaLackOfMotionResult::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 92);
  v3 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(unsigned __int8 *)(a1 + 90) != *(unsigned __int8 *)(a2 + 90))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(unsigned __int8 *)(a1 + 89) != *(unsigned __int8 *)(a2 + 89))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x10000) == 0;
  if ((v2 & 0x10000) != 0)
    return (v3 & 0x10000) != 0 && *(unsigned __int8 *)(a1 + 88) == *(unsigned __int8 *)(a2 + 88);
  return v4;
}

BOOL CMMsl::KappaSevereCrashResult::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;

  v2 = *(_QWORD *)(a1 + 356);
  v3 = *(_QWORD *)(a1 + 364);
  v5 = *(_QWORD *)(a2 + 356);
  v4 = *(_QWORD *)(a2 + 364);
  if ((v2 & 0x800000) != 0)
  {
    if ((v5 & 0x800000) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132))
      return 0;
  }
  else if ((v5 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v5 & 0x400000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128))
      return 0;
  }
  else if ((v5 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v5 & 0x1000000) == 0 || *(_DWORD *)(a1 + 136) != *(_DWORD *)(a2 + 136))
      return 0;
  }
  else if ((v5 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000000000) != 0)
  {
    if ((v5 & 0x10000000000000) == 0 || *(_DWORD *)(a1 + 248) != *(_DWORD *)(a2 + 248))
      return 0;
  }
  else if ((v5 & 0x10000000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 1) != 0)
  {
    if ((v4 & 1) == 0 || *(float *)(a1 + 296) != *(float *)(a2 + 296))
      return 0;
  }
  else if ((v4 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000000000) != 0)
  {
    if ((v5 & 0x400000000000000) == 0 || *(float *)(a1 + 272) != *(float *)(a2 + 272))
      return 0;
  }
  else if ((v5 & 0x400000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000000) != 0)
  {
    if ((v5 & 0x400000000000) == 0 || *(float *)(a1 + 224) != *(float *)(a2 + 224))
      return 0;
  }
  else if ((v5 & 0x400000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000000) != 0)
  {
    if ((v5 & 0x200000000000) == 0 || *(float *)(a1 + 220) != *(float *)(a2 + 220))
      return 0;
  }
  else if ((v5 & 0x200000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v5 & 0x200) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v5 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000000000) != 0)
  {
    if ((v5 & 0x80000000000000) == 0 || *(_DWORD *)(a1 + 260) != *(_DWORD *)(a2 + 260))
      return 0;
  }
  else if ((v5 & 0x80000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v5 & 0x2000000) == 0 || *(_DWORD *)(a1 + 140) != *(_DWORD *)(a2 + 140))
      return 0;
  }
  else if ((v5 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v5 & 0x10000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104))
      return 0;
  }
  else if ((v5 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v3 & 8) != 0)
  {
    if ((v4 & 8) == 0 || *(float *)(a1 + 308) != *(float *)(a2 + 308))
      return 0;
  }
  else if ((v4 & 8) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10) != 0)
  {
    if ((v4 & 0x10) == 0 || *(float *)(a1 + 312) != *(float *)(a2 + 312))
      return 0;
  }
  else if ((v4 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000000) != 0)
  {
    if ((v5 & 0x80000000000) == 0 || *(_DWORD *)(a1 + 212) != *(_DWORD *)(a2 + 212))
      return 0;
  }
  else if ((v5 & 0x80000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000000) != 0)
  {
    if ((v5 & 0x20000000000) == 0 || *(_DWORD *)(a1 + 204) != *(_DWORD *)(a2 + 204))
      return 0;
  }
  else if ((v5 & 0x20000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000000000) != 0)
  {
    if ((v5 & 0x4000000000000) == 0 || *(float *)(a1 + 240) != *(float *)(a2 + 240))
      return 0;
  }
  else if ((v5 & 0x4000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000000000) != 0)
  {
    if ((v5 & 0x1000000000000000) == 0 || *(_DWORD *)(a1 + 280) != *(_DWORD *)(a2 + 280))
      return 0;
  }
  else if ((v5 & 0x1000000000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 2) != 0)
  {
    if ((v4 & 2) == 0 || *(_DWORD *)(a1 + 300) != *(_DWORD *)(a2 + 300))
      return 0;
  }
  else if ((v4 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v5 & 0x80) == 0 || *(_QWORD *)(a1 + 64) != *(_QWORD *)(a2 + 64))
      return 0;
  }
  else if ((v5 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v5 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v5 & 1) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40) != 0)
  {
    if ((v4 & 0x40) == 0 || *(unsigned __int8 *)(a1 + 317) != *(unsigned __int8 *)(a2 + 317))
      return 0;
  }
  else if ((v4 & 0x40) != 0)
  {
    return 0;
  }
  if ((v3 & 0x80) != 0)
  {
    if ((v4 & 0x80) == 0 || *(unsigned __int8 *)(a1 + 318) != *(unsigned __int8 *)(a2 + 318))
      return 0;
  }
  else if ((v4 & 0x80) != 0)
  {
    return 0;
  }
  if ((v3 & 0x8000) != 0)
  {
    if ((v4 & 0x8000) == 0 || *(unsigned __int8 *)(a1 + 326) != *(unsigned __int8 *)(a2 + 326))
      return 0;
  }
  else if ((v4 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10000) != 0)
  {
    if ((v4 & 0x10000) == 0 || *(unsigned __int8 *)(a1 + 327) != *(unsigned __int8 *)(a2 + 327))
      return 0;
  }
  else if ((v4 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x8000000) != 0)
  {
    if ((v4 & 0x8000000) == 0 || *(unsigned __int8 *)(a1 + 338) != *(unsigned __int8 *)(a2 + 338))
      return 0;
  }
  else if ((v4 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x2000000) != 0)
  {
    if ((v4 & 0x2000000) == 0 || *(unsigned __int8 *)(a1 + 336) != *(unsigned __int8 *)(a2 + 336))
      return 0;
  }
  else if ((v4 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x1000) != 0)
  {
    if ((v4 & 0x1000) == 0 || *(unsigned __int8 *)(a1 + 323) != *(unsigned __int8 *)(a2 + 323))
      return 0;
  }
  else if ((v4 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10000000) != 0)
  {
    if ((v4 & 0x10000000) == 0 || *(unsigned __int8 *)(a1 + 339) != *(unsigned __int8 *)(a2 + 339))
      return 0;
  }
  else if ((v4 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20000000) != 0)
  {
    if ((v4 & 0x20000000) == 0 || *(unsigned __int8 *)(a1 + 340) != *(unsigned __int8 *)(a2 + 340))
      return 0;
  }
  else if ((v4 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x200) != 0)
  {
    if ((v4 & 0x200) == 0 || *(unsigned __int8 *)(a1 + 320) != *(unsigned __int8 *)(a2 + 320))
      return 0;
  }
  else if ((v4 & 0x200) != 0)
  {
    return 0;
  }
  if ((v3 & 0x1000000) != 0)
  {
    if ((v4 & 0x1000000) == 0 || *(unsigned __int8 *)(a1 + 335) != *(unsigned __int8 *)(a2 + 335))
      return 0;
  }
  else if ((v4 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x2000) != 0)
  {
    if ((v4 & 0x2000) == 0 || *(unsigned __int8 *)(a1 + 324) != *(unsigned __int8 *)(a2 + 324))
      return 0;
  }
  else if ((v4 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x4000000) != 0)
  {
    if ((v4 & 0x4000000) == 0 || *(unsigned __int8 *)(a1 + 337) != *(unsigned __int8 *)(a2 + 337))
      return 0;
  }
  else if ((v4 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x80000) != 0)
  {
    if ((v4 & 0x80000) == 0 || *(unsigned __int8 *)(a1 + 330) != *(unsigned __int8 *)(a2 + 330))
      return 0;
  }
  else if ((v4 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x2000000000) != 0)
  {
    if ((v4 & 0x2000000000) == 0 || *(unsigned __int8 *)(a1 + 348) != *(unsigned __int8 *)(a2 + 348))
      return 0;
  }
  else if ((v4 & 0x2000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x200000000) != 0)
  {
    if ((v4 & 0x200000000) == 0 || *(unsigned __int8 *)(a1 + 344) != *(unsigned __int8 *)(a2 + 344))
      return 0;
  }
  else if ((v4 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x4000000000) != 0)
  {
    if ((v4 & 0x4000000000) == 0 || *(unsigned __int8 *)(a1 + 349) != *(unsigned __int8 *)(a2 + 349))
      return 0;
  }
  else if ((v4 & 0x4000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x400000000) != 0)
  {
    if ((v4 & 0x400000000) == 0 || *(unsigned __int8 *)(a1 + 345) != *(unsigned __int8 *)(a2 + 345))
      return 0;
  }
  else if ((v4 & 0x400000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40000000) != 0)
  {
    if ((v4 & 0x40000000) == 0 || *(unsigned __int8 *)(a1 + 341) != *(unsigned __int8 *)(a2 + 341))
      return 0;
  }
  else if ((v4 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x800) != 0)
  {
    if ((v4 & 0x800) == 0 || *(unsigned __int8 *)(a1 + 322) != *(unsigned __int8 *)(a2 + 322))
      return 0;
  }
  else if ((v4 & 0x800) != 0)
  {
    return 0;
  }
  if ((v3 & 0x100000) != 0)
  {
    if ((v4 & 0x100000) == 0 || *(unsigned __int8 *)(a1 + 331) != *(unsigned __int8 *)(a2 + 331))
      return 0;
  }
  else if ((v4 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x8000000000) != 0)
  {
    if ((v4 & 0x8000000000) == 0 || *(unsigned __int8 *)(a1 + 350) != *(unsigned __int8 *)(a2 + 350))
      return 0;
  }
  else if ((v4 & 0x8000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x800000000) != 0)
  {
    if ((v4 & 0x800000000) == 0 || *(unsigned __int8 *)(a1 + 346) != *(unsigned __int8 *)(a2 + 346))
      return 0;
  }
  else if ((v4 & 0x800000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v5 & 0x20000) == 0 || *(_DWORD *)(a1 + 108) != *(_DWORD *)(a2 + 108))
      return 0;
  }
  else if ((v5 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x400000) != 0)
  {
    if ((v4 & 0x400000) == 0 || *(unsigned __int8 *)(a1 + 333) != *(unsigned __int8 *)(a2 + 333))
      return 0;
  }
  else if ((v4 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x800000) != 0)
  {
    if ((v4 & 0x800000) == 0 || *(unsigned __int8 *)(a1 + 334) != *(unsigned __int8 *)(a2 + 334))
      return 0;
  }
  else if ((v4 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20) != 0)
  {
    if ((v4 & 0x20) == 0 || *(unsigned __int8 *)(a1 + 316) != *(unsigned __int8 *)(a2 + 316))
      return 0;
  }
  else if ((v4 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v5 & 0x40000) == 0 || *(_DWORD *)(a1 + 112) != *(_DWORD *)(a2 + 112))
      return 0;
  }
  else if ((v5 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40000000000) != 0)
  {
    if ((v4 & 0x40000000000) == 0 || *(unsigned __int8 *)(a1 + 353) != *(unsigned __int8 *)(a2 + 353))
      return 0;
  }
  else if ((v4 & 0x40000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10000000000) != 0)
  {
    if ((v4 & 0x10000000000) == 0 || *(unsigned __int8 *)(a1 + 351) != *(unsigned __int8 *)(a2 + 351))
      return 0;
  }
  else if ((v4 & 0x10000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20000000000) != 0)
  {
    if ((v4 & 0x20000000000) == 0 || *(unsigned __int8 *)(a1 + 352) != *(unsigned __int8 *)(a2 + 352))
      return 0;
  }
  else if ((v4 & 0x20000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x100000000) != 0)
  {
    if ((v4 & 0x100000000) == 0 || *(unsigned __int8 *)(a1 + 343) != *(unsigned __int8 *)(a2 + 343))
      return 0;
  }
  else if ((v4 & 0x100000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x80000000) != 0)
  {
    if ((v4 & 0x80000000) == 0 || *(unsigned __int8 *)(a1 + 342) != *(unsigned __int8 *)(a2 + 342))
      return 0;
  }
  else if ((v4 & 0x80000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000000000) != 0)
  {
    if ((v5 & 0x20000000000000) == 0 || *(_DWORD *)(a1 + 252) != *(_DWORD *)(a2 + 252))
      return 0;
  }
  else if ((v5 & 0x20000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000000000) != 0)
  {
    if ((v5 & 0x40000000000000) == 0 || *(_DWORD *)(a1 + 256) != *(_DWORD *)(a2 + 256))
      return 0;
  }
  else if ((v5 & 0x40000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v5 & 0x4000000) == 0 || *(_DWORD *)(a1 + 144) != *(_DWORD *)(a2 + 144))
      return 0;
  }
  else if ((v5 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v5 & 0x8000000) == 0 || *(_DWORD *)(a1 + 148) != *(_DWORD *)(a2 + 148))
      return 0;
  }
  else if ((v5 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20000) != 0)
  {
    if ((v4 & 0x20000) == 0 || *(unsigned __int8 *)(a1 + 328) != *(unsigned __int8 *)(a2 + 328))
      return 0;
  }
  else if ((v4 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x4000) != 0)
  {
    if ((v4 & 0x4000) == 0 || *(unsigned __int8 *)(a1 + 325) != *(unsigned __int8 *)(a2 + 325))
      return 0;
  }
  else if ((v4 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000000) != 0)
  {
    if ((v5 & 0x2000000000) == 0 || *(_DWORD *)(a1 + 188) != *(_DWORD *)(a2 + 188))
      return 0;
  }
  else if ((v5 & 0x2000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v5 & 0x80000) == 0 || *(_DWORD *)(a1 + 116) != *(_DWORD *)(a2 + 116))
      return 0;
  }
  else if ((v5 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000) != 0)
  {
    if ((v5 & 0x1000000000) == 0 || *(_DWORD *)(a1 + 184) != *(_DWORD *)(a2 + 184))
      return 0;
  }
  else if ((v5 & 0x1000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000000000000) != 0)
  {
    if ((v5 & 0x4000000000000000) == 0 || *(float *)(a1 + 288) != *(float *)(a2 + 288))
      return 0;
  }
  else if ((v5 & 0x4000000000000000) != 0)
  {
    return 0;
  }
  if (v2 < 0)
  {
    if ((v5 & 0x8000000000000000) == 0 || *(float *)(a1 + 292) != *(float *)(a2 + 292))
      return 0;
  }
  else if (v5 < 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000000000) != 0)
  {
    if ((v5 & 0x200000000000000) == 0 || *(float *)(a1 + 268) != *(float *)(a2 + 268))
      return 0;
  }
  else if ((v5 & 0x200000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000000000) != 0)
  {
    if ((v5 & 0x800000000000000) == 0 || *(_DWORD *)(a1 + 276) != *(_DWORD *)(a2 + 276))
      return 0;
  }
  else if ((v5 & 0x800000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000000000000) != 0)
  {
    if ((v5 & 0x2000000000000000) == 0 || *(_DWORD *)(a1 + 284) != *(_DWORD *)(a2 + 284))
      return 0;
  }
  else if ((v5 & 0x2000000000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x400) != 0)
  {
    if ((v4 & 0x400) == 0 || *(unsigned __int8 *)(a1 + 321) != *(unsigned __int8 *)(a2 + 321))
      return 0;
  }
  else if ((v4 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v5 & 0x4000) == 0 || *(_DWORD *)(a1 + 96) != *(_DWORD *)(a2 + 96))
      return 0;
  }
  else if ((v5 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v5 & 0x1000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v5 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000000) != 0)
  {
    if ((v5 & 0x100000000000) == 0 || *(_DWORD *)(a1 + 216) != *(_DWORD *)(a2 + 216))
      return 0;
  }
  else if ((v5 & 0x100000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000000000) != 0)
  {
    if ((v5 & 0x100000000000000) == 0 || *(_DWORD *)(a1 + 264) != *(_DWORD *)(a2 + 264))
      return 0;
  }
  else if ((v5 & 0x100000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v5 & 0x40) == 0 || *(_QWORD *)(a1 + 56) != *(_QWORD *)(a2 + 56))
      return 0;
  }
  else if ((v5 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000000) != 0)
  {
    if ((v5 & 0x800000000000) == 0 || *(_DWORD *)(a1 + 228) != *(_DWORD *)(a2 + 228))
      return 0;
  }
  else if ((v5 & 0x800000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000000) != 0)
  {
    if ((v5 & 0x1000000000000) == 0 || *(_DWORD *)(a1 + 232) != *(_DWORD *)(a2 + 232))
      return 0;
  }
  else if ((v5 & 0x1000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v5 & 0x100000) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120))
      return 0;
  }
  else if ((v5 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v5 & 0x400) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v5 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v5 & 0x200000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124))
      return 0;
  }
  else if ((v5 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v5 & 0x800) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v5 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v5 & 0x100) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v5 & 0x100) != 0)
  {
    return 0;
  }
  if ((v3 & 0x200000) != 0)
  {
    if ((v4 & 0x200000) == 0 || *(unsigned __int8 *)(a1 + 332) != *(unsigned __int8 *)(a2 + 332))
      return 0;
  }
  else if ((v4 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v3 & 4) != 0)
  {
    if ((v4 & 4) == 0 || *(_DWORD *)(a1 + 304) != *(_DWORD *)(a2 + 304))
      return 0;
  }
  else if ((v4 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v5 & 0x10000000) == 0 || *(_DWORD *)(a1 + 152) != *(_DWORD *)(a2 + 152))
      return 0;
  }
  else if ((v5 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v5 & 0x40000000) == 0 || *(_DWORD *)(a1 + 160) != *(_DWORD *)(a2 + 160))
      return 0;
  }
  else if ((v5 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x1000000000) != 0)
  {
    if ((v4 & 0x1000000000) == 0 || *(unsigned __int8 *)(a1 + 347) != *(unsigned __int8 *)(a2 + 347))
      return 0;
  }
  else if ((v4 & 0x1000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000) != 0)
  {
    if ((v5 & 0x80000000) == 0 || *(_DWORD *)(a1 + 164) != *(_DWORD *)(a2 + 164))
      return 0;
  }
  else if ((v5 & 0x80000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v5 & 0x20000000) == 0 || *(_DWORD *)(a1 + 156) != *(_DWORD *)(a2 + 156))
      return 0;
  }
  else if ((v5 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000000000) != 0)
  {
    if ((v5 & 0x8000000000000) == 0 || *(float *)(a1 + 244) != *(float *)(a2 + 244))
      return 0;
  }
  else if ((v5 & 0x8000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000000) != 0)
  {
    if ((v5 & 0x4000000000) == 0 || *(_DWORD *)(a1 + 192) != *(_DWORD *)(a2 + 192))
      return 0;
  }
  else if ((v5 & 0x4000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000000) != 0)
  {
    if ((v5 & 0x8000000000) == 0 || *(_DWORD *)(a1 + 196) != *(_DWORD *)(a2 + 196))
      return 0;
  }
  else if ((v5 & 0x8000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v5 & 0x8000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
      return 0;
  }
  else if ((v5 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000000) != 0)
  {
    if ((v5 & 0x40000000000) == 0 || *(_DWORD *)(a1 + 208) != *(_DWORD *)(a2 + 208))
      return 0;
  }
  else if ((v5 & 0x40000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000000) != 0)
  {
    if ((v5 & 0x10000000000) == 0 || *(_DWORD *)(a1 + 200) != *(_DWORD *)(a2 + 200))
      return 0;
  }
  else if ((v5 & 0x10000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000) != 0)
  {
    if ((v5 & 0x800000000) == 0 || *(_DWORD *)(a1 + 180) != *(_DWORD *)(a2 + 180))
      return 0;
  }
  else if ((v5 & 0x800000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000) != 0)
  {
    if ((v5 & 0x100000000) == 0 || *(_DWORD *)(a1 + 168) != *(_DWORD *)(a2 + 168))
      return 0;
  }
  else if ((v5 & 0x100000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000) != 0)
  {
    if ((v5 & 0x400000000) == 0 || *(_DWORD *)(a1 + 176) != *(_DWORD *)(a2 + 176))
      return 0;
  }
  else if ((v5 & 0x400000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x100) != 0)
  {
    if ((v4 & 0x100) == 0 || *(unsigned __int8 *)(a1 + 319) != *(unsigned __int8 *)(a2 + 319))
      return 0;
  }
  else if ((v4 & 0x100) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40000) != 0)
  {
    if ((v4 & 0x40000) == 0 || *(unsigned __int8 *)(a1 + 329) != *(unsigned __int8 *)(a2 + 329))
      return 0;
  }
  else if ((v4 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000) != 0)
  {
    if ((v5 & 0x200000000) == 0 || *(_DWORD *)(a1 + 172) != *(_DWORD *)(a2 + 172))
      return 0;
  }
  else if ((v5 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v5 & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((v5 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v5 & 0x20) == 0 || *(_QWORD *)(a1 + 48) != *(_QWORD *)(a2 + 48))
      return 0;
  }
  else if ((v5 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v5 & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((v5 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v5 & 8) == 0 || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
      return 0;
  }
  else if ((v5 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v5 & 0x10) == 0 || *(_QWORD *)(a1 + 40) != *(_QWORD *)(a2 + 40))
      return 0;
  }
  else if ((v5 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000000000) == 0)
  {
    if ((v5 & 0x2000000000000) == 0)
      goto LABEL_531;
    return 0;
  }
  if ((v5 & 0x2000000000000) == 0 || *(_DWORD *)(a1 + 236) != *(_DWORD *)(a2 + 236))
    return 0;
LABEL_531:
  v6 = (*(_QWORD *)(a2 + 356) & 0x2000) == 0;
  if ((v2 & 0x2000) != 0)
    return (v5 & 0x2000) != 0 && *(float *)(a1 + 92) == *(float *)(a2 + 92);
  return v6;
}

BOOL CMMsl::KappaLocalAudioResult::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 v4;

  v2 = *(_QWORD *)(a1 + 172);
  v3 = *(_QWORD *)(a2 + 172);
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140))
      return 0;
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132))
      return 0;
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124))
      return 0;
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000) != 0)
  {
    if ((v3 & 0x80000000) == 0 || *(float *)(a1 + 148) != *(float *)(a2 + 148))
      return 0;
  }
  else if ((v3 & 0x80000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(_DWORD *)(a1 + 104) != *(_DWORD *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(_DWORD *)(a1 + 100) != *(_DWORD *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(float *)(a1 + 144) != *(float *)(a2 + 144))
      return 0;
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(float *)(a1 + 136) != *(float *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000) != 0)
  {
    if ((v3 & 0x100000000) == 0 || *(float *)(a1 + 152) != *(float *)(a2 + 152))
      return 0;
  }
  else if ((v3 & 0x100000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(_DWORD *)(a1 + 108) != *(_DWORD *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(_DWORD *)(a1 + 112) != *(_DWORD *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000000) != 0)
  {
    if ((v3 & 0x40000000000) == 0 || *(unsigned __int8 *)(a1 + 165) != *(unsigned __int8 *)(a2 + 165))
      return 0;
  }
  else if ((v3 & 0x40000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000000) != 0)
  {
    if ((v3 & 0x10000000000) == 0 || *(unsigned __int8 *)(a1 + 163) != *(unsigned __int8 *)(a2 + 163))
      return 0;
  }
  else if ((v3 & 0x10000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000) != 0)
  {
    if ((v3 & 0x200000000) == 0 || *(unsigned __int8 *)(a1 + 156) != *(unsigned __int8 *)(a2 + 156))
      return 0;
  }
  else if ((v3 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000000) != 0)
  {
    if ((v3 & 0x100000000000) == 0 || *(unsigned __int8 *)(a1 + 167) != *(unsigned __int8 *)(a2 + 167))
      return 0;
  }
  else if ((v3 & 0x100000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000) != 0)
  {
    if ((v3 & 0x800000000) == 0 || *(unsigned __int8 *)(a1 + 158) != *(unsigned __int8 *)(a2 + 158))
      return 0;
  }
  else if ((v3 & 0x800000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000000) != 0)
  {
    if ((v3 & 0x4000000000) == 0 || *(unsigned __int8 *)(a1 + 161) != *(unsigned __int8 *)(a2 + 161))
      return 0;
  }
  else if ((v3 & 0x4000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000000) != 0)
  {
    if ((v3 & 0x80000000000) == 0 || *(unsigned __int8 *)(a1 + 166) != *(unsigned __int8 *)(a2 + 166))
      return 0;
  }
  else if ((v3 & 0x80000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000000) != 0)
  {
    if ((v3 & 0x20000000000) == 0 || *(unsigned __int8 *)(a1 + 164) != *(unsigned __int8 *)(a2 + 164))
      return 0;
  }
  else if ((v3 & 0x20000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000) != 0)
  {
    if ((v3 & 0x400000000) == 0 || *(unsigned __int8 *)(a1 + 157) != *(unsigned __int8 *)(a2 + 157))
      return 0;
  }
  else if ((v3 & 0x400000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000000) != 0)
  {
    if ((v3 & 0x200000000000) == 0 || *(unsigned __int8 *)(a1 + 168) != *(unsigned __int8 *)(a2 + 168))
      return 0;
  }
  else if ((v3 & 0x200000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000) != 0)
  {
    if ((v3 & 0x1000000000) == 0 || *(unsigned __int8 *)(a1 + 159) != *(unsigned __int8 *)(a2 + 159))
      return 0;
  }
  else if ((v3 & 0x1000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000000) != 0)
  {
    if ((v3 & 0x8000000000) == 0 || *(unsigned __int8 *)(a1 + 162) != *(unsigned __int8 *)(a2 + 162))
      return 0;
  }
  else if ((v3 & 0x8000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000000) != 0)
  {
    if ((v3 & 0x2000000000) == 0 || *(unsigned __int8 *)(a1 + 160) != *(unsigned __int8 *)(a2 + 160))
      return 0;
  }
  else if ((v3 & 0x2000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(_DWORD *)(a1 + 120) != *(_DWORD *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  v4 = (*(_QWORD *)(a2 + 172) & 0x400) == 0;
  if ((v2 & 0x400) != 0)
    return (v3 & 0x400) != 0 && *(float *)(a1 + 64) == *(float *)(a2 + 64);
  return v4;
}

BOOL CMMsl::KappaRemoteAudioResult::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  _BOOL8 v5;

  v2 = *(_QWORD *)(a1 + 204);
  v3 = *(_QWORD *)(a2 + 204);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  v4 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  if ((*(_WORD *)(a1 + 212) & 2) != 0)
  {
    if ((*(_WORD *)(a2 + 212) & 2) == 0 || *(unsigned __int8 *)(a1 + 188) != *(unsigned __int8 *)(a2 + 188))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 212) & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 212) & 4) != 0)
  {
    if ((*(_WORD *)(a2 + 212) & 4) == 0 || *(unsigned __int8 *)(a1 + 189) != *(unsigned __int8 *)(a2 + 189))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 212) & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000000000) != 0)
  {
    if ((v3 & 0x400000000000000) == 0 || *(unsigned __int8 *)(a1 + 181) != *(unsigned __int8 *)(a2 + 181))
      return 0;
  }
  else if ((v3 & 0x400000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000) != 0)
  {
    if ((v3 & 0x400000000) == 0 || *(unsigned __int8 *)(a1 + 157) != *(unsigned __int8 *)(a2 + 157))
      return 0;
  }
  else if ((v3 & 0x400000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 212) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 212) & 0x400) == 0 || *(unsigned __int8 *)(a1 + 197) != *(unsigned __int8 *)(a2 + 197))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 212) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000000) != 0)
  {
    if ((v3 & 0x40000000000) == 0 || *(unsigned __int8 *)(a1 + 165) != *(unsigned __int8 *)(a2 + 165))
      return 0;
  }
  else if ((v3 & 0x40000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000000000) != 0)
  {
    if ((v3 & 0x4000000000000) == 0 || *(unsigned __int8 *)(a1 + 173) != *(unsigned __int8 *)(a2 + 173))
      return 0;
  }
  else if ((v3 & 0x4000000000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 212) & 8) != 0)
  {
    if ((*(_WORD *)(a2 + 212) & 8) == 0 || *(unsigned __int8 *)(a1 + 190) != *(unsigned __int8 *)(a2 + 190))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 212) & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(float *)(a1 + 144) != *(float *)(a2 + 144))
      return 0;
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000000000000) != 0)
  {
    if ((v3 & 0x4000000000000000) == 0 || *(unsigned __int8 *)(a1 + 185) != *(unsigned __int8 *)(a2 + 185))
      return 0;
  }
  else if ((v3 & 0x4000000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000000) != 0)
  {
    if ((v3 & 0x4000000000) == 0 || *(unsigned __int8 *)(a1 + 161) != *(unsigned __int8 *)(a2 + 161))
      return 0;
  }
  else if ((v3 & 0x4000000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 212) & 0x4000) != 0)
  {
    if ((*(_WORD *)(a2 + 212) & 0x4000) == 0 || *(unsigned __int8 *)(a1 + 201) != *(unsigned __int8 *)(a2 + 201))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 212) & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000000) != 0)
  {
    if ((v3 & 0x400000000000) == 0 || *(unsigned __int8 *)(a1 + 169) != *(unsigned __int8 *)(a2 + 169))
      return 0;
  }
  else if ((v3 & 0x400000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000000000) != 0)
  {
    if ((v3 & 0x40000000000000) == 0 || *(unsigned __int8 *)(a1 + 177) != *(unsigned __int8 *)(a2 + 177))
      return 0;
  }
  else if ((v3 & 0x40000000000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 212) & 0x40) != 0)
  {
    if ((*(_WORD *)(a2 + 212) & 0x40) == 0 || *(unsigned __int8 *)(a1 + 193) != *(unsigned __int8 *)(a2 + 193))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 212) & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132))
      return 0;
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000000000) != 0)
  {
    if ((v3 & 0x800000000000000) == 0 || *(unsigned __int8 *)(a1 + 182) != *(unsigned __int8 *)(a2 + 182))
      return 0;
  }
  else if ((v3 & 0x800000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000) != 0)
  {
    if ((v3 & 0x800000000) == 0 || *(unsigned __int8 *)(a1 + 158) != *(unsigned __int8 *)(a2 + 158))
      return 0;
  }
  else if ((v3 & 0x800000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 212) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 212) & 0x800) == 0 || *(unsigned __int8 *)(a1 + 198) != *(unsigned __int8 *)(a2 + 198))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 212) & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000000) != 0)
  {
    if ((v3 & 0x80000000000) == 0 || *(unsigned __int8 *)(a1 + 166) != *(unsigned __int8 *)(a2 + 166))
      return 0;
  }
  else if ((v3 & 0x80000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000000000) != 0)
  {
    if ((v3 & 0x8000000000000) == 0 || *(unsigned __int8 *)(a1 + 174) != *(unsigned __int8 *)(a2 + 174))
      return 0;
  }
  else if ((v3 & 0x8000000000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 212) & 0x10) != 0)
  {
    if ((*(_WORD *)(a2 + 212) & 0x10) == 0 || *(unsigned __int8 *)(a1 + 191) != *(unsigned __int8 *)(a2 + 191))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 212) & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000) != 0)
  {
    if ((v3 & 0x80000000) == 0 || *(float *)(a1 + 148) != *(float *)(a2 + 148))
      return 0;
  }
  else if ((v3 & 0x80000000) != 0)
  {
    return 0;
  }
  if (v2 < 0)
  {
    if ((v3 & 0x8000000000000000) == 0 || *(unsigned __int8 *)(a1 + 186) != *(unsigned __int8 *)(a2 + 186))
      return 0;
  }
  else if (v3 < 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000000) != 0)
  {
    if ((v3 & 0x8000000000) == 0 || *(unsigned __int8 *)(a1 + 162) != *(unsigned __int8 *)(a2 + 162))
      return 0;
  }
  else if ((v3 & 0x8000000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 212) & 0x8000) != 0)
  {
    if ((*(_WORD *)(a2 + 212) & 0x8000) == 0 || *(unsigned __int8 *)(a1 + 202) != *(unsigned __int8 *)(a2 + 202))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 212) & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000000) != 0)
  {
    if ((v3 & 0x800000000000) == 0 || *(unsigned __int8 *)(a1 + 170) != *(unsigned __int8 *)(a2 + 170))
      return 0;
  }
  else if ((v3 & 0x800000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000000000) != 0)
  {
    if ((v3 & 0x80000000000000) == 0 || *(unsigned __int8 *)(a1 + 178) != *(unsigned __int8 *)(a2 + 178))
      return 0;
  }
  else if ((v3 & 0x80000000000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 212) & 0x80) != 0)
  {
    if ((*(_WORD *)(a2 + 212) & 0x80) == 0 || *(unsigned __int8 *)(a1 + 194) != *(unsigned __int8 *)(a2 + 194))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 212) & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(float *)(a1 + 136) != *(float *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000000000) != 0)
  {
    if ((v3 & 0x1000000000000000) == 0 || *(unsigned __int8 *)(a1 + 183) != *(unsigned __int8 *)(a2 + 183))
      return 0;
  }
  else if ((v3 & 0x1000000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000) != 0)
  {
    if ((v3 & 0x1000000000) == 0 || *(unsigned __int8 *)(a1 + 159) != *(unsigned __int8 *)(a2 + 159))
      return 0;
  }
  else if ((v3 & 0x1000000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 212) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 212) & 0x1000) == 0 || *(unsigned __int8 *)(a1 + 199) != *(unsigned __int8 *)(a2 + 199))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 212) & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000000) != 0)
  {
    if ((v3 & 0x100000000000) == 0 || *(unsigned __int8 *)(a1 + 167) != *(unsigned __int8 *)(a2 + 167))
      return 0;
  }
  else if ((v3 & 0x100000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000000000) != 0)
  {
    if ((v3 & 0x10000000000000) == 0 || *(unsigned __int8 *)(a1 + 175) != *(unsigned __int8 *)(a2 + 175))
      return 0;
  }
  else if ((v3 & 0x10000000000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 212) & 0x20) != 0)
  {
    if ((*(_WORD *)(a2 + 212) & 0x20) == 0 || *(unsigned __int8 *)(a1 + 192) != *(unsigned __int8 *)(a2 + 192))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 212) & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000) != 0)
  {
    if ((v3 & 0x100000000) == 0 || *(float *)(a1 + 152) != *(float *)(a2 + 152))
      return 0;
  }
  else if ((v3 & 0x100000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 212) & 1) != 0)
  {
    if ((*(_WORD *)(a2 + 212) & 1) == 0 || *(unsigned __int8 *)(a1 + 187) != *(unsigned __int8 *)(a2 + 187))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 212) & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000000) != 0)
  {
    if ((v3 & 0x10000000000) == 0 || *(unsigned __int8 *)(a1 + 163) != *(unsigned __int8 *)(a2 + 163))
      return 0;
  }
  else if ((v3 & 0x10000000000) != 0)
  {
    return 0;
  }
  if (((*(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16)) & 0x10000) != 0)
  {
    if ((v4 & 0x10000) == 0 || *(unsigned __int8 *)(a1 + 203) != *(unsigned __int8 *)(a2 + 203))
      return 0;
  }
  else if ((v4 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000000) != 0)
  {
    if ((v3 & 0x1000000000000) == 0 || *(unsigned __int8 *)(a1 + 171) != *(unsigned __int8 *)(a2 + 171))
      return 0;
  }
  else if ((v3 & 0x1000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000000000) != 0)
  {
    if ((v3 & 0x100000000000000) == 0 || *(unsigned __int8 *)(a1 + 179) != *(unsigned __int8 *)(a2 + 179))
      return 0;
  }
  else if ((v3 & 0x100000000000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 212) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 212) & 0x100) == 0 || *(unsigned __int8 *)(a1 + 195) != *(unsigned __int8 *)(a2 + 195))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 212) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124))
      return 0;
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000000000) != 0)
  {
    if ((v3 & 0x200000000000000) == 0 || *(unsigned __int8 *)(a1 + 180) != *(unsigned __int8 *)(a2 + 180))
      return 0;
  }
  else if ((v3 & 0x200000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000) != 0)
  {
    if ((v3 & 0x200000000) == 0 || *(unsigned __int8 *)(a1 + 156) != *(unsigned __int8 *)(a2 + 156))
      return 0;
  }
  else if ((v3 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 212) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 212) & 0x200) == 0 || *(unsigned __int8 *)(a1 + 196) != *(unsigned __int8 *)(a2 + 196))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 212) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000000) != 0)
  {
    if ((v3 & 0x20000000000) == 0 || *(unsigned __int8 *)(a1 + 164) != *(unsigned __int8 *)(a2 + 164))
      return 0;
  }
  else if ((v3 & 0x20000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000000000) != 0)
  {
    if ((v3 & 0x2000000000000) == 0 || *(unsigned __int8 *)(a1 + 172) != *(unsigned __int8 *)(a2 + 172))
      return 0;
  }
  else if ((v3 & 0x2000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140))
      return 0;
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000000000000) != 0)
  {
    if ((v3 & 0x2000000000000000) == 0 || *(unsigned __int8 *)(a1 + 184) != *(unsigned __int8 *)(a2 + 184))
      return 0;
  }
  else if ((v3 & 0x2000000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000000) != 0)
  {
    if ((v3 & 0x2000000000) == 0 || *(unsigned __int8 *)(a1 + 160) != *(unsigned __int8 *)(a2 + 160))
      return 0;
  }
  else if ((v3 & 0x2000000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 212) & 0x2000) != 0)
  {
    if ((*(_WORD *)(a2 + 212) & 0x2000) == 0 || *(unsigned __int8 *)(a1 + 200) != *(unsigned __int8 *)(a2 + 200))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 212) & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000000) == 0)
  {
    if ((v3 & 0x200000000000) == 0)
      goto LABEL_401;
    return 0;
  }
  if ((v3 & 0x200000000000) == 0 || *(unsigned __int8 *)(a1 + 168) != *(unsigned __int8 *)(a2 + 168))
    return 0;
LABEL_401:
  v5 = (v3 & 0x20000000000000) == 0;
  if ((v2 & 0x20000000000000) != 0)
    return (v3 & 0x20000000000000) != 0 && *(unsigned __int8 *)(a1 + 176) == *(unsigned __int8 *)(a2 + 176);
  return v5;
}

BOOL CMMsl::ViewObstructedMachineLearningDecision::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
  return v2;
}

BOOL CMMsl::ViewObstructedMachineLearningFeatures::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 116);
  v3 = *(_DWORD *)(a2 + 116);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  v4 = (*(_DWORD *)(a2 + 116) & 2) == 0;
  if ((v2 & 2) != 0)
    return (v3 & 2) != 0 && *(float *)(a1 + 16) == *(float *)(a2 + 16);
  return v4;
}

BOOL CMMsl::ViewObstructedMachineLearningProbabilities::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 64);
  v3 = *(_WORD *)(a2 + 64);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x400) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 64) & 0x400) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x1000) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 64) & 0x1000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x200) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 64) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x800) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 64) & 0x800) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x100) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 64) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x80) == 0;
  if ((v2 & 0x80) != 0)
    return (v3 & 0x80) != 0 && *(float *)(a1 + 40) == *(float *)(a2 + 40);
  return v4;
}

BOOL CMMsl::RunningArmSwingSignals::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 64) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 64) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 64) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 64) & 0x40) != 0)
  {
    if ((*(_BYTE *)(a2 + 64) & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 64) & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 64) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 64) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 64) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 64) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 64) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 64) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 64) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 64) & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 64) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 64) & 0x20) != 0)
  {
    if ((*(_BYTE *)(a2 + 64) & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 64) & 0x20) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 64) & 8) == 0;
  if ((*(_BYTE *)(a1 + 64) & 8) != 0)
    return (*(_BYTE *)(a2 + 64) & 8) != 0 && *(double *)(a1 + 32) == *(double *)(a2 + 32);
  return v2;
}

BOOL CMMsl::RunningCentripetalAccelSignals::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 120);
  v3 = *(_WORD *)(a2 + 120);
  if ((v2 & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 120) & 0x200) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 120) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 120) & 0x2000) != 0)
  {
    if ((*(_WORD *)(a2 + 120) & 0x2000) == 0 || *(double *)(a1 + 112) != *(double *)(a2 + 112))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 120) & 0x2000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 120) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 120) & 0x400) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 120) & 0x400) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 120) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 120) & 0x800) == 0 || *(double *)(a1 + 96) != *(double *)(a2 + 96))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 120) & 0x800) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 120) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 120) & 0x1000) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 120) & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 120) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 120) & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 120) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  v4 = (v3 & 4) == 0;
  if ((v2 & 4) != 0)
    return (v3 & 4) != 0 && *(double *)(a1 + 24) == *(double *)(a2 + 24);
  return v4;
}

BOOL CMMsl::RunningRotationAxis::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 48) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 48) & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 48) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 48) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 48) & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 48) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 48) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 48) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 48) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 48) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 48) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 48) & 4) == 0;
  if ((*(_BYTE *)(a1 + 48) & 4) != 0)
    return (*(_BYTE *)(a2 + 48) & 4) != 0 && *(double *)(a1 + 24) == *(double *)(a2 + 24);
  return v2;
}

BOOL CMMsl::RunningVerticalOscillationSignals::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 208);
  v3 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(double *)(a1 + 136) != *(double *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(double *)(a1 + 192) != *(double *)(a2 + 192))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(double *)(a1 + 96) != *(double *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(double *)(a1 + 200) != *(double *)(a2 + 200))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(double *)(a1 + 168) != *(double *)(a2 + 168))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(double *)(a1 + 176) != *(double *)(a2 + 176))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(double *)(a1 + 128) != *(double *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(double *)(a1 + 112) != *(double *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(double *)(a1 + 120) != *(double *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(double *)(a1 + 160) != *(double *)(a2 + 160))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(double *)(a1 + 184) != *(double *)(a2 + 184))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(double *)(a1 + 152) != *(double *)(a2 + 152))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(double *)(a1 + 144) != *(double *)(a2 + 144))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  v4 = (*(_DWORD *)(a2 + 208) & 2) == 0;
  if ((v2 & 2) != 0)
    return (v3 & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  return v4;
}

BOOL CMMsl::RunningVerticalOscillation::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 40) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 40) & 2) == 0;
  if ((*(_BYTE *)(a1 + 40) & 2) != 0)
    return (*(_BYTE *)(a2 + 40) & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  return v2;
}

BOOL CMMsl::KappaSpinResult::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  const void *v4;
  const void *v5;
  size_t v6;
  const void *v7;
  const void *v8;
  size_t v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  float *v14;
  float *v15;
  uint64_t v16;
  uint64_t v17;
  float *v18;
  uint64_t v19;
  float v20;
  _BOOL8 result;
  BOOL v22;

  v2 = *(_WORD *)(a1 + 204);
  v3 = *(_WORD *)(a2 + 204);
  if ((v2 & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 204) & 0x1000) == 0 || *(float *)(a1 + 196) != *(float *)(a2 + 196))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 204) & 0x1000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 204) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 204) & 0x800) == 0 || *(float *)(a1 + 192) != *(float *)(a2 + 192))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 204) & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_QWORD *)(a1 + 160) != *(_QWORD *)(a2 + 160))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 204) & 0x4000) != 0)
  {
    if ((*(_WORD *)(a2 + 204) & 0x4000) == 0 || *(unsigned __int8 *)(a1 + 201) != *(unsigned __int8 *)(a2 + 201))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 204) & 0x4000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 204) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 204) & 0x400) == 0 || *(float *)(a1 + 188) != *(float *)(a2 + 188))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 204) & 0x400) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 204) & 0x2000) != 0)
  {
    if ((*(_WORD *)(a2 + 204) & 0x2000) == 0 || *(unsigned __int8 *)(a1 + 200) != *(unsigned __int8 *)(a2 + 200))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 204) & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_QWORD *)(a1 + 144) != *(_QWORD *)(a2 + 144))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_QWORD *)(a1 + 152) != *(_QWORD *)(a2 + 152))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 204) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 204) & 0x100) == 0 || *(float *)(a1 + 180) != *(float *)(a2 + 180))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 204) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 176) != *(float *)(a2 + 176))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 172) != *(float *)(a2 + 172))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 128) != *(_QWORD *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 136) != *(_QWORD *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 204) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 204) & 0x200) == 0 || *(_DWORD *)(a1 + 184) != *(_DWORD *)(a2 + 184))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 204) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 168) != *(float *)(a2 + 168))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  v4 = *(const void **)(a1 + 80);
  v5 = *(const void **)(a2 + 80);
  v6 = *(_QWORD *)(a1 + 88) - (_QWORD)v4;
  if (v6 != *(_QWORD *)(a2 + 88) - (_QWORD)v5)
    return 0;
  if (memcmp(v4, v5, v6))
    return 0;
  v7 = *(const void **)(a1 + 104);
  v8 = *(const void **)(a2 + 104);
  v9 = *(_QWORD *)(a1 + 112) - (_QWORD)v7;
  if (v9 != *(_QWORD *)(a2 + 112) - (_QWORD)v8)
    return 0;
  if (memcmp(v7, v8, v9))
    return 0;
  v11 = *(float **)(a1 + 8);
  v10 = *(float **)(a1 + 16);
  v12 = *(float **)(a2 + 8);
  if ((char *)v10 - (char *)v11 != *(_QWORD *)(a2 + 16) - (_QWORD)v12)
    return 0;
  while (v11 != v10)
  {
    if (*v11 != *v12)
      return 0;
    ++v11;
    ++v12;
  }
  v14 = *(float **)(a1 + 56);
  v13 = *(float **)(a1 + 64);
  v15 = *(float **)(a2 + 56);
  if ((char *)v13 - (char *)v14 != *(_QWORD *)(a2 + 64) - (_QWORD)v15)
    return 0;
  while (v14 != v13)
  {
    if (*v14 != *v15)
      return 0;
    ++v14;
    ++v15;
  }
  v17 = *(_QWORD *)(a1 + 32);
  v16 = *(_QWORD *)(a1 + 40);
  v18 = *(float **)(a2 + 32);
  if (v16 - v17 != *(_QWORD *)(a2 + 40) - (_QWORD)v18)
    return 0;
  if (v17 == v16)
    return 1;
  v19 = v17 + 4;
  do
  {
    v20 = *v18++;
    result = *(float *)(v19 - 4) == v20;
    v22 = *(float *)(v19 - 4) != v20 || v19 == v16;
    v19 += 4;
  }
  while (!v22);
  return result;
}

BOOL CMMsl::KappaPulseDeltaV::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 112);
  v3 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_QWORD *)(a1 + 56) != *(_QWORD *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(unsigned __int8 *)(a1 + 108) != *(unsigned __int8 *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_QWORD *)(a1 + 48) != *(_QWORD *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_QWORD *)(a1 + 40) != *(_QWORD *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  v4 = (*(_DWORD *)(a2 + 112) & 4) == 0;
  if ((v2 & 4) != 0)
    return (v3 & 4) != 0 && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24);
  return v4;
}

BOOL CMMsl::RunningStrideLength::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 136);
  v3 = *(_DWORD *)(a2 + 136);
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(double *)(a1 + 120) != *(double *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(double *)(a1 + 96) != *(double *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(double *)(a1 + 112) != *(double *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(_DWORD *)(a1 + 128) != *(_DWORD *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(unsigned __int8 *)(a1 + 132) != *(unsigned __int8 *)(a2 + 132))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  v4 = (*(_DWORD *)(a2 + 136) & 2) == 0;
  if ((v2 & 2) != 0)
    return (v3 & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  return v4;
}

BOOL CMMsl::KappaHighSpeedCrashResult::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 68);
  v3 = *(_DWORD *)(a2 + 68);
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(unsigned __int8 *)(a1 + 56) != *(unsigned __int8 *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(unsigned __int8 *)(a1 + 57) != *(unsigned __int8 *)(a2 + 57))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(unsigned __int8 *)(a1 + 58) != *(unsigned __int8 *)(a2 + 58))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(unsigned __int8 *)(a1 + 65) != *(unsigned __int8 *)(a2 + 65))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(unsigned __int8 *)(a1 + 63) != *(unsigned __int8 *)(a2 + 63))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(unsigned __int8 *)(a1 + 60) != *(unsigned __int8 *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(unsigned __int8 *)(a1 + 59) != *(unsigned __int8 *)(a2 + 59))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(unsigned __int8 *)(a1 + 64) != *(unsigned __int8 *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(unsigned __int8 *)(a1 + 61) != *(unsigned __int8 *)(a2 + 61))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(unsigned __int8 *)(a1 + 62) != *(unsigned __int8 *)(a2 + 62))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  v4 = (*(_DWORD *)(a2 + 68) & 0x80) == 0;
  if ((v2 & 0x80) != 0)
    return (v3 & 0x80) != 0 && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40);
  return v4;
}

BOOL CMMsl::KappaPulseInertialHgAccel::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 104);
  v3 = *(_WORD *)(a2 + 104);
  if ((v2 & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 104) & 0x800) == 0 || *(_QWORD *)(a1 + 96) != *(_QWORD *)(a2 + 96))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 104) & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 104) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 104) & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 104) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 104) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 104) & 0x200) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 104) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 104) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 104) & 0x400) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 104) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  v4 = (v3 & 4) == 0;
  if ((v2 & 4) != 0)
    return (v3 & 4) != 0 && *(double *)(a1 + 24) == *(double *)(a2 + 24);
  return v4;
}

BOOL CMMsl::PedometerPathStraightness::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 56) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 56) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 56) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 56) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 56) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 56) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 56) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 56) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 56) & 0x20) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 56) & 0x20) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 56) & 1) == 0;
  if ((*(_BYTE *)(a1 + 56) & 1) != 0)
    return (*(_BYTE *)(a2 + 56) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  return v2;
}

BOOL CMMsl::VO2MaxModelInput::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 40) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 40) & 8) == 0;
  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
    return (*(_BYTE *)(a2 + 40) & 8) != 0 && *(double *)(a1 + 32) == *(double *)(a2 + 32);
  return v2;
}

BOOL CMMsl::ProxCalibration::operator==(uint64_t a1, uint64_t a2)
{
  float *v2;
  float *v3;
  float *v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  float v9;
  _BOOL8 result;
  BOOL v11;

  if ((*(_BYTE *)(a1 + 72) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 72) & 2) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 72) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 72) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 72) & 1) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 72) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 72) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 72) & 4) == 0 || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 72) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 72) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 72) & 8) == 0 || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 68))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 72) & 8) != 0)
  {
    return 0;
  }
  v3 = *(float **)(a1 + 8);
  v2 = *(float **)(a1 + 16);
  v4 = *(float **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 16) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v6 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v7 = *(float **)(a2 + 32);
  if (v5 - v6 != *(_QWORD *)(a2 + 40) - (_QWORD)v7)
    return 0;
  if (v6 == v5)
    return 1;
  v8 = v6 + 4;
  do
  {
    v9 = *v7++;
    result = *(float *)(v8 - 4) == v9;
    v11 = *(float *)(v8 - 4) != v9 || v8 == v5;
    v8 += 4;
  }
  while (!v11);
  return result;
}

BOOL CMMsl::KappaStepsResult::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 60);
  v3 = *(_WORD *)(a2 + 60);
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x100) == 0 || *(unsigned __int8 *)(a1 + 56) != *(unsigned __int8 *)(a2 + 56))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 60) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  v4 = (v3 & 2) == 0;
  if ((v2 & 2) != 0)
    return (v3 & 2) != 0 && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
  return v4;
}

BOOL CMMsl::WakeGestureSample::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 84);
  v3 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(unsigned __int8 *)(a1 + 76) != *(unsigned __int8 *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(unsigned __int8 *)(a1 + 81) != *(unsigned __int8 *)(a2 + 81))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(unsigned __int8 *)(a1 + 79) != *(unsigned __int8 *)(a2 + 79))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(unsigned __int8 *)(a1 + 80) != *(unsigned __int8 *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(unsigned __int8 *)(a1 + 78) != *(unsigned __int8 *)(a2 + 78))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(unsigned __int8 *)(a1 + 82) != *(unsigned __int8 *)(a2 + 82))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(unsigned __int8 *)(a1 + 77) != *(unsigned __int8 *)(a2 + 77))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  v4 = (*(_DWORD *)(a2 + 84) & 0x40) == 0;
  if ((v2 & 0x40) != 0)
    return (v3 & 0x40) != 0 && *(_DWORD *)(a1 + 56) == *(_DWORD *)(a2 + 56);
  return v4;
}

BOOL CMMsl::KappaGravityAutocorrelationResult::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 64);
  v3 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x800) == 0 || *(unsigned __int8 *)(a1 + 61) != *(unsigned __int8 *)(a2 + 61))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 64) & 0x800) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x400) == 0 || *(unsigned __int8 *)(a1 + 60) != *(unsigned __int8 *)(a2 + 60))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 64) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x200) == 0 || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 64) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x100) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 64) & 0x100) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x80) == 0;
  if ((v2 & 0x80) != 0)
    return (v3 & 0x80) != 0 && *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 48);
  return v4;
}

BOOL CMMsl::RunningVerticalOscillationGradientBoostedSignals::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 212);
  v3 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(double *)(a1 + 152) != *(double *)(a2 + 152))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(double *)(a1 + 120) != *(double *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(double *)(a1 + 96) != *(double *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(double *)(a1 + 200) != *(double *)(a2 + 200))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(double *)(a1 + 176) != *(double *)(a2 + 176))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(double *)(a1 + 168) != *(double *)(a2 + 168))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(double *)(a1 + 144) != *(double *)(a2 + 144))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(double *)(a1 + 128) != *(double *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(double *)(a1 + 192) != *(double *)(a2 + 192))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(double *)(a1 + 112) != *(double *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(double *)(a1 + 136) != *(double *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(double *)(a1 + 184) != *(double *)(a2 + 184))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(double *)(a1 + 160) != *(double *)(a2 + 160))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x2000000) == 0;
  if ((v2 & 0x2000000) != 0)
    return (v3 & 0x2000000) != 0 && *(unsigned __int8 *)(a1 + 208) == *(unsigned __int8 *)(a2 + 208);
  return v4;
}

BOOL CMMsl::SubStats::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 56);
  v3 = *(_WORD *)(a2 + 56);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 56) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 56) & 0x200) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 56) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 56) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 56) & 0x400) == 0 || *(unsigned __int8 *)(a1 + 52) != *(unsigned __int8 *)(a2 + 52))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 56) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 56) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 56) & 0x100) == 0 || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 56) & 0x100) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x40) == 0;
  if ((v2 & 0x40) != 0)
    return (v3 & 0x40) != 0 && *(float *)(a1 + 36) == *(float *)(a2 + 36);
  return v4;
}

BOOL CMMsl::PedOdomFusionExtendedModeSegment::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 56) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 56) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 56) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 56) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 56) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 56) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 56) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 56) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 56) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 56) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 56) & 0x40) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 0x40) == 0 || *(unsigned __int8 *)(a1 + 52) != *(unsigned __int8 *)(a2 + 52))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 56) & 0x40) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 56) & 0x20) == 0;
  if ((*(_BYTE *)(a1 + 56) & 0x20) != 0)
    return (*(_BYTE *)(a2 + 56) & 0x20) != 0 && *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 48);
  return v2;
}

BOOL CMMsl::MagicMountState::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v2;
}

BOOL CMMsl::PDRPedestrianClassifierState::operator==(uint64_t a1, uint64_t a2)
{
  float *v2;
  float *v3;
  float *v4;
  _BOOL8 v5;

  if ((*(_BYTE *)(a1 + 52) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 52) & 1) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 52) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 52) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 52) & 4) == 0 || *(unsigned __int8 *)(a1 + 48) != *(unsigned __int8 *)(a2 + 48))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 52) & 4) != 0)
  {
    return 0;
  }
  v3 = *(float **)(a1 + 8);
  v2 = *(float **)(a1 + 16);
  v4 = *(float **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 16) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v5 = (*(_BYTE *)(a2 + 52) & 2) == 0;
  if ((*(_BYTE *)(a1 + 52) & 2) != 0)
    return (*(_BYTE *)(a2 + 52) & 2) != 0 && *(double *)(a1 + 40) == *(double *)(a2 + 40);
  return v5;
}

BOOL CMMsl::PDRPlacementClassifierState::operator==(uint64_t a1, uint64_t a2)
{
  float *v2;
  float *v3;
  float *v4;
  _BOOL8 v5;

  if ((*(_BYTE *)(a1 + 52) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 52) & 1) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 52) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 52) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 52) & 4) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 52) & 4) != 0)
  {
    return 0;
  }
  v3 = *(float **)(a1 + 8);
  v2 = *(float **)(a1 + 16);
  v4 = *(float **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 16) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v5 = (*(_BYTE *)(a2 + 52) & 2) == 0;
  if ((*(_BYTE *)(a1 + 52) & 2) != 0)
    return (*(_BYTE *)(a2 + 52) & 2) != 0 && *(double *)(a1 + 40) == *(double *)(a2 + 40);
  return v5;
}

BOOL CMMsl::PDRSpeedEstimatorState::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 32) & 2) == 0;
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
    return (*(_BYTE *)(a2 + 32) & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  return v2;
}

BOOL CMMsl::PDRDOTEstimatorState::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 32) & 2) == 0;
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
    return (*(_BYTE *)(a2 + 32) & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  return v2;
}

BOOL CMMsl::PDRVelocityEstimatorState::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(unsigned __int8 *)(a1 + 48);
  v3 = *(unsigned __int8 *)(a2 + 48);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v3 & v2 & 0x80) != 0)
  {
    if (*(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if (((v3 | v2) & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  v4 = (v3 & 2) == 0;
  if ((v2 & 2) != 0)
    return (v3 & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  return v4;
}

BOOL CMMsl::KMVelocityEstimatorState::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 52);
  v3 = *(_WORD *)(a2 + 52);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 52) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 52) & 0x100) == 0 || *(unsigned __int8 *)(a1 + 48) != *(unsigned __int8 *)(a2 + 48))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 52) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 52) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 52) & 0x200) == 0 || *(unsigned __int8 *)(a1 + 49) != *(unsigned __int8 *)(a2 + 49))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 52) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 52) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 52) & 0x400) == 0 || *(unsigned __int8 *)(a1 + 50) != *(unsigned __int8 *)(a2 + 50))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 52) & 0x400) != 0)
  {
    return 0;
  }
  v4 = (v3 & 2) == 0;
  if ((v2 & 2) != 0)
    return (v3 & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  return v4;
}

BOOL CMMsl::VelocityEstimatorFusionState::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 60);
  v3 = *(_WORD *)(a2 + 60);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x100) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 60) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x200) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 60) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x400) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 60) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  v4 = (v3 & 2) == 0;
  if ((v2 & 2) != 0)
    return (v3 & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  return v4;
}

BOOL CMMsl::PDRFenceReference::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(float *)(a1 + 16) == *(float *)(a2 + 16);
  return v2;
}

BOOL CMMsl::PDRFenceState::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 68);
  v3 = *(_WORD *)(a2 + 68);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x200) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 68) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x400) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 68) & 0x400) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x800) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 68) & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x100) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 68) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x1000) == 0 || *(unsigned __int8 *)(a1 + 64) != *(unsigned __int8 *)(a2 + 64))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 68) & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  v4 = (v3 & 4) == 0;
  if ((v2 & 4) != 0)
    return (v3 & 4) != 0 && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24);
  return v4;
}

BOOL CMMsl::UWBRange::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 56) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 56) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 56) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 56) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 56) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 56) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 56) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 56) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 56) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 56) & 0x10) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 56) & 0x20) == 0;
  if ((*(_BYTE *)(a1 + 56) & 0x20) != 0)
    return (*(_BYTE *)(a2 + 56) & 0x20) != 0 && *(double *)(a1 + 48) == *(double *)(a2 + 48);
  return v2;
}

BOOL CMMsl::KappaTriggerClustersResult::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(unsigned __int16 *)(a1 + 96);
  v3 = *(unsigned __int16 *)(a2 + 96);
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(_DWORD *)(a1 + 84) != *(_DWORD *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_QWORD *)(a1 + 64) != *(_QWORD *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v3 & v2 & 0x8000) != 0)
  {
    if (*(unsigned __int8 *)(a1 + 94) != *(unsigned __int8 *)(a2 + 94))
      return 0;
  }
  else if (((v3 | v2) & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(unsigned __int8 *)(a1 + 93) != *(unsigned __int8 *)(a2 + 93))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(unsigned __int8 *)(a1 + 92) != *(unsigned __int8 *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_QWORD *)(a1 + 40) != *(_QWORD *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_QWORD *)(a1 + 48) != *(_QWORD *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_QWORD *)(a1 + 56) != *(_QWORD *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  v4 = (v3 & 4) == 0;
  if ((v2 & 4) != 0)
    return (v3 & 4) != 0 && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24);
  return v4;
}

BOOL CMMsl::SimActivityEvent::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
LABEL_6:
    v2 = *(_QWORD *)(a1 + 8);
    v3 = *(_QWORD *)(a2 + 8);
    result = v3 == 0;
    if (!v2)
      return result;
    if (!v3)
      return 0;
    if ((*(_BYTE *)(v2 + 12) & 1) != 0)
    {
      if ((*(_BYTE *)(v3 + 12) & 1) == 0 || *(_DWORD *)(v2 + 8) != *(_DWORD *)(v3 + 8))
        return 0;
    }
    else if ((*(_BYTE *)(v3 + 12) & 1) != 0)
    {
      return 0;
    }
    return 1;
  }
  if ((*(_BYTE *)(a2 + 24) & 1) == 0)
    goto LABEL_6;
  return 0;
}

BOOL CMMsl::PDRFeatures::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 108);
  v3 = *(_DWORD *)(a2 + 108);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  v4 = (*(_DWORD *)(a2 + 108) & 2) == 0;
  if ((v2 & 2) != 0)
    return (v3 & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  return v4;
}

BOOL CMMsl::PDRDOTEstimatorStateBody::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 32) & 2) == 0;
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
    return (*(_BYTE *)(a2 + 32) & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  return v2;
}

BOOL CMMsl::PDRDOTEstimatorStateArmSwing::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 32) & 2) == 0;
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
    return (*(_BYTE *)(a2 + 32) & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  return v2;
}

BOOL CMMsl::PDRDOTEstimatorStateHeading::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 32) & 2) == 0;
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
    return (*(_BYTE *)(a2 + 32) & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  return v2;
}

BOOL CMMsl::PDRSpeedEstimatorStateDebug::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 32) & 2) == 0;
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
    return (*(_BYTE *)(a2 + 32) & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  return v2;
}

BOOL CMMsl::PrecisionFindingDOTEstimate::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 24) & 1) == 0;
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    return (*(_BYTE *)(a2 + 24) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  return v2;
}

BOOL CMMsl::PrecisionFindingState::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 92);
  v3 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 92) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 92) & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 92) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 92) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 92) & 0x800) == 0 || *(unsigned __int8 *)(a1 + 88) != *(unsigned __int8 *)(a2 + 88))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 92) & 0x800) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 92) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 92) & 0x400) == 0 || *(_DWORD *)(a1 + 84) != *(_DWORD *)(a2 + 84))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 92) & 0x400) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 92) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 92) & 0x200) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 92) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 92) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 92) & 0x1000) == 0 || *(unsigned __int8 *)(a1 + 89) != *(unsigned __int8 *)(a2 + 89))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 92) & 0x1000) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x20) == 0;
  if ((v2 & 0x20) != 0)
    return (v3 & 0x20) != 0 && *(double *)(a1 + 48) == *(double *)(a2 + 48);
  return v4;
}

BOOL CMMsl::KappaRoadsResult::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 40) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 8) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 0x10) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 40) & 2) == 0;
  if ((*(_BYTE *)(a1 + 40) & 2) != 0)
    return (*(_BYTE *)(a2 + 40) & 2) != 0 && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
  return v2;
}

BOOL CMMsl::PrecisionFindingVelocityEstimate::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(unsigned __int8 *)(a1 + 44);
  v3 = *(unsigned __int8 *)(a2 + 44);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v3 & v2 & 0x80) != 0)
  {
    if (*(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if (((v3 | v2) & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  v4 = (v3 & 8) == 0;
  if ((v2 & 8) != 0)
    return (v3 & 8) != 0 && *(float *)(a1 + 24) == *(float *)(a2 + 24);
  return v4;
}

BOOL CMMsl::PrecisionFindingRangeFilter::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 40) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 4) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 0x10) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 0x20) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 0x20) == 0 || *(unsigned __int8 *)(a1 + 36) != *(unsigned __int8 *)(a2 + 36))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 0x20) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 40) & 0x40) == 0;
  if ((*(_BYTE *)(a1 + 40) & 0x40) != 0)
    return (*(_BYTE *)(a2 + 40) & 0x40) != 0 && *(unsigned __int8 *)(a1 + 37) == *(unsigned __int8 *)(a2 + 37);
  return v2;
}

BOOL CMMsl::PDRDOTMeasurementSelectorState::operator==(uint64_t a1, uint64_t a2)
{
  float *v2;
  float *v3;
  float *v4;
  _BOOL8 v5;

  if ((*(_BYTE *)(a1 + 52) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 52) & 1) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 52) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 52) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 52) & 4) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 52) & 4) != 0)
  {
    return 0;
  }
  v3 = *(float **)(a1 + 8);
  v2 = *(float **)(a1 + 16);
  v4 = *(float **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 16) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v5 = (*(_BYTE *)(a2 + 52) & 2) == 0;
  if ((*(_BYTE *)(a1 + 52) & 2) != 0)
    return (*(_BYTE *)(a2 + 52) & 2) != 0 && *(double *)(a1 + 40) == *(double *)(a2 + 40);
  return v5;
}

BOOL CMMsl::PDRDOTEstimatorUncertaintyModelOnBody::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 0x20) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 0x40) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 0x10) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 40) & 8) == 0;
  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
    return (*(_BYTE *)(a2 + 40) & 8) != 0 && *(float *)(a1 + 24) == *(float *)(a2 + 24);
  return v2;
}

BOOL CMMsl::PeerState::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v2;
}

BOOL CMMsl::MagnetometerCalibratorFilterParameters::operator==(uint64_t a1, uint64_t a2)
{
  float *v2;
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  uint64_t v11;
  uint64_t v12;
  float *v13;
  uint64_t v14;
  float v15;
  _BOOL8 result;
  BOOL v17;

  if ((*(_BYTE *)(a1 + 112) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 112) & 1) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 112) & 1) != 0)
  {
    return 0;
  }
  v3 = *(float **)(a1 + 32);
  v2 = *(float **)(a1 + 40);
  v4 = *(float **)(a2 + 32);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 40) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v6 = *(float **)(a1 + 8);
  v5 = *(float **)(a1 + 16);
  v7 = *(float **)(a2 + 8);
  if ((char *)v5 - (char *)v6 != *(_QWORD *)(a2 + 16) - (_QWORD)v7)
    return 0;
  while (v6 != v5)
  {
    if (*v6 != *v7)
      return 0;
    ++v6;
    ++v7;
  }
  v9 = *(float **)(a1 + 80);
  v8 = *(float **)(a1 + 88);
  v10 = *(float **)(a2 + 80);
  if ((char *)v8 - (char *)v9 != *(_QWORD *)(a2 + 88) - (_QWORD)v10)
    return 0;
  while (v9 != v8)
  {
    if (*v9 != *v10)
      return 0;
    ++v9;
    ++v10;
  }
  v12 = *(_QWORD *)(a1 + 56);
  v11 = *(_QWORD *)(a1 + 64);
  v13 = *(float **)(a2 + 56);
  if (v11 - v12 != *(_QWORD *)(a2 + 64) - (_QWORD)v13)
    return 0;
  if (v12 == v11)
    return 1;
  v14 = v12 + 4;
  do
  {
    v15 = *v13++;
    result = *(float *)(v14 - 4) == v15;
    v17 = *(float *)(v14 - 4) != v15 || v14 == v11;
    v14 += 4;
  }
  while (!v17);
  return result;
}

BOOL CMMsl::KappaActivityPhone::operator==(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float *v11;
  const void *v12;
  const void *v13;
  size_t v14;
  const void *v15;
  const void *v16;
  size_t v17;
  _BOOL8 result;

  v4 = *(_BYTE *)(a1 + 140);
  v5 = *(_BYTE *)(a2 + 140);
  if ((v4 & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 140) & 1) == 0 || *(_QWORD *)(a1 + 104) != *(_QWORD *)(a2 + 104))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 140) & 1) != 0)
  {
    return 0;
  }
  v7 = *(float **)(a1 + 8);
  v6 = *(float **)(a1 + 16);
  v8 = *(float **)(a2 + 8);
  if ((char *)v6 - (char *)v7 != *(_QWORD *)(a2 + 16) - (_QWORD)v8)
    return 0;
  while (v7 != v6)
  {
    if (*v7 != *v8)
      return 0;
    ++v7;
    ++v8;
  }
  if ((*(_BYTE *)(a1 + 140) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 140) & 4) == 0 || *(_DWORD *)(a1 + 120) != *(_DWORD *)(a2 + 120))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 140) & 4) != 0)
  {
    return 0;
  }
  v10 = *(float **)(a1 + 80);
  v9 = *(float **)(a1 + 88);
  v11 = *(float **)(a2 + 80);
  if ((char *)v9 - (char *)v10 != *(_QWORD *)(a2 + 88) - (_QWORD)v11)
    return 0;
  while (v10 != v9)
  {
    if (*v10 != *v11)
      return 0;
    ++v10;
    ++v11;
  }
  if ((*(_BYTE *)(a1 + 140) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 140) & 2) == 0 || *(_QWORD *)(a1 + 112) != *(_QWORD *)(a2 + 112))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 140) & 2) != 0)
  {
    return 0;
  }
  v12 = *(const void **)(a1 + 32);
  v13 = *(const void **)(a2 + 32);
  v14 = *(_QWORD *)(a1 + 40) - (_QWORD)v12;
  if (v14 != *(_QWORD *)(a2 + 40) - (_QWORD)v13)
    return 0;
  if (memcmp(v12, v13, v14))
    return 0;
  v15 = *(const void **)(a1 + 56);
  v16 = *(const void **)(a2 + 56);
  v17 = *(_QWORD *)(a1 + 64) - (_QWORD)v15;
  if (v17 != *(_QWORD *)(a2 + 64) - (_QWORD)v16 || memcmp(v15, v16, v17))
    return 0;
  if ((v4 & 0x20) != 0)
  {
    if ((v5 & 0x20) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132))
      return 0;
  }
  else if ((v5 & 0x20) != 0)
  {
    return 0;
  }
  if ((v4 & 8) != 0)
  {
    if ((v5 & 8) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124))
      return 0;
  }
  else if ((v5 & 8) != 0)
  {
    return 0;
  }
  if ((v4 & 0x10) == 0)
  {
    if ((v5 & 0x10) == 0)
      goto LABEL_45;
    return 0;
  }
  if ((v5 & 0x10) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128))
    return 0;
LABEL_45:
  result = (v5 & 0x40) == 0;
  if ((v4 & 0x40) != 0)
    return (v5 & 0x40) != 0 && *(float *)(a1 + 136) == *(float *)(a2 + 136);
  return result;
}

BOOL CMMsl::KappaActivityWatch::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v4;
  __int16 v5;
  const void *v6;
  size_t v7;
  const void *v8;
  _BOOL8 result;
  const void *v10;
  const void *v11;
  size_t v12;

  v4 = *(_WORD *)(a1 + 104);
  v5 = *(_WORD *)(a2 + 104);
  if ((v4 & 1) != 0)
  {
    if ((v5 & 1) == 0 || *(_QWORD *)(a1 + 56) != *(_QWORD *)(a2 + 56))
      return 0;
  }
  else if ((v5 & 1) != 0)
  {
    return 0;
  }
  v6 = *(const void **)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40) - (_QWORD)v6;
  v8 = *(const void **)(a2 + 32);
  if (v7 != *(_QWORD *)(a2 + 40) - (_QWORD)v8 || memcmp(v6, v8, v7))
    return 0;
  if ((v4 & 0x100) != 0)
  {
    if ((v5 & 0x100) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
      return 0;
  }
  else if ((v5 & 0x100) != 0)
  {
    return 0;
  }
  if ((v4 & 0x40) != 0)
  {
    if ((v5 & 0x40) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92))
      return 0;
  }
  else if ((v5 & 0x40) != 0)
  {
    return 0;
  }
  if ((v4 & 0x80) != 0)
  {
    if ((v5 & 0x80) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v5 & 0x80) != 0)
  {
    return 0;
  }
  if ((v4 & 0x20) != 0)
  {
    if ((v5 & 0x20) == 0 || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88))
      return 0;
  }
  else if ((v5 & 0x20) != 0)
  {
    return 0;
  }
  if ((v4 & 2) != 0)
  {
    if ((v5 & 2) == 0 || *(_QWORD *)(a1 + 64) != *(_QWORD *)(a2 + 64))
      return 0;
  }
  else if ((v5 & 2) != 0)
  {
    return 0;
  }
  if ((v4 & 4) != 0)
  {
    if ((v5 & 4) == 0 || *(_QWORD *)(a1 + 72) != *(_QWORD *)(a2 + 72))
      return 0;
  }
  else if ((v5 & 4) != 0)
  {
    return 0;
  }
  v10 = *(const void **)(a1 + 8);
  v11 = *(const void **)(a2 + 8);
  v12 = *(_QWORD *)(a1 + 16) - (_QWORD)v10;
  if (v12 != *(_QWORD *)(a2 + 16) - (_QWORD)v11 || memcmp(v10, v11, v12))
    return 0;
  if ((v4 & 0x10) == 0)
  {
    if ((v5 & 0x10) == 0)
      goto LABEL_47;
    return 0;
  }
  if ((v5 & 0x10) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
    return 0;
LABEL_47:
  result = (v5 & 8) == 0;
  if ((v4 & 8) != 0)
    return (v5 & 8) != 0 && *(float *)(a1 + 80) == *(float *)(a2 + 80);
  return result;
}

BOOL CMMsl::PrecisionFindingSessionStartStop::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
  return v2;
}

BOOL CMMsl::PDRDOTEstimatorStateDebug::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 32) & 2) == 0;
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
    return (*(_BYTE *)(a2 + 32) & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  return v2;
}

BOOL CMMsl::PDRDOTEstimatorStateBodyDebug::operator==(uint64_t a1, uint64_t a2)
{
  float *v2;
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  _BOOL8 v8;

  if ((*(_BYTE *)(a1 + 72) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 72) & 1) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 72) & 1) != 0)
  {
    return 0;
  }
  v3 = *(float **)(a1 + 8);
  v2 = *(float **)(a1 + 16);
  v4 = *(float **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 16) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v6 = *(float **)(a1 + 32);
  v5 = *(float **)(a1 + 40);
  v7 = *(float **)(a2 + 32);
  if ((char *)v5 - (char *)v6 != *(_QWORD *)(a2 + 40) - (_QWORD)v7)
    return 0;
  while (v6 != v5)
  {
    if (*v6 != *v7)
      return 0;
    ++v6;
    ++v7;
  }
  if ((*(_BYTE *)(a1 + 72) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 72) & 2) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 72) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 72) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 72) & 8) == 0 || *(unsigned __int8 *)(a1 + 69) != *(unsigned __int8 *)(a2 + 69))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 72) & 8) != 0)
  {
    return 0;
  }
  v8 = (*(_BYTE *)(a2 + 72) & 4) == 0;
  if ((*(_BYTE *)(a1 + 72) & 4) != 0)
    return (*(_BYTE *)(a2 + 72) & 4) != 0 && *(unsigned __int8 *)(a1 + 68) == *(unsigned __int8 *)(a2 + 68);
  return v8;
}

BOOL CMMsl::KappaPeakDetectorMapResult::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  const void *v4;
  const void *v5;
  size_t v6;
  float *v7;
  float *v8;
  float *v9;
  _BOOL8 result;
  int v13;

  v2 = *(_DWORD *)(a1 + 152);
  v3 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_QWORD *)(a1 + 80) != *(_QWORD *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(_DWORD *)(a1 + 128) != *(_DWORD *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_QWORD *)(a1 + 88) != *(_QWORD *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 144) != *(float *)(a2 + 144))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_QWORD *)(a1 + 96) != *(_QWORD *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  v13 = *(_DWORD *)(a1 + 152);
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(unsigned __int8 *)(a1 + 148) != *(unsigned __int8 *)(a2 + 148))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_QWORD *)(a1 + 104) != *(_QWORD *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 132) != *(_DWORD *)(a2 + 132))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_QWORD *)(a1 + 72) != *(_QWORD *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 136) != *(float *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  v4 = *(const void **)(a1 + 8);
  v5 = *(const void **)(a2 + 8);
  v6 = *(_QWORD *)(a1 + 16) - (_QWORD)v4;
  if (v6 != *(_QWORD *)(a2 + 16) - (_QWORD)v5)
    return 0;
  if (memcmp(v4, v5, v6))
    return 0;
  v8 = *(float **)(a1 + 32);
  v7 = *(float **)(a1 + 40);
  v9 = *(float **)(a2 + 32);
  if ((char *)v7 - (char *)v8 != *(_QWORD *)(a2 + 40) - (_QWORD)v9)
    return 0;
  while (v8 != v7)
  {
    if (*v8 != *v9)
      return 0;
    ++v8;
    ++v9;
  }
  if ((v13 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 56) != *(_QWORD *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v13 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 64) != *(_QWORD *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  result = (v3 & 0x20000) == 0;
  if ((v13 & 0x20000) == 0)
    return result;
  return (v3 & 0x20000) != 0 && *(unsigned __int8 *)(a1 + 149) == *(unsigned __int8 *)(a2 + 149);
}

BOOL CMMsl::KappaPeakDetectorMapMagTimestamps::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 44) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 8) == 0 || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 0x10) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 0x10) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 44) & 4) == 0;
  if ((*(_BYTE *)(a1 + 44) & 4) != 0)
    return (*(_BYTE *)(a2 + 44) & 4) != 0 && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24);
  return v2;
}

BOOL CMMsl::PrecisionFindingVerticalState::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 60);
  v3 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x100) == 0 || *(unsigned __int8 *)(a1 + 58) != *(unsigned __int8 *)(a2 + 58))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 60) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(unsigned __int8 *)(a1 + 56) != *(unsigned __int8 *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x80) == 0;
  if ((v2 & 0x80) != 0)
    return (v3 & 0x80) != 0 && *(unsigned __int8 *)(a1 + 57) == *(unsigned __int8 *)(a2 + 57);
  return v4;
}

BOOL CMMsl::PencilFusionDMYawAlignmentUpdate::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  v2 = *(unsigned __int8 *)(a1 + 64);
  v3 = *(unsigned __int8 *)(a2 + 64);
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_QWORD *)(a1 + 40) != *(_QWORD *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v3 & v2 & 0x80) != 0)
    return *(_DWORD *)(a1 + 60) == *(_DWORD *)(a2 + 60);
  else
    return ((v3 | v2) & 0x80u) == 0;
}

BOOL CMMsl::PencilFusionRingSensorTrustModelUpdate::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 8) == 0 || *(unsigned __int8 *)(a1 + 28) != *(unsigned __int8 *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 4) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 32) & 1) == 0;
  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
    return (*(_BYTE *)(a2 + 32) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  return v2;
}

BOOL CMMsl::SafetyHertzSample::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 24) & 2) == 0;
  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
    return (*(_BYTE *)(a2 + 24) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v2;
}

BOOL CMMsl::SafetyCompanionStatus::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v2;
}

BOOL CMMsl::PTSConsumedGNSS::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    if (!v5 || !CMMsl::LocationOscarEmu::operator==(v4, v5))
      return 0;
LABEL_6:
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_QWORD *)(a2 + 8);
    result = v7 == 0;
    if (!v6)
      return result;
    if (!v7)
      return 0;
    if ((*(_BYTE *)(v6 + 12) & 1) != 0)
    {
      if ((*(_BYTE *)(v7 + 12) & 1) == 0 || *(_DWORD *)(v6 + 8) != *(_DWORD *)(v7 + 8))
        return 0;
    }
    else if ((*(_BYTE *)(v7 + 12) & 1) != 0)
    {
      return 0;
    }
    return 1;
  }
  if (!v5)
    goto LABEL_6;
  return 0;
}

BOOL CMMsl::PTSForwardPropagation::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  if ((*(_BYTE *)(a1 + 64) & 0x20) != 0)
  {
    if ((*(_BYTE *)(a2 + 64) & 0x20) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
LABEL_6:
    if ((*(_BYTE *)(a1 + 64) & 8) != 0)
    {
      if ((*(_BYTE *)(a2 + 64) & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
        return 0;
    }
    else if ((*(_BYTE *)(a2 + 64) & 8) != 0)
    {
      return 0;
    }
    if ((*(_BYTE *)(a1 + 64) & 0x10) != 0)
    {
      if ((*(_BYTE *)(a2 + 64) & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
        return 0;
    }
    else if ((*(_BYTE *)(a2 + 64) & 0x10) != 0)
    {
      return 0;
    }
    if ((*(_BYTE *)(a1 + 64) & 4) != 0)
    {
      if ((*(_BYTE *)(a2 + 64) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
        return 0;
    }
    else if ((*(_BYTE *)(a2 + 64) & 4) != 0)
    {
      return 0;
    }
    if ((*(_BYTE *)(a1 + 64) & 1) != 0)
    {
      if ((*(_BYTE *)(a2 + 64) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
        return 0;
    }
    else if ((*(_BYTE *)(a2 + 64) & 1) != 0)
    {
      return 0;
    }
    if ((*(_BYTE *)(a1 + 64) & 2) != 0)
    {
      if ((*(_BYTE *)(a2 + 64) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
        return 0;
    }
    else if ((*(_BYTE *)(a2 + 64) & 2) != 0)
    {
      return 0;
    }
    v2 = *(_QWORD *)(a1 + 48);
    v3 = *(_QWORD *)(a2 + 48);
    result = v3 == 0;
    if (!v2)
      return result;
    if (!v3)
      return 0;
    if ((*(_BYTE *)(v2 + 12) & 1) != 0)
    {
      if ((*(_BYTE *)(v3 + 12) & 1) == 0 || *(_DWORD *)(v2 + 8) != *(_DWORD *)(v3 + 8))
        return 0;
    }
    else if ((*(_BYTE *)(v3 + 12) & 1) != 0)
    {
      return 0;
    }
    return 1;
  }
  if ((*(_BYTE *)(a2 + 64) & 0x20) == 0)
    goto LABEL_6;
  return 0;
}

BOOL CMMsl::PTSReconstructedRoute::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::PTSForwardPropagation::operator==(v2, v3);
  return result;
}

BOOL CMMsl::PTSMapMatchedRoute::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::PTSForwardPropagation::operator==(v2, v3);
  return result;
}

BOOL CMMsl::KData1::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v2;
}

BOOL CMMsl::KData2::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 100);
  v3 = *(_DWORD *)(a2 + 100);
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x80000) == 0;
  if ((v2 & 0x80000) != 0)
    return (v3 & 0x80000) != 0 && *(unsigned __int8 *)(a1 + 96) == *(unsigned __int8 *)(a2 + 96);
  return v4;
}

BOOL CMMsl::KData3::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 28) & 2) == 0;
  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
    return (*(_BYTE *)(a2 + 28) & 2) != 0 && *(float *)(a1 + 16) == *(float *)(a2 + 16);
  return v2;
}

BOOL CMMsl::SafetyRemoteSample::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 52) & 0x20) != 0)
  {
    if ((*(_BYTE *)(a2 + 52) & 0x20) == 0 || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 52) & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 52) & 0x40) != 0)
  {
    if ((*(_BYTE *)(a2 + 52) & 0x40) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 52) & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 52) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 52) & 0x10) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 52) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 52) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 52) & 8) == 0 || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 52) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 52) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 52) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 52) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 52) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 52) & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 52) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 52) & 2) == 0;
  if ((*(_BYTE *)(a1 + 52) & 2) != 0)
    return (*(_BYTE *)(a2 + 52) & 2) != 0 && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
  return v2;
}

BOOL CMMsl::SafetyTrustedAudioResult::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 v4;

  v2 = *(_QWORD *)(a1 + 188);
  v3 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(_QWORD *)(a1 + 72) != *(_QWORD *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_QWORD *)(a1 + 40) != *(_QWORD *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(float *)(a1 + 152) != *(float *)(a2 + 152))
      return 0;
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_QWORD *)(a1 + 56) != *(_QWORD *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(float *)(a1 + 164) != *(float *)(a2 + 164))
      return 0;
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(float *)(a1 + 148) != *(float *)(a2 + 148))
      return 0;
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_QWORD *)(a1 + 48) != *(_QWORD *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(float *)(a1 + 160) != *(float *)(a2 + 160))
      return 0;
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(float *)(a1 + 156) != *(float *)(a2 + 156))
      return 0;
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_QWORD *)(a1 + 64) != *(_QWORD *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 136) != *(float *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(float *)(a1 + 144) != *(float *)(a2 + 144))
      return 0;
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 92) != *(_DWORD *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000) != 0)
  {
    if ((v3 & 0x100000000) == 0 || *(float *)(a1 + 172) != *(float *)(a2 + 172))
      return 0;
  }
  else if ((v3 & 0x100000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000) != 0)
  {
    if ((v3 & 0x400000000) == 0 || *(float *)(a1 + 180) != *(float *)(a2 + 180))
      return 0;
  }
  else if ((v3 & 0x400000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000) != 0)
  {
    if ((v3 & 0x200000000) == 0 || *(float *)(a1 + 176) != *(float *)(a2 + 176))
      return 0;
  }
  else if ((v3 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000) != 0)
  {
    if ((v3 & 0x80000000) == 0 || *(float *)(a1 + 168) != *(float *)(a2 + 168))
      return 0;
  }
  else if ((v3 & 0x80000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000) != 0)
  {
    if ((v3 & 0x800000000) == 0 || *(unsigned __int8 *)(a1 + 184) != *(unsigned __int8 *)(a2 + 184))
      return 0;
  }
  else if ((v3 & 0x800000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000) != 0)
  {
    if ((v3 & 0x1000000000) == 0 || *(unsigned __int8 *)(a1 + 185) != *(unsigned __int8 *)(a2 + 185))
      return 0;
  }
  else if ((v3 & 0x1000000000) != 0)
  {
    return 0;
  }
  v4 = (*(_QWORD *)(a2 + 188) & 0x200) == 0;
  if ((v2 & 0x200) != 0)
    return (v3 & 0x200) != 0 && *(_DWORD *)(a1 + 80) == *(_DWORD *)(a2 + 80);
  return v4;
}

BOOL CMMsl::SPUPlaybackExampleDeviceMotion::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::DeviceMotion::operator==(v2, v3);
  return result;
}

BOOL CMMsl::SPUPlaybackExampleMotionStateUpdate::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::MotionStateUpdate::operator==(v2, v3);
  return result;
}

unint64_t CMMsl::Item::hash_value(CMMsl::Item *this)
{
  double v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  CMMsl::GyroBiasConstraints *v6;
  uint64_t v7;
  unint64_t v8;
  CMMsl::GravityConstraints *v9;
  uint64_t v10;
  CMMsl::DeviceMotionCorrection *v11;
  CMMsl::CompassConstraints *v12;
  uint64_t v13;
  CMMsl::DeviceMotionCorrection *v14;
  uint64_t v15;
  char v16;
  BOOL v17;
  uint64_t v18;
  int v19;
  float v20;
  BOOL v21;
  uint64_t v22;
  CMMsl::IntersiloNSCodingData *v23;
  CMMsl::DeviceMotionCovariance *v24;
  CMMsl::AccessoryAccel *v25;
  CMMsl::AccessoryGyro *v26;
  CMMsl::AccessoryProx *v27;
  uint64_t v28;
  CMMsl::Accel *v29;
  uint64_t v30;
  CMMsl::BodyMetrics *v31;
  uint64_t v32;
  CMMsl::ElevationChange *v33;
  uint64_t v34;
  CMMsl::OnsetHeartRateData *v35;
  uint64_t v36;
  CMMsl::RotationRate *v37;
  uint64_t v38;
  CMMsl::OdometerWithAltitude *v39;
  uint64_t v40;
  CMMsl::WorkoutEvent *v41;
  CMMsl::VO2MaxInput *v42;
  uint64_t v43;
  CMMsl::DeviceMotion **v44;
  CMMsl::DeviceMotion **v45;
  uint64_t v46;
  CMMsl::DeviceMotion *v47;
  CMMsl::BraveHeartNatalieData *v48;
  uint64_t v49;
  CMMsl::VO2MaxInput **v50;
  CMMsl::VO2MaxInput **v51;
  uint64_t v52;
  CMMsl::VO2MaxInput *v53;
  uint64_t v54;
  CMMsl::Accel **v55;
  CMMsl::Accel **v56;
  uint64_t v57;
  CMMsl::Accel *v58;
  CMMsl::BraveHeartWorkoutEvent *v59;
  CMMsl::WorkoutRecorderHealthKitInfo *v60;
  CMMsl::PearlAttitude *v61;
  CMMsl::RotationRate *v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  CMMsl::WatchOnWristState *v69;
  CMMsl::CatherineHealthKitData *v70;
  uint64_t v71;
  CMMsl::InEarTransitionEntry *v72;
  CMMsl::InEarSession *v73;
  CMMsl::InEarBaseline *v74;
  CMMsl::AccessoryProxSensorDrop *v75;
  CMMsl::AccessoryProxTempComp *v76;
  CMMsl::AccessoryWake *v77;
  CMMsl::FacePose *v78;
  uint64_t v79;
  uint64_t v80;
  CMMsl::Pressure *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  CMMsl::AccessoryDeviceMotion *v85;
  CMMsl::VisionCompassBias *v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  CMMsl::VIOEstimation *v90;
  CMMsl::LSLHeadingEstimation *v91;
  CMMsl::FallSnippet *v92;
  CMMsl::AccelerometerPace *v93;
  uint64_t v94;
  float v95;
  BOOL v96;
  uint64_t v97;
  CMMsl::StepCountEntry *v98;
  CMMsl::MobilityBoutMetrics *v99;
  CMMsl::CoprocessorReplyGaitMetrics *v100;
  CMMsl::VIOPose *v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  CMMsl::VIOReplayPose *v105;
  CMMsl::VisualStateMeasurement *v106;
  CMMsl::KappaTriggerDebug *v107;
  CMMsl::KappaDirectionOfTravel *v108;
  uint64_t v109;
  CMMsl::Accel *v110;
  CMMsl::KappaSteps *v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  CMMsl::KappaRoads *v116;
  CMMsl::UserStudyEvent *v117;
  CMMsl::AuxiliaryDeviceMotion *v118;
  CMMsl::TempestPoCAuxiliaryDeviceMotion *v119;
  CMMsl::AudioAccessoryDeviceMotion *v120;
  CMMsl::TempestPoCListenerOrientation *v121;
  uint64_t v122;
  CMMsl::Accel *v123;
  uint64_t v124;
  float v125;
  BOOL v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  float v130;
  BOOL v131;
  uint64_t v132;
  CMMsl::VisualLocalization *v133;
  CMMsl::GyroFactoryCalibrationData *v134;
  uint64_t v135;
  char v136;
  float v137;
  BOOL v138;
  uint64_t v139;
  uint64_t v140;
  CMMsl::FrequencyResponse *v141;
  uint64_t v142;
  char v143;
  uint64_t v144;
  uint64_t v145;
  CMMsl::Accel *v146;
  CMMsl::MotionLocation *v147;
  CMMsl::MotionActivity *v148;
  CMMsl::BioMotionPose *v149;
  CMMsl::KappaTrigger *v150;
  CMMsl::RelDMInSystemConfig *v151;
  uint64_t v152;
  CMMsl::BioMotionPose *v153;
  uint64_t v154;
  CMMsl::BioMotionPose *v155;
  CMMsl::GyroCalibrationSample *v156;
  CMMsl::GyroCalibrationSampleNonlinear *v157;
  uint64_t v158;
  CMMsl::GyroCalibrationSampleNonlinear **v159;
  CMMsl::GyroCalibrationSampleNonlinear **v160;
  uint64_t v161;
  CMMsl::GyroCalibrationSampleNonlinear *v162;
  uint64_t v163;
  CMMsl::GyroCalibrationSample **v164;
  CMMsl::GyroCalibrationSample **v165;
  uint64_t v166;
  CMMsl::GyroCalibrationSample *v167;
  CMMsl::BioMotionClassification *v168;
  uint64_t v169;
  CMMsl::BioMotionClassification *v170;
  uint64_t v171;
  CMMsl::BioMotionClassification *v172;
  uint64_t v173;
  CMMsl::BioMotionClassification *v174;
  CMMsl::Pose *v175;
  CMMsl::PoseState *v176;
  CMMsl::BioMotionPredictedPose *v177;
  uint64_t v178;
  CMMsl::BioMotionPredictedPose *v179;
  uint64_t v180;
  CMMsl::BioMotionPredictedPose *v181;
  uint64_t v182;
  CMMsl::Pressure *v183;
  CMMsl::VO2MaxOutput *v184;
  CMMsl::MagneticAccessoryType1 *v185;
  uint64_t v186;
  CMMsl::PressureCalibration *v187;
  uint64_t v188;
  CMMsl::Magnetometer *v189;
  uint64_t v190;
  CMMsl::CompassCalibration *v191;
  CMMsl::CV3DPredictedPose *v192;
  CMMsl::BioMotionLinkLengthFitParameters *v193;
  CMMsl::BioMotionOnlineLinkLengthUpdate *v194;
  CMMsl::ODTPose *v195;
  uint64_t v196;
  char v197;
  double v198;
  BOOL v199;
  uint64_t v200;
  int v201;
  BOOL v202;
  double v203;
  CMMsl::PencilTouch *v204;
  uint64_t v205;
  char v206;
  BOOL v207;
  uint64_t v208;
  int v209;
  float v210;
  BOOL v211;
  uint64_t v212;
  uint64_t v213;
  char v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  CMMsl::CV3DSLAMState *v218;
  uint64_t v219;
  CMMsl::BioMotionAnchor *v220;
  uint64_t v221;
  CMMsl::PropagatedAnchor *v222;
  CMMsl::WalkingSteadinessClassification *v223;
  CMMsl::SteadinessModelResult *v224;
  CMMsl::SteadinessEvent *v225;
  CMMsl::SteadinessModelGaitBaselineFeatures *v226;
  CMMsl::SteadinessModelContinuousWalkingFeatures *v227;
  CMMsl::SteadinessModelTemporalDispersionFeatures *v228;
  CMMsl::SteadinessModelTemporalEntropyFeatures *v229;
  CMMsl::SteadinessModelBalanceFeatures *v230;
  CMMsl::MagnetometerReset *v231;
  uint64_t v232;
  CMMsl::WatchOnWristState *v233;
  CMMsl::LiftToWakeOnHeadStatus *v234;
  CMMsl::AccessoryMagnetometer *v235;
  CMMsl::StepCountEntryAddition *v236;
  CMMsl::StepDistanceFusionResult *v237;
  uint64_t v238;
  CMMsl::SkeletonJoint **v239;
  CMMsl::SkeletonJoint **v240;
  uint64_t v241;
  CMMsl::SkeletonJoint *v242;
  CMMsl::CVWatchCalories *v243;
  CMMsl::FaceBlendShapeCoefficientsSample *v244;
  CMMsl::BatteryStatus *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  char v249;
  uint64_t v250;
  CMMsl::FocusModes *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  CMMsl::AltimeterKF *v255;
  CMMsl::LiftToWakeState *v256;
  CMMsl::ViewObstructedState *v257;
  CMMsl::RunningFormMetrics *v258;
  uint64_t v259;
  uint64_t v260;
  CMMsl::ARKitWorldPose *v261;
  uint64_t v262;
  uint64_t v263;
  BOOL v264;
  uint64_t v265;
  CMMsl::PocketDetectionPacket *v266;
  CMMsl::LiftToWakeFeaturesNeo *v267;
  CMMsl::LiftToWakeStatusNeo *v268;
  CMMsl::RunningPower *v269;
  CMMsl::BasebandCompassCoex *v270;
  CMMsl::BasebandCompassCoexConstraints *v271;
  CMMsl::MotionContextActivity *v272;
  uint64_t v273;
  char v274;
  uint64_t v275;
  CMMsl::AccelTNBFrame *v276;
  CMMsl::DoTEstimatorWithTNB *v277;
  CMMsl::PdrMLModelOutput *v278;
  CMMsl::GaitEventsModelOutput *v279;
  CMMsl::GaitEventsStrideAggregation *v280;
  CMMsl::GaitEventsHKResult *v281;
  uint64_t v282;
  int v283;
  BOOL v284;
  uint64_t v285;
  CMMsl::WorkoutRecorderAveragedALSData *v286;
  CMMsl::StrideCalEntry *v287;
  CMMsl::RunningSpeedKFResult *v288;
  CMMsl::ProxPDP *v289;
  CMMsl::KeyboardMotionFeatures *v290;
  uint64_t v291;
  char v292;
  BOOL v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  float v298;
  BOOL v299;
  uint64_t v300;
  uint64_t v301;
  int v302;
  BOOL v303;
  uint64_t v304;
  CMMsl::WakeGestureNotification *v305;
  CMMsl::ProxBaselineEstimatorState *v306;
  CMMsl::BaselineResetCheck *v307;
  CMMsl::RhythmicGnssOperatorStatus *v308;
  uint64_t v309;
  int v310;
  BOOL v311;
  uint64_t v312;
  uint64_t v313;
  int v314;
  BOOL v315;
  uint64_t v316;
  CMMsl::BacklightState *v317;
  uint64_t v318;
  unint64_t v319;
  uint64_t v320;
  CMMsl::HeartRateReference *v321;
  CMMsl::Skeleton2D *v322;
  CMMsl::Skeleton3DRetargeted *v323;
  CMMsl::Skeleton3DLifted *v324;
  CMMsl::FitnessMachineSample *v325;
  CMMsl::WatchHeartRateData *v326;
  CMMsl::FacePoseSynchronized *v327;
  CMMsl::WatchActiveCalories *v328;
  CMMsl::WatchBasalCalories *v329;
  CMMsl::TrackRunData *v330;
  CMMsl::GnssAvailabilityPredictorData *v331;
  CMMsl::GnssLeechLocationData *v332;
  CMMsl::MapsRouteHintData *v333;
  CMMsl::FitnessMachineData *v334;
  uint64_t v335;
  CMMsl::FitnessMachineData *v336;
  CMMsl::AccessoryActivityStateUpdate *v337;
  CMMsl::PedestrianFenceExit *v338;
  CMMsl::InertialOdometry *v339;
  CMMsl::PhysicalEffortInput *v340;
  CMMsl::PhysicalEffortSample *v341;
  CMMsl::PedestrianCalorieModelDebugging *v342;
  CMMsl::ElevationThreshold *v343;
  CMMsl::InitialHistoricalMeanSeaLevelPressure *v344;
  uint64_t v345;
  char v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  CMMsl::PencilDeviceMotion *v350;
  CMMsl::PencilFusionResult *v351;
  uint64_t v352;
  int v353;
  BOOL v354;
  uint64_t v355;
  CMMsl::SteadinessModelHarmonicFeatures *v356;
  CMMsl::PencilFusionReplayResult *v357;
  CMMsl::MobilitySmoothedGaitMetrics *v358;
  uint64_t v359;
  char v360;
  BOOL v361;
  uint64_t v362;
  uint64_t v363;
  CMMsl::AccessoryHeartRate *v364;
  CMMsl::AccessoryPPG *v365;
  CMMsl::MotionLoiAltitudeData *v366;
  uint64_t v367;
  char v368;
  BOOL v369;
  uint64_t v370;
  uint64_t v371;
  CMMsl::PostureJoint *v372;
  uint64_t v373;
  CMMsl::PostureJoint **v374;
  CMMsl::PostureJoint **v375;
  uint64_t v376;
  CMMsl::PostureJoint *v377;
  uint64_t v378;
  int v379;
  BOOL v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  int v384;
  BOOL v385;
  uint64_t v386;
  uint64_t v387;
  CMMsl::OnsetHeartRateData *v388;
  uint64_t v389;
  unint64_t v390;
  uint64_t v391;
  CMMsl::Accel *v392;
  CMMsl::AccelBatch *v393;
  uint64_t v394;
  CMMsl::Accel *v395;
  uint64_t v396;
  CMMsl::Accel *v397;
  CMMsl::Gyro *v398;
  CMMsl::GyroOscarEmu *v399;
  uint64_t v400;
  char v401;
  float v402;
  BOOL v403;
  uint64_t v404;
  uint64_t v405;
  CMMsl::GyroBiasAndVariance *v406;
  CMMsl::GyroBiasFit *v407;
  uint64_t v408;
  float v409;
  BOOL v410;
  uint64_t v411;
  CMMsl::Magnetometer *v412;
  CMMsl::Compass *v413;
  uint64_t v414;
  char v415;
  BOOL v416;
  uint64_t v417;
  uint64_t v418;
  CMMsl::GyroCompass *v419;
  CMMsl::CompassCalibration *v420;
  CMMsl::Pressure *v421;
  uint64_t v422;
  CMMsl::Pressure *v423;
  uint64_t v424;
  CMMsl::Pressure *v425;
  uint64_t v426;
  char v427;
  BOOL v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  int v432;
  BOOL v433;
  uint64_t v434;
  CMMsl::DeviceMotion *v435;
  CMMsl::MotionStateUpdate *v436;
  CMMsl::AccelGps *v437;
  CMMsl::GyroGps *v438;
  uint64_t v439;
  CMMsl::Pressure *v440;
  CMMsl::BTConnection *v441;
  uint64_t v442;
  char v443;
  BOOL v444;
  uint64_t v445;
  uint64_t v446;
  CMMsl::LocationOscarEmu *v447;
  CMMsl::MotionHint *v448;
  CMMsl::EnhancedDeviceMotion *v449;
  CMMsl::NonlinearBiasFit *v450;
  CMMsl::NatalieData *v451;
  CMMsl::BodyMetrics *v452;
  CMMsl::WorkoutEvent *v453;
  CMMsl::OnsetHeartRateData *v454;
  uint64_t v455;
  CMMsl::OnsetHeartRateData *v456;
  CMMsl::ElevationChange *v457;
  uint64_t v458;
  char v459;
  BOOL v460;
  uint64_t v461;
  uint64_t v462;
  CMMsl::MotionGPSLocation *v463;
  uint64_t v464;
  CMMsl::MotionGPSLocation *v465;
  CMMsl::StrideCalBin *v466;
  uint64_t v467;
  CMMsl::Odometer *v468;
  CMMsl::MetsInfo *v469;
  CMMsl::FallStats *v470;
  CMMsl::BasebandSpeed *v471;
  uint64_t v472;
  CMMsl::StepCadenceToStrideLengthBin *v473;
  uint64_t v474;
  char v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  CMMsl::MotionLoiData *v480;
  CMMsl::OdometerWithAltitude *v481;
  uint64_t v482;
  uint64_t v483;
  float v484;
  BOOL v485;
  uint64_t v486;
  CMMsl::InEarTransition *v487;
  CMMsl::ClefCalibration *v488;
  CMMsl::AirpodEvent *v489;
  CMMsl::InEarOptical *v490;
  CMMsl::InEarConstraints *v491;
  CMMsl::InEarOpenLid *v492;
  CMMsl::InEarBaselining *v493;
  CMMsl::AccessoryConfig *v494;
  CMMsl::AccessoryAccelConfig *v495;
  CMMsl::AccessoryProximityConfig *v496;
  CMMsl::TapDetect *v497;
  CMMsl::TapAccept *v498;
  CMMsl::DoubleTap *v499;
  CMMsl::AccessoryWakeDebug *v500;
  CMMsl::GeomagneticData *v501;
  CMMsl::RelativeDeviceMotionInternal *v502;
  uint64_t v503;
  unint64_t v504;
  CMMsl::RelativeGravityConstraints *v505;
  uint64_t v506;
  CMMsl::DeviceMotionCorrection *v507;
  CMMsl::AnchorCorrection *v508;
  CMMsl::PredictedRelativeDeviceMotion *v509;
  CMMsl::MovementStatsSignal *v510;
  CMMsl::MovementStatsGravityProjection *v511;
  uint64_t v512;
  unint64_t v513;
  uint64_t v514;
  CMMsl::AccessoryConfig *v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  CMMsl::GaitCycleSegment *v520;
  CMMsl::GaitCycleSegmentationState *v521;
  CMMsl::CompassCalibrationAttempt *v522;
  uint64_t v523;
  CMMsl::DeviceMotionCorrection *v524;
  CMMsl::VisualLocalizationAttitudeConstraints *v525;
  uint64_t v526;
  CMMsl::AccessoryConfig *v527;
  CMMsl::FallDetectionReferee *v528;
  CMMsl::FallDetectionReplay *v529;
  CMMsl::FallDetectionStateMachine *v530;
  CMMsl::FallDetectionDetector *v531;
  CMMsl::FallFalsePositiveSuppressionFeatures *v532;
  CMMsl::AccessoryDeviceMotionConfig *v533;
  CMMsl::RelativeDeviceMotionCorrelatedMotion *v534;
  CMMsl::RelativeDeviceMotionComplexTransition *v535;
  CMMsl::DeviceMotionAlwaysOn *v536;
  uint64_t v537;
  int v538;
  uint64_t v539;
  CMMsl::WalkingDetectionResult *v540;
  uint64_t v541;
  uint64_t v542;
  float v543;
  BOOL v544;
  uint64_t v545;
  CMMsl::FallDetectionWristStateReplay *v546;
  CMMsl::GyroBiasEstimateError *v547;
  CMMsl::StepLikelihoodFeatures *v548;
  CMMsl::FirstStepFeatures *v549;
  CMMsl::AccessoryStepDetectorDebug *v550;
  CMMsl::SitStandDetectorFeatures *v551;
  uint64_t v552;
  char v553;
  BOOL v554;
  uint64_t v555;
  uint64_t v556;
  CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand *v557;
  CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit *v558;
  uint64_t v559;
  uint64_t v560;
  BOOL v561;
  uint64_t v562;
  CMMsl::FallDistanceReplay *v563;
  CMMsl::JitterBufferLevel *v564;
  CMMsl::PressureFiltered1HzLowPass *v565;
  CMMsl::MotionActivityReplay *v566;
  CMMsl::FallDetectionActivityClassifierReplay *v567;
  CMMsl::LegacyALS5CHInput *v568;
  uint64_t v569;
  char v570;
  BOOL v571;
  uint64_t v572;
  uint64_t v573;
  CMMsl::DopplerProximityEvent *v574;
  CMMsl::DopplerRawDataInput *v575;
  CMMsl::DopplerDebugRecord *v576;
  uint64_t v577;
  char v578;
  BOOL v579;
  uint64_t v580;
  uint64_t v581;
  CMMsl::KappaAudioResult *v582;
  CMMsl::KappaBaroResult *v583;
  CMMsl::KappaGpsResult *v584;
  CMMsl::KappaPulseResult *v585;
  CMMsl::KappaZgResult *v586;
  uint64_t v587;
  char v588;
  uint64_t v589;
  CMMsl::KappaPulseInertialAccel *v590;
  uint64_t v591;
  char v592;
  uint64_t v593;
  uint64_t v594;
  char v595;
  uint64_t v596;
  CMMsl::KappaAirbagResult *v597;
  CMMsl::KappaCrashResult *v598;
  CMMsl::KappaQuiescenceResult *v599;
  CMMsl::KappaRecoveryResult *v600;
  CMMsl::KappaRolloverCrashResult *v601;
  CMMsl::KappaMildImpactResult *v602;
  CMMsl::KappaLackOfMotionResult *v603;
  CMMsl::KappaSevereCrashResult *v604;
  CMMsl::KappaLocalAudioResult *v605;
  CMMsl::KappaRemoteAudioResult *v606;
  CMMsl::DirectionOfTravelMetrics *v607;
  uint64_t v608;
  int v609;
  uint64_t v610;
  CMMsl::HeadToHeadsetTransformationEstimate *v611;
  CMMsl::ViewObstructedMachineLearningFeatures *v612;
  CMMsl::ViewObstructedMachineLearningProbabilities *v613;
  CMMsl::RunningArmSwingSignals *v614;
  CMMsl::RunningCentripetalAccelSignals *v615;
  CMMsl::RunningRotationAxis *v616;
  CMMsl::RunningVerticalOscillationSignals *v617;
  CMMsl::RunningVerticalOscillation *v618;
  CMMsl::KappaSpinResult *v619;
  CMMsl::KappaPulseDeltaV *v620;
  CMMsl::RunningStrideLength *v621;
  CMMsl::ISPPacket *v622;
  CMMsl::KappaHighSpeedCrashResult *v623;
  CMMsl::KappaPulseInertialHgAccel *v624;
  CMMsl::HarmonicMetrics *v625;
  CMMsl::CalorieControllerMETsConsumed *v626;
  CMMsl::PedometerPathStraightness *v627;
  CMMsl::ComplexHandMotion *v628;
  CMMsl::ElevationGradeEstimator *v629;
  CMMsl::VO2MaxModelInput *v630;
  CMMsl::ProxCalibration *v631;
  CMMsl::KappaStepsResult *v632;
  CMMsl::WakeGestureSample *v633;
  CMMsl::KappaGravityAutocorrelationResult *v634;
  CMMsl::RunningVerticalOscillationGradientBoostedSignals *v635;
  CMMsl::SubStats *v636;
  CMMsl::PedOdomFusionExtendedModeSegment *v637;
  uint64_t v638;
  char v639;
  uint64_t v640;
  uint64_t v641;
  CMMsl::PDRPedestrianClassifierState *v642;
  CMMsl::PDRPlacementClassifierState *v643;
  CMMsl::PDRSpeedEstimatorState *v644;
  CMMsl::PDRDOTEstimatorState *v645;
  CMMsl::PDRVelocityEstimatorState *v646;
  CMMsl::KMVelocityEstimatorState *v647;
  CMMsl::VelocityEstimatorFusionState *v648;
  uint64_t v649;
  char v650;
  BOOL v651;
  uint64_t v652;
  int v653;
  float v654;
  BOOL v655;
  uint64_t v656;
  CMMsl::PDRFenceState *v657;
  CMMsl::UWBRange *v658;
  CMMsl::SwingDoTCandidate *v659;
  CMMsl::DoTEstimatorHandSwing *v660;
  CMMsl::KappaTriggerClustersResult *v661;
  uint64_t v662;
  char v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  char v667;
  CMMsl::PDRFeatures *v668;
  CMMsl::PDRDOTEstimatorStateBody *v669;
  CMMsl::PDRDOTEstimatorStateArmSwing *v670;
  CMMsl::PDRDOTEstimatorStateHeading *v671;
  CMMsl::AccessoryActivityAlseepConfidenceEpoch *v672;
  CMMsl::PDRSpeedEstimatorStateDebug *v673;
  uint64_t v674;
  char v675;
  double v676;
  BOOL v677;
  uint64_t v678;
  int v679;
  BOOL v680;
  double v681;
  CMMsl::PrecisionFindingState *v682;
  CMMsl::KappaRoadsResult *v683;
  CMMsl::PrecisionFindingVelocityEstimate *v684;
  CMMsl::PrecisionFindingRangeFilter *v685;
  CMMsl::PDRDOTMeasurementSelectorState *v686;
  uint64_t v687;
  char v688;
  uint64_t v689;
  uint64_t v690;
  CMMsl::PDRDOTEstimatorUncertaintyModelOnBody *v691;
  uint64_t v692;
  char v693;
  BOOL v694;
  uint64_t v695;
  uint64_t v696;
  CMMsl::MagnetometerCalibratorFilterParameters *v697;
  CMMsl::KappaActivityPhone *v698;
  CMMsl::KappaActivityWatch *v699;
  uint64_t v700;
  int v701;
  BOOL v702;
  uint64_t v703;
  CMMsl::PDRDOTEstimatorStateDebug *v704;
  CMMsl::PDRDOTEstimatorStateBodyDebug *v705;
  CMMsl::KappaPeakDetectorMapResult *v706;
  CMMsl::KappaPeakDetectorMapMagTimestamps *v707;
  CMMsl::PrecisionFindingVerticalState *v708;
  CMMsl::Altimeter *v709;
  CMMsl::FaceDownDetection *v710;
  CMMsl::PencilFusionDMYawAlignmentUpdate *v711;
  CMMsl::PencilFusionRingSensorTrustModelUpdate *v712;
  CMMsl::AccessorySleepStateUpdate *v713;
  CMMsl::AccessorySleepStateConfidenceEpoch *v714;
  uint64_t v715;
  char v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  char v722;
  uint64_t v723;
  uint64_t v724;
  CMMsl::PTSConsumedGNSS *v725;
  CMMsl::PTSForwardPropagation *v726;
  uint64_t v727;
  CMMsl::PTSForwardPropagation *v728;
  CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *v729;
  uint64_t v730;
  CMMsl::PTSForwardPropagation *v731;
  CMMsl::AnchorMotionCorrespondence *v732;
  uint64_t v733;
  char v734;
  uint64_t v735;
  uint64_t v736;
  CMMsl::KData2 *v737;
  CMMsl::KData3 *v738;
  CMMsl::SafetyRemoteSample *v739;
  CMMsl::SafetyTrustedAudioResult *v740;
  uint64_t v741;
  CMMsl::DeviceMotion *v742;
  uint64_t v743;
  uint64_t v744;
  CMMsl::MotionStateUpdate *v745;
  unint64_t v746;
  uint64_t v747;
  unint64_t v748;
  unint64_t v749;
  unint64_t v750;
  unint64_t v751;
  unint64_t v752;
  uint64_t v754;
  unint64_t v755;
  unint64_t v756;
  uint64_t v757;
  unint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  unint64_t v762;
  uint64_t v763;
  unint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  unint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  unint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  unint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  unint64_t v901;
  uint64_t v902;
  uint64_t v903;
  unint64_t v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  unint64_t v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  unint64_t v916;
  unint64_t v917;
  unint64_t v918;
  unint64_t v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  unint64_t v923;
  uint64_t v924;
  uint64_t v925;
  unint64_t v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  unint64_t v933;
  unint64_t v934;
  unint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  unint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  unint64_t v956;
  unint64_t v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  unint64_t v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  unint64_t v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  uint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  unint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  uint64_t v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  unint64_t v1029;
  unint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  uint64_t v1035;
  unint64_t v1036;
  unint64_t v1037;
  uint64_t v1038;
  uint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  uint64_t v1057;
  uint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  uint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  uint64_t v1068;
  uint64_t v1069;
  uint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  unint64_t v1074;
  uint64_t v1075;
  unint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  unint64_t v1083;
  uint64_t v1084;
  unint64_t v1085;
  uint64_t v1086;
  uint64_t v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  uint64_t v1094;
  uint64_t v1095;
  unint64_t v1096;
  uint64_t v1097;
  uint64_t v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  uint64_t v1106;
  uint64_t v1107;
  uint64_t v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  unint64_t v1113;
  uint64_t v1114;
  uint64_t v1115;
  unint64_t v1116;
  unint64_t v1117;
  unint64_t v1118;
  uint64_t v1119;
  uint64_t v1120;
  uint64_t v1121;
  uint64_t v1122;
  uint64_t v1123;
  uint64_t v1124;
  unint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  unint64_t v1129;
  uint64_t v1130;
  uint64_t v1131;
  uint64_t v1132;
  uint64_t v1133;
  uint64_t v1134;
  uint64_t v1135;
  uint64_t v1136;
  uint64_t v1137;
  uint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  uint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  uint64_t v1144;
  uint64_t v1145;
  uint64_t v1146;
  unint64_t v1147;
  uint64_t v1148;
  uint64_t v1149;
  uint64_t v1150;
  uint64_t v1151;
  uint64_t v1152;
  uint64_t v1153;
  uint64_t v1154;
  uint64_t v1155;
  uint64_t v1156;
  uint64_t v1157;
  uint64_t v1158;
  uint64_t v1159;
  unint64_t v1160;
  uint64_t v1161;
  uint64_t v1162;
  unint64_t v1163;
  uint64_t v1164;
  uint64_t v1165;
  uint64_t v1166;
  uint64_t v1167;
  unint64_t v1168;
  uint64_t v1169;
  uint64_t v1170;
  uint64_t v1171;
  uint64_t v1172;
  uint64_t v1173;
  uint64_t v1174;
  uint64_t v1175;
  uint64_t v1176;
  uint64_t v1177;
  uint64_t v1178;
  uint64_t v1179;
  uint64_t v1180;
  uint64_t v1181;
  uint64_t v1182;
  uint64_t v1183;
  uint64_t v1184;
  uint64_t v1185;
  uint64_t v1186;
  uint64_t v1187;
  uint64_t v1188;
  unint64_t v1189;
  uint64_t v1190;
  uint64_t v1191;
  uint64_t v1192;
  double v1193;

  if ((*((_BYTE *)this + 3616) & 1) != 0)
  {
    v2 = *((double *)this + 77);
    if (v2 == 0.0)
      v2 = 0.0;
  }
  else
  {
    v2 = 0.0;
  }
  v3 = *((_QWORD *)this + 146);
  v1193 = v2;
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
      v4 = CMMsl::DeviceMotionCorrection::hash_value((CMMsl::DeviceMotionCorrection *)v4);
    if ((*(_BYTE *)(v3 + 20) & 1) != 0)
      v5 = *(int *)(v3 + 16);
    else
      v5 = 0;
    v764 = v5 ^ v4;
  }
  else
  {
    v764 = 0;
  }
  v6 = (CMMsl::GyroBiasConstraints *)*((_QWORD *)this + 145);
  if (v6)
    v763 = CMMsl::GyroBiasConstraints::hash_value(v6);
  else
    v763 = 0;
  v7 = *((_QWORD *)this + 142);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
      v8 = CMMsl::DeviceMotionCorrection::hash_value((CMMsl::DeviceMotionCorrection *)v8);
    v762 = v8 ^ ((*(unsigned __int8 *)(v7 + 20) << 31 >> 31) & *(_BYTE *)(v7 + 16));
  }
  else
  {
    v762 = 0;
  }
  v9 = (CMMsl::GravityConstraints *)*((_QWORD *)this + 141);
  if (v9)
    v761 = CMMsl::GravityConstraints::hash_value(v9);
  else
    v761 = 0;
  v10 = *((_QWORD *)this + 85);
  if (v10 && (v11 = *(CMMsl::DeviceMotionCorrection **)(v10 + 8)) != 0)
    v770 = CMMsl::DeviceMotionCorrection::hash_value(v11);
  else
    v770 = 0;
  v12 = (CMMsl::CompassConstraints *)*((_QWORD *)this + 84);
  if (v12)
    v760 = CMMsl::CompassConstraints::hash_value(v12);
  else
    v760 = 0;
  v13 = *((_QWORD *)this + 91);
  if (v13 && (v14 = *(CMMsl::DeviceMotionCorrection **)(v13 + 8)) != 0)
    v769 = CMMsl::DeviceMotionCorrection::hash_value(v14);
  else
    v769 = 0;
  v15 = *((_QWORD *)this + 90);
  if (v15)
  {
    v16 = *(_BYTE *)(v15 + 20);
    v17 = *(double *)(v15 + 8) == 0.0 || (v16 & 1) == 0;
    v18 = *(_QWORD *)(v15 + 8);
    if (v17)
      v18 = 0;
    v19 = v16 & 2;
    v20 = *(float *)(v15 + 16);
    v21 = v20 == 0.0 || v19 == 0;
    v22 = LODWORD(v20);
    if (v21)
      v22 = 0;
    v759 = v22 ^ v18;
  }
  else
  {
    v759 = 0;
  }
  v23 = (CMMsl::IntersiloNSCodingData *)*((_QWORD *)this + 180);
  if (v23)
    v758 = CMMsl::IntersiloNSCodingData::hash_value(v23);
  else
    v758 = 0;
  v24 = (CMMsl::DeviceMotionCovariance *)*((_QWORD *)this + 95);
  if (v24)
    v757 = CMMsl::DeviceMotionCovariance::hash_value(v24);
  else
    v757 = 0;
  v25 = (CMMsl::AccessoryAccel *)*((_QWORD *)this + 11);
  if (v25)
    v756 = CMMsl::AccessoryAccel::hash_value(v25);
  else
    v756 = 0;
  v26 = (CMMsl::AccessoryGyro *)*((_QWORD *)this + 18);
  if (v26)
    v755 = CMMsl::AccessoryGyro::hash_value(v26);
  else
    v755 = 0;
  v27 = (CMMsl::AccessoryProx *)*((_QWORD *)this + 27);
  if (v27)
    v754 = CMMsl::AccessoryProx::hash_value(v27);
  else
    v754 = 0;
  v28 = *((_QWORD *)this + 431);
  if (v28 && (v29 = *(CMMsl::Accel **)(v28 + 8)) != 0)
    v768 = CMMsl::Accel::hash_value(v29);
  else
    v768 = 0;
  v30 = *((_QWORD *)this + 434);
  if (v30 && (v31 = *(CMMsl::BodyMetrics **)(v30 + 8)) != 0)
    v767 = CMMsl::BodyMetrics::hash_value(v31);
  else
    v767 = 0;
  v32 = *((_QWORD *)this + 436);
  if (v32 && (v33 = *(CMMsl::ElevationChange **)(v32 + 8)) != 0)
    v766 = CMMsl::ElevationChange::hash_value(v33);
  else
    v766 = 0;
  v34 = *((_QWORD *)this + 440);
  if (v34 && (v35 = *(CMMsl::OnsetHeartRateData **)(v34 + 8)) != 0)
    v765 = CMMsl::OnsetHeartRateData::hash_value(v35);
  else
    v765 = 0;
  v36 = *((_QWORD *)this + 444);
  if (v36 && (v37 = *(CMMsl::RotationRate **)(v36 + 8)) != 0)
    v1190 = CMMsl::RotationRate::hash_value(v37);
  else
    v1190 = 0;
  v38 = *((_QWORD *)this + 442);
  if (v38 && (v39 = *(CMMsl::OdometerWithAltitude **)(v38 + 8)) != 0)
    v1189 = CMMsl::OdometerWithAltitude::hash_value(v39);
  else
    v1189 = 0;
  v40 = *((_QWORD *)this + 448);
  if (v40 && (v41 = *(CMMsl::WorkoutEvent **)(v40 + 8)) != 0)
    v1188 = CMMsl::WorkoutEvent::hash_value(v41);
  else
    v1188 = 0;
  v42 = (CMMsl::VO2MaxInput *)*((_QWORD *)this + 415);
  if (v42)
    v1187 = CMMsl::VO2MaxInput::hash_value(v42);
  else
    v1187 = 0;
  v43 = *((_QWORD *)this + 68);
  if (!v43 || (v44 = *(CMMsl::DeviceMotion ***)(v43 + 8), v45 = *(CMMsl::DeviceMotion ***)(v43 + 16), v44 == v45))
  {
    v46 = 0;
  }
  else
  {
    v46 = 0;
    do
    {
      v47 = *v44++;
      v46 ^= CMMsl::DeviceMotion::hash_value(v47);
    }
    while (v44 != v45);
  }
  v48 = (CMMsl::BraveHeartNatalieData *)*((_QWORD *)this + 69);
  if (v48)
    v1186 = CMMsl::BraveHeartNatalieData::hash_value(v48);
  else
    v1186 = 0;
  v49 = *((_QWORD *)this + 70);
  if (!v49 || (v50 = *(CMMsl::VO2MaxInput ***)(v49 + 8), v51 = *(CMMsl::VO2MaxInput ***)(v49 + 16), v50 == v51))
  {
    v52 = 0;
  }
  else
  {
    v52 = 0;
    do
    {
      v53 = *v50++;
      v52 ^= CMMsl::VO2MaxInput::hash_value(v53);
    }
    while (v50 != v51);
  }
  v54 = *((_QWORD *)this + 67);
  if (!v54 || (v55 = *(CMMsl::Accel ***)(v54 + 8), v56 = *(CMMsl::Accel ***)(v54 + 16), v55 == v56))
  {
    v57 = 0;
  }
  else
  {
    v57 = 0;
    do
    {
      v58 = *v55++;
      v57 ^= CMMsl::Accel::hash_value(v58);
    }
    while (v55 != v56);
  }
  v59 = (CMMsl::BraveHeartWorkoutEvent *)*((_QWORD *)this + 71);
  if (v59)
    v1185 = CMMsl::BraveHeartWorkoutEvent::hash_value(v59);
  else
    v1185 = 0;
  v60 = (CMMsl::WorkoutRecorderHealthKitInfo *)*((_QWORD *)this + 439);
  if (v60)
    v1184 = CMMsl::WorkoutRecorderHealthKitInfo::hash_value(v60);
  else
    v1184 = 0;
  v61 = (CMMsl::PearlAttitude *)*((_QWORD *)this + 288);
  if (v61)
    v1183 = CMMsl::PearlAttitude::hash_value(v61);
  else
    v1183 = 0;
  v62 = (CMMsl::RotationRate *)*((_QWORD *)this + 340);
  if (v62)
    v1182 = CMMsl::RotationRate::hash_value(v62);
  else
    v1182 = 0;
  v63 = *((_QWORD *)this + 446);
  if (v63 && (v64 = *(_QWORD *)(v63 + 8)) != 0)
  {
    v65 = *(_BYTE *)(v64 + 16);
    v68 = v64 + 8;
    v66 = *(unsigned int *)(v64 + 8);
    v67 = *(unsigned int *)(v68 + 4);
    if ((v65 & 2) == 0)
      v67 = 0;
    if ((v65 & 1) == 0)
      v66 = 0;
    v1181 = v66 ^ v67;
  }
  else
  {
    v1181 = 0;
  }
  v69 = (CMMsl::WatchOnWristState *)*((_QWORD *)this + 425);
  if (v69)
    v1180 = CMMsl::WatchOnWristState::hash_value(v69);
  else
    v1180 = 0;
  v70 = (CMMsl::CatherineHealthKitData *)*((_QWORD *)this + 76);
  if (v70)
    v1179 = CMMsl::CatherineHealthKitData::hash_value(v70);
  else
    v1179 = 0;
  v71 = sub_2428121D4(*((_QWORD *)this + 427));
  v72 = (CMMsl::InEarTransitionEntry *)*((_QWORD *)this + 176);
  v1192 = v71;
  if (v72)
    v1178 = CMMsl::InEarTransitionEntry::hash_value(v72);
  else
    v1178 = 0;
  v73 = (CMMsl::InEarSession *)*((_QWORD *)this + 174);
  if (v73)
    v1177 = CMMsl::InEarSession::hash_value(v73);
  else
    v1177 = 0;
  v74 = (CMMsl::InEarBaseline *)*((_QWORD *)this + 169);
  if (v74)
    v1176 = CMMsl::InEarBaseline::hash_value(v74);
  else
    v1176 = 0;
  v75 = (CMMsl::AccessoryProxSensorDrop *)*((_QWORD *)this + 28);
  if (v75)
    v1175 = CMMsl::AccessoryProxSensorDrop::hash_value(v75);
  else
    v1175 = 0;
  v76 = (CMMsl::AccessoryProxTempComp *)*((_QWORD *)this + 29);
  if (v76)
    v1174 = CMMsl::AccessoryProxTempComp::hash_value(v76);
  else
    v1174 = 0;
  v77 = (CMMsl::AccessoryWake *)*((_QWORD *)this + 34);
  if (v77)
    v1173 = CMMsl::AccessoryWake::hash_value(v77);
  else
    v1173 = 0;
  v78 = (CMMsl::FacePose *)*((_QWORD *)this + 114);
  if (v78)
    v1172 = CMMsl::FacePose::hash_value(v78);
  else
    v1172 = 0;
  v79 = *((_QWORD *)this + 447);
  if (v79)
    v1171 = sub_2428121D4(*(_QWORD *)(v79 + 8));
  else
    v1171 = 0;
  v80 = *((_QWORD *)this + 443);
  if (v80 && (v81 = *(CMMsl::Pressure **)(v80 + 8)) != 0)
    v1170 = CMMsl::Pressure::hash_value(v81);
  else
    v1170 = 0;
  v82 = *((_QWORD *)this + 168);
  if (v82)
  {
    v83 = sub_242740C00(*(uint64_t **)(v82 + 8), *(uint64_t **)(v82 + 16));
    if ((*(_BYTE *)(v82 + 36) & 1) != 0)
      v84 = *(unsigned int *)(v82 + 32);
    else
      v84 = 0;
    v1169 = v84 ^ v83;
  }
  else
  {
    v1169 = 0;
  }
  v85 = (CMMsl::AccessoryDeviceMotion *)*((_QWORD *)this + 16);
  if (v85)
    v1168 = CMMsl::AccessoryDeviceMotion::hash_value(v85);
  else
    v1168 = 0;
  v86 = (CMMsl::VisionCompassBias *)*((_QWORD *)this + 410);
  if (v86)
    v1167 = CMMsl::VisionCompassBias::hash_value(v86);
  else
    v1167 = 0;
  v87 = *((_QWORD *)this + 44);
  if (v87)
  {
    v88 = *(_BYTE *)(v87 + 12);
    v89 = *(int *)(v87 + 8);
    if ((v88 & 1) == 0)
      v89 = 0;
    v1166 = v89;
  }
  else
  {
    v1166 = 0;
  }
  v90 = (CMMsl::VIOEstimation *)*((_QWORD *)this + 407);
  if (v90)
    v1165 = CMMsl::VIOEstimation::hash_value(v90);
  else
    v1165 = 0;
  v91 = (CMMsl::LSLHeadingEstimation *)*((_QWORD *)this + 235);
  if (v91)
    v1164 = CMMsl::LSLHeadingEstimation::hash_value(v91);
  else
    v1164 = 0;
  v92 = (CMMsl::FallSnippet *)*((_QWORD *)this + 125);
  if (v92)
    v1163 = CMMsl::FallSnippet::hash_value(v92);
  else
    v1163 = 0;
  v93 = (CMMsl::AccelerometerPace *)*((_QWORD *)this + 10);
  if (v93)
    v1162 = CMMsl::AccelerometerPace::hash_value(v93);
  else
    v1162 = 0;
  v94 = *((_QWORD *)this + 259);
  if (v94)
  {
    v95 = *(float *)(v94 + 8);
    v96 = v95 == 0.0 || (*(_BYTE *)(v94 + 12) & 1) == 0;
    v97 = LODWORD(v95);
    if (v96)
      v97 = 0;
    v1161 = v97;
  }
  else
  {
    v1161 = 0;
  }
  v98 = (CMMsl::StepCountEntry *)*((_QWORD *)this + 379);
  if (v98)
    v1160 = CMMsl::StepCountEntry::hash_value(v98);
  else
    v1160 = 0;
  v99 = (CMMsl::MobilityBoutMetrics *)*((_QWORD *)this + 245);
  if (v99)
    v1159 = CMMsl::MobilityBoutMetrics::hash_value(v99);
  else
    v1159 = 0;
  v100 = (CMMsl::CoprocessorReplyGaitMetrics *)*((_QWORD *)this + 89);
  if (v100)
    v1158 = CMMsl::CoprocessorReplyGaitMetrics::hash_value(v100);
  else
    v1158 = 0;
  v101 = (CMMsl::VIOPose *)*((_QWORD *)this + 408);
  if (v101)
    v1157 = CMMsl::VIOPose::hash_value(v101);
  else
    v1157 = 0;
  v102 = *((_QWORD *)this + 356);
  if (v102)
  {
    v103 = *(_BYTE *)(v102 + 12);
    v104 = *(int *)(v102 + 8);
    if ((v103 & 1) == 0)
      v104 = 0;
    v1156 = v104;
  }
  else
  {
    v1156 = 0;
  }
  v105 = (CMMsl::VIOReplayPose *)*((_QWORD *)this + 409);
  if (v105)
    v1155 = CMMsl::VIOReplayPose::hash_value(v105);
  else
    v1155 = 0;
  v106 = (CMMsl::VisualStateMeasurement *)*((_QWORD *)this + 414);
  if (v106)
    v1154 = CMMsl::VisualStateMeasurement::hash_value(v106);
  else
    v1154 = 0;
  v107 = (CMMsl::KappaTriggerDebug *)*((_QWORD *)this + 219);
  if (v107)
    v1153 = CMMsl::KappaTriggerDebug::hash_value(v107);
  else
    v1153 = 0;
  v108 = (CMMsl::KappaDirectionOfTravel *)*((_QWORD *)this + 194);
  if (v108)
    v1152 = CMMsl::KappaDirectionOfTravel::hash_value(v108);
  else
    v1152 = 0;
  v109 = *((_QWORD *)this + 166);
  if (v109 && (v110 = *(CMMsl::Accel **)(v109 + 8)) != 0)
    v1151 = CMMsl::Accel::hash_value(v110);
  else
    v1151 = 0;
  v111 = (CMMsl::KappaSteps *)*((_QWORD *)this + 215);
  if (v111)
    v1150 = CMMsl::KappaSteps::hash_value(v111);
  else
    v1150 = 0;
  v112 = *((_QWORD *)this + 397);
  if (v112)
  {
    v113 = *(_BYTE *)(v112 + 20);
    v114 = *(_QWORD *)(v112 + 8);
    if ((v113 & 1) == 0)
      v114 = 0;
    v115 = *(int *)(v112 + 16);
    if ((v113 & 2) == 0)
      v115 = 0;
    v1149 = v115 ^ v114;
  }
  else
  {
    v1149 = 0;
  }
  v116 = (CMMsl::KappaRoads *)*((_QWORD *)this + 210);
  if (v116)
    v1148 = CMMsl::KappaRoads::hash_value(v116);
  else
    v1148 = 0;
  v117 = (CMMsl::UserStudyEvent *)*((_QWORD *)this + 398);
  if (v117)
    v1147 = CMMsl::UserStudyEvent::hash_value(v117);
  else
    v1147 = 0;
  v118 = (CMMsl::AuxiliaryDeviceMotion *)*((_QWORD *)this + 47);
  if (v118)
    v1146 = CMMsl::AuxiliaryDeviceMotion::hash_value(v118);
  else
    v1146 = 0;
  v119 = (CMMsl::TempestPoCAuxiliaryDeviceMotion *)*((_QWORD *)this + 391);
  if (v119)
    v1145 = CMMsl::TempestPoCAuxiliaryDeviceMotion::hash_value(v119);
  else
    v1145 = 0;
  v120 = (CMMsl::AudioAccessoryDeviceMotion *)*((_QWORD *)this + 46);
  if (v120)
    v1144 = CMMsl::AudioAccessoryDeviceMotion::hash_value(v120);
  else
    v1144 = 0;
  v121 = (CMMsl::TempestPoCListenerOrientation *)*((_QWORD *)this + 392);
  if (v121)
    v1143 = CMMsl::TempestPoCListenerOrientation::hash_value(v121);
  else
    v1143 = 0;
  v122 = *((_QWORD *)this + 432);
  if (v122 && (v123 = *(CMMsl::Accel **)(v122 + 8)) != 0)
    v1142 = CMMsl::Accel::hash_value(v123);
  else
    v1142 = 0;
  v124 = *((_QWORD *)this + 37);
  if (v124)
  {
    v125 = *(float *)(v124 + 8);
    v126 = v125 == 0.0 || (*(_BYTE *)(v124 + 12) & 1) == 0;
    v127 = LODWORD(v125);
    if (v126)
      v127 = 0;
    v1141 = v127;
  }
  else
  {
    v1141 = 0;
  }
  v128 = *((_QWORD *)this + 430);
  if (v128 && (v129 = *(_QWORD *)(v128 + 8)) != 0)
  {
    v130 = *(float *)(v129 + 8);
    v131 = v130 == 0.0 || (*(_BYTE *)(v129 + 12) & 1) == 0;
    v132 = LODWORD(v130);
    if (v131)
      v132 = 0;
    v1140 = v132;
  }
  else
  {
    v1140 = 0;
  }
  v133 = (CMMsl::VisualLocalization *)*((_QWORD *)this + 411);
  if (v133)
    v1139 = CMMsl::VisualLocalization::hash_value(v133);
  else
    v1139 = 0;
  v134 = (CMMsl::GyroFactoryCalibrationData *)*((_QWORD *)this + 155);
  if (v134)
    v1138 = CMMsl::GyroFactoryCalibrationData::hash_value(v134);
  else
    v1138 = 0;
  v135 = *((_QWORD *)this + 367);
  if (v135)
  {
    v136 = *(_BYTE *)(v135 + 20);
    v137 = *(float *)(v135 + 16);
    v138 = v137 == 0.0 || (v136 & 2) == 0;
    v139 = LODWORD(v137);
    if (v138)
      v139 = 0;
    v140 = *(_QWORD *)(v135 + 8);
    if ((v136 & 1) == 0)
      v140 = 0;
    v1137 = v139 ^ v140;
  }
  else
  {
    v1137 = 0;
  }
  v141 = (CMMsl::FrequencyResponse *)*((_QWORD *)this + 131);
  if (v141)
    v1136 = CMMsl::FrequencyResponse::hash_value(v141);
  else
    v1136 = 0;
  v142 = *((_QWORD *)this + 109);
  if (v142)
  {
    v143 = *(_BYTE *)(v142 + 12);
    v144 = *(unsigned int *)(v142 + 8);
    if ((v143 & 1) == 0)
      v144 = 0;
    v1135 = v144;
  }
  else
  {
    v1135 = 0;
  }
  v145 = *((_QWORD *)this + 4);
  if (v145 && (v146 = *(CMMsl::Accel **)(v145 + 8)) != 0)
    v1134 = CMMsl::Accel::hash_value(v146);
  else
    v1134 = 0;
  v147 = (CMMsl::MotionLocation *)*((_QWORD *)this + 253);
  if (v147)
    v1133 = CMMsl::MotionLocation::hash_value(v147);
  else
    v1133 = 0;
  v148 = (CMMsl::MotionActivity *)*((_QWORD *)this + 248);
  if (v148)
    v1132 = CMMsl::MotionActivity::hash_value(v148);
  else
    v1132 = 0;
  v149 = (CMMsl::BioMotionPose *)*((_QWORD *)this + 62);
  if (v149)
    v1131 = CMMsl::BioMotionPose::hash_value(v149);
  else
    v1131 = 0;
  v150 = (CMMsl::KappaTrigger *)*((_QWORD *)this + 217);
  if (v150)
    v1130 = CMMsl::KappaTrigger::hash_value(v150);
  else
    v1130 = 0;
  v151 = (CMMsl::RelDMInSystemConfig *)*((_QWORD *)this + 333);
  if (v151)
    v1129 = CMMsl::RelDMInSystemConfig::hash_value(v151);
  else
    v1129 = 0;
  v152 = *((_QWORD *)this + 183);
  if (v152 && (v153 = *(CMMsl::BioMotionPose **)(v152 + 8)) != 0)
    v1128 = CMMsl::BioMotionPose::hash_value(v153);
  else
    v1128 = 0;
  v154 = *((_QWORD *)this + 88);
  if (v154 && (v155 = *(CMMsl::BioMotionPose **)(v154 + 8)) != 0)
    v1127 = CMMsl::BioMotionPose::hash_value(v155);
  else
    v1127 = 0;
  v156 = (CMMsl::GyroCalibrationSample *)*((_QWORD *)this + 151);
  if (v156)
    v1126 = CMMsl::GyroCalibrationSample::hash_value(v156);
  else
    v1126 = 0;
  v157 = (CMMsl::GyroCalibrationSampleNonlinear *)*((_QWORD *)this + 152);
  if (v157)
    v1125 = CMMsl::GyroCalibrationSampleNonlinear::hash_value(v157);
  else
    v1125 = 0;
  v158 = *((_QWORD *)this + 150);
  if (!v158
    || (v159 = *(CMMsl::GyroCalibrationSampleNonlinear ***)(v158 + 8),
        v160 = *(CMMsl::GyroCalibrationSampleNonlinear ***)(v158 + 16),
        v159 == v160))
  {
    v161 = 0;
  }
  else
  {
    v161 = 0;
    do
    {
      v162 = *v159++;
      v161 ^= CMMsl::GyroCalibrationSampleNonlinear::hash_value(v162);
    }
    while (v159 != v160);
  }
  v163 = *((_QWORD *)this + 149);
  if (!v163
    || (v164 = *(CMMsl::GyroCalibrationSample ***)(v163 + 8),
        v165 = *(CMMsl::GyroCalibrationSample ***)(v163 + 16),
        v164 == v165))
  {
    v166 = 0;
  }
  else
  {
    v166 = 0;
    do
    {
      v167 = *v164++;
      v166 ^= CMMsl::GyroCalibrationSample::hash_value(v167);
    }
    while (v164 != v165);
  }
  v168 = (CMMsl::BioMotionClassification *)*((_QWORD *)this + 59);
  if (v168)
    v1124 = CMMsl::BioMotionClassification::hash_value(v168);
  else
    v1124 = 0;
  v169 = *((_QWORD *)this + 132);
  if (v169 && (v170 = *(CMMsl::BioMotionClassification **)(v169 + 8)) != 0)
    v1123 = CMMsl::BioMotionClassification::hash_value(v170);
  else
    v1123 = 0;
  v171 = *((_QWORD *)this + 247);
  if (v171 && (v172 = *(CMMsl::BioMotionClassification **)(v171 + 8)) != 0)
    v1122 = CMMsl::BioMotionClassification::hash_value(v172);
  else
    v1122 = 0;
  v173 = *((_QWORD *)this + 236);
  if (v173 && (v174 = *(CMMsl::BioMotionClassification **)(v173 + 8)) != 0)
    v1121 = CMMsl::BioMotionClassification::hash_value(v174);
  else
    v1121 = 0;
  v175 = (CMMsl::Pose *)*((_QWORD *)this + 304);
  if (v175)
    v1120 = CMMsl::Pose::hash_value(v175);
  else
    v1120 = 0;
  v176 = (CMMsl::PoseState *)*((_QWORD *)this + 305);
  if (v176)
    v1119 = CMMsl::PoseState::hash_value(v176);
  else
    v1119 = 0;
  v177 = (CMMsl::BioMotionPredictedPose *)*((_QWORD *)this + 63);
  if (v177)
    v1118 = CMMsl::BioMotionPredictedPose::hash_value(v177);
  else
    v1118 = 0;
  v178 = *((_QWORD *)this + 184);
  if (v178 && (v179 = *(CMMsl::BioMotionPredictedPose **)(v178 + 8)) != 0)
    v1117 = CMMsl::BioMotionPredictedPose::hash_value(v179);
  else
    v1117 = 0;
  v180 = *((_QWORD *)this + 87);
  if (v180 && (v181 = *(CMMsl::BioMotionPredictedPose **)(v180 + 8)) != 0)
    v1116 = CMMsl::BioMotionPredictedPose::hash_value(v181);
  else
    v1116 = 0;
  v182 = *((_QWORD *)this + 318);
  if (v182 && (v183 = *(CMMsl::Pressure **)(v182 + 8)) != 0)
    v1115 = CMMsl::Pressure::hash_value(v183);
  else
    v1115 = 0;
  v184 = (CMMsl::VO2MaxOutput *)*((_QWORD *)this + 416);
  if (v184)
    v1114 = CMMsl::VO2MaxOutput::hash_value(v184);
  else
    v1114 = 0;
  v185 = (CMMsl::MagneticAccessoryType1 *)*((_QWORD *)this + 238);
  if (v185)
    v1113 = CMMsl::MagneticAccessoryType1::hash_value(v185);
  else
    v1113 = 0;
  v186 = *((_QWORD *)this + 239);
  if (v186)
    v1112 = ((*(unsigned __int8 *)(v186 + 12) << 31 >> 31) & *(_BYTE *)(v186 + 8));
  else
    v1112 = 0;
  v187 = (CMMsl::PressureCalibration *)*((_QWORD *)this + 317);
  if (v187)
    v1111 = CMMsl::PressureCalibration::hash_value(v187);
  else
    v1111 = 0;
  v188 = *((_QWORD *)this + 441);
  if (v188 && (v189 = *(CMMsl::Magnetometer **)(v188 + 8)) != 0)
    v1110 = CMMsl::Magnetometer::hash_value(v189);
  else
    v1110 = 0;
  v190 = *((_QWORD *)this + 435);
  if (v190 && (v191 = *(CMMsl::CompassCalibration **)(v190 + 8)) != 0)
    v1109 = CMMsl::CompassCalibration::hash_value(v191);
  else
    v1109 = 0;
  if (*((_QWORD *)this + 332))
    v1108 = PBHashBytes();
  else
    v1108 = 0;
  v192 = (CMMsl::CV3DPredictedPose *)*((_QWORD *)this + 73);
  if (v192)
    v1107 = CMMsl::CV3DPredictedPose::hash_value(v192);
  else
    v1107 = 0;
  v193 = (CMMsl::BioMotionLinkLengthFitParameters *)*((_QWORD *)this + 60);
  if (v193)
    v1106 = CMMsl::BioMotionLinkLengthFitParameters::hash_value(v193);
  else
    v1106 = 0;
  v194 = (CMMsl::BioMotionOnlineLinkLengthUpdate *)*((_QWORD *)this + 61);
  if (v194)
    v1105 = CMMsl::BioMotionOnlineLinkLengthUpdate::hash_value(v194);
  else
    v1105 = 0;
  v195 = (CMMsl::ODTPose *)*((_QWORD *)this + 266);
  if (v195)
    v1104 = CMMsl::ODTPose::hash_value(v195);
  else
    v1104 = 0;
  v196 = *((_QWORD *)this + 299);
  if (v196)
  {
    v197 = *(_BYTE *)(v196 + 24);
    v198 = *(double *)(v196 + 16);
    v199 = *(double *)(v196 + 8) == 0.0 || (v197 & 1) == 0;
    v200 = *(_QWORD *)(v196 + 8);
    if (v199)
      v200 = 0;
    v201 = v197 & 2;
    v202 = v198 == 0.0 || v201 == 0;
    v203 = v198;
    if (v202)
      v203 = 0.0;
    v1103 = *(_QWORD *)&v203 ^ v200;
  }
  else
  {
    v1103 = 0;
  }
  v204 = (CMMsl::PencilTouch *)*((_QWORD *)this + 300);
  if (v204)
    v1102 = CMMsl::PencilTouch::hash_value(v204);
  else
    v1102 = 0;
  v205 = *((_QWORD *)this + 48);
  if (v205)
  {
    v206 = *(_BYTE *)(v205 + 20);
    v207 = *(double *)(v205 + 8) == 0.0 || (v206 & 1) == 0;
    v208 = *(_QWORD *)(v205 + 8);
    if (v207)
      v208 = 0;
    v209 = v206 & 2;
    v210 = *(float *)(v205 + 16);
    v211 = v210 == 0.0 || v209 == 0;
    v212 = LODWORD(v210);
    if (v211)
      v212 = 0;
    v1101 = v212 ^ v208;
  }
  else
  {
    v1101 = 0;
  }
  v213 = *((_QWORD *)this + 393);
  if (v213)
  {
    v214 = *(_BYTE *)(v213 + 20);
    v215 = *(int *)(v213 + 16);
    if ((v214 & 2) == 0)
      v215 = 0;
    v216 = *(_QWORD *)(v213 + 8);
    if ((v214 & 1) == 0)
      v216 = 0;
    v1100 = v216 ^ v215;
  }
  else
  {
    v1100 = 0;
  }
  v217 = *((_QWORD *)this + 43);
  if (v217 && (v218 = *(CMMsl::CV3DSLAMState **)(v217 + 8)) != 0)
    v1099 = CMMsl::CV3DSLAMState::hash_value(v218);
  else
    v1099 = 0;
  v219 = *((_QWORD *)this + 58);
  if (v219 && (v220 = *(CMMsl::BioMotionAnchor **)(v219 + 8)) != 0)
    v1098 = CMMsl::BioMotionAnchor::hash_value(v220);
  else
    v1098 = 0;
  v221 = *((_QWORD *)this + 64);
  if (v221 && (v222 = *(CMMsl::PropagatedAnchor **)(v221 + 8)) != 0)
    v1097 = CMMsl::PropagatedAnchor::hash_value(v222);
  else
    v1097 = 0;
  v223 = (CMMsl::WalkingSteadinessClassification *)*((_QWORD *)this + 420);
  if (v223)
    v1096 = CMMsl::WalkingSteadinessClassification::hash_value(v223);
  else
    v1096 = 0;
  v224 = (CMMsl::SteadinessModelResult *)*((_QWORD *)this + 375);
  if (v224)
    v1095 = CMMsl::SteadinessModelResult::hash_value(v224);
  else
    v1095 = 0;
  v225 = (CMMsl::SteadinessEvent *)*((_QWORD *)this + 370);
  if (v225)
    v1094 = CMMsl::SteadinessEvent::hash_value(v225);
  else
    v1094 = 0;
  v226 = (CMMsl::SteadinessModelGaitBaselineFeatures *)*((_QWORD *)this + 373);
  if (v226)
    v1093 = CMMsl::SteadinessModelGaitBaselineFeatures::hash_value(v226);
  else
    v1093 = 0;
  v227 = (CMMsl::SteadinessModelContinuousWalkingFeatures *)*((_QWORD *)this + 372);
  if (v227)
    v1092 = CMMsl::SteadinessModelContinuousWalkingFeatures::hash_value(v227);
  else
    v1092 = 0;
  v228 = (CMMsl::SteadinessModelTemporalDispersionFeatures *)*((_QWORD *)this + 376);
  if (v228)
    v1091 = CMMsl::SteadinessModelTemporalDispersionFeatures::hash_value(v228);
  else
    v1091 = 0;
  v229 = (CMMsl::SteadinessModelTemporalEntropyFeatures *)*((_QWORD *)this + 377);
  if (v229)
    v1090 = CMMsl::SteadinessModelTemporalEntropyFeatures::hash_value(v229);
  else
    v1090 = 0;
  v230 = (CMMsl::SteadinessModelBalanceFeatures *)*((_QWORD *)this + 371);
  if (v230)
    v1089 = CMMsl::SteadinessModelBalanceFeatures::hash_value(v230);
  else
    v1089 = 0;
  v231 = (CMMsl::MagnetometerReset *)*((_QWORD *)this + 242);
  if (v231)
    v1088 = CMMsl::MagnetometerReset::hash_value(v231);
  else
    v1088 = 0;
  v232 = *((_QWORD *)this + 445);
  if (v232 && (v233 = *(CMMsl::WatchOnWristState **)(v232 + 8)) != 0)
    v1087 = CMMsl::WatchOnWristState::hash_value(v233);
  else
    v1087 = 0;
  v234 = (CMMsl::LiftToWakeOnHeadStatus *)*((_QWORD *)this + 230);
  if (v234)
    v1086 = CMMsl::LiftToWakeOnHeadStatus::hash_value(v234);
  else
    v1086 = 0;
  v235 = (CMMsl::AccessoryMagnetometer *)*((_QWORD *)this + 24);
  if (v235)
    v1085 = CMMsl::AccessoryMagnetometer::hash_value(v235);
  else
    v1085 = 0;
  v236 = (CMMsl::StepCountEntryAddition *)*((_QWORD *)this + 380);
  if (v236)
    v1084 = CMMsl::StepCountEntryAddition::hash_value(v236);
  else
    v1084 = 0;
  v237 = (CMMsl::StepDistanceFusionResult *)*((_QWORD *)this + 381);
  if (v237)
    v1083 = CMMsl::StepDistanceFusionResult::hash_value(v237);
  else
    v1083 = 0;
  v238 = *((_QWORD *)this + 363);
  if (!v238
    || (v239 = *(CMMsl::SkeletonJoint ***)(v238 + 8), v240 = *(CMMsl::SkeletonJoint ***)(v238 + 16), v239 == v240))
  {
    v241 = 0;
  }
  else
  {
    v241 = 0;
    do
    {
      v242 = *v239++;
      v241 ^= CMMsl::SkeletonJoint::hash_value(v242);
    }
    while (v239 != v240);
  }
  v243 = (CMMsl::CVWatchCalories *)*((_QWORD *)this + 92);
  if (v243)
    v1082 = CMMsl::CVWatchCalories::hash_value(v243);
  else
    v1082 = 0;
  v244 = (CMMsl::FaceBlendShapeCoefficientsSample *)*((_QWORD *)this + 111);
  if (v244)
    v1081 = CMMsl::FaceBlendShapeCoefficientsSample::hash_value(v244);
  else
    v1081 = 0;
  v245 = (CMMsl::BatteryStatus *)*((_QWORD *)this + 57);
  if (v245)
    v1080 = CMMsl::BatteryStatus::hash_value(v245);
  else
    v1080 = 0;
  v246 = *((_QWORD *)this + 234);
  if (v246)
    v1079 = ((*(unsigned __int8 *)(v246 + 12) << 31 >> 31) & *(_BYTE *)(v246 + 8));
  else
    v1079 = 0;
  v247 = *((_QWORD *)this + 56);
  if (v247)
    v1078 = ((*(unsigned __int8 *)(v247 + 12) << 31 >> 31) & *(_BYTE *)(v247 + 8));
  else
    v1078 = 0;
  v248 = *((_QWORD *)this + 308);
  if (v248)
  {
    v249 = *(_BYTE *)(v248 + 16);
    v250 = *(_QWORD *)(v248 + 8);
    if ((v249 & 1) == 0)
      v250 = 0;
    v1077 = v250;
  }
  else
  {
    v1077 = 0;
  }
  v251 = (CMMsl::FocusModes *)*((_QWORD *)this + 130);
  if (v251)
    v1076 = CMMsl::FocusModes::hash_value(v251);
  else
    v1076 = 0;
  v252 = *((_QWORD *)this + 98);
  if (v252)
    v1075 = ((*(unsigned __int8 *)(v252 + 12) << 31 >> 31) & *(_BYTE *)(v252 + 8));
  else
    v1075 = 0;
  v253 = *((_QWORD *)this + 2);
  if (v253 && (v254 = *(_QWORD *)(v253 + 8)) != 0)
    v1074 = sub_242910D74(v254);
  else
    v1074 = 0;
  v255 = (CMMsl::AltimeterKF *)*((_QWORD *)this + 40);
  if (v255)
    v1073 = CMMsl::AltimeterKF::hash_value(v255);
  else
    v1073 = 0;
  v256 = (CMMsl::LiftToWakeState *)*((_QWORD *)this + 231);
  if (v256)
    v1072 = CMMsl::LiftToWakeState::hash_value(v256);
  else
    v1072 = 0;
  v257 = (CMMsl::ViewObstructedState *)*((_QWORD *)this + 406);
  if (v257)
    v1071 = CMMsl::ViewObstructedState::hash_value(v257);
  else
    v1071 = 0;
  v258 = (CMMsl::RunningFormMetrics *)*((_QWORD *)this + 343);
  if (v258)
    v1070 = CMMsl::RunningFormMetrics::hash_value(v258);
  else
    v1070 = 0;
  v259 = sub_242812228(*((_QWORD *)this + 450));
  v260 = *((_QWORD *)this + 449);
  v1191 = v259;
  if (v260)
    v1069 = sub_242812228(*(_QWORD *)(v260 + 8));
  else
    v1069 = 0;
  v261 = (CMMsl::ARKitWorldPose *)*((_QWORD *)this + 45);
  if (v261)
    v1068 = CMMsl::ARKitWorldPose::hash_value(v261);
  else
    v1068 = 0;
  v262 = *((_QWORD *)this + 281);
  if (v262)
  {
    v263 = *(int *)(v262 + 16);
    if ((*(_BYTE *)(v262 + 20) & 2) == 0)
      v263 = 0;
    v264 = *(double *)(v262 + 8) == 0.0 || (*(_BYTE *)(v262 + 20) & 1) == 0;
    v265 = *(_QWORD *)(v262 + 8);
    if (v264)
      v265 = 0;
    v1067 = v265 ^ v263;
  }
  else
  {
    v1067 = 0;
  }
  v266 = (CMMsl::PocketDetectionPacket *)*((_QWORD *)this + 303);
  if (v266)
    v1066 = CMMsl::PocketDetectionPacket::hash_value(v266);
  else
    v1066 = 0;
  v267 = (CMMsl::LiftToWakeFeaturesNeo *)*((_QWORD *)this + 229);
  if (v267)
    v1065 = CMMsl::LiftToWakeFeaturesNeo::hash_value(v267);
  else
    v1065 = 0;
  v268 = (CMMsl::LiftToWakeStatusNeo *)*((_QWORD *)this + 232);
  if (v268)
    v1064 = CMMsl::LiftToWakeStatusNeo::hash_value(v268);
  else
    v1064 = 0;
  v269 = (CMMsl::RunningPower *)*((_QWORD *)this + 344);
  if (v269)
    v1063 = CMMsl::RunningPower::hash_value(v269);
  else
    v1063 = 0;
  v270 = (CMMsl::BasebandCompassCoex *)*((_QWORD *)this + 51);
  if (v270)
    v1062 = CMMsl::BasebandCompassCoex::hash_value(v270);
  else
    v1062 = 0;
  v271 = (CMMsl::BasebandCompassCoexConstraints *)*((_QWORD *)this + 52);
  if (v271)
    v1061 = CMMsl::BasebandCompassCoexConstraints::hash_value(v271);
  else
    v1061 = 0;
  v272 = (CMMsl::MotionContextActivity *)*((_QWORD *)this + 250);
  if (v272)
    v1060 = CMMsl::MotionContextActivity::hash_value(v272);
  else
    v1060 = 0;
  v273 = *((_QWORD *)this + 269);
  if (v273)
  {
    v274 = *(_BYTE *)(v273 + 12);
    v275 = *(int *)(v273 + 8);
    if ((v274 & 1) == 0)
      v275 = 0;
    v1059 = v275;
  }
  else
  {
    v1059 = 0;
  }
  v276 = (CMMsl::AccelTNBFrame *)*((_QWORD *)this + 9);
  if (v276)
    v1058 = CMMsl::AccelTNBFrame::hash_value(v276);
  else
    v1058 = 0;
  v277 = (CMMsl::DoTEstimatorWithTNB *)*((_QWORD *)this + 104);
  if (v277)
    v1057 = CMMsl::DoTEstimatorWithTNB::hash_value(v277);
  else
    v1057 = 0;
  v278 = (CMMsl::PdrMLModelOutput *)*((_QWORD *)this + 282);
  if (v278)
    v1056 = CMMsl::PdrMLModelOutput::hash_value(v278);
  else
    v1056 = 0;
  v279 = (CMMsl::GaitEventsModelOutput *)*((_QWORD *)this + 136);
  if (v279)
    v1055 = CMMsl::GaitEventsModelOutput::hash_value(v279);
  else
    v1055 = 0;
  v280 = (CMMsl::GaitEventsStrideAggregation *)*((_QWORD *)this + 137);
  if (v280)
    v1054 = CMMsl::GaitEventsStrideAggregation::hash_value(v280);
  else
    v1054 = 0;
  v281 = (CMMsl::GaitEventsHKResult *)*((_QWORD *)this + 135);
  if (v281)
    v1053 = CMMsl::GaitEventsHKResult::hash_value(v281);
  else
    v1053 = 0;
  v282 = *((_QWORD *)this + 112);
  if (v282)
  {
    v283 = *(unsigned __int8 *)(v282 + 20);
    v284 = *(double *)(v282 + 8) == 0.0 || (v283 & 1) == 0;
    v285 = *(_QWORD *)(v282 + 8);
    if (v284)
      v285 = 0;
    v1052 = v285 ^ (*(_BYTE *)(v282 + 16) & (v283 << 30 >> 31));
  }
  else
  {
    v1052 = 0;
  }
  v286 = (CMMsl::WorkoutRecorderAveragedALSData *)*((_QWORD *)this + 433);
  if (v286)
    v1051 = CMMsl::WorkoutRecorderAveragedALSData::hash_value(v286);
  else
    v1051 = 0;
  v287 = (CMMsl::StrideCalEntry *)*((_QWORD *)this + 386);
  if (v287)
    v1050 = CMMsl::StrideCalEntry::hash_value(v287);
  else
    v1050 = 0;
  v288 = (CMMsl::RunningSpeedKFResult *)*((_QWORD *)this + 346);
  if (v288)
    v1049 = CMMsl::RunningSpeedKFResult::hash_value(v288);
  else
    v1049 = 0;
  v289 = (CMMsl::ProxPDP *)*((_QWORD *)this + 327);
  if (v289)
    v1048 = CMMsl::ProxPDP::hash_value(v289);
  else
    v1048 = 0;
  v290 = (CMMsl::KeyboardMotionFeatures *)*((_QWORD *)this + 224);
  if (v290)
    v1047 = CMMsl::KeyboardMotionFeatures::hash_value(v290);
  else
    v1047 = 0;
  v291 = *((_QWORD *)this + 225);
  if (v291)
  {
    v292 = *(_BYTE *)(v291 + 20);
    v293 = *(double *)(v291 + 8) == 0.0 || (v292 & 1) == 0;
    v294 = *(_QWORD *)(v291 + 8);
    if (v293)
      v294 = 0;
    v295 = *(unsigned int *)(v291 + 16);
    if ((v292 & 2) == 0)
      v295 = 0;
    v1046 = v295 ^ v294;
  }
  else
  {
    v1046 = 0;
  }
  v296 = *((_QWORD *)this + 38);
  if (v296)
  {
    v297 = *(_QWORD *)(v296 + 8);
    if ((*(_BYTE *)(v296 + 20) & 1) == 0)
      v297 = 0;
    v298 = *(float *)(v296 + 16);
    v299 = v298 == 0.0 || (*(_BYTE *)(v296 + 20) & 2) == 0;
    v300 = LODWORD(v298);
    if (v299)
      v300 = 0;
    v1045 = v300 ^ v297;
  }
  else
  {
    v1045 = 0;
  }
  v301 = *((_QWORD *)this + 223);
  if (v301)
  {
    v302 = *(unsigned __int8 *)(v301 + 20);
    v303 = *(double *)(v301 + 8) == 0.0 || (v302 & 1) == 0;
    v304 = *(_QWORD *)(v301 + 8);
    if (v303)
      v304 = 0;
    v1044 = v304 ^ (*(_BYTE *)(v301 + 16) & (v302 << 30 >> 31));
  }
  else
  {
    v1044 = 0;
  }
  v305 = (CMMsl::WakeGestureNotification *)*((_QWORD *)this + 417);
  if (v305)
    v1043 = CMMsl::WakeGestureNotification::hash_value(v305);
  else
    v1043 = 0;
  v306 = (CMMsl::ProxBaselineEstimatorState *)*((_QWORD *)this + 325);
  if (v306)
    v1042 = CMMsl::ProxBaselineEstimatorState::hash_value(v306);
  else
    v1042 = 0;
  v307 = (CMMsl::BaselineResetCheck *)*((_QWORD *)this + 54);
  if (v307)
    v1041 = CMMsl::BaselineResetCheck::hash_value(v307);
  else
    v1041 = 0;
  v308 = (CMMsl::RhythmicGnssOperatorStatus *)*((_QWORD *)this + 339);
  if (v308)
    v1040 = CMMsl::RhythmicGnssOperatorStatus::hash_value(v308);
  else
    v1040 = 0;
  v309 = *((_QWORD *)this + 226);
  if (v309)
  {
    v310 = *(unsigned __int8 *)(v309 + 20);
    v311 = *(double *)(v309 + 8) == 0.0 || (v310 & 1) == 0;
    v312 = *(_QWORD *)(v309 + 8);
    if (v311)
      v312 = 0;
    v1039 = v312 ^ (*(_BYTE *)(v309 + 16) & (v310 << 30 >> 31));
  }
  else
  {
    v1039 = 0;
  }
  v313 = *((_QWORD *)this + 222);
  if (v313)
  {
    v314 = *(unsigned __int8 *)(v313 + 20);
    v315 = *(double *)(v313 + 8) == 0.0 || (v314 & 1) == 0;
    v316 = *(_QWORD *)(v313 + 8);
    if (v315)
      v316 = 0;
    v1038 = v316 ^ (*(_BYTE *)(v313 + 16) & (v314 << 30 >> 31));
  }
  else
  {
    v1038 = 0;
  }
  v317 = (CMMsl::BacklightState *)*((_QWORD *)this + 50);
  if (v317)
    v1037 = CMMsl::BacklightState::hash_value(v317);
  else
    v1037 = 0;
  v318 = *((_QWORD *)this + 55);
  if (v318)
  {
    v319 = *(_QWORD *)(v318 + 8);
    if (v319)
      v319 = CMMsl::MotionGPSLocation::hash_value((CMMsl::MotionGPSLocation *)v319);
    if ((*(_BYTE *)(v318 + 20) & 1) != 0)
      v320 = *(unsigned int *)(v318 + 16);
    else
      v320 = 0;
    v1036 = v320 ^ v319;
  }
  else
  {
    v1036 = 0;
  }
  v321 = (CMMsl::HeartRateReference *)*((_QWORD *)this + 165);
  if (v321)
    v1035 = CMMsl::HeartRateReference::hash_value(v321);
  else
    v1035 = 0;
  v322 = (CMMsl::Skeleton2D *)*((_QWORD *)this + 362);
  if (v322)
    v1034 = CMMsl::Skeleton2D::hash_value(v322);
  else
    v1034 = 0;
  v323 = (CMMsl::Skeleton3DRetargeted *)*((_QWORD *)this + 365);
  if (v323)
    v1033 = CMMsl::Skeleton3DRetargeted::hash_value(v323);
  else
    v1033 = 0;
  v324 = (CMMsl::Skeleton3DLifted *)*((_QWORD *)this + 364);
  if (v324)
    v1032 = CMMsl::Skeleton3DLifted::hash_value(v324);
  else
    v1032 = 0;
  v325 = (CMMsl::FitnessMachineSample *)*((_QWORD *)this + 129);
  if (v325)
    v1031 = CMMsl::FitnessMachineSample::hash_value(v325);
  else
    v1031 = 0;
  v326 = (CMMsl::WatchHeartRateData *)*((_QWORD *)this + 424);
  if (v326)
    v1030 = CMMsl::WatchHeartRateData::hash_value(v326);
  else
    v1030 = 0;
  v327 = (CMMsl::FacePoseSynchronized *)*((_QWORD *)this + 115);
  if (v327)
    v1029 = CMMsl::FacePoseSynchronized::hash_value(v327);
  else
    v1029 = 0;
  v328 = (CMMsl::WatchActiveCalories *)*((_QWORD *)this + 421);
  if (v328)
    v1028 = CMMsl::WatchActiveCalories::hash_value(v328);
  else
    v1028 = 0;
  v329 = (CMMsl::WatchBasalCalories *)*((_QWORD *)this + 422);
  if (v329)
    v1027 = CMMsl::WatchBasalCalories::hash_value(v329);
  else
    v1027 = 0;
  v330 = (CMMsl::TrackRunData *)*((_QWORD *)this + 395);
  if (v330)
    v1026 = CMMsl::TrackRunData::hash_value(v330);
  else
    v1026 = 0;
  v331 = (CMMsl::GnssAvailabilityPredictorData *)*((_QWORD *)this + 139);
  if (v331)
    v1025 = CMMsl::GnssAvailabilityPredictorData::hash_value(v331);
  else
    v1025 = 0;
  v332 = (CMMsl::GnssLeechLocationData *)*((_QWORD *)this + 140);
  if (v332)
    v1024 = CMMsl::GnssLeechLocationData::hash_value(v332);
  else
    v1024 = 0;
  v333 = (CMMsl::MapsRouteHintData *)*((_QWORD *)this + 243);
  if (v333)
    v1023 = CMMsl::MapsRouteHintData::hash_value(v333);
  else
    v1023 = 0;
  v334 = (CMMsl::FitnessMachineData *)*((_QWORD *)this + 128);
  if (v334)
    v1022 = CMMsl::FitnessMachineData::hash_value(v334);
  else
    v1022 = 0;
  v335 = *((_QWORD *)this + 438);
  if (v335 && (v336 = *(CMMsl::FitnessMachineData **)(v335 + 8)) != 0)
    v1021 = CMMsl::FitnessMachineData::hash_value(v336);
  else
    v1021 = 0;
  v337 = (CMMsl::AccessoryActivityStateUpdate *)*((_QWORD *)this + 14);
  if (v337)
    v1020 = CMMsl::AccessoryActivityStateUpdate::hash_value(v337);
  else
    v1020 = 0;
  v338 = (CMMsl::PedestrianFenceExit *)*((_QWORD *)this + 291);
  if (v338)
    v1019 = CMMsl::PedestrianFenceExit::hash_value(v338);
  else
    v1019 = 0;
  v339 = (CMMsl::InertialOdometry *)*((_QWORD *)this + 177);
  if (v339)
    v1018 = CMMsl::InertialOdometry::hash_value(v339);
  else
    v1018 = 0;
  v340 = (CMMsl::PhysicalEffortInput *)*((_QWORD *)this + 301);
  if (v340)
    v1017 = CMMsl::PhysicalEffortInput::hash_value(v340);
  else
    v1017 = 0;
  v341 = (CMMsl::PhysicalEffortSample *)*((_QWORD *)this + 302);
  if (v341)
    v1016 = CMMsl::PhysicalEffortSample::hash_value(v341);
  else
    v1016 = 0;
  v342 = (CMMsl::PedestrianCalorieModelDebugging *)*((_QWORD *)this + 290);
  if (v342)
    v1015 = CMMsl::PedestrianCalorieModelDebugging::hash_value(v342);
  else
    v1015 = 0;
  v343 = (CMMsl::ElevationThreshold *)*((_QWORD *)this + 108);
  if (v343)
    v1014 = CMMsl::ElevationThreshold::hash_value(v343);
  else
    v1014 = 0;
  v344 = (CMMsl::InitialHistoricalMeanSeaLevelPressure *)*((_QWORD *)this + 178);
  if (v344)
    v1013 = CMMsl::InitialHistoricalMeanSeaLevelPressure::hash_value(v344);
  else
    v1013 = 0;
  v345 = *((_QWORD *)this + 428);
  if (v345)
  {
    v346 = *(_BYTE *)(v345 + 16);
    v349 = v345 + 8;
    v347 = *(unsigned int *)(v345 + 8);
    v348 = *(unsigned int *)(v349 + 4);
    if ((v346 & 2) == 0)
      v348 = 0;
    if ((v346 & 1) == 0)
      v347 = 0;
    v1012 = v347 ^ v348;
  }
  else
  {
    v1012 = 0;
  }
  v350 = (CMMsl::PencilDeviceMotion *)*((_QWORD *)this + 294);
  if (v350)
    v1011 = CMMsl::PencilDeviceMotion::hash_value(v350);
  else
    v1011 = 0;
  v351 = (CMMsl::PencilFusionResult *)*((_QWORD *)this + 297);
  if (v351)
    v1010 = CMMsl::PencilFusionResult::hash_value(v351);
  else
    v1010 = 0;
  v352 = *((_QWORD *)this + 159);
  if (v352)
  {
    v353 = *(unsigned __int8 *)(v352 + 20);
    v354 = *(double *)(v352 + 8) == 0.0 || (v353 & 1) == 0;
    v355 = *(_QWORD *)(v352 + 8);
    if (v354)
      v355 = 0;
    v1009 = v355 ^ (*(_BYTE *)(v352 + 16) & (v353 << 30 >> 31));
  }
  else
  {
    v1009 = 0;
  }
  v356 = (CMMsl::SteadinessModelHarmonicFeatures *)*((_QWORD *)this + 374);
  if (v356)
    v1008 = CMMsl::SteadinessModelHarmonicFeatures::hash_value(v356);
  else
    v1008 = 0;
  v357 = (CMMsl::PencilFusionReplayResult *)*((_QWORD *)this + 296);
  if (v357)
    v1007 = CMMsl::PencilFusionReplayResult::hash_value(v357);
  else
    v1007 = 0;
  v358 = (CMMsl::MobilitySmoothedGaitMetrics *)*((_QWORD *)this + 246);
  if (v358)
    v1006 = CMMsl::MobilitySmoothedGaitMetrics::hash_value(v358);
  else
    v1006 = 0;
  v359 = *((_QWORD *)this + 423);
  if (v359)
  {
    v360 = *(_BYTE *)(v359 + 24);
    v361 = *(double *)(v359 + 16) == 0.0 || (v360 & 2) == 0;
    v362 = *(_QWORD *)(v359 + 16);
    if (v361)
      v362 = 0;
    v363 = *(_QWORD *)(v359 + 8);
    if ((v360 & 1) == 0)
      v363 = 0;
    v1005 = v362 ^ v363;
  }
  else
  {
    v1005 = 0;
  }
  v364 = (CMMsl::AccessoryHeartRate *)*((_QWORD *)this + 22);
  if (v364)
    v1004 = CMMsl::AccessoryHeartRate::hash_value(v364);
  else
    v1004 = 0;
  v365 = (CMMsl::AccessoryPPG *)*((_QWORD *)this + 26);
  if (v365)
    v1003 = CMMsl::AccessoryPPG::hash_value(v365);
  else
    v1003 = 0;
  v366 = (CMMsl::MotionLoiAltitudeData *)*((_QWORD *)this + 254);
  if (v366)
    v1002 = CMMsl::MotionLoiAltitudeData::hash_value(v366);
  else
    v1002 = 0;
  v367 = *((_QWORD *)this + 97);
  if (v367)
  {
    v368 = *(_BYTE *)(v367 + 20);
    v369 = *(double *)(v367 + 8) == 0.0 || (v368 & 1) == 0;
    v370 = *(_QWORD *)(v367 + 8);
    if (v369)
      v370 = 0;
    v371 = *(unsigned int *)(v367 + 16);
    if ((v368 & 2) == 0)
      v371 = 0;
    v1001 = v371 ^ v370;
  }
  else
  {
    v1001 = 0;
  }
  v372 = (CMMsl::PostureJoint *)*((_QWORD *)this + 306);
  if (v372)
    v1000 = CMMsl::PostureJoint::hash_value(v372);
  else
    v1000 = 0;
  v373 = *((_QWORD *)this + 307);
  if (!v373
    || (v374 = *(CMMsl::PostureJoint ***)(v373 + 8), v375 = *(CMMsl::PostureJoint ***)(v373 + 16), v374 == v375))
  {
    v376 = 0;
  }
  else
  {
    v376 = 0;
    do
    {
      v377 = *v374++;
      v376 ^= CMMsl::PostureJoint::hash_value(v377);
    }
    while (v374 != v375);
  }
  v378 = *((_QWORD *)this + 167);
  if (v378)
  {
    v379 = *(unsigned __int8 *)(v378 + 20);
    v380 = *(double *)(v378 + 8) == 0.0 || (v379 & 1) == 0;
    v381 = *(_QWORD *)(v378 + 8);
    if (v380)
      v381 = 0;
    v999 = v381 ^ (*(_BYTE *)(v378 + 16) & (v379 << 30 >> 31));
  }
  else
  {
    v999 = 0;
  }
  v382 = *((_QWORD *)this + 437);
  if (v382 && (v383 = *(_QWORD *)(v382 + 8)) != 0)
  {
    v384 = *(unsigned __int8 *)(v383 + 20);
    v385 = *(double *)(v383 + 8) == 0.0 || (v384 & 1) == 0;
    v386 = *(_QWORD *)(v383 + 8);
    if (v385)
      v386 = 0;
    v998 = v386 ^ (*(_BYTE *)(v383 + 16) & (v384 << 30 >> 31));
  }
  else
  {
    v998 = 0;
  }
  v387 = *((_QWORD *)this + 384);
  if (v387 && (v388 = *(CMMsl::OnsetHeartRateData **)(v387 + 8)) != 0)
    v997 = CMMsl::OnsetHeartRateData::hash_value(v388);
  else
    v997 = 0;
  v389 = *((_QWORD *)this + 396);
  if (v389)
  {
    v390 = *(_QWORD *)(v389 + 16);
    if (v390)
      v390 = CMMsl::Accel::hash_value((CMMsl::Accel *)v390);
    if ((*(_BYTE *)(v389 + 24) & 1) != 0)
      v391 = *(_QWORD *)(v389 + 8);
    else
      v391 = 0;
    v996 = v391 ^ v390;
  }
  else
  {
    v996 = 0;
  }
  v392 = (CMMsl::Accel *)*((_QWORD *)this + 3);
  if (v392)
    v995 = CMMsl::Accel::hash_value(v392);
  else
    v995 = 0;
  v393 = (CMMsl::AccelBatch *)*((_QWORD *)this + 5);
  if (v393)
    v994 = CMMsl::AccelBatch::hash_value(v393);
  else
    v994 = 0;
  v394 = *((_QWORD *)this + 8);
  if (v394 && (v395 = *(CMMsl::Accel **)(v394 + 8)) != 0)
    v993 = CMMsl::Accel::hash_value(v395);
  else
    v993 = 0;
  v396 = *((_QWORD *)this + 6);
  if (v396 && (v397 = *(CMMsl::Accel **)(v396 + 8)) != 0)
    v992 = CMMsl::Accel::hash_value(v397);
  else
    v992 = 0;
  v398 = (CMMsl::Gyro *)*((_QWORD *)this + 143);
  if (v398)
    v991 = CMMsl::Gyro::hash_value(v398);
  else
    v991 = 0;
  v399 = (CMMsl::GyroOscarEmu *)*((_QWORD *)this + 157);
  if (v399)
    v990 = CMMsl::GyroOscarEmu::hash_value(v399);
  else
    v990 = 0;
  v400 = *((_QWORD *)this + 158);
  if (v400)
  {
    v401 = *(_BYTE *)(v400 + 16);
    v402 = *(float *)(v400 + 12);
    v403 = v402 == 0.0 || (v401 & 2) == 0;
    v404 = LODWORD(v402);
    if (v403)
      v404 = 0;
    v405 = *(int *)(v400 + 8);
    if ((v401 & 1) == 0)
      v405 = 0;
    v989 = v405 ^ v404;
  }
  else
  {
    v989 = 0;
  }
  v406 = (CMMsl::GyroBiasAndVariance *)*((_QWORD *)this + 144);
  if (v406)
    v988 = CMMsl::GyroBiasAndVariance::hash_value(v406);
  else
    v988 = 0;
  v407 = (CMMsl::GyroBiasFit *)*((_QWORD *)this + 148);
  if (v407)
    v987 = CMMsl::GyroBiasFit::hash_value(v407);
  else
    v987 = 0;
  v408 = *((_QWORD *)this + 154);
  if (v408)
  {
    v409 = *(float *)(v408 + 8);
    v410 = v409 == 0.0 || (*(_BYTE *)(v408 + 12) & 1) == 0;
    v411 = LODWORD(v409);
    if (v410)
      v411 = 0;
    v986 = v411;
  }
  else
  {
    v986 = 0;
  }
  v412 = (CMMsl::Magnetometer *)*((_QWORD *)this + 240);
  if (v412)
    v985 = CMMsl::Magnetometer::hash_value(v412);
  else
    v985 = 0;
  v413 = (CMMsl::Compass *)*((_QWORD *)this + 80);
  if (v413)
    v984 = CMMsl::Compass::hash_value(v413);
  else
    v984 = 0;
  v414 = *((_QWORD *)this + 81);
  if (v414)
  {
    v415 = *(_BYTE *)(v414 + 20);
    v416 = *(double *)(v414 + 8) == 0.0 || (v415 & 1) == 0;
    v417 = *(_QWORD *)(v414 + 8);
    if (v416)
      v417 = 0;
    v418 = *(int *)(v414 + 16);
    if ((v415 & 2) == 0)
      v418 = 0;
    v983 = v418 ^ v417;
  }
  else
  {
    v983 = 0;
  }
  v419 = (CMMsl::GyroCompass *)*((_QWORD *)this + 153);
  if (v419)
    v982 = CMMsl::GyroCompass::hash_value(v419);
  else
    v982 = 0;
  v420 = (CMMsl::CompassCalibration *)*((_QWORD *)this + 82);
  if (v420)
    v981 = CMMsl::CompassCalibration::hash_value(v420);
  else
    v981 = 0;
  v421 = (CMMsl::Pressure *)*((_QWORD *)this + 316);
  if (v421)
    v980 = CMMsl::Pressure::hash_value(v421);
  else
    v980 = 0;
  v422 = *((_QWORD *)this + 323);
  if (v422 && (v423 = *(CMMsl::Pressure **)(v422 + 8)) != 0)
    v979 = CMMsl::Pressure::hash_value(v423);
  else
    v979 = 0;
  v424 = *((_QWORD *)this + 319);
  if (v424 && (v425 = *(CMMsl::Pressure **)(v424 + 8)) != 0)
    v978 = CMMsl::Pressure::hash_value(v425);
  else
    v978 = 0;
  v426 = *((_QWORD *)this + 324);
  if (v426)
  {
    v427 = *(_BYTE *)(v426 + 20);
    v428 = *(double *)(v426 + 8) == 0.0 || (v427 & 1) == 0;
    v429 = *(_QWORD *)(v426 + 8);
    if (v428)
      v429 = 0;
    v430 = *(unsigned int *)(v426 + 16);
    if ((v427 & 2) == 0)
      v430 = 0;
    v977 = v430 ^ v429;
  }
  else
  {
    v977 = 0;
  }
  v431 = *((_QWORD *)this + 394);
  if (v431)
  {
    v432 = *(unsigned __int8 *)(v431 + 20);
    v433 = *(double *)(v431 + 8) == 0.0 || (v432 & 1) == 0;
    v434 = *(_QWORD *)(v431 + 8);
    if (v433)
      v434 = 0;
    v976 = v434 ^ (*(_BYTE *)(v431 + 16) & (v432 << 30 >> 31));
  }
  else
  {
    v976 = 0;
  }
  v435 = (CMMsl::DeviceMotion *)*((_QWORD *)this + 93);
  if (v435)
    v975 = CMMsl::DeviceMotion::hash_value(v435);
  else
    v975 = 0;
  v436 = (CMMsl::MotionStateUpdate *)*((_QWORD *)this + 256);
  if (v436)
    v974 = CMMsl::MotionStateUpdate::hash_value(v436);
  else
    v974 = 0;
  v437 = (CMMsl::AccelGps *)*((_QWORD *)this + 7);
  if (v437)
    v973 = CMMsl::AccelGps::hash_value(v437);
  else
    v973 = 0;
  v438 = (CMMsl::GyroGps *)*((_QWORD *)this + 156);
  if (v438)
    v972 = CMMsl::GyroGps::hash_value(v438);
  else
    v972 = 0;
  v439 = *((_QWORD *)this + 322);
  if (v439 && (v440 = *(CMMsl::Pressure **)(v439 + 8)) != 0)
    v971 = CMMsl::Pressure::hash_value(v440);
  else
    v971 = 0;
  v441 = (CMMsl::BTConnection *)*((_QWORD *)this + 49);
  if (v441)
    v970 = CMMsl::BTConnection::hash_value(v441);
  else
    v970 = 0;
  v442 = *((_QWORD *)this + 355);
  if (v442)
  {
    v443 = *(_BYTE *)(v442 + 20);
    v444 = *(double *)(v442 + 8) == 0.0 || (v443 & 1) == 0;
    v445 = *(_QWORD *)(v442 + 8);
    if (v444)
      v445 = 0;
    v446 = *(unsigned int *)(v442 + 16);
    if ((v443 & 2) == 0)
      v446 = 0;
    v969 = v446 ^ v445;
  }
  else
  {
    v969 = 0;
  }
  v447 = (CMMsl::LocationOscarEmu *)*((_QWORD *)this + 233);
  if (v447)
    v968 = CMMsl::LocationOscarEmu::hash_value(v447);
  else
    v968 = 0;
  v448 = (CMMsl::MotionHint *)*((_QWORD *)this + 252);
  if (v448)
    v967 = CMMsl::MotionHint::hash_value(v448);
  else
    v967 = 0;
  v449 = (CMMsl::EnhancedDeviceMotion *)*((_QWORD *)this + 110);
  if (v449)
    v966 = CMMsl::EnhancedDeviceMotion::hash_value(v449);
  else
    v966 = 0;
  v450 = (CMMsl::NonlinearBiasFit *)*((_QWORD *)this + 263);
  if (v450)
    v965 = CMMsl::NonlinearBiasFit::hash_value(v450);
  else
    v965 = 0;
  v451 = (CMMsl::NatalieData *)*((_QWORD *)this + 262);
  if (v451)
    v964 = CMMsl::NatalieData::hash_value(v451);
  else
    v964 = 0;
  v452 = (CMMsl::BodyMetrics *)*((_QWORD *)this + 66);
  if (v452)
    v963 = CMMsl::BodyMetrics::hash_value(v452);
  else
    v963 = 0;
  v453 = (CMMsl::WorkoutEvent *)*((_QWORD *)this + 429);
  if (v453)
    v962 = CMMsl::WorkoutEvent::hash_value(v453);
  else
    v962 = 0;
  v454 = (CMMsl::OnsetHeartRateData *)*((_QWORD *)this + 267);
  if (v454)
    v961 = CMMsl::OnsetHeartRateData::hash_value(v454);
  else
    v961 = 0;
  v455 = *((_QWORD *)this + 383);
  if (v455 && (v456 = *(CMMsl::OnsetHeartRateData **)(v455 + 8)) != 0)
    v960 = CMMsl::OnsetHeartRateData::hash_value(v456);
  else
    v960 = 0;
  v457 = (CMMsl::ElevationChange *)*((_QWORD *)this + 106);
  if (v457)
    v959 = CMMsl::ElevationChange::hash_value(v457);
  else
    v959 = 0;
  v458 = *((_QWORD *)this + 79);
  if (v458)
  {
    v459 = *(_BYTE *)(v458 + 20);
    v460 = *(double *)(v458 + 8) == 0.0 || (v459 & 1) == 0;
    v461 = *(_QWORD *)(v458 + 8);
    if (v460)
      v461 = 0;
    v462 = *(unsigned int *)(v458 + 16);
    if ((v459 & 2) == 0)
      v462 = 0;
    v958 = v462 ^ v461;
  }
  else
  {
    v958 = 0;
  }
  v463 = (CMMsl::MotionGPSLocation *)*((_QWORD *)this + 251);
  if (v463)
    v957 = CMMsl::MotionGPSLocation::hash_value(v463);
  else
    v957 = 0;
  v464 = *((_QWORD *)this + 258);
  if (v464 && (v465 = *(CMMsl::MotionGPSLocation **)(v464 + 8)) != 0)
    v956 = CMMsl::MotionGPSLocation::hash_value(v465);
  else
    v956 = 0;
  v466 = (CMMsl::StrideCalBin *)*((_QWORD *)this + 385);
  if (v466)
    v955 = CMMsl::StrideCalBin::hash_value(v466);
  else
    v955 = 0;
  v467 = *((_QWORD *)this + 75);
  if (v467)
    v954 = ((*(unsigned __int8 *)(v467 + 12) << 31 >> 31) & *(_BYTE *)(v467 + 8));
  else
    v954 = 0;
  v468 = (CMMsl::Odometer *)*((_QWORD *)this + 264);
  if (v468)
    v953 = CMMsl::Odometer::hash_value(v468);
  else
    v953 = 0;
  v469 = (CMMsl::MetsInfo *)*((_QWORD *)this + 244);
  if (v469)
    v952 = CMMsl::MetsInfo::hash_value(v469);
  else
    v952 = 0;
  v470 = (CMMsl::FallStats *)*((_QWORD *)this + 126);
  if (v470)
    v951 = CMMsl::FallStats::hash_value(v470);
  else
    v951 = 0;
  v471 = (CMMsl::BasebandSpeed *)*((_QWORD *)this + 53);
  if (v471)
    v950 = CMMsl::BasebandSpeed::hash_value(v471);
  else
    v950 = 0;
  v472 = *((_QWORD *)this + 402);
  if (v472)
    v949 = ((*(unsigned __int8 *)(v472 + 12) << 31 >> 31) & *(_BYTE *)(v472 + 8));
  else
    v949 = 0;
  v473 = (CMMsl::StepCadenceToStrideLengthBin *)*((_QWORD *)this + 378);
  if (v473)
    v948 = CMMsl::StepCadenceToStrideLengthBin::hash_value(v473);
  else
    v948 = 0;
  v474 = *((_QWORD *)this + 426);
  if (v474)
  {
    v475 = *(_BYTE *)(v474 + 16);
    v478 = v474 + 8;
    v476 = *(unsigned int *)(v474 + 8);
    v477 = *(unsigned int *)(v478 + 4);
    if ((v475 & 2) == 0)
      v477 = 0;
    if ((v475 & 1) == 0)
      v476 = 0;
    v947 = v476 ^ v477;
  }
  else
  {
    v947 = 0;
  }
  v479 = *((_QWORD *)this + 257);
  if (v479)
    v946 = ((*(unsigned __int8 *)(v479 + 12) << 31 >> 31) & *(_BYTE *)(v479 + 8));
  else
    v946 = 0;
  v480 = (CMMsl::MotionLoiData *)*((_QWORD *)this + 255);
  if (v480)
    v945 = CMMsl::MotionLoiData::hash_value(v480);
  else
    v945 = 0;
  v481 = (CMMsl::OdometerWithAltitude *)*((_QWORD *)this + 265);
  if (v481)
    v944 = CMMsl::OdometerWithAltitude::hash_value(v481);
  else
    v944 = 0;
  v482 = *((_QWORD *)this + 321);
  if (v482)
  {
    v483 = *(_QWORD *)(v482 + 8);
    if ((*(_BYTE *)(v482 + 20) & 1) == 0)
      v483 = 0;
    v484 = *(float *)(v482 + 16);
    v485 = v484 == 0.0 || (*(_BYTE *)(v482 + 20) & 2) == 0;
    v486 = LODWORD(v484);
    if (v485)
      v486 = 0;
    v943 = v486 ^ v483;
  }
  else
  {
    v943 = 0;
  }
  v487 = (CMMsl::InEarTransition *)*((_QWORD *)this + 175);
  if (v487)
    v942 = CMMsl::InEarTransition::hash_value(v487);
  else
    v942 = 0;
  v488 = (CMMsl::ClefCalibration *)*((_QWORD *)this + 78);
  if (v488)
    v941 = CMMsl::ClefCalibration::hash_value(v488);
  else
    v941 = 0;
  v489 = (CMMsl::AirpodEvent *)*((_QWORD *)this + 36);
  if (v489)
    v940 = CMMsl::AirpodEvent::hash_value(v489);
  else
    v940 = 0;
  v490 = (CMMsl::InEarOptical *)*((_QWORD *)this + 173);
  if (v490)
    v939 = CMMsl::InEarOptical::hash_value(v490);
  else
    v939 = 0;
  v491 = (CMMsl::InEarConstraints *)*((_QWORD *)this + 171);
  if (v491)
    v938 = CMMsl::InEarConstraints::hash_value(v491);
  else
    v938 = 0;
  v492 = (CMMsl::InEarOpenLid *)*((_QWORD *)this + 172);
  if (v492)
    v937 = CMMsl::InEarOpenLid::hash_value(v492);
  else
    v937 = 0;
  v493 = (CMMsl::InEarBaselining *)*((_QWORD *)this + 170);
  if (v493)
    v936 = CMMsl::InEarBaselining::hash_value(v493);
  else
    v936 = 0;
  v494 = (CMMsl::AccessoryConfig *)*((_QWORD *)this + 15);
  if (v494)
    v935 = CMMsl::AccessoryConfig::hash_value(v494);
  else
    v935 = 0;
  v495 = (CMMsl::AccessoryAccelConfig *)*((_QWORD *)this + 12);
  if (v495)
    v934 = CMMsl::AccessoryAccelConfig::hash_value(v495);
  else
    v934 = 0;
  v496 = (CMMsl::AccessoryProximityConfig *)*((_QWORD *)this + 30);
  if (v496)
    v933 = CMMsl::AccessoryProximityConfig::hash_value(v496);
  else
    v933 = 0;
  v497 = (CMMsl::TapDetect *)*((_QWORD *)this + 390);
  if (v497)
    v932 = CMMsl::TapDetect::hash_value(v497);
  else
    v932 = 0;
  v498 = (CMMsl::TapAccept *)*((_QWORD *)this + 389);
  if (v498)
    v931 = CMMsl::TapAccept::hash_value(v498);
  else
    v931 = 0;
  v499 = (CMMsl::DoubleTap *)*((_QWORD *)this + 105);
  if (v499)
    v930 = CMMsl::DoubleTap::hash_value(v499);
  else
    v930 = 0;
  v500 = (CMMsl::AccessoryWakeDebug *)*((_QWORD *)this + 35);
  if (v500)
    v929 = CMMsl::AccessoryWakeDebug::hash_value(v500);
  else
    v929 = 0;
  v501 = (CMMsl::GeomagneticData *)*((_QWORD *)this + 138);
  if (v501)
    v928 = CMMsl::GeomagneticData::hash_value(v501);
  else
    v928 = 0;
  v502 = (CMMsl::RelativeDeviceMotionInternal *)*((_QWORD *)this + 336);
  if (v502)
    v927 = CMMsl::RelativeDeviceMotionInternal::hash_value(v502);
  else
    v927 = 0;
  v503 = *((_QWORD *)this + 338);
  if (v503)
  {
    v504 = *(_QWORD *)(v503 + 8);
    if (v504)
      v504 = CMMsl::DeviceMotionCorrection::hash_value((CMMsl::DeviceMotionCorrection *)v504);
    v926 = v504 ^ ((*(unsigned __int8 *)(v503 + 20) << 31 >> 31) & *(_BYTE *)(v503 + 16));
  }
  else
  {
    v926 = 0;
  }
  v505 = (CMMsl::RelativeGravityConstraints *)*((_QWORD *)this + 337);
  if (v505)
    v925 = CMMsl::RelativeGravityConstraints::hash_value(v505);
  else
    v925 = 0;
  v506 = *((_QWORD *)this + 451);
  if (v506 && (v507 = *(CMMsl::DeviceMotionCorrection **)(v506 + 8)) != 0)
    v924 = CMMsl::DeviceMotionCorrection::hash_value(v507);
  else
    v924 = 0;
  v508 = (CMMsl::AnchorCorrection *)*((_QWORD *)this + 41);
  if (v508)
    v923 = CMMsl::AnchorCorrection::hash_value(v508);
  else
    v923 = 0;
  v509 = (CMMsl::PredictedRelativeDeviceMotion *)*((_QWORD *)this + 315);
  if (v509)
    v922 = CMMsl::PredictedRelativeDeviceMotion::hash_value(v509);
  else
    v922 = 0;
  v510 = (CMMsl::MovementStatsSignal *)*((_QWORD *)this + 261);
  if (v510)
    v921 = CMMsl::MovementStatsSignal::hash_value(v510);
  else
    v921 = 0;
  v511 = (CMMsl::MovementStatsGravityProjection *)*((_QWORD *)this + 260);
  if (v511)
    v920 = CMMsl::MovementStatsGravityProjection::hash_value(v511);
  else
    v920 = 0;
  v512 = *((_QWORD *)this + 65);
  if (v512)
  {
    v513 = *(_QWORD *)(v512 + 8);
    if (v513)
      v513 = CMMsl::DeviceMotionCorrection::hash_value((CMMsl::DeviceMotionCorrection *)v513);
    v919 = v513 ^ ((*(unsigned __int8 *)(v512 + 20) << 31 >> 31) & *(_BYTE *)(v512 + 16));
  }
  else
  {
    v919 = 0;
  }
  v514 = *((_QWORD *)this + 20);
  if (v514 && (v515 = *(CMMsl::AccessoryConfig **)(v514 + 8)) != 0)
    v918 = CMMsl::AccessoryConfig::hash_value(v515);
  else
    v918 = 0;
  v516 = *((_QWORD *)this + 21);
  if (v516 && (v517 = *(_QWORD *)(v516 + 8)) != 0)
    v917 = sub_242910D74(v517);
  else
    v917 = 0;
  v518 = *((_QWORD *)this + 19);
  if (v518 && (v519 = *(_QWORD *)(v518 + 8)) != 0)
    v916 = sub_242910D74(v519);
  else
    v916 = 0;
  v520 = (CMMsl::GaitCycleSegment *)*((_QWORD *)this + 133);
  if (v520)
    v915 = CMMsl::GaitCycleSegment::hash_value(v520);
  else
    v915 = 0;
  v521 = (CMMsl::GaitCycleSegmentationState *)*((_QWORD *)this + 134);
  if (v521)
    v914 = CMMsl::GaitCycleSegmentationState::hash_value(v521);
  else
    v914 = 0;
  v522 = (CMMsl::CompassCalibrationAttempt *)*((_QWORD *)this + 83);
  if (v522)
    v913 = CMMsl::CompassCalibrationAttempt::hash_value(v522);
  else
    v913 = 0;
  v523 = *((_QWORD *)this + 413);
  if (v523 && (v524 = *(CMMsl::DeviceMotionCorrection **)(v523 + 8)) != 0)
    v912 = CMMsl::DeviceMotionCorrection::hash_value(v524);
  else
    v912 = 0;
  v525 = (CMMsl::VisualLocalizationAttitudeConstraints *)*((_QWORD *)this + 412);
  if (v525)
    v911 = CMMsl::VisualLocalizationAttitudeConstraints::hash_value(v525);
  else
    v911 = 0;
  v526 = *((_QWORD *)this + 25);
  if (v526 && (v527 = *(CMMsl::AccessoryConfig **)(v526 + 8)) != 0)
    v910 = CMMsl::AccessoryConfig::hash_value(v527);
  else
    v910 = 0;
  v528 = (CMMsl::FallDetectionReferee *)*((_QWORD *)this + 119);
  if (v528)
    v909 = CMMsl::FallDetectionReferee::hash_value(v528);
  else
    v909 = 0;
  v529 = (CMMsl::FallDetectionReplay *)*((_QWORD *)this + 120);
  if (v529)
    v908 = CMMsl::FallDetectionReplay::hash_value(v529);
  else
    v908 = 0;
  v530 = (CMMsl::FallDetectionStateMachine *)*((_QWORD *)this + 121);
  if (v530)
    v907 = CMMsl::FallDetectionStateMachine::hash_value(v530);
  else
    v907 = 0;
  v531 = (CMMsl::FallDetectionDetector *)*((_QWORD *)this + 117);
  if (v531)
    v906 = CMMsl::FallDetectionDetector::hash_value(v531);
  else
    v906 = 0;
  v532 = (CMMsl::FallFalsePositiveSuppressionFeatures *)*((_QWORD *)this + 124);
  if (v532)
    v905 = CMMsl::FallFalsePositiveSuppressionFeatures::hash_value(v532);
  else
    v905 = 0;
  v533 = (CMMsl::AccessoryDeviceMotionConfig *)*((_QWORD *)this + 17);
  if (v533)
    v904 = CMMsl::AccessoryDeviceMotionConfig::hash_value(v533);
  else
    v904 = 0;
  v534 = (CMMsl::RelativeDeviceMotionCorrelatedMotion *)*((_QWORD *)this + 335);
  if (v534)
    v903 = CMMsl::RelativeDeviceMotionCorrelatedMotion::hash_value(v534);
  else
    v903 = 0;
  v535 = (CMMsl::RelativeDeviceMotionComplexTransition *)*((_QWORD *)this + 334);
  if (v535)
    v902 = CMMsl::RelativeDeviceMotionComplexTransition::hash_value(v535);
  else
    v902 = 0;
  v536 = (CMMsl::DeviceMotionAlwaysOn *)*((_QWORD *)this + 94);
  if (v536)
    v901 = CMMsl::DeviceMotionAlwaysOn::hash_value(v536);
  else
    v901 = 0;
  v537 = *((_QWORD *)this + 118);
  if (v537)
  {
    v538 = *(unsigned __int8 *)(v537 + 20);
    v539 = *(_QWORD *)(v537 + 8);
    if ((v538 & 1) == 0)
      v539 = 0;
    v900 = v539 ^ (*(_BYTE *)(v537 + 16) & (v538 << 30 >> 31));
  }
  else
  {
    v900 = 0;
  }
  v540 = (CMMsl::WalkingDetectionResult *)*((_QWORD *)this + 419);
  if (v540)
    v899 = CMMsl::WalkingDetectionResult::hash_value(v540);
  else
    v899 = 0;
  v541 = *((_QWORD *)this + 23);
  if (v541)
  {
    v542 = *(int *)(v541 + 8);
    if ((*(_BYTE *)(v541 + 16) & 1) == 0)
      v542 = 0;
    v543 = *(float *)(v541 + 12);
    v544 = v543 == 0.0 || (*(_BYTE *)(v541 + 16) & 2) == 0;
    v545 = LODWORD(v543);
    if (v544)
      v545 = 0;
    v898 = v545 ^ v542;
  }
  else
  {
    v898 = 0;
  }
  v546 = (CMMsl::FallDetectionWristStateReplay *)*((_QWORD *)this + 122);
  if (v546)
    v897 = CMMsl::FallDetectionWristStateReplay::hash_value(v546);
  else
    v897 = 0;
  v547 = (CMMsl::GyroBiasEstimateError *)*((_QWORD *)this + 147);
  if (v547)
    v896 = CMMsl::GyroBiasEstimateError::hash_value(v547);
  else
    v896 = 0;
  v548 = (CMMsl::StepLikelihoodFeatures *)*((_QWORD *)this + 382);
  if (v548)
    v895 = CMMsl::StepLikelihoodFeatures::hash_value(v548);
  else
    v895 = 0;
  v549 = (CMMsl::FirstStepFeatures *)*((_QWORD *)this + 127);
  if (v549)
    v894 = CMMsl::FirstStepFeatures::hash_value(v549);
  else
    v894 = 0;
  v550 = (CMMsl::AccessoryStepDetectorDebug *)*((_QWORD *)this + 33);
  if (v550)
    v893 = CMMsl::AccessoryStepDetectorDebug::hash_value(v550);
  else
    v893 = 0;
  v551 = (CMMsl::SitStandDetectorFeatures *)*((_QWORD *)this + 358);
  if (v551)
    v892 = CMMsl::SitStandDetectorFeatures::hash_value(v551);
  else
    v892 = 0;
  v552 = *((_QWORD *)this + 361);
  if (v552)
  {
    v553 = *(_BYTE *)(v552 + 20);
    v554 = *(double *)(v552 + 8) == 0.0 || (v553 & 1) == 0;
    v555 = *(_QWORD *)(v552 + 8);
    if (v554)
      v555 = 0;
    v556 = *(int *)(v552 + 16);
    if ((v553 & 2) == 0)
      v556 = 0;
    v891 = v556 ^ v555;
  }
  else
  {
    v891 = 0;
  }
  v557 = (CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand *)*((_QWORD *)this + 359);
  if (v557)
    v890 = CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand::hash_value(v557);
  else
    v890 = 0;
  v558 = (CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit *)*((_QWORD *)this + 360);
  if (v558)
    v889 = CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit::hash_value(v558);
  else
    v889 = 0;
  v559 = *((_QWORD *)this + 366);
  if (v559)
  {
    v560 = *(int *)(v559 + 16);
    if ((*(_BYTE *)(v559 + 20) & 2) == 0)
      v560 = 0;
    v561 = *(double *)(v559 + 8) == 0.0 || (*(_BYTE *)(v559 + 20) & 1) == 0;
    v562 = *(_QWORD *)(v559 + 8);
    if (v561)
      v562 = 0;
    v888 = v562 ^ v560;
  }
  else
  {
    v888 = 0;
  }
  v563 = (CMMsl::FallDistanceReplay *)*((_QWORD *)this + 123);
  if (v563)
    v887 = CMMsl::FallDistanceReplay::hash_value(v563);
  else
    v887 = 0;
  v564 = (CMMsl::JitterBufferLevel *)*((_QWORD *)this + 182);
  if (v564)
    v886 = CMMsl::JitterBufferLevel::hash_value(v564);
  else
    v886 = 0;
  v565 = (CMMsl::PressureFiltered1HzLowPass *)*((_QWORD *)this + 320);
  if (v565)
    v885 = CMMsl::PressureFiltered1HzLowPass::hash_value(v565);
  else
    v885 = 0;
  v566 = (CMMsl::MotionActivityReplay *)*((_QWORD *)this + 249);
  if (v566)
    v884 = CMMsl::MotionActivityReplay::hash_value(v566);
  else
    v884 = 0;
  v567 = (CMMsl::FallDetectionActivityClassifierReplay *)*((_QWORD *)this + 116);
  if (v567)
    v883 = CMMsl::FallDetectionActivityClassifierReplay::hash_value(v567);
  else
    v883 = 0;
  v568 = (CMMsl::LegacyALS5CHInput *)*((_QWORD *)this + 228);
  if (v568)
    v882 = CMMsl::LegacyALS5CHInput::hash_value(v568);
  else
    v882 = 0;
  v569 = *((_QWORD *)this + 102);
  if (v569)
  {
    v570 = *(_BYTE *)(v569 + 20);
    v571 = *(double *)(v569 + 8) == 0.0 || (v570 & 1) == 0;
    v572 = *(_QWORD *)(v569 + 8);
    if (v571)
      v572 = 0;
    v573 = *(unsigned int *)(v569 + 16);
    if ((v570 & 2) == 0)
      v573 = 0;
    v881 = v573 ^ v572;
  }
  else
  {
    v881 = 0;
  }
  v574 = (CMMsl::DopplerProximityEvent *)*((_QWORD *)this + 100);
  if (v574)
    v880 = CMMsl::DopplerProximityEvent::hash_value(v574);
  else
    v880 = 0;
  v575 = (CMMsl::DopplerRawDataInput *)*((_QWORD *)this + 101);
  if (v575)
    v879 = CMMsl::DopplerRawDataInput::hash_value(v575);
  else
    v879 = 0;
  v576 = (CMMsl::DopplerDebugRecord *)*((_QWORD *)this + 99);
  if (v576)
    v878 = CMMsl::DopplerDebugRecord::hash_value(v576);
  else
    v878 = 0;
  v577 = *((_QWORD *)this + 268);
  if (v577)
  {
    v578 = *(_BYTE *)(v577 + 20);
    v579 = *(double *)(v577 + 8) == 0.0 || (v578 & 1) == 0;
    v580 = *(_QWORD *)(v577 + 8);
    if (v579)
      v580 = 0;
    v581 = *(unsigned int *)(v577 + 16);
    if ((v578 & 2) == 0)
      v581 = 0;
    v877 = v581 ^ v580;
  }
  else
  {
    v877 = 0;
  }
  v582 = (CMMsl::KappaAudioResult *)*((_QWORD *)this + 191);
  if (v582)
    v876 = CMMsl::KappaAudioResult::hash_value(v582);
  else
    v876 = 0;
  v583 = (CMMsl::KappaBaroResult *)*((_QWORD *)this + 192);
  if (v583)
    v875 = CMMsl::KappaBaroResult::hash_value(v583);
  else
    v875 = 0;
  v584 = (CMMsl::KappaGpsResult *)*((_QWORD *)this + 195);
  if (v584)
    v874 = CMMsl::KappaGpsResult::hash_value(v584);
  else
    v874 = 0;
  v585 = (CMMsl::KappaPulseResult *)*((_QWORD *)this + 206);
  if (v585)
    v873 = CMMsl::KappaPulseResult::hash_value(v585);
  else
    v873 = 0;
  v586 = (CMMsl::KappaZgResult *)*((_QWORD *)this + 221);
  if (v586)
    v872 = CMMsl::KappaZgResult::hash_value(v586);
  else
    v872 = 0;
  v587 = *((_QWORD *)this + 220);
  if (v587)
  {
    v588 = *(_BYTE *)(v587 + 16);
    v589 = *(_QWORD *)(v587 + 8);
    if ((v588 & 1) == 0)
      v589 = 0;
    v871 = v589;
  }
  else
  {
    v871 = 0;
  }
  v590 = (CMMsl::KappaPulseInertialAccel *)*((_QWORD *)this + 204);
  if (v590)
    v870 = CMMsl::KappaPulseInertialAccel::hash_value(v590);
  else
    v870 = 0;
  v591 = *((_QWORD *)this + 164);
  if (v591)
  {
    v592 = *(_BYTE *)(v591 + 12);
    v593 = *(int *)(v591 + 8);
    if ((v592 & 1) == 0)
      v593 = 0;
    v869 = v593;
  }
  else
  {
    v869 = 0;
  }
  v594 = *((_QWORD *)this + 163);
  if (v594)
  {
    v595 = *(_BYTE *)(v594 + 12);
    v596 = *(int *)(v594 + 8);
    if ((v595 & 1) == 0)
      v596 = 0;
    v868 = v596;
  }
  else
  {
    v868 = 0;
  }
  v597 = (CMMsl::KappaAirbagResult *)*((_QWORD *)this + 190);
  if (v597)
    v867 = CMMsl::KappaAirbagResult::hash_value(v597);
  else
    v867 = 0;
  v598 = (CMMsl::KappaCrashResult *)*((_QWORD *)this + 193);
  if (v598)
    v866 = CMMsl::KappaCrashResult::hash_value(v598);
  else
    v866 = 0;
  v599 = (CMMsl::KappaQuiescenceResult *)*((_QWORD *)this + 207);
  if (v599)
    v865 = CMMsl::KappaQuiescenceResult::hash_value(v599);
  else
    v865 = 0;
  v600 = (CMMsl::KappaRecoveryResult *)*((_QWORD *)this + 208);
  if (v600)
    v864 = CMMsl::KappaRecoveryResult::hash_value(v600);
  else
    v864 = 0;
  v601 = (CMMsl::KappaRolloverCrashResult *)*((_QWORD *)this + 212);
  if (v601)
    v863 = CMMsl::KappaRolloverCrashResult::hash_value(v601);
  else
    v863 = 0;
  v602 = (CMMsl::KappaMildImpactResult *)*((_QWORD *)this + 200);
  if (v602)
    v862 = CMMsl::KappaMildImpactResult::hash_value(v602);
  else
    v862 = 0;
  v603 = (CMMsl::KappaLackOfMotionResult *)*((_QWORD *)this + 198);
  if (v603)
    v861 = CMMsl::KappaLackOfMotionResult::hash_value(v603);
  else
    v861 = 0;
  v604 = (CMMsl::KappaSevereCrashResult *)*((_QWORD *)this + 213);
  if (v604)
    v860 = CMMsl::KappaSevereCrashResult::hash_value(v604);
  else
    v860 = 0;
  v605 = (CMMsl::KappaLocalAudioResult *)*((_QWORD *)this + 199);
  if (v605)
    v859 = CMMsl::KappaLocalAudioResult::hash_value(v605);
  else
    v859 = 0;
  v606 = (CMMsl::KappaRemoteAudioResult *)*((_QWORD *)this + 209);
  if (v606)
    v858 = CMMsl::KappaRemoteAudioResult::hash_value(v606);
  else
    v858 = 0;
  v607 = (CMMsl::DirectionOfTravelMetrics *)*((_QWORD *)this + 96);
  if (v607)
    v857 = CMMsl::DirectionOfTravelMetrics::hash_value(v607);
  else
    v857 = 0;
  v608 = *((_QWORD *)this + 403);
  if (v608)
  {
    v609 = *(unsigned __int8 *)(v608 + 20);
    v610 = *(_QWORD *)(v608 + 8);
    if ((v609 & 1) == 0)
      v610 = 0;
    v856 = v610 ^ (*(_BYTE *)(v608 + 16) & (v609 << 30 >> 31));
  }
  else
  {
    v856 = 0;
  }
  v611 = (CMMsl::HeadToHeadsetTransformationEstimate *)*((_QWORD *)this + 162);
  if (v611)
    v855 = CMMsl::HeadToHeadsetTransformationEstimate::hash_value(v611);
  else
    v855 = 0;
  v612 = (CMMsl::ViewObstructedMachineLearningFeatures *)*((_QWORD *)this + 404);
  if (v612)
    v854 = CMMsl::ViewObstructedMachineLearningFeatures::hash_value(v612);
  else
    v854 = 0;
  v613 = (CMMsl::ViewObstructedMachineLearningProbabilities *)*((_QWORD *)this + 405);
  if (v613)
    v853 = CMMsl::ViewObstructedMachineLearningProbabilities::hash_value(v613);
  else
    v853 = 0;
  v614 = (CMMsl::RunningArmSwingSignals *)*((_QWORD *)this + 341);
  if (v614)
    v852 = CMMsl::RunningArmSwingSignals::hash_value(v614);
  else
    v852 = 0;
  v615 = (CMMsl::RunningCentripetalAccelSignals *)*((_QWORD *)this + 342);
  if (v615)
    v851 = CMMsl::RunningCentripetalAccelSignals::hash_value(v615);
  else
    v851 = 0;
  v616 = (CMMsl::RunningRotationAxis *)*((_QWORD *)this + 345);
  if (v616)
    v850 = CMMsl::RunningRotationAxis::hash_value(v616);
  else
    v850 = 0;
  v617 = (CMMsl::RunningVerticalOscillationSignals *)*((_QWORD *)this + 350);
  if (v617)
    v849 = CMMsl::RunningVerticalOscillationSignals::hash_value(v617);
  else
    v849 = 0;
  v618 = (CMMsl::RunningVerticalOscillation *)*((_QWORD *)this + 348);
  if (v618)
    v848 = CMMsl::RunningVerticalOscillation::hash_value(v618);
  else
    v848 = 0;
  v619 = (CMMsl::KappaSpinResult *)*((_QWORD *)this + 214);
  if (v619)
    v847 = CMMsl::KappaSpinResult::hash_value(v619);
  else
    v847 = 0;
  v620 = (CMMsl::KappaPulseDeltaV *)*((_QWORD *)this + 203);
  if (v620)
    v846 = CMMsl::KappaPulseDeltaV::hash_value(v620);
  else
    v846 = 0;
  v621 = (CMMsl::RunningStrideLength *)*((_QWORD *)this + 347);
  if (v621)
    v845 = CMMsl::RunningStrideLength::hash_value(v621);
  else
    v845 = 0;
  v622 = (CMMsl::ISPPacket *)*((_QWORD *)this + 181);
  if (v622)
    v844 = CMMsl::ISPPacket::hash_value(v622);
  else
    v844 = 0;
  v623 = (CMMsl::KappaHighSpeedCrashResult *)*((_QWORD *)this + 197);
  if (v623)
    v843 = CMMsl::KappaHighSpeedCrashResult::hash_value(v623);
  else
    v843 = 0;
  v624 = (CMMsl::KappaPulseInertialHgAccel *)*((_QWORD *)this + 205);
  if (v624)
    v842 = CMMsl::KappaPulseInertialHgAccel::hash_value(v624);
  else
    v842 = 0;
  v625 = (CMMsl::HarmonicMetrics *)*((_QWORD *)this + 160);
  if (v625)
    v841 = CMMsl::HarmonicMetrics::hash_value(v625);
  else
    v841 = 0;
  v626 = (CMMsl::CalorieControllerMETsConsumed *)*((_QWORD *)this + 74);
  if (v626)
    v840 = CMMsl::CalorieControllerMETsConsumed::hash_value(v626);
  else
    v840 = 0;
  v627 = (CMMsl::PedometerPathStraightness *)*((_QWORD *)this + 292);
  if (v627)
    v839 = CMMsl::PedometerPathStraightness::hash_value(v627);
  else
    v839 = 0;
  v628 = (CMMsl::ComplexHandMotion *)*((_QWORD *)this + 86);
  if (v628)
    v838 = CMMsl::ComplexHandMotion::hash_value(v628);
  else
    v838 = 0;
  v629 = (CMMsl::ElevationGradeEstimator *)*((_QWORD *)this + 107);
  if (v629)
    v837 = CMMsl::ElevationGradeEstimator::hash_value(v629);
  else
    v837 = 0;
  v630 = (CMMsl::VO2MaxModelInput *)*((_QWORD *)this + 400);
  if (v630)
    v836 = CMMsl::VO2MaxModelInput::hash_value(v630);
  else
    v836 = 0;
  v631 = (CMMsl::ProxCalibration *)*((_QWORD *)this + 326);
  if (v631)
    v835 = CMMsl::ProxCalibration::hash_value(v631);
  else
    v835 = 0;
  v632 = (CMMsl::KappaStepsResult *)*((_QWORD *)this + 216);
  if (v632)
    v834 = CMMsl::KappaStepsResult::hash_value(v632);
  else
    v834 = 0;
  v633 = (CMMsl::WakeGestureSample *)*((_QWORD *)this + 418);
  if (v633)
    v833 = CMMsl::WakeGestureSample::hash_value(v633);
  else
    v833 = 0;
  v634 = (CMMsl::KappaGravityAutocorrelationResult *)*((_QWORD *)this + 196);
  if (v634)
    v832 = CMMsl::KappaGravityAutocorrelationResult::hash_value(v634);
  else
    v832 = 0;
  v635 = (CMMsl::RunningVerticalOscillationGradientBoostedSignals *)*((_QWORD *)this + 349);
  if (v635)
    v831 = CMMsl::RunningVerticalOscillationGradientBoostedSignals::hash_value(v635);
  else
    v831 = 0;
  v636 = (CMMsl::SubStats *)*((_QWORD *)this + 387);
  if (v636)
    v830 = CMMsl::SubStats::hash_value(v636);
  else
    v830 = 0;
  v637 = (CMMsl::PedOdomFusionExtendedModeSegment *)*((_QWORD *)this + 289);
  if (v637)
    v829 = CMMsl::PedOdomFusionExtendedModeSegment::hash_value(v637);
  else
    v829 = 0;
  v638 = *((_QWORD *)this + 237);
  if (v638)
  {
    v639 = *(_BYTE *)(v638 + 20);
    v640 = *(_QWORD *)(v638 + 8);
    if ((v639 & 1) == 0)
      v640 = 0;
    v641 = *(unsigned int *)(v638 + 16);
    if ((v639 & 2) == 0)
      v641 = 0;
    v828 = v641 ^ v640;
  }
  else
  {
    v828 = 0;
  }
  v642 = (CMMsl::PDRPedestrianClassifierState *)*((_QWORD *)this + 283);
  if (v642)
    v827 = CMMsl::PDRPedestrianClassifierState::hash_value(v642);
  else
    v827 = 0;
  v643 = (CMMsl::PDRPlacementClassifierState *)*((_QWORD *)this + 284);
  if (v643)
    v826 = CMMsl::PDRPlacementClassifierState::hash_value(v643);
  else
    v826 = 0;
  v644 = (CMMsl::PDRSpeedEstimatorState *)*((_QWORD *)this + 285);
  if (v644)
    v825 = CMMsl::PDRSpeedEstimatorState::hash_value(v644);
  else
    v825 = 0;
  v645 = (CMMsl::PDRDOTEstimatorState *)*((_QWORD *)this + 270);
  if (v645)
    v824 = CMMsl::PDRDOTEstimatorState::hash_value(v645);
  else
    v824 = 0;
  v646 = (CMMsl::PDRVelocityEstimatorState *)*((_QWORD *)this + 287);
  if (v646)
    v823 = CMMsl::PDRVelocityEstimatorState::hash_value(v646);
  else
    v823 = 0;
  v647 = (CMMsl::KMVelocityEstimatorState *)*((_QWORD *)this + 227);
  if (v647)
    v822 = CMMsl::KMVelocityEstimatorState::hash_value(v647);
  else
    v822 = 0;
  v648 = (CMMsl::VelocityEstimatorFusionState *)*((_QWORD *)this + 401);
  if (v648)
    v821 = CMMsl::VelocityEstimatorFusionState::hash_value(v648);
  else
    v821 = 0;
  v649 = *((_QWORD *)this + 279);
  if (v649)
  {
    v650 = *(_BYTE *)(v649 + 20);
    v651 = *(double *)(v649 + 8) == 0.0 || (v650 & 1) == 0;
    v652 = *(_QWORD *)(v649 + 8);
    if (v651)
      v652 = 0;
    v653 = v650 & 2;
    v654 = *(float *)(v649 + 16);
    v655 = v654 == 0.0 || v653 == 0;
    v656 = LODWORD(v654);
    if (v655)
      v656 = 0;
    v820 = v656 ^ v652;
  }
  else
  {
    v820 = 0;
  }
  v657 = (CMMsl::PDRFenceState *)*((_QWORD *)this + 280);
  if (v657)
    v819 = CMMsl::PDRFenceState::hash_value(v657);
  else
    v819 = 0;
  v658 = (CMMsl::UWBRange *)*((_QWORD *)this + 399);
  if (v658)
    v818 = CMMsl::UWBRange::hash_value(v658);
  else
    v818 = 0;
  v659 = (CMMsl::SwingDoTCandidate *)*((_QWORD *)this + 388);
  if (v659)
    v817 = CMMsl::SwingDoTCandidate::hash_value(v659);
  else
    v817 = 0;
  v660 = (CMMsl::DoTEstimatorHandSwing *)*((_QWORD *)this + 103);
  if (v660)
    v816 = CMMsl::DoTEstimatorHandSwing::hash_value(v660);
  else
    v816 = 0;
  v661 = (CMMsl::KappaTriggerClustersResult *)*((_QWORD *)this + 218);
  if (v661)
    v815 = CMMsl::KappaTriggerClustersResult::hash_value(v661);
  else
    v815 = 0;
  v662 = *((_QWORD *)this + 357);
  if (v662)
  {
    v663 = *(_BYTE *)(v662 + 24);
    v666 = v662 + 8;
    v665 = *(_QWORD *)(v662 + 8);
    v664 = *(_QWORD *)(v666 + 8);
    if (v665)
    {
      v667 = *(_BYTE *)(v665 + 12);
      v665 = *(unsigned int *)(v665 + 8);
      if ((v667 & 1) == 0)
        v665 = 0;
    }
    if ((v663 & 1) == 0)
      v664 = 0;
    v814 = v665 ^ v664;
  }
  else
  {
    v814 = 0;
  }
  v668 = (CMMsl::PDRFeatures *)*((_QWORD *)this + 278);
  if (v668)
    v813 = CMMsl::PDRFeatures::hash_value(v668);
  else
    v813 = 0;
  v669 = (CMMsl::PDRDOTEstimatorStateBody *)*((_QWORD *)this + 272);
  if (v669)
    v812 = CMMsl::PDRDOTEstimatorStateBody::hash_value(v669);
  else
    v812 = 0;
  v670 = (CMMsl::PDRDOTEstimatorStateArmSwing *)*((_QWORD *)this + 271);
  if (v670)
    v811 = CMMsl::PDRDOTEstimatorStateArmSwing::hash_value(v670);
  else
    v811 = 0;
  v671 = (CMMsl::PDRDOTEstimatorStateHeading *)*((_QWORD *)this + 275);
  if (v671)
    v810 = CMMsl::PDRDOTEstimatorStateHeading::hash_value(v671);
  else
    v810 = 0;
  v672 = (CMMsl::AccessoryActivityAlseepConfidenceEpoch *)*((_QWORD *)this + 13);
  if (v672)
    v809 = CMMsl::AccessoryActivityAlseepConfidenceEpoch::hash_value(v672);
  else
    v809 = 0;
  v673 = (CMMsl::PDRSpeedEstimatorStateDebug *)*((_QWORD *)this + 286);
  if (v673)
    v808 = CMMsl::PDRSpeedEstimatorStateDebug::hash_value(v673);
  else
    v808 = 0;
  v674 = *((_QWORD *)this + 309);
  if (v674)
  {
    v675 = *(_BYTE *)(v674 + 24);
    v676 = *(double *)(v674 + 8);
    v677 = *(double *)(v674 + 16) == 0.0 || (v675 & 2) == 0;
    v678 = *(_QWORD *)(v674 + 16);
    if (v677)
      v678 = 0;
    v679 = v675 & 1;
    v680 = v676 == 0.0 || v679 == 0;
    v681 = v676;
    if (v680)
      v681 = 0.0;
    v807 = *(_QWORD *)&v681 ^ v678;
  }
  else
  {
    v807 = 0;
  }
  v682 = (CMMsl::PrecisionFindingState *)*((_QWORD *)this + 312);
  if (v682)
    v806 = CMMsl::PrecisionFindingState::hash_value(v682);
  else
    v806 = 0;
  v683 = (CMMsl::KappaRoadsResult *)*((_QWORD *)this + 211);
  if (v683)
    v805 = CMMsl::KappaRoadsResult::hash_value(v683);
  else
    v805 = 0;
  v684 = (CMMsl::PrecisionFindingVelocityEstimate *)*((_QWORD *)this + 313);
  if (v684)
    v804 = CMMsl::PrecisionFindingVelocityEstimate::hash_value(v684);
  else
    v804 = 0;
  v685 = (CMMsl::PrecisionFindingRangeFilter *)*((_QWORD *)this + 310);
  if (v685)
    v803 = CMMsl::PrecisionFindingRangeFilter::hash_value(v685);
  else
    v803 = 0;
  v686 = (CMMsl::PDRDOTMeasurementSelectorState *)*((_QWORD *)this + 277);
  if (v686)
    v802 = CMMsl::PDRDOTMeasurementSelectorState::hash_value(v686);
  else
    v802 = 0;
  v687 = *((_QWORD *)this + 72);
  if (v687)
  {
    v688 = *(_BYTE *)(v687 + 20);
    v689 = *(_QWORD *)(v687 + 8);
    if ((v688 & 1) == 0)
      v689 = 0;
    v690 = *(unsigned int *)(v687 + 16);
    if ((v688 & 2) == 0)
      v690 = 0;
    v801 = v690 ^ v689;
  }
  else
  {
    v801 = 0;
  }
  v691 = (CMMsl::PDRDOTEstimatorUncertaintyModelOnBody *)*((_QWORD *)this + 276);
  if (v691)
    v800 = CMMsl::PDRDOTEstimatorUncertaintyModelOnBody::hash_value(v691);
  else
    v800 = 0;
  v692 = *((_QWORD *)this + 293);
  if (v692)
  {
    v693 = *(_BYTE *)(v692 + 20);
    v694 = *(double *)(v692 + 8) == 0.0 || (v693 & 1) == 0;
    v695 = *(_QWORD *)(v692 + 8);
    if (v694)
      v695 = 0;
    v696 = *(unsigned int *)(v692 + 16);
    if ((v693 & 2) == 0)
      v696 = 0;
    v799 = v696 ^ v695;
  }
  else
  {
    v799 = 0;
  }
  v697 = (CMMsl::MagnetometerCalibratorFilterParameters *)*((_QWORD *)this + 241);
  if (v697)
    v798 = CMMsl::MagnetometerCalibratorFilterParameters::hash_value(v697);
  else
    v798 = 0;
  v698 = (CMMsl::KappaActivityPhone *)*((_QWORD *)this + 188);
  if (v698)
    v797 = CMMsl::KappaActivityPhone::hash_value(v698);
  else
    v797 = 0;
  v699 = (CMMsl::KappaActivityWatch *)*((_QWORD *)this + 189);
  if (v699)
    v796 = CMMsl::KappaActivityWatch::hash_value(v699);
  else
    v796 = 0;
  v700 = *((_QWORD *)this + 311);
  if (v700)
  {
    v701 = *(unsigned __int8 *)(v700 + 20);
    v702 = *(double *)(v700 + 8) == 0.0 || (v701 & 1) == 0;
    v703 = *(_QWORD *)(v700 + 8);
    if (v702)
      v703 = 0;
    v795 = v703 ^ (*(_BYTE *)(v700 + 16) & (v701 << 30 >> 31));
  }
  else
  {
    v795 = 0;
  }
  v704 = (CMMsl::PDRDOTEstimatorStateDebug *)*((_QWORD *)this + 274);
  if (v704)
    v794 = CMMsl::PDRDOTEstimatorStateDebug::hash_value(v704);
  else
    v794 = 0;
  v705 = (CMMsl::PDRDOTEstimatorStateBodyDebug *)*((_QWORD *)this + 273);
  if (v705)
    v793 = CMMsl::PDRDOTEstimatorStateBodyDebug::hash_value(v705);
  else
    v793 = 0;
  v706 = (CMMsl::KappaPeakDetectorMapResult *)*((_QWORD *)this + 202);
  if (v706)
    v792 = CMMsl::KappaPeakDetectorMapResult::hash_value(v706);
  else
    v792 = 0;
  v707 = (CMMsl::KappaPeakDetectorMapMagTimestamps *)*((_QWORD *)this + 201);
  if (v707)
    v791 = CMMsl::KappaPeakDetectorMapMagTimestamps::hash_value(v707);
  else
    v791 = 0;
  v708 = (CMMsl::PrecisionFindingVerticalState *)*((_QWORD *)this + 314);
  if (v708)
    v790 = CMMsl::PrecisionFindingVerticalState::hash_value(v708);
  else
    v790 = 0;
  v709 = (CMMsl::Altimeter *)*((_QWORD *)this + 39);
  if (v709)
    v789 = CMMsl::Altimeter::hash_value(v709);
  else
    v789 = 0;
  v710 = (CMMsl::FaceDownDetection *)*((_QWORD *)this + 113);
  if (v710)
    v788 = CMMsl::FaceDownDetection::hash_value(v710);
  else
    v788 = 0;
  v711 = (CMMsl::PencilFusionDMYawAlignmentUpdate *)*((_QWORD *)this + 295);
  if (v711)
    v787 = CMMsl::PencilFusionDMYawAlignmentUpdate::hash_value(v711);
  else
    v787 = 0;
  v712 = (CMMsl::PencilFusionRingSensorTrustModelUpdate *)*((_QWORD *)this + 298);
  if (v712)
    v786 = CMMsl::PencilFusionRingSensorTrustModelUpdate::hash_value(v712);
  else
    v786 = 0;
  v713 = (CMMsl::AccessorySleepStateUpdate *)*((_QWORD *)this + 32);
  if (v713)
    v785 = CMMsl::AccessorySleepStateUpdate::hash_value(v713);
  else
    v785 = 0;
  v714 = (CMMsl::AccessorySleepStateConfidenceEpoch *)*((_QWORD *)this + 31);
  if (v714)
    v784 = CMMsl::AccessorySleepStateConfidenceEpoch::hash_value(v714);
  else
    v784 = 0;
  v715 = *((_QWORD *)this + 352);
  if (v715)
  {
    v716 = *(_BYTE *)(v715 + 24);
    v717 = *(_QWORD *)(v715 + 8);
    if ((v716 & 1) == 0)
      v717 = 0;
    v720 = v715 + 16;
    v718 = *(unsigned int *)(v715 + 16);
    v719 = *(unsigned int *)(v720 + 4);
    if ((v716 & 4) == 0)
      v719 = 0;
    if ((v716 & 2) == 0)
      v718 = 0;
    v783 = v719 ^ v717 ^ v718;
  }
  else
  {
    v783 = 0;
  }
  v721 = *((_QWORD *)this + 351);
  if (v721)
  {
    v722 = *(_BYTE *)(v721 + 20);
    v723 = *(_QWORD *)(v721 + 8);
    if ((v722 & 1) == 0)
      v723 = 0;
    v724 = *(int *)(v721 + 16);
    if ((v722 & 2) == 0)
      v724 = 0;
    v782 = v724 ^ v723;
  }
  else
  {
    v782 = 0;
  }
  v725 = (CMMsl::PTSConsumedGNSS *)*((_QWORD *)this + 328);
  if (v725)
    v781 = CMMsl::PTSConsumedGNSS::hash_value(v725);
  else
    v781 = 0;
  v726 = (CMMsl::PTSForwardPropagation *)*((_QWORD *)this + 329);
  if (v726)
    v780 = CMMsl::PTSForwardPropagation::hash_value(v726);
  else
    v780 = 0;
  v727 = *((_QWORD *)this + 331);
  if (v727 && (v728 = *(CMMsl::PTSForwardPropagation **)(v727 + 8)) != 0)
    v779 = CMMsl::PTSForwardPropagation::hash_value(v728);
  else
    v779 = 0;
  v729 = (CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *)*((_QWORD *)this + 161);
  if (v729)
    v778 = CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::hash_value(v729);
  else
    v778 = 0;
  v730 = *((_QWORD *)this + 330);
  if (v730 && (v731 = *(CMMsl::PTSForwardPropagation **)(v730 + 8)) != 0)
    v777 = CMMsl::PTSForwardPropagation::hash_value(v731);
  else
    v777 = 0;
  v732 = (CMMsl::AnchorMotionCorrespondence *)*((_QWORD *)this + 42);
  if (v732)
    v776 = CMMsl::AnchorMotionCorrespondence::hash_value(v732);
  else
    v776 = 0;
  v733 = *((_QWORD *)this + 185);
  if (v733)
  {
    v734 = *(_BYTE *)(v733 + 20);
    v735 = *(_QWORD *)(v733 + 8);
    if ((v734 & 1) == 0)
      v735 = 0;
    v736 = *(unsigned int *)(v733 + 16);
    if ((v734 & 2) == 0)
      v736 = 0;
    v775 = v736 ^ v735;
  }
  else
  {
    v775 = 0;
  }
  v737 = (CMMsl::KData2 *)*((_QWORD *)this + 186);
  if (v737)
    v774 = CMMsl::KData2::hash_value(v737);
  else
    v774 = 0;
  v738 = (CMMsl::KData3 *)*((_QWORD *)this + 187);
  if (v738)
    v773 = CMMsl::KData3::hash_value(v738);
  else
    v773 = 0;
  v739 = (CMMsl::SafetyRemoteSample *)*((_QWORD *)this + 353);
  if (v739)
    v772 = CMMsl::SafetyRemoteSample::hash_value(v739);
  else
    v772 = 0;
  v740 = (CMMsl::SafetyTrustedAudioResult *)*((_QWORD *)this + 354);
  if (v740)
    v771 = CMMsl::SafetyTrustedAudioResult::hash_value(v740);
  else
    v771 = 0;
  v741 = *((_QWORD *)this + 368);
  if (v741 && (v742 = *(CMMsl::DeviceMotion **)(v741 + 8)) != 0)
    v743 = CMMsl::DeviceMotion::hash_value(v742);
  else
    v743 = 0;
  v744 = *((_QWORD *)this + 369);
  if (v744 && (v745 = *(CMMsl::MotionStateUpdate **)(v744 + 8)) != 0)
    v746 = CMMsl::MotionStateUpdate::hash_value(v745);
  else
    v746 = 0;
  v747 = *((_QWORD *)this + 179);
  if (v747)
  {
    v748 = *(_QWORD *)(v747 + 8);
    if (v748)
      v748 = CMMsl::AccessoryAccel::hash_value((CMMsl::AccessoryAccel *)v748);
  }
  else
  {
    v748 = 0;
  }
  v749 = v764 ^ *(_QWORD *)&v1193 ^ v763 ^ v762 ^ v761 ^ v770 ^ v760 ^ v769 ^ v759 ^ v758 ^ v757 ^ v756 ^ v755 ^ v754 ^ v768 ^ v767 ^ v766 ^ v765 ^ v1190 ^ v1189 ^ v1188 ^ v1187 ^ v46 ^ v1186 ^ v52 ^ v57 ^ v1185 ^ v1184 ^ v1183 ^ v1182 ^ v1181 ^ v1180 ^ v1179 ^ v1192 ^ v1178 ^ v1177 ^ v1176 ^ v1175 ^ v1174 ^ v1173 ^ v1172 ^ v1171 ^ v1170 ^ v1169 ^ v1168 ^ v1167 ^ v1166 ^ v1165 ^ v1164 ^ v1163 ^ v1162 ^ v1161 ^ v1160 ^ v1159 ^ v1158 ^ v1157 ^ v1156 ^ v1155 ^ v1154 ^ v1153 ^ v1152 ^ v1151 ^ v1150 ^ v1149 ^ v1148 ^ v1147 ^ v1146 ^ v1145 ^ v1144 ^ v1143 ^ v1142 ^ v1141 ^ v1140 ^ v1139 ^ v1138 ^ v1137 ^ v1136 ^ v1135 ^ v1134;
  v750 = v749 ^ v1133 ^ v1132 ^ v1131 ^ v1130 ^ v1129 ^ v1128 ^ v1127 ^ v1126 ^ v1125 ^ v161 ^ v166 ^ v1124 ^ v1123 ^ v1122 ^ v1121 ^ v1120 ^ v1119 ^ v1118 ^ v1117 ^ v1116 ^ v1115 ^ v1114 ^ v1113 ^ v1112 ^ v1111 ^ v1110 ^ v1109 ^ v1108 ^ v1107 ^ v1106 ^ v1105 ^ v1104 ^ v1103 ^ v1102 ^ v1101 ^ v1100 ^ v1099 ^ v1098 ^ v1097 ^ v1096 ^ v1095 ^ v1094 ^ v1093 ^ v1092 ^ v1091 ^ v1090 ^ v1089 ^ v1088 ^ v1087 ^ v1086 ^ v1085 ^ v1084 ^ v1083 ^ v241 ^ v1082 ^ v1081 ^ v1080 ^ v1079 ^ v1078 ^ v1077 ^ v1076 ^ v1075 ^ v1074 ^ v1073 ^ v1072 ^ v1071 ^ v1070 ^ v1191 ^ v1069 ^ v1068 ^ v1067 ^ v1066 ^ v1065 ^ v1064 ^ v1063 ^ v1062 ^ v1061 ^ v1060 ^ v1059 ^ v1058 ^ v1057 ^ v1056 ^ v1055 ^ v1054 ^ v1053 ^ v1052 ^ v1051 ^ v1050 ^ v1049 ^ v1048 ^ v1047 ^ v1046 ^ v1045 ^ v1044 ^ v1043 ^ v1042 ^ v1041 ^ v1040 ^ v1039 ^ v1038 ^ v1037 ^ v1036 ^ v1035 ^ v1034 ^ v1033 ^ v1032 ^ v1031 ^ v1030 ^ v1029 ^ v1028 ^ v1027 ^ v1026;
  v751 = v750 ^ v1025 ^ v1024 ^ v1023 ^ v1022 ^ v1021 ^ v1020 ^ v1019 ^ v1018 ^ v1017 ^ v1016 ^ v1015 ^ v1014 ^ v1013 ^ v1012 ^ v1011 ^ v1010 ^ v1009 ^ v1008 ^ v1007 ^ v1006 ^ v1005 ^ v1004 ^ v1003 ^ v1002 ^ v1001 ^ v1000 ^ v376 ^ v999 ^ v998 ^ v997 ^ v996 ^ v995 ^ v994 ^ v993 ^ v992 ^ v991 ^ v990 ^ v989 ^ v988 ^ v987 ^ v986 ^ v985 ^ v984 ^ v983 ^ v982 ^ v981 ^ v980 ^ v979 ^ v978 ^ v977 ^ v976 ^ v975 ^ v974 ^ v973 ^ v972 ^ v971 ^ v970 ^ v969 ^ v968 ^ v967 ^ v966 ^ v965 ^ v964 ^ v963 ^ v962 ^ v961 ^ v960 ^ v959 ^ v958 ^ v957 ^ v956 ^ v955 ^ v954 ^ v953 ^ v952 ^ v951 ^ v950 ^ v949 ^ v948 ^ v947 ^ v946 ^ v945 ^ v944 ^ v943 ^ v942 ^ v941 ^ v940 ^ v939 ^ v938 ^ v937 ^ v936 ^ v935 ^ v934 ^ v933 ^ v932 ^ v931 ^ v930 ^ v929 ^ v928 ^ v927 ^ v926 ^ v925 ^ v924 ^ v923 ^ v922 ^ v921 ^ v920 ^ v919 ^ v918;
  v752 = v751 ^ v917 ^ v916 ^ v915 ^ v914 ^ v913 ^ v912 ^ v911 ^ v910 ^ v909 ^ v908 ^ v907 ^ v906 ^ v905 ^ v904 ^ v903 ^ v902 ^ v901 ^ v900 ^ v899 ^ v898 ^ v897 ^ v896 ^ v895 ^ v894 ^ v893 ^ v892 ^ v891 ^ v890 ^ v889 ^ v888 ^ v887 ^ v886 ^ v885 ^ v884 ^ v883 ^ v882 ^ v881 ^ v880 ^ v879 ^ v878 ^ v877 ^ v876 ^ v875 ^ v874 ^ v873 ^ v872 ^ v871 ^ v870 ^ v869 ^ v868 ^ v867 ^ v866 ^ v865 ^ v864 ^ v863 ^ v862 ^ v861 ^ v860 ^ v859 ^ v858 ^ v857 ^ v856 ^ v855 ^ v854 ^ v853 ^ v852 ^ v851 ^ v850 ^ v849 ^ v848 ^ v847 ^ v846 ^ v845 ^ v844 ^ v843 ^ v842 ^ v841 ^ v840 ^ v839 ^ v838 ^ v837 ^ v836 ^ v835 ^ v834 ^ v833 ^ v832 ^ v831 ^ v830 ^ v829 ^ v828 ^ v827 ^ v826 ^ v825 ^ v824 ^ v823 ^ v822 ^ v821 ^ v820 ^ v819 ^ v818 ^ v817 ^ v816 ^ v815 ^ v814 ^ v813 ^ v812;
  return v752 ^ v811 ^ v810 ^ v809 ^ v808 ^ v807 ^ v806 ^ v805 ^ v804 ^ v803 ^ v802 ^ v801 ^ v800 ^ v799 ^ v798 ^ v797 ^ v796 ^ v795 ^ v794 ^ v793 ^ v792 ^ v791 ^ v790 ^ v789 ^ v788 ^ v787 ^ v786 ^ v785 ^ v784 ^ v783 ^ v782 ^ v781 ^ v780 ^ v779 ^ v778 ^ v777 ^ v776 ^ v775 ^ v774 ^ v773 ^ v772 ^ v771 ^ v743 ^ v746 ^ v748;
}

uint64_t sub_2428121D4(uint64_t a1)
{
  CMMsl::WifiScanEntry **v1;
  CMMsl::WifiScanEntry **v2;
  uint64_t v3;
  CMMsl::WifiScanEntry *v4;

  if (!a1)
    return 0;
  v1 = *(CMMsl::WifiScanEntry ***)(a1 + 8);
  v2 = *(CMMsl::WifiScanEntry ***)(a1 + 16);
  if (v1 == v2)
    return 0;
  v3 = 0;
  do
  {
    v4 = *v1++;
    v3 ^= CMMsl::WifiScanEntry::hash_value(v4);
  }
  while (v1 != v2);
  return v3;
}

uint64_t sub_242812228(uint64_t a1)
{
  CMMsl::WorkoutPriorInformation **v1;
  CMMsl::WorkoutPriorInformation **v2;
  uint64_t v3;
  CMMsl::WorkoutPriorInformation *v4;

  if (!a1)
    return 0;
  v1 = *(CMMsl::WorkoutPriorInformation ***)(a1 + 8);
  v2 = *(CMMsl::WorkoutPriorInformation ***)(a1 + 16);
  if (v1 == v2)
    return 0;
  v3 = 0;
  do
  {
    v4 = *v1++;
    v3 ^= CMMsl::WorkoutPriorInformation::hash_value(v4);
  }
  while (v1 != v2);
  return v3;
}

_QWORD *CMMsl::Item::makeGyroBiasCorrection(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[146])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135DD38;
    *(_QWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 20) = 0;
    this = (_QWORD *)v1[146];
    v1[146] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeGyroBiasConstraints(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[145])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135DD00;
    *(_DWORD *)(v2 + 116) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    this = (_QWORD *)v1[145];
    v1[145] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeGravityCorrection(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[142])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135DC58;
    *(_QWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 20) = 0;
    this = (_QWORD *)v1[142];
    v1[142] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeGravityConstraints(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[141])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135DC20;
    *(_DWORD *)(v2 + 32) = 0;
    this = (_QWORD *)v1[141];
    v1[141] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeCompassCorrection(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[85])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_25135CF38;
    v2[1] = 0;
    this = (_QWORD *)v1[85];
    v1[85] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeCompassConstraints(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[84])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135CF00;
    *(_DWORD *)(v2 + 124) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    this = (_QWORD *)v1[84];
    v1[84] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeCourseCorrection(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[91])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_25135D088;
    v2[1] = 0;
    this = (_QWORD *)v1[91];
    v1[91] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeCourseConstraints(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[90])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135D050;
    *(_DWORD *)(v2 + 20) = 0;
    this = (_QWORD *)v1[90];
    v1[90] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeIntersiloNSCodingData(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[180])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_25135E4E0;
    v2[1] = 0;
    v2[2] = 0;
    v2[3] = 0;
    this = (_QWORD *)v1[180];
    v1[180] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeDeviceMotionCovariance(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[95])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135D168;
    *(_DWORD *)(v2 + 64) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    this = (_QWORD *)v1[95];
    v1[95] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeAccessoryAccel(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[11])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135BED0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 32) = 0;
    this = (_QWORD *)v1[11];
    v1[11] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeAccessoryGyro(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[18])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135C058;
    *(_QWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 36) = 0;
    this = (_QWORD *)v1[18];
    v1[18] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeAccessoryProx(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[27])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135C250;
    *(_DWORD *)(v2 + 56) = 0;
    this = (_QWORD *)v1[27];
    v1[27] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeWorkoutRecorderAccel(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[431])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_251361EA0;
    v2[1] = 0;
    this = (_QWORD *)v1[431];
    v1[431] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeWorkoutRecorderBodyMetrics(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[434])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_251361F48;
    v2[1] = 0;
    this = (_QWORD *)v1[434];
    v1[434] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeWorkoutRecorderElevation(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[436])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_251361FB8;
    v2[1] = 0;
    this = (_QWORD *)v1[436];
    v1[436] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeWorkoutRecorderHeartRate(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[440])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_251362098;
    v2[1] = 0;
    this = (_QWORD *)v1[440];
    v1[440] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeWorkoutRecorderRotationRate(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[444])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_251362178;
    v2[1] = 0;
    this = (_QWORD *)v1[444];
    v1[444] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeWorkoutRecorderOdometer(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[442])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_251362108;
    v2[1] = 0;
    this = (_QWORD *)v1[442];
    v1[442] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeWorkoutRecorderWorkoutEvent(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[448])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_251362258;
    v2[1] = 0;
    this = (_QWORD *)v1[448];
    v1[448] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeVo2MaxInput(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[415])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_2513617D8;
    *(_DWORD *)(v2 + 88) = 0;
    this = (_QWORD *)v1[415];
    v1[415] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeBraveHeartDeviceMotion(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[68])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_25135CAA0;
    v2[1] = 0;
    v2[2] = 0;
    v2[3] = 0;
    this = (_QWORD *)v1[68];
    v1[68] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeBraveHeartNatalieData(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[69])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135CAD8;
    *(_DWORD *)(v2 + 44) = 0;
    this = (_QWORD *)v1[69];
    v1[69] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeBraveHeartVO2MaxInput(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[70])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_25135CB10;
    v2[1] = 0;
    v2[2] = 0;
    v2[3] = 0;
    this = (_QWORD *)v1[70];
    v1[70] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeBraveHeartAccel(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[67])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_25135CA68;
    v2[1] = 0;
    v2[2] = 0;
    v2[3] = 0;
    this = (_QWORD *)v1[67];
    v1[67] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeBraveHeartWorkoutEvent(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[71])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135CB48;
    *(_DWORD *)(v2 + 24) = 0;
    this = (_QWORD *)v1[71];
    v1[71] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeWorkoutRecorderHealthKitInfo(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[439])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251362060;
    *(_DWORD *)(v2 + 28) = 0;
    this = (_QWORD *)v1[439];
    v1[439] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePearlAttitude(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[288])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135FD60;
    *(_DWORD *)(v2 + 124) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_QWORD *)(v2 + 72) = 0;
    this = (_QWORD *)v1[288];
    v1[288] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeRotationRate(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[340])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251360818;
    *(_DWORD *)(v2 + 28) = 0;
    this = (_QWORD *)v1[340];
    v1[340] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeWorkoutRecorderWatchOrientationSettings(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[446])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_2513621E8;
    v2[1] = 0;
    this = (_QWORD *)v1[446];
    v1[446] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeWatchOnWristState(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[425])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251361CE0;
    *(_DWORD *)(v2 + 40) = 0;
    this = (_QWORD *)v1[425];
    v1[425] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeCatherineHealthKitData(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[76])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135CCD0;
    *(_DWORD *)(v2 + 36) = 0;
    this = (_QWORD *)v1[76];
    v1[76] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeWifiScanResults(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[427])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_251361D88;
    v2[1] = 0;
    v2[2] = 0;
    v2[3] = 0;
    this = (_QWORD *)v1[427];
    v1[427] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeInEarTransitionEntry(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[176])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135E400;
    *(_DWORD *)(v2 + 124) = 0;
    *(_DWORD *)(v2 + 132) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    this = (_QWORD *)v1[176];
    v1[176] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeInEarSession(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[174])
  {
    v1 = this;
    v2 = operator new();
    *(_DWORD *)(v2 + 28) = 0;
    *(_DWORD *)(v2 + 32) = 0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)v2 = &off_25135E390;
    this = (_QWORD *)v1[174];
    v1[174] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeInEarBaseline(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[169])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135E278;
    *(_DWORD *)(v2 + 52) = 0;
    *(_DWORD *)(v2 + 60) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_QWORD *)(v2 + 40) = 0;
    this = (_QWORD *)v1[169];
    v1[169] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeAccessoryProxSensorDrop(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[28])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135C288;
    *(_DWORD *)(v2 + 104) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_QWORD *)(v2 + 72) = 0;
    this = (_QWORD *)v1[28];
    v1[28] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeAccessoryProxTempComp(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[29])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135C2C0;
    *(_DWORD *)(v2 + 44) = 0;
    this = (_QWORD *)v1[29];
    v1[29] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeAccessoryWake(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[34])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135C3D8;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 24) = 0;
    *(_DWORD *)(v2 + 52) = 0;
    this = (_QWORD *)v1[34];
    v1[34] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeFacePose(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[114])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135D5C8;
    *(_DWORD *)(v2 + 136) = 0;
    this = (_QWORD *)v1[114];
    v1[114] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeWorkoutRecorderWifiScanResults(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[447])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_251362220;
    v2[1] = 0;
    this = (_QWORD *)v1[447];
    v1[447] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeWorkoutRecorderPressure(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[443])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_251362140;
    v2[1] = 0;
    this = (_QWORD *)v1[443];
    v1[443] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeInEarAdditionalState(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[168])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135E240;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 24) = 0;
    *(_DWORD *)(v2 + 36) = 0;
    this = (_QWORD *)v1[168];
    v1[168] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeAccessoryDeviceMotion(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[16])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135BFE8;
    *(_QWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 24) = 0;
    this = (_QWORD *)v1[16];
    v1[16] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeVisionCompassBias(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[410])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251361A08;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 24) = 0;
    *(_DWORD *)(v2 + 76) = 0;
    this = (_QWORD *)v1[410];
    v1[410] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeArSessionState(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[44])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_25135BCD8;
    v2[1] = 0;
    this = (_QWORD *)v1[44];
    v1[44] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeVioEstimation(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[407])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251361730;
    *(_QWORD *)(v2 + 336) = 0;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_OWORD *)(v2 + 120) = 0u;
    *(_OWORD *)(v2 + 136) = 0u;
    *(_OWORD *)(v2 + 152) = 0u;
    *(_OWORD *)(v2 + 168) = 0u;
    *(_OWORD *)(v2 + 184) = 0u;
    *(_OWORD *)(v2 + 200) = 0u;
    *(_OWORD *)(v2 + 216) = 0u;
    *(_OWORD *)(v2 + 232) = 0u;
    *(_OWORD *)(v2 + 248) = 0u;
    this = (_QWORD *)v1[407];
    v1[407] = v2;
    *(_OWORD *)(v2 + 8) = 0u;
    v2 += 8;
    *(_OWORD *)(v2 + 256) = 0u;
    *(_OWORD *)(v2 + 272) = 0u;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeLslHeadingEstimation(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[235])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135EF60;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_QWORD *)(v2 + 72) = 0;
    *(_QWORD *)(v2 + 184) = 0xFFFFFFFFLL;
    *(_DWORD *)(v2 + 192) = 0;
    this = (_QWORD *)v1[235];
    v1[235] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeFallSnippet(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[125])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)v2 = &off_25135D868;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_DWORD *)(v2 + 128) = 0;
    this = (_QWORD *)v1[125];
    v1[125] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeAccelerometerPace(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[10])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135BE98;
    *(_DWORD *)(v2 + 32) = 0;
    this = (_QWORD *)v1[10];
    v1[10] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeMovementStats(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[259])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135F628;
    *(_DWORD *)(v2 + 12) = 0;
    this = (_QWORD *)v1[259];
    v1[259] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeStepCountEntry(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[379])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_2513612D0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 56) = 0;
    *(_QWORD *)(v2 + 72) = 0;
    *(_DWORD *)(v2 + 152) = 0;
    this = (_QWORD *)v1[379];
    v1[379] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeMobilityBoutMetrics(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[245])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_25135F318;
    v2[23] = 0;
    this = (_QWORD *)v1[245];
    v1[245] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeCoprocessorReplyGaitMetrics(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[89])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135D018;
    *(_DWORD *)(v2 + 92) = 0;
    this = (_QWORD *)v1[89];
    v1[89] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeVioPose(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[408])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251361768;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 24) = 0;
    *(_DWORD *)(v2 + 112) = 0;
    this = (_QWORD *)v1[408];
    v1[408] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeSignalEnvironment(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[356])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_251360D20;
    v2[1] = 0;
    this = (_QWORD *)v1[356];
    v1[356] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeVioReplayPose(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[409])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_2513617A0;
    *(_DWORD *)(v2 + 64) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    this = (_QWORD *)v1[409];
    v1[409] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeVisualStateMeasurement(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[414])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251361AE8;
    *(_DWORD *)(v2 + 96) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_QWORD *)(v2 + 72) = 0;
    this = (_QWORD *)v1[414];
    v1[414] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeKappaTriggerDebug(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[219])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135EDA0;
    *(_DWORD *)(v2 + 120) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_QWORD *)(v2 + 72) = 0;
    this = (_QWORD *)v1[219];
    v1[219] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeKappaDirectionOfTravel(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[194])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135E828;
    *(_DWORD *)(v2 + 144) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    this = (_QWORD *)v1[194];
    v1[194] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeHgAccel(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[166])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_25135E1D0;
    v2[1] = 0;
    this = (_QWORD *)v1[166];
    v1[166] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeKappaSteps(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[215])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135ECC0;
    *(_DWORD *)(v2 + 32) = 0;
    this = (_QWORD *)v1[215];
    v1[215] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeUserInteraction(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[397])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_251360D58;
    v2[2] = 0;
    this = (_QWORD *)v1[397];
    v1[397] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeKappaRoads(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[210])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135EBA8;
    *(_DWORD *)(v2 + 32) = 0;
    this = (_QWORD *)v1[210];
    v1[210] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeUserStudyEvent(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[398])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_2513616F8;
    *(_QWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 24) = 0;
    this = (_QWORD *)v1[398];
    v1[398] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeAuxiliaryDeviceMotion(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[47])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135C5D0;
    *(_DWORD *)(v2 + 152) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_QWORD *)(v2 + 120) = 0;
    this = (_QWORD *)v1[47];
    v1[47] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeTempestPoCAuxiliaryDeviceMotion(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[391])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251361570;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 24) = 0;
    *(_QWORD *)(v2 + 80) = 0;
    *(_DWORD *)(v2 + 104) = 0;
    this = (_QWORD *)v1[391];
    v1[391] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeAudioAccessoryDeviceMotion(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[46])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135C598;
    *(_QWORD *)(v2 + 72) = 0;
    *(_DWORD *)(v2 + 108) = 0;
    *(_DWORD *)(v2 + 116) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    this = (_QWORD *)v1[46];
    v1[46] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeTempestPoCListenerOrientation(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[392])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_2513615A8;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 24) = 0;
    *(_DWORD *)(v2 + 96) = 0;
    this = (_QWORD *)v1[392];
    v1[392] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeWorkoutRecorderAccel800(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[432])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_251361ED8;
    v2[1] = 0;
    this = (_QWORD *)v1[432];
    v1[432] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeAlsData(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[37])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135BBC0;
    *(_DWORD *)(v2 + 12) = 0;
    this = (_QWORD *)v1[37];
    v1[37] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeWorkoutRecorderALSData(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[430])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_251361E68;
    v2[1] = 0;
    this = (_QWORD *)v1[430];
    v1[430] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeVisualLocalization(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[411])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251361A40;
    *(_DWORD *)(v2 + 100) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    this = (_QWORD *)v1[411];
    v1[411] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeGyroFactoryCalibrationData(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[155])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135DF30;
    *(_DWORD *)(v2 + 24) = 0;
    this = (_QWORD *)v1[155];
    v1[155] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeSpl(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[367])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251361068;
    *(_DWORD *)(v2 + 20) = 0;
    this = (_QWORD *)v1[367];
    v1[367] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeFrequencyResponse(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[131])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135D9F0;
    *(_DWORD *)(v2 + 64) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    this = (_QWORD *)v1[131];
    v1[131] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeEmergencyState(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[109])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135D478;
    *(_DWORD *)(v2 + 12) = 0;
    this = (_QWORD *)v1[109];
    v1[109] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeAccel800(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[4])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_25135BD48;
    v2[1] = 0;
    this = (_QWORD *)v1[4];
    v1[4] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeMotionLocation(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[253])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135F4D8;
    *(_DWORD *)(v2 + 220) = 0;
    this = (_QWORD *)v1[253];
    v1[253] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeMotionActivity(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[248])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135F3C0;
    *(_DWORD *)(v2 + 116) = 0;
    this = (_QWORD *)v1[248];
    v1[248] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeBioMotionPose(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[62])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135C950;
    *(_DWORD *)(v2 + 144) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_QWORD *)(v2 + 120) = 0;
    this = (_QWORD *)v1[62];
    v1[62] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeKappaTrigger(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[217])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135ED30;
    *(_DWORD *)(v2 + 212) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_QWORD *)(v2 + 72) = 0;
    this = (_QWORD *)v1[217];
    v1[217] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeRelDMInSystemConfig(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[333])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251360690;
    *(_QWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 24) = 0;
    this = (_QWORD *)v1[333];
    v1[333] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeJointLinkModelPose(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[183])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_25135E588;
    v2[1] = 0;
    this = (_QWORD *)v1[183];
    v1[183] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeConstrainedIntegratorPose(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[88])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_25135CFE0;
    v2[1] = 0;
    this = (_QWORD *)v1[88];
    v1[88] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeGyroCalibrationSample(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[151])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135DE50;
    *(_DWORD *)(v2 + 24) = 0;
    this = (_QWORD *)v1[151];
    v1[151] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeGyroCalibrationSampleNonlinear(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[152])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135DE88;
    *(_QWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 24) = 0;
    this = (_QWORD *)v1[152];
    v1[152] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeGyroCalibrationDataNonlinearNonFactory(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[150])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_25135DE18;
    v2[1] = 0;
    v2[2] = 0;
    v2[3] = 0;
    this = (_QWORD *)v1[150];
    v1[150] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeGyroCalibrationDataFactory(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[149])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_25135DDE0;
    v2[1] = 0;
    v2[2] = 0;
    v2[3] = 0;
    this = (_QWORD *)v1[149];
    v1[149] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeBioMotionClassification(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[59])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135C8A8;
    *(_DWORD *)(v2 + 48) = 0;
    this = (_QWORD *)v1[59];
    v1[59] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeFusedBioMotionClassification(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[132])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_25135DA28;
    v2[1] = 0;
    this = (_QWORD *)v1[132];
    v1[132] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeModelBasedBioMotionClassification(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[247])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_25135F388;
    v2[1] = 0;
    this = (_QWORD *)v1[247];
    v1[247] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeMLBasedBioMotionClassification(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[236])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_25135F120;
    v2[1] = 0;
    this = (_QWORD *)v1[236];
    v1[236] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePose(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[304])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_2513600E0;
    *(_DWORD *)(v2 + 64) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    this = (_QWORD *)v1[304];
    v1[304] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePoseState(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[305])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251360118;
    *(_DWORD *)(v2 + 44) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    this = (_QWORD *)v1[305];
    v1[305] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeBioMotionPredictedPose(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[63])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135C988;
    *(_QWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 28) = 0;
    this = (_QWORD *)v1[63];
    v1[63] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeJointLinkModelPredictedPose(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[184])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_25135E5C0;
    v2[1] = 0;
    this = (_QWORD *)v1[184];
    v1[184] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeConstrainedIntegratorModelPredictedPose(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[87])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_25135CFA8;
    v2[1] = 0;
    this = (_QWORD *)v1[87];
    v1[87] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePressureCompensated(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[318])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_2513603F0;
    v2[1] = 0;
    this = (_QWORD *)v1[318];
    v1[318] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeVo2MaxOutput(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[416])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251361848;
    *(_DWORD *)(v2 + 72) = 0;
    this = (_QWORD *)v1[416];
    v1[416] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeMagneticAccessoryType1(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[238])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135F190;
    *(_QWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 24) = 0;
    this = (_QWORD *)v1[238];
    v1[238] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeMagneticAccessoryType2(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[239])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135F1C8;
    *(_DWORD *)(v2 + 12) = 0;
    this = (_QWORD *)v1[239];
    v1[239] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePressureCalibration(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[317])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_2513603B8;
    *(_DWORD *)(v2 + 32) = 0;
    this = (_QWORD *)v1[317];
    v1[317] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeWorkoutRecorderMagnetometer(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[441])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_2513620D0;
    v2[1] = 0;
    this = (_QWORD *)v1[441];
    v1[441] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeWorkoutRecorderCompassCalibration(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[435])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_251361F80;
    v2[1] = 0;
    this = (_QWORD *)v1[435];
    v1[435] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeRawAudio(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[332])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_251360658;
    v2[1] = 0;
    v2[2] = 0;
    v2[3] = 0;
    this = (_QWORD *)v1[332];
    v1[332] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeCV3DPredictedPose(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[73])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135CBB8;
    *(_DWORD *)(v2 + 72) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    this = (_QWORD *)v1[73];
    v1[73] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeBioMotionLinkLengthFitParameters(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[60])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135C8E0;
    *(_DWORD *)(v2 + 144) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    this = (_QWORD *)v1[60];
    v1[60] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeBioMotionOnlineLinkLengthUpdate(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[61])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135C918;
    *(_DWORD *)(v2 + 20) = 0;
    this = (_QWORD *)v1[61];
    v1[61] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeOdtPose(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[266])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135F740;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 24) = 0;
    *(_DWORD *)(v2 + 40) = 0;
    this = (_QWORD *)v1[266];
    v1[266] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePencilTipForce(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[299])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135FFC8;
    *(_DWORD *)(v2 + 24) = 0;
    this = (_QWORD *)v1[299];
    v1[299] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePencilTouch(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[300])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251360000;
    *(_DWORD *)(v2 + 88) = 0;
    this = (_QWORD *)v1[300];
    v1[300] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeAveragedALSData(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[48])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135C608;
    *(_DWORD *)(v2 + 20) = 0;
    this = (_QWORD *)v1[48];
    v1[48] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeTimestamp(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[393])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_2513615E0;
    v2[2] = 0;
    this = (_QWORD *)v1[393];
    v1[393] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeAppleCV3DSLAMState(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[43])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_25135C560;
    v2[1] = 0;
    this = (_QWORD *)v1[43];
    v1[43] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeBioMotionAnchorPose(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[58])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_25135C870;
    v2[1] = 0;
    this = (_QWORD *)v1[58];
    v1[58] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeBioMotionPropagatedAnchor(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[64])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_25135C9C0;
    v2[1] = 0;
    this = (_QWORD *)v1[64];
    v1[64] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeWalkingSteadinessClassification(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[420])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251361BC8;
    *(_QWORD *)(v2 + 64) = 0;
    *(_DWORD *)(v2 + 244) = 0;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_OWORD *)(v2 + 120) = 0u;
    *(_OWORD *)(v2 + 136) = 0u;
    *(_OWORD *)(v2 + 152) = 0u;
    *(_QWORD *)(v2 + 168) = 0;
    this = (_QWORD *)v1[420];
    v1[420] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeSteadinessModelResult(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[375])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_2513611F0;
    *(_DWORD *)(v2 + 52) = 0;
    this = (_QWORD *)v1[375];
    v1[375] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeSteadinessEvent(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[370])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_2513610D8;
    *(_DWORD *)(v2 + 60) = 0;
    this = (_QWORD *)v1[370];
    v1[370] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeSteadinessModelGaitBaselineFeatures(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[373])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251361180;
    *(_DWORD *)(v2 + 88) = 0;
    this = (_QWORD *)v1[373];
    v1[373] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeSteadinessModelContinuousWalkingFeatures(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[372])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251361148;
    *(_DWORD *)(v2 + 176) = 0;
    this = (_QWORD *)v1[372];
    v1[372] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeSteadinessModelTemporalDispersionFeatures(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[376])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251361228;
    *(_DWORD *)(v2 + 40) = 0;
    this = (_QWORD *)v1[376];
    v1[376] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeSteadinessModelTemporalEntropyFeatures(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[377])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251361260;
    *(_DWORD *)(v2 + 216) = 0;
    this = (_QWORD *)v1[377];
    v1[377] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeSteadinessModelBalanceFeatures(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[371])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251361110;
    *(_DWORD *)(v2 + 40) = 0;
    this = (_QWORD *)v1[371];
    v1[371] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeMagnetometerReset(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[242])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135F270;
    *(_DWORD *)(v2 + 44) = 0;
    this = (_QWORD *)v1[242];
    v1[242] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeWorkoutRecorderWatchOnWristStatus(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[445])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_2513621B0;
    v2[1] = 0;
    this = (_QWORD *)v1[445];
    v1[445] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeLiftToWakeOnHeadStatus(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[230])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135F008;
    *(_DWORD *)(v2 + 28) = 0;
    this = (_QWORD *)v1[230];
    v1[230] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeAccessoryMagnetometer(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[24])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135C1A8;
    *(_QWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 32) = 0;
    this = (_QWORD *)v1[24];
    v1[24] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeStepCountEntryAddition(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[380])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251361308;
    *(_DWORD *)(v2 + 72) = 0;
    this = (_QWORD *)v1[380];
    v1[380] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeStepDistanceFusionResult(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[381])
  {
    v1 = this;
    v2 = operator new();
    *(_DWORD *)(v2 + 100) = 0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)v2 = &off_251361340;
    this = (_QWORD *)v1[381];
    v1[381] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeSkeleton3D(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[363])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_251360F50;
    v2[1] = 0;
    v2[2] = 0;
    v2[3] = 0;
    this = (_QWORD *)v1[363];
    v1[363] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeCvWatchCalories(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[92])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135CC28;
    *(_DWORD *)(v2 + 28) = 0;
    this = (_QWORD *)v1[92];
    v1[92] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeFaceBlendShapeCoefficientsSample(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[111])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135D520;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 24) = 0;
    *(_DWORD *)(v2 + 48) = 0;
    this = (_QWORD *)v1[111];
    v1[111] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeBatteryStatus(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[57])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135C800;
    *(_DWORD *)(v2 + 28) = 0;
    this = (_QWORD *)v1[57];
    v1[57] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeLockScreenStatus(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[234])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135F0E8;
    *(_DWORD *)(v2 + 12) = 0;
    this = (_QWORD *)v1[234];
    v1[234] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeBatterySaverModeStatus(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[56])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135C7C8;
    *(_DWORD *)(v2 + 12) = 0;
    this = (_QWORD *)v1[56];
    v1[56] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePowerManagementUserActivity(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[308])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_2513601C0;
    *(_DWORD *)(v2 + 16) = 0;
    this = (_QWORD *)v1[308];
    v1[308] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeFocusModes(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[130])
  {
    v1 = this;
    v2 = operator new();
    *(_DWORD *)(v2 + 48) = 0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)v2 = &off_25135D9B8;
    this = (_QWORD *)v1[130];
    v1[130] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeDisplayStatus(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[98])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135D210;
    *(_DWORD *)(v2 + 12) = 0;
    this = (_QWORD *)v1[98];
    v1[98] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeAPSleep(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[1])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_25135BC30;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeAPWake(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[2])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_25135BC68;
    v2[1] = 0;
    this = (_QWORD *)v1[2];
    v1[2] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeAltimeterKF(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[40])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135C4B8;
    *(_DWORD *)(v2 + 64) = 0;
    this = (_QWORD *)v1[40];
    v1[40] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeLiftToWakeState(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[231])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135F040;
    *(_DWORD *)(v2 + 28) = 0;
    this = (_QWORD *)v1[231];
    v1[231] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeViewObstructedState(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[406])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_2513619D0;
    *(_DWORD *)(v2 + 84) = 0;
    this = (_QWORD *)v1[406];
    v1[406] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeRunningFormMetrics(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[343])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_2513608C0;
    v2[28] = 0;
    this = (_QWORD *)v1[343];
    v1[343] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeWorkoutSessionPriors(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[450])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_2513622C8;
    v2[1] = 0;
    v2[2] = 0;
    v2[3] = 0;
    this = (_QWORD *)v1[450];
    v1[450] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeWorkoutRecorderWorkoutSessionPriors(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[449])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_251362290;
    v2[1] = 0;
    this = (_QWORD *)v1[449];
    v1[449] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeArkitWorldPose(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[45])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135BCA0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 24) = 0;
    *(_DWORD *)(v2 + 40) = 0;
    *(_DWORD *)(v2 + 56) = 0;
    this = (_QWORD *)v1[45];
    v1[45] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePdrImpulse(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[281])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135FAF8;
    *(_DWORD *)(v2 + 20) = 0;
    this = (_QWORD *)v1[281];
    v1[281] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePocketDetectionPacket(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[303])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_2513600A8;
    *(_DWORD *)(v2 + 84) = 0;
    this = (_QWORD *)v1[303];
    v1[303] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeLiftToWakeFeaturesNeo(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[229])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135EFD0;
    *(_DWORD *)(v2 + 40) = 0;
    this = (_QWORD *)v1[229];
    v1[229] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeLiftToWakeStatusNeo(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[232])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135F078;
    *(_DWORD *)(v2 + 64) = 0;
    this = (_QWORD *)v1[232];
    v1[232] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeRunningPower(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[344])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_2513608F8;
    *(_DWORD *)(v2 + 128) = 0;
    this = (_QWORD *)v1[344];
    v1[344] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeBasebandCompassCoex(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[51])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135C6B0;
    *(_DWORD *)(v2 + 28) = 0;
    this = (_QWORD *)v1[51];
    v1[51] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeBasebandCompassCoexConstraints(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[52])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135C6E8;
    *(_DWORD *)(v2 + 48) = 0;
    this = (_QWORD *)v1[52];
    v1[52] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeMotionContextActivity(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[250])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_25135F430;
    v2[1] = 0;
    v2[3] = 0;
    this = (_QWORD *)v1[250];
    v1[250] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePdrAlgType(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[269])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_25135F858;
    v2[1] = 0;
    this = (_QWORD *)v1[269];
    v1[269] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeAccelTNBFrame(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[9])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135BE60;
    *(_DWORD *)(v2 + 116) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_QWORD *)(v2 + 72) = 0;
    this = (_QWORD *)v1[9];
    v1[9] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeDotEstimatorWithTNB(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[104])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135D280;
    *(_DWORD *)(v2 + 204) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_OWORD *)(v2 + 120) = 0u;
    *(_OWORD *)(v2 + 136) = 0u;
    *(_OWORD *)(v2 + 152) = 0u;
    *(_OWORD *)(v2 + 168) = 0u;
    this = (_QWORD *)v1[104];
    v1[104] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePdrMLModelOutput(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[282])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135FD28;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 24) = 0;
    *(_DWORD *)(v2 + 40) = 0;
    this = (_QWORD *)v1[282];
    v1[282] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeGaitEventsModelOutput(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[136])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135DB08;
    *(_DWORD *)(v2 + 88) = 0;
    this = (_QWORD *)v1[136];
    v1[136] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeGaitEventsStrideAggregation(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[137])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135DB40;
    *(_DWORD *)(v2 + 48) = 0;
    this = (_QWORD *)v1[137];
    v1[137] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeGaitEventsHKResult(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[135])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135DAD0;
    *(_DWORD *)(v2 + 76) = 0;
    this = (_QWORD *)v1[135];
    v1[135] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeFaceCovered(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[112])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135D558;
    *(_DWORD *)(v2 + 20) = 0;
    this = (_QWORD *)v1[112];
    v1[112] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeWorkoutRecorderAveragedALSData(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[433])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_251361F10;
    v2[1] = 0;
    this = (_QWORD *)v1[433];
    v1[433] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeStrideCalEntry(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[386])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251361458;
    *(_DWORD *)(v2 + 92) = 0;
    this = (_QWORD *)v1[386];
    v1[386] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeRunningSpeedKFResult(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[346])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251360968;
    *(_DWORD *)(v2 + 188) = 0;
    this = (_QWORD *)v1[346];
    v1[346] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeProxPDP(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[327])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251360620;
    *(_DWORD *)(v2 + 48) = 0;
    this = (_QWORD *)v1[327];
    v1[327] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeKeyboardMotionFeatures(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[224])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135EEB8;
    *(_DWORD *)(v2 + 28) = 0;
    this = (_QWORD *)v1[224];
    v1[224] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeKeyboardMotionState(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[225])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135EEF0;
    *(_DWORD *)(v2 + 20) = 0;
    this = (_QWORD *)v1[225];
    v1[225] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeAlsPhone(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[38])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135BBF8;
    *(_DWORD *)(v2 + 20) = 0;
    this = (_QWORD *)v1[38];
    v1[38] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeKeyboardKeyPress(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[223])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135EE80;
    *(_DWORD *)(v2 + 20) = 0;
    this = (_QWORD *)v1[223];
    v1[223] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeWakeGestureNotification(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[417])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251361B20;
    *(_DWORD *)(v2 + 44) = 0;
    this = (_QWORD *)v1[417];
    v1[417] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeProxBaselineEstimatorState(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[325])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_2513605B0;
    *(_DWORD *)(v2 + 88) = 0;
    this = (_QWORD *)v1[325];
    v1[325] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeBaselineResetCheck(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[54])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135C758;
    *(_DWORD *)(v2 + 28) = 0;
    this = (_QWORD *)v1[54];
    v1[54] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeRhythmicGnssOperatorStatus(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[339])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_2513607E0;
    *(_DWORD *)(v2 + 24) = 0;
    this = (_QWORD *)v1[339];
    v1[339] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeKeyboardMotionTrackpad(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[226])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135EF28;
    *(_DWORD *)(v2 + 20) = 0;
    this = (_QWORD *)v1[226];
    v1[226] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeKeyboardAttached(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[222])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135EE48;
    *(_DWORD *)(v2 + 20) = 0;
    this = (_QWORD *)v1[222];
    v1[222] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeBacklightState(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[50])
  {
    v1 = this;
    v2 = operator new();
    *(_DWORD *)(v2 + 28) = 0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)v2 = &off_25135C678;
    this = (_QWORD *)v1[50];
    v1[50] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeBatchedLocationFromOdometer(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[55])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135C790;
    *(_QWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 20) = 0;
    this = (_QWORD *)v1[55];
    v1[55] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeHeartRateReference(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[165])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135E198;
    *(_DWORD *)(v2 + 32) = 0;
    this = (_QWORD *)v1[165];
    v1[165] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeSkeleton2D(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[362])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251360EE0;
    *(_QWORD *)(v2 + 24) = 0;
    *(_QWORD *)(v2 + 32) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_DWORD *)(v2 + 48) = 0;
    this = (_QWORD *)v1[362];
    v1[362] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeSkeleton3DRetargeted(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[365])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251360FF8;
    *(_QWORD *)(v2 + 24) = 0;
    *(_QWORD *)(v2 + 32) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_DWORD *)(v2 + 48) = 0;
    this = (_QWORD *)v1[365];
    v1[365] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeSkeleton3DLifted(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[364])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251360F88;
    *(_QWORD *)(v2 + 24) = 0;
    *(_QWORD *)(v2 + 32) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_DWORD *)(v2 + 48) = 0;
    this = (_QWORD *)v1[364];
    v1[364] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeFitnessMachineSample(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[129])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135D980;
    *(_DWORD *)(v2 + 112) = 0;
    this = (_QWORD *)v1[129];
    v1[129] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeWatchHeartRateData(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[424])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251361CA8;
    *(_QWORD *)(v2 + 24) = 0;
    *(_DWORD *)(v2 + 32) = 0;
    this = (_QWORD *)v1[424];
    v1[424] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeFacePoseSynchronized(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[115])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135D600;
    *(_QWORD *)(v2 + 24) = 0;
    *(_DWORD *)(v2 + 32) = 0;
    this = (_QWORD *)v1[115];
    v1[115] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeWatchActiveCalories(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[421])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251361C00;
    *(_DWORD *)(v2 + 28) = 0;
    this = (_QWORD *)v1[421];
    v1[421] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeWatchBasalCalories(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[422])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251361C38;
    *(_DWORD *)(v2 + 28) = 0;
    this = (_QWORD *)v1[422];
    v1[422] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeTrackRunData(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[395])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251361650;
    *(_DWORD *)(v2 + 40) = 0;
    this = (_QWORD *)v1[395];
    v1[395] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeGnssAvailabilityPredictorData(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[139])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135DBB0;
    *(_QWORD *)(v2 + 24) = 0;
    *(_DWORD *)(v2 + 32) = 0;
    this = (_QWORD *)v1[139];
    v1[139] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeGnssLeechLocationData(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[140])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135DBE8;
    *(_DWORD *)(v2 + 152) = 0;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_OWORD *)(v2 + 120) = 0u;
    *(_QWORD *)(v2 + 136) = 0;
    this = (_QWORD *)v1[140];
    v1[140] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeMapsRouteHintData(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[243])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135F2A8;
    *(_DWORD *)(v2 + 20) = 0;
    this = (_QWORD *)v1[243];
    v1[243] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeFitnessMachineData(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[128])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135D948;
    *(_DWORD *)(v2 + 176) = 0;
    this = (_QWORD *)v1[128];
    v1[128] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeWorkoutRecorderFitnessMachineData(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[438])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_251362028;
    v2[1] = 0;
    this = (_QWORD *)v1[438];
    v1[438] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeAccessoryActivityStateUpdate(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[14])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135BF78;
    *(_DWORD *)(v2 + 28) = 0;
    this = (_QWORD *)v1[14];
    v1[14] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePedestrianFenceExit(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[291])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_25135FE08;
    *(_QWORD *)((char *)v2 + 28) = 0xFFFFFFFFLL;
    this = (_QWORD *)v1[291];
    v1[291] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeInertialOdometry(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[177])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135E438;
    *(_DWORD *)(v2 + 68) = 0;
    this = (_QWORD *)v1[177];
    v1[177] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePhysicalEffortInput(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[301])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251360038;
    *(_DWORD *)(v2 + 28) = 0;
    this = (_QWORD *)v1[301];
    v1[301] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePhysicalEffortSample(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[302])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251360070;
    *(_DWORD *)(v2 + 44) = 0;
    this = (_QWORD *)v1[302];
    v1[302] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePedestrianCalorieModelDebugging(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[290])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135FDD0;
    *(_DWORD *)(v2 + 116) = 0;
    this = (_QWORD *)v1[290];
    v1[290] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeElevationThreshold(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[108])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135D440;
    *(_QWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 32) = 0;
    this = (_QWORD *)v1[108];
    v1[108] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeInitialHistoricalMeanSeaLevelPressure(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[178])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135E470;
    *(_DWORD *)(v2 + 88) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_QWORD *)(v2 + 72) = 0;
    this = (_QWORD *)v1[178];
    v1[178] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeWorkoutActivity(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[428])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251361DC0;
    *(_DWORD *)(v2 + 16) = 0;
    this = (_QWORD *)v1[428];
    v1[428] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePencilDeviceMotion(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[294])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135FEB0;
    *(_DWORD *)(v2 + 48) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    this = (_QWORD *)v1[294];
    v1[294] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePencilFusionResult(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[297])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135FF58;
    *(_DWORD *)(v2 + 76) = 0;
    this = (_QWORD *)v1[297];
    v1[297] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeHapticModuleState(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[159])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135E048;
    *(_DWORD *)(v2 + 20) = 0;
    this = (_QWORD *)v1[159];
    v1[159] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeSteadinessModelHarmonicFeatures(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[374])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_2513611B8;
    *(_DWORD *)(v2 + 248) = 0;
    this = (_QWORD *)v1[374];
    v1[374] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePencilFusionReplayResult(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[296])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135FF20;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 24) = 0;
    *(_QWORD *)(v2 + 48) = 0;
    *(_DWORD *)(v2 + 64) = 0;
    this = (_QWORD *)v1[296];
    v1[296] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeMobilitySmoothedGaitMetrics(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[246])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135F350;
    *(_DWORD *)(v2 + 40) = 0;
    this = (_QWORD *)v1[246];
    v1[246] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeWatchEnclosureMaterial(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[423])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251361C70;
    *(_DWORD *)(v2 + 24) = 0;
    this = (_QWORD *)v1[423];
    v1[423] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeAccessoryHeartRate(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[22])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135C138;
    *(_DWORD *)(v2 + 36) = 0;
    this = (_QWORD *)v1[22];
    v1[22] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeAccessoryPPG(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[26])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135C218;
    *(_DWORD *)(v2 + 224) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_OWORD *)(v2 + 120) = 0u;
    *(_OWORD *)(v2 + 136) = 0u;
    *(_OWORD *)(v2 + 152) = 0u;
    *(_OWORD *)(v2 + 168) = 0u;
    *(_OWORD *)(v2 + 184) = 0u;
    this = (_QWORD *)v1[26];
    v1[26] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeMotionLoiAltitudeData(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[254])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135F510;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    this = (_QWORD *)v1[254];
    v1[254] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeDisplacingState(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[97])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135D1D8;
    *(_DWORD *)(v2 + 20) = 0;
    this = (_QWORD *)v1[97];
    v1[97] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePostureJoint(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[306])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251360150;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_QWORD *)(v2 + 56) = 0;
    this = (_QWORD *)v1[306];
    v1[306] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePostureSkeleton(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[307])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_251360188;
    v2[1] = 0;
    v2[2] = 0;
    v2[3] = 0;
    this = (_QWORD *)v1[307];
    v1[307] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeHidShower(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[167])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135E010;
    *(_DWORD *)(v2 + 20) = 0;
    this = (_QWORD *)v1[167];
    v1[167] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeWorkoutRecorderFaceCovered(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[437])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_251361FF0;
    v2[1] = 0;
    this = (_QWORD *)v1[437];
    v1[437] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeStreamingHighFrequencyHeartRateData(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[384])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_2513613E8;
    v2[1] = 0;
    this = (_QWORD *)v1[384];
    v1[384] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeUltraFastAccel(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[396])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_2513616C0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_DWORD *)(v2 + 24) = 0;
    this = (_QWORD *)v1[396];
    v1[396] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeAccel(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[3])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135BD10;
    *(_DWORD *)(v2 + 32) = 0;
    this = (_QWORD *)v1[3];
    v1[3] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeAccelBatch(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[5])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135BD80;
    *(_DWORD *)(v2 + 32) = 0;
    this = (_QWORD *)v1[5];
    v1[5] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeAccelOscarEmu(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[8])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_25135BE28;
    v2[1] = 0;
    this = (_QWORD *)v1[8];
    v1[8] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeAccelGesture(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[6])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_25135BDB8;
    v2[1] = 0;
    this = (_QWORD *)v1[6];
    v1[6] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeGyro(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[143])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135DC90;
    *(_DWORD *)(v2 + 44) = 0;
    this = (_QWORD *)v1[143];
    v1[143] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeGyroOscarEmu(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[157])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135DFA0;
    *(_DWORD *)(v2 + 36) = 0;
    this = (_QWORD *)v1[157];
    v1[157] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeGyroTemperature(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[158])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135DFD8;
    *(_DWORD *)(v2 + 16) = 0;
    this = (_QWORD *)v1[158];
    v1[158] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeGyroBiasAndVariance(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[144])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135DCC8;
    *(_DWORD *)(v2 + 36) = 0;
    this = (_QWORD *)v1[144];
    v1[144] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeGyroBiasFit(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[148])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135DDA8;
    *(_DWORD *)(v2 + 60) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    this = (_QWORD *)v1[148];
    v1[148] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeGyroDt(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[154])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135DEF8;
    *(_DWORD *)(v2 + 12) = 0;
    this = (_QWORD *)v1[154];
    v1[154] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeMagnetometer(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[240])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135F200;
    *(_DWORD *)(v2 + 36) = 0;
    this = (_QWORD *)v1[240];
    v1[240] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeCompass(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[80])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135CE20;
    *(_DWORD *)(v2 + 68) = 0;
    this = (_QWORD *)v1[80];
    v1[80] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeCompassAlignment(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[81])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135CE58;
    *(_DWORD *)(v2 + 20) = 0;
    this = (_QWORD *)v1[81];
    v1[81] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeGyroCompass(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[153])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135DEC0;
    *(_DWORD *)(v2 + 60) = 0;
    this = (_QWORD *)v1[153];
    v1[153] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeCompassCalibration(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[82])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135CE90;
    *(_DWORD *)(v2 + 80) = 0;
    this = (_QWORD *)v1[82];
    v1[82] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePressure(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[316])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251360380;
    *(_DWORD *)(v2 + 24) = 0;
    this = (_QWORD *)v1[316];
    v1[316] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePressureOscarEmu(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[323])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_251360508;
    v2[1] = 0;
    this = (_QWORD *)v1[323];
    v1[323] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePressureFiltered(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[319])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_251360428;
    v2[1] = 0;
    this = (_QWORD *)v1[319];
    v1[319] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeProx(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[324])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251360578;
    *(_DWORD *)(v2 + 20) = 0;
    this = (_QWORD *)v1[324];
    v1[324] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeTouchOscarEmu(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[394])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251361618;
    *(_DWORD *)(v2 + 20) = 0;
    this = (_QWORD *)v1[394];
    v1[394] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeDeviceMotion(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[93])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135D0C0;
    *(_DWORD *)(v2 + 124) = 0;
    this = (_QWORD *)v1[93];
    v1[93] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeMotionStateUpdate(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[256])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_25135F580;
    v2[4] = 0;
    v2[24] = 0;
    this = (_QWORD *)v1[256];
    v1[256] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeAccelGps(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[7])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135BDF0;
    *(_DWORD *)(v2 + 28) = 0;
    this = (_QWORD *)v1[7];
    v1[7] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeGyroGps(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[156])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135DF68;
    *(_DWORD *)(v2 + 28) = 0;
    this = (_QWORD *)v1[156];
    v1[156] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePressureGps(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[322])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_2513604D0;
    v2[1] = 0;
    this = (_QWORD *)v1[322];
    v1[322] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeBTConnection(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[49])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135C640;
    *(_DWORD *)(v2 + 28) = 0;
    this = (_QWORD *)v1[49];
    v1[49] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeSessionOverride(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[355])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251360CE8;
    *(_DWORD *)(v2 + 20) = 0;
    this = (_QWORD *)v1[355];
    v1[355] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeLocationOscarEmu(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[233])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135F0B0;
    *(_DWORD *)(v2 + 100) = 0;
    this = (_QWORD *)v1[233];
    v1[233] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeMotionHint(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[252])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135F4A0;
    *(_DWORD *)(v2 + 24) = 0;
    this = (_QWORD *)v1[252];
    v1[252] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeEnhancedDeviceMotion(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[110])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135D4B0;
    *(_DWORD *)(v2 + 96) = 0;
    this = (_QWORD *)v1[110];
    v1[110] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeNonlinearBiasFit(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[263])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135F708;
    *(_DWORD *)(v2 + 180) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_OWORD *)(v2 + 120) = 0u;
    *(_OWORD *)(v2 + 136) = 0u;
    *(_OWORD *)(v2 + 152) = 0u;
    *(_QWORD *)(v2 + 168) = 0;
    this = (_QWORD *)v1[263];
    v1[263] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeNatalieData(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[262])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135F6D0;
    *(_DWORD *)(v2 + 68) = 0;
    this = (_QWORD *)v1[262];
    v1[262] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeBodyMetrics(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[66])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135CA30;
    *(_DWORD *)(v2 + 64) = 0;
    this = (_QWORD *)v1[66];
    v1[66] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeWorkoutEvent(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[429])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251361DF8;
    *(_DWORD *)(v2 + 64) = 0;
    this = (_QWORD *)v1[429];
    v1[429] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeOnsetHeartRateData(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[267])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135F7E8;
    *(_DWORD *)(v2 + 68) = 0;
    this = (_QWORD *)v1[267];
    v1[267] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeStreamingHeartRateData(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[383])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_2513613B0;
    v2[1] = 0;
    this = (_QWORD *)v1[383];
    v1[383] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeElevationChange(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[106])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135D3D0;
    *(_DWORD *)(v2 + 60) = 0;
    this = (_QWORD *)v1[106];
    v1[106] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeCoarseElevationChange(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[79])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135CDE8;
    *(_DWORD *)(v2 + 20) = 0;
    this = (_QWORD *)v1[79];
    v1[79] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeMotionGPSLocation(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[251])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135F468;
    *(_QWORD *)(v2 + 112) = 0;
    *(_DWORD *)(v2 + 180) = 0;
    this = (_QWORD *)v1[251];
    v1[251] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeMotionWifiLocation(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[258])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_25135F5F0;
    v2[1] = 0;
    this = (_QWORD *)v1[258];
    v1[258] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeStrideCalBin(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[385])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251361420;
    *(_DWORD *)(v2 + 40) = 0;
    this = (_QWORD *)v1[385];
    v1[385] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeCalorimetryPauseEvent(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[75])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135CC98;
    *(_DWORD *)(v2 + 12) = 0;
    this = (_QWORD *)v1[75];
    v1[75] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeOdometer(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[264])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135F778;
    *(_DWORD *)(v2 + 100) = 0;
    this = (_QWORD *)v1[264];
    v1[264] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeMetsInfo(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[244])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135F2E0;
    *(_DWORD *)(v2 + 28) = 0;
    this = (_QWORD *)v1[244];
    v1[244] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeFallStats(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[126])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_25135D8D8;
    v2[27] = 0;
    this = (_QWORD *)v1[126];
    v1[126] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeBasebandSpeed(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[53])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135C720;
    *(_DWORD *)(v2 + 32) = 0;
    this = (_QWORD *)v1[53];
    v1[53] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeVibrationEvent(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[402])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_2513618F0;
    *(_DWORD *)(v2 + 12) = 0;
    this = (_QWORD *)v1[402];
    v1[402] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeStepCadenceToStrideLengthBin(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[378])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251361298;
    *(_DWORD *)(v2 + 40) = 0;
    this = (_QWORD *)v1[378];
    v1[378] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeWatchOrientationSettings(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[426])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251361D18;
    *(_DWORD *)(v2 + 16) = 0;
    this = (_QWORD *)v1[426];
    v1[426] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeMotionWifiAssociation(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[257])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135F5B8;
    *(_DWORD *)(v2 + 12) = 0;
    this = (_QWORD *)v1[257];
    v1[257] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeMotionLoiData(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[255])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135F548;
    *(_DWORD *)(v2 + 84) = -1;
    *(_DWORD *)(v2 + 92) = 0;
    this = (_QWORD *)v1[255];
    v1[255] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeOdometerWithAltitude(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[265])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135F7B0;
    *(_QWORD *)(v2 + 72) = 0;
    *(_DWORD *)(v2 + 80) = 0;
    this = (_QWORD *)v1[265];
    v1[265] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePressureFilteredNoTemperature(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[321])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251360498;
    *(_DWORD *)(v2 + 20) = 0;
    this = (_QWORD *)v1[321];
    v1[321] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeInEarTransition(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[175])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_25135E3C8;
    v2[2] = 0;
    *(_QWORD *)((char *)v2 + 28) = 0;
    this = (_QWORD *)v1[175];
    v1[175] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeClefCalibration(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[78])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135CD08;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 24) = 0;
    *(_DWORD *)(v2 + 64) = 0;
    this = (_QWORD *)v1[78];
    v1[78] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeAirpodEvent(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[36])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135C448;
    *(_DWORD *)(v2 + 16) = 0;
    *(_DWORD *)(v2 + 24) = 0;
    this = (_QWORD *)v1[36];
    v1[36] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeInEarOptical(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[173])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135E358;
    *(_DWORD *)(v2 + 92) = 0;
    *(_DWORD *)(v2 + 108) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    this = (_QWORD *)v1[173];
    v1[173] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeInEarConstraints(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[171])
  {
    v1 = this;
    v2 = operator new();
    *(_DWORD *)(v2 + 48) = 0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)v2 = &off_25135E2E8;
    this = (_QWORD *)v1[171];
    v1[171] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeInEarOpenLid(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[172])
  {
    v1 = this;
    v2 = operator new();
    *(_DWORD *)(v2 + 44) = 0;
    *(_QWORD *)v2 = &off_25135E320;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 24) = 0;
    this = (_QWORD *)v1[172];
    v1[172] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeInEarBaselining(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[170])
  {
    v1 = this;
    v2 = operator new();
    *(_DWORD *)(v2 + 56) = 0;
    *(_QWORD *)v2 = &off_25135E2B0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 24) = 0;
    this = (_QWORD *)v1[170];
    v1[170] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeAccessoryConfig(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[15])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135BFB0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 24) = 0;
    *(_DWORD *)(v2 + 32) = 0;
    this = (_QWORD *)v1[15];
    v1[15] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeAccessoryAccelConfig(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[12])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_25135BF08;
    v2[1] = 0;
    v2[2] = 0;
    v2[3] = 0;
    this = (_QWORD *)v1[12];
    v1[12] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeAccessoryProximityConfig(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[30])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135C2F8;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_QWORD *)(v2 + 40) = 0;
    this = (_QWORD *)v1[30];
    v1[30] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeTapDetect(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[390])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251361538;
    *(_DWORD *)(v2 + 28) = -2;
    *(_OWORD *)(v2 + 52) = xmmword_242924C70;
    this = (_QWORD *)v1[390];
    v1[390] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeTapAccept(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[389])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251361500;
    *(_DWORD *)(v2 + 36) = -1;
    *(_DWORD *)(v2 + 44) = 0;
    this = (_QWORD *)v1[389];
    v1[389] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeDoubleTap(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[105])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135D398;
    *(_DWORD *)(v2 + 28) = -1;
    *(_DWORD *)(v2 + 48) = 0;
    this = (_QWORD *)v1[105];
    v1[105] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeAccessoryWakeDebug(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[35])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135C410;
    *(_DWORD *)(v2 + 192) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_OWORD *)(v2 + 120) = 0u;
    *(_OWORD *)(v2 + 136) = 0u;
    this = (_QWORD *)v1[35];
    v1[35] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeGeomagneticData(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[138])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135DB78;
    *(_DWORD *)(v2 + 52) = 0;
    this = (_QWORD *)v1[138];
    v1[138] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeRelativeDeviceMotionInternal(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[336])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251360738;
    *(_DWORD *)(v2 + 164) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    this = (_QWORD *)v1[336];
    v1[336] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeRelativeGravityCorrection(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[338])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_2513607A8;
    *(_QWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 20) = 0;
    this = (_QWORD *)v1[338];
    v1[338] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeRelativeGravityConstraints(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[337])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251360770;
    *(_DWORD *)(v2 + 48) = 0;
    this = (_QWORD *)v1[337];
    v1[337] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeZeroVelocityCorrection(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[451])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_251362300;
    v2[1] = 0;
    this = (_QWORD *)v1[451];
    v1[451] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeAnchorCorrection(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[41])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135C4F0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 24) = 0;
    this = (_QWORD *)v1[41];
    v1[41] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePredictedRelativeDeviceMotion(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[315])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251360348;
    *(_DWORD *)(v2 + 80) = 0;
    this = (_QWORD *)v1[315];
    v1[315] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeMovementStatsSignal(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[261])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135F698;
    *(_DWORD *)(v2 + 40) = 0;
    this = (_QWORD *)v1[261];
    v1[261] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeMovementStatsGravityProjection(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[260])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135F660;
    *(_DWORD *)(v2 + 76) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    this = (_QWORD *)v1[260];
    v1[260] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeBleedToZeroCorrection(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[65])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135C9F8;
    *(_QWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 20) = 0;
    this = (_QWORD *)v1[65];
    v1[65] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeAccessoryGyroConfig(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[20])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_25135C0C8;
    v2[1] = 0;
    this = (_QWORD *)v1[20];
    v1[20] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeAccessoryGyroGYTT(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[21])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_25135C100;
    v2[1] = 0;
    this = (_QWORD *)v1[21];
    v1[21] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeAccessoryGyroCachedBias(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[19])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_25135C090;
    v2[1] = 0;
    this = (_QWORD *)v1[19];
    v1[19] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeGaitCycleSegment(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[133])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135DA60;
    *(_DWORD *)(v2 + 100) = 0;
    this = (_QWORD *)v1[133];
    v1[133] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeGaitCycleSegmentationState(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[134])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135DA98;
    *(_DWORD *)(v2 + 116) = 0;
    this = (_QWORD *)v1[134];
    v1[134] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeCompassCalibrationAttempt(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[83])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135CEC8;
    *(_DWORD *)(v2 + 80) = 0;
    this = (_QWORD *)v1[83];
    v1[83] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeVisualLocalizationAttitudeCorrection(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[413])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_251361AB0;
    v2[1] = 0;
    this = (_QWORD *)v1[413];
    v1[413] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeVisualLocalizationAttitudeConstraints(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[412])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251361A78;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 24) = 0;
    *(_DWORD *)(v2 + 60) = 0;
    this = (_QWORD *)v1[412];
    v1[412] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeAccessoryMagnetometerConfig(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[25])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_25135C1E0;
    v2[1] = 0;
    this = (_QWORD *)v1[25];
    v1[25] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeFallDetectionReferee(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[119])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135D6E0;
    *(_DWORD *)(v2 + 52) = 0;
    this = (_QWORD *)v1[119];
    v1[119] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeFallDetectionReplay(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[120])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_25135D718;
    *(_QWORD *)((char *)v2 + 364) = 0;
    this = (_QWORD *)v1[120];
    v1[120] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeFallDetectionStateMachine(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[121])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_25135D750;
    *(_QWORD *)((char *)v2 + 156) = 0;
    this = (_QWORD *)v1[121];
    v1[121] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeFallDetectionDetector(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[117])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_25135D670;
    *(_QWORD *)((char *)v2 + 156) = 0;
    this = (_QWORD *)v1[117];
    v1[117] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeFallFalsePositiveSuppressionFeatures(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[124])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135D7F8;
    *(_DWORD *)(v2 + 80) = 0;
    this = (_QWORD *)v1[124];
    v1[124] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeAccessoryDeviceMotionConfig(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[17])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135C020;
    *(_DWORD *)(v2 + 44) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    this = (_QWORD *)v1[17];
    v1[17] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeRelativeDeviceMotionCorrelatedMotion(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[335])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251360700;
    *(_DWORD *)(v2 + 128) = 0;
    this = (_QWORD *)v1[335];
    v1[335] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeRelativeDeviceMotionComplexTransition(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[334])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_2513606C8;
    *(_QWORD *)((char *)v2 + 188) = 0;
    this = (_QWORD *)v1[334];
    v1[334] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeDeviceMotionAlwaysOn(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[94])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135D0F8;
    *(_QWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 20) = 0;
    this = (_QWORD *)v1[94];
    v1[94] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeFallDetectionGyroControllerReplay(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[118])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135D6A8;
    *(_DWORD *)(v2 + 20) = 0;
    this = (_QWORD *)v1[118];
    v1[118] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeWalkingDetectionResult(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[419])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251361B90;
    *(_DWORD *)(v2 + 60) = 0;
    this = (_QWORD *)v1[419];
    v1[419] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeAccessoryInEarStatus(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[23])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135C170;
    *(_DWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 16) = 0;
    this = (_QWORD *)v1[23];
    v1[23] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeFallDetectionWristStateReplay(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[122])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135D788;
    *(_DWORD *)(v2 + 396) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_OWORD *)(v2 + 120) = 0u;
    *(_OWORD *)(v2 + 136) = 0u;
    *(_OWORD *)(v2 + 152) = 0u;
    *(_OWORD *)(v2 + 168) = 0u;
    *(_OWORD *)(v2 + 184) = 0u;
    *(_OWORD *)(v2 + 200) = 0u;
    *(_QWORD *)(v2 + 216) = 0;
    this = (_QWORD *)v1[122];
    v1[122] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeGyroBiasEstimateError(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[147])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135DD70;
    *(_DWORD *)(v2 + 92) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_QWORD *)(v2 + 72) = 0;
    this = (_QWORD *)v1[147];
    v1[147] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeStepLikelihoodFeatures(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[382])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251361378;
    *(_DWORD *)(v2 + 96) = 0;
    this = (_QWORD *)v1[382];
    v1[382] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeFirstStepFeatures(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[127])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135D910;
    *(_DWORD *)(v2 + 44) = 0;
    this = (_QWORD *)v1[127];
    v1[127] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeAccessoryStepDetectorDebug(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[33])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135C3A0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 40) = 0;
    *(_DWORD *)(v2 + 60) = 0;
    this = (_QWORD *)v1[33];
    v1[33] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeSitStandDetectorFeatures(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[358])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251360E00;
    *(_DWORD *)(v2 + 44) = 0;
    this = (_QWORD *)v1[358];
    v1[358] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeSitStandDetectorTransitions(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[361])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_251360EA8;
    v2[2] = 0;
    this = (_QWORD *)v1[361];
    v1[361] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeSitStandDetectorPosteriorBufferStatsForSitToStand(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[359])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251360E38;
    *(_DWORD *)(v2 + 28) = 0;
    this = (_QWORD *)v1[359];
    v1[359] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeSitStandDetectorPosteriorBufferStatsForStandToSit(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[360])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251360E70;
    *(_DWORD *)(v2 + 28) = 0;
    this = (_QWORD *)v1[360];
    v1[360] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeSpatialEvent(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[366])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_2513610A0;
    v2[2] = 0;
    this = (_QWORD *)v1[366];
    v1[366] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeFallDistanceReplay(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[123])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135D7C0;
    *(_DWORD *)(v2 + 72) = 0;
    this = (_QWORD *)v1[123];
    v1[123] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeJitterBufferLevel(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[182])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135E550;
    *(_DWORD *)(v2 + 20) = 0;
    this = (_QWORD *)v1[182];
    v1[182] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePressureFiltered1HzLowPass(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[320])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251360460;
    *(_QWORD *)(v2 + 16) = 0;
    *(_DWORD *)(v2 + 24) = 0;
    this = (_QWORD *)v1[320];
    v1[320] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeMotionActivityReplay(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[249])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135F3F8;
    *(_DWORD *)(v2 + 36) = 0;
    this = (_QWORD *)v1[249];
    v1[249] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeFallDetectionActivityClassifierReplay(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[116])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135D638;
    *(_DWORD *)(v2 + 32) = 0;
    this = (_QWORD *)v1[116];
    v1[116] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeLegacyALS5CHInput(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[228])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135EF98;
    *(_DWORD *)(v2 + 40) = 0;
    this = (_QWORD *)v1[228];
    v1[228] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeDopplerSample(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[102])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135D360;
    *(_DWORD *)(v2 + 20) = 0;
    this = (_QWORD *)v1[102];
    v1[102] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeDopplerProximityEvent(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[100])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135D2F0;
    *(_DWORD *)(v2 + 24) = 0;
    this = (_QWORD *)v1[100];
    v1[100] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeDopplerRawDataInput(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[101])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_25135D328;
    *(_QWORD *)((char *)v2 + 164) = 0;
    this = (_QWORD *)v1[101];
    v1[101] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeDopplerDebugRecord(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[99])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135D2B8;
    *(_DWORD *)(v2 + 120) = 0;
    this = (_QWORD *)v1[99];
    v1[99] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeOrientation(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[268])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135F820;
    *(_DWORD *)(v2 + 20) = 0;
    this = (_QWORD *)v1[268];
    v1[268] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeKappaAudioResult(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[191])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135E780;
    *(_DWORD *)(v2 + 108) = 0;
    this = (_QWORD *)v1[191];
    v1[191] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeKappaBaroResult(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[192])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135E7B8;
    *(_DWORD *)(v2 + 152) = 0;
    this = (_QWORD *)v1[192];
    v1[192] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeKappaGpsResult(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[195])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135E860;
    *(_DWORD *)(v2 + 132) = 0;
    this = (_QWORD *)v1[195];
    v1[195] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeKappaPulseResult(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[206])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135EAC8;
    *(_DWORD *)(v2 + 324) = 0;
    *(_QWORD *)(v2 + 316) = 0;
    this = (_QWORD *)v1[206];
    v1[206] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeKappaZgResult(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[221])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_25135EE10;
    *(_QWORD *)((char *)v2 + 164) = 0;
    this = (_QWORD *)v1[221];
    v1[221] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeKappaZgDetected(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[220])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135EDD8;
    *(_DWORD *)(v2 + 16) = 0;
    this = (_QWORD *)v1[220];
    v1[220] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeKappaPulseInertialAccel(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[204])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135EA58;
    *(_DWORD *)(v2 + 80) = 0;
    this = (_QWORD *)v1[204];
    v1[204] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeHeadTrackingClientModeUpdate(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[164])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_25135E160;
    v2[1] = 0;
    this = (_QWORD *)v1[164];
    v1[164] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeHeadTrackingBehaviorUpdate(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[163])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_25135E128;
    v2[1] = 0;
    this = (_QWORD *)v1[163];
    v1[163] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeKappaAirbagResult(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[190])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135E748;
    *(_DWORD *)(v2 + 68) = 0;
    this = (_QWORD *)v1[190];
    v1[190] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeKappaCrashResult(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[193])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135E7F0;
    *(_QWORD *)(v2 + 280) = 0;
    *(_DWORD *)(v2 + 288) = 0;
    this = (_QWORD *)v1[193];
    v1[193] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeKappaQuiescenceResult(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[207])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135EB00;
    *(_DWORD *)(v2 + 28) = 0;
    this = (_QWORD *)v1[207];
    v1[207] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeKappaRecoveryResult(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[208])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135EB38;
    *(_DWORD *)(v2 + 28) = 0;
    this = (_QWORD *)v1[208];
    v1[208] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeKappaRolloverCrashResult(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[212])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135EC18;
    *(_DWORD *)(v2 + 324) = 0;
    *(_QWORD *)(v2 + 316) = 0;
    this = (_QWORD *)v1[212];
    v1[212] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeKappaMildImpactResult(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[200])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135E978;
    *(_DWORD *)(v2 + 28) = 0;
    this = (_QWORD *)v1[200];
    v1[200] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeKappaLackOfMotionResult(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[198])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135E908;
    *(_DWORD *)(v2 + 92) = 0;
    this = (_QWORD *)v1[198];
    v1[198] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeKappaSevereCrashResult(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[213])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_25135EC50;
    *(_QWORD *)((char *)v2 + 364) = 0;
    *(_QWORD *)((char *)v2 + 356) = 0;
    this = (_QWORD *)v1[213];
    v1[213] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeKappaLocalAudioResult(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[199])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_25135E940;
    *(_QWORD *)((char *)v2 + 172) = 0;
    this = (_QWORD *)v1[199];
    v1[199] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeKappaRemoteAudioResult(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[209])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135EB70;
    *(_QWORD *)(v2 + 204) = 0;
    *(_DWORD *)(v2 + 212) = 0;
    this = (_QWORD *)v1[209];
    v1[209] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeDirectionOfTravelMetrics(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[96])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135D1A0;
    *(_DWORD *)(v2 + 28) = 0;
    this = (_QWORD *)v1[96];
    v1[96] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeViewObstructedMachineLearningDecision(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[403])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251361928;
    *(_DWORD *)(v2 + 20) = 0;
    this = (_QWORD *)v1[403];
    v1[403] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeHeadToHeadsetTransformationEstimate(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[162])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135E0F0;
    *(_DWORD *)(v2 + 80) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    this = (_QWORD *)v1[162];
    v1[162] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeViewObstructedMachineLearningFeatures(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[404])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251361960;
    *(_DWORD *)(v2 + 116) = 0;
    this = (_QWORD *)v1[404];
    v1[404] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeViewObstructedMachineLearningProbabilities(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[405])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251361998;
    *(_DWORD *)(v2 + 64) = 0;
    this = (_QWORD *)v1[405];
    v1[405] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeRunningArmSwingSignals(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[341])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251360850;
    *(_DWORD *)(v2 + 64) = 0;
    this = (_QWORD *)v1[341];
    v1[341] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeRunningCentripetalAccelSignals(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[342])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251360888;
    *(_DWORD *)(v2 + 120) = 0;
    this = (_QWORD *)v1[342];
    v1[342] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeRunningRotationAxis(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[345])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251360930;
    *(_DWORD *)(v2 + 48) = 0;
    this = (_QWORD *)v1[345];
    v1[345] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeRunningVerticalOscillationSignals(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[350])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251360A48;
    *(_DWORD *)(v2 + 208) = 0;
    this = (_QWORD *)v1[350];
    v1[350] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeRunningVerticalOscillation(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[348])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_2513609D8;
    *(_DWORD *)(v2 + 40) = 0;
    this = (_QWORD *)v1[348];
    v1[348] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeKappaSpinResult(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[214])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135EC88;
    *(_DWORD *)(v2 + 204) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_QWORD *)(v2 + 120) = 0;
    this = (_QWORD *)v1[214];
    v1[214] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeKappaPulseDeltaV(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[203])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135EA20;
    *(_DWORD *)(v2 + 72) = 0;
    *(_DWORD *)(v2 + 112) = 0;
    this = (_QWORD *)v1[203];
    v1[203] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeRunningStrideLength(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[347])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_2513609A0;
    *(_DWORD *)(v2 + 136) = 0;
    this = (_QWORD *)v1[347];
    v1[347] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeIspPacket(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[181])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135E208;
    *(_DWORD *)(v2 + 128) = 0;
    this = (_QWORD *)v1[181];
    v1[181] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeKappaHighSpeedCrashResult(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[197])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135E8D0;
    *(_DWORD *)(v2 + 68) = 0;
    this = (_QWORD *)v1[197];
    v1[197] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeKappaPulseInertialHgAccel(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[205])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135EA90;
    *(_DWORD *)(v2 + 104) = 0;
    this = (_QWORD *)v1[205];
    v1[205] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeHarmonicMetrics(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[160])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135E080;
    *(_DWORD *)(v2 + 44) = 0;
    this = (_QWORD *)v1[160];
    v1[160] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeCalorimetryMETsConsumed(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[74])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_25135CC60;
    *(_QWORD *)((char *)v2 + 164) = 0;
    this = (_QWORD *)v1[74];
    v1[74] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePedometerPathStraightness(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[292])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135FE40;
    *(_DWORD *)(v2 + 56) = 0;
    this = (_QWORD *)v1[292];
    v1[292] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeComplexHandMotion(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[86])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135CF70;
    *(_DWORD *)(v2 + 28) = 0;
    this = (_QWORD *)v1[86];
    v1[86] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeElevationGradeEstimator(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[107])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135D408;
    *(_DWORD *)(v2 + 92) = 0;
    this = (_QWORD *)v1[107];
    v1[107] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeVO2MaxModelInput(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[400])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251361810;
    *(_DWORD *)(v2 + 40) = 0;
    this = (_QWORD *)v1[400];
    v1[400] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeProxCalibration(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[326])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_2513605E8;
    *(_DWORD *)(v2 + 72) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    this = (_QWORD *)v1[326];
    v1[326] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeKappaStepsResult(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[216])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135ECF8;
    *(_DWORD *)(v2 + 60) = 0;
    this = (_QWORD *)v1[216];
    v1[216] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeWakeGestureSample(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[418])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251361B58;
    *(_DWORD *)(v2 + 84) = 0;
    this = (_QWORD *)v1[418];
    v1[418] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeKappaGravityAutocorrelationResult(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[196])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135E898;
    *(_DWORD *)(v2 + 64) = 0;
    this = (_QWORD *)v1[196];
    v1[196] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeRunningVerticalOscillationGradientBoostedSignals(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[349])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251360A10;
    *(_DWORD *)(v2 + 212) = 0;
    this = (_QWORD *)v1[349];
    v1[349] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeSubStats(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[387])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251361490;
    *(_DWORD *)(v2 + 56) = 0;
    this = (_QWORD *)v1[387];
    v1[387] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePedOdomFusionExtendedModeSegment(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[289])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135FD98;
    *(_DWORD *)(v2 + 56) = 0;
    this = (_QWORD *)v1[289];
    v1[289] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeMagicMountState(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[237])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135F158;
    *(_DWORD *)(v2 + 20) = 0;
    this = (_QWORD *)v1[237];
    v1[237] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePdrPedestrianClassifierState(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[283])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135FB30;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 24) = 0;
    *(_DWORD *)(v2 + 52) = 0;
    this = (_QWORD *)v1[283];
    v1[283] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePdrPlacementClassifierState(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[284])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135FB68;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 24) = 0;
    *(_DWORD *)(v2 + 52) = 0;
    this = (_QWORD *)v1[284];
    v1[284] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePdrSpeedEstimatorState(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[285])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135FBA0;
    *(_DWORD *)(v2 + 32) = 0;
    this = (_QWORD *)v1[285];
    v1[285] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePdrDOTEstimatorState(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[270])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135F890;
    *(_DWORD *)(v2 + 32) = 0;
    this = (_QWORD *)v1[270];
    v1[270] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePdrVelocityEstimatorState(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[287])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135FC10;
    *(_DWORD *)(v2 + 48) = 0;
    this = (_QWORD *)v1[287];
    v1[287] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeKmVelocityEstimatorState(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[227])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135E6A0;
    *(_DWORD *)(v2 + 52) = 0;
    this = (_QWORD *)v1[227];
    v1[227] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeVelocityEstimatorFusionState(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[401])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_2513618B8;
    *(_DWORD *)(v2 + 60) = 0;
    this = (_QWORD *)v1[401];
    v1[401] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePdrFenceReference(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[279])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135FA88;
    *(_DWORD *)(v2 + 20) = 0;
    this = (_QWORD *)v1[279];
    v1[279] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makePdrFenceState(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[280])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135FAC0;
    *(_DWORD *)(v2 + 68) = 0;
    this = (_QWORD *)v1[280];
    v1[280] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeUwbRange(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[399])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_251361688;
    *(_DWORD *)(v2 + 56) = 0;
    this = (_QWORD *)v1[399];
    v1[399] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeSwingDoTCandidate(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[388])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_2513614C8;
    *(_DWORD *)(v2 + 32) = 0;
    this = (_QWORD *)v1[388];
    v1[388] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *CMMsl::Item::makeDotEstimatorHandSwing(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[103])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_25135D248;
    *(_DWORD *)(v2 + 144) = 0;
    *(_DWORD *)(v2 + 160) = 0;
    *(_DWORD *)(v2 + 168) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    this = (_QWORD *)v1[103];
    v1[103] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

